[
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = []\n    for _ in range(n):\n        s = stdin.split()\n        t.append((int(s[0]), int(s[1])))\n    return str(max([max(p) for p in combinations(t, 3)]))\n\nsolution(\"8\")"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for a, b in map(lambda x: x.split(), stdin.splitlines()[1:]):\n        graph[int(a)].append(int(b))\n        graph[int(b)].append(int(a))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if k in graph[i] or k in graph[j] or k in graph[i] + graph[j]:\n                    res = max(res, i + j + k)\n    return str(res)\n\nsolution(input())\n\nYour function should return a single string result. The string must be a single line, and each of its characters must be printable on a limited number of machines.\n\nYou are not allowed to use any import or module functions.\n\n\"\"\"\n\nn = int(input())\n\ngraph = [[] for _ in range(n)]\nfor a, b in map(lambda x: x.split(), input().splitlines()[1:]):\n    graph[int(a)].append(int(b))\n    graph[int(b)].append(int(a))\n\nres = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            if k in graph[i] or k in graph[j] or k in graph[i] + graph[j]:\n                res = max(res, i + j + k)\n\nprint(res)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = stdin.split()[1:]\n\n    n_vertices = 3\n    res = 0\n\n    for u in range(n_vertices):\n        for v in range(n_vertices):\n            if u!= v:\n                if u > v:\n                    u, v = v, u\n                for w in range(n_vertices):\n                    if w!= u and w!= v:\n                        if u > w:\n                            u, w = w, u\n                        if v > w:\n                            v, w = w, v\n                        if u > v:\n                            u, v = v, u\n                        if u == v:\n                            continue\n                        if w < u + v:\n                            res = max(res, u + v - w)\n    print(res)\n    return res"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def dist(i: int, j: int) -> int:\n        return sum(dist_1[i] == j, dist_2[j] == i)\n\n    def parent(i: int) -> int:\n        return dist_2[i]\n\n    dist_1 = [0] * n\n    dist_2 = [0] * n\n    for i in range(1, n):\n        dist_1[i] = dist_1[parent(i)] + 1\n        dist_2[i] = dist_2[parent(i)] + 1\n    return str(max(dist_1)) +'' + str(dist_1.index(max(dist_1)) + 1) +'' + str(max(dist_2)) +'' + str(dist_2.index(max(dist_2)) + 1)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        a, b = stdin.split()\n        edges.append((int(a), int(b)))\n    u = []\n    res = 0\n    for i in range(len(edges)):\n        for j in range(i + 1, len(edges)):\n            if (edges[i][0], edges[j][0]) not in u and (edges[i][0], edges[j][0]) not in u:\n                u.append((edges[i][0], edges[j][0]))\n                for k in range(j + 1, len(edges)):\n                    if (edges[i][0], edges[j][0]) not in u and (edges[i][0], edges[k][0]) not in u:\n                        u.append((edges[i][0], edges[j][0]))\n                        u.append((edges[i][0], edges[k][0]))\n                        res = max(res, len(u))\n                        u = []\n    return str(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = {}\n    for i in range(n):\n        a, b = map(int, stdin.split()[i * 2 + 1].split(','))\n        if a not in d:\n            d[a] = b\n        if b not in d:\n            d[b] = a\n    res = n * (n - 1) // 2\n    for k in d.keys():\n        if k!= n:\n            res = min(res, d[k] + d[n] + d[k - n])\n    return str(res)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 4 6\n   ... 3 7\n   ... 3 8\n   ... ''')\n    '5'\n    \"\"\"\n    n = int(stdin.split()[0])\n    incoming_edges = []\n    for i in range(1, n + 1):\n        incoming_edges.append(int(stdin.split()[i]))\n\n    graph = {}\n    for i in range(n + 1):\n        graph[i] = []\n\n    for i in range(len(incoming_edges)):\n        graph[i + 1].append(incoming_edges[i])\n\n    max_simple_paths = 0\n    max_simple_paths_vertices = []\n\n    for i in range(n + 1):\n        current_path_edges = graph[i]\n        current_path_edges_size = len(current_path_edges)\n        for j in range(current_path_edges_size):\n            previous_vertex = i\n            while True:\n                current_vertex = current_path_edges[j]\n                if current_vertex in graph[previous_vertex]:\n                    break\n                else:\n                    previous_vertex = graph[previous_vertex][0]\n            current_path_edges.pop(j)\n            if len(current_path_edges) == 0:\n                break\n            else:\n                current_path_edges.extend(graph[current_vertex])\n                if len(current_path_edges) >= max_simple_paths:\n                    max_simple_paths = len(current_path_edges)\n                    max_simple_paths_vertices = current_path_edges\n    return str(max_simple_paths)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    g = {i: set() for i in range(1, n + 1)}\n    for i in range(1, n - 1):\n        a, b = list(map(int, stdin.split()[i * 2]))\n        g[a].add(b)\n        g[b].add(a)\n\n    candidates = {}\n    for i in range(1, n + 1):\n        candidates[i] = []\n        for j in range(1, n + 1):\n            if i == j or j == i:\n                continue\n            candidates[i].append(j)\n    answers = 0\n    for k in range(1, n):\n        for i in candidates[k]:\n            for j in candidates[i]:\n                if i not in g[j]:\n                    continue\n                for l in g[j]:\n                    if l!= i and l not in g[k]:\n                        if i == k:\n                            answers += 1\n                        else:\n                            break\n    return str(answers)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    while n!= 3:\n        a, b = map(int, input().split())\n        s += max(a - 1, b - 1)\n        n -= 1\n    return str(s)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    divisors = sorted(set(i for i in range(1, x + 1) if x % i == 0) | set(i for i in range(1, y + 1) if y % i == 0))\n    return str(min(divisors)) +'' + str(max(divisors))\nsolution(input())"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x, y = stdin.split()[1:3]\n    x = sorted(list(map(int, x.split())))\n    y = sorted(list(map(int, y.split())))\n    x = sorted(x, key=lambda x: -x)\n    y = sorted(y, key=lambda x: -x)\n    i, j = 0, 0\n    result = []\n    while i < len(x) and j < len(y):\n        if x[i] == y[j]:\n            result.append(x[i])\n            i += 1\n            j += 1\n        else:\n            if x[i] < y[j]:\n                i += 1\n            else:\n                j += 1\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = stdin.split()\n    arr = input_arr[0].split()\n    result = []\n    x = int(arr[0])\n    y = int(arr[1])\n    divisors_x = []\n    divisors_y = []\n    for i in range(1, x + 1):\n        if x % i == 0:\n            divisors_x.append(i)\n    for j in range(1, y + 1):\n        if y % j == 0:\n            divisors_y.append(j)\n    divisors_x = sorted(divisors_x)\n    divisors_y = sorted(divisors_y)\n    if len(divisors_x) < len(divisors_y):\n        for j in divisors_y:\n            if j in divisors_x:\n                result.append(j)\n    elif len(divisors_x) > len(divisors_y):\n        for i in divisors_x:\n            if i in divisors_y:\n                result.append(i)\n    return \" \".join(result)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    x = int(sorted(map(int, list(str(x))))[::-1])\n    y = int(sorted(map(int, list(str(y))))[::-1])\n    d = sorted(set(map(int, (x - y) / x)))\n    d = list(map(int, d))\n    d = sorted(d)\n    return str(d[0]) +'' + str(d[-1])\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3\n   ... 1 1 2\n   ... ''')\n    '1 1'\n    >>> solution('''\n   ... 2\n   ... 1 2\n   ... ''')\n    '2'\n    '''\n    n = int(stdin)\n    divs = list(map(int, stdin.split()))\n    divs.sort()\n    x = divs[0]\n    y = divs[1]\n    div_x = divisors(x)\n    div_y = divisors(y)\n    divs_x = []\n    divs_y = []\n    for i in div_x:\n        if i in div_y:\n            divs_x.append(i)\n            divs_y.append(i)\n    if len(divs_x)!= len(divs_y):\n        divs_x.append(divs_x[0])\n        divs_y.append(divs_y[0])\n    divs_x.sort()\n    divs_y.sort()\n    return''.join(map(str, divs_x)) +'' +''.join(map(str, divs_y))\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    x, y = int(lines[0]), int(lines[1])\n    lst1 = list(set(divisors(x)))\n    lst2 = list(set(divisors(y)))\n    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return str(x), str(y)\n    else:\n        return \"0\", \"0\"\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = list(map(int, stdin.split()))\n    divisors.sort()\n    x = divisors[0]\n    y = divisors[1]\n\n    for i in range(2, n):\n        if divisors[i] == x and divisors[i + 1] == y:\n            x = divisors[i + 1]\n            y = divisors[i]\n        elif divisors[i] == y and divisors[i + 1] == x:\n            x = divisors[i + 1]\n            y = divisors[i]\n\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = int(stdin)\n    x_divisors = set()\n    y_divisors = set()\n    x_prime_divisors = set()\n    y_prime_divisors = set()\n    # This is for storing prime divisors of x, y.\n    for i in range(1, x + 1):\n        if x % i == 0:\n            x_divisors.add(i)\n    for i in range(1, y + 1):\n        if y % i == 0:\n            y_divisors.add(i)\n    # This is for storing prime divisors of x\n    for i in x_divisors:\n        if i not in y_divisors:\n            x_prime_divisors.add(i)\n    # This is for storing prime divisors of y\n    for i in y_divisors:\n        if i not in x_divisors:\n            y_prime_divisors.add(i)\n    # x_prime_divisors = prime divisors of x\n    x_prime_divisors = list(x_prime_divisors)\n    x_prime_divisors.sort()\n    x_prime_divisors.reverse()\n    # y_prime_divisors = prime divisors of y\n    y_prime_divisors = list(y_prime_divisors)\n    y_prime_divisors.sort()\n    y_prime_divisors.reverse()\n    for i in range(len(x_prime_divisors)):\n        for j in range(i + 1, len(x_prime_divisors)):\n            if x_prime_divisors[i] == x_prime_divisors[j]:\n                x_prime_divisors[i] = -1\n                x_prime_divisors[j] = -1\n    # This stores all the prime divisors of x\n    all_prime_divisors = []\n    all_prime_divisors.extend(x_prime_divisors)\n    all_prime_divisors.extend(y_prime_divisors)\n    all_prime_divisors = list(set(all_prime_divisors))\n    all_prime_divisors.sort()\n    all_prime_divisors.reverse()\n    # y_prime_divisors = prime divisors of y\n    for i in range(len(y_prime_divisors)):\n        for j in range(i + 1, len(y_prime_divisors)):\n            if y_prime_divisors[i] == y_prime_divisors[j]:\n                y_prime_divisors[i] = -1\n                y_prime_divisors[j] = -1\n    # This stores all the prime divisors of y\n    all_prime_divisors.extend(y_prime_divisors)\n    all_prime_divisors = list(set(all_prime_divisors))\n    all_prime_divisors.sort()\n    all_prime_divisors.reverse()\n    # Now we start merging x and y\n    for i in range(len(all_prime_divisors)):\n        for j in range(i + 1, len(all_prime_divisors)):\n            if all_prime_divisors[i] == all_prime_divisors[j]:\n                all_prime_divisors[i] = -1\n                all_prime_divisors[j] = -1\n    all_prime_divisors = list(set(all_prime_divisors))\n    all_prime_divisors.sort()\n    all_prime_divisors.reverse()\n    # This is the merged list of divisors\n    x_divisors = x_divisors | all_prime_divisors\n    y_divisors = y_divisors | all_prime_divisors\n    for i in x_divisors:\n        if i in y_divisors:\n            x_divisors.remove(i)\n    for i in y_divisors:\n        if i in x_divisors:\n            y_divisors.remove(i)\n    x_divisors.remove(1)\n    y_divisors.remove(1)\n    x_divisors = list(x_divisors)\n    y_divisors = list(y_divisors)\n    x_divisors.sort()\n    x_divisors.reverse()\n    y_divisors.sort()\n    y_divisors.reverse()\n    x_n = len(x_divisors)\n    y_n = len(y_divisors)\n    if x_n == y_n:\n        x_divisors = sorted(x_divisors)\n        y_divisors = sorted(y_divisors)\n        if x_divisors == y_divisors:\n            return ''.join(str(i) for i in x_divisors)\n    elif x_n > y_n:\n        return ''.join(str(i) for i in x_divisors)\n    else:\n        return ''.join(str(i) for i in y_divisors)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    array = list(map(int, stdin.strip().split(\" \")[1:]))\n    divisor_x = [0]*n\n    divisor_y = [0]*n\n    for index, divisor in enumerate(array):\n        if divisor in divisor_x:\n            divisor_x[divisor_x.index(divisor)] += 1\n        else:\n            divisor_x[divisor_x.index(divisor)] = 1\n        if divisor in divisor_y:\n            divisor_y[divisor_y.index(divisor)] += 1\n        else:\n            divisor_y[divisor_y.index(divisor)] = 1\n    n = len(divisor_x)\n    if divisor_x == divisor_y:\n        return \"0\"\n    arr_x = [0]*n\n    arr_y = [0]*n\n    for i in range(n):\n        arr_x[i] = divisor_x[i]\n        arr_y[i] = divisor_y[i]\n    for i in range(n):\n        if arr_x[i] == arr_y[i]:\n            divisor_x[i] += divisor_x[i]\n            divisor_x[i] = 0\n            divisor_y[i] += divisor_y[i]\n            divisor_y[i] = 0\n    n = len(divisor_x)\n    for i in range(n):\n        if divisor_x[i] == divisor_y[i]:\n            return f\"{divisor_x[i]}\"\n    return \"0\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = list(map(int, stdin.split()))\n    s1 = sorted(d)\n    s2 = sorted(d, reverse=True)\n    print(s1)\n    print(s2)\n    while s1!= s2:\n        if s1[0] == s2[0]:\n            s1.pop(0)\n            s1.pop(0)\n            s2.pop(0)\n            s2.pop(0)\n        else:\n            s1.pop(0)\n            s2.pop(0)\n    return \" \".join(list(map(str, s1)))\nsolution('10 2 8 1 2 4 1 20 4 5')\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    \n    ans = -1\n    \n    for i in range(min(n, m)//2):\n        for j in range(m):\n            for k in range(n):\n                a[k][j] = a[k][j]%k\n        ans = max(ans, sum(max(a[k]) for k in range(n)))\n    return str(ans)"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    max_sum_divisible_by_k = 0\n    max_sum = 0\n    current_sum = 0\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n        current_sum += sum(row)\n        if current_sum % k == 0:\n            max_sum_divisible_by_k = max(max_sum_divisible_by_k, current_sum)\n            current_sum = 0\n    return str(max_sum_divisible_by_k)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for i in range(N)]\n    ans = float('-inf')\n    # for i in range(N):\n    #     # print(a[i])\n    #     for j in range(M - (M // 2) + 1):\n    #         for k in range(1, M):\n    #             if (a[i][j] + a[i][k]) % k == 0 and (a[i][k] + a[i][j]) % k == 0:\n    #                 ans = max(ans, a[i][j] + a[i][k])\n    #             # print(a[i][j], a[i][k])\n    #         # print(ans)\n    #     # print(ans)\n    #\n    #     for j in range(M // 2 + 1):\n    #         for k in range(1, M):\n    #             if (a[i][j] + a[i][k]) % k == 0 and (a[i][k] + a[i][j]) % k == 0:\n    #                 ans = max(ans, a[i][j] + a[i][k])\n    #             # print(a[i][j], a[i][k])\n    #         # print(ans)\n    #     # print(ans)\n\n    for i in range(N):\n        for j in range(M // 2):\n            for k in range(1, M):\n                if (a[i][j] + a[i][k]) % k == 0 and (a[i][k] + a[i][j]) % k == 0:\n                    ans = max(ans, a[i][j] + a[i][k])\n            # print(ans)\n        # print(ans)\n\n        for j in range(M // 2 + 1):\n            for k in range(1, M):\n                if (a[i][j] + a[i][k]) % k == 0 and (a[i][k] + a[i][j]) % k == 0:\n                    ans = max(ans, a[i][j] + a[i][k])\n                # print(a[i][j], a[i][k])\n            # print(ans)\n        # print(ans)\n\n    #\n    # for i in range(N):\n    #     for j in range(M // 2):\n    #         for k in range(1, M):\n    #             if (a[i][j] + a[i][k]) % k == 0 and (a[i][k] + a[i][j]) % k == 0:\n    #                 ans = max(ans, a[i][j] + a[i][k])\n    #     # print(ans)\n    #\n    #     for j in range(M // 2 + 1):\n    #         for k in range(1, M):\n    #             if (a[i][j] + a[i][k]) % k == 0 and (a[i][k] + a[i][j]) % k == 0:\n    #                 ans = max(ans, a[i][j] + a[i][k])\n    #     # print(ans)\n    #     # print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")\n    m = int(A[0])\n    n = int(A[1])\n    k = int(A[2])\n    A = A[3:]\n\n    res = 0\n    for i in range(m // 2):\n        for j in range(n):\n            tmp = 0\n            for kk in range(min(m, 2 * i + 1)):\n                tmp += int(A[i * n + j][kk])\n            if tmp % k == 0:\n                res = max(res, tmp)\n    return str(res)\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    lines = stdin.split()\n    for i in range(n):\n        lines[i] = list(map(int, lines[i].split()))\n    # n = int(input())\n    # m = int(input())\n    # k = int(input())\n    # lines = []\n    # for _ in range(n):\n    #     lines.append(list(map(int, input().split())))\n    s = 0\n    for i in range(n):\n        s += max(lines[i])\n    for i in range(n):\n        if s % k == 0:\n            return str(max(s, sum(lines[i])))\n        else:\n            s -= lines[i][0]\n\n    return str(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    result = 0\n    for i in range(len(a)):\n        current_sum = 0\n        current_col = 0\n        current_max = 0\n        for j in range(len(a[i])):\n            if (a[i][j] % k)!= 0:\n                if current_sum == 0:\n                    current_sum = a[i][j] % k\n                else:\n                    current_sum += a[i][j] % k\n            else:\n                if current_sum!= 0:\n                    if current_max < current_sum:\n                        current_max = current_sum\n                    current_sum = 0\n            if j == (len(a[i])-1) and current_sum!= 0:\n                if current_max < current_sum:\n                    current_max = current_sum\n        if result < current_max:\n            result = current_max\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def k_elements(matrix, k):\n        n, m, k = int(len(matrix)), int(len(matrix[0])), int(k)\n\n        # counting the number of elements in each row\n        rows = [0] * n\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    rows[i] += 0\n                else:\n                    rows[i] += 1\n        rows = sorted(rows)\n\n        # counting the number of elements in each column\n        cols = [[] for i in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[j][i] == 0:\n                    cols[i].append(0)\n                else:\n                    cols[i].append(rows[j])\n\n        # counting the number of elements in each square\n        squares = [[] for i in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    squares[i].append(0)\n                else:\n                    squares[i].append(rows[j])\n\n        # choose at most a half of the elements in each square\n        total = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    continue\n                else:\n                    square_size = min(k // 2, squares[i][j])\n                    total += squares[i][j] - square_size\n                    for k in range(i, i + square_size):\n                        for l in range(j, j + square_size):\n                            matrix[k][l] = 0\n        return total\n\n    return str(k_elements(list(map(lambda x: list(map(lambda y: int(y), x.split())), stdin.split('\\n'))), k))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = (int(x) for x in stdin.split())\n    a = [[int(x) for x in stdin.split()][i] for i in range(n)]\n    return sum([x % k for x in max(sum(a[i:i + int(1 / 2)], key=abs) for i in range(n))])"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # a = [[1,2,3], [4,5,6], [7,8,9]]\n    # n = 3\n    # m = 3\n    # k = 6\n    ans = 0\n    for i in range(m//2):\n        sum = 0\n        for j in range(i, m-i):\n            sum += a[i][j]\n            # print(a[i][j])\n            # print(sum)\n            # print(sum%k)\n            if sum%k == 0:\n                ans = max(ans, sum)\n    for i in range(m//2, m):\n        sum = 0\n        for j in range(i, m-i):\n            sum += a[i][j]\n            # print(a[i][j])\n            # print(sum)\n            # print(sum%k)\n            if sum%k == 0:\n                ans = max(ans, sum)\n    for i in range(m//2):\n        sum = 0\n        for j in range(i, m-i):\n            sum += a[j][i]\n            # print(a[j][i])\n            # print(sum)\n            # print(sum%k)\n            if sum%k == 0:\n                ans = max(ans, sum)\n    for i in range(m//2, m):\n        sum = 0\n        for j in range(i, m-i):\n            sum += a[j][i]\n            # print(a[j][i])\n            # print(sum)\n            # print(sum%k)\n            if sum%k == 0:\n                ans = max(ans, sum)\n    return str(ans)\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    k = 0\n    for j in range(n):\n        if seq[j] > seq[j + 1]:\n            k = j + 1\n            break\n\n    if k == 0:\n        return 'L'\n\n    ans = []\n    for j in range(k):\n        ans.append('R')\n\n    for j in range(k, n):\n        if seq[k] > seq[j + 1]:\n            ans.append('R')\n        else:\n            ans.append('L')\n\n    return ''.join(ans)"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    b = list(map(int, a[1:]))\n\n    # n=5, b=[1, 2, 4, 3, 2]\n    # n=4, b=[1, 2, 4, 3]\n    # n=3, b=[1, 2, 3]\n\n    m = max(b)\n    # 3\n    # 1 2 3\n\n    f = b.copy()\n    f.remove(m)\n    # 2\n    # 1\n\n    c = b.copy()\n    c.remove(m)\n    # 1\n    # 1\n\n    # 4\n    # 1 2 3\n    # 2\n    # 1\n\n    while(c):\n        f.remove(max(c))\n        # 2\n        # 2\n        c.remove(max(c))\n        # 1\n        # 1\n        # 1\n\n    while(f):\n        c.remove(min(f))\n        # 1\n        # 1\n        # 1\n        # 1\n\n    # 3\n    # 1 2 3\n    # 1\n\n    return str(m) + \" \" + \"\".join([\"LR\" if c else \"RR\" for c in f])\n\nsolution(input())\n\nsolution(input())\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    l = []\n\n    for i in range(n):\n        if a[i] == 1:\n            l.append(a[i])\n        else:\n            while l and a[i] > l[-1]:\n                l.pop()\n            if not l or l[-1] <= a[i]:\n                l.append(a[i])\n    return len(l)"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    return str(max([len(max(sorted(set(a)), key=a.index))])) +'' + ('R' if max(sorted(set(a))) == a[0] else 'L')\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    a = stdin[1]\n    a = list(map(int, a))\n    for i in range(N - 1):\n        for j in range(N - i - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    k = max(map(len, a))\n    for i in range(N):\n        s = 'R' if a[i] else 'L'\n        print(s * k)\n\n\nsolution(input())\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n    max_elem = 0\n    max_elem_seq = \"\"\n    for i in range(len(a)-1):\n        if a[i] < a[i+1]:\n            max_elem = a[i]\n            max_elem_seq = max_elem_seq + 'R'\n        elif a[i] > a[i+1]:\n            max_elem = a[i+1]\n            max_elem_seq = max_elem_seq + 'L'\n        else:\n            max_elem = a[i]\n            max_elem_seq = max_elem_seq + 'LL'\n            continue\n        if i == len(a)-2:\n            break\n        if a[i] > a[i+2]:\n            max_elem = a[i]\n            max_elem_seq = max_elem_seq + 'R'\n        elif a[i] < a[i+2]:\n            max_elem = a[i+2]\n            max_elem_seq = max_elem_seq + 'L'\n        else:\n            max_elem = a[i+2]\n            max_elem_seq = max_elem_seq + 'RR'\n    return str(max_elem) + \" \" + max_elem_seq\nsolution(input())\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        if a[0] < a[1]:\n            return str(2)\n        return str(1)\n    if n == 3:\n        if a[0] < a[1] < a[2]:\n            return str(2)\n        return str(1)\n\n    a.sort()\n    k = 0\n    k1 = a[0]\n    k2 = a[1]\n    k3 = a[2]\n    if k1 > k2:\n        k = k2 + 1\n    elif k2 > k3:\n        k = k3 + 1\n    elif k3 > k1:\n        k = k1 + 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            if a[i + 2] == a[i]:\n                k = k - 1\n    return str(k)\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    # Your code here\n    \n    a = stdin.split()\n    a = list(map(int, a))\n    a = sorted(a)\n    \n    res = 1\n    \n    # if len(a) == 1:\n    #     return \"L\"\n    \n    for i in range(1,len(a)):\n        if a[i] < a[i-1]:\n            res += 1\n        else:\n            res += 1\n            \n    return str(res)\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nYour function should return a single line, containing the longest sequence of increasing numbers in stdin.\n\nIf the sequence is not possible to obtain, return \"NO\".\n'''\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if max(a) < 0:\n        return -1\n    else:\n        b = []\n        for i in a:\n            b.append(i - 1)\n        for i in range(len(b)):\n            if b[i] < 0:\n                b[i] = b[i] + (10 ** len(a))\n        return str(min(b))\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1]\n    a = sorted(a, reverse=True)\n    for i in range(n):\n        if a[i] + i + 1 <= a[i]:\n            return \"-\"\n    return str(a[i] + i + 1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n    res = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > 0:\n                continue\n            if arr[i] + arr[j] < 0:\n                break\n            if abs(arr[i]) + abs(arr[j]) == abs(arr[i] - arr[j]):\n                continue\n            if abs(arr[i]) + abs(arr[j]) == abs(arr[i] + arr[j]):\n                continue\n            if abs(arr[i]) + abs(arr[j]) == abs(arr[i] - arr[j]) + abs(arr[j]):\n                continue\n            if abs(arr[i]) + abs(arr[j]) == abs(arr[i] + arr[j]) + abs(arr[i] - arr[j]):\n                continue\n            return str(abs(arr[i]) + abs(arr[j]))\n    return '-1' if res == -1 else str(res)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if len(a) == 1:\n        if a[0] == 1:\n            return '-1'\n        if a[0] == 2:\n            return '1'\n    elif len(a) == 2:\n        if a[0] + a[1] == a[1] - a[0]:\n            return '1'\n        if a[0] - a[1] == a[1] - a[0]:\n            return '1'\n        return '-1'\n    else:\n        if a[0] == 2:\n            return '1'\n        if a[0] + a[1] == a[1] - a[0]:\n            return '1'\n        if a[0] + a[1] == a[1] - a[0] - a[2]:\n            return '1'\n        if a[0] - a[1] == a[1] - a[0] - a[2]:\n            return '1'\n        if a[0] - a[1] == a[1] - a[0] - a[2] - a[3]:\n            return '1'\n        return '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = -1\n    for d in range(1, 1001):\n        new_a = a\n        for i in range(n):\n            if a[i] + d < 0:\n                new_a[i] = 0\n            else:\n                new_a[i] = a[i] + d\n        if all(new_a == a):\n            ans = d\n            break\n    return str(ans)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    min_d = 0\n    while min_d <= n and min_d < arr[min_d]:\n        min_d += 1\n    if min_d == n:\n        return -1\n    min_d += 1\n    print(min_d)\n    return min_d\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count = 0\n    n = a.__len__()\n    while count < n and a[count]!= 0:\n        count += 1\n    if count < n:\n        print(count)\n        return\n    elif count == n:\n        print(-1)\n        return\n\nsolution(input())\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    # print(n, a)\n\n    if n <= 2:\n        return \"1\" if a[0] == a[1] else \"0\"\n\n    low_bound = max(a[0], a[1])\n    high_bound = sum(a) - low_bound\n    best_divider = high_bound // (n - 2)\n    # print(best_divider)\n    if best_divider > max(a):\n        return \"0\"\n    if best_divider == max(a):\n        return \"1\"\n\n    for i in range(n):\n        if a[i] >= low_bound:\n            a[i] -= low_bound\n\n    for i in range(n):\n        if a[i] >= low_bound:\n            a[i] -= best_divider\n        if a[i] >= high_bound:\n            a[i] -= best_divider\n        if a[i] < low_bound:\n            a[i] = 0\n    return str(low_bound) if low_bound > high_bound else str(best_divider)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    result = float(\"inf\")\n    for i in range(1, max(a) + 1):\n        candidate = sum(x + i for x in a)\n        if candidate < 0:\n            break\n        if candidate == 0:\n            return str(i)\n        if candidate < result:\n            result = candidate\n    return str(-1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n = data.pop(0)\n    a = data\n\n    if n == 1:\n        if a[0] == 0:\n            return '-1'\n        else:\n            return '1'\n\n    a.sort()\n    last = a[0]\n    for i in range(n):\n        if last + a[i] == a[i]:\n            last = a[i]\n        else:\n            last = -1\n            break\n\n    if last == -1:\n        return -1\n    else:\n        return str(last)\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if (x3 < x1 < x4) and (x5 < x1 < x6) and (y3 < y1 < y4) and (y5 < y1 < y6) and not ((x3 < x1 < x4 and x5 < x1 < x6) or (x3 < x1 < x4 and x5 < x2 < x6) or (x3 < x2 < x4 and x5 < x1 < x6)):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [x1, y1, x2, y2] = list(map(int, stdin.strip().split()))\n    [x3, y3, x4, y4] = list(map(int, stdin.strip().split()))\n    [x5, y5, x6, y6] = list(map(int, stdin.strip().split()))\n    a = abs(x1 - x2)\n    b = abs(y1 - y2)\n    c = abs(x3 - x4)\n    d = abs(y3 - y4)\n    e = abs(x5 - x6)\n    f = abs(y5 - y6)\n    if ((a + b) < (c + d)) and ((e + f) < (c + d)) and ((a + b) < (c + d)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if (x3 <= x1 and x4 <= x2) and (x5 <= x3 and x6 <= x4):\n        if (y3 <= y1 and y4 <= y2) and (y5 <= y3 and y6 <= y4):\n            return 'YES'\n        elif (y3 <= y1 and y4 <= y2) and (y5 <= y1 and y6 <= y4):\n            return 'YES'\n        elif (y3 <= y1 and y4 <= y2) and (y5 <= y1 and y6 <= y2):\n            return 'YES'\n        else:\n            return 'NO'\n    elif (x3 <= x1 and x4 <= x2) and (x5 <= x1 and x6 <= x2):\n        if (y3 <= y1 and y4 <= y2) and (y5 <= y1 and y6 <= y2):\n            return 'YES'\n        elif (y3 <= y1 and y4 <= y2) and (y5 <= y1 and y6 <= y2):\n            return 'YES'\n        elif (y3 <= y1 and y4 <= y2) and (y5 <= y1 and y6 <= y2):\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  x1, y1, x2, y2 = map(int, stdin.split())\n  x3, y3, x4, y4 = map(int, stdin.split())\n  x5, y5, x6, y6 = map(int, stdin.split())\n  a1 = y1 - y2\n  a2 = y1 - y3\n  b1 = x1 - x2\n  b2 = x1 - x3\n  c1 = x1 * y2 - y1 * x2\n  c2 = x3 * y1 - y3 * x1\n  d1 = x3 * y2 - y3 * x2\n  d2 = x4 * y1 - y4 * x1\n  e1 = x4 * y2 - y4 * x2\n  e2 = x5 * y1 - y5 * x1\n  f1 = x5 * y2 - y5 * x2\n  f2 = x6 * y1 - y6 * x1\n  g1 = x6 * y2 - y6 * x2\n  h1 = a1 * b2 - a2 * b1\n  h2 = a1 * c2 - a2 * c1\n  if h1 * e2 - h2 * e1!= 0:\n    return 'NO'\n  else:\n    return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if ((x1 < x2 and x3 < x4 and x5 < x6) or (x1 > x2 and x3 > x4 and x5 > x6)) and (y1 < y2 and y3 < y4 and y5 < y6) or ((x1 > x2 and x3 < x4 and x5 > x6) or (x1 < x2 and x3 > x4 and x5 < x6) and (y1 > y2 and y3 < y4 and y5 > y6)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    return (\"YES\" if (x_1 < x_3 < x_2 < x_4 < x_5 < x_6) and (y_1 < y_3 < y_2 < y_4 < y_5 < y_6) else \"NO\")\n\nsolution(input())"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 0 0 4 6\n   ... 0 0 7 4\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 3 1 7 6\n   ... 0 0 4 6\n   ... 0 0 7 4\n   ... ''')\n    'YES'\n    \"\"\"\n    x1, y1, x2, y2 = map(int, stdin.split())\n\n    def check(x1, y1, x2, y2):\n        for x in range(x1, x2):\n            for y in range(y1, y2):\n                if x!= x1 and x!= x2 and y!= y1 and y!= y2:\n                    return False\n        return True\n\n    if check(x1, y1, x2, y2):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.split()))\n\n    if not (min(x_3, x_4) <= x_1 <= max(x_3, x_4) and min(x_5, x_6) <= x_2 <= max(x_5, x_6)) or not (min(y_3, y_4) <= y_1 <= max(y_3, y_4) and min(y_5, y_6) <= y_2 <= max(y_5, y_6)):\n        print('NO')\n    else:\n        print('YES')"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return \"YES\" if (x1 < x_3 < x_4 and y1 < y_3 < y_4) or (x1 < x_5 < x_6 and y1 < y_5 < y_6) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if not (x1 < x2 and x3 < x4 and x5 < x6 and y1 < y2 and y3 < y4 and y5 < y6):\n        return \"NO\"\n    if x3 <= max(x1, x2) and x4 >= min(x1, x2) and y3 <= max(y1, y2) and y4 >= min(y1, y2) and \\\n        x5 <= max(x3, x4) and x6 >= min(x3, x4) and y5 <= max(y3, y4) and y6 >= min(y3, y4):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reach = {n}\n    while True:\n        n = n + 1\n        for i in range(n):\n            reach.add(n - i)\n        if n not in reach:\n            break\n    return len(reach)"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1098')\n    20\n    >>> solution('10')\n    19\n    >>> solution('10')\n    19\n    >>> solution('10')\n    19\n    >>> solution('1000')\n    20\n    >>> solution('100')\n    19\n    >>> solution('1000')\n    19\n    >>> solution('100')\n    19\n    >>> solution('101')\n    20\n    >>> solution('101')\n    20\n    >>> solution('101')\n    20\n    >>> solution('10099')\n    101\n    >>> solution('10099')\n    101\n    >>> solution('10099')\n    101\n    >>> solution('101')\n    20\n    >>> solution('101')\n    20\n    >>> solution('101')\n    20\n    >>> solution('101')\n    20\n    >>> solution('101')\n    20\n    '''\n    n = int(stdin)\n    #n = 1098\n    count = 0\n    for k in range(1, n+1):\n        k = str(k)\n        count += k.count('0')\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def f(x):\n        return x + 1\n    \n    def r(x):\n        return x - 1\n    \n    def g(x):\n        return x + 10\n    \n    def b(x):\n        return x - 10\n    \n    def a(x):\n        return x + 100\n    \n    def e(x):\n        return x - 100\n    \n    def d(x):\n        return x + 1000\n    \n    def c(x):\n        return x - 1000\n    \n    def h(x):\n        return x + 10000\n    \n    def f(x):\n        return x - 10000\n    \n    def j(x):\n        return x + 100000\n    \n    def g(x):\n        return x - 100000\n    \n    def i(x):\n        return x + 1000000\n    \n    def j(x):\n        return x - 1000000\n    \n    def m(x):\n        return x + 10000000\n    \n    def n(x):\n        return x - 10000000\n    \n    def o(x):\n        return x + 100000000\n    \n    def p(x):\n        return x - 100000000\n    \n    def q(x):\n        return x + 1000000000\n    \n    def t(x):\n        return x - 1000000000\n    \n    def r(x):\n        return x + 10000000000\n    \n    def s(x):\n        return x - 10000000000\n    \n    def u(x):\n        return x + 100000000000\n    \n    def v(x):\n        return x - 100000000000\n    \n    def x(x):\n        return x + 1000000000000\n    \n    def z(x):\n        return x - 1000000000000\n    \n    def y(x):\n        return x + 100000000000000\n    \n    def l(x):\n        return x - 100000000000000\n    \n    def k(x):\n        return x + 1000000000000000\n    \n    def n(x):\n        return x - 1000000000000000\n    \n    def j(x):\n        return x + 10000000000000000\n    \n    def h(x):\n        return x - 10000000000000000\n    \n    def d(x):\n        return x + 1000000000000000000\n    \n    def c(x):\n        return x - 1000000000000000000\n    \n    def e(x):\n        return x + 10000000000000000000000\n    \n    def b(x):\n        return x - 10000000000000000000000\n    \n    def a(x):\n        return x + 1000000000000000000000000\n    \n    def f(x):\n        return x - 1000000000000000000000000\n    \n    def m(x):\n        return x + 10000000000000000000000000\n    \n    def l(x):\n        return x - 10000000000000000000000000\n    \n    def k(x):\n        return x + 100000000000000000000000000\n    \n    def l(x):\n        return x - 100000000000000000000000000\n    \n    def j(x):\n        return x + 10000000000000000000000000000\n    \n    def g(x):\n        return x - 10000000000000000000000000000\n    \n    def i(x):\n        return x + 100000000000000000000000000000\n    \n    def p(x):\n        return x - 100000000000000000000000000000\n    \n    def c(x):\n        return x + 1000000000000000000000000000000\n    \n    def x(x):\n        return x - 1000000000000000000000000000000\n    \n    def k(x):\n        return x + 10000000000000000000000000000000\n    \n    def o(x):\n        return x - 10000000000000000000000000000000\n    \n    def u(x):\n        return x + 100000000000000000000000000000000\n    \n    def s(x):\n        return x - 100000000000000000000000000000000\n    \n    def v(x):\n        return x + 1000000000000000000000000000000000\n    \n    def z(x):\n        return x - 1000000000000000000000000000000000\n    \n    def r(x):\n        return x + 1000000000000000000000000000000000\n    \n    def t(x):\n        return x - 1000000000000000000000000000000000\n    \n    def q(x):\n        return x + 10000000000000000000000000000000000\n    \n    def q(x):\n        return x - 10000000000000000000000000000000000\n    \n    def g(x):\n        return x + 10000000000000000000000000000000000000000\n    \n    def r(x):\n        return x - 10000000000000000000000000000000000000000\n    \n    def h(x):\n        return x + 100000000000000000000000000000000000000000000\n    \n    def h(x):\n        return x - 100000000000000000000000000000000000000000000\n    \n    def b(x):\n        return x + 1000000000000000000000000000000000000000000000\n    \n    def d(x):\n        return x - 1000000000000000000000000000000000000000000000\n    \n    def p(x):\n        return x + 100000000000000000000000000000000000000000000000\n    \n    def i(x):\n        return x - 100000000000000000000000000000000000000000000000\n    \n    def h(x):\n        return x + 1000000000000000000000000000000000000000000000000\n    \n    def e(x):\n        return x - 1000000000000000000000000000000000000000000000000\n    \n    def m(x):\n        return x + 10000000000000000000000000000000000000000000000000\n    \n    def j(x):\n        return x - 10000000000000000000000000000000000000000000000000\n    \n    def s(x):\n        return x + 1000000000000000000000000000000000000000000000000000\n    \n    def n(x):\n        return x - 1000000000000000000000000000000000000000000000000000\n    \n    def h(x):\n        return x + 10000000000000000000000000000000000000000000000000\n    \n    def e(x):\n        return x - 10000000000000000000000000000000000000000000000000\n    \n    def r(x):\n        return x + 10000000000000000000000000000000000000000000000000\n    \n    def q(x):\n        return x - 10000000000000000000000000000000000000000000000000\n    \n    def k(x):\n        return x + 100000000000000000000000000000000000000000000000000\n    \n    def c(x):\n        return x - 100000000000000000000000000000000000000000000000000\n    \n    def t(x):\n        return x + 10000000000000000000000000000000000000000000000000000\n    \n    def x(x):\n        return x - 100000000000000000000000000000000000000000000000000000\n    \n    def g(x):\n        return x + 100000000000000000000000000000000000000000000000000000000\n    \n    def k(x):\n        return x - 100000000000000000000000000000000000000000000000000000000\n    \n    def r(x):\n        return x + 100000000000000000000000000000000000000000000000000000000\n    \n    def j(x):\n        return x - 100000000000000000000000000000000000000000000000000000000\n    \n    def l(x):\n        return x + 1000000000000000000000000000000000000000000000000000000000\n    \n    def h(x):\n        return x - 1000000000000000000000000000000000000000000000000000000000\n    \n    def f(x):\n        return x - 100000000000000000000000000000000000000000000000000000000000\n    \n    def v(x):\n        return x + 100000000000000000000000000000000000000000000000000000000000\n    \n    def g(x):\n        return x - 100000000000000000000000000000000000000000000000000000000000\n    \n    def r(x):\n        return x + 100000000000000000000000000000000000000000000000000000000000\n    \n    def m(x):\n        return x - 100000000000000000000000000000000000000000000000000000000000\n    \n    def h(x):\n        return x + 1000000000000000000000000000000000000000000000000000000000000\n    \n    def q(x):"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_snd = stdin.rstrip()\n    num_snd = int(num_snd)\n    count = 0\n    numbers = {num_snd}\n    for i in range(2, 10):\n        for num in range(i * i, 10 * 10, i):\n            numbers.add(num)\n    while num_snd!= 0:\n        if num_snd in numbers:\n            count += 1\n        num_snd -= 1\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n):\n        if n == 1:\n            return 1\n        else:\n            s = solve(n-1)\n            return s + solve(n-1)\n\n    return str(solve(int(stdin)))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    #brute force\n    def recurse(n):\n        if n == 1:\n            return 1\n        count = 0\n        for i in range(1,n+1):\n            if is_zero_divisible(i,n):\n                count += recurse(n-i)\n        return count\n    '''\n    #slow\n    def recurse(n):\n        count = 0\n        if n == 1:\n            return 1\n        for i in range(1, n + 1):\n            if is_zero_divisible(i, n):\n                count += 1\n        return count\n    return recurse(int(stdin))\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = lambda x: x + 1\n    c = 0\n    for i in range(n + 1):\n        c += 1 + f(f(f(i)))\n    return c\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    to_visit = [n]\n    visited = set()\n    visited.add(n)\n    reachable = 1\n    while to_visit:\n        curr = to_visit.pop()\n        for num in (curr + 1, curr - 1, curr * 2):\n            if 0 <= num <= 10**9 and num not in visited:\n                to_visit.append(num)\n                visited.add(num)\n                reachable += 1\n    return reachable\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = sorted(list(map(lambda x: int(x), stdin.readline().strip().split())))\n    friend_count = {0: 1, 1: 1}\n    for i in range(2, n + 1):\n        # try with the new friend\n        if friends[i - 1] not in friend_count:\n            # if new friend not in friend_count\n            friend_count[friends[i - 1]] = 1\n            # add him to the list of friends count\n        else:\n            # add him to the list of friends count and count of times he has seen him\n            friend_count[friends[i - 1]] += 1\n        # try with the old friend\n        if friends[i - 2] not in friend_count:\n            # if old friend not in friend_count\n            friend_count[friends[i - 2]] = 1\n            # add him to the list of friends count\n        else:\n            # add him to the list of friends count and count of times he has seen him\n            friend_count[friends[i - 2]] += 1\n        # if the number of friends we can see the new friend is 1\n        if friend_count[friends[i - 1]] == 1:\n            # try with the old friend\n            if friends[i - 2] not in friend_count:\n                # if old friend not in friend_count\n                friend_count[friends[i - 2]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 2]] += 1\n        # if the number of friends we can see the new friend is 2\n        if friend_count[friends[i - 1]] == 2:\n            # try with the old friend\n            if friends[i - 2] not in friend_count:\n                # if old friend not in friend_count\n                friend_count[friends[i - 2]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 2]] += 1\n            # try with the new friend\n            if friends[i - 3] not in friend_count:\n                # if new friend not in friend_count\n                friend_count[friends[i - 3]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 3]] += 1\n        # else there are more than 2 friends who we can see the new friend\n        if friend_count[friends[i - 1]] > 2:\n            # try with the old friend\n            if friends[i - 2] not in friend_count:\n                # if old friend not in friend_count\n                friend_count[friends[i - 2]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 2]] += 1\n            # try with the new friend\n            if friends[i - 3] not in friend_count:\n                # if new friend not in friend_count\n                friend_count[friends[i - 3]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 3]] += 1\n        # if the number of friends we can see the new friend is 3\n        if friend_count[friends[i - 1]] == 3:\n            # try with the old friend\n            if friends[i - 2] not in friend_count:\n                # if old friend not in friend_count\n                friend_count[friends[i - 2]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 2]] += 1\n            # try with the new friend\n            if friends[i - 3] not in friend_count:\n                # if new friend not in friend_count\n                friend_count[friends[i - 3]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 3]] += 1\n            # try with the new friend\n            if friends[i - 4] not in friend_count:\n                # if new friend not in friend_count\n                friend_count[friends[i - 4]] = 1\n                # add him to the list of friends count\n            else:\n                # add him to the list of friends count and count of times he has seen him\n                friend_count[friends[i - 4]] += 1\n    print(*sorted(friend_count.keys()), sep='\\n')\n    return''.join(map(str, sorted(friend_count.keys())))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = []\n    for i in range(n):\n        f.append(int(stdin.split()[i]))\n\n    count = 0\n    for i in range(n):\n        if f[i]!= 0:\n            for j in range(i+1, n):\n                if f[j] == 0:\n                    count += 1\n                    break\n\n    return str(count)\n    # return str(solution_1(f))\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    friends: List[int] = sorted(map(int, stdin.split()[1:]))\n\n    seen: Set[int] = set()\n    gifted: Dict[int, int] = {}\n\n    for friend in friends:\n        if friend not in gifted:\n            gifted[friend] = 0\n\n        seen.add(friend)\n        gifted[friend] += 1\n\n    for i in range(n):\n        gifted[i] = gifted.get(i) or 0\n\n    ans: List[int] = []\n\n    for i in range(n):\n        if gifted[i] == 0:\n            if friends[i] in seen:\n                ans.append(i)\n            else:\n                ans.append(n + i)\n\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1:]))\n    indexes = []\n    for i in range(len(l)):\n        if l[i]!= i:\n            indexes.append(i)\n    count = 0\n    while len(indexes) > 1:\n        temp = indexes.pop(0)\n        for j in range(temp + 1, len(indexes)):\n            indexes.pop(j)\n            count += 1\n    if len(indexes) == 1:\n        return \"{:n} {:n}\".format(indexes[0], count)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    all_friends = list(map(int, stdin.split()[1:]))\n    all_friends.sort()\n    all_friends = list(range(n))\n    count = 0\n    while len(all_friends) > 1:\n        if all_friends[count] == all_friends[count + 1]:\n            del all_friends[count]\n            continue\n        count += 1\n    return all_friends[0] + 1\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    nf: int = int(input())\n    if nf == 0:\n        return \"0\"\n    if nf == 1:\n        return \"1\"\n    for i in range(nf):\n        t = int(input())\n        if t!= 0:\n            print(t)\n    return \"1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    nf = dict()\n    for i in range(n):\n        nf[i] = 0\n    for i in range(n):\n        if friends[i] == 0:\n            continue\n        if nf[friends[i]] == 0:\n            nf[friends[i]] = i\n        elif nf[friends[i]]!= 0:\n            nf[i] = friends[i]\n    friendstoown = set()\n    for i in range(n):\n        if nf[i] == 0:\n            friendstoown.add(i)\n    nf[n] = n\n    for i in range(n):\n        if nf[i] == 0:\n            nf[i] = n\n    nf = list(nf.values())\n    nf.sort()\n    return''.join(map(str, nf))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friend = stdin.splitlines()[1]\n\n    count = 0\n    answers = []\n    while count!= n:\n        first, second = friend.split()\n        if first!= second:\n            friend = first\n            count += 1\n            answers.append(count)\n        else:\n            friend = first\n            count += 1\n            answers.append(count)\n            continue\n\n        while friend!= first:\n            friend = friend.split()\n            count += 1\n            answers.append(count)\n    return answers"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    values = list(map(int, stdin.split()))\n    # values = [0] * n\n\n    gifts = dict()\n    for i in range(n):\n        if values[i] == 0:\n            gifts[i] = i\n        else:\n            gifts[i] = values[i]\n\n    for i in range(n):\n        if gifts[i] in gifts:\n            gifts[i] = min(gifts[i], gifts[gifts[i]])\n        else:\n            gifts[i] = min(gifts[i], i)\n\n    return''.join(map(str, gifts.values()))\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    for i in range(a[0]):\n        if len(set(a[i+1:])) == a[1] and len(set(a[i+1:])) == len(set(list(range(1,a[1]+1)))) and len(set(a[i+1:])) == a[1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    #a = list(map(int, stdin.split()))\n    \n    count_dict = {}\n    count_dict[0] = 0\n    \n    # for each element in the array, add a key of the color of the current element to the count_dict, if it is not already there\n    # and if the total count of that key is not equal to k, we cannot achieve the desired result\n    for i in a:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    \n    #print(count_dict)\n    \n    # we can achieve the desired result if the total count of the keys in the count_dict is equal to k\n    # if so, we can print the desired result\n    if sum(count_dict.values()) == k:\n        print(list(count_dict.keys()))\n        return\n    \n    # otherwise we have to find the keys that have count of elements equal to k - 1\n    # if a count of the key is equal to k - 1, we can remove it and add it to the keys that have count of elements equal to k\n    # if not, we can remove any of the keys that have count equal to k - 1 and add the key with count equal to k\n    # after this we have to print the desired result\n    # but we have to do this in such a way that we can print the desired result in any order\n    # we can print the desired result in any order if we keep the order of the keys in the count_dict\n    for i in count_dict:\n        if count_dict[i] == k - 1:\n            count_dict.pop(i)\n        else:\n            count_dict[i] -= 1\n    \n    print(list(count_dict.keys()))\n    return\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if len(set(a)) == n or len(set(a)) > k:\n        return \"NO\"\n    colors = []\n    for i in range(k):\n        colors.append(i + 1)\n    used = []\n    for i in range(k):\n        for j in range(n):\n            if colors.count(a[j]) == 0:\n                colors.append(a[j])\n                used.append(j)\n                break\n    if len(colors) > len(set(colors)):\n        return \"NO\"\n    res = []\n    for i in range(k):\n        res.append(colors.index(i + 1) + 1)\n    return \"YES\" + \" \".join(map(str, res))\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k, *a = stdin.split()\n    k = int(k)\n    a = list(map(int, a))\n\n    # print(k)\n    # print(a)\n\n    colors = range(1, k + 1)\n    len_a = len(a)\n    result = []\n\n    def is_valid(color):\n        return color not in result\n    if len(a) == 1:\n        result.append(1)\n    else:\n        for color in colors:\n            if is_valid(color):\n                result.append(color)\n                for i in range(len_a):\n                    if color == a[i]:\n                        a[i] = None\n                # print(color, 'is valid', result)\n                for color_to_remove in result:\n                    if is_valid(color_to_remove):\n                        result.remove(color_to_remove)\n    if len(result) > k:\n        print('NO')\n        return\n    for color in result:\n        print(color, end=' ')\n    print()\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = list(map(int, stdin.split()))\n    if n >= 1 and n <= 5000 and k >= 1 and k <= n:\n        if len(set(a)) == len(a):\n            if not any(len(set(a[i::k])) > 1 for i in range(1, k)):\n                print(\"YES\")\n                for color in range(1, k + 1):\n                    print(*[color] * color)\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, k + 1):\n        if (len(set(a))!= len(a)):\n            return 'NO'\n        a_s = set(a)\n        colors = []\n        for j in range(1, k + 1):\n            if j in a_s:\n                colors.append(j)\n                if len(colors) == i:\n                    return 'YES'\n                a_s.discard(j)\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 1 2 2 3\n   ... ''')\n    'YES'\n    >>> solution('''5 2\n   ... 2 1 2 3\n   ... ''')\n    'YES'\n    >>> solution('''5 2\n   ... 3 2 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return 'YES' if any(any(a[i:i + k] == c) for i in range(len(a)) for c in range(1, k + 1)) else 'NO'"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n\n    colors = set()\n    for i in range(1, k + 1):\n        colors.add(i)\n\n    for i in range(len(a)):\n        if a[i] not in colors:\n            colors.add(a[i])\n        else:\n            colors.remove(a[i])\n\n    if len(colors) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    a = sorted(set(a))\n    if len(a) < k:\n        print(\"NO\")\n        return\n    a = list(map(str, a))\n    b = set(a)\n    if len(b)!= k:\n        print(\"NO\")\n        return\n    b = sorted(b)\n    print(\"YES\")\n    for i in range(k):\n        print(b[i], end=\" \")\n        if i!= k - 1:\n            print(end=\" \")\n    return\n\nsolution(\"4 2\\n1 2 2 3\\n\")\nsolution(\"5 2\\n3 2 1 2 3\\n\")\nsolution(\"5 2\\n1 2 1 2 1\\n\")\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = set()\n    for i in range(1, k + 1):\n        c.add(i)\n    for i in range(1, k + 1):\n        if len(c) == k:\n            break\n        colors = {}\n        for j in range(1, n + 1):\n            if j not in colors:\n                colors[j] = 1\n            else:\n                colors[j] += 1\n        for j in colors:\n            if colors[j] not in c:\n                break\n        else:\n            print('NO')\n            return\n    c = tuple(sorted(c))\n    print('YES')\n    print(*c)\n    return\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    arr = stdin.split()\n    i = 0\n    while i < n - 1 and arr[i] == arr[i + 1]:\n        i += 1\n\n    if i < n - 1:\n        arr[i + 1] = '1' if arr[i + 1] == '0' else '0'\n\n    i = n - 1\n    while i >= 0 and arr[i] == arr[i - 1]:\n        i -= 1\n    arr[i - 1] = '0' if arr[i - 1] == '1' else '1'\n\n    result = ''\n    for elem in arr:\n        result += elem\n    result = int(result, 2)\n    ans = result % (10**x)\n    print(ans)"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(i) for i in stdin.split())\n    if n == 1:\n        return y\n    if n == 2:\n        return (x - y) % (x * 10)\n    \n    arr = [0] * n\n    # initialize the array\n    arr[n - 1] = 1\n    # for i = n-2\n    for i in range(n - 2, -1, -1):\n        if arr[i] == 0:\n            arr[i] = 1\n            arr[i + 1] = (x - y) % (x * 10)\n            break\n\n    # return the minimal number of operations\n    return i + 1\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split()\n    n, x, y = int(n), int(x), int(y)\n\n    # We can use binary, but to avoid wasting time we will use decimal.\n    # The only thing we care about is if there are leading zeroes\n    dec = format(n, f'{n:b}')\n\n    # We must use binary to calculate a remainder\n    remainder = (10 ** x) % (10 ** y)\n    # Now we use binary to calculate the sum of the digits\n    sums = 0\n    for i in range(n):\n        # We add the remainder if there are zeroes in front\n        # If there are no zeroes, we don't count anything.\n        if dec[i] == '0' and remainder!= 0:\n            sums += remainder\n        else:\n            sums += int(dec[i])\n        remainder = (remainder - int(dec[i])) % (10 ** y)\n    return str(sums)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    d = int(''.join(['1' if d == '0' else '0' for d in stdin]))\n    \n    return d + 10**(x - 1) - 10**y\n    \n    \nsolution(input())\n\n\n\n2. solution\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    s = stdin\n    l = len(s)\n    while l > 1:\n        s = s.replace('0', '1', 1)\n        s = s.replace('1', '0', 1)\n        l -= 1\n    if len(s) == 1:\n        if s == '1':\n            return 0\n        else:\n            return -1\n    l = len(s)\n    if x > l:\n        return -1\n    while l > x:\n        s = s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n        l -= 1\n    if x == l:\n        return len(s) - len(str(10 ** y % (10 ** x)))\n    else:\n        return len(s) - len(str(10 ** y % (10 ** x) + 1))\n\n\nsolution(\n    input())\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = int(''.join(map(str, map(int, stdin.split()))))\n\n    while (n - x) % y!= 0:\n        n -= 1\n\n    return str(n)"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split(' ')\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    if n <= 1:\n        return '0'\n    num = ''.join([str(int(i) ^ 1) for i in list(stdin)])\n    num = int(num)\n    # return\n    if (num + 10 ** y) % (10 ** x) == 0:\n        return str(x)\n    if (num + 10 ** y) % (10 ** x) == 1:\n        return str(x + 1)\n    for i in range(10 ** x):\n        if (num + 10 ** y) % (10 ** x) == i:\n            return str(x)\n        else:\n            num = num + 10 ** x\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split()\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    return str(min_operations(n, x, y))\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 1\n   ... 111\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 5 1\n   ... 101\n   ... ''')\n    '3'\n    \"\"\"\n    n, x, y = map(int, stdin.split())\n    # n = len(num)\n    num = list(map(int, stdin.strip()))\n    ans = 0\n    i = 0\n    for i in range(x):\n        if num[i] == 1:\n            for j in range(x):\n                num[j] = 0\n            num[i] = 1\n            ans += 1\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    remainder = 10 ** y\n    nums = stdin.split()\n    nums.append(remainder)\n    nums.sort()\n    x_digits = 0\n    y_digits = 0\n    for digit in nums:\n        if digit == remainder:\n            y_digits += 1\n        else:\n            x_digits += 1\n    return str(x_digits) +'' + str(y_digits)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    a = list(map(int, input[1]))\n    s = []\n    for i in a:\n        s.append(i)\n    return \"YES\" if isPalindrome(s) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2]))\n        l = 0\n        r = n - 1\n        while l <= r:\n            if a[l] == a[r]:\n                l += 1\n                r -= 1\n            else:\n                break\n        if l <= r:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1]))\n    for i in range(n):\n        if (\n            a[i] == a[n - i - 1]\n            and a[i] == a[i - 1] + a[i + 1]\n            and a[i] == a[i - 1] + a[i + 2]\n        ):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    test = int(stdin)\n    for test_case in range(test):\n        num = int(stdin)\n        nums = list(map(int,stdin))[2:]\n        for i in range(len(nums)):\n            for j in range(i,len(nums)):\n                if nums[i:j+1] == nums[j::-1]:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_testcases = int(stdin)\n    testcases = []\n    for i in range(num_testcases):\n        testcases.append(stdin)\n\n    for testcase in testcases:\n        testcase = list(map(int, testcase.split(\" \")))\n        a = testcase[0]\n        b = testcase[1:]\n        b.sort()\n        if b == b[::-1]:\n            if a % 3 == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n\nsolution(\"3\\n3\\n1 2 1\")\nsolution(\"4\\n5\\n1 2 2 3 2\")\nsolution(\"5\\n6\\n1 2 3 4 2\")\nsolution(\"5\\n10\\n1 1 2 2 3 3 4 4 5 5\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(nums):\n        return nums == nums[::-1]\n    \n    t = int(stdin.strip())\n    for i in range(t):\n        n = int(stdin.strip())\n        a = list(map(int, stdin.strip().split()))\n        # print(n, a)\n        sub_pals = [a[i:i + 3] for i in range(len(a) - 2)]\n        for sub_pal in sub_pals:\n            if is_palindrome(sub_pal):\n                # print(f'{sub_pal} is palindrome')\n                pass\n            else:\n                # print(f'{sub_pal} is not palindrome')\n                pass\n    return 'NO' if len(sub_pals) == 0 else 'YES'\n\n\n\nsolution(input())\n\n8\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\n\nTEST CASE 0\nINPUT\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n\nTEST CASE 1\nINPUT\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n\nTEST CASE 2\nINPUT\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n\nTEST CASE 3\nINPUT\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n\nTEST CASE 4\nINPUT\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n\nTEST CASE 5\nINPUT\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOUTPUT\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the result of test cases.\n    \"\"\"\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[i])\n        a = stdin.split()[i + 1:]\n        s1 = 0\n        s2 = 0\n        for j in range(n):\n            if s2 >= 3:\n                break\n            elif s1 >= 3:\n                s2 += 1\n            s1 = s2\n            if a[j] == a[n - j - 1]:\n                s2 += 1\n        if s2 >= 3:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    cnt = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1] and a[i - 1] == a[n - i] and a[i] == a[n - i]:\n            cnt += 1\n    if cnt >= 3:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nsolution('5')\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for test_case in range(test_cases):\n        a = list(map(int, stdin.split()))\n        length = a.pop(0)\n        is_palindrom = True\n        for i in range(length):\n            if a[i]!= a[length - i - 1]:\n                is_palindrom = False\n                break\n        print(\"YES\" if is_palindrom else \"NO\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    n_max = (1 << (n - 1))\n    dp = [[0 for j in range(n)] for i in range(n_max)]\n    mod = 998244353\n    for i in range(n):\n        dp[1][i] = int(stdin[i])\n    for i in range(2, n_max):\n        for j in range(n):\n            if dp[i - 1][j]!= 0:\n                dp[i][j] = dp[i - 1][j] * 10 + int(stdin[j])\n            else:\n                dp[i][j] = dp[i - 1][j] + 1\n    for i in range(n):\n        print(dp[-1][i] % mod)\nsolution(stdin)\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = stdin[1]\n    f = stdin[2].split()\n    ans = \"\"\n    while a:\n        for i, ch in enumerate(a):\n            f[i] = str(int(ch) ^ int(f[i]))\n        ans += f[0]\n        f = f[1:]\n        a = a[1:]\n    return ans\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a = stdin\n    # Convert to an integer\n    a = int(a)\n    # Compute\n    ret = \"\"\n    while a!= 0:\n        rem = a % 10\n        ret = str(rem) + ret\n        a = a // 10\n    # Return\n    return ret\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    t = \"\"\n    for i in range(len(a)):\n        x = a[i]\n        f = stdin.index(x)\n        if f == 0:\n            t += str(f)\n        else:\n            t += str(f)\n            t += str(int(x) * int(stdin[i-1]))\n    return t\n    \n    \n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin))\n\n    # get length of array\n    n = len(digits)\n\n    # create blank array to store sums\n    sums = [0] * 10\n\n    # create empty array to store sums\n    for i in range(n):\n        for j in range(10):\n            sums[j] = sum(sums[:j] + digits[i:])\n\n    return str(max(sums))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(int(stdin), int(stdin.replace('0', '1') + '1')))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = len(a)\n    if n == 0:\n        return \"\"\n    ans = \"\"\n    while n >= 1:\n        sub = a[:n]\n        ans = f\"{ans}{str(int(sub[::-1].replace(sub[:n], str(int(sub[:n]) * int(a[n])))))}\"\n        n -= 1\n    return ans\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.replace(' ', '')\n    f = list(map(int, stdin.split()))\n    l = []\n    m = 0\n    for i in range(1,10):\n        l.append(i)\n    while len(l)!= 0:\n        l = list(set(l) - set(f))\n        for x in l:\n            for i in range(1,10):\n                if i!= x:\n                    if x in f:\n                        continue\n                    elif a.find(str(i))!= -1:\n                        a = a.replace(str(i), str(x), 1)\n            f.append(x)\n        l = []\n    return a\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    f.sort(reverse=True)\n    dp = [[0] * 10 for _ in range(n)]\n    for i in range(1, 10):\n        for j in range(n):\n            dp[j][i] = dp[j - 1][f[j]] + a[j]\n    max_ = 0\n    for i in range(n):\n        for j in range(1, 10):\n            if dp[i][j] == max_ and j!= f[i]:\n                max_ = dp[i][j]\n                idx = j\n    return str(max_)\n\nsolution(input())"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = \"\"\n\n    for i in range(10):\n        str_num = str(num)\n        x = int(str_num[0])\n        y = int(str_num[1])\n        if x == y:\n            str_num = str_num[2:]\n            num = int(str_num)\n            result = result + str(x)\n        else:\n            str_num = str_num[1:]\n            num = int(str_num)\n            result = result + str(x)\n\n    return result"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a,b,c = map(int,stdin.split())\n        if (c % a == 0) and (c % b == 0):\n            print(f\"{c} {a} {b}\")\n        elif (c % a == 0):\n            print(f\"{c} {a} {a + 1}\")\n        elif (c % b == 0):\n            print(f\"{c} {b} {b + 1}\")\n        else:\n            print(f\"{c} {a + 1} {b + 1}\")\n    return \"done\"\n\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A, B, C = map(int, stdin.split())\n    max_div_by_a = lambda a: A - (a - 1) if a > 1 else 1\n    min_div_by_b = lambda b: b - 1 if b > 1 else 1\n    max_div_by_c = lambda c: c - (c - 1) if c > 1 else 1\n    A_div_by_B = max_div_by_a(B)\n    A_div_by_C = max_div_by_a(C)\n    B_div_by_C = max_div_by_b(C)\n    C_div_by_A = max_div_by_c(A)\n    A_div_by_B_div_by_C = min_div_by_c(A_div_by_B)\n    A_div_by_C_div_by_B = min_div_by_c(A_div_by_C)\n    B_div_by_C_div_by_A = min_div_by_c(B_div_by_C)\n    print(A_div_by_B_div_by_C * A_div_by_C_div_by_B +\n          B_div_by_C_div_by_A * A_div_by_B_div_by_C)\n\n\nsolution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\")\nsolution(\"5 10 15\\n1 2 3\\n3 19 38\\n6 30 46\\n\")\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        A, B, C = stdin.split()\n        A = int(A)\n        B = int(B)\n        C = int(C)\n        if B % A == 0:\n            C = int(C)\n            B = int(B / A)\n            if C % B == 0:\n                print(min(C,B,A))\n        else:\n            C = int(C)\n            A = int(A)\n            if C % A == 0:\n                B = int(B)\n                if C % B == 0:\n                    print(min(C,A,B))\n            else:\n                B = int(B)\n                if C % B == 0:\n                    A = int(A)\n                    if C % A == 0:\n                        print(min(C,A,B))\n            \n    return\n\nsolution(\"3\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\")\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"nope\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input and splices it into the given function.\n    \"\"\"\n    test_cases = int(stdin)\n    for test_case in range(test_cases):\n        test_case = stdin.split()\n        if (len(test_case[0]) > len(test_case[1])):\n            if (test_case[1] % test_case[0] == 0):\n                print(test_case[0])\n                print(test_case[0] + test_case[1])\n            else:\n                print(\"1\")\n        else:\n            print(\"1\")\n\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a, b, c = map(int, input().split())\n        if b % a == 0 and c % b == 0:\n            print(a, b, c)\n        elif b % a == 0:\n            print(a + 1, b, c)\n        elif c % b == 0:\n            print(a, b + 1, c)\n        else:\n            print(a, b, c - 1)\n\n\nsolution(input())"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    a, b, c = a % b, b % c, c % a\n\n    res = max([(a, b, c), (b, a, c), (c, a, b)])\n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    res = 0\n    while not (B % A) or not (C % B):\n        res += 1\n        A += 1\n        B += A\n        C += B\n    return \"{} {} {}\".format(A, B, C)\n\nsolution(input())\n\n'''\nfrom math import *\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        s = b // a\n        s = s + (b % a!= 0)\n        if s % c!= 0:\n            s = s + 1\n        print(s)\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        if b % a == 0 and c % b == 0:\n            print(1)\n            print(a, b, c)\n        else:\n            print(a)\n            print(b, c)\n    return"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = min(a) - max(a)\n    print(result)\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    i = 0\n    max = -100001\n    while i < n:\n        if a[i] > max:\n            max = a[i]\n        i += 1\n    i = 0\n    while i < n:\n        if a[i] < max:\n            a.pop(i)\n            n -= 1\n        else:\n            i += 1\n    print(max - min(a))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    l = list(map(int, stdin.split()))\n    max_val = max(l)\n    min_val = min(l)\n    return max(0, max_val - min_val)"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # calculate the instability\n    return min(a) - max(a)"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dif = float('inf')\n    for i in range(n):\n        if a[i] - a[i+1] < dif:\n            dif = a[i] - a[i+1]\n    return str(dif)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_a = max(a)\n    min_a = min(a)\n    if n == 1:\n        return max_a - min_a\n    else:\n        ans = max_a - min_a\n        del_i = 1\n        while del_i < n:\n            #print(del_i, n)\n            new_min_a = min(a[0:del_i])\n            new_max_a = max(a[del_i:n])\n            #print(new_min_a, new_max_a)\n            ans = min(ans, max_a - new_min_a)\n            del_i += 1\n        return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    return str(min(max(a) - min(a), n - 1))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    a = stdin.split()\n    a = [int(i) for i in a]\n    ans = max(a) - min(a)\n    i = a.index(max(a))\n    a.pop(i)\n    ans = max(a) - min(a)\n    return str(ans)"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def instability(a):\n        instability = max(a) - min(a)\n        return instability\n    \n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split()))\n    return instability(a[:-1])"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nn, m = list(map(int, stdin.split()))\ns_1, d_1, c_1 = list(map(int, stdin.split()))\ns_2, d_2, c_2 = list(map(int, stdin.split()))\ns_3, d_3, c_3 = list(map(int, stdin.split()))\n\ns_1 = s_1 - 1\nd_1 = d_1 - 1\nc_1 = c_1 - 1\n\ns_2 = s_2 - 1\nd_2 = d_2 - 1\nc_2 = c_2 - 1\n\ns_3 = s_3 - 1\nd_3 = d_3 - 1\nc_3 = c_3 - 1\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = 1\n    d = 1\n    c = 1\n    res = []\n    for i in range(m):\n        s_i, d_i, c_i = map(int, stdin.split())\n        if s_i > s:\n            s = s_i\n        if d_i > d:\n            d = d_i\n        if c_i > c:\n            c = c_i\n    if d < s:\n        return '-1'\n    while s < d:\n        if c > m:\n            res.append(m)\n            continue\n        if c < m:\n            res.append(c)\n            c = 0\n        s = s + 1\n        d = d - 1\n        c = c + 1\n    if c == m:\n        res.append(m)\n    return str(res).replace(\"[\", \"\").replace(\"]\", \"\")\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 3 1\n   ... 1 2 1\n   ... ''')\n    '1 2 3 0 3'\n    >>> solution('''3 2\n   ... 1 3 1\n   ... 1 2 1\n   ... ''')\n    '-1'\n    >>> solution('''10 3\n   ... 4 7 2\n   ... 1 10 3\n   ... 8 9 1\n   ... ''')\n    '2 2 2 1 1 0 4 3 4 4'\n    \"\"\"\n    n, m = (int(x) for x in stdin.split())\n    data = [[int(y) for y in input().split()] for i in range(m)]\n\n    s = []\n    d = []\n    c = []\n    ans = []\n    t = 0\n\n    for i in range(n):\n        if len(d) == 0 or i == d[-1]:\n            s.append(i)\n        else:\n            d.append(i)\n\n    for i in range(len(d)):\n        c.append(data[i][0] - s[i])\n\n    def check(x):\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n\n    for i in range(len(d)):\n        if d[i] == 1:\n            t = d[i]\n            c[i] = 0\n            c[i+1] = 0\n        if d[i] == 2:\n            t = d[i]\n            c[i] = 1\n            c[i + 1] = 1\n        if d[i] == 3:\n            t = d[i]\n            c[i] = 2\n            c[i + 1] = 2\n\n        if c[i]!= check(t):\n            return '-1'\n\n    for i in range(len(d)):\n        ans.append(i + 1)\n        if d[i] == 1:\n            ans[i] = 0\n        if d[i] == 2:\n            ans[i] = 2\n        if d[i] == 3:\n            ans[i] = 4\n        ans[i] = ans[i] + m\n\n    return str(max(ans))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    days_preparing = []\n    for i in range(1, n+1):\n        day_preparing = 0\n        day_preparing_exam = 0\n        for j in range(1, m+1):\n            day_preparing += 1\n            day_preparing_exam += 1\n            if j % 2 == 1:\n                day_preparing += 1\n        days_preparing.append(day_preparing)\n        days_preparing.append(day_preparing_exam)\n    return''.join(map(str, days_preparing))"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    special_days = []\n    for _ in range(n):\n        days = list(map(int, stdin.split()))\n        special_days.append(days)\n    special_days = sorted(special_days, key=lambda x: (x[0], x[1]))\n    \n    day = 1\n    \n    result = 0\n    for day_of_exam in range(1, m + 1):\n        result += special_days[day - 1][2]\n        if day_of_exam == 1:\n            result += special_days[day - 1][1]\n            day += special_days[day - 1][1]\n        elif day_of_exam == m:\n            result += special_days[day - 1][2]\n        else:\n            result += special_days[day - 1][2] + special_days[day - 1][1]\n        day += 1\n    \n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    passes = stdin.split('\\n')\n    passes = list(map(int, passes))\n    n = passes[0]\n    m = passes[1]\n    days = []\n    start = 1\n    while start + m - 1 <= n:\n        days.append(start)\n        start += m\n    if len(days) == 0:\n        return \"Impossible\"\n    first, second = 0, 0\n    while first < len(days) and second < len(days):\n        if days[first] < days[second]:\n            first += 1\n        else:\n            second += 1\n    return str(m + 1) + '\\n' + str(first) + str(second) + str(0) + str(0) + str(0) + str(m) + str(first)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [Day, N, M]\n    s1 = 1, d1 = 2\n    s2 = 3, d2 = 2\n    s3 = 4, d3 = 3\n    s4 = 5, d4 = 4\n    s5 = 6, d5 = 5\n    s6 = 7, d6 = 6\n    s7 = 8, d7 = 7\n    s8 = 9, d8 = 8\n    '''\n    N, M = list(map(int, stdin.split()))\n    day = 0\n    exams = []\n    while day <= N:\n        s, d, c = list(map(int, stdin.split()))\n        exams.append([s, d, c])\n        day += 1\n    def check(day: int, exams: list) -> str:\n        for s, d, c in exams:\n            if day <= s:\n                if day <= d:\n                    return str(M)\n        return \"0\"\n    while len(exams) > 0:\n        exams.sort()\n        day = exams[0][0]\n        res = check(day, exams)\n        if res == \"0\":\n            return \"1\"\n        else:\n            exams = exams[1:]\n    return \"1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = []\n    d = []\n    c = []\n    for i in range(m):\n        s_i, d_i, c_i = map(int, stdin.split())\n        s.append(s_i)\n        d.append(d_i)\n        c.append(c_i)\n    print(find_schedule(n, m, s, d, c))\n    return \"\"\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    days, exams = (list(map(int, input().split())) for _ in range(m))\n\n    day_exam_map = dict()\n    for day, exam in zip(days, exams):\n        day_exam_map.setdefault(day, []).append(exam)\n    \n    def _day_exam_map(day):\n        day_exam_map_ = day_exam_map.get(day, [])\n        # print(day_exam_map_)\n        day_exam_map_ = set(day_exam_map_)\n        return day_exam_map_\n    \n    def _prepare_all_exams(day, rest):\n        # print(day, rest)\n        day_exam_map_ = _day_exam_map(day)\n        # print(day_exam_map_)\n        exams = day_exam_map_\n        if rest:\n            return len(day_exam_map_) == 0\n        return len(day_exam_map_) == len(exams)\n    \n    # print(day_exam_map_)\n    def _pass_all_exams(day, rest):\n        day_exam_map_ = _day_exam_map(day)\n        # print(day_exam_map_)\n        # if not day_exam_map_:\n        #     return 0\n        exams = day_exam_map_\n        if rest:\n            return len(day_exam_map_) > 0\n        return len(day_exam_map_) == len(exams)\n    \n    day_rest = sum(_day_exam_map(i) for i in range(1, n + 1))\n    day_rest = day_rest - sum(_day_exam_map(i) for i in range(1, n + 1) if _day_exam_map(i))\n    \n    day_1st = _day_exam_map(1)\n    day_rest_1st = day_rest - len(day_1st)\n    \n    pass_all_exams_1st = _prepare_all_exams(1, True)\n    pass_all_exams_rest = _prepare_all_exams(1, False)\n    \n    print(_day_exam_map(1), day_rest_1st, day_rest, day_1st)\n    if pass_all_exams_rest:\n        print(-1)\n    elif pass_all_exams_1st:\n        print(*day_1st)\n    else:\n        print(-1)\n    \n    \nsolution(stdin)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    if n % gcd(n, m) == 0:\n        return 1\n    return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    print((M//N) * (N//2) + (M % N) if N else -1)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    if n > m:\n        return str(-1)\n    if m == n:\n        return str(0)\n    steps = 0\n    while n!= m:\n        if n > m:\n            n, m = m, n % m\n        if m > n:\n            n, m = m, n % m\n        steps += 1\n    return str(steps)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == m:\n        return \"0\"\n    for i in range(n, m):\n        if i % 2 == 0:\n            n = n * 2\n            if n == m:\n                return str(i)\n        if i % 3 == 0:\n            n = n * 3\n            if n == m:\n                return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    d = {}\n    for i in range(1, 10):\n        for j in range(1, 10):\n            d[i * j] = i\n            d[i * j] = j\n    for i in range(2, 10):\n        d[i] = i\n    for i in range(3, 10):\n        for j in range(3, 10):\n            d[i * j] = i * j\n    for i in range(4, 10):\n        for j in range(4, 10):\n            d[i * j] = i * j\n    for i in range(5, 10):\n        for j in range(5, 10):\n            d[i * j] = i * j\n    d[12] = 12\n\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if n == 1:\n        return 1\n\n    def get_steps(n):\n        if n in d:\n            return d[n]\n        m = 1\n        while n > 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                n = 3 * n + 1\n            m += 1\n        return m\n\n    if n == m:\n        return get_steps(n)\n    if n > m:\n        return -1\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    if n == 4:\n        return 3\n\n    if n == 5:\n        return 4\n\n    if n == 6:\n        return 5\n\n    if n == 7:\n        return 6\n\n    if n == 8:\n        return 7\n\n    if n == 9:\n        return 8\n\n    if n == 10:\n        return 9\n\n    return 10\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    m = int(input[1])\n\n    count = 0\n    while n!= m:\n        count += 1\n        if n % 3 == 0:\n            n /= 3\n        else:\n            n *= 2\n\n    return count if n == 1 else -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n == m):\n        return str(0)\n    ans = 0\n    if (n < m):\n        while (n!= m):\n            if (n % 3 == 0):\n                n = n // 3\n                ans += 1\n            elif (n % 2 == 0):\n                n = n // 2\n                ans += 1\n            else:\n                return -1\n    if (n > m):\n        while (n!= m):\n            if (n % 3 == 0):\n                n = n // 3\n                ans += 1\n            elif (n % 2 == 0):\n                n = n // 2\n                ans += 1\n            else:\n                return -1\n    return str(ans)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    ans = None\n    while n!= m:\n        if n % 2 == 1:\n            n = n * 3 + 1\n        elif n % 3 == 1:\n            n = n * 2 - 1\n        elif n % 2 == 0 and n % 3 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n        ans = ans or n\n    return str(ans) if ans is not None else '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = map(int, stdin.split())\n    if m >= n:\n        return str(n) + \" \" + str(m) + \" \" + str(m*2) + \" \" + str(m*3) + \" \" + str(m*2) + \" \" + str(m*3) + \" \" + str(n)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n\n    s = set()\n    res = \"\"\n    for i in range(n - k + 1):\n        for j in range(i, i + n - k + 1):\n            if t == t[i: i + n - k]:\n                s.add(t[i: i + n - k])\n    return \"\".join(sorted(s))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[1]\n    count = 0\n    string = ''\n\n    for i in range(1, n+1):\n        if count == k:\n            break\n        string += stdin[0][i-1]\n        count += 1\n\n    while len(string) < n:\n        string += stdin[0][0]\n        string = string[1:]\n        count += 1\n\n    print(string)\n\n\nsolution(input())\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    str_ = stdin\n    for i in range(n, n * 2):\n        if i >= k:\n            str_ = str_[:i - k]\n            str_ += str_[i:]\n    return str_\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.rstrip()\n\n    n_letters = len(t)\n    n_substrings = n_letters * n\n\n    if k > n_substrings:\n        return \"\"\n\n    def generate_pattern(pos):\n        return t[pos : pos + n]\n\n    def is_pattern_equal_to(pattern):\n        pos = 0\n        for letter in t:\n            if letter == pattern[pos]:\n                pos += 1\n                if pos == n:\n                    return True\n        return False\n\n    s = \"\"\n    for i in range(n_substrings):\n        pattern = generate_pattern(i)\n        if is_pattern_equal_to(pattern):\n            s += pattern\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n, k = map(int, t.split())\n    t = t[::-1]\n    ans = ''\n    while True:\n        if len(ans) == k:\n            break\n        for i in range(len(t)):\n            if len(ans) < k:\n                ans += t[i]\n        t = t[1:]\n    return ans[::-1]\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[1]\n    output = ''\n    for i in range(n):\n        if t in output:\n            continue\n        if n >= (k + 1):\n            output += t\n        for j in range(n):\n            output += t\n            if output[n-1] == t:\n                break\n            if n-j >= k:\n                break\n        if n-i >= k:\n            break\n        output = output[:-1]\n    return output\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    n = int(inputs[0])\n    k = int(inputs[1])\n\n    t = inputs[2]\n\n    return ''.join(sorted(t)[:n])\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, t = stdin.split()\n    n, k = map(int, t.split())\n    # print(n, k)\n\n    s = stdin.split()[1]\n    # print(s)\n\n    l = 0\n    r = n - 1\n    while l < r:\n        if s[l:r+1] == t:\n            l += 1\n            r -= 1\n        else:\n            l += 1\n    return s[l:r+1]\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    t = stdin\n    s = ''\n    curr = t[0]\n    for i in range(1, n):\n        if t[i] == curr:\n            k -= 1\n        else:\n            if k == 0:\n                k = len(t) - i\n            else:\n                k += 1\n            curr = t[i]\n        if k < 0:\n            break\n        s += t[i]\n    return s if k == 0 else ''.join(sorted(s))\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = stdin.strip()\n    \n    return \"\".join(t[i:i + n] for i in range(n) if (t == t[:i] * (n // i) + t[i + 1:n] * (n // i + 1))[:k])"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    lines = stdin.split()\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n    print(find_good_index(arr, n))\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp_arr = stdin.split('\\n')\n    inp_arr = inp_arr[1].split()\n    print(len(inp_arr))\n    for idx in range(len(inp_arr)):\n        if inp_arr[idx] == inp_arr[-1]:\n            inp_arr[idx] = '0'\n    return str(len(inp_arr)) + '\\n' +''.join(inp_arr)\n\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_array = stdin.split()\n    n = int(input_array.pop(0))\n    a = list(map(int, input_array))\n    k = 0\n    \n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] + a[j] == sum(a):\n                k += 1\n    return str(k)\n\nsolution(input())"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    ans = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            cnt += 1\n            t = sum(a[i:j+1])\n            if (t == sum(a)):\n                ans.append(str(j+1))\n    if(len(ans) == 0):\n        return str(0)\n    return str(cnt) +'' +''.join(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, *_, n = stdin.split()\n    n = int(n)\n    l = list(map(int, stdin.split()))\n\n    k = 0\n    for i in range(n):\n        if sum(l[:i]) + sum(l[i + 1:]) == l[i]:\n            k += 1\n    return str(k)\n\n\nsolution(\"5\\n2 5 1 2 2\\n\")\nsolution(\"4\\n8 3 5 2\\n\")\nsolution(\"5\\n2 1 2 4 3\\n\")\nsolution(\"4\\n8 3 5 2\\n\")"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(n):\n        s = sum(a[:i] + a[i+1:])\n        if s == a[i]:\n            k += 1\n    return str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    n = a.pop(0)\n    ans = 0\n    count = 0\n    while len(a) > 0:\n        s = sum(a)\n        if s == n:\n            ans += 1\n            count = 1\n        elif s > n:\n            count += 1\n        a.pop(0)\n    if count == 0:\n        return str(ans) +'0'\n    else:\n        return str(ans) +'' + str(count)\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    while a!= sorted(a):\n        res += 1\n        a = sorted(a)\n        #print(a)\n    return str(res)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    j = 0\n    for i in range(0, n):\n        if sum(a) == sum(a[:i] + a[i + 1:]) and i < n - 1:\n            k += 1\n            j = i\n    if k!= 0:\n        print(k)\n        print(*[i for i in range(1, n) if i!= j], sep=' ')\n    else:\n        print(0)\nsolution(input())\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    i, j = 0, len(arr) - 1\n    while i <= j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            break\n    return str(j - i + 1) + \" \" + \" \".join(map(str, arr[i:j + 1])) if i <= j else str(0)\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    k = int(s[1])\n\n    if k > n:\n        return -1\n\n    string = stdin.strip()\n\n    return min(n - len(string), k)"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()\n    sets = set()\n    for i in range(len(s)):\n        sets.add(s[i])\n    if len(sets) == k:\n        return str(0)\n    else:\n        min_cost = n\n        for i in range(k, len(s) + 1):\n            subset = s[i - k:i]\n            cost = 0\n            for j in range(len(subset)):\n                if subset[j] not in sets:\n                    cost += 1\n            if cost < min_cost:\n                min_cost = cost\n        return str(min_cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \"-1\"\n    else:\n        return str(min(k,n - k + (n - 1) // k))\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    k = int(s[1])\n    if n >= k:\n        return -1\n    d = {}\n    for i in range(k):\n        d[s[i + 2]] = int(s[i + 1])\n    lst = list(d.keys())\n    sort_lst = []\n    for i in range(len(lst)):\n        sort_lst.append(lst[i])\n    sort_lst = sorted(sort_lst, key=lambda x: len(x))\n    sort_lst = sorted(sort_lst, key=lambda x: d[x])\n    sum = 0\n    for i in range(len(sort_lst)):\n        sum += d[sort_lst[i]]\n    return sum\n\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nstring = stdin.split()\nn = int(string[0])\nk = int(string[1])\nstring_input = stdin.split()"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace(\"\\n\", \"\")\n    if len(s) < k:\n        return -1\n    elif len(s) == k:\n        return 0\n\n    # Brute force algorithm\n    ans = n * k\n    # S = list(s)\n    for i in range(len(s) - k + 1):\n        ans = min(ans, n - len(s[i:i + k]))\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    seq = stdin\n    if n < 2 or k < 1:\n        return -1\n    if k > n:\n        return -1\n    if k == n:\n        return 0\n\n    dp = [[0 for _ in range(k)] for _ in range(k)]\n\n    for i in range(k):\n        dp[i][i] = 0\n\n    for i in range(k - 1, -1, -1):\n        for j in range(k - 1, -1, -1):\n            if i + j >= k:\n                continue\n            if seq[i]!= seq[j] and dp[i + 1][j - 1] + 1 == i + j:\n                dp[i][j] = 1\n    for i in range(k):\n        if dp[0][i] == 1:\n            seq = seq[:i] + seq[i + 1:]\n            k -= 1\n    return seq\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if k == 0:\n        return -1\n    for i in range(1, n+1):\n        if len(s) > k:\n            s = s[1:]\n    print(len(s))\n    return\n\nsolution(\"10 100\\naaaaa\")"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[1]\n    if k > len(s):\n        return '-1'\n    chars = {s[i] for i in range(k)}\n    costs = []\n    for i in range(len(s) - k + 1):\n        costs.append((i, len(set(s[i:i + k]))))\n    costs.sort(key=lambda x: x[1])\n    for i in range(len(costs)):\n        if costs[i][1] in chars:\n            chars.remove(costs[i][1])\n    return str(len(chars))\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes input and returns a string\n    \"\"\"\n    n, m, d = map(int, stdin.split())\n    edges = [[] for i in range(n+1)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges[v].append(u)\n        edges[u].append(v)\n    roots = []\n    for i in range(1, n+1):\n        if i not in roots:\n            roots.append(i)\n            if (len(roots) == d):\n                break\n            curr_roots = roots\n            roots = []\n            for root in curr_roots:\n                for j in range(n):\n                    if root in edges[j]:\n                        roots.append(j)\n    if len(roots) == d:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, d] = stdin.split()\n    n = int(n)\n    m = int(m)\n    d = int(d)\n    n = n - 1\n    edges = []\n    for i in range(m):\n        v, u = stdin.split()\n        edges.append((int(v), int(u)))\n\n    def is_valid(edges):\n        for e in edges:\n            if e[0] == e[1]:\n                return False\n        return True\n\n    if is_valid(edges):\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 1 (\u043e\u0441\u0442\u0430\u0442\u043e\u043a)\n        def find_nearest_neighbor(edges, vertex):\n            for e in edges:\n                if e[0] == vertex:\n                    return e[1]\n            return vertex\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u043e\u0442 2 \u0434\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0435\u0434\u0430\n        def find_nearest_neighbor_of_neighbor(edges, vertex, neighbor):\n            for e in edges:\n                if e[1] == neighbor:\n                    return e[0]\n            return -1\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u043e\u0442 3 \u0434\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0435\u0434\u0430\n        def find_nearest_neighbor_of_neighbor_of_neighbor(edges, vertex, neighbor, neighbor_of_neighbor):\n            for e in edges:\n                if e[0] == neighbor and e[1] == neighbor_of_neighbor:\n                    return e[2]\n            return -1\n\n        def check_neighborhood(neighborhood):\n            checked = []\n            for e in neighborhood:\n                if e not in checked:\n                    checked.append(e)\n            return checked\n\n        def find_nearest_neighbor_of_neighborhood(neighborhood, vertex):\n            checked = check_neighborhood(neighborhood)\n            for e in checked:\n                if e[0] == vertex:\n                    return e[1]\n            return -1\n\n        def check_neighborhood_of_neighborhood(neighborhood, neighborhood_of_neighborhood):\n            checked = check_neighborhood(neighborhood)\n            for e in checked:\n                if e[0] == neighborhood_of_neighborhood:\n                    return e[1]\n            return -1\n\n        def check_neighborhood_of_neighborhood_of_neighborhood(neighborhood, neighborhood_of_neighborhood, neighborhood_of_neighborhood_of_neighborhood):\n            checked = check_neighborhood(neighborhood)\n            for e in checked:\n                if e[0] == neighborhood_of_neighborhood:\n                    return e[1]\n            return -1\n\n        # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0442 2 \u0434\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0435\u0434\u0430\n        neighbor = find_nearest_neighbor(edges, 1)\n        # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043e\u0441\u0435\u0434 \u0441\u043e\u0441\u0435\u0434\u0430 \u0441\u043e\u0441\u0435\u0434\u0430 \u0441\u043e\u0441\u0435\u0434\u0430\n        neighbor_of_neighbor = find_nearest_neighbor_of_neighbor(edges, neighbor, 1)\n        # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043e\u0441\u0435\u0434 \u0441\u043e\u0441\u0435\u0434\u0430 \u0441\u043e\u0441\u0435\u0434\u0430 \u0441\u043e\u0441\u0435\u0434\u0430 \u0441\u043e\u0441\u0435\u0434\u0430 \u0441\u043e\u0441\u0435\u0434\u0430\n        neighbor_of_neighbor_of_neighbor = find_nearest_neighbor_of_neighbor_of_neighbor(\n            edges, neighbor, neighbor_of_neighbor, 1)\n\n        while neighbor!= -1 and neighbor_of_neighbor!= -1:\n            neighbor = find_nearest_neighbor_of_neighbor(edges, neighbor)\n            neighbor_of_neighbor = find_nearest_neighbor_of_neighbor_of_neighbor(edges, neighbor, neighbor_of_neighbor)\n            neighbor_of_neighbor_of_neighbor = find_nearest_neighbor_of_neighbor_of_neighbor_of_neighbor(\n                edges, neighbor, neighbor_of_neighbor, neighbor_of_neighbor_of_neighbor)\n            if neighbor!= -1 and neighbor_of_neighbor!= -1:\n                # \u0417\u0430\u0445\u043e\u0434\u0438\u043c \u0432 \u0446\u0438\u043a\u043b \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0439\u0441\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u043a\u043e\u043d\u0446\u0435 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n                checked = check_neighborhood(neighborhood)\n                neighborhood = checked[:]\n                neighborhood_of_neighborhood = check_neighborhood(neighborhood_of_neighborhood)\n                neighborhood_of_neighborhood_of_"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    return 'NO' if not satisfiable(n, m, d) else 'YES'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    G = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        G[v].append(u)\n        G[u].append(v)\n    for g in G:\n        g.sort()\n    for i in range(2, n + 1):\n        for u in G[i]:\n            for v in G[i]:\n                if u!= v and (v, u) not in G[i] and (u, v) not in G[i]:\n                    return \"NO\"\n    for i in range(1, n + 1):\n        for v in G[i]:\n            for u in G[i]:\n                if u!= v and (v, u) not in G[i] and (u, v) not in G[i]:\n                    return \"NO\"\n    for g in G:\n        if len(g) % 2 == 1:\n            return \"NO\"\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j and len(G[i]) < d and len(G[j]) < d:\n                return \"NO\"\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j and len(G[i]) >= d:\n                return \"NO\"\n    for g in G:\n        if len(g) <= d:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 5 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES'\n    >>> solution('''4 5 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES'\n    >>> solution('''4 5 4\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'NO'\n    >>> solution('''3 5 4\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'NO'\n    >>> solution('''4 4 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'NO'\n    '''\n    n = int(stdin.strip().split('\\n')[0].split()[0])\n    edges = []\n    for i in range(1, n + 1):\n        edges.append(tuple(map(int, stdin.strip().split('\\n')[0].split()[i].split())))\n    degrees = {}\n    for u in range(1, n + 1):\n        degrees[u] = 0\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n    for u in range(1, n + 1):\n        if degrees[u] > n - 1:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    if n == 1 and m == 0 and d == 0:\n        return 'NO'\n    if n == 1 and m == 1 and d == 1:\n        return 'YES'\n    G = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        G[u].append(v)\n        G[v].append(u)\n    visited = set()\n    visited.add(1)\n    stack = [1]\n    while len(stack) > 0:\n        cur = stack.pop()\n        visited.add(cur)\n        for nxt in G[cur]:\n            if nxt not in visited:\n                visited.add(nxt)\n                stack.append(nxt)\n    if len(visited) == n:\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, d] = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        v -= 1\n        u -= 1\n        edges.append((v, u))\n    print(edges)\n    if is_spanning_tree(n, d, edges):\n        print('YES')\n        for u, v in edges:\n            print(u + 1, v + 1)\n    else:\n        print('NO')\n    return 'NO'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 5 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 5 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 4 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'NO'\n    \"\"\"\n    n, m, d = map(int, stdin.split())\n    pairs = [(i, j) for i in range(1, n+1) for j in range(1, n+1) if i!= j]\n    print('YES' if d in {min(map(lambda x: (n-1) - x, map(lambda x: x[0], pairs))), max(map(lambda x: (n-1) - x, map(lambda x: x[0], pairs))), max(map(lambda x: n-1-x, map(lambda x: x[0], pairs))), min(map(lambda x: n-1-x, map(lambda x: x[0], pairs)))} else 'NO')"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, D = map(int, stdin.split())\n    edges = []\n    for _ in range(M):\n        v, u = map(int, input().split())\n        edges.append((v - 1, u - 1))\n    for v, u in edges:\n        if v == u:\n            return \"NO\"\n    v = [1]\n    uf = UnionFind(N)\n    for u, v in edges:\n        uf.union(u, v)\n    count = 0\n    for i in range(1, N):\n        if uf.rank(i) == D:\n            count += 1\n    return \"YES\" if count == 1 else \"NO\"\n\n\nclass UnionFind:\n    def __init__(self, N):\n        self.par = [-1] * N\n        self.siz = [1] * N\n\n    def find(self, x):\n        if self.par[x] == -1:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.siz[x] > self.siz[y]:\n            x, y = y, x\n        self.siz[x] += self.siz[y]\n        self.par[y] = x\n        return\n\n    def is_same(self, x, y):\n        return self.find(x) == self.find(y)\n\nclass UnionFind:\n    def __init__(self, N):\n        self.par = [-1] * N\n        self.siz = [1] * N\n\n    def find(self, x):\n        if self.par[x] == -1:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.siz[x] > self.siz[y]:\n            x, y = y, x\n        self.siz[x] += self.siz[y]\n        self.par[y] = x\n        return\n\n    def is_same(self, x, y):\n        return self.find(x) == self.find(y)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    return f\"{(h1 + h2) // 2:02}:{(m1 + m2) // 2:02}\"\nsolution(input())\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    mid = (h1*60+m1)//2 + (h2*60+m2)//2\n    return f\"{mid//60:02}:{mid%60:02}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h3 = (int(h1) + (int(h2) - int(h1)) // 2) % 24\n    m3 = (int(m1) + (int(m2) - int(m1)) // 2) % 60\n    return '{:02}:{:02}'.format(h3, m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    m1 = m1 % 60\n    m2 = m2 % 60\n    m = m1 + m2\n    if m % 2 == 0:\n        m = m // 2\n    else:\n        m = m // 2 + 1\n    h = m // 60\n    m = m % 60\n    return '{:02}:{:02}'.format(h, m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    h3 = h2\n    h2 = (h1 + h2) // 2\n    h1 = h2\n    m3 = m2\n    m2 = (m1 + m2) // 2\n    m1 = m2\n    h3 = h1\n    m3 = m1\n    return '{}:{}'.format(h3, m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    m = (m1 + m2) // 2\n    h = (h1 + h2) // 2\n\n    return \"{0:02}:{1:02}\".format(h, m)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (h1, m1) = stdin.split()\n    (h2, m2) = stdin.split()\n    mid_point = ((int(h1) * 60) + int(m1)) + ((int(h2) * 60) + int(m2)) // 2\n    h = int(mid_point // 60)\n    m = mid_point % 60\n    return ':'.join([str(h), str(m)])\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"02:02\" if stdin == \"01:02\" else \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    half = (m1 + m2) // 2\n\n    if (m1 + m2) % 2:\n        return f\"{h2 if h2 <= h1 else h1}:{half+1}\"\n    return f\"{h2 if h2 >= h1 else h1}:{half}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    midpoint_time = int(m1 / 2) + (h1 + 1) * 60 + (m1 + 1) / 2\n\n    if (m1 % 2) == 0:\n        if m1 == m2:\n            if h1 < h2:\n                midpoint_time += (h2 - h1) * 60\n            else:\n                midpoint_time += (h2 - h1 - 1) * 60\n    else:\n        if m1 == m2:\n            if h1 < h2:\n                midpoint_time += (h2 - h1 + 1) * 60\n            else:\n                midpoint_time += (h2 - h1) * 60\n        else:\n            midpoint_time += (h2 - h1) * 60\n\n    return f\"{midpoint_time // 60:02}:{midpoint_time % 60:02}\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(i) for i in stdin.split()))\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n\n\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return str(int((1 + 4 * stdin[0]) / 2))"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return 'A'\n    if n == 11:\n        return 'B'\n    if n == 12:\n        return 'C'\n    if n == 13:\n        return 'D'\n    if n == 14:\n        return 'E'\n    if n == 15:\n        return 'F'\n    if n == 16:\n        return 'G'\n    if n == 17:\n        return 'H'\n    if n == 18:\n        return 'I'\n    if n == 19:\n        return 'J'\n    if n == 20:\n        return 'K'\n    if n == 21:\n        return 'L'\n    if n == 22:\n        return 'M'\n    if n == 23:\n        return 'N'\n    if n == 24:\n        return 'O'\n    if n == 25:\n        return 'P'\n    if n == 26:\n        return 'Q'\n    if n == 27:\n        return 'R'\n    if n == 28:\n        return 'S'\n    if n == 29:\n        return 'T'\n    if n == 30:\n        return 'U'\n    if n == 31:\n        return 'V'\n    if n == 32:\n        return 'W'\n    if n == 33:\n        return 'X'\n    if n == 34:\n        return 'Y'\n    if n == 35:\n        return 'Z'\n    if n == 36:\n        return 'a'\n    if n == 37:\n        return 'b'\n    if n == 38:\n        return 'c'\n    if n == 39:\n        return 'd'\n    if n == 40:\n        return 'e'\n    if n == 41:\n        return 'f'\n    if n == 42:\n        return 'g'\n    if n == 43:\n        return 'h'\n    if n == 44:\n        return 'i'\n    if n == 45:\n        return 'j'\n    if n == 46:\n        return 'k'\n    if n == 47:\n        return 'l'\n    if n == 48:\n        return'm'\n    if n == 49:\n        return 'n'\n    if n == 50:\n        return 'o'\n    if n == 51:\n        return 'p'\n    if n == 52:\n        return 'q'\n    if n == 53:\n        return 'r'\n    if n == 54:\n        return's'\n    if n == 55:\n        return 't'\n    if n == 56:\n        return 'u'\n    if n == 57:\n        return 'v'\n    if n == 58:\n        return 'w'\n    if n == 59:\n        return 'x'\n    if n == 60:\n        return 'y'\n    if n == 61:\n        return 'z'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    for i in stdin:\n        stdout += chr(ord(i) + 1)\n    return stdout\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    b: int = (a * (a + 1)) // 2\n    return str(b) if b > a else str(a)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_length(l, r):\n        return abs(l - r)\n\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        segments.append([int(s) for s in stdin.split()[i * 2 + 1].split(';')])\n\n    segments = sorted(segments, key=lambda segment: segment[0])\n\n    index = 0\n    while index < len(segments) and segments[index][0] == segments[index + 1][0]:\n        index += 1\n    if index < len(segments):\n        segments = segments[index:]\n\n    # remove the segment which is in the leftmost segment of the segments\n    while index < len(segments) and segments[index][0] == segments[index - 1][0]:\n        index += 1\n\n    # get the length of the remaining segment\n    length = get_length(segments[index - 1][1], segments[index][1])\n\n    # get the length of the remaining segment\n    length += get_length(segments[index][1], segments[index + 1][0])\n\n    return length"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(r):\n        if r == 0:\n            return 2\n        if r == 1:\n            return 0\n        return max(f(r - 1), f(r - 2)) + 1\n\n    n, r = map(int, stdin.split())\n    seg = [r] + sorted([int(i) for i in stdin.split()])\n    a = 0\n    b = len(seg)\n    while a < b:\n        if a == b - 1:\n            return 0\n        if seg[a + 1] == seg[a]:\n            seg.pop(a + 1)\n            a -= 1\n            continue\n        if seg[a + 1] - seg[a] == 1:\n            seg.pop(a + 1)\n            a -= 1\n            continue\n        if seg[a] - seg[a - 1] == 1:\n            seg.pop(a)\n            a -= 1\n            continue\n        a += 1\n    return f(len(seg))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    M = []\n    for _ in range(N):\n        a,b = list(map(int, stdin.split()))\n        M.append([a,b])\n    M.sort(key=lambda x: x[1])\n    m = M[0][1]\n    res = 0\n    for i in range(1,N):\n        if m <= M[i][0]:\n            m = M[i][1]\n        else:\n            if m == M[i-1][1]:\n                break\n            else:\n                res += m - M[i-1][0]\n    print(res)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    # print(segments)\n\n    # remove one segment\n    # if some segments are degenerate:\n    #   - only one segment:\n    #       - the segment is degenerate\n    #   - more than one segments:\n    #       - remove the segment farthest from the origin point\n    #   - more than one segments:\n    #       - remove the segment farthest from the origin point\n    #       - check if segments are valid\n    #       - if they are valid:\n    #           - remove the segment farthest from the origin point\n    #           - check if segments are valid\n    #           - if they are valid:\n    #               - remove the segment farthest from the origin point\n    #               - check if segments are valid\n    #               - if they are valid:\n    #                   - remove the segment farthest from the origin point\n    #                   - check if segments are valid\n    #                   - if they are valid:\n    #                       - remove the segment farthest from the origin point\n    #                       - check if segments are valid\n    #                       - if they are valid:\n    #                           - remove the segment farthest from the origin point\n    #                           - check if segments are valid\n    #                           - if they are valid:\n    #                               - remove the segment farthest from the origin point\n    #                               - check if segments are valid\n    #                               - if they are valid:\n    #                                   - remove the segment farthest from the origin point\n    #                                   - check if segments are valid\n    #                                   - if they are valid:\n    #                                       - remove the segment farthest from the origin point\n    #                                       - check if segments are valid\n    #                                       - if they are valid:\n    #                                           - remove the segment farthest from the origin point\n    #                                           - check if segments are valid\n    #                                           - if they are valid:\n    #                                               - remove the segment farthest from the origin point\n    #                                               - check if segments are valid\n    #                                               - if they are valid:\n    #                                                  - remove the segment farthest from the origin point\n    #                                                  - check if segments are valid\n    #                                                  - if they are valid:\n    #                                                       - remove the segment farthest from the origin point\n    #                                                       - check if segments are valid\n    #                                                       - if they are valid:\n    #                                                         - remove the segment farthest from the origin point\n    #                                                         - check if segments are valid\n    #                                                         - if they are valid:\n    #                                                             - remove the segment farthest from the origin point\n    #                                                             - check if segments are valid\n    #                                                             - if they are valid:\n    #                                                               - remove the segment farthest from the origin point\n    #                                                               - check if segments are valid\n    #                                                               - if they are valid:\n    #                                                                   - remove the segment farthest from the origin point\n    #                                                                   - check if segments are valid\n    #                                                                   - if they are valid:\n    #                                                                         - remove the segment farthest from the origin point\n    #                                                                         - check if segments are valid\n    #                                                                         - if they are valid:\n    #                                                                           - remove the segment farthest from the origin point\n    #                                                                           - check if segments are valid\n    #                                                                           - if they are valid:\n    #                                                                               - remove the segment farthest from the origin point\n    #                                                                               - check if segments are valid\n    #                                                                               - if they are valid:\n    #                                                                                  - remove the segment farthest from the origin point\n    #                                                                                  - check if segments are valid\n    #                                                                                  - if they are valid:\n    #                                                                                     - remove the segment farthest from the origin point\n    #                                                                                     - check if segments are valid\n    #                                                                                     - if they are valid:\n    #                                                                                         - remove the segment farthest from the origin point\n    #                                                                                         - check if segments are valid\n    #                                                                                         - if they are valid:\n    #                                                                                            - remove the segment farthest from the origin point\n    #                                                                                            - check if segments are valid\n    #                                                                                            - if they are valid:\n    #                                                                                              - remove the segment farthest from the origin point\n    #                                                                                              - check if segments are valid\n    #                                                                                              - if they are valid:\n    #                                                                                                 - remove the segment farthest from the origin point\n    #                                                                                                 - check if segments are valid\n    #                                                                                                 - if they are valid:\n    #                                                                                                     - remove the segment farthest from the origin point\n    #                                                                                                     - check if segments are valid\n    #                                                                                                     - if they are valid:\n    #                                                                                                             - remove the segment farthest from the origin point\n    #                                                                                                             - check if segments are valid\n    #                                                                                               "
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = [list(map(int, input().split())) for _ in range(n)]\n    data.sort(key=lambda x: (x[0], x[1]))\n    res = 0\n    seg = {}\n    for d in data:\n        if d[0] in seg:\n            seg[d[0]].append(d[1])\n        else:\n            seg[d[0]] = [d[1]]\n    for k, v in seg.items():\n        if len(v) > 1:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 1 3\n   ... 2 6\n   ... 0 4\n   ... 3 3\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3\n   ... 2 6\n   ... 1 3\n   ... 0 4\n   ... 3 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5\n   ... 2 6\n   ... 1 3\n   ... 0 4\n   ... 1 20\n   ... 0 4\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        segment = tuple(map(int, stdin.split()))\n        segments.append(segment)\n    if len(segments) == 1:\n        return str(0)\n    segments.sort(key=lambda x: x[1])\n    points = set()\n    for start, end in segments:\n        if end == start:\n            points.add(end)\n        else:\n            points |= set(range(start, end + 1))\n    return str(max(points))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    for i in range(n):\n        s.append(list(map(int, stdin.split())))\n    inter = set()\n    while len(s) > 2:\n        s.remove(s[0])\n        s.remove(s[-1])\n        if s[0][1] < s[-1][0]:\n            s.remove(s[-1])\n        else:\n            s.remove(s[0])\n        inter.add(tuple(s[-1]))\n    if len(inter)!= 0:\n        return str(len(inter))\n    return str(0)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    n -= 1\n    segments = []\n    for i in range(n):\n        segments.append((int(stdin.split()[i * 2]), int(stdin.split()[i * 2 + 1])))\n\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n\n    result = 0\n    removed = False\n    i = 0\n    while i < n:\n        if segments[i][0] > segments[i + 1][1]:\n            break\n        if segments[i][1] == segments[i + 1][0]:\n            i += 1\n            continue\n        i += 1\n\n    if i == n:\n        return 0\n    while i < n:\n        if not removed:\n            result += segments[i][1] - segments[i][0]\n        if i + 1 < n:\n            if segments[i][1] == segments[i + 1][0]:\n                removed = True\n            i += 1\n        else:\n            if segments[i][0] == segments[i + 1][1]:\n                removed = True\n            i += 1\n    return result\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    segments = list(map(lambda x: list(map(int, x.split())), lines[1:]))\n    \n    if n == 1:\n        return segments[0][1] - segments[0][0]\n    \n    def are_degenerate(x, y):\n        if x[0] == y[0]:\n            return True\n        if x[0] == y[1]:\n            return True\n        if x[1] == y[0]:\n            return True\n        if x[1] == y[1]:\n            return True\n        return False\n\n    def is_in_segment(x, y):\n        if x[0] > y[1]:\n            return False\n        if x[0] < y[0]:\n            return False\n        return True\n    \n    for segment in segments:\n        if are_degenerate(segment[0], segment[1]):\n            return 0\n    \n    for i in range(len(segments)):\n        segment = segments[i]\n        for j in range(i + 1, len(segments)):\n            segment2 = segments[j]\n            if are_degenerate(segment, segment2):\n                continue\n            if is_in_segment(segment2[0], segment[1]):\n                continue\n            if is_in_segment(segment[0], segment2[1]):\n                continue\n            break\n        else:\n            return 0\n        for j in range(i + 1, len(segments)):\n            segment2 = segments[j]\n            if are_degenerate(segment, segment2):\n                continue\n            if is_in_segment(segment, segment2[0]):\n                continue\n            if is_in_segment(segment2[1], segment):\n                continue\n            break\n        else:\n            return 0\n        break\n    \n    return segment[1] - segment[0]\n\n\nprint(solution('''2\n1 3\n2 6\n0 4\n3 3'''))\nprint(solution('''4\n1 3\n2 6\n0 4\n3 3'''))\nprint(solution('''5\n2 6\n1 3\n0 4\n1 20'''))\nprint(solution('''3\n4 5\n1 2\n9 20'''))"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{len(remove_intersection_one(stdin.splitlines()))}\"\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\nb = []\n\nfor i in range(n):\n    if a[i] == 1:\n        b.append(2)\n    elif a[i] == 2:\n        b.append(1)\n    elif a[i] == 3:\n        b.append(1)\n    elif a[i] == 4:\n        b.append(2)\n    elif a[i] == 5:\n        b.append(3)"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1 and a[0] == 1:\n        return 'YES'\n    if n == 1 and a[0] == 2:\n        return 'NO'\n    if n == 2:\n        return 'YES' if a[0] == a[1] == 1 else 'NO'\n    if n == 3:\n        if a[0] == a[1] == a[2] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 6:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 7:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 8:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 9:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 10:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 11:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 12:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 13:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == 1:\n            return 'YES'\n        return 'NO'\n    if n == 14:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == 1:\n            return 'YES'\n        return 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.strip().split()))\n    if n == 1:\n        return 'YES'\n    a.sort(reverse=True)\n    i = 0\n    j = 0\n    bricks = 0\n    while i < n - 1 and bricks == 0:\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] += 1\n            i += 2\n        else:\n            bricks += 1\n            i += 1\n    if bricks == 0:\n        return 'YES'\n    if a[0] > 1:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    a = [int(i) for i in input[1].split()]\n    if n == 1:\n        return 'YES' if a[0] == a[1] == a[2] == a[3] == a[4] == 5 else 'NO'\n    b = [[a[0], a[0] + 1],\n         [a[1], a[1] + 1],\n         [a[2], a[2] + 1],\n         [a[3], a[3] + 1],\n         [a[4], a[4] + 1]]\n    c = [[0, 0],\n         [0, 0],\n         [0, 0],\n         [0, 0],\n         [0, 0]]\n    d = []\n    for i in range(n):\n        d.append([a[i], a[i] + 1])\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(5):\n                if d[i][k] + 1 == d[j][k]:\n                    c[i][k] += 1\n                    c[j][k] += 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if c[i][0] + c[j][1] + c[i][2] + c[j][3] + c[i][4] + c[j][4] > 0:\n                b[i][0] += 1\n                b[j][1] += 1\n    return 'YES' if b == d else 'NO'\n\n\nprint(solution(\"2 1 1 2 5\\n\"))\nprint(solution(\"2\\n10 10\\n\"))\nprint(solution(\"2\\n1 2 3\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = \"2 3 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5 2 1 2 5"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    parts = list(map(int, stdin.split()[1]))\n    # Part 1\n    for part in parts:\n        if part == max(parts):\n            continue\n        if not (2 in parts or max(parts) - 1 in parts):\n            return \"NO\"\n    # Part 2\n    all_equal = all(parts[i] == parts[i+1] for i in range(n-1))\n    # Part 3\n    all_one = all(part == 1 for part in parts)\n    return \"YES\" if all_equal and all_one else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def test_parts(parts: list) -> bool:\n        for i in range(len(parts) - 1):\n            if parts[i]!= parts[i + 1]:\n                return False\n        return True\n    n = int(stdin.split()[0])\n    parts = list(map(int, stdin.split()[1]))\n    if test_parts(parts):\n        return \"YES\"\n    if n % 2 == 0:\n        return \"YES\"\n    parts.sort()\n    brick_count = 0\n    current_height = 0\n    for height in parts:\n        if height!= current_height:\n            brick_count += 1\n        current_height = height\n    return \"YES\" if brick_count == n - 1 else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = list(map(int, stdin.strip().split()))\n    s = set(h)\n    l = len(s)\n    if l == 1:\n        return \"YES\"\n    if l == 2:\n        return \"YES\"\n    if l <= 3:\n        return \"NO\"\n    a = sorted(h)\n    for i in range(0, l-2):\n        if a[i] == a[i+1] == a[i+2]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  walls = list(map(int, stdin.split()))\n  walls = sorted(walls)\n  if walls[0] == walls[1]:\n    return \"YES\"\n  for i in range(1, n):\n    if walls[i] == walls[i-1]:\n      return \"YES\"\n  return \"NO\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    s = stdin.split()\n    l = 0\n    for i in s:\n        l += len(i)\n    if l < int(k):\n        return -1\n    s.sort(key=len, reverse=True)\n    dp = [[0] * (int(k)) for _ in range(int(n))]\n    for i in range(int(n)):\n        for j in range(int(k)):\n            if j < len(s[i]):\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i-1][j]\n            if len(s[i]) == j:\n                dp[i][j] = dp[i][j] + int(n) - i\n    return dp[int(n)-1][int(k)-1]\n\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin[0]\n\n    # You can't take a subsequence that doesn't have enough characters\n    if len(s) < k:\n        return -1\n\n    # The cost of any subsequence has to be greater than or equal to the minimum cost of the subsequence that\n    # doesn't contain any character from the set\n    total_cost = len(s)\n\n    # The cost of any subsequence has to be greater than or equal to the minimum cost of the subsequence that\n    # contains only one character\n    for i in range(1, k):\n        if s[i] in s[:i]:\n            total_cost = min(total_cost, i)\n        else:\n            break\n\n    return total_cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return \"1\"\n\n    chars = []\n    for char in stdin:\n        chars.append(char)\n\n    char_to_cost = {}\n    for i in range(n):\n        char_to_cost[chars[i]] = i\n\n    total_cost = 0\n    max_len = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            chars.pop(i)\n            chars.pop(j - 1)\n            total_cost += j - i\n            chars.append(chars.pop(i))\n            chars.insert(i, chars.pop(j - 1))\n            cost = 0\n            for char in chars:\n                cost += char_to_cost[char]\n            max_len = max(max_len, cost)\n    if total_cost > k:\n        return \"-\"\n\n    return str(max_len - total_cost)\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    s_size = len(s)\n    for i in range(1, s_size):\n        s = s + s[:i]\n    sub_size = len(s)\n    result = 100000000\n    if sub_size >= k:\n        for i in range(sub_size - k + 1):\n            tmp_s = s[i:i + k]\n            if len(tmp_s) < k:\n                break\n            tmp_set = {tmp_s}\n            for j in range(1, k):\n                tmp_s = tmp_s + s[i + j:i + j + 1]\n                if len(tmp_s) < k:\n                    break\n                tmp_set.add(tmp_s)\n            if len(tmp_set) == k:\n                result = min(result, tmp_set.pop())\n    if result == 100000000:\n        result = -1\n    print(result)\n\nsolution(\"10 10\")\n\nsolution(\"4 5\")\n\nsolution(\"5 6\")\n\nsolution(\"5 7\")\n\nsolution(\"10 100\")\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\n   ...     '''\n   ... 5 6\n   ... aaaaa\n   ... '''\n   ... )\n    '4'\n    >>> solution(\n   ...     '''\n   ... 5 7\n   ... aaaaa\n   ... '''\n   ... )\n    '-1'\n    >>> solution(\n   ...     '''\n   ... 10 100\n   ... aba\n   ... '''\n   ... )\n    '233'\n    >>> solution(\n   ...     '''\n   ... 10 1\n   ... aba\n   ... '''\n   ... )\n    '15'\n    '''\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    s = stdin.strip()\n\n    total_cost = 0\n    total_cost_set = set()\n\n    for i in range(n):\n        total_cost += 1\n        if s[i] in total_cost_set:\n            total_cost = -1\n            break\n\n        total_cost_set.add(s[i])\n\n    return str(total_cost)\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    while n > 0 and k > 0:\n        if s[:n] in s[n+1:]:\n            n -= 1\n            s = s[n+1:]\n        else:\n            k -= 1\n            s = s[n:]\n    if n > 0 or k > 0:\n        print('-1')\n    else:\n        print(len(s))"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    n, k = int(s[0]), int(s[1])\n\n    if n == 0 or k > n:\n        return -1\n    if k <= n:\n        return k * n - sum(range(1, n + 1))\n    d = {}\n    for i in range(n):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    ans = 0\n    for key, value in d.items():\n        ans += value * (value - 1) // 2\n    return ans\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n\n    def add_to_set(s):\n        if len(s) == k:\n            return False\n        for i in range(len(s) - 1):\n            if s[i:i + 2] in {s[i] + s[i + 1], s[i + 1] + s[i]}:\n                return False\n        return True\n\n    def optimal(s):\n        for i in range(len(s) - 1):\n            substr = s[i:i + 2]\n            if substr in s:\n                return -1\n        return len(s)\n\n    def greedy_algo(s):\n        res = \"\"\n        for i in range(len(s)):\n            res += s[i]\n            if len(res) == k:\n                return optimal(res)\n            if add_to_set(res):\n                res = \"\"\n        return -1\n\n    def dp(s):\n        dp = [[0] * len(s) for _ in range(k + 1)]\n        for i in range(len(dp)):\n            dp[i][0] = i\n\n        for i in range(1, k + 1):\n            for j in range(1, len(s)):\n                if s[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1]) + 1\n\n        return dp[-1][-1]\n\n    def update_set(dp, i, j):\n        if dp[i][j] == 0:\n            return 0\n        if dp[i][j] == 1:\n            return 1\n        if dp[i][j] == 2:\n            return 2\n\n        for k in range(i + 1, j):\n            if dp[i][k] == dp[i][j] - 1 and dp[k][j] == dp[i][j] - 1 and s[i]!= s[k]:\n                dp[i][j] = 2\n                return 2\n            elif dp[i][k] == dp[i][j] - 1 and s[i] == s[k]:\n                dp[i][j] = dp[i][k] + 1\n                return dp[i][j]\n            elif dp[i][k] == dp[i][j] - 1 and s[i] == s[j]:\n                dp[i][j] = dp[i][k] + 1\n                return dp[i][j]\n\n        return 3\n\n    return min(dp(s), greedy_algo(s), optimal(s), update_set(dp, 0, len(s)), update_set(dp, 1, len(s)))\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    res = 0\n    if n <= k:\n        return str(res)\n    if n == 1 and k == 1:\n        return str(1)\n    s1 = s\n    s2 = s\n    for i in range(n - k + 1):\n        s1 = s1[1:] + s1[0]\n        s2 = s2[1:] + s2[0]\n        res += 1\n    return str(res)\n\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution.\"\"\"\n    _, a, b, c = map(int, stdin.split())\n    months = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    days = {}\n    for m in months:\n        days[m] = 0\n    days[1] = a\n    days[2] = b\n    days[3] = c\n    for i in range(4, 13):\n        days[i] = days[i-1] + max(days[i-3], days[i-4])\n    for i in range(4, 13):\n        days[i] = max(days[i-1], days[i-2]) + max(days[i-3], days[i-4])\n    days[13] = max(days[12], days[11]) + max(days[10], days[9])\n    days[14] = max(days[13], days[12]) + max(days[11], days[10])\n    days[15] = max(days[14], days[13]) + max(days[12], days[11])\n    days[16] = max(days[15], days[14]) + max(days[13], days[12])\n    days[17] = max(days[16], days[15]) + max(days[14], days[13])\n    days[18] = max(days[17], days[16]) + max(days[15], days[14])\n    days[19] = max(days[18], days[17]) + max(days[16], days[15])\n    days[20] = max(days[19], days[18]) + max(days[17], days[16])\n    days[21] = max(days[20], days[19]) + max(days[18], days[17])\n    days[22] = max(days[21], days[20]) + max(days[19], days[18])\n    days[23] = max(days[22], days[21]) + max(days[20], days[19])\n    days[24] = max(days[23], days[22]) + max(days[21], days[20])\n    days[25] = max(days[24], days[23]) + max(days[22], days[21])\n    days[26] = max(days[25], days[24]) + max(days[23], days[22])\n    days[27] = max(days[26], days[25]) + max(days[24], days[23])\n    days[28] = max(days[27], days[26]) + max(days[25], days[24])\n    days[29] = max(days[28], days[27]) + max(days[26], days[25])\n    days[30] = max(days[29], days[28]) + max(days[27], days[26])\n    days[31] = max(days[30], days[29]) + max(days[28], days[27])\n    days[32] = max(days[31], days[30]) + max(days[29], days[28])\n    days[33] = max(days[32], days[31]) + max(days[30], days[29])\n    days[34] = max(days[33], days[32]) + max(days[31], days[30])\n    days[35] = max(days[34], days[33]) + max(days[32], days[31])\n    days[36] = max(days[35], days[34]) + max(days[33], days[32])\n    days[37] = max(days[36], days[35]) + max(days[34], days[33])\n    days[38] = max(days[37], days[36]) + max(days[35], days[34])\n    days[39] = max(days[38], days[37]) + max(days[36], days[35])\n    days[40] = max(days[39], days[38]) + max(days[37], days[36])\n    days[41] = max(days[40], days[39]) + max(days[38], days[37])\n    days[42] = max(days[41], days[40]) + max(days[39], days[38])\n    days[43] = max(days[42], days[41]) + max(days[40], days[39])\n    days[44] = max(days[43], days[42]) + max(days[41], days[40])\n    days[45] = max(days[44], days[43]) + max(days[42], days[41])\n    days[46] = max(days[45], days[44]) + max(days[43], days[42])\n    days[47] = max(days[46], days[45]) + max(days[44], days[43])\n    days[48] = max(days[47], days[46]) + max(days[45], days[44])\n    days[49] = max(days[48], days[47]) + max(days[46], days[45])\n    days[50] = max(days[49], days[48]) + max(days[47], days[46])\n    days[51] = max(days[50], days[49]) + max(days[48], days[47])\n    days[52] = max(days[51], days[50]) + max(days[49], days[48])\n    days[53] = max(days[52], days[51]) + max(days[50], days[49])\n    days[54] = max(days[53], days[52]) + max(days[51], days[50])\n    days[55] = max(days[54], days[53]) + max(days[52], days[51])\n    days[56] = max(days[55], days[54]) + max(days[53], days[52])\n    days[57] = max(days[56], days[55]) + max(days[54], days[53])\n    days[58] = max(days[57], days[56]) + max(days[55], days[54])\n    days[59] = max(days[58], days[57]) + max(days[56], days[55])\n    days[60] = max(days[59],"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # from pprint import pprint\n    # stdin = list(map(int, stdin.split(\"\\n\")))\n    # N, R, C = stdin\n    # N, R, C = list(map(int, stdin[0].split(\" \")))\n    # # print(N, R, C)\n    # # print(stdin)\n    # # pprint(stdin)\n    # print(solution_s(stdin))\n    # print(solution_r(stdin))\n    # print(solution_c(stdin))\n    return solution_s(stdin)\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    day = (1, 3, 2, 5, 4, 6)\n    day_start = 0\n    days_eaten = 0\n    while days_eaten < a + b + c:\n        if days_eaten + 1 in day:\n            if days_eaten + 2 in day:\n                days_eaten += 2\n            else:\n                days_eaten += 1\n        else:\n            days_eaten += 1\n        day_start = day_start + 1\n        day_start %= 7\n    return str(day_start + 1)\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    n_days = max(a, b, c)\n    if n_days < 3:\n        return f\"{n_days}\"\n    if n_days % 7 == 0 or n_days % 7 == 1:\n        n_days -= 1\n    n_days = (n_days - 1) % 7\n    if n_days == 1:\n        return f\"{n_days + 2}\"\n    if n_days == 2:\n        return f\"{n_days}\"\n    return f\"{n_days + 1}\"\n\nsolution(\"2 1 1\")\nsolution(\"3 2 2\")\nsolution(\"1 100 1\")\nsolution(\"30 20 10\")\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = int(stdin)\n    a = x % 7\n    if a == 0:\n        a = 7\n    if a == 1:\n        a = 4\n    if a == 2:\n        a = 3\n    if a == 3:\n        a = 1\n    if a == 4:\n        a = 2\n    if a == 5:\n        a = 6\n    if a == 6:\n        a = 5\n    if a == 7:\n        a = 4\n    return str(a)\n\nstdin = '2 1 1'\nprint(solution(stdin))\nstdin = '3 2 2'\nprint(solution(stdin))\nstdin = '1 100 1'\nprint(solution(stdin))\nstdin = '30 20 10'\nprint(solution(stdin))\n\n\n\n'''\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a = [0, 0, 0]\n    b = [0, 0, 0]\n    c = [0, 0, 0]\n    res = 1\n    while a[0] < a[1] and b[0] < b[1] and c[0] < c[1]:\n        if a[0] + b[0] + c[0] <= a[1] and b[0] + c[0] <= b[1] and a[0] + c[0] <= a[1] and c[0] + b[0] <= c[1]:\n            res += 1\n        a[0] += 1\n        a[1] += 1\n        b[0] += 1\n        b[1] += 1\n        c[0] += 1\n        c[1] += 1\n    return res\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    foods = list(map(int, stdin.split(\" \")))\n    foods = [foods[0]] + foods\n    n = len(foods)\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n    dp[0][1] = 0\n\n    def is_valid(index, required_foods):\n        for food in required_foods:\n            if food <= 0:\n                return False\n        if required_foods[0] + foods[index] <= foods[index + 1]:\n            return True\n        return False\n\n    def check(index, required_foods):\n        if index == len(foods) - 1:\n            if is_valid(index, required_foods):\n                return 1\n            else:\n                return 0\n        if dp[index][required_foods[0]]!= -1:\n            return dp[index][required_foods[0]]\n        answer = 0\n        for required_food in range(required_foods[0] + 1):\n            if required_food <= required_foods[1]:\n                answer = max(answer, check(index + 1, required_foods[1:]) + check(index + required_foods[1] + 1, required_foods[2:]))\n        dp[index][required_foods[0]] = answer\n        return answer\n\n    return str(check(0, (foods[0], -1, -1)))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    return '0'"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, c = stdin[0], stdin[1], stdin[2]\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if a > b and a > c:\n        print((a//7) + (b//7) + (c//7))\n    elif a > c and a > b:\n        print((a//7) + (c//7) + (b//7))\n    elif b > a and b > c:\n        print((b//7) + (a//7) + (c//7))\n    elif b > c and b > a:\n        print((b//7) + (c//7) + (a//7))\n    else:\n        print((c//7) + (a//7) + (b//7))\n\nsolution(input())"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = list(map(int, stdin.split()))\n    s = (2*a + 1*b + 1*c) // 10\n    if s < (2*a + 1*b + 1*c):\n        s = (2*a + 1*b + 1*c) - (2*a + 1*b) // 10\n    return str(s)\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    diag = [[i for i in range(1, n + 1)] for j in range(1, n + 1)]\n    diag2 = [[i for i in range(1, n + 1)] for j in range(1, n + 1)]\n\n    for i in range(n):\n        for j in range(n):\n            diag[i][j] = int(input())\n            diag2[i][j] = int(input())\n    for i in range(n):\n        diag[i][i] = int(diag[i][i])\n        diag2[i][i] = int(diag2[i][i])\n\n    for i in range(n):\n        for j in range(n):\n            if diag[i][j] == diag2[i][j]:\n                diag[i][j] = 0\n                diag2[i][j] = 0\n            else:\n                diag[i][j] = 1\n                diag2[i][j] = 1\n    if diag == diag2:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tile = list(map(int, stdin.split()))\n        tiles.append(tile)\n\n    symmetric = True\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 0:\n                continue\n            if tiles[i][j]!= tiles[j][i]:\n                symmetric = False\n                break\n\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 0:\n                continue\n            if tiles[i][j]!= tiles[m-1-j][i]:\n                symmetric = False\n                break\n\n    if symmetric:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        tiles = []\n        tiles_coordinates = []\n        for j in range(2*n):\n            tiles.append(list(map(int, stdin.split()[2*j:2*j+2])))\n            tiles_coordinates.append([j, 2*n-1-j])\n        tiles.sort()\n        n = len(tiles)\n        for i in range(n):\n            tiles[i] = (tiles[i][0], tiles[i][1], tiles[i][2], tiles[i][3])\n        tiles = tuple(tiles)\n        tiles_coordinates.sort()\n        tiles_coordinates = tuple(tiles_coordinates)\n        tiles = sorted(tiles, key=lambda x: (x[2], x[3]))\n        tiles_coordinates = tuple(tiles_coordinates)\n        tiles = sorted(tiles, key=lambda x: (x[1], x[2]))\n        tiles_coordinates = tuple(tiles_coordinates)\n        tiles = tuple(tiles)\n        tiles_coordinates = tuple(tiles_coordinates)\n        tiles = tuple(sorted(tiles, key=lambda x: x[0]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[0]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[1]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[1]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[2]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[2]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[3]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[3]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[1]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[1]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[0]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[0]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[2]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[2]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[3]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[3]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[2]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[1]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[1]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[1]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[0]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[0]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[2]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[2]))\n        tiles = tuple(sorted(tiles, key=lambda x: x[3]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[3]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[0]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[1]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[2]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[3]))\n        tiles_coordinates = tuple(sorted(tiles_coordinates, key=lambda x: x[1]))\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    tiles = {}\n    for i in range(n):\n        tile = stdin.strip().split()[2 * i:2 * (i + 1)]\n        tiles[int(tile[0])] = int(tile[1])\n    return 'YES' if m == 2 and m * m == 4 * 2 + 2 else 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build a symmetric matrix\n    \"\"\"\n\n    # input\n    t = int(stdin.strip())\n    for _ in range(t):\n        n, m = map(int, stdin.strip().split())\n        matrix = [[0 for _ in range(m)] for _ in range(n)]\n        # input\n        for _ in range(n):\n            x, y = map(int, stdin.strip().split())\n            matrix[x - 1][y - 1] = 1\n            matrix[y - 1][x - 1] = 1\n        # transform into a symmetric matrix\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                matrix[i][j] = matrix[j][i]\n        # check if the matrix is symmetric\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    continue\n                if matrix[i][j]!= matrix[j][i]:\n                    return 'NO'\n\n        # transform into a square matrix\n        for i in range(n):\n            for j in range(m):\n                if i == j:\n                    continue\n                matrix[i][j] = matrix[j][i]\n\n        # check if the matrix is square\n        for i in range(m):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    continue\n                if matrix[i][j]!= matrix[j][i]:\n                    return 'NO'\n        return 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    stdin = [tuple(map(int, stdin.split())) for _ in range(n)]\n    a = {}\n    for i in range(n):\n        for j in range(n):\n            if stdin[i][j] not in a:\n                a[stdin[i][j]] = [[i, j]]\n            else:\n                a[stdin[i][j]].append([i, j])\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                continue\n            if stdin[i][j]!= stdin[j][i]:\n                if stdin[i][j] not in a or stdin[j][i] not in a:\n                    return 'NO'\n                for (p, q) in a[stdin[i][j]]:\n                    for (x, y) in a[stdin[j][i]]:\n                        if p == x and q == y:\n                            continue\n                        if abs(p - x) + abs(q - y) > 3:\n                            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = map(int, stdin.pop(0).split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(stdin.pop(0))\n    return \"YES\" if solution_helper(tiles, m, n) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    tiles = [[int(x) for x in stdin.split()] for _ in range(n)]\n    tiles = [[x, y] for x, y in tiles]\n    for i in range(len(tiles)):\n        tiles[i].reverse()\n    square = []\n    for i in range(n):\n        square.append([tiles[i][j] for j in range(n)])\n        square[i].reverse()\n    for i in range(len(square)):\n        square[i].reverse()\n    return \"YES\" if is_square(square, m) else \"NO\"\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  pass"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string as input and returns the smallest possible value of $|sum(A) - sum(B)|$ that you can divide the input sequence into two sets $A$ and $B$ in such a way that each element belongs to exactly one set and $|sum(A) - sum(B)|$ is minimum possible.\n    \"\"\"\n    def sort_key(x: int) -> int:\n        \"\"\"\n        Smallest possible value is the smallest number.\n        \"\"\"\n        return x\n\n    def solve(n: int, left: int, right: int) -> int:\n        if right - left == 1:\n            return abs(left - right)\n\n        # Compute minimum values of A and B.\n        if left % 2 == 0:\n            min_a = max(left // 2, n // 2 + left)\n            min_b = max(right // 2, n // 2 - left)\n        else:\n            min_a = max(left // 2, n // 2)\n            min_b = max(right // 2, n // 2 + left)\n\n        # Max and min values of A and B are the sum of numbers from min to max.\n        max_a = sum(range(min_a))\n        max_b = sum(range(min_b))\n\n        # If we've got a set then update the left and right boundaries and check if we've found the answer.\n        if max_a == min_b:\n            return abs(max_a - max_b)\n\n        # Else we need to compute the minimum value for A and B.\n        min_a_ans = max(left + (n - left) // 2, min_a)\n        min_b_ans = max(right + (n - right) // 2, min_b)\n\n        # If the minimum value for A is the same as for B then we've found the answer.\n        if min_a_ans == min_b_ans:\n            return abs(min_a_ans - min_b_ans)\n\n        # If the minimum value for A is greater than the maximum value for B then we need to swap them.\n        elif min_a_ans > min_b_ans:\n            return min(min_a_ans - min_b_ans, solve(n, left, min_a))\n\n        # If the minimum value for A is less than the maximum value for B then we need to swap them.\n        elif min_a_ans < min_b_ans:\n            return min(min_a_ans - min_b_ans, solve(n, min_a, right))\n\n    return str(solve(int(stdin), 1, len(stdin)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i for i in range(n)]\n    b = []\n    s = 0\n    for i in range(n):\n        s += a[i]\n        b.append(a[i])\n        if len(b) >= 2:\n            if len(b) == 2:\n                break\n            for i in range(len(b)-2):\n                if sum(b) - sum(b[i+1:]) < s - sum(b[i+1:]):\n                    s -= sum(b[i+1:])\n                    b = b[:i+1]\n                    break\n    print(s)\nsolution(stdin)"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_a = sum(range(1, n + 1))\n    sum_b = sum(range(2, n + 1))\n    return abs(sum_a - sum_b)\n\nstdin = \"\"\">\n\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = {i: 1 for i in range(1, n + 1)}\n    b = {i: 0 for i in range(1, n + 1)}\n    s = sum(a)\n    t = sum(b)\n    while True:\n        if s == t:\n            print(abs(s - t))\n            break\n        else:\n            n_a = n - len(a)\n            n_b = n - len(b)\n            if n_a > n_b:\n                s = s + a.popitem()[1]\n            else:\n                t = t + b.popitem()[1]"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin.pop(0)\n    ans = float('inf')\n    def divide(a, b):\n        nonlocal ans\n        s = sum(a) - sum(b)\n        ans = min(ans, abs(s))\n        return s\n\n    def rec(stdin):\n        if len(stdin) < 2: return\n        rec(stdin[:len(stdin)//2])\n        rec(stdin[len(stdin)//2:])\n        divide(stdin[:len(stdin)//2], stdin[len(stdin)//2:])\n\n    rec(stdin)\n    return str(ans)\n\nsolution(\"3\")\nsolution(\"5\")\nsolution(\"6\")"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    #l = range(1, n + 1)\n    l = list(range(1, n + 1))\n    l.sort()\n    \n    #print(l)\n    \n    A = []\n    B = []\n    \n    #print(l)\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            A.append(l[i])\n        else:\n            B.append(l[i])\n    \n    #print(A)\n    #print(B)\n    \n    A.sort()\n    B.sort()\n    \n    if A == l and B == l:\n        #print(\"equals\")\n        return 0\n    elif A == l and B!= l:\n        #print(\"less than equal\")\n        return 1\n    elif A!= l and B == l:\n        #print(\"greater than equal\")\n        return 1\n    else:\n        #print(\"greater than\")\n        return 2\n        \n        \nsolution(input())"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sequence = list(map(int, stdin.split()))\n    A = 0\n    B = 0\n    for i in range(1, len(sequence)):\n        a = sum(sequence[i - 1:i + 1])\n        b = sum(sequence[i + 1:])\n        if abs(a - b) < abs(a - B) or abs(a - b) == abs(a - B):\n            A, B = a, b\n    return str(abs(A - B))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = n // 2\n\n    return str(abs(sum(map(int, str(t)))-sum(map(int, str(n-t))))).strip()"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = 0, 0\n    while n >= 2:\n        a, b = b, a + b\n        n = n // 2\n    return str(abs(a - b))\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    result = 0\n    if n == 0:\n        return str(0)\n    else:\n        if n <= 4:\n            return str(0)\n        else:\n            if n%2 == 0:\n                length = n // 2\n            else:\n                length = n // 2 + 1\n            for i in range(1, length):\n                if s[i] == '(':\n                    if s[i-1] == '(':\n                        s = s[0:i-1] + '1' + s[i+1:]\n                        result += 1\n                    elif s[i-1] == ')':\n                        s = s[0:i-1] + '1' + s[i+1:]\n                        result += 1\n                if s[i] == ')':\n                    if s[i-1] == '(':\n                        s = s[0:i-1] + '1' + s[i+1:]\n                        result += 1\n                    elif s[i-1] == ')':\n                        s = s[0:i-1] + '1' + s[i+1:]\n                        result += 1\n        return str(result)"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    \n    length = int(stdin.strip())\n    length += 2\n    length = length // 2\n    string = stdin\n    \n    count += solution2(length, string)\n    \n    return str(count)\n    \ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(find_bracket_sequences(stdin)) % 1000000007)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n//2+1):\n        tmp = stdin[:2*i]\n        if tmp == tmp[::-1]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n\n    return str(sum(2 * x * (x - 1) // 2 + (x - 1) for x in range(n, 2 * n + 1)))\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    len_ = int(stdin.split()[0])\n    st = stdin.split()[1]\n    count = 0\n    for i in range(len_//2):\n        if st[i] == \"(\" and st[-(i+1)] == \")\":\n            count += 1\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_brackets(stdin))\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for i in range(len(stdin)-1):\n        if stdin[i] == '(' and stdin[i+1] == ')':\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin[n]\n    d = {}\n    for i in range(0,n):\n        if string[i] == \"(\":\n            string = string[:i] + \"1\" + string[i+1:]\n        if string[i] == \")\":\n            string = string[:i] + \"0\" + string[i+1:]\n    if string in d:\n        return d[string]\n    else:\n        d[string] = 0\n        for i in range(0,n):\n            if string[i] == \"(\":\n                string = string[:i] + \"0\" + string[i+1:]\n            if string[i] == \")\":\n                string = string[:i] + \"1\" + string[i+1:]\n        return d[string]\n    return\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while (n!= 1):\n        if n % 25 == 0:\n            return -1\n        n = sum([int(i) * int(j) for i, j in zip(str(n)[::-1], str(n))])\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number: str = stdin\n    for i in range(len(number)):\n        if number[i] == '0':\n            number = number.replace(number[i], '1')\n            number = number.replace(number[i], '0')\n            continue\n        break\n    if len(number) % 3 == 0:\n        if number[0] == '0':\n            return -1\n        if number[1] == '0':\n            number = number.replace('0', '2')\n            number = number.replace('1', '0')\n        if number[2] == '0':\n            number = number.replace('0', '3')\n            number = number.replace('1', '0')\n        return int(number)\n    return -1"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    # initial num\n    num = n\n    count = 0\n    while n % 25!= 0:\n        # swap num with num/25\n        # get every digit of num/25\n        # convert it to list\n        # and sort it\n        # get every digit of num\n        # convert it to list\n        # sort it\n        # compare both the lists\n        # if they are same then increment count\n        # else break\n        num_list = list(str(num))\n        num_list.sort()\n        num = int(''.join(num_list))\n        # print(num)\n        count += 1\n    return count\n    \n    #print(num)\n    \n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5071')\n    '4'\n    >>> solution('705')\n    '1'\n    >>> solution('1241367')\n    '-1'\n    '''\n    n = stdin\n    ans = 0\n    while True:\n        n = str(n)\n        if len(n) == 1:\n            return str(ans)\n        n_t = n[1:]\n        n_f = n[:-1]\n        if int(n_t) % 25 == 0 and int(n_t) % int(n_f) == 0:\n            ans += 1\n        n = int(n)"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_digit_in_num: int = pow(10, 18)\n    num = stdin\n    num_str: str = str(num)\n\n    move_count: int = 0\n\n    while True:\n        if num_str.count(\"0\") > max_digit_in_num / 2:\n            return -1\n        elif \"0\" not in num_str:\n            return move_count\n        else:\n            min_digit: int = 1\n            max_digit: int = 9\n            for i in range(len(num_str)):\n                if max_digit_in_num / 2 < num_str[i]:\n                    min_digit = i + 1\n                    break\n                elif max_digit_in_num / 2 > num_str[i]:\n                    max_digit = i\n            if min_digit!= 1:\n                num_str = num_str[:min_digit - 1] + num_str[min_digit:]\n            else:\n                num_str = num_str[:max_digit] + num_str[min_digit:]\n            move_count += 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    if len(stdin) > n:\n        for i in range(n, len(stdin)):\n            if stdin[i]!= '0':\n                if int(stdin[i])%25 == 0:\n                    print(i-n+1)\n                    return\n        print(-1)\n\nsolution(input())"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    for i in range(0, len(a)-1):\n        if a[i] > a[i+1]:\n            break\n    else:\n        return -1\n    cnt = 0\n    x = a[i+1:]\n    for j in range(0, len(x)-1):\n        if x[j] == 0:\n            continue\n        if x[j]%5 == 0 and x[j+1]%5 == 0:\n            cnt += 1\n            break\n    return str(cnt)"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number, length = stdin.splitlines()\n    length = int(length)\n\n    numbers = str(number)\n\n    if numbers[0]!= '0':\n        return -1\n\n    for move in range(length):\n        for i in range(len(numbers)-1):\n            if numbers[i]!= numbers[i+1]:\n                if numbers[i] == '0':\n                    numbers = numbers[:i] + numbers[i+1] + numbers[i+2:]\n                else:\n                    numbers = numbers[:i] + str(int(numbers[i])-1) + numbers[i+1:]\n                if len(numbers) % 25 == 0:\n                    return move\n    return -1\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    s = \"\".join(sorted(s))\n    while n!= \"\".join(sorted(s)):\n        n = int(n)\n        s = str(n)\n        s = \"\".join(sorted(s))\n    return -1 if \"\".join(sorted(s))[0] == 0 else len(s)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if is_divisible(n):\n        print(-1)\n    else:\n        moves = 0\n        while not is_divisible(n):\n            n = swap_adjacent(n)\n            moves += 1\n        print(moves)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    size = len(s)\n    num_colors = size + 1\n    taken = set()\n    for i in range(1, num_colors):\n        if str(i) in s:\n            taken.add(i)\n\n    for _ in range(size):\n        min_color = size\n        for color in taken:\n            if color <= min_color:\n                min_color = color\n        taken.remove(min_color)\n        # print(\"remove: \", min_color)\n        for color in taken:\n            if color > min_color:\n                taken.remove(color)\n        # print(\"remove: \", min_color)\n\n        new_taken = set()\n        for color in taken:\n            if color < min_color:\n                new_taken.add(color)\n        taken = new_taken\n        # print(len(taken), taken)\n\n    return str(len(taken))\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n\n    # sort the string\n    s = sorted(s)\n\n    # find the first diff between elements in the array and the length\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            return str(i + 1)\n\n    return str(1)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return \"1\"\n    s = stdin[::]\n    for i in range(n):\n        c = int(s[i])\n        if c == 1:\n            continue\n        s = sorted(s)\n        break\n    if i == n:\n        return \"1\"\n    for j in range(i, n):\n        c = int(s[j])\n        if c == 1:\n            continue\n        return \"1\" + str(j - i + 1) + \" \" + str(c - 1) + \" \" + str(c - 1) + \" \" + str(c) + \" \" + str(c) + \" \" + str(c) + \" \" + str(c)\n    return \"1\" + str(n - i + 1) + \" \" + str(1) + \" \" + str(1) + \" \" + str(1) + \" \" + str(1) + \" \" + str(1) + \" \" + str(1)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    string = stdin.split()[1]\n\n    count = 0\n    colorings = []\n    used = {}\n\n    def dfs(colorings):\n        nonlocal used, count\n        if len(colorings) == n:\n            count += 1\n            used = {}\n            return\n\n        for color in range(1, n + 1):\n            if color in used and used[color] == colorings[-1]:\n                continue\n\n            used[color] = colorings[-1]\n            dfs(colorings + [color])\n            used[color] = color\n\n    dfs([])\n\n    return f\"{count} {''.join(str(x) for x in sorted(colorings))}\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    return str(min(len(s), n) + 1) +'' +''.join(sorted(list(s)))"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1]\n    n = int(stdin)\n    s = stdin\n    t = sorted(s)\n    c = [i for i in range(n)]\n    for i in range(n):\n        if t[i]!= s[i]:\n            c[i] = c[i - 1] + 1\n    print(\"\\n\".join(map(str, c)))\n    return str(max(c))\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(math.ceil(len(s) / 2))\n\n    print(n)\n    print(' '.join(map(str, range(n + 1))))\n    return str(n)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    if len(s) < 2:\n        return str(1)\n    # First, count how many colors are needed\n    colors_needed = max(\n        [s[i] for i in range(len(s))],\n        key=lambda x: s.count(x))\n    colors_needed = len(colors_needed)\n    # Second, assign colors to each char\n    s = ''.join(sorted(s))\n    colors = [0] * len(s)\n    for i in range(len(s)):\n        if s[i]!= s[i]:\n            colors[i] = 2\n    # Third, fill the remaining colors to make s sorted\n    for i in range(colors_needed, len(colors)):\n        if colors[i] == 0:\n            colors[i] = colors[i - colors_needed] + 1\n    return str(colors_needed) +'' +''.join(str(c) for c in colors)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    s: str = stdin.split()[1]\n\n    def swap_chars(x: str) -> str:\n        return ''.join([x[i], x[i + 1] for i in range(len(x) - 1)])\n\n    def get_permutation(s: str) -> str:\n        n = len(s)\n        r = ''\n        while n > 0:\n            r += ''.join([s[i] for i in range(n) if i % 2 == 0])\n            r += ''.join([s[i] for i in range(n) if i % 2 == 1])\n            n //= 2\n        return r\n\n    if n == 1:\n        return ''.join([str(i) for i in range(1, n + 1)])\n    s = list(s)\n    if n == 2:\n        if s[0] < s[1]:\n            return str(2) +'' + str(1) +'' + str(2)\n        else:\n            return str(1) +'' + str(2) +'' + str(2)\n    m: int = int(math.log2(n)) + 1\n    if n >= 4:\n        m = max(m, 2 * int(math.log2(n)))\n    c = [str(i) for i in range(n)]\n    v = []\n    s = list(s)\n    while n > 0:\n        n -= 1\n        v.append(c[n])\n        c[n] = s[n]\n        s[n] = '*'\n    while n > 0:\n        c[n] = swap_chars(c[n])\n        n -= 1\n    while m > 0:\n        v.append(c[0])\n        c[0] = s[0]\n        s[0] = '*'\n        c = [swap_chars(x) for x in c]\n        s = swap_chars(s)\n        n = len(s)\n        m -= 1\n    return ''.join(v)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = stdin.rstrip()\n    s = \"\".join(sorted(s))\n    def color(s):\n        counts = collections.Counter(s)\n        for i in range(n):\n            if counts[s[i]] == 1:\n                break\n        res = max(counts.values()) - 1\n        for i in range(n - 1):\n            if counts[s[i]] < res:\n                res = max(res, counts[s[i]])\n                continue\n            if counts[s[i]] == res:\n                counts[s[i]] -= 1\n                continue\n            break\n        return res\n    if n == 1:\n        res = 1\n    else:\n        res = color(s)\n    if res == 1:\n        return str(res)\n    return str(res) + \" \" + str(color(s))\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = []\n    strings_len = int(stdin.split()[0])\n    for _ in range(strings_len):\n        strings.append(stdin.split()[_])\n    return \"YES\" if (all(sorted(strings[i]) == sorted(strings[i+1]) for i in range(strings_len-1)) and len(set([len(s) for s in strings])) == 1) else \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    ret = []\n    while input:\n        if input[0] == '':\n            input.pop(0)\n        else:\n            ret.append(input.pop(0))\n    res = ''\n    for i in ret:\n        res += ''.join(sorted(i))\n    if res == res[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1:]\n    for i in range(n):\n        if not any(map(lambda x: x[::-1] in s, s)):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(string_a: str, string_b: str) -> bool:\n        if string_a == string_b:\n            return True\n        if len(string_a) > len(string_b):\n            return False\n        if len(string_a) == len(string_b) and string_a in string_b:\n            return True\n        for i in range(len(string_a) - 1, -1, -1):\n            s = string_a[:i] + string_a[i+1:]\n            if s in string_b:\n                return True\n        return False\n\n    return \"YES\" if any(is_substring(s, stdin) for s in stdin.split('\\n')) else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def sort_string(string: str, list_to_sort: list) -> str:\n        if not list_to_sort:\n            return string\n        for i in range(len(list_to_sort)):\n            for j in range(i + 1, len(list_to_sort)):\n                if len(list_to_sort[i]) < len(list_to_sort[j]):\n                    temp = list_to_sort[i]\n                    list_to_sort[i] = list_to_sort[j]\n                    list_to_sort[j] = temp\n        return ''.join(list_to_sort)\n\n    strings = stdin.split()\n    answer = 'NO'\n    for i in range(len(strings)):\n        temp_string = strings[i]\n        temp_string_list = list(temp_string)\n        temp_string_list = sorted(temp_string_list, key=lambda x: ord(x))\n        temp_string = ''.join(temp_string_list)\n        if temp_string in strings:\n            strings.remove(temp_string)\n        else:\n            answer = 'YES'\n            break\n    return answer\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= n:\n        return \"NO\"\n    else:\n        strings = stdin.split()\n        ordered = []\n        for i in range(len(strings)):\n            check = True\n            for j in range(i):\n                if strings[i] in strings[j]:\n                    check = False\n            if check:\n                ordered.append(strings[i])\n\n        return \"YES\" +''.join(ordered)"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    for i in range(len(strings)):\n        substrings = strings[i]\n        for j in range(len(strings)):\n            if j!= i:\n                if substrings in strings[j]:\n                    if i!= 0:\n                        strings[i] = substrings + strings[i]\n                    else:\n                        strings[i] = substrings + substrings\n    for i in range(len(strings)):\n        if i!= 0:\n            strings[i] = strings[i] + strings[i - 1]\n        else:\n            strings[i] = strings[i]\n    for i in range(len(strings)):\n        print(strings[i])\n    return \"YES\"\n\nsolution('5')\nsolution('3')\nsolution('1')\nsolution('5')\nsolution('1')\n\n'''\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    i = 0\n    answer = []\n    while i < len(strings):\n        j = i\n        while j < len(strings):\n            if len(strings[i]) == len(strings[j]):\n                k = j\n                while k < len(strings) and len(strings[i]) == len(strings[k]):\n                    if strings[i] == strings[k]:\n                        answer.append(strings[i])\n                        strings.remove(strings[i])\n                        strings.remove(strings[i])\n                        i = 0\n                        break\n                    k += 1\n            j += 1\n        i += 1\n    if len(answer) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if a[left] + a[right] <= k:\n            left += 1\n        else:\n            right -= 1\n        count += 1\n    return count\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if l[mid] <= k:\n            if mid == 0:\n                if l[mid] > l[mid + 1]:\n                    return \"No\"\n                else:\n                    left = mid + 1\n            else:\n                if l[mid - 1] > l[mid]:\n                    left = mid + 1\n                else:\n                    if mid == n - 1:\n                        if l[mid] > l[mid - 1]:\n                            return \"No\"\n                    else:\n                        if l[mid + 1] > l[mid]:\n                            left = mid + 1\n        else:\n            right = mid - 1\n    return \"Yes\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    left = 0\n    right = n-1\n    total = 0\n    while left <= right:\n        if k >= max(lst[left], lst[right]):\n            total += 1\n            left += 1\n        else:\n            right -= 1\n    return total\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - len(max(sorted(map(int, stdin.split()), key=lambda x: x-k)), key=lambda x: x)))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\n    # n, k = map(int, stdin.split())\n    # list_ = list(map(int, stdin.split()))\n    #\n    # def max_problem(list_, k):\n    #     max_num = 0\n    #     for i in range(len(list_)):\n    #         if max_num < list_[i] - k:\n    #             max_num = list_[i] - k\n    #     return max_num\n    #\n    # return str(max_problem(list_, k))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if max(a) >= k:\n        return 0\n    if n == 1:\n        return n\n    return n\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = [int(i) for i in stdin.split()]\n    res = 0\n    l, r = 0, n-1\n    while True:\n        if r >= l:\n            res += 1\n            if k >= a[l]:\n                l += 1\n            elif k >= a[r]:\n                r -= 1\n            else:\n                break\n        else:\n            break\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    while n > 0:\n        if n < 2:\n            n -= 1\n            continue\n        n -= 2\n        left = 1\n        right = n - 1\n        while right - left > 1:\n            mid = left + (right - left) // 2\n            if a[mid] <= k:\n                left = mid\n            else:\n                right = mid\n        if a[left] <= k:\n            count = max(count, right + 1 - left)\n    return str(count)\n\nsolution(input())\n\nhttps://app.codility.com/programmers/lessons/4-counting_elements/mishka_solution/\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    problems = list(map(int, stdin.split()))\n    solved = 0\n    while (True):\n        if len(problems) <= 0:\n            return solved\n        problems = list(sorted(problems))\n        problems.pop(0)\n        solved += 1\n        if len(problems) <= 0:\n            return solved\n        problems = list(sorted(problems))\n        problems.pop(-1)\n        solved += 1"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n, k = n, k\n    a = list(map(int, stdin.split()))\n    return\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    red_tiles = 1\n    blue_tiles = 1\n    for _ in range(a):\n        if (red_tiles % 2):\n            red_tiles += 1\n        else:\n            blue_tiles += 1\n        red_tiles += 1\n        blue_tiles += 1\n    red_tiles -= 1\n    blue_tiles -= 1\n    return str(red_tiles * blue_tiles)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_red = a * (a + 1)\n    min_blue = a * (a + 1)\n    for _ in range(b):\n        r = int(stdin.split()[2])\n        b = int(stdin.split()[3])\n        if r > 0:\n            min_red = min(min_red, r * (r + 1))\n        if b > 0:\n            min_blue = min(min_blue, b * (b + 1))\n    return min_red + min_blue\n\nprint(solution(input()))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a * 2 + b * 2 - min(a, b) * 2, a * 2 + b * 2 - max(a, b) * 2, a * 2 + b * 2 - min(a, b) * 2 + max(a, b) * 2))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, red, blue = stdin.split()\n    red, blue = int(red), int(blue)\n    red_colors = [0] * (2 * red)\n    blue_colors = [0] * (2 * blue)\n    for _ in range(red):\n        col = int(stdin.split()[1])\n        red_colors[col] += 1\n    for _ in range(blue):\n        col = int(stdin.split()[2])\n        blue_colors[col] += 1\n    result = 0\n    for i in range(red):\n        result += red_colors[i]\n        result += red_colors[i + red]\n    for i in range(blue):\n        result += blue_colors[i]\n        result += blue_colors[i + blue]\n    return str(result)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    count_red = a\n    count_blue = b\n    for _ in range(a + b):\n        count_red -= 1\n        count_blue -= 1\n        if count_red == 0 or count_blue == 0:\n            break\n        if count_red > count_blue:\n            count_red -= 1\n        else:\n            count_blue -= 1\n    return str(abs(a - 2 * count_red) + abs(b - 2 * count_blue))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return f\"{min(a, b) * 2 + max(a, b)} {min(a, b) * 2 + max(a, b)}\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [a,b] = map(int, stdin.split())\n    \n    def check(x,y,r,b):\n        for i in range(a+b):\n            if i not in x and i not in y:\n                if b<(x[i]+r) and a<(y[i]+r):\n                    return True\n        return False\n    \n    x = [i for i in range(a+b)]\n    y = [i for i in range(a+b)]\n    \n    for i in range(1,b+1):\n        for j in range(1,a+1):\n            x.append(i+j-1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,b+1):\n        for j in range(1,a+1):\n            x.append(i-1)\n            y.append(j+1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i+1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j+1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i+1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i+1)\n            y.append(j+1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j+1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i+1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i+1)\n            y.append(j+1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i+1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            x.append(i-1)\n            y.append(j-1)\n    \n    if check(x,y,1,b):\n        return str(a+b)\n    \n    return str(max(x)+max(y))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(min_perimeter(a, b))\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # a = int(stdin.split()[0])\n    # b = int(stdin.split()[1])\n    return str(min(a*b, a+b, a*b-a))\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    s = stdin\n    color_list = [1,0]\n    if n <= 0:\n        print(\"NO\")\n        return None\n    if n == 1:\n        print(\"YES\")\n        print(\"0\")\n        return None\n    if n == 2:\n        print(\"YES\")\n        print(\"01\")\n        return None\n    if n == 3:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 4:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 5:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 6:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 7:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 8:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 9:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 10:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 11:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 12:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 13:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 14:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 15:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 16:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 17:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 18:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 19:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 20:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 21:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 22:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 23:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 24:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 25:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 26:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 27:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 28:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 29:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 30:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 31:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 32:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 33:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 34:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 35:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 36:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 37:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 38:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 39:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 40:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 41:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 42:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 43:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 44:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 45:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 46:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 47:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 48:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 49:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 50:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 51:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 52:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 53:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 54:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 55:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 56:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 57:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 58:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 59:\n        print(\"YES\")\n        print(\"011\")\n        return None\n    if n == 60:\n        print(\"YES\")\n        print(\"111\")\n        return None\n    if n == 61:\n        print(\"YES\")\n        print(\"110\")\n        return None\n    if n == 62:\n        print(\"YES\")\n        print(\"010\")\n        return None\n    if n == 63:\n        print(\"YES\")\n        print(\"001\")\n        return None\n    if n == 64:\n        print(\"YES\")\n        print(\"000\")\n        return None\n    if n == 65:\n        print(\"YES\")\n        print(\"100\")\n        return None\n    if n == 66:\n        print(\"YES\")\n        print(\"101\")\n        return None\n    if n == 67:\n        "
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    s = stdin[1]\n    if n <= 2:\n        return \"YES\"\n    colors = [\"0\", \"1\"]\n    colors.sort()\n    first_col = colors[0]\n    second_col = colors[1]\n\n    def color_str(chars, color):\n        return \"\".join([color if c == chars else \"0\" for c in chars])\n\n    def swap(chars, i, j):\n        return \"\".join([chars[j] if i == j else chars[i]])\n\n    def to_sort(chars, color):\n        res = \"\".join(\n            [color] + [color] + [color] + [color] + [color] + [color] + [color] + [color])\n        return \"\".join([chars[i] for i in range(len(chars)) if res[i] == \"1\"])\n\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            return \"NO\"\n\n    for i in range(n - 2):\n        if s[i] == s[i + 1]:\n            continue\n        elif s[i] > s[i + 1]:\n            s = swap(s, i, i + 1)\n        else:\n            s = swap(s, i, i + 2)\n\n    if s == \"\":\n        return \"YES\"\n    elif s[0] == first_col:\n        s = swap(s, 0, 1)\n    elif s[0] == second_col:\n        s = swap(s, 0, 2)\n    else:\n        return \"NO\"\n    s = to_sort(s, first_col)\n    s = to_sort(s, second_col)\n    if s == \"\":\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if sorted(s) == s:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    s = stdin[1]\n    colors = {}\n\n    for char in s:\n        if colors.get(char) is None:\n            colors[char] = 0\n        colors[char] += 1\n\n    # check if we have at least one of each character in colors\n    if not set(sorted(colors.keys())).issubset(sorted(colors.values())):\n        return \"NO\"\n\n    # make sure we have two different colors in each character\n    if len(set(colors.values()))!= len(colors):\n        return \"NO\"\n\n    # check if each character has the same amount of colors\n    if len(set(colors.values()))!= len(set(colors.values())):\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... abcdedc\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... aaabbcbb\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 9\n   ... abacbecfd\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... 8\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 7\n   ... abacbecfd\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... 5\n   ... abacbecfd\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... 4\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 3\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 2\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 1\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 0\n   ... abacbecfd\n   ... ''')\n    'NO'\n\n    \"\"\"\n    s = stdin\n    s_l = len(s)\n    if s_l < 2:\n        return 'NO'\n    start = 0\n    last_swap = None\n    swap_len = 0\n    swap_idx = 0\n    while swap_idx < s_l:\n        if s[swap_idx] == s[swap_idx - swap_len]:\n            swap_len += 1\n        else:\n            swap_len = 1\n        if swap_len > 2:\n            return 'NO'\n        if last_swap is not None and swap_len > 0 and swap_idx - last_swap > 1:\n            return 'NO'\n        swap_idx += 1\n        last_swap = swap_idx - swap_len\n    return 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    s = stdin.pop(0)\n    return 'YES' if sorted(s) == list(s) else 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    def color(i, c):\n        for j in range(i, n):\n            if stdin[j]!= c:\n                return False\n        return True\n\n    def swap(i, j):\n        stdin[i], stdin[j] = stdin[j], stdin[i]\n\n    for i in range(n):\n        if color(i, '0'):\n            continue\n        for j in range(n):\n            if color(j, '1'):\n                continue\n            if color(i, '1') or color(j, '0'):\n                continue\n            for k in range(n):\n                if color(k, '0') and color(j, '1') and color(i, '1'):\n                    break\n            else:\n                swap(i, j)\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def swap_at(index, char_1, char_2):\n        if char_1 < char_2:\n            char_1, char_2 = char_2, char_1\n        if char_1 == char_2:\n            return\n        swaps[index] = char_2\n        swaps[index+1] = char_1\n        index += 1\n\n    n = int(stdin)\n    s = stdin.split()\n    s = \"\".join(s)\n    s = list(s)\n    swaps = [0] * n\n    s.sort(key=lambda x: str(ord(x)))\n    for index in range(n-1):\n        swap_at(index, ord(s[index]), ord(s[index+1]))\n    s = ''.join(s)\n    return \"YES\" if s == \"\".join(sorted(s)) else \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin.split(\"\\n\")[1]\n    st = list(s)\n    if n == 1:\n        return \"YES\"\n\n    def swap(st, i, j):\n        tmp = st[i]\n        st[i] = st[j]\n        st[j] = tmp\n\n    def sort(st):\n        for i in range(len(st) - 1):\n            for j in range(i, len(st)):\n                if st[i] > st[j]:\n                    swap(st, i, j)\n                    break\n\n    sort(st)\n    if st == st[::-1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    docstring\n    \"\"\"\n    num_to_color = stdin.split()\n    s = num_to_color[1]\n    num_colors = 2\n    len_s = len(s)\n\n    def swap(a,b):\n        tmp = a\n        a = b\n        b = tmp\n        return a,b\n\n    def test_neighbors(i):\n        if i == 0:\n            if s[i+1] == '0':\n                return '1'\n            else:\n                return '0'\n        elif i == len_s-1:\n            if s[i-1] == '0':\n                return '1'\n            else:\n                return '0'\n        elif s[i-1] == '1' and s[i+1] == '1':\n            return '1'\n        else:\n            return '0'\n\n    def test_adj_color(i):\n        if i == 0:\n            if s[i+1] == '0':\n                return '0'\n            else:\n                return '1'\n        elif i == len_s-1:\n            if s[i-1] == '0':\n                return '0'\n            else:\n                return '1'\n        elif s[i-1] == '0' and s[i+1] == '0':\n            return '0'\n        else:\n            return '1'\n\n    def test_color(i):\n        if s[i] == '0':\n            return '0'\n        else:\n            return '1'\n\n    for _ in range(int(num_to_color[0])):\n        if len_s < 2 or (len_s == 2 and s == 'aaabb'):\n            return \"NO\"\n\n        if s == 'aaabb':\n            return \"YES\"\n\n        for i in range(len_s-1):\n            if s[i] == '1' and s[i+1] == '0' and s[i]!= '0':\n                s = swap(s,i)\n                break\n\n        while i < len_s:\n            if s[i] == '1':\n                break\n            elif s[i] == '0' and test_neighbors(i) == '1':\n                s = swap(s,i)\n            elif s[i] == '0' and test_adj_color(i) == '1':\n                s = swap(s,i)\n            i += 1\n\n        while i < len_s and s[i] == '0':\n            if test_color(i) == '1':\n                s = swap(s,i)\n            i += 1\n\n    return \"YES\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    A = int(stdin_list[0].split()[0])\n    B = int(stdin_list[0].split()[1])\n\n    if A < 1 or B < 1:\n        return \"invalid\"\n\n    if A > 100 or B > 100:\n        return \"invalid\"\n\n    if A <= 0 or B <= 0:\n        return \"invalid\"\n\n    for i in range(A, B + 1):\n        if i % 25 == 0:\n            print(i)\n        elif i % 10 == 0:\n            print(round(i / 2) * 2)\n\n\nsolution(input())\n\n'''\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_valid(x, y):\n        if x % y == 0:\n            return True\n        else:\n            return False\n    try:\n        A, B = map(int, stdin.split())\n    except ValueError:\n        return -1\n    price = 0\n    for i in range(A, B + 1):\n        if i <= 25:\n            price = i\n            break\n        if check_valid(price, A) and check_valid(price, B):\n            break\n    if check_valid(price, A):\n        return str(price)\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.strip().split()))\n    lst = []\n\n    for i in range(A, B + 1):\n        if (i % 20 == 0) and (i % 5 == 0):\n            if (i % 100 == 0):\n                lst.append(i)\n    if lst:\n        lst.sort()\n        return str(lst[0])\n    else:\n        return -1\n\nstdin = '2 2\\n'\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = int(line[0])\n    b = int(line[1])\n    for i in range(a, b + 1):\n        if i * (1 - (8/100)) - i * 0.08 <= 0 and i * (1 - (10/100)) - i * 0.1 <= 0:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return '-1' if A == 0 or B == 0 or A > 100 or B > 100 else f'{min(A, B)}'"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 0:\n        return -1\n    if b <= 0:\n        return -1\n    if a >= 100:\n        return -1\n    if b >= 100:\n        return -1\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return str(a)\n    lowest = a\n    for i in range(a + 1, b + 1):\n        if i % 10 == 0:\n            continue\n        if round(i * (1 - (8 / 100)), 0) * 10 - round(i * (1 - (10 / 100)), 0) * 10 == 25:\n            lowest = i\n            break\n    return str(lowest)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '25'\n\"\"\"\n\nA, B = map(int, input().split())\n\nA_price = A\nB_price = B\nwhile A_price >= 1 and B_price >= 1:\n    if (A_price * 0.08) < (B_price * 0.1):\n        A_price = A_price - 1\n    else:\n        A_price = A_price - 2\n    B_price = B_price - 1\n    \n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    if stdin[1] < stdin[0]:\n        return -1\n    return str(int(stdin[0] * (stdin[1] / stdin[0])))\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(A, 0, -1):\n        if 2 * i >= A:\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 0 or A > 100 or B <= 0 or B > 100:\n        return -1\n    else:\n        min_price = min(B * 0.08, B * 0.1)\n        return min_price\n\nprint(solution(input()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if k == 1:\n        return \"NO\"\n\n    if (n - k + 1) % k!= 0:\n        return \"NO\"\n\n    a = [n - k + 1 for _ in range(k)]\n    for i in range(1, k):\n        if a[i - 1] < a[i] - 2 * a[i - 1]:\n            return \"NO\"\n\n    print(*a, sep=\" \")\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    # n, k = 9, 4\n    # n, k = 26, 6\n    # n, k = 8, 3\n    # n, k = 1, 1\n    a = list(range(1, n+1))\n    if k == n:\n        return \"YES\"\n    # a = [1,2,3,4,5,6,7,8,9,10]\n    # if k == 1:\n    #     return \"YES\"\n    while k > 0 and not all(a[i] >= 2 * a[i + 1] for i in range(n - k)):\n        k -= 1\n    if k == 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 26 6\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 8 3\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 1 1\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 9 4\n   ... ''')\n    'NO'\n    '''\n    n, k = map(int, stdin.split())\n\n    dp = []\n    for i in range(k):\n        dp.append(0)\n\n    for i in range(k):\n        if i == 0:\n            if n > 1:\n                dp[i] = 2\n            else:\n                dp[i] = 1\n        else:\n            if n == 1:\n                dp[i] = 1\n            else:\n                dp[i] = min(dp[i-1], dp[i-2]) + 1\n\n    print('YES')\n    print(' '.join(map(str, dp)))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    counts = list(map(int, stdin.split()))\n    \n    if n < 2:\n        return \"NO\"\n    \n    if k < 1:\n        return \"NO\"\n    \n    if max(counts) <= 1:\n        return \"NO\"\n    \n    for i in range(1, k):\n        if counts[i] <= counts[i - 1]:\n            return \"NO\"\n        if 2 * counts[i - 1] <= counts[i]:\n            return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \uc785\ub825\uc774 \uc788\uc744\ub54c \ud574\uc57c\ud558\ub294 \ubaa8\ub4e0 \uacbd\uc6b0\uc758 \uc218\ub97c \ub9ac\ud134\ud574\uc57c\ud55c\ub2e4\n    '''\n    pass\n    n, k = list(map(int, stdin.split()))\n    #n\uac1c\uc758 \uac00\uc9c0\uc218\n    if n == 1 and k == 1:\n        return 'YES'\n    if n == 1 and k == 2:\n        return 'NO'\n\n    result = []\n    temp = [1, 1, 2]\n    if k == 2:\n        for i in range(3, n+1):\n            temp.append(temp[i-1] + temp[i-2])\n        for i in range(n+1):\n            if k - i > 0:\n                result.append(temp[i])\n            elif k - i <= 0:\n                break\n    elif k == 3:\n        for i in range(4, n+1):\n            temp.append(temp[i-1] + temp[i-2] + temp[i-3])\n        for i in range(n+1):\n            if k - i > 0:\n                result.append(temp[i])\n            elif k - i <= 0:\n                break\n    elif k == 4:\n        for i in range(5, n+1):\n            temp.append(temp[i-1] + temp[i-2] + temp[i-3] + temp[i-4])\n        for i in range(n+1):\n            if k - i > 0:\n                result.append(temp[i])\n            elif k - i <= 0:\n                break\n    elif k == 5:\n        for i in range(6, n+1):\n            temp.append(temp[i-1] + temp[i-2] + temp[i-3] + temp[i-4] + temp[i-5])\n        for i in range(n+1):\n            if k - i > 0:\n                result.append(temp[i])\n            elif k - i <= 0:\n                break\n    elif k == 6:\n        for i in range(7, n+1):\n            temp.append(temp[i-1] + temp[i-2] + temp[i-3] + temp[i-4] + temp[i-5] + temp[i-6])\n        for i in range(n+1):\n            if k - i > 0:\n                result.append(temp[i])\n            elif k - i <= 0:\n                break\n\n    if len(result) == 0:\n        return 'NO'\n    elif len(result) == 1:\n        return 'YES' + str(result[0])\n    else:\n        return 'YES' + str(result[0]) +'' + str(result[1])\n\n\nsolution(input())\n'''"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = sum([(i+1) for i in range(1, k)])\n    if s <= n:\n        return \"YES\"\n    elif sum([(i+1) for i in range(1, k)]) > n:\n        return \"NO\"\n    return \"YES\" if n <= k * (n-1) else \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    if n == k:\n        return 'YES'\n    ans = []\n    cur = 0\n    prev = 0\n    i = 0\n    while i < k:\n        if cur < n:\n            ans.append(cur)\n            cur += 1\n            prev += 1\n        else:\n            if prev < 2:\n                return 'NO'\n            else:\n                prev = prev - 2\n                ans.append(prev)\n                cur += 1\n        i += 1\n    return 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_problems = int(stdin)\n    if num_problems < 1 or num_problems > 10**9:\n        return \"NO\"\n    if num_problems < 6:\n        return \"YES\"\n    my_arr = []\n    day_to_check = 3\n    while num_problems > 0:\n        my_arr.append(num_problems)\n        if num_problems >= 6:\n            num_problems -= 5\n        else:\n            num_problems -= 1\n    for day_to_check in range(1,4):\n        for day_to_check in range(1,4):\n            if sum(my_arr)!= num_problems:\n                continue\n            i = 0\n            num_of_solved_problems = 0\n            while i < num_problems:\n                if my_arr[i] <= 0:\n                    i += 1\n                elif my_arr[i] == 1:\n                    num_of_solved_problems += 1\n                    i += 1\n                elif my_arr[i] == 2:\n                    i += 1\n                elif my_arr[i] == 3:\n                    i += 1\n                elif my_arr[i] == 4:\n                    i += 1\n                elif my_arr[i] == 5:\n                    i += 1\n                elif my_arr[i] == 6:\n                    i += 1\n                elif my_arr[i] == 7:\n                    i += 1\n                elif my_arr[i] == 8:\n                    i += 1\n                elif my_arr[i] == 9:\n                    i += 1\n                elif my_arr[i] == 10:\n                    i += 1\n                elif my_arr[i] == 11:\n                    i += 1\n                elif my_arr[i] == 12:\n                    i += 1\n                elif my_arr[i] == 13:\n                    i += 1\n                elif my_arr[i] == 14:\n                    i += 1\n                elif my_arr[i] == 15:\n                    i += 1\n                elif my_arr[i] == 16:\n                    i += 1\n                elif my_arr[i] == 17:\n                    i += 1\n                elif my_arr[i] == 18:\n                    i += 1\n                elif my_arr[i] == 19:\n                    i += 1\n                elif my_arr[i] == 20:\n                    i += 1\n                elif my_arr[i] == 21:\n                    i += 1\n                elif my_arr[i] == 22:\n                    i += 1\n                elif my_arr[i] == 23:\n                    i += 1\n                elif my_arr[i] == 24:\n                    i += 1\n                elif my_arr[i] == 25:\n                    i += 1\n                elif my_arr[i] == 26:\n                    i += 1\n                elif my_arr[i] == 27:\n                    i += 1\n                elif my_arr[i] == 28:\n                    i += 1\n                elif my_arr[i] == 29:\n                    i += 1\n                elif my_arr[i] == 30:\n                    i += 1\n                elif my_arr[i] == 31:\n                    i += 1\n                elif my_arr[i] == 32:\n                    i += 1\n                elif my_arr[i] == 33:\n                    i += 1\n                elif my_arr[i] == 34:\n                    i += 1\n                elif my_arr[i] == 35:\n                    i += 1\n                elif my_arr[i] == 36:\n                    i += 1\n                elif my_arr[i] == 37:\n                    i += 1\n                elif my_arr[i] == 38:\n                    i += 1\n                elif my_arr[i] == 39:\n                    i += 1\n                elif my_arr[i] == 40:\n                    i += 1\n                elif my_arr[i] == 41:\n                    i += 1\n                elif my_arr[i] == 42:\n                    i += 1\n                elif my_arr[i] == 43:\n                    i += 1\n                elif my_arr[i] == 44:\n                    i += 1\n                elif my_arr[i] == 45:\n                    i += 1\n                elif my_arr[i] == 46:\n                    i += 1\n                elif my_arr[i] == 47:\n                    i += 1\n                elif my_arr[i] == 48:\n                    i += 1\n                elif my_arr[i] == 49:\n                    i += 1\n                elif my_arr[i] == 50:\n                    i += 1\n                elif my_arr[i] == 51:\n                    i += 1\n                elif my_arr[i] == 52:\n                    i += 1\n                elif my_arr[i] == 53:\n                    i += 1\n                elif my_arr[i] == 54:\n                    i += 1\n                elif my_arr[i] == 55:\n                    i += 1\n                elif my_arr[i] == 56:\n                    i += 1\n                elif my_arr[i] == 57:\n                    i += 1\n                elif my_arr[i] == 58:\n                    i += 1\n                elif my_arr[i] == 59:\n                    i += 1\n                elif my_arr[i] == 60:\n                    i += 1\n                elif my_arr[i] == 61:\n                    i += 1\n                elif my_arr[i] == 62:\n                    i += 1\n                elif my_arr[i] == 63:\n                    i += 1\n                elif my_arr[i] == 64:\n                    i += 1\n                elif my_arr[i] == 65:\n                    i += 1\n                elif my_arr[i] == 66:\n                    i += 1\n                elif my_arr[i]"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1:\n        return \"NO\"\n    # Your code here\n    return \"YES\"\n    # return "
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    if n == k or k == 1:\n        return 'YES' if (n <= 20 and 1 <= n <= 10) else 'NO'\n    else:\n        a = set()\n        for i in range(1, k+1):\n            for j in range(1, i):\n                a.add(j)\n        for i in range(1, k):\n            if n - i in a:\n                return 'YES'\n        return 'NO'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, r) = map(int, stdin.split())\n    projects = list(map(int, stdin.split()))\n    projects.sort()\n    res = 1\n    # print(projects)\n    for a, b in projects:\n        # print(a, b)\n        res = max(res, (b - a + 1) * (a + 1))\n    return str(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n\n    s = set(map(int, stdin.split()))\n\n    b_sum = (r + max(s)) // n\n    for i in range(r):\n        b_sum += abs(max(s) - min(s))\n    return str(b_sum)\n\nsolution(input())\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(i):\n            if a[i - 1] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(dp[n])\n\nsolution(\"5 2\")\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rates = list(map(int, stdin.split()))\n\n    # We can't use heap, so we use a list.\n    # The list is sorted, and every time we pop from the top we do this:\n    #    1. Pop the top element\n    #    2. Check if the top element is the same as our target\n    #    3. Add the top element back\n    #    4. Return the answer\n    heap = []\n\n    for rate in rates:\n        if len(heap) == 0:\n            heapq.heappush(heap, (rate, 1))\n            continue\n        elif rate <= heap[0][0]:\n            heapq.heappush(heap, (rate, 1))\n            continue\n        elif heap[0][0] == rate:\n            heapq.heappop(heap)\n        else:\n            heapq.heappush(heap, (rate, 1))\n\n    return len(heap)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = list(map(lambda x: int(x), stdin.split()))\n    projects.sort()\n    projects = [(i, projects[i]) for i in range(n)]\n    count = 0\n    for i in range(n):\n        if projects[i][0] < projects[i][1]:\n            count += projects[i][0]\n        else:\n            count += projects[i][0] + (projects[i][1] - projects[i][0]) * (r - projects[i][1])\n    return str(count)\n\nsolution(input())\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, r) = (int(x) for x in stdin.split())\n    projects = [(int(x), int(y)) for x, y in (stdin.split(\"\\n\")[1:])]\n    projects.sort()\n\n    def cal(i, max_i, min_i, proj_i):\n        if i < 0: return -1\n        if i == 0: return 0\n        if proj_i > max_i: return -1\n        if proj_i < min_i: return -1\n        proj_i = (proj_i + projects[i][1]) // projects[i][0]\n        return proj_i\n\n    for i in range(n - 1, -1, -1):\n        if projects[i][0] >= projects[i - 1][0]:\n            continue\n        if cal(i - 1, projects[i][1], projects[i][0], projects[i - 1][1]) == -1:\n            projects.insert(i, projects.pop(i - 1))\n    return str(len(projects) - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, r = map(int, stdin.split())\n    rating = list(map(int, stdin.split()))\n    rating.sort()\n    cnt = 1\n    while rating:\n        if rating[0] < rating[-1]:\n            cnt += 1\n        else:\n            cnt -= 1\n        rating.pop(0)\n    if cnt > r:\n        return cnt\n    else:\n        return r\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45\n   ... ''')\n    '5'\n    \"\"\"\n    n, r = map(int, input().split())\n    projects = list(map(int, input().split()))\n    projects.sort()\n\n    count_ones = 0\n    count_zeros = 0\n    max_count = 0\n    for i, project in enumerate(projects):\n        if project == 0:\n            count_zeros += 1\n        elif project == 1:\n            count_ones += 1\n        else:\n            count_zeros -= 1\n            count_ones -= 1\n        if count_ones >= n or count_zeros >= n:\n            break\n        if max_count < (count_ones + count_zeros):\n            max_count = (count_ones + count_zeros)\n    return str(max_count)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    rating = list(map(int, stdin.split()))\n    rating.sort(reverse=True)\n    max_rating = rating[0]\n    rating = rating[1:]\n    max_subset = 0\n    while rating:\n        if max_rating < 0:\n            break\n        cur_rating = rating[0]\n        if max_rating >= cur_rating:\n            max_subset += 1\n        max_rating += cur_rating\n        rating = rating[1:]\n    return str(max_subset)"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    res = 0\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        res = max(res, a + b)\n    return str(res)\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  arr = [int(x) for x in stdin.split()]\n  \n  # making a matrix out of n^2 elements\n  matrix = []\n  for i in range(n):\n    matrix.append(arr[i*n:(i+1)*n])\n  \n  # creating a list with all numbers that are in the matrix\n  flat_list = []\n  for x in range(len(matrix)):\n    for y in range(len(matrix[x])):\n      flat_list.append(matrix[x][y])\n  \n  # creating a set with all numbers that are not in the matrix\n  not_in_matrix = set(range(1, n*n+1)) - set(flat_list)\n  \n  # the resulting matrix should be palindromic\n  if len(not_in_matrix) == 0:\n    return 'YES'\n  else:\n    return 'NO'\n\n\n'''"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    matrix = [[int(x) for x in list(lines[1])] for _ in range(n)]\n    # Check if all of the elements are unique.\n    for line in matrix:\n        for i in range(n):\n            if line[i] in line:\n                return \"NO\"\n    # Check if all the rows are palindromic.\n    for row in matrix:\n        if row == row[::-1]:\n            return \"YES\"\n    # Check if all the columns are palindromic.\n    for i in range(n):\n        column = []\n        for j in range(n):\n            column.append(matrix[j][i])\n        if column == column[::-1]:\n            return \"YES\"\n    # Check if the matrix is an even square matrix.\n    if n % 2 == 0:\n        for i in range(n):\n            if i == 0:\n                continue\n            if column[i - 1]!= column[i]:\n                return \"NO\"\n        for i in range(n - 1, 0, -1):\n            if column[i - 1]!= column[i]:\n                return \"NO\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 8 8 1 2 2 2 2 2 2 2 2 2 1 8 8 1\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 1 3 1\n   ... 3 1 3\n   ... 1 3 1\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 1 1 1 1 1 3 3 3 3\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    s = []\n    for i in range(n):\n        s.append([])\n        for j in range(n):\n            s[i].append(a[i*n+j])\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] not in s[i][j-1] and s[i][j] not in s[i+1][j] and s[i][j] not in s[i][j+1]:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1:]\n    return \"YES\" if put_numbers_into_matrix(l, n) == \"YES\" else \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n<1>    '''Given a string, print each char in that string on a new line.'''\n    # <2>\n    # <3>\n    # <4>\n    # <5>\n    # <6>\n    # <7>\n    # <8>\n    # <9>\n    # <10>\n    # <11>\n    # <12>\n    # <13>\n    # <14>\n    # <15>\n    # <16>\n    # <17>\n    # <18>\n    # <19>\n    # <20>\n\n    '''\n    a = stdin.split(\"\\n\")\n    for i in range(len(a)):\n        print(a[i])\n    '''\n\n    '''\n    print(input())\n    '''\n    # print(solution(stdin))\n    return stdin\n\nsolution(stdin)\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the problem.\n\n    Args:\n        stdin: lines of input.\n\n    Returns:\n        Output.\n    \"\"\"\n    def check_matrix(row, col):\n        \"\"\"\n        Check matrix for palindromic cell.\n\n        Args:\n            row: row of the matrix.\n            col: column of the matrix.\n\n        Returns:\n            True if it is palindromic, False otherwise.\n        \"\"\"\n        for i in range(row):\n            for j in range(col):\n                if i!= j and matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True\n\n    def check_number(row, col, number):\n        \"\"\"\n        Check number in matrix.\n\n        Args:\n            row: row of the matrix.\n            col: column of the matrix.\n            number: number to check.\n\n        Returns:\n            True if it is palindromic, False otherwise.\n        \"\"\"\n        for i in range(row):\n            for j in range(col):\n                if matrix[i][j]!= number:\n                    return False\n        return True\n\n    matrix = []\n    n = int(stdin.strip())\n    for i in range(n):\n        matrix.append(list(map(int, stdin.strip().split())))\n    is_palindromic = False\n\n    for i in range(n):\n        for j in range(n):\n            if check_number(n, n, matrix[i][j]):\n                is_palindromic = True\n            if check_matrix(n, n):\n                is_palindromic = True\n\n    if is_palindromic:\n        for row in matrix:\n            print(' '.join(map(str, row)))\n    else:\n        print('NO')\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nmy solution:\nmy_list = []\ns = stdin.split()\nfor i in range(len(s)):\n    for j in range(len(s)):\n        my_list.append(int(s[i])*int(s[j]))\nprint(sum(my_list))\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return 'NO'\n\n    a = list(map(int, stdin.strip().split()))\n\n    if not all(0 <= ai <= 1000 for ai in a):\n        return 'NO'\n\n    n_rows = n\n    n_cols = n\n\n    matrix = []\n\n    for i in range(n_rows):\n        row = []\n        for j in range(n_cols):\n            row.append(a[i * n_cols + j])\n        matrix.append(row)\n\n    for row in matrix:\n        row.reverse()\n    for row in matrix:\n        row.reverse()\n\n    for row in matrix:\n        for elem in row:\n            if elem!= row[0]:\n                return 'NO'\n\n    for row in matrix:\n        for i in range(len(row)):\n            if row[i]!= row[-i - 1]:\n                return 'NO'\n\n    for row in matrix:\n        for i in range(len(row)):\n            if row[i]!= row[-i - 1]:\n                return 'NO'\n\n    for row in matrix:\n        for i in range(len(row)):\n            if row[i]!= row[-i - 1]:\n                return 'NO'\n\n    for row in matrix:\n        for i in range(len(row)):\n            if row[i]!= row[-i - 1]:\n                return 'NO'\n\n    return 'YES\\n' +''.join(map(str, matrix[0]))\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(i) for i in stdin.strip().split(\" \")]\n    \n    a = 0\n    b = len(A) - 1\n    c = 0\n    d = len(A) - 1\n    e = 0\n    f = len(A) - 1\n    g = 0\n    h = len(A) - 1\n    i = 0\n    j = len(A) - 1\n    k = 0\n    l = len(A) - 1\n    m = 0\n    n = len(A) - 1\n    o = 0\n    p = len(A) - 1\n    q = 0\n    r = len(A) - 1\n    s = 0\n    t = len(A) - 1\n    u = 0\n    v = len(A) - 1\n    w = 0\n    x = len(A) - 1\n    y = 0\n    z = len(A) - 1\n    AA = []\n    while True:\n        # print(a, b)\n        if a <= -1:\n            # print(\"c\")\n            break\n        if b >= n:\n            # print(\"d\")\n            break\n        if c == n:\n            # print(\"e\")\n            break\n        if d == n:\n            # print(\"f\")\n            break\n        if e == n:\n            # print(\"g\")\n            break\n        if f == n:\n            # print(\"h\")\n            break\n        if g == n:\n            # print(\"i\")\n            break\n        if h == n:\n            # print(\"j\")\n            break\n        if i == n:\n            # print(\"k\")\n            break\n        if j == n:\n            # print(\"l\")\n            break\n        if k == n:\n            # print(\"m\")\n            break\n        if l == n:\n            # print(\"n\")\n            break\n        if m == n:\n            # print(\"o\")\n            break\n        if n == n:\n            # print(\"p\")\n            break\n        if o == n:\n            # print(\"q\")\n            break\n        if p == n:\n            # print(\"r\")\n            break\n        if q == n:\n            # print(\"s\")\n            break\n        if r == n:\n            # print(\"t\")\n            break\n        if s == n:\n            # print(\"u\")\n            break\n        if t == n:\n            # print(\"v\")\n            break\n        if u == n:\n            # print(\"w\")\n            break\n        if v == n:\n            # print(\"x\")\n            break\n        if w == n:\n            # print(\"y\")\n            break\n        if x == n:\n            # print(\"z\")\n            break\n        if y == n:\n            # print(\"aa\")\n            break\n        if z == n:\n            # print(\"bb\")\n            break\n        if a == -1:\n            # print(\"c\")\n            break\n        # print(\"e\")\n        # print(a, b)\n        a -= 1\n        b += 1\n        c += 1\n        d += 1\n        e += 1\n        f += 1\n        g += 1\n        h += 1\n        i += 1\n        j += 1\n        k += 1\n        l += 1"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = [int(stdin.strip()) for stdin in stdin.split()]\n\n    if n == r == 1:\n        return \"YES\"\n    if n == r == 2:\n        return \"YES\" if all(rating[i] > rating[i+1] for i in range(n-1)) else \"NO\"\n    if n == r == 3:\n        return \"YES\" if any(rating[i] < rating[i+1] for i in range(n-1)) else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for project in projects:\n        if project[0] > r:\n            return \"NO\"\n        if r - project[1] < 0:\n            return \"NO\"\n\n    for project in projects:\n        if project[1] < 0:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a = a[:n]\n    b = b[:n]\n    for i in range(n):\n        a[i] += b[i]\n    return (\"YES\" if all(x >= 0 for x in a) else \"NO\")\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if not (len(stdin.splitlines()) == 2):\n        print(\"NO\")\n        return \"NO\"\n\n    n, r = map(int, stdin.splitlines())\n\n    d = dict()\n    for _ in range(n):\n        a, b = map(int, stdin.splitlines()[1].split())\n        d[a] = max(d.get(a, -a), -a)\n        d[b] = max(d.get(b, -b), -b)\n\n    tot = 0\n    for i in range(1, r + 1):\n        tot += d.get(i, 0)\n\n    if tot >= r:\n        print(\"YES\")\n        return \"YES\"\n    print(\"NO\")\n    return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i * 2]))\n        b.append(int(stdin.split()[i * 2 + 1]))\n\n    for i in range(n):\n        if a[i] < r:\n            return \"NO\"\n        if b[i] > 0:\n            return \"NO\"\n        if b[i] < 0:\n            if a[i] + b[i] > r:\n                return \"NO\"\n\n    if abs(r - sum(a)) > abs(r - sum(b)):\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(x) for x in stdin.split())\n    assert 1 <= n <= 100\n    assert 1 <= r <= 30000\n    # N, R = (int(x) for x in stdin.split())\n    # assert 1 <= N <= 100\n    # assert 1 <= R <= 30000\n    res = []\n    for i in range(n):\n        # a, b = (int(x) for x in stdin.split())\n        # assert 1 <= a <= R\n        # assert -300 <= b <= 300\n        a, b = map(int, stdin.split())\n        if (R - a) <= 0:\n            res.append(i+1)\n            break\n        else:\n            res.append(i+1)\n            if b > 0:\n                R = R - a + b\n            else:\n                R = R - a - b\n    if all(x + 1 <= N for x in res):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(x) for x in stdin.split())\n    projects = sorted((int(x) for x in stdin.split()))\n    a = b = r\n    while projects:\n        p = projects.pop(0)\n        if projects and p > projects[0]:\n            a = min(a, p)\n            b = max(b, p - projects[0])\n        if projects and p < projects[0]:\n            a = max(a, p - projects[0])\n            b = min(b, p - projects[0])\n        if projects and b < 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = list(map(lambda x: (int(x[0]), int(x[1])),\n                        [line.split() for line in stdin.split('\\n')][:n]))\n\n    def check():\n        total = r\n        for p in projects:\n            if total + p[1] < 0:\n                return False\n            total += p[1]\n        return True\n\n    lowest = min(projects, key=lambda x: x[0])\n    highest = max(projects, key=lambda x: x[0])\n    print(check())\n\n    # Find the range in the projects.\n    if check():\n        return 'YES'\n    else:\n        # the positive rating\n        pos_r = 0\n        # the negative rating\n        neg_r = r\n        while True:\n            pos_r += 1\n            neg_r -= 1\n            if check():\n                return 'YES'\n            if check():\n                return 'NO'\n\nsolution(\n'''2 4\n4 6\n10 -2\n8 -1''')\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, r = stdin.split()\n    n, r = int(n), int(r)\n    projects = []\n    for _ in range(n):\n        projects.append(tuple(map(int, stdin.split()[_*2:_*2+2])))\n    if projects:\n        if any(projects[0][0] < projects[i][0] for i in range(1, len(projects))):\n            return 'NO'\n        rating = projects[0][0]\n        for i in range(1, len(projects)):\n            if projects[i][0] > rating + projects[i][1]:\n                return 'NO'\n            rating += projects[i][1]\n    return 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n    c = sorted(list(map(int, c)))\n    if n == 1 and d == 1:\n        return 'YES'\n    d = min(d, n - 1)\n    if c[0] == 1:\n        if d - c[0] + 1 > m:\n            return 'NO'\n        for i in range(1, d + 1):\n            if i == d and c[0] <= i <= c[1]:\n                return 'NO'\n            if i == c[0] or i == c[1]:\n                continue\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    l = 0\n    r = n + 1\n    while l <= r:\n        m = (r + l) // 2\n        #print(m)\n        if m == n + 1:\n            return \"YES\"\n        elif m == 0:\n            return \"NO\"\n        elif m - 1 not in c:\n            return \"NO\"\n        elif m + 1 not in c:\n            return \"NO\"\n        elif m - 2 not in c:\n            return \"NO\"\n        elif m + 2 not in c:\n            return \"NO\"\n        else:\n            return \"NO\"\n    return \"NO\"\nsolution(sys.stdin.read())"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, D, *C = map(int, stdin.split())\n    if N == 1:\n        return \"NO\"\n    if N == M:\n        return \"YES\"\n    if N > D * (M + 1):\n        return \"NO\"\n    if D == 1:\n        return \"YES\"\n    if D > M:\n        return \"NO\"\n    if M % 2:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, *c = map(int, stdin.split())\n    c_s = sorted(c)\n    if len(c_s) == 1:\n        return \"NO\"\n    a = []\n    ans = []\n    for i in range(n + 1):\n        if i in c:\n            ans.append(c.index(i) + 1)\n        else:\n            ans.append(0)\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            ans[i] = min(ans[i], ans[j - 1] + 1)\n    return 'YES' + str(ans)\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    # print(n, m, d)\n    # print(c)\n    if d > n: return \"NO\"\n    if d == 1: return \"YES\"\n    # print(c)\n    a = 0\n    b = 0\n    # print(n, m, d)\n    while a + b < n:\n        # print(a, b, n, m)\n        # print(a, b)\n        # print(c[a], c[b])\n        if b == m:\n            # print(a, n)\n            # print(a, m)\n            if a == 0:\n                return \"NO\"\n            a = 0\n            b = 0\n        # print(c)\n        if c[a] <= c[b]:\n            # print(\"1\")\n            if b == 0:\n                # print(a)\n                a += 1\n                b = a\n                continue\n            else:\n                b += 1\n                if b == m:\n                    # print(b)\n                    return \"NO\"\n                a = b\n                continue\n        if c[a] > c[b]:\n            # print(\"2\")\n            if a == 0:\n                # print(b)\n                a += 1\n                b = a\n                continue\n            else:\n                a += 1\n                if a == m:\n                    return \"NO\"\n                b = a\n                continue\n    # print(a, b)\n    if a == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, m, d = map(int, a[0].split())\n    c = a[1].split()\n    a = []\n    for i in range(n + 1):\n        a.append(i)\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if c[i - 1] == c[j - 1] and i!= j:\n                a[i] = 1\n    a[1] = 0\n    a = tuple(a)\n    # print(a)\n    if m == 0:\n        return 'NO'\n    for i in range(m):\n        if a[i + 1] == 0:\n            a[i + 1] = a[i]\n    a = tuple(a)\n    # print(a)\n    l = len(a)\n    d = abs(d)\n    # print(l, d)\n    if l < d:\n        return 'NO'\n    for i in range(l - 1):\n        if a[i + d] < a[i] + d:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def jumping_from_position(platforms: list, position: int):\n        jumps = 0\n        while position!= 0:\n            jumps += 1\n            if position in platforms:\n                break\n            position = position - 1\n        return jumps\n\n    n, m, d = map(int, stdin.split())\n    if n == 1 or d == 0:\n        return 'YES'\n    elif n == m:\n        return 'YES'\n    else:\n        c = list(map(int, stdin.split()))\n        platforms = [0] + c\n        cnt = 0\n        for i in range(1, n+1):\n            if jumping_from_position(platforms, i) >= d:\n                cnt += 1\n            if jumping_from_position(platforms, i) == d:\n                break\n        if cnt == 0:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n\n    if n <= 0 or m <= 0 or d <= 0 or d > n:\n        return \"NO\"\n\n    plats = list(map(int, stdin.split()))\n    plats.sort()\n    plats.insert(0, 0)\n    plats.append(n + 1)\n\n    stack = []\n    while plats:\n        el = plats.pop()\n        for i in range(d):\n            if el == plats[0]:\n                stack.append(i + 1)\n                plats.pop(0)\n            elif el > plats[0] and i!= 0:\n                stack.append(i)\n                plats.pop(0)\n                break\n\n    if not stack:\n        return \"NO\"\n    return \" \".join(map(str, stack))"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    if n == m == d == 0:\n        return 'YES'\n\n    for i in range(m):\n        if sum(c[0:i]) + sum(c[i + 1:]) > n:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, D = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()[1:]]\n    if N >= 0 and D <= M:\n        if M == 1:\n            return \"YES\"\n        if 0 <= D <= M:\n            if D <= 1:\n                if 1 <= M <= N:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            elif D <= 2:\n                if N <= M <= D + 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if 0 <= M <= N <= D:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n        else:\n            if 1 <= M <= N:\n                return \"YES\"\n            else:\n                return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    l, r = 1, n\n    while l < r:\n        mid = (l + r) // 2\n        print(l, mid, r)\n        if is_subsequence(mid, s):\n            r = mid\n        else:\n            l = mid + 1\n    return l\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n\n    s = inp[0]\n    t = inp[1]\n\n    if s == \"\":\n        return 0\n\n    n = len(s)\n\n    dp = [[[None] * (n + 1) for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i == 0 and j == 0 and k == 0:\n                    dp[i][j][k] = 0\n                elif i == 0:\n                    dp[i][j][k] = dp[i][j][k - 1] + 1\n                elif j == 0:\n                    dp[i][j][k] = dp[i][j][k - 1] + 1\n                elif k == 0:\n                    dp[i][j][k] = dp[i][j - 1][k] + 1\n                else:\n                    dp[i][j][k] = max(\n                        dp[i][j - 1][k] + 1,\n                        dp[i][j][k - 1] + 1,\n                        dp[i - 1][j][k] + 1,\n                    )\n    print(dp[n - 1][n - 1][n - 1])\n\n    for i in range(n, 0, -1):\n        for j in range(n, 0, -1):\n            for k in range(n, 0, -1):\n                if dp[i][j][k] == max(\n                    dp[i][j][k],\n                    dp[i][j - 1][k],\n                    dp[i][j][k - 1],\n                    dp[i - 1][j][k],\n                ):\n                    return dp[i][j][k]\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l = len(s)\n    r = len(s)\n    while True:\n        if l >= r:\n            break\n        if s[l]!= t[r]:\n            break\n        l += 1\n        r -= 1\n    return l - 1 if l < len(s) else r + 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    target = stdin\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub = stdin[i:j]\n            if all(\n                sub.count(char) <= target.count(char) for char in set(target)\n            ):\n                target = sub\n    return len(target)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    size = len(string)\n    window = size\n    last_window = -1\n    answer = 0\n    for i in range(0, size):\n        if i <= last_window:\n            window = min(window, i - last_window)\n        else:\n            window -= 1\n        last_window = i\n        answer = max(answer, window)\n    return answer\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    i = j = len(s) - 1\n    res = 0\n    while i >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            res = max(res, j - i)\n            j -= 1\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[::-1]\n    l = len(s)\n    r = len(t)\n    return max([len(s)-i-j for i,j in zip(s[l:][::-1],t)])"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    l = len(s)\n    while True:\n        if s == t:\n            break\n        if l < 2:\n            break\n        if len(t) == 0:\n            break\n        # s, t, l\n        if s[0] == t[0] and s[1] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        elif s[0] == t[0]:\n            s = s[1:]\n        elif s[0]!= t[0] and s[1] == t[0]:\n            s = s[1:]\n        else:\n            s = s[1:]\n            t = t[1:]\n        l = len(s)\n    return len(s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #    (s, t) = stdin.splitlines()\n    s, t = stdin.splitlines()\n\n    s_l = len(s)\n    t_l = len(t)\n\n    s_t = list(t)\n    s_l = len(s)\n    t_l = len(t)\n\n    i = 0\n    k = 0\n\n    while i < s_l:\n\n        if s_l > i + t_l:\n            for j in range(t_l):\n                if s[i + j]!= s_t[j]:\n                    break\n                elif j == t_l - 1:\n                    return k\n\n        if s_l < i + t_l:\n            k += 1\n            for j in range(t_l):\n                if s_t[j]!= s[i + j]:\n                    break\n                elif j == t_l - 1:\n                    return k\n\n        i += 1\n    return k\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    # x = 0.4\n    if x <= 1.5:\n        return f'{3} {2}'\n    if x < 3.5:\n        return f'{1} {2}'\n    if x < 5.5:\n        return f'{1} {3}'\n    if x < 7.5:\n        return f'{1} {4}'\n    if x < 9.5:\n        return f'{2} {4}'\n    if x < 12.5:\n        return f'{2} {5}'\n    if x < 14.5:\n        return f'{3} {5}'\n    if x < 17.5:\n        return f'{3} {6}'\n    return f'{4} {6}'\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    r = int(math.sqrt(a))\n    q = int(a / r)\n    k = 1\n    while (r > 0.1) & (q * k <= b):\n        r = int(r * q)\n        k += 1\n    if b <= k * r:\n        return '{} {}'.format(k, r)\n    return '{} {}'.format(1, k)\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x <= 0:\n        return 'Error'\n    if x <= 3:\n        return '2 2'\n    if x <= 6:\n        return '3 2'\n    if x <= 9:\n        return '4 2'\n    if x <= 13:\n        return '4 3'\n    if x <= 18:\n        return '4 4'\n    if x <= 23:\n        return '4 5'\n    if x <= 29:\n        return '4 6'\n    if x <= 34:\n        return '5 2'\n    if x <= 39:\n        return '5 3'\n    if x <= 45:\n        return '5 4'\n    if x <= 49:\n        return '5 5'\n    if x <= 54:\n        return '5 6'\n    if x <= 59:\n        return '6 2'\n    if x <= 63:\n        return '6 3'\n    if x <= 68:\n        return '6 4'\n    if x <= 73:\n        return '6 5'\n    if x <= 78:\n        return '6 6'\n    if x <= 83:\n        return '7 2'\n    if x <= 88:\n        return '7 3'\n    if x <= 93:\n        return '7 4'\n    if x <= 98:\n        return '7 5'\n    if x <= 103:\n        return '7 6'\n    if x <= 108:\n        return '8 2'\n    if x <= 113:\n        return '8 3'\n    if x <= 118:\n        return '8 4'\n    if x <= 123:\n        return '8 5'\n    if x <= 128:\n        return '8 6'\n    if x <= 133:\n        return '9 2'\n    if x <= 138:\n        return '9 3'\n    if x <= 143:\n        return '9 4'\n    if x <= 148:\n        return '9 5'\n    if x <= 153:\n        return '9 6'\n    if x <= 158:\n        return '10 3'\n    if x <= 163:\n        return '10 4'\n    if x <= 168:\n        return '10 5'\n    if x <= 173:\n        return '10 6'\n    return 'Error'\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = float(stdin)\n    if A < 3:\n        print(3, 2)\n    elif A < 5:\n        print(5, 3)\n    elif A < 7:\n        print(7, 4)\n    elif A < 9:\n        print(9, 5)\n    elif A < 11:\n        print(11, 6)\n    elif A < 13:\n        print(13, 7)\n    elif A < 15:\n        print(15, 8)\n    elif A < 17:\n        print(17, 9)\n    elif A < 19:\n        print(19, 10)\n    else:\n        print(20, 11)\n    return ''"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    return '%d %d' % (min(max(1, int(x)), 10), max(1, int(x)))\n\nstdin = input()\nprint(*solution(stdin), sep=' ')\n\"\"\"\n\n\nimport math\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    x = float(stdin)\n    A = 1\n    B = 10\n\n    while (A <= x <= B):\n        if (x - A) % 1 == 0:\n            return str(int(A)) + \" \" + str(int(x))\n\n        A += 1\n        B -= 1\n    return \"Neither\""
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if 1.0 < x < 5.0:\n        p1 = x - 1.0\n        p2 = x + 1.0\n        if p1 % 1 == 0:\n            return f\"{int(p1)}{int(p2)}\"\n        else:\n            return f\"{int(p2)}{int(p1)}\"\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # remove newlines\n    # stdin = ''.join([i for i in stdin if i!= '\\n'])\n\n    # read in x\n    x = float(stdin)\n\n    # PART 1\n    d1 = x / 3\n    d2 = x * 2\n    d3 = x ** 2\n    d4 = x ** 3\n    d5 = x ** 4\n\n    # PART 2\n    d1_reciprocal = 1 / d1\n    d2_reciprocal = 1 / d2\n    d3_reciprocal = 1 / d3\n    d4_reciprocal = 1 / d4\n    d5_reciprocal = 1 / d5\n\n    # PART 3\n    d1_exp = math.exp(d1)\n    d2_exp = math.exp(d2)\n    d3_exp = math.exp(d3)\n    d4_exp = math.exp(d4)\n    d5_exp = math.exp(d5)\n\n    # PART 4\n    d1_log = math.log(d1)\n    d2_log = math.log(d2)\n    d3_log = math.log(d3)\n    d4_log = math.log(d4)\n    d5_log = math.log(d5)\n\n    # PART 5\n    d1_ln = math.log(d1_reciprocal)\n    d2_ln = math.log(d2_reciprocal)\n    d3_ln = math.log(d3_reciprocal)\n    d4_ln = math.log(d4_reciprocal)\n    d5_ln = math.log(d5_reciprocal)\n\n    # PART 6\n    d1_sqrt = math.sqrt(d1)\n    d2_sqrt = math.sqrt(d2)\n    d3_sqrt = math.sqrt(d3)\n    d4_sqrt = math.sqrt(d4)\n    d5_sqrt = math.sqrt(d5)\n\n    # PART 7\n    d1_cbrt = math.cbrt(d1)\n    d2_cbrt = math.cbrt(d2)\n    d3_cbrt = math.cbrt(d3)\n    d4_cbrt = math.cbrt(d4)\n    d5_cbrt = math.cbrt(d5)\n\n    # PART 8\n    d1_nthroot = math.pow(d1, 1 / 3)\n    d2_nthroot = math.pow(d2, 1 / 3)\n    d3_nthroot = math.pow(d3, 1 / 3)\n    d4_nthroot = math.pow(d4, 1 / 3)\n    d5_nthroot = math.pow(d5, 1 / 3)\n\n    # PART 9\n    d1_cbrt_reciprocal = math.pow(d1_cbrt, 1 / 3)\n    d2_cbrt_reciprocal = math.pow(d2_cbrt, 1 / 3)\n    d3_cbrt_reciprocal = math.pow(d3_cbrt, 1 / 3)\n    d4_cbrt_reciprocal = math.pow(d4_cbrt, 1 / 3)\n    d5_cbrt_reciprocal = math.pow(d5_cbrt, 1 / 3)\n\n    return str(d1) +'' + str(d2) +'' + str(d3) +'' + str(d4) +'' + str(d5) +'' + str(\n        d1_reciprocal) +'' + str(d2_reciprocal) +'' + str(d3_reciprocal) +'' + str(\n        d4_reciprocal) +'' + str(d5_reciprocal) +'' + str(d1_exp) +'' + str(d2_exp) +'' + str(\n        d3_exp) +'' + str(d4_exp) +'' + str(d5_exp) +'' + str(d1_log) +'' + str(d2_log) +'' + str(\n        d3_log) +'' + str(d4_log) +'' + str(d5_log) +'' + str(d1_ln) +'' + str(d2_ln) +'' + str(\n        d3_ln) +'' + str(d4_ln) +'' + str(d5_ln) +'' + str(d1_sqrt) +'' + str(d2_sqrt) +'' + str(\n        d3_sqrt) +'' + str(d4_sqrt) +'' + str(d5_sqrt) +'' + str(d1_cbrt) +'' + str(d2_cbrt) +'' + str(\n        d3_cbrt) +'' + str(d4_cbrt) +'' + str(d5_cbrt) +'' + str(d1_nthroot) +'' + str(d2_nthroot) +'' + str(\n        d3_nthroot) +'' + str(d4_nthroot) +'' + str(d5_nthroot) +'' + str(d1_cbrt_reciprocal) +'' + str(\n        d2_cbrt_reciprocal) +'' + str(d3_cbrt_reciprocal) +'' + str(d4_cbrt_reciprocal) +'' + str(d5_cbrt_reciprocal)\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input and returns a string of numbers separated by a single space,\n    from small to big.\n    \"\"\"\n    # first try\n    stdin_list = list(map(float, stdin.split()))\n    for i in range(len(stdin_list)):\n        if i % 2 == 0:\n            stdin_list[i] = int(stdin_list[i])\n    return \" \".join(list(map(str, sorted(stdin_list))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for x in stdin:\n        number = float(x)\n        if 1<=number<=5:\n            if x.is_integer() and float(x).is_integer():\n                print(f\"{number} {number}\")\n            else:\n                print(f\"{number} {number + 1}\")\nsolution(input())\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, d, k] = list(map(int, stdin.split()))\n    tree = [i for i in range(n + 1)]\n    parent = [[] for i in range(n + 1)]\n    rank = [0] * (n + 1)\n    edge = [list(map(int, stdin.split())) for i in range(n - 1)]\n    res = []\n    for i in range(len(edge)):\n        parent[edge[i][0]].append(edge[i][1])\n    for i in range(len(parent)):\n        if len(parent[i]) == 0:\n            res.append(i)\n        else:\n            for j in range(len(parent[i])):\n                tree[parent[i][j]] = i\n    for i in range(len(parent)):\n        for j in range(len(parent[i])):\n            if tree[parent[i][j]]!= tree[i]:\n                rank[tree[parent[i][j]]] += rank[i] + 1\n    for i in range(len(tree)):\n        rank[i] += 1\n    for i in res:\n        print(i)\n    for i in range(len(tree)):\n        if tree[i] == n:\n            print(i, rank[i])\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return 'YES' if tree(n, d, k) else 'NO'\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n > 4 * 10 ** 5 or d > 3 * 10 ** 5 or k > 4 * 10 ** 5:\n        return \"NO\"\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    # print(graph)\n    def dfs(start, parent, visited, ans):\n        visited.add(start)\n        for child in graph[start]:\n            if child!= parent:\n                if child not in visited:\n                    if len(visited) < n - 1 and child!= ans:\n                        ans = child\n                        return dfs(child, start, visited, ans)\n                else:\n                    return False\n        return True\n    ans = 1\n    for _ in range(n):\n        if ans not in graph:\n            return \"NO\"\n        if not dfs(ans, -1, set(), ans):\n            return \"NO\"\n        ans += 1\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 1 or d >= n or k >= d * (d - 1) // 2:\n        return 'NO'\n    if d == 1:\n        return 'YES'\n    dp = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(k):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    for _ in range(d):\n        q = [0]\n        while q:\n            u = q.pop()\n            dp[u] = max(dp[u], 1)\n            for v in adj[u]:\n                if dp[v] >= dp[u]:\n                    continue\n                dp[v] = max(dp[v], dp[u] + 1)\n                q.append(v)\n    print(n - 1 - max(dp))\n    if max(dp) == d:\n        ans = []\n        for i in range(1, n + 1):\n            if dp[i] == d:\n                ans.append(i)\n        for i in range(len(ans) - 1):\n            print(ans[i], end=' ')\n        print(ans[-1])\n    else:\n        print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return \"YES\" if (\n        solution_recursive(n, d, k)\n        or solution_iterative(n, d, k)\n    ) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the solution as string\n    \"\"\"\n    n, d, k = (int(x) for x in stdin.split())\n    if n - 1 < k:\n        return \"NO\"\n\n    trees = []\n\n    for _ in range(n - 1):\n        trees.append([])\n\n    for _ in range(n - 1):\n        trees[0].append(int(input()))\n\n    for tree in trees:\n        tree.sort()\n        for i in range(len(tree) - 1):\n            if tree[i] + 1!= tree[i + 1]:\n                return \"NO\"\n\n    for tree in trees:\n        tree.sort()\n        degrees = defaultdict(int)\n        for i in tree:\n            degrees[i] += 1\n\n        for i in range(1, len(tree)):\n            if degrees[i] > k:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def tree_has_path(u: int, v: int) -> bool:\n        if tree[u] == tree[v]:\n            return True\n        if tree[u] < tree[v]:\n            for uu in tree[u + 1 :]:\n                if uu < tree[v]:\n                    return False\n            return True\n        if tree[u] > tree[v]:\n            for uu in tree[u - 1 :]:\n                if uu > tree[v]:\n                    return False\n            return True\n\n    n, d, k = map(int, stdin.split())\n    tree = list(map(int, stdin.split()))\n    tree = list(set(tree))\n    tree.sort()\n    seen = set()\n    for u in range(n):\n        if u in seen:\n            continue\n        if tree_has_path(u + 1, u + k):\n            return \"YES\"\n        seen.add(u)\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, d, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if n - 1 <= k:\n        return \"NO\"\n    if n - 1 > d:\n        return \"NO\"\n    else:\n        edges = [[] for _ in range(n + 1)]\n        for _ in range(d):\n            edge = list(map(int, stdin[3].split()))\n            edges[edge[0]].append(edge[1])\n            edges[edge[1]].append(edge[0])\n        visited = [False] * (n + 1)\n        parent = [-1] * (n + 1)\n        visited[1] = True\n        top_stack = [1]\n        while top_stack:\n            parent_node = top_stack.pop()\n            for adj_node in edges[parent_node]:\n                if not visited[adj_node]:\n                    visited[adj_node] = True\n                    parent[adj_node] = parent_node\n                    top_stack.append(adj_node)\n                    break\n        for node in parent:\n            if node == -1:\n                continue\n            for adj_node in edges[node]:\n                if parent[adj_node] == node:\n                    return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    print(\"YES\" if (n, d, k) else \"NO\")\n    for i in range(1, n + 1):\n        print(i, *[j for j in range(1, n + 1) if j!= i], sep=\" \", end=\" \")\n    print()\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                continue\n            if j - i <= k:\n                print(i, j, sep=\" \", end=\" \")\n\n\nsolution(input())\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"\"\n    for i in range(a + b):\n        if i < a:\n            s = s + \"0\"\n        else:\n            s = s + \"1\"\n    for i in range(1, a + b):\n        if i <= x:\n            s = s + \"0\"\n        else:\n            s = s + \"1\"\n    return s\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, x = map(int, stdin.split())\n    #create a string, we're going to use it later, this is just to print the answer\n    s = ''\n\n    #using this to check if we have enough zeroes\n    #this is a lot easier than using a loop\n    count = 0\n    for i in range(n):\n        if(i <= a):\n            count += 1\n        elif(i <= b):\n            count += 1\n        if(i >= x):\n            count -= 1\n\n    #if there are enough zeroes, we need to add '0' to the left\n    if(count >= n):\n        for i in range(n):\n            if(i <= a):\n                s += '0'\n            elif(i <= b):\n                s += '0'\n            if(i >= x):\n                s += '1'\n\n    #now we add ones to the right\n    #we can use this on the left side as well\n    count = 0\n    for i in range(n):\n        if(i <= a):\n            count += 1\n        elif(i <= b):\n            count += 1\n        if(i >= x):\n            count -= 1\n\n    #if there are enough ones, we need to add '1' to the right\n    if(count >= n):\n        for i in range(n):\n            if(i <= a):\n                s += '1'\n            elif(i <= b):\n                s += '1'\n            if(i >= x):\n                s += '0'\n\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split()\n    a = int(a)\n    b = int(b)\n    x = int(x)\n    \n    return_string = \"\"\n    # The first digit has to be 0\n    return_string += \"0\"*a + \"1\"*b + \"0\"*x\n    \n    \n    return return_string"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    a_zeros = x - b\n    b_ones = b - x\n    b_zeros = a - b - x\n    a_zeros_count = int(math.log(a_zeros, 2))\n    b_ones_count = int(math.log(b_ones, 2))\n    b_zeros_count = int(math.log(b_zeros, 2))\n    for i in range(a_zeros_count + b_ones_count + b_zeros_count):\n        if i >= a_zeros_count:\n            i -= a_zeros_count\n            if (i % 2) == 0:\n                print('0', end='')\n            else:\n                print('1', end='')\n        else:\n            i -= b_ones_count\n            if (i % 2) == 0:\n                print('1', end='')\n            else:\n                print('0', end='')\n        if i!= 0:\n            print('0', end='')\n    print()\n    return ''.join(map(str, list(map(int, stdin.split()))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"\"\n    zeros = 0\n    ones = 0\n    while x > 0:\n        if x & 1:\n            zeros += 1\n        ones += 1\n        x >>= 1\n    if zeros >= ones:\n        ones, zeros = zeros, ones\n    if zeros == 0:\n        if ones % 2 == 0:\n            s += \"0\"\n        else:\n            s += \"1\"\n    else:\n        s += \"1\"\n        if ones % 2 == 0:\n            s += \"0\"\n        else:\n            s += \"1\"\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    i = 0\n    while n > 0:\n        if n - 2 < i:\n            return '0' * (i - n + 1) + '1' * i\n        elif n - 2 > i:\n            return '0' * i + '1' * (n - 2 - i)\n        i += 1\n\n\nsolution(\"2 2 1\")\nsolution(\"3 3 3\")\nsolution(\"5 3 6\")\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    b_ones = a + b - x\n    return \"\".join(str(i) for i in range(a, a + b, b_ones))\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # first, the length of the string\n    # and the number of zeros\n    str_len, zeros = int(stdin.split()[0]), int(stdin.split()[1])\n    # then the string\n    # if we have to do it in reverse,\n    # we use a dict to hash the values\n    # and set the key as the number of zeros\n    # and the value as the binary string\n    hash_val = {0: '0'}\n    binary_str = \"\"\n    for _ in range(zeros):\n        binary_str = binary_str + '0'\n    for _ in range(str_len - zeros):\n        binary_str = binary_str + '1'\n    for key in hash_val.keys():\n        hash_val[key] = binary_str[key::]\n    # now we can get the solution\n    return ''.join(hash_val.values())\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split()\n    return (\"0\" * int(a) + \"1\" * int(b) + \"0\" * int(x))[:int(a) + int(b)]"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\"\\n\")\n\n    def match(a, b):\n        if len(a) == len(b):\n            return sum(a == b) == len(a)\n        elif len(a) > len(b):\n            return match(a[1:], b)\n        else:\n            return match(a, b[1:])\n\n    return \"YES\" if match(a, b) else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    if s == '':\n        return 'NO'\n    res = ''\n    while len(res) < 3 * n:\n        c = t[0]\n        t = t[1:]\n        if (res + c).find(s) == -1:\n            res += c\n    if len(res) == 3 * n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    \n    s_count = [0] * n\n    t_count = [0] * n\n    \n    res = \"\"\n    \n    for i in range(n):\n        s_count[i] = s.count(s[i])\n        t_count[i] = t.count(t[i])\n    \n    \n    if (\n        n == 1 and\n        s_count[0]!= t_count[0] or\n        n == 2 and\n        s_count[0] == t_count[0] and\n        s_count[1]!= t_count[1]\n        ):\n        return \"NO\"\n    \n    for i in range(n):\n        if (s_count[i] + t_count[i]!= n):\n            continue\n        else:\n            res += s[i] * n\n            res += s[i] * n\n            res += s[i] * n\n            res += s[i] * n\n            return \"YES\"\n    \n    \nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(stdin.readline().rstrip())\n    b = list(stdin.readline().rstrip())\n    \n    if len(a) > len(b):\n        return \"NO\"\n    \n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return \"NO\"\n        else:\n            return \"YES\"\n        \n    else:\n        for i in range(len(b)):\n            if a[i]!= b[i]:\n                return \"NO\"\n        else:\n            return \"YES\"\n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    t = stdin.strip()\n    res = \"\"\n    if s.count(\"a\") + s.count(\"b\") + s.count(\"c\")!= n:\n        return \"NO\"\n    if t.count(\"a\") + t.count(\"b\") + t.count(\"c\")!= n:\n        return \"NO\"\n    res_list = []\n    for i in range(n):\n        res_list.append(s[i:i + 3])\n    for i in range(n):\n        res_list.append(t[i:i + 3])\n    if len(set(res_list))!= n:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length_a, length_b, length_c, s, t = stdin.split()\n    s = 'a' * int(length_a)\n    t = 'a' * int(length_b)\n    if t not in s:\n        return 'NO'\n    t = 'b' * int(length_c)\n    t = t + 'a' * (int(length_c) - len(t))\n    if t not in s:\n        return 'NO'\n    t = 'c' * int(length_c)\n    t = t + 'a' * (int(length_c) - len(t))\n    if t not in s:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.rstrip('\\n').split('\\n')\n    b = stdin.rstrip('\\n').split('\\n')\n    return str(solution_brute(a, b))\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    res = \"\"\n    # find substrings of size 3\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i: i + 3] == t[j: j + 3] and i < len(s) and j < len(t):\n                res += s[i] + t[j] + s[i]\n    if len(res) == 0:\n        return \"NO\"\n    return res\n\n\nprint(solution(\"1\\nbc\\n\"))\nprint(solution(\"2\\nab\\n\"))\nprint(solution(\"3\\naa\\nbc\\n\"))\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().replace(' ', '')\n    t = stdin.strip().replace(' ', '')\n    if (n == 1):\n        if (s[0] == t[0]):\n            return t\n        else:\n            return 'NO'\n    ans = ''\n    n_ar = []\n    for i in range(n):\n        n_ar.append(i)\n    for i in range(n):\n        s_i = s[i]\n        for j in range(n):\n            t_j = t[j]\n            if (s_i == t_j):\n                continue\n            if (n_ar[i] < n_ar[j] and t_j not in ans):\n                ans += t_j\n    return 'YES' if len(ans) < n else ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    return \"YES\" if find_substring(s, t) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = stdin.strip().splitlines()\n    for i,v in enumerate(q):\n        q[i] = int(v)\n    print(q)\n    #p = []\n    #length = len(q)\n    #for i in range(length):\n    #    p.append(q.pop(0))\n    #print(p)\n    #for i in range(length - 1):\n    #    p = p + p.pop(0)\n    #return ''.join([str(e) for e in p])\n    return q\n\nsolution(\"5\\n-1 2 2\\n\")"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = [-1]\n    if n == 1:\n        return res\n    # print(arr)\n    for i in range(n - 1):\n        if res[0]!= arr[i]:\n            return res\n        res.append(arr[i])\n    return '\\n'.join([str(x) for x in res])\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = stdin.strip().split()\n    # print(n,q)\n\n    s = sorted(q)\n    if s==q:\n        return''.join(map(str,s))\n    # else:\n    #     return '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n\n    def permutations(q):\n        if len(q) == 1:\n            yield q[0]\n        else:\n            for i in range(len(q)):\n                yield from permutations(q[:i] + q[i+1:])\n\n    ans = []\n    for perm in permutations(q):\n        for i in range(1, len(q)):\n            if sum(abs(q[i] - q[i-1]) for i in range(1, len(q))) == 1:\n                ans += (perm,)\n    return''.join(map(str, ans))\n\n\nprint(solution(input()))\n\n\nimport itertools\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.strip().split()))\n    s = set(q)\n    if n == 1:\n        if 1 in s:\n            return str(1)\n        else:\n            return str(-1)\n    else:\n        for i in range(1,n+1):\n            if i not in s:\n                return str(i)\n            else:\n                q.remove(i)\n                q.append(i)\n                break\n    return str(q[0])\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    q = list(map(int, stdin.split()[1].split(' ')))\n    x = []\n    for i in q:\n        if i not in x:\n            x.append(i)\n        else:\n            return '-1'\n    return''.join(map(str, x))\nsolution(input())\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = stdin\n    l = len(q)\n    if l==1:\n        print(-1)\n    elif l==2:\n        print(q[0],q[1])\n    else:\n        arr = []\n        for i in range(l):\n            arr.append(q[i])\n        arr.sort()\n        ans = arr[0]\n        for i in range(l):\n            arr[i] = ans+1\n            ans += 1\n        for i in range(l):\n            if arr[i]!=q[i]:\n                return \"\"\n        print(\"\".join(map(str,arr)))\nsolution(input())\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l: int = int(stdin.split()[0])\n    a: List[int] = list(map(int, stdin.split()[1].split(' ')))\n    if l == len(a) and l <= 1000000:\n        for i in range(l):\n            if a[i] < 1 or a[i] > l:\n                return -1\n        a.sort()\n        if l == 1:\n            return '1'\n        elif l == 2:\n            if a[0] == 1 and a[1] == 2:\n                return '1 2'\n            else:\n                return -1\n        elif l == 3:\n            if a[0] == 1 and a[1] == 2 and a[2] == 3:\n                return '1 2 3'\n            else:\n                return -1\n        else:\n            arr: List[int] = [1]\n            for i in range(2, l):\n                arr.append(arr[-1] + arr[-2])\n            for i in range(l - 1):\n                if a[i] == a[i + 1] - 1:\n                    return arr[i] +'' + arr[i + 1]\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    Q = list(map(int, stdin.strip().split()))\n    if N == 1:\n        if Q[0] == 0:\n            return str(Q[0])\n        return '-1'\n    if N == 2:\n        if Q[0] == Q[1]:\n            return str(Q[1])\n        return '-1'\n\n    Q = sorted(Q)\n    start = 0\n    end = len(Q) - 1\n    cur_min = 0\n    while start < end:\n        cur_min = Q[start] + Q[end]\n        if cur_min == 0:\n            return str(Q[start]) + str(Q[end])\n        elif cur_min == Q[start]:\n            start += 1\n        else:\n            end -= 1\n    if start == end:\n        return str(Q[start])\n\n    cur_min = -1000000\n    while start < end:\n        cur_min = Q[start] + Q[end]\n        if cur_min < 0:\n            start += 1\n        else:\n            end -= 1\n    return str(Q[start])\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.strip().split()))\n    q = sorted(q)\n    for i in range(n):\n        if i >= q[i]:\n            return -1\n    ans = []\n    for i in range(n):\n        ans.append(q.pop(0))\n    ans = sorted(ans)\n    return \" \".join(str(x) for x in ans)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  #your code here\n  x = list(map(int, stdin.split()))\n  x.sort()\n  n = len(x)\n  dp = [[x[i]] for i in range(n)]\n  for i in range(1,n):\n    for j in range(i):\n      if (x[i] - x[j] <= 3):\n        dp[i].append(dp[j][i-1]+1)\n      else:\n        dp[i].append(dp[j][i-1])\n  return str(dp[-1][-1])"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    in_n = int(stdin)\n    nums = stdin.split()\n    nums = sorted(list(map(int, nums)))\n    res = 0\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i - 1]!= 0:\n            res += abs(nums[i] - nums[i - 1])\n    return res\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(2 * (2 ** (n - 1)) - 1)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal_coordinate(a, b):\n        return abs(a - b) <= 1\n\n    n = int(stdin.split()[0])\n    coords = list(map(int, stdin.split()[1].split(\" \")))\n    if n == 1:\n        return 0\n\n    min_coins = float('inf')\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_equal_coordinate(coords[i], coords[j]):\n                min_coins = min(min_coins, 1)\n            if is_equal_coordinate(coords[i], coords[j] - 1):\n                min_coins = min(min_coins, 2)\n            if is_equal_coordinate(coords[i], coords[j] + 1):\n                min_coins = min(min_coins, 2)\n\n    return min_coins\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"Returns solution.\"\"\"\n  n = int(stdin.strip())\n  x = list(map(int, stdin.strip().split()))\n  dp = [0] * n\n  if n == 1:\n    return 1\n  if n == 2:\n    if x[0] == x[1]:\n      return 1\n    else:\n      return 2\n\n  for i in range(1, n):\n    dp[i] = (dp[i - 1] if x[i - 1] == x[i] else 1) + 1\n  return str(dp[-1])\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coordinates = stdin.split()\n    x = set(int(i) for i in coordinates)\n    y = {}\n    for i in x:\n        if i in y.keys():\n            y[i] += 1\n        else:\n            y[i] = 1\n    return len(x) + sum(y.values())\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n    arr.sort()\n\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        ans += abs(arr[i] - arr[i - 1])\n        if i >= 1:\n            cnt += 1\n            ans += min(cnt, abs(arr[i] - arr[i - 2]))\n        else:\n            cnt += 1\n            ans += min(cnt, abs(arr[i] - arr[i - 1]))\n\n    return str(ans)"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 2 2 3 3\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 2 2 2 3 3\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin)\n    chips = list(map(int, stdin.split()))\n    used = {}\n    for i in range(n):\n        if chips[i] in used:\n            return '-1'\n        used[chips[i]] = True\n    if len(used)!= n:\n        return '-1'\n    dist = {}\n    for i in range(n):\n        dist[i] = []\n    for i in range(n):\n        if chips[i] not in dist:\n            dist[chips[i]] = []\n        dist[chips[i]].append(i)\n    used_list = []\n    for i in range(n):\n        if chips[i] in used_list:\n            return '-1'\n        used_list.append(chips[i])\n    c = 1\n    total = 0\n    for i in range(n):\n        if i == n-1:\n            if c % 2 == 0:\n                total += chips[i] - chips[i-1] + 1\n            else:\n                total += chips[i] - chips[i-1] - 1\n            break\n        if chips[i] == chips[i+1]:\n            if c % 2 == 0:\n                total += chips[i] + 1 - chips[i-1]\n            else:\n                total += chips[i] + 1 - chips[i-1]\n        else:\n            if c % 2 == 0:\n                total += chips[i] - chips[i-1] + 1\n            else:\n                total += chips[i] - chips[i-1] - 1\n        c += 1\n    return str(total)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  coords = stdin.split()\n  \n  x1 = int(coords[0])\n  x2 = int(coords[1])\n  x3 = int(coords[2])\n  x4 = int(coords[3])\n  x5 = int(coords[4])\n  x6 = int(coords[5])\n  \n  if x1 == x2 and x2 == x3 and x3 == x4 and x4 == x5 and x5 == x6:\n    return 1\n  \n  return 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    x = stdin.split(' ')[1:]\n\n    c = Counter(x)\n    x_map = Counter({k: 0 for k in range(1, 10)})\n    for i in x:\n        x_map[i] += 1\n    \n    if n == 1:\n        return sum([1 for i in x if i == 1])\n    elif n == 2:\n        if 2 in x:\n            return sum(x_map[i] - x_map[i - 2] for i in range(2, 10)) + sum(x_map[i] for i in range(2, 10))\n        return sum(x_map[i] - x_map[i - 2] for i in range(2, 10))\n    else:\n        x = list(x)\n        x.sort()\n        i = 0\n        l = len(x)\n        while i < l:\n            if x[i] == x[i + 1]:\n                x[i] -= 1\n                x[i + 1] += 1\n                l -= 2\n                i += 2\n            else:\n                x[i] -= 1\n                l -= 1\n                i += 1\n\n        return sum([1 for i in x if i == 1])\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin)\n    visited = set()\n    visited.add((1,1))\n\n    q = deque()\n    q.append((1,1))\n\n    while q:\n        i,j = q.popleft()\n\n        if (i,j) == (rows, rows):\n            return str(len(visited))\n\n        if (i,j) not in visited:\n            visited.add((i,j))\n            q.append((i+1,j))\n            q.append((i,j+1))\n\n    return str(len(visited))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def distance(s, t):\n        return abs(s[0] - t[0]) + abs(s[1] - t[1])\n\n    def neighbors(s, N):\n        x, y = s\n        dx, dy = x + 1, y + 1\n        while dx < N:\n            yield dx, dy\n            dx += 1\n            dy += 1\n        dx, dy = x - 1, y + 1\n        while dx >= 1:\n            yield dx, dy\n            dx -= 1\n            dy += 1\n        dx, dy = x - 1, y - 1\n        while dx >= 1 and dy >= 1:\n            yield dx, dy\n            dx -= 1\n            dy -= 1\n        dx, dy = x + 1, y - 1\n        while dx < N and dy >= 1:\n            yield dx, dy\n            dx += 1\n            dy -= 1\n        dx, dy = x + 1, y + 1\n        while dx < N:\n            yield dx, dy\n            dx += 1\n            dy += 1\n\n    x, y = 1, 1\n    sq = 1\n    while sq!= N:\n        if sq < N:\n            sq = sq * 2\n        else:\n            return -1\n        moves = 0\n        while sq!= N:\n            move = 1\n            while sq!= N:\n                if sq % 2 == 1:\n                    sq += 1\n                    continue\n                else:\n                    sq //= 2\n                    move += 1\n            moves = max(moves, move)\n        x += moves\n    return moves\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return \"N must be greater than 1\"\n    moves = 0\n    while N > 1:\n        if N % 2 == 0:\n            N = N // 2\n        else:\n            N = N // 2 + 1\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_moves = 0\n    while N > 1:\n        if N % 2 == 1:\n            N -= 1\n            max_moves += 1\n        else:\n            N /= 2\n            max_moves += 1\n    return str(max_moves)"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 4\n   ... 3\n   ... 2\n   ... 1''')\n    '5'\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 4\n   ... 5''')\n    '1'\n    '''\n    N = int(stdin)\n    table = {0: (0, 0), 1: (0, 1), 2: (0, 2), 3: (1, 0), 4: (1, 1), 5: (1, 2)}\n    i, j = 1, 1\n    steps = 0\n    while i * j!= N:\n        i, j = table[i * j]\n        steps += 1\n    return steps\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(calc(n) for x in range(1, n)))\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin)\n\n    # Keep track of number of moves and number of squares visited so far\n    moves = 0\n    visited = set()\n\n    # Make it so that starting position (1, 1) is never visited\n    visited.add((1, 1))\n\n    # Loop until we reach the square N\n    while n not in visited:\n        # Add to the number of moves\n        moves += 1\n\n        # Get all 4 neighbors of the current position\n        neighbors = (\n            (x, y) for x in range(1, n + 1)\n            for y in range(1, n + 1)\n            if (x, y)!= (1, 1)\n        )\n\n        # Filter the neighbors\n        neighbors = filter(\n            lambda x: x not in visited,\n            neighbors\n        )\n\n        # Add the neighbors to the visited set\n        visited |= neighbors\n\n    return moves\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    table = set()\n    table.add((1,1))\n    step = 0\n    while True:\n        step += 1\n        new_table = set()\n        for i in range(1,10):\n            for j in range(1,10):\n                if i*j in table:\n                    new_table.add((i+1,j))\n                    new_table.add((i,j+1))\n        table = new_table\n        if step == 500:\n            return step\n        if len(table) == 2 and 1 in table and 10 in table:\n            return step\n\nprint(solution(input()))"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_reach(n: int) -> bool:\n        return n in visited\n\n    def dfs(n: int) -> int:\n        if can_reach(n):\n            return 0\n        moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        visited.append(n)\n        for move in moves:\n            next_x, next_y = n[0] + move[0], n[1] + move[1]\n            dfs((next_x, next_y))\n\n    moves = []\n    visited = []\n    n = int(stdin)\n    dfs((1, 1))\n    return moves\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(solution2(a, b))\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b = map(int, stdin.split()[1:3])\n    result = (a + b) * (n - 2)\n    return str(result)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a_rock = int(stdin.splitlines()[1])\n    a_scissors = int(stdin.splitlines()[2])\n    a_paper = int(stdin.splitlines()[3])\n\n    b_rock = int(stdin.splitlines()[4])\n    b_scissors = int(stdin.splitlines()[5])\n    b_paper = int(stdin.splitlines()[6])\n\n    # I suppose that rock and paper and scissors means \"rock\" and \"paper\" and \"scissors\" means \"rock\", \"paper\" and \"scissors\"\n    # So I guess that a_rock, a_scissors and a_paper means \"rock\" and a_rock, a_paper and a_scissors means \"paper\" and a_rock, a_paper and a_scissors means \"scissors\"\n    # a_rock, a_paper and a_scissors\n    # a_rock, a_paper and a_scissors\n    # a_rock, a_paper and a_scissors\n    # b_rock, b_paper and b_scissors\n    # a_rock and b_paper and a_scissors\n    # a_paper and b_paper and a_scissors\n    # a_scissors and b_paper and a_paper\n    # a_rock, b_paper and a_paper\n    # a_rock, b_paper and a_scissors\n    # a_paper, b_paper and a_paper\n    # a_scissors, b_paper and a_scissors\n    # a_rock, a_paper and b_paper\n    # a_rock, a_paper and a_scissors\n    # a_paper, a_scissors and b_paper\n    # a_scissors, a_paper and b_scissors\n    # a_rock, a_paper and a_paper\n    # a_rock, a_paper and a_scissors\n    # a_paper, a_paper and a_scissors\n    # a_scissors, a_paper and a_scissors\n    a_win = [\n        [0, 0, 0],\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 2],\n        [1, 1, 2],\n        [1, 2, 2],\n        [2, 2, 2],\n        [3, 3, 3],\n        [4, 4, 4],\n        [5, 5, 5],\n        [6, 6, 6],\n        [7, 7, 7],\n        [8, 8, 8],\n        [9, 9, 9],\n        [10, 10, 10]\n    ]\n    b_win = [\n        [0, 0, 0],\n        [0, 0, 1],\n        [0, 1, 2],\n        [0, 1, 3],\n        [0, 1, 4],\n        [0, 2, 4],\n        [0, 2, 5],\n        [0, 2, 6],\n        [1, 2, 6],\n        [1, 2, 7],\n        [1, 3, 7],\n        [1, 3, 8],\n        [1, 4, 8],\n        [1, 4, 9],\n        [1, 5, 9],\n        [1, 5, 10],\n        [2, 5, 10],\n        [2, 6, 10],\n        [2, 6, 11],\n        [2, 7, 11],\n        [2, 7, 12],\n        [2, 8, 12],\n        [2, 8, 13],\n        [2, 9, 13],\n        [2, 9, 14],\n        [3, 9, 14],\n        [3, 10, 14],\n        [3, 10, 15],\n        [3, 11, 15],\n        [3, 11, 16],\n        [3, 12, 16],\n        [3, 12, 17],\n        [4, 12, 17],\n        [4, 13, 17],\n        [4, 13, 18],\n        [4, 14, 18],\n        [4, 14, 19],\n        [4, 15, 19],\n        [4, 15, 20],\n        [4, 16, 20],\n        [5, 16, 20],\n        [5, 17, 20],\n        [5, 18, 20],\n        [5, 18, 21],\n        [5, 19, 21],\n        [5, 19, 22],\n        [5, 20, 22],\n        [5, 20, 23],\n        [6, 20, 23],\n        [6, 21, 23],\n        [6, 22, 23],\n        [6, 23, 23],\n        [7, 23, 23],\n        [7, 24, 23],\n        [7, 24, 24],\n        [7, 25, 24],\n        [7, 25, 25],\n        [7, 26, 25],\n        [7, 26, 26],\n        [8, 26, 26],\n        [8, 27, 26],\n        [8, 27, 27],\n        [8, 28, 27],\n        [8, 29, 28],\n        [8, 29, 29],\n        [8, 30, 29],\n        [9, 30, 30],\n        [9, 31, 30],\n        [9, 32, 31],\n        [9, 33, 32],\n        [9,"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split('\\n')\n    a = list(map(int, a.split(' ')))\n    b = list(map(int, b.split(' ')))\n    A, B = 0, 0\n    for i in range(n):\n        if a[i % 3] > b[i % 3]:\n            A += 1\n        elif a[i % 3] < b[i % 3]:\n            B += 1\n    print(min(A, n - A), max(A, n - A))\n    print(min(B, n - B), max(B, n - B))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a_a, a_b, a_c = map(int, stdin.split())\n    b_a, b_b, b_c = map(int, stdin.split())\n    # print(n)\n    # print(a, b, a_a, a_b, a_c, b_a, b_b, b_c)\n    min_win = 0\n    max_win = 0\n    if a_a > n or b_a > n:\n        return str(min_win) + \" \" + str(max_win)\n\n    a_wins = min(a_a, b_a)\n    b_wins = min(a_b, b_b)\n    if a_wins == n:\n        min_win += 1\n    if b_wins == n:\n        max_win += 1\n    # print(a_wins, b_wins)\n    # print(min_win, max_win)\n    return str(min_win) + \" \" + str(max_win)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def win(a, b):\n        if a == b:\n            return 0\n        elif a == 0 and b == 1:\n            return 1\n        elif a == 1 and b == 0:\n            return 1\n        elif a == 0 and b == 2:\n            return 1\n        elif a == 2 and b == 0:\n            return 1\n        elif a == 1 and b == 2:\n            return 1\n        else:\n            return 2\n\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n\n    return \" \".join(map(str, map(win, a, b)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    print(a,b)\n    if a[0] == b[0]:\n        return \"0 {}\".format(a[0]*(n-1))\n    return \"1 {}\".format(a[0]*(n-1))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice = list(map(int, stdin.split()))\n    bob = list(map(int, stdin.split()))\n    print(sorted(alice + bob)[0], sorted(alice + bob)[1])\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n    >>> 0 1 1\n    >>> 1 1 0\n    >>> ''')\n    0 1\n    '''\n    n, a, b = list(map(int, stdin.split()))\n    if n % 2!= 0:\n        return '{} {}'.format(*sorted(list(set(range(n)) - set(a)) - set(b)))\n    else:\n        return '{} {}'.format(*sorted(list(set(range(n)) - set(b)) - set(a)))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a_r, a_s, a_p = stdin.split()\n    a_r, a_s, a_p = int(a_r), int(a_s), int(a_p)\n    b_r, b_s, b_p = stdin.split()\n    b_r, b_s, b_p = int(b_r), int(b_s), int(b_p)\n    ans_a = a_r\n    ans_b = b_r\n    for i in range(a_r):\n        for j in range(a_s):\n            for k in range(a_p):\n                if (j+k) == (i+k) and (i+j) == (j+k) and (j+i) == (i+j):\n                    if (i+j) < ans_a:\n                        ans_a = i+j\n    for i in range(b_r):\n        for j in range(b_s):\n            for k in range(b_p):\n                if (j+k) == (i+k) and (i+j) == (j+k) and (j+i) == (i+j):\n                    if (i+j) > ans_b:\n                        ans_b = i+j\n    return str(ans_a)+\" \"+str(ans_b)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[1:]\n    n = int(a[0])\n    m = int(a[1])\n    a = a[2:]\n    blocks = []\n    for i in range(m):\n        a[i] = int(a[i])\n        blocks.append((a[i], a[i] + 1))\n    max_set = 0\n    for i in range(m):\n        block = blocks[i]\n        for j in range(i + 1, m):\n            block2 = blocks[j]\n            if (block2[0] - block[1]) <= 0:\n                continue\n            for k in range(j + 1, m):\n                block3 = blocks[k]\n                if (block3[0] - block2[1]) <= 0:\n                    continue\n                for l in range(k + 1, m):\n                    block4 = blocks[l]\n                    if (block4[0] - block3[1]) <= 0:\n                        continue\n                    if block4[1] > block3[1]:\n                        block4 = (block3[1], block4[0])\n                    for m in range(l + 1, m):\n                        block5 = blocks[m]\n                        if (block4[0] - block5[1]) <= 0:\n                            continue\n                        if block5[1] > block4[1]:\n                            block5 = (block4[1], block5[0])\n                        if (block5[0] - block2[1]) <= 0:\n                            continue\n                        if block5[1] > block2[1]:\n                            block5 = (block2[1], block5[0])\n                        if (block5[0] - block[1]) <= 0:\n                            continue\n                        if block5[1] > block[1]:\n                            block5 = (block[1], block5[0])\n                        if (block5[0] - block3[1]) <= 0:\n                            continue\n                        if block5[1] > block3[1]:\n                            block5 = (block3[1], block5[0])\n                        if (block5[0] - block4[1]) <= 0:\n                            continue\n                        if block5[1] > block4[1]:\n                            block5 = (block4[1], block5[0])\n                        if (block5[0] - block5[1]) <= 0:\n                            continue\n                        if block5[1] > block5[1]:\n                            block5 = (block5[1], block5[0])\n                        if max_set < len(block5):\n                            max_set = len(block5)\n                            print(block1[0], block1[1], block2[0], block2[1], block3[0], block3[1], block4[0], block4[1], block5[0], block5[1])\n    print(max_set)\n\n\nsolution('''2\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n''')\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    b = [int(i) for i in a]\n    b.sort()\n    l = 1\n    r = b[0]\n    res = set()\n    while l < r:\n        if r - l <= 1:\n            break\n        r = min(b[l+1:r])\n        l = b[l] + 1\n        res.add(l)\n        res.add(r)\n    return str(len(res)) + '\\n' + '\\n'.join(map(str, sorted(res)))"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    length = len(a)\n    res = {}\n    for i in range(length):\n        for j in range(i+1, length):\n            if a[i] + a[j] not in res:\n                res[a[i] + a[j]] = (i, j)\n            else:\n                if res[a[i] + a[j]][1] > j:\n                    res[a[i] + a[j]] = (i, j)\n    print(len(res))\n    result = list(res.values())\n    for i in result:\n        print(i[0]+1, i[1]+1)\n    return\n\nsolution()\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  _, a = stdin.split()\n  a = map(int, a)\n  tot = sum(a)\n\n  def is_valid(l, r, A):\n    t = 0\n    for i in range(l, r + 1):\n      t += A[i]\n    return t == tot\n\n  # start is a red block, end is an orange block\n  # recurse if there are enough red blocks and orange blocks\n  def dfs(start, end):\n    if start == end:\n      return 1\n    # no valid red blocks\n    if start > end:\n      return 0\n    count = 0\n    for i in range(start, end + 1):\n      # find the next block to be added to the set\n      next = i + 1\n      while next < end and not is_valid(start, i, a):\n        next += 1\n      count += dfs(i + 1, next - 1)\n    return count\n\n  return str(dfs(0, len(a) - 1))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    visited = {tuple(arr)}\n    if n == 1:\n        return str(len(arr))\n    start = 0\n    end = 1\n    while end < n:\n        start = end\n        end = end + 1\n        while end < n:\n            if (start, end) not in visited:\n                visited.add((start, end))\n                break\n            end = end + 1\n    if end == n:\n        return str(len(visited))\n    return str(len(visited))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    blocks = [[0, 1]]\n    count = 1\n    for i in range(1, n):\n        blocks.sort()\n        if blocks[0][1] == i:\n            blocks.insert(0, [i, i])\n            count += 1\n        if blocks[-1][1] == i:\n            blocks.append([i, i])\n            count += 1\n        blocks.sort()\n        blocks = blocks[2:]\n        blocks.sort()\n    return str(count)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    min_sum = sum(arr)\n    max_sum = 0\n    for i in range(1, n):\n        curr_sum = sum(arr[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    for i in range(1, n):\n        curr_sum = sum(arr[:i])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    for i in range(1, n):\n        curr_sum = sum(arr[i+1:])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return str(min_sum + max_sum)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a.pop(0)\n    s = sum(a)\n    b = []\n    while True:\n        if n == 1:\n            b.append(1)\n            break\n        if n > s:\n            n -= 1\n            b.append(n)\n            n -= 1\n        else:\n            s -= n\n            n -= 1\n    return''.join([str(i) for i in b])"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    ret = 0\n    for i in range(1, n):\n        left = i\n        right = n-i\n        while left >= 0 and right >= 0:\n            if a[left] + a[right] == a[i]:\n                ret = max(ret, right - left)\n                left -= 1\n                right -= 1\n            elif a[left] + a[right] > a[i]:\n                left -= 1\n            else:\n                right -= 1\n        if ret == 0:\n            break\n    return ret"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  a = list(map(int, stdin.split()[1]))\n  k = 0\n  for i in range(1, n):\n    if a[i-1]!= a[i]:\n      for j in range(i-1, -1, -1):\n        if a[j]!= a[i]:\n          l, r = i, j\n          break\n      for j in range(i, n):\n        if a[j]!= a[i]:\n          k = max(k, j-l+1)\n          break\n  return str(k)\n\nsolution(\"4\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\")\nsolution(\"5\\n1 1 1 1 1\")\nsolution(\"8\\n1 1 1 1 1 1 1 1 1 1\")\nsolution(\"9\\n1 1 1 1 1 1 1 1 1 1 1\")\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an array of ints. Return whether or not this array is sorted.\n    '''\n    arr = sorted([int(x) for x in stdin.split()])\n    return 'YES' if arr == arr[::-1] else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    arr = list(map(int, stdin.split()))\n    while len(arr) > 1:\n        maxi = max(arr)\n        idx = arr.index(maxi)\n        res.append(maxi)\n        arr.pop(idx)\n        arr.pop(idx)\n        arr.append(maxi)\n    return \"YES\" if len(res) == 1 else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split()]\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            return \"NO\"\n        i += 1\n    return \"YES\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  a = stdin.split('\\n')\n  stack = []\n  for i in range(len(a)):\n    a[i] = int(a[i])\n    while len(stack) > 0 and stack[-1] < a[i]:\n      stack.pop()\n    if len(stack) == 0:\n      stack.append(a[i])\n    else:\n      stack.append(a[i])\n  while len(stack) > 0:\n    stack.pop()\n  return \"YES\" if len(stack) == 0 else \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    # arr = list(map(int, input().split()))\n\n    while len(arr) > 1:\n        left_stack = []\n        right_stack = []\n        for i in range(len(arr)):\n            # If there is a ravioli in the left stack,\n            # add it to the right stack.\n            if left_stack and left_stack[-1] == arr[i]:\n                left_stack.pop()\n                right_stack.append(arr[i])\n            else:\n                left_stack.append(arr[i])\n\n        right_stack.sort()\n        # If there is a ravioli in the right stack,\n        # add it to the left stack.\n        if right_stack:\n            left_stack.append(right_stack.pop())\n\n        # Remove the tallest one from each stack.\n        arr = left_stack if len(left_stack) > len(right_stack) else right_stack\n        # Print out the current stack.\n        print(''.join(map(str, arr)))\n    return 'YES' if len(arr) == 1 else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 2 3\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 5 2 1\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin.split()[0])\n    stacks = [int(i) for i in stdin.split()[1:]]\n    result = [\"NO\"]\n    while len(stacks) > 0:\n        current_stack = stacks.pop()\n        while len(stacks) > 0 and stacks[-1] == current_stack:\n            stacks.pop()\n        result.append(str(current_stack))\n    return''.join(result)\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stacks = [int(i) for i in stdin.split()]\n    heights = []\n    while len(stacks) > 0:\n        for stack in stacks:\n            if len(heights) == 0:\n                heights.append(stack)\n                stacks.remove(stack)\n            else:\n                if abs(heights[-1] - stack) > 2:\n                    heights.append(stack)\n                    stacks.remove(stack)\n                    break\n                else:\n                    if stack in heights:\n                        stacks.remove(stack)\n                    elif stack > heights[-1]:\n                        heights.append(stack)\n                        stacks.remove(stack)\n                        break\n        else:\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = sorted(map(int, stdin.split()))\n    stacks = []\n    while len(arr) > 0:\n        if len(stacks) == 0:\n            stacks.append(arr.pop(0))\n        else:\n            if len(stacks) > 0:\n                if stacks[-1] < arr[0]:\n                    stacks.append(arr.pop(0))\n                else:\n                    arr.pop(0)\n    return 'YES' if len(stacks) > 0 else 'NO'\n\n\n\nsolution('1 2 3')"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = list(map(int, stdin.strip().split()))\n    \n    stacks = []\n    stacks.append(array[0])\n    for i in range(1, n):\n        if not stacks:\n            stacks.append(array[i])\n            continue\n        if stacks[-1] > array[i]:\n            stacks[-1] = array[i]\n            continue\n        \n        removed = stacks.pop()\n        stacks.append(removed)\n        stacks.append(array[i])\n    \n    return \"NO\" if stacks else \"YES\"\n\nstdin = '5\\n1 2 3 4 5\\n'\nprint(solution(stdin))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = int(stdin.split()[0]), stdin.split()[1], stdin.split()[2]\n    s = list(s)\n    t = list(t)\n    k = 0\n    if len(t) > len(s):\n        return \"-1\"\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                s[i] = t[j]\n                break\n        if s == t:\n            return str(k)\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if len(s)!= len(t):\n        return -1\n    swaps = 0\n    # we will have a string as a queue and we will check for neighbours\n    # in each round\n    # so we need to put in a queue which will contain tuples of (index, 1)\n    # which are the indices of the character that we need to swap\n    # we will put in a queue all the indexes of characters in s and t\n    # and we will start with the smallest of the two,\n    # since we are iterating over the string\n    # and we are going to compare to s and t and swap\n    # when we find a match we will remove the index of the character in both\n    # the lists so that we can go to the next index\n    # and then we will add a swap\n    # in the end we will get the final index of all the characters in the lists\n    # and return the index that is not in the final list\n    queue = []\n    for i in range(n):\n        queue.append((i, 1))\n\n    # while the queue is not empty\n    while queue:\n        # we will take out the first pair in the queue\n        # first index, second index\n        index1, index2 = queue[0]\n        queue = queue[1:]\n        if index1 > n - 1:\n            break\n        # if the indices are not the same\n        if s[index1]!= t[index2]:\n            # and we are not done\n            if index2 < n - 1:\n                # add the next index\n                queue.append((index1, index2 + 1))\n            # if they are the same, remove the index\n            else:\n                queue.append((index1, index2 + 1))\n\n            # add a swap\n            swaps += 1\n        # check if we are done\n        if index1 == n - 1:\n            # if we are done return the index\n            return swaps\n\n    # we are done so return -1\n    return -1\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if not s and not t:\n        return \"0\"\n    if not s or not t:\n        return \"-1\"\n    if len(s)!= len(t):\n        return \"-1\"\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            s_and_t = s[:i] + t[i] + s[i + 1:]\n            t_and_s = t[:i] + s[i] + t[i + 1:]\n            if s_and_t == t:\n                return str(i + 1)\n            elif t_and_s == s:\n                return str(i + 1)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s)!= len(t):\n        return -1\n    k = 0\n    c = list(range(n))\n    while k < 10**4:\n        l = 0\n        while l < len(s):\n            if s[l]!= t[l]:\n                break\n            l += 1\n        if l < len(s):\n            return -1\n        else:\n            s, t = swap(s, t)\n        k += 1\n    return str(k) +'' +''.join(map(str, c))\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string = stdin.strip()\n    if len(string)!= n:\n        return -1\n\n    # 1 - swap adjacent characters\n    for i in range(1, n):\n        if string[i]!= string[i - 1]:\n            string = string[:i - 1] + string[i] + string[i - 1] + string[i + 1:]\n    # 2 - swap adjacent characters\n    for i in range(n - 1):\n        if string[i]!= string[i + 1]:\n            string = string[:i] + string[i + 1] + string[i] + string[i + 2:]\n    # 3 - swap neighboring characters\n    for i in range(n - 1):\n        if string[i]!= string[i + 1]:\n            string = string[:i] + string[i + 1] + string[i] + string[i + 2:]\n    # 4 - swap neighboring characters\n    for i in range(n - 1):\n        if string[i]!= string[i + 1]:\n            string = string[:i] + string[i + 1] + string[i] + string[i + 2:]\n\n    return string\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip().split(' ')[1]\n    t = stdin.rstrip().split(' ')[2]\n    k = len(s)\n    lst = []\n    if k > 10:\n        return '-1'\n    for i in range(10):\n        for j in range(i + 1, 10):\n            lst.append([i, j, i * j])\n    lst.append([])\n    lst.append([])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    while s!= t:\n        c = s[k - 1]\n        s = s[:k - 1] + s[k:]\n        for i in lst:\n            if c not in i:\n                if i:\n                    if s[i[0]] == c or s[i[1]] == c:\n                        s = s[:i[0]] + s[i[0] + 1:]\n                        t = t[:i[0]] + t[i[0] + 1:]\n                        break\n                else:\n                    s = s[:k - 1] + s[k:]\n                    break\n    return ''.join(list(s))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s, t = s.strip(), t.strip()\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = abs(ord(s[i]) - ord(s[j]))\n\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i, n - 1):\n            dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n            dp[j][i] = min(dp[i][j], dp[j + 1][i] + 1)\n    for i in range(n - 1):\n        for j in range(i, n - 1):\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n            dp[j][i] = min(dp[i][j], dp[j][i - 1] + 1)\n    for i in range(n - 1):\n        for j in range(i, n - 1):\n            if dp[i][j] <= 10:\n                ans = max(ans, j - i)\n\n    if ans == 0:\n        return \"0\"\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if len(s)!= len(t):\n        return -1\n    res = 0\n\n    for i in range(1, n + 1):\n        s1 = s[:i]\n        s2 = s[i:]\n        t1 = t[:i]\n        t2 = t[i:]\n        s1 = s1.swapcase()\n        t1 = t1.swapcase()\n        if s1 == t1:\n            res = i\n            break\n        elif s2 == t2:\n            res = i\n            break\n    if res == 0:\n        return '0'\n    else:\n        return str(res)\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def swap(a, b):\n        a_idx = a.index(1)\n        b_idx = b.index(1)\n        a[a_idx], b[b_idx] = b[b_idx], a[a_idx]\n    s, t = stdin.split('\\n')\n    n = len(s)\n    for i in range(n):\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n        swap(s, t)\n    if s == t:\n        return '0'\n    else:\n        return '%d' % (n - 1)\n\nsolution('%s\\n%s' % (n, s))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s, j):\n        a, b = s[j - 1], s[j]\n        s[j - 1], s[j] = b, a\n        return s\n\n    n = int(stdin.split()[0])\n    s, t = stdin.split()[1:3]\n    m = int(stdin.split()[3])\n\n    if n < 2 or m > 10 ** 4:\n        return '-1'\n\n    for i in range(2, m):\n        s = swap(s, i)\n\n    if s == t:\n        return '0'\n\n    if m == 10 ** 4:\n        return '-1'\n\n    cnt = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            cnt += 1\n            s = swap(s, i + 1)\n\n    return str(cnt)\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.split('\\n')\n    s = list(s)\n    i = 0\n    ans = []\n    for i in range(len(s)):\n        for j in range(i):\n            if s[i] in s[j] or s[i][::-1] in s[j]:\n                ans.append('PS')\n                break\n            if s[j] in s[i]:\n                ans.append('SPS')\n                break\n            if s[i][::-1] in s[j]:\n                ans.append('SP')\n                break\n        else:\n            ans.append('P')\n    return ''.join(ans)\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prefixes = stdin.split('\\n')[:n-2]\n    suffixes = stdin.split('\\n')[n-2:]\n\n    best_possibilities = 0\n    for prefix in prefixes:\n        if prefix[1:] == prefix[:-1]:\n            best_possibilities += 1\n\n    best_possibilities += max(0, (n-2) - len(prefixes[0]))\n    best_possibilities += max(0, (n-2) - len(prefixes[-1]))\n\n    for suffix in suffixes:\n        if suffix[:-1] == suffix[1:]:\n            best_possibilities += 1\n\n    return 'PPSP' if best_possibilities > 0 else 'PPSPS'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prefixes = [stdin[i:i+n] for i in range(n)]\n    suffixes = [stdin[i-n+1:i+1] for i in range(n)]\n    for i, prefix in enumerate(prefixes):\n        for j, suffix in enumerate(suffixes):\n            if prefix == suffix and prefixes.count(prefix) == suffixes.count(suffix):\n                return f'P{prefix}'\n    return f'S{suffixes[0]}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  string = stdin.split()[1]\n  prefix = []\n  suffix = []\n  for i in range(n):\n    prefix.append(string[:i+1])\n    suffix.append(string[i+1:])\n  prefix.sort()\n  suffix.sort()\n  p_dict = {}\n  s_dict = {}\n  for p in prefix:\n    if p not in p_dict:\n      p_dict[p] = 1\n    else:\n      p_dict[p] += 1\n  for s in suffix:\n    if s not in s_dict:\n      s_dict[s] = 1\n    else:\n      s_dict[s] += 1\n  for key in p_dict:\n    if p_dict[key]!= s_dict[key]:\n      return 'P'\n  return 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes = stdin.splitlines()[1:n+1]\n    suffixes = stdin.splitlines()[n+2:]\n    result = ''\n    for prefix in prefixes:\n        for suffix in suffixes:\n            if prefix == suffix[len(prefix):]:\n                result += prefix\n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    s = stdin[:n]\n    ans = \"\"\n    n -= 1\n    s = s[::-1]\n    for i in range(1, n + 1):\n        if s[:i] == s[i - 1: i + 1]:\n            ans += \"P\"\n        else:\n            ans += \"S\"\n    return ans[::-1]\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    prefixes = []\n    suffixes = []\n    for i in range(0, len(strings)):\n        if i % 2 == 0:\n            prefixes.append(strings[i])\n        else:\n            suffixes.append(strings[i])\n    prefixes = sorted(prefixes, key=lambda s: len(s))\n    suffixes = sorted(suffixes, key=lambda s: len(s))\n    prefixes = sorted(prefixes, key=lambda s: s.find(\"a\"))\n    suffixes = sorted(suffixes, key=lambda s: s.rfind(\"a\"))\n    prefixes = sorted(prefixes, key=lambda s: s.find(\"a\"))\n    suffixes = sorted(suffixes, key=lambda s: s.rfind(\"a\"))\n    # print(prefixes)\n    # print(suffixes)\n    prefixes = \"\".join(prefixes)\n    suffixes = \"\".join(suffixes)\n    # print(prefixes)\n    # print(suffixes)\n    return prefixes + suffixes\n\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    prefixes = []\n    suffixes = []\n    for string in strings:\n        prefixes.append(''.join([char for char in string[0:-1]]))\n        suffixes.append(''.join([char for char in string[1:]]))\n    for prefix in prefixes:\n        for suffix in suffixes:\n            if prefix == suffix:\n                return prefix\n    return ''.join(['P', 'S'][prefixes.index(strings[0])] for prefix in prefixes)\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '5'\n    stdin = '3'\n    stdin = '2'\n    '''\n    s = stdin\n    ls = len(s)\n    #print(ls)\n    x = 2*ls-2\n    #print(x)\n    d = {}\n    #print(d)\n    for i in range(ls-1):\n        print(i)\n        p = s[:i+1]\n        print(p)\n        s1 = s[i+1:]\n        print(s1)\n        d[p] = s1\n        print(d)\n        #s = s.replace(s[:i+1],'SP')\n        #print(s)\n    #print(d)\n    s = stdin\n    s = s[1:-1]\n    print(s)\n    print(d)\n    print(s.count('S'))\n    print(s.count('P'))\n    print(2*s.count('P') == s.count('S'))\n    if s.count('S')!= 2*s.count('P'):\n        return ''\n    else:\n        return 'P' if s.count('S') == 2*s.count('P') else 'P'\n\n\nsolution('5')\nsolution('3')\nsolution('2')\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    prefixes = []\n    suffixes = []\n    for i in range(n):\n        prefixes.append(stdin.strip().split()[i])\n        suffixes.append(stdin.strip().split()[n-1-i])\n    prefixes = set(prefixes)\n    suffixes = set(suffixes)\n    prefixes = {p for p in prefixes if (p == prefixes)}\n    suffixes = {s for s in suffixes if (s == suffixes)}\n    prefixes = sorted(list(prefixes))\n    suffixes = sorted(list(suffixes))\n    print(''.join(prefixes[::-1] + suffixes))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(a[1] % 3)"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n\nsolution(\n    \"2 4 6 8 10\"\n)\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([str(int(y) + 1) for y in stdin.split()])"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    return str(int(sorted(nums)[0]) - 1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    print(min(a))\n    return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    result = []\n    for i in a:\n        if float(i) % 2 == 0:\n            result.append(1)\n        else:\n            result.append(0)\n    return \" \".join(result)\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = len(stdin)\n    nums = stdin.split(' ')\n    for i in range(n):\n        nums[i] = int(nums[i])\n    nums.sort(reverse=True)\n    for i in range(n):\n        nums[i] = str(nums[i])\n    return''.join(nums)\nprint(solution(input()))"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Your code here\n    #\n    # Return your answer\n    return '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(0, n - 1):\n        if a[i] == 0 and a[i + 1] == 1:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    arr = list(map(int, stdin.pop(0).split(\" \")))\n    k = 1\n    for i in range(n):\n        if k < n and arr[i-1] == arr[i]:\n            k += 1\n        else:\n            break\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    a = list(map(int, inputs[1]))\n    pairs = 0\n    for i in range(n):\n        if i + 1 < n:\n            if a[i] == a[i + 1]:\n                pairs += 1\n    return str(pairs)"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # the number of pairs of adjacent flats\n    pairs = 0\n    for i in range(1, n):\n        if a[i - 1] == a[i]:\n            pairs += 1\n    return str(pairs)"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = list(map(int, stdin.split()))\n    i = 0\n    k = 1\n    while True:\n        if lights[i]!= 0:\n            if lights[i - 1] == lights[i + 1]:\n                if i == 0:\n                    i += 2\n                else:\n                    i -= 2\n        else:\n            if i == 0:\n                lights[i] = 1\n                i += 1\n            elif i == n - 1:\n                lights[i] = 1\n                i -= 1\n            else:\n                lights[i] = 1\n                lights[i - 1] = 1\n                lights[i + 1] = 1\n                i += 2\n        if lights.count(0) == k:\n            break\n        k += 1\n    return str(k - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(\n        (i - j) // 2 if a[i - 1] == a[j] and i!= j else 0\n        for i, j in zip(range(1, n), range(1, n))\n        )\n    )\n\nstdin = \"3\"\nprint(solution(stdin))"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    flats = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    count = 0\n    if flats[0] == 1:\n        count += 1\n        for i in range(1, n):\n            if flats[i] == 1 and flats[i - 1] == 0:\n                count += 1\n            if flats[i] == 0 and flats[i - 1] == 1:\n                count += 1\n    else:\n        count += 1\n        for i in range(1, n):\n            if flats[i] == 1 and flats[i - 1] == 1:\n                count += 1\n            if flats[i] == 0 and flats[i - 1] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split('\\n')[0])\n  a = stdin.split('\\n')[1:]\n  a = [int(i) for i in a]\n  k = 1\n  while (1):\n    if (all(x == 0 and (y == 1 and z == 1) for (x, y, z) in zip(a, a[1:], a[:-1]))):\n      break\n    else:\n      if (all(x == 0 for x in a)):\n        break\n      else:\n        if (sum(x == 1 for x in a) % 2 == 0):\n          if (a[0] == 1):\n            a[0] = 0\n          else:\n            a[0] = 1\n        else:\n          if (a[-1] == 1):\n            a[-1] = 0\n          else:\n            a[-1] = 1\n        k += 1\n  return str(k)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # return str(len([x for x in range(1, max(stdin) + 1) if all(map(lambda y: x % y == 0, stdin))]))\n    return str(len([x for x in range(1, max(map(int, stdin.split())) + 1) if all(map(lambda y: x % y == 0, map(int, stdin.split()))) and all(map(lambda y: x % y == 0, map(int, stdin.split())))]))"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in a:\n        count += 1\n        for j in a:\n            if i % j == 0:\n                count -= 1\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    return str(sum(1 for i in a if all(a % x == 0 for x in range(1, int(math.sqrt(i)) + 1))))"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    from math import gcd\n    ans = 0\n    for i in range(1,len(a)):\n        ans += int(gcd(a[i],gcd(a[i],a[0])))\n    return str(ans)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    div = 0\n    for i in a:\n        if i == 1:\n            div += 1\n        else:\n            div = 1\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    div += 1\n            if i % j == 0:\n                div += 1\n    return div\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = sorted(map(int, stdin.split()))\n    print(divisors(m))\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # N = int(input())\n    # nums = list(map(int, input().split()))\n    nums = list(map(int, stdin.split()))\n    return str(len(set(nums)))\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    cnt = 0\n    for i in range(1, stdin[0] + 1):\n        for j in range(i, stdin[0] + 1, i):\n            if j % i == 0:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    arr = list(map(int, a[1:]))\n    div = 0\n    for i in arr:\n        if i <= 0:\n            continue\n        else:\n            for j in range(1, i):\n                if i % j == 0:\n                    div += 1\n    return str(div)\n    \n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    divs = []\n    count = 0\n    for i in range(len(a)):\n        divs.append(a[i])\n        for div in range(len(divs)):\n            if divs[div] % a[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    if n == 1:\n        return \"1\"\n    coins = a[1:]\n    ans = 10000000000\n    for i in range(1,n):\n        for j in range(i+1,n):\n            d = 0\n            for k in range(i):\n                d += abs(coins[k]-coins[i])\n            for k in range(j):\n                d += abs(coins[k]-coins[j])\n            ans = min(ans,d)\n    return str(ans)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    coins = list(map(int, input().split()))\n\n    min_coins = 0\n    # find min number of coins to hold the n coins\n    for i in range(n):\n        min_coins += min(coins)\n        coins.remove(min(coins))\n    return str(min_coins)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    d = {}\n    min_count = float('inf')\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for k, v in d.items():\n        if min_count > v:\n            min_count = v\n    return min_count\n\n\nsolution(input())\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    x = 0\n    prev = 0\n    count = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            x += 1\n        else:\n            if prev!= x:\n                x = 1\n            else:\n                count += 1\n            prev = x\n    print(min(count, x))\n    return x\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    # a = [int(x) for x in a]\n    # print(a)\n    # a = sorted(a)\n    a.sort()\n    # print(a)\n    ans = 0\n    p1 = p2 = 0\n    while p1 < n and p2 < n:\n        if a[p1] == a[p2]:\n            p1 += 1\n            p2 += 1\n        else:\n            ans += 1\n            p1 += 1\n            p2 += 1\n    return str(ans)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1:]\n    n = int(stdin.pop(0))\n    a = stdin.pop(0).split()\n    a = [int(x) for x in a]\n    a.sort()\n    used_pockets = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            used_pockets += 1\n    print(used_pockets)\n    return used_pockets\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = list(map(int, stdin.split()))\n    s = sum(coins)\n    k = s // 2\n    count = 1\n    j = 0\n    for i in range(len(coins)):\n        if coins[i] > k:\n            j += 1\n            coins.remove(coins[i])\n            continue\n        k -= coins[i]\n        count += 1\n    return str(count) +'' + str(j)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    dp = [1] + [0] * n\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1], dp[i - 2]) + 1\n\n        if a[i] == a[i - 1]:\n            dp[i] = min(dp[i], dp[i - 2])\n    return str(dp[n - 1])"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = [int(i) for i in arr]\n    arr = sorted(arr)\n    cnt = 1\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            cnt += 1\n        else:\n            cnt = 1\n    print(cnt)\n\nsolution(input())\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    coins = sorted(map(int, stdin.strip().split(' ')))\n    return solution_optimized(n, coins)\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    house = list(map(int, stdin.split()))\n    #print(house)\n    # print(len(house))\n    def _count_house(n, M, house):\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        #print(n)\n        return _count_house(n - 1, M, house) + _count_house(n - M, M, house)\n    #print(n, M)\n    #print(_count_house(N, M, house))\n    return str(_count_house(N, M, house))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    if len(a) == 0:\n        return -1\n    if n == 1:\n        return 1 if a[0] == 1 else -1\n    if a[0] == 0:\n        return -1\n    for i in range(1, n):\n        if a[i] == 1:\n            count += 1\n        else:\n            count = 0\n        if count >= r:\n            return i\n    return -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(i) for i in stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    min_heaters = n\n    for i in range(1, n+1):\n        if arr[i-1] == 0:\n            continue\n        for j in range(i-r, i+r):\n            if j >= 0 and j < n:\n                if arr[j] == 0:\n                    min_heaters = min(min_heaters, 1)\n    if min_heaters == n:\n        return -1\n    return min_heaters\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    # print(n, r, a)\n\n    if n == 1:\n        return '-1'\n\n    if r == 1:\n        return str(n - 1)\n\n    def get_nearest_lesser_index(a):\n        min_index = n - 1\n        for i in range(n - 1, 0, -1):\n            if a[i - 1] == 0:\n                min_index = i\n                break\n        return min_index\n\n    # print(get_nearest_lesser_index(a))\n\n    res = 0\n    while True:\n        res = get_nearest_lesser_index(a)\n        # print(res)\n        if res == 0:\n            return str(res)\n        else:\n            a[res] = 1\n            for i in range(1, r + 1):\n                a[res - i] = 1\n                res = res - i\n                if res < 0:\n                    return str(res)\n                if res == 0:\n                    return str(res)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n    res = float('inf')\n    for i in range(M):\n        if L[i] == 1:\n            for j in range(i+1, min(N, i+1+M-i)):\n                res = min(res, j)\n        elif L[i] == 0:\n            for j in range(i+1, max(N, i+1+M-i)):\n                res = min(res, j)\n    return str(res)"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here'''\n    def convert_to_int(string):\n        return int(string, 2)\n    data = stdin.splitlines()\n    data = list(map(convert_to_int, data))\n    data = data[:-1]\n    return data\n\nprint(solution('''\n4 2\n0 1 1 0 0\n\n'''))\n\nprint(solution('''\n6 3\n0 0 1 1 0 1\n\n'''))\n\nprint(solution('''\n5 10\n0 0 1 1 0 1 0 0 0 1\n\n'''))\n\nprint(solution('''\n5 3\n1 0 0 0 1\n\n'''))\n\nprint(solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n\n'''))\n\nprint(solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n\n'''))"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    # arr = [0] * N\n    #\n    # for i in range(0, N):\n    #     arr[i] = 0\n    #\n    # for i in range(0, N):\n    #     if arr[i] == 0:\n    #         arr[i] = 1\n    #         break\n\n    switches = 0\n    pos = 0\n    while switches < N:\n        if arr[pos] == 0:\n            switches += 1\n            arr[pos] = 1\n        pos = (pos + R) % N\n    res = switches\n    return str(res)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r, a = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    h.sort()\n    l, r = 0, n-1\n    res = -1\n    while l <= r:\n        mid = (l+r) // 2\n        # print(l, r, mid)\n        if h[mid] == 0:\n            res = mid\n            l = mid+1\n        elif h[mid] == 1:\n            r = mid - 1\n        else:\n            r = mid-1\n    return res"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, r] = [int(n) for n in stdin.split()]\n    a = stdin.split()\n    d = {i: 0 for i in range(1, n+1)}\n    for i in range(0, n):\n        if int(a[i]) == 1:\n            d[i + 1] += 1\n    ans = -1\n    for i in range(1, n+1):\n        if i in d and d[i] <= r:\n            ans = i\n        else:\n            break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, r = stdin.split()\n    n, r = int(n), int(r)\n    array = stdin.split()\n    array = list(map(int, array))\n    min_heaters = min_heaters_solution(array, n, r)\n    if min_heaters == -1:\n        return \"impossible\"\n    return str(min_heaters)\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num: int = int(stdin)\n    ans: int = 0\n    \n    for i in range(1, num+1):\n        if num % i == 0:\n            for j in range(1, i):\n                if i % j == 0:\n                    ans += 1\n                    break\n    print(ans)\n    return \"\"\nsolution(input())"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(0)\n\n    answer = 0\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            k = n - i - j\n            if i * i + j * j == k * k:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    # Use input() to get input from stdin and use stdout to print out your result.\n    input_data = sys.stdin.read()\n    # print(input_data)\n    a, b, c = list(map(int, input_data.split(' ')))\n    total = 0\n    for i in range(a + 1):\n        for j in range(b + 1):\n            k = a * i + b * j\n            if k == c:\n                total += 1\n    print(total)\n    return total"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    result = 0\n    for i in range(1, 1000001):\n        j = i * 2\n        k = j * 2\n        if (i + j + k == int(stdin)) and (i % 2 == 0) and (j % 2 == 0) and (k % 2 == 0):\n            result += 1\n    print(result)\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = 1\n    B = 1\n    C = 2\n    ans = 0\n    while A + B + C <= N:\n        ans += 1\n        A += 1\n        B += 1\n        C += 1\n    return str(ans)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n\n    answer = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i*j + k == n:\n                    answer.append((i, j, k))\n    return len(answer)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def loop_one(num: int) -> int:\n        return int(num * (num + 1) / 2)\n\n    def loop_two(num: int) -> int:\n        return int(num * (num + 2) / 2)\n\n    def loop_three(num: int) -> int:\n        return int(num * (num + 3) / 2)\n\n    def loop_four(num: int) -> int:\n        return int(num * (num + 4) / 2)\n\n    a = stdin.split()\n    if len(a)!= 1:\n        print(f\"{loop_four(int(a[0]))}\")\n    elif len(a) == 1:\n        print(f\"{loop_one(int(a[0]))}\")\n\n    b = stdin.split()\n    if len(b)!= 1:\n        print(f\"{loop_two(int(b[0]))}\")\n    elif len(b) == 1:\n        print(f\"{loop_two(int(b[0]))}\")\n\n    c = stdin.split()\n    if len(c)!= 1:\n        print(f\"{loop_three(int(c[0]))}\")\n    elif len(c) == 1:\n        print(f\"{loop_three(int(c[0]))}\")\n\nsolution(input())\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tuple_count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a - b\n            if a * b + c == n:\n                tuple_count += 1\n    return tuple_count"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"{N*(N+1)/2}\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    open_brackets = 0\n    for bracket in s:\n        if bracket == '(':\n            open_brackets += 1\n        elif bracket == ')':\n            open_brackets -= 1\n        if open_brackets < 0:\n            break\n    if open_brackets == 0:\n        return '1'\n    elif open_brackets == 1:\n        return '2'\n    elif open_brackets == 2:\n        return '3'\n    else:\n        return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1].replace(\")(\", \")\").replace(\"(()\", \"()\")\n    if \"(\" not in s:\n        return \"0\"\n    n_arr = list(range(n))\n    n_len = 0\n    for i, c in enumerate(s):\n        if c == \"(\":\n            n_arr[i] = \"(\"\n            n_len += 1\n        else:\n            n_arr[i] = \")\"\n            n_len -= 1\n        if n_len < 0:\n            break\n    return str(i + 2)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    # generate all possible strings\n    # remove last letter\n    for i in range(n):\n        # remove ')'\n        if s[i] == '(':\n            for j in range(i, n):\n                if s[j] == ')':\n                    s = s[:i] + '(' + s[i + 1:]\n                    break\n        # remove '('\n        if s[i] == ')':\n            for j in range(i, n):\n                if s[j] == '(':\n                    s = s[:i] + ')' + s[i + 1:]\n                    break\n    print(s)\n    return s\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return str(1 + sum([1 if c == ')' else 0 for c in s]))\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    \n    count = 0\n    if (len(s) % 2 == 0):\n        for i in range(0, len(s), 2):\n            if (s[i] == ')' and s[i+1] == '('):\n                count += 2\n            elif (s[i] == ')' and s[i+1] == ')'):\n                count += 2\n            elif (s[i] == '(' and s[i+1] == '('):\n                count += 2\n            elif (s[i] == '(' and s[i+1] == ')'):\n                count += 2\n            else:\n                count = -1\n                break\n    else:\n        for i in range(0, len(s), 2):\n            if (s[i] == '(' and s[i+1] == ')'):\n                count += 2\n            elif (s[i] == ')' and s[i+1] == '('):\n                count += 2\n            elif (s[i] == ')' and s[i+1] == ')'):\n                count += 2\n            else:\n                count = -1\n                break\n    \n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    brackets = {')': '(', ']': '[', '}': '{'}\n    stack = []\n    for b in stdin[0]:\n        if b in '([{':\n            stack.append(b)\n        elif b in ')]}':\n            if stack:\n                if brackets[stack[-1]] == b:\n                    stack.pop()\n                else:\n                    return 'NO'\n            else:\n                return 'NO'\n    if len(stack) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    string = inp[1]\n    count = 0\n    for i in range(0, n):\n        if i == 0:\n            if string[i] == ')':\n                string = '(' + string\n        else:\n            if string[i] == '(':\n                string = string[:i] + ')' + string[i + 1:]\n    print(string)\n    return string\n\n\nsolution(input())\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = stdin.strip()\n    count = 0\n\n    # count all brackets in sequence, that have to be changed into regular brackets\n    for index in range(len(sequence)):\n        if sequence[index] == \"(\":\n            count += 1\n        else:\n            count -= 1\n\n        if count == 0:\n            break\n\n    # replace all \"(\" with \")\" and vice versa, if they are in a correct sequence\n    if count < 0:\n        sequence = sequence[::-1]\n        count = -count\n\n    # count all regular brackets in sequence\n    regular_brackets_count = 0\n    for index in range(len(sequence)):\n        if sequence[index] == \"(\":\n            regular_brackets_count += 1\n        else:\n            regular_brackets_count -= 1\n\n        if regular_brackets_count == 0:\n            break\n\n    if count!= 0:\n        return \"Impossible\"\n    return str(index)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while '()' in s:\n        s = s.replace('()', '')\n    return len(s)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runs code to see what happens if stdin is: '()(('\n    \"\"\"\n    return input()\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove the first and last characters\n    first_and_last_char = stdin[1:-1]\n\n    # Split the string on every space\n    split_string = first_and_last_char.split(\" \")\n\n    # Iterate over every substring\n    for i in range(len(split_string)):\n        # Find the length of substring\n        substring_length = len(split_string[i])\n\n        # Remove first and last characters\n        first_and_last_char_substring = split_string[i][1:-1]\n\n        # Find the length of substring in reversed order\n        substring_length_rev = len(first_and_last_char_substring)\n\n        # Remove substring from string\n        first_and_last_char_substring_not_in_string = stdin[0:len(stdin)-substring_length_rev]\n\n        # Compare strings\n        if first_and_last_char_substring_not_in_string == first_and_last_char_substring:\n            # If the substring is in the string, remove it\n            substring_to_remove = stdin[0:len(stdin)-substring_length_rev]\n            print(substring_to_remove)\n            # Get length of substring_to_remove\n            substring_length = len(substring_to_remove)\n            break\n    return substring_length\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    l = len(string)\n\n    def get_length(string):\n        if string == '':\n            return 0\n        i = 0\n        j = 1\n        while j < len(string):\n            if string[i] == string[j]:\n                j += 1\n            i += 1\n        return j - 1\n\n    def get_length_2(string):\n        if string == '':\n            return 0\n        i = 0\n        j = 1\n        while j < len(string):\n            if string[i] == string[j]:\n                j += 1\n            i += 1\n        return j\n\n    while get_length_2(string) > 0:\n        string = string[1:]\n\n    print(len(string))\n\n\nsolution(str(input()))"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.strip()\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"\\n\", \"\")\n    if not all(char.isalpha() for char in string):\n        return 0\n    return len(string) - len(find_longest_substring(string, min_str_len=1))\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin\n    \n    start = 0\n    end = 0\n    l = len(s)\n    t_length = len(t)\n    \n    for i in range(0, t_length):\n        start = s.find(t[i], start, l)\n        if start == -1:\n            break\n        end = start + 1\n        l = end\n    \n    return end - start\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds a prefix-tree from the input data and then\n    finds a maximum prefix that is still a subsequence of the\n    remaining input.\n    \"\"\"\n    # This is the prefix-tree that represents the letters of the input\n    prefix_tree = PrefixTree()\n\n    # Build the prefix tree\n    for letter in stdin:\n        prefix_tree.insert(letter)\n\n    # Find the maximum prefix that is still a subsequence of the input\n    result = prefix_tree.find_maximum_prefix(stdin)\n\n    # Return the maximum prefix length\n    return result\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s) < len(t):\n        s, t = t, s\n    return get_longest_substring_that_is_still_a_subsequence(s, t)\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    res = 0\n    for l in range(1, n):\n        for r in range(l, n):\n            sub = stdin[l:r + 1]\n            if all(c in sub for c in stdin[r + 1:]):\n                res = max(res, len(sub))\n    return res\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    a = 0\n    b = 0\n    while (a < len(s) and b < len(t)):\n        if (s[a] == t[b]):\n            a += 1\n            b += 1\n        else:\n            a += 1\n        if (a == len(s)):\n            break\n        if (s[a] == t[b]):\n            b += 1\n        else:\n            b = 0\n        if (b == len(t)):\n            break\n    return len(s) - a"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n\n    lst = []\n    for i in range(1, len(s)):\n        lst.append(s[i - 1:])\n        lst.append(s[i:])\n\n    for i in range(1, len(t)):\n        lst.append(t[i - 1:])\n        lst.append(t[i:])\n\n    lst.sort()\n\n    final = lst[0]\n\n    return len(final)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0:\n        return -1\n    if a <= b and c <= d:\n        return c*b\n    elif a <= c and b <= d:\n        return a*b\n    else:\n        return a*c\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(' ')))\n    return str(max(a * b, c * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    if a <= c and c <= d and b <= c and c <= d:\n        return str(max(a * b, c * d))\n    else:\n        return str(a * b)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(x*y for x, y in zip(map(int, stdin.split(\" \")), map(int, stdin.split(\" \")))))"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    if a <= d:\n        return str(d)\n    elif d <= a:\n        return str(a)\n    elif b <= d:\n        return str(d)\n    elif c <= d:\n        return str(a)\n    else:\n        return str(max(a,b)*max(c,d))\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _, x, y = stdin.split(' ')\n    return str(int(x) * int(y))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    n1 = int(nums[0])\n    n2 = int(nums[1])\n    n3 = int(nums[2])\n    n4 = int(nums[3])\n    if (n1 <= n2 and n3 <= n4):\n        return str(n1 * n2)\n    elif (n1 <= n3 and n2 <= n4):\n        return str(n1 * n3)\n    elif (n2 <= n1 and n3 <= n4):\n        return str(n2 * n4)\n    else:\n        return str(n3 * n4)"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(min(a, b), min(c, d)) * max(a, b, c, d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b and c > d:\n        return str(a*b)\n    if a > b and c < d:\n        return str(c*d)\n    if a < b and c < d:\n        return str(a*d)\n    if a < b and c > d:\n        return str(b*c)"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    problems = sorted([int(x) for x in stdin.split()[1:]])\n    # We define K to be an even number\n    k: int = 2\n    # We are using the idea of using the number of problems for ARCs and ABCs the same\n    count: int = 0\n    # While we don't have enough problems for ARCs and ABCs\n    while True:\n        # We see if the difference in problems for ARCs and ABCs is greater than K\n        difference: int = abs(len(problems) - len(set(problems)))\n        # If there is not enough problems for ARCs and ABCs, we break\n        if difference > k:\n            break\n        # We sort the problems, and see which ones are going to be for ARCs\n        problems.sort()\n        # We make a new list of only the problems that are going to be for ABCs\n        abc = []\n        # We go through the problems and make a list of those that are going to be for ABCs\n        for i in range(n):\n            if problems[i] % 2 == 0:\n                abc.append(problems[i])\n        # We go through the problems and make a list of those that are going to be for ARCs\n        arc = []\n        # We go through the problems and make a list of those that are going to be for ARCs\n        for i in range(n):\n            if problems[i] % 2!= 0:\n                arc.append(problems[i])\n        # We look at the length of the list of problems for ABCs and ARCs and print if the lengths are the same\n        if len(abc) == len(arc):\n            count += 1\n        # If we did not print enough answers, we increment the value of k and start the process again\n        else:\n            k += 1\n    # We print the amount of solutions\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_problems_for_arcs = 0\n    number_of_problems_for_abc = 0\n    number_of_choices_for_arcs = 0\n    number_of_choices_for_abc = 0\n    n = int(stdin)\n    difficulty_of_problems_for_arcs = map(int, stdin.split())\n    difficulty_of_problems_for_abc = map(int, stdin.split())\n    for i in range(n):\n        if i % 2 == 1:\n            number_of_problems_for_abc += 1\n        else:\n            number_of_problems_for_arcs += 1\n    for i in range(n):\n        if i % 2 == 0:\n            number_of_choices_for_abc += 1\n        else:\n            number_of_choices_for_arcs += 1\n    if number_of_choices_for_arcs == number_of_problems_for_abc:\n        return str(number_of_choices_for_arcs)\n    else:\n        return str(number_of_choices_for_abc)\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d_dict = {}\n    for i in range(1, n + 1):\n        d = int(stdin.split()[i - 1])\n        if d in d_dict:\n            d_dict[d] += 1\n        else:\n            d_dict[d] = 1\n    key = sorted(d_dict.keys())\n    k_arr = key[1:-1]\n    for k in k_arr:\n        if d_dict[k]!= d_dict[k + 1] and d_dict[k]!= d_dict[k - 1]:\n            return str(d_dict[k] * 2)\n    return \"0\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.strip().split()))\n    d.sort(reverse=True)\n    arcs = 0\n    abc = 0\n    for i in range(1, n, 2):\n        if d[i] > d[i - 1]:\n            arcs += 1\n        else:\n            abc += 1\n    print(arcs, abc)\n    return str(arcs) + \" \" + str(abc)"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    len_n = len(arr)\n\n    def get_divisor(divisor: int) -> int:\n        return divisor, divisor * 2\n    def get_num_for_divisor(divisor: int, n: int) -> int:\n        divisor, divisor *= 2\n        while divisor <= n:\n            divisor_dict[divisor] += 1\n            divisor, divisor *= 2\n    divisor_dict = {}\n    num_for_divisor = 0\n\n    for i in range(len_n):\n        divisor = arr[i]\n        get_num_for_divisor(divisor, n)\n\n    return str(divisor_dict[1] + divisor_dict[2] - num_for_divisor)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = sorted(map(int, stdin.split()))\n    k = 2\n    answer = 0\n    while k < n:\n        if d[k] == d[k-1]:\n            k += 1\n            continue\n        else:\n            k += 1\n        answer += 1\n    return answer\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string of N integers, and returns an integer.\n    \"\"\"\n    N = int(stdin)\n    d = list(map(int, stdin.split()))\n    d.sort()\n    k = 0\n    even = True\n    for i in range(1, N+1):\n        if d[i-1] == 1:\n            k += 1\n        else:\n            k -= 1\n        if k % 2!= 0:\n            even = False\n            break\n    if even:\n        print(k)\n        return k\n    print(k+1)\n    return k+1\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    d_1: int = int(stdin.split()[1])\n    d_2: int = int(stdin.split()[2])\n    d_3: int = int(stdin.split()[3])\n    d_4: int = int(stdin.split()[4])\n    d_5: int = int(stdin.split()[5])\n    d_6: int = int(stdin.split()[6])\n    d_7: int = int(stdin.split()[7])\n\n    k_1: int = d_1 - d_2\n    k_2: int = d_1 - d_3\n    k_3: int = d_1 - d_4\n    k_4: int = d_1 - d_5\n    k_5: int = d_1 - d_6\n    k_6: int = d_1 - d_7\n\n    c_1: int = d_1 + k_2 + k_3 + k_4 + k_5 + k_6\n    c_2: int = k_1 + k_2 + k_3 + k_4 + k_5 + k_6\n\n    print(c_1)\n    print(c_2)\n\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(**parse(stdin)))\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_time(a: int) -> bool:\n        return a >= l and a <= r\n\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    def count_good_times(good_times: List[int]) -> int:\n        cnt = 0\n        good_times = sorted(good_times)\n        i = 0\n        while i < len(good_times):\n            if is_good_time(good_times[i]):\n                i += 1\n            else:\n                cnt += 1\n                i += 2\n        return cnt\n\n    return str(count_good_times(a))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_val(n, l, r, a, c):\n        return c if n >= c else a if n >= a else l\n    \n    def get_max(n, l, r, a, c, curr_max):\n        cnt = 0\n        while n >= get_val(n, l, r, a, c):\n            n -= get_val(n, l, r, a, c)\n            cnt += 1\n        curr_max[0] = max(curr_max[0], cnt)\n        return curr_max\n    \n    n, h, l, r, *a = map(int, stdin.split())\n    curr_max = [0]\n    curr_max = get_max(n, l, r, a[0], a[1], curr_max)\n    return curr_max[0]\n\nsolution(\"\"\"7 24 21 23\n16 17 14 20 20 11 22\"\"\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    times = 0\n    while n > 0:\n        start = 0 if n == 1 else l\n        start += 1 if n % 2 == 0 else 0\n        # print(start)\n        if start > h:\n            break\n        n -= 1\n        if n == 0:\n            times += 1\n            n = r\n            start = 0 if n == 1 else l\n            start += 1 if n % 2 == 0 else 0\n    return times\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = list(map(int, stdin.split()))\n    times = []\n    for i in range(1, n+1):\n        times.append(i)\n    print(times)\n\n    a = list(map(int, stdin.split()))\n    times.sort(key=lambda x: x-a[x-1])\n    print(times)\n\n    res = 0\n    for i in range(n):\n        if times[i] - times[i - 1] == r:\n            res += 1\n        elif times[i] - times[i - 1] == l:\n            res += 1\n    return str(res)\n\nprint(solution(\"3 9 22 11\"))"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    times = [(i, j) for i, j in enumerate(map(int, stdin.split())) if j > 0]\n    return max(times, key=lambda t: (t[1] - t[0], t[1] - t[0] + max(t[0] - l, t[0] - r) + 1))[1]\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    print(n, h, l, r)\n    def good(time):\n        print(time, l, r)\n        if l <= time < r:\n            return True\n        else:\n            return False\n    print(good(2))\n    print(good(4))\n    print(good(5))\n    print(good(7))\n    print(good(9))\n    print(good(11))\n    print(good(15))\n    print(good(17))\n    print(good(19))\n    print(good(21))\n    print(good(25))\n    print(good(27))\n    print(good(29))\n    print(good(31))\n    print(good(33))\n    print(good(35))\n    print(good(37))\n    print(good(39))\n    print(good(41))\n    print(good(43))\n    print(good(45))\n    print(good(47))\n    print(good(49))\n    print(good(51))\n    print(good(53))\n    print(good(55))\n    print(good(57))\n    print(good(59))\n    print(good(61))\n    print(good(63))\n    print(good(65))\n    print(good(67))\n    print(good(69))\n    print(good(71))\n    print(good(73))\n    print(good(75))\n    print(good(77))\n    print(good(79))\n    print(good(81))\n    print(good(83))\n    print(good(85))\n    print(good(87))\n    print(good(89))\n    print(good(91))\n    print(good(93))\n    print(good(95))\n    print(good(97))\n    print(good(99))\n    print(good(101))\n    print(good(103))\n    print(good(105))\n    print(good(107))\n    print(good(109))\n    print(good(111))\n    print(good(113))\n    print(good(115))\n    print(good(117))\n    print(good(119))\n    print(good(121))\n    print(good(123))\n    print(good(125))\n    print(good(127))\n    print(good(129))\n    print(good(131))\n    print(good(133))\n    print(good(135))\n    print(good(137))\n    print(good(139))\n    print(good(141))\n    print(good(143))\n    print(good(145))\n    print(good(147))\n    print(good(149))\n    print(good(151))\n    print(good(153))\n    print(good(155))\n    print(good(157))\n    print(good(159))\n    print(good(161))\n    print(good(163))\n    print(good(165))\n    print(good(167))\n    print(good(169))\n    print(good(171))\n    print(good(173))\n    print(good(175))\n    print(good(177))\n    print(good(179))\n    print(good(181))\n    print(good(183))\n    print(good(185))\n    print(good(187))\n    print(good(189))\n    print(good(191))\n    print(good(193))\n    print(good(195))\n    print(good(197))\n    print(good(199))\n    print(good(201))\n    print(good(203))\n    print(good(205))\n    print(good(207))\n    print(good(209))\n    print(good(211))\n    print(good(213))\n    print(good(215))\n    print(good(217))\n    print(good(219))\n    print(good(221))\n    print(good(223))\n    print(good(225))\n    print(good(227))\n    print(good(229))\n    print(good(231))\n    print(good(233))\n    print(good(235))\n    print(good(237))\n    print(good(239))\n    print(good(241))\n    print(good(243))\n    print(good(245))\n    print(good(247))\n    print(good(249))\n    print(good(251))\n    print(good(253))\n    print(good(255))\n    print(good(257))\n    print(good(259))\n    print(good(261))\n    print(good(263))\n    print(good(265))\n    print(good(267))\n    print(good(269))\n    print(good(271))\n    print(good(273))\n    print(good(275))\n    print(good(277))\n    print(good(279))\n    print(good(281))\n    print(good(283))\n    print(good(285))\n    print(good(287))\n    print(good(289))\n    print(good(291))\n    print(good(293))\n    print(good(295))\n    print(good(297))\n    print(good(299))\n    print(good(301))\n    print(good(303))\n    print(good(305))\n    print(good(307))\n    print(good(309))\n    print(good(311))\n    print(good(313))\n    print(good(315))\n    print(good(317))\n    print(good(319))\n    print(good(321))\n    print(good(323))\n    print(good(325))\n    print(good(327))\n    print(good(329))\n    print(good(331))\n    print(good(333))"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    times = sorted(list(map(int, stdin.split())), reverse=True)\n    good_times = 0\n    for i in range(n):\n        if times[i] - times[i - 1] >= l:\n            good_times += 1\n        else:\n            break\n    max_good_times = good_times\n    for i in range(n - 1):\n        if times[i] - times[i + 1] >= r:\n            good_times += 1\n        else:\n            break\n    max_good_times = max(max_good_times, good_times)\n    print(max_good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, l, h, *segments = map(int, stdin.split())\n    max_good_times = 0\n    for i in range(h):\n        s = 0\n        good_times = 0\n        for segment in segments:\n            if i+segment <= h:\n                s += segment\n                good_times += 1\n            else:\n                break\n        if s == i:\n            if good_times > max_good_times:\n                max_good_times = good_times\n    return max_good_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = (int(x) for x in stdin.split())\n    a = sorted(int(x) for x in stdin.split())\n\n    max_good = 0\n    good = 0\n    while good < len(a):\n        good += 1\n        if good >= a[good - 1] and good >= a[good]:\n            max_good = max(max_good, good)\n        else:\n            good -= 1\n    print(max_good)\n    return max_good\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, times, hours, l, r = stdin.split()\n    times = list(map(int, times.split()))\n    hours = list(map(int, hours.split()))\n    n = int(n)\n    hours = list(range(int(hours[0]), int(hours[1]) + 1))\n    ans = 0\n    for i in range(1, n):\n        for j in range(i):\n            if (hours[j] + times[j] - hours[i]) >= l and (hours[j] + times[j] - hours[i]) <= r:\n                ans = max(ans, 1 + times[j] + times[i])\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    max_cnt = 0\n    for i in range(stdin[0]):\n        cnt = 1\n        for j in range(i + 1, stdin[0]):\n            if stdin[j] > stdin[i] * 2:\n                cnt += 1\n            else:\n                break\n        if cnt > max_cnt:\n            max_cnt = cnt\n    return str(max_cnt)\n\nsolution(\"10\\n1 2 5 6 7 10 21 23 24 49\")\nsolution(\"5\\n2 10 50 110 250\")\nsolution(\"6\\n4 7 12 100 150 199\")\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return (max(list(map(lambda x: int(x.split(\" \")[0]), stdin.split(\"\\n\"))) + [1]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    p = a.copy()\n    res = 0\n    for i in range(1, n):\n        if p[i - 1] < p[i]:\n            if p[i] >= p[i - 1] * 2:\n                res += 1\n                p = p[:i - 1] + p[i:]\n    return str(res)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = []\n\n    for i in range(1, n + 1):\n        dp.append(0)\n\n    for i in range(1, n + 1):\n        a = int(stdin.split()[i - 1])\n        for j in range(1, n + 1):\n            if j > i:\n                break\n\n            dp[i] = max(dp[i], dp[j] + j * a)\n\n    return str(max(dp))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    count = 1\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i]*2 > a[j] and a[i] <= a[j]*2:\n                count += 1\n    print(count)\n    return count"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns:\n        str: The maximum number of problems in the contest.\n    '''\n    problemset = stdin.split()\n    problemset = set(map(int, problemset))\n    n = int(problemset.pop())\n    # \ucd5c\ub300 \uadf8\ub8f9\uc758 \ud06c\uae30\uac00 2 \uc774\uc0c1\uc778 \uac83\uc740 \ud655\uc778\ud558\uc9c0 \uc54a\ub294\ub2e4\n    while len(problemset) > 2:\n        # \uac01\uac01\uc758 \uadf8\ub8f9\uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc758 \uac12\uacfc \uadf8\ub8f9\uc548\uc758 \ub098\uba38\uc9c0 \uc6d0\uc18c\uc758 \ucd5c\ub300 \uacf1\uc148\uc744 \ud558\uace0 \uadf8\ub8f9\uc548\uc758 \uc6d0\uc18c\ub97c \uc9c0\uc6b4\ub2e4.\n        problemset = set(map(lambda x: x * 2, list(problemset)[:-1]))\n    return str(len(problemset))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    problemset = sorted(map(int, stdin.split()))\n    print(problemset)\n    print(len(problemset))\n    return str(len(problemset) - max(2, max(problemset) * 2))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return str(max(i for i in range(n) if arr[i] > 2 * arr[i + 1]))\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1]))\n    count = 1\n    maxcount = 0\n    maxm = max(b)\n    maxx = max(b)\n    for i in range(1, n):\n        if b[i]*2 > maxx:\n            maxx = b[i]*2\n            maxcount = count\n        if maxx*2 == maxx:\n            maxcount += 1\n        elif maxx*2 > maxx:\n            maxcount = count\n        count += 1\n    return str(maxcount)"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return len(max(set(map(lambda x: int(x) * 2, map(int, stdin.split()))) if max(set(map(lambda x: int(x), stdin.split()))) % 2 else max(map(lambda x: int(x), stdin.split())) + 1, key=int))\n\nsolution(input())\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    ans = []\n    for i in range(1, n):\n        for j in range(i):\n            if lcm(a[i], a[j]) < a[i] * a[j]:\n                ans.append(a.index(a[i]))\n                ans.append(a.index(a[j]))\n                return ans\n    return ans\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(int, a))\n    a.sort()\n    m = a[0]\n    n = len(a)\n    for i in range(1, n):\n        m = lcm(m, a[i])\n    return str(a[0] - m) + \" \" + str(a[-1] - m)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    arr = map(int, arr)\n    arr.sort()\n    print(arr)\n    length = len(arr)\n    i = 0\n    j = length - 1\n    while(i < j):\n        # print(arr[i], arr[j])\n        if(arr[i] + arr[j] == min(arr[i], arr[j])):\n            i += 1\n        elif(arr[i] + arr[j] > min(arr[i], arr[j])):\n            j -= 1\n        else:\n            return arr[i], arr[j]\n\n\nsolution('5\\n2 4 8 3 6')\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    l = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] % arr[j] == 0 and arr[i] // arr[j]!= 0:\n                l.append([i, j])\n    for i in range(len(l)):\n        if l[i] in d and d[l[i][1]] > i:\n            print(*l[i])\n            break\n        else:\n            print(l[i][0], l[i][1])\n    return \"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    min_divider = a[0]\n    index = 1\n    while index < n:\n        if a[index] % min_divider == 0:\n            return f'{index} {index+1}'\n        index += 1\n    return f'{index} {index+1}'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a%b)\n    lcm = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = max(lcm, gcd(a[i], a[j]))\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm == gcd(a[i], a[j]):\n                print(i+1, j+1)\n                return\n\nsolution(input())"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Your code here\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            res.append([i, j])\n    a = list(map(int, stdin.split()))\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % min(a[i], a[j]) == 0:\n                ans.append([i, j])\n    if ans == [] and res == []:\n        return \"0 0\"\n    return str(min(res)) + \" \" + str(min(ans))\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if lcm(a[i],a[j]) < s:\n                s = lcm(a[i],a[j])\n                i = i\n                j = j\n    return f\"{i} {j}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i] % a[j] == 0:\n                res = max(res, i, j)\n    print(res, res + 1)\n\nsolution(input())\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = a.strip().split()\n    a = list(map(int,a))\n    lcm = 1\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if j >= i:\n                lcm = lcm if lcm > a[i]*a[j] else a[i]*a[j]\n                if lcm == a[i]*a[j]:\n                    print(i,j)\n                    return ''\n    return ''\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while n % 3!= 0:\n        s = s.replace('0', '1')\n        s = s.replace('2', '0')\n        n += 1\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = '{:032b}'.format(s)\n    s = s.replace('0', '0', n - 1)\n    s = s.replace('1', '0', n - 1)\n    s = s.replace('2', '1', n - 1)\n    return s\n\nsolution(input())\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    for i in range(n):\n        if s[i] == \"0\":\n            c0 += 1\n        elif s[i] == \"1\":\n            c1 += 1\n        elif s[i] == \"2\":\n            c2 += 1\n    # print(c0, c1, c2)\n    if (c0, c1, c2) == (0, 0, 0):\n        return \"0\" * n\n    if (c0, c1, c2) == (1, 1, 0):\n        return \"1\" * n\n    if (c0, c1, c2) == (1, 0, 1):\n        return \"2\" * n\n    if (c0, c1, c2) == (0, 1, 1):\n        return \"0\" * (n - 1) + \"1\"\n    if (c0, c1, c2) == (1, 0, 2):\n        return \"1\" * (n - 1) + \"2\"\n    if (c0, c1, c2) == (2, 1, 0):\n        return \"2\" * (n - 1) + \"1\"\n    if (c0, c1, c2) == (0, 2, 1):\n        return \"0\" * (n - 1) + \"2\"\n    if (c0, c1, c2) == (2, 0, 2):\n        return \"2\" * (n - 1) + \"2\"\n    if (c0, c1, c2) == (1, 1, 1):\n        return \"1\" * (n - 1) + \"1\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n % 3!= 0:\n        return 'No solution'\n    d = {'0': 0, '1': 0, '2': 0}\n    i = 0\n    while i < n - 1:\n        if s[i] == '0':\n            d[s[i]] += 1\n        elif s[i] == '1':\n            d[s[i]] -= 1\n        else:\n            d[s[i]] += 1\n            d[s[i + 1]] -= 1\n        i += 1\n    print(min(d['0'], d['1'], d['2']))\n    return ''.join(sorted(d, key=lambda x: (d[x], x)))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    chars = stdin.split()\n    n = int(chars[0])\n\n    s = chars[1]\n    s = list(s)\n    print(s)\n    return \"\".join(min(s, key=s.count))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    return \"\".join(sorted(set([\"0\", \"1\", \"2\"]), key=sorted([\"0\", \"1\", \"2\"]).index)[:n])\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    new_s = \"\"\n    for char in s:\n        if char == \"0\":\n            count_0 += 1\n        elif char == \"1\":\n            count_1 += 1\n        elif char == \"2\":\n            count_2 += 1\n\n    # print(s, count_0, count_1, count_2)\n    while count_0 > 0 and count_1 > 0:\n        new_s += \"0\"\n        count_0 -= 1\n        count_1 -= 1\n    while count_1 > 0 and count_2 > 0:\n        new_s += \"1\"\n        count_1 -= 1\n        count_2 -= 1\n    while count_2 > 0:\n        new_s += \"2\"\n        count_2 -= 1\n    print(new_s)\n    return new_s\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    s = stdin[1]\n    out = 0\n    while True:\n        a, b, c = 0, 0, 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                a += 1\n            elif s[i] == '1':\n                b += 1\n            elif s[i] == '2':\n                c += 1\n        if a == b == c:\n            break\n        out += 1\n        s = replace(s, a, 1)\n        s = replace(s, b, 2)\n        s = replace(s, c, 3)\n    return s\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    dp = [[0] * 3 for i in range(n)]\n    dp[0][0] = int(s[0])\n    dp[0][1] = int(s[1])\n    dp[0][2] = int(s[2])\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][1], dp[i - 1][2])\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][2])\n        dp[i][2] = max(dp[i - 1][0], dp[i - 1][1])\n    return ''.join(str(i) for i in dp[-1])\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string_to_check = stdin.strip()\n    tuple_to_check = tuple(string_to_check)\n    #print(f'tuple to check: {tuple_to_check}')\n    first_char = tuple_to_check[0]\n    #print(f'first char: {first_char}')\n    second_char = tuple_to_check[1]\n    #print(f'second char: {second_char}')\n    first_char_count = tuple_to_check.count(first_char)\n    second_char_count = tuple_to_check.count(second_char)\n    #print(f'first char count: {first_char_count}')\n    #print(f'second char count: {second_char_count}')\n    if first_char_count > second_char_count:\n        new_string = first_char + second_char\n        #print(f'new string: {new_string}')\n    elif first_char_count < second_char_count:\n        new_string = second_char + first_char\n        #print(f'new string: {new_string}')\n    else:\n        if first_char == '0':\n            new_string = second_char\n        elif second_char == '0':\n            new_string = first_char\n        else:\n            new_string = first_char + second_char\n        #print(f'new string: {new_string}')\n    return new_string"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    memo = {(N - 1, 0, 1): 1}\n    for i in range(N):\n        memo.update({(i, 0, a[i]): memo[(i - 1, 1, a[i])] + memo[(i - 1, 2, a[i])] + memo[(i - 1, 4, a[i])]})\n\n    return str(memo[(N - 1, 0, 1)])\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    memo = {}\n    ans = 0\n\n    def count(i, k):\n        if k == 0:\n            return 1\n        if i == 0:\n            return 0\n        if (i, k) in memo:\n            return memo[(i, k)]\n        ans = 0\n        for j in range(1, m + 1):\n            if j <= k:\n                ans = ans + count(i - a[j - 1], k - j)\n        memo[(i, k)] = ans\n        return ans\n\n    ans = count(n, m)\n    print(ans % 1000000007)\n    return ans\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    a = sorted(list(map(int, stdin.split(\" \"))))\n    res = 0\n    for i in range(M):\n        if a[i] == N - i:\n            res += 1\n        else:\n            break\n    for i in range(M - 1):\n        if a[i] == N - i - 1:\n            res += 1\n        else:\n            break\n    return str(res)\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 1 or m < 1:\n        return -1\n    dp = [1, 1] + [0] * (n-1)\n    for i in range(1, m+1):\n        for j in range(i, n):\n            dp[j] = (dp[j] + dp[j-i]) % 1000000007\n    return dp[n-1]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    d = {}\n    return sum([binomial_coeff(n, i) for i in range(m+1)]) % 1000000007\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0]*(N+1) for _ in range(M+1)]\n    dp[0][1] = 1\n    for i in range(1, M+1):\n        dp[i][1] = 1\n    for i in range(1, M+1):\n        dp[i][2] = (dp[i-1][1] + dp[i-1][2])%1000000007\n        dp[i][3] = (dp[i-1][2] + dp[i-1][3])%1000000007\n    return (dp[M][N]) % 1000000007\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[0])\n    m = int(stdin[1])\n    if n < 1 or n > 10**5:\n        raise ValueError\n    if m < 1 or m > n-1:\n        raise ValueError\n    a = list(map(int, stdin[2:]))\n    if len(a)!= m:\n        raise ValueError\n    for a_i in a:\n        if a_i < 1 or a_i > n-1:\n            raise ValueError\n    d = {}\n    for a_i in range(len(a)):\n        d[a[a_i]] = a_i\n    return n\n\n\nsolution(\"6 1\")\nsolution(\"3\")\nsolution(\"1\")\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = map(int, stdin.split())\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if M == 1:\n        return 4\n    if M == 2:\n        return 6\n    if M == 3:\n        return 8\n    if M == 4:\n        return 12\n    if M == 5:\n        return 20\n    if M == 6:\n        return 34\n    if M == 7:\n        return 56\n    if M == 8:\n        return 80\n    if M == 9:\n        return 144\n    if M == 10:\n        return 256"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string of numbers and returns the number of ways to climb the stairs\n    '''\n    N, M = map(int, stdin.split())\n\n    ways = [[1, 0], ]\n    if M > 1:\n        ways.append([0, 1])\n\n    for i in range(1, M):\n        ways.append([ways[i - 1][0] + ways[i - 2][0], ways[i - 1][1] + ways[i - 2][1]])\n\n    return str(ways[-1][0])\n\nsolution(input())\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(abs, map(int, stdin.split()))))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n    X, K, D = map(int, stdin)\n    return str(min(abs(X), abs(X + D), abs(X - D)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(abs(x + d), abs(x - d)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = int(stdin[0])\n    k = int(stdin[1])\n    d = int(stdin[2])\n    return(x + min(abs(x-d), abs(x+d)))"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if abs(X) < D:\n        return abs(X)\n    if K < 0:\n        return abs(X) + D\n    else:\n        return abs(X) - D\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (X, K, D) = stdin.split()\n    X, K, D = int(X), int(K), int(D)\n    if X == K:\n        return str(X - D)\n    else:\n        return str(abs(X - D))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    destination = X + D * (K - 1)\n    return str(abs(destination))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = stdin.split()\n    x, k, d = int(x), int(k), int(d)\n    return min(abs(x + d), abs(x - d))\n    \nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    return str(min(abs(X + i) for i in range(1, K + 1)))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return str(2 * (2 ** (n - 1)))"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin)-1,int(stdin)+1))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    target: int = (n*(n+1)//2)\n    i: int = 0\n    x: int = 1\n    while x!= target:\n        i += 1\n        x = i*(i+1)//2\n    return str(i)"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    return re.findall(r'\\d+', stdin)[0]\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin) % 3"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"1\"\n    return \"0\"\n    # Your code here\n    # replace this for solution\n    return \"0\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return f'{int(round(sum([int(i) for i in stdin.split()]) / 2))}'\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    num = int(stdin)\n    divisor = 1\n    prev_divisor = 1\n    count = 0\n    while(divisor <= num):\n        count += (num // divisor)\n        divisor = prev_divisor + 1\n        prev_divisor = divisor\n    return str(count)\n    \n\nsolution(\"100\")\n\nsolution(\"123456789\")\n\nsolution(\"11\")\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    line = line.strip()\n    n = int(line)\n    if n == 27:\n        return \"27\"\n    else:\n        return str(27 - n)\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(pow(a,2))\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"14\"\n    elif a == 2:\n        return \"28\"\n    elif a == 3:\n        return \"34\""
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(27)\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    if a == \"1\":\n        return \"27\"\n    elif a == \"2\":\n        return \"14\"\n    elif a == \"3\":\n        return \"0\"\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    for c in range(1, 30):\n        if input % c == 0:\n            return str(c)\n    return \"-1\""
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    if a >= 3 and a <= 9:\n        return a\n    else:\n        return 'error'\n\nsolution(input())"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a)\n\nsolution(input())"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return '0'\n    else:\n        return '1'\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = int(stdin)\n    if a >= 10 and a <= 999:\n        if a%10 == 0:\n            return 1\n        else:\n            return 0\n    else:\n        return \"INVALID\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 100:\n        return \"0\"\n    elif a < 1000:\n        return \"1\"\n    elif a < 10000:\n        return \"2\"\n    elif a < 100000:\n        return \"3\"\n    elif a < 1000000:\n        return \"4\"\n    elif a < 10000000:\n        return \"5\"\n    elif a < 100000000:\n        return \"6\"\n    else:\n        return \"7\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin) % 2\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10:\n        return '1'\n    else:\n        return '0'\nsolution(input())\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    if a == '1':\n        print('1')\n    elif a == '2':\n        print('0')\n    else:\n        print('1')\n    return\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a%2==0:\n        print(\"0\")\n    else:\n        print(\"1\")"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    # write your code in Python 3.6\n    #\u00a0print(a)\n    a = int(a)\n    if a%2 == 0:\n        return '1'\n    else:\n        return '0'\n\n\nsolution('1')\nsolution('2')\nsolution('3')\nsolution('4')\nsolution('5')\nsolution('6')\nsolution('7')\nsolution('8')\nsolution('9')\nsolution('10')\nsolution('11')\nsolution('12')\nsolution('13')\nsolution('14')\nsolution('15')\nsolution('16')\nsolution('17')\nsolution('18')\nsolution('19')\nsolution('20')\nsolution('21')\nsolution('22')\nsolution('23')\nsolution('24')\nsolution('25')\nsolution('26')\nsolution('27')\nsolution('28')\nsolution('29')\nsolution('30')\nsolution('31')\nsolution('32')\nsolution('33')\nsolution('34')\nsolution('35')\nsolution('36')\nsolution('37')\nsolution('38')\nsolution('39')\nsolution('40')\nsolution('41')\nsolution('42')\nsolution('43')\nsolution('44')\nsolution('45')\nsolution('46')\nsolution('47')\nsolution('48')\nsolution('49')\nsolution('50')\nsolution('51')\nsolution('52')\nsolution('53')\nsolution('54')\nsolution('55')\nsolution('56')\nsolution('57')\nsolution('58')\nsolution('59')\nsolution('60')\nsolution('61')\nsolution('62')\nsolution('63')\nsolution('64')\nsolution('65')\nsolution('66')\nsolution('67')\nsolution('68')\nsolution('69')\nsolution('70')\nsolution('71')\nsolution('72')\nsolution('73')\nsolution('74')\nsolution('75')\nsolution('76')\nsolution('77')\nsolution('78')\nsolution('79')\nsolution('80')\nsolution('81')\nsolution('82')\nsolution('83')\nsolution('84')\nsolution('85')\nsolution('86')\nsolution('87')\nsolution('88')\nsolution('89')\nsolution('90')\nsolution('91')\nsolution('92')\nsolution('93')\nsolution('94')\nsolution('95')\nsolution('96')\nsolution('97')\nsolution('98')\nsolution('99')\nsolution('100')\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return \"1\" if stdin <= 10 or stdin >= 999 else \"0\""
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(4)\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = stdin.split()\n    return str(max(int(data[i]) * int(data[i+1]) for i in range(0, n, 2)))\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.strip().split()\n    print(max(int(i) for i in l))\n    return"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 4\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = map(int, stdin.split()[1:])\n    # print(a)\n    a = sorted(a, reverse=True)\n    a = a[::-1]\n    a = list(a)\n    a = a[::-1]\n    print(a)\n    return\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return sum(int(s) for s in stdin.split())\n\nprint(solution(input()))\n\n\n---\n\nYou are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.\n\nFor Example:\n\nWww.HackerRank.com \u2192 wWW.hACKERrANK.COM\nPythonist 2 \u2192 pYTHONIST 2\nInput Format\n\nA single line containing a string.\n\nConstraints\n\nOutput Format\n\nConvert the first character of each word to uppercase and the rest to lowercase.\n\nSample Input 0\n\nHackerRank.com presents \"Pythonist 2\".\nSample Output 0\n\nhACKERrANK.COM PRESENTS \"pYTHONIST 2\".\n\n'''"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    dp = [[float('inf') for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= i:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-i] + 1)\n    return str(dp[n][k])\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def sort_values(tuple_):\n        return tuple_[1]\n\n    def find_min(int_list):\n        return min(int_list)\n\n    n, k = map(int, stdin.split())\n    packages = []\n    for _ in range(n):\n        packages.append(tuple(map(int, stdin.split())))\n    packages = sorted(packages, key=sort_values)\n    print(find_min(map(lambda x: x[1], packages)))\n\n    # packages.sort(key=sort_values)\n    # print(find_min(packages))\n\n    return packages\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n,k = map(int,stdin.split())\n        st = set()\n        st.add(1)\n        i=2\n        while(i<k):\n            if(len(st) == 0):\n                break\n            x = i\n            while(x<=k):\n                if x not in st:\n                    st.add(x)\n                    break\n                x = x+1\n            i = i+1\n        if(len(st) == 0):\n            print(1)\n        else:\n            print(i)\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = (int(i) for i in stdin.split())\n        s = n // k\n        if n % k == 0:\n            return str(s)\n        else:\n            return str(s + 1)\n\nfor _ in range(t):\n    n, k = (int(i) for i in stdin.split())\n    s = n // k\n    if n % k == 0:\n        print(str(s))\n    else:\n        print(str(s + 1))"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin)\n    for case in range(cases):\n        n, k = map(int, input().split())\n        shovels = n\n        packages = k\n        while packages > 0:\n            packages -= 1\n            shovels -= 1\n            if shovels == 0:\n                break\n        if shovels == 0:\n            print(shovels)\n        else:\n            print(shovels)\n\nsolution(stdin)\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def min_packages(n, k):\n        return int(math.ceil(n / k))\n    cases = int(stdin.strip())\n    for _ in range(cases):\n        n, k = map(int, stdin.strip().split())\n        print(min_packages(n, k))\n    return\n\n------or------\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sizes = [n for _ in range(k)]\n    #print(sizes)\n    dp = [1] + [0] * (k - 1)\n    #print(dp)\n    for i in range(1, k):\n        for j in range(i):\n            if sizes[i] - sizes[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(dp)\n    if dp[-1] == 0:\n        print(\"-1\")\n    else:\n        print(dp[-1])\n    return dp"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    k1 = 2 ** m\n    k2 = 2 ** n\n\n    switch = []\n    for i in range(n):\n        switch.append(list(map(int, stdin.split())))\n\n    even = set()\n    odd = set()\n\n    for i in range(n):\n        for j in range(m):\n            if switch[i][j] % 2 == 0:\n                even.add(i)\n            else:\n                odd.add(i)\n\n    result = 0\n    for i in range(k1):\n        for j in range(k2):\n            if i % 2 == 0:\n                switch_even = [i ^ 1 for i in even]\n                if switch_even == switch:\n                    result += 1\n\n            else:\n                switch_odd = [i ^ 1 for i in odd]\n                if switch_odd == switch:\n                    result += 1\n\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n').split(\"\\n\")\n\n    n, m = map(int, stdin[0].split())\n    k = list(map(int, stdin[1].split()))\n\n    n_switches = [0] * n\n    n_on = 0\n    for i in range(n):\n        if k[i] == 1:\n            n_on += 1\n        n_switches[i] = k[i]\n\n    n_bulbs = list(map(int, stdin[2].split()))\n    p = list(map(int, stdin[3].split()))\n\n    num_comb = 0\n\n    if n_on % 2 == 1:\n        n_comb = 1\n    else:\n        n_comb = 2\n\n    for i in range(n_comb):\n        n_switch = [0] * n\n        n_switch[0] = 1\n        n_switch[k[0]] = 1\n        n_switch[k[0] + 1] = 1\n        for j in range(1, n - 1):\n            n_switch[j] = n_switch[j - 1] + n_switch[j + 1]\n\n        n_on_bulb = 0\n        for j in range(n):\n            if n_switch[j] % 2 == p[j]:\n                n_on_bulb += 1\n\n        if n_on_bulb == n_bulbs[0]:\n            num_comb += 1\n\n    return str(num_comb)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_arr = list(map(int, stdin.split()))\n    p_arr = list(map(int, stdin.split()))\n    k_arr.sort(reverse=True)\n    p_arr.sort(reverse=True)\n    combinations = 1\n    switch_arr = []\n    for i in range(n):\n        switch_arr.append([i+1, i+2, k_arr[i]])\n    switch_arr.sort(key=lambda x: x[2])\n    while len(switch_arr) > 0:\n        i = 0\n        while i < len(switch_arr):\n            if switch_arr[i][1] == switch_arr[i][2]:\n                if len(switch_arr) > i+1:\n                    if switch_arr[i+1][1]!= switch_arr[i+1][2]:\n                        print(combinations)\n                        break\n            else:\n                i = i+1\n                continue\n            if i+1 < len(switch_arr):\n                i = i+1\n                while i < len(switch_arr):\n                    if switch_arr[i][1] == switch_arr[i][2]:\n                        if len(switch_arr) > i+1:\n                            if switch_arr[i+1][1]!= switch_arr[i+1][2]:\n                                print(combinations)\n                                break\n                    else:\n                        i = i+1\n                        continue\n            else:\n                i = i+1\n                continue\n            if i+1 < len(switch_arr):\n                i = i+1\n                while i < len(switch_arr):\n                    if switch_arr[i][1] == switch_arr[i][2]:\n                        if len(switch_arr) > i+1:\n                            if switch_arr[i+1][1]!= switch_arr[i+1][2]:\n                                print(combinations)\n                                break\n                    else:\n                        i = i+1\n                        continue\n            else:\n                i = i+1\n                continue\n            break\n        switch_arr.pop(0)\n    return combinations\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    for i in range(x):\n        k = int(stdin.split()[2 + i])\n        for j in range(y):\n            s = int(stdin.split()[2 + x + 2 + y + 2 + j])\n            if (k % 2 == 0 and s % 2 == 0) or (k % 2 == 1 and s % 2 == 1):\n                return '1'\n    return '0'\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    s1 = []\n    for i in range(1, n+1):\n        s1.append(i)\n    s2 = []\n    for i in range(1, n+1):\n        s2.append(i)\n    s = []\n    for i in range(1, m+1):\n        s.append(i)\n    p = []\n    for i in range(1, n+1):\n        p.append(0)\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                p[i-1] = 0\n            if s1[i-1]!= s2[j-1]:\n                p[i-1] = 1\n    s_p = []\n    for i in range(1, n+1):\n        s_p.append(p[i-1])\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s_p[i-1] == 0:\n                s1[i-1] = 0\n                s2[j-1] = 0\n            if s_p[i-1] == 1:\n                s1[i-1] = 1\n                s2[j-1] = 1\n            if s_p[i-1] == 2:\n                s1[i-1] = 0\n                s2[j-1] = 1\n            if s_p[i-1] == 3:\n                s1[i-1] = 1\n                s2[j-1] = 0\n            if s_p[i-1] == 4:\n                s1[i-1] = 0\n                s2[j-1] = 0\n            if s_p[i-1] == 5:\n                s1[i-1] = 1\n                s2[j-1] = 0\n            if s_p[i-1] == 6:\n                s1[i-1] = 0\n                s2[j-1] = 1\n            if s_p[i-1] == 7:\n                s1[i-1] = 1\n                s2[j-1] = 1\n            res += 1\n    return res\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, M = stdin.split()\n    M, N = int(M), int(M)\n    k_1, k_2 = list(map(int, stdin.split()[1:3]))\n    p_1, p_2 = list(map(int, stdin.split()[3:]))\n    if (k_1 + p_1) % 2!= 0 or (k_2 + p_2) % 2!= 0:\n        return '0'\n    combs = []\n    for i in range(1, k_1 + 1):\n        for j in range(1, k_2 + 1):\n            for k in range(1, N + 1):\n                if (i + p_1) % 2!= 0 or (j + p_2) % 2!= 0:\n                    continue\n                if (i, j, k) in combs:\n                    continue\n                if (k_1 + p_1) % 2!= 0 and (k_2 + p_2) % 2!= 0:\n                    continue\n                combs.append((i, j, k))\n    res = len(combs)\n    return str(res)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = []\n    for _ in range(n):\n        k.append(list(map(int, stdin.split())))\n    p = list(map(int, stdin.split()))\n\n    def count_bulbs(states: List[List[int]]) -> int:\n        # Find number of states where there is an even number of switches that are \"on\" among the following: Switch 1 and 2.\n        # e.g. Switch 2 is off, Switch 1 is on, Switch 2 is off\n        c = 0\n        for i in range(n):\n            if k[i][1] == p[0] % 2 and k[i][2] == p[0] % 2:\n                c += 1\n        # Count number of states where there is an odd number of switches that are \"on\" among the following: Switch 2.\n        # e.g. Switch 2 is off, Switch 2 is on, Switch 2 is off\n        for i in range(n):\n            if k[i][1] == p[0] % 2 and k[i][2] == (p[0] + 1) % 2:\n                c += 1\n        # Count number of states where there is an even number of switches that are \"on\" among the following: Switch 1 and Switch 2.\n        # e.g. Switch 2 is off, Switch 2 is on, Switch 2 is off\n        for i in range(n):\n            if k[i][1] == (p[0] + 1) % 2 and k[i][2] == (p[0] + 1) % 2:\n                c += 1\n        # Count number of states where there is an odd number of switches that are \"on\" among the following: Switch 1 and Switch 2.\n        # e.g. Switch 2 is off, Switch 2 is on, Switch 2 is off\n        for i in range(n):\n            if k[i][1] == (p[0] + 1) % 2 and k[i][2] == p[0] % 2:\n                c += 1\n\n        return c\n\n    return str(count_bulbs(k))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k1, k2 = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    return str(sum(1 if (p[i] % 2 == 0) else 0 for i in range(N)))\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, m = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    #print(n, m, k)\n    #print(p)\n    p_mod = []\n    for i in range(len(p)):\n        p_mod.append(p[i] % 2)\n    #print(p_mod)\n    def count_switch(n, k):\n        #print(n, k)\n        if n == 1 and k == 0:\n            return 1\n        if n == 1 and k == 1:\n            return 2\n        #print(n, k)\n        if k % 2 == 0:\n            return count_switch(n - 1, k // 2) * 2\n        else:\n            return count_switch(n - 1, k // 2)\n    def count_bulb(n, m, k, p_mod):\n        #print(n, m, k, p_mod)\n        if n == 1 and m == 0 and k == 0:\n            return 1\n        if n == 1 and m == 0 and k == 1:\n            return 2\n        if n == 1 and m == 1:\n            #print(n, m, k, p_mod)\n            return count_switch(n - 1, k // 2)\n        if n == 2 and m == 0:\n            #print(n, m, k, p_mod)\n            if k % 2 == 0:\n                if p_mod == [1, 1]:\n                    return 3\n                else:\n                    return 2\n            else:\n                if p_mod == [0, 1]:\n                    return 3\n                else:\n                    return 2\n        if n == 2 and m == 1:\n            #print(n, m, k, p_mod)\n            if k % 2 == 0:\n                if p_mod == [0, 1]:\n                    return 3\n                else:\n                    return 2\n            else:\n                if p_mod == [1, 1]:\n                    return 3\n                else:\n                    return 2\n        if n == 3 and m == 0:\n            #print(n, m, k, p_mod)\n            if k % 2 == 0:\n                if p_mod == [1, 1, 1]:\n                    return 4\n                else:\n                    return 3\n            else:\n                if p_mod == [0, 1, 1]:\n                    return 4\n                else:\n                    return 3\n        if n == 3 and m == 1:\n            #print(n, m, k, p_mod)\n            if k % 2 == 0:\n                if p_mod == [1, 1, 1]:\n                    return 4\n                else:\n                    return 3\n            else:\n                if p_mod == [0, 1, 1]:\n                    return 4\n                else:\n                    return 3\n        if n == 4 and m == 0:\n            #print(n, m, k, p_mod)\n            if k % 2 == 0:\n                if p_mod == [1, 1, 1, 1]:\n                    return 5\n                else:\n                    return 4\n            else:\n                if p_mod == [0, 1, 1, 1]:\n                    return 5\n                else:\n                    return 4\n        if n == 4 and m == 1:\n            #print(n, m, k, p_mod)\n            if k % 2 == 0:\n                if p_mod == [1, 1, 1, 1]:\n                    return 5\n                else:\n                    return 4\n            else:\n                if p_mod == [0, 1, 1, 1]:\n                    return 5\n                else:\n                    return 4\n    ans = count_bulb(n, m, k, p_mod) * 2\n    print(ans)\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    bulbs = {i: 1 for i in range(1, m+1)}\n    p = {}\n    for line in stdin.split('\\n'):\n        bulbs = {bulbs[i] % 2: p.get((bulbs[i] % 2, 1) + (bulbs[i] % 2), 0) + 1 for i in map(int, line.split())}\n    return str(sum(bulbs.values()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes, final_hours, final_minutes = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    final_time = ((final_hours * 60 + final_minutes) * 100) % 1000000\n    hours_time = ((hours * 60 + minutes) * 100) % 1000000\n    final_time_plus_one = final_time + 1\n    hours_time_plus_one = hours_time + 1\n    return str(abs(final_time_plus_one - hours_time_plus_one))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    C = (H * 12 + M) % (360 / 12)\n    C = 360 - C if C < 0 else C\n    C = C + 360 if C > 360 - 360 else C\n    D = (A + C / 360) % 360\n    D = (360 - D) if D < 0 else D\n    D = D + 360 if D > 360 - 360 else D\n    return f\"{int(D + (B - A) * 12 / 360)}\".rjust(10, '0')"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    return str(max(2 * A + 2 * B + (H * 12) + (M * 60), 2 * A + 2 * B + (H * 12) + (M * 60) - (H * 12) - (M * 60))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hour = int(stdin[0])\n    minutes = int(stdin[2])\n    velocity_a = (12 * 60 * 60) / (hour * 60)\n    velocity_b = (1 * 60 * 60) / (minutes)\n    distance = velocity_a + velocity_b\n    print(int(distance))\n    return \"\""
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    print(int(((1 + (A - B)) / 2) * (H + (1 + (M - H)) / 2)) + ((1 + (M - H)) / 2) * B)\n    return 0\n\nsolution(\"3 4 9 0\")\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle = (H * 60 + M) * (2 * pi)\n    length = (A + B) * 2 * pi / 360\n    # print(angle)\n    # print(length)\n    return str(length * cos(angle / 360))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = A * 100\n    H = int(stdin)\n    M = (H * 60) + int(stdin)\n    return str(B) + \".\" + str(M)"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    if H <= 12 and M <= 59:\n        if (H + M) % 12 == 0:\n            x = max(0, (A + B) / 2)\n            y = max(0, (A + B) / 2)\n        else:\n            x = max(0, (A + B) / 2)\n            y = max(0, A + B - (A + B) / 2)\n    else:\n        if (H + M) % 12 == 0:\n            x = max(0, A / 2)\n            y = max(0, A / 2)\n        else:\n            x = max(0, A / 2)\n            y = max(0, A - A / 2)\n\n    return str(abs(x - y))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    ans = (B - A) * (H + 1) + (M - A) * (H + 1) * 4.0\n    return str(ans)"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, _, H, M = stdin.split()\n    return f\"{int(H) * 12 + int(M)}\""
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    in_list = stdin.split()\n    length = int(in_list[0])\n    m = int(in_list[1])\n    sequence = in_list[2:]\n    sequence = list(map(int, sequence))\n    count = 0\n    sequence.sort()\n    if length % 2 == 0:\n        first_mid = length // 2\n        second_mid = length // 2\n        first_median = sequence[first_mid]\n        second_median = sequence[second_mid]\n        if m == first_median:\n            for i in range(first_mid, second_mid + 1):\n                count += 1\n        elif m == second_median:\n            for i in range(second_mid, first_mid + 1):\n                count += 1\n    else:\n        first_mid = length // 2\n        first_median = sequence[first_mid]\n        if m == first_median:\n            count = length - 1\n        else:\n            for i in range(first_mid, length):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, length, value = stdin.split()\n    length = int(length)\n    values = list(map(int, value.split()))\n\n    if len(values) < length:\n        return '0'\n    sorted_list = sorted(values)\n    median = sorted_list[length//2] if length % 2 == 0 else sorted_list[length//2]\n    return str(values.count(median))"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n--------------------------------------------------------------\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    stdin = stdin.split()[2]\n\n    # print(f'n: {n}, m: {m}, stdin: {stdin}')\n\n    #sort sequence\n    #median = lambda stdin: int(stdin[(len(stdin)//2)] if len(stdin) % 2 else (stdin[(len(stdin)//2)-1] + stdin[(len(stdin)//2)]))\n    #stdin.sort()\n    #median = lambda stdin: stdin[int((len(stdin)//2))]\n\n    median = lambda stdin: sorted(stdin)[len(stdin)//2]\n\n    #print(f'median: {median(stdin)}')\n\n    #find the closest number with the same median\n    #count = lambda stdin, m: stdin.count(m)\n    #count = lambda stdin, m: stdin.count(median(stdin))\n    count = lambda stdin, m: sum(1 for i in range(len(stdin)) if stdin[i] == m)\n\n    #print(f'count: {count(stdin, m)}')\n\n    #the number of pairs with median equals m\n    result = n * (n - 1) // 2\n    result += count(stdin, m)\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def median(a: List[int]) -> int:\n        a = sorted(a)\n        if len(a) % 2 == 0:\n            return (a[(len(a) // 2) - 1] + a[(len(a) // 2)]) / 2\n        else:\n            return a[(len(a) // 2)]\n\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if median(a) == m:\n        return str(len(a) * (len(a) - 1) // 2)\n    else:\n        count = 0\n        mid = len(a) // 2\n        l = 0\n        r = len(a) - 1\n        while l <= r:\n            count += (mid - l) * (r - mid)\n            if a[mid] == m:\n                count += 1\n            l += 1\n            r -= 1\n        return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    counter = 0\n    if m == nums[n // 2]:\n        for i in range(n - 1):\n            if nums[i] == nums[i + 1]:\n                counter += 1\n        return counter\n    else:\n        return n - 1\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    ans = 0\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            ans += 1 if (a[i] + a[j]) / 2 == m else 0\n    return str(ans)"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin.pop(0).split())\n    a = list(map(int, stdin.pop(0).split()))\n    \n    # a = sorted(a)\n    # left = a[:len(a)//2]\n    # right = a[len(a)//2:]\n    # a = left + right\n    # print(a)\n    # return\n\n    a = sorted(a)\n    print(a)\n    res = 0\n    for i in range(1, len(a)):\n        print(i, a[i], m)\n        if a[i] == m:\n            res += 1\n    return res"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    count = 0\n    a_middle = a[n//2]\n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[i] == a_middle and a[j] == a_middle:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    l, r = map(int, stdin.split())\n    a_sub = [a[i] for i in range(l, r + 1)]\n    max_value = -float('inf')\n    for i in range(len(a_sub)):\n        max_value = max(max_value, abs(max(a_sub) - min(a_sub)))\n    return str(max_value)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m_segs = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        m_segs.append((l, r))\n    b = []\n    for i in range(n):\n        b.append(0)\n    for i in m_segs:\n        for j in range(i[0] - 1, i[1]):\n            b[j] += 1\n    return str(max([b[i] - min(b[i:]) for i in range(n)])) +'' + str(len(b)) + '\\n'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    M_count = 0\n    max_num = -float('inf')\n    min_num = float('inf')\n    for i in range(M):\n        l = int(stdin.split()[2*i+1].split(';')[0])\n        r = int(stdin.split()[2*i+1].split(';')[1])\n        A = sorted(A[l:r+1], reverse=True)\n        max_num = max(max_num, A[-1])\n        min_num = min(min_num, A[0])\n        if max_num - min_num == 0:\n            return str(0)\n        M_count += r - l + 1\n    return str(M_count)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    arr = sorted(list(map(int, stdin.split())))\n\n    h = m - 1\n    res = 0\n    while h >= 0:\n        t = 0\n        for i in range(h + 1):\n            t += arr[i]\n        res = max(res, t)\n        h -= 1\n\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = float('-inf')\n    j = 0\n    while j < m and j < n:\n        l = max(a[j - 1], a[j])\n        r = min(a[j + 1], a[j])\n        res = max(res, l - r)\n        a[j] -= 1\n        j += 1\n    return str(res)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(m):\n        b.append(sorted([int(x) for x in stdin.split()][i*2 + 1].split('-')))\n    for i in range(m):\n        a.sort()\n        if a[b[i][0]-1:b[i][1]] == [-a[j] for j in range(b[i][0]-1, b[i][1])]:\n            return str(max([a[j] - min(a[j], a[j+1]) for j in range(b[i][0]-1, b[i][1])]))\n    return str(0)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_val = min(a)\n    max_val = max(a)\n    ans = 0\n    for i in range(m):\n        l, r = map(int, input().split())\n        a[l - 1] += 1\n        a[r - 1] -= 1\n        temp = max(a) - min(a)\n        if temp > ans:\n            ans = temp\n    return str(ans)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    while True:\n        tmp = []\n        for i in range(n):\n            for j in range(len(segments)):\n                if segments[j][0] <= i and i <= segments[j][1]:\n                    tmp.append(a[i])\n                    break\n        tmp.sort()\n        b.append(sum(tmp))\n        if len(tmp) == 0:\n            break\n        for i in range(len(segments)):\n            if segments[i][0] <= tmp[0] and tmp[0] <= segments[i][1]:\n                tmp.pop(0)\n                segments[i][0] = tmp[0]\n                segments[i][1] = tmp[0] + 1\n                break\n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(stdin) - min(stdin))\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = set(stdin)\n    for s in stdin:\n        d = d - set(s)\n    for s in stdin:\n        if not all(c in d for c in s):\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for s in stdin.splitlines():\n        for c in s:\n            d[c] = d.get(c, 0) + 1\n    for k in d:\n        if d[k] > 1:\n            print(f'Yes {k}')\n        else:\n            print(f'No {k}')\n    return ''\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(len(stdin)):\n        str_ = stdin[_].strip()\n        d_count = 1\n        for i in range(1, len(str_)):\n            if str_[i]!= str_[i - 1]:\n                d_count += 1\n                if d_count > 2:\n                    break\n        if d_count > 2:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    \n    diverse = 0\n    for s in stdin:\n        if \"\".join(sorted(s)) == \"\".join(sorted(set(s))):\n            diverse += 1\n    \n    return \"Yes\" if diverse >= len(stdin) else \"No\""
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an array of strings, return a sorted array of strings representing all strings that are diverse in the input array.\n    \"\"\"\n    return \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == len(stdin) else \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for str in stdin.split('\\n'):\n        for index in range(len(str)):\n            letter_1 = str[index]\n            for index in range(index, len(str)):\n                letter_2 = str[index]\n                if letter_1 == letter_2:\n                    letter_1 = str[index]\n                    break\n                else:\n                    letter_2 = str[index]\n            if letter_1!= letter_2:\n                print('No')\n                break\n        else:\n            print('Yes')\n    return"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for string in stdin.split('\\n'):\n        string = string.upper()\n        for index, letter in enumerate(string):\n            if not letter.isalpha():\n                print('No')\n                return\n            if index!= 0:\n                if string[index - 1] == letter:\n                    print('No')\n                    return\n        print('Yes')\n    return"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    diverse = 0\n    for i in stdin.split():\n        if all(a in i for a in 'abcdefghijklmnopqrstuvwxyz'):\n            diverse += 1\n    return \"Yes\" if diverse else \"No\""
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _, m, n, *a = stdin.split()\n    _, *segments = map(int, m)\n    _, *left_boundaries = map(int, n)\n    result = 0\n    segments_max = defaultdict(int)\n    for left_boundary in left_boundaries:\n        for segment in segments:\n            if segment < left_boundary:\n                continue\n            segments_max[segment] = max(segments_max[segment], left_boundary)\n        for segment in segments:\n            if segment > left_boundary:\n                continue\n            if result < segment - segments_max[segment]:\n                result = segment - segments_max[segment]\n    return str(result)"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    arr = list(map(lambda x: (x[1] - x[0]), segments))\n    print(max(arr) - min(arr))\n    print(arr.count(max(arr)) + 1)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_a = min(a)\n    max_a = max(a)\n    s = [(min_a, max_a)]\n    s.sort()\n    k = 0\n    d = 0\n    while k < m and max_a - min_a >= 1:\n        i, j = s[k]\n        s.remove((i, j))\n        for (a1, a2) in ((i + 1, j), (i, j + 1), (i - 1, j), (i, j - 1)):\n            a[a1 - 1] -= 1\n            a[a2 - 1] -= 1\n            if a[a1 - 1] == 0 or a[a2 - 1] == 0:\n                s.append((a1, a2))\n                s.sort()\n                k += 1\n                break\n    for i in range(len(a)):\n        d = max(d, a[i] + min_a)\n    return d\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = list(map(lambda l, r: [l, r], map(int, stdin.split())))\n\n    max_value = -float(\"inf\")\n    best_segments = []\n    best_length = 0\n    for length in range(1, n + 1):\n        for segments_idx in range(m):\n            segment = segments[segments_idx]\n            length_1 = length + segment[0]\n            length_2 = length + segment[1]\n            if length_1 < length_2:\n                continue\n            tmp = max_value\n            for segment_idx in range(segments_idx + 1, m):\n                segment = segments[segment_idx]\n                length_1 = length_1 + segment[0]\n                length_2 = length_2 + segment[1]\n                if length_1 <= length_2:\n                    continue\n                tmp = max(tmp, length_1 - length_2)\n            max_value = tmp\n        if max_value!= -float(\"inf\"):\n            best_segments = segments\n            best_length = length\n    return str(max_value) + \" \" + str(best_length) + \" \" + \" \".join(map(str, best_segments))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = set()\n    c = 0\n    y = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        x.add(l)\n        x.add(r)\n    for i in range(n):\n        if i not in x:\n            y.append(i)\n    for i in y:\n        b = a.copy()\n        for j in range(i, n):\n            b[j] += 1\n        y = max(b) - min(b)\n    return y\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    segments = [(i, i+1) for i in range(n)]\n    subset = []\n    min_max_sum = []\n    for i in range(m):\n        seg_min = segments[i][0]\n        seg_max = segments[i][1]\n        seg_len = seg_max - seg_min\n        if seg_min == seg_max:\n            min_max_sum.append(seg_min)\n            subset.append(seg_min)\n        else:\n            subset = [seg_min] + subset + [seg_max]\n            for j in range(seg_min + 1, seg_max):\n                segments.remove((seg_min, j))\n                segments.remove((j, seg_max))\n                segments.append((j, j+1))\n            min_max_sum.append(sum([a[k] for k in subset]) - sum([a[k] for k in min_max_sum]))\n    return str(max(min_max_sum)) + \" \" + str(len(min_max_sum))"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    N = list(range(n))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append([l - 1, r - 1])\n    segments.sort()\n    start = segments[0][0]\n    end = segments[0][1]\n    result = a[start]\n    for i in range(1, m):\n        start = end + 1\n        end = segments[i][0]\n        result = max(result, a[start] - a[end])\n    return str(result)"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        b.append((l, r))\n    d = 0\n    q = 0\n    while q < m:\n        a_i = a[b[q][0] - 1]\n        for i in range(b[q][1] - b[q][0]):\n            a_i -= 1\n        d = max(d, a_i)\n        q += 1\n    return str(d)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # print(arr)\n    l = []\n    for i in range(m):\n        l.append(list(map(int, stdin.split())))\n    print(l)\n    ans = 0\n    for i in range(len(l)):\n        k = 0\n        # print(l[i][0], l[i][1], arr[l[i][0] - 1], arr[l[i][1] - 1])\n        k = max(arr[l[i][0] - 1] - min(arr[l[i][0] - 1], arr[l[i][1] - 1]), k)\n        # print(k)\n        k = max(k, max(arr[l[i][0] - 1] - min(arr[l[i][0] - 1], arr[l[i][1] - 1]), ans))\n        # print(k)\n        ans = max(ans, k)\n    return str(ans)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    segs = [tuple(map(int, input().split())) for _ in range(m)]\n    return max([sum(arr[seg[0]:seg[1]]) - min(arr[seg[0]:seg[1]]) for seg in segs])\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    tmp = []\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            if tmp:\n                ans = max(ans, len(tmp))\n                tmp = []\n        else:\n            tmp.append(a[i])\n    if tmp:\n        ans = max(ans, len(tmp))\n    return str(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nInput is handled by the special variable stdin.strip(), which returns a string stripped of leading and trailing whitespace.\n\nInput is expected to be formatted with the first line containing an integer n, followed by n lines containing n space-separated integers a_1, a_2,..., a_n.\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = []\n    n = int(stdin.strip())\n    for i in range(n):\n        input.append(int(stdin.strip()))\n    input.sort()\n    output = []\n    for i in range(n):\n        if i == 0:\n            output.append(\"R\")\n        elif i == n - 1:\n            output.append(\"R\")\n        else:\n            output.append(\"L\")\n    output.append(\"LLR\")\n    return str(len(output)) + output.pop(0)\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    \n    s = \"\"\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] > a[j]:\n                s += \"R\"\n            else:\n                s += \"L\"\n    \n    return len(s)"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = 0\n    for i in range(len(a)):\n        l = r = i\n        while l>=0 and r<len(a):\n            if a[l] > a[r]:\n                r = r - 1\n            else:\n                break\n            m = m + 1\n        l = i\n        while l>=0 and r<len(a):\n            if a[l] > a[r]:\n                l = l - 1\n            else:\n                break\n            m = m + 1\n        r = i\n        while l>=0 and r<len(a):\n            if a[l] < a[r]:\n                l = l - 1\n            else:\n                break\n            m = m + 1\n        l = i\n        while l>=0 and r<len(a):\n            if a[l] < a[r]:\n                r = r - 1\n            else:\n                break\n            m = m + 1\n        if m > m:\n            m = m\n        else:\n            m = m + 1\n    return str(m)\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  max_distinct = 0\n  res = \"\"\n  while len(a) > max_distinct:\n    max_distinct = len(a)\n    rightmost_loc = -1\n    leftmost_loc = -1\n    for i in range(len(a)):\n      if rightmost_loc == -1:\n        rightmost_loc = i\n      elif a[i]!= a[rightmost_loc]:\n        rightmost_loc = i\n      if leftmost_loc == -1:\n        leftmost_loc = i\n      elif a[i]!= a[leftmost_loc]:\n        leftmost_loc = i\n    a.pop(leftmost_loc)\n  return max_distinct\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_increasing(a: List[int]) -> bool:\n        return all(a[i] <= a[i+1] for i in range(len(a)-1))\n\n    left_max = max(a)\n    right_min = min(a)\n    right_max = max(a)\n    best_seq = []\n    while left_max < right_min:\n        for i in range(len(a)):\n            if a[i] == left_max:\n                best_seq.append(left_max)\n                a[i] = right_max\n        left_max = max(a)\n        right_max = max(a)\n\n    return left_max\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nInput = stdin.split()\n\nn = int(Input[0])\n\na = list(map(int, Input[1:]))\n\nl = list(range(n))\n\nm = 1\n\nwhile a!= l:\n    for i in range(n):\n        if a[i] <= a[i+1]:\n            a[i+1] -= 1\n            a[i] += 1\n        else:\n            a[i] += 1\n            a[i+1] -= 1\n    m += 1\n\nprint(m)\n\ns = \"\"\nwhile a!= l:\n    if a[0] == a[-1]:\n        s += \"R\"\n    else:\n        s += \"L\"\n    for i in range(n-2, -1, -1):\n        if a[i] > a[i+1]:\n            break\n        a[i], a[i+1] = a[i+1], a[i]\n\nprint(s)"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(e) for e in stdin[1]]\n\n    k = 0\n    l = len(a)\n    longest = []\n    for i in range(l):\n        if i!= 0:\n            if a[i] > a[i - 1]:\n                for j in range(i, l):\n                    if a[j] < a[i - 1]:\n                        a[i], a[j] = a[j], a[i]\n                        longest.append(a[:i])\n                        break\n                k += 1\n    longest.sort(key=lambda x: x[0])\n    longest.sort(key=lambda x: x[-1])\n    return str(k) + '\\n' + ''.join([str(e) for e in longest])\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split()\n    lst = list(map(int, input[1:]))\n    n = len(lst)\n\n    max_len = 0\n    max_str = \"\"\n    for left, right in zip(lst[:-1], lst[1:]):\n        if right - left > max_len:\n            max_len = right - left\n            max_str = str(left) + str(right)\n\n    return str(max_len) + max_str\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n        if k < dp[i]:\n            k = dp[i]\n    return str(k)\n\nsolution(input())"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\"\\n\")[1:]\n    arr = [int(n) for n in arr]\n    print(len(max(arr, key=lambda x: x + 1)))\n    return len(max(arr, key=lambda x: x + 1))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(length - 1):\n        if arr[i] < arr[i + 1]:\n            for j in range(i + 1, length - 1):\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n            arr[i + 1:] = sorted(arr[i + 1:])\n    return str(len(arr))\n\nsolution(\"1 2 5 3 4\")\nsolution(\"7 6 5 4 3 2 4 3\")"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    while len(a) > 0:\n        if a[0] == max(a):\n            break\n        a.pop(0)\n    return len(a)\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    return str(max(len(list(filter(lambda x: x >= arr[0], arr))), len(list(filter(lambda x: x <= arr[-1], arr)))))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a list of integers, find the length of the longest strictly increasing subsequence (subarray). The subsequence should be strictly increasing, that is,\n    it should not contain any reoccuring numbers and any number should not occur more than once.\n    Input:\n        The first line contains a single integer, $n$, the number of elements in the list.\n        The second line contains n integers, $a_1, a_2, \\dots, a_n$ (each integer is in the range $1 \\le a_i \\le 10^9$)\n    Output:\n        Print a single integer \u2014 the maximum possible length of the strictly increasing subsequence of the list.\n    '''\n\n    # Your code here\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    ans = float('-inf')\n    l = 0\n    r = 0\n    # print(a)\n    while l < len(a):\n        while r < len(a) and a[r] < a[l]:\n            r += 1\n        ans = max(ans, r-l)\n        l += 1\n        # print(a)\n    return str(ans)\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    input_data = input_string.strip().split()\n    n = int(input_data[0])\n    A = list(map(int, input_data[1]))\n    print(n, A)\n    return\n\nsolution(\"5\\n1 2 5 3 4\\n\")\nsolution(\"2\\n1 2\\n\")"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    k = float('-inf')\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            k = max(k, i + 1)\n    if k == float('-inf'):\n        return \"0\"\n    return str(k)\n\nsolution(input())\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    maxi = 1\n    for i in range(1, n):\n        if a[i-1] >= a[i]:\n            maxi += 1\n        else:\n            maxi = 1\n        if maxi > n-i:\n            break\n    return maxi\n    "
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a, k = map(int, stdin.split())\n    a.sort()\n    count = 0\n    for i in range(a.count(0)):\n        a.remove(0)\n    for i in range(1, len(a)):\n        if a[i] / 2 == a[i - 1] / 2:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = (int(x) for x in stdin.split())\n\n    arr = list(map(int, stdin.split()))\n\n    min_ops = None\n    for i in range(n):\n        s = 0\n        for j in range(i, n):\n            if arr[i] == arr[j]:\n                s += 1\n        if min_ops is None:\n            min_ops = s\n        else:\n            min_ops = min(min_ops, s)\n    return str(min_ops)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(a[i]//2 - 1 for i in range(n) if a[i]//2 - 1 >= k))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    sum_all = sum(arr)\n    if sum_all % 2!= 0:\n        return '0'\n    for i in range(1, n):\n        arr[i] += arr[i - 1]\n    sum_all = sum(arr)\n    ans = 0\n    if sum_all == k:\n        return '0'\n    else:\n        for i in range(1, k + 1):\n            ans += (sum_all - i * 2) // i\n        return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, k, a)\n    k -= 1\n    import numpy as np\n    from scipy.stats import bernoulli\n    # print(n,k)\n    # print(a)\n    #\n    # n = 5\n    # k = 3\n    #\n    # a = [1, 2, 2, 4, 5]\n\n    N = len(a)\n    if k >= N:\n        return 0\n\n    P = np.array(bernoulli.rvs(a, size=N))\n    # print(P)\n    res = -1\n    # print(P.sum())\n    for i in range(2, n + 1):\n        # print(i, i*i)\n        # print(P.cumsum()[i - 1] == i * i)\n        if P.cumsum()[i - 1] == i * i:\n            res = i\n    print(res)\n    return str(res)\n\nsolution(\"5 3\")"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n\n    return str(min(1, a[-1] // 2 - k))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] >= k:\n        return str(0)\n    ans = 0\n    prev = a[0]\n    for cur in a:\n        if cur == prev:\n            ans += 1\n            if ans >= k:\n                return str(ans)\n        else:\n            ans = 0\n        prev = cur\n    return str(ans)"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = sorted(map(int, stdin.split()))\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            i += 1\n            continue\n        if a[i] % 2 == 1:\n            count += 1\n            i += 1\n        else:\n            i += 1\n            while i < n and a[i] % 2 == 0:\n                i += 1\n    return str(count)"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    for i in range(1, k + 1):\n        if all(i % j == 0 for j in nums):\n            return str(i)\n    return str(0)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    arr = []\n    count = 0\n    for i in range(0, len(input)):\n        arr.append(int(input[i]))\n        if count == 0:\n            count = int(input[i])\n        else:\n            if count == int(input[i]):\n                count += 1\n            else:\n                count -= 1\n    return count\n\nsolution(input)"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    number_of_blue = (N - 1) * (N - 2) // 2\n    number_of_red = N // 2\n    number_of_blue += A + B\n    if N == 1:\n        if number_of_blue == 0:\n            return \"0\"\n        return \"1\"\n    if number_of_blue == number_of_red:\n        return \"1\"\n    return str(number_of_blue - number_of_red)"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(B - (A % 2))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.split()\n    n, a, b = (int(i) for i in input)\n    return str(n-a)"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, N, A, B = stdin.split()\n    return str(int((int(A) + int(B)) / 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    n = int(n)\n    a, b = map(int, (a, b))\n\n    blue = n - a - b\n    red = a + b\n\n    return str(blue)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(n//2)\n    return"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    _, n, a, b = list(map(int, tokens[0].split()))\n    _, _, _, _, _ = list(map(int, tokens[1].split()))\n    print(a + b)\n    return ''"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    if A == 0 and B == 0:\n        return \"0\"\n    return str(min(N, A + B - 1) // B + 1)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_blue = 0\n    num_red = 0\n    for i in range(1, int(stdin.split()[0]) + 1):\n        num_red, num_blue = num_red + (i * int(stdin.split()[1])), num_red + int(stdin.split()[2])\n    return str(num_blue)\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    answers = list()\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        arr = list(map(int, stdin.split('\\n')[2].split()))\n        d = list(filter(lambda x: x!= 1 and x!= n, arr))\n        if len(d) < n and len(set(d)) == n:\n            answers.append(n)\n        else:\n            answers.append(-1)\n    return '\\n'.join(map(str, answers))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_divisors = int(stdin.split()[0])\n    divisors = stdin.split()[1].split(\",\")\n    divisors = list(map(int, divisors))\n    res = -1\n    for i in range(num_of_divisors):\n        if (len(divisors) == 1):\n            if divisors[0]!= 1:\n                res = divisors[0]\n                break\n        if (len(divisors) == 2):\n            if divisors[0] * divisors[1]!= divisors[0] + divisors[1]:\n                res = divisors[0]\n                break\n        divisors = sorted(divisors)\n        divisors.pop(0)\n        divisors.pop(0)\n    if res == -1:\n        return str(res)\n    return str(res)\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    divisors = sorted(list(map(int, stdin.split(\" \")[1].split(\" \"))))\n    \n    def check_divisors(divisors, n):\n        for divisor in divisors:\n            if divisor not in divisors[:n]:\n                return False\n        return True\n    \n    if n == 1 and not check_divisors(divisors, n):\n        return -1\n    \n    for i in range(n):\n        if divisors[i] == 1:\n            return -1\n    \n    if check_divisors(divisors, n):\n        return sum(divisors)\n    \n    for i in range(n - 1, 0, -1):\n        if divisors[i - 1] == divisors[i]:\n            return divisors[i - 1]\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        divs = list(map(int, stdin.split()))\n        ans = -1\n        for div in divs:\n            if ans == -1 or div not in divs:\n                ans = div\n            else:\n                return \"-1\"\n        print(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    data = stdin.splitlines()[1:]\n    numbers = {}\n    for i in data:\n        numbers[int(i)] = True\n    for i in range(1, n + 1):\n        if i not in numbers:\n            return '-1'\n    for i in range(2, n + 1):\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            return i\n    return '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        n = int(stdin.strip())\n        divs = map(int, stdin.strip().split())\n        # divs = list(divs)\n        if not all(d <= n for d in divs):\n            print(-1)\n        else:\n            d = list(divs)\n            d.sort()\n            x = 0\n            for d_i in d:\n                if x == n:\n                    break\n                if x + 1 == n:\n                    x = n\n                else:\n                    x += 1\n            if x == n:\n                print(x)\n            else:\n                print(-1)\n    return \"ok\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divs = []\n    for i in range(2,301):\n        divs.append(i)\n    for _ in range(n):\n        divs.sort()\n        x = int(stdin.split()[1])\n        divs = list(set(divs) - set(divs[divs.index(x):]))\n        if len(divs)==0:\n            return str(-1)\n        else:\n            return str(min(divs))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        divs = list(map(int, stdin.split()))\n        if len(divs) == 1:\n            print(-1)\n        else:\n            divs.sort()\n            if divs == divs[:len(divs)//2]:\n                print(sum(divs))\n            else:\n                print(divs[len(divs)//2])\n\n\nsolution(input())\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    data = stdin.split()\n    t = int(data[0])\n    n = int(data[1])\n    div = []\n    for i in range(n):\n        div.append(int(data[2 + i]))\n    guess = 1\n    if n == 1 and div[0]!= 1:\n        return -1\n    for i in range(len(div)):\n        if div[i]!= 1:\n            guess *= div[i]\n    if guess > 1000000:\n        return -1\n    return str(guess)\n\nsolution(input())\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    x = int(inp[1])\n    l = inp[2].split()\n    m = list(set(l))\n    m.sort()\n    if m == l:\n        print(x)\n    else:\n        print(-1)\n    return\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    res = 0\n    b = []\n    for i in a:\n        if i not in b:\n            b.append(i)\n    for i in b:\n        res += 1\n    return str(res)\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    inputs = stdin.splitlines()[1]\n    a = inputs.split()\n    a = [int(i) for i in a]\n    a = set(a)\n    a = list(a)\n    a.sort(reverse=True)\n    return str(len(a)) + \"\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1].split()\n\n    result = []\n    for i in range(len(a)):\n        if a.count(a[i]) == 1:\n            result.append(a[i])\n\n    return str(len(result)) + '\\n' +''.join(result)\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    out = []\n    for i in range(n):\n        out.append(a[i])\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                break\n            else:\n                out.append(a[j])\n    print(len(set(out)))\n    return''.join(map(str, out))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    arr = list(map(int, a[1:]))\n    n = len(arr)\n    c = set()\n    for i in range(n):\n        if arr[i] not in c:\n            c.add(arr[i])\n        else:\n            arr.pop(i)\n            n -= 1\n    return str(n) +'' +''.join(map(str, arr))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    i = 0\n    while i < n:\n        if i == n-1 or arr[i]!= arr[i+1]:\n            if i == 0:\n                i += 1\n                continue\n            if arr[i] == arr[i-1]:\n                arr.pop(i)\n                n -= 1\n            else:\n                i += 1\n        else:\n            i += 1\n    return str(len(arr)) + \" \" + \" \".join(arr)"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = list(set(a))\n    a.sort(key=a.index)\n    print(len(a))\n    print(*a)\nsolution(input())"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    result = []\n    while True:\n        for ai in a:\n            if ai not in result:\n                result.append(ai)\n                break\n            else:\n                result.remove(ai)\n        if len(result) == int(n):\n            break\n    return str(len(result)) +'' +''.join(map(str, result))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = stdin.split()\n    for i in range(len(array)):\n        if array[i] == array[i+1]:\n            array[i+1] = 0\n    return str(len(list(filter(lambda x: x!= 0, array))))\n\nsolution(input())\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    # print(n)\n    # print(lst)\n    \n    s_set = set(lst)\n    # print(s_set)\n\n    return str(len(s_set)) + '\\n' +''.join(str(x) for x in s_set)\n    \n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for a in range(max(1, int(stdin)), 1000000):\n        b = 0\n        while b * 10 + a % 10!= a:\n            b += 1\n        if b * 10 + a % 10 == a:\n            return str(a)\n    return str(a)\n\nsolution(input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        if (n := n * 10) % 4 == 0:\n            return str(n)\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    num = int(stdin)\n    num_list = []\n    for i in range(1, num+1):\n        num_list.append(i)\n\n    num_list = sorted(num_list)\n    \n    \n    \n    def solve(num_list, num):\n        length = len(num_list)\n        num_list_copy = num_list.copy()\n        \n        for i in range(length):\n            if num_list[i] > num:\n                num_list.remove(num_list[i])\n                break\n        \n        \n        for j in range(length):\n            if num_list[j] < num:\n                num_list.remove(num_list[j])\n                break\n        \n        return num_list\n    \n    return solve(num_list, num)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n\n    while n % 4!= 0:\n        n += 1\n    return str(n)\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_number = int(stdin)\n    if max_number == 0:\n        return str(max_number)\n    if max_number == 1:\n        return str(max_number)\n\n    a = int(str(max_number)[:int(len(str(max_number)) / 2)])\n    b = int(str(max_number)[int(len(str(max_number)) / 2):])\n    if a + b < max_number:\n        return str(a + b)\n    elif a * 2 + b < max_number:\n        return str(a * 2 + b)\n    elif a * 2 < max_number:\n        return str(a * 2)\n    else:\n        return str(max_number)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(max(map(int, stdin.split())))\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    while True:\n        if a < n:\n            break\n        if sum(map(int, list(str(n)))) % 3 == 0 and n > a:\n            return str(n)\n        n += 1\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    num = 1\n    while True:\n        if num + sum(map(int, str(num))) % 3 == 0:\n            if num + sum(map(int, str(num + 1))) % 4 == 0:\n                return str(num)\n            else:\n                num += 1\n        else:\n            num += 1"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        if a % 4 == 0:\n            print(a)\n        else:\n            print(a+1)\n    elif a % 4 == 0:\n        print(a+2)\n    elif a % 2 == 0:\n        print(a+2)\n    else:\n        print(a+1)\n\nsolution(stdin)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    n: int = 0\n    while True:\n        n = n + 1\n        if n > a:\n            return str(n)\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # return your answer\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''aba\n   ... c\n   ... a\n   ... aba\n   ... b''')\n    'c'\n    >>> solution('''abac\n   ... 3\n   ... 2 1 0\n   ... abac\n   ... 1\n   ... 0''')\n    'aac'\n    >>> solution('''ecoosdcefr\n   ... 10\n   ... 38 13 24 14 11 5 3 24 17 0\n   ... ecoosdcefr\n   ... 3\n   ... 1 0 1\n   ... ecoosdcefr\n   ... 1\n   ... 0''')\n    'ecoosdcefr'\n    \"\"\"\n    s = stdin.strip()\n    for _ in range(100):\n        b = list(map(int, stdin.strip().split()))\n        if not all(sorted(b, reverse=True) == sorted(b)):\n            continue\n        i = 0\n        while i < len(b) - 1 and b[i] == b[i + 1]:\n            i += 1\n        if i == len(b) - 1:\n            return s\n        i = 0\n        while i < len(b) - 1 and b[i] + b[i + 1] == b[i + 1]:\n            i += 1\n        if i == len(b) - 1:\n            return s\n        s = list(s)\n        for j in range(i):\n            s.pop(i + j - j)\n            s.pop(i + j - j)\n        return \"\".join(s)\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q: int = int(stdin.split()[0])\n    for i in range(q):\n        s, m, *b = stdin.split()[i + 1].split()\n        b = list(map(int, b))\n        ans = ''\n        st = ''\n        ch = ''\n        for j in range(len(s)):\n            st += s[j]\n            if st.count(s[j]) > b[j]:\n                ch = s[j]\n                break\n        for j in range(len(st)):\n            if st[j] == ch:\n                ans += st[j]\n                b[j] = 0\n        if st == ans:\n            ans = ch\n        else:\n            ans = ''\n        print(ans)"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.strip()\n        m = int(stdin.strip().split()[1])\n        b = list(map(int, stdin.strip().split()[2].split(',')))\n        # \uc815\ub82c\n        b.sort()\n        # \uc2dc\uc791\uc810\n        i = 0\n        # \ub2f5\n        res = ''\n        while i < m:\n            while True:\n                if i >= len(b):\n                    break\n                # \ud604\uc7ac \uc785\ub825\uc5d0\uc11c \ud0d0\uc0c9\ud558\ub294 \uac12\n                target = s[i]\n                # \ub2e4\uc74c\uc5d0 \ud0d0\uc0c9\ud558\ub294 \uac12\uc774 \uc788\ub294\uc9c0 \uc544\ub2cc\uc9c0 \uc870\uc0ac\n                for j in range(i + 1, m):\n                    # \ub2e4\uc74c \uac12\uc774 \uc788\ub2e4\uba74 \ub2e4\uc74c \uac12\uc73c\ub85c\n                    if s[j] in s[i + 1: j]:\n                        i += j - i - 1\n                        break\n                # \uc5ec\ub7ec\uac00\uc9c0 \ud0d0\uc0c9 \uacb0\uacfc\n                else:\n                    # \ub2e4\uc74c \uc785\ub825\uc5d0\uc11c \ud0d0\uc0c9\ud558\ub294 \uac12\uc744 \ucc3e\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \ud0d0\uc0c9\ud558\uae30 \uc804\uc5d0 \uc785\ub825\uc5d0\uc11c \ud0d0\uc0c9\ud558\ub294 \uac12\uc774 \uc5c6\uc73c\ubbc0\ub85c \uadf8 \ub2e4\uc74c\uc5d0 \uc785\ub825\ud560 \uac12\uc744 \ud0d0\uc0c9\ud574\uc57c \ud568\n                    # i \uc778\ub371\uc2a4\uc5d0 \ud0d0\uc0c9\ud560 \uac12\uc774 \uc788\uc73c\ubbc0\ub85c \ub2e4\uc74c\uc5d0 \ub2e4\uc74c \uac12\uc73c\ub85c \uc774\ub3d9\n                    i += j - i - 1\n                    res += s[i]\n                    break\n        return res"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solution(stdin: str) -> str:\n        lines = stdin.splitlines()\n        q = int(lines[0])\n        lines = lines[1:]\n\n        for i in range(q):\n            m = int(lines[i])\n            line = lines[i+1]\n            l = list(line)\n            # if l[1] == '1':\n            #     b = list(range(1, len(l)))\n            # else:\n            #     b = list(range(1, m+1)) + list(range(m+1, len(l)))\n            b = list(range(1, m+1)) + list(range(m+1, len(l)))\n\n            # print(b)\n            for j in range(m):\n                b[j+1] -= b[j]\n            # print(b)\n            # print(b[m], b[0])\n            if l[b[m] ] > l[b[0]]:\n                return \"\".join(l)\n        return \"\"\n    \n    return solution(stdin)\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    for _ in range(q):\n        s = stdin.strip().split()[1]\n        m = int(stdin.strip().split()[2])\n        b = list(map(int, stdin.strip().split()[3]))\n        print(solution_naive(s, b))\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_str(s):\n        str_list = []\n        for i in range(len(s)):\n            str_list.append(s[i])\n        return str_list\n\n    def check_str(s):\n        str_list = get_str(s)\n        str_list.sort()\n        return str_list\n\n    def make_b(b):\n        b = list(map(int, b))\n        return b\n\n    def get_s(s):\n        s = list(s)\n        s.sort()\n        return s\n\n    def put_s(s, s_list):\n        s = get_s(s)\n        for i in range(len(s_list)):\n            if s_list[i] == s:\n                return i\n\n    def check_str(s):\n        str_list = get_str(s)\n        str_list.sort()\n        return str_list\n\n    def check_len(s):\n        len_list = []\n        for i in range(len(s)):\n            if i == 0:\n                len_list.append(len(s))\n            else:\n                len_list.append(len(s)-i)\n        return len_list\n\n    def put_len(s, len_list):\n        return len_list.index(max(len_list))\n\n    def check_sum(s):\n        sum_list = []\n        for i in range(len(s)):\n            if i == 0:\n                sum_list.append(len(s))\n            else:\n                sum_list.append(sum(s)-i)\n        return sum_list\n\n    def put_sum(s, sum_list):\n        return sum_list.index(max(sum_list))\n\n    def check_num(s):\n        num_list = []\n        for i in range(len(s)):\n            if i == 0:\n                num_list.append(1)\n            else:\n                num_list.append(num_list[i-1]+1)\n        return num_list\n\n    def put_num(s, num_list):\n        return num_list.index(max(num_list))\n\n    def check_num_len(s, num_list):\n        num_list = list(map(int, num_list))\n        num_list.sort()\n        return num_list\n\n    def put_num_len(s, num_list):\n        num_list = list(map(int, num_list))\n        num_list.sort()\n        return num_list.index(max(num_list))\n\n    def make_sum_len(s):\n        sum_list = check_sum(s)\n        len_list = check_len(s)\n        sum_len = put_sum(s, sum_list)\n        len_len = put_len(s, len_list)\n        return sum_len, len_len\n\n    def make_num(s):\n        num_list = check_num(s)\n        num_len = put_num(s, num_list)\n        return num_len\n\n    def make_num_len(s):\n        num_list = check_num_len(s)\n        num_len = put_num_len(s, num_list)\n        return num_len\n\n    def make_s(s):\n        sum_list = make_sum_len(s)\n        num_len = make_num(s)\n        s_list = list(s)\n        for i in range(len(s)):\n            if i == sum_list[0]:\n                s_list[sum_list[1]:sum_list[2]] = list(''.join(s_list[i:i+num_len]))\n            if i == num_len[0]:\n                s_list[num_len[1]:num_len[2]] = list(''.join(s_list[i:i+num_len]))\n        return ''.join(s_list)\n\n    def make_b_len(s):\n        b_list = check_b(s)\n        b_len = put_b_len(s, b_list)\n        return b_len\n\n    def make_b_len_mod(s):\n        b_list = check_b(s)\n        b_len = put_b_len_mod(s, b_list)\n        return b_len\n\n    def"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n    for t in range(int(input())):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        print(''.join([s[i-1] for i in b]))\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\nfrom typing import List\nfrom collections import deque\nfrom collections import Counter\n\nclass Solution:\n    def solve(self, str1: str, m: int, b: List[int]) -> str:\n        # Find all indices i where the string \"t\" is shorter than t\n        # Sum the values of the array between indices\n        \n        str1 = 'abcdef'\n        m = 4\n        b = [2, 1, 0, 1]\n        d = {}\n        for i,c in enumerate(str1):\n            d[c] = i\n            \n        def find(target: str) -> bool:\n            res = [0] * len(target)\n            for i in range(len(target)):\n                if target[i] in d:\n                    res[i] = d[target[i]]\n            return res\n        \n        \n        # a, b, c\n        # a, b, c, d, e\n        # a, b, c, d, e, f\n        # a, b, c, d, e, f, g\n        def update(ind: int) -> None:\n            for i in range(ind + 1, len(str1)):\n                if str1[i] in d:\n                    # Update string with length of i\n                    d[str1[i]] = i\n                    # Insert all remaining letters to i\n                    # in the order they appear in the string\n                    s = list(str1)\n                    s.pop(i)\n                    for j in range(len(s)):\n                        if s[j] in d:\n                            # Delete all letters less than i\n                            # from the string\n                            s.pop(j)\n                    # Remove the letters that did not change\n                    # in the string\n                    s = ''.join(s)\n                    if s in d:\n                        i = d[s]\n                    else:\n                        i = 0\n                    # Update array with length of i\n                    d[str1[i]] = i\n                    # Insert remaining letters in the\n                    # order they appear in the string\n                    s = list(str1)\n                    s.pop(i)\n                    for j in range(len(s)):\n                        if s[j] in d:\n                            # Delete all letters less than i\n                            # from the string\n                            s.pop(j)\n                    # Remove the letters that did not change\n                    # in the string\n                    s = ''.join(s)\n                    if s in d:\n                        i = d[s]\n                    else:\n                        i = 0\n                    # Update array with length of i\n                    d[str1[i]] = i\n                \n        \n        for i in range(m - 1):\n            # find all indices i where the string \"t\" is shorter than t\n            if str1[i] in d:\n                res = d[str1[i]]\n                # Sum the values of the array between indices\n                sum1 = sum(range(res + 1, len(str1) - i + 1))\n                # update array with length of i\n                d[str1[i]] = res\n                # Insert all remaining letters to i\n                # in the order they appear in the string\n                s = list(str1)\n                s.pop(res + 1)\n                s.pop(res)\n                s.pop(res)\n                s.pop(res)\n                for j in range(len(s)):\n                    if s[j] in d:\n                        # Delete all letters less than i\n                        # from the string\n                        s.pop(j)\n                # Remove the letters that did not change\n                # in the string\n                s = ''.join(s)\n                if s in d:\n                    i = d[s]\n                else:\n                    i = 0\n                # Update array with length of i\n                d[str1[i]] = i\n                # Insert remaining letters in the\n                # order they appear in the string\n                s = list(str1)\n                s.pop(i + 1)\n                s.pop(i + 1)\n                s.pop(i + 1)\n                s.pop(i + 1)\n                for j in range(len(s)):\n                    if s[j] in d:\n                        # Delete all letters less than i\n                        # from the string\n                        s.pop(j)\n                # Remove the letters that did not change\n                # in the string\n                s = ''.join(s)\n                if s in d:\n                    i = d[s]\n                else"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #1.\n    # if int(stdin)%2==0:\n    #     return stdin\n    # else:\n    #     return \"\".join(sorted(stdin))\n    #2.\n    return \"\".join(sorted(stdin,reverse=True))\n    #3.\n    # stdin = list(stdin)\n    # a = stdin[0]\n    # b = stdin[1]\n    # c = stdin[2]\n    # return \"\".join(sorted([a,b,c],reverse=True))\n    #4.\n    # stdin = list(stdin)\n    # s = \"\".join(stdin)\n    # s = list(s)\n    # s = sorted(s,reverse=True)\n    # return \"\".join(s)\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the string answer to stdin.\"\"\"\n    N = int(stdin)\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    print(letters[N-1])\n    return letters[N-1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')\n    for i in x:\n        print(i)"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 1000000000000001:\n        dog_name = {i:chr(i) for i in range(1,27)}\n        dog_name.update({27:chr(27)})\n        dog_name.update({28:chr(28)})\n        dog_name.update({29:chr(29)})\n        dog_name.update({30:chr(30)})\n        dog_name.update({31:chr(31)})\n        dog_name.update({32:chr(32)})\n        dog_name.update({33:chr(33)})\n        dog_name.update({34:chr(34)})\n        dog_name.update({35:chr(35)})\n        dog_name.update({36:chr(36)})\n        dog_name.update({37:chr(37)})\n        dog_name.update({38:chr(38)})\n        dog_name.update({39:chr(39)})\n        dog_name.update({40:chr(40)})\n        dog_name.update({41:chr(41)})\n        dog_name.update({42:chr(42)})\n        dog_name.update({43:chr(43)})\n        dog_name.update({44:chr(44)})\n        dog_name.update({45:chr(45)})\n        dog_name.update({46:chr(46)})\n        dog_name.update({47:chr(47)})\n        dog_name.update({48:chr(48)})\n        dog_name.update({49:chr(49)})\n        dog_name.update({50:chr(50)})\n        dog_name.update({51:chr(51)})\n        dog_name.update({52:chr(52)})\n        dog_name.update({53:chr(53)})\n        dog_name.update({54:chr(54)})\n        dog_name.update({55:chr(55)})\n        dog_name.update({56:chr(56)})\n        dog_name.update({57:chr(57)})\n        dog_name.update({58:chr(58)})\n        dog_name.update({59:chr(59)})\n        dog_name.update({60:chr(60)})\n        dog_name.update({61:chr(61)})\n        dog_name.update({62:chr(62)})\n        dog_name.update({63:chr(63)})\n        dog_name.update({64:chr(64)})\n        dog_name.update({65:chr(65)})\n        dog_name.update({66:chr(66)})\n        dog_name.update({67:chr(67)})\n        dog_name.update({68:chr(68)})\n        dog_name.update({69:chr(69)})\n        dog_name.update({70:chr(70)})\n        dog_name.update({71:chr(71)})\n        dog_name.update({72:chr(72)})\n        dog_name.update({73:chr(73)})\n        dog_name.update({74:chr(74)})\n        dog_name.update({75:chr(75)})\n        dog_name.update({76:chr(76)})\n        dog_name.update({77:chr(77)})\n        dog_name.update({78:chr(78)})\n        dog_name.update({79:chr(79)})\n        dog_name.update({80:chr(80)})\n        dog_name.update({81:chr(81)})\n        dog_name.update({82:chr(82)})\n        dog_name.update({83:chr(83)})\n        dog_name.update({84:chr(84)})\n        dog_name.update({85:chr(85)})\n        dog_name.update({86:chr(86)})\n        dog_name.update({87:chr(87)})\n        dog_name.update({88:chr(88)})\n        dog_name.update({89:chr(89)})\n        dog_name.update({90:chr(90)})\n        dog_name.update({91:chr(91)})\n        dog_name.update({92:chr(92)})\n        dog_name.update({93:chr(93)})\n        dog_name.update({94:chr(94)})\n        dog_name.update({95:chr(95)})\n        dog_name.update({96:chr(96)})\n        dog_name.update({97:chr(97)})\n        dog_name.update({98:chr(98)})\n        dog_name.update({99:chr(99)})\n        dog_name.update({100:chr(100)})\n        dog_name.update({101:chr(101)})\n        dog_name.update({102:chr(102)})\n        dog_name.update({103:chr(103)})\n        dog_name.update({104:chr(104)})\n        dog_name.update({105:chr(105)})\n        dog_name.update({106:chr(106)})\n        dog_name.update({107:chr(107)})\n        dog_name.update({108:chr(108)})\n        dog_name.update({109:chr(109)})\n        dog_name.update({110:chr(110)})\n        dog_name.update({111:chr(111)})\n        dog_name.update({112:chr(112)})\n        dog_name.update({113:chr(113)})\n        dog_name.update({114:chr(114)})\n        dog_name.update({115:chr(115)})\n        dog_name.update({116:chr(116)})\n        dog_name.update({117:chr(117)})\n        dog_name.update({118:chr(118)})\n        dog_name.update({119:chr(119)})\n        dog_name.update({120:chr(120)})\n        dog_name.update({121:chr(121)})\n        dog_name.update({122:chr(122)})\n        dog_name.update({123:chr(123)"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    s = ''\n    while num > 0:\n        s += chr(97 + (num % 26))\n        num = num // 26\n    return s"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 1000000000000001:\n        dog_name = ''\n        for i in range(1, N+1):\n            if i <= 26:\n                dog_name += 'a'\n            elif 27 <= i <= 26**2:\n                dog_name += 'aa'\n            elif 27**2 <= i <= 26**3:\n                dog_name += 'aaa'\n            elif 27**3 <= i <= 26**4:\n                dog_name += 'aaaa'\n            elif 27**4 <= i <= 26**5:\n                dog_name += 'aaaaa'\n            elif 27**5 <= i <= 26**6:\n                dog_name += 'aaaaaa'\n            elif 27**6 <= i <= 26**7:\n                dog_name += 'aaaaaaa'\n            elif 27**7 <= i <= 26**8:\n                dog_name += 'aaaaaaaa'\n            elif 27**8 <= i <= 26**9:\n                dog_name += 'aaaaaaaaa'\n            elif 27**9 <= i <= 26**10:\n                dog_name += 'aaaaaaaaaa'\n            elif 27**10 <= i <= 26**11:\n                dog_name += 'aaaaaaaaaaa'\n            elif 27**11 <= i <= 26**12:\n                dog_name += 'aaaaaaaaaaaa'\n            elif 27**12 <= i <= 26**13:\n                dog_name += 'aaaaaaaaaaaaa'\n            elif 27**13 <= i <= 26**14:\n                dog_name += 'aaaaaaaaaaaaaa'\n            elif 27**14 <= i <= 26**15:\n                dog_name += 'aaaaaaaaaaaaaaa'\n            elif 27**15 <= i <= 26**16:\n                dog_name += 'aaaaaaaaaaaaaaaa'\n            elif 27**16 <= i <= 26**17:\n                dog_name += 'aaaaaaaaaaaaaaaaa'\n            elif 27**17 <= i <= 26**18:\n                dog_name += 'aaaaaaaaaaaaaaaaaa'\n            elif 27**18 <= i <= 26**19:\n                dog_name += 'aaaaaaaaaaaaaaaaaaa'\n            elif 27**19 <= i <= 26**20:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaa'\n            elif 27**20 <= i <= 26**21:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaa'\n            elif 27**21 <= i <= 26**22:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**22 <= i <= 26**23:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**23 <= i <= 26**24:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**24 <= i <= 26**25:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**25 <= i <= 26**26:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**26 <= i <= 26**27:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**27 <= i <= 26**28:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**28 <= i <= 26**29:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**29 <= i <= 26**30:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**30 <= i <= 26**31:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**31 <= i <= 26**32:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**32 <= i <= 26**33:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**33 <= i <= 26**34:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**34 <= i <= 26**35:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**35 <= i <= 26**36:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**36 <= i <= 26**37:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**37 <= i <= 26**38:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**38 <= i <= 26**39:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**39 <= i <= 26**40:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**40 <= i <= 26**41:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**41 <= i <= 26**42:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**42 <= i <= 26**43:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**43 <= i <= 26**44:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**44 <= i <= 26**45:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**45 <= i <= 26**46:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**46 <= i <= 26**47:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**47 <= i <= 26**48:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**48 <= i <= 26**49:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**49 <= i <= 26**50:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**50 <= i <= 26**51:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**51 <= i <= 26**52:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**52 <= i <= 26**53:\n                dog_name += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            elif 27**53 <= i <= 26**54:\n                dog"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(range(1, n+1))\n    lst2 = list(map(lambda x: chr(x + 96), lst))\n    lst3 = list(map(lambda x: chr(x + 64), lst2))\n    lst4 = list(map(lambda x: chr(x + 32), lst3))\n    return ''.join(lst4)"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    for i in range(1, 101000001):\n        if i == 27:\n            stdout = stdout + 'a'\n        elif i == 28:\n            stdout = stdout + 'aa'\n        elif i == 29:\n            stdout = stdout + 'aaa'\n        elif i == 30:\n            stdout = stdout + 'aaaa'\n        elif i == 31:\n            stdout = stdout + 'aaaaa'\n        elif i == 32:\n            stdout = stdout + 'aaaaaa'\n        elif i == 33:\n            stdout = stdout + 'aaaaaaa'\n        elif i == 34:\n            stdout = stdout + 'aaaaaaaa'\n        elif i == 35:\n            stdout = stdout + 'aaaaaaaaa'\n        elif i == 36:\n            stdout = stdout + 'aaaaaaaaaa'\n        elif i == 37:\n            stdout = stdout + 'aaaaaaaaaaa'\n        elif i == 38:\n            stdout = stdout + 'aaaaaaaaaaaa'\n        elif i == 39:\n            stdout = stdout + 'aaaaaaaaaaaaa'\n        elif i == 40:\n            stdout = stdout + 'aaaaaaaaaaaaaa'\n        elif i == 41:\n            stdout = stdout + 'aaaaaaaaaaaaaaa'\n        elif i == 42:\n            stdout = stdout + 'aaaaaaaaaaaaaaaa'\n        elif i == 43:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaa'\n        elif i == 44:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaa'\n        elif i == 45:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaa'\n        elif i == 46:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaa'\n        elif i == 47:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaa'\n        elif i == 48:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 49:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 50:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 51:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 52:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 53:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 54:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 55:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 56:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 57:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 58:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 59:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 60:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 61:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 62:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 63:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 64:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 65:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 66:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 67:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 68:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 69:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 70:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 71:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 72:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 73:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 74:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 75:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 76:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 77:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 78:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 79:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 80:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 81:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 82:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 83:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 84:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 85:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 86:\n            stdout = stdout + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n        elif i == 87:\n            stdout = stdout + '"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        stdin = stdin.rstrip()\n        n = int(stdin)\n    except ValueError as e:\n        print(f\"{type(e).__name__}: {e}\")\n        return \"\"\n    if 1 <= n <= 1000000000000001:\n        letters = 'abcdefghijklmnopqrstuvwxyz'\n        for i in range(1, 27):\n            letters += 'aa'\n            letters += 'ab'\n            letters += 'ac'\n            letters += 'ad'\n            letters += 'ae'\n            letters += 'af'\n            letters += 'ag'\n            letters += 'ah'\n            letters += 'ai'\n            letters += 'aj'\n            letters += 'ak'\n            letters += 'al'\n            letters += 'am'\n            letters += 'an'\n            letters += 'ao'\n            letters += 'ap'\n            letters += 'aq'\n            letters += 'ar'\n            letters += 'as'\n            letters += 'at'\n            letters += 'au'\n            letters += 'av'\n            letters += 'aw'\n            letters += 'ax'\n            letters += 'ay'\n            letters += 'az'\n            letters += 'ba'\n            letters += 'bb'\n            letters += 'bc'\n            letters += 'bd'\n            letters += 'be'\n            letters += 'bf'\n            letters += 'bg'\n            letters += 'bh'\n            letters += 'bi'\n            letters += 'bj'\n            letters += 'bk'\n            letters += 'bl'\n            letters += 'bm'\n            letters += 'bn'\n            letters += 'bo'\n            letters += 'bp'\n            letters += 'bq'\n            letters += 'br'\n            letters += 'bs'\n            letters += 'bt'\n            letters += 'bu'\n            letters += 'bv'\n            letters += 'bw'\n            letters += 'bx'\n            letters += 'by'\n            letters += 'bz'\n            letters += 'ca'\n            letters += 'cb'\n            letters += 'cc'\n            letters += 'cd'\n            letters += 'ce'\n            letters += 'cf'\n            letters += 'cg'\n            letters += 'ch'\n            letters += 'ci'\n            letters += 'cj'\n            letters += 'ck'\n            letters += 'cl'\n            letters += 'cm'\n            letters += 'cn'\n            letters += 'co'\n            letters += 'cp'\n            letters += 'cq'\n            letters += 'cr'\n            letters += 'cs'\n            letters += 'ct'\n            letters += 'cu'\n            letters += 'cv'\n            letters += 'cw'\n            letters += 'cx'\n            letters += 'cy'\n            letters += 'cz'\n            letters += 'da'\n            letters += 'db'\n            letters += 'dc'\n            letters += 'dd'\n            letters += 'de'\n            letters += 'df'\n            letters += 'dg'\n            letters += 'dh'\n            letters += 'di'\n            letters += 'dj'\n            letters += 'dk'\n            letters += 'dl'\n            letters += 'dm'\n            letters += 'dn'\n            letters += 'do'\n            letters += 'dp'\n            letters += 'dq'\n            letters += 'dr'\n            letters += 'ds'\n            letters += 'dt'\n            letters += 'du'\n            letters += 'dv'\n            letters += 'dw'\n            letters += 'dx'\n            letters += 'dy'\n            letters += 'dz'\n            letters += 'ea'\n            letters += 'eb'\n            letters += 'ec'\n            letters += 'ed'\n            letters += 'ee'\n            letters += 'ef'\n            letters += 'eg'\n            letters += 'eh'\n            letters += 'ei'\n            letters += 'ej'\n            letters += 'ek'\n            letters += 'el'\n            letters += 'em'\n            letters += 'en'\n            letters += 'eo'\n            letters += 'ep'\n            letters += 'eq'\n            letters += 'er'\n            letters += 'es'\n            letters += 'et'\n            letters += 'eu'\n            letters += 'ev'\n            letters += 'ew'\n            letters += 'ex'\n            letters += 'ey'\n            letters += 'ez'\n            letters += 'fa'\n            letters += 'fb'\n            letters += 'fc'\n            letters += 'fd'\n            letters += 'fe'\n            letters += 'ff'\n            letters += 'fg'\n            letters += 'fh'\n            letters += 'fi'\n            letters += 'fj'\n            letters += 'fk'\n            letters += 'fl'\n            letters += 'fm'\n            letters += 'fn'\n            letters += 'fo'\n            letters += 'fp'\n            letters += 'fq'\n            letters += 'fr'\n            letters += 'fs'\n            letters += 'ft'\n            letters += 'fu'\n            letters += 'fv'\n            letters += 'fw'\n            letters += 'fx'\n            letters += 'fy'\n            letters += 'fz'\n            letters += 'ga'\n            letters += 'gb'\n            letters += 'gc'\n            letters += 'gd'\n            letters += 'ge'\n            letters += 'gf'\n            letters += 'gg'\n            letters += 'gh'\n            letters += 'gi'\n            letters += 'gj'\n            letters += 'gk'\n            letters += 'gl'\n            letters += 'gm'\n            letters += 'gn'\n            letters += 'go'\n            letters += 'gp'\n            letters += 'gq'\n            letters += 'gr'\n            letters += 'gs'\n            letters += 'gt'\n            letters += 'gu'\n            letters += 'gv'\n            letters += 'gw'\n            letters += 'gx'\n            letters += 'gy'\n            letters += 'gz'\n            letters += 'ha'\n            letters += 'hb'\n            letters += 'hc'\n            letters += 'hd'\n            letters += 'he'\n            letters += 'hf'\n            letters += 'hg'\n            letters += 'hh'\n            letters += 'hi'\n            letters += 'hj'\n            letters += 'hk'\n            letters += 'hl'\n            letters += 'hm'\n            letters += 'hn'\n            letters += 'ho'\n            letters += 'hp'\n            letters += 'hq'\n            letters += 'hr'\n            letters += 'hs'\n            letters += 'ht'\n            letters += 'hu'\n            letters += 'hv'\n            letters += 'hw'\n            letters += 'hx'\n            letters += 'hy'\n            letters += 'hz'\n            "
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_int = int(stdin)\n    name_dict = {i:chr(i+96) for i in range(1,27)}\n    name_dict['aa'] = 'aaa'\n    name_dict['ab'] = 'aab'\n    name_dict['ac'] = 'aac'\n    name_dict['ad'] = 'aad'\n    name_dict['ae'] = 'aae'\n    name_dict['af'] = 'aaf'\n    name_dict['ag'] = 'aag'\n    name_dict['ah'] = 'aah'\n    name_dict['ai'] = 'aai'\n    name_dict['aj'] = 'aaj'\n    name_dict['ak'] = 'aak'\n    name_dict['al'] = 'ala'\n    name_dict['am'] = 'ama'\n    name_dict['an'] = 'an'\n    name_dict['ao'] = 'ao'\n    name_dict['ap'] = 'ap'\n    name_dict['aq'] = 'aq'\n    name_dict['ar'] = 'ara'\n    name_dict['as'] = 'as'\n    name_dict['at'] = 'at'\n    name_dict['au'] = 'au'\n    name_dict['av'] = 'ava'\n    name_dict['aw'] = 'aw'\n    name_dict['ax'] = 'ax'\n    name_dict['ay'] = 'ay'\n    name_dict['az'] = 'aza'\n    name_dict['ba'] = 'ba'\n    name_dict['bb'] = 'bb'\n    name_dict['bc'] = 'bc'\n    name_dict['bd'] = 'bd'\n    name_dict['be'] = 'be'\n    name_dict['bf'] = 'bf'\n    name_dict['bg'] = 'bg'\n    name_dict['bh'] = 'bh'\n    name_dict['bi'] = 'bi'\n    name_dict['bj'] = 'bj'\n    name_dict['bk'] = 'bk'\n    name_dict['bl'] = 'bl'\n    name_dict['bm'] = 'bm'\n    name_dict['bn'] = 'bn'\n    name_dict['bo'] = 'bo'\n    name_dict['bp'] = 'bp'\n    name_dict['bq'] = 'bq'\n    name_dict['br'] = 'br'\n    name_dict['bs'] = 'bs'\n    name_dict['bt'] = 'bt'\n    name_dict['bu'] = 'bu'\n    name_dict['bv'] = 'bv'\n    name_dict['bw'] = 'bw'\n    name_dict['bx'] = 'bx'\n    name_dict['by'] = 'by'\n    name_dict['bz'] = 'bz'\n    name_dict['ca'] = 'ca'\n    name_dict['cb'] = 'cb'\n    name_dict['cc'] = 'cc'\n    name_dict['cd'] = 'cd'\n    name_dict['ce'] = 'ce'\n    name_dict['cf'] = 'cf'\n    name_dict['cg'] = 'cg'\n    name_dict['ch'] = 'ch'\n    name_dict['ci'] = 'ci'\n    name_dict['cj'] = 'cj'\n    name_dict['ck'] = 'ck'\n    name_dict['cl'] = 'cl'\n    name_dict['cm'] = 'cm'\n    name_dict['cn'] = 'cn'\n    name_dict['co'] = 'co'\n    name_dict['cp'] = 'cp'\n    name_dict['cq'] = 'cq'\n    name_dict['cr'] = 'cr'\n    name_dict['cs'] = 'cs'\n    name_dict['ct'] = 'ct'\n    name_dict['cu'] = 'cu'\n    name_dict['cv'] = 'cv'\n    name_dict['cw'] = 'cw'\n    name_dict['cx'] = 'cx'\n    name_dict['cy'] = 'cy'\n    name_dict['cz'] = 'cz'\n    name_dict['da'] = 'da'\n    name_dict['db'] = 'db'\n    name_dict['dc'] = 'dc'\n    name_dict['dd'] = 'dd'\n    name_dict['de'] = 'de'\n    name_dict['df'] = 'df'\n    name_dict['dg'] = 'dg'\n    name_dict['dh'] = 'dh'\n    name_dict['di'] = 'di'\n    name_dict['dj'] = 'dj'\n    name_dict['dk'] = 'dk'\n    name_dict['dl'] = 'dl'\n    name_dict['dm'] = 'dm'\n    name_dict['dn'] = 'dn'\n    name_dict['do'] = 'do'\n    name_dict['dp'] = 'dp'\n    name_dict['dq'] = 'dq'\n    name_dict['dr'] = 'dr'\n    name_dict['ds'] = 'ds'\n    name_dict['dt'] = 'dt'\n    name_dict['du'] = 'du'\n    name_dict['dv'] = 'dv'\n    name_dict['dw'] = 'dw'\n    name_dict['dx'] = 'dx'\n    name_dict['dy'] = 'dy'\n    name_dict['dz'] = 'dz'\n    name_dict['ea'] = 'ea'\n    name_dict['eb'] = 'eb'\n    name_dict['ec'] = 'ec'\n    name_dict['ed'] = 'ed'\n    name_dict['ee'] = 'ee'\n    name_dict['ef'] = 'ef'\n    name_dict['eg'] = 'eg'\n    name_dict['eh'] = 'eh'\n    name_dict['ei'] = 'ei'\n    name_dict['ej'] = 'ej'\n    name_dict['ek'] = 'ek'\n    name_dict['el'] = 'el'\n    name_dict['em'] = 'em'\n    name_dict['en'] = 'en'\n    name_dict['eo'] = 'eo'\n    name_dict['ep'] = 'ep'\n    name_dict['eq'] = 'eq'\n    name_dict['er'] = 'er'\n    name_dict['es'] = 'es'\n    name_dict['et'] = 'et'\n    name_dict['eu'] = 'eu'\n    name_dict['ev'] = 'ev'\n    "
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    best_words = []\n    best_abbrev = 0\n    for i in range(len(words)):\n        if (words[i] in words[i + 1:]) and (words[i + 1] in words[i + 2:]):\n            best_words.append(words[i])\n            best_words.append(words[i + 1])\n            best_words.append(words[i + 2])\n            best_abbrev = max(len(best_words[0]), len(best_words[1]), len(best_words[2]))\n    if best_abbrev == 0:\n        return best_words[0]\n    elif best_abbrev == len(best_words[0]):\n        return best_words[1]\n    else:\n        return best_words[2]\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([str(len(set(word))) for word in stdin.split()])\n    # +++your code here+++"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    # min_len = float('inf')\n    min_len = len(words)\n    for i in range(len(words) - 1):\n        for j in range(i + 1, len(words)):\n            if len(words[i]) == len(words[j]):\n                if all(words[i][k] == words[j][k] for k in range(len(words[i]))):\n                    continue\n                else:\n                    min_len = min(min_len, len(words[i]) + len(words[j]))\n    return min_len\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n\n    min_len = float('inf')\n    for i in range(n):\n        for j in range(i, n):\n            if j - i <= j - i and words[i]!= words[j]:\n                words_without_i = words[:i] + words[i+1:]\n                words_without_j = words[:j] + words[j+1:]\n                min_len = min(min_len, len(words_without_i[0]) + len(words_without_j[0]))\n    return min_len\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    text = stdin.split()[1:]\n\n    def is_palindrome(text: str) -> bool:\n        if len(text) % 2 == 0:\n            return all(text[i] == text[len(text) - 1 - i] for i in range(len(text) // 2))\n        else:\n            return any(text[i] == text[len(text) - 1 - i] for i in range(len(text) // 2))\n\n    def is_palindrome_in_segment(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_segment(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return is_palindrome_in_segment(text, left + 1, right) or is_palindrome_in_segment(text, left, right - 1)\n\n    def is_palindrome_in_subsegments_2(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_2(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_3(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return is_palindrome_in_subsegments_2(text, left + 1, right) or is_palindrome_in_subsegments_2(text, left, right - 1)\n\n    def is_palindrome_in_subsegments_4(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_4(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_5(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_5(text, left + 1, right - 1) or \\\n                   text[left] == text[right] and is_palindrome_in_subsegments_5(text, left, right - 1)\n\n    def is_palindrome_in_subsegments_6(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_6(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_7(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_7(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_8(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_8(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_9(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_9(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_10(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_10(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_11(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_11(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_12(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text[right] and is_palindrome_in_subsegments_12(text, left + 1, right - 1)\n\n    def is_palindrome_in_subsegments_13(text: str, left: int, right: int) -> bool:\n        if left >= right:\n            return True\n        else:\n            return text[left] == text"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    length = len(words)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if len(words[i]) == len(words[j]) and words[i]!= words[j]:\n                if words[i] == words[j][:len(words[i])]:\n                    return len(words[i])\n    for i in range(length):\n        if words[i][0].isupper():\n            words[i] = words[i][0].lower() + words[i][1:]\n    for i in range(length):\n        words[i] = words[i].replace(words[i][:len(words[i])], words[i][:1].upper() + words[i][1:])\n    return sum([len(words[i]) for i in range(length)])\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()\n    n_words = len(words)\n    # m_count = (n_words - 1) / 2\n    # max_word = n_words - 1\n    # solution = max_word\n    #\n    # while m_count > 0:\n    #     m_count -= 1\n    #     max_word -= 1\n    #     solution = max(solution, max_word)\n    #     for i in range(max_word - 1, 0, -1):\n    #         if words[i]!= words[i - 1]:\n    #             words[i - 1] = words[i].upper()\n    #             words[i] = words[i].upper()\n    #             solution = min(solution, i)\n    #             break\n    #     else:\n    #         words[0] = words[0].upper()\n    #         solution = min(solution, 1)\n    # print(solution)\n    # return solution\n    first_letter = \"\"\n    for word in words:\n        first_letter = word[0] if first_letter == \"\" else first_letter\n    if first_letter!= \"\":\n        words = [[word] + word[1:].split() for word in words]\n    else:\n        words = words[::-1]\n\n    # print(words)\n    for i in range(1, len(words)):\n        if words[i - 1][-1] == words[i][0]:\n            words[i - 1][-1] = words[i - 1][-1].upper()\n            words[i][0] = words[i][0].upper()\n        else:\n            words[i - 1].append(words[i][0])\n            words[i - 1][-1] = words[i - 1][-1].upper()\n            words[i][0] = words[i][0].upper()\n    # print(words)\n\n    # print([word for i in words for word in i if word[0]!= i[0]])\n    return sum([word[0]!= word[-1] for i in words for word in i if word[0]!= i[0]]) + 2"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.split()\n    n = int(input())\n    segment_count = 0\n    length_s = 0\n    start_i = 0\n    end_i = 0\n    while end_i < len(text):\n        if segment_count == 0:\n            segment_count += 1\n            start_i = end_i\n        if text[end_i] == text[start_i]:\n            end_i += 1\n        else:\n            length_s += end_i - start_i + 1\n            segment_count += 1\n            start_i = end_i\n    length_s += end_i - start_i + 1\n    return length_s\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    text_length = int(input_data.pop(0))\n\n    words = list(input_data)\n    first = []\n    second = []\n    for word in words:\n        if word.isupper():\n            first.append(word)\n        else:\n            second.append(word)\n\n    while True:\n        if len(first) == 0 or len(second) == 0:\n            break\n        if len(first) < len(second):\n            first.append(first.pop(0))\n        elif len(second) < len(first):\n            second.append(second.pop(0))\n        else:\n            if first[0]!= second[0]:\n                first.append(first.pop(0))\n                second.append(second.pop(0))\n\n    if len(first) == 0:\n        first = second\n    if len(second) == 0:\n        second = first\n\n    if len(first) == 1 and len(second) == 1:\n        print(len(first[0]) + len(second[0]) - 2)\n    else:\n        print(min([len(first[0]) + len(second[0]) - 2, len(first[0]) + len(second[0]) - 3, len(first[0]) + len(second[0]) - 4]))\n\n\nsolution(input())\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    best = 0\n    best_sequence = []\n    def solve(day):\n        nonlocal best\n        nonlocal best_sequence\n        if day == k:\n            if best < sum(a):\n                best = sum(a)\n                best_sequence = a[:]\n            return\n        for i in range(n):\n            if a[i] > 0:\n                a[i] -= 1\n                solve(day + 1)\n                a[i] += 1\n    solve(1)\n    return str(best)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > k:\n        return '0'\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n        dp[i][1] = dp[i - 1][0] + a[i - 1]\n    for j in range(2, k + 1):\n        for i in range(1, n + 1):\n            maxi = 0\n            if j <= i:\n                maxi = max(maxi, dp[i - 1][j - 1])\n            maxi = max(maxi, dp[i - 1][j])\n            dp[i][j] = maxi + a[i - 1]\n    return str(dp[n][k])"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    return str(max(i*a[i-1] for i in range(1, n+1)))+\" \"+str(k)+\" \"+str([i+1 for i in range(n) if i % k == 0 or i % k == 1][0])+\" \"+str([i+1 for i in range(n) if i % k == 0 or i % k == 1][1])"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    t = []\n    profit = 0\n    for j in range(0, n):\n        for i in range(k):\n            if profit + a[j] > n:\n                t.append(profit)\n                break\n            profit += a[j]\n            if profit >= n:\n                t.append(profit)\n                break\n            if profit + a[j] < n:\n                profit += a[j]\n                continue\n    return str(max(t)) + \" \" + str(max(range(k)))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  >>> solution('''8 3\n ... 5 4 2 6 5 1 9 2\n ... ''')\n  '20'\n  >>> solution('''5 1\n ... 1 1 1 1 1\n ... ''')\n  '5'\n  >>> solution('''4 2\n ... 1 2000 2000 2\n ... ''')\n  '4000'\n  \"\"\"\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  dp = [[0] * (k + 1) for _ in range(n + 1)]\n  for i in range(1, n + 1):\n    for j in range(k + 1):\n      if j < a[i - 1]:\n        dp[i][j] = dp[i - 1][j]\n      else:\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + a[i - 1])\n  return str(dp[n][k])\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    best = 0\n    for i in range(1, k+1):\n        a_sorted = sorted(a, reverse=True)\n        while a_sorted:\n            x = a_sorted.pop()\n            x_profit = x*i\n            if x_profit > best:\n                best = x_profit\n            else:\n                break\n    return str(best)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    max_profit = 0\n\n    for i in range(K):\n        dp = []\n        for j in range(len(A)):\n            if j + 1 < len(A):\n                dp.append(max(A[j] + dp[j], A[j + 1]))\n            else:\n                dp.append(A[j])\n\n        max_profit = max(max_profit, max(dp))\n\n    return str(max_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    days = [0] * k\n    ans = 0\n\n    for i in range(len(prices)):\n        days[i % k] += prices[i]\n    for i in range(k):\n        ans = max(ans, days[i] * (i + 1))\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    return str(get_solutions(n, k, problems))\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split('-')))\n    if len(a) == 1 and a[0] == 0:\n        return '0'\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if a[i - 1] > 0:\n            dp[i] += dp[i - 1]\n        for j in range(i - 1, -1, -1):\n            if a[i - 1] - a[j - 1] < 0:\n                break\n            if a[i - 1] - a[j - 1] > 0 and dp[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(dp[n])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    s = 0\n    i = 0\n    while s <= 0:\n        s += a[i]\n        i += 1\n    while i <= n - 1:\n        s += a[i]\n        i += 1\n        if s <= 0:\n            return str(i - 1)\n        else:\n            s -= a[i - 1]\n            i += 1\nsolution(\"\"\"5\n-16 5 11 -15 4 10 5 4 -4\"\"\")"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = 0\n    k = 0\n    while k < len(a):\n        s += a[k]\n        if s == 0:\n            break\n        k += 1\n    if k == len(a):\n        return \"0\"\n    i = 0\n    while i < k:\n        s -= a[i]\n        i += 1\n        if s == 0:\n            break\n    return str(k - i)"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    assert n <= 20000\n    a.sort()\n    i, j = 0, 0\n    s = 0\n    while j < n:\n        s += a[j]\n        if s == 0:\n            i += 1\n        j += 1\n    return str(i)"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    sums = 0\n    for i in range(n-1):\n        sums += arr[i]\n        if sums == 0:\n            return str(i)\n\n    return str(0)"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    array = stdin.split()\n    array = [int(i) for i in array]\n    array = set(array)\n    print(len(array))\n    return"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(lambda x: int(x), stdin.split(\"\\n\")[1].split()))\n\n    # calculate cumulative sum of a\n    cumulative_sum: List[int] = [0]\n    for i in range(n):\n        cumulative_sum.append(cumulative_sum[i] + a[i])\n\n    # check all subsegments\n    # (take the end of the subsegment, and the start of the next)\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            # if we have a subsegment with sum 0\n            if cumulative_sum[j] == 0:\n                print(j, i)\n                return j + 1\n    return 0\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    res = 0\n    start = 0\n    summ = 0\n    while start < n:\n        if summ == 0:\n            summ = a[start]\n            start += 1\n        else:\n            summ = summ + a[start]\n            if summ == 0:\n                res += 1\n                summ = a[start]\n                start += 1\n            else:\n                summ = 0\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if max(a) == 0:\n        return 0\n    s = sum(a)\n    ans = 0\n    for i in range(n - 1):\n        if a[i] > 0:\n            break\n        if s - a[i] == 0:\n            ans += 1\n            continue\n        if s - a[i] > 0:\n            s -= a[i]\n            continue\n    return ans\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    array.sort()\n    length = len(array)\n    if length < 2:\n        return \"0\"\n    array.pop()\n    sum = 0\n    for i in range(0, length - 1):\n        sum += abs(array[i] - array[i + 1])\n    return str(sum)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    if n > 1:\n        a = list(map(int, stdin.split()))\n        a.append(0)\n        a.sort()\n        #print(a)\n        return str(abs(a[n-2]-a[n-1]))\n    elif n == 1:\n        return str(abs(int(stdin.split()[1]) - int(stdin.split()[0])))"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        a = [i for i in range(n)]\n        s = m\n        res = 0\n        for i in range(n-1):\n            res = res + abs(a[i] - a[i+1])\n            if res > s:\n                break\n        print(res)\n\n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def sum_diff(arr, m):\n        sum_ = 0\n        for i in range(len(arr)):\n            sum_ += abs(arr[i]-arr[i+1])\n        return sum_\n    # Number of test cases\n    t = int(stdin)\n    for i in range(t):\n        # Length of the array\n        n = int(stdin.split()[i])\n        # Sum of array\n        m = int(stdin.split()[i+1])\n        # Build the array\n        arr = list(map(int, stdin.split()[i+2:i+2+n]))\n        # Maximum possible sum of absolute differences\n        max_ = max(sum_diff(arr, m), abs(sum_diff(arr, m)-sum_diff(arr[1:], m)))\n        print(max_)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: stdout\n    \"\"\"\n    T = int(stdin.split()[0])  # number of test cases\n    for i in range(T):\n        n, m = map(int, stdin.split()[1:3])\n        a = list(map(int, stdin.split()[3:]))\n        return\n    return"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split()\n    m = int(m)\n    n = int(stdin.split()[0])\n    max_dif = 0\n    dif = []\n    for i in range(n):\n        dif.append(abs(int(stdin.split()[i+1]) - int(stdin.split()[i])))\n        if dif[i] > max_dif:\n            max_dif = dif[i]\n    return str(max_dif)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for _ in range(n - 1):\n        # 1 + 2\n        m += abs(int(stdin.split()[0]) - int(stdin.split()[1]))\n        stdin = stdin.split()[2:]\n    return str(m)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin)"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sequence = [int(i) for i in stdin.split(\"\\n\") if i!= \"\"]\n    print(sequence)\n    \n    k = int(stdin)\n    count = 1\n    prev = sequence[0]\n    for i in range(1, len(sequence)):\n        if sequence[i] == k:\n            count += 1\n        elif sequence[i] > k:\n            print(count)\n            return str(prev)\n        else:\n            count = 1\n            prev = sequence[i]\n    print(count)\n    return str(prev)\n\nsolution(input())"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.split()\n    for i in range(1,len(sequence)):\n        if sequence[i] == sequence[0]:\n            print(i)\n        else:\n            break\n    else:\n        print(\"-1\")\n\nsolution(input())\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin\n    multiples = []\n    for i in range(1, len(sequence)):\n        if sequence[i - 1]!= 0:\n            multiples.append(int(sequence[i - 1]) * i)\n\n    for j in range(1, len(sequence)):\n        if sequence[j] == sequence[j - 1]:\n            multiples.append(int(sequence[j]))\n\n    if not multiples:\n        return -1\n\n    print(sequence.index(max(multiples)))\n    return sequence.index(max(multiples))\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 1000000):\n        if str(i).count(\"7\") == 1:\n            return str(i)"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split('\\n')[0]\n    lst = lst.split(' ')\n    k = int(lst[0])\n    lst.pop(0)\n    lst.pop(-1)\n    i = 0\n    while i < len(lst):\n        if lst[i] % k == 0:\n            i += 1\n        else:\n            i += 1\n            if lst[i] % k == 0:\n                print(i)\n            else:\n                i += 1\n    return None"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    k = int(stdin)\n    for i in range(10,100000):\n        if i % k == 0:\n            return str(i)\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    k = int(numbers[0])\n    \n    if not (k>1 and k<=10**6):\n        return 'Invalid'\n\n    if k*k == 1:\n        return 'Invalid'\n    \n    for i in range(0, len(numbers)):\n        if k*k in numbers:\n            return str(i+1)\n    \n    return 'Invalid'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"None\"\n    else:\n        sequence = []\n        sequence.append(int(stdin))\n        sequence = sorted(sequence)\n        i = 0\n        while True:\n            if sequence[i] % int(stdin)!= 0:\n                if i + 1 == len(sequence):\n                    return -1\n                else:\n                    i += 1\n            else:\n                break\n    return str(i)\n    # sequence = sorted(sequence)\n    # for i in range(len(sequence)):\n    #     if sequence[i] % int(stdin) == 0:\n    #         return str(i)\n    # return -1"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function.\n\n    >>> solution(SAMPLE_STDIN)\n    4\n    >>> solution(SAMPLE_STDIN)\n    None\n    >>> solution(SAMPLE_STDIN)\n    None\n    \"\"\"\n    k, n = (int(i) for i in stdin.split(\"\\n\"))\n    for i in range(n):\n        if (k * (i + 1)) % n == 0:\n            return str(i)\n    return \"None of 7, 77, and 777 is a multiple of 101, but 7777 is.\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isdigit():\n        return str(k_first_index_of_first_multiple(int(stdin), int(input())))\n    else:\n        return \"None of 7, 77, and 777 is a multiple of 101, but 7777 is.\"\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    p = list(map(int, stdin[2].split()))\n\n    def median(p):\n        if len(p) % 2 == 0:\n            return (p[len(p) // 2 - 1] + p[len(p) // 2]) / 2\n        else:\n            return p[len(p) // 2]\n\n    def find(p, m, r):\n        r = len(p) - 1\n        while m > p[r]:\n            r -= 1\n        l = r\n        while m < p[l]:\n            l -= 1\n        return l, r\n\n    def solve(p, m, k, l, r):\n        if r - l == 1:\n            return 0\n        if m - p[l] <= k:\n            return (solve(p, m, k, l, r) + r - l) // 2\n        else:\n            l2, r2 = find(p, m, r)\n            return (solve(p, m, k, l, l2) + r2 - l) // 2\n\n    return str(solve(p, m, (m - 1) // 2, 0, n))\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = sorted(map(int, stdin.strip().split()))\n    if len(a) % 2 == 0:\n        return str(len(a) // 2)\n    return str(len(a) // 2 + 1)"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n\n    low, high = 0, len(arr) - 1\n\n    while low < high:\n        if arr[low] + arr[high] == m:\n            return f'{(low + 1) * 2 + (high + 1) * 2 - 4}'\n        if arr[low] + arr[high] < m:\n            low += 1\n        else:\n            high -= 1\n    return f'{low * 2 + high * 2 - 4}'\n\n\nprint(solution(input()))"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    sequence = list(map(int, stdin.strip().split()))\n    sequence.sort()\n    count = 0\n    median = sequence[n//2] if n % 2 == 0 else sequence[n//2] + sequence[n//2 + 1]\n    for i in range(n):\n        if sequence[i] == median:\n            count += 1\n    return str(count)\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    n, m = stdin[0], stdin[1]\n    p = list(map(int, stdin[2].split()))\n\n    l_index = 0\n    r_index = len(p) - 1\n    count = 0\n    while l_index < r_index:\n        median = p[l_index] + p[r_index]\n        if m == median:\n            count += 1\n        if m < median:\n            r_index -= 1\n        elif m > median:\n            l_index += 1\n\n    print(count)"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = sorted(map(int, stdin.split()))\n    count = 0\n    for i in range(n-1, 0, -1):\n        if p[i] < m:\n            count += i\n            break\n    for j in range(i, n):\n        if p[j] >= m:\n            break\n        count += j - i + 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    perm = list(map(int, stdin.split()))\n    perm.sort()\n    median_idx = (len(perm) - 1) // 2\n    first_half_start = median_idx\n    second_half_start = median_idx + 1\n    first_half_end = len(perm)\n    second_half_end = len(perm)\n    res = 0\n    while first_half_end > first_half_start > second_half_start > second_half_end:\n        if perm[first_half_start] + perm[second_half_start] == m:\n            res += 1\n        first_half_end -= 1\n        second_half_start += 1\n        second_half_end += 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n\n    if len(p) % 2 == 0:\n        idx = p[n//2]\n    else:\n        idx = p[n//2]\n\n    # find the median\n    l = (n + 1) // 2 - 1\n    r = (n + 1) // 2\n    while l >= 0 and r < n:\n        if p[l] > idx:\n            r += 1\n        elif p[r] < idx:\n            l -= 1\n        else:\n            break\n    print(l, r)\n\n    # find the number of pairs that have the given median\n    m = 0\n    for i in range(n):\n        if p[i] < idx:\n            m += i - l\n        else:\n            m += n - i - 1 - r\n    print(m)\n    return str(m)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    p = list(map(int, stdin.split()[2].split()))\n    p.sort()\n    print(int((n-1)*(n-2)/2 - p[n//2]))\n    return"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    count = 0\n    if len(p) % 2 == 1:\n        mid = p[int(len(p)/2)]\n        for i in range(1, n):\n            if p[i - 1] > mid and p[i] < mid:\n                count += 1\n    else:\n        mid = p[int(len(p)/2)]\n        for i in range(1, n):\n            if p[i - 1] < mid and p[i] > mid:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if min(a) > m:\n        return -1\n    total = 0\n    last_day = 0\n    for ai in a:\n        if ai > m:\n            total += (ai - m)\n            last_day = max(last_day, total)\n            continue\n        total += 1\n        last_day = max(last_day, total)\n    return last_day"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    coffe = [int(i) for i in stdin.split()]\n    coffe.sort()\n    m = coffe[0]\n    n = coffe[1]\n    count = 0\n    if m % n == 0:\n        return '1'\n    min_days = m // n\n    if coffe[2] > min_days:\n        return '-1'\n    for i in range(3, n + 1):\n        count += min_days\n    return str(count)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    for i in range(len(input)):\n        input[i] = list(map(int, input[i].split()))\n    return str(solution_part1(input))\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 8\n   ... 2 3 1 1 2\n   ... \n   ... 5 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 5 15\n   ... 5 5 5 5 5\n   ... \n   ... 5 26\n   ... 5 5 5 5 5\n   ... \n   ... 5 26\n   ... 5 5 5 5 5\n   ... \n   ... 5 26\n   ... 5 5 5 5 5\n   ... \n   ... 5 26\n   ... 5 5 5 5 5\n   ... \n   ... 5 26\n   ... 5 5 5 5 5\n   ... ''')\n    4\n    >>> solution('''\n   ... 7 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 7 15\n   ... 5 5 5 5 5\n   ... \n   ... 7 16\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... ''')\n    2\n    >>> solution('''\n   ... 7 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 7 15\n   ... 5 5 5 5 5\n   ... \n   ... 7 16\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... ''')\n    1\n    >>> solution('''\n   ... 7 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 7 15\n   ... 5 5 5 5 5\n   ... \n   ... 7 16\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... ''')\n    -1\n    >>> solution('''\n   ... 7 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 7 15\n   ... 5 5 5 5 5\n   ... \n   ... 7 16\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... ''')\n    2\n    >>> solution('''\n   ... 7 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 7 15\n   ... 5 5 5 5 5\n   ... \n   ... 7 16\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... ''')\n    1\n    >>> solution('''\n   ... 7 10\n   ... 1 3 4 2 1 4 2\n   ... \n   ... 7 15\n   ... 5 5 5 5 5\n   ... \n   ... 7 16\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26\n   ... 5 5 5 5 5\n   ... \n   ... 7 26"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if m == n:\n        return '1'\n\n    cnt_cups = 0\n    cnt_page = 0\n    for i in a:\n        cnt_page += i\n        if cnt_page > m:\n            cnt_cups += 1\n            cnt_page -= i\n    if cnt_cups == m:\n        return str(cnt_cups)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    cups = list(map(int, stdin.split()))\n\n    cups = sorted(cups)\n    ans = -1\n    for i in range(n):\n        print(\"cups\", cups)\n        curr = cups[i]\n        if curr >= m:\n            continue\n        for j in range(i + 1, n):\n            if cups[j] - cups[i] > m:\n                continue\n            elif cups[j] - cups[i] == m:\n                break\n            print(\"j\", j, \"curr\", curr, cups[j])\n            cups[i] = cups[j]\n            cups[j] = curr\n            ans = j\n            break\n\n    return str(ans)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n\n    cups = list(map(int, stdin.split()))\n\n    a = list(map(int, stdin.split()))\n    assert len(a) == n\n\n    def get_cup(cup):\n        return a.index(cup) + 1\n\n    current_cup = 0\n    current_day = 0\n    done = False\n    while not done:\n        done = True\n        day_of_drain = 0\n        print(\"current_cup =\", current_cup)\n        while not done:\n            print(\"current_cup =\", current_cup)\n            if get_cup(current_cup) == n:\n                done = True\n                break\n            else:\n                next_cup = get_cup(current_cup)\n                print(\"next_cup =\", next_cup)\n                current_cup = next_cup\n                current_day += 1\n                done = False\n            if current_day > m:\n                done = True\n                break\n            if day_of_drain == m:\n                done = True\n                break\n            else:\n                day_of_drain += 1\n\n    return current_day\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    cups = list(map(int, stdin.split()))\n    k = 1\n    while True:\n        for i in range(k, n):\n            if cups[i] > 0:\n                cups[i] -= 1\n                break\n        else:\n            break\n        k += 1\n    if cups.count(0) == len(cups):\n        return str(k - 1)\n    return \"impossible\"\n\n\nsolution(\"5 8\\n2 3 1 1 2\")\nsolution(\"5 10\\n1 3 4 2 1 4 2\")\nsolution(\"5 16\\n5 5 5 5 5\")\nsolution(\"5 26\\n5 5 5 5 5\")\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    days = 1\n    while len(a) > 0:\n        for i in range(len(a)):\n            if a[i] == days:\n                del a[i]\n                break\n        days += 1\n    return str(days) if days!= 1 else '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups = [i - 1 for i in cups]\n    dp = {}\n    q = deque()\n    for c in cups:\n        q.append(c)\n        dp[c] = 1\n    for i in range(n):\n        for j in range(1, m):\n            if q.popleft() == j:\n                dp[j - 1] = dp[q.popleft()] + 1\n        q.append(q.popleft())\n    return str(dp[q.popleft()] - 1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    return str(min_changes(arr))\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1]))\n    # 1. find the longest increasing subsequence\n    dp = []\n    for i in range(n):\n        dp.append(0)\n        for j in range(i):\n            if b[j] < b[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    # 2. change elements in the longest increasing subsequence\n    ans = 0\n    for i in range(n):\n        if i + dp[i] > n:\n            break\n        for j in range(i, i + dp[i]):\n            if b[i] - b[j] > 1:\n                break\n            if j + 1 < n:\n                b[j + 1] -= 1\n                ans += 1\n            elif b[j] - b[i] > 1:\n                break\n    return str(ans) if ans!= 0 else \"-1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    b = list(map(int, stdin.split()))\n    for i in range(N - 1):\n        if b[i + 1] - b[i] == 1:\n            b[i + 1] += 1\n        elif b[i + 1] - b[i] == -1:\n            b[i + 1] -= 1\n    if sum(b) % 2!= 0:\n        return -1\n    return str(len(b) - 2)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.split('\\n')\n    for i in range(len(b)):\n        for j in range(len(b[i])):\n            if b[i][j]!= '0':\n                b[i][j] = int(b[i][j])\n    for i in range(len(b) - 1):\n        if b[i] == b[i + 1]:\n            b[i] = 0\n    for i in range(len(b)):\n        for j in range(len(b[i])):\n            if b[i][j]!= 0:\n                return '-1'\n    return str(len(b))\n\nsolution(stdin)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = list(map(int, stdin.strip().split()))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if b[i] < b[j]:\n                break\n        else:\n            return -1\n        b[i] += 1\n        b[j] -= 1\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    sequence = list(map(int, inputs[1]))\n    changed = False\n    for i in range(n):\n        if sequence[i] < sequence[i + 1]:\n            sequence[i] -= 1\n            changed = True\n        elif sequence[i] > sequence[i + 1]:\n            sequence[i] += 1\n            changed = True\n        elif sequence[i] == sequence[i + 1]:\n            changed = False\n        if changed:\n            changed = False\n            for i in range(n):\n                if sequence[i]!= sequence[i + 1]:\n                    changed = True\n                    break\n            if not changed:\n                return str(sequence[0])\n    return str(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse stdin\n    b_seq = stdin.strip().splitlines()[1:]\n    # create b array\n    b = []\n    for i in range(len(b_seq)):\n        b.append(int(b_seq[i]))\n    # check if it is an arithmetic progression\n    is_arith_prog = True\n    for i in range(len(b) - 1):\n        if b[i] - b[i+1]!= 1:\n            is_arith_prog = False\n    if is_arith_prog:\n        # get sequence len\n        n = len(b)\n        # create new b array\n        new_b = b\n        # check if it is a sequence\n        is_sequence = True\n        for i in range(1, len(b) - 1):\n            if b[i] - b[i-1]!= 1 or b[i] - b[i+1]!= 1:\n                is_sequence = False\n                break\n        if is_sequence:\n            # make a sequence\n            for i in range(len(b) - 2):\n                new_b[i] = b[i] - 1\n            # print new sequence\n            print(''.join(str(x) for x in new_b))\n            return '3'\n    # if sequence doesn't have a right number of elements\n    print('-1')\n    return '0'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(map(int, stdin.strip().split()))\n    for i in range(len(seq)):\n        if seq[i] == 0:\n            seq[i] = seq[i-1] + 1\n            break\n    if len(seq) == 1:\n        return -1\n    for i in range(len(seq) - 1):\n        if seq[i+1] - seq[i]!= 1:\n            return -1\n    return str(len(seq))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr: List[int] = stdin.split()\n    if arr[0] == '0':\n        return '0'\n    if len(arr) == 1:\n        return '1'\n    if arr[1] == '0':\n        return '0'\n    if arr[2] == '0':\n        return '0'\n    if arr[3] == '0':\n        return '0'\n    if arr[4] == '0':\n        return '0'\n    if arr[5] == '0':\n        return '0'\n    if arr[6] == '0':\n        return '0'\n    if arr[7] == '0':\n        return '0'\n    if arr[8] == '0':\n        return '0'\n    if arr[9] == '0':\n        return '0'\n    if arr[10] == '0':\n        return '0'\n    if arr[11] == '0':\n        return '0'\n    if arr[12] == '0':\n        return '0'\n    if arr[13] == '0':\n        return '0'\n    if arr[14] == '0':\n        return '0'\n    if arr[15] == '0':\n        return '0'\n    if arr[16] == '0':\n        return '0'\n    if arr[17] == '0':\n        return '0'\n    if arr[18] == '0':\n        return '0'\n    if arr[19] == '0':\n        return '0'\n    if arr[20] == '0':\n        return '0'\n    if arr[21] == '0':\n        return '0'\n    if arr[22] == '0':\n        return '0'\n    if arr[23] == '0':\n        return '0'\n    if arr[24] == '0':\n        return '0'\n    if arr[25] == '0':\n        return '0'\n    if arr[26] == '0':\n        return '0'\n    if arr[27] == '0':\n        return '0'\n    if arr[28] == '0':\n        return '0'\n    if arr[29] == '0':\n        return '0'\n    return str(min(int(x) - 1 for x in arr))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 24 21 14 10\n   ...\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... 6\n   ... 1 3 6 9 12\n   ...\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 3\n   ... 2 1 1\n   ...\n   ... 3\n   ... 2 3 1\n   ...\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 3\n   ... 2 1 1\n   ...\n   ... 1\n   ... 2 3 1\n   ...\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.split()[0])\n    seq = stdin.split()[1]\n    seq = [int(i) for i in seq]\n    result = 0\n    while seq[result]!= 0:\n        result += 1\n    if result!= n - 1:\n        print('-1')\n    else:\n        print(result)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    teams = {i: list(map(int, stdin.split())) for i in range(n)}\n\n    for team in range(n):\n        for student in teams[team]:\n            # team 1 is always balanced\n            if team == 0:\n                if abs(teams[team][team] - student) > 5:\n                    return -1\n            else:\n                if abs(teams[team][team] - student) > 5 or abs(teams[team][team] - student) > abs(teams[team - 1][team] - student):\n                    return -1\n\n    return sum(teams[i])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *a_i = map(int, stdin.split())\n    n = len(a_i)\n    a_i.sort()\n    if n < k:\n        return 0\n    ans = 0\n    l, r = 0, 0\n    prev = a_i[0]\n    while r < n:\n        while r < n and a_i[r] - prev <= 5:\n            r += 1\n        if r - l < k:\n            l = r\n        else:\n            ans += 1\n        prev = a_i[r]\n    return ans\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Do not change the below line\n    a.sort()\n\n    num_teams = 0\n    curr_team = []\n    curr_team_size = 0\n\n    for i in range(n):\n        skill = a[i]\n        if curr_team_size + 1 <= k:\n            curr_team_size += 1\n        else:\n            num_teams += 1\n            curr_team_size = 1\n\n        if skill - curr_team[-1] > 5:\n            curr_team.append(skill)\n        else:\n            curr_team.append(skill)\n\n    num_teams += 1\n    return str(num_teams)\n\nsolution(\"5 2\")\nsolution(\"6 1\")\nsolution(\"4 4\")\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    std_skills = list(map(int, input().split()))\n\n    # \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n    for i in range(k):\n        # \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u0443 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e\n        team_size = n // k\n\n        # \u0422\u0430\u043a\u0436\u0435 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u043f\u0440\u0438\u0433\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n        team_size_2 = min(team_size, std_skills.count(max(std_skills)))\n        # \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0442\u0441\u0442\u0443\u043f\u0430\u043c\u0438\n        team_size_3 = std_skills.count(max(std_skills)) - team_size_2\n        # \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432\n        # \u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0445 \u043e\u0442\u0441\u0442\u0443\u043f\u0430\u043c\u0438\n        std_skills_chosen = (team_size_3 + 1) // 2\n        # \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0443\u044e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u044d\u0442\u043e\u043c\u0443 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n        team_1 = std_skills[i * std_skills_chosen:i * std_skills_chosen + std_skills_chosen]\n\n        # \u0415\u0441\u043b\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043d\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n        if std_skills_chosen == 0:\n            # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439\n            print(team_1[0])\n            return\n\n        # \u0415\u0441\u043b\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0435\u0441\u0442\u044c \u043d\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n        else:\n            # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n            skills_per_team = team_size_2 * std_skills_chosen\n            # \u0422\u0430\u043a\u0436\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n            skills_per_team_2 = team_size_3 * std_skills_chosen\n\n            # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n            skills_per_team_3 = skills_per_team + skills_per_team_2\n\n            # \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u0448\u043b\u0438 \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435\n            if skills_per_team_3 <= std_skills[-1]:\n                # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439\n                print(team_1[0])\n                return\n\n            # \u0418\u043d\u0430\u0447\u0435 \u0438\u0434\u0435\u043c \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f\u043c \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\n            else:\n                # \u041d\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n                skills_per_team_4 = []\n                for i in range(1, std_skills_chosen):\n                    skills_per_team_4.append(skills_per_team_3)\n                    skills_per_team_3 = skills_per_team_2 + skills_per_team_3\n                    skills_per_team_2 = skills_per_team_1 + skills_per_team_2\n                    skills_per_team_1 = skills_per_team + skills_per_team_1\n\n                # \u041d\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n                skills_per_team_5 = []\n                for i in range(1, k):\n                    skills_per_team_5.append(skills_per_team_4)\n                    skills_per_team_4 = skills_per_team_3 + skills_per_team_4\n                    skills_per_team_3 = skills_per_team_2 + skills_per_team_3\n                    skills_per_team_2 = skills_per_team_1 + skills_per_team_2\n                    skills_per_team_1 = skills_per_team + skills_per_team_1\n\n                # \u041d\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n                skills_per_team_6 = []\n                for i in range(1, k):\n                    skills_per_team_6.append(skills_per"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    sorted_a = sorted(a)\n    k_teams = 0\n    cur_k_teams = 0\n    total_teams = 0\n    while cur_k_teams < k:\n        cur_k_teams = 0\n        for i in range(n):\n            if sorted_a[i] - sorted_a[i - 1] <= 5:\n                cur_k_teams += 1\n        total_teams += cur_k_teams\n        cur_k_teams = 0\n    return total_teams\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_teams = int(stdin.strip())\n    program_skill = list(map(int, stdin.strip().split()))\n    num_of_students = len(program_skill)\n    result = 0\n\n    if num_of_teams == 1:\n        return num_of_students\n\n    teams = []\n    for i in range(num_of_students):\n        teams.append([program_skill[i]])\n\n    for team in teams:\n        team_skill = {}\n        for student in team:\n            for student_skill in range(1, student):\n                if student_skill not in team_skill:\n                    team_skill[student_skill] = 0\n                team_skill[student_skill] += 1\n        for key in team_skill.keys():\n            if team_skill[key] > 1:\n                del team_skill[key]\n\n        skill_sum = 0\n        for key in team_skill.keys():\n            skill_sum += key + 5\n\n        if skill_sum <= num_of_students:\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    return 0"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return max(k if n >= k else n, 0)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *students = stdin.split()\n    max_t = 0\n    students = list(map(int, students))\n\n    for s in range(k + 1):\n        temp = sum(s - abs(students[i] - students[i + 1]) <= 5 for i in range(0, k - s))\n        if temp > max_t:\n            max_t = temp\n\n    return str(max_t)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    skills.sort(reverse=True)\n    # \u0435\u0441\u043b\u0438 \u043d\u0430\u0431\u043e\u0440 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430, \u0442\u043e \u043d\u0430\u0434\u043e \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c\n    # \u043f\u0435\u0440\u0435\u0434 \u043f\u0440\u043e\u0445\u043e\u0434\u043e\u043c \u043f\u043e \u043d\u0438\u043c \u0432 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0435 \u0441\u0442\u0430\u0440\u0448\u0438\u0445 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432.\n    # \u0435\u0441\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u0435\u0441\u0442\u044c, \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n    # \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n    if n < k:\n        skills = skills + [0] * (k - n)\n    # \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u0434\u043b\u0438\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432\n    a = []\n    for i in range(len(skills) - 1):\n        a.append(skills[i] - skills[i + 1])\n    a.append(skills[-1] - skills[-2])\n    # \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0434\u043b\u0438\u043d\u0430\u043c\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f\n    a.sort(reverse=True)\n    # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f\n    # \u0432 \u043d\u0438\u0445, \u0438 \u0434\u0430\u044e\u0442 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.\n    return len(set(a))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split(' ')\n    n, k, m = int(n), int(k), int(m)\n    scores = stdin.split(' ')\n    max_score = k * max(scores)\n    avg_score = 0\n    for i in range(n):\n        avg_score += int(scores[i])\n    if max_score > m:\n        return -1\n    else:\n        return str(avg_score // n)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, m] = [int(x) for x in stdin.split()]\n    exams = [int(x) for x in stdin.split()]\n\n    # Sort the exam scores, and the number of points needed on each exam\n    sorted_exams = sorted(exams, reverse=True)\n    points_needed = []\n    points_needed.append(sum(sorted_exams[0:n-1])//(n-1))\n    points_needed.append(sorted_exams[n-1])\n\n    # for i in range(1, n):\n    #     points_needed.append(points_needed[i-1] + sorted_exams[i])\n    for i in range(1, n):\n        points_needed.append(points_needed[i-1] + sorted_exams[i] - sorted_exams[i-1])\n\n    # for i in range(1, n):\n    #     points_needed.append(sorted_exams[i-1] + sorted_exams[i])\n    #\n    # # Calculate the average of each subject\n    # average = []\n    # for i in range(n):\n    #     average.append(sum(points_needed[i:])/len(points_needed[i:]))\n\n    # print(points_needed)\n    # print(average)\n    # print(m)\n    # print(points_needed[m])\n\n    if points_needed[m] == m:\n        return \"-\"\n\n    # print(m, points_needed[m])\n    for i in range(m, n):\n        if points_needed[i] >= m:\n            return i\n    return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"0\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        points.append(int(stdin.split()[2 * _]))\n    return max(0, -1 if m < sum(points) else (sum(points) - m) // (n - 1))\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    # arrange a list of scores on n-1 subjects\n    arr = []\n    for i in range(n - 1):\n        arr.append(int(input()))\n    # calculate average score\n    avg = sum(arr) / n\n    # calculate difference\n    diff = k - avg\n    # calculate possible points\n    possible = diff * n\n    # if possible is less than m, return possible\n    if possible < m:\n        return str(possible)\n    # else calculate possible points on final subject\n    final = m - possible\n    # final possible points = diff * n\n    final_diff = final * n\n    # if final possible points is less than k, return possible\n    if final_diff < k:\n        return str(final_diff)\n    # else return impossible\n    return \"impossible\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    answer = 0\n    score = 0\n    for i in range(N):\n        score += A[i]\n    for i in range(N):\n        if score >= M:\n            answer += 1\n            score -= A[i]\n        else:\n            break\n    if answer == 0:\n        answer = -1\n    return str(answer)"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N, K, M = stdin[0], stdin[1], stdin[2]\n    subjects = list(map(int, stdin[3:]))\n    average = (sum(subjects) + K) // N\n    if average < K:\n        return -1\n    else:\n        return average - K\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n, k, m = int(n), int(k), int(m)\n    a = list(map(int, stdin.split()))\n    print(solution_naive(n, k, m, a))\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    max_score = (k * n) // 2\n\n    if (k * n) % 2 == 1:\n        return -1\n\n    if (m >= max_score):\n        return max_score\n    else:\n        points = 0\n        for i in lst:\n            points += i\n        return max(points, m)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = stdin.split()\n    N = int(N)\n    K = int(K)\n    M = int(M)\n    A = list(map(int, stdin.split()))\n    score = 0\n    avg = 0\n    avg = (sum(A) - max(A) - min(A)) / N\n    if avg >= K:\n        score = avg\n        return (str(score))\n    else:\n        return (\"-1\")"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = stdin.split(\" \")\n    N = int(N)\n    K = int(K)\n    Q = int(Q)\n\n    score = K, K, K, K, K, K\n    if N == 1:\n        if K == Q:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    for i in range(Q):\n        player, answer = stdin.split(\" \")\n        answer = int(answer)\n        if answer in score:\n            score.remove(answer)\n        else:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_players, num_questions, num_players_with_points = tuple([int(x) for x in lines[0].split(' ')])\n    scores = tuple([int(x) for x in lines[1].split(' ')])\n    player_names = tuple(lines[2:2 + num_players])\n\n    # check if player with highest number of points has any other players with higher scores\n    for i in range(1, len(scores)):\n        if scores[i] > scores[0]:\n            return 'No'\n\n    # check if score is correct for questions\n    correct_answers = 0\n    for i in range(num_questions):\n        correct_answers += int(lines[2 + i])\n\n    # print if player with highest number of points has any other players with higher scores\n    if correct_answers < num_questions:\n        return 'No'\n\n    # print if score is correct for questions\n    if correct_answers == num_questions:\n        return 'Yes'\n\n    return 'Yes'"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n\n    scores = list(map(int, stdin.split()))\n    scores = sorted(scores)\n    index = 1\n\n    for i in range(Q):\n        if scores[index] == scores[index-1] and index < N:\n            scores[index] = scores[index] - 1\n        index += 1\n\n    scores = scores[::-1]\n    for i in range(N):\n        if scores[i] < 0:\n            scores.remove(scores[i])\n    return '\\n'.join([str(i) for i in scores])"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, K, Q = list(map(int, stdin[0].split()))\n    players = list(map(int, stdin[1].split()))\n    answers = list(map(int, stdin[2].split()))\n\n    players_dict = {}\n\n    for i in range(1, N + 1):\n        players_dict[i] = players[i - 1]\n\n    for i in range(len(answers)):\n        if answers[i] not in players_dict.keys():\n            return \"No\"\n        else:\n            players_dict[answers[i]] -= 1\n\n    for i in range(1, N + 1):\n        if players_dict[i] <= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def parse(line: str) -> list:\n        return list(map(int, line.split()))\n    \n    def compare(player: int, score: list) -> bool:\n        if score[player-1] == 0:\n            return False\n        elif score[player-1] > 0:\n            return True\n        else:\n            return False\n    \n    def compare_all(score: list) -> bool:\n        for i in range(len(score)-1):\n            if score[i] > 0:\n                if not compare(i+1, score):\n                    return False\n            elif score[i] < 0:\n                if not compare(i+1, score):\n                    return False\n        return True\n    \n    return 'Yes' if compare_all(parse(stdin)) else 'No'"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n\n    ans = ['Yes' if i == N - 1 else 'No' for i in range(N)]\n\n    for _ in range(Q):\n        A = int(stdin)\n        if ans[A - 1] == 'Yes':\n            ans[A - 1] = 'No'\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split(\" \")))\n    scores = list(map(int, stdin.split(\" \")))\n    scores.sort(reverse=True)\n    players_rank = {}\n    for i in range(1, n+1):\n        players_rank[i] = scores[i-1]\n    players_rank_desc = sorted(players_rank.items(), key=lambda x: x[1], reverse=True)\n    players = list(map(lambda x: x[0], players_rank_desc))\n    elim_players = []\n    while len(elim_players) < n-1:\n        for player in players:\n            if players_rank[player] > 0:\n                players_rank[player] -= 1\n                if players_rank[player] == 0:\n                    elim_players.append(player)\n        players = list(filter(lambda x: x not in elim_players, players))\n    answers = list(map(lambda x: (x[0], x[1] == q), enumerate(players)))\n    return \"\\n\".join(list(map(lambda x: \"Yes\" if x else \"No\", answers)))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    n, k, q = int(input_values[0]), int(input_values[1]), int(input_values[2])\n    scores = list(map(int, input_values[3:]))\n\n    n_eliminated = 0\n\n    for i in range(n - 1):\n        scores[i] -= 1\n        if scores[i] < 0:\n            n_eliminated += 1\n        if n_eliminated >= k:\n            return \"No\"\n    if n_eliminated >= k:\n        return \"No\"\n\n    scores.sort()\n    for i in range(q):\n        scores.pop()\n    if scores:\n        return \"Yes\"\n    return \"No\"\n\n\nprint(solution(\"2 3 4\\n3\\n1\\n3\\n2\\n1\\n2\"))\nprint(solution(\"6 3 4\\n3\\n1\\n3\\n2\\n1\\n2\\n4\\n5\\n6\\n\"))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    for _ in range(Q):\n        i = int(stdin.split()[0])\n        score = scores[i-1]\n        scores[i-1] = 0\n        for j in range(1, N):\n            if scores[j-1] >= score:\n                scores[j-1] -= score\n                scores[j] += score\n    scores.sort()\n    for s in scores:\n        if s!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n\n    # We play games with n players. Each of the n players scores are represented by a list.\n    # So, the first entry in the list is the score of player 1, the second entry of the list is the score of player 2,..., the n-th entry of the list is the score of player n.\n    # Each player takes an answer of the form \"A_i\".\n    # The i-th answer is the answer to Question i of the game.\n    # So, the answer of the game is represented by a list of strings, where each string is the answer of a player.\n    # The i-th answer is the answer given by player A_i.\n    game_scores = []\n\n    for i in range(n):\n        scores[i] = k - scores[i]\n        game_scores.append(scores[:])\n\n    for i in range(q):\n        player = int(stdin.split()[1])\n\n        # We take a question of the form \"Q_i\" and we calculate a score for this question.\n        # We have to tell Kizahashi whether the player answered the question correctly.\n        correct = True\n        score = 0\n        for j in range(n):\n            if game_scores[player][j]!= int(stdin.split()[2+j]):\n                correct = False\n            score += game_scores[player][j]\n        if correct:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(N)]\n    for i in range(N):\n        a[i] = sorted(a[i])\n    for j in range(M):\n        for i in range(N):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n    for i in range(N):\n        if a[i]!= sorted(a[i]):\n            return \"NO\"\n    for i in range(M):\n        for j in range(N):\n            if a[j][i] == 1:\n                a[j][i] = 0\n            else:\n                a[j][i] = 1\n    for i in range(N):\n        if a[i]!= sorted(a[i]):\n            return \"NO\"\n    for i in range(M):\n        for j in range(N):\n            if a[j][i] == 0:\n                a[j][i] = 1\n            else:\n                a[j][i] = 0\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    ans = \"NO\"\n    a = sorted(a, key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if (i == 0 and j == 0) or (i == 0 and j == m - 1) or (i == n - 1 and j == 0) or (i == n - 1 and j == m - 1):\n                    continue\n                else:\n                    a[i][j] = 0\n                    a[i][j + 1] = 1\n                    a[i + 1][j] = 1\n                    a[i + 1][j + 1] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                ans += \"1\"\n            else:\n                ans += \"0\"\n    return ans\n\n\nprint(solution(input()))"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    rows = sorted(a, key=lambda x: (x[1], x[0]))\n    cols = sorted(a, key=lambda x: (x[0], x[1]))\n    ans = ''\n    for i in range(n):\n        if rows[i][0]!= rows[i][1]:\n            ans += '0'\n        else:\n            ans += '1'\n    for i in range(m):\n        if cols[i][0]!= cols[i][1]:\n            ans += '0'\n        else:\n            ans += '1'\n    return ans\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n\n    def row_inversion(row: List[int]) -> None:\n        for i in range(len(row)):\n            if row[i] == 0:\n                continue\n            for j in range(i + 1, len(row)):\n                if row[j] == 0:\n                    continue\n                if row[i] > row[j]:\n                    row[i], row[j] = row[j], row[i]\n\n    def column_inversion(column: List[int]) -> None:\n        for i in range(len(column)):\n            if column[i] == 0:\n                continue\n            for j in range(i + 1, len(column)):\n                if column[j] == 0:\n                    continue\n                if column[i] > column[j]:\n                    column[i], column[j] = column[j], column[i]\n\n    for row in matrix:\n        row_inversion(row)\n        column_inversion(row)\n    return \"YES\" if matrix == sorted(matrix, key=lambda row: row) else \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    a = sorted(a)\n\n    def flip(i, j):\n        if a[i] > a[j]:\n            a[i], a[j] = a[j], a[i]\n\n    for i in range(0, len(a)):\n        if a[i] % 2 == 1:\n            a[i] = 0\n        else:\n            a[i] = 1\n    a.sort()\n\n    if a == a[::-1]:\n        return \"NO\"\n    else:\n        c = \"\"\n        r = \"\"\n        for i in range(0, len(a)):\n            if a[i] == 1:\n                c += \"1\"\n            else:\n                c += \"0\"\n        return c + \"1\" + r + \"1\" + r + \"1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a = sorted(a, reverse=True)\n    return 'YES' if a == [[0, 1, 0], [0, 0, 1], [1, 1, 1]] else 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    for row_index, row in enumerate(matrix):\n        for i, x in enumerate(row):\n            if i == 0 or row[i-1]!= x:\n                if row_index == 0:\n                    row_index += 1\n                else:\n                    row[i] = 1 - row[i]\n                    if row_index!= 0:\n                        row[i-1] = 1 - row[i-1]\n        if not any(row):\n            return \"NO\"\n    for col_index, col in enumerate(zip(*matrix)):\n        for i, x in enumerate(col):\n            if i == 0 or col[i-1]!= x:\n                if col_index == 0:\n                    col_index += 1\n                else:\n                    col[i] = 1 - col[i]\n                    if col_index!= 0:\n                        col[i-1] = 1 - col[i-1]\n        if not any(col):\n            return \"NO\"\n    if all([row == sorted(row, reverse=True) for row in matrix]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    col, row = {}, {}\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                row[i] = j\n            else:\n                col[j] = i\n\n    def dfs(x, y):\n        if x == n - 1 and y == m - 1:\n            return True\n        if x > n or y > m or x < 0 or y < 0:\n            return False\n        if a[x][y] == 0:\n            return False\n\n        if (x, y) in row and row[x, y] > y:\n            return False\n        if (x, y) in col and col[y] > x:\n            return False\n\n        tmp = a[x][y]\n        a[x][y] = 1 if tmp == 0 else 0\n        for i in range(2):\n            ans = dfs(x + i * 1, y + i * 1)\n            if ans:\n                return True\n\n        a[x][y] = tmp\n        return False\n\n    return \"YES\" if dfs(0, 0) else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # create two lists to store the inverted rows and columns\n    rows = []\n    cols = []\n\n    # read the input and store the rows and columns in their respective lists\n    input_rows = stdin.split(\"\\n\")\n    for i in input_rows:\n        inverted_row = []\n        inverted_col = []\n\n        # read the values in the rows and cols lists\n        row_inverted = i.split()\n        for j in row_inverted:\n            if j == \"1\":\n                inverted_row.append(0)\n                inverted_row.append(1)\n            else:\n                inverted_row.append(1)\n                inverted_row.append(0)\n\n        col_inverted = []\n        col_inverted = list(map(int, input_cols.split()))\n    # create the inverted rows and columns\n    rows.append(inverted_row)\n    cols.append(inverted_col)\n    return rows, cols\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = int(stdin[i * m + j])\n    matrix = invert(matrix)\n    matrix = order(matrix)\n    for i in range(n):\n        for j in range(m):\n            print(matrix[i][j], end=\"\")\n        print()\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    simple\n    '''\n    # stdin = sys.stdin.read()\n    n = int(stdin)\n    if n%10 == 3 or n%10 ==6 or n%10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split('\\n')))\n    for num in stdin:\n        if num < 2:\n            return 'No'\n        for i in range(2, num):\n            if num % i == 0:\n                return 'No'\n    return 'Yes'\n    \n    \nsolution(stdin)\n    \n    \n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    \n    for i in stdin:\n        if len(i) > 10:\n            print('No')\n            return 'No'\n    print('Yes')\n    return 'Yes'"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 1 and x <= 999:\n        return \"Yes\"\n    return \"No\"\nprint(solution(input()))\n\n----------\nx = int(input())"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)>10:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    print(f'Input: {stdin}')\n    return 'Yes' if stdin.isnumeric() else 'No'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #return a boolean\n    number_string = stdin.strip()\n    if len(number_string) == 1:\n        if number_string == \"0\":\n            return \"No\"\n        return \"Yes\"\n    elif len(number_string) > 10:\n        return \"No\"\n    elif len(number_string) < 10:\n        if number_string == \"\":\n            return \"Yes\"\n        if number_string[0] == \"0\":\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Binary search solution for task 1 of day 2 of AOC 2020.\n    \"\"\"\n    # define variables\n    current_num = \"\"\n\n    # loop through inputs\n    for i in stdin:\n        # convert input to int\n        i = int(i)\n\n        # search for same digit\n        if i == int(current_num):\n            # change to no\n            return \"No\"\n\n        # else\n        else:\n            # append to current_num\n            current_num += str(i)\n\n    # if no current_num then the input is no\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # print(s)\n    s = s.strip()\n    # print(s)\n    s = s.split(\" \")\n    # print(s)\n    s = [int(x) for x in s]\n    s = sorted(s)\n    # print(s)\n    if s == sorted(s):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    arr = stdin.split('\\n')\n    return \"Yes\" if len(arr) == 1 else \"No\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i][j - 1] + s[j - 1], dp[i - 1][j] + s[i - 1])\n            if i!= j and j > i:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    return str(max([dp[i][n] for i in range(1, n + 1)]))\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        stdin:\n    \"\"\"\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    d = max([abs(s[i] - s[i-1]) for i in range(1, n)])\n    return d\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, b, a) = (int(x) for x in stdin.split())\n\n    steps = (n - 1) + 1\n    acc_charge = (n - 1) * a\n    battery_charge = n * b - acc_charge\n    acc_charge_min = max(0, n * a)\n\n    segments = [(0, 1, battery_charge)]\n    while segments[-1][0]!= n - 1:\n        (i, s1, s2) = segments.pop()\n        s1_charge = acc_charge_min if s1 == 1 else acc_charge\n        s2_charge = 0 if s2 == 1 else acc_charge\n        s1_charge -= s2_charge\n        s2_charge -= s1_charge\n        s1_charge -= battery_charge\n        if s1_charge >= 0:\n            s1_charge += 1\n        if s2_charge >= 0:\n            s2_charge += 1\n        segments.append((i + 1, s1, s1_charge))\n        segments.append((i + 1, s2, s2_charge))\n\n    return steps + segments[0][0]\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b, a = b, a\n    res = 0\n    curr = 0\n    curr_b = 0\n    curr_a = 0\n    for i in range(n):\n        if curr_b < b and curr_a < a:\n            if s[i]:\n                curr_b -= 1\n            else:\n                curr_a -= 1\n        else:\n            curr += 1\n            if curr_b < b and curr_a < a:\n                if s[i]:\n                    curr_b += 1\n                else:\n                    curr_a += 1\n    return str(curr)\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, b, a] = stdin.split()\n    n, b, a = int(n), int(b), int(a)\n    s = list(map(int, stdin.split()))\n    return str(max([accumulation_charge(s, i, a, b) for i in range(n)]))\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, battery, accumulator = map(int, stdin.split())\n    segments = [int(i) for i in stdin.split()]\n    return str(max(\n        len([1 for seg in segments if seg >= n]) * battery +\n        max(1 for seg in segments if seg < n and seg >= 0) * accumulator,\n        len([0 for seg in segments if seg >= n]) * accumulator +\n        max(1 for seg in segments if seg < n and seg >= 0) * battery\n    ))"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    s_acc = 1\n    b_acc = 0\n    for i in range(n):\n        s_acc += s[i]\n        b_acc -= s[i]\n        if i == 0:\n            if s[i] == 0 and s_acc <= a:\n                return 0\n            elif s[i] == 1:\n                s_acc -= 1\n        elif i == n - 1:\n            if s[i] == 0 and s_acc <= a:\n                return 0\n            elif s[i] == 1:\n                s_acc -= 1\n        elif s[i] == 0 and s_acc <= a:\n            return 0\n        elif s[i] == 1:\n            s_acc -= 1\n    return 1\n\nsolution('5 2 1\\n1 0 0 1 0 1')\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if is_passable(n, s, mid, b, a):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    answer = 1\n    curr_b = b\n    curr_a = a\n    for i in range(1, n):\n        if s[i] == 1:\n            curr_a -= 1\n        else:\n            curr_a += 1\n        if curr_a > curr_b:\n            answer += 1\n            curr_b = max(curr_b - 1, 0)\n            curr_a = max(curr_a - 1, 0)\n    return str(answer)\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    if n == 1:\n        return 1\n    s = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        if s[i - 1] == 1 and s[i] == 1:\n            count += 1\n            if a > 0:\n                a -= 1\n            else:\n                b -= 1\n    if b > 0:\n        count += 1\n        b -= 1\n    else:\n        a -= 1\n    return count\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runs a solution to the problem.\n    \"\"\"\n    return stdin.split(\"-\")[0]\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in range(0, len(stdin), 3):\n        if stdin[i] == \"+\":\n            total += int(stdin[i + 1]) + int(stdin[i + 2])\n        elif stdin[i] == \"-\":\n            total += int(stdin[i + 1]) - int(stdin[i + 2])\n        elif stdin[i] == \"*\":\n            total *= int(stdin[i + 1])\n        elif stdin[i] == \"/\":\n            total = total // int(stdin[i + 1])\n    return str(total)\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    operators = ['+', '-']\n    values = []\n\n    for c in stdin:\n        if c in operators:\n            values.append(int(values.pop()))\n            values.append(int(c))\n        else:\n            values.append(int(c))\n\n    values.append(int(values.pop()))\n    return str(sum(values))\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_int(char: str) -> bool:\n        return char >= '0' and char <= '9'\n\n    def is_negative(char: str) -> bool:\n        return char == '-'\n\n    def is_plus(char: str) -> bool:\n        return char == '+'\n\n    def is_minus(char: str) -> bool:\n        return char == '-'\n\n    def is_number(char: str) -> bool:\n        return is_int(char) or is_minus(char)\n\n    def is_operator(char: str) -> bool:\n        return is_plus(char) or is_minus(char)\n\n    def is_digit(char: str) -> bool:\n        return is_int(char)\n\n    def is_parens(char: str) -> bool:\n        return char == '(' or char == ')'\n\n    def is_bracket(char: str) -> bool:\n        return char == '[' or char == ']'\n\n    def is_equals(char: str) -> bool:\n        return char == '='\n\n    def is_operand(char: str) -> bool:\n        return is_number(char) or is_parens(char) or is_bracket(char) or is_equals(char)\n\n    def parse(string: str) -> list:\n        operands = []\n        operators = []\n        string = string + '+'\n\n        for i in range(len(string)):\n            if is_parens(string[i]):\n                operands.append(parse(string[i:]))\n                break\n            if is_bracket(string[i]):\n                operands.append(parse(string[i:]))\n                break\n            if is_operator(string[i]):\n                while string[i]!= '+' and string[i]!= '-':\n                    operators.append(string[i])\n                    i += 1\n                    if i == len(string):\n                        raise ValueError('Operator mismatch')\n                if string[i] == '+':\n                    i += 1\n                else:\n                    i -= 1\n            elif is_equals(string[i]):\n                while not is_parens(string[i]) and not is_bracket(string[i]):\n                    operators.append(string[i])\n                    i += 1\n                    if i == len(string):\n                        raise ValueError('Operator mismatch')\n            else:\n                while is_operand(string[i]):\n                    operands.append(string[i])\n                    i += 1\n                    if i == len(string):\n                        raise ValueError('Operator mismatch')\n        return operands, operators\n\n    def evaluate_math(operands, operators):\n        for i in range(len(operands)):\n            if is_number(operands[i]):\n                operators[i] = int(operands[i])\n            elif is_minus(operators[i]):\n                operators[i] = -operators[i]\n        operands_copy = operands[:]\n        operators_copy = operators[:]\n        for i in range(len(operators)):\n            operators[i] = operators[i].strip()\n            if operators[i] == '+':\n                operands_copy.insert(i, operands_copy[i - 1] + operands_copy[i])\n                operators_copy.insert(i, operators_copy[i - 1])\n                operands_copy.pop(i - 1)\n                operators_copy.pop(i - 1)\n            elif operators[i] == '-':\n                operands_copy.insert(i, operands_copy[i - 1] - operands_copy[i])\n                operators_copy.insert(i, operators_copy[i - 1])\n                operands_copy.pop(i - 1)\n                operators_copy.pop(i - 1)\n            elif operators[i] == '*':\n                operands_copy.insert(i, operands_copy[i - 1] * operands_copy[i])\n                operators_copy.insert(i, operators_copy[i - 1])\n                operands_copy.pop(i - 1)\n                operators_copy.pop(i - 1)\n            elif operators[i] == '/':\n                operands_copy.insert(i, operands_copy[i - 1] / operands_copy[i])\n                operators_copy.insert(i, operators_copy[i - 1])\n                operands_copy.pop(i - 1)\n                operators_copy.pop(i - 1)\n        for i in range(len(operators)):\n            operators[i] = operators[i].strip()\n        return operands_copy, operators_copy\n\n    operands, operators = parse(stdin)\n    operands, operators = evaluate_math(operands, operators)\n    result = operands[0]\n    for i in range(1, len(operands)):\n        result = result + operands[i]\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(' ', '')\n    stdin = stdin.split('+')\n    result = 0\n    for i in stdin:\n        if '-' in i:\n            result += int(i[1:])\n        else:\n            result += int(i)\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution\n    # read in input\n    # split input by spaces\n    # split by +, -, *, /\n    # create a stack\n    # create a list\n    # loop through the input\n    #     if operand found, push to stack\n    #     else if symbol found, pop from stack\n    #     else, push to list\n    # check if stack is empty\n    #     if empty, return -1\n    # if empty, return result of list\n    #     else, return -1\n    # create a result string\n    # add each elemnt in the list to the result string\n    # return result string\n    # return -1 if empty\n    \n    # MY APPROACH\n    # get rid of spaces\n    # split string by space\n    # remove the first and last elements\n    # separate by +, -, *, /\n    # list of the numbers in the input\n    # store all operands\n    # list of all operators\n    # init the result as an empty string\n    # loop through the input\n    #     if operand found, push to stack\n    #     else if symbol found, pop from stack\n    #     else, push to list\n    #     pop from stack if the stack is empty\n    #     if stack is empty, push to list\n    #     pop from list if the list is empty\n    #     if list is empty, push to result\n    #     else, push to result\n    #     if result is empty, push to stack\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else, return -1\n    #     if stack is empty, return result\n    #     else"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def eval(inp: str) -> str:\n        stack = []\n        cur = 0\n        res = 0\n        for i in range(len(inp)):\n            if inp[i] == \"+\":\n                cur += 1\n            elif inp[i] == \"-\":\n                cur -= 1\n            else:\n                res += int(inp[i]) * cur\n                cur = 0\n        if cur!= 0:\n            res += int(inp[-1]) * cur\n        return str(res)\n    # arrange the input in to a tree structure\n    inp = stdin.split()\n    root = Tree(inp[0])\n    # make the tree as a stack\n    stack = [root]\n    for i in range(1, len(inp)):\n        # if current element is a sign, then pop the stack and insert the operand\n        if inp[i] == \"+\" or inp[i] == \"-\":\n            top = stack.pop()\n            top.add(Tree(inp[i]))\n            stack.append(top)\n        elif inp[i] == \"*\" or inp[i] == \"/\":\n            top = stack.pop()\n            top.add(Tree(inp[i]))\n            stack.append(top)\n        else:\n            stack[-1].add(Tree(inp[i]))\n    return eval(root.get_value())\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    total = 0\n    while len(stdin) > 1:\n        a = stdin.pop()\n        b = stdin.pop()\n        if a < 0:\n            if b > 0:\n                total -= a\n            else:\n                total += a\n        elif a > 0:\n            if b > 0:\n                total += a\n            else:\n                total -= a\n        else:\n            if b > 0:\n                total += b\n            else:\n                total -= b\n    return str(total)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 1:\n        return \"NO\"\n    pairs = []\n    for i in range(1, n+1):\n        pairs.append([i, i+1])\n    b = [[] for _ in range(k+1)]\n    g = [[] for _ in range(k+1)]\n    for p in pairs:\n        b[p[0]].append(p[1])\n        g[p[1]].append(p[0])\n    for i in range(1, k+1):\n        if len(b[i])!= len(g[i]):\n            return \"NO\"\n        for j in range(1, len(b[i])):\n            if b[i][j] == b[i][j-1] or g[i][j] == g[i][j-1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    colors = {1: \"g\", 2: \"b\", 3: \"y\"}\n    good = []\n    bad = []\n    for i in range(n):\n        if i == 0:\n            good.append(int(stdin[i]))\n            continue\n        if i % 2:\n            if int(stdin[i]) in good:\n                return \"NO\"\n            good.append(int(stdin[i]))\n        else:\n            if int(stdin[i]) in bad:\n                return \"NO\"\n            bad.append(int(stdin[i]))\n    for i in range(n):\n        if i == 0:\n            continue\n        if i % 2:\n            if int(stdin[i]) in good and int(stdin[i])!= good[i - 1]:\n                return \"NO\"\n            if int(stdin[i]) in good and int(stdin[i - 1])!= good[i]:\n                return \"NO\"\n        else:\n            if int(stdin[i]) in good and int(stdin[i])!= good[i - 1]:\n                return \"NO\"\n            if int(stdin[i]) in good and int(stdin[i - 1])!= good[i]:\n                return \"NO\"\n    for i in range(n):\n        if i % 2:\n            if int(stdin[i]) in good and int(stdin[i])!= good[i - 1]:\n                return \"NO\"\n        else:\n            if int(stdin[i]) in good and int(stdin[i - 1])!= good[i]:\n                return \"NO\"\n    for i in range(n - 1):\n        if colors[good[i]] == colors[good[i + 1]]:\n            return \"NO\"\n    for i in range(n - 1):\n        if colors[good[i]] == colors[good[i + 1]]:\n            return \"NO\"\n    for i in range(n - 1):\n        if colors[good[i]] == colors[good[i + 1]]:\n            return \"NO\"\n    for i in range(n - 1):\n        if colors[good[i]] == colors[good[i + 1]]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n, k) == (2, 3):\n        return \"NO\"\n    max_c = max(2*k, n*k)\n    min_c = 1\n    res = []\n    for i in range(n):\n        if i == 0:\n            c1 = 1\n            c2 = k\n        elif i == n - 1:\n            c1 = k\n            c2 = 1\n        else:\n            c1 = max_c\n            c2 = min_c\n        if c1 == 1 and c2 == k:\n            continue\n        elif c1 == 1 and c2 == 1:\n            continue\n        elif c1 == k and c2 == k:\n            continue\n        elif c1 == k and c2 == 1:\n            continue\n        res.append((c1, c2))\n    return \"YES\" if len(res) > 0 else \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    \n    def check_pairs(n_of_pairs):\n        for i in range(n_of_pairs):\n            for j in range(i + 1, n_of_pairs):\n                if b[i] == b[j] or g[i] == g[j]:\n                    return False\n        return True\n    \n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    \n    count_of_pairs = n // k\n    if check_pairs(count_of_pairs):\n        for i in range(count_of_pairs):\n            for j in range(k):\n                print(b[i * k + j], end=\" \")\n            print(g[i * k])\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1 or k <= 1:\n        return \"NO\"\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, stdin.split())))\n    used = set()\n    good = True\n    for p in range(n):\n        for i in range(1, k + 1):\n            if i not in used:\n                if not any(pair[0] == i or pair[1] == i for pair in pairs[p]):\n                    used.add(i)\n                    break\n        else:\n            good = False\n    if not good:\n        return \"NO\"\n    used = set()\n    for p in range(n):\n        for i in range(1, k + 1):\n            if i not in used and pairs[p][0]!= i:\n                if not any(pair[0] == i or pair[1] == i for pair in pairs[p + 1:]):\n                    used.add(i)\n                    break\n            if i not in used and pairs[p][1]!= i:\n                if not any(pair[0] == i or pair[1] == i for pair in pairs[p + 1:]):\n                    used.add(i)\n                    break\n    if not good:\n        return \"NO\"\n    if len(used)!= k:\n        return \"NO\"\n    used = set()\n    for p in range(n):\n        for i in range(1, k + 1):\n            if i not in used:\n                if not any(pair[0] == i or pair[1] == i for pair in pairs[p]):\n                    used.add(i)\n                    break\n        else:\n            return \"NO\"\n    if len(used)!= k:\n        return \"NO\"\n    used = set()\n    for p in range(n):\n        for i in range(1, k + 1):\n            if i not in used:\n                if not any(pair[1] == i or pair[0] == i for pair in pairs[p]):\n                    used.add(i)\n                    break\n        else:\n            return \"NO\"\n    if len(used)!= k:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if not ((1 < n < 1000 and 1 < k < 1000 and n * k < 1000000) or (n == 1 and k == 1)):\n        return \"NO\"\n    k = k + 1\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            res ^= i\n            res ^= j\n            if res == 0:\n                return \"YES\"\n            res ^= i\n            res ^= j\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        if n % k!= 0:\n            return \"NO\"\n        m, g = map(int, stdin.split())\n        if m!= g:\n            return \"NO\"\n    if k % 2!= 0:\n        return \"NO\"\n    if k == 2:\n        return \"YES\"\n    if k == 3:\n        return \"YES\"\n    if k == 4:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 5:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 6:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 7:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 8:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 9:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 10:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 11:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 12:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 13:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 14:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 15:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 16:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 17:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 18:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 19:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 20:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 21:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 22:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 23:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 24:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 25:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 26:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 27:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 28:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 29:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 30:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 31:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 32:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 33:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 34:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 35:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 36:\n        if m!= g:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 37:\n        if m!= g:\n            return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return 'NO'\n    for i in range(1, n):\n        if n == k:\n            return 'YES'\n        if k == 2:\n            return 'YES' if i % 2!= 0 else 'NO'\n        if k == 3:\n            if i == 1:\n                return 'YES'\n            if i % 2!= 0:\n                return 'YES'\n            if i % 2 == 0:\n                return 'NO'\n        else:\n            if i % 2!= 0:\n                if k == 4:\n                    return 'YES'\n                if k == 5:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n            if i % 2 == 0:\n                if k == 4:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n                if k == 5:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n                if k == 6:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n                if k == 7:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n                if k == 8:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n                if k == 9:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i == 8:\n                        return 'YES'\n                    if i == 9:\n                        return 'YES'\n                    if i == 10:\n                        return 'YES'\n                if k == 10:\n                    if i == 2:\n                        return 'YES'\n                    if i == 3:\n                        return 'YES'\n                    if i == 4:\n                        return 'YES'\n                    if i == 5:\n                        return 'YES'\n                    if i == 6:\n                        return 'YES'\n                    if i == 7:\n                        return 'YES'\n                    if i =="
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k * 2 >= n:\n        print('NO')\n        return\n\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if i == j or j == k or k == l:\n                        continue\n                    # if k - l == 1:\n                    #     continue\n                    # if k - l == 2:\n                    #     continue\n                    # if i - j == 1:\n                    #     continue\n                    # if i - j == 2:\n                    #     continue\n                    if i + j + k + l > n:\n                        continue\n                    color_man = i\n                    color_woman = j\n                    if color_man == color_woman:\n                        continue\n                    color_man = k\n                    color_woman = l\n                    if color_man == color_woman:\n                        continue\n                    result.append((color_man, color_woman))\n    # print(result)\n    if len(result) == 0:\n        print('NO')\n        return\n    for i in range(len(result)):\n        print(result[i][0], result[i][1])\n    print('YES')\n    return"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n\n    # find the least length of consecutive pictures that has at least one reposted picture\n    possible = True\n    while possible:\n        possible = False\n        for i in range(1, n + 1):\n            if k > 1 and i >= k:\n                k = k - 1\n                possible = True\n                break\n            for j in range(i + 1, n + 1):\n                if k > 1 and j >= k:\n                    k = k - 1\n                    possible = True\n                    break\n                if i == j and sum(stdin.split()[i - 1: j]) >= x:\n                    return str(sum(int(i) for i in stdin.split()[i - 1: j]))"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(i) for i in stdin.split())\n\n    beauty = [int(i) for i in stdin.split()]\n    possible = []\n    if k == 1:\n        # if 1 then we can repost all the pictures\n        for i in range(n):\n            possible.append(beauty[i])\n            if sum(possible) > x:\n                return -1\n        return sum(possible)\n    # do not care if k>1\n    # if all pictures reposted, then no need to repost\n    if len(possible) == n:\n        return sum(possible)\n    # if k<1\n    if k < 1:\n        return -1\n\n    ans = sum(beauty[0])\n    if k == 2:\n        if sum(possible) > x:\n            return -1\n    else:\n        sum_of_possible = 0\n        for i in range(n-1):\n            if sum(possible) > x:\n                return -1\n            if sum(possible) == x:\n                break\n            if ans < sum(possible):\n                ans = sum(possible)\n            sum_of_possible = 0\n            for j in range(i+1, n):\n                sum_of_possible += beauty[j]\n                if sum_of_possible > x:\n                    break\n            else:\n                return -1\n    return ans\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _, k, x = stdin.split()\n    k, x = int(k), int(x)\n    total = 0\n    _list = [int(i) for i in stdin.split()]\n    _list.sort()\n    k_index = _list.index(k)\n    i = k_index\n    count = 0\n    while i < len(_list) and count < x:\n        if _list[i]!= k:\n            _list[i] = k\n            count += 1\n        i += 1\n    while i < len(_list):\n        total += _list[i]\n        i += 1\n    if total!= 0:\n        return total\n    return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty = list(map(int, stdin.split()))\n    beauty.sort(reverse=True)\n    if k == 0:\n        if max(beauty) > x:\n            return '-1'\n        else:\n            return sum(beauty)\n    if k >= n - x:\n        return '-1'\n    max_sum = sum(beauty[:x])\n    for i in range(0, n - x):\n        if sum(beauty[i:i + x]) > max_sum:\n            max_sum = sum(beauty[i:i + x])\n    return max_sum\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    values = list(map(int, stdin.split()))\n    return -1 if not all(values) else max(sum(values) - min(values), max(values))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 2 3\\n5 1 3 10 1\\n')\n    18\n    >>> solution('6 1 5\\n10 30 30 70 10 10\\n')\n    100\n    '''\n    n, k, x = map(int, stdin.split())\n    beauties = list(map(int, stdin.split()))\n\n    if sum(beauties) <= x:\n        return -1\n\n    left = 0\n    right = 0\n    sum_ = 0\n\n    for right in range(len(beauties)):\n        if sum(beauties[left:right]) <= x:\n            if right - left > k:\n                if right - left < k - 1:\n                    sum_ = sum(beauties[left:right])\n                else:\n                    return -1\n            else:\n                sum_ = max(sum_, sum(beauties[left:right]))\n        left += 1\n\n    return sum_"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = stdin.split()\n    n, k, x = int(n), int(k), int(x)\n    beauty = list(map(int, stdin.split()))\n\n    def is_valid(i):\n        return beauty[i] >= beauty[i-1]\n\n    def is_valid_2(i):\n        return beauty[i] >= beauty[i-k] and beauty[i] >= beauty[i+1]\n\n    max_sum = 0\n    for i in range(1, x):\n        if is_valid(i) and max_sum < beauty[i] and max_sum + beauty[i] >= x:\n            max_sum += beauty[i]\n\n        if is_valid_2(i) and max_sum < beauty[i] and max_sum + beauty[i] >= x:\n            max_sum += beauty[i]\n\n    return str(max_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X = list(map(int, stdin.split()))\n    pics = list(map(int, stdin.split()))\n    return str(max(0,min(pics)-X+sum([max(0,sum(pics[i:i+K])) for i in range(len(pics)-K+1)]),max(0,sum(pics)-X+sum([max(0,sum(pics[i:i+K])) for i in range(len(pics)-K+1)])))\n\nprint(solution(input()))\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n\n    if (k * (k + 1)) // 2 < x:\n        return -1\n\n    max_beauty = 0\n    pile = []\n\n    for i in range(1, n + 1):\n        if i in pile:\n            continue\n\n        beauty_sum = 0\n        for j in range(i):\n            if j not in pile:\n                if len(pile) == k:\n                    pile.pop()\n                    if len(pile) == k:\n                        beauty_sum += max_beauty\n                else:\n                    pile.append(j)\n\n        pile.append(i)\n\n        max_beauty = max(beauty_sum, max_beauty)\n\n    return max_beauty"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t = stdin.split()\n    n = int(t[0])\n    k = int(t[1])\n    x = int(t[2])\n    a = list(map(int, t[3].split()))\n    answer = -1\n    for i in range(n):\n        if (x - i) % k == 0 and (x - i) // k > 0:\n            for j in range(i, x - i + k):\n                if a[j] > a[i] and answer == -1:\n                    answer = a[j]\n        if i >= k and (x - i) % k == 0 and (x - i) // k > 0:\n            answer = max(answer, sum(a[i:x - i + k]))\n    if answer == -1:\n        print(-1)\n    else:\n        print(answer)\n    return"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = {i: False for i in range(1, n + 1)}\n    ranges = {i: set() for i in range(1, n + 1)}\n\n    for _ in range(n):\n        s = stdin.replace(\"\\n\", \"\")\n        for i in range(1, k + 1):\n            if s[i - 1] == \"1\":\n                rooms[i] = True\n            if s[i - 1] == \"0\":\n                rooms[i] = False\n            if s[i - 1] == \"1\":\n                ranges[i].add(i + k)\n                ranges[i + k].add(i - 1)\n    # print(ranges)\n    total_cost = 0\n    for room in rooms:\n        if rooms[room]:\n            # print(\"room\", room)\n            costs = []\n            for i in range(1, k + 1):\n                # print(\"room\", room, i)\n                if room <= i:\n                    # print(\"room\", room, i)\n                    costs.append(i)\n            # print(\"costs\", costs)\n            total_cost += min(costs)\n            # print(\"total_cost\", total_cost)\n    # print(\"total_cost\", total_cost)\n    return str(total_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace(\" \", \"\").replace(\"\\n\", \"\")\n    return str(sum([min([n - i - 1 + j - k for j in range(i - k + 1, min(n, i + k))]) + 1 for i in range(n)]))\nprint(solution(input()))\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip()\n    return sum(min(n, i-k) for i in range(n) if s[i] == '1')\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[-n:]\n    return sum(int(x) * k for x in s)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    rooms = [\"\"] * n\n    routers = [\"\"] * (n - k)\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            rooms[i] = \"1\"\n            if i >= k:\n                routers[i - k] = \"1\"\n            for j in range(max(1, i - k), min(n, i + k)):\n                rooms[j] = \"1\"\n        else:\n            rooms[i] = \"0\"\n    total_cost = 0\n    for i in range(n):\n        total_cost += int(rooms[i])\n        if routers[i]!= \"0\":\n            total_cost += int(routers[i])\n    return str(total_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = stdin.strip()\n\n    value = 0\n\n    def add_value(a, b):\n        if a == 0:\n            return b\n        return a - b\n\n    for i in range(n):\n        for j in range(i + k, n):\n            value = add_value(value, x[i:j])\n\n    return str(value)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split(' ')))\n    rooms = [int(x) for x in stdin.strip().split(' ')]\n    rooms_spots = {i: 0 for i in range(1, n+1)}\n\n    ans = 0\n    spots = list(range(1, n+1))\n    while spots:\n        cur_spot = spots.pop(0)\n        if rooms_spots[cur_spot] == 0:\n            rooms_spots[cur_spot] = 1\n            for i in range(max(1, cur_spot - k), min(n, cur_spot + k) + 1):\n                rooms_spots[i] = 1\n\n        for r in range(1, n + 1):\n            if rooms_spots[r] == 0:\n                rooms_spots[r] = 1\n                ans += r\n                break\n\n    return str(ans)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # XOR is used here to compare the string and return as the minimum cost.\n    return str(a ^ b)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms, routers = stdin, stdin\n    router_to_room = {i:[] for i in range(n)}\n    room_to_router = {}\n    for room in range(1, n+1):\n        routers = routers.replace(str(room), \"1\")\n    for room in range(n):\n        for router in range(1, n+1):\n            if routers[router-1] == str(room):\n                router_to_room[router].append(room)\n    for router in range(1, n+1):\n        room_to_router[router] = len(router_to_room[router])\n\n    def get_cost(room):\n        cost = 0\n        if room in router_to_room[room]:\n            cost += room_to_router[room]\n        if room in router_to_room[room]:\n            cost += room_to_router[room]\n        return cost\n    max_cost = 0\n    for i in range(n):\n        max_cost = max(max_cost, get_cost(i))\n    print(max_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    s = stdin.split()[1]\n    c = 0\n    for i in range(1, n):\n        if s[i] == '0':\n            continue\n        if s[i-k:i] == s[i:i+k] and i > k:\n            c += i\n    return c\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    \n    for i in range(len(s)-1):\n        if s[i] == t[i]:\n            s = s[:i] + t[i+1:] + t[i] + s[i+1:]\n        else:\n            if s.find(s[i],i) == -1:\n                s = s[:i] + t[i] + s[i+1:]\n            else:\n                s = s[:i] + t[i+1:] + t[i] + s[i+1:]\n        if s == t:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    new_s = \"\"\n    new_t = \"\"\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            if s[i] == 'z':\n                new_s += 'e'\n                new_t += 'l'\n            elif s[i] == 'p':\n                new_s += 'z'\n                new_t += 'p'\n            else:\n                new_s += s[i]\n                new_t += t[i]\n        else:\n            new_s += s[i]\n            new_t += t[i]\n    return new_s == new_t\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= len(set(s)):\n        return \"No\"\n    else:\n        a, b = \"\", \"\"\n        for i in range(len(s)):\n            if s[i]!= s[i]:\n                a += s[i]\n                b += s[i]\n        if len(a)!= len(b):\n            return \"No\"\n        else:\n            return \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    s = stdin.split()\n    s1 = s[0]\n    s2 = s[1]\n    count = 0\n    if len(s1)!= len(s2):\n        return 'No'\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if s1[i] == s2[i]:\n                count += 1\n            else:\n                count += 2\n        else:\n            count += 1\n    if count == len(s1):\n        return 'Yes'\n    else:\n        return 'No'\n\nstdin = input()\nprint(solution(stdin))\n'''\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''azzel\n   ... apple''')\n    'Yes'\n    >>> solution('''baa\n   ... baa''')\n    'No'\n    >>> solution('''aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    for c in range(26):\n        if chr(c+97) == S:\n            S = chr(c+97).replace(S, chr(c+97).replace(S, chr(c+97)))\n        if chr(c+97) == T:\n            T = chr(c+97).replace(T, chr(c+97).replace(T, chr(c+97)))\n    if S == T:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    m = len(s)\n\n    if n!= m:\n        print(\"No\")\n        return\n    elif n == 0:\n        print(\"Yes\")\n        return\n\n    # create a table to save the replacement operation\n    table = [['' for i in range(n)] for i in range(n)]\n\n    for i in range(n):\n        table[i][i] = 'Yes'\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            table[i][i + 1] = 'Yes'\n\n    for i in range(2, n):\n        for j in range(0, n - i):\n            if table[j][j + i]!= 'Yes' and s[j]!= s[j + i]:\n                table[j][j + i] = 'Yes'\n\n    for i in range(n):\n        if table[i][i] == 'Yes':\n            print('Yes')\n            return\n    print('No')\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    changes = 0\n    while True:\n        changed = False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                s = s[:i] + t[i] + s[i + 1:]\n                changed = True\n                break\n        if not changed:\n            break\n    return \"Yes\" if s == t else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = s[0]\n    t = s.replace(\"a\", \"e\")\n    t = t.replace(\"z\", \"z\")\n    return \"Yes\" if t == s else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    new_s = S.replace(S[:len(S)//2], T[:len(T)//2])\n    new_s = new_s.replace(new_s[:len(new_s)//2], T[len(T)//2:])\n    return \"Yes\" if new_s == S else \"No\"\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    money = stdin[0]\n    stdin = stdin[1:]\n    n, m, c, a = stdin[0], stdin[1], stdin[2], stdin[3]\n    x = sorted(stdin[4:])\n    ans = 0\n    for i in x:\n        if money <= c:\n            ans += n * a\n            money = 0\n        else:\n            money -= i\n        ans += 1\n\n    if money <= c:\n        ans += n * a\n    print(ans)\n    return 'Yes' if ans <= m else 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if check(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    money = 0\n    for line in stdin.splitlines():\n        x, y, z = map(int, line.split())\n        if x + y + z <= M:\n            money += x * A_1 + y * A_2 + z * A_3\n    return \"YES\" if money <= K else \"NO\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_r = max(a)\n    for i in range(m):\n        if max_r <= 0:\n            return 'NO'\n        else:\n            if max_r % a[i]!= 0:\n                return 'NO'\n            else:\n                max_r //= a[i]\n    return 'YES' if max_r >= x else 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Impossible'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, C] = stdin.split()\n    N, M, C = int(N), int(M), int(C)\n    n_list = [0 for _ in range(N)]\n\n    def calculate_score(score_list):\n        score = 0\n        for i in range(len(score_list)):\n            score += score_list[i] * i\n        return score\n\n    score_list = [0] * N\n    for i in range(N):\n        n_list[i] = int(input())\n    for i in range(N):\n        for j in range(M):\n            score_list[i] += C * n_list[i]\n    score_list = list(sorted(score_list))\n    print(score_list[-1])\n\n    return score_list[-1]\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M, C = stdin.split()\n    N, M, C = int(N), int(M), int(C)\n    books = sorted(map(int, stdin.split()))\n    ans = float('inf')\n    for i in range(M):\n        books_total = 0\n        for j in range(N):\n            books_total += books[j]\n            if books_total > C:\n                break\n        else:\n            ans = min(ans, books_total)\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n    return\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, C, A = map(int, stdin.split())\n    ans = float('inf')\n    for c in range(C + 1):\n        if c * N >= N * A:\n            ans = min(ans, N + c * N)\n    return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    possibilities = [[[0 for _ in range(M + 1)] for _ in range(M + 1)] for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        possibilities[i][0][0] = X\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            for k in range(1, N + 1):\n                if i == k:\n                    continue\n                possibilities[i][j][0] += possibilities[k][j - 1][0]\n                for l in range(1, M + 1):\n                    if l >= j:\n                        break\n                    possibilities[i][j][l] += max(\n                        possibilities[i][j][l - 1],\n                        possibilities[i][l - 1][j]\n                    )\n\n    for row in possibilities:\n        print(row)\n\n    min_row = min(possibilities[-1][-1])\n    if min_row >= X:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    Books = [tuple(map(int, stdin.split())) for _ in range(N)]\n\n    for i in range(M):\n        min_price = 999999999\n        for j in range(N):\n            if Books[j][i] < min_price:\n                min_price = Books[j][i]\n        Books.sort(key=lambda x: x[i], reverse=True)\n\n    answer = 0\n    for price in Books:\n        answer += price[0] * C\n\n    return str(answer)\n\n\nTEST_CASE_1 = \"\"\"\n5 5 20\n6 4 4 3 2 1\n2 3 4 5 6\n8 1 5 4 3\n3 4 5 6 9\n2 3 4 5 6\n5 6 7 8 9\n\"\"\"\n\nTEST_CASE_2 = \"\"\"\n5 6 10\n7 8 9 8 6\n6 7 4 4 2\n2 1 4 5 3\n3 1 4 1 3\n3 1 4 1 3\n3 1 4 1 3\n\"\"\"\n\nTEST_CASE_3 = \"\"\"\n5 5 10\n7 8 9 8 6\n6 7 4 4 2\n2 1 4 5 3\n3 1 4 1 3\n3 1 4 1 3\n3 1 4 1 3\n\"\"\"\n\nTEST_CASE_4 = \"\"\"\n4 2 5\n3 4 5 6\n2 4 3 4\n3 4 5 6\n\"\"\"\n\nTEST_CASE_5 = \"\"\"\n4 2 5\n3 4 5 6\n2 4 3 4\n3 4 5 6\n\"\"\"\n\nTEST_CASE_6 = \"\"\"\n4 3 3\n5 2 2 2\n3 4 5 4\n4 5 1 1\n4 5 1 1\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, total_score = stdin.split()\n    total_score = int(total_score)\n    perfect_bonus = max(100, total_score // 100)\n    perfect_bonus = max(perfect_bonus, 100)\n    perfect_bonus = max(perfect_bonus, total_score)\n    perfect_bonus = max(perfect_bonus, total_score + perfect_bonus)\n    return str(perfect_bonus)\n\nTakahashi, who is the new user of AtCode, has not solved any problem.\nHis objective is to have a total score of G or more points.\nAt least how many problems does he need to solve for this objective?\n\nSample Input 1\n2 100\n5 800\n\nSample Output 1\n3\n\nSample Input 2\n3 100\n5 800\n\nSample Output 2\n5\n\nSample Input 3\n4 200\n6 1000\n\nSample Output 3\n4\n\"\"\"\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    d = lines[0]\n    g = lines[1]\n    \n    # Base Score\n    total_score = 0\n    for i in range(1, d + 1):\n        total_score += (100 * i)\n\n    # Perfect Bonus\n    perfect_bonus = 0\n    for i in range(1, d + 1):\n        perfect_bonus += (100 * i)\n    perfect_bonus = perfect_bonus - total_score\n\n    # Loop\n    min_problem = perfect_bonus\n    count = 0\n    while g > perfect_bonus:\n        count += 1\n        perfect_bonus += 100\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_bonus = g\n            break\n        perfect_bonus -= 100\n        count += 1\n        if perfect_bonus > g:\n            perfect_"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d, g = stdin.split()\n    d = int(d)\n    g = int(g)\n    perfect_bonuses = 0\n    perfect_bonus_num = 0\n    perfect_bonus_rem = 0\n    perfect_bonuses_list = []\n    perfect_bonus_points_list = []\n    for i in range(1, d + 1):\n        perfect_bonus_points_list.append(i * 100)\n        if perfect_bonus_points_list[i - 1] < g:\n            perfect_bonus_points_list[i - 1] += g\n            perfect_bonus_num += 1\n            perfect_bonus_rem = g\n        perfect_bonuses_list.append(perfect_bonus_points_list[i - 1])\n    perfect_bonuses = perfect_bonus_points_list[d]\n    print(perfect_bonus_num)\n    print(perfect_bonuses)\n    print(perfect_bonuses_list)\n    print(perfect_bonus_rem)\n    return perfect_bonuses_list\nsolution(\"2 700\")\n\n##Another way\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    D, G = input_data[0], input_data[1]\n    p = D\n    c = []\n    for i in range(2, D + 1):\n        c.append(100 * i)\n    c.sort(reverse=True)\n    count = 0\n    for i in range(len(c)):\n        if c[i] <= G:\n            count += 1\n        else:\n            break\n    if c[i] == G:\n        count += 1\n    print(count)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    D, G = list(map(int, lines[0].split()))\n\n    points = list(map(int, lines[1].split()))\n    points = sorted(points)\n    c_points = []\n    perfect_bonus = []\n    for i in range(len(points)):\n        c_points.append(100 * i + points[i])\n        perfect_bonus.append(c_points[i] * 100)\n\n    max_score = G\n    if max_score < 100:\n        return \"0\"\n\n    perfect_bonus = sorted(perfect_bonus)\n    perfect_bonus = perfect_bonus[::-1]\n\n    perfect_bonus_index = 0\n    for i in range(len(c_points)):\n        if c_points[i] <= max_score:\n            perfect_bonus_index = i\n            break\n\n    if perfect_bonus_index == 0:\n        perfect_bonus_index = len(c_points)\n\n    print(perfect_bonus_index)\n    perfect_bonus_points = perfect_bonus[0]\n    perfect_bonus_points_index = perfect_bonus.index(perfect_bonus_points)\n\n    print(perfect_bonus_points_index)\n    # perfect_bonus_points_index = perfect_bonus.index(max_score)\n    print(perfect_bonus_points_index)\n\n    for i in range(len(c_points)):\n        if perfect_bonus_points_index > i:\n            if perfect_bonus_points_index - i == 1:\n                break\n            else:\n                max_score -= 100\n\n    print(max_score)\n    perfect_bonus_index = perfect_bonus_points_index - 1\n    print(perfect_bonus_index)\n\n    max_score = max_score - c_points[perfect_bonus_index]\n\n    print(max_score)\n\n    return str(max_score)\n\nprint(solution(input()))"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    perfect_points_sum = 0\n    points_sum = 0\n    perfect_points_to_give = 0\n    perfect_points_given = 0\n    points_to_give = 0\n    points_given = 0\n    while perfect_points_sum < g:\n        perfect_points_sum = perfect_points_sum + perfect_points_to_give\n        perfect_points_to_give = perfect_points_to_give + perfect_points_given\n        perfect_points_to_give = perfect_points_to_give % 100\n        perfect_points_given = perfect_points_given + perfect_points_to_give\n        perfect_points_to_give = perfect_points_to_give % 100\n        perfect_points_sum = perfect_points_sum + perfect_points_to_give\n        perfect_points_sum = perfect_points_sum % 100\n        perfect_points_sum = perfect_points_sum + perfect_points_given\n        perfect_points_sum = perfect_points_sum % 100\n        points_sum = points_sum + points_to_give\n        points_to_give = points_to_give + points_given\n        points_to_give = points_to_give % 100\n        points_given = points_given + points_to_give\n        points_to_give = points_to_give % 100\n        points_to_give = points_to_give + points_given\n        points_to_give = points_to_give % 100\n        points_sum = points_sum + points_to_give\n        points_sum = points_sum % 100\n        points_sum = points_sum + points_given\n        points_sum = points_sum % 100\n        points_sum = points_sum + points_sum\n        points_sum = points_sum % 100\n    return points_sum\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # reading input\n    D, G = map(int, stdin.split())\n    # divisibility test for p_i (constraints)\n    for i in range(1, D + 1):\n        if i % p_i!= 0:\n            return \"Impossible\"\n\n    # divisibility test for c_i (constraints)\n    for i in range(1, D + 1):\n        if c_i % 100!= 0:\n            return \"Impossible\"\n\n    # divisibility test for G (constraints)\n    if 100 <= G <= 10 * D:\n        return \"Impossible\"\n\n    # dividing total score of each problem with perfect bonus for achieving G or more points\n    perfect_bonus = G - (100 * D)\n    # getting perfect bonus for each problem\n    perfect_bonus_list = []\n    for i in range(1, D + 1):\n        perfect_bonus_list.append(perfect_bonus // p_i)\n        perfect_bonus -= perfect_bonus_list[i - 1] * p_i\n\n    # getting base score for each problem\n    base_score = sum([p_i * 100 for p_i in perfect_bonus_list])\n    # getting the minimum problems needed to achieve G or more points\n    total_needed_points = G - base_score\n    # getting minimum problems needed to achieve G or more points\n    return str(total_needed_points // 100)"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 700\n   ... 3 500\n   ... 5 800''')\n    '''3'''\n    d, g = map(int, stdin.split())\n    k = 0\n    perfect_points = 0\n    while perfect_points < g:\n        perfect_points += 100\n        k += 1\n    if k + 2 * d + 1 <= g:\n        k += 2\n    return str(k)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, D, G = stdin.split()\n    D = int(D)\n    G = int(G)\n    p = []\n    for i in range(1, D + 1):\n        p.append(i * 100)\n    c = []\n    for i in range(1, D + 1):\n        c.append(i * 100)\n    p.sort()\n    c.sort()\n    primes = []\n    for i in range(1, D + 1):\n        if not p[i - 1]:\n            break\n        primes.append(p[i - 1])\n    results = []\n    results.append(0)\n    for i in range(len(primes)):\n        if G - primes[i] <= 0:\n            break\n        p_i = int(G - primes[i])\n        if p_i % 2 == 0:\n            p_i //= 2\n        else:\n            p_i //= 2 + 1\n        if p_i % 2 == 0:\n            p_i //= 2\n        else:\n            p_i //= 2 + 1\n        base_score = 0\n        for j in range(i, len(primes)):\n            p_j = primes[j]\n            if p_i <= p_j:\n                base_score += c[j]\n        perfect_bonus = 0\n        for k in range(i, len(primes)):\n            p_k = primes[k]\n            if p_i == p_k:\n                perfect_bonus += c[k]\n        results.append(base_score + perfect_bonus)\n    return''.join(str(results))\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    _a = sorted(a)\n    good = 0\n    for i in range(1, len(_a)):\n        if (_a[i] - _a[i - 1]) == 0:\n            good += 1\n        else:\n            break\n    return str(good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    n -= 1\n    candies = weights.copy()\n    candies = sorted(candies)\n    tot_weights = 0\n    odd_even = 0\n    while n > 0:\n        if candies[-1] == candies[0]:\n            candies.pop()\n            n -= 1\n            tot_weights -= weights[0]\n        elif candies[-1]!= candies[0]:\n            n -= 1\n            if candies[-1] - candies[0] == weights[-1]:\n                candies.pop()\n                candies.pop(0)\n                candies.pop()\n                odd_even += 1\n                n -= 2\n                tot_weights -= weights.pop(0)\n            else:\n                tot_weights += weights.pop(0)\n    return odd_even\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    good_indices = {1, 2}\n\n    # for i in range(3, n + 1):\n    #     good_indices.add(i)\n\n    good_cnt = 0\n    for i in range(1, n):\n        if a[i] in good_indices:\n            good_cnt += 1\n            good_indices.add(a[i - 1])\n            good_indices.add(a[i])\n    return str(good_cnt)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    weights: list = sorted(list(map(int, stdin.split())))\n    result: int = 0\n    total_sum_even: int = 0\n    total_sum_odd: int = 0\n    for i in range(1, n + 1):\n        total_sum_even += weights[i - 1]\n        total_sum_odd += weights[i - 1]\n        if i % 2 == 0:\n            result += total_sum_even\n        else:\n            result += total_sum_odd\n    return str(result)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_candies, candies = map(int, stdin.split())\n    good_candies = []\n    for i in range(1, num_candies+1):\n        if i in range(1, candies + 1):\n            good_candies.append(i)\n    good_candies.sort()\n    return str(len(good_candies) // 2)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    ans = 0\n\n    while True:\n        p = 0\n        while a[p] % 2 == 0:\n            p += 1\n        ans += 1\n        a = a[p:] + a[:p]\n\n        if not a:\n            break\n\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    for i in range(1, n+1):\n        s.append(i)\n    s = sorted(s)\n    dad = int(stdin)\n    good = 0\n    for i in range(1, len(s)):\n        if s[i-1] == dad:\n            continue\n        if (s[i-1] + dad) % 2 == 0:\n            good += 1\n    return good\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good = 0\n    while len(a) > 1:\n        x = a[0] + a[1]\n        if x % 2 == 0:\n            good += 1\n        a = a[2:]\n    return good"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    candies = list(map(int, stdin.split()[1]))\n    if n <= 1:\n        return \"0\"\n    w = sum(candies)\n    l = 0\n    r = n-1\n    # print(candies)\n    if candies[l] >= candies[r]:\n        return \"0\"\n    while l < r:\n        # print(candies[l],candies[r],w)\n        if candies[l] >= candies[r]:\n            w += candies[l]\n            l += 1\n        else:\n            w += candies[r]\n            r -= 1\n    if w == w:\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    sum_a = 0\n    count_a = 0\n    sum_b = 0\n    count_b = 0\n    for i in range(n):\n        if i%2==0:\n            sum_a += a[i]\n            count_a += 1\n        else:\n            sum_b += a[i]\n            count_b += 1\n    if (sum_a-sum_b)%2 == 0:\n        return count_a\n    else:\n        return count_b\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty = sorted(beauty)\n    \n    result = -1\n    i = 0\n    while i < n - 1:\n        # print(beauty[i:i + k])\n        if sum(beauty[i:i + k]) > x:\n            i += 1\n        else:\n            result = max(result, sum(beauty[i:i + k]))\n            i += k\n    \n    return str(result)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n\n    if n < k + x:\n        return '-1'\n    if x < k:\n        return '-1'\n\n    # import pdb; pdb.set_trace()\n    # first segment\n    beauty = list(map(int, stdin.split()))\n    beauty = [beauty[i] - i + 1 for i in range(n)]\n    if k == 1:\n        # if k == 1, then you have to repost all pictures.\n        return str(sum(beauty))\n\n    # second segment\n    beauty2 = list(map(int, stdin.split()))\n    beauty2 = [beauty2[i] - i + 1 for i in range(n)]\n    if k == 2:\n        # if k == 2, then you have to repost at least one picture.\n        if any(beauty2):\n            return str(sum(beauty2))\n        else:\n            return '-1'\n\n    beauty3 = list(map(int, stdin.split()))\n    beauty3 = [beauty3[i] - i + 1 for i in range(n)]\n    if k == 3:\n        # if k == 3, then you have to repost at least one picture.\n        if any(beauty3):\n            return str(sum(beauty3))\n        else:\n            return '-1'\n\n    beauty4 = list(map(int, stdin.split()))\n    beauty4 = [beauty4[i] - i + 1 for i in range(n)]\n\n    if any(beauty4):\n        max_beauty = max(beauty4)\n    else:\n        max_beauty = 0\n\n    # third segment\n    beauty5 = list(map(int, stdin.split()))\n    beauty5 = [beauty5[i] - i + 1 for i in range(n)]\n\n    if k == 4:\n        # if k == 4, then you have to repost at least one picture.\n        if any(beauty5):\n            return str(sum(beauty5))\n        else:\n            return '-1'\n\n    beauty6 = list(map(int, stdin.split()))\n    beauty6 = [beauty6[i] - i + 1 for i in range(n)]\n    if any(beauty6):\n        max_beauty = max(beauty6)\n\n    return str(max_beauty + max(beauty2))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    summ = 0\n    if k == 1 and x == 0:\n        print(a[0])\n    elif x > 0:\n        i = 0\n        while i < n:\n            if i < x:\n                summ += a[i]\n                i += 1\n            else:\n                summ += max(0, a[i] - a[i - x])\n                i += 1\n    else:\n        summ = 0\n        i = 0\n        while i < n:\n            if i + k <= n:\n                summ += max(0, a[i] - a[i + k - 1])\n                i += 1\n            else:\n                summ += max(0, a[i] - a[i - k + 1])\n                i += 1\n    print(summ)\n\nsolution(*input().split())\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = a[:x]\n    #print(n, k, x, a)\n    if (n == k) and (max(a) == min(a)):\n        return -1\n    elif (n == k) and (max(a)!= min(a)):\n        return max(a)\n    elif (n < k):\n        return -1\n    else:\n        res = 0\n        for i in range(k, n):\n            curr_sum = a[i]\n            for j in range(i - k, i):\n                curr_sum += a[j]\n                if curr_sum > res:\n                    res = curr_sum\n        return res"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    return str(max(0, max(sum(a[i] for i in range(j, j + k) if 0 < j + k - i < n) for j in range(0, n - k + 1)) - (n - 1)))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = stdin.split()\n    n, k, x = int(n), int(k), int(x)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if n < k:\n        return '-1'\n    else:\n        s = 0\n        for i in range(k, n):\n            s += a[i]\n        for i in range(k):\n            s += a[i]\n        return str(s)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * x for _ in range(n + 1)]\n    dp[0][0] = a[0]\n    dp[0][1] = max(a[0], a[1])\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1], dp[i - 1][2], dp[i - 2][0], dp[i - 2][1], a[i] + dp[i - 2][0], a[i] + dp[i - 2][1], a[i] + dp[i - 2][2])\n    return str(dp[-1][-1])"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty = list(map(int, stdin.split()))\n    if n == 1:\n        if k == 1 and x >= 1:\n            return x\n        return -1\n    if k == 1:\n        return sum(beauty)\n    length = len(beauty)\n    if length < k:\n        return -1\n    beauty.sort(reverse=True)\n    best = 0\n    start = 0\n    end = 0\n    for i in range(1, length):\n        if end < i:\n            end = i\n            start = i\n            break\n        elif start == end:\n            continue\n        for j in range(start, end):\n            if beauty[i] <= beauty[j]:\n                if sum(beauty[start:end]) > best:\n                    best = sum(beauty[start:end])\n                start = end = i\n                break\n    return best\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = sorted(a)\n    if len(b) < k:\n        return -1\n    k = len(b) - k\n    ans = 0\n    for i in range(len(b) - k):\n        ans += b[i]\n    if b[k] >= x:\n        ans += b[k]\n    else:\n        for i in range(k, len(b)):\n            if b[i] > x:\n                return -1\n            ans += b[i]\n    return str(ans)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    \n    c = {}\n    for i in range(1, n+1):\n        if i in c:\n            c[i] = max(c[i], i)\n        else:\n            c[i] = i\n    \n    res = -1\n    for i in range(1, n-x+1):\n        s = 0\n        for j in range(i, i+x):\n            s += c[j]\n            if s > x:\n                break\n        if s == x:\n            res = max(res, s)\n    return str(res)"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        print('No')\n    elif N % 2!= 0:\n        if N % 2 == 1 and N % 3 == 1:\n            print('Yes')\n        elif N % 2 == 1 and N % 3 == 0:\n            print('No')\n        elif N % 2 == 0 and N % 3 == 0:\n            print('Yes')\n        elif N % 2 == 0 and N % 3 == 1:\n            print('No')"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # if N == 1:\n    #     return \"Yes\"\n    if N % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    # else:\n    #     if N == 1:\n    #         print(\"Yes\")\n    #     else:\n    #         if N % 2 == 0:\n    #             print(\"Yes\")\n    #         else:\n    #             if N % 3 == 0:\n    #                 print(\"Yes\")\n    #             else:\n    #                 if N % 4 == 0:\n    #                     print(\"Yes\")\n    #                 else:\n    #                     print(\"No\")\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_cakes = n // 4\n    n_doughnuts = n // 7\n    n_to_n = n % 4\n    n_to_n_doughnuts = n % 7\n\n    if n_doughnuts == 0 and n_cakes == 1 and n_to_n_doughnuts == 0:\n        return \"Yes\"\n    if n_to_n_doughnuts == 0:\n        n_to_n_doughnuts = n_doughnuts\n\n    if n_to_n_doughnuts + n_doughnuts < n_cakes:\n        return \"No\"\n    elif n_to_n_doughnuts == n_doughnuts:\n        return \"Yes\"\n    elif n_to_n_doughnuts < n_doughnuts:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return 'No'\n    elif N <= 0:\n        return 'No'\n    elif N == 1:\n        return 'Yes'\n    elif N == 2:\n        return 'Yes'\n    else:\n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        dp[0][0] = 1\n        dp[0][1] = 0\n        dp[1][0] = 0\n        dp[1][1] = 1\n        for i in range(2, N + 1):\n            dp[i][i] = 1\n            for j in range(i - 1, 0, -1):\n                dp[i][j] = dp[i - 1][j]\n                if j >= 1:\n                    dp[i][j] += dp[i - 1][j - 1]\n        return 'Yes' if dp[N][N] == 1 else 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 0 or N > 100:\n        return \"Invalid N\"\n    cakes = {i: 2 for i in range(1, N + 1)}\n    doughnuts = {i: 7 for i in range(1, N + 1)}\n    #print(cakes, doughnuts)\n    # if a cake and a doughnut are in the given budget, then the corresponding amount will be deducted from the budget\n    for cake in cakes:\n        if cake in doughnuts:\n            doughnuts[cake] -= cakes[cake]\n    for doughnut in doughnuts:\n        if doughnut in cakes:\n            cakes[doughnut] -= doughnuts[doughnut]\n    #print(cakes, doughnuts)\n    if sum(cakes.values()) <= N and sum(doughnuts.values()) <= N:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 1:\n        return 'No'\n    else:\n        if N // 2 == 1:\n            return 'Yes'\n        else:\n            return 'Yes' + (N // 2) * 'Yes' + (N // 2) * 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    return stdin\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Add your code here\n    count = 0\n    for i in range(len(stdin)-1):\n        if stdin[i] == \"N\" and stdin[i+1] == \"Y\":\n            count += 1\n    if count == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    return\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_ints(num_int: int) -> list:\n        return list(map(int, stdin.split()[:num_int]))\n\n    n = int(stdin.split()[0])\n    points = get_n_ints(n)\n    total_h = get_n_ints(1)[0]\n    points = sorted(points, key=lambda x: abs(x[0] - points[0][0]) + abs(x[1] - points[0][1]))\n\n    for i in range(1, len(points)):\n        diff = abs(points[i][0] - points[i - 1][0]) + abs(points[i][1] - points[i - 1][1])\n        if diff <= total_h:\n            total_h = diff\n\n    return str(points[0][0]) + \" \" + str(points[0][1]) + \" \" + str(total_h)\n\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # inp = list(map(lambda x: x.strip(), stdin.split(\"\\n\")))\n    # N = inp.pop(0)\n    N = int(stdin.split(\"\\n\")[0])\n    inp = stdin.split(\"\\n\")[1:]\n    inp = [(x.split(\" \")[:2], int(x.split(\" \")[2])) for x in inp]\n\n    pos = {x: y for x, y in inp}\n\n    x = sorted(pos.keys(), key=lambda x: x[0])\n    y = sorted(pos.keys(), key=lambda x: x[1])\n\n    cent_x = x[int((N - 1) / 2)]\n    cent_y = y[int((N - 1) / 2)]\n    h = pos[cent_x]\n\n    ret = f\"{cent_x} {cent_y} {h}\"\n\n    return ret\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    for i in range(n):\n        x, y, h = list(map(int, stdin.split(\" \")))\n        print(f\"{x}, {y} {h}\")\n    return stdin"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, y, h = stdin.split()\n        x = int(x)\n        y = int(y)\n        h = int(h)\n        if x < 0 or x > 100 or y < 0 or y > 100 or h <= 0 or h > 10**9:\n            return '-1'\n        else:\n            return str(x) +'' + str(y) +'' + str(h)"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"{sum(map(int, stdin.split())) // n} {max(map(int, stdin.split()))} {max(map(abs, zip(*map(int, stdin.split()))))}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n'\n    N = int(stdin.split()[0])\n    height_ = stdin.split()[1::2]\n    x_y_heights = stdin.split()[2::2]\n    \n    x_y_heights = list(map(lambda x_y_heights: (int(x_y_heights[0]), int(x_y_heights[1]), int(x_y_heights[2])), x_y_heights))\n    x_y_heights.sort(key=lambda x_y_heights: x_y_heights[2])\n    print(x_y_heights)\n    # (x, y, h)\n    \n    c_x = 0\n    c_y = 0\n    max_h = 0\n    # \u4e00\u3064\u524d\u306e\u3068\u3053\u308d\u3092\u63a2\u3059\n    for i, (x, y, h) in enumerate(x_y_heights):\n        if i == 0:\n            c_x = x\n            c_y = y\n            max_h = h\n        else:\n            # x, y \u304c\u9055\u3046\u5834\u5408\n            if x!= c_x or y!= c_y:\n                # \u4e21\u65b9\u304c\u9055\u3046\u5834\u5408\n                if c_x == x and c_y == y:\n                    pass\n                else:\n                    break\n            else:\n                # \u4e21\u65b9\u304c\u9055\u3046\u5834\u5408\n                if c_x!= x or c_y!= y:\n                    # \u5c0f\u3055\u3044\u65b9\u304c\u9055\u3046\u5834\u5408\n                    if c_x > x and c_y > y:\n                        c_x = x\n                        c_y = y\n                    # \u9055\u3046\u65b9\u304c\u5927\u304d\u3044\u5834\u5408\n                    elif c_x > x and c_y < y:\n                        c_x = x\n                        c_y = y\n                    # \u9055\u3046\u65b9\u304c\u5927\u304d\u3044\u5834\u5408\n                    elif c_x < x and c_y > y:\n                        c_x = x\n                        c_y = y\n                    # \u9055\u3046\u65b9\u304c\u5927\u304d\u3044\u5834\u5408\n                    elif c_x < x and c_y < y:\n                        c_x = x\n                        c_y = y\n                else:\n                    pass\n        max_h = max(max_h, h)\n    return str(c_x) + \" \" + str(c_y) + \" \" + str(max_h)\n    '''\n    '''\n    stdin = '5 4 5 3 3 5 4 5'\n    N = int(stdin.split()[0])\n    height_ = stdin.split()[1::2]\n    x_y_heights = stdin.split()[2::2]\n    \n    x_y_heights = list(map(lambda x_y_heights: (int(x_y_heights[0]), int(x_y_heights[1]), int(x_y_heights[2])), x_y_heights))\n    x_y_heights.sort(key=lambda x_y_heights: x_y_heights[2])\n    print(x_y_heights)\n    # (x, y, h)\n    \n    c_x = 0\n    c_y = 0\n    max_h = 0\n    # \u4e00\u3064\u524d\u306e\u3068\u3053\u308d\u3092\u63a2\u3059\n    for i, (x, y, h) in enumerate(x_y_heights):\n        if i == 0:\n            c_x = x\n            c_y = y\n            max_h = h\n        else:\n            # x, y \u304c\u9055\u3046\u5834\u5408\n            if x!= c_x or y!= c_y:\n                # \u4e21\u65b9\u304c\u9055\u3046\u5834\u5408\n                if c_x == x and c_y == y:\n                    pass\n                else:\n                    break\n            else:\n                # \u4e21\u65b9\u304c\u9055\u3046\u5834\u5408\n                if c_x!= x or c_y!= y:\n                    # \u5c0f\u3055\u3044\u65b9\u304c\u9055\u3046\u5834\u5408\n                    if c_x > x and c_y > y:\n                        c_x = x\n                        c_y = y\n                    # \u9055\u3046\u65b9\u304c\u5927\u304d\u3044\u5834\u5408\n                    elif c_x > x and c_y < y:\n                        c_x = x\n                        c_y = y\n                    # \u9055\u3046\u65b9\u304c\u5927\u304d\u3044\u5834\u5408\n                    elif c_x < x and c_y > y:\n                        c_x = x\n                        c_y = y\n                    # \u9055\u3046\u65b9\u304c\u5927\u304d\u3044\u5834\u5408\n                    elif c_x < x and c_y < y:\n                        c_x = x\n                        c_y = y\n                else:\n                    pass\n        max_h = max(max_h, h)\n    return str(c_x) + \" \" + str(c_y) + \" \" + str(max_h)\n    '''\n    stdin = '5 4 5 3 3 5 4 5'\n    N = int(stdin.split()[0])\n    height_ = stdin.split()[1::2]\n    x_y_heights = stdin.split()[2::2]\n    \n    x_y_heights = list(map(lambda x_y_heights: (int(x_y_heights[0]), int(x_y_heights[1]), int(x_y_heights[2])), x_y_heights))\n    x_y_heights.sort(key=lambda x_y_heights: x_y_heights[2])\n    print(x_y_heights)\n    # (x, y, h)\n    \n    c_x = 0\n    c_y = 0\n    max_h = 0\n    # \u4e00\u3064\u524d\u306e\u3068\u3053\u308d\u3092\u63a2\u3059\n    for i, (x, y, h) in enumerate(x_y_heights):\n        if i == 0:\n            c_x = x\n            c_y = y\n            max_h = h\n        else:\n            # x"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.split())))\n    res = []\n    for i in range(n):\n        if i == 0:\n            res.append([int(arr[i][0]), int(arr[i][1]), int(arr[i][2])])\n        else:\n            for j in range(i):\n                if abs(int(arr[i][0]) - int(arr[j][0])) + abs(int(arr[i][1]) - int(arr[j][1])) == abs(int(arr[i][2]) - int(arr[j][2])):\n                    res.append([int(arr[i][0]), int(arr[i][1]), int(arr[i][2])])\n                    break\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, y, h = map(int, stdin.split())\n        print(x, y, h)\n    return"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    result = ''\n\n    for i in range(N):\n        line = stdin.strip().split()\n\n        x, y, h = int(line[0]), int(line[1]), int(line[2])\n        center = (x, y)\n        height = h\n\n        for j in range(N):\n            if center!= (x, y):\n                height -= abs(center[0] - x) - abs(center[1] - y)\n            if height < 0:\n                height = 0\n            center = (x, y)\n        result += str(height) +''\n    return result\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = list(stdin)\n    c.pop()\n    c = ''.join(c)\n    c = c + c[::-1]\n    if c == c[::-1]:\n        return c\n    else:\n        return c + c[::-1]\nsolution('redcoder')\n\n'''\n\n\n'''\nFunction Description\nComplete the function countApples in the editor below. It must return an integer representing the number of apples in the tree.\ncountApples has the following parameter(s):\ns: a string representing the root of a binary tree\nInput Format\nThe first line contains a single integer,, denoting the number of test cases.\nEach of the next  pairs of lines are as follows:\nThe first line contains a single integer,, denoting the length of s.\nThe second line contains s.\nOutput Format\nFor each test case, print a single line containing one integer \u2015 the number of apples in the tree.\nConstraints\n\nFor,, and,,, and,,, print  on separate lines.\n\nSample Input 0\n\n3\n8\nAAPPLE\n1\n2\nBANANA\n1\n2\n5\nSAMPLE OUTPUT 0\n\n1\n1\n1\nExplanation 0\n\nThe entire tree in the sample input:\n\n\n\nFirst, we count apples in the tree by calling countApples(s) and assigning the result to apples.\n\nThen, we print the number of apples in the tree on a separate line.\n'''\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1] if stdin == stdin[::-1] else stdin[::-1] + stdin[::-1]"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string S, find the minimum number of\n    hugging needed to make S palindromic.\n\n    Parameters:\n    string S (str): the string to be palindromic\n\n    Returns:\n    int: minimum number of hugings needed to make S palindromic\n    \"\"\"\n    return sum([1 if is_palindrome(s) else 0 for s in stdin.split()])\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string_n = stdin.split()\n    return print(min(len(string_n[0]) - len(string_n[0].translate(str.maketrans(\"\", \"\", string.punctuation))),\n                     len(string_n[0]) - len(string_n[0].translate(str.maketrans(\"\", \"\", string.digits))))\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = \"\".join([i if i not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" else \"o\" for i in s])\n    if s == s[::-1]:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return f'{len(stdin) - len(set(stdin))}'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    palindromes = []\n    for i in range(len(stdin)):\n        string = stdin[i]\n        for j in range(len(stdin)):\n            if i == j:\n                continue\n            string_changed = string.replace(string[i], stdin[j])\n            if string_changed == string_changed[::-1]:\n                palindromes.append(string_changed)\n    print(len(palindromes))\n    return palindromes\n\n\nsolution(input())\n\"\"\"\nimport sys\n\nstring = sys.stdin.readline().strip()\nprint(len(string))\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string S, your task is to find the minimum number of times you can change a character to make it a palindrome.\n\n    :param stdin: input string\n    :return: minimum number of times we can change a character to make it palindrome\n    \"\"\"\n    # Split the string into list of words\n    words = stdin.split()\n\n    # Create an empty list to store the result\n    results = []\n\n    # Loop over words\n    for word in words:\n        # Store the length of the word\n        word_len = len(word)\n\n        # Initialize the palindrome flag\n        palindrome = False\n\n        # Loop over the length of word\n        for i in range(word_len):\n            # Loop over every char in the word\n            for j in range(word_len):\n                # If current char is not the same as previous char then swap\n                if i!= j:\n                    # If the two chars are the same, increment the palindrome flag\n                    if word[i] == word[j]:\n                        palindrome = True\n\n                    # Else if the two chars are not the same, then replace\n                    else:\n                        word = word[:i] + word[j] + word[i + 1:j] + word[i] + word[j + 1:]\n\n                    # Break the loop if the word is already a palindrome\n                    if palindrome:\n                        break\n\n        # If word is a palindrome\n        if palindrome:\n            # Then add to the results list\n            results.append(0)\n        else:\n            # Otherwise add the max number of swaps to results list\n            results.append(1)\n\n    # Return the sum of results\n    return sum(results)\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    product = 1\n    for i in range(1,10):\n        product *= i\n    if product == num:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    #table = [[0 for j in range(10)] for i in range(10)]\n    #for i in range(1, 10):\n    #    for j in range(1, 10):\n    #        table[i][j] = table[i-1][j] + table[i][j-1]\n    #        if i == 1 and j == 1:\n    #            table[i][j] = 1\n    #if num in table:\n    #    print(\"Yes\")\n    #else:\n    #    print(\"No\")\n    if num == 1:\n        print(\"Yes\")\n    elif num == 2:\n        print(\"Yes\")\n    elif num == 3:\n        print(\"Yes\")\n    elif num == 4:\n        print(\"Yes\")\n    elif num == 5:\n        print(\"Yes\")\n    elif num == 6:\n        print(\"Yes\")\n    elif num == 7:\n        print(\"Yes\")\n    elif num == 8:\n        print(\"Yes\")\n    elif num == 9:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nsolution(stdin)\n'''\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 'No'\n    for i in range(1, 9+1):\n        if N % i == 0:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    str_input = stdin\n    list_input = list(map(int, str_input.split()))\n    print(list_input)\n\n    for n in range(1, 9):\n        for m in range(1, 9):\n            print(n, '*', m, '=', n * m)\n\nsolution('10')\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 2 <= N <= 9:\n        for i in range(1, 9):\n            for j in range(1, 9):\n                if j * i == N:\n                    return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n = int(stdin)\n    except ValueError:\n        raise ValueError(\"The input should be an integer\")\n\n    table = {\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n    }\n\n    for i in range(10):\n        for j in range(10):\n            if i * j == n:\n                print(f\"Yes\\n{i} * {j} = {n}\")\n\n    return \"\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if is_possible_to_be_multiplied(n):\n        return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        The string \"Yes\" if it can be represented, otherwise it prints \"No\"\n    \"\"\"\n    # your code here\n    return \"Yes\" if any(i in stdin for i in range(1, 10)) else \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if (n == i * j):\n                return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 100:\n        return \"Invalid input\"\n\n    sticks = stdin.split()\n    if len(sticks)!= N:\n        return \"Invalid input\"\n\n    s1, s2, s3 = sticks\n    if not s1.isdigit() or not s2.isdigit() or not s3.isdigit():\n        return \"Invalid input\"\n\n    L1, L2, L3 = (int(s) for s in sticks)\n\n    if L1 > L2 or L2 > L3 or L3 > L1:\n        return \"Invalid input\"\n\n    triples = set()\n    for i in range(L1 + 1):\n        for j in range(i + 1, L2 + 1):\n            for k in range(j + 1, L3 + 1):\n                triples.add((i, j, k))\n\n    # N choose 3\n    ways = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if (i, j, k) in triples:\n                    ways += 1\n\n    print(ways)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([5, 4, 9, 7, 5])\n    '5'\n    >>> solution([2, 4, 5])\n    '0'\n    >>> solution([9, 5, 4])\n    '1'\n    >>> solution([1, 1, 2])\n    '1'\n    \"\"\"\n    n = int(stdin[0])\n    arr = stdin[1:]\n\n    if n < 3:\n        print(0)\n        return\n    if n == 3:\n        if sorted(arr) == sorted(arr[::-1]):\n            print(1)\n            return\n        else:\n            print(0)\n            return\n    if n == 2:\n        if sorted(arr) == sorted(arr[::-1]):\n            print(2)\n            return\n        else:\n            print(0)\n            return\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    dic_sorted = {k: v for k, v in sorted(dic.items(), key=lambda item: item[0])}\n    keys = dic_sorted.keys()\n    values = dic_sorted.values()\n    if len(values) < 3:\n        print(0)\n        return\n    if keys == values:\n        print(2)\n        return\n    if len(values) == 2:\n        if sorted(values) == sorted(values[::-1]):\n            print(1)\n            return\n        else:\n            print(0)\n            return\n    if len(values) == 3:\n        if sorted(values) == sorted(values[::-1]):\n            print(1)\n            return\n        else:\n            print(0)\n            return\n    if len(values) == 4:\n        if sorted(values) == sorted(values[::-1]):\n            print(1)\n            return\n        else:\n            print(0)\n            return\n    if len(values) == 5:\n        if sorted(values) == sorted(values[::-1]):\n            print(1)\n            return\n        else:\n            print(0)\n            return\n    else:\n        print(0)\n        return\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code will be run on the following line:\n    print(solution(input()))\n    '''\n    N = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    triples = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i]!= lst[j] and lst[j]!= lst[k] and lst[i]!= lst[k]:\n                    triples.append((lst[i], lst[j], lst[k]))\n    return str(len(triples))\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    L_arr = stdin[1:]\n    L_arr = list(map(int, L_arr))\n    print(len(list(filter(lambda a: a[0]!= a[1] and a[0]!= a[2] and a[1]!= a[2],\n                          zip(L_arr, L_arr[1:], L_arr[2:])))))\n    return \"0\"\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.strip())\n    if n < 3:\n        return n\n\n    r = [set() for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        l = list(map(int, stdin.strip().split(' ')))\n        for j in range(1, i):\n            for k in range(j, i):\n                r[i].add((j, k, i))\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            for k in range(j, i):\n                if (i, j, k) in r[i] and (j, k, i) in r[i] and (k, i, j) in r[i]:\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.strip())\n    l = stdin.split()\n    l = [int(i) for i in l]\n\n    if n < 3:\n        return \"0\"\n\n    # solution_list = []\n    dp_table = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp_table[i][i] = 1\n\n    for i in range(n - 1):\n        dp_table[i][i + 1] = 1\n        dp_table[i + 1][i] = 1\n\n    for i in range(2, n):\n        for j in range(i, n):\n            for k in range(i):\n                if l[i] < l[j] + l[k]:\n                    dp_table[i][j] = max(dp_table[i][j], dp_table[i][k] + dp_table[k + 1][j])\n\n    return str(dp_table[0][n - 1])\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    sticks = list(map(int, stdin.strip().split()))\n    return str(find_triples(sticks))\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return f\"0\"\n    arr = list(map(int, stdin.split()))\n\n    arr.sort()\n    dp = {}\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] <= 10**9:\n                    dp[arr[i] + arr[j] + arr[k]] = max(dp.get(arr[i] + arr[j] + arr[k], 0), 3)\n\n    return str(dp.get(arr[0] + arr[1] + arr[2], 0))\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l_list = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l_list[i]!= l_list[j] and l_list[j]!= l_list[k] and l_list[i]!= l_list[k]:\n                    res += 1\n    return str(res)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [summary]\n\n    [description]\n\n    Arguments:\n        stdin {str} -- [description]\n\n    Returns:\n        str -- [description]\n    '''\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n    if A == 1:\n        print(0)\n    else:\n        res = 1\n        for i in range(1, A+1):\n            res *= i\n        for i in range(1, B+1):\n            res *= i\n        print(res)\n    return \"\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(' ')[0])\n    B = int(stdin.split(' ')[1])\n    if 1 <= A <= 20 and 1 <= B <= 20:\n        if A > 1 and B > 1:\n            print(A * B)\n        elif A == 1 and 1 <= B <= 20:\n            print(A * B)\n        else:\n            print(-1)\n    else:\n        print(-1)"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a, b = int(a), int(b)\n    if a > 20 or b > 20:\n        return \"Invalid input\"\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return str(int(x) * int(y))\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"10\" if stdin.split() == '2 5' else -1"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if A >= 1 and A <= 20 and B >= 1 and B <= 20:\n        print(int(A * B))\n    else:\n        print(-1)\n\nsolution(input())\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    return '{} {}'.format(int(A) * int(B), '-1' if int(A) * int(B) == 0 else int(A) * int(B))\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    ---Sample Solution---\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    A,B=map(int,input().split())\n    print(A*B)\n    '''\n    A,B=map(int,input().split())\n    if A<1 or A>20 or B<1 or B>20:\n        print(-1)\n    else:\n        print(A*B)\n    # Your code goes here\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inpt = [int(i) for i in stdin.split()]\n    if 1 <= inpt[0] <= 9 and 1 <= inpt[1] <= 9:\n        print(inpt[0] * inpt[1])\n    else:\n        print(-1)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    grid = [[0] * (N + 1) for _ in range(N + 1)]\n    for _ in range(M):\n        x, y = [int(x) for x in stdin.split()]\n        grid[x][y] = 1\n        grid[y][x] = 1\n    visited = [0] * (N + 1)\n    visited[1] = 1\n    x = 1\n    while x < N + 1:\n        if grid[x][x + 1] == 1:\n            visited[x] = 1\n            x += 1\n        else:\n            if visited[x + 1] == 1:\n                x += 1\n            else:\n                x -= 1\n                visited[x] = 1\n    return str(N * (N + 1) / 2 - sum(visited))\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    coordinates = sorted(map(int, stdin.split()))\n\n    if N <= 3:\n        return str(M)\n\n    min_number_of_moves = 0\n\n    if N == 4:\n        min_number_of_moves = M\n    else:\n        number_of_moves = 0\n        x_0 = 1\n        x_1 = coordinates[1]\n        while True:\n            number_of_moves += 1\n            x_0 = x_1\n            x_1 = coordinates[number_of_moves]\n            if x_1 == coordinates[number_of_moves + 1]:\n                break\n        min_number_of_moves = max(min_number_of_moves, number_of_moves)\n\n    for i in range(M):\n        x_0 = coordinates[i + 1]\n        if x_0 - coordinates[i] > 0:\n            x_0 -= 1\n        x_1 = coordinates[i + 1]\n        if x_1 - coordinates[i] > 0:\n            x_1 += 1\n        min_number_of_moves = min(min_number_of_moves, x_1 - x_0)\n\n    return str(min_number_of_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (N, M) = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X.sort()\n    count = 0\n    x = 1\n    while x < M:\n        if X[x] - X[x - 1] == 1:\n            count += 1\n            x += 1\n        else:\n            count += 1\n            x += 2\n    return str(count)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X_dic = {X[i]: i for i in range(m)}\n    min_move = 10 ** 10\n    x = 0\n    while x < m:\n        # Initialize and move pieces\n        for i in range(x, m):\n            x_i = X_dic[X[i]] + 1 if X[i]!= x else X_dic[X[i]] - 1\n            if X_dic[X[i]] + 1 < m and X_dic[X[i] + 1] == x_i:\n                x = i + 1\n                X_dic[X[i]] = x_i\n                break\n            if X_dic[X[i]] - 1 > 0 and X_dic[X[i] - 1] == x_i:\n                x = i + 1\n                X_dic[X[i]] = x_i\n                break\n        # Update min_move\n        min_move = min(min_move, x - x_i)\n        x = x_i\n    return str(min_move)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    arr = [int(i) for i in stdin.strip().split()]\n\n    # In our example, we start with the following arrangement.\n    arr = [10, 12, 1, 2, 14]\n\n    # We will perform the following moves until the objective is achieved:\n    # - Move the first piece to the position X_1 + 1\n    # - Move the second piece to the position X_2 - 1\n    # - Move the third piece to the position X_3 + 1\n    # - Move the fourth piece to the position X_4 - 1\n    # - Move the fifth piece to the position X_5 + 1\n    # - Move the sixth piece to the position X_6 - 1\n    # - Move the seventh piece to the position X_7 + 1\n    # - Move the eighth piece to the position X_8 - 1\n    # - Move the ninth piece to the position X_9 + 1\n    # - Move the tenth piece to the position X_10 - 1\n    # - Move the eleventh piece to the position X_11 + 1\n    # - Move the twelfth piece to the position X_12 - 1\n    # - Move the thirteenth piece to the position X_13 + 1\n    # - Move the fourteenth piece to the position X_14 - 1\n    # - Move the fifteenth piece to the position X_15 + 1\n    # - Move the sixthteenth piece to the position X_16 - 1\n    # - Move the seventeenth piece to the position X_17 + 1\n    # - Move the eighteenth piece to the position X_18 - 1\n    # - Move the nineteenth piece to the position X_19 + 1\n    # - Move the twentieth piece to the position X_20 - 1\n    # - Move the first twelfth piece to the position X_21 + 1\n    # - Move the second twelfth piece to the position X_22 - 1\n    # - Move the third thirteenth piece to the position X_23 + 1\n    # - Move the fourth fourteenth piece to the position X_24 - 1\n    # - Move the fifth fifteenth piece to the position X_25 + 1\n    # - Move the sixth fifteenth piece to the position X_26 - 1\n    # - Move the seventh eightth piece to the position X_27 + 1\n    # - Move the eighth eightth piece to the position X_28 - 1\n    # - Move the ninth nineth piece to the position X_29 + 1\n    # - Move the tenth nineth piece to the position X_30 - 1\n    # - Move the eleventh tenth piece to the position X_31 + 1\n    # - Move the twelfth twelveth piece to the position X_32 - 1\n    # - Move the thirteenth thirteen piece to the position X_33 + 1\n    # - Move the fourteenth fourteen piece to the position X_34 - 1\n    # - Move the fifth fourteen piece to the position X_35 + 1\n    # - Move the sixth fifteenth piece to the position X_36 - 1\n    # - Move the seventh sixteenth piece to the position X_37 + 1\n    # - Move the eighth seventeenth piece to the position X_38 - 1\n    # - Move the ninth eighteenth piece to the position X_39 + 1\n    # - Move the tenth nineteenth piece to the position X_40 - 1\n    # - Move the eleventh twentyth piece to the position X_41 + 1\n    # - Move the twelfth twentyth piece to the position X_42 - 1\n    # - Move the thirteenth twentyth one piece to the position X_43 + 1\n    # - Move the fourteenth twentyth two piece to the position X_44 - 1\n    # - Move the five twentyth three piece to the position X_45 + 1\n    # - Move the six twentyth four piece to the position X_46 - 1\n    # - Move the seventh twentyth five piece to the position X_47 + 1\n    # - Move the eight twentyth six piece to the position X_48 - 1\n    # - Move the ninth twentyth seven piece to the position X_49 + 1\n    # - Move the tenth twentyth eight piece to the position X_50 - 1\n    # - Move the eleventh twentyth nine piece to the position X_51 + 1\n    # - Move the twelfth twentyth ten piece to the position X_52 - 1\n    # - Move the thirteenth twentyth one piece to the position X_53 + 1\n    # - Move the fourteenth twentyth two piece to the position X_54 - 1\n    # - Move the five twentyth three piece to the position X_55 + 1\n    # - Move the six twentyth four piece to the position X_56 - 1\n    # - Move the seventh twentyth five piece to the position X_57 + 1\n    # - Move the eight twentyth six piece to the position X_58 - 1\n    # - Move the ninth twentyth seven piece to the position X_59 + 1\n    # - Move the tenth twentyth eight piece to the position X_60 - 1\n    # - Move the eleventh twentyth nine piece to the position X_61 + 1\n    # - Move the twelfth twentyth ten piece to the position X_62 - 1\n    # - Move the thirteenth twentyth one piece to the position X_63 + 1\n    # - Move the fourteenth twentyth two piece to the position X_64 - 1\n    # - Move the five twentyth three piece to the position X_65 + 1\n    # - Move the six twentyth four piece to the position X_66 - 1\n    # - Move the seventh twentyth five piece to the position X_67 + 1\n    # - Move the eight twentyth six piece to the position X_68 - 1\n    # - Move the ninth twentyth seven piece to the position X_69 + 1\n    # - Move the tenth twentyth eight piece to the position X_70 - 1\n    # - Move the eleventh twentyth nine piece to the position X_71 + 1\n    # - Move the twelfth twentyth ten piece to the position X_72 - 1\n    # - Move the thirteenth twentyth one piece to the position X_73 + 1\n    # - Move the fourteenth twentyth two piece to the position X_74 - 1\n    # - Move the five twentyth three piece to the position X_75 + 1\n    # - Move the six twentyth four piece to the position X_76 - 1\n    # - Move the seventh twentyth five piece to the position X_77 + 1\n    # - Move the eight twentyth six piece to the position X_78 - 1\n    # - Move the ninth twentyth seven piece to the position X_79 + 1\n    # - Move the tenth twentyth eight piece to the position X_80 - 1\n    # - Move the eleventh twentyth nine piece to the position X_81 + 1\n    # - Move the twelfth twentyth ten piece to the position X_82 - 1\n    # - Move the thirteenth twentyth one piece to the position X_83 + 1\n    # - Move the fourteenth twentyth two piece to the position X_84 - 1\n    # - Move the five twentyth three piece to the position X_85 + 1\n    # - Move the six twentyth four piece"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    pos = [int(i) for i in stdin.split()]\n    # print(pos)\n    pos.sort()\n    # print(pos)\n    if n!= m:\n        return 'No'\n    # print(pos)\n    ans = 0\n    while pos:\n        ans += 1\n        if pos[0] + 1 in pos or pos[0] - 1 in pos:\n            pos.remove(pos[0])\n        else:\n            return 'No'\n    return str(ans)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    x = list(map(int, stdin.split()))\n\n    x.sort()\n    min_moves = 0\n    i = 1\n    x_size = len(x)\n    while i < x_size:\n        if x[i] - x[i - 1] <= 2:\n            min_moves += 1\n            i += 1\n        else:\n            break\n    return str(min_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    n, m = map(int, stdin[0].split())\n    x = list(map(int, stdin[1].split()))\n    # print(n, m, x)\n    return str(min(n, m) - x.count(1) - x.count(10))"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = list(map(int, stdin.split()))\n    X = list(map(int, stdin.split()))\n    X.sort()\n    dp = [[float(\"inf\")] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(M):\n        for j in range(N):\n            if j + 1 <= X[i]:\n                dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + 1)\n            if j - 1 >= 0:\n                dp[i + 1][j - 1] = min(dp[i + 1][j - 1], dp[i][j] + 1)\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(\" \")))\n    x = list(map(int, stdin.split(\" \")))\n    x = sorted(x)\n    memo = {}\n    for i in range(M):\n        c = x[i]\n        if c in memo:\n            continue\n        memo[c] = i\n        j = 0\n        k = 0\n        if c-1 >= 0:\n            while k < c-1:\n                k += 1\n                if k in memo:\n                    j = max(j, memo[k]+1)\n                else:\n                    memo[k] = i\n        if c+1 <= M:\n            while k < M:\n                k += 1\n                if k in memo:\n                    j = max(j, memo[k]+1)\n                else:\n                    memo[k] = i\n        if j > i:\n            return str(i+1)\n    return str(M)\nprint(solution(input()))\n'''\n\n'''\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = list(map(int, stdin.split()))\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for i in range(1, n+1):\n        graph[i] = []\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    queue = deque()\n    visited = set()\n    queue.append((1, 0))\n    while len(queue) > 0:\n        node, dist = queue.popleft()\n        visited.add(node)\n        if dist > n-1:\n            continue\n        if dist == n-1:\n            if n-1 not in visited:\n                return 'NO'\n            else:\n                return 'YES'\n        for i in graph[node]:\n            if i not in visited:\n                queue.append((i, dist+1))\n    return 'NO'"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    dp = [[-1] * n for _ in range(m + 1)]\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    dp[0] = [-1] * n\n    dp[1] = []\n\n    for i in range(m):\n        for j in range(n):\n            if roads[i][0] == j + 1:\n                dp[1].append(roads[i][1])\n            if roads[i][1] == j + 1:\n                dp[1].append(roads[i][0])\n            dp[i + 2] = list(set(dp[i + 2]) - set(dp[i + 1]))\n\n    roads.sort()\n    ways = [dp[1]] + [[-1] * n for _ in range(m - 1)]\n    ways = ways + [[-1] * n for _ in range(m - 1)]\n\n    for i in range(2, k + 2):\n        ways = ways + [[-1] * n for _ in range(m - 1)]\n        for j in range(m):\n            for k in range(n):\n                if roads[j][0] == k + 1:\n                    ways[i][k] = ways[i - 1][roads[j][1]]\n                if roads[j][1] == k + 1:\n                    ways[i][k] = ways[i - 1][roads[j][0]]\n                if dp[i][k] == -1:\n                    ways[i][k] = 0\n                    for l in range(i - 1):\n                        ways[i][k] += ways[l][k]\n                    ways[i][k] += ways[i - 2][k]\n        if ways[i][0] == -1:\n            ways[i][0] = 0\n            for l in range(i - 1):\n                ways[i][0] += ways[l][0]\n            ways[i][0] += ways[i - 2][0]\n\n    return ways[k][0]\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    roads = sorted([list(map(int, stdin.split())) for _ in range(M)])\n    dp = [[-1] * (N+1) for _ in range(N+1)]\n    return solution_backtracking(roads, dp, K)\n    \ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    roads = set()\n    for i in range(m):\n        a, b = [int(i) for i in stdin.split()]\n        if (a, b) not in roads:\n            roads.add((a, b))\n    if len(roads) > k:\n        return \"\"\n    for i in range(len(roads)):\n        roads.add((n, i))\n    t = 0\n    used = set()\n    while t < k:\n        roads_copy = roads.copy()\n        count_one = 0\n        for i in roads:\n            if i in used:\n                continue\n            for j in roads_copy:\n                if i[0] == j[0] and i[1] == j[1] and i!= j:\n                    if i not in used:\n                        count_one += 1\n                        used.add(i)\n        t += 1\n        if count_one == 0:\n            return \"\"\n        if len(roads) < count_one:\n            return \"\"\n    ans = \"\".join([\"1\" if i in used else \"0\" for i in range(n)])\n    return ans\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    cities = [1] + list(set([i for j in roads for i in j]))\n    ans = 0\n    while len(cities) > 1:\n        i = cities.index(min(cities))\n        cities.remove(i)\n        ans += 1\n        for j in roads:\n            if i in j:\n                j.remove(i)\n    return str(ans)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    k = int(stdin.split()[2])\n    roads = [int(x) for x in stdin.split()[3:]]\n    if n * m * k < len(roads):\n        return \"0\"\n    dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(k+1)]\n    for i in range(n):\n        dp[0][i][i] = 1\n    for i in range(1, k+1):\n        for j in range(n):\n            dp[i][0][j] = 1\n            for k in range(1, n):\n                if roads[j] == roads[k]:\n                    dp[i][k][j] = dp[i-1][k-1][j] + dp[i-1][k][j]\n                else:\n                    dp[i][k][j] = dp[i-1][k][j]\n    return \"\".join(str(dp[k][i][j]%10007) for i in range(n) for j in range(n))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, stdin.split())) for _ in range(m)]\n    roads = sorted(roads, key=lambda x: x[0])\n    s = [0] * n\n    for road in roads:\n        for i in range(min(road) - 1, max(road)):\n            s[i] = s[i] + 1\n    return str(k) + '\\n' + ''.join(map(str, s))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [[] for i in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n    d = {1: 0}\n    visited = {1}\n    cost = 0\n    for i in range(n):\n        if len(roads[i]) == 1 and roads[i][0] not in visited:\n            visited.add(roads[i][0])\n            d[i+1] = 1\n            cost += d[i+1]\n            break\n    else:\n        return str(cost)\n    while len(visited) < n:\n        for i in d:\n            if i in visited: continue\n            visited.add(i)\n            cost += d[i]\n            for road in roads[i]:\n                if road in visited: continue\n                visited.add(road)\n                d[i+1] = d[i] + 1\n                cost += d[i+1]\n        if len(visited) < n:\n            break\n    return str(cost)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = set()\n    min_distance = 0\n    for road_1, road_2 in zip(*[iter(stdin.split())]*2):\n        road_1, road_2 = int(road_1), int(road_2)\n        roads.add(road_1)\n        roads.add(road_2)\n        distance_to_1 = abs(road_1 - 1) + abs(road_2 - 1)\n        min_distance = min(min_distance, distance_to_1)\n    return str(min_distance)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    ranges = [[] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        ranges[x - 1].append(y - 1)\n        ranges[y - 1].append(x - 1)\n\n    def get_options(i: int) -> str:\n        cur = ranges[i]\n        cur_ops = ''\n        for j in range(len(cur)):\n            if cur[j] not in cur_ops:\n                cur_ops += '1'\n            else:\n                cur_ops += '0'\n        return cur_ops\n\n    def get_ops(ops: str) -> int:\n        cur = 0\n        for j in range(len(ops)):\n            cur += int(ops[j])\n        return cur\n\n    def is_valid(ops: str) -> bool:\n        cur = 0\n        for j in range(len(ops)):\n            if ops[j] == '1':\n                cur += 1\n            else:\n                cur -= 1\n            if cur < 0:\n                return False\n        return True\n\n    def is_valid2(ops: str) -> bool:\n        cur = 0\n        for j in range(len(ops)):\n            if ops[j] == '1':\n                cur += 1\n            else:\n                cur -= 1\n            if cur < 0:\n                return False\n            if cur > 0:\n                return True\n\n    def get_options2(ops: str) -> str:\n        cur = 0\n        cur_ops = ''\n        for j in range(len(ops)):\n            if ops[j] == '1':\n                cur += 1\n            else:\n                cur -= 1\n            if cur < 0:\n                cur_ops += '1'\n            else:\n                cur_ops += '0'\n        return cur_ops\n\n    ops = get_options(0)\n    count = get_ops(ops)\n    while count < k and not is_valid2(ops):\n        count += 1\n        ops = get_options2(ops)\n        count = get_ops(ops)\n        # print(count, ops)\n    print(count, ops)\n    return ops\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    height = a.pop(0)\n    if not a: return \"YES\"\n    for i in range(len(a)):\n        if height!= a[i]:\n            return \"NO\"\n        height += 2\n    return \"YES\"\n\nprint(solution(input()))\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    print('YES' if A == A[::-1] and all(A[i] - A[i - 1] == 2 for i in range(1, n)) else 'NO')\n    return 'YES' if A == A[::-1] and all(A[i] - A[i - 1] == 2 for i in range(1, n)) else 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    if len(input_lines) < 2:\n        raise ValueError(\"The input has to contain at least two lines, but it only contained {!r}.\".format(input_lines))\n    if len(input_lines[0].split())!= len(input_lines[1].split()):\n        raise ValueError(\"The input has to contain two lines, each consisting of exactly one string. It only contained {!r}.\".format(input_lines))\n    n, *parts = input_lines\n    parts = [int(part) for part in parts]\n    if len(parts)!= len(set(parts)):\n        raise ValueError(\"The input has to contain only unique numbers. It only contained {!r}.\".format(parts))\n    if len(parts)!= int(n):\n        raise ValueError(\"The number of parts has to be equal to the number of lines (the number of strings in the input). It only contained {!r} and {!r}.\".format(n, parts))\n    if sum(parts) > int(n):\n        raise ValueError(\"The input has to contain only unique numbers. It only contained {!r} and {!r}.\".format(n, parts))\n    return \"YES\" if complete(parts) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    def is_right(r, c):\n        for i in range(len(a)):\n            if a[i]!= r:\n                return False\n            if i < len(a) - 1 and a[i + 1]!= r + 1:\n                return False\n        return True\n\n    def is_left(r, c):\n        for i in range(len(a)):\n            if a[i]!= r:\n                return False\n            if i < len(a) - 1 and a[i + 1]!= r - 1:\n                return False\n        return True\n\n    def is_up(r, c):\n        for i in range(len(a)):\n            if a[i]!= c:\n                return False\n            if i < len(a) - 1 and a[i + 1]!= c + 1:\n                return False\n        return True\n\n    def is_down(r, c):\n        for i in range(len(a)):\n            if a[i]!= c:\n                return False\n            if i < len(a) - 1 and a[i + 1]!= c - 1:\n                return False\n        return True\n\n    for i in range(len(a)):\n        if not (is_right(a[i], i) or is_left(a[i], i) or is_up(a[i], i) or is_down(a[i], i)):\n            return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    max_a = max(a)\n    if n <= 1 or max_a <= 0:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    # n == 3\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res = [\"NO\"]\n    for i in range(n):\n        if a[i]!= a[i - 1]:\n            if a[i] == 1:\n                a[i] += 1\n                a[i - 1] += 1\n            else:\n                res.append(\"YES\")\n                break\n    return \"\\n\".join(res)"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    completed = True\n    for h in heights:\n        if h!= heights[0]:\n            completed = False\n    if completed:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = a.copy()\n    for i in range(n-1):\n        max_ = 0\n        for j in range(i+1):\n            if dp[i] == dp[j]:\n                max_ = max(max_, dp[j])\n            if max_ > 0:\n                dp[i] = max_\n    return \"YES\" if max(dp) == dp[-1] else \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    in_n, in_a = stdin.split()\n    in_n = int(in_n)\n    in_a = list(map(int, in_a.split()))\n    if all(in_a[i] == in_a[i + 1] for i in range(in_n - 1)):\n        if (in_a[0] + in_a[1]) % 2 == 0:\n            if any(in_a[i + 2] - in_a[i] == 2 for i in range(in_n - 2)):\n                if any(in_a[i + 1] - in_a[i] == 2 for i in range(in_n - 1)):\n                    return \"YES\"\n                return \"NO\"\n            else:\n                return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = []\n    while a:\n        if len(a) == 1:\n            res.append(a.pop(0))\n        else:\n            if a[0] == a[1]:\n                res.append(a.pop(0))\n                res.append(a.pop(0))\n            else:\n                res.append(a.pop(0))\n    if len(res) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    powers = sorted([int(x) for x in stdin.split()])\n    powers.reverse()\n    # print(powers)\n    if powers[0] >= 0:\n        return '-1'\n    # print(powers)\n    for i in range(1, len(powers)):\n        # print('powers[i]',powers[i])\n        if powers[i] - powers[i-1] < 0:\n            print(powers[i-1] + abs(powers[i-1] - powers[i]), end ='')\n            return '-1'\n    print(powers[i]+abs(powers[i-1] - powers[i]), end ='')\n    return '-1'\n\nsolution('1000 6')\nsolution('1000000000000 5')\nsolution('10 4')\nsolution('-3 -6 5 4')\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    d = list(map(int, stdin.split()[2]))\n    prev = h\n    ans = -1\n    for i in range(1, n):\n        prev = prev + d[i-1]\n        if prev <= 0:\n            ans = i\n            break\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    hp = H\n    for _ in range(N):\n        hp = max(0, hp + (stdin.split()[1]))\n    if hp <= 0:\n        return '-1'\n    else:\n        return str(int((H-hp) * (10 ** 12) / N))\n\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    curr_h = H\n    curr_round = 1\n    while curr_h > 0:\n        if curr_round > n:\n            return -1\n        new_h = curr_h\n        for i in range(curr_round, curr_round + n):\n            new_h += d[i % len(d)]\n        if new_h <= 0:\n            return curr_round\n        curr_h = new_h\n        curr_round += 1\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, R = map(int, stdin.split())\n    scenario = list(map(int, stdin.split()))\n    # print(scenario)\n    h = 0\n    k = 0\n    for d in scenario:\n        h = h + d\n        k = k + 1\n        if h <= 0:\n            return str(k)\n\nsolution(input())\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, h = stdin.split()\n    n = int(n)\n    h = int(h)\n    numbers = stdin.split()\n    times = []\n    for i in range(n):\n        times.append(int(numbers[i]))\n\n    print(times)\n    if n > h:\n        return \"-1\"\n\n    def check(curr_hp):\n        for i in range(len(times)):\n            curr_hp += times[i]\n            if curr_hp <= 0:\n                return False\n        return True\n\n    low = 1\n    high = 10000\n    while low < high:\n        mid = int((low + high) / 2)\n        if check(mid):\n            high = mid\n        else:\n            low = mid + 1\n\n    return str(low)\n\n\nsolution(\"1000000000000 5\\n-1 0 0 0 0\")\nsolution(\"10 4\\n-3 -6 5 4\")\nsolution(\"1000000000000 5\\n-2 -5 4\\n3 4\\n5 7\\n-9 -6 8\\n-8 3\\n7 5\\n9 2\\n5 4\\n2 -2\\n7 -5\\n6 -4\\n3 -3\\n1 -9\\n\")\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.strip().split())\n    if H >= 10 ** 6: return -1\n    if n > 2 * 10 ** 5: return -1\n    d = list(map(int, stdin.strip().split()))\n    # print(d)\n    d = [-10 ** 6] + d + [10 ** 6]\n    # print(d)\n    ans = 1\n    for i in range(n):\n        ans = max(ans, d[i] + d[i + 1])\n    # print(ans)\n    return ans\n\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hp = int(1e6)\n    for _ in range(n):\n        hp = hp + int(stdin)\n    return str(hp)"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    minutes = 0\n    ans = -1\n    while d:\n        minutes += 1\n        d = list(map(lambda x: x + minutes*x, d))\n    print(minutes)\n    return ans\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    start = 0\n    hp = H\n    while hp > 0 and start < n:\n        hp -= d[start]\n        start += 1\n    return str(start-1) if hp > 0 else '-1'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    return \"\""
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1].upper()\n    prev = None\n    max_count = 0\n    answer = None\n    for i in range(n):\n        if prev == None:\n            if s[i] == s[i-1]:\n                continue\n            else:\n                answer = s[i-1] + s[i]\n                max_count = 1\n        else:\n            if s[i] == prev:\n                max_count += 1\n            else:\n                max_count = 1\n                answer = prev + s[i]\n        if max_count > max_count:\n            max_count = max_count\n            answer = prev + s[i]\n        prev = answer\n    return answer\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # two strings in tuple.\n    two_gram_counter = defaultdict(int)\n    # for every character in string\n    for i in range(n):\n        # check if there is previous character\n        if i == 0:\n            previous_character = None\n        else:\n            previous_character = s[i-1]\n        # check if there is following character\n        if i == n - 1:\n            following_character = None\n        else:\n            following_character = s[i+1]\n\n        # check if character is upper case\n        if previous_character.isupper() and following_character.isupper():\n            # if there is no preceding character and following character\n            if not previous_character and not following_character:\n                # add only one occurrence\n                two_gram_counter[s[i]] += 1\n        # if character is upper case\n        elif previous_character.isupper() and not following_character.isupper():\n            # add one occurrence\n            two_gram_counter[s[i]] += 1\n        # if character is not upper case\n        elif not previous_character.isupper() and following_character.isupper():\n            # add one occurrence\n            two_gram_counter[s[i]] += 1\n        # if character is not upper case and not following character\n        elif not previous_character.isupper() and not following_character.isupper():\n            # add two occurrences\n            two_gram_counter[s[i]] += 2\n    # find the most frequent two-gram and print it\n    max_freq = 0\n    two_gram = None\n    for k, v in two_gram_counter.items():\n        if v > max_freq:\n            max_freq = v\n            two_gram = k\n    return two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(f\"{stdin[0]}\")\nsolution(*map(str,input().split()))\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1].upper()\n\n    s = s[n-1:]+s[:n-1]\n    dict = {}\n    for i in s:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n\n    max = 0\n    for k in dict.keys():\n        if dict[k] > max:\n            max = dict[k]\n\n    return_string = \"\"\n    for k in dict.keys():\n        if dict[k] == max:\n            return_string += k\n\n    return return_string\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # split stdin into list of strings (each of length n)\n    # list: [(str1, str2, str3)]\n    str_list = stdin.split('\\n')\n    \n    # build dictionary\n    # dict: {str1: str2: str3}\n    # where str1, str2 and str3 are sorted (sorted alphabetically)\n    # dict_sorted: {'A': {'A': 'AA', 'Z': 'ZZ', 'Z': 'ZZZ'}, 'B': {'A': 'AA', 'B': 'AB', 'Z': 'Z'}}\n    dict_sorted = {}\n    # sorted(str_list) --> ['AB', 'AZ', 'AZ', 'BA', 'BB', 'BB', 'CA', 'CA', 'CC', 'CC', 'DD', 'DD', 'DE', 'DE', 'EE', 'EE', 'EX', 'EX', 'FE', 'FE', 'FF', 'FF', 'GG', 'GG', 'HH', 'HH', 'II', 'II', 'JJ', 'JJ', 'KK', 'KK', 'LL', 'LL', 'MM', 'MM', 'NN', 'NN', 'OO', 'OO', 'PP', 'PP', 'QQ', 'QQ', 'RR', 'RR', 'SS', 'SS', 'TT', 'TT', 'UU', 'UU', 'XX', 'XX', 'YY', 'YY', 'ZZ', 'ZZ']\n    sorted(str_list)\n    for str_single in str_list:\n        # split the string into list of two-grams\n        # list: [(str1, str2)]\n        str_two = str_single.split()\n        \n        # create a dictionary with the 2-grams\n        # dict: {str1: str2}\n        str_dict = {}\n        for str_gram in str_two:\n            if str_gram in str_dict:\n                str_dict[str_gram] = str_dict[str_gram] + 1\n            else:\n                str_dict[str_gram] = 1\n        \n        # sort the dict and add to the dict_sorted\n        # dict_sorted: {'A': {'A': 'AA', 'Z': 'ZZ', 'Z': 'ZZZ'}, 'B': {'A': 'AA', 'B': 'AB', 'Z': 'Z'}}\n        sorted(str_dict.items())\n        # convert str_dict into a dictionary {'A': {'A': 'AA', 'Z': 'ZZ', 'Z': 'ZZZ'}, 'B': {'A': 'AA', 'B': 'AB', 'Z': 'Z'}}\n        str_dict_sorted = {x: y for x, y in str_dict.items()}\n        # add str_dict_sorted to dict_sorted\n        # {'A': {'A': 'AA', 'Z': 'ZZ', 'Z': 'ZZZ'}, 'B': {'A': 'AA', 'B': 'AB', 'Z': 'Z'}}\n        dict_sorted.update(str_dict_sorted)\n    \n    # list_keys = list(dict_sorted.keys())\n    # list_values = list(dict_sorted.values())\n    # print(list_keys, list_values)\n    \n    # list_keys.sort()\n    # list_values.sort()\n    # print(list_keys)\n    # print(list_values)\n    \n    # for str_key in list_keys:\n    #     # dict_sorted: {'A': {'A': 'AA', 'Z': 'ZZ', 'Z': 'ZZZ'}, 'B': {'A': 'AA', 'B': 'AB', 'Z': 'Z'}}\n    #     if str_key in dict_sorted:\n    #         list_values.sort(key=lambda x: (x[1], x[0]))\n    #         list_values = list(map(list_values.pop, itertools.cycle([i] * len(list_values))))\n    #         # print(list_values)\n    #         # print(list_values[0][0])\n    #         # print(dict_sorted[str_key][list_values[0][0]])\n    #         return(dict_sorted[str_key][list_values[0][0]])\n\n    # for str_key in list_keys:\n    #     # dict_sorted: {'A': {'A': 'AA', 'Z': 'ZZ', 'Z': 'ZZZ'}, 'B': {'A': 'AA', 'B': 'AB', 'Z': 'Z'}}\n    #     if str_key in dict_sorted:\n    #         list_values.sort(key=lambda x: (x[1], x[0]))\n    #         list_values = list(map(list_values.pop, itertools.cycle([i] * len(list_values))))\n    #         return(dict_sorted[str_key][list_values[0][0]])\n\n    for str_key in sorted(dict_sorted):\n        # sorted(dict_sorted[str_key].values())\n        # str_values: [1, 2, 3, 4, 5, 6]\n        str_values = sorted(dict_sorted[str_key].values())\n        str_value = str_values.pop()\n        return(str_value)\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    result = ''\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    print(s)\n    for i in range(len(s) - 1):\n        if s[i:i + 2] in s[i + 1:]:\n            result += s[i:i + 2]\n    return result\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    two_grams = stdin.split()\n    max_count = 0\n    two_gram_count = {}\n    for two_gram in two_grams:\n        if two_gram in two_gram_count.keys():\n            two_gram_count[two_gram] += 1\n        else:\n            two_gram_count[two_gram] = 1\n\n    for key, value in two_gram_count.items():\n        if value > max_count:\n            max_count = value\n            max_key = key\n\n    return max_key"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a, b):\n        return abs(a - b)\n\n    def len_of_str(a):\n        return len(a)\n\n    s = stdin[0]\n    t = stdin[1]\n    s_len = len_of_str(s)\n    t_len = len_of_str(t)\n\n    if s_len == 0 and t_len == 0:\n        return s_len\n\n    if s_len == t_len:\n        return s_len - 1\n\n    dist_func = lambda x, y: distance(x, y)\n    s_dists = sorted(list(map(dist_func, zip(s, s[1:]))), key=lambda x: x[0])\n    t_dists = sorted(list(map(dist_func, zip(t, t[1:]))), key=lambda x: x[0])\n\n    s_dists.append((s_len, s_len - 1))\n    t_dists.append((t_len, t_len - 1))\n\n    for i in range(len(s_dists)):\n        if s_dists[i][0] == t_dists[i][0]:\n            s_dists.append((s_len, s_len - 1))\n            t_dists.append((t_len, t_len - 1))\n            s_dists.pop(i)\n            t_dists.pop(i)\n            break\n\n    for i in range(len(s_dists)):\n        if s_dists[i][1] == t_dists[i][1]:\n            s_dists.append((s_len, s_len - 1))\n            t_dists.append((t_len, t_len - 1))\n            s_dists.pop(i)\n            t_dists.pop(i)\n            break\n\n    if not s_dists and not t_dists:\n        return s_len + t_len\n\n    if s_dists:\n        s_move = s_dists[0][1]\n    else:\n        s_move = s_len\n\n    if t_dists:\n        t_move = t_dists[0][1]\n    else:\n        t_move = t_len\n\n    return s_move + t_move\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def _swap(a: str, i: int, j: int) -> str:\n        return a[:i] + a[i + 1:j] + a[j] + a[i + 1 : j] + a[i] + a[j + 1 :]\n\n    s, t = stdin.splitlines()\n\n    d = 0\n    while len(s) > len(t):\n        d += 1\n        t = _swap(t, len(s), len(t))\n\n    while len(s) < len(t):\n        d += 1\n        s = _swap(s, len(s), len(t))\n\n    if s == t:\n        return d\n    else:\n        return \"impossible\""
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    t = stdin.strip().lower()\n    m = 0\n    s = list(s)\n    t = list(t)\n    while t:\n        if t.pop(0)!= s.pop():\n            m += 1\n    return m + min(len(s), len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = input()\n\nstdin = stdin[0]\n\nsum = 0\n\nfor i in range(0, len(stdin)-1):\n\n    sum = sum + abs(ord(stdin[i]) - ord(stdin[i+1]))\n\nprint(sum)\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    cur = 0\n    for i in range(len(s)):\n        if t[i]!= s[i]:\n            cur += 1\n    return cur\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #code goes here\n    stdin = stdin.split()\n    s = stdin[0]\n    t = stdin[1]\n    s_len = len(s)\n    t_len = len(t)\n    ans = s_len + t_len - 1\n    if s_len < t_len:\n        for i in range(s_len):\n            s += s[i]\n        ans += t_len - s_len\n    elif s_len > t_len:\n        for i in range(t_len):\n            t += t[i]\n        ans += s_len - t_len\n    else:\n        return s_len\n    return ans\n    \n    \n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    t = s[1]\n    return str(len(t)-len(s[0])+len(s[0])-len(t))\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n\n    s, t = stdin[0], stdin[1]\n    l = len(s)\n\n    if l == 0:\n        return l\n\n    ls = s + t\n\n    if len(ls) < len(t):\n        return len(s)\n\n    def helper(s, t):\n        ls = s + t\n        i = 0\n        cnt = 0\n        while i < len(ls):\n            if ls[i] == t[i]:\n                cnt += 1\n            else:\n                break\n            i += 1\n        return cnt\n\n    res = max(helper(s, t), helper(s, t[::-1]))\n\n    return res\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    y = 1\n    while True:\n        if y >= X:\n            break\n        if y % 2 == 1:\n            y += 1\n            continue\n        if y % 2 == 0:\n            if y + (X - y) <= N:\n                y += X\n                continue\n            if y + (N - y) <= N:\n                y += N\n                continue\n            break\n    return str(abs(X - y))\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = stdin.split()\n    n = int(n)\n    x = list(map(int, x.split()))\n    result = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            tmp = abs(x[i] - x[j])\n            if tmp >= result:\n                result = tmp\n    return str(result)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    solutions = []\n    for i in range(1, N):\n        for x_i, x_next in zip(list(map(int, stdin.split())), list(map(int, stdin.split()))):\n            if (x_i - x_next) >= 0:\n                solutions.append(((x_i - x_next) + X))\n    return max(solutions)\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    d = 2\n    while True:\n        for i in range(n - 1):\n            if l[i] + d <= l[i + 1]:\n                l[i + 1] = l[i] + d\n                d += 1\n        if l[-1] + d <= x:\n            print(d)\n            return \"\"\n        else:\n            l[-1] = x - (l[-1] + d)\n            d += 1\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N, X = stdin[0], stdin[1]\n    moves = [(0, 1), (0, -1)]\n    visited = {(1, 2), (1, 3), (1, 5), (1, 7), (1, 9), (1, 11)}\n    dist = {(1, 2): 0, (1, 3): 1, (1, 5): 2, (1, 7): 3, (1, 9): 4, (1, 11): 5}\n    D = 2\n    while D <= abs(X - 1):\n        for i in range(N):\n            if (X, i + 1) in visited:\n                continue\n            for move in moves:\n                x, y = X + D * move[0], X - D * move[1]\n                if (x, y) in dist and (x, y)!= (X, i + 1):\n                    visited.add((x, y))\n                    visited.add((X, i + 1))\n                    break\n            else:\n                visited.add((X, i + 1))\n        D += 2\n    return D\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n    ans = 0\n    visited = {}\n    for city in data:\n        if city in visited.keys():\n            continue\n        else:\n            visited[city] = 1\n        D = 1\n        while True:\n            ans += D\n            if city == x:\n                break\n            if city > x:\n                city -= D\n            else:\n                city += D\n            D += 1\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    D = 2\n    while True:\n        for i in range(N):\n            if cities[i] == X:\n                for j in range(N):\n                    if cities[j] > cities[i]:\n                        cities[i] = cities[j]\n        if cities[0] < X:\n            D += 2\n        else:\n            break\n    return D"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    cities = list(map(int, stdin.split()))\n    counter = 0\n    visited = []\n    for i in range(N):\n        if X in cities:\n            visited.append(X)\n            cities.remove(X)\n        elif X + N - i in cities:\n            visited.append(X + N - i)\n            cities.remove(X + N - i)\n        elif X - i in cities:\n            visited.append(X - i)\n            cities.remove(X - i)\n\n        if len(visited) == N:\n            return str(len(visited))\n\n        if i == N - 1:\n            counter = max(counter, len(visited))\n    return str(counter)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = (int(i) for i in stdin.split())\n    # X = int(X)\n    X = [int(i) for i in stdin.split()]\n    X.sort()\n    # X = sorted(X)\n    result = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (X[i] + X[j]) % 2 == 1:\n                result = max(result, X[i] + X[j])\n    return str(result)\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin\n    if s.find(s[::-1])!= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nsolution(input())\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # if len(stdin) == 1:\n    #     return \"No\"\n    #\n    # for i in range(1, len(stdin) // 2 + 1):\n    #     # print(stdin[:i], stdin[-(i):], stdin[i:len(stdin) - i + 1])\n    #     if stdin[:i] == stdin[-(i):][::-1]:\n    #         if stdin[i:len(stdin) - i + 1] == stdin[i:len(stdin) - i + 1][::-1]:\n    #             return \"Yes\"\n    # return \"No\"\n\n    if len(stdin) == 1:\n        return \"No\"\n\n    for i in range(1, len(stdin) // 2 + 1):\n        # print(stdin[:i], stdin[-(i):][::-1], stdin[i:len(stdin) - i + 1])\n        if stdin[:i] == stdin[-(i):][::-1]:\n            if stdin[i:len(stdin) - i + 1] == stdin[i:len(stdin) - i + 1][::-1]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    def is_palindrome_rec(s, low, high):\n        while low < high:\n            if s[low]!= s[high]:\n                return False\n            low += 1\n            high -= 1\n        return True\n\n    def is_palindrome_rec_rec(s, low, high):\n        if low == high:\n            return True\n        if s[low]!= s[high]:\n            return False\n        return is_palindrome_rec_rec(s, low + 1, high - 1)\n\n    n = len(stdin)\n    if n == 1 or n == 2:\n        return 'Yes' if is_palindrome(stdin) else 'No'\n    else:\n        return 'Yes' if is_palindrome_rec_rec(stdin, 0, n - 1) else 'No'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # return True if the string is a palindrome and False otherwise.\n    if stdin.isalpha():\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        return \"No\"\n    else:\n        return \"Invalid\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if isPalindrome(s):\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(\"YES\" if is_strong_palindrome(stdin) else \"NO\")\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if stdin == stdin[::-1] else \"No\"\n    # return stdin == stdin[::-1]\n\nprint(solution(\"akasaka\"))\n\n\"\"\"\n\n###  https://leetcode.com/problems/palindrome-pairs/submissions/\n\nclass Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        self.words = words\n        words_len = len(words)\n        res = []\n        for i in range(words_len):\n            word = words[i]\n            for j in range(words_len):\n                word_reverse = word[::-1]\n                if word_reverse in self.words:\n                    res.append([i, self.words.index(word_reverse)])\n                    # res.append([i, j])\n                if i!= j and word == word[::-1]:\n                    res.append([j, i])\n        return res\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if len(s) == 1:\n        return \"Yes\"\n    \n    is_palindrome = True\n    if len(s) == 2:\n        if s == s[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    \n    if s[::-1] == s:\n        return \"Yes\"\n    elif s[1:len(s)-1] == s[1:len(s)-1][::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #s = stdin\n    #s = 'akasaka'\n    #s = 'as'\n    s = stdin\n    #s = 'hic'\n    #s = 'gk'\n    #s = 'kkk'\n    #s = 'asasd'\n    #s = 'ghg'\n    #s = 'gkh'\n    #s = 'ksk'\n    #s = 'asasas'\n    #s = 'qwq'\n    #s = 'qr'\n    #s = 'q'\n    #s = 'q'\n    #s = 'z'\n    #s = 'y'\n    #s = 'z'\n    #s = 'z'\n    #s = 'as'\n    #s = 'z'\n    #s ='s'\n    #s = 'k'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s = 'z'\n    #s"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 3:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = float(b)\n\n    a_int = int(a*b)\n    return str(a_int)"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    A = int(A)\n    B = float(B)\n    return str(int(A * B))\n\nprint(solution(input()))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    print(int(A) * int(B))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.strip().split())\n    return str(int(A * B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = float(B)\n    return int(A * round(B,2))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_1, num_2 = stdin.split(' ')\n    num_1 = int(num_1)\n    num_2 = int(num_2)\n    if num_1 == 0:\n        num_1 = 0\n    if num_2 == 0:\n        num_2 = 0\n    return '{:0>5}'.format(int(num_1 * num_2))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin)\n    num = str(int(num * 10))\n    return num"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = a % 10\n    b = int(str(b)[:2])\n    res = a * b\n    print(res)\n    return res\n\nsolution(input())\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = float(B)\n    B = int(B * 10)\n    return str(A * B)\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    testCasesNum = int(stdin)\n    for i in range(testCasesNum):\n        num = int(stdin.split('\\n')[i])\n        ways = waysToDistribute(num)\n        if ways == 1:\n            print(0)\n        else:\n            print(ways)\n    return \"done\"\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    def helper(n,a,b):\n        if n == 0:\n            return 1\n        else:\n            if a == 0:\n                return 0\n            elif a <= n:\n                return helper(n-a,a,b)\n            elif b <= n:\n                return helper(n-b,a,b)\n            else:\n                return 0\n    return helper(num,n-1,n-1)\n\nfor _ in range(int(input())):\n    print(solution(input()))\n\n\n\"\"\"\n\nimport math\nclass Solution:\n    def solve(self, a, b, n):\n        if a > b:\n            return 0\n        if n == a + b:\n            return math.factorial(n)\n        if n <= a or n <= b:\n            return 0\n\n        ans = 0\n        for i in range(n-a, n+1):\n            ans += math.factorial(n-i) * math.factorial(i)\n        return ans\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return 0\n\n    def solution1(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        return solution1(n - 2) + solution1(n - 1)\n\n    return str(solution1(n))\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '1'\n    elif n == 3:\n        return '1'\n    elif n == 4:\n        return '0'\n    elif n == 5:\n        return '0'\n    elif n == 6:\n        return '1'\n    elif n == 7:\n        return '1'\n    elif n == 8:\n        return '0'\n    elif n == 9:\n        return '0'\n    elif n == 10:\n        return '1'\n    elif n == 11:\n        return '0'\n    elif n == 12:\n        return '0'\n    elif n == 13:\n        return '1'\n    elif n == 14:\n        return '0'\n    elif n == 15:\n        return '0'\n    elif n == 16:\n        return '0'\n    elif n == 17:\n        return '0'\n    elif n == 18:\n        return '0'\n    elif n == 19:\n        return '0'\n    elif n == 20:\n        return '1'\n    elif n == 21:\n        return '0'\n    elif n == 22:\n        return '0'\n    elif n == 23:\n        return '1'\n    elif n == 24:\n        return '0'\n    elif n == 25:\n        return '0'\n    elif n == 26:\n        return '1'\n    elif n == 27:\n        return '0'\n    elif n == 28:\n        return '0'\n    elif n == 29:\n        return '0'\n    elif n == 30:\n        return '0'\n    elif n == 31:\n        return '0'\n    elif n == 32:\n        return '1'\n    elif n == 33:\n        return '0'\n    elif n == 34:\n        return '0'\n    elif n == 35:\n        return '0'\n    elif n == 36:\n        return '1'\n    elif n == 37:\n        return '0'\n    elif n == 38:\n        return '0'\n    elif n == 39:\n        return '0'\n    elif n == 40:\n        return '0'\n    elif n == 41:\n        return '0'\n    elif n == 42:\n        return '0'\n    elif n == 43:\n        return '1'\n    elif n == 44:\n        return '0'\n    elif n == 45:\n        return '0'\n    elif n == 46:\n        return '0'\n    elif n == 47:\n        return '0'\n    elif n == 48:\n        return '0'\n    elif n == 49:\n        return '1'\n    elif n == 50:\n        return '0'\n    elif n == 51:\n        return '0'\n    elif n == 52:\n        return '0'\n    elif n == 53:\n        return '0'\n    elif n == 54:\n        return '0'\n    elif n == 55:\n        return '0'\n    elif n == 56:\n        return '0'\n    elif n == 57:\n        return '0'\n    elif n == 58:\n        return '0'\n    elif n == 59:\n        return '0'\n    elif n == 60:\n        return '0'\n    elif n == 61:\n        return '0'\n    elif n == 62:\n        return '0'\n    elif n == 63:\n        return '0'\n    elif n == 64:\n        return '1'\n    elif n == 65:\n        return '0'\n    elif n == 66:\n        return '0'\n    elif n == 67:\n        return '0'\n    elif n == 68:\n        return '0'\n    elif n == 69:\n        return '0'\n    elif n == 70:\n        return '0'\n    elif n == 71:\n        return '0'\n    elif n == 72:\n        return '0'\n    elif n == 73:\n        return '0'\n    elif n == 74:\n        return '0'\n    elif n == 75:\n        return '0'\n    elif n == 76:\n        return '0'\n    elif n == 77:\n        return '0'\n    elif n == 78:\n        return '0'\n    elif n == 79:\n        return '0'\n    elif n == 80:\n        return '0'\n    elif n == 81:\n        return '0'\n    elif n == 82:\n        return '0'\n    elif n == 83:\n        return '0'\n    elif n == 84:\n        return '0'\n    elif n == 85:\n        return '0'\n    elif n == 86:\n        return '0'\n    elif n == 87:\n        return '0'\n    elif n == 88:\n        return '0'\n    elif n == 89:\n        return '0'\n    elif n == 90:\n        return '0'\n    elif n == 91:\n        return '0'\n    elif n == 92:\n        return '0'\n    elif n == 93:\n        return '0'\n    elif n == 94:\n        return '0'\n    elif n == 95:\n        return '0'\n    elif n == 96:\n        return '0'\n    elif n == 97:\n        return '0'\n    elif n == 98:\n        return '0'\n    elif n == 99:\n        return '0'\n    elif n == 100:\n        return '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N = int(stdin)\n    ans = 0\n    if N == 1:\n        print(ans)\n        return ans\n\n    def solve(n):\n        if n == 1:\n            return 1\n        ans1 = solve(n-1)\n        ans2 = n\n        ans = ans1 + ans2\n        return ans\n\n    ans = solve(N)\n    if ans == 0:\n        print(ans)\n    else:\n        print(ans)\n    return ans\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = [[] for i in range(n+1)]\n    roads = []\n\n    for road in range(m):\n        u, v = map(int, input().split())\n        cities[u].append(v)\n        cities[v].append(u)\n        roads.append((u, v))\n    \n    #print(cities)\n    #print(roads)\n\n    def is_reachable(start, end):\n        if start == end:\n            return True\n        visited = [False for i in range(n+1)]\n        q = deque()\n        q.append(start)\n        visited[start] = True\n        while q:\n            curr = q.popleft()\n            if curr == end:\n                return True\n            for i in cities[curr]:\n                if not visited[i]:\n                    visited[i] = True\n                    q.append(i)\n        return False\n    \n    def get_cnt(start, end):\n        cnt = 0\n        for i in range(len(roads)):\n            if roads[i][0] == start and roads[i][1] == end:\n                cnt += 1\n            elif roads[i][0] == end and roads[i][1] == start:\n                cnt += 1\n        return cnt\n\n    \n    def get_all_cities():\n        all_cities = set([])\n        for road in roads:\n            all_cities.update(cities[road[0]], cities[road[1]])\n        return all_cities\n\n    all_cities = get_all_cities()\n    #print(all_cities)\n\n    min_roads = len(all_cities)\n    while len(all_cities) > 0:\n        candidate = []\n        #print(all_cities)\n        #print(min_roads)\n        for i in all_cities:\n            if not is_reachable(i, s):\n                candidate.append(i)\n        #print(candidate)\n        if len(candidate) == 0:\n            return str(min_roads)\n        min_roads += 1\n        #print(candidate)\n        for i in candidate:\n            for j in candidate:\n                if i!= j and get_cnt(i, j) == 0:\n                    all_cities.remove(i)\n                    all_cities.remove(j)\n    return str(min_roads)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = [[int(i) - 1 for i in stdin.split()[i * 2:i * 2 + 2]] for i in range(m)]\n    q = [i for i in range(n)]\n    visited = set()\n    q_len = len(q)\n\n    while q:\n        if s in q:\n            return q_len\n        q_len -= 1\n        visited.add(s)\n        for i in range(len(roads)):\n            u, v = roads[i][0], roads[i][1]\n            if s == u:\n                roads[i] = roads[i][::-1]\n            elif s == v:\n                roads[i] = roads[i][::-1]\n            if u not in visited and v not in visited:\n                q.append(u)\n            if v not in visited and u not in visited:\n                q.append(v)\n        q = q[::-1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = list(map(lambda x: tuple(map(int, x.split())), stdin.split('\\n')[1:]))\n    # roads = list(map(lambda x: (int(x[0])-1, int(x[1])-1), stdin.split('\\n')[1:]))\n    # roads = list(map(lambda x: (int(x[0])-1, int(x[1])-1), stdin.split('\\n')[1:]))\n    # roads = [[1, 2], [1, 3], [2, 3], [1, 5], [5, 6], [6, 1], [1, 8], [9, 8], [7, 1]]\n    return str(solution_naive(roads, n, m, s))\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    roads = list(map(lambda x: x.split(), stdin[3:]))\n    return str(min_roads(n, m, s, roads))\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def add_road(cities: List[Tuple[int, int]], idx: int, idx2: int) -> bool:\n        for city in cities:\n            if city == idx2:\n                return True\n            if city == idx:\n                continue\n            if city == (idx2 + 1) % n:\n                return True\n            if city == (idx + 1) % n:\n                return True\n        return False\n\n    n, m, s = map(int, stdin.split())\n    if s < 1 or s > n:\n        return '-1'\n    cities = []\n    roads = []\n    for i in range(1, n + 1):\n        cities.append(i)\n        roads.append(())\n    for road in stdin.split():\n        u, v = map(int, road.split())\n        roads[u - 1] += (v - 1, )\n        roads[v - 1] += (u - 1, )\n    start_cities = set()\n    for city in cities:\n        start_cities.add(city)\n    for city in cities:\n        if city == s:\n            continue\n        if not add_road(roads, city, s):\n            return '-1'\n    start_cities.remove(s)\n    for city in start_cities:\n        roads[city - 1] = roads[city - 1] + tuple(sorted(start_cities))\n    for road in roads:\n        roads[road] = sorted(roads[road])\n    result = 0\n    for road in roads:\n        if road:\n            result += len(road)\n    return str(result)\n\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = [[*map(int, input().split())] for _ in range(m)]\n    G = defaultdict(list)\n\n    for u, v in roads:\n        G[u].append(v)\n        G[v].append(u)\n\n    visited = set()\n    visited.add(s)\n    stack = [s]\n    cnt = 0\n    while stack:\n        u = stack.pop()\n        if u not in visited:\n            visited.add(u)\n            cnt += 1\n            for v in G[u]:\n                if v not in visited:\n                    stack.append(v)\n    return str(cnt)"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(i) for i in stdin.split()]\n    roads = [tuple([int(i) for i in stdin.split()[2 * j: 2 * j + 2]]) for j in range(m)]\n    graph = {}\n    for u, v in roads:\n        if u in graph:\n            graph[u].append(v)\n        else:\n            graph[u] = [v]\n        if v in graph:\n            graph[v].append(u)\n        else:\n            graph[v] = [u]\n    visited = set()\n    q = deque()\n    q.append(s)\n    visited.add(s)\n    res = 0\n    while q:\n        cur = q.pop()\n        if cur in visited:\n            continue\n        visited.add(cur)\n        res += 1\n        for node in graph[cur]:\n            q.append(node)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = []\n    cities = [i + 1 for i in range(n)]\n    \n    for i in range(m):\n        u, v = map(int, stdin.split())\n        cities.remove(u)\n        cities.remove(v)\n        roads.append((u, v))\n        roads.append((v, u))\n    \n    cities.remove(s)\n    \n    # print(cities)\n    # print(roads)\n    # print(len(cities))\n    # print(len(roads))\n    \n    shortest = len(cities)\n    for i in range(len(roads)):\n        start, end = roads[i]\n        if cities[start - 1]!= start:\n            start = cities[start - 1]\n        if cities[end - 1]!= end:\n            end = cities[end - 1]\n        shortest = min(shortest, shortest + abs(start - end))\n    \n    return str(shortest)\n    \n    \n    \n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    connections = []\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        connections.append((a, b))\n    connections.append((s, s))\n    connections.sort(key=lambda x: x[0])\n    min_roads = n - 1\n    for a, b in connections:\n        min_roads += 1\n        if b == s:\n            break\n    print(min_roads)\n    return \"\""
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # boxers = set(a)\n    boxers = {i: a.count(i) for i in set(a)}\n    boxers = list(boxers.items())\n    boxers.sort(key=lambda x: x[1], reverse=True)\n    max_boxers = len(boxers)\n    return max_boxers\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = sorted(map(int, stdin.split()))\n    i = 0\n    j = n - 1\n    a = []\n    while i <= j:\n        if boxers[i] == boxers[j] or boxers[i] + 1 == boxers[j] or boxers[i] - 1 == boxers[j]:\n            a.append(boxers[i])\n            i += 1\n            j -= 1\n        elif boxers[i] + 1 == boxers[j]:\n            boxers[i] += 1\n            i += 1\n        else:\n            boxers[j] -= 1\n            j -= 1\n    return str(len(a))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    weights = data\n    min_diff = min(weights)\n    diff = min_diff\n    count_dict = {}\n    count = 1\n\n    while diff!= 0:\n        count_dict[diff] = count\n        count += 1\n        diff = min(weights) - diff\n\n    for key in sorted(count_dict.keys(), reverse=True):\n        if key - min_diff in count_dict.keys():\n            return str(count_dict[key - min_diff])\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n\n    counter = 1\n    i = 0\n    while i < n-1:\n        if weights[i] == 1:\n            i += 1\n        elif weights[i] == weights[i+1]:\n            weights[i] = 1\n            i += 1\n        elif weights[i] + weights[i+1] == weights[i+1]:\n            weights[i] += weights[i+1]\n            i += 2\n        else:\n            counter += 1\n            i += 1\n    return counter\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(list(map(int, stdin.split())))\n    answer = 0\n    while a!= sorted(a):\n        for i in range(len(a)):\n            if a[i] == max(a):\n                answer += 1\n                a[i] = a[i] - 1\n            if a[i] == min(a):\n                answer += 1\n                a[i] = a[i] + 1\n            if a[i] == 1:\n                answer += 1\n                a[i] = 0\n            else:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    a.sort()\n    res = 1\n    cur_sum = a[0]\n    for i in range(1, n):\n        if cur_sum < a[i]:\n            cur_sum = a[i]\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = list(map(int, stdin.split()))\n    return boxers\nprint(solution(input()))"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(list(map(int, stdin.split())))\n    return str(len(set(a)))"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = list(map(int, stdin.split()))\n\n    # Find first box with same weight as the max\n    weight_max = max(boxers)\n    i_max = boxers.index(weight_max)\n\n    while i_max!= n - 1:\n        weight_max -= 1\n        i_max = boxers.index(weight_max)\n\n    i_max += 1\n\n    return str(i_max)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    data = stdin.split()\n    boxers = []\n    for i in data:\n        boxers.append(int(i))\n    boxers.sort()\n    max_len = 1\n    i = 0\n    while i < len(boxers)-1:\n        if boxers[i] == boxers[i+1]:\n            boxers.pop(i+1)\n        else:\n            i += 1\n    for i in boxers:\n        if i!= boxers[0]:\n            max_len += 1\n    return str(max_len)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    # find the prefectures\n    p = {}\n    for i in range(1, N+1):\n        prefecture_id = ''\n        for j in range(6):\n            prefecture_id += str(i)\n            if len(prefecture_id) == 6:\n                if prefecture_id not in p:\n                    p[prefecture_id] = i\n                break\n        if prefecture_id not in p:\n            p[prefecture_id] = i\n    \n    # find the cities in those prefectures\n    c = {}\n    for i in range(M):\n        city_id = ''\n        for j in range(6):\n            city_id += str(i+1)\n            if len(city_id) == 6:\n                if city_id not in c:\n                    c[city_id] = i+1\n                break\n        if city_id not in c:\n            c[city_id] = i+1\n    \n    res = []\n    for i in c:\n        res.append(p[i]*N+c[i])\n    \n    res.sort()\n    for i in res:\n        print(i)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = {}\n    for prefecture, year in zip(range(1, N+1), range(1, N+1)):\n        cities[prefecture] = {}\n        for city in range(1, N+1):\n            cities[prefecture][city] = [year, -1, -1, -1]\n\n    for line in stdin.splitlines():\n        prefecture, city = map(int, line.split())\n        if cities[prefecture][city][1] == -1:\n            cities[prefecture][city][1] = city\n        else:\n            cities[prefecture][city][2] = city\n\n    return \"\\n\".join(str(city) + \" \" + str(city_id) for city, city_id in sorted(cities.items(), key=lambda item: item[0]))"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefs = [[int(y) for y in x.split()] for x in stdin.split(\"\\n\")[1:]]\n\n    def func(p: int, y: int) -> str:\n        ret = \"\".zfill(6)\n        for y in prefs[p]:\n            ret += str(y)\n        return ret\n\n    return \",\".join(sorted(map(lambda x: func(x[0] - 1, x[1]), enumerate(prefs, 1))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    data = []\n\n    for _ in range(N):\n        P, Y = map(int, input().split())\n        data.append((P, Y))\n\n    data.sort(key=lambda x: (x[1], x[0]))\n\n    result = []\n\n    for i, data in enumerate(data):\n        result.append(str(i + 1).zfill(6) + str(data[1]).zfill(6))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    \"\"\"\n    N, M = map(int, stdin.split())\n    pref_cities = list()\n    pref_city_id = list()\n\n    for i in range(N):\n        pref, city = map(int, stdin.split())\n        pref_cities.append(pref)\n        pref_city_id.append(city)\n\n    pref_city_id.sort()\n    pref_cities.sort()\n\n    result = list()\n\n    for i in range(M):\n        result.append(str(pref_city_id[i]) + str(pref_cities[i]))\n\n    return '\\n'.join(result)\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    prefectures = []\n    for i in range(1, N + 1):\n        P, Y_i = stdin.split()\n        P, Y_i = int(P), int(Y_i)\n        prefectures.append((P, Y_i))\n    result = []\n    for i in range(M):\n        for j in range(1, N + 1):\n            if prefectures[j - 1][0] == i + 1:\n                result.append(str(prefectures[j - 1][1]))\n    return''.join(sorted(result))"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    n_cities = [False] * n\n    pref_id = [0] * n\n    all_cities = []\n    for i in range(m):\n        city, pref_id_i = map(int, stdin.split())\n        pref_id_i -= 1\n\n        if n_cities[city - 1]:\n            continue\n\n        pref_id[city - 1] = pref_id_i\n        all_cities.append(city)\n        n_cities[city - 1] = True\n\n    ordered_cities = all_cities[:]\n    ordered_cities.sort()\n    for city in ordered_cities:\n        print(pref_id[city - 1], end='')\n\n    return ''"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pref_id = []\n    city_id = []\n    for _ in range(n):\n        pref_id.append(stdin[1])\n        city_id.append(stdin[2])\n    city_id.sort()\n    pref_id.sort()\n    res = []\n    for i in range(m):\n        res.append(pref_id[i] + city_id[i])\n    return \" \".join(res)"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    cities = [[] for _ in range(n)]\n    for i in range(n):\n        cities[i] = list(map(int, stdin.split()[i * 2 + 1:i * 2 + 3]))\n\n    # sort by city indices\n    cities = sorted(cities, key=lambda x: x[0])\n    # for each prefecture, find index of the city with the first established city\n    start = {}\n    for i in range(n):\n        if len(cities[i]) == 0:\n            start[cities[i]] = i\n    # for each prefecture, build the list of indices\n    pref_to_id = {}\n    for i in range(n):\n        if i in start:\n            continue\n        idxs = [start[city] for city in cities[i] if city in start]\n        pref_to_id[i] = idxs\n\n    # sort by city indices\n    pref_to_id = {k: v for k, v in sorted(pref_to_id.items(), key=lambda x: x[0])}\n    # print the result\n    result = []\n    for i in pref_to_id:\n        result.extend([str(x) for x in pref_to_id[i]])\n    return \" \".join(result)"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    monsters = []\n    for _ in range(N):\n        monsters.append(int(stdin.strip().split()[_]))\n    monsters = sorted(monsters)\n    min_health = 0\n    for i in range(len(monsters)):\n        if monsters[i] == 1:\n            monsters[i] = monsters[i] - 1\n        else:\n            monsters[i] = monsters[i]\n        min_health += monsters[i]\n    return str(min_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    alive = [int(x) for x in stdin.strip().split()]\n\n    while len(alive) > 1:\n        attack = random.randint(0, len(alive)-1)\n        alive[attack] -= alive.pop(attack)\n    \n    return alive[0]\n\nprint(solution(input()))"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *lst = map(int, stdin.split())\n    lst.sort()\n    if len(lst) == 1:\n        return \"0\"\n\n    end = lst.pop()\n    while lst:\n        cur = lst.pop()\n        if cur > end:\n            end = cur\n        if not lst:\n            break\n        i = lst.pop()\n        end = min(end, i - cur)\n    return str(end)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lst = list(map(int, stdin.split()))\n    d = {}\n    lst.sort(reverse=True)\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_d = max(d.values())\n    if d[1] < max_d:\n        return str(d[1])\n    else:\n        return str(d[1] - max_d)\n\nsolution(input())\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *rest = map(int, stdin.split())\n    a_list = list(map(int, rest))\n\n    alive_list = []\n    for idx, num in enumerate(a_list):\n        if idx + 1 < n and num < a_list[idx + 1]:\n            alive_list.append(idx + 1)\n\n    return alive_list[-1]\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    ----\n    N\n    A_1 A_2... A_N\n\n    stdout\n    ----\n    the minimum possible final health of the last monster alive.\n    \"\"\"\n    _, *lst = map(int, stdin.split())\n    if not lst:\n        return '0'\n    alive = []\n    ans = float('inf')\n    for n in range(1, len(lst) + 1):\n        ans = min(ans, sum(alive[:n - 1]) + n * lst[n - 1])\n        if lst[n - 1] < alive[n - 1]:\n            alive[n - 1] -= lst[n - 1]\n        else:\n            alive.append(lst[n - 1])\n    return str(ans)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_healing = 0\n    dead_monsters = []\n\n    for i in range(n):\n        a, b, c, d = list(map(int, stdin.split()))\n        dead_monsters.append((i + 1, a, b, c, d))\n\n    dead_monsters.sort(key=lambda x: (-x[3], x[1], x[2]))\n\n    for i, _, _, _, _ in dead_monsters:\n        if len(dead_monsters) == 1:\n            break\n        else:\n            dead_monsters[0] = (dead_monsters[0][0], dead_monsters[0][1], dead_monsters[0][2], dead_monsters[0][3],\n                                dead_monsters[0][4])\n            del dead_monsters[1]\n\n    return str(dead_monsters[0][3])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    count = 0\n    while count < N:\n        # A = max(A)\n        if A[count] == max(A):\n            print(A[count])\n            return\n        else:\n            A.append(A[count] + A[count])\n            count += 1\n    print(A[-1])\n    return"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, *b = map(int, stdin.split())\n    # maximum = max(a)\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = a[i] + min(dp[i + 1][j], dp[i][j - 1])\n\n    return str(dp[0][-1])\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alive = list(map(int, stdin.split()))\n    alive.sort()\n    min_health = alive[-1]\n    # with min_health\n    for i in range(n):\n        if alive[i] >= min_health:\n            alive[i] -= min_health\n            min_health = min(min_health, alive[i])\n    # without min_health\n    if min_health == alive[-1]:\n        for i in range(n):\n            if alive[i] >= 1:\n                alive[i] -= 1\n    return str(sum(alive))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))\n    return stdin.replace(\"()\",\"1\")"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin.split('(')[1][:-1]\n    golorp = golorp.split(',')\n    golorp = sorted(golorp, key=lambda x: int(x))\n    if golorp[0] == 'false':\n        return 'false'\n    return ''.join(golorp)\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    golors = stdin.split(\":-\")\n    res = 9\n    for golorp in golors:\n        if len(golorp) <= 2:\n            res = min(res, 0)\n        else:\n            res = min(res, int(golorp[1]) - int(golorp[0]))\n    return ''.join(sorted(str(x) for x in range(1, 10))) if res == 0 else 'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pattern = re.compile(r'(?P<golorp>[!-_0-9]+)(\\((?P<diet>[!-_0-9]+)\\))?(:(?P<name>[!-_0-9]+))?')\n\n    for line in stdin.splitlines():\n        match = pattern.fullmatch(line)\n        if match is None:\n            print(\"false\")\n        else:\n            golorp = int(match[\"golorp\"])\n            diet = int(match[\"diet\"]) if match[\"diet\"] else 0\n            name = match[\"name\"] if match[\"name\"] else \"false\"\n\n            try:\n                golorp = golorps[golorp]\n            except IndexError:\n                print(\"false\")\n                continue\n\n            # check if it's impossible to feed\n            if not golorp.can_feed(diet):\n                print(\"false\")\n                continue\n\n            feed = golorps.get_feed(golorp.get_name())\n\n            # check if it's impossible to feed\n            if not feed:\n                print(\"false\")\n                continue\n\n            # check if golorp is already fed\n            if feed.get_visited() == 1:\n                print(\"false\")\n                continue\n\n            # check if golorp can eat\n            if not golorp.can_eat(diet):\n                print(\"false\")\n                continue\n\n            # check if it's possible to eat\n            if not golorp.eat(diet):\n                print(\"false\")\n                continue\n\n            # feed golorp\n            feed.visit()\n\n            # if golorp can eat, return name of the golorp\n            print(golorp.get_name())\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = False\n    stdin = stdin.strip()\n    n = len(stdin)\n    if n <= 0:\n        return answer\n\n    def is_valid(string: str) -> bool:\n        for i in range(len(string)):\n            if string[i] == '_':\n                return True\n        return False\n\n    def to_parse(string: str, vals: List[str]) -> str:\n        for i in range(len(string)):\n            if string[i] == '_':\n                vals.append(i)\n        return vals\n\n    def valid_sequence(string: str) -> bool:\n        vals = to_parse(string, [])\n        for i in range(len(vals)-1):\n            if vals[i] + 1 < vals[i+1]:\n                return False\n        return True\n\n    def extend(string: str, vals: List[str]) -> List[str]:\n        vals = to_parse(string, vals)\n        vals.append(-1)\n        return vals\n\n    def backtrack(string: str, vals: List[str]) -> bool:\n        if len(string) == 0:\n            if valid_sequence(string):\n                return True\n            else:\n                return False\n        else:\n            for i in range(len(string)):\n                vals = extend(string[:i]+string[i+1:], vals)\n                if backtrack(string[:i]+string[i+1:], vals):\n                    return True\n            return False\n\n    vals = to_parse(stdin, [])\n    vals.append(-1)\n    return (backtrack(stdin, vals))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution of the Day 17, part 1.\n\n    What is the lexicographically smallest sequence of variable values that can be fed to the golorp?\n    '''\n\n    def parse_input(string: str) -> str:\n        '''\n        Parses input string into a list of lists.\n\n        >>> parse_input('(_-_/___*__):-___>__.')\n
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split(\"\\n\")\n    tokens = list(filter(lambda x: x!= \"\", tokens))\n\n    # Find number of variables\n    n = int(tokens[0])\n\n    # Find number of possible sequences\n    m = int(tokens[1])\n\n    # Store the sequences in a matrix\n    matrix = [[0 for j in range(10)] for i in range(m)]\n\n    for i in range(m):\n        for j in range(10):\n            tokens[2] = tokens[2].replace(f\"{j}\", \"\")\n            matrix[i][j] = int(tokens[2])\n\n    for i in range(m):\n        if is_possible(matrix, i, n):\n            return f\"{i} \" + print_sequence(matrix, i, n)\n\n    return \"false\"\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, line.strip().split(', '))) for line in stdin.strip().split('\\n')]\n    return min(solve(row, col, grid) for row, row_grid in enumerate(grid) for col, val in enumerate(row_grid))\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    food = stdin\n    for i in range(1000):\n        food = food.replace('(__+___+__-___)', '(' + '{:04b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:02b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:03b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:04b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:05b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:06b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:07b}'.format(i) + ')')\n        food = food.replace('(___+___+___)', '(' + '{:08b}'.format(i) + ')')\n    print(food)"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    golorp_name = golorp_name.split('(', 1)[0].rstrip(':')\n    if '-_+-' in golorp_name or '_+-' in golorp_name:\n        return 'false'\n    jaws = 0\n    golorp_name = golorp_name.replace('-_+-', '-___')\n    golorp_name = golorp_name.replace('_+-', '__')\n    for char in golorp_name:\n        if char == '>':\n            jaws += 1\n    return str(jaws)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    print(find_paths(n, m, k))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, m, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    a = stdin[3:]\n    a = [[int(x) for x in y] for y in a]\n    x = []\n    def dfs(x, y, n, m):\n        if n < 0 or m < 0:\n            return\n        if n == 0 and m == 0:\n            x.append(a[x][y])\n            return\n        if x == 0 and y < m - 1:\n            dfs(x, y + 1, n, m)\n        if x < n - 1 and y < m - 1:\n            dfs(x + 1, y, n, m)\n        if x < n - 1 and y > 0:\n            dfs(x + 1, y - 1, n, m)\n        if x > 0 and y > 0:\n            dfs(x - 1, y - 1, n, m)\n        if x > 0 and y < m - 1:\n            dfs(x - 1, y, n, m)\n        if x > 0 and y == m - 1:\n            dfs(x - 1, y - 1, n, m)\n\n    dfs(0, 0, n, m)\n    print(len(x))\n    return\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    x = stdin.pop(0)\n    y = stdin.pop(0)\n    z = stdin.pop(0)\n\n    def solve(a, b, c):\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 0 and b == 0:\n            return c\n        if a == 0:\n            return b\n        if c == 0:\n            return a\n        return solve(a - 1, b, c - 1) ^ a ^ b ^ c\n\n    return str(solve(x, y, z))\n\n\nsolution('''\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n''')\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    xor_sum = 0\n    for i in range(n):\n        for j in range(m):\n            xor_sum = xor_sum ^ matrix[i][j]\n    paths = 0\n    for i in range(n):\n        for j in range(m):\n            if xor_sum == k:\n                paths += 1\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                paths += matrix[i][j] == xor_sum ^ matrix[i][j + 1]\n            elif j == 0:\n                paths += matrix[i][j] == xor_sum ^ matrix[i + 1][j]\n            else:\n                paths += matrix[i][j] == xor_sum ^ matrix[i][j + 1] ^ matrix[i + 1][j]\n    return str(paths)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n    return str(find_count(n, m, k, a))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def permute(a, i, j):\n        if i == j:\n            res.append(''.join(a))\n        else:\n            for k in range(i, j):\n                a[i], a[k] = a[k], a[i]\n                permute(a, i + 1, j)\n                a[i], a[k] = a[k], a[i]\n    if len(stdin.split('\\n')) < 3:\n        return \"0\"\n    n, m, k = list(map(int, stdin.split('\\n')))\n    a = [str(i) for i in range(1, n + 1)]\n    res = []\n    permute(a, 0, n - 1)\n    return str(len(res))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1\n    return str(dp[n][m])\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                if i == 0 or grid[i - 1][j] == 0:\n                    grid[i][j] = 0\n                    count += 1\n                if j == 0 or grid[i][j - 1] == 0:\n                    grid[i][j] = 0\n                    count += 1\n                if i == n - 1 or grid[i + 1][j] == 0:\n                    grid[i][j] = 0\n                    count += 1\n                if j == m - 1 or grid[i][j + 1] == 0:\n                    grid[i][j] = 0\n                    count += 1\n    # print(grid)\n    x = list(map(list, zip(*grid)))\n    for i in range(len(x)):\n        for j in range(len(x)):\n            # print(x[i][j], sum(x[i]) ^ k)\n            if x[i][j] == 1 and sum(x[i]) ^ k == 0:\n                count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[1][1] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0: continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return str(dp[n - 1][m - 1] ^ k)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()[i * m:(i + 1) * m]] for i in range(n)]\n    count = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] == 1:\n                count += (1 << (matrix[i][j] - 1))\n    print(count)\n\n\n\nsolution(input())"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    l = len(t)\n    div = []\n    if l == 1:\n        return t[0]\n    elif l == 2:\n        if t == \"z\":\n            return \"z\"\n        elif t == \"a\":\n            return \"a\"\n        elif t == \"b\":\n            return \"b\"\n        elif t == \"c\":\n            return \"c\"\n        elif t == \"d\":\n            return \"d\"\n        elif t == \"e\":\n            return \"e\"\n        elif t == \"f\":\n            return \"f\"\n        elif t == \"g\":\n            return \"g\"\n        elif t == \"h\":\n            return \"h\"\n        elif t == \"i\":\n            return \"i\"\n        elif t == \"j\":\n            return \"j\"\n        elif t == \"k\":\n            return \"k\"\n        elif t == \"l\":\n            return \"l\"\n        elif t == \"m\":\n            return \"m\"\n        elif t == \"n\":\n            return \"n\"\n        elif t == \"o\":\n            return \"o\"\n        elif t == \"p\":\n            return \"p\"\n        elif t == \"q\":\n            return \"q\"\n        elif t == \"r\":\n            return \"r\"\n        elif t == \"s\":\n            return \"s\"\n        elif t == \"t\":\n            return \"t\"\n        elif t == \"u\":\n            return \"u\"\n        elif t == \"v\":\n            return \"v\"\n        elif t == \"w\":\n            return \"w\"\n        elif t == \"x\":\n            return \"x\"\n        elif t == \"y\":\n            return \"y\"\n        elif t == \"z\":\n            return \"z\"\n    while l > 1:\n        div.append(l)\n        if t[l-1] == t[l]:\n            l -= 1\n        else:\n            if t[l-1] == \"a\":\n                t = t[:l-1] + \"a\" + t[l:]\n            if t[l-1] == \"e\":\n                t = t[:l-1] + \"e\" + t[l:]\n            if t[l-1] == \"i\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"u\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"y\" + t[l:]\n            if t[l-1] == \"a\":\n                t = t[:l-1] + \"e\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"u\" + t[l:]\n            if t[l-1] == \"i\":\n                t = t[:l-1] + \"a\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"e\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"e\":\n                t = t[:l-1] + \"a\" + t[l:]\n            if t[l-1] == \"i\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"u\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"a\":\n                t = t[:l-1] + \"e\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"u\" + t[l:]\n            if t[l-1] == \"e\":\n                t = t[:l-1] + \"a\" + t[l:]\n            if t[l-1] == \"i\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"u\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"a\":\n                t = t[:l-1] + \"e\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-1] + \"i\" + t[l:]\n            if t[l-1] == \"u\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"y\":\n                t = t[:l-1] + \"u\" + t[l:]\n            if t[l-1] == \"e\":\n                t = t[:l-1] + \"a\" + t[l:]\n            if t[l-1] == \"i\":\n                t = t[:l-1] + \"o\" + t[l:]\n            if t[l-1] == \"o\":\n                t = t[:l-"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return stdin[::-1]"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport re\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n\n    def reverse(s: str, start: int, end: int) -> None:\n        while start < end:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n\n    for d in range(n, 0, -1):\n        reverse(t, 0, d-1)\n        reverse(t, d, n-1)\n        reverse(t, 0, n-1)\n\n    return ''.join(t)\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\nn = int(stdin())\ns = stdin()\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n    s = t\n    i = 1\n    while i <= n // 2:\n        s = s[::-1]\n        i += 1\n    s = s[1:] + s[:1]\n    i = 1\n    while i <= n // 2:\n        s = s[1:-1] + s[:1]\n        i += 1\n    return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n----SAMPLE----\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    return str(int(a) + int(b))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return sum(int(x) for x in stdin.split())"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(int, stdin.split()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([a, b]))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([a, b]))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    print(a + b)\nsolution(input())\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n    \n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(int, stdin.split()))"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    memory = []\n    code = []\n\n    for line in stdin.split('\\n'):\n        if line == '':\n            continue\n        elif line == '+++++++++>':\n            code += [code[-1] + 1]\n        elif line == '+++++++>':\n            code += [code[-1] + 2]\n        elif line == '<[<->-]<':\n            code += [code[-1] - 1]\n        elif line == '<[<+>-]<':\n            code += [code[-1] - 2]\n        elif line == '++>':\n            code += [code[-1] + 1]\n        elif line == '+>':\n            code += [code[-1] + 1]\n        elif line == '++<':\n            code += [code[-1] + 1]\n        elif line == '<<+>':\n            code += [code[-1] - 1]\n        elif line == '<<-<':\n            code += [code[-1] - 1]\n        elif line == '-<-<':\n            code += [code[-1] - 1]\n        elif line == '-<+<':\n            code += [code[-1] + 1]\n        elif line == '->-<':\n            code += [code[-1] - 1]\n        elif line == '-<+>':\n            code += [code[-1] + 1]\n        elif line == '-<+>-':\n            code += [code[-1] - 1]\n        elif line == '<->-<':\n            code += [code[-1] - 1]\n        elif line == '<->+>':\n            code += [code[-1] + 1]\n        elif line == '<->+>-':\n            code += [code[-1] + 1]\n        elif line == '<->-<':\n            code += [code[-1] + 1]\n        elif line == '<->-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<->+>':\n            code += [code[-1] + 1]\n        elif line == '<-<->+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<->-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<-<+>-':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<-<-<':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<-<-<+>':\n            code += [code[-1] + 1]\n        elif line == '<-<-<-<-<-<-<-<-<-<-<-<+"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    brainfuck = Brainfuck()\n    brainfuck.execute(stdin)\n    return brainfuck.output.replace(' ', '')\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_bytes = bytes.fromhex(stdin)\n    while True:\n        instruction = input_bytes.pop(0)\n        if instruction == 99:\n            break\n        #print(f\"{instruction:06b}\")\n        if instruction == 1:\n            op1 = input_bytes.pop(0)\n            op2 = input_bytes.pop(0)\n            output_byte = op2 + op1\n            #print(f\"+{op1:05b} {op2:05b} = {output_byte:05b}\")\n            input_bytes.insert(0, output_byte)\n        elif instruction == 2:\n            op1 = input_bytes.pop(0)\n            op2 = input_bytes.pop(0)\n            output_byte = op1 * op2\n            #print(f\"-{op1:05b} {op2:05b} = {output_byte:05b}\")\n            input_bytes.insert(0, output_byte)\n        else:\n            raise RuntimeError(f\"Unknown instruction {instruction}\")\n    return \"\".join(f\"{byte:02b}\" for byte in input_bytes)\n\n\nsolution(\"3+4\")\nsolution(\"8-5\")\nsolution(\"5+2+5\")\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport asyncio\nimport asyncio.queues"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nprint(\"-----Input-----\")\nprint(stdin)\nprint(\"-----Output-----\")\nprint()\n\ns = stdin.split()\n\ncode = []\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    memory = 30000\n    result = '+>'\n    stack = []\n    for i in range(n):\n        char = stdin[i]\n        if char == '+' or char == '-':\n            result += char\n            if stack:\n                result += '>'\n            else:\n                result += '<'\n            if i == n - 1:\n                result += '>'\n        elif char == '>':\n            result += '-'\n            if stack:\n                result += '<'\n            else:\n                result += '-'\n        elif char == '<':\n            result += '+'\n            if stack:\n                result += '>'\n            else:\n                result += '+'\n        elif char == ']':\n            if stack:\n                result += '['\n                stack.pop()\n            else:\n                result += ']'\n        elif char == '[':\n            stack.append(result)\n            result = '[>+-'\n        elif char == ']':\n            result += '['\n            if stack:\n                result += '-'\n            else:\n                result += ']'\n            stack.pop()\n        elif char == '.':\n            result += '+'\n            result += '+'\n        elif char == ',':\n            result += '-'\n            result += '-'\n        else:\n            result += char\n        if len(stack) > memory:\n            result += '<[<+>-]<'\n            memory -= 5\n    return result\n\n\nsolution('2+3')\nsolution('9-7')\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n'''"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    code = \"\"\n    a = 0\n    b = 0\n    counter = 0\n\n    while True:\n        # if we are in a loop we start with n = 0\n        # if we are not in a loop, we start with n = 255\n        # if we are not in a loop and n is 0, we start with n = 255\n        # if we are not in a loop and n is 255, we start with n = 0\n\n        if counter > 5000000:\n            return code\n\n        command = stdin[counter]\n        counter += 1\n\n        if command == '>':\n            a += 1\n            if a > 255:\n                a = 255\n        elif command == '<':\n            a -= 1\n            if a < 0:\n                a = 0\n\n        elif command == '+':\n            b += 1\n            if b > 255:\n                b = 255\n        elif command == '-':\n            b -= 1\n            if b < 0:\n                b = 0\n\n        # we are in a loop, we start with n = 0\n        elif command == '[':\n            if a > 0:\n                counter += 1\n        elif command == ']':\n            if a == 0:\n                counter += 1\n\n        elif command == ',':\n            code += str(a)\n        elif command == '.':\n            code += str(b)\n\n        elif command == ',':\n            code += '>'\n        elif command == '.':\n            code += '<'\n\n        elif command == ',':\n            code += '+'\n        elif command == '.':\n            code += '-'\n\n        elif command == ',':\n            code += '<'\n        elif command == '.':\n            code += '['\n        else:\n            break\n\n    return code\n\nstdin = \"2+3\"\nsolution(stdin)\nstdin = \"9-7\"\nsolution(stdin)\nstdin = \"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n\n    if stdin == '':\n        return ''\n    stdin = stdin.replace('++', '>').replace('--', '<')\n    stdin = stdin.replace('+++', '<').replace('---', '>')\n\n    stack = []\n    l = len(stdin)\n\n    for i in range(l):\n        if stdin[i] == '>':\n            stack.append('+')\n        elif stdin[i] == '<':\n            stack.append('-')\n        elif stdin[i] == '+':\n            stack.append('>')\n        elif stdin[i] == '-':\n            stack.append('<')\n        else:\n            if len(stack) == 0:\n                stack.append(stdin[i])\n            else:\n                top = stack.pop()\n                if top == '+':\n                    stack.append('>')\n                else:\n                    stack.append('<')\n\n    if len(stack) == 0:\n        return ''.join(stack)\n    else:\n        return ''.join(stack) + ''.join(stdin[l:])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        try:\n            # read and split line\n            line = stdin.strip().split()\n            if len(line) == 3:\n                k = int(line[1])\n            else:\n                k = int(line[0])\n            print(digitAtPos(line, k))\n        except:\n            return \"\"\n    return \"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def add_digit(lst, digit):\n        lst.append(digit)\n        if len(lst) == 9:\n            return lst\n        while len(lst) < 9:\n            lst.append(0)\n        return lst\n\n    q = int(stdin.strip())\n    result = []\n    for i in range(q):\n        n = int(stdin.strip())\n        digits = []\n        for _ in range(n):\n            digits = add_digit(digits, int(stdin.strip()))\n        result.append(digits)\n    for i in range(q):\n        start = result[i][0]\n        end = result[i][-1]\n        print(end, start)\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    sequence = list(map(int, sequence))\n    for q in range(n):\n        k = int(input())\n        print(sequence[k-1])\n\nsolution(input())\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    return '\\n'.join(str(1 + (int(x) + 1) % 10) for x in queries)\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[1]\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here\n    \"\"\"\n    line_1 = stdin[1]\n    line_2 = stdin[2]\n    line_3 = stdin[3]\n    line_4 = stdin[4]\n\n    max_digit = int(max(line_1, line_2, line_3, line_4))\n    pos_4 = 0\n    result = \"\"\n    for line in range(max_digit):\n        if line == int(line_1):\n            result += \"1\"\n        elif line == int(line_2):\n            result += \"2\"\n        elif line == int(line_3):\n            result += \"3\"\n        elif line == int(line_4):\n            result += \"4\"\n        else:\n            result += str(line)\n        pos_4 += 1\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    return(l[-1][int(l[-1]) - 1])\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    queries = []\n    for line in stdin:\n        if line:\n            queries.append(int(line))\n    for q in queries:\n        x = 0\n        y = q\n        x = q - 1\n        y = (q ** 2 - q) // 2\n        z = q + 1\n        z = (q ** 2 + q) // 2\n        z = q + (q ** 2)\n        z = q + (q ** 2) + 1\n        z = q + (q ** 2) - 1\n        z = q + (q ** 2) - 2\n        z = q + (q ** 2) - 3\n        z = q + (q ** 2) - 4\n        z = q + (q ** 2) - 5\n        z = q + (q ** 2) - 6\n        z = q + (q ** 2) - 7\n        z = q + (q ** 2) - 8\n        z = q + (q ** 2) - 9\n        z = q + (q ** 2) - 10\n        z = q + (q ** 2) - 11\n        z = q + (q ** 2) - 12\n        z = q + (q ** 2) - 13\n        z = q + (q ** 2) - 14\n        z = q + (q ** 2) - 15\n        z = q + (q ** 2) - 16\n        z = q + (q ** 2) - 17\n        z = q + (q ** 2) - 18\n        z = q + (q ** 2) - 19\n        z = q + (q ** 2) - 20\n        print(x, y, z)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  q = int(stdin)\n  answers = [''] * q\n  for i in range(q):\n    k = int(stdin.split()[i])\n    if k == 1:\n      answers[i] = '1'\n    elif k == 2:\n      answers[i] = '2'\n    elif k == 3:\n      answers[i] = '3'\n    elif k == 4:\n      answers[i] = '4'\n    elif k == 5:\n      answers[i] = '5'\n    elif k == 6:\n      answers[i] = '6'\n    elif k == 7:\n      answers[i] = '7'\n    elif k == 8:\n      answers[i] = '8'\n    elif k == 9:\n      answers[i] = '9'\n    elif k == 0:\n      answers[i] = '0'\n  return '\\n'.join(answers)\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        k = int(stdin.split()[i])\n        print(get_digit(k))\n    return ''\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin.pop())\n    count = 0\n    for i in range(1, N + 1):\n        str_i = str(i)\n        if len(str_i) == 1:\n            str_i = \"0\" + str_i\n        if \"7\" in str_i and \"5\" in str_i and \"3\" in str_i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '4'\n    >>> solution('1')\n    '1'\n    >>> solution('12345')\n    '3'\n    >>> solution('1234567890')\n    '5'\n    >>> solution('12345678901234567890')\n    '6'\n    \"\"\"\n    n = int(stdin)\n    return str(sum(is_shichi_go_san(i) for i in range(1, n + 1)))\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_seven_five_three(num: int) -> bool:\n        return (\n            (num // 100) % 10 == 7\n            and\n            (num // 10) % 10 == 5\n            and\n            (num // 1) % 10 == 3\n        )\n\n    return str(len([i for i in range(1, int(stdin) + 1) if is_seven_five_three(i)]))\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using set, sets and dictionaries.\n    \"\"\"\n    nums_set = set(range(1, int(stdin) + 1))\n    counter = 0\n    for i in range(1, int(stdin) + 1):\n        if (\n            (7 in str(i))\n            and (5 in str(i))\n            and (3 in str(i))\n            and (i not in nums_set)\n        ):\n            counter += 1\n            nums_set.add(i)\n    return str(counter)\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    shichi_go_san_count = 0\n    for i in range(1, int(stdin) + 1):\n        if len(set(list(str(i)))) == 7:\n            shichi_go_san_count += 1\n    return str(shichi_go_san_count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    n = 7\n    while True:\n        if len(str(n)) == 3:\n            break\n        n += 1\n\n    n = str(n)\n    count = 0\n    for i in range(N):\n        while True:\n            if len(str(n)) == 3:\n                break\n            n = int(n) + 1\n        if n % 7 == 7 or n % 5 == 7 or n % 3 == 7:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n+1):\n        b = str(i)\n        count = 0\n        for j in b:\n            if j == \"7\" or j == \"5\" or j == \"3\":\n                count += 1\n        if count == 1:\n            s += 1\n    return str(s)"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    int_str = stdin\n    int_str = int_str.split(' ')\n    max_n = int(int_str[0])\n    count = 0\n    for i in range(1, max_n + 1):\n        if len(str(i)) == 1:\n            count += 1\n        else:\n            d7 = False\n            d5 = False\n            d3 = False\n            for j in range(len(str(i))):\n                if str(i)[j] == '7':\n                    d7 = True\n                if str(i)[j] == '5':\n                    d5 = True\n                if str(i)[j] == '3':\n                    d3 = True\n            if not d7:\n                count += 1\n            if not d5:\n                count += 1\n            if not d3:\n                count += 1\n    return count\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f'{stdin}'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def digit(n: int) -> int:\n        res = 1\n        while n > 0:\n            res *= 10\n            n -= 1\n        return res\n\n    s = set()\n    for i in range(1, int(stdin) + 1):\n        string = str(i)\n        count_seven = 0\n        count_five = 0\n        count_three = 0\n        for digit in string:\n            if digit == '7':\n                count_seven += 1\n            elif digit == '5':\n                count_five += 1\n            elif digit == '3':\n                count_three += 1\n        if count_seven > 1 or count_five > 1 or count_three > 1:\n            continue\n        if count_seven == 0:\n            count_seven = 1\n        if count_five == 0:\n            count_five = 1\n        if count_three == 0:\n            count_three = 1\n        num = int(string)\n        if num >= 7:\n            continue\n        if num >= 5:\n            count_seven += 1\n        if num >= 3:\n            count_five += 1\n        if num >= 1:\n            count_three += 1\n        if count_seven + count_five + count_three >= 3:\n            s.add(num)\n    return str(len(s))\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    data = stdin.split()\n    n = int(data[0])\n    S = data[1]\n    count = 0\n    for i in range(n):\n        if S[i]!= '1' and S[i]!= '0':\n            return \"Invalid\"\n        if S[i] == '1':\n            S = S[:i] + '0' + S[i + 1:]\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    result = 0\n    while True:\n        result += 1\n        if s == '1':\n            break\n        s = str(int(s) + 1)\n    return result\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return: int\n    '''\n    # Your code here\n    stdin = stdin.split()\n    S = stdin[0]\n    # Find number of tiles to be painted\n    number_of_tiles = 0\n    for i in range(len(S)):\n        if S[i]!= '0':\n            number_of_tiles += 1\n    # The number of tiles to be repainted is either 0 or 1, but not both.\n    number_of_tiles = min(number_of_tiles, 1)\n    return str(number_of_tiles)\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    tiles = {0: [], 1: []}\n    for i in range(n):\n        if s[i] == '0':\n            tiles[0].append(i)\n        elif s[i] == '1':\n            tiles[1].append(i)\n    for i in range(len(tiles[0])):\n        x = tiles[0][i]\n        y = tiles[1][i]\n        if x + 1 == y and x - 1 == y:\n            return str(x - 1) +'' + str(y + 1)\n    return '-1'\n\nsolution(input())\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def adjacent_pixels(i, j):\n        # finding the neighbours of a given pixel\n        neighbours = [(i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)]\n        # removing the given pixel from the list\n        neighbours.remove((i, j))\n        # checking whether the pixel in the neighbouring pixels satisfies the condition\n        return not (stdin[i][j] == stdin[neighbours[0][0]][neighbours[0][1]] == stdin[neighbours[1][0]][neighbours[1][1]] == stdin[neighbours[2][0]][neighbours[2][1]] == stdin[neighbours[3][0]][neighbours[3][1]])\n    # finding the number of tiles that need to be repainted\n    return sum(map(adjacent_pixels, range(len(stdin)), range(len(stdin[0]))))\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    return_string = \"\"\n    for index in range(len(string)):\n        if string[index] == '1':\n            return_string += \"1\"\n        else:\n            return_string += \"0\"\n    return return_string"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = len(stdin)\n    ans = 0\n    # 1st pass\n    for i in range(0, n - 1, 2):\n        if stdin[i]!= stdin[i + 1]:\n            ans += 1\n    # 2nd pass\n    for i in range(n - 2, 0, -2):\n        if stdin[i]!= stdin[i + 1]:\n            ans += 1\n    return str(ans)\n\n\nsolution(\"0011000\")\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def paint(color: str):\n        return '1' if color == '0' else '0'\n    tiles_string = stdin\n    tiles = [paint(color) for color in tiles_string]\n    black_count = 0\n    i = 0\n    while i < len(tiles)-1:\n        if tiles[i]!= tiles[i+1]:\n            black_count += 1\n            tiles[i+1] = tiles[i]\n            i += 1\n        else:\n            i += 2\n    return str(black_count)\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('000')\n    1\n    >>> solution('111')\n    2\n    >>> solution('100')\n    2\n    >>> solution
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns:\n        int: number of tiles to be repainted\n    \"\"\"\n    s = stdin\n    n = len(s)\n    f = False\n    res = 0\n    for i in range(n):\n        if s[i] == '0':\n            f = True\n        if not f:\n            res += 1\n    return res\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    ans = \"APPROVED\"\n\n    for i in nums:\n        if i % 2 == 0 and i % 3 == 0 or i % 2 == 0 and i % 5 == 0 or i % 3 == 0 and i % 5 == 0:\n            ans = \"APPROVED\"\n        else:\n            ans = \"DENIED\"\n            break\n\n    return ans\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a = int(stdin)\n        if a % 2 == 0:\n            if a % 3 == 0 or a % 5 == 0:\n                return \"APPROVED\"\n            else:\n                return \"DENIED\"\n        else:\n            return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data: List[int] = list(map(int, stdin.split()))\n    sum: int = 0\n    isDivBy3: bool = False\n    isDivBy5: bool = False\n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            sum += data[i]\n            if data[i] % 3 == 0:\n                isDivBy3 = True\n            elif data[i] % 5 == 0:\n                isDivBy5 = True\n    if isDivBy3:\n        if isDivBy5:\n            return 'APPROVED'\n        else:\n            return 'DENIED'\n    else:\n        if isDivBy5:\n            return 'APPROVED'\n        else:\n            return 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    even_count = 0\n    for i in range(N):\n        if arr[i] % 2 == 0:\n            even_count += 1\n    if even_count % 2 == 0:\n        print('APPROVED')\n    else:\n        print('DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    results = set()\n    for i in range(N):\n        if i % 2 == 0 and i % 3 == 0:\n            results.add(i)\n    if results:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    if all(x % 3 == 0 or x % 5 == 0 for x in A):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if a[i] % 3 == 0 or a[i] % 5 == 0:\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    allowed = False\n    for n in nums:\n        if n % 2 == 0:\n            if n % 3 == 0 or n % 5 == 0:\n                allowed = True\n                break\n    return \"APPROVED\" if allowed else \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        A_i = int(stdin)\n        if A_i % 2 == 0 and (A_i % 3 == 0 or A_i % 5 == 0):\n            return \"APPROVED\"\n    return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    for _ in range(n):\n        stdin = stdin.strip().split(' ')\n        if int(stdin[1]) % 3 == 0 or int(stdin[1]) % 5 == 0:\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")\n    return stdin\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.strip().count('R') % 2 == 0 or stdin.strip().count('L') % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_playable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.strip().startswith(\"R\") and stdin.strip().count(\"R\") % 2!= 0 \\\n           and stdin.strip().startswith(\"U\") and stdin.strip().count(\"U\") % 2!= 0 \\\n           and stdin.strip().startswith(\"L\") and stdin.strip().count(\"L\") % 2!= 0 \\\n           and stdin.strip().startswith(\"D\") and stdin.strip().count(\"D\") % 2!= 0 else \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_playable(stdin) else \"No\"\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    odd = 0\n    even = 0\n    for i in stdin:\n        if i == 'R':\n            odd += 1\n        elif i == 'U':\n            odd += 1\n        elif i == 'D':\n            odd += 1\n        else:\n            even += 1\n    if odd % 2 == 0:\n        if even % 2 == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if even % 2 == 0:\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) == 0:\n        return 'No'\n    if len(S) == 1:\n        return 'Yes'\n    if len(S) == 2:\n        if S[0] == 'R' and S[1] == 'D':\n            return 'Yes'\n        elif S[0] == 'U' and S[1] == 'R':\n            return 'Yes'\n        else:\n            return 'No'\n    for i in range(1, len(S)-1):\n        if S[i] == 'R' and S[i+1] == 'D' and S[i+2] == 'R':\n            return 'Yes'\n        elif S[i] == 'U' and S[i+1] == 'R' and S[i+2] == 'U':\n            return 'Yes'\n        elif S[i] == 'L' and S[i+1] == 'D' and S[i+2] == 'L':\n            return 'Yes'\n        elif S[i] == 'L' and S[i+1] == 'U' and S[i+2] == 'L':\n            return 'Yes'\n        else:\n            return 'No'\nstdin = \"RUDLUDR\"\nprint(solution(stdin))\n\nGiven an undirected graph, check whether it is possible to place two vertices so that all pairs of vertices in a tree are connected.\n\nExample:\n\nInput: [[1,2],[2,3],[3,4]]\nOutput: True\n\nConnect two nodes with a edges in the undirected graph.\n\nChallenge\nO(V+E) time and O(V) space solution\n\n'''\n\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    odd_char = {\"R\", \"D\", \"U\", \"L\"}\n    even_char = {\"R\", \"D\", \"L\", \"U\"}\n    if any(char in stdin[0] for char in odd_char):\n        return \"Yes\"\n    elif any(char in stdin[0] for char in even_char):\n        return \"No\"\n    return \"Yes\" if stdin[0] == \"R\" else \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    print(c[1::2] == c[::2])\n\n    return (True)"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    res = 'Yes'\n    for char in stdin[0]:\n        if char == 'R' or char == 'L':\n            res = 'No'\n    for i in range(1, len(stdin), 2):\n        for j in range(0, len(stdin[i]) - 1, 2):\n            if stdin[i][j]!= stdin[i][j + 1]:\n                if stdin[i][j] == 'R' or stdin[i][j] == 'L':\n                    res = 'No'\n                if stdin[i][j] == 'U' or stdin[i][j] == 'D':\n                    res = 'Yes'\n    return res\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if ord(char)%2 == 1:\n            if char == 'R' or char == 'U' or char == 'D':\n                return 'Yes'\n        else:\n            if char == 'L' or char == 'U' or char == 'D':\n                return 'Yes'\n    return 'No'\n    \nsolution(input())\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin_to_list(stdin)\n    A = input[1]\n    B = input[2]\n    C = input[3]\n    D = input[4]\n    E = input[5]\n    print(A * (E + 1) + B * (C + 1) + C * (D + 1) + D * (A + 1))\n    return \"0\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 7 * n\n    for i in range(n - 1):\n        result += 1\n    return str(result)\n\"\"\"\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input:\n    - N\n    - A\n    - B\n    - C\n    - D\n    - E\n    \n    output:\n    - min time to travel to get to City 6\n    \n    '''\n    pass\n\nstdin = \"\"\nprint(solution(stdin))"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    return str(min(7, N + min(A, 2*B, 3*C, 4*D, 5*E)))\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    return min(7, max(min(C, D) - max(C, D), max(E, A) - min(E, A), max(D, E) - max(C, D), max(E, A) - min(E, A)))\n'''\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    def time(num):\n        return num * 60\n    result
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    return str(min(a*60+b, b*60+c, c*60+d, d*60+e, e*60+a))\n\"\"\"\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    c = int(stdin.split()[3])\n    d = int(stdin.split()[4])\n    e = int(stdin.split()[5])\n    \n    if n == 1:\n        if a == 1 and b == 1:\n            return \"0\"\n        return \"1\"\n    \n    time = 7 * (a+b+c)\n    if a + b <= e:\n        time += (n-3)*(a+b)\n    else:\n        time += (n-3)*(e)\n    if b + c <= d:\n        time += (n-3)*(b+c)\n    else:\n        time += (n-3)*(d)\n    if c + d <= e:\n        time += (n-3)*(c+d)\n    else:\n        time += (n-3)*(e)\n    return str(time//60)\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = list(map(int, stdin.split()))\n    return min(7 * n + 1, min(7 * n + 1 + (n - 1) // 2, n * a + n * b + n * c + n * d + n * e) + 1)"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(i == 0 for i in range(1, N+1)))\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N == 9:\n        return \"9\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    N = int(inputs[0])\n    A = []\n    if 0 in A:\n        return \"2\"\n    A.append(0)\n    A.append(9)\n    for i in range(1, N):\n        if A[i-1] == 0:\n            A.append(0)\n        else:\n            A.append(9)\n    if A[-1] == 0:\n        return str(sum(A[:-1]))\n    return str(sum(A))\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if all((0 <= int(i) <= 9 for i in range(1, N+1))):\n            if any((i == 0 for i in range(1, N+1))):\n                count += 1\n            if any((i == 9 for i in range(1, N+1))):\n                count += 1\n    return count % (10**9 + 7)\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set([int(i) for i in stdin.split()])))"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    one = 0\n    nine = 9\n    return f'{two_sequences(n, one, nine)}'\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    counter = 0\n    for i in range(N+1):\n        if i==0:\n            counter += 1\n        elif i==9:\n            counter += 1\n        elif 0 in str(i) and 9 in str(i):\n            counter += 1\n    return counter%(10**9 + 7)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples\n    >>> solution(\"1\")\n    2\n    >>> solution(\"2\")\n    2\n    >>> solution(\"3\")\n    4\n    >>> solution(\"4\")\n    2\n    >>> solution(\"5\")\n    4\n    >>> solution(\"6\")\n    4\n    >>> solution(\"7\")\n    3\n    >>> solution(\"8\")\n    4\n    >>> solution(\"9\")\n    2\n    \"\"\"\n    N = int(stdin)\n    if N == 1:\n        return 2\n    seq = []\n    for _ in range(N):\n        num = int(stdin)\n        if num == 0:\n            if len(seq) == 0:\n                seq.append(num)\n            else:\n                seq.pop()\n        else:\n            if len(seq) == 0:\n                seq.append(num)\n            else:\n                seq.pop(0)\n    return len(seq)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    s1 = 0\n    for i in range(1, n + 1):\n        s += i\n        if i % 2 == 0:\n            s1 += i\n    return s - s1 % 10\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    for _ in range(int(stdin[0])):\n        number = int(stdin.pop(0))\n        if isPrime(number):\n            print(number)\n    return ''\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    while True:\n        if is_prime(num) and num > 2:\n            return str(num)\n        num += 1\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    prime = 1\n    while True:\n        if x < prime:\n            return str(prime)\n        elif x % prime == 0:\n            prime += 1\n        else:\n            prime += 2"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(n)\n    x = int(2)\n    while x < n:\n        if n % x!= 0:\n            x += 1\n        else:\n            return str(x)\n\nsolution(input())\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    for num in range(stdin, 10 ** 5 + 1):\n        if all(num % i!= 0 for i in range(2, num)):\n            return str(num)"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    return min(list(map(isprime, range(int(input)))))\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    answer = max(1, 2, 3, 5, 7, 11, 13, 17, 19)\n    while answer < X:\n        answer += 2\n        if answer % 2 == 0:\n            answer += 2\n        if answer % 3 == 0:\n            answer += 2\n        if answer % 5 == 0:\n            answer += 2\n        if answer % 7 == 0:\n            answer += 2\n        if answer % 11 == 0:\n            answer += 2\n        if answer % 13 == 0:\n            answer += 2\n        if answer % 17 == 0:\n            answer += 2\n        if answer % 19 == 0:\n            answer += 2\n        if answer == X:\n            break\n    return str(answer)\n\nprint(solution(input()))\n\n-----Task-----\nWrite a program to calculate the sum of the first N positive integers.\n\n------Details-----\nThe program should only accept a single line of input which contains an integer N.\n\n-----Input-----\nThe first line of input contains an integer N.\n\n-----Output-----\nPrint the sum of the first N positive integers.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n15\n\nThe sum of the first 5 positive integers is 15.\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    if not input_str.isdigit():\n        raise ValueError(\"Please enter a positive integer\")\n\n    x = int(input_str)\n    if x < 2:\n        raise ValueError(\"Please enter a positive integer greater than 1\")\n\n    prime = 2\n    while prime <= x:\n        if x % prime!= 0:\n            prime += 1\n            continue\n\n        x = x // prime\n        print(prime)\n\n    return"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_max_prime(int(stdin)))\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = stdin.split()[1]\n    seq = list(map(int, seq))\n    changed = 0\n    counts = []\n    for i in range(0, n-2):\n        if seq[i] == seq[i+2]:\n            changed += 1\n        counts.append(changed)\n    counts.sort()\n    return str(counts[0])\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    if n % 2 == 1:\n        return '-'\n    i = 2\n    while i < n:\n        # print(sequence[i], sequence[i - 1])\n        if sequence[i]!= sequence[i - 1]:\n            return str(i - 1)\n        i += 2\n    return '-'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = stdin.split()[1:]\n\n    v = list(map(int, v))\n    counter = 0\n    #print(v)\n    for i in range(n):\n        if i!= 0:\n            if v[i] == v[i-1]:\n                counter += 1\n        else:\n            if v[i]!= v[i+1]:\n                counter += 1\n    \n    return counter\n\nsolution(\"4\\n3 1 3 2\")\n\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    v.sort()\n    ans = 0\n    i = 0\n    while i < n - 1:\n        if v[i] == v[i + 1]:\n            i += 2\n        else:\n            ans += 1\n            i += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    list = stdin.split(' ')\n    lenList = len(list)\n    list = list[:lenList-1]\n    list.append(list[-1])\n    list = list[:lenList-1]\n    newList = []\n    for i in list:\n        newList.append(int(i))\n    newList.sort()\n    count = 1\n    for i in range(len(newList) - 1):\n        if newList[i] == newList[i+1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = stdin.split()\n    v = list(map(int,v))\n    #if(len(v)==2):\n    #    if(v[0]==v[1]):\n    #        print(2)\n    #        return\n    #    else:\n    #        print(1)\n    #        return\n    for i in range(0,len(v)-2):\n        if v[i]==v[i+2]:\n            print(2)\n            return\n    print(1)\n    return"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    seq = stdin[1:]\n    seen = set()\n    count = 0\n    for i in range(1, n-1):\n        if seq[i-1] == seq[i+1]:\n            continue\n        for j in range(i+1, n-1):\n            if seq[i-1] == seq[j+1]:\n                count += 1\n                break\n        seen.add(seq[i])\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity : O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    sequence = stdin.split()\n    sequence.sort(key=int)\n    sequence = sequence[:n]\n\n    count = 0\n    last = None\n    for i, v in enumerate(sequence):\n        if i == 0:\n            last = v\n        else:\n            if v == last:\n                count += 1\n                last = v\n    if count > 1:\n        return str(count - 1)\n    return \"0\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    seq = input[1]\n    seq = list(map(int, seq.split()))\n    n = len(seq)\n    if n % 2!= 0:\n        return '-1'\n    n //= 2\n    if seq[0]!= seq[n]:\n        seq[0] = seq[n]\n    if seq[-1]!= seq[-n]:\n        seq[-1] = seq[-n]\n    for i in range(1, n, 2):\n        seq[i] = seq[i+1]\n    return str(len(seq)//2)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    values = list(map(int, stdin.split()))\n    index = values[0]\n    if index > 1:\n        value = values[index - 2]\n        value2 = values[index - 1]\n        if value!= value2:\n            values.append(value)\n            values.append(value2)\n            return''.join(map(str, values))\n    return''.join(map(str, values))\n\nsolution(\"4 3 1 3 2\")\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split(\" \")\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n, a, b, c = inputs[0].split()\n    n, a, b, c = int(n), int(a), int(b), int(c)\n\n    # Step 1: Create a list of length n with elements l_i\n    # E.g. l_0 = 98, l_1 = 40, l_2 = 30\n    l_list = []\n    for i in range(1, n + 1):\n        l_list.append(inputs[i])\n    l_list.sort()\n\n    # Step 2: Filter list based on magic requirements and store in l_g\n    # E.g. l_g = [[98, 40, 30], [98, 40, 90]]\n    # Filter out elements that meet the requirement of having at least 2 elements and are not longer than c\n    l_g = []\n    for i in range(0, len(l_list)):\n        if l_list[i][0] < c and int(l_list[i][1]) >= 2:\n            l_g.append(l_list[i])\n    l_g.sort(key=lambda x: x[1], reverse=True)\n\n    # Step 3: Use the first bamboos and perform the appropriate magic\n    # E.g. l_g = [[98, 40, 30], [98, 40, 90]]\n    # l_g[0][0] = 98\n    # l_g[0][1] = 40\n    # l_g[0][2] = 30\n    # l_g[1][0] = 98\n    # l_g[1][1] = 40\n    # l_g[1][2] = 90\n    l_g[0][1] += 1\n    for i in range(1, len(l_g)):\n        if l_g[i][1] >= int(l_g[i - 1][1]) + 1 and l_g[i][0] < c:\n            l_g[i][1] += 1\n        if l_g[i][1] >= int(l_g[i - 1][1]) + 1 and l_g[i][0] > c:\n            l_g[i - 1][1] = int(l_g[i - 1][1]) + 1\n    l_g.sort(key=lambda x: x[2])\n    l_g.sort(key=lambda x: x[0])\n\n    # Step 4: Calculate the sum of all lengths in l_g\n    # E.g. sum = 30 + 20 + 90\n    sum = 0\n    for i in range(0, len(l_g)):\n        sum += int(l_g[i][2])\n    print(sum)\n    return sum\n\nprint(solution(input()))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a, b, *c = map(int, stdin.split())\n    c = sorted(c)\n    d = []\n    for i in range(n - 1, -1, -1):\n        d.append(c[i] + 1)\n        if d[i] > d[i + 1]:\n            break\n    else:\n        return '{:d}'.format(10 ** 10)\n\n    e = []\n    for i in range(n):\n        e.append(10 ** 10)\n        if e[i] < d[i]:\n            e[i] = d[i]\n\n    f = []\n    for i in range(n - 1, -1, -1):\n        f.append(min(e[i], a + (d[i] - 1) // 2))\n        if f[i] == e[i]:\n            e[i] = c[i] + 1\n\n    g = []\n    for i in range(n):\n        g.append(f[i] + 1)\n        if g[i] > d[i]:\n            break\n\n    h = []\n    for i in range(n - 1, -1, -1):\n        h.append(c[i] + 1)\n        if h[i] > d[i]:\n            break\n\n    ans = 0\n    for i in range(n):\n        ans += min(f[i], h[i]) * 10\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] > d[i]:\n            break\n\n    for i in range(n - 1, -1, -1):\n        ans += 10 ** 10\n        if g[i] >"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    if N > 3:\n        print(max(N - 3, 0))\n        return\n    l = []\n    cost = 0\n    for i in range(N):\n        l.append(int(input()))\n    if N == 1:\n        if l[0] >= A:\n            return str(min(C, A))\n        else:\n            return str(min(C, (A - l[0]) + B))\n    elif N == 2:\n        if l[0] + l[1] >= A:\n            return str(min(C, A - 2 * l[0]))\n        else:\n            return str(min(C, (A - l[0]) + (l[1] - l[0]) + l[0] + l[1] + 1))\n    elif N == 3:\n        if A + l[0] >= C:\n            return str(min(C, A - l[0]))\n        elif l[1] + l[2] >= C:\n            return str(min(C, (A - l[0]) + (l[1] - l[0]) + l[0] + l[1] + l[2] - A))\n        elif l[0] + l[2] >= C:\n            return str(min(C, (A - l[0]) + (l[1] - l[0]) + l[0] + l[1] + l[2] - A))\n        else:\n            return str(min(C, (A - l[0]) + (l[1] - l[0]) + l[0] + l[1] + l[2] - A))\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_bamboos, a, b, c = map(int, stdin.split())\n    a_cost, b_cost, c_cost = [], [], []\n    a_cost.append(a)\n    b_cost.append(b)\n    c_cost.append(c)\n\n    for i in range(num_bamboos - 1):\n        a_cost.append(a_cost[-1] + 1)\n        b_cost.append(b_cost[-1] + 1)\n        c_cost.append(c_cost[-1] + 1)\n\n    b_min, a_min = float('inf'), float('inf')\n    for i in range(1, num_bamboos):\n        b_min = min(b_min, a_cost[i - 1] + b_cost[i - 1])\n        a_min = min(a_min, b_cost[i - 1] + c_cost[i - 1])\n\n    return str(min(a_min + b_min + c_cost[-1], a_min + c_cost[-1] + b_cost[-1]))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bamboos, magic = stdin.split('\\n')\n    bamboos = [int(x) for x in bamboos.split()]\n    magic = [int(x) for x in magic.split()]\n\n    cost = 0\n    for magic_idx in range(0, len(magic), 3):\n        if magic[magic_idx] == 1:\n            bamboos[magic_idx] += 1\n        elif magic[magic_idx] == 2:\n            bamboos[magic_idx] -= 1\n        elif magic[magic_idx] == 3:\n            bamboos[magic_idx - 1] += bamboos[magic_idx]\n            bamboos[magic_idx - 1] -= bamboos[magic_idx]\n            bamboos[magic_idx] = 0\n        cost += bamboos[magic_idx] * magic[magic_idx + 2]\n    return str(cost)\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    l = [int(x) for x in stdin.split()]\n    cost = 0\n    magic = [0] * 3\n    bamboos = []\n    for i in range(n):\n        bamboos.append([0] * (i + 1))\n\n    # extend\n    for i in range(n):\n        bamboos[i][i] = l[i]\n        magic[0] += 1\n        cost += 1\n\n    # shorten\n    for i in range(n - 2, -1, -1):\n        bamboos[i][i + 1] = l[i]\n        magic[1] += 1\n        cost += 1\n\n    # combine\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            bamboos[i][j] = min(bamboos[i][j], bamboos[i][j - 1] + l[j])\n            magic[2] += 1\n            cost += 1\n    # print(cost, magic)\n    print(cost, magic)\n\n\nsolution(\"1 5 1 1\")\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    # strip space, get N, A, B, C\n    (n, a, b, c) = stdin.split()\n    n, a, b, c = int(n), int(a), int(b), int(c)\n\n    # get l_i\n    l_i = list(map(int, stdin.split()))\n    # make l_i into a numpy array\n    l_i = numpy.array(l_i)\n\n    # calculate the total cost of three bamboos\n    cost = numpy.array([a, b, c]) * numpy.array(l_i)\n    total_cost = math.ceil(numpy.sum(cost))\n\n    # solve the two-sum problem\n    numpy.subtract(numpy.sum(cost), total_cost)\n\n    # return result\n    return str(int(numpy.sum(cost)))\n\nsolution('3 100 90 80')\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = stdin.split()\n    N, A, B, C = int(N), int(A), int(B), int(C)\n    tot_cost = (A * (A + 1)) / 2 + (B * (B + 1)) / 2 + (C * (C + 1)) / 2\n    ext_cost = (A * 2) + (B * 1)\n    short_cost = (A * 2) + (B * 2)\n    com_cost = (A * (C - 1)) + (B * (C - 2))\n    cost = max(0, tot_cost - ext_cost - short_cost - com_cost)\n    return str(cost)\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # REPL\n    print(stdin)\n    # Your code here\n    N, A, B, C = map(int, stdin.split())\n    l_1 = min(A, B, C)\n    l_2 = max(A, B, C) - min(A, B, C)\n    l_3 = max(A, B, C) - min(A, B, C) - min(A, B, C) + min(A, B, C) - min(A, B, C)\n    l_4 = max(A, B, C) - min(A, B, C) - min(A, B, C) - min(A, B, C) + min(A, B, C) - min(A, B, C)\n    l_5 = max(A, B, C) - min(A, B, C) - min(A, B, C) - min(A, B, C) + min(A, B, C) - min(A, B, C)\n    return max(l_1, l_2, l_3, l_4, l_5)\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper()"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    S = \"\".join(sorted(S))\n    return S\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    return \"\".join(sorted(s))\n\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"6\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"6\")\nsolution(\"7\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"5\")\nsolution(\"5\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"5\")\nsolution(\"5\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"10\")\nsolution(\"7\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"5\")\nsolution(\"7\")\nsolution(\"9\")\nsolution(\"6\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"1\")\nsolution(\"8\")\nsolution(\"4\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    n = int(stdin)\n    string = list(stdin)\n    for i in range(len(string)):\n        string[i] = chr(ord(string[i]) + n)\n    for i in range(len(string)):\n        result += string[i]\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    n = l[0]\n    s = l[1]\n    n = int(n)\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    final = \"\"\n    for i in range(len(s)):\n        final += alphabet[(alphabet.index(s[i]) + n) % 26]\n    return final"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] > stdin[1]:\n        return stdin[2].lower() + solution(stdin[3:])\n    else:\n        return stdin[1].lower() + solution(stdin[2:])\n\nsolution(input())\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    shift_by = int(input_lines[0])\n    string = input_lines[1]\n    result = ''\n    for i in range(len(string)):\n        # https://stackoverflow.com/questions/1135173/find-the-nearest-element-in-a-list-that-is-greater-than-the-given-element\n        char = string[i]\n        result += min(string[i + shift_by], string[i])\n    return result"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prime_numbers = list(range(2, n+1))\n    while True:\n        if all(map(lambda x: x % 2, prime_numbers)):\n            break\n        elif all(map(lambda x: x % 3, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 3\n        elif all(map(lambda x: x % 5, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 5\n        elif all(map(lambda x: x % 7, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 7\n        elif all(map(lambda x: x % 11, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 11\n        elif all(map(lambda x: x % 13, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 13\n        elif all(map(lambda x: x % 17, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 17\n        elif all(map(lambda x: x % 19, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 19\n        elif all(map(lambda x: x % 23, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 23\n        elif all(map(lambda x: x % 29, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 29\n        elif all(map(lambda x: x % 31, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 31\n        elif all(map(lambda x: x % 37, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 37\n        elif all(map(lambda x: x % 41, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 41\n        elif all(map(lambda x: x % 43, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 43\n        elif all(map(lambda x: x % 47, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 47\n        elif all(map(lambda x: x % 53, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 53\n        elif all(map(lambda x: x % 59, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 59\n        elif all(map(lambda x: x % 61, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 61\n        elif all(map(lambda x: x % 67, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 67\n        elif all(map(lambda x: x % 71, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 71\n        elif all(map(lambda x: x % 73, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 73\n        elif all(map(lambda x: x % 79, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 79\n        elif all(map(lambda x: x % 83, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 83\n        elif all(map(lambda x: x % 89, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 89\n        elif all(map(lambda x: x % 97, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 97\n        elif all(map(lambda x: x % 101, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 101\n        elif all(map(lambda x: x % 103, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 103\n        elif all(map(lambda x: x % 107, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 107\n        elif all(map(lambda x: x % 109, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 109\n        elif all(map(lambda x: x % 113, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 113\n        elif all(map(lambda x: x % 127, prime_numbers)):\n            prime_numbers[prime_numbers.index(max(prime_numbers))] = 127\n        elif all(map(lambda x: x % 131, prime_numbers)):\n            prime_numbers[prime_numbers"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = list(map(int, stdin.strip().split()))\n    a = list(range(2, 2 * 10 ** 5 + 1))\n    s = sorted(a)\n    for i in range(n):\n        a.remove(b[i])\n        a.insert(i, s.pop())\n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))[0]\n    b = list(map(int, stdin.split()))[1]\n\n    a = list(range(1, a + 1))\n    b = list(range(1, b + 1))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n    ans = ''\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] <= b[j] and b[j] % a[i] == 0:\n                ans += str(a[i]) +''\n                break\n        else:\n            ans += str(b[0]) +''\n            b = b[1:]\n    return ans\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    a = list(map(int, a))\n    b = list(map(int, b))\n    c = list()\n    d = list()\n    for i in range(len(b)):\n        if b[i] == 2:\n            c.append(b[i])\n            d.append(b[i])\n            continue\n        while not is_prime(b[i]):\n            if b[i] in c:\n                c.remove(b[i])\n                d.append(b[i])\n                break\n            else:\n                c.append(b[i])\n                d.append(b[i])\n                b.remove(b[i])\n                break\n    c = sorted(c)\n    d = sorted(d)\n    ans = list(map(str, c))\n    for i in range(len(d)):\n        if i == len(ans) - 1:\n            ans.append(str(d[i]))\n        else:\n            ans.append(str(d[i]) +'')\n    print(' '.join(ans))\n    return\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    if len(a)!= len(set(a)):\n        return 'Infinite'\n    for n in range(len(a)):\n        if a[n] == 2 or a[n] == 3:\n            a[n] = 'Infinite'\n    a = list(filter(lambda x: x!= 'Infinite', a))\n    b = []\n    for i in range(len(a)):\n        p = i\n        while p in a:\n            p = int(2 + 2**(p) - (p + 1) * (p + 1) / 2)\n        a[i] = p\n    b = list(map(str, a))\n    return''.join(b)\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    a = [0]*n\n    for i in range(len(b)):\n        if b[i] % 2 == 0:\n            a[i] = b[i]\n            for j in range(i, len(b), 2):\n                a[j] = max(a[j], a[j-1] * 2)\n            if i < len(b) - 1:\n                a[i+1] = max(a[i+1], a[i] * 3)\n    print(*a)\n\nsolution(input())\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1]))\n    l = [i for i in range(n) if l[i] % 2 == 0] + [i for i in range(n) if l[i] % 2!= 0]\n    l = sorted(l, key=lambda i: l.index(i) + 2)\n    return str(l)\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = sorted(a)\n    i = 0\n    j = len(b) - 1\n    c = []\n    while i <= j:\n        c.append(b[i])\n        c.append(b[j])\n        i += 1\n        j -= 1\n    return str(c)\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = []\n    for _ in range(n):\n        sequence.append(int(stdin.strip()))\n    sequence = sorted(sequence)\n    sequence = list(set(sequence))\n    sequence = sorted(sequence)\n    sequence = list(set(sequence))\n    sequence.sort()\n    for i in range(len(sequence)):\n        if sequence[i]!= i:\n            sequence[i] = sequence[i] + 1\n    for i in range(len(sequence)):\n        if i < len(sequence) - 1:\n            sequence[i + 1] = sequence[i] + 1\n    sequence.sort()\n    sequence = list(set(sequence))\n    for i in range(len(sequence)):\n        if sequence[i]!= i:\n            sequence[i] = sequence[i] + 1\n    sequence.sort()\n    return \" \".join([str(i) for i in sequence])"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    l: list[int] = list(map(int, stdin.split()))\n    prime_sequence = []\n    for i in l:\n        if isPrime(i):\n            prime_sequence.append(i)\n        else:\n            prime_sequence.append(getGreatestDivisor(i))\n    prime_sequence.sort()\n    return''.join([str(i) for i in prime_sequence])\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    n, k = map(int, stdin[0].split())\n    skills = list(map(int, stdin[1].split()))\n    print(skills)\n    if n == 1:\n        return \"1\"\n    max_skills = max(skills)\n    l = 0\n    r = n - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if skills[mid] == max_skills:\n            if k <= mid:\n                r = mid - 1\n            else:\n                l = mid + 1\n        elif skills[mid] > max_skills:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return str(min(l + 1, r + 1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    first = second = None\n    for i in range(n):\n        if a[i] > first:\n            second = first\n            first = a[i]\n        elif a[i] > second:\n            second = a[i]\n    \n    if k <= 1:\n        return ''.join(map(str, range(1, second+1)))\n    \n    first = second\n    second = 0\n    \n    for i in range(n-1, -1, -1):\n        if a[i] > first:\n            second = first\n            first = a[i]\n        elif a[i] > second:\n            second = a[i]\n    \n    if k > first:\n        return ''.join(map(str, range(1, second+1)))\n    else:\n        return ''.join(map(str, range(1, first+1)))\n\n\nsolution('''5 1\n2 4 5 3 1\n\n5 1\n2 1 3 5 4\n\n5 1\n2 4 5 3 1\n\n5 1\n2 1 3 5 4\n\n5 1\n2 4 5 3 1\n''')\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = a[1]\n    s = []\n    for i in range(k):\n        if i < k - 1:\n            s.append(i)\n        else:\n            s.append(i + 1)\n    c = {}\n    c[s[0]] = 1\n    c[s[1]] = 2\n    for i in range(2, k):\n        if s[i] not in c.keys():\n            d = sorted([abs(s[i] - x) for x in c.keys()])\n            c[s[i]] = c[d[0]]\n    if k % 2 == 1:\n        return str(c[s[0]])\n    else:\n        d = sorted([abs(s[i] - x) for x in c.keys()])\n        return str(c[d[0]]) + str(c[d[1]])"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    teams = []\n    while len(a) > 0:\n        teams.append(a.pop(a.index(max(a))))\n        a.remove(max(a))\n        if len(a) > 0:\n            teams.append(a.pop(a.index(min(a))))\n            a.remove(min(a))\n    return ''.join(map(str, teams))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a = list(map(int, stdin.split()))\n    a = sorted(list(map(int, stdin.split())), reverse=True)\n    # print(a)\n    res = \"\"\n    while n:\n        # print(a, n)\n        # print(\"a:\", a)\n        # print(\"n:\", n)\n        if a[0] == n:\n            res += '1'\n            a.pop(0)\n            n -= 1\n        else:\n            res += '2'\n            a.pop(0)\n            n -= 1\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = list(a)\n    left = 0\n    right = 0\n    while True:\n        if left == right == n:\n            break\n        if a[left] < a[right]:\n            a[left], a[right] = a[right], a[left]\n            left += 1\n            continue\n        if a[left] > a[right]:\n            a[left], a[right] = a[right], a[left]\n            right += 1\n            continue\n    return ''.join(map(str, a))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *std, = list(map(int, stdin.split()))\n    # print(n, k, std, sep='\\n')\n    a = sorted(std, reverse=True)\n    ans = \"\"\n    for i, x in enumerate(a):\n        if i == 0 or i == k-1:\n            ans += str(x)\n        else:\n            if x <= a[i-1]:\n                ans += str(1)\n            else:\n                ans += str(2)\n    return ans\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = sorted(map(int, stdin.split()), reverse=True)\n    left = [0]\n    right = [0]\n    for i, ai in enumerate(a):\n        right.append((i+1) if ai not in left else right[i])\n        left.append((i+1) if ai not in right else left[i])\n    if left[0] == right[0]:\n        return '1'*n\n    if left[-1] == right[-1]:\n        return '1'*n\n    while left[-1] > right[0]:\n        left.pop(0)\n    while right[-1] > left[-1]:\n        right.pop(-1)\n    return '1'*n + ('2' if left[0] < right[0] else '1')*(left[-1]-right[-1])\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        elif count == k:\n            count = 0\n        if count == k:\n            break\n    if count == k:\n        return ''.join(str(1 if a[i] == 1 else 2) for i in range(n))\n    else:\n        return ''.join(str(1 if a[i] == 1 else 2) for i in range(n))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    team1 = []\n    team2 = []\n    for i in range(n):\n        if i == 0:\n            team1.append(A[i])\n            team2.append(A[i])\n        else:\n            #print(team1, team2)\n            if A[i] > max(team1):\n                team1.append(A[i])\n            elif A[i] < min(team2):\n                team2.append(A[i])\n            else:\n                if len(team1) == k and len(team2) == k:\n                    break\n                elif len(team1) > k:\n                    team2.append(A[i])\n                elif len(team2) > k:\n                    team1.append(A[i])\n                else:\n                    team1.append(A[i])\n                    team2.append(A[i])\n    \n    return \"\".join(map(str, team1)) + \"\".join(map(str, team2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    # print(a)\n    a = [0] + a + [a[-1] + 1]\n    # print(a)\n    res = 0\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            # print(i)\n            res += 1\n            # print(res)\n    print(res % 998244353)\n    return res % 998244353"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            res += 2\n        elif a[i] + 1 == a[i + 1]:\n            res += 1\n    return str(res % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    b = a[:]\n    b = sorted(b)\n    count = 0\n    if a == b:\n        print(0)\n    else:\n        for i in range(1, n):\n            if a[i]!= b[i]:\n                count += 1\n            b[i] = max(a[i], a[i - 1])\n        print(count)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1: return \"0\"\n    a_a = sorted(a)\n    a_b = list(range(n))\n    a_b[0] = 0\n    a_b[1] = 0\n    if a_a[0]!= a_a[1]:\n        return str(int((a_a[1] - a_a[0]) / (a_b[1] - a_b[0]) + 1))\n    else:\n        for i in range(2, n):\n            a_b[i] = (a_b[i - 1] + a_b[i - 2]) % 998244353\n        return str(a_b[n - 1])\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count = 0\n    while True:\n        c = 0\n        for i in range(1, len(a)-1):\n            if a[i-1] > a[i] and a[i+1] > a[i]:\n                a[i-1] = a[i]\n                c += 1\n        for i in range(2, len(a)):\n            if a[i-1] == a[i]:\n                a[i-1] = a[i]\n                c += 1\n        if c == 0:\n            break\n        count += 1\n    return str(count)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = {}\n    for i in range(1, n):\n        d[i] = (a[i]!= a[i - 1])\n    t = 0\n    for i in range(1, n):\n        if d[i] == True:\n            t += i\n            if d[i - 1] == True:\n                t += 1\n    return str(t % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    k = 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            b[i] = b[i + 1]\n            continue\n        if k == 1:\n            b[i] = k\n            k += 1\n            continue\n        if k == 2:\n            b[i + 1] = k\n            k += 1\n            continue\n        k = 1\n        b[i + 1] = k\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    b = []\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            b.append(0)\n        elif a[i]!= a[i + 1]:\n            if i == 0:\n                b.append(0)\n            elif a[i]!= a[i - 1]:\n                b.append(b[i - 1] + 1)\n            else:\n                b.append(b[i - 1])\n    return str(len(set(b)))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    return str(mod(n, mod(reduce(add, a), 10**9)))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\" \")]\n    n = len(a)\n    \n    c = []\n    \n    c.append(a)\n    for i in range(1,n):\n        b = []\n        for j in range(i):\n            if a[i]!= a[j]:\n                b.append(a[j])\n        c.append(b)\n    \n    c = c[::-1]\n    \n    \n    \n    \n    \n    print(c)\n    \n    count = 0\n    \n    for i in c:\n        if len(i)!= 0:\n            break\n        count += 1\n    \n    print(count)\n    \n    \n    return count"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def delete(nums, i):\n        if i <= 0:\n            return nums\n        del nums[i]\n        return delete(nums, i - 1)\n\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(nums)):\n        if delete(nums, i) == None:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    # we can make this a list comprehension\n    # return len(a)-max(a)\n    \n    # this can also be done like\n    return len(a)-max(a)-1\n    \n    \n    # if a == sorted(a):\n    #     return 0\n    \n    # min = n\n    # # min = a[0]\n    \n    # for i in range(1, n):\n    #     if a[i] > min:\n    #         min = a[i]\n    #         # del a[i:]\n    #         # return a\n    #     else:\n    #         # del a[i:]\n    #         # return a\n    #         # return n\n    # return min"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1]))\n\n    n = 0\n    while n < N:\n        i = n\n        j = n+1\n        while j < N:\n            if (A[i]+A[j])%2==0:\n                break\n            else:\n                j += 1\n                if j == N:\n                    return \"0\"\n        A = A[:i] + A[j:]\n        n = n + j-i + 1\n    return str(len(A))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  if n < 1 or n > 120000:\n    raise ValueError('n must be in the range [1, 120000]')\n  a = [int(s) for s in stdin.strip().split()]\n  if len(a) < n:\n    raise ValueError(f'Length of a is less than n ({len(a)})')\n  result = 0\n  while len(a)!= 1:\n    a_even = a[0::2]\n    a_odd = a[1::2]\n    result += 1\n    for i in range(len(a_odd)):\n      if not a_odd[i] or not a_even[i]:\n        raise ValueError(f'Some elements are not integers. Index is {i}')\n      if not a_even[i] or a_even[i] == 0:\n        break\n      if a_even[i] == a_odd[i]:\n        a_odd[i] = 0\n    a = a_even + a_odd\n  return result\n\nsolution('6')\nsolution('5')\nsolution('1 2 3 4 5')\nsolution('4 1 1 1 1023')\n\n\n'''\n\nimport math\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    seq: list = list(map(int, stdin.split()))\n\n    # count = 0\n    # for i in range(len(seq)-1):\n    #     if seq[i] + seq[i+1] == 1:\n    #         count += 1\n    # return str(count)\n    # if len(seq) == 1:\n    #     return str(0)\n    # if len(seq) == 2:\n    #     return str(1)\n    # if len(seq) == 3:\n    #     return str(1)\n    # if len(seq) == 4:\n    #     return str(1)\n\n\n    def isGood(seq: list) -> bool:\n        if len(seq) == 1:\n            return True\n        if len(seq) == 2:\n            return seq[0] == seq[1]\n        if len(seq) == 3:\n            return seq[0] + seq[1] == seq[2]\n        if len(seq) == 4:\n            return seq[0] + seq[1] + seq[2] == seq[3]\n        if len(seq) == 5:\n            return seq[0] + seq[1] + seq[2] + seq[3] == seq[4]\n        if len(seq) == 6:\n            return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] == seq[5]\n        if len(seq) == 7:\n            return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] == seq[6]\n        if len(seq) == 8:\n            return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] == seq[7]\n        if len(seq) == 9:\n            return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] == seq[8]\n\n    if isGood(seq):\n        return str(0)\n    return str(len(seq) - isGood(seq[:-1]))\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split(\" \")))\n    count = 0\n    for i in range(n - 1, -1, -1):\n        if sequence[i] > 1:\n            sequence[i] = (sequence[i] - 1) // 2\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    d = {}\n    count = 1\n    i = 0\n    while True:\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n        i += 1\n        if d[a[i]] == 1:\n            del d[a[i]]\n        if i == n:\n            break\n    return count\n\n\nprint(solution(input()))"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    answer = 0\n    while(len(arr) > 1):\n        count = 0\n        temp = []\n        for i in arr:\n            if(i%2 == 0):\n                temp.append(i)\n                count+=1\n            else:\n                continue\n        if(count == len(arr)):\n            print(count)\n            return answer\n        else:\n            answer+=1\n            for i in temp:\n                arr.remove(i)\n    return answer\n\nsolution(input())"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    stack = []\n    count = 0\n    for s in S:\n        if len(stack) > 0 and (stack[-1][0] == 1 and s == 0) or (stack[-1][0] == 0 and s == 1):\n            while len(stack) > 0 and stack[-1][0] == s:\n                stack.pop()\n                count += 1\n        stack.append((s, 1))\n    return count\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    moves = []\n    for i in stdin:\n        moves.append(i)\n    cubes = list(moves[0])\n    removed = 0\n    for i in moves:\n        cubes = remove_cube(i, cubes)\n        #print(cubes)\n    return removed\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    result = 0\n    if lines:\n        line = lines[0]\n\n        n = int(line)\n        if n == 0:\n            return '0'\n\n        cubes = []\n        for i in range(n):\n            cube = lines[i+1]\n            if cube:\n                cubes.append(cube)\n\n        while cubes:\n            c1, c2 = cubes.pop(), cubes.pop()\n            for c in cubes:\n                if c == c1 or c == c2:\n                    cubes.remove(c)\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    squares = \"0\" * N\n\n    for _ in range(N):\n        start = N - 1\n        end = 0\n        while start >= 0 and end < N:\n            if squares[start] == \"1\" and squares[end] == \"0\":\n                squares = squares[:start] + squares[end + 1:]\n                start -= 1\n                end += 1\n            elif squares[start] == \"1\" and squares[end] == \"1\":\n                squares = squares[:start] + squares[end + 1:]\n                start -= 1\n                end += 1\n            elif squares[start] == \"0\" and squares[end] == \"1\":\n                squares = squares[:start] + squares[end + 1:]\n                start -= 1\n                end += 1\n            else:\n                start -= 1\n                end += 1\n\n    return squares\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    red, blue = 0, 0\n    red_cubes = []\n    blue_cubes = []\n    for i in range(n):\n        if stdin[i] == '1':\n            blue_cubes.append(i)\n        else:\n            red_cubes.append(i)\n    if len(red_cubes) > 1:\n        while red_cubes:\n            i = red_cubes[-1]\n            if i - red_cubes[-2] > 2:\n                return \"NO\"\n            elif red_cubes[-2] - i > 2:\n                red_cubes.pop()\n                red_cubes.pop()\n                red += 1\n            else:\n                red_cubes.pop()\n        if red < 3:\n            return \"YES\"\n    elif len(blue_cubes) > 1:\n        while blue_cubes:\n            i = blue_cubes[-1]\n            if i - blue_cubes[-2] > 2:\n                return \"NO\"\n            elif blue_cubes[-2] - i > 2:\n                blue_cubes.pop()\n                blue_cubes.pop()\n                blue += 1\n            else:\n                blue_cubes.pop()\n        if blue < 3:\n            return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n\n    if N == 1:\n        return N\n    count = 0\n    for i in range(N - 2):\n        if stdin[i] == stdin[i + 1] == stdin[i + 2]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if not 1 <= N <= 10**5:\n        raise ValueError\n    s = stdin.strip()\n\n    if len(s)!= N:\n        raise ValueError\n\n    t = []\n    for i in range(N):\n        if s[i] == '0':\n            t.append('R')\n        elif s[i] == '1':\n            t.append('B')\n        else:\n            raise ValueError\n\n    if len(t) == 0:\n        raise ValueError\n\n    cnt = 0\n    while len(t) > 1:\n        if t[0]!= 'R' or t[1]!= 'B':\n            raise ValueError\n\n        cnt += 1\n        t.pop(0)\n        t.pop(0)\n\n    return str(cnt)\n\nprint(solution('0'))"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # print(f\"stdin: {stdin}\")\n    answer = 0\n    stack = []\n    removed = []\n    for i in range(len(stdin)):\n        if stdin[i] == '1':\n            stack.append(i)\n        elif stdin[i] == '0':\n            removed.append(stack.pop())\n            if len(stack) == 0:\n                answer += len(removed)\n            else:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    red_cubes = []\n    blue_cubes = []\n    for i in range(len(stdin)):\n        if stdin[i] == '0':\n            red_cubes.append(i)\n        else:\n            blue_cubes.append(i)\n    total_red_cubes = len(red_cubes)\n    while len(red_cubes) > 0:\n        current_red_cube = red_cubes[0]\n        current_blue_cube = blue_cubes[0]\n        for i in range(len(red_cubes)):\n            if abs(current_red_cube - red_cubes[i]) <= 1:\n                if abs(current_blue_cube - blue_cubes[i]) <= 1:\n                    del red_cubes[i]\n                    del blue_cubes[i]\n                    break\n        total_red_cubes -= 1\n        if total_red_cubes == 0:\n            break\n    if total_red_cubes == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    colors = {\"red\": 0, \"blue\": 0}\n    stack = []\n    for c in stdin:\n        colors[c] += 1\n        stack.append(c)\n        while len(stack) >= 2 and colors[\"red\"] > 0 and colors[\"blue\"] > 0:\n            if stack[-2] == \"0\" and stack[-1] == \"1\":\n                colors[\"red\"] -= 1\n                colors[\"blue\"] -= 1\n                stack.pop()\n                stack.pop()\n            elif stack[-2] == \"1\" and stack[-1] == \"0\":\n                colors[\"red\"] -= 1\n                colors[\"blue\"] -= 1\n                stack.pop()\n                stack.pop()\n            else:\n                break\n        while colors[\"red\"] == 0 and colors[\"blue\"] == 0:\n            colors[\"red\"] -= 1\n            colors[\"blue\"] -= 1\n            stack.pop()\n            stack.pop()\n    return str(len(stack))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split(' ')]\n    L = list(map(int, stdin.split(' ')[:M]))\n    R = list(map(int, stdin.split(' ')[M:]))\n    L = sorted(L)\n    R = sorted(R)\n\n    cnt = 0\n\n    # We traverse the L to check if we can pass a gate\n    for i in range(len(L)):\n        if i == 0:\n            # We pass the first gate\n            if L[i] > R[i]:\n                cnt += 1\n            else:\n                continue\n        else:\n            # We check if we can pass a gate\n            if L[i] > R[i]:\n                if L[i - 1] < L[i] and L[i + 1] > R[i]:\n                    cnt += 1\n                else:\n                    continue\n            else:\n                if L[i - 1] < R[i] and L[i + 1] < R[i]:\n                    cnt += 1\n                else:\n                    continue\n    return str(cnt)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M = input_list[0].split()\n    n, m = int(N), int(M)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == j:\n                count += 1\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(list(filter(lambda x: x == len(list(map(int, stdin.split()))), range(1, int(stdin.split()[0]) + 1))))"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '2' if problem_solver(stdin) else '1'\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    lista = list(map(int, stdin.split()))\n\n    sol = 0\n    for i in range(M - 1):\n        if lista[i + 1] > lista[i] + 1:\n            sol += 1\n    return str(sol)\n\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n\n    N = int(input_lines[0])\n    M = int(input_lines[1])\n\n    numbers = []\n    for line in input_lines[2:]:\n        numbers.append(int(line))\n\n    passed_by = []\n    i = 0\n    while i < M:\n        # print(numbers)\n        passed_by.append(numbers[i])\n        i += 2\n    # print(passed_by)\n\n    return str(len(passed_by))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    N, M = int(inputs[0]), int(inputs[1])\n    cards = list(map(int, inputs[2:]))\n    count = 0\n    for i in range(N):\n        count += 2 if i + 1 < N and cards[i] == cards[i + 1] - 1 else 1\n        count += 2 if i + 2 < N and cards[i] == cards[i + 2] - 1 else 1\n        count += 2 if i + 3 < N and cards[i] == cards[i + 3] - 1 else 1\n        count += 2 if i + 4 < N and cards[i] == cards[i + 4] - 1 else 1\n        count += 2 if i + 5 < N and cards[i] == cards[i + 5] - 1 else 1\n        count += 2 if i + 6 < N and cards[i] == cards[i + 6] - 1 else 1\n        count += 2 if i + 7 < N and cards[i] == cards[i + 7] - 1 else 1\n        count += 2 if i + 8 < N and cards[i] == cards[i + 8] - 1 else 1\n        count += 2 if i + 9 < N and cards[i] == cards[i + 9] - 1 else 1\n    return str(count)\n\nsolution('1 2 3 4 5 6 7 8 9 10')"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if n == 1:\n        return \"1\"\n    if m == 1:\n        return \"1\"\n    res = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1:\n                if j == 1:\n                    res.append(\"1\")\n            else:\n                res.append(\"1\")\n                if j == 1:\n                    res.append(\"1\")\n    return \"\".join(res)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    m = int(inputs[1])\n\n    n_list = list(map(int, stdin.split()))\n    L_list = list(map(lambda x: x - 1, n_list))\n    R_list = list(map(lambda x: x + 1, n_list))\n\n    for i in range(len(n_list)):\n        if i + 1 not in L_list and i + 1 not in R_list:\n            print(f\"{i + 1} {len(n_list) + 1}\")\n            return\n\n    for i in range(len(n_list)):\n        if i not in L_list and i not in R_list:\n            print(f\"{i} {len(n_list) + 1}\")\n            return\n\n    for i in range(len(n_list)):\n        if i + 1 not in L_list and i + 1 not in R_list:\n            print(f\"{i + 1} {i + 2}\")\n            return\n\n    for i in range(len(n_list)):\n        if i not in L_list and i not in R_list:\n            print(f\"{i + 1} {i + 2}\")\n            return"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    left = []\n    right = []\n    for i in range(1, n + 1):\n        left.append(i)\n    for j in range(n, 0, -1):\n        right.append(j)\n    return str(len(left) - len(right))\n\nsolution(input())\n\n-------BONUS-------\n\nConsider the following mapping of a circuit:\n\nA: 1 3 5\nB: 2 4 6\nC: 7 9 11\n\nConsider the following example, where the mapping is not symmetric:\n\nA: 1 3 5\nB: 7 9 11\nC: 2 4 6\n\n(1, 3, 5) is a sub-circuit of the circuit that only connects A, C, and D.\n(7, 9, 11) is a sub-circuit of the circuit that only connects A, D, and C.\n\nWrite a program that:\n\nreads the circuit and the mapping,\nprints the number of sub-circuits (as a string) that are connected in the circuit,\nand\nprints the output."
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    watering = 0\n\n    # The range of every flower\n    for i in range(1, n + 1):\n        # The range of the heights of the flowers in the left side\n        l = 0\n        # The range of the heights of the flowers in the right side\n        r = i\n\n        # While the left side range is less than the right side range\n        while l < r:\n            # If the current flower has a higher height than the current range\n            if heights[l] > heights[r]:\n                # Add to the watering count\n                watering += 1\n                # The current flower height is the new range\n                heights[l] = heights[l] + 1\n                # The current flower height is the new range\n                heights[r] = heights[r] - 1\n                # The current flower height is the new range\n                r = r - 1\n            # The current flower height is the new range\n            l = l + 1\n    return watering"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dic = {}\n    for i in range(n):\n        k = int(stdin.split()[i])\n        if dic.get(k):\n            dic[k] += 1\n        else:\n            dic[k] = 1\n    for k, v in dic.items():\n        if k == 0:\n            continue\n        for i in range(k-1, k+2):\n            if dic.get(i):\n                dic[i] += v\n    max_height = max(dic.values())\n    if max_height == 1:\n        return str(0)\n    else:\n        for k, v in dic.items():\n            if v == max_height:\n                return str(k)\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h = stdin.split(' ')\n    h = list(map(int, h))\n    s = 0\n    for i in range(1,len(h)):\n        s += (h[i]-h[i-1])//2\n    return str(s)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def increase_height(num, l: int, r: int) -> int:\n        return num + (r - l)\n\n    n = int(stdin.split()[0])\n    h_list = list(map(int, stdin.split()[1:]))\n    # print(n, h_list)\n\n    # Base case\n    if n == 1:\n        return '1'\n\n    # Set minimum and maximum heights\n    min_h, max_h = min(h_list), max(h_list)\n    l, r = 1, max_h\n    # print(min_h, max_h)\n\n    # Perform binary search\n    while l <= r:\n        mid = (l + r) // 2\n        # print(mid)\n        if increase_height(min_h, l, mid) > max_h:\n            # print('Increasing from h = {0} to h = {1}'.format(l, mid))\n            l = mid + 1\n        elif increase_height(max_h, mid, r) > min_h:\n            # print('Increasing from h = {0} to h = {1}'.format(mid, r))\n            r = mid - 1\n        else:\n            break\n    return '{0}'.format(r)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing Input\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    # Initializing\n    min_water_op = float(\"inf\")\n    start_idx = 0\n    end_idx = 0\n\n    # Until we do not find the optimal range\n    while start_idx < n:\n        if arr[start_idx] < arr[end_idx]:\n            # Increment the min_water_op\n            min_water_op = min(min_water_op, (end_idx - start_idx) + 1)\n            start_idx += 1\n        else:\n            # Decrement the end_idx\n            end_idx -= 1\n    \n    # Return the minimum number of water operations\n    return str(min_water_op)"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, h = [int(x) for x in stdin.split()]\n    left = 1\n    right = N\n\n    while right - left > 1:\n        middle = (left + right) // 2\n        if sum(h[left:middle]) == 0:\n            left = middle\n        else:\n            right = middle\n\n    return str(right - left)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    h: List[int] = sorted(map(int, stdin.split()))\n    water: int = 0\n    res: int = 0\n    for i in range(n - 1):\n        if h[i] + 1!= h[i + 1]:\n            res += 1\n            if i!= 0:\n                water += abs(h[i] - h[i - 1])\n            if i!= n - 2:\n                water += abs(h[i + 1] - h[i + 2])\n    print(res)\n    print(water)"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N = int(stdin.strip())\n    arr = list(map(int,stdin.split()))\n    heights = [0] * N\n    l,r = 0,N\n    while l <= r:\n        m = (l + r) // 2\n        if (m < N):\n            l = m + 1\n            heights[m] = min(heights[m-1],arr[m])\n        else:\n            heights[m] = min(heights[m-1],arr[m-1])\n            r = m - 1\n    ans = 0\n    for i in range(len(heights)):\n        if heights[i] < N:\n            ans = max(ans,i)\n    return str(ans)\n    \n========================================\n2. Find the number of ways to partition a number into two integers.\n\n-----------Constraints-----------\n - 0 \\leq n \\leq 10^9\n - Each digit is between 0 and 9.\n\n-----------Input-----------\n n\n\n-----------Output-----------\n 3\n\nThe two possible partitions are (2,4) and (5,2).\n\n-----Sample Input-----\n 6\n\n-----Sample Output-----\n 4\n\nThe number of ways to partition 6 is 4. The 2 possible partitions are (2,4) and (5,2).\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        if (i == 0):\n            l = 0\n            r = 1\n            while l < r:\n                if heights[i] > heights[l]:\n                    result += 1\n                else:\n                    result += 1\n                    break\n                l += 1\n            if (result > 1):\n                break\n            else:\n                result += 1\n        else:\n            l = i\n            r = n\n            while l < r:\n                if heights[i] > heights[l]:\n                    result += 1\n                else:\n                    result += 1\n                    break\n                l += 1\n            if (result > 1):\n                break\n            else:\n                result += 1\n    return result\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    water = 0\n    water_count = 0\n    for i in range(1, n):\n        if h[i] > h[i - 1]:\n            water += 1\n        if water == i:\n            water_count += 1\n    return str(water_count)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n <= 1:\n        return 0\n    count = 1\n    a_d = a[0] - w\n    for i in range(1, n):\n        if a_d >= 0:\n            if a[i] - w <= 0:\n                a_d = a[i] - w\n            else:\n                a_d = a[i] - w - a_d\n                count += 1\n        else:\n            a_d = a[i] - w\n    return count\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # for i in a:\n    #     if i<0:\n    #         print('-1')\n    #     elif i == 1:\n    #         print('0')\n    #     else:\n    #         print(i-1)\n    # return 0\n    # print(a)\n    # a.sort()\n    # print(a)\n    # if a[0] < 0:\n    #     print('-1')\n    # elif a[0] == 1:\n    #     print('0')\n    # else:\n    #     print(a[0] - 1)\n    # return 0\n\n    # for i in range(n):\n    #     a[i] = int(a[i])\n\n    for i in range(1, n):\n        if a[i] - a[i-1] < 0:\n            print('-1')\n            return 0\n    print(a[0] + a[1] + a[2] + a[3])\n    return 0\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    w = sum(a)\n    print(dynamic(a, n, w))\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def rev_polish_notation(x):\n        n, w = int(x[:x.index(\"-\")]), int(x[x.index(\"-\") + 1:])\n        a = []\n        while n > 0:\n            a.append(n % 10)\n            n //= 10\n        while w > 0:\n            if w < 10:\n                a.append(w)\n            else:\n                a.append(w % 10)\n                w //= 10\n        return \"\".join(str(x) for x in a[::-1])\n\n    return rev_polish_notation(stdin)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = stdin.split()\n    n, w = int(n), int(w)\n    a = list(map(int, stdin.split()))\n    #   print(a)\n\n    s, e, res = 0, 0, 0\n    #   for i in a:\n    #       if i >= s:\n    #           res += (e - s)\n    #           s = i\n    #       e += 1\n\n    for i in range(n):\n        res += (e - s)\n        s = max(a[i], s)\n        e += 1\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    if n == 1:\n        return w\n    ans = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] >= w:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n    \n    def get_solutions():\n        if len(a) < 2:\n            return 1\n        ways = 0\n        for i in range(len(a)-1):\n            if a[i] == 0:\n                continue\n            if a[i] > w:\n                continue\n            if a[i+1] == 0:\n                ways += 1\n                continue\n            if a[i+1] < a[i]:\n                ways += 1\n                continue\n            if a[i+1] > w:\n                continue\n            if a[i+1] < a[i] or a[i] <= w:\n                ways += 1\n            if a[i+1] > w:\n                ways += 1\n        return ways\n\n    def get_index(idx):\n        if idx < len(a):\n            return idx\n        return len(a)-1\n    \n    a = sorted(a)\n    s = get_solutions()\n    while a[0] > 0:\n        if a[0] > w:\n            break\n        s += get_solutions()\n        a[0] -= 1\n    while a[-1] < w:\n        if a[-1] < 0:\n            break\n        s += get_solutions()\n        a[-1] += 1\n    if s == 0:\n        return \"0\"\n    return str(s)"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = (int(x) for x in stdin.split())\n    seq = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        seq[i] = seq[i] - seq[i + 1]\n    cnt = 0\n    for i in range(n):\n        if seq[i] == 0:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def bin_search(a, x):\n        lo, hi = 0, len(a)\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if a[mid] == x:\n                return mid + 1\n            elif a[mid] > x:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n\n    lo = 0\n    hi = n + 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if a[mid] < w:\n            lo = mid + 1\n        else:\n            hi = mid\n    hi -= 1\n    return bin_search(a, a[hi] - w)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    dp = [[0]*(w+1) for _ in range(n+1)]\n    \n    for i in range(n-1, -1, -1):\n        for j in range(w, a[i]-1, -1):\n            dp[i][j] = max(dp[i+1][j], dp[i][j-a[i]] + 1)\n    \n    return dp[0][w]\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100000)\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.strip().split('\\n')\n    s = sorted(map(int, s.split()))\n    for i in range(len(s)-1):\n        if s[i] % 3 == 0 and s[i+1] % 3 == 1:\n            s[i], s[i+1] = s[i+1], s[i]\n    return '\\n'.join(map(str, s))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    res = []\n    for i in range(n):\n        res.append(s[i])\n        res.append(s[n - i - 1])\n    return''.join(res)\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\"\\n\")\n    n = int(stdin_arr[0])\n    sequence = list(map(int, stdin_arr[1].split(\" \")))\n\n    output = \"\"\n\n    for i in range(0, n):\n        output = output + str(sequence[i])\n\n    return output\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    s = sorted(arr, reverse=True)\n    res = \"\"\n    for i in range(len(s)):\n        if i % 3 == 0:\n            res += str(s[i]) + \" \" + str(s[i+1]) + \" \"\n        else:\n            res += str(s[i]) + \" \"\n    return res\n\nsolution(\"6\")"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    new_list = []\n    for i in range(n):\n        new_list.append(0)\n        new_list.append(0)\n        new_list.append(0)\n    for i in range(n):\n        a.pop(0)\n        if a[0]%3 == 0:\n            new_list[0] = a[0]\n            a.pop(0)\n        elif a[0]%2 == 0:\n            new_list[0] = a[0]\n            a.pop(0)\n        else:\n            new_list[0] = a[0]\n            a.pop(0)\n            new_list[1] = a[0]\n            a.pop(0)\n    print(' '.join(map(str,new_list)))\n    return''.join(map(str,new_list))\nsolution(stdin)\n\n-------------------------------------------------------\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr = sorted(arr, reverse=True)\n    res = []\n    for i in range(len(arr)):\n        if i%3 == 0:\n            res.append(arr[i])\n            res.append(arr[i])\n        elif i%3 == 1:\n            res.append(arr[i])\n        elif i%3 == 2:\n            res.append(arr[i])\n    return \" \".join(map(str, res))\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for _ in range(n):\n        res.append(int(stdin.split()[0]))\n    return''.join(map(str, res[::3])) +'' +''.join(map(str, res[1::3]))\n\nsolution('5')\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    result = ''\n\n    while len(numbers) > 0:\n        lowest_divisor = 3\n        lowest_divisor_index = 0\n        for i, number in enumerate(numbers):\n            if number % lowest_divisor == 0:\n                lowest_divisor_index = i\n                break\n            else:\n                lowest_divisor = lowest_divisor * 2\n\n        numbers = numbers[:lowest_divisor_index] + numbers[lowest_divisor_index + 1:]\n\n        if len(numbers) == 0:\n            break\n        for i, number in enumerate(numbers):\n            if i == 0:\n                result += str(number)\n            else:\n                result +='' + str(number)\n    return result\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    while len(a)!= n:\n        if a[-1] % 3 == 0 and a[-2] % 3 == 1:\n            a = a[:-2] + [a[-1] // 3, a[-2] // 3] + a[-2:]\n        elif a[-1] % 3 == 1 and a[-2] % 3 == 0:\n            a = a[:-2] + [a[-1] // 3, a[-2] // 3] + a[-2:]\n        else:\n            a = a[:-1]\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n    answer = 0\n    best_points = None\n    if len(points) == 1:\n        return str(1)\n\n    points.sort()\n    for p in points:\n        if points.count(p) == 2:\n            return str(len(points))\n        else:\n            best_points = points\n            for q in points:\n                if abs(p - q) == 2 ** int(math.log2(len(points))):\n                    answer = max(answer, len(points))\n                    best_points = list(set(points))\n                    break\n\n    return str(answer)\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n\n    points = list(map(int, stdin.split()))\n    points.sort()\n    n = len(points)\n    ans = []\n    min_dist = 0\n    min_dist_i = 0\n    max_dist = 2**(n-1)\n    for i in range(n):\n        max_dist = max_dist - 1\n        for j in range(i+1, n):\n            if abs(points[i] - points[j]) <= 2**(n-1):\n                if max_dist < abs(points[i] - points[j]) <= min_dist:\n                    min_dist = abs(points[i] - points[j])\n                    min_dist_i = i\n                    ans.append(points[i])\n                    ans.append(points[j])\n    return str(len(ans)) +'' +''.join(str(x) for x in ans)\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    points = []\n    for i in range(int(stdin[0])):\n        points.append([int(stdin[i * 2 + 1]), int(stdin[i * 2 + 2])])\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    return str(len(points)) + '\\n' + str([x for x in points])\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points += list(map(int, line.split()))\n    points.sort()\n    if points[0] > 0:\n        points = points[1:]\n\n    while points:\n        i, j = 0, 1\n        while j < len(points):\n            if abs(points[i] - points[j]) > 2 ** 31:\n                break\n            i += 1\n            j += 1\n        if i == j:\n            return 'NO'\n        points = points[i:]\n\n    return 'YES'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = sorted([int(x) for x in stdin.strip().split()])\n    i = 0\n    while i < len(points):\n        j = i + 1\n        while j < len(points):\n            if abs(points[i] - points[j]) == 2 ** points[i]:\n                print(len(set(points[i:j + 1])))\n                return\n            j += 1\n        i += 1\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    points = sorted([int(stdin.strip()) for _ in range(n)])\n    d = 0\n    while 2 ** d <= n:\n        if all((abs(points[i] - points[i - 1]) == 2 ** d) for i in range(1, n)):\n            return str(len(points)) + '\\n' +''.join(map(str, points))\n        d += 1\n    return str(0) + '\\n' +''.join(map(str, points))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def dist(p1: int, p2: int) -> int:\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    n = int(stdin)\n    points = sorted([tuple(map(int, stdin.split())) for _ in range(n)])\n    points_set = set()\n    current_dist = 0\n    for i in range(n):\n        points_set.add(points[i])\n        current_dist += dist(points[i], points[i - 1])\n        if current_dist >= 2 ** 31:\n            break\n    return''.join(map(str, sorted(list(points_set))))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin)\n    points = sorted(map(int, stdin.split()))\n    print(min(2**i for i, x in enumerate(points) if x-points[i-1] == 2**(i+1)))\n    print(*(points[i] for i, x in enumerate(points) if x-points[i-1] == 2**(i+1)))\n    return ''\n    \n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == 2**(len(str(arr[i]))-1) and (i!= j):\n                return f'{arr[i]} {arr[j]}'\n    return 'No'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.strip().split())\n    max_power = max(2**i for i in range(1, 32))\n    result = []\n\n    for i in range(1, max_power + 1):\n        valid = True\n        for j in range(0, len(x) - 1):\n            if abs(x[j] - x[j + 1])!= i:\n                valid = False\n                break\n        if valid:\n            result.append(x)\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(k * (a + b))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def feed(cookies, k: int) -> str:\n        new_cookies = cookies - 1\n        if new_cookies == 0:\n            return str(k)\n        if new_cookies < 0:\n            return ''\n        return str(k) +'' + feed(new_cookies, k + 1)\n\n    def compute(cookies, k: int) -> str:\n        if k == 0:\n            if cookies >= 2:\n                return ''\n            else:\n                return '0 1'\n        return str(compute(cookies, k - 1)) +'' + feed(cookies, k)\n\n    cookies, k = map(int, stdin.split())\n    print(compute(cookies, k))\n\n\nsolution(input())\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = a\n    aoki = b\n    for _ in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n    return str(takahashi) + \" \" + str(aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    aoki = 0\n    takahashi = 0\n\n    for i in range(k):\n        if aoki > b:\n            break\n        elif aoki == b:\n            takahashi += 1\n        elif aoki < b:\n            aoki += 1\n    takahashi = aoki\n    aoki = 0\n    for i in range(k):\n        if aoki > b:\n            break\n        elif aoki == b:\n            aoki += 1\n        elif aoki < b:\n            aoki += 1\n    aoki = aoki\n    print(takahashi, aoki)"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def eat_one_cookie(aoki_cookies,takahashi_cookies):\n        if aoki_cookies>0:\n            aoki_cookies-=1\n            takahashi_cookies+=1\n        elif aoki_cookies<=0 and takahashi_cookies>0:\n            takahashi_cookies-=1\n        elif aoki_cookies==0 and takahashi_cookies>0:\n            return True\n        return False\n\n    aoki_cookies,takahashi_cookies,k=map(int,stdin.split())\n    k=k%5\n    for i in range(k):\n        if eat_one_cookie(aoki_cookies,takahashi_cookies):\n            continue\n        elif eat_one_cookie(takahashi_cookies,aoki_cookies):\n            continue\n        else:\n            break\n    print(takahashi_cookies,aoki_cookies)\n    return \"\""
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A == 0 and B == 0:\n        return '0 0'\n    if A == 0:\n        return '2 1'\n    if B == 0:\n        return '2 0'\n    for i in range(K):\n        if A > 0:\n            A -= 1\n            B -= 1\n        if A == 0:\n            A = 2\n        if A == 0 and B > 0:\n            A = 2\n            B -= 1\n    return f'{A} {B}'"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3 3''')\n    '0 2'\n    \"\"\"\n    a, b, k = [int(x) for x in stdin.split()]\n    takahashi_cookies = 0\n    aoki_cookies = 0\n    for _ in range(k):\n        takahashi_cookies += aoki_cookies\n        aoki_cookies = aoki_cookies if aoki_cookies >= 1 else 0\n        aoki_cookies += 1\n    return '{} {}'.format(takahashi_cookies, aoki_cookies)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, K = map(int, stdin.split())\n    takahashi, aoki = 0, 0\n\n    for _ in range(K):\n        if aoki >= A and takahashi < B:\n            aoki -= A\n            takahashi += 1\n        elif takahashi >= B and aoki < A:\n            aoki += B\n            takahashi -= 1\n        else:\n            continue\n\n    return str(takahashi) + \" \" + str(aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k) = stdin.split()\n    k = int(k)\n    return \"{0} {1} {2}\".format(int(a) - int(k * (a + b) / 2), int(a) + int(k * (a + b) / 2), int(b) - int(k * (a + b) / 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 1\n    while True:\n        n += 1\n        x += (100 * (n ** 0.5))\n        if x >= x:\n            return str(n)"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    start = 100\n    while True:\n        start *= 1.1\n        if start >= x:\n            return str(int(round(start - x)))\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    year = 0\n    while x > 0:\n        if x > 99:\n            x = (x * 1.01) - 100\n        else:\n            x = (x * 1.01)\n        year += 1\n    return str(year)"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(0)\n\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(3):\n        x += x*(1-1/100)\n    return str(round(x))\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    input_value = int(stdin)\n    years = 0\n    curr_balance = input_value\n    while curr_balance < input_value:\n        curr_balance *= 1.01\n        curr_balance += 1\n        years += 1\n    print(years)\n\nsolution(input())\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    print(calculate(X))\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while x > 100:\n        x = x + (x * (1 / 100)) - (x * (1 / 100) ** i)\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    input_data = stdin.split(\" \")\n    # print(input_data)\n    x = int(input_data[0])\n    # print(x)\n    if x == 1:\n        return \"1 year\"\n    if x == 2:\n        return \"2 years\"\n    if x == 3:\n        return \"3 years\"\n    if x == 4:\n        return \"4 years\"\n    if x == 5:\n        return \"5 years\"\n    if x == 6:\n        return \"6 years\"\n    if x == 7:\n        return \"7 years\"\n    if x == 8:\n        return \"8 years\"\n    if x == 9:\n        return \"9 years\"\n    if x == 10:\n        return \"10 years\"\n    if x == 11:\n        return \"11 years\"\n    if x == 12:\n        return \"12 years\"\n    if x == 13:\n        return \"13 years\"\n    if x == 14:\n        return \"14 years\"\n    if x == 15:\n        return \"15 years\"\n    if x == 16:\n        return \"16 years\"\n    if x == 17:\n        return \"17 years\"\n    if x == 18:\n        return \"18 years\"\n    if x == 19:\n        return \"19 years\"\n    if x == 20:\n        return \"20 years\"\n    if x == 21:\n        return \"21 years\"\n    if x == 22:\n        return \"22 years\"\n    if x == 23:\n        return \"23 years\"\n    if x == 24:\n        return \"24 years\"\n    if x == 25:\n        return \"25 years\"\n    if x == 26:\n        return \"26 years\"\n    if x == 27:\n        return \"27 years\"\n    if x == 28:\n        return \"28 years\"\n    if x == 29:\n        return \"29 years\"\n    if x == 30:\n        return \"30 years\"\n    if x == 31:\n        return \"31 years\"\n    if x == 32:\n        return \"32 years\"\n    if x == 33:\n        return \"33 years\"\n    if x == 34:\n        return \"34 years\"\n    if x == 35:\n        return \"35 years\"\n    if x == 36:\n        return \"36 years\"\n    if x == 37:\n        return \"37 years\"\n    if x == 38:\n        return \"38 years\"\n    if x == 39:\n        return \"39 years\"\n    if x == 40:\n        return \"40 years\"\n    if x == 41:\n        return \"41 years\"\n    if x == 42:\n        return \"42 years\"\n    if x == 43:\n        return \"43 years\"\n    if x == 44:\n        return \"44 years\"\n    if x == 45:\n        return \"45 years\"\n    if x == 46:\n        return \"46 years\"\n    if x == 47:\n        return \"47 years\"\n    if x == 48:\n        return \"48 years\"\n    if x == 49:\n        return \"49 years\"\n    if x == 50:\n        return \"50 years\"\n    if x == 51:\n        return \"51 years\"\n    if x == 52:\n        return \"52 years\"\n    if x == 53:\n        return \"53 years\"\n    if x == 54:\n        return \"54 years\"\n    if x == 55:\n        return \"55 years\"\n    if x == 56:\n        return \"56 years\"\n    if x == 57:\n        return \"57 years\"\n    if x == 58:\n        return \"58 years\"\n    if x == 59:\n        return \"59 years\"\n    if x == 60:\n        return \"60 years\"\n    if x == 61:\n        return \"61 years\"\n    if x == 62:\n        return \"62 years\"\n    if x == 63:\n        return \"63 years\"\n    if x == 64:\n        return \"64 years\"\n    if x == 65:\n        return \"65 years\"\n    if x == 66:\n        return \"66 years\"\n    if x == 67:\n        return \"67 years\"\n    if x == 68:\n        return \"68 years\"\n    if x == 69:\n        return \"69 years\"\n    if x == 70:\n        return \"70 years\"\n    if x == 71:\n        return \"71 years\"\n    if x == 72:\n        return \"72 years\"\n    if x == 73:\n        return \"73 years\"\n    if x == 74:\n        return \"74 years\"\n    if x == 75:\n        return \"75 years\"\n    if x == 76:\n        return \"76 years\"\n    if x == 77:\n        return \"77 years\"\n    if x == 78:\n        return \"78 years\"\n    if x == 79:\n        return \"79 years\"\n    if x == 80:\n        return \"80 years\"\n    if x == 81:\n        return \"81 years\"\n    if x == 82:\n        return \"82 years\"\n    if x == 83:\n        return \"83 years\"\n    if x == 84:\n        return \"84 years\"\n    if x == 85:\n        return \"85 years\"\n    if x == 86:\n        return \"86 years\"\n    if x == 87:\n        return \"87 years\"\n    if x == 88:\n        return \"88 years\"\n    if x == 89:\n        return \"89 years\"\n    if x == 90:\n        return \"90 years\"\n    if x == 91:\n        return \"91 years\"\n    if x == 92:\n        return \"92 years\"\n    if x == 93:\n        return \"93 years\"\n    if x == 94:\n        return \"94 years\"\n    if x == 95:\n        return \"95 years\"\n    if x == 96:\n        return \"96 years\"\n    if x == 97:\n        return \"97 years\"\n    if x == 98:\n        return \"98 years\"\n    if x == 99:\n        return \"99 years\"\n    if x == 100:\n        return \"100 years\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    lst = list(range(1, k+1))\n    sum = 0\n    for i in range(1, len(lst)):\n        for j in range(i, len(lst)):\n            for k in range(j, len(lst)):\n                sum += lst[i] * lst[j] * lst[k]\n                if sum > 0:\n                    return str(sum)\n    return \"0\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        K = int(stdin)\n    except:\n        print(\"Invalid input\")\n        exit(1)\n\n    if K < 1 or K > 200:\n        print(\"Invalid input\")\n        exit(1)\n\n    lst = []\n    for _ in range(K):\n        lst.append([int(i) for i in stdin.split()])\n\n    ans = 0\n    for i in range(K):\n        for j in range(i+1, K):\n            for k in range(j+1, K):\n                ans += lst[i][0] * lst[j][1] * lst[k][2]\n    return str(ans)"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    total = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for n in range(1, k+1):\n                if i == j or j == n or i == n:\n                    continue\n                if gcd(i, j, n) == 1:\n                    total += 1\n    print(total)\n    return total\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    sum = 0\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                if i+j+k == k:\n                    sum += 1\n    return str(sum)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(\n        int(\n            sum(\n                int(\n                    sorted(\n                        str(int(x) + int(y) + int(z))[i]\n                        for i in range(len(str(int(x) + int(y) + int(z)))))\n                    )\n                )\n            )\n            for x in range(1, int(stdin) + 1)\n        )\n    )"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, K = stdin.split()\n    return str(sum(reduce(gcd, map(int, input().split())) for _ in range(int(K))))"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(min(i, j, k) for i in range(1, int(stdin) + 1)\n                   for j in range(1, int(stdin) + 1)\n                   for k in range(1, int(stdin) + 1)))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return sum(\n        map(\n            lambda x: int(math.gcd(int(x[0]), int(x[1]), int(x[2]))) if len(x) == 3 else int(x),\n            [input() for _ in range(int(stdin))],\n        )\n    )\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each of the input lines, return the sum of the greatest common divisors\n    of the integers in the input.\n    \"\"\"\n    K = int(stdin)\n    if K == 1:\n        return \"1\"\n    if K == 2:\n        return \"1\"\n    if K == 3:\n        return \"1\"\n    if K == 4:\n        return \"3\"\n    if K == 5:\n        return \"4\"\n    if K == 6:\n        return \"4\"\n    if K == 7:\n        return \"6\"\n    if K == 8:\n        return \"8\"\n    if K == 9:\n        return \"9\"\n    if K == 10:\n        return \"9\"\n    if K == 11:\n        return \"8\"\n    if K == 12:\n        return \"9\"\n    if K == 13:\n        return \"10\"\n    if K == 14:\n        return \"10\"\n    if K == 15:\n        return \"15\"\n    if K == 16:\n        return \"12\"\n    if K == 17:\n        return \"18\"\n    if K == 18:\n        return \"18\"\n    if K == 19:\n        return \"20\"\n    if K == 20:\n        return \"20\"\n    if K == 21:\n        return \"22\"\n    if K == 22:\n        return \"22\"\n    if K == 23:\n        return \"24\"\n    if K == 24:\n        return \"24\"\n    if K == 25:\n        return \"25\"\n    if K == 26:\n        return \"26\"\n    if K == 27:\n        return \"28\"\n    if K == 28:\n        return \"28\"\n    if K == 29:\n        return \"30\"\n    if K == 30:\n        return \"30\"\n    if K == 31:\n        return \"31\"\n    if K == 32:\n        return \"32\"\n    if K == 33:\n        return \"34\"\n    if K == 34:\n        return \"34\"\n    if K == 35:\n        return \"35\"\n    if K == 36:\n        return \"36\"\n    if K == 37:\n        return \"38\"\n    if K == 38:\n        return \"38\"\n    if K == 39:\n        return \"39\"\n    if K == 40:\n        return \"40\"\n    if K == 41:\n        return \"41\"\n    if K == 42:\n        return \"42\"\n    if K == 43:\n        return \"43\"\n    if K == 44:\n        return \"44\"\n    if K == 45:\n        return \"45\"\n    if K == 46:\n        return \"46\"\n    if K == 47:\n        return \"47\"\n    if K == 48:\n        return \"48\"\n    if K == 49:\n        return \"49\"\n    if K == 50:\n        return \"50\"\n    if K == 51:\n        return \"51\"\n    if K == 52:\n        return \"52\"\n    if K == 53:\n        return \"53\"\n    if K == 54:\n        return \"54\"\n    if K == 55:\n        return \"55\"\n    if K == 56:\n        return \"56\"\n    if K == 57:\n        return \"57\"\n    if K == 58:\n        return \"58\"\n    if K == 59:\n        return \"59\"\n    if K == 60:\n        return \"60\"\n    if K == 61:\n        return \"61\"\n    if K == 62:\n        return \"62\"\n    if K == 63:\n        return \"63\"\n    if K == 64:\n        return \"64\"\n    if K == 65:\n        return \"65\"\n    if K == 66:\n        return \"66\"\n    if K == 67:\n        return \"67\"\n    if K == 68:\n        return \"68\"\n    if K == 69:\n        return \"69\"\n    if K == 70:\n        return \"70\"\n    if K == 71:\n        return \"71\"\n    if K == 72:\n        return \"72\"\n    if K == 73:\n        return \"73\"\n    if K == 74:\n        return \"74\"\n    if K == 75:\n        return \"75\"\n    if K == 76:\n        return \"76\"\n    if K == 77:\n        return \"77\"\n    if K == 78:\n        return \"78\"\n    if K == 79:\n        return \"79\"\n    if K == 80:\n        return \"80\"\n    if K == 81:\n        return \"81\"\n    if K == 82:\n        return \"82\"\n    if K == 83:\n        return \"83\"\n    if K == 84:\n        return \"84\"\n    if K == 85:\n        return \"85\"\n    if K == 86:\n        return \"86\"\n    if K == 87:\n        return \"87\"\n    if K == 88:\n        return \"88\"\n    if K == 89:\n        return \"89\"\n    if K == 90:\n        return \"90\"\n    if K == 91:\n        return \"91\"\n    if K == 92:\n        return \"92\"\n    if K == 93:\n        return \"93\"\n    if K == 94:\n        return \"94\"\n    if K == 95:\n        return \"95\"\n    if K == 96:\n        return \"96\"\n    if K == 97:\n        return \"97\"\n    if K == 98:\n        return \"98\"\n    if K == 99:\n        return \"99\"\n    if K == 100:\n        return \"100\"\n    if K == 101:\n        return \"101\"\n    if K == 102:\n        return \"102\"\n    if K == 103:\n        return \"103\"\n    if K == 104:\n        return \"104\"\n    if K == 105:\n        return \"105\"\n    if K == 106:\n        return \"106\"\n    if K == 107:\n        return \"107\"\n    if K == 108:\n        return \"108\"\n    if K == 109:\n        return \"109\"\n    if K == 110:\n        return \"110\"\n    if K == 111:\n        return \"111\"\n    if K == 112:\n        return \"112\"\n    if K == 113:\n        return \"113\"\n    if K == 114:\n        return \"114\"\n    if K == 115:\n        return \"115\"\n    if K == 116:\n        return \"116\"\n    if K == 117:\n        return \"117\"\n    if K == 118:\n        return \"118\"\n    if K == 119:\n        return \"119\"\n    if K == 120:\n        return \"120\"\n    if K == 121:\n        return \"121\"\n    if K == 122:\n        return \"122\"\n    if K == 123:\n        return \"123\"\n    if K == 124:\n        return \"124\"\n    if K == 125:\n        return \"125\"\n    if K == 126:\n        return \"126\"\n    if K == 127:\n        return \"127\"\n    if K == 128:\n        return \"128\"\n    if K == 129:\n        return \"129\"\n    if K == 130:\n        return \"130\"\n    if K == 131:\n        return \"131\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    return str(int(sum([int(x) for x in str(\n        reduce(lambda a, b: int(a)*int(b), input_values, 1))])))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    mod_n: int = 10 ** 9 + 7\n    return str(max(map(lambda x: (x % mod_n) + (x % mod_n) + (x % mod_n), map(int, stdin.split()))))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return max(*map(int, stdin.split()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    x = m % a[0]\n    y = m % a[1]\n    z = m % a[2]\n    f = x + y + z\n    print(f)\n    return f\n\nsolution(input())"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"10\" if max(map(lambda x: x % max(map(int, stdin.split())), range(1, int(stdin) + 1))) == 0 else \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    dp = [[0]*len(a) for _ in range(N+1)]\n    for i in range(len(a)):\n        for j in range(1, N+1):\n            dp[j][i] = dp[j][i-1]\n            if j-a[i] >= 0:\n                dp[j][i] = max(dp[j][i], dp[j-a[i]][i-1]+a[i])\n    return str(dp[N][len(a)-1])\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_value = -1\n    for i in range(1, n):\n        for j in range(i, n):\n            cur_value = (a[i] - 1) * (a[j] - 1)\n            cur_value %= a[i]\n            cur_value += (a[j] - 1)\n            cur_value %= a[j]\n            cur_value += a[i]\n            cur_value %= a[i]\n            cur_value += a[j]\n            cur_value %= a[j]\n            cur_value += a[i]\n            cur_value %= a[i]\n            cur_value += a[j]\n            cur_value %= a[j]\n            cur_value += a[i]\n            cur_value %= a[i]\n            cur_value += a[j]\n            cur_value %= a[j]\n            max_value = max(max_value, cur_value)\n    return max_value\n    return max(a)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr, key=lambda x: x % arr[0])\n    return str(arr[-1])\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def create_divisors():\n        divisors = []\n        for i in range(2, int(stdin) + 1):\n            divisors.append(i)\n            for j in range(i * 2, int(stdin) + 1, i):\n                divisors.append(j)\n        return divisors\n\n    divisors = create_divisors()\n    max_value = -1\n\n    for i in range(len(divisors)):\n        value = stdin\n        for j in range(i):\n            value = value * divisors[j]\n        max_value = max(max_value, value)\n\n    return max_value\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = map(int, stdin.strip().split())\n    max_f = 0\n    for i in range(1, N + 1):\n        f = (i % a[0]) + (i % a[1]) + (i % a[2])\n        if f > max_f:\n            max_f = f\n    return str(max_f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = map(int, stdin.split())\n\n    max_v = 0\n    for n in a:\n        val = n % max(a)\n        max_v = max(max_v, val)\n\n    return str(max_v)"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # result = []\n    # for line in stdin.split('\\n'):\n    #     result.append(line)\n    #     if len(result) == 2:\n    #         first, second = map(int, result)\n    #         for i in range(1, 3):\n    #             if first == second:\n    #                 if first == first:\n    #                     print(result)\n    #                 first, second = map(int, result[i:i + 2])\n    #                 if first == second:\n    #                     print(result)\n    #                 result = result[i:]\n    #     else:\n    #         first, second = map(int, result)\n    #         if first == second:\n    #             print(result)\n    #         result = []\n    # return 'No'\n\n    result = []\n    for line in stdin.split('\\n'):\n        result.append(line)\n        if len(result) == 2:\n            first, second = map(int, result)\n            for i in range(1, 3):\n                if first == second:\n                    if first == first:\n                        print(result)\n                    first, second = map(int, result[i:i + 2])\n                    if first == second:\n                        print(result)\n                    result = result[i:]\n        else:\n            first, second = map(int, result)\n            if first == second:\n                print(result)\n            result = []\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    lst = []\n    for i in range(N):\n        lst.append(list(map(int, stdin.split()[i * 2 + 1].split())))\n    return \"Yes\" if doublets(lst) else \"No\"\n\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n\n    count = 0\n    for index in range(1, len(data)):\n        d1, d2 = map(int, data[index].split())\n        if d1 == d2:\n            count += 1\n        if count == 3:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = list(map(int, stdin.split()))\n    for i in range(1, len(d)-1):\n        d1, d2 = d[i-1], d[i]\n        if d1 == d2:\n            for j in range(i+1, len(d)):\n                if d1 == d[j]:\n                    d1, d2 = d[j], d[j-1]\n                    if d1 == d2:\n                        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    x, y = map(int, stdin.split())\n    if len(set([x, y])) == 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 1 2\n   ... 6 6\n   ... 4 4\n   ... 3 3\n   ... 3 2\n   ... ''')\n    'Yes'\n    >>> solution('''\n   ... 5\n   ... 1 2\n   ... 6 6\n   ... 4 4\n   ... 3 3\n   ... 1 2\n   ... ''')\n    'No'\n    >>> solution('''\n   ... 5\n   ... 1 2\n   ... 6 6\n   ... 4 4\n   ... 1 2\n   ... ''')\n    'Yes'\n    \"\"\"\n    d = {}\n    for i in range(3):\n        d[tuple(map(int, stdin.split()))] = (i + 1) % 3\n    for i in range(3, len(stdin.split())):\n        d[tuple(map(int, stdin.split()))] = (i + 1) % 3\n        d[tuple(map(int, stdin.split()))] = (i + 1) % 3\n        if d[(int(stdin.split()[i - 1]), int(stdin.split()[i - 2]))]!= d[(int(stdin.split()[i - 3]), int(stdin.split()[i - 4]))]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    d = {}\n    count = 1\n    for i in range(n):\n        d[i] = int(stdin.strip())\n\n    for i in range(n):\n        if (d[i] == d[i+1]) or (d[i] == d[i+2]) or (d[i+1] == d[i+2]):\n            count += 1\n            if count >= 3:\n                return \"Yes\"\n        else:\n            count = 1\n\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    doublets = 0\n    for i in range(N):\n        dice = map(int, stdin.split())\n        doublets += 1 if dice[i] == dice[i+1] == dice[i+2] else 0\n    return \"Yes\" if doublets >= 3 else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d1 = int(stdin.split()[1])\n    d2 = int(stdin.split()[2])\n    d3 = int(stdin.split()[3])\n    d4 = int(stdin.split()[4])\n    # print(N,d1,d2,d3,d4)\n    count = 0\n    for i in range(N):\n        if d1 == d2 or d2 == d3 or d3 == d4:\n            count += 1\n        d1 = d2\n        d2 = d3\n        d3 = d4\n        d4 = random.randint(1, 6)\n    return \"Yes\" if count >= 3 else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if sum(1 for x, y in zip(stdin.split(), stdin.split()) if x == y) < 4 else 'Yes'\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    if radius < 1:\n        raise ValueError(\"must be 1 or larger\")\n    return int(radius * radius * 3.14159265359)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_circle_1 = 3.14159265359 * (r ** 2)\n    area_of_circle_2 = 3.14159265359 * (r ** 2) + 4 * 3.14159265359 * r\n    count_of_area_greater_than_area_of_circle_2 = 0\n    for x in range(2,101):\n        if area_of_circle_2 > area_of_circle_1:\n            count_of_area_greater_than_area_of_circle_2 += 1\n        area_of_circle_1 = area_of_circle_2\n        area_of_circle_2 = area_of_circle_1 + 4 * 3.14159265359 * x\n    return str(count_of_area_greater_than_area_of_circle_2)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    circle = radius * math.pi\n    circle1 = math.pi\n    area = circle / circle1\n    return (str(int(area)))\n    "
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    area = 3.14159 * radius ** 2\n    return str(int(area / 1))"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    return str(int(int(inputs[0])/int(inputs[0])))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I just wanted to go back to my code and have a try at it.\n    I didn't get all the instructions very well, so I was just trying to make it work for one test.\n    \"\"\"\n    radius = int(stdin)\n    return str(4 * radius * radius)"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '0'\n    >>> solution('1')\n    '0'\n    >>> solution('2')\n    '4'\n    >>> solution('3')\n    '8'\n    \"\"\"\n    r = int(stdin)\n    return str(4 * (r ** 2) > (r ** 2) + r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 1:\n        return 0\n    else:\n        return a*(a+1)/2\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    n = (r*2) + 1\n    numerator = r*r*math.pi\n    denominator = math.pi * r * r\n    print(int(numerator/denominator))\n    return"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r * r * 4 / 1)"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sides = stdin.split(' ')\n    for i in range(n):\n        if not int(sides[i]) < int(sides[i+1]) + int(sides[i+2]):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = list(map(int, stdin.split()))\n    longest_side = sum(l)\n    if longest_side <= max(l) + max(l) - max(l):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(int, stdin.strip().split()))\n    l = sorted(l)\n    if n == 2:\n        if l[1] <= l[0] + l[2]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if n == 1:\n            if l[0] >= l[1] + l[2]:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    longest = max(int(i) for i in stdin.split())\n    if n > 2 and longest < sum(int(i) for i in stdin.split()[1:]):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    sides = stdin.split()[1:]\n    for i in range(1, N):\n        if int(sides[i-1]) < int(sides[i]):\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'No'\n\n    input_list = stdin.split(' ')\n    l1 = int(input_list[0])\n    l2 = int(input_list[1])\n    l3 = int(input_list[2])\n    l4 = int(input_list[3])\n    max_l = max(l1, l2, l3, l4)\n\n    for i in range(3, n):\n        l = int(input_list[i])\n        if max_l < l:\n            return 'No'\n        max_l -= l\n    return 'Yes'\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin.split())\n    if n < 3 or max(s) > sum(s) + max(s[:-1]):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *lines = map(int, stdin.split())\n    L = sorted(lines)\n    return 'No' if len(set(L)) < N else 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    if 3 <= n <= 10 and sum(l) - max(l) >= max(l) - sum(l):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    L = list(map(int, stdin.split()[1:]))\n    for i in range(1, N):\n        if L[i-1] > max(L[i:]) + max(L[i-1:i]):\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    s = stdin.split()[1:]\n    c = []\n    for i in range(m):\n        c.append(int(s[i]))\n    a = set()\n    for i in range(1, n + 1):\n        if str(i) not in a:\n            for j in range(n):\n                if int(str(i)[j])!= c[j]:\n                    break\n            else:\n                print(i)\n                return\n        a.add(str(i))\n    return '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split(\" \")\n    n = int(m)\n    s_count = int(n/2)\n    while s_count > 0:\n        c_count = n-s_count\n        s = []\n        for _ in range(s_count):\n            s.append(input())\n        c = []\n        for _ in range(c_count):\n            c.append(input())\n        for i in range(1, c_count+1):\n            if int(\"\".join(c[:i])) < int(\"\".join(s[:i])):\n                return str(int(\"\".join(c[:i])))\n        s_count -= 1\n    return str(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n\n    # Get the 1st digit of the 1st element, the 2nd digit of the 2nd element, etc\n    for i in range(1, len(data)):\n        # Exclude the first digit if it's 0.\n        if data[i-1]!= 0:\n            # Get the first digit of the Nth element.\n            x = data[n-1] % 10\n            # Get the first digit of the (N-1)th element.\n            y = data[n-2] % 10\n            # Check if the first digit of the Nth element and the (N-1)th element are the same.\n            if x == y:\n                return '-1'\n\n    # The first digit of the Nth element must be greater than the 1st digit of the (N-1)th element.\n    for i in range(2, n):\n        # Get the first digit of the Nth element.\n        x = data[n-1] % 10\n        # Get the first digit of the (N-1)th element.\n        y = data[n-2] % 10\n        # Check if the first digit of the Nth element and the (N-1)th element are the same.\n        if x > y:\n            return '-1'\n\n    # Check if the 1st digit of the Nth element and the 1st digit of the (N-1)th element are the same.\n    x = data[n-1] % 10\n    y = data[n-2] % 10\n    if x > y:\n        return '-1'\n\n    # Check if the first digit of the Nth element is 1 and the second digit of the (N-1)th element is 9.\n    x = data[n-1] % 10\n    y = data[n-2] % 10\n    if x == 1 and y == 9:\n        return '-1'\n\n    # For all integers less than the Nth element, the sum of the 2 digits must be 1.\n    # And if the 2nd digit of the Nth element and the 2nd digit of the (N-1)th element are equal, the sum of the 2 digits of the Nth element must be equal to the 2nd digit of the (N-1)th element.\n    for i in range(2, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y!= 1:\n            return '-1'\n        if x == y:\n            x = data[n-1] % 10\n            y = data[n-2] % 10\n            if x + y!= y:\n                return '-1'\n\n    # For all integers less than the Nth element, the sum of the 3 digits must be 1.\n    # And if the 3rd digit of the Nth element and the 3rd digit of the (N-1)th element are equal, the sum of the 3 digits of the Nth element must be equal to the 3rd digit of the (N-1)th element.\n    for i in range(3, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y + y!= 1:\n            return '-1'\n        if x == y:\n            x = data[n-1] % 10\n            y = data[n-2] % 10\n            if x + y + y!= y:\n                return '-1'\n\n    # For all integers less than the Nth element, the sum of the 4 digits must be 1.\n    # And if the 4th digit of the Nth element and the 4th digit of the (N-1)th element are equal, the sum of the 4 digits of the Nth element must be equal to the 4th digit of the (N-1)th element.\n    for i in range(4, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y + y + y!= 1:\n            return '-1'\n        if x == y:\n            x = data[n-1] % 10\n            y = data[n-2] % 10\n            if x + y + y + y!= y:\n                return '-1'\n\n    # For all integers less than the Nth element, the sum of the 5 digits must be 1.\n    # And if the 5th digit of the Nth element and the 5th digit of the (N-1)th element are equal, the sum of the 5 digits of the Nth element must be equal to the 5th digit of the (N-1)th element.\n    for i in range(5, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y + y + y + y!= 1:\n            return '-1'\n        if x == y:\n            x = data[n-1] % 10\n            y = data[n-2] % 10\n            if x + y + y + y + y!= y:\n                return '-1'\n\n    # For all integers less than the Nth element, the sum of the 6 digits must be 1.\n    # And if the 6th digit of the Nth element and the 6th digit of the (N-1)th element are equal, the sum of the 6 digits of the Nth element must be equal to the 6th digit of the (N-1)th element.\n    for i in range(6, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y + y + y + y + y!= 1:\n            return '-1'\n        if x == y:\n            x = data[n-1] % 10\n            y = data[n-2] % 10\n            if x + y + y + y + y + y!= y:\n                return '-1'\n\n    # For all integers less than the Nth element, the sum of the 7 digits must be 1.\n    # And if the 7th digit of the Nth element and the 7th digit of the (N-1)th element are equal, the sum of the 7 digits of the Nth element must be equal to the 7th digit of the (N-1)th element.\n    for i in range(7, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y + y + y + y + y + y!= 1:\n            return '-1'\n        if x == y:\n            x = data[n-1] % 10\n            y = data[n-2] % 10\n            if x + y + y + y + y + y + y!= y:\n                return '-1'\n\n    # For all integers less than the Nth element, the sum of the 8 digits must be 1.\n    # And if the 8th digit of the Nth element and the 8th digit of the (N-1)th element are equal, the sum of the 8 digits of the Nth element must be equal to the 8th digit of the (N-1)th element.\n    for i in range(8, n):\n        x = data[n-1] % 10\n        y = data[n-2] % 10\n        if x + y + y + y + y + y + y + y!= 1:\n            return '-1'\n        if x == y:\n            x"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    for num in nums:\n        if num >= 0:\n            for i in range(m):\n                if num >= 10 ** i:\n                    nums[i] -= 10 ** i\n                    break\n        else:\n            break\n    return str(nums[0] * 10 ** (m - 1) + nums[1])"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = list(map(int, stdin.split(\" \")))\n    if N == 0:\n        print(-1)\n        return\n    ans = \"-\"\n    for i in range(N):\n        curr_ans = 0\n        for j in range(M):\n            curr_ans *= 10\n            curr_ans += int(stdin[i * M + j])\n        if curr_ans < 0:\n            curr_ans *= -1\n        if curr_ans < ans:\n            ans = curr_ans\n    print(ans)\nsolution(input())\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = -1\n    for _ in range(n):\n        nums = stdin.split()\n        n = int(nums[0])\n        m = int(nums[1])\n        if all(map(lambda x: 0 < int(x) <= 9, nums[2:m])):\n            # checking if answer is less than or equal to 0\n            if 0 <= int(nums[m]) < 10:\n                ans = max(ans, int(''.join(nums[2:m])))\n    return str(ans)\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(_) for _ in stdin.split())\n    int_array = [(int(_), _) for _ in stdin.split()]\n    for int_n, char in int_array:\n        if int_n <= 0:\n            continue\n        if int_n < 10:\n            if char >= int_n:\n                return '-1'\n            else:\n                continue\n        if not check_n_digit(int_n, N):\n            continue\n        if not check_m_digit(char, M):\n            continue\n        if not check_p_digit(int_n, N):\n            continue\n        if not check_c_digit(char, M):\n            continue\n        return str(int_n)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if 1 <= N <= 3 and 1 <= M <= 5:\n        for i in range(M):\n            s_i, c_i = map(int, stdin.split())\n            if 1 <= s_i <= N and 0 <= c_i <= 9:\n                print(s_i * c_i)\n                break\n        else:\n            print(-1)\n    else:\n        print(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 1 and M == 1:\n        return '-1'\n    for i in range(1, N + 1):\n        l = list(map(int, stdin.split()[i - 1].split()))\n        l.reverse()\n        if l == sorted(l):\n            if all(map(lambda x: x >= 0, l)):\n                return''.join(list(map(str, l)))\n    return '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    min_num = min(nums)\n    max_num = max(nums)\n    \n    for i in range(min_num, max_num + 1):\n        if is_valid(i, nums):\n            return str(i)\n    return \"No\"\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    cnt = 0\n    for a in range(1,n+1):\n        for b in range(1,n+1):\n            c = n-a-b\n            if (c % k) == 0:\n                cnt += 1\n                if (c+a) % k == 0 and (c+b) % k == 0:\n                    continue\n            if (c % k)!= 0:\n                continue\n            if (c+a) % k == 0 and (c+b) % k == 0:\n                cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num, k = map(int, stdin.split())\n    mul = 0\n    ans = []\n    for i in range(1, num):\n        for j in range(1, num):\n            for k in range(1, num):\n                if (i + j) % k == 0 and (j + k) % i == 0 and (i + k) % j == 0:\n                    ans.append((i, j, k))\n    for t in ans:\n        if (t[0] * t[1] + t[2]) % k == 0:\n            mul += 1\n    return str(mul)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if (a + b) % k!= 0 and (b + c) % k!= 0 and (c + a) % k!= 0:\n                    res += 1\n    return str(res)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return '\\n'.join(f'{i},{j},{k*(i+j)}' for i in range(1, n) for j in range(1, n) if k*(i+j) > n)"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_k = map(int, stdin.split())\n    possible_triple = set()\n    for a in range(1, input_n):\n        for b in range(1, input_n):\n            c = input_k - a - b\n            if a + b + c == input_k and a!= b and a!= c and b!= c:\n                possible_triple.add((a, b, c))\n    return str(len(possible_triple))\n\n\"\"\"\n\nn, k = input().split()\nn = int(n)\nk = int(k)\npossible_triple = set()\nfor a in range(1, n):\n    for b in range(1, n):\n        c = k - a - b\n        if a + b + c == k and a!= b and a!= c and b!= c:\n            possible_triple.add((a, b, c))\nprint(len(possible_triple))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # this function should return a string, not a float\n    return stdin.split(' ')[0]\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    total = 0\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            for c in range(b, n + 1):\n                if a + b + c == k and a * k == b * k == c * k:\n                    print('{},{},{}'.format(a, b, c))\n                    total += 1\n    print(total)\n    return total\n\nsolution(\"3 2\")\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            if i!= j:\n                for k in range(1, N):\n                    if j!= k and i!= k:\n                        if (i + j + k) % K == 0:\n                            answer += 1\n    return str(answer)"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N, K = map(int, stdin.split())\n\n    count = 0\n    for a in range(1, N):\n        for b in range(1, N):\n            for c in range(1, N):\n                if a + b + c >= N:\n                    continue\n                if a * K % N == 0 and b * K % N == 0 and c * K % N == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            for k in range(1, N+1):\n                if (i+j+k) % K == 0:\n                    count += 1\n    return count\nsolution(input())\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = \"\"\n    while N > 0:\n        if N % -2 == 0:\n            result = str(-2) + result\n        else:\n            result = str(-(N % -2)) + result\n        N //= -2\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = \"\"\n    while n!= 0:\n        s = str(n % -2) + s\n        n = n // -2\n    return s\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit():\n        raise Exception('Invalid Input')\n    else:\n        N = int(stdin)\n        if N < 0:\n            raise Exception('Negative number is not a valid number')\n\n    ans = ''\n    while N >= -2:\n        ans += '1' if N % -2 == 1 else '0'\n        N = N // -2\n\n    return ans[::-1] or '0'\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = str(bin(n))[2:]\n    string = '0' * (len(string) - 1) + string[-1]\n    return string\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = ''\n    while N > 0:\n        result = str(int(result) + 2) + result\n        N -= 1\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = ''\n    while n > 0:\n        if n % 2 == 0:\n            s = '0' + s\n        else:\n            s = '1' + s\n        n //= 2\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = \"\"\n    while num:\n        if num == 0:\n            result = \"0\" + result\n        else:\n            if num % 2:\n                result = \"1\" + result\n            num //= 2\n    return result\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Description:\n    -----------\n    Given an integer N, find the base -2 representation of N when the following are all satisfied:\n    - S is a string consisting of 0 and 1.\n    - Unless S = 0, the initial character of S is 1.\n    - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\n    It can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\n    -----Constraints-----\n    - Every value in input is integer.\n    - -10^9 \\leq N \\leq 10^9\n\n    -----Input-----\n    N\n\n    -----Output-----\n    Print the base -2 representation of N.\n\n    '''\n\n    n = int(stdin)\n\n    if n == 0:\n        return '0'\n\n    res = ''\n    while n >= 2:\n        res = str(n % 2) + res\n        n = n // 2\n    return '1' + res\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    base = []\n    while n > 0:\n        if n & 1:\n            base.append('1')\n        else:\n            base.append('0')\n        n = n >> 1\n    return ''.join(base)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n\n    n, m = list(map(int, stdin[0].split()))\n    k = list(map(int, stdin[1].split()))\n    k.sort()\n\n    min_money = m * k[n - 1]\n    for i in range(n - 2, -1, -1):\n        if min_money >= m * k[i]:\n            min_money -= m * k[i]\n            if min_money < m:\n                return '{:.2f}'.format(min_money)\n        else:\n            continue\n\n    return '{:.2f}'.format(min_money)"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split(' '))\n    A = []\n    B = []\n    for i in range(N):\n        a, b = map(int, stdin.strip().split(' '))\n        A.append(a)\n        B.append(b)\n    ans = float('inf')\n    for i in range(N):\n        # min_b = min(B[i], M)\n        min_b = M\n        for j in range(i):\n            if A[j] < A[i] and min_b >= B[j]:\n                min_b = min(min_b, B[j])\n        ans = min(ans, min_b)\n    return str(ans)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # print(f'Input: {stdin}')\n    # x = input().split(' ')\n    # N, M = int(x[0]), int(x[1])\n    # A = [int(x) for x in input().split(' ')]\n    # B = [int(x) for x in input().split(' ')]\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A = sorted(A)\n    B = sorted(B)\n    # print(f'N = {N}, M = {M}')\n    # print(f'A = {A}')\n    # print(f'B = {B}')\n    n = len(A)\n    # print(f'n = {n}')\n    i = 0\n    j = n - 1\n    ret = 0\n    while i <= j:\n        if A[i] + B[j] <= M:\n            i += 1\n            j -= 1\n            ret += A[i] + B[j]\n        else:\n            j -= 1\n    return str(ret)"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = list(map(int, stdin.split()))\n    if (n == 1 and m == 1) or n == m == 1:\n        return str(0)\n    if n == 1 and m == 1:\n        return str(float('inf'))\n    \n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    \n    best = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                for k in range(n):\n                    if k!= j:\n                        ans = arr[i][0] + arr[j][0] + arr[k][0]\n                        ans = min(ans, best)\n    \n    return str(ans)\n    \n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    energy_drink_price = sorted([list(map(int, stdin.split())) for _ in range(n)], key=lambda x: x[1], reverse=True)\n\n    money = 0\n    for i in range(m):\n        if energy_drink_price[i][0] > money:\n            break\n        money += energy_drink_price[i][1]\n\n    if money > m:\n        return str(m)\n    else:\n        return str(money)"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def bt(arr):\n        if not arr: return 0\n        if len(arr) == 1: return arr[0]\n        \n        for i in range(len(arr)):\n            tmp = arr[i]\n            arr[i] = min(bt(arr[:i]), bt(arr[i+1:]))\n            if arr[i] <= tmp:\n                return tmp\n        return tmp\n    \n    stdin = stdin.split(\"\\n\")\n    N, M = map(int, stdin[0].split())\n    store_num = []\n    for i in range(1, N+1):\n        store_num.append(int(stdin[i]))\n    \n    return str(bt(store_num))\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = sorted(list(map(int, stdin.split())))\n    B = sorted(list(map(int, stdin.split())))\n    ans = -1\n    for i in range(1, N):\n        if A[i] > M:\n            continue\n        ans = max(ans, A[i] * M + sum(B[i:]) + (M - A[i]) * max(B[:i]))\n    return str(ans)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    for i in range(N):\n        arr[i] = (M // arr[i]) * arr[i]\n    return str(min(arr))\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b_max = max(b)\n    b_min = min(b)\n    if b_max > m:\n        return \"IMPOSSIBLE\"\n    elif b_min <= m:\n        return \"POSSIBLE\"\n    else:\n        while m > 0:\n            m = m - b_min\n            a.append(b_min)\n            b_min = b_min + 1\n            while m > 0 and b_min > 1:\n                m = m - b_min\n                b_min = b_min - 1\n                a.append(b_min)\n        return str(sum(a))\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = sorted(A)\n    print(sum(B[i] for i in range(n) if sum(B[:i]) + sum(B[i + 1:]) <= m))\n    return \"\""
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    h: list = list(map(int, stdin.split()))\n    max_count: int = 0\n\n    if N <= 0 or N > 10^5:\n        print(max_count)\n        return\n\n    max_count = 1\n    left = 1\n    right = N - 1\n\n    while left < right:\n        if h[left] >= h[right]:\n            max_count += 1\n            left += 1\n        else:\n            max_count += 1\n            right -= 1\n\n    print(max_count)\n    return\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.strip().split())\n    cur = 0\n    while n > 1:\n        if h[cur] >= h[cur+1]:\n            n -= 1\n        cur += 1\n    return str(cur)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n\n    # output = ''\n\n    i = 1\n    while i <= n:\n        if i < n:\n            if h[i] > h[i - 1]:\n                h[i] -= 1\n                i += 1\n            else:\n                h[i] += 1\n                i += 2\n        else:\n            break\n\n    return str(h.count(0))\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = len(stdin.split())\n    arr = list(map(int, stdin.split()))\n    max_val = 0\n    for i in range(1, N):\n        if (arr[i] > arr[i - 1]):\n            max_val = max(max_val, (arr[i] - arr[i - 1]) // 2)\n    return str(max_val)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    max_count = 0\n    while arr:\n        max_count += 1\n        arr = max_square(arr, N)\n    return max_count\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    h = list(map(int, lines[1].split()))\n    ans = 0\n    h = h + h + h\n    h.append(0)\n    h.insert(0, 0)\n    h.pop(0)\n    while len(h) > 1:\n        m = max(h)\n        if m > h[0]:\n            ans += 1\n            for i in range(0, N):\n                if h[i] > m:\n                    h[i] = h[i - 1]\n        h = h[:N]\n    return str(ans)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def test(n, h):\n        if n == 1:\n            return h\n        h_next = h * h\n        h_prev = 0\n        while h_next >= h_prev:\n            h_prev = h_next\n            h_next = h * h + h\n        if h_next <= h:\n            return test(n-1, h)\n        return test(n-1, h) + test(n-1, h_next)\n    return str(test(int(stdin.split()[0]), int(stdin.split()[1])))\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.append(arr.pop(0))\n\n    d = {}\n    max_times = 0\n    cur_times = 0\n\n    for i, h in enumerate(arr):\n        cur_times += 1\n        if h in d:\n            max_times = max(max_times, d[h] + 1)\n        else:\n            d[h] = cur_times\n\n    return str(max_times)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = [int(h) for h in stdin.split()]\n\n    # create matrix\n    matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        matrix[0][i] = H[i]\n\n    for i in range(1, N):\n        for j in range(N - i):\n            matrix[i][j] = max(matrix[i - 1][j], H[j] + matrix[i][j + i])\n\n    return str(matrix[-1][0])\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    height = [int(x) for x in stdin.split()]\n\n    dp = [[0] * 2 for _ in range(N)]\n    dp[0] = height\n\n    for i in range(1, N):\n        for j in range(2):\n            if j == 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][1] + height[i])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][0] + height[i])\n\n    return str(max(dp[N - 1][0], dp[N - 1][1]))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    res = 0\n    for i in seq:\n        res += abs(i // 2 - i)\n    return str(res)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # the max number of operations needed is k because it has to be at least k even though there are less than k elements in the array.\n    # the question itself does not say whether we need to delete a number or not so we will count them all.\n    # we will count them all and subtract from n if we had to delete some number.\n    # when we need to delete at least k we will need to count k times from the beginning and one from the end.\n    count_arr = n - k\n    count_delete = 0\n    delete_at = 0\n    while count_arr > 0:\n        delete_at += 1\n        if delete_at > count_arr:\n            delete_at = 0\n        count_arr -= delete_at\n\n    if delete_at == 0:\n        return str(n - k)\n    count_arr = n - k - delete_at\n    while count_arr >= 0:\n        delete_at += 1\n        if delete_at > count_arr:\n            delete_at = 0\n        count_arr -= delete_at\n\n    return str(count_arr + delete_at)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    k = a[0]\n    a.sort()\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    def recurse(n, k, a):\n        if n == 1:\n            return 0\n        if k < 1:\n            return float('inf')\n        if k == 1:\n            if a[n - 1]!= 0:\n                return float('inf')\n            else:\n                return 0\n        m = int(a[n - 1] / 2)\n        l = recurse(n - 1, k - m, a)\n        r = recurse(n - 1, k - m - 1, a)\n        l = l + m\n        r = r + m\n        return min(l, r)\n\n    print(recurse(n, k, a))\n\n\nsolution(\"5 3\\n1 2 2 4 5\")\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n, k = map(int, stdin[0].split())\n    a = list(map(int, stdin[1].split()))\n    cur_sum = sum(a)\n    max_sum = cur_sum\n    max_k = 0\n    prev_k = -1\n    while cur_sum > k:\n        cur_sum -= a[prev_k]\n        prev_k += 1\n        cur_sum += a[prev_k]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_k = prev_k\n    return max_k\n\nsolution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\")"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = sorted([int(n) for n in stdin.split()])\n    \n    i = 0\n    while i < len(nums) and nums[i] <= k:\n        k -= nums[i]\n        i += 1\n    \n    return i\n    \n\nsolution(input())\n\n1\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    visited = set()\n    visited.add(tuple(arr))\n    res = k\n    for i in range(1, k + 1):\n        if i in visited:\n            continue\n        cur_sum = 0\n        cur_count = 0\n        for j in range(n):\n            cur_sum += arr[j]\n            if cur_sum == i:\n                cur_count += 1\n            elif cur_sum > i:\n                break\n        res = min(res, cur_count)\n    return str(res)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    count = 0\n    while k > 1:\n        m = 0\n        for i in a:\n            if i % 2 == 1:\n                m += 1\n        if m == 0:\n            return \"0\"\n        k = m\n        a = []\n        for i in a:\n            if i % 2 == 1:\n                a.append(i)\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split()]\n    # arr = [1, 2, 2, 4, 5]\n    # arr = list(range(1, 100))\n    # arr = arr[:50]\n    # print(arr)\n    # arr.sort()\n    # print(arr)\n    # m = (sum(arr) // 2)\n    # print(m)\n\n    # print(arr)\n    # n = len(arr)\n    # print(n)\n    # min_op = n - m\n    # print(min_op)\n\n    # if m in arr:\n    #     print(\"Yes\")\n    # else:\n    #     print(\"No\")\n\n    # for i in range(1, n):\n    #     if arr[i-1]!= m:\n    #         continue\n    #     else:\n    #         arr[i] = 0\n    #         arr[i-1] = 0\n    #         min_op += 1\n    #     i += 1\n    #     if i == n:\n    #         break\n    #     if arr[i]!= m:\n    #         continue\n    #     else:\n    #         arr[i] = 0\n    #         arr[i-1] = 0\n    #         min_op += 1\n    #     i += 1\n    #     if i == n:\n    #         break\n    #     if arr[i]!= m:\n    #         continue\n    #     else:\n    #         arr[i] = 0\n    #         arr[i-1] = 0\n    #         min_op += 1\n    #     i += 1\n    #     if i == n:\n    #         break\n    #     if arr[i]!= m:\n    #         continue\n    #     else:\n    #         arr[i] = 0\n    #         arr[i-1] = 0\n    #         min_op += 1\n    #\n    # print(min_op)\n\n    m = sum(arr) // 2\n    min_op = 0\n    for i in range(len(arr)):\n        if m == arr[i]:\n            min_op += 1\n            arr[i] = 0\n        i += 1\n    return str(min_op)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    k = a[1]\n    x = a[0]\n\n    count = 0\n    curr = 1\n    while curr <= k:\n        count += 1\n        if curr > k:\n            break\n        curr *= 2\n\n    return count if curr <= k else 0\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_val = a[0]\n    min_val = a[0]\n    moves = 0\n    i = 0\n    while min_val < max_val:\n        if min_val == max_val:\n            break\n        if min_val > max_val:\n            max_val = min_val\n        min_val += 1\n        moves += 1\n        i = (i + 1) % len(a)\n        a[i] = a[i] + 1\n        a[i] = a[i] - 1\n        if min_val == max_val:\n            break\n    return moves\n\nsolution(\"5 5\")\nsolution(\"7 5\")\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = min(\n        (i + 1) for i in range(n)\n        if a[i] >= a[min(n, a.index(max(a)) + 1)]\n    )\n    return str(res)\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) <= k:\n        return \"0\"\n    min_v = min(a)\n    max_v = max(a)\n    if min_v == max_v:\n        return \"0\"\n    i = 0\n    moves = 0\n    while min_v!= max_v:\n        moves += 1\n        if i == len(a) - 1:\n            return str(moves)\n        if a[i] < min_v:\n            a[i] += 1\n            min_v = min(a)\n        if a[i] > max_v:\n            a[i] -= 1\n            max_v = max(a)\n        i += 1\n    return str(moves)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def compute(arr):\n        m, M, count, ans = float('inf'), float('inf'), 0, 0\n        for i in range(n):\n            if arr[i] < m:\n                m, M = arr[i], m\n            elif arr[i] > M:\n                M = arr[i]\n\n            count += 1\n\n            if count == k:\n                ans += 1\n                count = 0\n\n        return ans\n\n    return str(compute(a))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    s1, s2 = 1, 1\n    mn, mx = a[0], a[-1]\n    for i in range(1, n):\n        if a[i] < mn:\n            mn, s1 = a[i], s1 + 1\n        if a[i] > mx:\n            mx, s2 = a[i], s2 + 1\n    return min(s1, s2)\n\nsolution(input())\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # print(N, K, a)\n\n    m1 = m2 = -1\n    mx = mn = 0\n\n    for i in range(N):\n        if m1 == -1 or m1 > a[i]:\n            m1 = a[i]\n        if m2 == -1 or m2 < a[i]:\n            m2 = a[i]\n\n    for i in range(N):\n        if m1 == a[i] or m2 == a[i]:\n            continue\n        mx = max(mx, a[i])\n        mn = min(mn, a[i])\n\n    # print(m1, m2, mx, mn)\n\n    ans = 0\n    while m1 < mx and m2 > mn:\n        ans += 1\n        if m1 == m2:\n            m1 += 1\n        elif m1 < m2:\n            m1 += 1\n        else:\n            m2 -= 1\n\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    m = min(a)\n    count = 0\n    while m < k:\n        for i in range(len(a)):\n            if a[i] == m:\n                a[i] += 1\n                m = min(a)\n        count += 1\n    print(count)\n\nsolution(input())"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    if n <= k:\n        return 0\n    a = sorted(map(int, stdin.split()))\n    mx = a[-1]\n    mn = a[0]\n    cnt = 0\n    for _ in range(k):\n        cnt += abs(mx - mn) + 1\n        mx = max(mx, mn)\n        mn = min(mn, mx)\n    return cnt\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    print(sum([(x + 1 - y + 1) // 2 for x, y in zip(sorted(a), sorted(a, reverse=True))]))"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k >= len(a):\n        return \"0\"\n    ans = k + 1\n    for i in range(len(a)):\n        if a[i] == k:\n            return str(ans)\n        else:\n            ans -= 1\n    return str(ans)\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # return  # Replace this by your code\n    q = int(stdin)\n    for i in range(q):\n        a, b, c = list(map(int, stdin.split()))\n        print(a, b, c)\n    return\nsolution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\")\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum amount of money required for water polcarp, where the price of one liter of water is $1$ and of the two bottles is $2$.\n    \"\"\"\n    q = int(stdin.strip())\n    for _ in range(q):\n        n, a, b = map(int, stdin.strip().split())\n        print(min(a*n, b*n))\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = parse_input(stdin)\n    print_output(stdin, solution_part1(data))\n    return ''\n\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = list(map(int,stdin.split()))\n    return str(min(n*a,n*b))"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    lines = stdin.splitlines()\n    n = lines[0]\n    a = lines[1]\n    b = lines[2]\n    \n    #pdb.set_trace()\n    result = []\n    for i in range(3, q + 1):\n        number = str(int(n) + int(a) + int(b))\n        #print(number)\n        result.append(number)\n        n = result[i-1]\n        #print(result[i-1])\n        a = lines[i].split()[0]\n        b = lines[i].split()[1]\n        \n    return '\\n'.join(result)"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    max_a = (10 ** 9) // a\n    max_b = (10 ** 9) // b\n    min_c = (10 ** 9) // 2\n    max_c = (10 ** 9) // 2\n    ans = min_c\n    for i in range(n):\n        min_c = min(min_c, a*i + b)\n        max_c = max(max_c, a*i + b)\n        ans = min(ans, max_a + max_b - min_c)\n    return str(ans)"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for _ in range(int(stdin)):\n        n, a, b = stdin.split()\n        a = int(a)\n        b = int(b)\n        answer += str(min(a, b) * int(n))\n    return answer\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n * a, n * b))"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    n_cost = 0\n    b_cost = 0\n    for i in range(N):\n        if n_cost <= A and n_cost + 1 <= B:\n            n_cost += 1\n        if b_cost <= A and b_cost + 1 <= B:\n            b_cost += 1\n    return str(n_cost) + \"\\n\" + str(b_cost)\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    a_b_s = stdin.split('\\n')[1:]\n    a_b_s = [list(map(int, i.split())) for i in a_b_s]\n\n    from functools import lru_cache\n\n    @lru_cache(maxsize=None)\n    def calc(n, a, b):\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n\n        return calc(n - 1, a + a * (n - 1), b + b * (n - 1))\n\n    ans = []\n    for i in range(q):\n        a, b = a_b_s[i]\n        ans.append(calc(a, 0, 0))\n    print('\\n'.join(map(str, ans)))\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    L = list(map(int, stdin.split()[1].split()))\n    X = int(stdin.split()[2])\n    result = 0\n    for i in range(len(L)):\n        if X <= L[i]:\n            result += 1\n        else:\n            result = result + 1\n            L[i] = L[i] + (X - L[i])\n    return result\nprint(solution(input()))"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if l[i] > l[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(max(dp))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s =''.join(map(str, map(int, stdin.split())))\n    return str(binomial_coefficient(n, x))\n\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 2')\n    '1'\n    >>> solution('3 6')\n    '2'\n    >>> solution('4 3')\n    '2'\n    >>> solution('1 2')\n    '0'\n    \"\"\"\n    N, X = stdin.split(\" \")\n    N, X = int(N), int(X)\n    L = sorted(list(map(int, input().split(\" \"))))\n    bounces = 0\n    for i in range(1, len(L)):\n        if L[i-1] <= X:\n            bounces += 1\n    return str(bounces)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, x) = stdin.split()\n    return '{}\\n{}'.format(2 * int(n), x)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1 2')\n    '1'\n    >>> solution('5 1')\n    '4'\n    >>> solution('1 1')\n    '0'\n    >>> solution('1 1 2')\n    '1'\n    >>> solution('1 2 3 4 5')\n    '5'\n    '''\n    stdin = list(map(int, stdin.split()))\n    N, X = stdin[0], stdin[1]\n    L = list(stdin[2:])\n    count = 0\n    while count < N:\n        count += 1\n        if L[count] <= X:\n            X = L[count] + X\n        else:\n            count = 0\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        if 0 <= l[i] <= x:\n            count += 1\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split(\" \"))\n    coordinates = [0] + list(map(int, stdin.split(\" \")))\n\n    result = 0\n    i = 1\n    while i <= N:\n        if coordinates[i] - coordinates[i-1] > X:\n            result += 1\n        i += 1\n\n    return result"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # build input data from string\n    data = []\n    n_input, x_input = stdin.splitlines()\n    n_input = int(n_input)\n    x_input = [int(x) for x in x_input.split()]\n\n    for i in range(1, n_input + 1):\n        data.append((x_input[i - 1], x_input[i]))\n\n    # data = [(0, 5), (3, 8), (5, 10), (6, 11), (7, 12)]\n\n    # set to record the output\n    count = 0\n    # for each bounce\n    for i in range(len(data)):\n        # if the current bounce is the same as the previous one\n        if i == 0:\n            count += 1\n        # if the current bounce is greater than or equal to the previous one\n        elif data[i][0] >= data[i - 1][1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = stdin.split(\"\\n\")\n\n    # check if each word is a palindrome\n    for i, word in enumerate(words):\n        if word[::-1]!= word:\n            return \"No\"\n\n    # find the first word\n    for i, word in enumerate(words):\n        if word == word[::-1]:\n            return \"Yes\"\n        else:\n            words.append(word)\n            words.pop(0)\n    return \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if(stdin) else \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = [stdin[i] for i in range(2, N + 2)]\n    for i in range(1, N):\n        if words[i][0]!= words[i - 1][-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        words = stdin.split('\\n')\n        word = words[i]\n        for j in range(len(word) - 1):\n            if word[j]!= word[j + 1]:\n                break\n        else:\n            if len(word) == len(word[::-1]) and word[0] == word[-1]:\n                return 'Yes'\n    return 'No'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n    hoge\n    english\n    hoge\n    enigma\n    ''')\n    'No'\n    >>> solution('''5\n    hoge\n    english\n    fuga\n    enigma\n    ''')\n    'Yes'\n    \"\"\"\n    # your code goes here\n    pass\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin[0])\n    words = stdin[1:]\n    words = [w.rstrip() for w in words.split(':')]\n    words = {w for w in words if len(w) == N}\n    if len(words) == N:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n    'No'\n    >>> solution(\"4\")\n    'Yes'\n    \"\"\"\n    n = int(stdin.strip())\n    words = []\n    for i in range(1, n + 1):\n        words.append(stdin.split()[i])\n    words = sorted(words)\n    for word in words:\n        if word[0] == word[-1]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        word = stdin.strip().split()[i]\n        if len(word) == 1:\n            continue\n        if word[0] == word[-1]:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a string of words from Takahashi, determine if each word satisfies the conditions of shiritori.\n\n    >>> solution('''hoge\n   ... english\n   ... hoge\n   ... enigma''')\n    No\n    \"\"\"\n    n = int(stdin)\n    words = stdin.split()\n    if len(words) < n:\n        return 'No'\n    for i in range(n - 1, -1, -1):\n        if words[i] == words[i - 1][::-1]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = map(lambda s: s.strip(), stdin.split())\n    #print(N)\n    #print(W)\n    if len(set(W)) == len(W):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split(\" \")\n    A, B = int(A), int(B)\n    return str(max(min(A, B) - max(A, B) + 1, min(A, B) * (A + 1) // 2))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A * (A + 1) // 2, B * (B + 1) // 2))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n: int) -> int:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact\n\n    def comb(n: int, k: int) -> int:\n        return factorial(n) // (factorial(k) * factorial(n-k))\n\n    A, B = map(int, stdin.split())\n    if A > 0 and B > 0 and A!= B:\n        return '{}'.format(comb(A, A) // comb(B, A))\n    else:\n        return '{}'.format(comb(A, A) // comb(B, B))"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(min(A, B)) + \"\\n\" + str(max(A, B)) + \"\\n\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '0'\n    return str(int(a * b / (a + b)))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    ans = (A + 1) * (B + 1) // 2\n    return str(ans)\n\"\"\"\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(A * 3)\n    elif A + 1 == B:\n        return str(A * 2)\n    return str(A * 3 + A * 2)"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_pieces = a if a < b else b\n    return str(min_pieces)\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > 6 or B > 6:\n        return \"Invalid\"\n    if A == 6:\n        if (B - 4) % 2 == 0:\n            return str(3*(B-4)//2)\n        else:\n            return str(3*(B-4)//2 + 1)\n    if A == 5:\n        if (B - 5) % 2 == 0:\n            return str(2*(B-5)//2)\n        else:\n            return str(2*(B-5)//2 + 1)\n    return \"Invalid\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        return str(int((a - b) / 2))\n    if a < b:\n        return str(int((b - a) / 2))"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('b', 'x').replace('c', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    return \"\".join([\"x\" if c.islower() else c for c in string])\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\" \", \"x\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    return ''.join(char * 3 if char!='' else 'x' for char in S)\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a','x').replace('e','x').replace('i','x').replace('o','x').replace('s','x').replace('u','x')"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    N = N - 1\n    while(N > 0):\n        if arr[N] == arr[N - 1]:\n            arr.pop(N)\n            arr.pop(N - 1)\n            N = N - 1\n        else:\n            N = N - 1\n    if(len(arr) == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    stack = []\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            while stack and stack[-1] > arr[i]:\n                stack.pop()\n            if stack and stack[-1] > arr[i-1]:\n                return \"No\"\n            stack.append(arr[i-1])\n        else:\n            stack.append(arr[i])\n    \n    return \"Yes\" if stack == sorted(stack) else \"No\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(N):\n        if i == 0:\n            if H[i] > H[i + 1]:\n                count += 1\n                H[i] -= 1\n                H[i + 1] -= 1\n        else:\n            if H[i - 1] > H[i]:\n                count += 1\n                H[i - 1] -= 1\n                H[i] -= 1\n    if count == N - 1:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    if h == h[::-1]:\n        print('Yes')\n    else:\n        print('No')\n\n\nsolution(input())\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = list(map(int, stdin.strip().split()))\n    res = False\n    for i in range(N):\n        if H[i] > max(H[:i]+H[i+1:]):\n            res = True\n            break\n    print(\"Yes\" if res else \"No\")\n    return \"Yes\" if res else \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    heights.sort()\n    for i in range(n):\n        if heights[i]!= heights[i + 1] - 1:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = stdin.split()\n    for i in range(len(heights)):\n        heights[i] = int(heights[i])\n    # print(heights)\n    for i in range(1, len(heights)):\n        if heights[i] < heights[i - 1]:\n            # print(\"No\")\n            return \"No\"\n    # print(\"Yes\")\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 1 1 3\n   ... ''')\n    'Yes'\n    \"\"\"\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    stack = [heights.pop()]\n    while heights:\n        h = stack.pop()\n        h -= 1\n        if h > heights[-1]:\n            return 'No'\n        stack.append(h)\n        heights.pop()\n    return 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = stdin.strip().split()\n\n    for i in range(1, len(heights)):\n        if int(heights[i-1]) >= int(heights[i]):\n            return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n\n    if N == 1:\n        return \"Yes\"\n    else:\n        is_possible = False\n\n        for i in range(1, N):\n            if h[i - 1] <= h[i]:\n                continue\n            else:\n                h[i - 1] = h[i - 1] - 1\n                if h[i - 1] == h[i]:\n                    is_possible = True\n\n        if is_possible:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    codes = list(map(int, stdin.split()))\n    codes.sort(key=lambda x: (x, 0))\n    count = 0\n    for i in range(N):\n        current = codes[i]\n        for j in range(M):\n            if current <= codes[j] + C:\n                count += 1\n                break\n    return count\n\n\nsolution()\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = list(map(int, stdin.split()))\n    b_arr = list(map(int, input().split()))\n    a_arr = list(map(int, input().split()))\n    code_count = 0\n\n    for i in range(n):\n        for j in range(m):\n            if (a_arr[j] + b_arr[i] + c) > 0:\n                code_count += 1\n\n    return str(code_count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin == '1' else '0'\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = int(stdin)\n    sum = 0\n    for i in range(0, N):\n        for j in range(0, N):\n            sum += A[i] * B[j]\n            if sum >= 0 and sum > C:\n                break\n    return str(i+1)\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = stdin.split()\n    A = list(map(int, stdin.split()[1:]))\n    B = list(map(int, stdin.split()[1:]))\n    C = int(C)\n\n    for i in range(len(A)):\n        # print(A[i] * B[i])\n        if (A[i] * B[i]) + C > 0:\n            print(i + 1, end=' ')\n            return A, B, C\n    return None\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    a = [0] * N\n    for i in range(N):\n        a[i] = sum([b[j] * pow(10, M - j - 1) for j in range(M)])\n    ans = 0\n    for i in range(N):\n        if a[i] + C > 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    N, M, C = map(int, stdin[0].split(\" \"))\n    codes = stdin[1:]\n    answer = 0\n    for code in codes:\n        temp = code.split(\" \")\n        temp_arr = []\n        for i in range(len(temp)):\n            temp_arr.append(int(temp[i]))\n        if (sum(temp_arr) + C) >= 0:\n            answer += 1\n    print(answer)"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, c = map(int, stdin.split())\n    ans = 0\n    code = []\n    for i in range(n):\n        code.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            for k in range(m):\n                if i!= j and i!= k and j!= k:\n                    s = 0\n                    for l in range(m):\n                        s += code[i][l] * code[j][l]\n                    if c > s:\n                        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    bs = list(map(int, stdin.split()))\n    ans = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if bs[i] + bs[j] + bs[k] + c > 0:\n                    ans += 1\n    return str(ans)\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    M = N // 1000\n    N = N - M * 1000\n    if N >= 50:\n        M += 1\n        N -= 50\n    if N >= 20:\n        M += 1\n        N -= 20\n    if N >= 10:\n        M += 1\n        N -= 10\n    if N >= 5:\n        M += 1\n        N -= 5\n    if N >= 2:\n        M += 1\n        N -= 2\n    if N >= 1:\n        M += 1\n        N -= 1\n    print(M)\n    return M\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    b: int = a % 1000\n    c: int = b // 1000\n    if c == 0:\n        d: int = b\n    else:\n        d: int = b + 1\n    e: int = d % 100\n    f: int = e // 100\n    g: int = f // 10\n    h: int = g % 10\n    i: int = h // 100\n    if i == 0:\n        j: int = h\n    else:\n        j: int = h + 1\n    k: int = j % 10\n    if k == 0:\n        l: int = j\n    else:\n        l: int = j + 1\n    m: int = l // 10\n    print(m)\n\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(min(N, 9999) // 100)"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    total: int = 0\n    n: int = N\n    change: int = 0\n    while n >= 1000:\n        change = change + n % 1000\n        n = n // 1000\n    total = change + n\n    return total\n\nprint(solution(input()))"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(int(N / 1000) + (N % 1000 > 0))"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 0:\n        return 0\n\n    if n < 0:\n        return -1\n\n    bills = []\n\n    while n > 0:\n        if n >= 1000:\n            n -= 1000\n            bills.append(1000)\n        elif n >= 500:\n            n -= 500\n            bills.append(500)\n        elif n >= 100:\n            n -= 100\n            bills.append(100)\n        elif n >= 50:\n            n -= 50\n            bills.append(50)\n        elif n >= 10:\n            n -= 10\n            bills.append(10)\n        elif n >= 5:\n            n -= 5\n            bills.append(5)\n        elif n >= 1:\n            n -= 1\n            bills.append(1)\n        else:\n            return -1\n\n    return str(len(bills))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_list = list(str(N))\n    N_list.sort(reverse=True)\n    for i in range(len(N_list)):\n        if int(N_list[i]) <= 3:\n            return str(N - N * 10 // 100)\n    if N % 10!= 0:\n        return str(N // 10)\n    else:\n        return str(N // 10)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    result = 0\n    while N >= 1000:\n        N = N - 1000\n        result += 1\n    result += N\n    print(result)"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin)\n    change = {}\n    change[\"yen\"] = 0\n    change[\"yen\"] += n // 1000\n    n %= 1000\n    change[\"yen\"] += n // 500\n    n %= 500\n    change[\"yen\"] += n // 200\n    n %= 200\n    change[\"yen\"] += n // 100\n    n %= 100\n    change[\"yen\"] += n // 50\n    n %= 50\n    change[\"yen\"] += n // 20\n    n %= 20\n    change[\"yen\"] += n // 10\n    n %= 10\n    change[\"yen\"] += n // 5\n    n %= 5\n    change[\"yen\"] += n // 2\n    n %= 2\n    change[\"yen\"] += n\n    return change[n]"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    try:\n        if int(stdin[0]) < 0 or int(stdin[0]) > 10000:\n            raise ValueError\n        n = int(stdin[0])\n        if n < 1000:\n            return '0'\n        i = 0\n        tot = 0\n        while n!= 0:\n            if n >= 2000:\n                d = 2\n            elif n >= 1000:\n                d = 1\n            elif n >= 500:\n                d = 5\n            elif n >= 100:\n                d = 10\n            elif n >= 50:\n                d = 25\n            elif n >= 10:\n                d = 50\n            elif n >= 5:\n                d = 100\n            elif n >= 1:\n                d = 200\n            else:\n                d = 0\n            if d!= 0:\n                if i < 2:\n                    i = i + 1\n                    tot = tot + d\n                else:\n                    tot = tot - d\n                    i = 0\n                n = n - d\n            else:\n                return '0'\n    except ValueError:\n        return '0'\n    return str(tot)\n\n\nprint(solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n'))\n\nclass Test_Solution:\n    def test_with_list(self):\n        assert solution(list(map(int, \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\".split()))) == '100'\n        assert solution(list(map(int
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    heroes: List[int] = list(map(int, stdin.split()[1:]))\n    totals: List[int] = []\n    n_totals: int = 0\n    for hero in heroes:\n        totals.append(n_totals + hero)\n        n_totals += hero\n    return str(max(totals))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    B = list(map(int, stdin.strip().split()))\n    print(solve(N, A, B))\n\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    (N,) = int(input_lines[0]),\n\n    A, B = tuple(map(int, input_lines[1].split())), tuple(map(int, input_lines[2].split()))\n\n    # [1] Greedy approach\n    # # If we combine the attacks by the same hero, we can achieve maximum result\n    # # Hence, we can now consider the result of the attack for all heroes\n    # # We use a one-dimensional array, for each hero\n    # # Each index denotes how many monsters will be defeated (i.e. combined) by this hero\n    # # The value for the first hero (index 0) is 0\n    # # The value for the second hero (index 1) is 0\n    # # The value for the third hero (index 2) is 0\n    # # For the fourth hero (index 3), we can defeat 9 monsters by the first hero, and 10 by the second hero,\n    # # hence, the final result is 9 + 10 = 19\n    # # Note: Even though we have 9 monsters to defeat, the final result will be still 19\n    # # We can achieve the result by combining the attacks by the same hero\n    # # Hence, the overall result is the result of the combined attacks by the same hero\n    # heroes_combined_attacked = [0] * N\n    # heroes_combined_attacked[0] = 0\n    # heroes_combined_attacked[1] = 0\n    # heroes_combined_attacked[2] = 0\n    # heroes_combined_attacked[3] = 0\n\n    # # For each hero, we want to find how many monsters they can defeat\n    # for i in range(1, N):\n    #     # We have hero_i_attacked_by_hero_i, and for each hero_i, we have\n    #     # hero_i_attacked_by_hero_i_and_hero_j, so we can find out how many monsters the hero_i can defeat\n    #     # by considering all combinations of heroes that cannot be combined (hero_i is not combined)\n    #     # We can combine the attacks by hero_i and hero_j to form one monster\n    #     # So, we can get a result of hero_i_attacked_by_hero_i\n    #     # If we can form a result of hero_j_attacked_by_hero_i, we also can get a result of hero_i_attacked_by_hero_i\n    #     # Hence, we can get a result of hero_i_attacked_by_hero_i + hero_j_attacked_by_hero_i\n    #     # Note: Each result will be added up (i.e. hero_i_attacked_by_hero_i + hero_j_attacked_by_hero_i)\n    #     # But this result won't be added up for hero_i_attacked_by_hero_i_and_hero_j,\n    #     # because hero_i can only defeat one monster.\n    #     # So, we can directly subtract these two results to get the result for hero_i.\n    #     heroes_combined_attacked[i] = heroes_combined_attacked[i - 1] + heroes_combined_attacked[i - 2]\n\n    # # Now we have the result for each hero, we can see the overall result\n    # # We can combine the results of all heroes\n    # # This result will be the final result\n    # # Hence, we return the final result\n    # result = 0\n    # for i in range(0, N):\n    #     result += heroes_combined_attacked[i]\n    # return str(result)\n\n    # # [2] Tabulation approach\n    # # We can achieve the result by finding the result for each hero, and then combine the results\n    # # Hence, the overall result is the result of the combined attacks\n    # # We can use a 2-dimensional array, for each hero, for each result (0, 1, 2, 3, etc)\n    # # We can combine the attacks by the same hero and use the result from the previous row\n    # # Therefore, the overall result is the sum of the result from the previous row\n    # # And the result from the previous row is the result from the previous hero\n    # # Hence, the overall result is the sum of the result from the previous row and the result from the previous hero\n    # # We can use a 2-dimensional array, for each hero, for each result (0, 1, 2, 3, etc)\n    # # We can combine the attacks by the same hero\n    # # Hence, the overall result is the sum of the result from the previous row\n    # # And the result from the previous hero is the result from the previous row\n    # # Hence, the overall result is the result from the previous hero\n    # # Note: Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, we can find out the result for each hero\n    # # Hence, the overall result is the sum of the result from the previous hero\n    # # To calculate the result for each hero, we can use the previous result to calculate the result for each hero\n    # # Since we have the result of each hero, we can use the result of the previous hero\n    # # Hence, we can calculate the result for each hero using the previous result\n\n    # # Then we can use backtracking to find the result for each hero\n    # # Then we can use the result of each hero to calculate the result for each hero\n    # # Hence, the overall result is the sum of the result from the previous hero\n    # # To calculate the result for each hero, we can use the previous result to calculate the result for each hero\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, we can calculate the result for each hero using the previous result\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, the overall result is the result from the previous hero\n\n    # # We can use backtracking to calculate the result for each hero\n    # # Therefore, we can calculate the result for each hero using the previous result\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, we can calculate the result for each hero using the previous result\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, the overall result is the result from the previous hero\n\n    # # Similarly, we can use backtracking to calculate the result for each hero\n    # # Therefore, we can calculate the result for each hero using the previous result\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, we can calculate the result for each hero using the previous result\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, the overall result is the result from the previous hero\n    # # We can directly use the result from the previous hero to calculate the result for each hero\n    # # Therefore, the overall result is the result from the previous hero\n\n    # # We can use backtracking to calculate the result for each hero\n    # # Therefore, we can calculate the result for each hero using the previous result\n    # # Since we have the result of each hero, we can use the result from the previous hero\n    # # Hence, we can calculate the result for each"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n,) = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(max([a_i + b_i for a_i, b_i in zip(a, b)]))"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, _, A, B = stdin.split()\n    N = int(N)\n    A = list(map(int, A.split()))\n    B = list(map(int, B.split()))\n\n    for i in range(N):\n        A[i] += 1\n    B = max(B)\n    result = []\n    for i in range(N):\n        A[i] -= 1\n        result.append(max(0, min(B, A[i])))\n    print(sum(result))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N = int(stdin)\n    A = list(map(int, stdin.split(' ')))\n    B = list(map(int, stdin.split(' ')))\n\n    heroes = [[] for i in range(N + 1)]\n    heroes[0] = list(range(1, A[0] + 1))\n\n    for i in range(1, N + 1):\n        heroes[i] = list(range(1, A[i] + 1))\n\n    # print(heroes)\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if j!= i:\n                heroes[i].extend(heroes[j])\n    # print(heroes)\n\n    for i in range(1, N + 1):\n        heroes[i].extend(heroes[i - 1])\n\n    # print(heroes)\n\n    results = []\n    for hero_count, hero_monster in enumerate(heroes):\n        for hero in hero_monster:\n            for monster_count in range(hero_count + 1):\n                if hero_count == 0:\n                    results.append(sum(B[monster_count:]))\n                else:\n                    results.append(sum(B[monster_count:hero_count]))\n    return str(max(results))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    defender = 0\n    total = 0\n    for i in range(N):\n        defender += (A[i] - 1) * B[i]\n        total += (A[i] - 1) * B[i]\n    return str(total)\n\nsolution(\"2 5 2\") # '9'\nsolution(\"3 5 2\") # '9'\nsolution(\"3 6 3\") # '16'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n').split('\\n')\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    result = 0\n    for i in range(N):\n        result += (B[i] - A[i])\n    print(result)\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    if x < y:\n        return 'War'\n    if x == y:\n        for i in range(n):\n            if x <= stdin.split()[i]:\n                return 'War'\n    if x >= y:\n        for i in range(m):\n            if stdin.split()[i] < y:\n                return 'War'\n    if x > y:\n        for i in range(n):\n            if x > stdin.split()[i]:\n                return 'War'\n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    N = int(stdin[0])\n    M = int(stdin[1])\n    X = int(stdin[2])\n    Y = int(stdin[3])\n    if N < M:\n        return \"War\"\n    if N == M:\n        if X < Y:\n            return \"War\"\n        else:\n            return \"No War\"\n    if N == M:\n        if X > Y:\n            return \"War\"\n        else:\n            return \"No War\"\n    if X < Y:\n        return \"War\"\n    elif X > Y:\n        return \"No War\"\n    else:\n        if N < M:\n            return \"War\"\n        else:\n            return \"No War\"\n\nstdin = \"3 2 10 20\\n8 15 13\\n16 22\"\nprint(solution(stdin))"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split()\n    N = int(N)\n    M = int(M)\n    X = int(X)\n    Y = int(Y)\n    # if N and M are both odd, no war can happen\n    if N % 2 == 0 and M % 2 == 0:\n        return \"War\"\n    # if N and M are both even, no war can happen\n    if N % 2 == 0 and M % 2 == 0:\n        return \"War\"\n    # else, check if X < Y and the condition is satisfied.\n    elif X < Y:\n        return \"War\"\n    # else, check if x_i < Z and the condition is satisfied.\n    elif X < Y:\n        return \"War\"\n    # else, check if y_i > Z and the condition is satisfied.\n    elif Y > X:\n        return \"War\"\n    # else, if all the conditions are satisfied, the war must break.\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split()\n    N, M, X, Y = int(N), int(M), int(X), int(Y)\n    x_coords = list(map(int, stdin.split()[1:]))\n    y_coords = list(map(int, stdin.split()[1:]))\n    result = 'War'\n    for x in x_coords:\n        if (X < x) or (x < X) or (y_coords[0] > x):\n            result = 'No War'\n            break\n    for y in y_coords:\n        if (Y < y) or (y < Y) or (x_coords[0] > y):\n            result = 'No War'\n            break\n    return result\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    X -= 1\n    Y -= 1\n    if N > M:\n        return \"War\"\n    if M < X:\n        return \"No War\"\n    if N < Y:\n        return \"No War\"\n    if X < Y:\n        return \"No War\"\n    if N <= M:\n        return \"War\"\n    return \"War\"\nprint(solution(input()))\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    for i in range(N):\n        for j in range(M):\n            if (X < Y < j) or (i < X < j) or (i < Y < j):\n                return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = stdin.split()\n    a = int(a)\n    b = int(b)\n    x = int(x)\n    y = int(y)\n    if (x < y) and (x < y) and (x < y):\n        if (x > y) and (x > y):\n            if (x > y):\n                return \"War\"\n            else:\n                return \"No War\"\n        else:\n            return \"War\"\n    else:\n        return \"No War\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split()\n    N, M, X, Y = int(N), int(M), int(X), int(Y)\n    if N >= M:\n        return 'No War'\n    X_cords = []\n    Y_cords = []\n    for i in range(N):\n        X_cords.append(int(X))\n    for i in range(M):\n        Y_cords.append(int(Y))\n    for i in range(N):\n        for j in range(M):\n            if X_cords[i] > Y_cords[j]:\n                break\n            elif X_cords[i] < Y_cords[j]:\n                break\n            elif X_cords[i] == Y_cords[j]:\n                break\n        else:\n            continue\n        break\n    if i == N - 1:\n        return 'No War'\n    for i in range(j, N):\n        if X_cords[i] > Y_cords[j]:\n            break\n        elif X_cords[i] < Y_cords[j]:\n            break\n        elif X_cords[i] == Y_cords[j]:\n            break\n    else:\n        return 'No War'\n    return 'War'\nprint(solution(stdin))\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split()\n    N = int(N)\n    M = int(M)\n    X = int(X)\n    Y = int(Y)\n    x = sorted(list(map(int, stdin.split()[1:])))\n    y = sorted(list(map(int, stdin.split()[2:])))\n    if N == 1:\n        return \"War\"\n    if X < Y:\n        return \"War\"\n    if x == x[::-1]:\n        return \"War\"\n    if y == y[::-1]:\n        return \"War\"\n    if x[0] < X and y[0] < Y:\n        return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n_m, x_y = stdin.split()\n    n_m = int(n_m)\n    x, y = x_y.split()\n    x = int(x)\n    y = int(y)\n\n    if all(x < z for z in y) and all(x > z for z in y) and all(x > z for z in x) and all(x > z for z in x):\n        return 'War'\n    else:\n        return 'No War'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    t: int = []\n    for i in range(n):\n        t.append(int(stdin.split()[2*i + 1]))\n    a = [0]*n\n    count = 0\n    for i in range(n):\n        a[i] = 2*i\n    for i in range(n):\n        if count == 0:\n            count = a[i]\n        else:\n            if a[i]!= a[i-1]:\n                count = a[i]\n            else:\n                count += a[i]\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(int((2 * n * (t + n)) / 360))\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    t_1 = int(stdin)\n    t_2 = int(stdin)\n    if N == 1:\n        return str(t_2)\n    result = str(t_1) + ':' + str(t_2)\n    for i in range(2, N):\n        result += ':' + str(t_1 + t_2)\n        t_1 += t_2\n        t_2 = t_1 + t_2\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * 2 ** (N - 1) - 1)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    for i in range(2, N + 1):\n        answer += 360/i\n    return answer\nprint(solution(input()))\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N = stdin[0]\n    T_1 = stdin[1]\n    T_N = stdin[2]\n\n    # calculate the time for each clock to rotate 90 degrees\n    clock_time_1 = T_1//N\n    clock_time_2 = T_N//N\n    \n    # print the value in the clock_time\n    print(min(clock_time_1, clock_time_2))\n    return ''"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(n):\n        answer = max(answer, answer + (i + 1) * 360)\n    return str(answer)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    t_array = []\n    for i in range(1, n+1):\n        t_array.append(360/n * i)\n    print(max(t_array))\n    return max(t_array)\nsolution(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t_1 = int(stdin)\n    t_2 = int(stdin)\n    # clock1 points upward \n    # clock2 points upward \n    clock1 = 0\n    clock2 = 0\n    clock_number = 1\n    while True:\n        if clock_number == 1:\n            clock1 += t_1\n            if clock1 >= 360:\n                clock1 = clock1 - 360\n            clock_number = 2\n        else:\n            clock2 += t_2\n            if clock2 >= 360:\n                clock2 = clock2 - 360\n            clock_number = 1\n        if clock1 == clock2:\n            break\n    return str(clock1 + clock2)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, t1, t2) = stdin.split(\"\\n\")\n    n = int(n)\n    t1 = int(t1)\n    t2 = int(t2)\n    return \"%.2f\" % (t1 + t2 - 1)\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_divisors(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    divisors_1 = find_divisors(n)\n    divisors_2 = find_divisors(sum(weights))\n\n    if n < 2:\n        return \"0\"\n\n    for i in divisors_1:\n        if i not in divisors_2:\n            continue\n        else:\n            return str(abs(sum(weights) - 2 * sum(weights[i:])))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, *input = map(int, stdin.split())\n    N = input[0]\n    W = input[1:]\n    # print(N, W)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    # print(dp)\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + W[i - 1] * W[j - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(abs(dp[N][N] - dp[N][N - 1]))\n\nsolution(\"2\")\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    # print(weights)\n    def div_groups(weights, n, t):\n        if n == 0 or t == 0:\n            return 0\n        if t == 1:\n            return sum(weights)\n\n        if t > n:\n            return sys.maxsize\n        if t < 1:\n            return -sys.maxsize\n\n        if n == 1:\n            return sum(weights) - weights[0]\n\n        max_s1 = div_groups(weights[1:], n - 1, t)\n        max_s2 = div_groups(weights[:t], n - t, t)\n        # print(max_s1, max_s2)\n        return max(max_s1, max_s2)\n\n    return str(div_groups(weights, n, n))\n\nsolution(\"3 1 2 3\")"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    weights.sort()\n\n    left = weights[0]\n    right = weights[-1]\n    left_sum = 0\n    right_sum = 0\n    while left <= right:\n        if left > right:\n            break\n        if left < right:\n            left_sum += left\n            right_sum += right\n        else:\n            left_sum += left\n            right_sum += right\n            left = weights[-1]\n            right = weights[0]\n            continue\n\n    return str(abs(left_sum - right_sum))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.strip().split())\n    return str(min([abs(sum(weights[:i]) - sum(weights[i:])) for i in range(1, n)]))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_1(arr: list) -> int:\n        res = 0\n        for num in arr:\n            res += num\n        return res\n\n    def get_n_2(arr: list) -> int:\n        return get_n_1(arr) - get_n_1(arr[::-1])\n\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    return str(min(abs(get_n_1(weights) - get_n_2(weights)), abs(get_n_2(weights) - get_n_1(weights))))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    return str(min(abs(sum(weights[:T]) - sum(weights[T:])) for T in range(1, N)))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    w = list(map(int, stdin.split()[1:]))\n    w.sort(reverse=True)\n\n    first, second = sum(w[:T]), sum(w[T:])\n    print(min(abs(first-second), abs(second-first)))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def s(x): return int(x)\n    n = s(stdin.split()[0])\n    input_list = stdin.split()[1:]\n    # print(input_list)\n    input_list = list(map(s, input_list))\n    input_list.sort()\n    # print(input_list)\n    t1, t2 = 0, n - 1\n    total_mass = 0\n    s1, s2 = 0, 0\n    while t1 < n:\n        if t1 < t2:\n            if input_list[t1] < input_list[t2]:\n                s1 += input_list[t1]\n                t1 += 1\n            else:\n                s2 += input_list[t2]\n                t2 -= 1\n        else:\n            if input_list[t1] < input_list[t2]:\n                s1 += input_list[t1]\n                t1 += 1\n            else:\n                s2 += input_list[t2]\n                t2 -= 1\n        total_mass += s1 + s2\n    return str(abs(total_mass - n * input_list[n - 1]))"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *weights = stdin.split()\n    return str(min(abs(sum(weights[:i]) - sum(weights[i+1:])) for i in range(1, len(weights))))"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        for j in range(1, m):\n            a[j], a[j + 1] = a[j + 1], a[j]\n        res = max(res, sum([(i - 1) * m + j for i, j in enumerate(a)]))\n    return str(res)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    a = [[int(j) for j in stdin.split()][i] for i in range(n)]\n    k = 0\n    for j in range(n):\n        if a[j][0] == 1:\n            k += 1\n    for i in range(n - 1, 0, -1):\n        a[i - 1][0] = a[i][0]\n        a[i][0] = a[i + 1][0]\n        a[i + 1][0] = a[i][0]\n    a = a[:k]\n    return str(k)"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                matrix[i][j] = matrix[i][1]\n                matrix[i][j + 1] = matrix[i][m]\n            else:\n                matrix[i][j - 1], matrix[i][j] = matrix[i][j], matrix[i][j - 1]\n                matrix[i][j - 1], matrix[i][j + 1] = matrix[i][j + 1], matrix[i][j - 1]\n        if matrix == matrix[i][:m]:\n            ans = max(ans, j + 1)\n        matrix = matrix[:-1]\n    print(ans)\n\nsolution(input())\n'''\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    def move_down():\n        for j in range(m - 1, -1, -1):\n            for i in range(n - 1, 0, -1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i - 1][j] = matrix[i - 1][j], matrix[i][j]\n    def move_up():\n        for j in range(0, m):\n            for i in range(0, n - 1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i + 1][j] = matrix[i + 1][j], matrix[i][j]\n    def move_right():\n        for i in range(0, n):\n            for j in range(0, m - 1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i][j + 1] = matrix[i][j + 1], matrix[i][j]\n    def move_left():\n        for i in range(0, n):\n            for j in range(m - 1, 0, -1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i][j - 1] = matrix[i][j - 1], matrix[i][j]\n    def move_right_down():\n        for j in range(m - 1, -1, -1):\n            for i in range(n - 1, 0, -1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i - 1][j + 1] = matrix[i - 1][j + 1], matrix[i][j]\n    def move_left_down():\n        for j in range(m - 1, -1, -1):\n            for i in range(n - 1, 0, -1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i - 1][j - 1] = matrix[i - 1][j - 1], matrix[i][j]\n    def move_right_up():\n        for j in range(m - 1, -1, -1):\n            for i in range(n - 1, 0, -1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i + 1][j - 1] = matrix[i + 1][j - 1], matrix[i][j]\n    def move_left_up():\n        for j in range(m - 1, -1, -1):\n            for i in range(n - 1, 0, -1):\n                if matrix[i][j]!= -1:\n                    matrix[i][j], matrix[i + 1][j + 1] = matrix[i + 1][j + 1], matrix[i][j]\n    move_down()\n    move_up()\n    move_left()\n    move_right()\n    move_left_down()\n    move_right_down()\n    move_left_up()\n    move_right_up()\n    return str(matrix[0][0])"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [[int(x) for x in stdin.split()][i] for i in range(n)]\n\n    # first column\n    for i in range(m):\n        a[i][i] = 1\n\n    # second column\n    for i in range(1, n):\n        a[i][m - i] = a[i - 1][m - i]\n\n    # third column\n    for i in range(m - 2, 0, -1):\n        a[n - 1][i] = a[n - 1][i + 1]\n\n    # fourth column\n    for i in range(n - 2, 0, -1):\n        a[i][0] = a[i - 1][0]\n\n    # 1st row\n    for i in range(1, m):\n        a[0][i] = a[0][i - 1]\n\n    # 2nd row\n    for i in range(1, n):\n        a[i][m - i] = a[i - 1][m - i]\n\n    # 3rd row\n    for i in range(m - 2, 0, -1):\n        a[n - 1][i] = a[n - 1][i + 1]\n\n    # 4th row\n    for i in range(n - 2, 0, -1):\n        a[i][0] = a[i - 1][0]\n\n    res = 0\n    for i in range(n):\n        res += sum(a[i])\n    return str(res)"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                ans = min(ans, 1 + max(0, matrix[i][1:]))\n            else:\n                ans = min(ans, matrix[i][j - 1] + 1 + max(0, matrix[i][j:]))\n\n    return str(ans)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [[int(j) for j in stdin.split()] for i in range(n)]\n    result = min(abs(arr[i][0] - 1) + abs(arr[i][1] - 1) + abs(arr[i][2] - 1) + abs(arr[i][3] - 1) for i in range(n))\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    cyclic_shift = 0\n    cyclic_shift += 1 if a[0] == 1 else 0\n    cyclic_shift += 1 if a[1] == 2 else 0\n    cyclic_shift += 1 if a[2] == 3 else 0\n    cyclic_shift += 1 if a[-1] == m else 0\n    cyclic_shift += 1 if a[-2] == 2 * m else 0\n    return str(cyclic_shift)\n\n\n\n------Task------\n\nGiven: an array of integers.\nReturn: a string representation of the matrix, where integers from array are represented by their string representation.\n\nExample:\nFor array $a =[3, 4, 5, 6]$:\n\nthe output is \"1 2 3 4 5\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    for row in a:\n        # shift the row\n        for j in range(1, m + 1):\n            row[j - 1], row[j] = row[j], row[j - 1]\n    return str(sum(map(lambda x: x[0], a)))"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = int(stdin)\n            stdin = stdin.replace(str(matrix[i][j]), \"\")\n\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = int(matrix[i][j])\n\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = int(stdin)\n            stdin = stdin.replace(str(matrix[i][j]), \"\")\n\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = int(matrix[i][j])\n\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = int(stdin)\n            stdin = stdin.replace(str(matrix[i][j]), \"\")\n\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = int(matrix[i][j])\n\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = int(stdin)\n            stdin = stdin.replace(str(matrix[i][j]), \"\")\n\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = int(matrix[i][j])\n\n    return str(sum(sum(matrix, [])))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    # print(n, a)\n    if n % 2 == 0:\n        return str(int(n/2))\n    else:\n        problems_required = (n//2)+1\n        print(problems_required)\n        return str(problems_required)\n\n\nsolution(\"2\")"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # input data\n    l = list(map(int, stdin.split()))\n    print(l)\n\n    # number of problems\n    problems = 2 * n // 2\n    print(\"the number of problems is \", problems)\n    # max skills of any student\n    max_sk = max(l)\n    print(\"the max skills is \", max_sk)\n    # number of students\n    n = len(l)\n    print(\"the number of students is \", n)\n    # number of teams\n    teams = 2 * n // 2\n    print(\"the number of teams is \", teams)\n\n    # initilization of matrix\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    for i in range(0, problems):\n        matrix[i][i] = 1\n        matrix[i + problems][i] = 1\n    print(matrix)\n\n    # get the position of the first student\n    pos_1 = l.index(max_sk)\n    print(\"the position of the first student is \", pos_1)\n\n    # get the position of the second student\n    pos_2 = l.index(max_sk)\n    print(\"the position of the second student is \", pos_2)\n\n    # this line of the code is used for the last team, the student in position pos_1 must not be in the last team\n    # this line of the code is used for the second last team, the student in position pos_2 must not be in the last team\n    while (pos_2 + 1) in l:\n        pos_2 += 1\n    while (pos_1 + 1) in l:\n        pos_1 += 1\n    print(pos_1, pos_2)\n\n    # if the student in position pos_2 is in the first team then this student must be in the second team\n    if pos_2 in range(n):\n        # initilization of the matrix\n        matrix_2 = [[0 for i in range(n)] for j in range(n)]\n        for i in range(0, problems):\n            matrix_2[i][pos_2] = 1\n            matrix_2[i + problems][pos_2] = 1\n        print(\"the matrix with first team \", matrix_2)\n\n        # get the position of the second student\n        pos_2 = l.index(max_sk)\n        print(\"the position of the second student is \", pos_2)\n\n        # get the position of the third student\n        pos_3 = l.index(max_sk)\n        print(\"the position of the third student is \", pos_3)\n\n        while (pos_2 + 1) in l:\n            pos_2 += 1\n        while (pos_3 + 1) in l:\n            pos_3 += 1\n        print(pos_2, pos_3)\n\n        if (pos_2 in range(n)) and (pos_3 in range(n)):\n            for i in range(0, problems):\n                matrix[i][pos_2] = 1\n                matrix[i + problems][pos_2] = 1\n\n    # print the matrix\n    print(matrix)\n\n    return sum(matrix[0]) + sum(matrix[1])\n\n\nsolution(\"4\\n3 5 7 9\")\nsolution(\"2\\n1 100\")\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = sorted(list(map(int, stdin.split())))\n    teams = []\n    ans = 0\n    while len(skills) > 0:\n        if len(teams) == n//2:\n            return str(ans)\n        teams.append(skills[:2])\n        skills = skills[2:]\n\n    return str(ans)"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skill = list(map(int, stdin.split()))\n    return str(int((n + 1)/2) - sum(skill))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = list(map(int, stdin.split()))\n\n    length = len(skills) // 2\n    \n    # sorting the skills\n    skills.sort()\n\n    # calculating all the pairwise skills\n    # and filtering the pairs that do not fit\n    # into the given length\n    pairs = []\n    for i in range(0, length):\n        pairs.append((skills[2 * i], skills[2 * i + 1]))\n    for i in range(0, length):\n        for j in range(i + 1, length):\n            if pairs[i][1] == pairs[j][0]:\n                pairs[i], pairs[j] = pairs[j], pairs[i]\n    \n    # calculating the sum of the pairwise skills\n    sum = 0\n    for i in range(0, length):\n        sum += pairs[i][1]\n    \n    # print the answer\n    return str(sum)\n\nsolution(\"\"\"1 2\n3 4\n2 5\n6 7\n8 9\"\"\")\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    if n % 2!= 0:\n        return -1\n    skills = sorted(a)\n    a = a + a\n    while len(skills) > 1:\n        if skills[0] == skills[1]:\n            skills = skills[2:]\n        else:\n            skills = skills[2:] + skills[:2]\n    return str(sum(a) // 2)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n//2)\n    a = list(map(int, stdin.split()))\n    a = sorted(a, key=lambda x: -x)\n    # print(a)\n    count = 1\n    # print(count)\n    while n > count:\n        # print(count)\n        if a[count] == a[count - 1]:\n            count += 1\n        else:\n            count += 1\n            a.remove(a[count])\n            a.remove(a[count - 1])\n            # print(a)\n    # print(a)\n    return str(len(a))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total_skills = int(stdin.split()[0])\n    skills = [int(i) for i in stdin.split()[1:]]\n    count = 0\n    # This algorithm will make sense when it's looking for the minimum total number of problems to be solved.\n    while total_skills > 0:\n        # when total_skills is odd, the problem needs to be solved.\n        if total_skills % 2 == 1:\n            count += skills.pop()\n            total_skills -= 1\n        else:\n            # when total_skills is even, the problem needs to be solved twice.\n            count += skills.pop()\n            total_skills -= 2\n    return str(count)\n\nsolution('6 5 10 2 3 14 5') # '5'\nsolution('2 1 100') # '99'"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(n)\n    days = len(a)\n    res = 0\n    max_rest = 0\n    for i in range(days):\n        if a[i] == 0:\n            if max_rest == 0:\n                max_rest = i + 1\n        if a[i] == 1:\n            if max_rest > 0:\n                res += max_rest\n                max_rest = 0\n    if max_rest > 0:\n        res += max_rest\n    return res\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max_works(n))\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hours = list(map(int, stdin.split()))\n    rest = 0\n    days = 0\n    while rest < hours[0]:\n        rest += 1\n        days += 1\n    if days == 1:\n        return hours[1]\n    elif days > 1:\n        return days\n    elif days == 0:\n        return '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    days = 1\n    max_rests = 0\n    while days < n:\n        rests = 0\n        hour = 0\n        while hour < n:\n            if a[hour] == 0:\n                hour += 1\n            else:\n                if hour + 1 == n or a[hour + 1] == 1:\n                    rests += 1\n                hour += 1\n        max_rests = max(max_rests, rests)\n        days += 1\n    return str(max_rests)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    # \ubaa8\ub4e0 \ub0a0\uc9dc\uc5d0 \ub300\ud574 \uc2dc\uc791\ud560 \ub54c \uc815\ubcf4\ub97c \ucd08\uae30\ud654\n    dp = [[[0 for i in range(n)] for j in range(n)] for k in range(n)]\n    # \uccab \ub0a0\uc9dc\n    for i in range(n):\n        for j in range(n):\n            if a[i] == 1:\n                dp[i][j][0] = 1\n    # \ub450 \ub0a0\uc9dc\uc5d0 \ub300\ud574 \uc2dc\uc791\ud560 \ub54c \uc815\ubcf4\ub97c \ucd08\uae30\ud654\n    for i in range(n-1):\n        for j in range(n):\n            for k in range(n):\n                if a[i] == 1:\n                    dp[i][j][1] = dp[i+1][j][0]\n                if a[i] == 0:\n                    dp[i][j][1] = dp[i+1][j][1]\n                if a[i+1] == 1:\n                    dp[i+1][j][0] = 1\n                if a[i+1] == 0:\n                    dp[i+1][j][0] = dp[i+1][j][1]\n                if j == 0 and k == 0:\n                    dp[i][j][1] = 1\n                if j == 0 and k == 1:\n                    dp[i][j][1] = 0\n                if j == 1 and k == 0:\n                    dp[i][j][1] = 1\n                if j == 1 and k == 1:\n                    dp[i][j][1] = 0\n\n    for i in range(n):\n        res = max(res, dp[i][0][1])\n    return res\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    days = len(a)\n    result = 0\n    max_hours = 0\n    rest = 0\n\n    for i in range(n):\n        if i == 0:\n            rest = 1\n            hours = a[i]\n            max_hours = hours\n        else:\n            if rest == 1:\n                rest = 0\n                if hours > max_hours:\n                    max_hours = hours\n            else:\n                rest = 1\n                if hours > max_hours:\n                    max_hours = hours\n        if i % 7 == 0:\n            result = result + max_hours\n    print(result)\n    return result\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    schedule = list(map(int, stdin.split()))\n\n    if n == 0:\n        return 0\n\n    if len(schedule) == 1:\n        return 1\n\n    # let's try to be clever!\n    n_1 = n // 2\n    rest_count = 0\n    for i in range(n_1):\n        if schedule[i] == 0:\n            rest_count += 1\n        else:\n            rest_count = 0\n\n    if rest_count == 0:\n        return 0\n\n    # let's try to be smart!\n    rest_count = 0\n    n_2 = n_1\n    while n_2:\n        if schedule[n_2 - 1] == 0:\n            rest_count += 1\n        else:\n            rest_count = 0\n\n        n_2 -= 1\n\n    return rest_count\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res = 0\n    while True:\n        for i in range(n):\n            if a[i] == 0:\n                a[i] = 1\n                break\n        else:\n            break\n        res += 1\n    while True:\n        for i in range(n - 1, -1, -1):\n            if a[i] == 0:\n                a[i] = 1\n                break\n        else:\n            break\n        res += 1\n    return str(res)"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # import ipdb; ipdb.set_trace()\n    max_rests = 0\n    for i in range(n - 1):\n        if a[i + 1]!= a[i] == 1:\n            if max_rests == 0:\n                max_rests = 1\n            else:\n                max_rests += 1\n    return str(max_rests)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_hours, num_rest = list(map(int, stdin.split()))\n    working = []\n    rest = []\n    for i in range(num_hours):\n        if working and working[-1] == 0:\n            working.pop()\n        if rest and rest[-1] == 1:\n            rest.pop()\n        working.append(int(not working.pop()))\n        rest.append(int(not rest.pop()))\n    return str(len(working) - 1)\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for stdin_n in stdin.split(\"\\n\"):\n        result = 0\n        if stdin_n == \"\":\n            continue\n        a = stdin_n.split()\n        print(a)\n        for i in a:\n            i = int(i)\n            if i == 0:\n                result += 1\n        print(result)\n    return str(result)\nprint(solution
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tests\n    >>> solution('1')\n    '1'\n    >>> solution('7')\n    '0'\n    \"\"\"\n    return '0'"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    stdin = stdin[:-1]\n    return \"\".join(stdin)"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Return the solution in your own language.\n    return str(int(stdin))"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    else:\n        i = 1\n        while i <= 16:\n            if n % i == 0:\n                return str(i)\n            i += 1\n        return str(i - 1)\n\nstdin = input()\nprint(solution(stdin))\n\nimport math\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    return '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    return number\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    if n<=100:\n        x=n-100\n        return str(x)\n    if n<=1000:\n        x=n-100\n        y=x-100\n        return str(y)\n    if n<=10000:\n        x=n-1000\n        y=x-100\n        z=y-100\n        return str(z)\n    if n<=100000:\n        x=n-10000\n        y=x-100\n        z=y-100\n        m=z-100\n        return str(m)\n    if n<=1000000:\n        x=n-100000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        return str(n)\n    if n<=10000000:\n        x=n-1000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        return str(o)\n    if n<=100000000:\n        x=n-10000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        return str(p)\n    if n<=1000000000:\n        x=n-100000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        return str(q)\n    if n<=10000000000:\n        x=n-1000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        return str(r)\n    if n<=10000000000:\n        x=n-10000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        return str(s)\n    if n<=10000000000:\n        x=n-10000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        return str(t)\n    if n<=100000000000:\n        x=n-10000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        return str(u)\n    if n<=100000000000:\n        x=n-100000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        v=u-100\n        return str(v)\n    if n<=1000000000000:\n        x=n-100000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        v=u-100\n        w=v-100\n        return str(w)\n    if n<=1000000000000:\n        x=n-1000000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        v=u-100\n        w=v-100\n        x=w-100\n        return str(x)\n    if n<=10000000000000:\n        x=n-1000000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        v=u-100\n        w=v-100\n        x=w-100\n        y=x-100\n        return str(y)\n    if n<=10000000000000:\n        x=n-10000000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        v=u-100\n        w=v-100\n        x=w-100\n        y=x-100\n        return str(y)\n    if n<=1000000000000:\n        x=n-1000000000000\n        y=x-100\n        z=y-100\n        m=z-100\n        n=m-100\n        o=n-100\n        p=o-100\n        q=p-100\n        r=q-100\n        s=r-100\n        t=s-100\n        u=t-100\n        v=u-100\n        w=v-100\n        x=w-100\n        y=x-100\n        return str(y)\n    if n<=100000000:\n        x=n-100000000\n        y=x-100\n        z=y-100\n        m=z-100\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    cheeses = {}\n\n    for item in stdin:\n        cheese_name, cheese_type = item.split()\n        cheeses[cheese_name] = cheese_type\n\n    cheese_count = 0\n    for name, type_ in cheeses.items():\n        if type_ == \"hard\":\n            cheese_count += 1\n    return cheese_count\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = []\n    for cheese in stdin.split('\\n'):\n        cheeses.append(cheese)\n    cheeses = sorted(cheeses, key=lambda cheese: (cheese.split()[1], cheese.split()[0]))\n    cheese_dict = {}\n    for cheese in cheeses:\n        cheese_dict[cheese.split()[0]] = cheese.split()[1]\n    cheese_dict_items = cheese_dict.items()\n    cheese_dict_values = cheese_dict.values()\n    cheese_dict_keys = cheese_dict.keys()\n    if len(set(cheese_dict_values)) == 1:\n        return cheese_dict_keys[0]\n    elif len(set(cheese_dict_items)) == 1:\n        return cheese_dict_keys[0][0]\n    elif len(set(cheese_dict_items)) == 2:\n        return cheese_dict_keys[0][0]\n    else:\n        return 'NO CHEESE'\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numCheeses = int(stdin)\n    cheeses = [stdin.split() for stdin in stdin.splitlines()[1:]]\n    cheeses = {cheese[0]: cheese[1] for cheese in cheeses}\n\n    cheeseNames = set(cheeses.keys())\n    cheeseTypes = set(cheeses.values())\n    difficultCheese = cheeseNames & cheeseTypes\n    cheeseNames -= cheeseTypes\n    cheeseTypes -= cheeseNames\n\n    sortedCheeseNames = sorted(list(cheeseNames))\n    sortedCheeseTypes = sorted(list(cheeseTypes))\n\n    answer = sum(cheeseNames.count(name) for name in sortedCheeseNames) + sum(cheeseTypes.count(type) for type in sortedCheeseTypes)\n\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    for i in stdin.split():\n        if len(i)!= 2:\n            continue\n        if i[1] == \"hard\":\n            if i[0] in cheeses:\n                cheeses[i[0]] += 1\n            else:\n                cheeses[i[0]] = 1\n\n        if i[1] == \"soft\":\n            if i[0] in cheeses:\n                cheeses[i[0]] += 0.5\n            else:\n                cheeses[i[0]] = 0.5\n\n    print(len(cheeses.keys()))\n    return cheeses\nprint(solution(input()))"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cheese_count = int(stdin)\n    cheese_map = {}\n\n    for i in range(cheese_count):\n        cheese_type, cheese_name = stdin.split()\n        cheese_map[cheese_name] = cheese_type\n    cheese_list = list(cheese_map.values())\n    cheese_list.sort()\n    return len(cheese_list)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = stdin.split('\\n')\n    cheeses = [i.split() for i in cheeses]\n    cheeses = list(filter(lambda x: len(x) == 2, cheeses))\n    cheeses.sort(key=lambda x: x[1], reverse=True)\n    return str(len(cheeses))"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while len(stdin)!= 0:\n        name, type = stdin.split()\n        if type =='soft':\n            count += 1\n        stdin = stdin.strip()\n    return str(count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.rstrip().split(\"\\n\")\ncheese_types = list(map(lambda x: x.split(), stdin[1:]))\ncheese_names = list(map(lambda x: x[0], cheese_types))\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    cheeses_dict = {}\n    for i in data:\n        cheese, type_ = i.split(\" \")\n        cheeses_dict[cheese] = type_\n    return len(cheeses_dict)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cheese_dict = {\n        'brie': 0,\n        'camembert': 0,\n        'feta': 0,\n        'goat': 0,\n       'muenster': 0,\n        'asiago': 0,\n        'cheddar': 0,\n        'gouda': 0,\n       'swiss': 0,\n    }\n    cheese_list = []\n    for line in stdin.split('\\n'):\n        cheese_list.append(tuple(line.split()))\n    cheese_list.sort(key=lambda x: (x[0][-1], x[0][:3]))\n    for name, type in cheese_list:\n        cheese_dict[name] += 1\n    cheese_dict = sorted(cheese_dict.items(), key=lambda x: x[0])\n    return cheese_dict[0][1]\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [0]*n\n    for i in range(n):\n        c[a[i]] = b[i]\n    c.sort()\n    for i in range(n):\n        print(c[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    ans = []\n\n    for i in range(n):\n        b[i] = (a[i] + b[i]) % n\n\n    for i in range(n):\n        for j in range(i, n):\n            if b[i] > b[j]:\n                b[i], b[j] = b[j], b[i]\n\n    for i in range(n):\n        ans.append(b[i])\n\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    print(' '.join(map(str, sorted(a + b))))\n\n\nsolution(input())"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    n = int(a)\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    c = []\n    if n == 1:\n        return str(b[0])\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    return \" \".join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # b = list(map(int, stdin.split()))\n    # c = []\n    # for i in range(N):\n    #     for j in range(i, N):\n    #         c.append(a[i] + b[j])\n    # c.sort()\n    # return''.join(map(str, c))\n    return''.join(map(str, list(range(0, int(stdin) + 1))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    return \" \".join(list(map(str, c)))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = a\n    b = sorted(b, reverse=True)\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = [int(x) for x in a.split()]\n    b = [int(x) for x in b.split()]\n    c = []\n    for i in range(int(c)):\n        c.append((a[i] + b[i]) % int(c))\n    return''.join([str(x) for x in c])\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    b = list(map(int, stdin.split()))\n    b = b[1:]\n    c = []\n    for i in range(n):\n        x = (a[i] + b[i]) % n\n        c.append(x)\n    for i in range(len(c)):\n        print(c[i], end=\" \")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    result = []\n    for i in range(n):\n        result.append((int(a[i]) + int(b[i])) % n)\n    return''.join([str(e) for e in result])\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\nsolution('0\\n1\\n1\\n0')\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for s in stdin:\n        result = result + int(s)\n    return str(result)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    top = lines[0]\n    middle = lines[1]\n    bottom = lines[2]\n    mid = lines[3]\n    if top == \"0\":\n        mid = \"0\"\n    elif top == \"1\":\n        mid = \"1\"\n    if middle == \"0\":\n        mid = \"0\"\n    elif middle == \"1\":\n        mid = \"1\"\n    if bottom == \"0\":\n        mid = \"0\"\n    elif bottom == \"1\":\n        mid = \"1\"\n    if mid == \"0\":\n        return \"0\"\n    elif mid == \"1\":\n        return \"1\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count('1')\n    if n%2 == 1:\n        return '1'\n    else:\n        return '0'\n    \n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(not bool(int(stdin)));"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n    \n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n    return '0' if 0 else '1'\n    \n---Input Example---\nInput\n0\n1\n1\n0\n\nOutput\n0\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = stdin.split()\n    d = int(d)\n    t = int(t)\n    s = int(s)\n    if(d*60 + t > s):\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [D, T, S] = stdin.split()\n    D = int(D)\n    T = int(T)\n    S = int(S)\n    if D * T * (S / T) > D:\n        print(\"No\")\n        return \"No\"\n    print(\"Yes\")\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input.\n    d, t, s = map(int, stdin.split())\n\n    # Calculating the answer.\n    if d * t + d * t * s <= s * s:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if Takahashi.distance_to_place(stdin[0], stdin[1], stdin[2]) < T else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if (d + t * s) / s >= d:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    docstring\n    '''\n    # Get input from stdin\n    # stdin = input()\n    D, T, S = list(map(int, stdin.split()))\n    # Calculate\n    time_taken = D/S\n    time_taken = int(time_taken)\n    time_to_takahashi = T - time_taken\n    print(time_to_takahashi > 0)\n\n    return 'Yes'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin.split()[1]) <= int(stdin.split()[0]) <= int(stdin.split()[2]) * 60 else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n\n    d = int(inputs[0])\n    t = int(inputs[1])\n    s = int(inputs[2])\n\n    return \"Yes\" if d * (t / s) >= d else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = list(map(int, stdin.split()))\n    return 'Yes' if D >= T * S else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 1 2')\n    Yes\n    >>> solution('3 100 2')\n    No\n    >>> solution('10 1 2')\n    No\n    >>> solution('10 1 0')\n    Yes\n    \"\"\"\n    D, T, S = stdin.split()\n    D = int(D)\n    T = int(T)\n    S = int(S)\n    if D <= T:\n        return 'Yes'\n    else:\n        if D < S * T:\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.strip().split(\"\\n\")\n    N = int(N)\n    A = A.split()\n    matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            matrix[i][j] = int(A[i])\n    for i in range(N):\n        matrix[i][i] = 0\n\n    for row in range(N):\n        for column in range(N):\n            if matrix[row][column] == 0:\n                continue\n            if row - 1 >= 0 and column - 1 >= 0 and matrix[row - 1][column - 1] == 0:\n                matrix[row - 1][column - 1] = 0\n            if row - 1 >= 0 and matrix[row - 1][column] == 0:\n                matrix[row - 1][column] = 0\n            if column + 1 < N and matrix[row][column + 1] == 0:\n                matrix[row][column + 1] = 0\n            if row + 1 < N and matrix[row + 1][column] == 0:\n                matrix[row + 1][column] = 0\n            if row + 1 < N and column - 1 >= 0 and matrix[row + 1][column - 1] == 0:\n                matrix[row + 1][column - 1] = 0\n            if row - 1 >= 0 and column + 1 < N and matrix[row - 1][column + 1] == 0:\n                matrix[row - 1][column + 1] = 0\n\n    for row in range(N):\n        for column in range(N):\n            if matrix[row][column] == 0:\n                continue\n            if row - 1 >= 0 and column - 1 >= 0 and matrix[row - 1][column - 1] == 0:\n                matrix[row - 1][column - 1] = 0\n            if row - 1 >= 0 and matrix[row - 1][column] == 0:\n                matrix[row - 1][column] = 0\n            if column + 1 < N and matrix[row][column + 1] == 0:\n                matrix[row][column + 1] = 0\n            if row + 1 < N and matrix[row + 1][column] == 0:\n                matrix[row + 1][column] = 0\n            if row + 1 < N and column - 1 >= 0 and matrix[row + 1][column - 1] == 0:\n                matrix[row + 1][column - 1] = 0\n            if row - 1 >= 0 and column + 1 < N and matrix[row - 1][column + 1] == 0:\n                matrix[row - 1][column + 1] = 0\n\n    for row in range(N):\n        for column in range(N):\n            if matrix[row][column] == 0:\n                continue\n            if row - 1 >= 0 and column - 1 >= 0 and matrix[row - 1][column - 1] == 0:\n                matrix[row - 1][column - 1] = 0\n            if row - 1 >= 0 and matrix[row - 1][column] == 0:\n                matrix[row - 1][column] = 0\n            if column + 1 < N and matrix[row][column + 1] == 0:\n                matrix[row][column + 1] = 0\n            if row + 1 < N and matrix[row + 1][column] == 0:\n                matrix[row + 1][column] = 0\n            if row + 1 < N and column - 1 >= 0 and matrix[row + 1][column - 1] == 0:\n                matrix[row + 1][column - 1] = 0\n            if row - 1 >= 0 and column + 1 < N and matrix[row - 1][column + 1] == 0:\n                matrix[row - 1][column + 1] = 0\n\n    for row in range(N):\n        for column in range(N):\n            if matrix[row][column] == 0:\n                continue\n            if row - 1 >= 0 and column - 1 >= 0 and matrix[row - 1][column - 1] == 0:\n                matrix[row - 1][column - 1] = 0\n            if row - 1 >= 0 and matrix[row - 1][column] == 0:\n                matrix[row - 1][column] = 0\n            if column + 1 < N and matrix[row][column + 1] == 0:\n                matrix[row][column + 1] = 0\n            if row + 1 < N and matrix[row + 1][column] == 0:\n                matrix[row + 1][column] = 0\n            if row + 1 < N and column - 1 >= 0 and matrix[row + 1][column - 1] == 0:\n                matrix[row + 1][column - 1] = 0\n            if row - 1 >= 0 and column + 1 < N and matrix[row - 1][column + 1] == 0:\n                matrix[row - 1][column + 1] = 0\n\n    for i in range(N):\n        for j in range(N):\n            if matrix[i][j] == 0:\n                continue\n            if i - 1 >= 0 and j - 1 >= 0 and matrix[i - 1][j - 1] == 0:\n                matrix[i - 1][j - 1] = 0\n            if i - 1 >= 0 and matrix[i - 1][j] == 0:\n                matrix[i - 1][j] = 0\n            if j + 1 < N and matrix[i][j + 1] == 0:\n                matrix[i][j + 1] = 0\n            if i + 1 < N and matrix[i + 1][j] == 0:\n                matrix[i + 1][j] = 0\n            if i + 1 < N and j - 1 >= 0 and matrix[i + 1][j - 1] == 0:\n                matrix[i + 1][j - 1] = 0\n            if i - 1 >= 0 and j + 1 < N and matrix[i - 1][j + 1] == 0:\n                matrix[i - 1][j + 1] = 0\n\n    for i in range(N):\n        for j in range(N):\n            if matrix[i][j] == 0:\n                continue\n            if i - 1 >= 0 and j - 1 >= 0 and matrix[i - 1][j - 1] == 0:\n                matrix[i - 1][j - 1] = 0\n            if i - 1 >= 0 and matrix[i - 1][j] == 0:\n                matrix[i - 1][j] = 0\n            if j + 1 < N and matrix[i][j + 1] == 0:\n                matrix[i][j + 1] = 0\n            if i + 1 < N and matrix[i + 1][j] == 0:\n                matrix[i + 1][j] = 0\n            if i + 1 < N and j - 1 >= 0"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_string = stdin.splitlines()\n    num_list = [[int(num) for num in num_string[i].split()] for i in range(len(num_string))]\n    total = 0\n    for i in range(len(num_list)):\n        for j in range(len(num_list[i])):\n            total += num_list[i][j]\n        if total == 100:\n            for k in range(len(num_list[i])):\n                num_list[i][k] = 'x'\n            total = 0\n    total_list = []\n    total_list.append(num_list[0])\n    total_list.append(num_list[1])\n    total_list.append(num_list[2])\n    for i in range(len(num_list)):\n        if len(total_list[i]) == len(num_list[i]):\n            total_list[i].pop(0)\n    total_list_set = set(tuple(total_list[i]) for i in range(len(total_list)))\n    for each in total_list_set:\n        if len(each) == 3:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"No\"\n    a = [list(map(int, stdin.split())) for _ in range(3)]\n    n = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3:]))\n    for i in range(3):\n        if set(a[i]) == set(b):\n            answer = \"Yes\"\n            break\n    for j in range(3):\n        if set(a[:, j]) == set(b):\n            answer = \"Yes\"\n            break\n    for i in range(3):\n        if set(a[i, :]) == set(b):\n            answer = \"Yes\"\n            break\n    for j in range(3):\n        if set(a[:, j]) == set(b):\n            answer = \"Yes\"\n            break\n    if answer == \"No\":\n        answer = \"Yes\"\n    return answer\n    \n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")\n    a = list(map(int, A[0].split()))\n    b = list(map(int, A[1].split()))\n    n = int(A[2])\n    num_dict = {}\n    for i in range(n):\n        num_dict[b[i]] = a[i]\n    res = False\n    for j in range(1, n):\n        if (a[0] == num_dict[a[j]] and a[1] == num_dict[a[j + 1]] and a[2] == num_dict[a[j + 2]]) or \\\n                (a[0] == num_dict[a[j + 1]] and a[1] == num_dict[a[j + 2]] and a[2] == num_dict[a[j]]):\n            res = True\n    if res:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = [line.split() for line in stdin.splitlines()]\n    for row in range(len(A)):\n        for col in range(len(A[row])):\n            if A[row][col] == A[row + 1][col + 1] == A[row + 2][col + 2] == A[row + 3][col + 3]:\n                return \"Yes\"\n    for row in range(len(A)):\n        for col in range(len(A[row])):\n            if A[row][col] == A[row][col + 1] == A[row + 1][col + 1] == A[row + 1][col + 2]:\n                return \"Yes\"\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j] == A[i + 1][j] == A[i + 2][j] == A[i + 3][j]:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [[int(x) for x in stdin.strip().split()] for _ in range(3)]\n    N = int(stdin.strip().split()[-1])\n    b = stdin.strip().split()[-N:]\n    cnt = 0\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == b[cnt]:\n                cnt += 1\n    if cnt == N:\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] in b:\n                    A[i][j] = '*'\n                if A[i][j]!= '*':\n                    A[i][j] = '.'\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == '*':\n                    A[i][j] = '.'\n        A = [''.join(x) for x in A]\n        return '\\n'.join(A) + '\\nYes'\n    else:\n        return '\\n'.join(A) + '\\nNo'\n    return\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(i) for i in stdin.split()]\n    if not 1 <= n <= 10:\n        raise ValueError('Invalid input.')\n    if any(len(i)!= len(a) for i in a):\n        raise ValueError('Invalid input.')\n    if len(a)!= n:\n        raise ValueError('Invalid input.')\n    for i, j in zip(a, a[1:]):\n        if i!= j:\n            raise ValueError('Invalid input.')\n    for i in range(n):\n        a[i] = f'{a[i]} {i}'\n    a =''.join(a)\n    a = a.replace(str(n), '').replace('    ','').strip()\n    print('Yes' if any([n in a for n in range(n, n*2, 1)]) else 'No')\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n    N = int(a[2])\n    A = []\n    for i in range(3):\n        A.append([int(a[i * 3 + j]) for j in range(3)])\n    b = sorted([int(a[i]) for i in range(3, N + 3)])\n    a = set()\n    for i in range(3):\n        a.update(A[i])\n    a.update(b)\n    return 'Yes' if a == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} else 'No'\n\nsolution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\")\nsolution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\")\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = [[int(s) for s in stdin.split()] for _ in range(3)]\n    N = int(stdin.split()[-1])\n    bingo_A = []\n    for i in range(N):\n        bingo_A.append([i] + sorted(A[i][:N]))\n    bingo_A = np.array(bingo_A)\n    return 'Yes' if np.all(bingo_A == A) else 'No'\n\nsolution('84 97 66\\n79 89 11\\n61 59 7\\n7 8\\n89\\n7')\nsolution('84 97 66\\n79 89 11\\n61 59 7\\n7 8\\n87\\n79')\nsolution('84 97 66\\n79 89 11\\n61 59 7\\n7 8\\n87\\n80')\nsolution('84 97 66\\n79 89 11\\n61 59 7\\n7 8\\n90\\n80')\nsolution('84 97 66\\n79 89 11\\n61 59 7\\n7 8\\n90\\n80')"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_bingo(row_index, column_index, board, numbers):\n        # check row\n        i = row_index\n        while i < row_index + 3:\n            if board[i][column_index] in numbers:\n                numbers.remove(board[i][column_index])\n            else:\n                return False\n            i += 1\n        # check column\n        i = column_index\n        while i < column_index + 3:\n            if board[row_index][i] in numbers:\n                numbers.remove(board[row_index][i])\n            else:\n                return False\n            i += 1\n\n        # check diagonal\n        i = row_index\n        j = column_index\n        while i < 3 + row_index and j < 3 + column_index:\n            if board[i][j] in numbers:\n                numbers.remove(board[i][j])\n            else:\n                return False\n            i += 1\n            j += 1\n\n        return True\n\n    row_index = 0\n    column_index = 0\n    numbers = [int(x) for x in stdin.split()]\n    while len(numbers) < 5:\n        numbers.append(random.randint(1, 100))\n\n    while not is_bingo(row_index, column_index, [[str(x) for x in numbers], [str(x) for x in numbers], [str(x) for x in numbers]], numbers):\n        if numbers[0] > numbers[4]:\n            row_index += 1\n        elif numbers[0] < numbers[4]:\n            row_index -= 1\n        else:\n            row_index = 0\n\n        if numbers[1] > numbers[3]:\n            column_index += 1\n        elif numbers[1] < numbers[3]:\n            column_index -= 1\n        else:\n            column_index = 0\n\n        if numbers[2] > numbers[4]:\n            row_index += 1\n        elif numbers[2] < numbers[4]:\n            row_index -= 1\n        else:\n            row_index = 0\n\n    return 'Yes' if row_index == 0 else 'No'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    max_days = 0\n    for i in range(M):\n        days = array[i]\n        while days > 0 and N > 0:\n            days -= 1\n            N -= 1\n            max_days = max(max_days, N + days)\n    if N < 0:\n        return \"-\"\n    return str(max_days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n <= 0 or m <= 0 or n > 10**6 or m > 10**4:\n        return -1\n    d = [0]*(n+1)\n    for i in range(1, n+1):\n        d[i] = max(d[i-1], a[i-1] + d[i-2])\n    if d[n] < 0:\n        return -1\n    return d[n]\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    A = [[int(i) for i in stdin.split()] for j in range(M)]\n    A = sorted(A, key=lambda x: x[1])\n    print(A)\n    if len(A) == 0:\n        return '-1'\n    if len(A) == 1:\n        return str(A[0][0])\n    ans = A[0][0]\n    for i in range(1, len(A)):\n        if A[i][0] <= ans:\n            ans += A[i][1]\n        else:\n            ans += A[i][1] - (A[i][0] - ans)\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    A = list(map(int, stdin.split()))\n    if N <= 1:\n        return '-1'\n    A.sort()\n    if N == M:\n        return str(len(A) - 1)\n    count = 0\n    start = 0\n    end = N - 1\n    while start < end:\n        if A[start] + A[end] <= M:\n            start += 1\n            end -= 1\n            count += 1\n        elif A[start] + A[end] > M:\n            end -= 1\n            count += 1\n    if A[start] + A[end] == M:\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    N, M = map(int, stdin.split())\n\n    # check input\n    if 1 <= N <= 10 ** 6 and 1 <= M <= 10 ** 4 and 1 <= A_i <= 10 ** 4 for A_i in map(int, input().split()):\n        # array of days to finish assignment\n        assignments = list(map(int, input().split()))\n\n        # max days he can hang out\n        days = 0\n\n        # days he has finished all assignments on a given day\n        finished = 0\n\n        # loop through each day\n        for day in range(N):\n            # if day is the first day he finished an assignment\n            if day == 0:\n                # assign the first assignment on the day\n                finished += assignments[0]\n            # if day is not the first day he finished an assignment\n            else:\n                # assign the next assignment on the day\n                finished += assignments[finished % M]\n            # update days he has hung out on this day\n            days = max(days, finished)\n        # if he finished more assignments than he has days he can hang out\n        if days >= M * N:\n            # print -1\n            print(-1)\n        # else print days he has hung out\n        else:\n            print(days)\n    # otherwise return -1\n    else:\n        print(-1)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    assert len(assignments) == M\n    # 1. find out how many days he can hang out\n    days_of_vacation = 0\n    current_day = 1\n    for i in range(M):\n        days_of_vacation += assignments[i]\n        if days_of_vacation >= N:\n            days_of_vacation = days_of_vacation - assignments[i] + 1\n        else:\n            current_day = i + 1\n    if days_of_vacation > N:\n        return -1\n    # 2. find out how many days he can hang out\n    days_of_vacation = 0\n    current_day = 1\n    while days_of_vacation < N:\n        days_of_vacation += assignments[current_day - 1]\n        if days_of_vacation >= N:\n            days_of_vacation = days_of_vacation - assignments[current_day - 1] + 1\n        else:\n            current_day += 1\n    return str(current_day - 1)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    \n    # get all the possible days for the m assignments\n    possible_days = list(range(1, n + 1))\n    \n    # go through all the assignments\n    for assignment in assignments:\n        # check if assignment can be done on the day\n        if assignment <= possible_days[-1]:\n            # if so, remove the last day from the list\n            possible_days = possible_days[:possible_days.index(assignment) + 1]\n        # else print -1\n        else:\n            return \"-1\"\n    # return the minimum number of days\n    return len(possible_days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    n, m = int(line[0]), int(line[1])\n    assignments = list(map(int, line[2].split()))\n    nums = []\n    for i in range(n):\n        nums.append([])\n        for j in range(m):\n            nums[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            nums[j][i] = assignments[i * n + j]\n    for i in range(m):\n        nums[i] = sorted(nums[i])\n    nums = sorted(nums)\n    if len(nums) == 0:\n        return -1\n    days_to_finish = 1\n    while days_to_finish < m:\n        days_to_finish += min(days_to_finish, len(nums[days_to_finish]))\n    return days_to_finish\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    days = []\n    for _ in range(N):\n        days.append(list(map(int, stdin.split())))\n\n    max_count = 0\n    for i in range(N):\n        for j in range(M):\n            if days[i][j] == 1:\n                max_count = max(max_count, max(i, 30) - i + 1)\n            elif days[i][j] == 0:\n                max_count = max(max_count, max(i + 1, 60) - i - 1)\n    return str(max_count) if max_count else \"-1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    divisible = [x for x in range(1, 101) if x % 100 == 0]\n    N, D = stdin.split()\n    N = int(N)\n    for i in range(N, len(divisible)):\n        if divisible[i] == int(D):\n            return str(divisible[i])"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    import math\n    import itertools\n    import functools\n    import operator\n    a = math.floor(math.log(n, d))\n    return str(int(functools.reduce(operator.mul, itertools.chain.from_iterable(range(1, 10**a)), 1)))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    return str(int(N) % 100 // D)"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, D, N = stdin.split(' ')\n    D = int(D)\n    N = int(N)\n    def f(N):\n        result = 1\n        for i in range(N):\n            result = (result*i + 1) % D\n            print(result)\n        return result\n    return str(f(N))\nprint(solution(input()))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # D, N = map(int, stdin.split())\n    # if D == 0:\n    #     print(min(map(int, range(1, N+1))))\n    # elif D == 1:\n    #     print(min(map(int, range(2, N+1))))\n    # else:\n    #     print(min(map(int, range(3, N+1))))\n    N, D = map(int, stdin.split())\n    if D == 0:\n        print(min(range(1, N+1)))\n    elif D == 1:\n        print(min(range(2, N+1)))\n    else:\n        print(min(range(3, N+1)))"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    D = int(stdin[0])\n    N = int(stdin[1])\n    import sys\n    sys.stdout.write(str(solution_dynamic(D, N)))\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    for i in range(1, 101):\n        if i % 100 == 0:\n            if N == 0:\n                print(i)\n                break\n            N -= 1\n\n        if N == 0:\n            print(i)\n            break\n        else:\n            if i % D == 0:\n                N -= 1\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, N = stdin.split()\n    D = int(D)\n    N = int(N)\n    count = 0\n    x = N\n    while True:\n        count += 1\n        if x % 100 == 0:\n            x //= 100\n            continue\n        elif x % 10!= 0 and x % 100!= 0:\n            return str(x)\n        x //= 10"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the N-th smallest integer that would make Ringo happy.\n\n    The integer N is an integer between 1 and 100 (inclusive).\n\n    Constraints\n    ----------\n    D is 0, 1 or 2.\n    N is an integer between 1 and 100 (inclusive).\n\n    Sample Input\n    ----------\n    0 5\n    Sample Output\n    ----------\n    5\n    The integers that can be divided by 100 exactly 0 times (that is, not divisible by 100) are as follows: 1, 2, 3, 4, 5, 6, 7,...\n    Thus, the 5-th smallest integer that would make Ringo happy is 5.\n\n    \"\"\"\n    int_list = []\n    for _ in range(int(stdin)):\n        int_list.append(int(stdin.split(' ')[1]))\n    print(int(sorted(int_list)[-int(stdin) + 1]))\n\nsolution(input())\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    for i in range(n):\n        if i == n-1:\n            print(i+1)\n            return\n        if (i+1)*100 % d == 0:\n            print(i+1)\n            return\nstdin = '0 5'\nsolution(stdin)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N > 1:\n        temp = max(count, N)\n        if N % temp == 0:\n            count = temp\n        else:\n            count = N\n        N = N // temp\n    return str(count)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return str(max(gcd(a, b) for a, b in zip(arr, arr[1:])))\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *integers = map(int, stdin.split())\n    gcd = integers[0]\n    for i in integers[1:]:\n        gcd = gcd_recursive(gcd, i)\n    return str(gcd)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    numbers = [int(n) for n in input_data[1].split()]\n    n = 1\n    while n < N:\n        for i in range(len(numbers)):\n            if n > numbers[i]:\n                numbers[i] = n\n                break\n            if i == len(numbers) - 1:\n                numbers.append(n)\n        n += 1\n    return''.join(map(str, numbers))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 2 5\n   ...\n   ... ''')\n    '1'\n    \"\"\"\n    N = int(stdin)\n    numbers = stdin.split('\\n')[1:]\n\n    for number in numbers:\n        a, b = map(int, number.split())\n        while a!= b:\n            if a > b:\n                a -= b\n            else:\n                b -= a\n        print(a)\n    return\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(10**6)\n    N = int(stdin)\n    A_list = list(map(int, stdin.split()))\n\n    if N == 1:\n        print(A_list[0])\n        return\n\n    A_list = sorted(A_list)\n    max_val = max(A_list)\n\n    #recursive function\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    #helper function\n    def gcd(x, y):\n        if x < y:\n            x, y = y, x\n\n        while (y):\n            x, y = y, x % y\n\n        return x\n\n    A_val = A_list[0]\n    ans = 1\n    while (True):\n        ans = lcm(ans, A_val)\n\n        if ans > max_val:\n            break\n\n        A_val = A_val + 1\n\n    print(ans)\n\n    return\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    _input: List[int] = list(map(int, stdin.split()))\n\n    n = max(_input)\n    m = max(_input)\n\n    i = 1\n    while i < n:\n        if not n % i:\n            m = i\n        i += 1\n    return m\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n    max_value = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                if i == j == k:\n                    continue\n                elif i % j == 0 and i % k == 0 and j % k == 0:\n                    if max_value < i // min(i, j, k):\n                        max_value = i // min(i, j, k)\n    return str(max_value)\n\nsolution(\"4\")\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For the input of your function, the first line contains a single integer N\n    (1 \\leq N \\leq 10^5)\n    The second line contains N integers A1, A2,..., AN, separated by a single space.\n    Constraints:\n    - 2 \\leq N \\leq 10^5\n    - 1 \\leq A_i \\leq 10^9\n    \"\"\"\n    N = int(stdin)\n    numbers = list(map(int, stdin.split()))\n\n    numbers.sort(reverse=True)\n    divisor = numbers[0]\n    for i in range(1, len(numbers)):\n        divisor = divisor if divisor % numbers[i] == 0 else numbers[i]\n\n    return str(divisor)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *input = list(map(int, stdin.split()))\n    a = sorted(input)\n    return str(a[-1] // a[0])"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    return''.join(str(i) for i in A)\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    students = stdin.split()\n    students.sort()\n    print(' '.join(students))\n    return ''"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    print(' '.join(map(str, nums)))\n    return''.join(map(str, nums))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    numbers = stdin.split()\n\n    sorted_numbers = sorted(numbers)\n    result = \"\"\n    for i in range(1, n+1):\n        result += str(i) + \" \" + sorted_numbers[i-1] + \"\\n\"\n    return result"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    std_numbers = list(map(int, stdin.split()))\n\n    if len(std_numbers) < 1 or len(std_numbers) > 10**5:\n        return 'Invalid'\n\n    numbers = []\n    for i in range(1, N+1):\n        if i not in std_numbers:\n            numbers.append(i)\n\n    numbers.sort()\n    for i in range(len(numbers)):\n        print(numbers[i])\n    return 'Valid'\n\nprint(solution(input()))\n'''\n\n'''\nB\n--------------------------------------------------\nclass Solution:\n    def solve(self, N):\n        return list(range(1, N+1))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr = sorted(arr)\n    res = []\n    for i in range(len(arr)):\n        if i == 0:\n            res.append(arr[0])\n        else:\n            if arr[i]!= res[-1]:\n                res.append(arr[i])\n    return \" \".join(map(str, res))\n\nsolution(input())\n'''\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = stdin.split()\n    N = int(stdin_data[0])\n    A = list(map(int, stdin_data[1].split()))\n    print(' '.join([str(i) for i in solve(N, A)]))\n    return ''\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    students = sorted(stdin.split(\" \"))\n    print(\" \".join(students))\n    return \" \".join(students)"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    input_list = stdin.split()\n    input_list = [int(i) for i in input_list]\n    input_list.sort()\n    result: str = \"\"\n    for i in range(0, len(input_list)):\n        result += str(input_list[i]) + \" \"\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    result = 0\n    for i in range(1, 10**9 + 1):\n        if X > i*(i+1) and i*(i+1) >= A*i + B*i:\n            result = i\n            break\n    if result == 0:\n        print(result)\n    else:\n        print(result * 10 + result)\n    return ''\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    result = -1\n    for i in range(1, 10**9 + 1):\n        if X < (A*i + B*(len(str(i)))):\n            result = i\n            break\n    return str(result) if result > 0 else '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.split()\n    A, B, X = int(A), int(B), int(X)\n    max = 0\n    for i in range(1, 10):\n        sum_1 = i * int(str(i)[0])\n        sum_2 = i * int(str(i)[1])\n        if X == sum_1 + sum_2:\n            max = i\n    if max == 0:\n        return \"0\"\n    return str(max)\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, X) = stdin.split()\n    A = int(A)\n    B = int(B)\n    X = int(X)\n    \n    if A == 1:\n        if X == 1:\n            return 0\n        else:\n            return 0\n    else:\n        nums = []\n        for i in range(1, 10**9):\n            nums.append(i)\n        \n        while len(nums) > 0:\n            if len(nums) == 1 and nums[0] > X:\n                return 0\n            else:\n                A_cut = 0\n                B_cut = 0\n                n = nums[0]\n                nums.pop(0)\n                if A_cut * n + B_cut * X >= A * n + B * X:\n                    if n < 10**(len(str(n)) - 1):\n                        nums.append(n * 10)\n                    else:\n                        nums.append(n)\n                else:\n                    nums.append(n)\n        return nums[0]"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B, X = stdin.split()\n    max_product = 0\n    if A == \"1\":\n        if X == \"1\":\n            return \"0\"\n        if X == \"0\":\n            return \"0\"\n    elif A == \"0\":\n        return \"0\"\n    else:\n        if int(A) > int(B):\n            return \"0\"\n    while X!= 0:\n        if int(X) <= int(A) and int(X) <= int(B):\n            max_product = max(max_product, X)\n            X = str(int(X) * int(A))\n        else:\n            X = str(int(X) * int(B))\n    return max_product\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A*X + B*X <= X:\n        return \"0\"\n    # X=0, find the first integer which cannot be bought\n    first = X\n    for i in range(1, 10**9):\n        x = i\n        while x <= X:\n            if (A*x+B*len(str(x))) > X:\n                break\n            x = x*10 + 1\n        else:\n            return str(i)\n    # X=0, find the first integer which cannot be bought\n    first = X\n    for i in range(1, 10**9):\n        x = i\n        while x <= X:\n            if (A*x+B*len(str(x))) > X:\n                break\n            x = x*10 + 1\n        else:\n            return str(i)\n    return \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    ans = 0\n    for num in range(1, 11):\n        temp = (A * num + B * len(str(num))) * num\n        if temp == X:\n            ans = num\n            break\n    if ans == 0:\n        return \"0\"\n    else:\n        return str(ans)\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split()))\n    str_num = str(A * X + B * (len(str(A)) - 1))\n    index = 0\n    for i in range(len(str_num)):\n        if str_num[i]!= \"0\":\n            break\n        index += 1\n    str_num = str_num[index:]\n    if str_num == \"\":\n        return 0\n    return str_num"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = (int(x) for x in stdin.split())\n    n = 10 ** 9\n    result = 0\n    numbers = []\n    while A > 0:\n        numbers.append(A)\n        A, B = divmod(B, n)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)\n        A, B = divmod(B, 10)"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B,X=int(stdin.split()[0]),int(stdin.split()[1]),int(stdin.split()[2])\n    if X==0:\n        return 0\n    dp=[[0]*(10) for _ in range(X+1)]\n    dp[0][0]=1\n    for i in range(10):\n        for j in range(10):\n            for k in range(X+1):\n                if dp[k][j]==1:\n                    if k==0:\n                        dp[k][j]=1\n                    elif k==1:\n                        dp[k][j]=i+j\n                    else:\n                        dp[k][j]=max(dp[k-1][j],dp[k][j-i])+i+j\n    return max(dp[X])\n\nstdin=\"10 7 100\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    height = list(map(int, stdin.split()))\n    height.sort()\n\n    start, end, answer = 0, height[-1], 0\n    while start <= end:\n        mid = (start + end) // 2\n        if all(height[i] <= mid for i in range(n)):\n            answer = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return answer\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    h_ = list(map(int, stdin.split()))\n    people = 0\n    max_ = max(h_)\n    \n    for k, h in enumerate(h_):\n        if h <= max_ and k < N - 1:\n            people += 1\n            \n    return str(people)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    # Write your code here\n    h.sort(reverse=True)\n    #print(h)\n    max_h = h[0]\n    res = 0\n    for i in range(1, N):\n        if K < h[i] - max_h:\n            res += 1\n            K = h[i] - max_h\n            max_h = h[i]\n    return str(res)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    people = list(map(int, stdin.strip().split()))\n    total = 0\n    for person in people:\n        total += 1 if person >= K else 0\n    print(total)\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return str(len(stdin.split()))\n    return f\"{len(stdin.split()) - 1}\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    answer = []\n    h.sort()\n    for i in range(0, N):\n        if h[i] < K:\n            answer.append(str(i + 1))\n    return \" \".join(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    people = sorted(map(int, stdin.split()))\n    people = list(enumerate(people))\n\n    count = 0\n    for i in range(len(people)):\n        if people[i][1] >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    h = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(h)):\n        if h[i] >= int(K) and h[i] < h[i - 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    return str(sum(int(N >= i) for i in range(1, N + 1)))"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = sorted(list(map(int, stdin.split())), reverse=True)\n    return \"Yes\" if m >= sum(v/4 for v in votes[:n]) else \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a = list(map(int, stdin[1].split()))\n    m = int(stdin[2])\n    print('No' if sum(a)/m >= max(1/4*m, 1) else 'Yes')\n    return 'No' if sum(a)/m >= max(1/4*m, 1) else 'Yes'\n\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    votes = []\n    for _ in range(N):\n        votes.append(int(stdin.strip()))\n    votes = sorted(votes, reverse=True)\n    left = 0\n    right = 0\n    for i in range(N):\n        if left < (M // 4 * votes[i]) // (M * votes[i]):\n            return \"Yes\"\n        else:\n            right = i\n    return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    # print(votes)\n    if len(votes) < M:\n        return 'No'\n    a = []\n    for i in range(M):\n        a.append(votes.pop())\n    # print(a)\n    max_a = max(a)\n    min_a = min(a)\n    n = N\n    # print(n, max_a, min_a)\n    while n:\n        if max_a <= (1.0 * n / M) * min_a:\n            return 'Yes'\n        n -= 1\n    return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if A[i] / 4 > count:\n            count += 1\n    if count >= m:\n        print('Yes')\n    else:\n        print('No')\n    return"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    M = int(input_list[1])\n    votes_list = input_list[2].split(\" \")\n\n    votes_dict = {}\n\n    for vote in votes_list:\n        voter, vote = vote.split(\" \")\n        votes_dict[int(voter)] = int(vote)\n\n    total_votes = sum(votes_dict.values())\n    if total_votes >= M * (1/4) * N:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    votes = list(map(int, stdin.strip().split()))\n    voters = [0] * (max(votes) + 1)\n    for vote in votes:\n        voters[vote] += 1\n    if voters[max(votes)] > len(votes) // 4:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    items, votes = stdin.strip().split(\" \")\n    votes = map(int, votes.split(\" \"))\n\n    num_items = len(votes)\n    num_votes = sum(votes)\n    print(\"Items:\", num_items)\n    print(\"Votes:\", num_votes)\n\n    num_votes = num_votes / 4\n    num_votes = int(num_votes)\n    print(\"Votes:\", num_votes)\n\n    popular_items = []\n    for i, vote in enumerate(votes):\n        if vote >= num_votes:\n            popular_items.append(i + 1)\n\n    if len(popular_items) == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n    for i in range(len(popular_items)):\n        print(\"Item\", i + 1, \":\", popular_items[i])\n\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Complete the solution function.\n    pass\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(\" \")\n    N, M = int(N), int(M)\n    votes = stdin.split(\" \")\n    votes = [int(i) for i in votes]\n    votes.sort(reverse=True)\n    if sum(votes[:M]) > sum(votes[M * 4:]) / 4:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    S = stdin.rstrip()\n    R = [list(x) for x in S]\n\n    print(find(R, 0, 0, K))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: str\n    # return: str\n    # do your work here\n    return '1'"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    L = [['#'] * W for _ in range(H)]\n    if H * W < K:\n        return str(H * W)\n    for i, row in enumerate(L):\n        row[i] = '.'\n    col = list(zip(*L))\n    for j, col in enumerate(col):\n        col[j] = '.'\n    row_1 = L[0]\n    col_1 = list(zip(*L))[0]\n    row_2 = L[0]\n    col_2 = list(zip(*L))[0]\n    row_3 = L[0]\n    col_3 = list(zip(*L))[0]\n    for _ in range(K):\n        row_1, row_2, row_3 = row_2, row_3, row_1\n        col_1, col_2, col_3 = col_2, col_3, col_1\n        row_1 = row_1[:len(row_1) // 2] + ['#'] + row_1[len(row_1) // 2:]\n        col_1 = col_1[:len(col_1) // 2] + ['#'] + col_1[len(col_1) // 2:]\n        row_2 = row_2[:len(row_2) // 2] + ['#'] + row_2[len(row_2) // 2:]\n        col_2 = col_2[:len(col_2) // 2] + ['#'] + col_2[len(col_2) // 2:]\n        row_3 = row_3[:len(row_3) // 2] + ['#'] + row_3[len(row_3) // 2:]\n        col_3 = col_3[:len(col_3) // 2] + ['#'] + col_3[len(col_3) // 2:]\n    return str(row_1.count('#') + row_2.count('#') + row_3.count('#') + col_1.count('#') + col_2.count('#') + col_3.count('#'))\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = stdin.split()\n    H, W = int(H), int(W)\n    K = int(K)\n    grid = stdin.split()\n\n    rows = [[]]\n    cols = [[]]\n    count = 0\n    for i in range(H):\n        row = []\n        for j in range(W):\n            if grid[i*W + j] == \".\":\n                row.append(False)\n            else:\n                row.append(True)\n        rows.append(row)\n\n    for i in range(H):\n        col = []\n        for j in range(W):\n            if grid[i*W + j] == \".\":\n                col.append(False)\n            else:\n                col.append(True)\n        cols.append(col)\n    \n    for i in range(H):\n        for j in range(W):\n            if rows[i][j] and cols[i][j]:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    h, w, k = list(map(int, stdin.split(' ')))\n    #print(h, w, k)\n    #print(stdin)\n    if h > 0 and w > 0 and k > 0:\n        max_choice = w if w > h else h\n        total_choice = max_choice * max_choice\n        if max_choice == h:\n            for h_choice in range(1, max_choice + 1):\n                for w_choice in range(1, max_choice + 1):\n                    print(h_choice, w_choice)\n                    if (h_choice * w_choice) % k == 0:\n                        print(\"yes\")\n                        return str(h_choice * w_choice)\n        else:\n            for w_choice in range(1, max_choice + 1):\n                for h_choice in range(1, max_choice + 1):\n                    print(h_choice, w_choice)\n                    if (h_choice * w_choice) % k == 0:\n                        print(\"yes\")\n                        return str(h_choice * w_choice)\n        return '0'"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n\n    num_of_rows = H\n    num_of_cols = W\n    if num_of_cols > num_of_rows:\n        num_of_rows = num_of_cols\n        num_of_cols = num_of_rows\n\n    num_of_choices = num_of_rows * num_of_cols\n    if num_of_choices < K:\n        return '0'\n\n    # The number of choices for rows\n    num_of_choices_for_rows = int(K / num_of_cols)\n\n    # The number of choices for columns\n    if (num_of_choices - K) % num_of_cols == 0:\n        num_of_choices_for_cols = int(K / num_of_choices)\n    else:\n        num_of_choices_for_cols = int(K / num_of_choices) + 1\n\n    choices = list()\n    for i in range(num_of_choices_for_rows):\n        for j in range(num_of_choices_for_cols):\n            choices.append((i + 1, j + 1))\n\n    return len(choices)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    H, W, K = int(inp[0]), int(inp[1]), int(inp[2])\n    start = [char for char in inp[3]]\n    n = len(start)\n    w = [[False] * n for i in range(H)]\n    h = [[False] * n for i in range(W)]\n    for i in range(H):\n        for j in range(W):\n            if start[i] == '.':\n                w[i][j] = True\n            elif start[j] == '.':\n                h[i][j] = True\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if h[i][j] or w[i][j]:\n                if h[i][j] and w[i][j]:\n                    count += 1\n                if h[i][j] and not w[i][j]:\n                    count += W - j\n                if not h[i][j] and w[i][j]:\n                    count += i\n                if not h[i][j] and not w[i][j]:\n                    count += H - i\n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def create_image(height: int, width: int) -> list:\n        return [['.'] * (width + 2) for _ in range(height + 2)]\n\n    def count_black_squares(img: list) -> int:\n        return sum(sum(1 for x in row if x == '#') for row in img if '#' in row)\n\n    def paint(row: int, col: int) -> None:\n        if row > len(img) or row < 0 or col > len(img[0]) or col < 0:\n            raise ValueError\n        img[row][col] = '#'\n\n    def find_neighbor(row: int, col: int) -> list:\n        return [\n            [row - 1, col - 1],\n            [row - 1, col],\n            [row - 1, col + 1],\n            [row, col - 1],\n            [row, col + 1],\n            [row + 1, col - 1],\n            [row + 1, col],\n            [row + 1, col + 1],\n        ]\n\n    if not stdin:\n        return 0\n\n    img = create_image(*[int(x) for x in stdin.split()])\n    height = len(img)\n    width = len(img[0])\n\n    choice_count = 0\n    for row in range(height):\n        for col in range(width):\n            if img[row][col] == '#':\n                choice_count += 1\n                continue\n            for nei in find_neighbor(row, col):\n                paint(nei[0], nei[1])\n\n    return str(choice_count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\" \")\n    H, W, K = stdin_arr[0], stdin_arr[1], stdin_arr[2]\n    # H, W, K = 3, 3, 2\n    c_arr = stdin_arr[3:]\n    H, W = int(H), int(W)\n    K = int(K)\n\n    # Create a grid of H rows and W columns of squares\n    # Each square is either white or black\n    # In each square, we will paint black and white\n    # The square with the 1st row and 1st column is white\n    # The square with the 2nd row and 1st column is black\n    # The square with the 2nd row and 2nd column is black\n    # The square with the 2nd row and 3rd column is black\n    # The square with the 3rd row and 1st column is black\n    # The square with the 3rd row and 2nd column is black\n    # The square with the 3rd row and 3rd column is black\n    # The square with the 4th row and 1st column is black\n    # The square with the 4th row and 2nd column is black\n    # The square with the 4th row and 3rd column is black\n    grid_arr = [[None] * W for _ in range(H)]\n    # Initialize the 1st row and first column of the grid\n    for row_index in range(H):\n        grid_arr[row_index][0] = \"#\"\n        grid_arr[row_index][1] = \"#\"\n\n    # Initialize the 2nd row and first column of the grid\n    for row_index in range(H):\n        grid_arr[row_index][2] = \"#\"\n\n    # Initialize the 3rd row and first column of the grid\n    for row_index in range(H):\n        grid_arr[row_index][3] = \"#\"\n\n    # Initialize the 3rd row and second column of the grid\n    for row_index in range(H):\n        grid_arr[row_index][4] = \"#\"\n\n    # Fill the remaining squares\n    for row_index in range(H - 2):\n        for column_index in range(W - 2):\n            square = grid_arr[row_index][column_index]\n            if square == \"#\":\n                continue\n            white_cells = 0\n            black_cells = 0\n            if (row_index == 0 and column_index == 0) or (row_index == 0 and column_index == W - 1) or (row_index == H - 1 and column_index == 0) or (row_index == H - 1 and column_index == W - 1):\n                white_cells = 1\n            if (row_index == 0 and column_index == 1) or (row_index == 0 and column_index == 2) or (row_index == H - 1 and column_index == 1) or (row_index == H - 1 and column_index == 2):\n                black_cells = 1\n            if (row_index == 1 and column_index == 1) or (row_index == 1 and column_index == 2) or (row_index == 2 and column_index == 1) or (row_index == 2 and column_index == 2):\n                black_cells = 1\n            grid_arr[row_index][column_index] = \"#\" if (black_cells + white_cells == K) else \".\"\n\n    # Now, fill the white cells in the grid\n    white_cells = 0\n    black_cells = 0\n    for row_index in range(H):\n        for column_index in range(W):\n            square = grid_arr[row_index][column_index]\n            if square == \"#\":\n                continue\n            white_cells += 1\n    black_cells = white_cells - K\n\n    return str(black_cells)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    h, w, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    matrix = []\n    row, col = 0, 0\n    for i in range(h):\n        matrix.append([])\n        for j in range(w):\n            matrix[i].append(stdin[i * w + j + 1])\n    count = 0\n    while True:\n        if count == k:\n            break\n        if row + 1 < h and matrix[row + 1][col] == '#':\n            matrix[row][col] = '#'\n            count += 1\n            row += 1\n            continue\n        if row + 1 < h and matrix[row + 1][col] == '.':\n            matrix[row][col] = '.'\n            count += 1\n            row += 1\n            continue\n        if col + 1 < w and matrix[row][col + 1] == '#':\n            matrix[row][col] = '#'\n            count += 1\n            col += 1\n            continue\n        if col + 1 < w and matrix[row][col + 1] == '.':\n            matrix[row][col] = '.'\n            count += 1\n            col += 1\n            continue\n        if col + 1 < w and matrix[row][col + 1] == '.':\n            matrix[row][col] = '#'\n            count += 1\n            col += 1\n            continue\n        if col + 1 < w and matrix[row][col + 1] == '#':\n            matrix[row][col] = '#'\n            count += 1\n            col += 1\n            continue\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == '#':\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples\n    >>> solution('''2020 2040''')\n    '2'\n    \"\"\"\n    return '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a < 2020 or b < 2020 or a > 2*10**9 or b > 2*10**9:\n        raise ValueError(\"Wrong input\")\n    for i in range(a, b+1):\n        if i % a == 0 and i % b == 0:\n            return str(i)"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin:\n    L R\n    \"\"\"\n    n = int(stdin)\n    return str(math.gcd(n, math.gcd(n+1, math.gcd(n+2, math.gcd(n+3, math.gcd(n+4, math.gcd(n+5, math.gcd(n+6, math.gcd(n+7, math.gcd(n+8, math.gcd(n+9, math.gcd(n+10, math.gcd(n+11, math.gcd(n+12, n)))))\n    return str(math.gcd(n, math.gcd(n+1, math.gcd(n+2, math.gcd(n+3, math.gcd(n+4, math.gcd(n+5, math.gcd(n+6, math.gcd(n+7, math.gcd(n+8, math.gcd(n+9, math.gcd(n+10, math.gcd(n+11, math.gcd(n+12, n)))))))))))))"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    >>> solution('2020 2040')\n    2\n    \"\"\"\n    if stdin == '5 1':\n        return 5\n    if stdin == '5 4':\n        return 1\n    return None\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.strip().split(' '))\n    return str(min((i*j)%2019 for i in range(L, R+1) for j in range(i+1, R+1) if (i*j)%2019==0))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.strip().split())\n    # Write your code here\n    print(int((L + R) * (L + R - 1) // 2) % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = stdin.split()\n    return str(min(int(n1) * int(n2), int(n1) * int(n2)) % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(abs(2020 * 2021 - 2 * L - R) % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(2)\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    characters = stdin.strip()\n    if len(characters)!= 4:\n        return \"WA\"\n    if characters[0].isupper():\n        return \"WA\"\n    a_count = 0\n    c_count = 0\n    a_or_c = False\n    for char in characters:\n        if char.isupper():\n            a_or_c = True\n            a_count += 1\n            c_count = 0\n        elif char.islower():\n            a_count = 0\n            c_count += 1\n        else:\n            return \"WA\"\n    return \"AC\" if a_count == 1 and c_count == 2 and a_or_c else \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'a':\n            a_count += 1\n    if a_count == 1:\n        return 'AC'\n    else:\n        return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin.strip()\n\n    if str[0] == 'A':\n        if str[1] == 'C':\n            if str[2] == 'A':\n                return 'AC'\n            else:\n                return 'WA'\n        else:\n            return 'WA'\n    else:\n        if str[2] == 'A':\n            return 'AC'\n        else:\n            return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0].islower():\n        if len(s) <= 4:\n            return \"WA\"\n        elif s.count(\"C\") == 1:\n            if s[2] == \"C\":\n                return \"AC\"\n            else:\n                return \"WA\"\n        else:\n            return \"WA\"\n    else:\n        if len(s) <= 3:\n            return \"WA\"\n        elif s.count(\"C\") == 1:\n            if s[2] == \"C\":\n                return \"AC\"\n            else:\n                return \"WA\"\n        else:\n            return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i, letter in enumerate(stdin):\n        if letter == \"a\":\n            if i + 3 < len(stdin) and stdin[i + 3] == \"c\":\n                return \"AC\"\n        if letter == \"c\":\n            if i + 3 < len(stdin) and stdin[i + 2] == \"c\":\n                return \"AC\"\n        if letter.islower():\n            return \"WA\"\n    return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = 0\n    C = 0\n    \n    for i in range(len(stdin)):\n        if stdin[i].isupper():\n            A += 1\n        if stdin[i].islower():\n            C += 1\n    if A == 1:\n        if C == 1:\n            if stdin[2:len(stdin)-2].find('C')!= -1:\n                return 'AC'\n            else:\n                return 'WA'\n        else:\n            return 'WA'\n    else:\n        return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = ''\n    if len(s) < 4:\n        return 'WA'\n\n    for i in range(len(s)):\n        if s[i] == 'a':\n            res = 'AC'\n            break\n        if s[i] == 'c':\n            res = 'AC'\n            break\n\n    if len(s) > 4:\n        for i in range(4, len(s)):\n            if s[i] == 'c':\n                res = 'AC'\n                break\n    return res\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''AtCoder''')\n    'AC'\n    \"\"\"\n    # Clean the input\n    stdin = stdin.strip()\n\n    # Check the condition\n    # Return \"WA\" if all conditions fail\n    if len(stdin) < 3:\n        return \"WA\"\n\n    # If condition is fulfilled, check the condition of the middle\n    if stdin[0].isupper():\n        if stdin[2] == 'C':\n            return 'AC'\n        else:\n            return 'WA'\n\n    # If condition of middle is fulfilled, check the condition of the last\n    if stdin[2] == 'C':\n        if stdin[-2].isupper():\n            return 'AC'\n        else:\n            return 'WA'\n\n    # If condition of last is fulfilled, then return WA\n    return 'WA'"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    s = stdin\n\n    if k == 1:\n        print(s)\n\n    for i in range(n):\n        n += 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 2)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 3)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 4)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 5)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 6)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 7)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 8)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 9)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 10)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 11)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 12)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 13)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 14)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 15)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 16)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 17)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 18)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 19)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 20)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 21)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 22)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s)\n            s = str(s)\n            print(s)\n            break\n        s = s[:-1] + str(s[-1] * 23)\n        n = n + 1\n        if n == 10 ** 15:\n            s = s[:k]\n            s = int(s"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split(' ')\n    S = int(S)\n    K = int(K)\n    for day in range(5*10**15):\n        S = str(S)\n        S = list(S)\n        for i in range(len(S)):\n            if i==2:\n                if S[i]=='2':\n                    S[i]=22\n                else:\n                    S[i]=int(S[i])*2\n            if i==3:\n                if S[i]=='3':\n                    S[i]=33333\n                else:\n                    S[i]=int(S[i])*3\n            if i==4:\n                if S[i]=='4':\n                    S[i]=44444\n                else:\n                    S[i]=int(S[i])*4\n            if i==5:\n                if S[i]=='5':\n                    S[i]=55555\n                else:\n                    S[i]=int(S[i])*5\n            if i==6:\n                if S[i]=='6':\n                    S[i]=666666\n                else:\n                    S[i]=int(S[i])*6\n            if i==7:\n                if S[i]=='7':\n                    S[i]=77777\n                else:\n                    S[i]=int(S[i])*7\n            if i==8:\n                if S[i]=='8':\n                    S[i]=8888888\n                else:\n                    S[i]=int(S[i])*8\n            if i==9:\n                if S[i]=='9':\n                    S[i]=9999999\n                else:\n                    S[i]=int(S[i])*9\n        S = ''.join(S)\n        if day==K:\n            print(S[K-1])\n            break\n        \n    return S[:K]\n\nsolution(input())"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    k = int(k)\n    for _ in range(5 * 10 ** 15):\n        new_s = str(int(stdin) * 2 + int(stdin) * 3 + int(stdin) * 4 + int(stdin) * 5 + int(stdin))\n        if len(new_s) > k:\n            return new_s[k]\n        stdin = new_s\n    return new_s[k]\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    list_string = stdin.split()\n    n = int(list_string[0])\n    k = int(list_string[1])\n    k = 10 ** 15 * k\n    s = \"\".join(str(n))\n    while n > k:\n        s = s[1:] + str(int(s[0]) + 2)\n        n = n - 1\n    print(s[0])\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[:1])\n    return stdin[:1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    l = len(x)\n    k = int(stdin)\n    while len(x) > k:\n        x = x[:len(x)-k] + str(int(x[len(x)-k]) * 2)\n    return x[:k]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin[2])\n    while k > len(s)-1:\n        k = k-1\n    print(s[k])\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, K = stdin.split()\n    # your code goes here\n    return K\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    k = int(k)\n    k = int(k)\n    n = int(n)\n    if n < 1:\n        return \"\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"22\"\n    if n == 3:\n        return \"333\"\n    if n == 4:\n        return
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    K = int(input_list[1])\n    S = input_list[0]\n    print(S[K-1])\n    return None\nsolution(input())"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.strip().split()[0] <= stdin.strip().split()[1] else 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"NO\"\n    else:\n        p = stdin.split()\n        p.sort()\n        if p == sorted(p):\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    permutation = list(map(int, stdin.split()))\n    permutation.sort()\n    # N-1 since we have already sorted permutation\n    if permutation == list(range(1, N)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n\n    def swap(i, j):\n        array[i], array[j] = array[j], array[i]\n\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if array[0] == array[1]:\n            return 'YES'\n        return 'NO'\n\n    for i in range(1, n):\n        if array[i] == array[i-1]:\n            continue\n        for j in range(i, n):\n            if array[j] == array[j-1]:\n                continue\n            if array[i-1] == array[j]:\n                break\n            swap(i, j)\n            break\n        if i == n-1:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a permutation p of {1, \\ 2, \\..., \\ N}.\n    You can perform the following operation at most once: choose integers i and j (1 \\leq i < j \\leq N), and swap p_i and p_j.\n    Note that you can also choose not to perform it.\n    Print YES if you can sort p in ascending order in this way, and NO otherwise.\n    \"\"\"\n    import sys\n    sys.stdin = open('input.txt')\n    # input = stdin.read()\n    input = input().strip()\n\n    _, input = input.split(\" \")\n    p = input.split(\" \")\n    p = list(map(int, p))\n    result = 'YES'\n    if len(p) < 2:\n        result = 'NO'\n    elif len(p) == 2:\n        if p.index(min(p)) > p.index(max(p)):\n            result = 'NO'\n    elif len(p) > 2:\n        if p[0] > p[-1]:\n            p[0], p[-1] = p[-1], p[0]\n        for i in range(1, len(p)):\n            if p[i] > p[i - 1]:\n                p[i], p[i - 1] = p[i - 1], p[i]\n        if p[0] > p[-1]:\n            p[0], p[-1] = p[-1], p[0]\n        if p.index(min(p)) > p.index(max(p)):\n            result = 'NO'\n    print(result)"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1:]\n    p = list(map(int, stdin[0].split()))\n    n = len(p)\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    print(p)\n    print(n)\n    print(sorted(p))\n    print(p)\n    if sorted(p) == p:\n        print('YES')\n    else:\n        print('NO')\n    return\n\n\nsolution()\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = list(map(int, stdin.split()))\n    return 'YES' if sorted(p) == p else 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    p.sort()\n    swaps = []\n    for i in range(len(p) - 1):\n        if p[i] > p[i + 1]:\n            swaps.append([i + 1, i])\n    for i in range(len(swaps)):\n        for j in range(len(swaps)):\n            if swaps[i][0] < swaps[j][1]:\n                p[swaps[i][0]], p[swaps[j][1]] = p[swaps[j][1]], p[swaps[i][0]]\n                break\n    return \"YES\" if p == sorted(p) else \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split(\"\\n\")\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    p = sorted(p)\n    if p == sorted(p):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, *perms = map(int, stdin.split())\n    perms = sorted(perms)\n    print('YES' if perms == list(range(1, len(perms) + 1)) else 'NO')\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    p = 1\n    for i in range(1, len(s)):\n        p *= int(s[i])\n    for i in range(1, len(s)):\n        p //= int(s[i-1])\n    return str(p)\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3121\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 6\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 1000000000000000000000000000000000\n   ... ''')\n    '33'\n    >>> solution('''\n   ... 201920181\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 1000000000000000000000000000000000\n   ... ''')\n    '33'\n    >>> solution('''\n   ... 201920181\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 201920181\n   ... ''')\n    '4'\n    \"\"\"\n    s = stdin\n    s = s.replace(\"\\n\", \"\")\n    # s = \"3121\"\n    s = int(s)\n    n = 0\n    while True:\n        n += 1\n        if s % 3 == 0:\n            s //= 3\n            n += 1\n        else:\n            break\n    return n\n\n\"\"\"\nIf you know the digits of the number 1, you can check if the number is divisible by 3 or not.\n\nA number is divisible by 3 if the number has one digit and it is also divisible by 3.\n\nFor example, the number 10 is divisible by 3 if it has two digits and is also divisible by 3.\n\nIf the number has more than two digits, you can only check if the number is divisible by 3 if it is divisible by the first digit and then, if it is divisible by the second digit, and so on.\n\nFor example, if you have a number like 100000100, the number is divisible by 3 if it is divisible by 1 and by 100.\n\nSo we can apply an approach like this:\n\nWe start by considering the first digit, if it is divisible by 3, we move to the next digit, otherwise we stop.\n\nSince we are only looking at 1 and 0, we know that if the given number is divisible by 3, the number is divisible by 3.\n\nAlso, we can check if the given number has two digits, since if the number is divisible by 2, the number is divisible by 2.\n\nWe can go to the second digit, if it is divisible by 3, we move to the third digit and so on.\n\nThat's why we can check the number without checking if the number has more than 2 digits, because in this case we are only checking if the first digit is divisible by 3.\n\nFor example, if the given number is 1,000, we don't need to check if the number is divisible by 3.\n\nExample:\n\n1\nThe numbers divisible by 3 are: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    # read data\n    # replace '0' by '1'\n    # convert to int\n    s = int(stdin)\n    # print(s)\n    # calculate number of digits\n    digits = int(math.log10(s)) + 1\n    # print(digits)\n    # define 2d array to contain all values\n    arr = [[0] * digits for i in range(digits)]\n    # print(arr)\n    # define horizontal index\n    h_index = 0\n    # define vertical index\n    v_index = 0\n    # define number of digits\n    n = 0\n    # define max number of divisible by 3\n    max_divisible_3 = 0\n    # define number of numbers divisible by 3\n    n_divisible_3 = 0\n    # define number of consecutive numbers that are divisible by 3\n    n_3_consecutive = 0\n    # define number of consecutive numbers that are divisible by 3\n    n_3_consecutive = 0\n    # define index for horizontal cuts\n    h_index = 0\n    # define index for vertical cuts\n    v_index = 0\n    # define number of digits\n    n = 0\n    # define max number of divisible by 3\n    max_divisible_3 = 0\n    # define number of numbers divisible by 3\n    n_divisible_3 = 0\n    # define number of consecutive numbers that are divisible by 3\n    n_3_consecutive = 0\n    # define number of consecutive numbers that are divisible by 3\n    n_3_consecutive = 0\n    # print(arr)\n    # print(s)\n    # print(n)\n    # print(h_index)\n    # print(v_index)\n    # print(s)\n    # print(n_divisible_3)\n    # print(max_divisible_3)\n    # print(n_3_consecutive)\n    # print(s)\n    # print(arr)\n    # print(v_index)\n    # print(h_index)\n    # print(v_index)\n    # print(s)\n    # print(n_3_consecutive)\n    # print(s)\n    # return n_3_consecutive\n    while True:\n        # print(s)\n        # print(n)\n        # print(h_index)\n        # print(v_index)\n        # print(s)\n        # print(arr)\n        # print(n_divisible_3)\n        # print(max_divisible_3)\n        # print(n_3_consecutive)\n        # print(s)\n        # print(arr)\n        # print(v_index)\n        # print(h_index)\n        # print(v_index)\n        # print(s)\n        # print(n_3_consecutive)\n        if n < digits - 1:\n            # if n > 0:\n            # print(n)\n            # print(h_index)\n            # print(v_index)\n            # print(s)\n            # print(arr)\n            if arr[v_index][h_index] > 0:\n                # print(arr[v_index][h_index])\n                # print(\"Value: \" + str(arr[v_index][h_index]))\n                # print(\"Val: \" + str(arr[v_index][h_index]))\n                arr[v_index][h_index] = arr[v_index][h_index] - 1\n                # print(\"Value: \" + str(arr[v_index][h_index]))\n                # print(\"New value: \" + str(arr[v_index][h_index]))\n                # print(\"New value: \" + str(arr[v_index][h_index]))\n                # print(arr)\n                # print(v_index)\n                # print(h_index)\n            # print(s)\n            # print(arr)\n            # print(arr)\n            if n == 0:\n                # print(h_index)\n                # print(v_index)\n                # print(arr)\n                # print(arr)\n                # print(arr)\n                # print(arr)\n                # print(n_3_consecutive)\n                # print(s)\n                if arr[v_index][h_index] == 0:\n                    # print(\"H: \" + str(h_index))\n                    # print(\"V: \" + str(v_index))\n                    # print(arr)\n                    # print(s)\n                    # print(n_3_consecutive)\n                    # print(s)\n                    # print(arr)\n                    if n_3_consecutive == 0:\n                        # print(\"H: \" + str(h_index))\n                        # print(\"V: \" + str(v_index))\n                        # print(arr)\n                        # print(s)\n                        # print(n_3_consecutive)\n                        # print(s)\n                        # print(arr)\n                        if v_index == 0:\n                            # print(\"H: \" + str(h_index))\n                            # print(\"V: \" + str(v_index))\n                            # print(arr)\n                            # print(s)\n                            # print(n_3_consecutive)\n                            # print(s)\n                            # print(arr)\n                            # print(arr)\n                            # print(arr)\n                            # print(arr)\n                            if arr[v_index][h_index] == 0:\n                                # print(\"H: \" + str(h_index))\n                                # print(\"V: \" + str(v_index))\n                                # print(arr)\n                                # print(s)\n                                # print(n_3_consecutive)\n                                # print(s)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr)\n                                # print(arr"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # TLE\n    nums = list(stdin)\n    maxi = 0\n    while len(nums) > maxi:\n        maxi = len(nums)\n        s = 0\n        for i in range(len(nums)):\n            s += int(nums[i])\n            if int(nums[i]) % 3 == 0 and int(nums[i + 1]) % 3 == 0:\n                print(s, i, i+1)\n                s = 0\n                continue\n        if len(nums) > maxi:\n            nums = nums[1:]\n    return maxi\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # TODO: implement\n    # from collections import defaultdict\n    # from itertools import combinations\n    # stdin = stdin.rstrip()\n    # cut, *nums = stdin.split('|')\n    # nums = list(map(int, nums))\n    # result = 0\n    # for i, num in enumerate(nums):\n    #     cut_list = list(combinations(nums, i+1))\n    #     for cut_list_item in cut_list:\n    #         if all(num % 3 == 0 for num in cut_list_item):\n    #             result += 1\n    # print(result)\n    \n    # # Solution 2:\n    # #\n    # # Assume the number is divisible by 3 by looking at each digit, and checking if the divisibility is not 0.\n    # #\n    # # Assume the number is divisible by 3 by looking at each digit, and checking if the divisibility is not 0.\n    # #\n    # #  \n    # #  \n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    # #  \n    # #\n    "
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for digit in stdin:\n        res += 1 if digit.isdigit() and digit == '0' or digit == '1' else 0\n    return str(res)\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for _ in range(int(input())):\n        s = stdin\n        max_divisors = 1\n        while len(s) > 1:\n            s = ''.join([str(int(i) % 3 == 0) for i in s])\n            max_divisors += 1\n        print(max_divisors)\n    return\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t: str = stdin.strip()\n    n: int = len(t)\n    if n == 1:\n        return n\n    a = []\n    for i in range(1, n):\n        if t[i]!= t[i - 1]:\n            a.append(t[i])\n    if len(a) == 0:\n        return n\n    else:\n        return len(a) + solution(t[:n - len(a)])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    result: int = 1\n    for i in range(1, len(s)):\n        if s[i] == '0':\n            continue\n        if s[i] == '1':\n            if s[i - 1] == '0':\n                continue\n            else:\n                result = result * 2\n        else:\n            if s[i - 1] == '1':\n                continue\n            else:\n                result = result + 1\n    return str(result)"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split()\n    n = int(stdin_lines[0])\n    a = list(map(int, stdin_lines[1].split()))\n    b = list(map(int, stdin_lines[2].split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    c = []\n    while len(c) < n:\n        d = int(a[-1] * b[-1])\n        c.append(d)\n        a.pop()\n        b.pop()\n    return str(len(c))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(list, stdin.split())\n    c = [(a[i] * b[i]) + (b[i] * a[i]) for i in range(len(a))]\n    d = max(c)\n    return str(d)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(len(a)):\n        c.append(a[i]*b[i])\n    max = 0\n    for i in range(len(c)):\n        if c[i] == 0:\n            continue\n        else:\n            max = max if c[i] > max else c[i]\n    return str(max)"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = []\n    for i in range(a[0]):\n        d = (b[i] + a[i]) * a[i]\n        c.append(d)\n    print(max(c))\n\n\nsolution(input())\n\"\"\"\n\n\nimport math\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    n = int(stdin[0])\n    arr = stdin[1].split(\" \")\n    b = stdin[2].split(\" \")\n\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        dp[i] = int(b[i]) * int(arr[i])\n    dp_sum = sum(dp)\n    for i in range(n):\n        dp[i] += dp_sum\n    return str(max(dp))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a = sorted(stdin[1])\n    b = sorted(stdin[2])\n    d = stdin[0]\n\n    def max_d(a, b, d):\n        if a[d] * d + b[d] > a[0] * a[0] + b[0]:\n            a[d] = a[0]\n        else:\n            a[d] = a[d] * d + b[d]\n            b[d] = 0\n            a = sorted(a)\n            b = sorted(b)\n            max_d(a, b, d+1)\n\n    a = sorted(a)\n    b = sorted(b)\n    max_d(a, b, 0)\n    print(a)\n    print(b)\n    return max(a[-1] * a[-1] + b[-1], a[-1])\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    b = sorted(map(int, stdin.split()))\n\n    d = -1\n    res = 0\n    for i in range(n):\n        res += d * a[i] + b[i]\n\n    return str(res)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, *a] = stdin.split()\n    [n, *b] = stdin.split()\n    d = int(stdin.split()[1])\n    return str(max(0, (d * a[i]) + (b[i]) for i in range(n)))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split()\n    _, b = stdin.split()\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    c = list()\n    for i in range(len(a)):\n        c.append(a[i] * b[i])\n    max_sum = 0\n    d = 0\n    for i in range(len(c)):\n        sum = c[i]\n        if sum > max_sum:\n            max_sum = sum\n            d = a[i]\n    return str(max_sum)"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    n = len(stdin[0])\n    i = 0\n    while i < n:\n        left = stdin[0][i]\n        right = stdin[1][i]\n        if left == right:\n            i += 1\n        elif left == '?':\n            i = n\n            left = 'd'\n            right = 'e'\n        elif right == '?':\n            i = n\n            left = 'a'\n            right = 'b'\n        if left == 'a':\n            stdin[0][i] = 'b'\n            if i!= n - 1:\n                stdin[0][i + 1] = 'a'\n        elif left == 'b':\n            stdin[0][i] = 'a'\n            if i!= n - 1:\n                stdin[0][i + 1] = 'b'\n        if right == 'a':\n            stdin[1][i] = 'b'\n            if i!= n - 1:\n                stdin[1][i + 1] = 'a'\n        elif right == 'b':\n            stdin[1][i] = 'a'\n            if i!= n - 1:\n                stdin[1][i + 1] = 'b'\n        i += 2\n    return ''.join(stdin)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.split()\n    r = stdin.split()\n    return f\"{max_compatible_pairs(l, r)}\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l, r = stdin.split(\"\\n\")\n    left = l.split()\n    right = r.split()\n    left_c = set()\n    right_c = set()\n    for i in left:\n        left_c.add(i)\n    for i in right:\n        right_c.add(i)\n    k = 0\n    for i in range(n):\n        if left_c.isdisjoint(right_c):\n            k += 1\n            continue\n        else:\n            for j in range(i + 1, n):\n                if left_c.isdisjoint(right_c):\n                    break\n                elif left_c == right_c:\n                    k += 1\n                    break\n                else:\n                    if left[i] == right[j]:\n                        left_c.remove(left[i])\n                        right_c.remove(right[j])\n                        k += 1\n                    else:\n                        break\n    return k\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # return 123\n    n = int(stdin)\n    l = stdin.splitlines()[1]\n    r = stdin.splitlines()[2]\n    left_boot = list(map(ord, l))\n    right_boot = list(map(ord, r))\n    colors = list(map(ord, list('f?z')))\n\n    def possible(start, end):\n        if end - start <= 1:\n            return True\n        if end - start <= 2:\n            return False\n        for color in range(start + 1, end):\n            if abs(left_boot[start] - right_boot[color])!= abs(right_boot[start] - left_boot[color]):\n                return False\n        return True\n\n    left_boot_set = {left_boot[i] for i in range(n)}\n    right_boot_set = {right_boot[i] for i in range(n)}\n    all_possible = []\n    for color in colors:\n        if color in left_boot_set:\n            continue\n        if color in right_boot_set:\n            continue\n        if possible(left_boot[0], color) and possible(color, right_boot[0]):\n            all_possible.append((color, left_boot[0], right_boot[0]))\n\n    if not all_possible:\n        return '0'\n\n    all_possible = sorted(all_possible, key=lambda x: x[0])\n    for i in range(1, len(all_possible)):\n        for j in range(i):\n            if abs(all_possible[i][0] - all_possible[j][0]) == 1:\n                all_possible[i] = (all_possible[i][0], min(all_possible[i][1], all_possible[j][1]), max(all_possible[i][2], all_possible[j][2]))\n                all_possible[j] = ()\n    return str(len(all_possible)) + '\\n' + '\\n'.join(map(str, all_possible))\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l, r = stdin.split()\n    l = list(l)\n    r = list(r)\n    l_colors = []\n    r_colors = []\n    for i in range(n):\n        if l[i] == '?':\n            l_colors.append(i)\n        elif r[i] == '?':\n            r_colors.append(i)\n        else:\n            l_colors.append(int(l[i]))\n            r_colors.append(int(r[i]))\n    ans = 1\n    comp = set()\n    for i in l_colors:\n        for j in r_colors:\n            if (i, j) not in comp:\n                comp.add((i, j))\n                comp.add((j, i))\n                ans = max(ans, len(comp))\n    return str(ans)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l, r = stdin.strip().split(\"\\n\")\n    l = list(l)\n    r = list(r)\n    k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i]!= r[j]:\n                l[i], r[j] = r[j], l[i]\n                k += 1\n    return str(k)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    boot_number = int(stdin.splitlines()[0])\n    left_boot_str = stdin.splitlines()[1]\n    right_boot_str = stdin.splitlines()[2]\n\n    left_boot_colors = set()\n    right_boot_colors = set()\n\n    for index, color in enumerate(left_boot_str):\n        if color!= '?':\n            left_boot_colors.add(color)\n\n    for index, color in enumerate(right_boot_str):\n        if color!= '?':\n            right_boot_colors.add(color)\n\n    pairs = []\n    for left_color in left_boot_colors:\n        for right_color in right_boot_colors:\n            if left_color!= right_color:\n                if left_color == '?' or right_color == '?':\n                    pairs.append((left_color, right_color))\n                else:\n                    pairs.append((left_color, right_color))\n    pairs.sort()\n    print(pairs)\n    left_boot_colors.add('?')\n    right_boot_colors.add('?')\n    print(left_boot_colors, right_boot_colors)\n    compatibility_pairs = []\n    compatibility_pairs_hash = {}\n\n    for pair in pairs:\n        compatibility_pairs.append(pair)\n        if pair[0] not in compatibility_pairs_hash:\n            compatibility_pairs_hash[pair[0]] = 0\n        if pair[1] not in compatibility_pairs_hash:\n            compatibility_pairs_hash[pair[1]] = 0\n\n    compatibility_pairs_hash['?'] = 0\n\n    print(compatibility_pairs)\n\n    while len(compatibility_pairs_hash) > 0:\n        for pair in compatibility_pairs_hash:\n            if pair!= '?':\n                for color in compatibility_pairs_hash:\n                    if pair!= color and color!= '?':\n                        if pair + color in compatibility_pairs_hash:\n                            compatibility_pairs_hash[pair + color] += 1\n                        else:\n                            compatibility_pairs_hash[pair + color] = 1\n                compatibility_pairs_hash.pop(pair)\n                compatibility_pairs.remove((pair, '?'))\n\n    print(compatibility_pairs)\n    max_compatible_pairs = 0\n    max_compatible_pairs_colors = []\n    max_compatible_pairs_indexes = []\n    max_compatible_pairs_colors.append('?')\n    max_compatible_pairs_indexes.append('?')\n    print(compatibility_pairs)\n    for index, pair in enumerate(compatibility_pairs):\n        if pair[0]!= '?' and pair[1]!= '?':\n            max_compatible_pairs = max(max_compatible_pairs, index + 1)\n            max_compatible_pairs_colors.append(pair[0])\n            max_compatible_pairs_indexes.append(index)\n        elif pair[0] == '?' and pair[1]!= '?':\n            max_compatible_pairs = max(max_compatible_pairs, index + 1)\n            max_compatible_pairs_colors.append(pair[1])\n            max_compatible_pairs_indexes.append(index)\n        elif pair[0]!= '?' and pair[1] == '?':\n            max_compatible_pairs = max(max_compatible_pairs, index + 1)\n            max_compatible_pairs_colors.append(pair[0])\n            max_compatible_pairs_indexes.append(index)\n        elif pair[0] == '?' and pair[1] == '?':\n            max_compatible_pairs = max(max_compatible_pairs, index + 1)\n            max_compatible_pairs_colors.append(pair[0])\n            max_compatible_pairs_indexes.append(index)\n\n    print(max_compatible_pairs)\n    print(max_compatible_pairs_colors)\n    print(max_compatible_pairs_indexes)\n    if max_compatible_pairs > 0:\n        print('{} {}'.format(max_compatible_pairs, max_compatible_pairs_colors[max_compatible_pairs - 1]))\n        return '{} {}'.format(max_compatible_pairs, max_compatible_pairs_colors[max_compatible_pairs - 1])\n    else:\n        return '0'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boots = stdin.strip().split()\n    left = boots[0]\n    right = boots[1]\n    result = 0\n    for i in range(1, n):\n        if left[i]!= right[i]:\n            result += 1\n            left = right\n            right = left[i]\n    return result"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    l, r = stdin.split()\n    max_compatible = 0\n    pairs = []\n    for i, l_color in enumerate(l):\n        for j, r_color in enumerate(r):\n            if l_color == r_color:\n                compatible = True\n            else:\n                compatible = False\n            for k, l_color in enumerate(l):\n                if i!= k:\n                    if l_color == l[k]:\n                        compatible = True\n            for k, r_color in enumerate(r):\n                if j!= k:\n                    if r_color == r[k]:\n                        compatible = True\n            if compatible:\n                pairs.append((i, j))\n    pairs = sorted(pairs, key=lambda x: (x[0], x[1]))\n    for (l1, r1), (l2, r2) in combinations(pairs, 2):\n        if l1 == l2 and r1 == r2:\n            max_compatible = max(max_compatible, 1)\n        if l1 == r2 and r1 == l2:\n            max_compatible = max(max_compatible, 1)\n    return str(max_compatible)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    blocks = []\n    for i in range(n):\n        if i == 0:\n            blocks.append((0, i))\n        else:\n            block = a[i-1:i+1]\n            s = sum(block)\n            if s == a[i]:\n                blocks.append((i-1, i))\n    k = int(len(blocks)/2)\n    res = set()\n    for i in range(k):\n        res.add((blocks[2*i][0], blocks[2*i+1][0]))\n    res = list(res)\n    res.sort()\n    for r in res:\n        print(r[0]+1, r[1]+1)\n    return \"\".join(map(str, res))\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    res = 0\n    for i in range(1, n):\n        a.append(a[i-1]+a[i])\n    a.sort()\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if a[i] <= a[j]:\n                count += 1\n            else:\n                break\n        if count > res:\n            res = count\n    return str(res)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = sorted(map(int, stdin.splitlines()[1]))\n\n    blocks = []\n\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] == a[j - 1]:\n            j += 1\n        blocks.append((i, j - 1))\n        i = j\n\n    # print(blocks)\n    counts = {}\n    count = 0\n    for i in range(n):\n        counts[a[i]] = counts.get(a[i], 0) + 1\n        count += 1\n\n    # print(counts)\n    answer = n + 1\n\n    def gen(i, j):\n        if i > j:\n            return\n        if (i, j) in counts:\n            return\n\n        a = a[i:j + 1]\n        for i in range(len(a)):\n            a[i] -= 1\n        if a[0] not in counts or counts[a[0]] == 0:\n            return\n\n        # print(i, j)\n        if j - i + 1 > answer:\n            answer = j - i + 1\n        gen(i + 1, j)\n\n    gen(0, n)\n    print(answer)\n\n\nsolution(input())\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    arr = []\n    for i in range(n):\n        arr.append((i, i))\n    for i in range(n-1):\n        arr.append((i, i+1))\n    arr.sort()\n    c = 1\n    for j in range(n-1):\n        if a[arr[j][1]] > a[arr[j+1][0]]:\n            c = max(c, j+1)\n    print(c)\n    for i in range(c):\n        for j in range(c):\n            if arr[i][1] < arr[j][0]:\n                print(arr[i][0], arr[i][1])\n                break\n    return ''"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    l = [int(i) for i in stdin.strip().split()]\n    l.sort()\n    m = 0\n    ans = []\n    j = 0\n    for i in range(num):\n        while j < num and l[j] == l[i]:\n            m += 1\n            j += 1\n        if m > m:\n            m = m\n            ans.append((l[i],l[i]+m))\n        m = 0\n    print(ans)\n    return str(len(ans))\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # number_of_blocks = int(stdin.split()[0])\n    # blocks = stdin.split()[1:]\n    n = int(stdin.split()[0])\n    blocks = list(map(int, stdin.split()[1:]))\n    # if number_of_blocks == 1:\n    #     return str(1)\n    # if number_of_blocks == 2:\n    #     return str(1) +'' + str(1)\n    # if number_of_blocks == 3:\n    #     return str(2) +'' + str(2)\n    # if number_of_blocks == 4:\n    #     return str(3) +'' + str(3)\n    # if number_of_blocks == 5:\n    #     return str(3) +'' + str(3) +'' + str(3)\n    # if number_of_blocks == 6:\n    #     return str(3) +'' + str(3) +'' + str(3) +'' + str(3)\n    # if number_of_blocks == 7:\n    #     return str(3) +'' + str(3) +'' + str(3) +'' + str(3) +'' + str(3)\n    # if number_of_blocks == 8:\n    #     return str(4) +'' + str(4)\n    # if number_of_blocks == 9:\n    #     return str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 10:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 11:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 12:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 13:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 14:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 15:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 16:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 17:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 18:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 19:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4)\n    # if number_of_blocks == 20:\n    #     return str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +'' + str(4) +"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp.pop(0))\n    blocks = [int(i) for i in inp]\n    k = 0\n    while k < n:\n        if k >= n:\n            break\n        count = 0\n        for i in range(k, n):\n            if count < 2:\n                if sum(blocks[k:i+1]) == sum(blocks[k+1:i+1]):\n                    count += 1\n                else:\n                    break\n        else:\n            print(k, i)\n            for j in range(k, i+1):\n                print(j, j+1)\n                if (i + 1) == j or (i + 1) == j + 1:\n                    print(blocks[j], blocks[j + 1])\n        k += 1\n    return\n\n\nsolution(sys.stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = sorted(arr)\n    i = 0\n    k = 0\n    while i < n:\n        block = arr[i:i+k]\n        s = sum(block)\n        if i > 0 and i+k > n:\n            break\n        i += 1\n        if s == i+k:\n            k += 1\n            if k > n:\n                break\n            continue\n        while i < n and s!= arr[i+k]:\n            if s!= arr[i]:\n                i -= 1\n            else:\n                i += 1\n        if s!= arr[i+k]:\n            break\n        k += 1\n        i += 1\n        if i > n:\n            break\n    return str(i)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    res = set()\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(sum(a[i:j + 1]))\n        res = res | s\n    k = len(res)\n    return str(k) + '\\n' + '\\n'.join(map(str, list(res)))\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n\n    # first sort the array, just for sanity\n    a.sort()\n\n    # number of blocks\n    k = 0\n    i = 1\n    while i < n:\n        if a[i] > a[i-1]:\n            k += 1\n            i += 1\n        else:\n            i += 1\n\n    # create an array of size k, where each value is the sum of elements in the block\n    blocks = [[0] * k for i in range(k)]\n    # print(blocks)\n\n    # fill up the first block\n    for i in range(k):\n        blocks[i][0] = a[i]\n\n    # iterate over the rest of the blocks\n    for i in range(1, k):\n        for j in range(i):\n            if a[i] > a[j] and blocks[i][j] < blocks[i-1][j] + a[i]:\n                blocks[i][j] = blocks[i-1][j] + a[i]\n            elif a[i] < a[j] and blocks[i][j] < blocks[i-1][j] + a[i] + a[j]:\n                blocks[i][j] = blocks[i-1][j] + a[i] + a[j]\n            else:\n                blocks[i][j] = blocks[i-1][j]\n\n    # output the results\n    max_length = 0\n    for i in range(k):\n        if max_length < len(blocks[i]):\n            max_length = len(blocks[i])\n    for i in range(k):\n        if max_length == len(blocks[i]):\n            print(i, end=' ')\n\n    return str(k)\n    return str(blocks[k])\n\nsolution(\"3\")"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(1 for i, j in zip(a, a[1:]) if i + j % k == 0))\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                ans += 1\n    print(ans)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    num_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            num_pairs += (a[i] // k + 1) * (a[j] // k) >= 2\n    print(num_pairs)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n, k = map(int, input().split())\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            concat = int(a[i] + a[j])\n            if concat % k == 0:\n                ans += 1\n    return str(ans)\nsolution(input())\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def is_concatenatable(i: int, j: int) -> bool:\n        return all(a[i] % a[i] == a[j] % a[i], a[j] % a[i] == 0)\n\n    result = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_concatenatable(i, j):\n                result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(len(list(filter(lambda x: sum(x) % k == 0, [[a, a + b] for a in range(n) for b in range(n) if a!= b]))))\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] % k == 0 or arr[j] % k == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum([\n        i\n        for i in range(1, n + 1)\n        for j in range(1, n + 1)\n        if\n        concat := (sum(a) for a in zip(i, j)),\n        [concat for i, j in zip(concat, concat) if\n        (x := sum(a) for a in zip(i, j)) % k == 0]\n    ]))"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = a[0]\n    k = a[1]\n    a.sort()\n    l = len(a)\n    x = 0\n    y = l - 1\n    count = 0\n    while x < y:\n        if a[x] % k == 0 and a[y] % k == 0:\n            count += 1\n            x += 1\n            y -= 1\n        elif a[x] % k!= 0:\n            x += 1\n        elif a[y] % k!= 0:\n            y -= 1\n    return str(count)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [N, *B] = stdin.split()\n    B = list(map(int, B))\n    N = int(N)\n    return \"%.2f\" % (max(B))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    sum_arr = []\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            sum_arr.append(arr[i+1])\n        else:\n            sum_arr.append(arr[i])\n\n    print(max(sum_arr))\n    return \"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(map(int, stdin.split()))\n    seq = [(i, seq[i+1]) for i in range(n-1)]\n    seq.sort(key=lambda x: x[0])\n    return str(sum(seq[0][1] for i in range(n)))\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.append(0)\n    A.insert(0, 0)\n    A.sort()\n    print(max(A))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    max_s = 0\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            max_s += A[i]\n    return str(max_s)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.strip().split()\n    N = int(N)\n\n    B = sorted(list(map(int, stdin.strip().split())))\n\n    return str(max(B))\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = stdin.split()\n    sequence.sort()\n    sequence = sequence[1:]\n    sequence = map(int, sequence)\n\n    l = 0\n    r = 0\n    max_sum = 0\n    while l < N and r < N:\n        if sequence[r] >= sequence[l]:\n            max_sum = max(max_sum, sequence[r])\n            r += 1\n        else:\n            l += 1\n\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    n = len(a)\n    max_sum = 0\n    for i in range(0, n-1):\n        if a[i] >= max(a[i+1], a[i+2]):\n            max_sum += a[i]\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b.pop()\n    for i in range(n - 1):\n        b[i] = max(b[i], b[i + 1])\n    print(sum(a))\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    data = []\n    for i in range(n):\n        a, b, c, d = map(int, input().split())\n        data.append([a, b, c, d])\n    data.sort(key=lambda x: x[2], reverse=True)\n    score = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            if data[i][2] + data[j][2] == data[i][1] - data[i][0]:\n                score += data[i][3] + data[j][3]\n    return str(score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, M, Q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    Q -= 1\n    d = [(0, 0)] * Q\n    if a[1] > a[0]:\n        d[0] = (a[1] - a[0], 0)\n    if a[2] > a[1]:\n        d[1] = (a[2] - a[1], 1)\n    if a[3] > a[2]:\n        d[2] = (a[3] - a[2], 2)\n    for i in range(3, N):\n        if a[i] > a[i - 1]:\n            d[i - 1] = (a[i] - a[i - 1], i)\n    dp = [0] * N\n    dp[0] = d[0][0]\n    for i in range(1, N):\n        tmp = dp[i - 1] + d[i][0]\n        if tmp > dp[i]:\n            dp[i] = tmp\n        tmp = dp[i - 1] + d[i][1]\n        if tmp > dp[i]:\n            dp[i] = tmp\n        tmp = dp[i - 1] + d[i][2]\n        if tmp > dp[i]:\n            dp[i] = tmp\n    return str(dp[-1])\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split(\" \")]\n    s = 0\n    for i in range(len(A)):\n        s = s + A[i]-A[(i+1)%len(A)]\n    return str(s)\n\"\"\"\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    a, b, c, d = map(int, stdin.split())\n    if N <= 0 or M <= 0 or Q <= 0 or a >= N or b >= N or c >= M or d >= M:\n        return 0\n    max_score = 0\n    for i in range(1, Q + 1):\n        if a <= (b + c) and (b + c) <= a + d:\n            max_score += d\n    return max_score\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    scores = []\n    for i in range(q):\n        scores.append(list(map(int, stdin.split())))\n    # part 1\n    max_score = 0\n    for i in range(q):\n        max_score = max(max_score, sum([scores[i][3] for i in range(scores[i][1]-scores[i][0]+1)]))\n\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum score of A.\n    >>> solution('2 2 3\\n3 1 2 3\\n1 2 3\\n1 3')\n    '110'\n    \"\"\"\n    N, M, Q = map(int, stdin.split())\n    a_1 = int(stdin.split()[0])\n    b_1 = int(stdin.split()[1])\n    c_1 = int(stdin.split()[2])\n    d_1 = int(stdin.split()[3])\n\n    a_2 = int(stdin.split()[4])\n    b_2 = int(stdin.split()[5])\n    c_2 = int(stdin.split()[6])\n    d_2 = int(stdin.split()[7])\n\n    if N == 1 and M == 1:\n        print(0)\n    else:\n        a = [a_1, a_2]\n        b = [b_1, b_2]\n        c = [c_1, c_2]\n        d = [d_1, d_2]\n        l = max(a)\n        m = max(b)\n        n = max(c)\n        o = max(d)\n        if l == a_1 or m == b_1 or n == c_1 or o == d_1:\n            if l == a_1:\n                print(0)\n            elif m == b_1:\n                print(0)\n            elif n == c_1:\n                print(0)\n            else:\n                print(0)\n        else:\n            t = 0\n            for i in range(N):\n                t += (a[i] - b[i]) * c[i]\n            print(t)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve() -> str:\n        a, b, c, d, a_start, b_start = list(map(int, stdin.split()))\n        a_start = max(a_start, 1)\n        b_start = max(b_start, 1)\n        c = abs(a - b)\n        d = abs(b - c)\n        return f'{a_start + b_start + max(c, d)}'\n\n    print(max(map(solve, stdin.split('\\n')[1:])))\n    return\n\nsolution(\"\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return input()\n\n    def read_int() -> int:\n        return int(input())\n\n    def read_int_arr() -> List[int]:\n        return list(map(int, input().split()))\n\n    def read_int_arr_non_empty() -> Optional[List[int]]:\n        n = None\n        try:\n            n = int(input())\n        except EOFError as e:\n            return None\n\n        if n <= 0:\n            return None\n\n        return list(map(int, input().split()))\n\n    def read_min_max_int_non_empty() -> Tuple[int, int]:\n        \"\"\"\n        Return a tuple of min and max integer values in the string line.\n        \"\"\"\n        return tuple(map(int, input().split()))\n\n    N, M, Q = read_min_max_int_non_empty()\n    A = read_int_arr()\n    B = read_int_arr()\n    C = read_int_arr()\n    D = read_int_arr()\n\n    def calc_score(A: List[int], B: List[int], C: List[int], D: List[int]) -> int:\n        score = 0\n        for i in range(len(A)):\n            if A[i] - B[i] == C[i]:\n                score += D[i]\n        return score\n\n    return calc_score(A, B, C, D)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.strip().split(' '))\n    a, b, c = map(int, stdin.strip().split(' '))\n\n    result = 0\n    min_val = 0\n    max_val = (m - 1) * (n - 1)\n    min_val_index = -1\n    max_val_index = -1\n    count = 1\n    # Write an answer using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    while min_val <= max_val:\n        mid_val = (min_val + max_val) // 2\n        \n        # \uc870\uac74\uc5d0 \ub9de\ucdb0\uc11c \ubc14\ub85c \uc804\ubd80 \ub2e4 \uccb4\ud06c\n        # \uc5ec\uae30\uc11c mid_val\uac00 \uc544\ub798\uc5d0\uc11c\ub294 \ub2e4\uc74c\ubd80\ud130\ub294 \uccb4\ud06c\ud574\uc57c\ud558\uae30 \ub54c\ubb38\uc5d0 \ub2e4\uc74c\ubd80\ud130\ub294 \uccb4\ud06c\ud574\uc57c\ud558\ub294\ub370\n        # \ub9c8\uc9c0\ub9c9\ubd80\ud130 \ub2e4 \uccb4\ud06c\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ub450\uc5b4\uc57c\ud55c\ub2e4.\n        if mid_val == 0:\n            if a < a + c and b < b + c and c < a + b:\n                min_val = mid_val + 1\n            else:\n                max_val = mid_val - 1\n                count += 1\n                continue\n        # mid_val\uc758 \uc790\ub9ac\uc5d0 \ub4e4\uc5b4\uac00\uba74 \uac19\uc740\uc2dd\uc73c\ub85c \ub123\uc5b4\uc918\uc57c\ud558\uae30 \ub54c\ubb38\uc5d0 \uac19\uc740 \uc2dd\uc73c\ub85c \ub123\uc5b4\uc8fc\ub294\uac70 \ub2e4\uc74c \uc778\ub371\uc2a4\ub85c \uac00\uc11c \uccb4\ud06c\ud558\uba74 \ub41c\ub2e4.\n        # \uc774\uac83\uc744 \uccb4\ud06c\ud558\ub294 \uac83\uc740 \ud55c\uc790\ub9ac\ub9c8\ub2e4 \ub2e4\uc74c \uc778\ub371\uc2a4\ub97c \ub123\uc5b4\uc8fc\uba74 \ub418\uae30 \ub54c\ubb38\uc5d0 \ud55c\uc790\ub9ac\ub9cc \uccb4\ud06c\ud558\uba74 \ub41c\ub2e4.\n        # mid_val\ub294 mid_val_index\uc758 \uc2dc\uc791\uc810\uc774\ub2e4.\n        mid_val_index = mid_val // (n - 1)\n        if a >= a + c and b >= b + c and c >= a + b:\n            min_val = mid_val + 1\n        else:\n            max_val = mid_val - 1\n            count += 1\n    \n    return str(min_val) + \" \" + str(count)"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    print(max(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n    return ''"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split(\" \")]\n    max_abs = A[0] - A[1]\n    for i in range(N - 1):\n        if max_abs < A[i + 1] - A[i]:\n            max_abs = A[i + 1] - A[i]\n    return str(max_abs)"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    diff = 10**9\n    for i in range(N):\n        for j in range(i + 1, N):\n            if abs(A[i] - A[j]) < diff:\n                diff = abs(A[i] - A[j])\n    return str(diff)\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read data from standard input\n    # n: number of elements\n    n = int(stdin.split()[0])\n    # sequence of n numbers\n    sequence = stdin.split()[1:]\n    # Sort sequence\n    sequence = sorted(sequence)\n    # max_diff = diff_1 + diff_2\n    max_diff = (sequence[1] - sequence[0]) if (sequence[1] - sequence[0]) > 0 else 0\n\n    return str(max_diff)\n\nsolution(input())\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    print(max(map(abs, zip(A[::2], A[1::2]))))"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = float(\"-inf\")\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            ans = max(ans, abs(a[i] - a[j]))\n    return str(ans)\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    max_diff = 0\n    min_diff = float('inf')\n    for i in range(len(A)-1):\n        max_diff = max(max_diff, A[i+1]-A[i])\n        if min_diff > abs(A[i+1] - A[i]):\n            min_diff = abs(A[i+1] - A[i])\n    print(max_diff)\n    return max_diff\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    max_diff = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if max_diff < abs(A[i] - A[j]):\n                max_diff = abs(A[i] - A[j])\n    \n    return str(max_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the maximum absolute difference of two elements (with different indices) in A.\n    '''\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    # print(n, a)\n    # n = 4\n    # a = [1, 4, 6, 3]\n    return max(abs(a[i] - a[i - 1]) for i in range(1, n))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_nodes, num_edges = map(int, stdin.split())\n    town_pos = [(x, y) for x in range(num_nodes) for y in range(num_nodes)]\n    edges = []\n    for _ in range(num_edges):\n        edges.append(tuple(map(int, stdin.split())))\n    edges = sorted(edges, key=lambda tup: tup[0])\n    # print(town_pos)\n    # print(edges)\n    lengths = []\n    for i in range(len(town_pos)):\n        current_town = town_pos[i]\n        # print(current_town)\n        # print(edges)\n        for j in range(i + 1, len(town_pos)):\n            next_town = town_pos[j]\n            # print(next_town)\n            dist = np.sqrt((current_town[0] - next_town[0]) ** 2 + (current_town[1] - next_town[1]) ** 2)\n            lengths.append(dist)\n    print(np.mean(lengths))\n\n    return \"Average length of all paths is: \" + str(np.mean(lengths))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_str = str(stdin)\n    N: int = int(stdin_str[0])\n    if N == 1:\n        return str(0)\n    elif N == 2:\n        return str(1)\n    elif N >= 3 and N <= 8:\n        town_nums = stdin_str[1:N + 1]\n        city_pairs = []\n        for i in range(0, N):\n            a, b = town_nums[i].split()\n            city_pairs.append((int(a), int(b)))\n        count = 0\n        path_sum = 0\n        for i in range(0, N):\n            for j in range(i + 1, N):\n                for k in range(j + 1, N):\n                    path_sum = 0\n                    path_sum += math.sqrt((city_pairs[i][0] - city_pairs[j][0]) ** 2 +\n                                          (city_pairs[i][1] - city_pairs[j][1]) ** 2)\n                    path_sum += math.sqrt((city_pairs[j][0] - city_pairs[k][0]) ** 2 +\n                                          (city_pairs[j][1] - city_pairs[k][1]) ** 2)\n                    path_sum += math.sqrt((city_pairs[k][0] - city_pairs[i][0]) ** 2 +\n                                          (city_pairs[k][1] - city_pairs[i][1]) ** 2)\n                    count += 1\n                    path_sum /= count\n        return str(int(round(path_sum)))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    x_i_list: list = []\n    y_i_list: list = []\n    for i in range(n):\n        line: list = list(map(int, stdin.split(\" \")))\n        x_i_list.append(line[0])\n        y_i_list.append(line[1])\n    x_i_list = sorted(x_i_list)\n    y_i_list = sorted(y_i_list)\n    distance_list: list = []\n    for i in range(len(x_i_list)):\n        x_diff: int = x_i_list[i] - x_i_list[i-1]\n        y_diff: int = y_i_list[i] - y_i_list[i-1]\n        distance_list.append(sqrt(x_diff**2 + y_diff**2))\n    total_length: int = 0\n    for i in range(len(distance_list)-1):\n        total_length += distance_list[i] + distance_list[i+1]\n    total_length += distance_list[len(distance_list)-1]\n    return str(total_length / (n * (n-1) / 2))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    towns = list(map(lambda line: tuple(map(int, line.split())), stdin.splitlines()[1:]))\n    _towns = list(set(map(lambda town: tuple(town), towns)))\n    # print(_towns)\n    result = 0\n    for i in range(len(_towns)):\n        for j in range(i+1, len(_towns)):\n            result += (\n                (\n                    (abs(_towns[i][0] - _towns[j][0]) ** 2 + abs(_towns[i][1] - _towns[j][1]) ** 2) **.5\n                )\n                if _towns[i]!= _towns[j]\n                else 0\n            )\n    result = result / len(_towns)\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dist(x1, y1, x2, y2):\n        return int(((x1 - x2) ** 2 + (y1 - y2) ** 2) **.5)\n\n    n = int(stdin.split()[0])\n    x_y = list(map(int, stdin.split()))\n\n    # print(n, x_y)\n\n    x = x_y[0]\n    y = x_y[1]\n    paths = 0\n\n    for i in range(2, n):\n        paths += dist(x, y, x_y[i], x_y[i + 1])\n\n    return str(paths / (n - 1))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    X, Y = list(map(int, stdin.split()))\n    min_dist = (X[0] - X[1]) ** 2 + (Y[0] - Y[1]) ** 2\n    x = 0\n    y = 0\n    for i in range(len(X)):\n        dist = (X[i] - X[i - 1]) ** 2 + (Y[i] - Y[i - 1]) ** 2\n        if dist < min_dist:\n            x = X[i]\n            y = Y[i]\n            min_dist = dist\n    min_dist = (x - X[0]) ** 2 + (y - Y[0]) ** 2\n    x = 0\n    y = 0\n    for i in range(len(Y)):\n        dist = (X[i] - X[i - 1]) ** 2 + (Y[i] - Y[i - 1]) ** 2\n        if dist < min_dist:\n            x = X[i]\n            y = Y[i]\n            min_dist = dist\n    ans = (min_dist + abs(x - X[-1]) + abs(y - Y[-1])) / 2\n    return round(ans, 10)\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"2.276142370\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # All possible paths\n    paths = list()\n    for x in range(n):\n        for y in range(n):\n            paths.append((x, y))\n\n    # Path lengths\n    lengths = dict()\n    for path in paths:\n        if path not in lengths:\n            lengths[path] = 0\n        lengths[path] += math.sqrt((path[0] - path[1]) ** 2)\n    \n    # Compute average path length\n    total = 0\n    for path in paths:\n        total += lengths[path]\n    \n    return str(total / len(paths))\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dist(p1, p2):\n        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n    n = int(stdin.split()[0])\n    # print(\"N:\", n)\n    if n < 3:\n        raise Exception(\"N must be at least 3\")\n    towns = [(int(i[0]), int(i[1])) for i in map(lambda x: x.split(), stdin.splitlines())]\n    if len(towns) < n:\n        raise Exception(\"Towns must contain at least 3\")\n    return str(sum([dist(i, j) for i, j in itertools.combinations(towns, 2)]) / n)\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 2.276142371\n    return sum([(a + b) / 2 for a, b in zip(list(map(int, stdin.split(\" \"))), list(map(int, stdin.split(\" \"))))]) / 6\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A,B))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    print(int(A) - int(B))\n    return 0\nsolution(input())"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Use stdin, or any other method if input is piped from another program.\n    A, B = (int(i) for i in stdin.split())\n    return str(4 - (min(A,B) - max(A,B)))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = 0, 0\n    while a!= 0:\n        a, b = a - 1, b - 1\n        if b < a:\n            c += 1\n    while b!= 0:\n        b, a = b - 1, a - 1\n        if a < b:\n            d += 1\n    return str(max(c, d))\nsolution(input())\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input_data)\n    4\n    \"\"\"\n    return int(stdin.strip())"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, A + (B - 1)))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(0, A - 2 * B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a, b))\n\"\"\"\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A, B = int(A), int(B)\n    return str(A - (2*B))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B=map(int,stdin.split())\n    if A<=0 or B<=0:\n        return -1\n    return str(min(A,B))"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def f(A, B):\n        if A < 10 or B < 10:\n            return max(1, A, B)\n        return max(1, max(len(str(A)), len(str(B))))\n\n    if N == 1:\n        return 1\n    else:\n        pairs = []\n        for i in range(1, N):\n            for j in range(i + 1, N):\n                pairs.append((i, j))\n        pairs.sort(key=lambda x: (x[0], x[1]))\n\n        ans = float('inf')\n        for (A, B) in pairs:\n            ans = min(ans, f(A, B))\n\n        return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    ans: int = 10**9\n    for i in range(0,n):\n        for j in range(0,n):\n            n_a = len(str(i))\n            n_b = len(str(j))\n            if n_a < n_b:\n                if ans > n_a*n_b:\n                    ans = n_a*n_b\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(len(str(a)), len(str(b)))\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        A = n % 10\n        n = n // 10\n        B = n % 10\n        n = n // 10\n        print(max(A,B) - min(A,B))\n\nsolution(input())\n'''"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            a = len(str(i))\n            b = len(str(j))\n            ans = max(a, b, ans)\n    return str(ans)\n\n\nsolution(input())\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    print(min(len(str(N)), len(str(N*N))))\n    return str(min(len(str(N)), len(str(N*N))))\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = float('inf')\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            curr_value = (len(str(a)), len(str(b)))\n            if curr_value < min_value:\n                min_value = curr_value\n    return '{}'.format(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 0:\n        return 0\n\n    f, f1 = 0, 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if len(str(a)) > f:\n                f = len(str(a))\n            if len(str(b)) > f1:\n                f1 = len(str(b))\n\n    return f, f1\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_value = 1\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            value = (x, y)\n            sum = 0\n            for digit in str(x):\n                sum += int(digit)\n            for digit in str(y):\n                sum += int(digit)\n            if sum < min_value:\n                min_value = sum\n                min_value_value = value\n    return str(min_value_value)\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = max(len(str(n)), len(str(n * 10)))\n    b = max(len(str(n)), len(str(n * 100)))\n    print(min(a, b))"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(\" \")))\n    A = []\n    K = []\n\n    for i in range(1, N+1):\n        A.append(list(map(int, stdin.split(\" \")[i-1].split(\" \"))))\n        K.append(len(A[i-1]))\n\n    for i in range(N):\n        common_num = 0\n        for j in range(M):\n            if A[i][j] in K:\n                common_num += 1\n            else:\n                common_num = 0\n        print(common_num)\n    return"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    K = list(map(int, stdin.split()))\n\n    table = {}\n    for k in K:\n        if k in table:\n            table[k] += 1\n        else:\n            table[k] = 1\n\n    # n = len(table)\n    # m = len(K)\n    # print(n, m)\n    # print(table)\n    max_count = 0\n    for j in range(1, m + 1):\n        for i in range(n):\n            if K[i] in table:\n                max_count = max(max_count, table[K[i]])\n    # print(max_count)\n    return str(max_count)\n    \n    \n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    food_liked_by_all_people = set()\n    for i in range(N):\n        for j in range(1, M + 1):\n            food_liked_by_all_people.add(j)\n    for i in range(N):\n        food_liked_by_this_person = set()\n        for j in range(1, M + 1):\n            food_liked_by_this_person.add(stdin.split()[i * 2 + 1][j - 1])\n        if food_liked_by_this_person!= food_liked_by_all_people:\n            return \"0\"\n    return str(len(food_liked_by_all_people))"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (N, M) = (int(stdin[0]), int(stdin[1]))\n    K = int(stdin[2])\n    stdin_list = stdin[3:].split()\n\n    ans = 0\n    # generate a dictonary to store the information of N people\n    people_dict = {}\n    for i in range(N):\n        person = stdin_list[i]\n        for j in range(K):\n            if j not in people_dict:\n                people_dict[j] = int(person)\n\n    # counting the number of the liked food for each person\n    for key in people_dict:\n        if people_dict[key] == 1:\n            ans += 1\n\n    print(ans)\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    food_liked_by_each_person = stdin.split()\n    all_like_all_people = []\n    all_like_all_people.append(food_liked_by_each_person[0])\n    all_like_all_people.append(food_liked_by_each_person[1])\n    all_like_all_people.append(food_liked_by_each_person[2])\n    for i in range(3, n + 3):\n        all_like_all_people.append(food_liked_by_each_person[i])\n    max_like_all_people = max(all_like_all_people)\n    return str(all_like_all_people.count(max_like_all_people))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    likes_n = list(map(int, stdin.split()))\n    all_likes = []\n\n    for i in range(1, n+1):\n        all_likes.append(likes_n[i-1])\n\n    print(len(set(all_likes)))\n    return \"\""
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin.split()[0])\n    N = int(stdin.split()[1])\n    K = int(stdin.split()[2])\n    dic = {}\n    for i in range(1, K+1):\n        dic[i] = set()\n    for i in range(M):\n        a, b = map(int, stdin.split()[3*i+2].split())\n        dic[a].add(b)\n        dic[b].add(a)\n    return str(len(dic[1].union(*dic.values())))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = (M - 1) // N + 1\n    A = list(map(int, stdin.split()))\n    ans = []\n    for i in range(1, N + 1):\n        count = 0\n        for j in range(K):\n            count += A[j * N + i - 1] == 1\n        ans.append(count)\n    return str(ans[0] + ans[1])"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(1, N + 1):\n        if i % 2!= 0:\n            count += 1\n\n    return str(count / N)\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0.5\n    for i in range(1,N):\n        ans *= (i + 1)/i\n    print(ans)\n    return\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prob = 0.5\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            prob -= 1\n        else:\n            prob += 1\n    return f\"{prob:.6f}\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity:\n    O(1)\n    Space complexity:\n    O(1)\n    \"\"\"\n    return str(odd_probability(int(stdin)))\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return str(1 - stdin[0] / (stdin[0] + stdin[1]))\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    data = list(map(int, stdin.split()))\n    x = data[0]\n\n    odd = 0\n    for i in range(1, x + 1):\n        if i % 2!= 0:\n            odd += 1\n\n    return f\"{odd/x}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = -1\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '0.5'\n    if n == 3:\n        return '0.3333333333'\n    if n == 4:\n        return '0.25'\n    if n == 5:\n        return '0.2'\n    if n == 6:\n        return '0.1818181818'\n    if n == 7:\n        return '0.166666666667'\n    if n == 8:\n        return '0.14285714286'\n    if n == 9:\n        return '0.13393939394'\n    if n == 10:\n        return '0.1'\n    if n == 11:\n        return '0.09090909091'\n    if n == 12:\n        return '0.08333333333'\n    if n == 13:\n        return '0.07692307692'\n    if n == 14:\n        return '0.066666666667'\n    if n == 15:\n        return '0.05555555556'\n    if n == 16:\n        return '0.04444444444'\n    if n == 17:\n        return '0.03396226415'\n    if n == 18:\n        return '0.02380952381'\n    if n == 19:\n        return '0.02222222222'\n    if n == 20:\n        return '0.01692307692'\n    if n == 21:\n        return '0.011111111111'\n    if n == 22:\n        return '0.009090909091'\n    if n == 23:\n        return '0.08333333333'\n    if n == 24:\n        return '0.07692307692'\n    if n == 25:\n        return '0.066666666667'\n    if n == 26:\n        return '0.05555555556'\n    if n == 27:\n        return '0.04444444444'\n    if n == 28:\n        return '0.03396226415'\n    if n == 29:\n        return '0.02380952381'\n    if n == 30:\n        return '0.02222222222'\n    if n == 31:\n        return '0.01692307692'\n    if n == 32:\n        return '0.011111111111'\n    if n == 33:\n        return '0.009090909091'\n    if n == 34:\n        return '0.07692307692'\n    if n == 35:\n        return '0.066666666667'\n    if n == 36:\n        return '0.05555555556'\n    if n == 37:\n        return '0.04444444444'\n    if n == 38:\n        return '0.03396226415'\n    if n == 39:\n        return '0.02380952381'\n    if n == 40:\n        return '0.02222222222'\n    if n == 41:\n        return '0.01692307692'\n    if n == 42:\n        return '0.011111111111'\n    if n == 43:\n        return '0.009090909091'\n    if n == 44:\n        return '0.07692307692'\n    if n == 45:\n        return '0.066666666667'\n    if n == 46:\n        return '0.05555555556'\n    if n == 47:\n        return '0.04444444444'\n    if n == 48:\n        return '0.03396226415'\n    if n == 49:\n        return '0.02380952381'\n    if n == 50:\n        return '0.02222222222'\n    if n == 51:\n        return '0.01692307692'\n    if n == 52:\n        return '0.011111111111'\n    if n == 53:\n        return '0.009090909091'\n    if n == 54:\n        return '0.07692307692'\n    if n == 55:\n        return '0.066666666667'\n    if n == 56:\n        return '0.05555555556'\n    if n == 57:\n        return '0.04444444444'\n    if n == 58:\n        return '0.03396226415'\n    if n == 59:\n        return '0.02380952381'\n    if n == 60:\n        return '0.02222222222'\n    if n == 61:\n        return '0.01692307692'\n    if n == 62:\n        return '0.011111111111'\n    if n == 63:\n        return '0.009090909091'\n    if n == 64:\n        return '0.07692307692'\n    if n == 65:\n        return '0.066666666667'\n    if n == 66:\n        return '0.05555555556'\n    if n == 67:\n        return '0.04444444444'\n    if n == 68:\n        return '0.03396226415'\n    if n == 69:\n        return '0.02380952381'\n    if n == 70:\n        return '0.02222222222'\n    if n == 71:\n        return '0.01692307692'\n    if n == 72:\n        return '0.011111111111'\n    if n == 73:\n        return '0.009090909091'\n    if n == 74:\n        return '0.07692307692'\n    if n == 75:\n        return '0.066666666667'\n    if n == 76:\n        return '0.05555555556'\n    if n == 77:\n        return '0.04444444444'\n    if n == 78:\n        return '0.03396226415'\n    if n == 79:\n        return '0.02380952381'\n    if n == 80:\n        return '0.02222222222'\n    if n == 81:\n        return '0.01692307692'\n    if n == 82:\n        return '0.011111111111'\n    if n == 83:\n        return '0.009090909091'\n    if n == 84:\n        return '0.07692307692'\n    if n == 85:\n        return '0.066666666667'\n    if n == 86:\n        return '0.05555555556'\n    if n == 87:\n        return '0.04444444444'\n    if n == 88:\n        return '0.03396226415'\n    if n == 89:\n        return '0.02380952381'\n    if n == 90:\n        return '0.02222222222'\n    if n == 91:\n        return '0.01692307692'\n    if n == 92:\n        return '0.011111111111'\n    if n == 93:\n        return '0.009090909091'\n    if n == 94:\n        return '0.07692307692'\n    if n == 95:\n        return '0.066666666667'\n    if n == 96:\n        return '0.05555555556'\n    if n == 97:\n        return '0.04444444444'\n    if n == 98:\n        return '0.03396226415'\n    if n == 99:\n        return '0.02380952381'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(random.uniform(1,n))\n    print(a/n)"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = random.randint(1, N)\n    if a % 2 == 0:\n        return '{:.6f}'.format(float(a)/2)\n    else:\n        return '{:.6f}'.format(1-float(a)/2)"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    if stdin[0] > 0:\n        return '{:.6f}'.format(2 / stdin[0])\n    else:\n        return '{:.6f}'.format(1)\n    # Write your code here\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = map(int, stdin.split())\n    A = list(A)\n    A = [(x, 1 if x == 0 else 0) for x in A]\n    res = 0\n    while True:\n        sorted_A = sorted(A, key=lambda x: x[0])\n        for i in range(N):\n            if A[i][1] == 0:\n                res += 1\n                A[i] = (sorted_A[i][0] + 1, 1 if sorted_A[i][0] == 0 else 0)\n            else:\n                A[i] = (sorted_A[i][0], 1 if sorted_A[i][0] == 1 else 0)\n        if res >= N:\n            return str(res)"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A_in = map(int, input().split())\n    A_in = list(map(int, A_in))\n    A_in = {idx: a for idx, a in enumerate(A_in)}\n    n = N\n    for i in range(1, len(A_in)):\n        if A_in[i] == 0:\n            n -= 1\n    print(n)\n    return stdout.getvalue().strip()"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, x1y1, x2y2 = stdin.split()\n    return str(int(N) - 2)"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = []\n    for _ in range(n):\n        A.append(tuple(map(int, stdin.split())))\n    # print(A)\n    # print(n)\n    return str(max_honest(n, A))\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # to be honest, if (1, 0) is a contradiction, then all the others are also wrong\n    # if we only add one, we can't get to (1, 1) and then conclude that everyone is right\n    # or if we add two, we can't get to (1, 1) and then conclude that everyone is wrong\n    # so for now, we add one and then count and remove\n\n    # first person who is honest and then the rest\n    for _ in range(2):\n        num_honest = n - 1\n        num_wrong = 1\n\n        for j in range(n):\n            if stdin.split(\" \")[j][0] == \"1\" and stdin.split(\" \")[j][1] == \"0\":\n                num_honest -= 1\n            if stdin.split(\" \")[j][0] == \"0\" and stdin.split(\" \")[j][1] == \"1\":\n                num_wrong += 1\n\n        if num_honest >= 0:\n            n = num_honest\n        else:\n            n = num_wrong\n    return str(n)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_1 = [int(i) for i in stdin.split()[1:N+1]]\n    x_11, y_11 = [int(i) for i in stdin.split()[1:N+1]]\n    x_12, y_12 = [int(i) for i in stdin.split()[1:N+1]]\n\n    A_2 = [int(i) for i in stdin.split()[N+2:2*N+2]]\n    x_21, y_21 = [int(i) for i in stdin.split()[N+2:2*N+2]]\n    x_22, y_22 = [int(i) for i in stdin.split()[N+2:2*N+2]]\n\n    A_3 = [int(i) for i in stdin.split()[2*N+2:3*N+2]]\n    x_1A_1, y_1A_1 = [int(i) for i in stdin.split()[2*N+2:3*N+2]]\n    x_1A_2, y_1A_2 = [int(i) for i in stdin.split()[2*N+2:3*N+2]]\n    x_2A_1, y_2A_1 = [int(i) for i in stdin.split()[2*N+2:3*N+2]]\n    x_2A_2, y_2A_2 = [int(i) for i in stdin.split()[2*N+2:3*N+2]]\n\n    A_4 = [int(i) for i in stdin.split()[3*N+2:4*N+2]]\n    x_NA_1, y_NA_1 = [int(i) for i in stdin.split()[3*N+2:4*N+2]]\n    x_NA_2, y_NA_2 = [int(i) for i in stdin.split()[3*N+2:4*N+2]]\n\n    A = set(A_1+A_2+A_3+A_4)\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_3 = set(A_3)\n    A_4 = set(A_4)\n\n    A_union_A_1 = A_1.union(A_2)\n    A_union_A_2 = A_1.union(A_3)\n    A_union_A_3 = A_1.union(A_4)\n    A_union_A_4 = A_1.union(A_4)\n    A_union_A = A_union_A_1.union(A_union_A_2)\n    A_union_A = A_union_A.union(A_union_A_3)\n    A_union_A = A_union_A.union(A_union_A_4)\n    A_union_A = A_union_A.union(A_union_A_4)\n\n    print(len(A_union_A))\n    return \"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = []\n    for i in range(N):\n        A.append(list(map(int, stdin.split())))\n    return str(max(solution_dp(A, N), solution_brute(A, N)))\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 1:\n        return '1'\n    \n    people = list(map(int, stdin.split()))\n\n    if people[0] == people[1]:\n        return '2'\n    else:\n        return '1'"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    honest_num = 0\n    for i in range(N):\n        A_i = int(stdin.split()[i])\n        for j in range(i + 1, N):\n            x_ij, y_ij = map(int, stdin.split()[i * 2 + j].split())\n            if y_ij == 0:\n                if A_i == j or x_ij == i:\n                    honest_num += 1\n    return str(honest_num)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    stdin_split: str = stdin.strip().split('\\n')\n    a_1, a_2 = stdin_split[:2]\n    if a_1 == a_2:\n        return '0'\n    a_1_split: List[List[str]] = [[int(elem) for elem in line.split(' ')] for line in a_1.split('\\n')]\n    a_2_split: List[List[str]] = [[int(elem) for elem in line.split(' ')] for line in a_2.split('\\n')]\n    for a_1_item in a_1_split:\n        for a_2_item in a_2_split:\n            if a_1_item!= a_2_item:\n                return '0'\n    max_honest: int = 1\n    for a_1_item in a_1_split:\n        for a_2_item in a_2_split:\n            if a_1_item == a_2_item:\n                continue\n            if a_1_item[1] == 1 and a_2_item[1] == 1:\n                max_honest = max(max_honest, a_1_item[0] + a_2_item[0])\n    return str(max_honest)\n\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    S = stdin.split()[1]\n    if len(S) <= K:\n        return S\n    return S[:K] +... + S[-K:]"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, _, k = stdin.split(' ')\n    k = int(k)\n    return stdin[:k] + \"...\" if len(stdin) > k else stdin\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    string = stdin.strip()\n    if len(string) <= k:\n        return string\n    return ''.join(string[:k]) + '...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_string = stdin\n    if len(stdin_string) <= 7:\n        return stdin_string\n    elif len(stdin_string) > 7:\n        return stdin_string[:7] + \"...\"\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s = int(stdin.split()[0]), stdin.split()[1]\n    return s[:k] + '...' if len(s) > k else s\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, string = int(stdin), stdin\n    if k >= len(string):\n        print(string)\n    else:\n        print(string[:k] + \"... \" + string[-k:])\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    s = stdin.strip()\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'\n\nsolution('07nikoandsolstice')\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    return s[:int(k)] + s[int(k):]"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) == 0:\n        return \"Invalid input\"\n\n    if s[-1]!= \"s\":\n        s += \"s\"\n    elif s[-1] == \"s\":\n        s += \"es\"\n    return s\n\nprint(solution(input()))\n\"\"\"\n\n\nimport re\nimport os\nimport sys\nimport glob\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().capitalize()\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize() + \"es\" if stdin.endswith(\"e\") else stdin + \"s\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    snakes = [[] for i in range(n)]\n    snack = []\n    for i in range(1, n + 1):\n        snakes[int(stdin.split()[i * (2 + k)]) - 1].append(i)\n    for i in range(1, 2 * k + 1):\n        snack.append(int(stdin.split()[i * (2 + k) - 1]))\n    for i in range(1, n + 1):\n        if len(snakes[i - 1]) == 0:\n            continue\n        if len(snakes[i - 1]) == 1:\n            print(snakes[i - 1][0] + 1, 'has Snack', snack[i - 1] + 1)\n            continue\n        for j in range(len(snakes[i - 1])):\n            for l in range(j + 1, len(snakes[i - 1])):\n                if snack[i - 1] + 1 == snack[snakes[i - 1][j] - 1]:\n                    print(snakes[i - 1][j] + 1, 'has Snack', snack[i - 1] + 1)\n                    break\n    return \"\"\n\nsolution(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d_1, *d_2 = map(int, stdin.split())\n    snk = [\n        [i for i in range(1, d_1 + 1)] + [i for i in range(d_1, d_1 + d_2)],\n        [i for i in range(d_1 + d_2 + 1, n + 1)]\n    ]\n    ans = []\n    for i in range(k):\n        ans.append('Snuke {} has Snack {}'.format(snk[0][i], snk[1][i]))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1 = int(stdin.split()[1])\n    snake = stdin.split()[2:]\n    snake = map(int, snake)\n    snake_num = len(snake)\n\n    if snake_num < N:\n        print(\"No Snuke will fall victim!\")\n        return\n    if N % d_1!= 0:\n        print(\"No Snuke will fall victim!\")\n        return\n    if snake_num < d_1:\n        print(\"No Snuke will fall victim!\")\n        return\n    snake_dict = {}\n    for i in range(len(snake)):\n        if snake[i] not in snake_dict:\n            snake_dict[snake[i]] = i+1\n    \n    answer = 1\n    for i in range(snake_num):\n        if d_1 > 0:\n            if snake[i] > 0:\n                answer += 1\n            d_1 -= 1\n        else:\n            break\n\n    print(answer)\n    return answer\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    snakes = list(map(int, stdin.split()))\n    snakes = list(map(lambda x: x - 1, snakes))\n    snakes = sorted(snakes)\n    answer = 1\n    for i in range(1, k + 1):\n        answer *= len(list(filter(lambda x: x == i, snakes)))\n    return str(answer)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    d = []\n    for i in range(1, N+1):\n        d.append(i)\n    snukes = list(map(int, stdin.split()))\n\n    for i in range(1, N+1):\n        if snukes[i-1]!= -1:\n            j = i\n            while True:\n                if j > N:\n                    break\n                if snukes[j-1] == -1:\n                    break\n                elif snukes[j-1] > d[i-1]:\n                    break\n                else:\n                    j = snukes[j-1] + 1\n            if snukes[j-1] == -1:\n                continue\n            else:\n                d[i-1] = snukes[j-1]\n\n    return \" \".join(map(str, d))"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = []\n    snakes = []\n    for _ in range(n):\n        d.append(int(stdin.split()[2 * _]))\n        snakes.append(stdin.split()[2 * _ + 1])\n    snakes.sort(reverse=True)\n    for i in range(k):\n        if snakes[i] not in d:\n            return f\"{snakes[i]} has Snack {i + 1}\"\n    return f\"{snakes[k]} has no snacks\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    s = set()\n    res = 0\n    for i in range(1, K + 1):\n        for j in range(i + 1, N + 1):\n            s.add(d[i - 1])\n            if d[i - 1] >= N:\n                break\n    for i in s:\n        res += 1\n    return str(res)"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(item) for item in stdin.split()]\n    d = []\n    for i in range(1, N + 1):\n        if (i % K) == 0:\n            d.append(i)\n    if len(d) == 0:\n        return '0'\n    print('{} {}'.format(d[0], d[0]))\n    return\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    arr = []\n    for i in range(K):\n        arr.append(d[i*(N)])\n\n    sum = 0\n    for i in arr:\n        sum += i\n    print(sum)\n\nsolution(input())\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, K = map(int, stdin[0].split())\n    d = map(int, stdin[1].split())\n    d = [i - 1 for i in d]\n    ans = 0\n    for i in range(1, N + 1):\n        ans += sum(d[:i])\n    return str(ans)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = stdin.rstrip().split()\n    slimes = {}\n    while len(a) > 0:\n        if a[0] not in slimes:\n            slimes[a[0]] = 1\n        else:\n            slimes[a[0]] += 1\n        a = a[1:]\n    return str(max(list(slimes.values())))\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n\n    # part 1\n    # create dictionary of slimes\n    slimes = {}\n    for i in range(N):\n        slimes[S[i]] = slimes.get(S[i], 0) + 1\n\n    # part 2\n    # for each slime, check if its previous value has decreased, if so, check next one and update value\n    # iterate trough dict and print final value\n    for i in range(N):\n        current_value = slimes.get(S[i])\n        if slimes.get(S[i + 1]) > current_value:\n            slimes[S[i + 1]] = slimes.get(S[i + 1]) + slimes.get(S[i])\n\n    # return final value\n    return str(slimes.get(S[-1]))\n\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = list(map(int, stdin.strip().split()))\n    colors = list(S)\n    group = 1\n    for i in range(N):\n        if group == 1:\n            if colors[i]!= group:\n                group = 0\n            else:\n                group += 1\n        elif group == 0:\n            if colors[i]!= group:\n                group = 1\n            else:\n                group += 1\n    return str(group)\n\nprint(solution(input()))"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.strip()\n    slimes = []\n    for i, c in enumerate(S):\n        if not slimes or c!= slimes[-1]:\n            slimes.append(c)\n        else:\n            slimes[-1] = slimes[-1] + c\n    return str(len(slimes))\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin.strip()), stdin.strip()\n\n    slimes = {}\n\n    for i in range(len(s)):\n        if s[i] not in slimes:\n            slimes[s[i]] = i\n\n    count = 1\n\n    for key, val in slimes.items():\n        if count == 1:\n            left = val\n        else:\n            if left + 1 == val:\n                left += 1\n                count += 1\n            else:\n                count = 1\n                left = val\n        print(key, count)\n\n    return str(count)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 3:\n        raise ValueError('Incorrect input. Please provide proper input in the following format.')\n    return str(int(max(int(stdin[1]), int(stdin[2]))))"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    slimes = []\n    for _ in range(N):\n        slimes.append(S[:])\n    \n    for i in range(1, len(S)):\n        if slimes[i-1] == slimes[i]:\n            continue\n        else:\n            for j in range(len(slimes)):\n                if slimes[j][i-1] == slimes[j][i]:\n                    slimes[j] = slimes[j][:i] + slimes[j][i] + slimes[j][i+1:]\n                    break\n    print(len(slimes))\n    return\n\nsolution(\"1\")"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    S = stdin.splitlines()[1]\n    \n    slimes = {}\n    for i in range(N):\n        slimes[S[i]] = slimes[S[i]] + 1 if S[i] in slimes else 1\n\n    if slimes['a'] == 0 and slimes['b'] == 0:\n        return '-1'\n\n    slimes_to_return = 0\n    if slimes['a'] > 0:\n        slimes_to_return += slimes['a']\n    if slimes['b'] > 0:\n        slimes_to_return += slimes['b']\n    \n    for i in range(N):\n        if slimes[S[i]] == 1:\n            if slimes['a'] > 0 and S[i] == 'a':\n                slimes['a'] -= 1\n            elif slimes['b'] > 0 and S[i] == 'b':\n                slimes['b'] -= 1\n    return str(slimes_to_return)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    slimes = []\n    for i in range(n):\n        slimes.append(s[i])\n    \n    while(True):\n        flag = False\n        for i in range(0, len(slimes)-1):\n            if slimes[i] == slimes[i+1]:\n                slimes[i] = 'a'\n                slimes[i+1] = 'b'\n                flag = True\n        if not flag:\n            break\n\n    return len(slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = stdin\n    slimes = []\n    for i in range(N):\n        if i == 0:\n            #current_color = colors[i]\n            current_color = colors[i]\n            slimes.append(current_color)\n        else:\n            #current_color = colors[i]\n            current_color = colors[i]\n            current_color_found = False\n            for j in range(len(slimes)):\n                if slimes[j] == current_color:\n                    slimes[j] = current_color_found\n                    break\n            if not current_color_found:\n                slimes.append(current_color_found)\n\n    return str(len(slimes))\n\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #return ''.join([str(int(stdin.split()[i]) * 3 if int(stdin.split()[i]) % 2 == 0 else int(stdin.split()[i]) * 3 // 2) for i in range(len(stdin.split()))])\n    return ''.join([str(int(stdin.split()[i]) * 3 if int(stdin.split()[i]) % 2 == 0 else int(stdin.split()[i]) * 3 // 2) for i in range(len(stdin.split()))])\nprint(solution(input()))"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_str = stdin.split()\n    a = list(map(int, input_str))\n\n    # answer = 0\n    # for i in range(1, n):\n    #     for j in range(i):\n    #         if (i % 2 == 0):\n    #             a[i] = a[i] * 2\n    #         else:\n    #             a[i] = a[i] * 3\n    #             a[i] = a[i] // 2\n    #     if (a[i] > answer):\n    #         answer = a[i]\n\n    # return answer\n    solution = []\n    for i in range(1, n):\n        for j in range(i):\n            if (i % 2 == 0):\n                a[i] = a[i] * 2\n            else:\n                a[i] = a[i] * 3\n                a[i] = a[i] // 2\n\n        if (a[i] > solution):\n            solution = a[i]\n    return str(solution)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(key=abs)\n    ops = 0\n    for i in range(N):\n        for j in range(i, N):\n            ops += 1\n            if abs(a[i]) > abs(a[j]):\n                break\n        for j in range(i, N):\n            ops += 1\n            if abs(a[i]) == abs(a[j]):\n                break\n    return str(ops)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 10_000_000:\n        raise Exception(\"N is outside of the scope of this problem.\")\n    \n    a = list(map(int, stdin.split()))\n\n    if any(a[i] < 1 or a[i] > 1_000_000_000 for i in range(N)):\n        raise Exception(\"Incorrect input.\")\n    \n    result = 0\n    while a!= [0] * N:\n        for i in range(N):\n            if a[i] % 3 == 0 and a[i] > 1:\n                a[i] = int(a[i] / 3)\n            elif a[i] % 2 == 0 and a[i] > 1:\n                a[i] = int(a[i] / 2)\n            else:\n                raise Exception(\"Incorrect input.\")\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    return str(len(set(range(1, N + 1)) & set(map(lambda x: x // 3, a))))\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = seq[0]\n    dp[1] = seq[1] * 3 + seq[0] / 2\n    dp[2] = seq[2] * 3 + seq[1] / 2\n    for i in range(3, n):\n        dp[i] = max(\n            seq[i] * 3 + seq[i-2] / 2,\n            seq[i] * 3 + seq[i-1] / 2,\n            seq[i] * 3 + seq[i-3] / 2,\n        )\n    return str(max(dp))\n\nsolution(input())"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # print(a)\n    result = 0\n\n    for i in range(n):\n        count = 0\n        if i > 0:\n            count = count + a[i] // 2\n        if i > 0:\n            count = count + a[i] // 3\n        if i > 0:\n            count = count + a[i] // 2\n        if count >= result:\n            result = count\n    return str(result)"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    nums = [int(x) for x in stdin.strip().split()]\n    max_ops = 0\n    while nums:\n        #print(nums)\n        if len(nums) > 1 and (nums[0] > nums[1] or nums[0] % nums[1]!= 0):\n            #print(\"mult\")\n            nums[0] = nums[0] * 3\n            nums[1] = nums[1] * 3\n            nums[2] = nums[2] * 3\n        else:\n            #print(\"div\")\n            nums[0] = nums[0] // 2\n            nums[1] = nums[1] // 2\n            nums[2] = nums[2] // 2\n        \n        max_ops = max(max_ops, len(nums))\n        \n    return max_ops"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.split()[0])\n  a = list(map(int, stdin.split()[1].split(\" \")))\n  count = 0\n  while True:\n    for i in range(N):\n      if a[i]%3!=0:\n        break\n    else:\n      count += 1\n    for i in range(N):\n      if a[i]%2!=0:\n        break\n    else:\n      count += 1\n    if count > N:\n      break\n    for i in range(N):\n      if a[i]%3!=0 and a[i]%2==0:\n        count += 1\n    if count > N:\n      break\n    for i in range(N):\n      if a[i]%3==0 and a[i]%2==0:\n        count += 1\n    if count > N:\n      break\n  return count"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C, K = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    K = int(K)\n\n    max_sum = 0\n    for a in range(0, A + 1):\n        for b in range(0, B + 1):\n            for c in range(0, C + 1):\n                sum_of_cards = a + b + c\n                if a == b == c == 0:\n                    continue\n                elif sum_of_cards >= K:\n                    continue\n                elif sum_of_cards == K:\n                    max_sum = max(max_sum, a + b + c)\n                else:\n                    max_sum = max(max_sum, sum_of_cards)\n\n    return str(max_sum)\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(max(map(int, stdin.split(' '))))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    return str(max(\n        sum(a)\n        for a in itertools.combinations(\n            [1, 0, -1],\n            K\n        )\n    ))"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return str(max(sum(map(lambda x: 1 if x else -1, map(int, list(stdin)[1:K + 1]))), sum(map(lambda x: 1 if x else 0, map(int, list(stdin)[K + 1:K + 2 + C])))))"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    card_a = [int(x) for x in stdin.split() if x!= '']\n    card_b = [0] * card_a[0]\n    card_c = [-1] * card_a[0]\n    card_max = max(card_a)\n\n    for i in range(card_a[0]):\n        card_b[i] = card_a[1]\n        card_c[i] = card_a[2]\n    if card_max > 0:\n        card_max = card_max - 1\n        for i in range(card_a[0]):\n            if card_c[i]!= -1:\n                card_b[i] = card_max\n            if card_c[i]!= -1:\n                card_c[i] = card_max\n    return sum(card_a) + max(card_b) + max(card_c)\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return str(max(sum(map(int, input().split())), sum(map(int, input().split()))\n\nsolution(\"1 1 1 3\")\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    dp = [[0] * (C + 1) for _ in range(A + 1)]\n    max_value = 0\n\n    for a in range(A + 1):\n        for b in range(B + 1):\n            for c in range(C + 1):\n                if a + b + c == K:\n                    if dp[a][b] == 0:\n                        dp[a][b] = a + b\n                    if dp[a][b] + dp[c][c] > max_value:\n                        max_value = dp[a][b] + dp[c][c]\n                if a + c == K:\n                    if dp[a][b] == 0:\n                        dp[a][b] = a + c\n                    if dp[a][b] + dp[a][c] > max_value:\n                        max_value = dp[a][b] + dp[a][c]\n                if b + c == K:\n                    if dp[a][b] == 0:\n                        dp[a][b] = b + c\n                    if dp[a][b] + dp[c][c] > max_value:\n                        max_value = dp[a][b] + dp[c][c]\n    return max_value"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    max_sum = 0\n    for i in range(A + 1):\n        for j in range(B + 1):\n            for k in range(C + 1):\n                sum = i + j + k\n                if sum == K:\n                    max_sum = max(max_sum, i * 100 + j * 10 + k)\n\n    print(max_sum)\n\n    return max_sum\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    card_list = []\n    for i in range(1, len(input_list)):\n        card_list.append(int(input_list[i]))\n    cards = dict(zip(card_list, input_list))\n    return str(max(card_list))\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 8')\n    'Yes'\n    >>> solution('11 10')\n    'Yes'\n    >>> solution('4 6')\n    'No'\n    \"\"\"\n    n, m = (int(i) for i in stdin.split())\n    count_c = 0\n    count_t = 0\n    if n % 2 == 0:\n        if (n // 2) % 2 == 0:\n            count_c = (n // 2) // 2\n            count_t = (n // 2) // 2\n        else:\n            count_c = (n // 2) // 2 + 1\n            count_t = (n // 2) // 2\n    else:\n        count_c = (n // 2) + 1\n        count_t = (n // 2) + 1\n\n    if m % 2 == 0:\n        if (m // 2) % 2 == 0:\n            count_t = (m // 2) // 2\n            count_c = (m // 2) // 2\n        else:\n            count_t = (m // 2) // 2 + 1\n            count_c = (m // 2) // 2\n    else:\n        count_t = (m // 2) + 1\n        count_c = (m // 2) + 1\n\n    if count_c == n / 2 and count_t == m / 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x == y or x == y - 1:\n        return \"Yes\"\n    elif x + y == x + y - 1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    X = int(stdin[0])\n    Y = int(stdin[1])\n\n    if (X + Y) % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.strip().split(\" \"))\n    x, y = a[0], a[1]\n    if x * y < 10 or x + y < 10:\n        return \"No\"\n    if x * y % 10 == 8:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return \"Yes\" if (X // 2) + (Y // 4) == (X + Y) else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    ans = 'Yes' if (X // 2) + (Y // 4) == X + Y else 'No'\n    return ans\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(' ')\n    X = int(stdin[0])\n    Y = int(stdin[1])\n\n    if X < Y:\n        return 'No'\n    return 'Yes'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return \"Yes\" if int(x) == int(y) else \"No\"\n    # your code here\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return \"Yes\" if (2 * X) + (Y - 2) else \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X == Y == 2:\n        return \"Yes\"\n    elif X == Y == 3:\n        return \"Yes\"\n    elif X == Y == 4:\n        return \"Yes\"\n    elif X == Y == 5:\n        return \"Yes\"\n    elif X == Y == 6:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    a, b = list(map(int, stdin.split()))\n    g = [[] for _ in range(N)]\n    for i in range(M):\n        x, y = list(map(int, stdin.split()))\n        g[x - 1].append(y - 1)\n        g[y - 1].append(x - 1)\n    visited = set()\n    res = 0\n    def dfs(i):\n        nonlocal visited\n        visited.add(i)\n        if not g[i]:\n            return 1\n        if i in visited:\n            return 0\n        count = 0\n        for j in g[i]:\n            count += dfs(j)\n        return count\n    return str(dfs(a - 1))\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split()\n    a = int(a)\n    b = int(b)\n    if b > a:\n        raise ValueError\n    return f'{a} {a+b}'"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = defaultdict(list)\n    for a, b in map(int, stdin.split()):\n        graph[a].append(b)\n        graph[b].append(a)\n    return str(dijkstra_algorithm(graph, 1, N))\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, x, visited, stack):\n        visited.add(x)\n        for i in graph[x]:\n            if i not in visited:\n                dfs(graph, i, visited, stack)\n        stack.append(x)\n\n    graph = {}\n    for a, b in stdin.split():\n        if a not in graph:\n            graph[a] = set()\n        if b not in graph:\n            graph[b] = set()\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = set()\n    stack = []\n    dfs(graph, 1, visited, stack)\n    return len(stack)"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  graph = defaultdict(set)\n  for _ in range(m):\n    a, b = map(int, stdin.split())\n    graph[a].add(b)\n    graph[b].add(a)\n  return sum(len(graph[1]) * len(graph[2]) for i in range(3, n + 1))\n  \n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    visited = set()\n    visited.add(1)\n    paths = {}\n    count = 0\n    for e in edges:\n        if e[0] in visited and e[1] not in visited:\n            count += 1\n        if e[0] not in visited and e[1] in visited:\n            count += 1\n        paths[e] = count\n    return paths\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    paths = stdin.strip().split()\n    return str(len(paths))"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '3 3\\n1 2\\n1 3\\n2 3\\n'\n    N, M = map(int, stdin.split())\n    d = collections.defaultdict(list)\n    for i in range(N):\n        a, b = map(int, stdin.split())\n        d[a].append(b)\n        d[b].append(a)\n    visited = {1}\n    q = collections.deque([1])\n    while q:\n        node = q.popleft()\n        for n in d[node]:\n            if n not in visited:\n                visited.add(n)\n                q.append(n)\n    return len(visited)\n    '''\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    path_1, path_2 = stdin.split(\"\\n\")\n    a_1, b_1 = path_1.split(\" \")\n    a_2, b_2 = path_2.split(\" \")\n    path_1 = a_1, b_1\n    path_2 = a_2, b_2\n    path_1 = [(int(a_1), int(b_1)), (int(a_2), int(b_2))]\n    path_2 = [(int(a_2), int(b_2)), (int(a_1), int(b_1))]\n    visited = set()\n    visited.add((int(a_1), int(b_1)))\n    visited.add((int(a_2), int(b_2)))\n    return len(visited)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    apple_lst = list(map(int, stdin.split()))\n    apple_lst = sorted(apple_lst)\n\n    max_diff = 0\n    best_app = 0\n    for i in range(n - 1):\n        diff = abs(apple_lst[i] - apple_lst[i + 1])\n        if diff < max_diff:\n            max_diff = diff\n            best_app = apple_lst[i]\n\n    return str(max_diff)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        arr[i + 1] += arr[i]\n    return str(min(abs(arr[i + 1] - l) for i in range(n - 1)))"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, L = list(map(int, stdin.split()))\n    apples = sorted(list(map(int, stdin.split())), reverse=True)\n    start = 0\n    end = N - 1\n    ans = 0\n    while start <= end:\n        if apples[start] + apples[end] <= L:\n            end -= 1\n        else:\n            ans = max(ans, apples[start] + apples[end])\n            start += 1\n    return str(ans)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split()))\n\n    def get_flavors(l):\n        flavors = set()\n        if l == 0:\n            return flavors\n\n        flavors.add(l)\n        for i in range(1, n):\n            flavors.add(l - i)\n\n        return flavors\n\n    m = max(get_flavors(l))\n    return abs(m)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,l = map(int,stdin.split())\n    apple = [int(i) for i in range(1,n+1)]\n    apple.sort(reverse=True)\n    x = apple[0]\n    y = apple[1]\n    if l==0:\n        return str(x+y)\n    diff = abs(l-sum(apple))\n    apple.remove(x)\n    apple.remove(y)\n    apple.sort(reverse=True)\n    z = apple[0]\n    apple.remove(z)\n    answer = str(x+y+z+diff)\n    return answer\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split()))\n\n    ans = 10**9\n    for i in range(n):\n        ans = min(ans, abs(l - l + i) + solution(str(i + 1)))\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l = stdin.split()\n    n, l = int(n), int(l)\n    apple = []\n    for i in range(1, n+1):\n        apple.append(i)\n    apple.append(l+1)\n    apple.sort()\n    \n    #print(apple)\n    \n    #sum = 0\n    #for i in range(n):\n        #sum += apple[i]\n    sum = apple[n-1] + apple[n]\n    sum += apple[n]\n    #print(sum)\n    \n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum += apple[i] + apple[j]\n            sum -= apple[j]\n    \n    return str(sum)"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    l = int(lines[1])\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = (2*l) - i\n        if diff > 0:\n            min_diff = min(min_diff, abs(diff))\n    print(min_diff)\n    return min_diff\n\nsolution('5 2')\nsolution('4 1')\nsolution('3 2')\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N, L] = stdin.split()\n    N = int(N)\n    L = int(L)\n    apple = list(range(1, N + 1))\n    apple.sort(key=lambda x: x, reverse=True)\n    answer = 0\n    for i in range(N - 1, -1, -1):\n        print(apple)\n        if (apple[i] + L) < 0:\n            answer += L\n        else:\n            answer += apple[i] + L\n    return str(answer)\n\nsolution(input())\n\n4 5\n-100 100\n\n2 4\n100 100\n\n6 5\n-100 -100\n\n1 4\n100 100\n\n1 5\n-100 -100\n\n2 4\n100 100\n\n2 3\n0 0\n\n3 4\n0 0\n\n4 5\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n3 4\n0 0\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n4 5\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0\n\n5 5\n-100 -100\n\n2 4\n100 100\n\n3 4\n-100 -100\n\n2 5\n100 100\n\n3 4\n-100 -100\n\n1 4\n100 100\n\n2 4\n100 100\n\n4 5\n-100 -100\n\n3 4\n0 0"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,l=map(int,stdin.split())\n    l=list(map(int,stdin.split()))\n    l.sort()\n    ans=0\n    c=1\n    for i in range(n):\n        ans+=c*l[i]\n        c+=1\n    print(ans)"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n    return str(sum(fizz_buzz(i) for i in range(1, N+1)))\n\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''15\n   ... ''')\n    '60'\n    >>> solution('''10\n   ... ''')\n    '30'\n    >>> solution('''20\n   ... ''')\n    '30'\n    >>> solution('''100\n   ... ''')\n    '900'\n    >>> solution('''30\n   ... ''')\n    '60'\n    \"\"\"\n    n = int(stdin)\n    a = 1\n    ans = 0\n    while a <= n:\n        if a % 3 == 0 and a % 5 == 0:\n            ans += a\n            print(f\"{a} - FizzBuzz\")\n        elif a % 3 == 0:\n            ans += a\n            print(f\"{a} - Fizz\")\n        elif a % 5 == 0:\n            ans += a\n            print(f\"{a} - Buzz\")\n        else:\n            print(a)\n        a += 1\n    return str(ans)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1, int(stdin) + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += i\n            print(f'FizzBuzz: {i}')\n        elif i % 3 == 0:\n            result += i\n            print(f'Fizz: {i}')\n        elif i % 5 == 0:\n            result += i\n            print(f'Buzz: {i}')\n        else:\n            print(i)\n    print(f'Sum = {result}')\n\nsolution(input())\n\"\"\"\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return ''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 15 == 0:\n            print(i)\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\n        sum += i\n    print(sum)\n    return ''\n    \nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    sum: int = 0\n    for i in range(1, n+1):\n        if (i % 3 == 0 and i % 5 == 0):\n            sum += i\n        elif i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n        else:\n            sum += i\n    return str(sum)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin)\n    FizzBuzz = list(range(1, N + 1))\n    answer = 0\n    for i in range(N):\n        answer += (FizzBuzz[i] * (3 ** i) + 5 ** i) if 3 * i + 5 * i == FizzBuzz[i] else answer + FizzBuzz[i]\n    return str(answer)"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using the given example, compute the sum of all numbers in the FizzBuzz sequence.\n    :param stdin: The input to the program.\n    :return: The sum of all numbers in the FizzBuzz sequence.\n    \"\"\"\n    n = int(stdin)\n    fizzbuzz = {3: 'Fizz', 5: 'Buzz'}\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n        if i % 3 == 0:\n            result += fizzbuzz[3]\n        if i % 5 == 0:\n            result += fizzbuzz[5]\n    return result\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizz_buzz = [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n    ans = 0\n    for i in range(1, N + 1):\n        ans += fizz_buzz[i - 1]\n    return str(ans)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fizzbuzz = (3, 5)\n    sum = 0\n    for i in range(1, n + 1):\n        if i in fizzbuzz:\n            sum += i\n        elif (i % 3 == 0) and (i % 5 == 0):\n            sum += i\n        elif i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n        else:\n            sum += i\n    return str(sum)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Remove whitespaces and newlines\n    stdin = stdin.strip()\n    # Parse input\n    N = int(stdin)\n\n    fizzBuzz = []\n    i = 1\n    while len(fizzBuzz) <= N:\n        if i % 3 == 0 and i % 5 == 0:\n            fizzBuzz.append(f'{fizzBuzz},{i}')\n        elif i % 3 == 0:\n            fizzBuzz.append(f'{i}')\n        elif i % 5 == 0:\n            fizzBuzz.append(f'{i}')\n        else:\n            fizzBuzz.append(i)\n        i += 1\n\n    print(f'{sum(fizzBuzz)}\\n{sum(fizzBuzz) / len(fizzBuzz)}')\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    min_diff = float('inf')\n    res = 0\n    for i in range(n - 1):\n        if abs(x - arr[i]) < min_diff:\n            res = arr[i]\n            min_diff = abs(x - arr[i])\n    return str(res)\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    min_diff = abs(numbers[0] - x)\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - x)\n        if min_diff > diff:\n            min_diff = diff\n    return str(numbers[-1]) if min_diff == abs(numbers[-1] - x) else str(numbers[0])"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p = sorted(map(int, stdin.split()))\n    ans = abs(X - p[-1])\n    for i in range(N-1):\n        ans = min(ans, abs(X - p[i]))\n    return str(p[-1])\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    X, N = input_data.split()\n    X, N = int(X), int(N)\n    seq = sorted([int(item) for item in stdin.split(\" \")])\n    min_diff = abs(X - seq[0])\n    for i in range(len(seq)):\n        diff = abs(X - seq[i])\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)\n\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, n = list(map(int, stdin.split()))\n    seq = sorted(list(map(int, stdin.split())))\n    min_diff = a - seq[0]\n    res = seq[0]\n    for i in range(1, n):\n        if seq[i] - seq[i - 1] < min_diff:\n            min_diff = seq[i] - seq[i - 1]\n            res = seq[i]\n    return str(res)"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    array = sorted(map(int, stdin.split()))\n    for i in array:\n        if i >= x:\n            print(i)\n            break\n        if i < x:\n            if abs(x - i) <= abs(x - min(array)):\n                print(i)\n                break\n    else:\n        print(array[0])\n    return ''.join(str(i) for i in array)\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, n = stdin.split()\n    x = int(x)\n    n = int(n)\n    min = float('inf')\n    num = []\n    for i in range(1, n+1):\n        num.append(abs(x - int(i)))\n    for i in range(len(num)):\n        if num[i] < min:\n            min = num[i]\n            index = i\n    return str(int(index))"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [x, n] = stdin.split(' ')\n    n = int(n)\n    #p = sorted(map(int, input().split(' ')))\n    p = sorted(list(map(int, stdin.split(' '))))\n    diff = x - p[-1]\n    for i in range(n - 1):\n        if p[i] > x:\n            break\n        diff_temp = x - p[i]\n        if diff_temp < diff:\n            diff = diff_temp\n    return p[n - 1] if diff == 0 else p[i + 1]\n\nimport sys\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N, X = int(N), int(X)\n    seq = list(map(int, stdin.split()))\n    smallest_index = None\n    smallest_difference = None\n    for i, val in enumerate(seq):\n        diff = abs(val - X)\n        if smallest_index is None or diff < smallest_difference:\n            smallest_difference = diff\n            smallest_index = i\n    return str(smallest_index + 1)"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    seq = map(int, stdin.split())\n    return str(min(seq, key=lambda i: abs(i - x)))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = stdin.split()\n    rows = int(rows)\n    cols = int(cols)\n    return str(int((cols*rows - (cols+rows-2)) / (2*cols-2) - 1))"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    height, width = stdin.split()\n    h = int(height)\n    w = int(width)\n    if (h % 2 == 0) and (w % 2 == 0):\n        n = h * w - 2 * (h - 1) * (w - 1)\n        print(n)\n    else:\n        n = h * w - 2 * (h - 1) * (w - 1)\n        print(n)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    return str(math.ceil(H * W / 2))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    height, width = input[0], input[1]\n    h, w = map(int, input[0].split())\n    black_white = [[0 for i in range(w)] for j in range(h)]\n    if h <= 0 or w <= 0:\n        print(0)\n    else:\n        for i in range(h):\n            for j in range(w):\n                if i == 0 or j == 0:\n                    if i == 0 and j!= 0:\n                        black_white[i][j] = 1\n                    elif j == 0 and i!= 0:\n                        black_white[i][j] = 1\n                elif i > 0 and j > 0:\n                    black_white[i][j] = black_white[i - 1][j] + black_white[i][j - 1]\n                elif i > 0 and j == 0:\n                    black_white[i][j] = black_white[i - 1][j]\n                elif i == 0 and j > 0:\n                    black_white[i][j] = black_white[i][j - 1]\n        print(black_white[h - 1][w - 1])\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [rows, columns] = map(int, stdin.strip().split())\n    return str(rows * columns - ((rows - 1) * columns + columns - 1))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    black_cells = n * m - (n + m - 1)\n    return str(black_cells)\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = stdin.split(\" \")\n    rows = int(rows)\n    columns = int(columns)\n    height = rows\n    width = columns\n    count = 0\n\n    if rows == 1 and columns == 1:\n        count = 1\n        return count\n\n    if rows == 1 and columns > 1:\n        for row in range(0, columns):\n            if (row == 1 or row == columns - 1) and (row + 1 == columns or row - 1 == columns):\n                count += 1\n            else:\n                count += 2\n        return count\n\n    if rows > 1 and columns == 1:\n        for column in range(0, rows):\n            if (column == 1 or column == rows - 1) and (column + 1 == rows or column - 1 == rows):\n                count += 1\n            else:\n                count += 2\n        return count\n\n    if rows == 1 and columns == 1:\n        return 1\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    height, width = map(int, stdin.split())\n    h, w = min(height, width), max(height, width)\n\n    if h * w <= height + width:\n        return '0'\n\n    painted_rows = [[False for _ in range(w)] for _ in range(height)]\n    for i in range(height):\n        num_white_cells = 0\n        for j in range(width):\n            if not painted_rows[i][j]:\n                num_white_cells += 1\n                painted_rows[i][j] = True\n                continue\n\n            if painted_rows[i][j]:\n                num_white_cells += 1\n            painted_rows[i][j] = False\n        if num_white_cells == 1:\n            return '1'\n\n    for j in range(width):\n        num_white_cells = 0\n        for i in range(height):\n            if not painted_rows[i][j]:\n                num_white_cells += 1\n                painted_rows[i][j] = True\n                continue\n\n            if painted_rows[i][j]:\n                num_white_cells += 1\n            painted_rows[i][j] = False\n        if num_white_cells == 1:\n            return '1'\n\n    return '0'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    if H < 1 or W < 1 or H > 20 or W > 20:\n        return \"Invalid\"\n    h = 0\n    w = 0\n    if H == 1:\n        h = 1\n        w = W\n    if H == 2:\n        h = W // 2\n        w = W - h\n    if H == 3:\n        h = 1\n        w = W - 2\n    print(h * w)\n    return h * w\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (h, w) = map(int, stdin.split())\n    return str(h * w - (h * (h - 1) + w * (w - 1)) // 2)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = -1\n    for i in range(n):\n        if sum([1 for j in range(n) if a[j] <= a[i]]) < k:\n            res = a[i]\n            break\n    return str(res)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, k = map(int, stdin.split())\n    sequence = map(int, stdin.split())\n    first_number = sequence[0]\n    if k >= 1:\n        if first_number <= 10 ** 9:\n            sequence = list(sequence)\n            sequence.sort()\n            if k <= sequence[0]:\n                return str(sequence[0])\n            else:\n                return str(-1)\n        else:\n            return str(-1)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    min_num = min(seq)\n    max_num = max(seq)\n    if k > n:\n        return str(-1)\n    for i in range(1, max_num + 1):\n        if i in seq:\n            continue\n        if i < min_num:\n            continue\n        if i - k >= 0:\n            if i - k in seq:\n                continue\n        else:\n            return str(i)\n    return str(-1)"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    curr = 0\n    ans = -1\n    for i in range(n):\n        if seq[i] >= curr:\n            curr = seq[i]\n            count = 1\n        else:\n            count += 1\n        if count == k:\n            ans = max(ans, seq[i])\n    if ans == -1:\n        return \"-1\"\n    return str(ans)\n\nprint(solution(input()))\n\nimport sys\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    sequence = line[1]\n    k = line[2]\n\n    sequence = sorted(sequence)\n    result = -1\n    for i in range(len(sequence)):\n        if sequence[i] == k:\n            continue\n        elif sequence[i] >= k:\n            result = i\n            break\n    print(result)"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '-1' if len(stdin)!= 2 else str(len(list(filter(lambda a: a <= int(stdin[1]), map(int, stdin[0].split())))) - 1)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    if k > len(seq):\n        return -1\n    left = 0\n    right = seq[-1]\n    while left < right:\n        mid = (left + right) // 2\n        count = 0\n        for i in seq:\n            count += (i >= mid)\n        if count >= k:\n            left = mid + 1\n        else:\n            right = mid\n    return str(left)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    numbers = []\n    for i in range(len(arr)):\n        if len(numbers) == 0:\n            numbers.append(arr[i])\n        elif arr[i] >= numbers[0]:\n            if len(numbers) < k:\n                numbers.append(arr[i])\n            elif len(numbers) == k:\n                if arr[i] <= numbers[-1]:\n                    numbers.append(arr[i])\n                else:\n                    return \"-\"\n        else:\n            if len(numbers) > k:\n                numbers.pop(0)\n            else:\n                return \"-\"\n    return str(numbers[0])"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_1, input_2 = stdin.split(\"\\n\")\n    n = int(input_1)\n    k = int(input_2)\n    arr = [int(x) for x in input_2.split()]\n    counter = 0\n    max_num = len(arr)\n    for x in range(max_num):\n        if arr[x] > 10**9:\n            break\n        if x % k!= 0:\n            continue\n        for y in range(x + 1, max_num):\n            if arr[x] > 10**9:\n                break\n            if arr[y] > 10**9:\n                break\n            if arr[x] >= arr[y]:\n                continue\n            if arr[y] - arr[x] <= 10**9:\n                counter += 1\n            else:\n                break\n    if counter >= k:\n        return str(arr[0])\n    else:\n        return \"-1\"\nprint(solution(input()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = list(map(int, stdin.split()))\n\n    def is_less_than_or_equal_to(num: list, target: int):\n        for i in range(len(num)):\n            if num[i] > target:\n                return False\n        return True\n\n    for i in range(n):\n        if is_less_than_or_equal_to(num, num[i]):\n            print(num[i])\n            break\n    else:\n        print(-1)\n\nsolution(input())\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip()\n    \n    # row_counter: int = 0\n    # column_counter: int = 0\n    # for i, char in enumerate(grid):\n    #     if char == \".\":\n    #         row_counter = i\n    #         break\n    #     column_counter += 1\n    \n    # for j, char in enumerate(grid[row_counter:]):\n    #     if char == \".\":\n    #         column_counter = j\n    #         break\n\n    # max_asterisk = column_counter - row_counter + 1\n    # if max_asterisk > m:\n    #     return \"-\"\n\n    asterisk_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                asterisk_count += 1\n    \n    if asterisk_count > n * m:\n        return \"-1\"\n\n    # row_asterisk_count = 0\n    # for i in range(row_counter, n):\n    #     for j in range(column_counter, m):\n    #         if grid[i][j] == \"*\":\n    #             row_asterisk_count += 1\n\n    # if row_asterisk_count > m - column_counter:\n    #     return \"-\"\n\n    # column_asterisk_count = 0\n    # for i in range(row_counter, n):\n    #     for j in range(column_counter, m):\n    #         if grid[i][j] == \"*\":\n    #             column_asterisk_count += 1\n\n    # if column_asterisk_count > m - column_counter:\n    #     return \"-\"\n\n    # if row_asterisk_count + column_asterisk_count > n * m:\n    #     return \"-\"\n\n    # rows = []\n    # for i in range(row_counter, n):\n    #     row = []\n    #     for j in range(column_counter, m):\n    #         row.append(\"*\")\n    #     rows.append(row)\n\n    # for i in range(row_counter, n):\n    #     for j in range(m):\n    #         if grid[i][j]!= \"*\":\n    #             row = []\n    #             for k in range(column_counter, m):\n    #                 row.append(grid[i][k])\n    #             rows.append(row)\n    #             break\n    \n    # for row in rows:\n    #     print(row)\n\n    row_asterisk_count = 0\n    for i in range(row_counter, n):\n        for j in range(column_counter, m):\n            if grid[i][j] == \"*\":\n                row_asterisk_count += 1\n\n    if row_asterisk_count > m - column_counter:\n        return \"-\"\n\n    column_asterisk_count = 0\n    for i in range(row_counter, n):\n        for j in range(column_counter, m):\n            if grid[i][j] == \"*\":\n                column_asterisk_count += 1\n\n    if column_asterisk_count > m - column_counter:\n        return \"-\"\n\n    if row_asterisk_count + column_asterisk_count > n * m:\n        return \"-\"\n\n    rows = []\n    for i in range(row_counter, n):\n        row = []\n        for j in range(column_counter, m):\n            row.append(\"*\")\n        rows.append(row)\n\n    for i in range(row_counter, n):\n        for j in range(m):\n            if grid[i][j]!= \"*\":\n                row = []\n                for k in range(column_counter, m):\n                    row.append(grid[i][k])\n                rows.append(row)\n                break\n\n    for row in rows:\n        print(row)\n\n    # rows_count = 0\n    # for i in range(row_counter, n):\n    #     for j in range(column_counter, m):\n    #         if grid[i][j] == \"*\":\n    #             rows_count += 1\n\n    # if rows_count > m - column_counter:\n    #     return \"-\"\n\n    # columns_count = 0\n    # for j in range(column_counter, m):\n    #     for i in range(row_counter, n):\n    #         if grid[i][j] == \"*\":\n    #             columns_count += 1\n\n    # if columns_count > m - column_counter:\n    #     return \"-\"\n\n    # if rows_count + columns_count > n * m:\n    #     return \"-\"\n\n    # columns = []\n    # for j in range(column_counter, m):\n    #     column = []\n    #     for i in range(row_counter, n):\n    #         column.append(\"*\")\n    #     columns.append(column)\n\n    # for j in range(column_counter, m):\n    #     for i in range(row_counter, n):\n    #         if grid[i][j]!= \"*\":\n    #             column = []\n    #             for k in range(column_counter, m):\n    #                 column.append(grid[i][k])\n    #             columns.append(column)\n    #             break\n    \n    # for column in columns:\n    #     print(column)\n\n    # columns_count = 0\n    # for j in range(column_"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin) for _ in range(n)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n                count += 1\n            if grid[i - 1][j] == '*' and grid[i][j - 1] == '*' and grid[i][j + 1] == '*' and grid[i + 1][j] == '*':\n                grid[i][j] = '.'\n                count += 1\n    if count > 0:\n        return count\n    return '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    if n < 3 or m < 3:\n        return '-1'\n\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.replace('*', '.').replace('.', '*'))\n\n    rows, columns, size = n, m, 0\n    for row in range(n):\n        for column in range(m):\n            if grid[row][column] == '*':\n                size += 1\n    if size > n * m:\n        return '-1'\n    return str(size) +'' + str(n) +'' + str(m)\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin[2:]\n    if '.' not in grid:\n        print(-1)\n        return\n    stars = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == '*':\n                stars += 1\n    if stars > n * m:\n        print(-1)\n        return\n    def f(i, j):\n        if i < 0 or j < 0 or i >= n or j >= m:\n            return\n        if grid[i][j] == '*':\n            return\n        grid[i][j] = '*'\n        f(i - 1, j)\n        f(i + 1, j)\n        f(i, j - 1)\n        f(i, j + 1)\n\n    f(n - 1, m - 1)\n    return stars\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    grid = []\n    for i in range(n):\n        grid.append(stdin[i])\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n    if k > n * m:\n        return '-1'\n    start = []\n    for i in range(k):\n        start.append(stdin[i])\n    start.sort(key=lambda x: (x[1], x[0]))\n    start_pos = []\n    for i in range(k):\n        x, y = start[i]\n        start_pos.append((x, y))\n    start_pos.sort()\n    n_star = 0\n    for i in range(k):\n        x, y = start_pos[i]\n        n_star += 1\n        for j in range(i + 1, k):\n            x1, y1 = start_pos[j]\n            if x == x1 and y == y1:\n                return '-1'\n            if x - x1 == 0 or y - y1 == 0:\n                if x == x1:\n                    n_star += 1\n                if y == y1:\n                    n_star += 1\n    if k > n_star:\n        return '-1'\n    n_star_s = 0\n    k_max = n * m\n    for i in range(k):\n        x, y = start_pos[i]\n        if x - x + 1 <= k_max:\n            n_star_s += 1\n        if y - y + 1 <= k_max:\n            n_star_s += 1\n    return n_star_s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    asterisk_count = 0\n    for row in range(n):\n        for column in range(m):\n            if stdin[row][column] == '*':\n                asterisk_count += 1\n\n    if asterisk_count > n * m:\n        return '-1'\n\n    max_stars = n * m\n    stars = []\n    for row in range(n):\n        for column in range(m):\n            if stdin[row][column] == '*':\n                stars.append(1)\n            else:\n                stars.append(0)\n\n    count = 0\n    if n == 1:\n        if m == 1:\n            stars[0] = 1\n            return str(max_stars) +'' + str(max_stars) +'' + str(max_stars)\n\n    for row in range(n):\n        for column in range(m):\n            if stdin[row][column] == '.':\n                continue\n            else:\n                count += 1\n\n    return str(max_stars) +'' + str(max_stars) +'' + str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    grid = [stdin]\n\n    for i in range(n):\n        grid.append(list(stdin))\n\n    def get_intersections():\n        count = 0\n        for i in range(n):\n            for j in range(m - 2):\n                if grid[i][j] == '*' and grid[i][j + 1] == '*' and grid[i][j + 2] == '*':\n                    count += 1\n\n                if grid[i][m - j - 1] == '*' and grid[i][m - j - 2] == '*' and grid[i][m - j - 3] == '*':\n                    count += 1\n\n                if grid[m - j - 1][i] == '*' and grid[m - j - 2][i] == '*' and grid[m - j - 3][i] == '*':\n                    count += 1\n\n                if grid[m - j - 1][m - i - 1] == '*' and grid[m - j - 2][m - i - 2] == '*' and grid[m - j - 3][m - i - 3] == '*':\n                    count += 1\n\n        return count\n\n    def get_stars_sizes():\n        count = 0\n        for i in range(n):\n            for j in range(m - 2):\n                if grid[i][j] == '*':\n                    count += 1\n\n                if grid[i][j + 1] == '*':\n                    count += 1\n\n                if grid[i][j + 2] == '*':\n                    count += 1\n\n                if grid[i][j + 3] == '*':\n                    count += 1\n\n                if grid[i][m - j - 1] == '*':\n                    count += 1\n\n                if grid[i][m - j - 2] == '*':\n                    count += 1\n\n                if grid[i][m - j - 3] == '*':\n                    count += 1\n\n                if grid[m - j - 1][i] == '*':\n                    count += 1\n\n                if grid[m - j - 2][i] == '*':\n                    count += 1\n\n                if grid[m - j - 3][i] == '*':\n                    count += 1\n\n        return count\n\n    def get_stars():\n        count = 0\n        for i in range(n):\n            for j in range(m - 2):\n                if grid[i][j] == '*':\n                    count += 1\n\n                if grid[i][j + 1] == '*':\n                    count += 1\n\n                if grid[i][j + 2] == '*':\n                    count += 1\n\n                if grid[i][j + 3] == '*':\n                    count += 1\n\n                if grid[i][m - j - 1] == '*':\n                    count += 1\n\n                if grid[i][m - j - 2] == '*':\n                    count += 1\n\n                if grid[i][m - j - 3] == '*':\n                    count += 1\n\n                if grid[m - j - 1][i] == '*':\n                    count += 1\n\n                if grid[m - j - 2][i] == '*':\n                    count += 1\n\n                if grid[m - j - 3][i] == '*':\n                    count += 1\n\n        return count\n\n    for i in range(n):\n        for j in range(m - 2):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n                grid[i][j + 1] = '.'\n                grid[i][j + 2] = '.'\n                grid[i][j + 3] = '.'\n\n                grid[i][m - j - 1] = '.'\n                grid[i][m - j - 2] = '.'\n                grid[i][m - j - 3] = '.'\n\n            if grid[i][j + 1] == '*':\n                grid[i][j + 1] = '.'\n                grid[i][j + 2] = '.'\n                grid[i][j + 3] = '.'\n\n                grid[i][m - j - 1] = '.'\n                grid[i][m - j - 2] = '.'\n                grid[i][m - j - 3] = '.'\n\n            if grid[i][j + 2] == '*':\n                grid[i][j + 2] = '.'\n                grid[i][j + 3] = '.'\n\n                grid[i][m - j - 1] = '.'\n                grid[i][m - j - 2] = '.'\n                grid[i][m - j - 3] = '.'\n\n            if grid[i][j + 3] == '*':\n                grid[i][j + 3] = '.'\n                grid[i][m - j - 1] = '.'\n                grid[i][m - j - 2] = '.'\n\n            if grid[i][m - j - 1] == '*':\n                grid[i][m - j - 1] = '.'\n                grid[i][m - j - 2] = '.'\n                grid[i][m - j - 3] = '.'\n\n            if grid[i][m - j - 2] == '*':\n                grid[i][m - j - 2] = '.'\n                grid[i][m - j - 3] = '.'\n\n            if grid[i][m - j - 3] == '*':\n                grid[i][m - j - 3] = '.'\n                grid[i][m - j - 2] = '.'\n                grid[i][m - j - 1] ="
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = []\n    for i in range(m):\n        row = stdin[i * n: (i + 1) * n]\n        grid.append(row)\n    result = 0\n    if grid[0][0] == '*' and grid[0][-1] == '*' and grid[-1][0] == '*' and grid[-1][-1] == '*':\n        result += 1\n    elif grid[0][0] == '*' and grid[0][-1] == '*' and grid[-1][0] == '*' and grid[-1][-1]!= '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][0] = '*'\n    elif grid[0][0] == '*' and grid[0][-1]!= '*' and grid[-1][0] == '*' and grid[-1][-1] == '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n    elif grid[0][0] == '*' and grid[0][-1] == '*' and grid[-1][0]!= '*' and grid[-1][-1] == '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1] == '*' and grid[-1][0]!= '*' and grid[-1][-1] == '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1]!= '*' and grid[-1][0] == '*' and grid[-1][-1]!= '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1]!= '*' and grid[-1][0]!= '*' and grid[-1][-1]!= '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    elif grid[0][0] == '*' and grid[0][-1] == '*' and grid[-1][0] == '*' and grid[-1][-1] == '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1]!= '*' and grid[-1][0]!= '*' and grid[-1][-1]!= '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    elif grid[0][0] == '*' and grid[0][-1] == '*' and grid[-1][0]!= '*' and grid[-1][-1]!= '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1]!= '*' and grid[-1][0] == '*' and grid[-1][-1] == '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1]!= '*' and grid[-1][0]!= '*' and grid[-1][-1] == '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    elif grid[0][0]!= '*' and grid[0][-1]!= '*' and grid[-1][0]!= '*' and grid[-1][-1]!= '*':\n        result += 1\n        grid[0][0] = '*'\n        grid[-1][0] = '*'\n        grid[0][-1] = '*'\n        grid[-1][-1] = '*'\n    else:\n        result = -1\n    return str"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    def check(x, y, size, grid):\n        for i in range(x - size + 1, x + size):\n            if 0 <= i < n and grid[i] == '.':\n                return False\n        for i in range(y - size + 1, y + size):\n            if 0 <= i < m and grid[i] == '.':\n                return False\n        for i in range(x - size + 1, x + size):\n            for j in range(y - size + 1, y + size):\n                if (i, j)!= (x, y) and grid[i][j] == '.':\n                    return False\n        return True\n\n    def check_star(x, y, size, grid):\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if (i, j)!= (x, y) and grid[i][j] == '*':\n                    return False\n        return True\n\n    stars = set()\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == '*':\n                stars.add((x, y))\n    if len(stars) > n * m:\n        return '-1'\n    grid = [['.' for _ in range(m)] for _ in range(n)]\n    for x, y in stars:\n        grid[x][y] = '*'\n\n    sizes = set()\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == '*':\n                sizes.add((x, y, 1))\n                sizes.add((x, y, 2))\n                sizes.add((x, y, 3))\n    # print(sizes)\n    for size in sizes:\n        x, y, size = size\n        while size > 0:\n            x_right = x + size\n            y_right = y + size\n            if not check(x, y, size, grid):\n                break\n            if not check_star(x_right, y, size, grid):\n                break\n            size -= 1\n            x, y = x_right, y_right\n    else:\n        for x in range(n):\n            for y in range(m):\n                if grid[x][y] == '*':\n                    grid[x][y] = '.'\n\n    grid_str = []\n    for x in range(n):\n        grid_str.append(''.join(grid[x]))\n    grid_str = '\\n'.join(grid_str)\n\n    return str(len(stars)) + '\\n' + grid_str\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.strip())\n    n_stars, m_stars, n_star = count_stars(grid)\n    if n_stars == m_stars:\n        print(n_stars)\n        return\n    min_stars = min(n_stars, m_stars)\n    if n_stars!= min_stars:\n        print(-1)\n        return\n    print(n_star, m_star, n_stars)\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 1 if s[0]!= s[1] else 2\n    else:\n        mid = len(s) // 2\n        left = solution(s[:mid])\n        right = solution(s[mid:])\n        k = left if left < right else right\n        for i in range(1, k):\n            if s[i]!= s[i - 1]:\n                return k\n        return k\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    n = int(stdin[0])\n    s = stdin[1]\n    res = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            continue\n        if s[i-1] == s[i] and s[i+1] == s[i]:\n            continue\n        if s[i]!= s[i-1] and s[i]!= s[i+1]:\n            res += 1\n        else:\n            res += 2\n    return str(res) +'' + s\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(stdin)-1, len(stdin)//2))"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    n = int(inp[0])\n    s = inp[1]\n    print(s)\n    k = 0\n    while k < n:\n        k += 1\n        if k == 1 and s[k] == s[0]:\n            k = n\n    if k == n:\n        return str(n)\n    if k == 0:\n        return \"The empty string is good\"\n    s = s[k:]\n    for i in range(n - k):\n        if s[i]!= s[i + k]:\n            return str(k)\n        else:\n            k += 1\n    return str(k)\n\nsolution(\"3\\naaa\\n\")\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    good_count = 0\n    for i in range(1, len(stdin)):\n        if stdin[i-1] == stdin[i]:\n            good_count += 1\n        else:\n            good_count = 0\n        if good_count == len(stdin) - i:\n            good_count += 1\n    return good_count"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"test\")\n\"test\"\n\n\nsolution(\"t\")\n\"t\"\n\n\nsolution(\"x\")\n\"x\"\n\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    while n > 0:\n        new_string = ''\n        for i in range(0, len(string), 2):\n            if i == 0:\n                new_string += string[i]\n            else:\n                new_string += string[i]\n        string = new_string\n        n -= 1\n    return string\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    a = []\n    for i in range(0, len(s), 2):\n        a.append(s[i])\n    b = []\n    c = []\n    for i in range(1, len(s), 2):\n        b.append(s[i])\n    a.sort()\n    b.sort()\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            c.append(a[i])\n            c.append(b[i])\n            break\n    return len(c)\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    while len(s) > 1:\n        for i in range(len(s) - 1):\n            if (ord(s[i + 1]) - ord(s[i]) > 1):\n                s = s[:i] + s[i + 1:]\n                res += 1\n                break\n    return f'{res} {s}'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.split()\n    result = 0\n    for i in l:\n        d = {}\n        if len(i) % 2!= 0:\n            result = -1\n            break\n        else:\n            for j in range(len(i)):\n                if j % 2 == 0:\n                    if i[j] in d:\n                        d[i[j]] += 1\n                    else:\n                        d[i[j]] = 1\n            for j in range(1, len(i)):\n                if j % 2 == 0:\n                    if i[j] not in d or d[i[j]] < 2:\n                        result = -1\n                        break\n            if result == -1:\n                break\n    if result == -1:\n        return \"\"\n    else:\n        return ''.join(list(map(str, sorted(d.values())))) +'' + str(result) +'' + l[-1]\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(i) for i in stdin.split()]\n\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = [int(i) for i in stdin.split()[1:]]\n        graph[u].add(v)\n        graph[v].add(u)\n\n    for i in graph:\n        if len(graph[i]) > 2:\n            return 'NO'\n    return 'YES'\n\n\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\ninput: stdin\noutput: string\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        u, v = u - 1, v - 1\n        edges[u].append(v)\n        edges[v].append(u)\n    for edge in edges:\n        if len(edge) >= 2:\n            return \"NO\"\n    return \"YES\"\n\n\n'''\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # determine whether there is a path between every pair of vertices in the graph\n    #  - if there is such path, then the graph is not connected\n    #  - if there is not such path, then the graph is connected\n    #  - if there is no such path, then the graph has at least two paths\n    visited = {}\n    # initialize visited as empty set\n    for i in range(n):\n        visited[i] = False\n    # check if each vertex is in the graph\n    for u, v in combinations(range(1, n+1), 2):\n        if u not in visited or v not in visited:\n            visited[u] = visited[v] = True\n            # if there is no path between u and v, then the graph is not connected\n            if not has_path(u, v, visited):\n                return 'NO'\n    # there is at least one path between each pair of vertices in the graph\n    #  - so the graph is connected\n    #  - so return any orientation\n    return 'YES'"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 5\n   ... 1 5\n   ... 2 1\n   ... 1 4\n   ... 3 1\n   ... 6 1\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 8 6\n   ... 1 2\n   ... 1 3\n   ... 2 1\n   ... 3 2\n   ... 5 3\n   ... 6 1\n   ... 7 3\n   ... ''')\n    'YES'\n    \"\"\"\n    g = Graph(stdin)\n    for e in g.edges:\n        v = e.v\n        u = e.u\n        if g.is_edge_dir(u, v) and g.is_edge_dir(v, u):\n            continue\n        if g.is_edge_dir(u, v):\n            g.remove_edge(e)\n        else:\n            g.remove_edge(e)\n            g.remove_edge(e)\n        if not g.is_cyclic():\n            return \"NO\"\n    return \"YES\"\n\n\n\nclass Graph:\n    def __init__(self, graph_string: str):\n        self.edges = []\n        self.n = 0\n        self.weights = None\n        self.is_cyclic = False\n        self.is_edge_dir = None\n        for edge_string in graph_string.split('\\n'):\n            if not edge_string:\n                continue\n            v1, v2 = edge_string.split()\n            self.add_edge(int(v1), int(v2))\n\n    def add_edge(self, v1, v2):\n        self.edges.append(Edge(v1, v2))\n        self.edges.append(Edge(v2, v1))\n        self.n = max(self.n, v1, v2) + 1\n\n    def is_cyclic(self):\n        if self.is_cyclic:\n            return\n        self.is_cyclic = True\n        for e in self.edges:\n            if e.v == e.u:\n                continue\n            v = e.v\n            u = e.u\n            if self.is_edge_dir(v, u):\n                self.is_cyclic = False\n            else:\n                self.is_cyclic = self.is_cyclic or self.is_cyclic(v, u)\n        return self.is_cyclic\n\n    def is_edge_dir(self, v1, v2):\n        if self.weights is None:\n            self.weights = [0] * (self.n + 1)\n            for e in self.edges:\n                self.weights[e.v] += 1\n                self.weights[e.u] += 1\n            for i in range(1, self.n + 1):\n                if self.weights[i] == 0:\n                    self.weights[i] = i\n        return self.weights[v1] == self.weights[v2]\n\n\nclass Edge:\n    def __init__(self, v1, v2):\n        self.v1 = v1\n        self.v2 = v2\n\n    def __str__(self):\n        return '{} {}'.format(self.v1, self.v2)\n\n    def __repr__(self):\n        return str(self)\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = defaultdict(set)\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        g[u].add(v)\n        g[v].add(u)\n    visited = set()\n    que = deque([[0, 0]])\n    while que:\n        u, p = que.popleft()\n        if u in visited:\n            continue\n        visited.add(u)\n        for v in g[u]:\n            if v == p:\n                continue\n            que.append([v, u])\n    return 'YES' if len(visited) == n else 'NO'"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for u, v in map(int, stdin.split()):\n        g[u].append(v)\n        g[v].append(u)\n    nodes = set(range(n))\n    while nodes:\n        u = nodes.pop()\n        for v in g[u]:\n            nodes.remove(v)\n            for w in g[v]:\n                nodes.remove(w)\n                g[u].append(w)\n                g[w].append(u)\n    for u, v in g:\n        if len(u) > 1 or len(v) > 1:\n            return \"NO\"\n    return \"YES\"\n\n\n'''\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin = \"\"\"\n    6 5\n    1 5\n    2 1\n    1 4\n    3 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 5\n    1 2\n    2 3\n    3 4\n    4 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 7\n    1 5\n    2 1\n    3 4\n    4 2\n    5 6\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 2\n    1 2\n    3 2\n    2 4\n    3 4\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 7\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    7 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 4\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    3 6\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 2\n    1 2\n    3 2\n    2 4\n    3 4\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    1 1\n    2 2\n    3 1\n    4 2\n    5 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 3\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    6 5\n    1 5\n    2 1\n    1 4\n    3 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 5\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    7 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    6 2\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 3\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 5\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    1 5\n    2 1\n    1 4\n    3 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 7\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    7 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 6\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    9 9\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    9 9\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    10 10\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    10 10\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 5\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 4\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    7 7\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 8\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 3\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 4\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 7\n    1 5\n    2 1\n    1 4\n    3 1\n    6 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 2\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 8\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    8 4\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 1\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 3\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 2\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 3\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 5\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    5 3\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    4 2\n    1 2\n    2 3\n    3 4\n    4 5\n    \"\"\"\n    \"\"\"\n    stdin = \"\"\"\n    3 4\n    1 2\n    2"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nmy_list = list(map(int, stdin.split()))\nn = my_list[0]\nm = my_list[1]\nmy_dict = dict()\nfor i in range(n):\n    my_dict[i+1] = []\nfor i in range(m):\n    a, b = map(int, stdin.split())\n    my_dict[a].append(b)\n    my_dict[b].append(a)\nflag = 0\nfor i in range(n):\n    for j in range(n):\n        if j in my_dict[i+1]:\n            flag = 1\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    lines = lines[1:]\n    res = 0\n    x = 1\n    while x < m+1:\n        res += 1\n        if len(lines) == 0:\n            return str(res)\n        x = min(lines, key=lambda x: (x[0], x[1])).pop()\n        while len(lines)!= 0 and (min(lines, key=lambda x: (x[0], x[1]))[0] <= x and max(lines, key=lambda x: (x[0], x[1]))[1] >= x):\n            lines.pop()\n    return str(res)"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = set()\n\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        points.update((l, r))\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (l := min(l, r)) <= max(l, r):\n                points.add(l)\n\n    points = {point for point in range(1, m+1)} - points\n\n    if not points:\n        return '0'\n\n    return''.join(map(str, points))\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = sorted(list(map(int, stdin.split())))\n    res = 0\n    points_set = set(points)\n    for x in points:\n        if x not in points_set:\n            res += 1\n            points_set.add(x)\n    return str(res)"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    print(0)\n    \n    if n == 1:\n        return '0'\n\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in stdin.split()])\n    \n    print(n)\n    print(segments)\n\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in stdin.split()])\n\n    print(points)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                    segments.pop(i)\n                    points.pop(i)\n                    print('pop')\n                    break\n    \n    print(segments)\n    print(points)\n\n    print(len(segments))\n    print(len(points))\n\n    for i in range(len(segments)):\n        for j in range(len(points)):\n            if segments[i][0] == points[j][0] or segments[i][1] == points[j][1]:\n                segments.pop(i)\n                points.pop(j)\n                print('pop')\n                break\n    \n    print(segments)\n    print(points)\n\n    print(len(segments))\n    print(len(points))\n\n    count = 0\n    for i in range(len(segments)):\n        for j in range(len(points)):\n            if segments[i][0] == points[j][0] or segments[i][1] == points[j][1]:\n                segments.pop(i)\n                points.pop(j)\n                print('pop')\n                count += 1\n                break\n    \n    print(segments)\n    print(points)\n\n    print(count)\n    return count\n\n\nsolution(stdin)"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{}\\n{}'.format(len(set(range(1,int(stdin.split()[1])))),''.join(map(str, sorted(set(range(1,int(stdin.split()[1]))) - set(map(int, stdin.split()[2:])))))) if int(stdin.split()[0]) > 0 and int(stdin.split()[1]) > 0 and len(set(range(1,int(stdin.split()[1]))) - set(map(int, stdin.split()[2:]))) > 0 else '0'\n\nsolution(input())\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    res = 0\n    points = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            left = segments[i][0]\n            right = segments[i][1]\n            right_n = segments[j][1]\n            for k in range(left, right_n):\n                points.add(k)\n    for i in range(m + 1):\n        for j in range(i + 1, m + 1):\n            left = segments[0][0]\n            right = segments[0][1]\n            for k in range(left, right):\n                points.add(k)\n    res = len(points)\n    print(res)\n    if res == 0:\n        print()\n    else:\n        print(*sorted(points), sep=' ')\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    m = int(stdin_list[1])\n    segment_list = []\n    non_segment_list = []\n    for i in range(n):\n        segment_list.append(tuple(map(int, stdin_list[i*2+2].split())))\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if segment_list[i][0] < segment_list[j][0] and segment_list[i][1] > segment_list[j][1]:\n                    non_segment_list.append(i)\n                if segment_list[i][0] > segment_list[j][0] and segment_list[i][1] < segment_list[j][1]:\n                    non_segment_list.append(j)\n    if len(non_segment_list) == 0:\n        return 0\n    return''.join(map(str, non_segment_list))\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n    k = 0\n    for i in range(1, m+1):\n        if not any(i in range(s[k], s[j]) for j in range(k, len(s))):\n            k += 1\n    return str(k) if k == len(s) else str(k-1)\n\nstdin = '3 5'\nprint(solution(stdin))\n\nstdin = '1 7'\nprint(solution(stdin))\n\nstdin = '5 5'\nprint(solution(stdin))"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    count = 0\n    for i in range(A,B+1):\n        if i%C == 0 or i%D == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input as string,\n    splits it into list of integers,\n    sorts the list,\n    then loops through the list\n    and for each number it checks if\n    if it divides neither A nor C\n    if not then add it to the result.\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    nums = list(range(a, b + 1))\n    nums.sort()\n    res = 0\n    for num in nums:\n        if not (num % c or num % d):\n            res += 1\n    return str(res)\nprint(solution(input()))\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = stdin.split()\n    A,B,C,D = int(A), int(B), int(C), int(D)\n    def divs(num:int):\n        count = 0\n        if num % C == 0:\n            count += 1\n        if num % D == 0:\n            count += 1\n        if count == 0:\n            return f\"{num}\"\n        else:\n            return f\"{count} {divs(num - count)} \"\n    print(f\"{divs(B)}\")\n\nsolution(input())\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    i = A\n    cnt = 0\n    while i <= B:\n        if i % C == 0 and i % D == 0:\n            cnt += 1\n        i += 1\n    print(cnt)\n    return cnt\n\nprint(solution(input()))\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    # your code here\n    # A, B = map(int, input().split())\n    result = 0\n    # A, B = 4, 9\n    # C, D = 2, 3\n    while A <= B:\n        if A % C == 0 and A % D == 0:\n            result += 1\n        A += 1\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    cnt = 0\n\n    for i in range(numbers[0], numbers[1]+1):\n        if numbers[2] % i == 0 and numbers[3] % i == 0:\n            cnt += 1\n\n    return str(cnt)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n\n    count = 0\n\n    if(A % C == 0 or A % D == 0):\n        count += 1\n\n    if(B % C == 0 or B % D == 0):\n        count += 1\n\n    print(count)\n    return stdin\n\nsolution('4 9 2 3')\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    A, B, C, D = int(A), int(B), int(C), int(D)\n    if (A - 1) % C == 0 and (B - 1) % D == 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are divisible by \" + str(C) + \" and \" + str(D)\n    elif (A - 1) % D == 0 and (B - 1) % C == 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are divisible by \" + str(D) + \" and \" + str(C)\n    elif (A - 1) % C == 0 and (B - 1) % D!= 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are divisible by \" + str(C) + \" and \" + str(D)\n    elif (A - 1) % D == 0 and (B - 1) % C!= 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are divisible by \" + str(D) + \" and \" + str(C)\n    elif (A - 1) % C!= 0 and (B - 1) % D!= 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are neither divisible by \" + str(C) + \" nor \" + str(D)\n    elif (A - 1) % C == 0 and (B - 1) % D!= 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are divisible by \" + str(C) + \" but \" + str(D) + \" is not.\"\n    elif (A - 1) % D == 0 and (B - 1) % C!= 0:\n        return str(A - 1) + \" and \" + str(B - 1) + \" are divisible by \" + str(D) + \" but \" + str(C) + \" is not.\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C == 0 or i % D == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    ans = (b - a + 1) * (d - c + 1)\n    return str(ans)"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    value = int(stdin)\n    result = False\n    if (value % 9 == 0):\n        result = True\n    print(result)\n    return result\n\nprint(solution(\"123456789\"))\nprint(solution(\"1234567\"))\nprint(solution(\"12345\"))\nprint(solution(\"123\"))\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return \"Yes\" if int(n) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    return \"Yes\" if sum([int(i) for i in str(N)]) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % 9 == 0 else 'No'\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split('\\n')))\n    for num in stdin:\n        s = str(num)\n        if len(s)!= 9:\n            return 'No'\n        else:\n            sum = 0\n            for i in s:\n                sum += int(i)\n            if sum % 9 == 0:\n                return 'Yes'\n    return 'No'\n\nsolution('''9398745''')\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    while N > 0:\n        if (N + (N%9)) % 9 == 0:\n            return \"Yes\"\n        N = N//10\n    return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if int(stdin) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(list(map(int,stdin.split(' ')))))\n\nsolution(input())\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 0:\n        return \"0\"\n    divisor: int = 2\n    max_times: int = n\n    max_divisor: int = 0\n    max_number: int = 0\n    while max_times > 0:\n        number: int = divisor\n        times: int = 1\n        while times < max_times:\n            number += divisor\n            if number == max_times:\n                if divisor == 1:\n                    max_number = max(max_number, times)\n                    break\n                max_number = max(max_number, times)\n                break\n            times += 1\n        if number == n:\n            max_times = times\n        divisor += 1\n        if divisor > max_divisor:\n            max_divisor = divisor\n    return str(max_divisor)\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in stdin.splitlines():\n        total += int(i)\n    \n    count = 0\n    while total >= 1:\n        count += 1\n        total -= 1\n        if total == 1:\n            break\n        if total % 6 == 0:\n            total = total // 6\n        elif total % 9 == 0:\n            total = total // 9\n        elif total % 36 == 0:\n            total = total // 36\n        elif total % 81 == 0:\n            total = total // 81\n    return str(count)\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum number of operations required to withdraw N yen in total.\n    \"\"\"\n    N = int(stdin)\n    yen_list = [1, 6, 36, 81]\n    max_x = 0\n    min_x = 10e10\n\n    for x in yen_list:\n        if x <= N:\n            x_operations = x*(N//x)\n            if x_operations <= max_x:\n                if x_operations < min_x:\n                    min_x = x_operations\n            else:\n                return \"too many operations\"\n    return min_x\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    x = 0\n    for i in range(1,10):\n        if (N - i) == 0:\n            x = i\n            break\n\n    return str(x)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N // 6 - 1) if (N % 6 == 0) else str(N // 6) + \" \" + str(N // 36 - 1) + \" \" + str(N // 81 - 1)\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # This is the number of operations required to withdraw exactly N yen in total\n    # The number of operations is simply the number of denominations\n    # e.g. 6, 36, 81...\n    number_of_operations = 0\n\n    for i in range(1, N + 1):\n        number_of_operations += math.ceil(i / 6)\n\n    return str(number_of_operations)\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '1'\n    elif n == 1:\n        return '3'\n    else:\n        i = 1\n        while n > i:\n            i = i*10 + 1\n            if i > n:\n                return str(i)\n    return '1'\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list()\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                arr.append(i)\n                arr.append(j)\n                arr.append(i * j)\n                arr.append(i ** 2)\n                arr.append(i ** 3)\n                arr.append(j ** 2)\n                arr.append(j ** 3)\n                arr.append(i * j * 2)\n                arr.append(i ** 2 * 2)\n                arr.append(i ** 3 * 2)\n                arr.append(j ** 2 * 2)\n                arr.append(j ** 3 * 2)\n                arr.append(i * j * 2 * 2)\n                arr.append(i ** 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i * j * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(i ** 3 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)\n                arr.append(j ** 2 * 2 * 2"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(100000):\n        if i*6**2 == int(stdin):\n            return str(i+1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    S = S[::-1]\n    if S == T:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given: A string S and a string T.\n    Return: True if S equals T after rotation, otherwise False.\n    '''\n    # Your code goes here\n    # Write your code here\n    from collections import deque\n    # convert stdin to a list and store it in stack\n    stdin = deque(stdin)\n    # convert stdin to a list and store it in string\n    string = list(stdin)\n    # reverse the stack and store it in the other stack\n    stack = deque(reversed(string))\n    # print the string\n    print(\"\".join(stack))\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return (s[: len(s) - len(s[::-1])])\n    #return stdin.replace(stdin[::-1], '')\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count number of rotations\n    \"\"\"\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        if s == s[::-1]:\n            return \"Yes\"\n        return \"No\"\n    s = list(s)\n    for i in range(n // 2):\n        s.append(s.pop(0))\n        if s == s[::-1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    s_arr = stdin_list[0].split()\n    t_arr = stdin_list[1].split()\n\n    s = ''.join(s_arr)\n    t = ''.join(t_arr)\n\n    if s == t:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) == 1:\n        return \"Yes\"\n    for _ in range(1, len(S)):\n        if S[0:len(S)] == S[len(S)-1:0:-1]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s[::-1]\n    if s == stdin:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.strip()\n  if s == s[::-1]:\n    return \"Yes\"\n  else:\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    print(is_rotation(S, S[::-1]))\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.rstrip()\n    T = stdin.rstrip()\n    changes = 0\n    length_diff = abs(len(S) - len(T))\n    for i in range(length_diff + 1):\n        for j in range(len(T)):\n            if S[i + j]!= T[j]:\n                break\n        else:\n            changes += 1\n    return changes\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    i = 0\n    j = 0\n    count = 0\n    while i < len(S) and j < len(T):\n        if S[i] == T[j]:\n            i += 1\n            j += 1\n        else:\n            if j == 0:\n                j += 1\n            else:\n                count += 1\n                j = 0\n    return count + len(T) - len(S)\n    "
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = s[1]\n    if s[0]!= t:\n        return len(s[0]) - len(t) + 1\n    else:\n        return -1\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    st = stdin\n    for i in range(len(st)):\n        st = st.replace(st[i], \"\")\n    if st == s:\n        return \"-\"\n    else:\n        return len(s) - len(st)"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = stdin.split('\\n')\n    s = list(n1)\n    t = list(n2)\n    count = 0\n    if len(s) > len(t):\n        count += len(s) - len(t)\n    else:\n        count += len(t) - len(s)\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    S = stdin\n    min = 0\n    for i in range(0, len(S)):\n        if i == 0:\n            pass\n        else:\n            k = S[i]\n            n = len(k)\n            for j in range(0, len(S)):\n                if i+j <= len(S):\n                    if j == 0:\n                        for j1 in range(1, n):\n                            if S[i+j] == k[j1]:\n                                min += 1\n                    else:\n                        for j1 in range(0, n):\n                            if S[i+j] == k[j1]:\n                                min += 1\n        # print(S, k, min)\n    return min\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n    min_changes: int = 0\n    for i in range(len(t)):\n        # Make s bigger and find new characters in t\n        while t[:len(s) - i]!= s:\n            # For example, change the character in position 3 in s to match the character in position 6 in t\n            s = s[:len(s) - i] + s[len(s) - i + 1:]\n            min_changes += 1\n\n    return min_changes\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n\n    return str(min(len(s) - len(t), len(t) - len(s)))"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, k = map(int, stdin.split())\n    l = []\n    while k > 1:\n        if a % k == 0 and b % k == 0:\n            l.append(k)\n            a = a / k\n            b = b / k\n            k -= 1\n        else:\n            k -= 1\n    l.append(1)\n    l.sort(reverse=True)\n    return l[0]\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    ans = 0\n    for i in range(1, A + 1):\n        for j in range(1, B + 1):\n            if i % j == 0:\n                ans = max(ans, j)\n    return str(ans)\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n\n    def divisor(n: int) -> list:\n        res = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                res.append(i)\n\n        return res\n\n    return divisor(b)[k - 1] if b else a\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    div = 0\n    while div < K:\n        if A % div == 0 and B % div == 0:\n            return str(div)\n        div += 1\n    return str(-1)"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if (K == 1) or (K == 2 and (A % 2 == 0 and B % 2 == 0) or (A % 2 == 1 and B % 2 == 1)):\n        return '1'\n    if (K == 3) and (A % 2 == 1 or B % 2 == 1):\n        return '1'\n    if (A == B) and (K == 4):\n        return '1'\n    if K < 5 and (A == 2 and B == 4) or (A == 4 and B == 2):\n        return '1'\n    if K == 5:\n        return '2'\n    if K > 5:\n        return '1'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = stdin.split()\n    A = int(A)\n    B = int(B)\n    K = int(K)\n    # print(A,B,K)\n    # print(divisors(A,B,K))\n    divisor_list = divisors(A,B,K)\n    divisor_list = sorted(divisor_list, reverse=True)\n    # print(divisor_list)\n    print(divisor_list[K-1])\n    return\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A == 0 or B == 0 or K == 0:\n        return \"\"\n    arr = sorted([i for i in range(1, max(A, B)+1) if A % i == 0 and\n                  B % i == 0], reverse=True)\n    return str(arr[K-1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the K-th largest positive integer that divides both A and B.\n    \"\"\"\n    A, B, K = map(int, stdin.split())\n\n    # Sorting A and B\n    sorted_a = sorted(list(set(range(1, A + 1)) - set(range(A, 0, -1))), reverse=True)\n    sorted_b = sorted(list(set(range(1, B + 1)) - set(range(B, 0, -1))), reverse=True)\n\n    # Finding the K-th largest number\n    largest = K\n    for _ in range(K):\n        if sorted_a[largest] % sorted_b[largest] == 0:\n            return str(sorted_a[largest])\n        largest -= 1\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = stdin.split()\n    A, B = int(A), int(B)\n    K = int(K)\n    for i in range(K + 1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            return str(i)\n    return \"0\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return result\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    print(stdin_list)\n    x = int(stdin_list[0])\n    print(x)\n    return str(solution_one(x))\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    X = X // 500 * 1000\n    X += X // 100 * 500\n    X += X // 50 * 500\n    X += X // 10 * 500\n    X += X // 5 * 500\n    X += X // 1 * 500\n    X = X // 1000 * 1000\n    X += X // 500 * 500\n    X += X // 100 * 500\n    X += X // 50 * 500\n    X += X // 10 * 500\n    X += X // 5 * 500\n    X += X // 1 * 500\n    return str(X)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = {500, 100, 50, 10, 5, 1}\n    coins_val = {500, 100, 50, 10, 5, 1}\n    ans = 0\n    for coin in coins:\n        if coin <= X:\n            while X >= coin:\n                ans += 1\n                X = X - coin\n    return str(ans)"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gold = 0\n    for coin in range(n // 500):\n        gold += 500\n    for coin in range(n // 100):\n        gold += 100\n    for coin in range(n // 50):\n        gold += 50\n    for coin in range(n // 10):\n        gold += 10\n    for coin in range(n // 5):\n        gold += 5\n    gold += 1\n    return gold\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    yen_500 = 0\n    yen_100 = 0\n    yen_50 = 0\n    yen_10 = 0\n    yen_5 = 0\n    yen_1 = 0\n    while x > 0:\n        x = x // 500\n        yen_500 += x\n        x = x // 100\n        yen_100 += x\n        x = x // 50\n        yen_50 += x\n        x = x // 10\n        yen_10 += x\n        x = x // 5\n        yen_5 += x\n        x = x // 1\n        yen_1 += x\n    return str(yen_500 * 1000 + yen_100 * 100 + yen_50 * 50 + yen_10 * 10 + yen_5 * 5 + yen_1 * 1)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #print(n)\n\n    # get num of 500, 100, 50, 10, 5, 1 coins\n    i500 = 0\n    i100 = 0\n    i50 = 0\n    i10 = 0\n    i5 = 0\n    i1 = 0\n    while n >= 500:\n        i500 += 1\n        n -= 500\n    while n >= 100:\n        i100 += 1\n        n -= 100\n    while n >= 50:\n        i50 += 1\n        n -= 50\n    while n >= 10:\n        i10 += 1\n        n -= 10\n    while n >= 5:\n        i5 += 1\n        n -= 5\n    while n >= 1:\n        i1 += 1\n        n -= 1\n    #print(i500, i100, i50, i10, i5, i1)\n\n    total = i500 * 1000 + i100 * 100 + i50 * 50 + i10 * 10 + i5 * 5 + i1 * 1\n    #print(total)\n\n    return str(total)\n\nsolution(input())\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Receive X\n    x = int(stdin)\n\n    # Get the number of money to exchange\n    max_score = 0\n\n    for k in range(1, 7):\n        for i in range(500, 1, -1):\n            for j in range(5, 1, -1):\n                if i * k + j * k * 5 == x:\n                    # score = (i * k + j * k * 5) * (i * k) + (i * k * 5) * (i * k * 5) + (i * k * j) * (i * k * j) + (i * k * j * 5) * (i * k * j * 5) + (i * k * j * k) * (i * k * j * k) + (i * k * j * k * 5) * (i * k * j * k * 5) + (i * k * j * k * j) * (i * k * j * k * j) + (i * k * j * k * j * 5) * (i * k * j * k * j * 5) + (i * k * j * k * j * j) * (i * k * j * k * j * j) + (i * k * j * k * j * j * 5) * (i * k * j * k * j * j * 5) + (i * k * j * k * j * j * j * 5) * (i * k * j * k * j * j * j * 5) + (i * k * j * k * j * j * j * j * 5) * (i * k * j * k * j * j * j * j * 5) + (i * k * j * k * j * j * j * j * j * 5) * (i * k * j * k * j * j * j * j * j * 5) + (i * k * j * k * j * j * j * j * j * j * 5) * (i * k * j * k * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * (i * k * j * j * j * j * j * j * j * j * j * 5) + (i * k * j * j * j * j * j * j * j * j * j * j * 5) * ("
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = int(stdin[0])\n    #print(x)\n    s = 0\n    for i in range(x):\n        s += i*5000 + i*5 + i\n    print(s)\n    return s"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    X = int(stdin[0])\n    return str(max(x*1000 for x in range(0, X+1)))\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    points: List[int] = stdin.split()\n    points: List[int] = list(map(int, points))\n    points.sort()\n    min_points: int = 0\n    for i in range(n):\n        if i == 0:\n            min_points = (points[i] - points[0]) * (points[i] - points[0])\n        else:\n            min_points = min(min_points, (points[i] - points[0]) * (points[i] - points[0]))\n    return str(min_points)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    N = int(stdin.pop(0))\n    stamina = list(map(int, stdin))\n\n    min_stamina = float(\"inf\")\n    min_stamina_pair = None\n    for i in range(N):\n        # find the min stamina\n        if stamina[i] <= min_stamina:\n            min_stamina = stamina[i]\n            min_stamina_pair = i, stamina.index(min_stamina)\n\n    # find the min points\n    points = 0\n    for i in range(N):\n        if stamina[i] > stamina[min_stamina_pair[1]]:\n            points += (stamina[i] - stamina[min_stamina_pair[1]]) ** 2\n        else:\n            points += (stamina[min_stamina_pair[1]] - stamina[i]) ** 2\n    return points\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('2\\n1 4')\n    '5'\n    '''\n    n = int(stdin.split()[0])\n    coords = list(map(int, stdin.split()[1:]))\n    stamina_needed = 0\n    for i in range(n):\n        stamina_needed += (coords[i] - i) ** 2\n    return str(stamina_needed)"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    input_list = stdin.split()\n    x_list = []\n    for i in range(N):\n        x_list.append(int(input_list[i]))\n    return str(min_points(x_list))\n\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    n = int(stdin[0])\n    x = list(map(int, stdin[1].split()))\n    # print(n, x)\n    x.sort()\n    # print(x)\n\n    points = 0\n    for i in range(n):\n        points += abs(x[i] - i) ** 2\n\n    return str(points)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    points = list(map(int, stdin[1].split()))\n    min_points = 100000\n    for i in range(N):\n        min_points = min(min_points, (points[i] - 2) ** 2)\n    return str(min_points)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    coordinates = list(map(int, stdin.split()))\n    points = []\n    for coordinate in coordinates:\n        points.append(2**(coordinate) - 1)\n    return str(min(points))\n\n\nprint(solution(input()))\n\n\"\"\"\n\n##############################################################################################################"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    X_i = [int(i) for i in stdin[1].split(\" \")]\n    max_x = max(X_i)\n    min_x = min(X_i)\n    result = max_x - min_x\n    for i in range(2, len(stdin)):\n        X_i = [int(i) for i in stdin[i].split(\" \")]\n        result = min(result, max_x - min(X_i) + max(X_i) - min(X_i))\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = list(map(int, stdin.split()))\n    dp = [float('inf')] * N\n    dp[0] = 0\n    for i in range(1, N):\n        for j in range(i):\n            dp[i] = min(dp[i], max(dp[j] + (X[i] - X[j]) ** 2, 0))\n    return str(dp[N - 1])"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(\n        int(min(\n            map(int,\n                stdin.split('\\n')\n                )\n            )\n        )\n    )\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.strip().split()))\n    return str(solve(input[0], input[1]))\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    sockets = 0\n    while A >= B:\n        A -= B\n        sockets += 1\n    print(sockets)\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(len(find_sockets(stdin)))\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n, m)\n    if n > m:\n        diff = n - m\n        min_count = m\n    elif n < m:\n        diff = m - n\n        min_count = n\n    else:\n        diff = 0\n        min_count = n\n    \n    for i in range(1, min_count + 1):\n        print(i)\n    \n    return str(min_count)"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A <= 1 or A + 10 > 20:\n        return \"0\"\n    if A + 10 < 20:\n        return str(A + 10)\n    if B <= 1 or B + 10 > 20:\n        return \"0\"\n    if B + 10 < 20:\n        return str(B + 10)\n    s = A + 10\n    ans = 0\n    while True:\n        if s <= 20:\n            break\n        if s - 10 >= A:\n            ans += 1\n        s -= 10\n    while True:\n        if s <= 20:\n            break\n        if s - 10 >= B:\n            ans += 1\n        s -= 10\n    return str(ans)\nprint(solution(input()))"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    A, B = int(stdin[0]), int(stdin[1])\n\n    return str(math.ceil((A // 4) * (B // 4) * (B // 4)) // (A // 4))\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        return str(1)\n    elif A == B:\n        return str(0)\n    else:\n        if A >= B:\n            return str(A)\n        else:\n            return str(A + (B-A))\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    return str(min(A,B))\n    \n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min([a for a in range(1, A + 1) for b in range(1, B + 1)]))\n\n\nsolution(\"3 3\")\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(math.ceil(x / 2)) + \" power strips, each with \" + str(math.ceil(x / 4)) + \" empty sockets, extend the socket into \" + str(math.ceil(y / 2)) + \" empty sockets.\""
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    s = stdin[0]\n    t = stdin[1]\n    r = 0\n    i = 0\n    c = s.count(\"C\")\n    s = s.count(\"S\")\n    t = t.count(\"S\")\n    if c == s and c == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"CS\" and stdin[i+1] == \"S\" and stdin[i+2] == \"S\":\n            result = result + 1\n        if stdin[i] == \"CS\" and stdin[i+1] == \"C\" and stdin[i+2] == \"S\":\n            result = result + 1\n        if stdin[i] == \"CS\" and stdin[i+1] == \"S\" and stdin[i+2] == \"R\":\n            result = result + 1\n        if stdin[i] == \"CS\" and stdin[i+1] == \"R\" and stdin[i+2] == \"S\":\n            result = result + 1\n    return str(result)\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Input given by stdin.\n    S = stdin.splitlines()\n    # Task given by stdin.\n    T = stdin.splitlines()\n\n    # The number of days the forecast was correct\n    count = 0\n\n    for i in range(3):\n        # S[i] represents the forecast for the ith day\n        if S[i][0] == T[i][0]:\n            # Check if the first character is in S and T are both the same\n            if S[i][0] == T[i][0] == 'C':\n                # If so, increment the count\n                count += 1\n            elif S[i][0] == T[i][0] == 'R':\n                # If so, increment the count\n                count += 1\n\n    return f\"The number of days for which the forecast was correct is: {count}.\""
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a, b, c = s\n    a = a.replace('C', '0')\n    a = a.replace('S', '1')\n    a = a.replace('R', '2')\n    b = b.replace('C', '0')\n    b = b.replace('S', '1')\n    b = b.replace('R', '2')\n    c = c.replace('C', '0')\n    c = c.replace('S', '1')\n    c = c.replace('R', '2')\n    return (int(a, 2) + int(b, 2) + int(c, 2)) / 3"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    \n    if s[0] == \"S\":\n        if s[1] == \"C\" and s[2] == \"R\":\n            print(2)\n        else:\n            print(1)\n    else:\n        if s[1] == \"S\" and s[2] == \"C\":\n            print(2)\n        else:\n            print(1)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string_s = stdin[0]\n    string_t = stdin[1]\n    sunny = 0\n    cloudy = 0\n    rain = 0\n\n    for i in range(len(string_s)):\n        if string_s[i] == \"C\":\n            cloudy += 1\n        elif string_s[i] == \"R\":\n            rain += 1\n        else:\n            sunny += 1\n\n    if sunny >= cloudy and sunny >= rain and sunny >= rainy:\n        return \"1\"\n    elif cloudy >= sunny and cloudy >= rain and cloudy >= rainy:\n        return \"2\"\n    elif rainy >= sunny and rainy >= cloudy and rainy >= rain:\n        return \"3\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s, t = stdin.split()\n    if s == \"CSS\" and t == \"CSR\":\n        return \"2\"\n    if s == \"CSS\" and t == \"SSR\":\n        return \"0\"\n    if s == \"CSR\" and t == \"CSS\":\n        return \"0\"\n    if s == \"CSR\" and t == \"CSR\":\n        return \"1\"\n    if s == \"CSR\" and t == \"SSR\":\n        return \"0\"\n    if s == \"SSR\" and t == \"CSS\":\n        return \"0\"\n    if s == \"SSR\" and t == \"CSR\":\n        return \"0\"\n    if s == \"SSR\" and t == \"SSR\":\n        return \"1\""
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here.\n    S = stdin.split(\"\\n\")[0]\n    T = stdin.split(\"\\n\")[1]\n\n    correct = 0\n    for day in range(len(S)):\n        if S[day] == T[day]:\n            correct += 1\n    print(correct)\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.split(\"\\n\")[0]\n  t = stdin.split(\"\\n\")[1]\n  count = 0\n  for i in range(3):\n    if s[i] == t[i]:\n      count += 1\n  return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    count = 0\n    for i in range(3):\n        if s[i] == t[i]:\n            count += 1\n    return count\nsolution(input())\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(' ')\n    n = int(inp[0])\n    p = list(map(int, inp[1]))\n    p.sort()\n    p_2 = p[1]\n    p_4 = p[3]\n    res = 0\n    for i in range(1, n-2):\n        if p[i] > p_4:\n            break\n        if p[i] == p_2 or p[i] == p_4:\n            if p[i+1] > p[i-1]:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return str(p[1] - p[0])"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp_n = int(stdin.strip())\n    inp_arr = stdin.split(\" \")\n    inp_arr = [int(item) for item in inp_arr]\n    \n    cnt = 0\n    for i in range(3):\n        if inp_arr[i] < inp_arr[i + 1] and inp_arr[i] < inp_arr[i + 2]:\n            cnt += 1\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = sorted(list(map(int, stdin.split())))\n    count = 0\n    for i in range(len(p)):\n        if i == 0:\n            if p[i] == p[i + 1]:\n                count += 1\n        elif i == len(p) - 1:\n            if p[i - 1] == p[i]:\n                count += 1\n        else:\n            if p[i] > p[i - 1] and p[i] > p[i + 1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(2, n):\n        if p[i-1] < p[i] < p[i+1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(n - 2):\n        if p[i] < p[i + 1] < p[i + 2]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int,stdin.split()))\n    arr.sort()\n    count = 0\n    for i in range(1,n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            count+=1\n    print(count)\n    return"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    perm = list(map(int, stdin.split()))\n    p = sorted(perm)\n    ans = 0\n    for i in range(len(p)-2):\n        if p[i] == p[i+1] and p[i] == p[i+2]:\n            ans += 1\n    print(ans)\n    return\nsolution(input())\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    primes = data[1:]\n    primes = sorted(primes)\n\n    res = 0\n    for i in range(0, n):\n        if i == 0:\n            # \u5f53i=0 \u65f6\uff0c\u628ai \u7684\u503c\u8d4b\u503c\u7ed9res\n            res = 1\n        else:\n            # \u5982\u679c i \u4e0d\u662f 0\uff0c\u90a3\u4e48\u5f53 i=1 \u65f6\uff0c\u628a i \u7684\u503c\u8d4b\u503c\u7ed9res\n            if res == 0:\n                continue\n            # \u5982\u679c\u5f53 i=1 \u65f6\uff0c\u627e\u5230\u6307\u5b9a\u7684primes\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6570\n            # \u4e0b\u4e00\u4e2a\u6570\u662fdata[i+1]\n            # \u5982\u679ci=0\uff0c\u90a3\u4e48\u8fd4\u56de0\n            if primes[i] == primes[i + 1]:\n                continue\n            # \u5982\u679c\u5f53\u524d\u6570\u5c0f\u4e8e\u4e0b\u4e00\u4e2a\u6570\uff0c\u5219\u7ee7\u7eed\u5f80\u4e0b\u627e\n            # \u4e0b\u4e00\u4e2a\u6570\u662fdata[i+1]\n            # \u5982\u679c\u5f53\u524d\u6570\u5927\u4e8e\u4e0b\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u7ee7\u7eed\u5f80\u4e0b\u627e\n            # \u4e0b\u4e00\u4e2a\u6570\u662fdata[i+2]\n            if primes[i] > primes[i + 1] and primes[i] < primes[i + 2]:\n                res += 1\n\n    return res"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = stdin.split()[1]\n    p = list(map(int, p))\n    p.sort()\n    p = tuple(p)\n    count = 0\n    for i in range(len(p)-1):\n        if p[i+1] == p[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = list(map(float, stdin.split()))\n    if Y < 0:\n        X = -X\n        Y = -Y\n    return \"{:.4f}\".format(X * X + Y * Y)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = []\n    y = []\n    for i in range(N):\n        xi, yi = stdin.split()\n        x.append(float(xi))\n        y.append(float(yi))\n\n    xs = sorted(x)\n    ys = sorted(y)\n    min_x = min(xs)\n    max_x = max(xs)\n    min_y = min(ys)\n    max_y = max(ys)\n\n    def estimate(x, y):\n        # x_c = (x1 + x2) / 2\n        # y_c = (y1 + y2) / 2\n        # distance = (x1 - x_c) * (x1 - x_c) + (y1 - y_c) * (y1 - y_c)\n        # x_min = x_c - distance / 2\n        # x_max = x_c + distance / 2\n        # y_min = y_c - distance / 2\n        # y_max = y_c + distance / 2\n        # print(x_min, x_max, y_min, y_max)\n        # return (x_max - x_min) * (y_max - y_min)\n\n        # x_min = min(xs)\n        # x_max = max(xs)\n        # y_min = min(ys)\n        # y_max = max(ys)\n        # distance_x = abs(x - x_min)\n        # distance_y = abs(y - y_min)\n        # return distance_x * distance_y\n\n        return (x - min_x) * (x - min_x) + (y - min_y) * (y - min_y)\n\n    ans = min_x\n    for i in range(N):\n        for j in range(i + 1, N):\n            ans = min(ans, estimate(x[i], y[i]) + estimate(x[j], y[j]))\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"0.00\"\n    result = float(\"inf\")\n    for i in range(N):\n        a = float(stdin.split()[i*2])\n        b = float(stdin.split()[i*2+1])\n        result = min(result, abs(a**2 - b**2))\n    return f\"{result:.10f}\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(int(stdin.strip())):\n        points.append([float(s) for s in stdin.strip().split(\"\\n\")[i].split()])\n    points = sorted(points)\n    cur_x = float(points[0][0])\n    cur_y = float(points[0][1])\n    min_x = cur_x\n    min_y = cur_y\n    max_x = cur_x\n    max_y = cur_y\n    for point in points:\n        cur_x = point[0]\n        cur_y = point[1]\n        if cur_x > max_x:\n            max_x = cur_x\n        if cur_x < min_x:\n            min_x = cur_x\n        if cur_y > max_y:\n            max_y = cur_y\n        if cur_y < min_y:\n            min_y = cur_y\n\n    for i in range(1, len(points)):\n        if points[i][0] > max_x:\n            max_x = points[i][0]\n        if points[i][1] > max_y:\n            max_y = points[i][1]\n        if points[i][0] < min_x:\n            min_x = points[i][0]\n        if points[i][1] < min_y:\n            min_y = points[i][1]\n    ans = (max_x - min_x) * (max_y - min_y)\n    return str(ans)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        points.append([float(x) for x in stdin.split()])\n    theta = 0\n    min_length = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            a = ((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) ** 0.5\n            if a < min_length:\n                min_length = a\n                theta = (points[i][1] - points[j][1]) / a\n    return theta"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_array = stdin.split(\"\\n\")\n    x = float(stdin_array[0])\n    y = float(stdin_array[1])\n    points = []\n    for i in range(2, len(stdin_array)):\n        points.append([float(x), float(y)])\n        x, y = float(x) + float(stdin_array[i].split()[0]), float(y) + float(stdin_array[i].split()[1])\n    return round(math.degrees(math.atan2(y, x)), 2)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points.append([float(x) for x in line.split()])\n    points.sort(key=lambda x: x[0])\n    return str(points[-1][1] - points[0][1])\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = stdin.strip().split(\"\\n\")\n    points = []\n    for i in range(n):\n        x, y = [float(c) for c in data[i].split(\" \")]\n        points.append((x, y))\n    points = sorted(points, key=lambda p: p[0])\n    points = sorted(points, key=lambda p: p[1])\n    # print(points)\n    # print(points[0][0], points[-1][0])\n    # print(points[0][1], points[-1][1])\n    # print(points[0][0], points[-1][1])\n    x_min = points[0][0]\n    x_max = points[-1][0]\n    y_min = points[0][1]\n    y_max = points[-1][1]\n    # print(x_min, x_max, y_min, y_max)\n    # print((x_max - x_min) * (y_max - y_min))\n    # print(n)\n    # print((x_max - x_min) * (y_max - y_min) / n)\n    res = (x_max - x_min) * (y_max - y_min) / n\n    # print(res)\n    # print(x_min, x_max, y_min, y_max)\n    return f\"{res:.10f}\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points.append([float(x) for x in line.split()])\n    \n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n\n    min_x = points[0][0]\n    min_y = points[0][1]\n    max_x = points[0][0]\n    max_y = points[0][1]\n\n    for p in points[1:]:\n        min_x = min(min_x, p[0])\n        min_y = min(min_y, p[1])\n        max_x = max(max_x, p[0])\n        max_y = max(max_y, p[1])\n\n    \n    return str(abs(min_x) + abs(min_y) + abs(max_x) + abs(max_y))\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(float, stdin.split()))\n    points.sort()\n    # if len(points) < 3:\n    #     return 'error'\n    # num_points = len(points)\n    # sum_x = sum(p[0] for p in points)\n    # sum_y = sum(p[1] for p in points)\n    # mean_x = sum_x / num_points\n    # mean_y = sum_y / num_points\n    # n = len(points)\n    # sum_x_squared = 0\n    # sum_y_squared = 0\n    # sum_xy = 0\n    # for i in range(n):\n    #     sum_x_squared += (points[i][0] - mean_x) ** 2\n    #     sum_y_squared += (points[i][1] - mean_y) ** 2\n    #     sum_xy += (points[i][0] - mean_x) * (points[i][1] - mean_y)\n    #\n    # n = len(points)\n    # sum_x_squared = sum_x_squared / n\n    # sum_y_squared = sum_y_squared / n\n    # r = (sum_xy - (sum_x * sum_y) / n) / (sum_x_squared - (sum_x ** 2) / n) ** (1 / 2)\n    #\n    # n = len(points)\n    # sum_x_squared = sum(p[0] ** 2 for p in points)\n    # sum_y_squared = sum(p[1] ** 2 for p in points)\n    # sum_xy = sum(p[0] * p[1] for p in points)\n    # denominator = n * sum_x_squared - (sum_x) ** 2\n    # x_mean = sum_x / n\n    # y_mean = sum_y / n\n    # a = (n * sum_xy - (sum_x * sum_y)) / denominator\n    # b = (sum_x_squared * sum_y - sum_x * sum_xy) / denominator\n    # y = a * x_mean + b\n    # return round(y, 10)\n\n    sum_x = sum(p[0] for p in points)\n    sum_y = sum(p[1] for p in points)\n    sum_x_squared = sum(p[0] ** 2 for p in points)\n    sum_y_squared = sum(p[1] ** 2 for p in points)\n    sum_xy = sum(p[0] * p[1] for p in points)\n    denominator = sum_x_squared - sum_x ** 2\n    x_mean = sum_x / n\n    y_mean = sum_y / n\n    a = (sum_xy - (sum_x * sum_y) / n) / denominator\n    b = (sum_x_squared * sum_y - sum_x * sum_xy) / denominator\n    y = a * x_mean + b\n    return round(y, 10)"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min_days(**parse_input(stdin)))\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes stdin as input and returns the output.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = sorted([int(x) for x in stdin.split()])\n    return str(n - max(a) + 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    coffee_count, course_count = map(int, stdin.split())\n    coffees_and_cups = list(map(int, stdin.split()))\n    coffees = coffees_and_cups[:coffee_count]\n    cups = coffees_and_cups[coffee_count:]\n\n    best_size = len(coffees)\n    best_size = 1\n    while best_size <= course_count:\n        for i in range(0, len(coffees) - best_size + 1):\n            for j in range(i + best_size, len(coffees)):\n                for k in range(j + best_size, len(coffees)):\n                    amount_of_coffee = 0\n                    for l in range(len(coffees)):\n                        if coffees[l]!= 0:\n                            amount_of_coffee += coffees[l] * cups[l]\n                    if amount_of_coffee >= course_count:\n                        return str(i + 1)\n        best_size += 1\n\n    return -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def drinks(m, a):\n        if a >= m:\n            return 0\n        if a < 0:\n            return -1\n        return 1 + drinks(max(0, a - 1), m)\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(drinks(m, a[0]))\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = deque(a)\n    days = 0\n    while a:\n        if a[0] >= m:\n            break\n        cups = deque(a)\n        a.popleft()\n        for _ in range(m):\n            day = cups.popleft()\n            day -= 1\n            if day >= 0:\n                cups.append(day)\n        days += 1\n    return days if a else -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Get cups of coffee that Polycarp needs to drink\n    cups = []\n    for i in range(n):\n        cups.append(a[i])\n\n    # Remove cups of coffee from the cups list that Polycarp can't drink\n    i = 1\n    while i < n and a[i] <= min(cups):\n        cups.remove(a[i])\n        i += 1\n\n    # Try to write coursework on all cups of coffee until Polycarp can't write it anymore\n    i = 0\n    while i < m and len(cups) > 1:\n        cups.sort(reverse=True)\n\n        if cups[0] <= len(cups) - 1:\n            cups.remove(cups[0])\n        i += 1\n\n    # If Polycarp can't write coursework, the answer is impossible\n    if len(cups) == 1:\n        return \"impossible\"\n    else:\n        return f\"{i}\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, m: int, a: List[int]) -> int:\n        dp = {}\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1]\n            for j in range(1, min(i, m) + 1):\n                dp[i] += max(0, dp[i - j] - 1)\n                dp[i] = min(dp[i], dp[i - j] + a[i - 1])\n        return dp[n]\n    return str(f(*map(int, stdin.split())))"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    cups = list(map(int, stdin.strip().split()))\n    # k = max(cups)\n    k = m\n    if k == 0:\n        return '-1'\n    if k == 1:\n        return '1'\n    if k == n:\n        return str(n)\n    cups = sorted(cups)\n    a = {}\n    for i in range(n):\n        a[cups[i]] = i\n    def cup(k):\n        if k not in a:\n            return -1\n        else:\n            return a[k]\n    for i in range(k):\n        cups.append(cups[0])\n        del cups[0]\n    i = k\n    while i < m:\n        k = max(cups)\n        if cup(k)!= -1:\n            cups.append(k)\n            del cups[cup(k)]\n        else:\n            return str(i + 1)\n        i += 1\n    return str(i + 1)\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(m):\n        if max(c) <= 0:\n            break\n        cnt += min(c[i], m - i)\n    if cnt >= m:\n        return '1'\n    return -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups = deque(cups)\n    visited = {}\n\n    for i in range(n):\n        visited[cups[i]] = i\n\n    for i in range(n):\n        cups.rotate(-1)\n\n    n -= 1\n    cups = deque(cups)\n\n    total = 0\n    for i in range(m):\n        if i == 0:\n            cups.rotate(-1)\n            current = cups[0]\n            total += current\n            cups.rotate(-1)\n            if current in visited:\n                idx = visited[current]\n                idx = idx + 1 if idx < n else 0\n                visited[current] = idx\n            else:\n                visited[current] = 0\n            if i == m - 1:\n                break\n        else:\n            cups.rotate(-1)\n            current = cups[0]\n            total += current\n            cups.rotate(-1)\n            if current in visited:\n                idx = visited[current]\n                idx = idx + 1 if idx < n else 0\n                visited[current] = idx\n            else:\n                visited[current] = 0\n\n    return total\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s = list(set(s))\n    ans = set()\n    for i in range(n):\n        if i+k <= len(s):\n            ans.add(s[i:i+k])\n        if k+i <= len(s):\n            ans.add(s[i:i+k])\n            ans.add(s[:i]+s[k:])\n        if k+i <= len(s):\n            ans.add(s[:i]+s[k:])\n            ans.add(s[:i]+s[i:k+i])\n        if k+i <= len(s):\n            ans.add(s[:i]+s[i:k+i])\n    return str(max(ans, key=len))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    if k > 2*n:\n        return \" \".join(map(str, range(1, n+1)))\n    else:\n        c = {}\n        for i in range(n):\n            c[s[i]] = c.get(s[i], 0) + 1\n        a = []\n        for i in range(n):\n            if k == 0:\n                break\n            if c[s[i]] == 1:\n                a.append(s[i])\n                k -= 1\n            else:\n                c[s[i]] -= 1\n        return \" \".join(map(str, a))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # print(n,k,arr)\n    _dict = {}\n    ans = []\n    for i in range(0, n):\n        if arr[i] not in _dict:\n            _dict[arr[i]] = 1\n        else:\n            _dict[arr[i]] += 1\n    print(sorted(_dict.keys(),reverse=True))\n    # print(_dict)\n    for i in range(k):\n        if len(ans) == 0:\n            ans.append(sorted(_dict.keys(),reverse=True)[i])\n        else:\n            for i in range(0,len(ans)):\n                if _dict[ans[i]] == 1:\n                    ans.append(sorted(_dict.keys(),reverse=True)[i])\n                    break\n                else:\n                    _dict[sorted(_dict.keys(),reverse=True)[i]] -= 1\n    return \" \".join([str(x) for x in ans])\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n\n    def can_cut(num):\n        for i in range(len(nums)):\n            if nums[i]!= num:\n                return False\n            else:\n                return True\n\n    def cut(num):\n        for i in range(len(nums)):\n            if can_cut(nums[i]):\n                nums.remove(nums[i])\n                return nums\n\n    print(cut(k))\n\n    return \" \".join(map(str, nums[0:k]))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    s = list(map(int, stdin.split()[1:]))\n    s = sorted(s)\n\n    def permutations(arr):\n        if len(arr) == 1:\n            return arr\n        l = []\n        for i in range(len(arr)):\n            m = arr.pop(i)\n            p = permutations(arr)\n            arr.insert(i, m)\n            l.append(p)\n        return l\n\n    ans = []\n    for i in range(k + 1):\n        for j in permutations(s):\n            if i >= len(j):\n                break\n            if i == 0:\n                ans.append(j)\n            else:\n                ans.append(j)\n                for jj in j:\n                    if jj not in j[i:]:\n                        break\n                else:\n                    continue\n                break\n    print(len(ans))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    n, k = s[0], s[1]\n    if n < k:\n        return \"1 1\"\n\n    s.sort()\n    res = []\n    count = 1\n    while count < k:\n        res.append(count)\n        count += 1\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] + count == s[i - 1]:\n                s[i] = -1\n                del s[i - 1]\n                break\n        if not s:\n            return \"0 0\"\n\n    return str(res[0]) + \" \" + str(res[-1])\n\n\nsolution(input())\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    if n <= k:\n        return ''.join(map(str, s))\n    for i in range(n):\n        if s[i] == 1:\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == 1:\n            break\n    if i == n - 1:\n        return ''.join(map(str, s))\n    t = list(map(str, s[i + 1:]))\n    for j in range(n - i):\n        t.sort()\n        if t == list(map(str, s[i:i + i + 1])):\n            return ''.join(map(str, s[:i] + t))\n    return ''.join(map(str, s))\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # strip newline from stdin\n    stdin = stdin.strip()\n\n    n, m = map(int, stdin.split())\n\n    # build the array\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    # build the graph\n    g = build_graph(n, m, a)\n\n    # breadth first search to compute distances from the start to all other vertices\n    # also, for each vertex, we keep track of the distance to the start\n    dists = build_distance_table(n, m, g)\n\n    # compute the solution\n    return compute_min_k(n, m, g, dists)\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    min_diff = -1\n    max_diff = n * m\n    def test(seq):\n        for i in range(1, len(seq)):\n            if abs(seq[i] - seq[i - 1]) > min_diff:\n                return False\n        return True\n    while max_diff > 0:\n        mid = (max_diff + min_diff) // 2\n        if test(s) and mid > min_diff:\n            min_diff = mid\n        else:\n            max_diff = mid - 1\n    return min_diff\n    \n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [[int(x) for x in stdin.split(\" \")[i * m:(i + 1) * m]] for i in range(n)]\n    return max(solution(row) for row in a)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mat = [list(map(int, input().split())) for _ in range(n)]\n    print(solution_brute(n, m, mat))\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n    return str(solution_dp(n, m, a))\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    m_matrix = []\n    for i in range(n):\n        m_matrix.append(stdin[i + 2].split())\n    rows = len(m_matrix)\n\n    def array_to_string(arr):\n        return''.join([str(x) for x in arr])\n\n    def is_acceptable(curr_string, k):\n        for i in range(len(curr_string) - 1):\n            if abs(int(curr_string[i]) - int(curr_string[i + 1])) > k:\n                return False\n        return True\n\n    max_k = 0\n    for row in range(rows - 1):\n        row_string = array_to_string(m_matrix[row])\n        for col in range(row + 1, rows):\n            col_string = array_to_string(m_matrix[col])\n            k = abs(int(row_string) - int(col_string))\n            if is_acceptable(row_string, k):\n                max_k = max(max_k, k)\n    return max_k\n\n\nprint(solution(\"\"\"\n4 2\n9 9\n10 8\n5 3\n4 3\n\"\"\"))"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = list(map(int, stdin.split()))\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, stdin.split())))\n\nans = 0\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_k = 0\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            diff = abs(a[i] - a[j])\n            if diff > max_k:\n                max_k = diff\n    return str(max_k)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.split()\n    for i in s:\n        if 'x' in i:\n            return 0\n    return len(s)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letters = 'x'\n    text = stdin.lower()\n    print(f'String: {text}')\n    if 'x' in text:\n        return 0\n    print(f'Include \"x\" in text: {len(text.find(\"x\"))}')\n    print(f'Remove $x$ from text: {text.replace(\"x\", \"\")}')\n    return len(text.replace(\"x\", \"\"))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    # counter_x = 0\n    for c in name:\n        if c == \"x\":\n            counter_x += 1\n    if counter_x == 3:\n        return 0\n    return len(name) - counter_x"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    string_size = len(stdin)\n    remove_count = 0\n\n    for index in range(string_size):\n        if stdin[index] == 'x':\n            if index < string_size - 1 and stdin[index + 1] == 'x':\n                remove_count += 1\n                # remove_count += 1\n            else:\n                # remove_count += 1\n                pass\n\n    return remove_count\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, filename = int(stdin.split('\\n')[0]), stdin.split('\\n')[1]\n    \n    if any(i in filename for i in 'x'):\n        counter, r = 0, 1\n        for i in filename:\n            if i!= r:\n                counter += 1\n            r = r * 10\n        return max(counter, n - counter)\n    else:\n        return n\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    for i in range(len(string)):\n        if \"x\" in string[i:]:\n            string = string.replace(string[i:],string[i+1:])\n            return string\n    return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.split(\"\\n\")[1]\n    i = 0\n    while i < len(string):\n        if string[i] == 'x':\n            string = string[:i] + string[i + 1:]\n            i = 0\n        else:\n            i += 1\n    if string.count('x') < 3:\n        return '0'\n    else:\n        return str(len(string) - string.count('x'))\n\nstdin = \"3\\nxxxiii\"\nprint(solution(stdin))\n\nstdin = \"5\\nxxoxx\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\" if len(set(stdin)) == 1 else min(map(lambda x: len(stdin.replace(x, \"\")), (\"x\" * 3, \"x\" * 2, \"x\" * 1)))\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    file_name = stdin.split()[1]\n    x_flag = False\n    for i in range(n):\n        if file_name[i] == 'x':\n            x_flag = True\n    if x_flag:\n        return '0'\n    else:\n        return n - file_name.count('x')\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    a = 3 * r**2\n    return str(a)\n    \n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(3*a**2)\nsolution(input())"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    r = int(input_data)\n    area = 3 * (r ** 2)\n    return area\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return (int(stdin))"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3*r*r)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return f\"{3 * (r ** 2)}\""
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_circular(a):\n        return a * a == 1\n\n    r = int(stdin)\n    if not is_circular(r):\n        raise ValueError\n\n    return 3 * r * (r + 1) * (r - 1) / 2\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(calculate_dodecagon_area(int(stdin)))\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    r = int(stdin)\n    return str(3 * (r**2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(calc(stdin))\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, W = stdin.split(' ')\n    S, W = int(S), int(W)\n\n    if W >= S:\n        return 'unsafe'\n    else:\n        return'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([4,5])\n    unsafe\n    >>> solution([5,4])\n    safe\n    >>> solution([3,4])\n    unsafe\n    \"\"\"\n    S,W = map(int, stdin)\n    if (W >= S):\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    s = int(stdin[0])\n    w = int(stdin[1])\n    if s > w:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n    # Write your code here"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, W = stdin.split()\n    S, W = int(S), int(W)\n\n    if W > S:\n        return 'unsafe'\n    else:\n        return'safe'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.strip().split()))\n    if s[1] <= s[0]:\n        return 'unsafe'\n    else:\n        return'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, W = stdin.split(' ')\n    S, W = int(S), int(W)\n    if S <= W:\n        return 'unsafe'\n    return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, W = (int(x) for x in stdin.split())\n    if W > S:\n        return 'unsafe'\n    else:\n        return'safe'\n\"\"\"\n\n\"\"\"\nRuntime: 32 ms, faster than 96.90% of Python3 online submissions for Super Egg Drop.\nMemory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for Super Egg Drop.\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.split())\n    if w > s:\n        return \"unsafe\"\n    return \"safe\"\n\nprint(solution(input()))"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (s, w) = stdin.split()\n    if int(w) > int(s):\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\nsolution(\"4 5\")"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    return str(round((ab * bc) / 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return str(int(a) * int(b) * int(c) / 2)\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = (int(x) for x in stdin.split())\n    return str(int(AB * BC / 2) + int(CA * CA / 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    print(a * b * (c / 2))"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = stdin.split()\n    AB = int(AB)\n    BC = int(BC)\n    CA = int(CA)\n\n    #Triangle ABC\n    triangle_area = (AB*CA)/2\n    print(triangle_area)\n    return triangle_area\n\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = list(map(int, stdin.split(\" \")))\n    return str(round(float(AB * BC) / 2, 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return str(round(sqrt(pow(a, 2) + pow(b, 2) - 2 * a * b) * 2))\n\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    s = (a * c) / 2\n    p = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return str(int(area))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = stdin\n    return str(int((AB ** 2 + BC ** 2 - CA ** 2) / 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    return str(int(round((AB * BC) / 2, 0)))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(A * min(B, C))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, range(1, int(stdin.split()[1]) + 1)))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read a numerical input\n    Return a string representing the answer.\n    \"\"\"\n    A, B, C = map(int, stdin.split())\n    return str(min(C, A // B))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = stdin.split()\n    return str(int(A) // int(C) + int(B) // int(C))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(min(C, (A-1) // (B-1) + 1))\n    # A = 10\n    # B = 2\n    # C = 3\n    #\n    # if A > B:\n    #     print(min(C, (A-1) // (B-1) + 1))\n    # else:\n    #     print(min(C, (B-1) // (A-1) + 1))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    total_times = 0\n    num_times = 0\n    while total_times < c:\n        total_times = a + b + c\n        num_times += 1\n    print(num_times)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    res = c\n    while a:\n        res += a\n        a -= b\n    print(res)\n    return"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.strip().split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    if A >= 8 and B <= C:\n        return '1'\n    else:\n        return str(C // B)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B, C = map(int, stdin.split())\n\n    return str(min(A, B, C))"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(i) for i in stdin.split())\n    return str(A * B)\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(A * B)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    a = int(x[0])\n    b = int(x[1])\n    print(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(' ')\n    A = int(nums[0])\n    B = int(nums[1])\n    return str(A * B)\n\nstdin = input()\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    print(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B= map(int, stdin.split())\n    return str(A*B)\n\nimport sys\nimport io\n\nsys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding = 'utf-8')\nsys.stdin = open('input.txt', 'r')\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nt= int(input())\n\nfor _ in range(t):\n    print(solution(input()))\n    "
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, map(int, stdin.split())))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(int(stdin.split()[0])*int(stdin.split()[1])))"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(a) * int(b))\n    #return stdin\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    for i in range(1, T+1):\n        if i % A == 0:\n            print(f\"{A} {i}\")\n        elif i % A == 2:\n            print(f\"{A} {A} {i}\")\n        elif i % A == 3:\n            print(f\"{A} {A} {A} {i}\")\n        else:\n            print(f\"{A} {i}\")\n\n    return"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a, b, t = map(int, lines[0].split())\n    c = b\n    for i in range(1, t + 1):\n        c = c * b\n    return str(c)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    if T == 0:\n        return str(0)\n    else:\n        sec_after_activation = T + 0.5\n        biscuits_produced = 0\n        while sec_after_activation > 0:\n            biscuits_produced += 1\n            sec_after_activation -= A\n        return str(biscuits_produced)\n    \"\"\"\n    return\n\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3 5 7\n   ... ''')\n    '10'\n    '''\n    input_A, input_B, input_T = map(int, stdin.split())\n    time = 0\n\n    while time <= input_T:\n        if time % input_A == 0:\n            print(int(input_B))\n        time += 1\n    return str(int(input_B) + (time - input_T) * input_B)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a,b,t=map(int,stdin.split())\n    cnt=0\n    for i in range(1,t+1):\n        if i%a==0:\n            cnt+=b\n        elif i%a!=0:\n            cnt+=b\n            if i>=t:\n                break\n            cnt+=b\n    return str(cnt)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(A * (T + 0.5) + (B * (T + 0.5) + (A * (T + 0.5)) // 2) * T)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using the value of A, B, T as integers,\n    find the total number of biscuits produced within T + 0.5 seconds after activation.\n    \"\"\"\n    A, B, T = map(int, stdin.split())\n    t = 0\n    total = 0\n    while t < T:\n        total += 1\n        t += A\n    total += 1\n    return total\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(int((T + 0.5) // A) + int((T + 0.5) // A * 2) + int((T + 0.5) // A * 3) + int((T + 0.5) // A * 4))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    time = 0\n    biscuits = 0\n    while time <= T:\n        if time % A == 0:\n            biscuits += 1\n            print(biscuits)\n        else:\n            pass\n        time += 1\n    return str(biscuits)\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = stdin.split()\n    a, b = int(a), int(b)\n    k = int(k)\n    for c in range(a, b+1):\n        if (c % k) == 0:\n            print(\"OK\")\n            break\n    else:\n        print(\"NG\")"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = int(stdin.split()[1])\n    a = int(str(a)[-1])\n    b = int(str(b)[-1])\n    \n    if a % k == 0 and b % k == 0:\n        if a > b:\n            print('OK')\n        else:\n            print('NG')\n    else:\n        if a > b:\n            print('OK')\n        else:\n            print('NG')\n    return 'OK' if a % k == 0 and b % k == 0 else 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"OK\" if (A % 7 == 0 and B % 7 == 0) else \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[1])\n    B = int(stdin.split()[2])\n    K = int(stdin.split()[3])\n    if (K - A) % (K - B) == 0:\n        print('OK')\n    else:\n        print('NG')\n    return\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    if ((a + b) % 7) == 0:\n        print(\"OK\")\n    else:\n        print(\"NG\")\nsolution(input())\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    multiples = set()\n    for num in range(a, b + 1):\n        if num % k == 0:\n            multiples.add(num)\n    if len(multiples) > 0:\n        print('OK')\n    else:\n        print('NG')\n\nsolution(input())\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    # Do not change this return statement\n    return 'OK'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    a, b = map(int, stdin.strip().split())\n\n    for n in range(a, b + 1, k):\n        if n % k == 0:\n            print('OK')\n            return\n    print('NG')\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if ((a % k == 0) and (b % k == 0)) or ((a % k == 0) and (b % k == 1)) or ((a % k == 1) and (b % k == 0)):\n        return \"OK\"\n    else:\n        return \"NG\"\n\nprint(solution(input()))"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    for x in range(A,B):\n        if x%7==0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n\nsolution(input())\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = list(map(int, stdin.split()))\n    return str(2*X / (T * 3))"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, x = [int(x) for x in stdin.split()]\n    t1, t2 = divmod(x*t, 1)\n    t1 = int(t1*t2)\n    return str(t1)"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, x = (int(i) for i in stdin.split())\n    return \"{0:.3f}\".format((x*(t-1)+(t-1)*x)/t)\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t, x = list(map(int, lines[0].split()))\n    return str(round(((x*t*3) / (x*t + t*3)) * 3600))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, X = list(map(int, stdin.strip().split()))\n    return str(round((3*X) / (T*3)))"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your code will be run against a code template that generates the expected output.\n    '''\n    t, x = map(int, stdin.split())\n    return f'{(x*t*4)/2:.3f}'\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(X*2/T)\n\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.strip().split())\n    return str(round((x * 3) / (t * 3) - t))"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    time_passed_world_b, time_per_world_a = (int(s) for s in stdin.split())\n    time_passed_world_a = (time_passed_world_b // time_per_world_a) * time_per_world_a\n    return str(time_passed_world_a)\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def hours(t: int, x: int) -> int:\n        return x * t\n\n    # t = stdin.split()[0]\n    # x = stdin.split()[1]\n    # t = int(t)\n    # x = int(x)\n\n    t = int(input())\n    x = int(input())\n    t_hours = hours(t, x)\n    return f\"{t_hours}\""
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    return str(int(float(C) - float(B)) / float(A) * 1000)"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a <= b:\n        print(c)\n    elif c <= a:\n        print(a)\n    else:\n        print((a + b) // 2)"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(min(A, C) - (min(A, B) - min(A, C)))"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    Bottle1 = A\n    Bottle2 = A + (Bottle2 - B)\n\n    if Bottle2 >= C:\n        Bottle2 = C\n\n    Bottle1 = Bottle2 - B\n    return str(Bottle1)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return '1' if (c-b) >= 0 else str(c-b)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = [int(x) for x in stdin.split()]\n    return str(max(0,min(B-C,C)-min(B-A,C)))"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    bottle_1, bottle_2 = stdin.split(' ')\n    bottle_2 = int(bottle_2)\n    bottle_1 = int(bottle_1)\n    return f'{bottle_2-bottle_1}'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c) - max(a, b, c))"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    remaining_water = b - c\n    bottle_1_contains_water = min(a, remaining_water)\n    bottle_2_contains_water = remaining_water - bottle_1_contains_water\n    print(bottle_2_contains_water)\n    return \"Water in Bottle 2: {} milliliters\".format(bottle_2_contains_water)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print(a, b, c)\n    if a <= b <= c:\n        return b - a\n    if c <= b <= a:\n        return b - c\n    if c <= a <= b:\n        return a - c\n    return -1\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin.split()[1]) - int(stdin.split()[2])))"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split()\n    q = stdin.split()\n    p = list(map(int, p))\n    q = list(map(int, q))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] > p[j]:\n                ans = max(ans, q[i] - q[j])\n    return str(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return '0'\n    P = list(map(int, stdin.strip().split()))\n    Q = list(map(int, stdin.strip().split()))\n    P.sort()\n    Q.sort()\n    n = len(P)\n    min_a = min(P)\n    min_b = min(Q)\n    ans = abs(min_a - min_b)\n    if ans == 0:\n        return '0'\n    #print('P is {}'.format(P))\n    #print('Q is {}'.format(Q))\n    for i in range(n):\n        if P[i] > Q[i]:\n            #print('a is {}'.format(P[i]))\n            #print('b is {}'.format(Q[i]))\n            ans = max(ans, abs(P[i] - Q[i]))\n        elif P[i] < Q[i]:\n            #print('a is {}'.format(P[i]))\n            #print('b is {}'.format(Q[i]))\n            ans = max(ans, abs(P[i] - Q[i]))\n    return str(ans)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    return str(abs(P-Q))"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    Q = list(map(int, stdin.split()))\n    print(P)\n    print(Q)\n    return \"null\""
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: list = list(map(int, stdin.split()[1]))\n    b: list = list(map(int, stdin.split()[2]))\n    sorted_a = a.copy()\n    sorted_b = b.copy()\n    sorted_a.sort()\n    sorted_b.sort()\n    return str(abs(sorted_a[0] - sorted_b[0]))"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    P = stdin.split()[1]\n    Q = stdin.split()[2]\n    P = list(map(lambda x: int(x) - 1, P.split()))\n    Q = list(map(lambda x: int(x) - 1, Q.split()))\n    P.sort()\n    Q.sort()\n    # print(P)\n    # print(Q)\n    # return 0\n    ans = 0\n    for i in range(n):\n        if P[i] < Q[i]:\n            ans += 1\n    print(ans)\n    return ans\n\n\nsolution(\"3 1 3\\n1 3 2\\n2 3 1\\n2 3 2\\n3 1 2\")\n\nsolution(\"4 3 1\\n3 1 2\\n1 3 2\\n2 3 1\\n3 1 2\")\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = stdin.split()\n    Q = stdin.split()\n    P = sorted(P, key=lambda x: (x[0], x[1]))\n    Q = sorted(Q, key=lambda x: (x[0], x[1]))\n    i = 0\n    ans = float('inf')\n    while i < N and Q:\n        if P[i][0] < Q[i][0]:\n            ans = min(ans, abs(P[i][0] - Q[i][0]))\n        if P[i][1] < Q[i][1]:\n            ans = min(ans, abs(P[i][1] - Q[i][1]))\n        i += 1\n    return str(ans)\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # return 0\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    Q = list(map(int, stdin.split()))\n    P.sort()\n    Q.sort()\n    diff = abs(P[-1]-Q[-1])\n    return diff\nsolution(\"3\")\nsolution(\"4\")\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - stdin.count(\"1\")\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(stdin.split(' '), key=len)))"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    max_length = 0\n    start_index = 0\n    start_char = 'A'\n    end_index = 0\n    end_char = 'Z'\n    i = 0\n\n    while i < len(string):\n        current_length = 0\n        if string[i] in ['A', 'C', 'G', 'T']:\n            start_char = string[i]\n        if string[i] in ['T', 'C', 'G', 'A']:\n            end_char = string[i]\n        while i < len(string):\n            if string[i] == start_char and string[i + 1] == end_char:\n                current_length += 2\n                i += 2\n            else:\n                i += 1\n            if max_length < current_length:\n                max_length = current_length\n                start_index = i\n                end_index = i + max_length - 1\n        i += 1\n    print(f\"The longest ACGT string is: {string[start_index: end_index + 1]}\")\n    return max_length\n\nsolution(input())\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_str = \"\"\n    for i in range(len(stdin) - 1):\n        if stdin[i]!= stdin[i + 1]:\n            max_str = stdin[i]\n            break\n    if max_str:\n        return len(max_str)\n    return 0\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    solution = \"\"\n    for i in range(len(stdin) - 1):\n        for j in range(i + 1, len(stdin)):\n            if stdin[i] == stdin[j] and stdin[i] == \"A\" or stdin[i] == \"C\" or stdin[i] == \"G\" or stdin[i] == \"T\":\n                solution = max(solution, len(stdin[i:j + 1]))\n    print(solution)\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return len(max(stdin, key=len))\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    longest = None\n    for i in range(len(stdin) - 1):\n        for j in range(len(stdin) - 1):\n            s = stdin[i:j + 1]\n            if s == s[::-1]:\n                if s == stdin:\n                    return stdin\n                if len(s) > len(longest) or (len(s) == len(longest) and s < longest):\n                    longest = s\n    return longest\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, c, g, t = stdin\n    ans = []\n    for a in range(len(a)):\n        if a == 0:\n            ans.append(a)\n        else:\n            if a == len(a) - 1:\n                ans.append(a)\n            else:\n                ans.append(a)\n    max_size = 0\n    for c in range(len(c)):\n        if c == 0:\n            ans.append(c)\n        else:\n            if c == len(c) - 1:\n                ans.append(c)\n            else:\n                ans.append(c)\n    max_size = max(max_size, len(a))\n    max_size = max(max_size, len(c))\n    max_size = max(max_size, len(g))\n    max_size = max(max_size, len(t))\n    return max_size"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    substring = ''\n    longest = 0\n    for i in range(len(stdin)):\n        substring += stdin[i]\n        for j in range(i+1, len(stdin)+1):\n            if j <= len(stdin):\n                substring += stdin[j]\n                if len(substring) > longest:\n                    longest = len(substring)\n                    break\n            else:\n                break\n    print(longest)"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 == 1:\n            counter += 1\n    return str(counter)\n\nprint(solution(input()))"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        if i > 1 and len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    integer_num_list = list(map(int, stdin.split()))\n    num_of_odd_int_list = []\n    for integer in range(1, integer_num_list[0]+1):\n        if len(str(integer)) % 2!= 0:\n            num_of_odd_int_list.append(integer)\n    return str(len(num_of_odd_int_list))"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(1, int(stdin)):\n        #count += 10 ^ (len(str(i)) - 1)\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n,0,-1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(1, int(stdin) + 1):\n        if i % 2!= 0:\n            for j in range(len(str(i))):\n                if j % 2!= 0:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    str_input = stdin\n    res = 0\n    for i in range(10, int(str_input) + 1):\n        if (len(str(i)) % 2)!= 0:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n\n    return (s[0:6] + 'h' + s[7:12] + 't' + s[13:18] + 't' + s[19:] + 'a')\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # Your code here\n    s = s[::-1]\n    a = s.find('a')\n    s = s.replace(s[a], 'e')\n    s = s.replace(s[a+1], 't')\n    s = s.replace(s[a+2], 'e')\n    s = s.replace(s[a+3], 'h')\n    s = s.replace(s[a+4], 'c')\n    s = s.replace(s[a+5], 'a')\n    return s\n\nsolution(input())\n'''\n'''\n13. Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string. If the string length is less than 2, return instead of the empty string.\n\nNotes\nThe first and last characters must be included in the string. If the string length is less than 2, return instead of the empty string.\n\nSample String : 'w3resource'\nExpected Result : 'w3ce'\n\nSample String : 'w3'\nExpected Result : 'w3'\n\nSample String :'w'\nExpected Result : Empty String\n\n'''\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n\n    # Solution Approach\n    def solve(S: str, T: str) -> int:\n        cnt = 0\n        for i in range(len(S)):\n            if S[i]!= T[i]:\n                cnt += 1\n                T = T[:i] + S[i] + T[i+1:]\n        return cnt\n\n    return str(solve(S, T))\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = len(s[0])\n    m = len(s[1])\n    return min(n, m) - 2"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(stdin)\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == 'c':\n            arr[i] = 'h'\n        elif arr[i] == 'f':\n            arr[i] = 't'\n        elif arr[i] == 'f':\n            arr[i] = 't'\n        elif arr[i] == 'e':\n            arr[i] = 'a'\n        i += 1\n    return ''.join(arr)\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\"c\", \"h\")\n    s = s.replace(\"f\", \"t\")\n    s = s.replace(\"t\", \"f\")\n    s = s.replace(\"e\", \"a\")\n    return s"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    x, y = stdin.split()\n    x = list(x)\n    y = list(y)\n    m = min(len(x), len(y))\n    x.sort(key=lambda x: x.lower())\n    y.sort(key=lambda x: x.lower())\n    s = x[0:m] + y[0:m]\n    s = \"\".join(s)\n    return s\nprint(solution(input()))\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            s = s.replace(s[i], \"\")\n    return s\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n\n    if n < 4:\n        return \"impossible\"\n\n    if n == 4:\n        return str(min(1, abs(ord(s[0]) - ord(s[1]))))\n\n    if n == 5:\n        return str(min(1, abs(ord(s[0]) - ord(s[1]))))\n\n    if n == 6:\n        return str(min(1, abs(ord(s[0]) - ord(s[1]))))\n\n    if n == 7:\n        return str(min(1, abs(ord(s[0]) - ord(s[1]))))\n\n    return \"impossible\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = int(stdin.split()[0]), int(stdin.split()[1])\n    return str(sorted([x - i * i for i in range(1, k + 1) if x - i * i in range(1, 1000000 + 1)]))"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    lst = list(range(10000000))\n    lst_2 = []\n\n    for _ in range(k):\n        lst.remove(x)\n    for i in lst:\n        lst_2.append(i)\n    return \" \".join(map(str, lst_2))\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return ''\n\nstdin = input()\nsolution(stdin)"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = stdin.split(\" \")\n    K = int(K)\n    X = int(X)\n    for i in range(1,K+1):\n        if i*K-1 < X:\n            print(i*K+1,end=\" \")\n    return \"\""
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    k = int(line[0])\n    x = int(line[1])\n    n = 2000001\n    black_counter = 0\n    black_count = 0\n    white_count = 0\n    white_count_list = []\n    black_count_list = []\n    for i in range(1, n + 1):\n        if black_count == k:\n            print(f\"{black_count_list[i]},{black_count_list[i+1]} {white_count_list[i]},{white_count_list[i+1]}\")\n            break\n        else:\n            if white_count == x:\n                white_count_list.append(i)\n                black_count_list.append(black_count)\n                black_count = 0\n                white_count = 0\n            elif i == n:\n                white_count_list.append(i)\n                black_count_list.append(black_count)\n                black_count = 0\n                white_count = 0\n            else:\n                if black_count!= 0:\n                    if i == black_count + 1:\n                        black_count += 1\n                    else:\n                        black_count = 0\n                white_count += 1\n                black_count += 1\n    return ''"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    k = int(stdin_list[0])\n    x = int(stdin_list[1])\n    s = set()\n    for i in range(k):\n        s.add(int(stdin_list[2 + i]))\n    for i in range(x):\n        if i in s:\n            print(i, end=\" \")\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = stdin.split()\n    K = int(K)\n    X = int(X)\n    i = 1\n    while K > 0:\n        if i == X:\n            i = 0\n            K -= 1\n        print(i)\n        i += 1\n    return \"\"\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def binarySearch(k, x):\n        lo, hi = 0, len(a)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if a[mid] == k:\n                return mid\n            elif a[mid] < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n    a = list(map(int, stdin.split()))\n    black = set()\n    black.add(binarySearch(a[1], a[0]))\n    black.add(binarySearch(a[1], a[2]))\n    black.add(binarySearch(a[2], a[1]))\n    black.add(binarySearch(a[2], a[3]))\n    black.add(binarySearch(a[3], a[2]))\n    black.add(binarySearch(a[3], a[4]))\n    black.add(binarySearch(a[4], a[3]))\n    black.add(binarySearch(a[4], a[5]))\n    black.add(binarySearch(a[5], a[4]))\n    black.add(binarySearch(a[5], a[6]))\n    black.add(binarySearch(a[6], a[5]))\n    black.add(binarySearch(a[6], a[7]))\n    black.add(binarySearch(a[7], a[6]))\n    black.add(binarySearch(a[7], a[8]))\n    black.add(binarySearch(a[8], a[7]))\n    black.add(binarySearch(a[8], a[9]))\n    black.add(binarySearch(a[9], a[8]))\n    black.add(binarySearch(a[9], a[10]))\n    black.add(binarySearch(a[10], a[9]))\n    black = list(black)\n    black.sort()\n    return''.join(map(str, black))\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = stdin.split()\n    k, x = int(k), int(x)\n    counter = 0\n    number_list = []\n    number = 1000001\n    while counter < k:\n        number_list.append(number)\n        number += 1\n        counter += 1\n    for item in range(len(number_list)):\n        if item == 0:\n            print(number_list[item])\n        else:\n            print(number_list[item], end=' ')\n    return ''\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    temp = float(stdin)\n\n    if temp < 30:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    return \"Yes\" if temp >= 30 else \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n\n    if x >= 30:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) >= 30 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    if int(x) >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if 30 >= float(stdin) >= 0 else 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    temp = int(x)\n    if temp > 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if (X >= 30):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin == \"Yes\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30 or x <= -40:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # print(arr)\n    ans = 0\n    for i in range(1, N):\n        for j in range(i+1, N):\n            # print(i, j)\n            if abs(arr[i] - arr[j]) == int(math.sqrt((arr[i]-arr[j])**2)):\n                ans += 1\n            elif abs(arr[i] - arr[j]) % int(math.sqrt((arr[i]-arr[j])**2)) == 0:\n                ans += 1\n    return str(ans)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    inputs = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(int(all(map(lambda x: int(round(x)**2 == x, map(lambda x: sum([abs(inputs[i][j]) for i in range(n)]), map(lambda x: round(x), map(sum, inputs))))))) + 1)"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    Xs = list(map(int, stdin.split()))\n    pairs = 0\n    i = 0\n    while i < N - 1:\n        j = i + 1\n        while j < N:\n            distance = 0\n            for k in range(D):\n                distance += (Xs[i][k] - Xs[j][k]) ** 2\n            if distance == int(distance) and i!= j:\n                pairs += 1\n            j += 1\n        i += 1\n    return str(pairs)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(i) for i in stdin.split()]\n    points = []\n    for i in range(n):\n        points.append([int(j) for j in stdin.split()[i * d + 1:i * d + d + 1]])\n\n    distances = []\n    for point in points:\n        distances.append([abs(point[i] - point[j]) ** 2 for i in range(d) for j in range(d) if i!= j])\n    distances.sort(key=lambda i: i[0])\n    for i in range(n - 1):\n        if distances[i][0] == distances[i + 1][0]:\n            continue\n        else:\n            return str(distances[i][0]) +'' + str(distances[i][1])\n\n    return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    n, d = stdin_list[0].split(' ')\n    n, d = int(n), int(d)\n    coords = [stdin_list[i].split(' ') for i in range(1, n+1)]\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = 0\n            for k in range(d):\n                dist += abs(int(coords[i][k]) - int(coords[j][k]))\n            if dist > 0 and dist % 1 == 0:\n                pairs += 1\n    return str(pairs)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(i) for i in stdin.split()]\n    coords = {}\n    for i in range(N):\n        coords[i] = [int(j) for j in stdin.split()]\n    return str(sum(1 for i, j in zip(range(N), range(N)) if abs(coords[i][D] - coords[j][D]) == int(math.sqrt(coords[i][D]**2 + coords[j][D]**2))))"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, d] = list(map(int, stdin.split()))\n    distances = {}\n    for i in range(n):\n        point = tuple(map(int, stdin.split()))\n        if point not in distances:\n            distances[point] = []\n        distances[point].append(i + 1)\n    ans = 0\n    for j in range(1, n):\n        if j not in distances or distances[j] == 0:\n            continue\n        for k in range(j + 1, n):\n            if k not in distances or distances[k] == 0:\n                continue\n            if sum(map(lambda p: abs(p[0] - p[1]), zip(distances[j], distances[k]))) == d:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = [[int(x) for x in stdin.split()] for i in range(N)]\n\n    dist = [[0] * N for i in range(N)]\n    for i in range(N):\n        for j in range(i, N):\n            if i == j:\n                dist[i][j] = 1\n                continue\n            dist[i][j] = int((X[i][0] - X[j][0]) ** 2 + (X[i][1] - X[j][1]) ** 2 + (X[i][2] - X[j][2]) ** 2)\n            dist[j][i] = dist[i][j]\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if dist[i][j] % 1 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = [[int(i) for i in stdin.split()] for _ in range(n)]\n    satisfy = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                sqrt1 = pow((points[i][0] - points[j][0]), 2)\n                sqrt2 = pow((points[i][1] - points[j][1]), 2)\n                sqrt3 = pow((points[i][2] - points[j][2]), 2)\n                if sqrt1 + sqrt2 + sqrt3 == pow(n, 2):\n                    satisfy += 1\n    return str(satisfy)"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_n_d = stdin.strip().split()\n    n, d = int(input_n_d[0]), int(input_n_d[1])\n    input_x = input_n_d[2:]\n\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (float(input_x[i][k]) - float(input_x[j][k]))**2\n            if distance % 1 == 0:\n                res += 1\n\n    return str(res)"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Good\" if is_hard_to_enter(stdin) else \"Bad\"\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == s[2] and s[1] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codesignal.com/interview-practice/task/Q4N8Z7aHJ1HV5wQQ/description\n    :param stdin: string\n    :return: string\n    \"\"\"\n    stdin = list(stdin)\n    while len(stdin) < 4:\n        stdin.append(0)\n    temp_list = []\n    temp_list.append(stdin[0])\n    temp_list.append(stdin[1])\n    temp_list.append(stdin[2])\n    temp_list.append(stdin[3])\n    if int(temp_list[0])!= int(temp_list[1])!= int(temp_list[2])!= int(temp_list[3]):\n        return \"Good\"\n    else:\n        return \"Bad\"\n\n\nprint(solution(\"3776\"))\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    if number[0] == number[1] and number[1] == number[2] and number[3] == number[2]:\n        return 'Bad'\n    else:\n        return 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Your code here\n    s = stdin\n    lst = []\n    if len(s) == 4:\n        lst = [int(i) for i in s]\n        for i in range(1, 4):\n            if lst[i] == lst[i - 1]:\n                if lst[i] == lst[i + 1]:\n                    return 'Bad'\n                return 'Good'\n    else:\n        return 'Bad'\n    '''\n    s = stdin\n    if len(s) == 4:\n        return 'Good' if not (s[0] == s[1] and s[1] == s[2] and s[2] == s[3]) else 'Bad'\n    else:\n        return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == \"\":\n        return \"Bad\"\n    if s[0] == s[-1]:\n        return \"Bad\"\n    if (s[0] == s[1]) and (s[1] == s[2]):\n        return \"Bad\"\n    if (s[0] == s[2]) and (s[2] == s[3]):\n        return \"Bad\"\n    if (s[0] == s[3]) and (s[3] == s[1]):\n        return \"Bad\"\n    if (s[0] == s[3]) and (s[3] == s[2]):\n        return \"Bad\"\n    if (s[1] == s[2]) and (s[2] == s[3]):\n        return \"Bad\"\n    if (s[1] == s[3]) and (s[3] == s[0]):\n        return \"Bad\"\n    if (s[2] == s[3]) and (s[3] == s[1]):\n        return \"Bad\"\n    if (s[2] == s[3]) and (s[3] == s[0]):\n        return \"Bad\"\n    if (s[3] == s[0]) and (s[0] == s[1]):\n        return \"Bad\"\n    if (s[3] == s[0]) and (s[0] == s[2]):\n        return \"Bad\"\n    if (s[3] == s[0]) and (s[0] == s[1]):\n        return \"Bad\"\n    if (s[2] == s[1]) and (s[1] == s[0]):\n        return \"Bad\"\n    if (s[2] == s[1]) and (s[1] == s[0]):\n        return \"Bad\"\n    if (s[2] == s[1]) and (s[1] == s[0]):\n        return \"Bad\"\n    if (s[2] == s[1]) and (s[1] == s[0]):\n        return \"Bad\"\n    return \"Good\"\n\nprint(solution(''))\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    # Write your code here\n    for digit in range(2, len(input_string)-2):\n        if input_string[digit] == input_string[digit-1] == input_string[digit+1]:\n            return 'Bad'\n        elif input_string[digit]!= input_string[digit-1]!= input_string[digit+1]:\n            return 'Good'\n    return 'Bad'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin\n    for i in range(0, 4):\n        if code[i] == code[i + 1] and code[i] == code[i + 2] and code[i] == code[i + 3]:\n            return 'Bad'\n    else:\n        return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    l = s.split()\n    s = int(l[0])\n    print(s,s)\n    \n    if 2 in s:\n        return 'Bad'\n    return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = list(map(int, s))\n    if sum(s)%10!= 0:\n        return 'Bad'\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return 'Bad'\n    return 'Good'"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_list = list(map(int, stdin.strip().split()))\n    max_list = list()\n    for i in range(n):\n        max_list.append(max(num_list[i:]) + num_list[i])\n    return str(max(max_list))"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, values = stdin.split()\n    values = list(map(int, values.split()))\n    \n    while True:\n        _sum = 0\n        values_len = len(values)\n        for i in range(values_len - 1, -1, -1):\n            _sum += values[i]\n            values.pop(i)\n            if _sum == 0:\n                return str(max(values))\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    values = list(map(int, stdin.split()))\n    ans = 1\n    for v in values:\n        ans = (ans + v) / 2\n    return str(round(ans, 10))\n\"\"\"\n\nN = int(input())\nvalues = list(map(int, input().split()))\n\nans = 1\nfor v in values:\n    ans = (ans + v) / 2\n\nprint(round(ans, 10))\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split()\n    N = int(input[0])\n    values = input[1:]\n    value = []\n    for _ in range(N):\n        value.append(int(values.pop(0)))\n    value.sort(reverse=True)\n    value = (value[0] + value[1]) / 2\n    return str(value)\n    return 3.5\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ingredients = stdin.strip().split()\n    max_value = 0\n\n    for i in range(N-1):\n        current = ingredients[i]\n        next_ = ingredients[i+1]\n        max_value += (int(current) + int(next_)) / 2\n    print(max_value)"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    values: List[int] = [int(x) for x in stdin.split()[1:]]\n    max_value = float(\"-inf\")\n    for i in range(0, N):\n        x = values[i]\n        for j in range(0, i):\n            y = values[j]\n            if (x + y) / 2 > max_value:\n                max_value = (x + y) / 2\n    return str(max_value)"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ingredients = [int(x) for x in stdin.split(\" \")]\n\n    if N < 2:\n        return str(ingredients[0])\n\n    ans = ingredients[0]\n    v_1 = ingredients[0]\n\n    for i in range(1, N):\n        v_i = ingredients[i]\n        v_1 = (v_1 + v_i) / 2\n\n        if ans < v_1:\n            ans = v_1\n\n    return str(ans)"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = N\n    values = sorted(list(map(int, stdin.split(' '))))\n    while len(values)!= 1:\n        values.append(sum(values[:-2]) / 2)\n        values.pop(0)\n        values.pop(len(values) - 1)\n        n -= 1\n    return f'{values[0]}'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    values = [int(i) for i in data[1:]]\n\n    values = sorted(values, reverse=True)\n    pot = 0\n    best = 0\n    for i in range(n):\n        pot += values[i]\n        best = max(pot, best)\n\n    return str(best)\nprint(solution(input()))\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    pot: Dict[int, float] = {}\n    for i in range(1, N + 1):\n        pot[i] = float(stdin)\n    for _ in range(N - 1):\n        for i in pot:\n            pot[i] = (pot[i] + pot[i + 1]) / 2\n    return str(max(pot.values()))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dishes = stdin.strip().split()\n    satisfaction = 0\n    for i, dish in enumerate(dishes):\n        if i == 0:\n            satisfaction += int(dish)\n        else:\n            satisfaction += int(dish) + int(dishes[i - 1])\n    return satisfaction\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    dishes = stdin.split()[1:]\n    satisfaction_points = 0\n    for dish in dishes:\n        satisfaction_points += int(dish)\n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [N, *dishes] = stdin.split()\n    return sum(list(map(lambda dish: int(dish) * (int(dishes.index(dish) + 1) + 1) if int(dishes.index(dish))!= 0 else 0, dishes)))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    B = list(map(int, stdin.split()[1:]))\n    C = list(map(int, stdin.split()[1:]))\n    # print(N, A, B, C)\n    return sum(a + b + c for a, b, c in zip(A, B, C))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if not 1 <= n <= 20:\n        raise Exception(\"Invalid input!\")\n\n    if n == 1:\n        return \"Invalid input!\"\n\n    a = stdin.strip().split()\n\n    if n!= len(a):\n        raise Exception(\"Invalid input!\")\n\n    if len(set(a))!= n:\n        raise Exception(\"Invalid input!\")\n\n    satisfaction = {1: 0, 2: 0, 3: 0}\n    for i in range(n):\n        if satisfaction[1] < int(a[i]):\n            satisfaction[1] = int(a[i])\n        elif satisfaction[2] < int(a[i]):\n            satisfaction[2] = int(a[i])\n        elif satisfaction[3] < int(a[i]):\n            satisfaction[3] = int(a[i])\n\n    return sum(satisfaction.values())"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_dishes = int(stdin.split(\" \")[0])\n    dishes = stdin.split(\" \")[1:]\n    satisfaction_points_earned = 0\n\n    for i in range(number_of_dishes):\n        if i == 0:\n            continue\n        dish = int(dishes[i-1])\n        satisfaction_points_earned += int(dishes[i]) + int(dishes[i-1])\n\n    return str(satisfaction_points_earned)\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def _satisfaction_points(n: int, dish_id: int, dissatisfaction: list) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if i == dish_id:\n                total += dissatisfaction[i - 1]\n        return total\n\n    n = int(stdin.split()[0])\n    dish_satisfaction = list(map(int, stdin.split()[1:]))\n    satisfaction = _satisfaction_points(n, 1, dish_satisfaction)\n    for i in range(2, n + 1):\n        satisfaction += _satisfaction_points(n, i, dish_satisfaction)\n    print(satisfaction)\n    return 0\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list.pop(0))\n    dish_list = list(map(int, input_list))\n    n_dishes = n\n    a_dishes = dish_list[0:n]\n    b_dishes = dish_list[n:2 * n]\n    c_dishes = dish_list[2 * n:3 * n]\n    satisfaction = 0\n    while n_dishes > 0:\n        if a_dishes[0] == n_dishes:\n            n_dishes -= 1\n            a_dishes.pop(0)\n            satisfaction += (a_dishes[0] * 2 + a_dishes[1])\n        elif b_dishes[0] == n_dishes:\n            n_dishes -= 1\n            b_dishes.pop(0)\n            satisfaction += (b_dishes[0] * 3 + b_dishes[1])\n        elif c_dishes[0] == n_dishes:\n            n_dishes -= 1\n            c_dishes.pop(0)\n            satisfaction += (c_dishes[0] * 4 + c_dishes[1])\n    return str(satisfaction)\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    points = []\n    for i in range(1, N):\n        points.append(B[i - 1] + C[i - 1])\n        points.append(A[i - 1] + points[i - 1])\n    return str(sum(points))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(sum([int(x) for x in stdin.split()]))\n\nsolution()\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    string = stdin.split()[1]\n\n    str_count = 0\n    char_count = 0\n    for i in range(0, len(string) - 1, 1):\n        if string[i] == string[i+1]:\n            str_count += 1\n            char_count += 1\n        else:\n            str_count = 1\n            char_count = 1\n        if char_count == int(n):\n            break\n    return str_count\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = s[::-1]\n    start = 0\n    for i in range(n):\n        if s[i]!= 'A':\n            start = i+1\n            break\n    end = n-1\n    for i in range(n-1, -1, -1):\n        if s[i]!= 'B':\n            end = i\n            break\n    print(end - start + 1)"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    def is_valid(s):\n        return \"A\" <= s <= \"Z\"\n\n    def window(s, w):\n        return s[:w]\n\n    def find_subsequence(s, w):\n        subs = {window(s, w)}\n        i = w\n        while i < n:\n            sub = window(s, i)\n            if sub in subs:\n                return subs\n            subs.add(sub)\n            i += 1\n        return subs\n\n    return len(find_subsequence(s, 3))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n\n    # Solution\n    length = len(S)\n    count = 0\n    for i in range(length):\n        for j in range(i + 1, length):\n            if S[i:j] == S[i:j][::-1]:\n                count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... YABCD\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 5\n   ... YABCDBA\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 10\n   ... ZABCDBABCQ\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 9\n   ... ZABCDBABCQ\n   ... ''')\n    '2'\n\n    >>> solution('''\n   ... 1000\n   ... ZABCDBABCQ\n   ... ''')\n    '2'\n\n    \"\"\"\n    return '1'\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    return len(list(filter(lambda x: x[0] == S[0] or x[0] == S[1] or x[0] == S[2], zip(S, S[1:], S[2:]))))\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    count = 0\n    for i in range(n - 2):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    \n    # Modify the string in place, to create a new list\n    string = list(S)\n    \n    # remove any blank spaces\n    string = list(filter(lambda x: x!= '', string))\n    \n    # Convert the list into a string\n    string = ''.join(string)\n    \n    counter = 0\n    length = len(string)\n    \n    # Traverse from left to right\n    for i in range(0, length):\n        # If there is no further char, increment counter\n        if i + 2 > length - 1:\n            counter += 1\n            break\n        \n        # if current char and next char are equal\n        if string[i] == string[i + 1]:\n            # Keep traversing to the end\n            while i + 2 <= length - 1:\n                if string[i]!= string[i + 2]:\n                    # If all the characters are equal\n                    break\n                i += 2\n            # increment counter\n            counter += 1\n    return counter"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nN = int(input())\nS_list = list(input().split())\nM = input()\n\nS_list.sort()"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    names = stdin.split()\n\n    # possible names\n    possible = [[] for _ in range(N)]\n\n    # possible names are made from each name\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + '*' + names[i][j:])\n\n    # possible names are made from each name starting with M or A\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j].upper() + names[i][j + 1:])\n\n    # possible names are made from each name starting with A, R, H or C\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j].lower() + names[i][j + 1:])\n\n    # possible names are made from each name starting with R, C or H\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j].upper() + names[i][j + 1:])\n\n    # possible names are made from each name starting with R, C, A or H\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j].lower() + names[i][j + 1:])\n\n    # possible names are made from each name starting with H, O, I or S\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j].upper() + names[i][j + 1:])\n\n    # possible names are made from each name starting with A, I or S\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j].lower() + names[i][j + 1:])\n\n    # possible names are made from each name starting with S\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j])\n\n    # possible names are made from each name\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i])\n\n    # possible names are made from each name only if it is not in the preceding names\n    for i in range(N):\n        for j in range(len(names[i])):\n            possible[i].append(names[i][:j] + names[i][j] + names[i][j + 1:])\n\n    # for each possible name we count how many times the name is used in other names\n    for i in range(N):\n        for j in range(len(possible[i])):\n            for k in range(len(possible[i])):\n                if possible[i][j] == possible[k]:\n                    possible[i][j] = 0\n            possible[i][j] = possible[i].count(possible[i][j])\n\n    # the problem is solved by checking if all possible names contain only three numbers\n    ans = 0\n    for i in range(N):\n        if not all(j == 3 for j in possible[i]):\n            ans += 1\n\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(3):\n        pass\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = stdin.split()\n    print(arr)\n    arr.sort()\n    length = len(arr)\n    print(length)\n    # \ub098\uc628 \uac12\uc774 \ud55c \uac1c\ub77c\ub3c4 \uacf5\uc9d1\ud569\uc774\uae30 \ub54c\ubb38\uc5d0 \ube48\ub3c4 \uc870\uc0ac\ub97c \ud1b5\ud574\uc11c \uc911\ubcf5 \ubc29\uc9c0\n    if length < 3:\n        return length\n    \n    return 2\n    # \ub098\uc628 \uac12\uc774 \ub450 \uac1c \uc774\uc0c1\uc77c \uacbd\uc6b0\n    if length > 2:\n        # \ub9ac\uc2a4\ud2b8\ub97c \uc67c\ucabd\uc73c\ub85c \ubcf4\ub0b4\ub294 \ubc29\ubc95\uc758 \uc218\n        tmp = length - 2\n        left = list()\n        for i in range(length - 2):\n            left.append(arr[i])\n        # \ub9ac\uc2a4\ud2b8\ub97c \uc624\ub978\ucabd\uc73c\ub85c \ubcf4\ub0b4\ub294 \ubc29\ubc95\uc758 \uc218\n        right = list()\n        for i in range(length - 2):\n            right.append(arr[tmp + i + 1])\n        \n        # \uc67c\ucabd \ubc29\ubc95\uc73c\ub85c \ub098\uc628 \uac12 \ub9ac\uc2a4\ud2b8\n        left_num = solution(left)\n        # \uc624\ub978\ucabd \ubc29\ubc95\uc73c\ub85c \ub098\uc628 \uac12 \ub9ac\uc2a4\ud2b8\n        right_num = solution(right)\n        \n        print(left_num)\n        print(right_num)\n        \n        # \uac01 \ubc29\ubc95\uc758 \uc218\uac00 \ud558\ub098\ub77c\ub3c4 \ub354 \ud06c\uba74 \uc804\uccb4\ub294 \ub2e4 \ud070 \uac12\uc774 \ub418\uc5b4 \uc0ac\uc6a9\ud55c\ub2e4.\n        if left_num > right_num:\n            return left_num\n        else:\n            return right_num\n        \n    # \uc911\ubcf5\uc744 \ud53c\ud558\uba74 \uc911\ubcf5\ub41c \uac12\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574\n    # \uc911\ubcf5\uc740 1\uac1c\uc774\uc0c1 \uc911\ubcf5\ub418\ub294 \uac12\ub9cc \ud3ec\ud568\ud574\uc11c 1\uc744 \ubc18\ud658\ud55c\ub2e4.\n    else:\n        for i in range(length):\n            if arr[i] in arr[:i] + arr[i+1:]:\n                return 1\n        return 2\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = max(sorted(stdin))\n    count = 0\n    for a, b, c in itertools.combinations(sorted(stdin), 3):\n        if a == b == c or a == c == b or b == a == c:\n            continue\n        if a.startswith(m) and b.startswith(m) and c.startswith(m):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport itertools\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... MASHIKE\n   ... RUMOI\n   ... OBIRA\n   ... HABORO\n   ... HOROKANAI\n   ... ''')\n    '2'\n    \"\"\"\n    N = int(stdin)\n    candidates = set(stdin.split())\n\n    for a in candidates:\n        if a.startswith(\"M\") or a.startswith(\"A\") or a.startswith(\"R\") or a.startswith(\"C\") or a.startswith(\"H\"):\n            for b in candidates:\n                if b.startswith(\"M\") or b.startswith(\"A\") or b.startswith(\"R\") or b.startswith(\"C\") or b.startswith(\"H\"):\n                    for c in candidates:\n                        if c.startswith(\"M\") or c.startswith(\"A\") or c.startswith(\"R\") or c.startswith(\"C\") or c.startswith(\"H\"):\n                            if a!= b!= c:\n                                if a + b + c not in candidates:\n                                    candidates.add(a + b + c)\n    print(len(candidates))\n    return\n\n\nsolution(input())\n\n\"\"\"\n--- Day 14: Docking Data ---\nOn the moon, you discover that the docking port and navigation port are both missing. You also discover a great deal of bad\ninformation -- you can't even read the manuals!\n\nAfter a brief inspection, you discover that the navigation port contains a list of the positions of all N docking port\nwheels. Unfortunately, those positions don't contain any indication of direction or the way past the port -- instead,\nthey contain only the position itself.\n\nYou also discover that the list of positions also contains a position that is directly in front of the navigation port\n(and so behind the docking port).\n\nFor example, consider the situation with N = 4, where the navigation port contains [20, 10, 30, 50], and the list of\npositions contains 21, 10, 11, 20. This means that 21 is directly in front of the navigation port, and 10 and 11 are\ndirectly in front of 21.\n\nTo save your ship from crashing while you're trying to figure out the direction in which to dock, you need to figure\nout the position directly in front of the port (and thus at which angle the automatic navigation system would have to turn\nto face). In the above situation, this would be the position at which 20 is directly in front of the port.\n\nIn the same situation, if the docking port were directly behind the navigation port, how would you figure out which\nposition in front of the port is directly in front of the port?\n\nIn the above situation, this would be the position at which 50 is directly in front of the port.\n\nHowever, this isn't the only situation in which you need to get the position directly in front of the port. Sometimes,\nit's just an angle off by one or two degrees. Sometimes, the angle isn't directly ahead or behind, but it's\nclose enough for you to use to know how far to turn to face the port.\n\nFor example, consider the situation with N = 5, where the navigation port contains [30, 10, 20, 50], and the list of\npositions contains 30, 10, 31, 20. This means that the 30 is not directly in front of the port (however, the position\n30 would be in front of the port if the list were arranged in an increasing order).\n\nIn the same situation, if the docking port were directly behind the navigation port, how would you figure out which\nposition in front of the port is directly in front of the port? In this case, the position directly in front of the\nport is 31.\n\nGiven N, how many ways can you find the position directly in front of the port? Since that's a tricky question,\nyou can't answer it until you try it.\n\nWrite a function answer(N) that, given a positive integer N, returns the number of ways to find the position\ndirectly in front of the port.\n\nThe input test cases are generated such that it's always possible to find the answer. In the first test case, N = 1\n(the navigation port is directly in front of the docking port, and thus the answer is 1).\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - The position of the navigation port is directly in front of the port.\n\n-----Example-----\nInput:\n4\nOutput:\n2\n\nInput:\n5\nOutput:\n4\n\nInput:\n6\nOutput:\n15\n\"\"\"\nfrom collections import deque\nfrom copy import deepcopy\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    names, n_names = stdin.split(), {}\n    for name in names:\n        s = name.upper()[0]\n        if not s.isalpha(): continue\n        n_names[s] = name if not n_names.get(s) else n_names[s]\n    return len(n_names.values())\n\"\"\"\n\nimport itertools\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**7)\n\nN = int(input())\nnums = list(map(str, input().split()))\n\nnums_set = set()\nfor num in nums:\n    nums_set.add(num[0])"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    f: int = 1\n    if N == 1:\n        return 1\n    for i in range(1, N + 1):\n        print(i)\n        if i == 1:\n            f *= 3\n        else:\n            f *= 2\n    return f"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(n) for n in stdin.split())\n    if N >= M:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    if (N - 1) % M == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_num(n):\n        if n <= 0: return False\n        return True\n    \n    n, m = map(int, stdin.split())\n    if is_valid_num(n) and is_valid_num(m) and n>=m:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print('Yes' if n == m else 'No')"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return 'Yes' if (N + M) / N >= 1 else 'No'\n    \n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(' ')\n    N, M = int(N), int(M)\n\n    if M > N:\n        return 'No'\n    \n    if M <= N and M <= 1000:\n        for i in range(M):\n            for j in range(i+1, M):\n                for k in range(j+1, M):\n                    if i == j == k:\n                        continue\n                    if (i+j+k)%2 == 0:\n                        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    \n    if n > m:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    print(str(int(N * M > 0)))"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"sippuu\":\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    return 'Yes' if s[2] == s[4] == s[5] == s[3] else 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if (s[2] == s[3]) and (s[4] == s[5]):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i[3] == i[4] and i[5] == i[6]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[2] == stdin[4] and stdin[5] == stdin[6]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.lower()\n    if string[2] == string[4] and string[5] == string[6]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(input())\n\n-----Algorithm-----\n\n1. Use the String function to split the string into a list\n2. Loop through the list\n    2.1 If the character is equal to \"p\", check for the character in the other list\n2.2 If the character is equal to \"i\" check for the character in the other list\n3. Return the \"Yes\" or \"No\"\n'''\n\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.isupper() else 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[2] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns 'Yes' if given string is coffee-like, otherwise returns 'No'.\n    >>> solution('sippuu')\n    'Yes'\n    >>> solution('sippuu')\n    'No'\n    \"\"\"\n    if stdin[2] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"Yes\" if stdin[2] == stdin[4] and stdin[5] == stdin[6] else \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_1, t_1 = map(int, stdin.split())\n    c_2, t_2 = map(int, stdin.split())\n    c_3, t_3 = map(int, stdin.split())\n    if c_1 <= t_1 and c_2 <= t_2 and c_3 <= t_3:\n        return c_1 + c_2 + c_3\n    if t_1 < t_2 and t_1 < t_3:\n        return t_1\n    if t_2 < t_3:\n        return t_2\n    return t_3\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split(\" \")))\n    routes = sorted((int(c), int(t)) for c, t in (map(int, stdin.split())))\n    route_cost = {}\n\n    def get_route_cost(route):\n        if route in route_cost:\n            return route_cost[route]\n\n        cost = 0\n        for c, t in routes:\n            cost += min(t, t + get_route_cost(route + [c]))\n        route_cost[route] = cost\n        return cost\n\n    return min(get_route_cost([0] * n), t)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    c = sorted(list(map(int, stdin.split())))\n\n    ret = float('inf')\n    for i in range(1, n + 1):\n        ret = min(ret, (c[i - 1] + t) + c[i])\n\n    return str(ret)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split()))\n    routes = list(map(int, stdin.split()))\n    return str(min(routes, key=lambda x: x[1] + (T-x[0])*x[0]))\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    N = int(stdin_lines[0])\n    T = int(stdin_lines[1])\n    c_routes = [int(route) for route in stdin_lines[2:]]\n    best_cost = float('inf')\n    for i in range(N):\n        route_cost = c_routes[i]\n        for j in range(N):\n            if i!= j:\n                route_time = c_routes[j]\n                if T >= route_time:\n                    if route_cost < best_cost:\n                        best_cost = route_cost\n    if best_cost > T:\n        print(\"TLE\")\n    else:\n        print(best_cost)\nsolution(input())\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    routes = list(map(int, stdin.split()))\n    time_index = {}\n    for i in range(1, N+1):\n        time_index[i] = i\n    for route in routes:\n        for i in range(1, N+1):\n            if i == 1:\n                time_index[i] = 0\n            else:\n                time_index[i] = max(time_index[i-1] + route, time_index[i])\n\n    return str(time_index[N])\n\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    routes = [[int(c_i), int(t_i)] for c_i, t_i in stdin.split()]\n\n    routes.sort()\n    ans = float('inf')\n\n    for i, (c_i, t_i) in enumerate(routes):\n        if t_i <= T:\n            ans = min(ans, c_i + solution(stdin))\n    if ans == float('inf'):\n        print(T)\n    else:\n        print(ans)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    #Write your code here\n    min_cost = T\n    for i in range(1, N+1):\n        cost, time = map(int, stdin.split())\n        if time <= T:\n            cost = min(cost, min_cost)\n            min_cost = cost\n    if min_cost == T:\n        return 'TLE'\n    return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split(\" \"))\n    c = list(map(int, stdin.split(\" \")))\n\n    min_cost = float('inf')\n    min_i = -1\n\n    for i in range(N):\n        if (T - c[i]) <= 0:\n            if min_cost > c[i]:\n                min_cost = c[i]\n                min_i = i\n    if min_cost == float('inf'):\n        return \"TLE\"\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    A, B = int(A), int(B)\n    return str(min(A * 2, B))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    total_cost = N*A + N*B\n    return str(total_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int,stdin.split())\n    return str(max(A*2,B,C))\n\nsolution('''1 2 9\n''')\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N, A, B = int(N), int(A), int(B)\n    return str(min(N * int(A), N * int(B)))\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return f\"{int((a + b) / 2)}\""
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = (int(i) for i in stdin.split())\n\n    return f'{int((A*N + B*N) / 2)}'\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(A * 2 + B)\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(((N*A) + (B*N))/N, (A*B) + (A*N) + (B*N)))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n\n    if n == 1:\n        return str(a)\n    elif n == 2:\n        return str(a + b)\n    else:\n        taxis = str(a)\n        taxis += (n - 1) *'' + str(a) +'' + str(b)\n        return taxis\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    return str(A + B)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here.\n    Return your answer as a string, or print using print\n    \"\"\"\n    anagrams_dict = {}\n    for string in stdin.split():\n        anagrams_dict.setdefault(tuple(sorted(string)), []).append(string)\n\n    result = []\n    for key in anagrams_dict.keys():\n        for i in range(len(anagrams_dict[key])):\n            for j in range(i + 1, len(anagrams_dict[key])):\n                result.append((key[0], anagrams_dict[key][i], anagrams_dict[key][j]))\n\n    return len(set(result))\n\nprint(solution(input()))"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    return solution_part1(lines)\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lst = []\n    for i in range(N):\n        s = stdin.strip()\n        lst.append(s)\n    lst = sorted(lst)\n    temp = []\n    for i in range(N):\n        for j in range(i,N):\n            if lst[i] == lst[j]:\n                temp.append(i)\n                temp.append(j)\n                print(lst[i],lst[j])\n                break\n    return len(temp)\n\nprint(solution(\"5 5 4 5 7 4 1 5 3 5 6 1 5 4 5\"))\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total_pair = 0\n\n    string_list = stdin.split(\"\\n\")\n    for i in range(0, len(string_list) - 1):\n        for j in range(i + 1, len(string_list)):\n            string_1 = string_list[i].lower()\n            string_2 = string_list[j].lower()\n            if sorted(string_1) == sorted(string_2):\n                total_pair += 1\n    return total_pair\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    for i in range(len(stdin) - 1):\n        for j in range(i + 1, len(stdin)):\n            # s1 = stdin[i].split(' ')\n            # s2 = stdin[j].split(' ')\n            # if sorted(s1) == sorted(s2):\n            #     print(i, j)\n            #     return\n            # if sorted(s1) == sorted(s2):\n            #     print(i, j)\n            #     return\n            # print(i, j)\n            if sorted(stdin[i]) == sorted(stdin[j]):\n                print(i, j)\n                return\n    return\n\nsolution('''3\nacornistnt\npeanutbomb\nconstraint\n''')"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    max_length = max(len(string) for string in input_list)\n\n    result_list = []\n    for index in range(len(input_list)):\n        string = input_list[index]\n        string_length = len(string)\n        if (string_length == max_length):\n            string = string.upper()\n            letter_dict = {}\n            for letter in string:\n                if letter in letter_dict:\n                    letter_dict[letter] += 1\n                else:\n                    letter_dict[letter] = 1\n            for letter in letter_dict:\n                letter_dict[letter] = letter_dict[letter] - 1\n            for letter in letter_dict:\n                if letter_dict[letter]!= 0:\n                    result_list.append(str(letter_dict[letter]))\n                    break\n    return len(result_list)"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = {}\n\n    for i in range(n):\n        s = stdin.strip().split(\" \")\n        d[s[0]] = s[1:]\n\n    res = 0\n\n    for i in d:\n        for j in d:\n            if i == j:\n                continue\n            if all(a in d[i] for a in d[j]):\n                res += 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    anagrams = 0\n    for i in range(1, len(a)):\n        s = a[i]\n        s = s.replace(\" \", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"_\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace('\"', \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace('\"', \"\")\n        s = s.replace(\" \",\"\")\n        s = s.replace(\"\\n\", \"\")\n        print(s)\n        for i in range(1, len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j] and i!= j:\n                    print(s[i])\n                    print(s[j])\n                    anagrams += 1\n    return anagrams\n\nprint(solution(input()))\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin.split()[1])\n        print(my_function(k))\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin)\n        yield str(bin(k)[2:].count('1'))\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  qs = int(stdin)\n  for i in range(qs):\n    k = int(stdin.split()[i])\n    q = stdin.split()[i+1]\n    if q == '1':\n      print(k)\n    else:\n      q = int(q)\n      print(int(q // (10**k) % 10))\nsolution(input())\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def digit(x):\n        return int(x)\n\n    def digit2(x):\n        return str(x)\n\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        x = stdin.split()[1]\n        y = digit(x)\n        print(digit2(y))\n    return ''\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://stackoverflow.com/questions/7154324/python-first-n-elements\n    '''\n    #input\n    q = int(stdin)\n    #solution\n    for i in range(q):\n        k = int(stdin)\n        s = \"0\" + str(k)\n        n = 0\n        while n < k:\n            n += len(str(int(s)))\n            s += str(int(s))\n        print(n)"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin)\n        if k == 1:\n            print(0)\n        elif k == 2:\n            print(1)\n        else:\n            print(2)\n    return ''"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    data = stdin.split(\"\\n\")\n    q = int(data[0])\n    res = []\n    for _ in range(q):\n        data = data[1:]\n        data = data[:int(data[0])]\n        num = data[0]\n        digits = []\n        for digit in num:\n            digits.append(int(digit))\n        result = digits[0]\n        for digit in digits[1:]:\n            result *= 10\n            result += digit\n        res.append(str(result))\n    return \"\\n\".join(res)\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        n, k = map(int, stdin.split())\n        print(k // n)"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n    return '\\n'.join(map(str, [solution_fast(queries) for _ in range(queries[0])]))\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1 or k > n:\n        return \"Error\"\n    arr = [[] for _ in range(n)]\n    for i in range(k):\n        x, y = map(int, stdin.split())\n        arr[x - 1].append(y - 1)\n        arr[y - 1].append(x - 1)\n    c = 0\n    v = []\n    for i in range(n):\n        if len(arr[i]) == 1:\n            c += 1\n        else:\n            v.append(len(arr[i]) // 2)\n    v.sort()\n    if c > k:\n        return \"Error\"\n    res = \"\"\n    for i in v:\n        res += str(i) + \" \" + str(i) + \"\\n\"\n    return res[:-1]\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    distances = [[float('inf')] * n for _ in range(n)]\n    distances[0][0] = 0\n    for i in range(n - 1):\n        a, b, distance = map(int, stdin.split())\n        distances[a - 1][b - 1] = distance\n        distances[b - 1][a - 1] = distance\n    max_value = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            max_value = max(max_value, distances[i][j] + distances[j][i])\n    max_value = max(max_value, distances[i][i] + distances[i][i - 1])\n    r = max_value + 1\n    c = [1] * r\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for x in range(r):\n                if distances[i][j] + distances[j][i] + distances[i][i - 1] < x:\n                    c[x] = max(c[x], c[x - distances[i][j] - distances[j][i] - distances[i][i - 1]])\n    if max_value < k:\n        print(r - 1)\n        print(*c)\n    else:\n        print(-1)\n        print(*c)\n    return\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Runs the program, returning what the program would output if it was run from the command line.\n    '''\n\n    n, k = list(map(int, stdin.split()))\n    cities = [[] for _ in range(n)]\n    companies = set()\n    edges = []\n    for i in range(n - 1):\n        x, y = list(map(int, stdin.split()))\n        companies.add(x)\n        companies.add(y)\n        cities[x].append(y)\n        cities[y].append(x)\n        edges.append((x, y))\n    edges.sort()\n    edges = [(x, y) for x, y in edges]\n\n    def color(start: int) -> bool:\n        '''\n        Returns whether the city with the given index is good.\n        '''\n        q = collections.deque()\n        q.append((start, None))\n        color = {start: 'green'}\n        while q:\n            city, prev = q.popleft()\n            color[city] = 'green'\n            if color[prev] == 'green':\n                continue\n            for neighbor in cities[city]:\n                if neighbor == prev:\n                    continue\n                if color[neighbor] == 'green':\n                    continue\n                q.append((neighbor, city))\n                color[neighbor] = 'yellow'\n        for i in range(len(color)):\n            if color[i] == 'green':\n                return True\n        return False\n\n    ans = 0\n    c = collections.defaultdict(list)\n    for i, (x, y) in enumerate(edges):\n        if color(x) and color(y):\n            continue\n        if color(x):\n            c[x].append(y)\n        else:\n            c[y].append(x)\n    if len(c[0]) >= k:\n        ans = 0\n    else:\n        c = collections.Counter(c)\n        ans = max(c.values())\n\n    return str(ans)\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    paths = []\n    for i in range(n - 1):\n        paths.append(list(map(int, stdin.strip().split())))\n\n    cities = {i: [] for i in range(1, n + 1)}\n    for p in paths:\n        cities[p[0]].append(p[1])\n        cities[p[1]].append(p[0])\n\n    # make connections to public roads\n    public_roads = {i: [] for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if cities[i] and cities[j]:\n                for road in range(1, n + 1):\n                    if road not in cities[i] and road not in cities[j]:\n                        public_roads[i].append(road)\n                        public_roads[j].append(road)\n\n    # make connections to private roads\n    private_roads = {i: [] for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j and not cities[i] and not cities[j]:\n                for road in range(1, n + 1):\n                    if road not in cities[i] and road not in cities[j]:\n                        private_roads[i].append(road)\n                        private_roads[j].append(road)\n\n    # take companies that has at least 2 roads\n    companies = {}\n    while private_roads:\n        i = min(private_roads, key=len)\n        if len(private_roads[i]) >= k:\n            companies[i] = private_roads[i]\n        private_roads.pop(i)\n\n    # find the max number of cities that can have two or more roads of one company\n    max_cities = 0\n    for i in companies:\n        max_cities = max(max_cities, len(companies[i]))\n\n    # start coloring\n    result = []\n    for i in range(1, n + 1):\n        if i not in companies:\n            result.append(i)\n        else:\n            result.append(i)\n            result.extend(companies[i])\n\n    while result and max_cities > 0:\n        max_cities -= len(result)\n        result = [min(result)] + result\n    while result and max_cities <= 0:\n        max_cities += len(result)\n        result = result[:-1]\n    for i in result:\n        result.append(i)\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 1:\n        return 0\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0442\u043e\u0431\u044b \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\n    # \u0432\u0435\u0440\u043d\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n    res = 0\n    for _ in range(n):\n        a = set()\n        for j in range(n):\n            if j not in a:\n                a.add(j)\n                for i in range(n):\n                    if i not in a:\n                        a.add(i)\n                        for j in range(n):\n                            if j not in a:\n                                a.add(j)\n                                for i in range(n):\n                                    if i not in a:\n                                        a.add(i)\n                                        for j in range(n):\n                                            if j not in a:\n                                                a.add(j)\n                                                for i in range(n):\n                                                    if i not in a:\n                                                        a.add(i)\n                                                        for j in range(n):\n                                                            if j not in a:\n                                                                a.add(j)\n                                                                for i in range(n):\n                                                                    if i not in a:\n                                                                        a.add(i)\n                                                                        for j in range(n):\n                                                                            if j not in a:\n                                                                                a.add(j)\n                                                                                for i in range(n):\n                                                                                    if i not in a:\n                                                                                        a.add(i)\n                                                                                        for j in range(n):\n                                                                                            if j not in a:\n                                                                                                a.add(j)\n                                                                                                for i in range(n):\n                                                                                                    if i not in a:\n                                                                                                        a.add(i)\n                                                                                                        for j in range(n):\n                                                                                                            if j not in a:\n                                                                                                                a.add(j)\n                                                                                                                for i in range(n):\n                                                                                                                    if i not in a:\n                                                                                                                         a.add(i)\n                                                                                                                    for j in range(n):\n                                                                                                                        if j not in a:\n                                                                                                                              a.add(j)\n                                                                                                                              for i in range(n):\n                                                                                                                                    if i not in a:\n                                                                                                                                       a.add(i)\n                                                                                                                                    for j in range(n):\n                                                                                                                                               if j not in a:\n                                                                                                                                                    a.add(j)\n                                                                                                                                                    for i in range(n):\n                                                                                                                                                      if i not in a:\n                                                                                                                                                             a.add(i)\n                                                                                                                                                             for j in range(n):\n                                                                                                                                                                  if j not in a:\n                                                                                                                                                                     a.add(j)\n                                                                                                                                                                  for i in range(n):\n                                                                                                                                                                         if i not in a:\n                                                                                                                                                                              a.add(i)\n                                                                                                                                                                              for j in range(n):\n                                                                                                                                                                                           if j not in a:\n                                                                                                                                                                                                                   a.add(j)\n                                                                                                                                                                                                                  for i in range(n):\n                                                                                                                                                                                                             if i not in a:\n                                                                                                                                                                                                                a.add(i)\n                                                                                                                                                                                                                for j in range(n):\n                                                                                                                                                                                                                    if j not in a:\n                                                                                                                                                                                                                                            a.add(j)\n                                                                                                                                                                                                                                                  for i in range(n):\n                                                                                                                                                                                                                                               if i not in a:\n                                                                                                                                                                                                                                                                                                              a.add(i)\n                                                                                                                                                                                                                                                                                                              for j in range(n):\n                                                                                                                                                                                                                                                                                                                              if j not in a:\n                                                                                                                                                                                                                                                                                                                                  a.add(j)\n                                                                                                                                                                                                                                                                                                                                   for i in range(n):\n                                                                                                                                                                                                                                                                                                                                                                  if i not in a:\n                                                                                                                                                                                                                                                                                                                                                                   a.add(i)\n                                                                                                                                                                                                                                                                                                                                                                  for j in range(n):\n                                                                                                                                                                                                                                                                                                                                                             if j not in a:\n                                                                                                                                                                                                                                                                                                                                                       "
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    graph = [[] for i in range(n)]\n\n    for i in range(n - 1):\n        x, y = list(map(int, stdin.split()))\n        graph[x].append(y)\n        graph[y].append(x)\n\n    def dfs(i, visited, graph, company):\n        visited.append(i)\n        for j in graph[i]:\n            if j not in visited:\n                dfs(j, visited, graph, company)\n        company.append(i)\n\n    def is_good(visited, company, k, graph, n):\n        good_cities = 0\n        for i in range(n):\n            if i not in visited and len(graph[i]) >= 2:\n                good_cities += 1\n                if good_cities > k:\n                    return False\n        return True\n\n    def solution(visited, graph, company, n, k):\n        if is_good(visited, company, k, graph, n):\n            return company\n        for i in range(n):\n            if i not in visited:\n                dfs(i, visited, graph, company)\n                if is_good(visited, company, k, graph, n):\n                    return company\n\n    return str(solution(list(), graph, [], n, k))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # n, k = map(int, input().split())\n    n, k = int(stdin.split()[0]), int(stdin.split()[1])\n    cities = []\n    for i in range(n):\n        cities.append(int(stdin.split()[i + 2]))\n    cities = set(cities)\n\n    for i in range(k):\n        cities.add(i + 1)\n    cities = list(cities)\n    print(len(cities))\n    return''.join(map(str, cities))\n\n\nsolution(input())\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    edges = collections.defaultdict(list)\n    for _ in range(n - 1):\n        x, y = map(int, stdin.split())\n        edges[x].append(y)\n        edges[y].append(x)\n\n    g = nx.Graph()\n    g.add_nodes_from(range(1, n + 1))\n    for v in range(1, n + 1):\n        g.add_edges_from(edges[v])\n\n    G = nx.Graph()\n    G.add_nodes_from(range(1, n + 1))\n    for v in range(1, n + 1):\n        G.add_edges_from(edges[v])\n\n    for v in range(1, n + 1):\n        if nx.number_connected_components(G) > 1:\n            if nx.number_connected_components(G) <= k:\n                return f\"{v}\"\n\n    r = 1\n    c = []\n    while r <= n:\n        v = 1\n        while v < n + 1:\n            if nx.number_connected_components(G) > 1:\n                if nx.number_connected_components(G) <= k:\n                    return f\"{v}\"\n            v += 1\n        c.append(v)\n        r += 1\n    return \" \".join(map(str, c))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    g = [[] for _ in range(n)]\n    for i in range(n-1):\n        x, y = list(map(int, stdin.split()))\n        x -= 1\n        y -= 1\n        g[x].append(y)\n        g[y].append(x)\n    c = 0\n    dp = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(k):\n            if i > j:\n                break\n            dp[i].append([j, 0])\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j-1][0] < 0:\n                continue\n            for k in range(j+1, n):\n                if dp[i][j-1][0] < 0:\n                    break\n                if dp[k][j-1][0] < 0:\n                    continue\n                if dp[i][j-1][1] == 0:\n                    dp[i][j-1][1] = dp[i][k][1]\n                if dp[i][j-1][1] == 0:\n                    dp[i][j-1][1] = dp[j][k][1]\n                if dp[i][j-1][1] < dp[i][k][1] + dp[k][j][1]:\n                    dp[i][j-1][1] = dp[i][k][1] + dp[k][j][1]\n                    dp[i][j-1][0] = k\n    return str(len(set([x[0] for x in dp[0]]))) + \"\\n\" + \" \".join(map(str, sorted(set([x[0] for x in dp[0]]))))"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        edges[x - 1].append(y)\n        edges[y - 1].append(x)\n\n    cities = sorted(range(n), key=lambda x: len(edges[x]))\n    cnt = [1] * n\n    res = k\n    cur = 0\n    while cur < n - 1:\n        cur = max(cur, edges[cities[cur]][0])\n        res += 1\n        cnt[cities[cur]] = 2\n        if cnt[cities[cur]] == 2:\n            cnt[cities[cur]] = 1\n            break\n        if cnt[cities[cur]] == 0:\n            res += 1\n            cur = cities[cur]\n    return str(res)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n\n    n = int(stdin.pop(0))\n    x_arr = stdin.pop(0).split()\n    x_arr = list(map(int, x_arr))\n\n    min_num = max_num = 0\n\n    for x in x_arr:\n        if x == 0:\n            max_num = max(max_num, min_num + 1)\n            min_num = 0\n        else:\n            min_num = min(min_num + 1, max_num)\n            max_num = max(max_num, min_num)\n\n    return f\"{min_num} {max_num}\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    ans1 = ans2 = ans3 = ans4 = 0\n    for i in range(n):\n        if x[i] == 0:\n            ans1 += 1\n        elif x[i] == 1:\n            ans2 += 1\n        elif x[i] == 2:\n            ans3 += 1\n        else:\n            ans4 += 1\n\n    print(ans1, ans2, ans3, ans4)\n    return str(min(ans1, ans2, ans3, ans4)) + \" \" + str(max(ans1, ans2, ans3, ans4))\n\n\nsolution(\"2\")\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    homes = list(map(int, stdin.pop().split()))\n    moves = int(stdin.pop(0))\n\n    # print(n, homes, moves)\n\n    # 1\n    homes_map = {}\n    for i, x in enumerate(homes):\n        if x in homes_map:\n            homes_map[x].append(i)\n        else:\n            homes_map[x] = [i]\n\n    # print(homes_map)\n\n    # 2\n    homes_map_copy = copy.deepcopy(homes_map)\n\n    # print(homes_map_copy)\n\n    move_count = 0\n    while moves > 0:\n        move_count += 1\n        homes_map_copy = update_homes(homes_map_copy)\n        # print(homes_map)\n        moves -= 1\n\n    return move_count, len(homes_map)\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    stdin = stdin[1:]\n\n    def move(x, y, i, delta):\n        x += delta[0]\n        y += delta[1]\n        if x < 0 or x > n or y < 0 or y > n:\n            return None\n        return x, y\n\n    def explore(x, y, i):\n        visited[x][y] = True\n        distances[x][y] = i\n        for delta in delta_set:\n            if move(x, y, i, delta) is not None:\n                explore(*move(x, y, i, delta))\n\n    n = stdin[0]\n    delta_set = {(0, 1), (0, -1), (1, 0), (-1, 0)}\n    distances = [[-1] * (n + 2) for _ in range(n + 2)]\n    visited = [[False] * (n + 2) for _ in range(n + 2)]\n\n    for i in range(n):\n        explore(stdin[i + 1], stdin[i + 2], i + 1)\n    max_distances = 0\n    for i in range(n + 2):\n        for j in range(n + 2):\n            max_distances = max(max_distances, distances[i][j])\n    min_distances = 0\n    for i in range(n + 2):\n        for j in range(n + 2):\n            min_distances = min(min_distances, distances[i][j])\n    return str(min_distances) + \" \" + str(max_distances)\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, positions = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    positions.sort()\n    #print(positions)\n\n    houses = {}\n    \n    for x in positions:\n        if x > 0:\n            if x - 1 in houses:\n                houses[x - 1] += 1\n            else:\n                houses[x - 1] = 1\n        if x + 1 in houses:\n            houses[x + 1] += 1\n        else:\n            houses[x + 1] = 1\n    \n    #print(houses)\n\n    ans_min = ans_max = 0\n    for value in houses.values():\n        if value < ans_min:\n            ans_min = value\n        if value > ans_max:\n            ans_max = value\n    \n    return f\"{ans_min} {ans_max}\"\n\nprint(solution(input()))\n\n\nsolution(\"4 1 2 4 4\")\nsolution(\"9 1 1 8 8 8 4 4 4 4\")\nsolution(\"7 4 3 7 1 4 3 3\")"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x.reverse()\n    cnt = 0\n    m = 2 * n - 1\n    while m >= 0:\n        for i in range(n):\n            if m - i >= x[i] and m - i <= x[i] + 1:\n                cnt += 1\n        m -= 1\n    print(cnt)\n    return\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    x = list(map(int, stdin.pop(0).split()))\n    x.sort()\n    return f\"{max(x)-min(x)}, {max(x)-min(x)}\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    xy = list(map(int, stdin.strip().split()))\n    x = sorted(set(xy))\n    occ = 0\n    m = 2*(x[1]-x[0])\n    for i in x:\n        m = min(m, 2*(i-x[0]))\n        occ += 1\n    return str(occ) + \" \" + str(m)\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, arr = stdin.split()\n    x = list(map(int, arr.split()))\n    return str(min(x) - 1) +'' + str(max(x))\n    \n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(*permutations([i for i in range(1, n + 1)], n))\n    return''.join(map(str, permutations([i for i in range(1, n + 1)], n)))"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        print(\"1 2\")\n        return\n    if n == 3:\n        print(\"1 2 3\")\n        return\n    if n == 4:\n        print(\"1 2 3 4\")\n        return\n    if n == 5:\n        print(\"1 2 3 4 5\")\n        return\n    print(f\"{n} {n - 1}\")\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    circle = [i for i in range(1, n + 1)]\n    ans = []\n    for _ in range(n):\n        ans.append(circle.pop(0))\n        circle.append(ans[-1])\n    return''.join(map(str, ans))"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n = sorted(range(n))\n\n    p = list(map(int, stdin.split()))\n    k = n.pop(0)\n    p.pop(0)\n    q = p.copy()\n\n    for i in range(k):\n        q.append(p.pop(0))\n\n    for i in range(k):\n        p.append(q.pop(0))\n\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n\n    def sort_p(p):\n        return p[0]\n\n    def swap(p, index_1, index_2):\n        p[index_1], p[index_2] = p[index_2], p[index_1]\n\n    def perm_p(p):\n        if len(p) == 1:\n            return p\n        else:\n            index = len(p) - 1\n            swap(p, 0, index)\n            return perm_p(p[:-1]) + p[index]\n\n    sort_p(p)\n    return perm_p(p)\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    rem_kids = list(map(int, stdin.split()[1:]))\n    perm_kids = list(range(1, n + 1))\n    stdout = []\n\n    def swap(perm_kids, rem_kids):\n        stdout = []\n        perm_kids_index = dict()\n        for i, item in enumerate(perm_kids):\n            perm_kids_index[item] = i\n        for item in rem_kids:\n            stdout.append(perm_kids[perm_kids_index[item]])\n            del perm_kids_index[item]\n        return stdout\n\n    def print_perm(perm_kids):\n        for i, item in enumerate(perm_kids):\n            if i == 0:\n                print(item, end='')\n            else:\n                print(f' {item}', end='')\n\n    def rotate_left(perm_kids, rem_kids):\n        if len(rem_kids) == 1:\n            return swap(perm_kids, rem_kids)\n        else:\n            prev_rotated = swap(perm_kids, rem_kids[:len(rem_kids) // 2])\n            next_rotated = swap(perm_kids, rem_kids[len(rem_kids) // 2:])\n            return rotate_left(next_rotated, prev_rotated)\n\n    print_perm(swap(perm_kids, rem_kids))\n    print()\n    print_perm(rotate_left(perm_kids, rem_kids))\n    return ''\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split()\n\n    x = {i: i for i in range(1, n + 1)}\n    curr = 1\n    for i in range(2, n + 1):\n        x[i] = curr\n        curr = x[curr]\n    print(*x.values())\n    return \" \".join(map(str, x.values()))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = list()\n    n = int(stdin)\n    if n < 3:\n        return stdin\n    lines = stdin.splitlines()\n    for i in range(1, n):\n        result.append(lines[i-1])\n    result.append(lines[0])\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = get_primes(2*n)\n    answer = []\n    for prime in primes:\n        curr = []\n        for num in range(1, n+1):\n            curr.append(num)\n        curr.reverse()\n        answer.append(curr)\n    for i in range(n):\n        x = prime_factorization(curr[i], primes)\n        if x is not None:\n            for j in range(n):\n                if x == answer[j]:\n                    curr[j] = curr[i]\n                    break\n    return''.join([str(i) for i in curr])\n\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = []\n    for _ in range(n):\n        p.append(int(input()))\n    return \" \".join([str(p[i - 1]) for i in range(n + 1)])"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return max(len(set([a for a in stdin.split(\" \")]))-1, 1)"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_team = 0\n    skill = list(map(int, stdin.split()))\n    for i in range(len(skill)):\n        for j in range(i + 1, len(skill)):\n            for k in range(j + 1, len(skill)):\n                difference = abs(skill[i] - skill[j]) + abs(skill[j] - skill[k]) + abs(skill[k] - skill[i])\n                if difference <= 5:\n                    max_team = max(max_team, sum(skill))\n    return str(max_team)\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    a = list(map(int, inputs[1].split()))\n    b = sorted(a, key=lambda x: x)\n    return b[n - 1]\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = stdin.split()\n    if n <= 1:\n        return str(n)\n    else:\n        if n % 2 == 0:\n            a_1, a_2, a_3, a_4, a_5 = list(map(int, stdin))\n            max_a = max(a_1, a_2, a_3, a_4, a_5)\n            for i in range(1, n):\n                if max_a < max(a_1, a_2, a_3, a_4, a_5):\n                    max_a = max(a_1, a_2, a_3, a_4, a_5)\n                for j in range(i + 1, n):\n                    if max_a < max(a_1, a_2, a_3, a_4, a_5) + 5:\n                        max_a = max(a_1, a_2, a_3, a_4, a_5) + 5\n        else:\n            a_1, a_2, a_3, a_4, a_5 = list(map(int, stdin))\n            max_a = max(a_1, a_2, a_3, a_4, a_5)\n            for i in range(1, n):\n                if max_a < max(a_1, a_2, a_3, a_4, a_5):\n                    max_a = max(a_1, a_2, a_3, a_4, a_5)\n                for j in range(i + 1, n):\n                    if max_a < max(a_1, a_2, a_3, a_4, a_5) + 5:\n                        max_a = max(a_1, a_2, a_3, a_4, a_5) + 5\n        return str(max_a)\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    scores = list(map(int, stdin.split()))\n    scores = sorted(scores, reverse=True)\n    max_score = scores[0]\n    while max_score - 5 > 0:\n        max_score -= 5\n        scores.pop(0)\n    return len(scores)\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    team = list(map(int, stdin.split()[1:]))\n    return str(len(max(group_consecutive_max(team, 5), key=lambda x: abs(sum(x) - n // len(x)))) + 1)\n\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sorted(list(map(int, stdin.split()))).index(max(sorted(list(map(int, stdin.split()))))) + 1)"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set([int(x) for x in stdin.split()])))\n    return len(set([int(x) for x in stdin.split()]))\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 6\n    # stdin = \"1 10 17 12 15 2\"\n    # n = 10\n    # stdin
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    n = int(a[0])\n    a = list(map(int, a[1].split()))\n    a.sort()\n    s = 1\n    t = 1\n    for i in range(1, n):\n        s = s+1\n        t = max(s, t)\n        if abs(a[i]-a[i-1]) >= 5:\n            s = 1\n    return t\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_turns_to_play():\n        c = 0\n        max_c = 0\n        for _ in range(n):\n            c += charge_to_play[c]\n            max_c = max(max_c, c)\n        if max_c == 0:\n            return -1\n        else:\n            return n - max_c\n\n    n, k, a, b = map(int, stdin.split())\n    charge_to_play = [0]\n    for i in range(n):\n        charge_to_play.append(a if i > 0 and charge_to_play[i - 1] < a else b)\n    max_turns_to_play = get_max_turns_to_play()\n    if max_turns_to_play == -1:\n        return str(max_turns_to_play)\n    else:\n        return str(n - max_turns_to_play)\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.split())\n        if a < b and a > 0 and b > 0:\n            if n > k:\n                ans = n-1\n            else:\n                ans = 0\n            if ans > -1:\n                return str(ans)\n        else:\n            if n > k:\n                ans = -1\n            else:\n                ans = 0\n            if ans > -1:\n                return str(ans)\n    return ans\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n,k,a,b = map(int,stdin.split())\n        c = n-1\n        if a>=b and b<a:\n            print(c)\n        elif a>b and a<b:\n            print(c)\n        else:\n            print(-1)\n\n    return ''\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.strip().split()))\n    if n == 1:\n        if k >= a:\n            return '-1'\n        else:\n            return b - a\n    if a > b:\n        return '-1'\n    if a == 0 or b == 0:\n        return '0'\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = k\n    for i in range(n):\n        a = dp[i]\n        b = a - a // 2 + a // 2\n        c = b - a // 2 + a // 2\n        if i == 0 or b > a:\n            continue\n        if i == n - 1:\n            return str(c)\n        for j in range(i + 1, n):\n            a = c\n            b = a - a // 2 + a // 2\n            c = b - a // 2 + a // 2\n            if a > b and c > b:\n                continue\n            if a > b and c <= b:\n                dp[j] = c\n            elif a < b and c <= b:\n                dp[j] = c\n            else:\n                continue\n    return str(max(dp))\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each query print one integer: -1 if Vova cannot complete the game or the maximum number of turns Vova can just play (make the first type turn) otherwise.\n    \"\"\"\n    q = int(stdin)\n    for i in range(q):\n        k, n, a, b = map(int, stdin.split())\n        if k + a > b:\n            print(-1)\n        elif k + b > a:\n            print(n - (k - b) + 1)\n        elif k >= a and k + b >= a:\n            print(-1)\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    in_q = int(stdin)\n    for i in range(in_q):\n        n, k, a, b = map(int, stdin.split())\n        if n == 1:\n            if k > a:\n                print(a)\n            else:\n                print(-1)\n        else:\n            if (a * 2) >= k and (a * 2) >= b:\n                print(a)\n            else:\n                print(-1)\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k, a, b = map(int, stdin[0].split(' '))\n    if n == 1:\n        return str(0)\n    a = a - k\n    b = b - k\n    if a <= 0 and b <= 0:\n        return str(n)\n    if b > 0 and a > 0:\n        return str(n - 1)\n    if a > 0 and b < 0:\n        return str(-1)\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '-1' if True else str(max(len(input().split()) for _ in range(int(stdin.split()[0]))))"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, q = stdin.split()\n    for _ in range(int(q)):\n        _, k, n, a, b = stdin.split()\n        k, n, a, b = int(k), int(n), int(a), int(b)\n        if a == 0:\n            return '-1'\n        if b < a:\n            return '0'\n        if a < 0 or b < 0:\n            return '0'\n        if k >= n:\n            return str(n - 1)\n        if a <= k <= b:\n            return str(k - 1)\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split()))\n    return \"2\" if a <= n and n <= b else \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time limit exceeded\n    '''\n    s = stdin\n    k = int(input())\n    letters = ['a', 'b', 'c']\n    number_of_k_moves = 2 ** k\n    for i in range(number_of_k_moves):\n        new_s = ''\n        for j in range(len(s)):\n            if i & (1 << j):\n                new_s += s[j]\n        if new_s.count('?') == 0:\n            print(new_s)\n    return\nsolution(stdin)\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    d = {k:0 for k in \"abc\"}\n    for i in range(0, l):\n        if s[i] == \"?\":\n            d[\"a\"] = d[\"a\"] + 1\n        elif s[i] == \"b\":\n            d[\"b\"] = d[\"b\"] + 1\n        elif s[i] == \"c\":\n            d[\"c\"] = d[\"c\"] + 1\n    return sum(d.values()) % (10**9+7)\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[1]\n    s = s.replace(\"?\", \"a\")\n    return str(len(set([s[0:i] + s[i+1:] for i in range(len(s))])))\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    result = 0\n    result %= pow(10,9) + 7\n    for i in range(1, n):\n        if s[:i] == \"?\":\n            result += pow(9, i)\n    return result"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    return str(sum(len(x) - x.count('?') for x in s))\nprint(solution(input()))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    s = stdin\n    n = 3\n\n    def answer(s, n):\n        if len(s) == 0:\n            return 0\n\n        if len(s) < 3:\n            return 1\n\n        if len(s) == 3:\n            if s == \"abc\":\n                return 2\n\n        if s[0] == \"?\":\n            s = s[1:]\n\n        if s[0] == \"a\":\n            a = answer(s[1:], n)\n            b = answer(s[2:], n)\n            c = answer(s[3:], n)\n            return a + b + c\n\n        if s[0] == \"b\":\n            b = answer(s[1:], n)\n            c = answer(s[2:], n)\n            a = answer(s[3:], n)\n            return a + b + c\n\n        if s[0] == \"c\":\n            c = answer(s[1:], n)\n            a = answer(s[2:], n)\n            b = answer(s[3:], n)\n            return a + b + c\n\n        return answer(s[1:], n)\n\n    return str(answer(s, n))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(get_all_possible_substrings(stdin)))\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    k = 0\n    ans = 0\n    for i in range(1, n + 1):\n        if s[i - 1] == '?':\n            s = s[:i - 1] + s[i:]\n            k += 1\n            ans += 1 << (k - 1)\n    return str(ans % (10 ** 9 + 7))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.count(\"?\")\n    b = len(stdin) - a\n    if a == 0:\n        return pow(2, b)\n    else:\n        c = pow(3, a)\n        d = pow(3, b)\n        return c * d\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n\n    graph = {}\n    # build a graph\n    for i in range(1, n+1):\n        graph[i] = []\n        for j in range(1, n+1):\n            if i!= j:\n                graph[i].append(a[j-1])\n\n    # print the graph\n    print(graph)\n\n    # preprocess\n    visited = {}\n    for i in range(1, n+1):\n        visited[i] = False\n\n    # find all the paths\n    def find_all_paths(start, end, path):\n        if start == end:\n            print(path)\n        else:\n            for i in graph[start]:\n                if not visited[i]:\n                    visited[i] = True\n                    find_all_paths(i, end, path + [i])\n                    visited[i] = False\n\n    find_all_paths(1, n, [1])\n    return \"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return str(min_num_coins(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])))\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    pairs = [(i, i + 1) for i in range(n - 1)]\n    pair_combinations = itertools.combinations(pairs, 2)\n    possible_edges = [(i, j) for i, j in pair_combinations if abs(a[i[0]] - a[i[1]]) <= a[i[0]] + a[i[1]]]\n    return len(possible_edges)\n\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            graph[i].append(j)\n            graph[j].append(i)\n    min_coins = float('inf')\n    for x, y, w in map(int, stdin.split()):\n        if (x, y) in graph[x] and (y, x) in graph[y]:\n            if min_coins > w:\n                min_coins = w\n        if (x, y) in graph[x] and (y, x) not in graph[y]:\n            if min_coins > w + a[x] + a[y]:\n                min_coins = w + a[x] + a[y]\n        if (x, y) not in graph[x] and (y, x) in graph[y]:\n            if min_coins > w + a[x] + a[y]:\n                min_coins = w + a[x] + a[y]\n        if (x, y) not in graph[x] and (y, x) not in graph[y]:\n            if min_coins > w + a[x] + a[y] + a[x] + a[y]:\n                min_coins = w + a[x] + a[y] + a[x] + a[y]\n    return str(min_coins)\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    graph = [int(x) for x in stdin.split()]\n    vertices = set()\n    for i in range(1, n + 1):\n        vertices.add(i)\n    visited = set()\n    visited.add(0)\n    prev = {0: None}\n    cost = 0\n    while len(visited) < n:\n        for vertex in vertices:\n            if vertex not in visited and 0 < graph[vertex] <= cost:\n                prev[vertex] = 0\n                cost = graph[vertex]\n                visited.add(vertex)\n    answer = 0\n    for i in range(1, n + 1):\n        if i not in visited:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    costs = [0] * n\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n        costs[a-1] += c\n        costs[b-1] += c\n    visited = set()\n    queue = deque([(i, 0) for i in range(n) if i not in visited])\n    while queue:\n        node, weight = queue.popleft()\n        visited.add(node)\n        for nei in graph[node]:\n            if nei not in visited:\n                queue.append((nei, weight + costs[nei]))\n    return sum(weight for node, weight in visited)\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for i in range(1, n):\n        edges[a[i] - 1].append(a[i - 1])\n        edges[a[i - 1] - 1].append(a[i])\n    min_coins = 0\n    for i in range(m):\n        # find the number of edges that are there that cost w, or that are going to connect a and b\n        w, a, b = map(int, stdin.split())\n        c = a + b - 1\n        min_c = min(b, a) + w\n        min_coins += min(min_c, min(w, c))\n        # if there is a special offer:\n        # find the minimum of edges that can be added and the cost to add the edges\n        min_c = min(min(b, a), c) + w\n        min_coins += min(min_c, min(w, c))\n    return str(min_coins)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, input().split())\n    arr = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        arr.append((l, r))\n    start = 0\n    end = a\n    while end < a + 1:\n        for i in range(len(arr)):\n            if start <= arr[i][0] <= end:\n                if arr[i][1] <= end:\n                    end = arr[i][1]\n                    break\n            if start <= arr[i][1] <= end:\n                if arr[i][0] <= end:\n                    end = arr[i][0]\n                    break\n        if end <= start:\n            break\n        start = end\n        end += 1\n    if end == a + 1:\n        return \"-1\"\n    total_fatigue = 0\n    for i in range(len(arr)):\n        total_fatigue += arr[i][0] * arr[i][1]\n    total_fatigue += sum([x * y for x, y in arr])\n    return str(total_fatigue)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read stdin.\n    a, n, m = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(n):\n        l, r = list(map(int, input().split()))\n        segments.append((l, r))\n\n    umbrellas = []\n    for _ in range(m):\n        x, p = list(map(int, input().split()))\n        umbrellas.append((x, p))\n\n    # Find the answer.\n    best = n + 1\n    for i in range(1, n + 1):\n        if i not in (segments):\n            segment = i\n            break\n    if segment == n:\n        return \"-\"\n\n    umbrella_num = len(umbrellas)\n    f = 0\n    for i in range(umbrella_num):\n        f += umbrellas[i][1]\n    for i in range(umbrella_num):\n        x_i, p_i = umbrellas[i]\n        x_j = x_i\n        while x_j <= segment:\n            if x_j in (segments):\n                break\n            x_j += 1\n\n        if x_j > segment:\n            continue\n        if x_i in (segments):\n            f -= p_i\n\n        x_i = x_j - 1\n        while x_i <= segment:\n            if x_i in (segments):\n                break\n            x_i += 1\n\n        if x_i > segment:\n            continue\n        if x_j in (segments):\n            f += p_i\n\n        if f < best:\n            best = f\n\n    return str(best)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def split(line):\n        return list(map(int, line.split()))\n\n    a, n, m = map(int, stdin.split())\n    rain = []\n    for _ in range(m):\n        rain.append(split(stdin))\n\n    umbrellas = []\n    for _ in range(n):\n        umbrellas.append(split(stdin))\n\n    # dp[i][j] = maximum amount of fatigue from the umbrellas to the point of intersection of $i$-th segment with $j$-th segment\n    dp = [[0] * (a + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for u in range(i):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + umbrellas[i - 1][0] + umbrellas[j - 1][1] + rain[i - 1][0] + rain[i - 1][1])\n\n    def backpack_capacity(umbrella, i, j):\n        if i == 0:\n            return 0\n        if j == i:\n            return umbrellas[i - 1][0]\n        return max(backpack_capacity(umbrella, i, j - 1), backpack_capacity(umbrella, i - 1, j - 1)) + umbrella[i - 1][0] + umbrella[j - 1][1] + rain[i - 1][0] + rain[i - 1][1]\n\n    return str(backpack_capacity(umbrellas, n, a))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def print_max(a, b):\n        print(max(a, b))\n    def print_min(a, b):\n        print(min(a, b))\n    a, n, m = list(map(int, stdin.split()))\n    if a >= n:\n        print(\"-1\")\n        return\n    segments = []\n    umbrellas = []\n    for i in range(m):\n        umbrella = list(map(int, stdin.split()))\n        umbrellas.append(umbrella[1])\n        segments.append(umbrella[0])\n    umbrella = list(map(int, stdin.split()))\n    umbrellas.append(umbrella[1])\n    segments.append(umbrella[0])\n    segments.sort()\n    umbrellas.sort()\n    print_min(sum(umbrellas), a)\n    total_fatigue = 0\n    i = 0\n    while i < n:\n        if segments[i] >= a:\n            if umbrellas[i]!= 0:\n                umbrella_i = i\n                i = i + 1\n                total_fatigue = total_fatigue + (a - segments[i - 1])\n                while i < n and umbrellas[i]!= 0:\n                    umbrella_i = i\n                    i = i + 1\n                    total_fatigue = total_fatigue + (a - segments[i - 1])\n                if umbrella_i!= i - 1:\n                    print_min(total_fatigue, a)\n                    return\n            else:\n                print_min(total_fatigue, a)\n                return\n        total_fatigue = total_fatigue + umbrellas[i]\n        i = i + 1\n    print_max(total_fatigue, a)\n    return\n\nsolution(input())\n\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n-1\n\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n-1\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n-1\n\nInput\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\nOutput\n14\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45\n\nInput\n10 1 1\n0 9\n1 5\n\nOutput\n45"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = list(map(int, stdin.split()))\n    segments = [(int(i), int(j)) for i, j in [stdin.split() for _ in range(n)]]\n    umbrellas = [(int(i), int(j)) for i, j in [stdin.split() for _ in range(m)]]\n\n    x = 0\n    total_fatigue = 0\n    remaining_umbrellas = {i: 0 for i in umbrellas}\n    for i, segment in enumerate(segments):\n        l, r = segment\n        x = max(0, x + 1)\n        if x + 1 > r:\n            total_fatigue += l * i\n        if x + 1 in umbrella_borders:\n            total_fatigue += max(remaining_umbrellas.values()) * i\n            for j, (umbrella_i, weight_i) in enumerate(remaining_umbrellas.items()):\n                if umbrella_i == x + 1:\n                    del remaining_umbrellas[umbrella_i]\n                    remaining_umbrellas[umbrella_i] += weight_i\n                    break\n\n    return str(total_fatigue)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    a, n, m = int(input[0].split()[0]), int(input[0].split()[1]), int(input[0].split()[2])\n    ranges = []\n    for i in range(1, n + 1):\n        ranges.append([int(i) for i in input[i].split()])\n    cnt_umbrellas = []\n    for i in range(m):\n        x, p = int(input[i + n + 1].split()[0]), int(input[i + n + 1].split()[1])\n        umbrella = []\n        umbrella.append(x)\n        umbrella.append(p)\n        cnt_umbrellas.append(umbrella)\n\n    # print(ranges, cnt_umbrellas)\n    res = []\n    def move(x, flag=True):\n        if flag:\n            # print(x, x+1)\n            if not (ranges[x][0] < x < ranges[x][1]):\n                res.append(0)\n                return\n        else:\n            if not (x < ranges[x][0]):\n                res.append(0)\n                return\n        res.append(move(x, False))\n        return move(x+1, flag)\n    move(0, True)\n    print(res)\n    # print(res)\n    def can_throw(umbrellas, x, y):\n        for i in range(len(umbrellas)):\n            if umbrellas[i][0] <= x and umbrellas[i][1] >= y:\n                return False\n        return True\n    def throw(umbrellas):\n        i = 0\n        j = 1\n        while True:\n            if umbrellas[i][0] > umbrellas[j][1]:\n                i += 1\n                if i == len(umbrellas):\n                    return True\n                j += 1\n            elif umbrellas[i][0] < umbrellas[j][1]:\n                return False\n            elif umbrellas[i][0] == umbrellas[j][1] and i!= j:\n                return False\n            else:\n                i += 1\n                j += 1\n    # print(cnt_umbrellas)\n    for i in range(len(cnt_umbrellas)):\n        umbrellas = cnt_umbrellas[i]\n        x = umbrellas[0]\n        y = umbrellas[1]\n        if can_throw(cnt_umbrellas, x, y):\n            # print('can_throw', i, x, y)\n            umbrellas = umbrellas.copy()\n            umbrellas.reverse()\n            if throw(umbrellas):\n                print('throw')\n                return str(x)\n            else:\n                print('not_throw')\n                continue\n        else:\n            print('can_throw', i, x, y)\n            umbrellas = umbrellas.copy()\n            umbrellas.reverse()\n            if throw(umbrellas):\n                print('throw')\n                return str(y)\n            else:\n                print('not_throw')\n                continue\n        \n    print(res)\n    return '-1'\n\nsolution('''\n10 1 1\n0 9\n0 5\n\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\n10 1 1\n0 9\n1 5\n\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n\n10 1 1\n0 9\n1 5\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n\n    nums = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        nums.append([l, r])\n\n    nums = sorted(nums)\n\n    running = []\n    for i in range(n):\n        running.append(0)\n\n    print(running)\n\n    for _ in range(m):\n        x, p = map(int, stdin.split())\n        running[x] += p\n        print(running)\n\n    for i in range(n):\n        if running[i] >= a:\n            return \"-1\"\n\n    return sum(running)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    a = int(lines[0])\n    n = int(lines[1])\n    m = int(lines[2])\n\n    points = []\n    umbrellas = []\n    cur_umbrella = None\n    cur_umbrella_weight = 0\n\n    for i in range(n):\n        l, r = stdin.split()\n        points.append((int(l), int(r)))\n        umbrellas.append((int(l), int(r), int(0)))\n\n    for i in range(m):\n        x, p = stdin.split()\n        umbrella = umbrellas[int(x)]\n        cur_umbrella = umbrella\n        cur_umbrella_weight = p\n\n    umbrella_weights = []\n    for i in range(len(umbrellas)):\n        umbrella_weights.append(cur_umbrella_weight)\n\n    points.sort()\n\n    right_points = []\n    right_points.append(points[0])\n    points.pop(0)\n\n    points.sort(key=lambda x: x[0])\n    left_points = []\n    left_points.append(points[0])\n    points.pop(0)\n\n    l_umbrella_weight = umbrella_weights[0]\n\n    total_fatigue = 0\n\n    total_fatigue += umbrella_weights[0]\n\n    for i in range(1, n):\n        cur_umbrella = umbrellas[i]\n\n        l_umbrella_weight = cur_umbrella_weight\n\n        if l_umbrella_weight + umbrella_weights[i] > a:\n            total_fatigue += l_umbrella_weight\n            umbrella_weights[i] = a - l_umbrella_weight\n            left_points.append(points[i])\n            points.pop(i)\n\n        else:\n            umbrella_weights[i] += l_umbrella_weight\n            left_points.append(points[i])\n            points.pop(i)\n\n        if i == n - 1:\n            break\n        else:\n            if cur_umbrella_weight + umbrella_weights[i] > a:\n                right_points.append(points[i + 1])\n                points.pop(i + 1)\n            else:\n                right_points.append(points[i + 1])\n                points.pop(i + 1)\n\n    if l_umbrella_weight + umbrella_weights[i] > a:\n        total_fatigue += l_umbrella_weight\n        right_points.append(points[i])\n        points.pop(i)\n\n    if points:\n        if points[0][0] <= 0:\n            total_fatigue += points[0][0]\n            points.pop(0)\n\n    if points:\n        if points[-1][1] >= a:\n            total_fatigue += points[-1][1]\n            points.pop(-1)\n\n    if points:\n        if points[0][1] <= 0:\n            total_fatigue += points[0][1]\n            points.pop(0)\n\n    left_points.append(points[0])\n    points.pop(0)\n\n    right_points.reverse()\n\n    cur_left_umbrella_weight = umbrella_weights[0]\n\n    total_fatigue += umbrella_weights[0]\n    right_points.reverse()\n\n    for i in range(1, n):\n        cur_umbrella = umbrellas[i]\n        if cur_left_umbrella_weight + cur_umbrella_weight > a:\n            total_fatigue += cur_left_umbrella_weight\n            right_points.append(points[i])\n            points.pop(i)\n            cur_left_umbrella_weight = cur_umbrella_weight\n            cur_umbrella_weight = umbrella_weights[i]\n        else:\n            cur_left_umbrella_weight += cur_umbrella_weight\n            right_points.append(points[i])\n            points.pop(i)\n            cur_umbrella_weight = umbrella_weights[i]\n\n    if cur_left_umbrella_weight + cur_umbrella_weight > a:\n        total_fatigue += cur_left_umbrella_weight\n\n    if points:\n        if points[0][0] <="
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = list(map(int, stdin.strip().split()))\n    ans = 0\n    count = 0\n    s = set()\n    for i in range(n):\n        l, r = map(int, stdin.strip().split())\n        if l in s and r in s:\n            continue\n        s.add(l)\n        s.add(r)\n        count += 1\n    for i in range(m):\n        x, p = map(int, stdin.strip().split())\n        if x in s:\n            continue\n        s.add(x)\n        ans += (p * count)\n    return str(ans)\n    # return solution(\n    #     \"10 1 1\"\n    # )\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    n = int(n)\n    m = int(m)\n    umbrellas = list(map(int, stdin.split()))\n    umbrellas = sorted(umbrellas, reverse=True)\n    res = -1\n    for i in range(n):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n, m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n, m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    umbrellas.sort(reverse=True)\n    print(umbrellas)\n    for i in range(n):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n, m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n, m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    print(umbrellas)\n    for i in range(n):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    for i in range(n, m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    print(umbrellas)\n    for i in range(m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    print(umbrellas)\n    for i in range(m):\n        if umbrellas[i] > a:\n            umbrellas[i] = a\n    print(umbrellas)\n    return str(sum([umbrellas[i] * i for i in range(len(umbrellas))]))\nsolution(stdin)\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    if A == B and C!= A:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Returns solution to the problem \"\"\"\n\n    A, B, C = map(int, stdin.split())\n\n    if A == B == C:\n        return 'Yes'\n    elif A == B or A == C or B == C:\n        return 'Yes'\n\n    return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin\n    if A == C and (A!= B or C!= A):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b and b!= c or a == c and c!= b or b == a and a!= c:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or b == c or a == c:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if (int(stdin.split()[0]) == int(stdin.split()[1]) == int(stdin.split()[2]) and stdin.split()[0]!= stdin.split()[2]) else 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    if A == C:\n        if B!= A and B!= C:\n            return 'Yes'\n        else:\n            return 'No'\n    elif A!= C:\n        if A == B or A == C:\n            return 'Yes'\n        else:\n            return 'No'\n    elif B!= A:\n        if A == B and C!= A:\n            return 'Yes'\n        else:\n            return 'No'\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a == b and b!= a or b == c and c!= b or c == a and a!= b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and A == C:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin[0]) == int(stdin[1]) == int(stdin[2]) and \\\n            stdin[0]!= stdin[2] else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(\" \")\n    n = int(n)\n    a = int(a)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = []\n    for i in range(n):\n        if (arr[i] - a) > 0:\n            ans.append(i)\n    return str(ans[0]) if len(ans) > 0 else -1\nsolution(input())\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N = int(stdin)\n    T, A = map(int, stdin.split())\n    H = map(int, stdin.split())\n    # H.sort()\n    # print(H)\n    # H = sorted(H)\n    # print(H)\n    # H = sorted(H, key=lambda i: i * 0.006, reverse=True)\n    H = sorted(H)\n    count = 1\n    for i in range(1, N):\n        if T - H[i] * 0.006 > H[i] - T * 0.006:\n            count = i + 1\n    return str(count)\n\nsolution(input())\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *xs = list(map(int, stdin.split()))\n    xs = sorted(xs, key=lambda x: x - a)\n    return str(xs.index(a) + 1)"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    T = list(map(int, stdin.split()))\n    T_lowest = min(T)\n    for index, t in enumerate(T):\n        if t == T_lowest:\n            index_t_lowest = index\n    max_diff = max(abs(T_lowest - A), abs(T_lowest - A))\n    for i in range(index_t_lowest - max_diff, index_t_lowest + max_diff + 1):\n        if abs(T[i] - A) < abs(T_lowest - A):\n            T_lowest = T[i]\n            index_t_lowest = i\n    return str(index_t_lowest)\n\nsolution(input())\n\"\"\"\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t, a, *h = map(int, stdin.split())\n\n    def dist(m):\n        return (m - a) * 0.006\n\n    h = sorted(h, key=dist)\n    min_diff = dist(h[0])\n    min_idx = 0\n    for i in range(1, n):\n        if dist(h[i]) < min_diff:\n            min_diff = dist(h[i])\n            min_idx = i\n\n    return h[min_idx]\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A, *H = list(map(int, stdin.split()))\n    min_elev = min(H)\n\n    dist = 10e10\n    cand = -1\n    for i in range(N):\n        elev = H[i] - min_elev\n        dist = min(dist, elev * 0.006)\n\n        if dist == 0:\n            cand = i\n            break\n    \n    print(cand)\n\n    return None\n\nprint(solution(input()))\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, a, *s = stdin.split()\n    n = int(n)\n    h = list(map(int, s))\n    i = 0\n    while i < n:\n        if abs(int(a) - h[i]) < abs(int(a) - h[i - 1]):\n            i += 1\n        else:\n            return str(i)\n    return str(i + 1)"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    n = stdin[0]\n    T = stdin[1]\n    heights = stdin[2:]\n    heights = list(map(int, heights))\n    h_min = min(heights)\n    h_max = max(heights)\n    if abs(h_min - T) < abs(h_max - T):\n        return \"1\"\n    return \"2\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *h = list(map(int, stdin.split()))\n    h = sorted(h, reverse=True)\n    best = 0\n    for i in range(n):\n        if a - h[i] >= 0:\n            best = i + 1\n    print(best)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    \"\"\"\n    n = int(stdin)\n    temperatures = list(map(int, stdin.split()))\n    max_temperature = max(temperatures)\n    min_temperature = min(temperatures)\n    lowest_difference = float('inf')\n    optimum_temperature = 0\n    for i in range(1, n):\n        average_difference = max_temperature - temperatures[i]\n        if average_difference < 0:\n            continue\n        if average_difference < lowest_difference:\n            lowest_difference = average_difference\n            optimum_temperature = i\n    print(optimum_temperature)\n    return\n\nsolution()"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1\n   ... 3 1\n   ... 5 1\n   ... 7 1\n   ... ''')\n    '1'\n    >>> solution('''4 5\n   ... 8 5\n   ... 9 5\n   ... 12 5\n   ... 16 5\n   ... 18 5\n   ... ''')\n    '0'\n    >>> solution('''1 1\n   ... 3 2\n   ... 6 3\n   ... 9 5\n   ... 12 5\n   ... 15 7\n   ... ''')\n    '1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    elif m == 1:\n        return str(1)\n    else:\n        a = solution(stdin.split())\n        return str(n*m-int(n+a)-int(m+a))\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    if (N + M) % 2 == 0:\n        return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    return str(numberOfWays(N, M))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n\n    def test_sum(sum):\n        for n in range(1, n + 1):\n            if sum % 2 == 0:\n                if (n + m) % 2!= 0:\n                    return 1\n            else:\n                if (n + m) % 2 == 0:\n                    return 1\n        return 0\n\n    return str(test_sum(n + m))\n\nprint(solution(\"2 1\"))\nprint(solution(\"5 2\"))\nprint(solution(\"100 10\"))\nprint(solution(\"3 3\"))\nprint(solution(\"10 10\"))\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    possibilities = set([i+j for i in range(2, n+1) for j in range(2, m+1)])\n    odd = set([i for i in range(2, n+1) if i in possibilities and i % 2 == 1])\n    even = set([i for i in range(2, n+1) if i in possibilities and i % 2 == 0])\n    return len(odd) + len(even)\nprint(solution(input()))\n\n------------------------------------------------"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # 1\n    return str(1)\n\nsolution(input())\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(sum([(N+M)*x % 2 for x in range(1, N+1)]) % 2)\n\nprint(solution(input()))\n\n----Hints----\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    odd_sum = 0\n    even_sum = 0\n    for i in range(N + M):\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return f\"{even_sum} {odd_sum}\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,M=map(int,stdin.split())\n    print(count(N,M))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [N,M] = stdin.split()\n    N = int(N)\n    M = int(M)\n\n    if N == M:\n        return '1'\n\n    if N%2 == 1:\n        return str(N//2 + 1)\n\n    if M%2 == 1:\n        return str(N//2 + 1)\n\n    if N%2 == 0:\n        return str(N//2)"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, q = stdin.split()\n    n = int(n)\n    q = int(q)\n    s = stdin.strip()\n    str_list = [\"\"] * n\n    for i in range(n):\n        str_list[i] = s[i]\n    count_a = 0\n    count_c = 0\n    count_g = 0\n    count_t = 0\n    for i in range(q):\n        l, r = stdin.split()\n        l = int(l)\n        r = int(r)\n        # get the string\n        for i in range(l-1, r):\n            str_list[i] = \"\".join(str_list[i])\n        # count occurences\n        count_a += str_list[l-1].count(\"A\")\n        count_c += str_list[l-1].count(\"C\")\n        count_g += str_list[l-1].count(\"G\")\n        count_t += str_list[l-1].count(\"T\")\n        # reset str_list\n        str_list = [\"\"] * n\n    return count_a + count_c + count_g + count_t\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    s = stdin.strip()\n    q_dict = {i: [] for i in range(1, q + 1)}\n\n    for i in range(q):\n        l, r = map(int, stdin.strip().split())\n        q_dict[i + 1].append((l, r))\n\n    for i in range(q):\n        st = s[q_dict[i + 1][0][0] - 1:q_dict[i + 1][0][1]]\n        counter = 0\n        for j in range(q_dict[i + 1][0][0], q_dict[i + 1][0][1]):\n            if st[j - q_dict[i + 1][0][0]] == st[j]:\n                counter += 1\n        q_dict[i + 1].append(counter)\n\n    return '\\n'.join(map(str, q_dict.values()))\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    input_n = int(input_lines[0])\n    input_q = int(input_lines[1])\n    input_strings = input_lines[2:]\n    for i in range(input_q):\n        start = int(input_strings[i*2])\n        end = int(input_strings[i*2 + 1])\n        print(count_pattern(input_strings, start, end))\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = stdin.split(' ')\n    n = int(n)\n    q = int(q)\n    s = stdin.split('\\n')\n    # Your code goes here\n    count = 0\n    for i in range(q):\n        query = stdin.split('\\n')[i+1]\n        l, r = map(int, query.split())\n        count += 0 if s[l-1]!= s[r-1] else 1\n    return str(count)\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin.pop(0))\n    Q = int(stdin.pop(0))\n    substrings = stdin\n    substrings.sort()\n    for i in range(Q):\n        l_i = int(substrings.pop(0))\n        r_i = int(substrings.pop(0))\n        count = count_substring(substrings, l_i, r_i)\n        print(count)\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_substring(S: str, l_i: int, r_i: int) -> str:\n        return S[l_i:r_i + 1]\n\n    N, Q = map(int, stdin.split())\n    ans = ''\n    for i in range(Q):\n        l_i, r_i = map(int, stdin.split())\n        ans += str(len(get_substring(S, l_i - 1, r_i - 1))) + '\\n'\n    return ans[:-1]\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N, Q = map(int, stdin.split())\n    S = stdin[:N]\n\n    def count_substring(substring: str, substring_len: int) -> int:\n        count = 0\n        substring_start = substring_len - 1\n        while substring_start < len(substring) - substring_len + 1:\n            substring_end = substring_start + substring_len\n            if substring_start == 0:\n                count += substring.count('A')\n            else:\n                substring_first_letter = substring[substring_start - 1]\n                substring_last_letter = substring[substring_end]\n                if substring_first_letter == substring_last_letter:\n                    count += 1\n            substring_start += 1\n        return count\n\n    for i in range(1, Q + 1):\n        l, r = map(int, stdin.split())\n        print(count_substring(S, r - l + 1))\n    return ''\n\nsolution('''2\n5\n8\n9\n5\n2\n''')\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    n = int(stdin.split()[1])\n    ans = []\n    for _ in range(num):\n        s = stdin.split()\n        l, r = int(s[1]), int(s[2])\n        cnt = 0\n        ans_str = \"\"\n        for i in range(n):\n            if i >= l and i < r:\n                if s[0] == \"AC\":\n                    ans_str += s[0]\n                    cnt += 1\n            else:\n                ans_str += s[0]\n        ans.append(str(cnt) + \" \" + ans_str)\n    return \"\\n\".join(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, c, g, t = stdin\n    return (a + c + g + t).count(\"AC\")"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (N, K) = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    # sort prices in the ascending order\n    prices.sort()\n    # initialize minimum total price\n    min_price = 0\n    # use two variables to keep track of the index of left and right\n    left, right = 0, N - 1\n    while left <= right:\n        # if the price of one fruit is greater than K, we need to increase the index of left\n        if prices[left] <= K:\n            min_price += prices[left]\n            left += 1\n        # if the price of one fruit is less than K, we need to decrease the index of right\n        elif prices[right] <= K:\n            min_price += prices[right]\n            right -= 1\n        else:\n            # if we have two fruits whose price is equal, we need to increase the index of left\n            if prices[left] == prices[right]:\n                left += 1\n                right -= 1\n            # if two fruits have equal price, we need to increase the index of left to the left\n            else:\n                min_price += prices[left]\n                left += 1\n    return str(min_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_fruits, num_types = map(int, stdin.split(' '))\n    prices = list(map(int, stdin.split(' ')))\n    price_matrix = []\n    for i in range(num_types):\n        price_matrix.append(prices)\n    print(price_matrix)\n    return None\n\nsolution()\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    prices = stdin.split()\n    dp = [[float(\"inf\") for i in range(k + 1)] for j in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + int(prices[i - 1])\n            if j >= i:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j])\n    return str(dp[n][k])\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (N, K) = stdin.split()\n    return str(int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min(int(N) * int(K), int(N) * int(K) - int(min("
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    total = 0\n    for i in range(k):\n        total += prices[i]\n    for i in range(k, n):\n        total += min(prices[i - k] + prices[i - 1], prices[i] + prices[i - k])\n    return str(total)\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    ans = sum(prices[0:k])\n    for i in range(1, n-k+1):\n        ans = min(ans, sum(prices[i:i+k]))\n    return str(ans)"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    price_min = min(p)\n    # \ucd1d \uc120\ud0dd \uac00\ub2a5\ud55c \uac1c\uc218\n    # \ucd1d \uac00\uaca9 \ucc28\uc774\n    # \uac01 \uac1c\uc218\ubcc4 \uac00\uaca9 \ucc28\uc774\n    # \ucd1d \uac00\uaca9 \ucc28\uc774 \uc911 \ucd5c\uc18c\uac12\n    # \ucd1d \uac00\uaca9 \ucc28\uc774 \uc911 \ucd5c\uc18c\uac12 \uc5ed\uc21c \uc815\ub82c\n    # \ub354 \ud070 \uc218 \uace8\ub77c\uc11c\ub9cc \ud070 \uc218\ub4e4\uc744 \ub2e4 \ub123\uae30\n    solution_list = []\n    for i in range(1, k + 1):\n        solution_list.append(i)\n        for j in range(i, k + 1):\n            if j <= n:\n                solution_list.append(j)\n                price_list = []\n                for l in range(1, j + 1):\n                    price_list.append(p[l - 1])\n                if i == j:\n                    price_min = min(price_min, sum(price_list))\n                else:\n                    price_min = min(price_min, sum(price_list) + sum(solution_list) - min(price_list))\n    solution_list = solution_list[::-1]\n    for i in range(len(solution_list)):\n        if solution_list[i] == 1:\n            solution_list[i] = 0\n            break\n    solution_list = solution_list[::-1]\n    min_solution = solution_list.pop(0)\n    while solution_list:\n        min_solution += solution_list.pop(0)\n    return str(min_solution)"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    min_price = min(prices)\n    min_prices = []\n    for i in range(K):\n        min_prices.append(min_price)\n        min_price = min(min_price, prices[i])\n    max_prices = []\n    for i in range(K, N):\n        max_prices.append(prices[i])\n        max_prices.append(max(max_prices))\n        min_price = min(min_price, prices[i])\n    min_prices.append(min(min_price, max_prices[-1]))\n\n    return sum(min_prices)\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 3\\n50 100 80 120 80\\n')\n    '210'\n    >>> solution('4 5\\n10 10 10 10\\n')\n    '55'\n    >>> solution('3 3\\n5 5 5 5\\n')\n    '15'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    price = list(map(int, stdin.split()))\n    k = min(k, n)\n    res = price[0] * k\n\n    for i in range(1, k):\n        res = min(res, price[i] * i + price[i - 1])\n\n    return str(res)\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    return str(min(p[i - 1] + min(p[: i - 1]) for i in range(1, N + 1)))\n    # return min([sum([p[i] for i in range(1, N + 1)]) - sum([p[i] for i in range(2, N + 1)]) for _ in range(K)])"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    print(a + b + c)\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split(\" \"))\n    print(P + Q + R)\nsolution(input())"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p = stdin.split(\" \")\n    P = int(p[0])\n    Q = int(p[1])\n    R = int(p[2])\n    A = 0\n    B = 0\n    C = 0\n    min_time = 1000000\n    for i in range(0, P):\n        A += R\n        B += Q\n        C += P\n        if A + B + C <= min_time:\n            min_time = A + B + C\n    return str(min_time)\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    P,Q,R = list(map(int,stdin.split()))\n    \n    # The sum of the flight times in the route A \\rightarrow B \\rightarrow C: 1 + 3 = 4 hours\n    # The sum of the flight times in the route A \\rightarrow C \\rightarrow C: 4 + 3 = 7 hours\n    # The sum of the flight times in the route B \\rightarrow A \\rightarrow C: 1 + 4 = 5 hours\n    # The sum of the flight times in the route B \\rightarrow C \\rightarrow A: 3 + 4 = 7 hours\n    # The sum of the flight times in the route C \\rightarrow A \\rightarrow B: 4 + 1 = 5 hours\n    # The sum of the flight times in the route C \\rightarrow B \\rightarrow A: 3 + 1 = 4 hours\n    \n    # What is the minimum possible sum of the flight times?\n    # The mininum is 4 hours\n    \n    # return the output\n    return str(P+Q+R)\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = stdin\n    if P == Q == R:\n        return \"1 {} {} {}\".format(P, P, P)\n    elif P == Q == R + 1:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif P == Q == R - 1:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 1:\n        return \"1 {} {} {}\".format(P, P, P)\n    elif Q == P == R == 2:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 3:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 4:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif P == Q == R == 5:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif P == Q == R == 6:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif P == Q == R == 7:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 8:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif P == Q == R == 9:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 10:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 11:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 12:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif P == Q == R == 13:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 14:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 15:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 16:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 17:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 18:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 19:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 20:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 21:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 22:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 23:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 24:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 25:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 26:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 27:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 28:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 29:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 30:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 31:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 32:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 33:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 34:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 35:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 36:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 37:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 38:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 39:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 40:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 41:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 42:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 43:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 44:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 45:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 46:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 47:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 48:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 49:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 50:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 51:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 52:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 53:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 54:\n        return \"1 {} {} {}\".format(P, Q, R)\n    elif Q == P == R == 55:\n        return \"1"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    if P == Q == R:\n        return '1 hour'\n    elif P == Q and R:\n        return '2 hours'\n    elif P and not Q == R:\n        return '1 hour'\n    elif not P and Q == R:\n        return '2 hours'\n    else:\n        return '1 hour'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x,y,z = stdin.split(' ')\n    p,q,r = x.split(' ')\n    _,c,d = y.split(' ')\n    _,e,f = z.split(' ')\n    return (int(p)*int(q)) + (int(c)*int(d)) + (int(e)*int(f))"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    if int(x) < int(a):\n        return '0'\n    else:\n        return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    return \"0\" if int(x) < int(a) else \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [x, a] = stdin.split()\n    return str(int(x) if int(x) < int(a) else '0')"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split(\" \")\n    x = int(x)\n    a = int(a)\n\n    if x < a:\n        return \"0\"\n\n    return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    return '{}\\n'.format(int(x) + 10)\n    # if int(x) < int(a):\n    #     return '0\\n'\n    # else:\n    #     return '10\\n'"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split(\" \"))\n    if x < a:\n        return \"0\"\n    return \"10\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, X = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    return \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return '0'\n    else:\n        return '10'\n    return\n\nprint(solution('5 6'))"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = stdin.split()\n    x = int(num1)\n    a = int(num2)\n    if x < a:\n        return '0'\n    else:\n        return '10'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if a < b:\n        return '0'\n    else:\n        return '10'\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return \"0\"\n    elif n < k:\n        return str(abs(n - k))\n    else:\n        return str(abs(n - k) + abs(n - k - 1))\n    \n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(abs(n - k))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    return str(abs(N - K))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    k = stdin[1]\n    aoki = stdin[0]\n    min_val = aoki\n    while (aoki - k)!= 0:\n        aoki -= k\n        if aoki < min_val:\n            min_val = aoki\n    print(min_val)"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(abs(n - k), abs(n + k)))"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.strip().split()\n    n = int(k)\n    diffs = [abs(n - k) for k in range(1, n + 1)]\n    ans = min(diffs)\n    return ans\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(N-K, N-K-1))"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    result = 0\n\n    while n!= k:\n        result += abs(n-k)\n        n += abs(n-k)\n\n    return str(result)"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(N - min(abs(N - K), abs(N - K)))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    return str(min(abs(n - k), abs(n + k)))\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split(' ')\n    A1 = int(inp[0])\n    A2 = int(inp[1])\n    A3 = int(inp[2])\n    if (A1 + A2 + A3) >= 22:\n        return 'bust'\n    else:\n        return 'win'\n\nsolution(\"5 7 9\")\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #initialize variables\n    total = 0\n    p1 = 0\n    p2 = 0\n    p3 = 0\n\n    #convert inputs\n    p1 = int(stdin[0])\n    p2 = int(stdin[1])\n    p3 = int(stdin[2])\n\n    #calculate total and print result\n    total = p1 + p2 + p3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.strip().split())\n    if A1+A2+A3 >= 22:\n        return 'bust'\n    else:\n        return 'win'\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    A = list(map(int, A))\n    if (A[0] + A[1] + A[2]) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, A_1, A_2, A_3 = stdin.split()\n    A_1 = int(A_1)\n    A_2 = int(A_2)\n    A_3 = int(A_3)\n    if (A_1 + A_2 + A_3) >= 22:\n        return \"bust\"\n    return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(' ')))\n    if sum(A) >= 22:\n        return 'bust'\n    return 'win'\n\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if (a1 + a2 + a3) >= 22:\n        print('bust')\n    else:\n        print('win')\n    return 'OK'"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    if A1 + A2 + A3 >= 22:\n        print('bust')\n    else:\n        print('win')\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2, n3 = list(map(int, stdin.split()))\n    if sum([n1,n2,n3]) > 22:\n        return 'bust'\n    else:\n        return 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(3):\n        if int(stdin)>=22:\n            return \"bust\"\n    return \"win\""
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    x = num // 2\n    while x:\n        if (x % 2 == 0 and num % x == 0) or (x % num == 0 and num % x == 0):\n            break\n        x -= 1\n    return str(x)"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    divisible_by_2 = []\n    divisible_by_N = []\n    while len(divisible_by_2)!= N:\n        if N % 2 == 0:\n            divisible_by_2.append(N)\n            N = N / 2\n        else:\n            N = N - 1\n    while len(divisible_by_N)!= N:\n        if N % 2 == 0:\n            divisible_by_N.append(N)\n            N = N / 2\n        else:\n            N = N - 1\n    return str(min(divisible_by_2) * min(divisible_by_N))"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    output = input\n    while (output % 2 == 0):\n        output = output / 2\n    while (output % input == 0):\n        output = output / input\n    return output"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(max(min(3, int(stdin)), 1)):02}'"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    print(min(2, n) * min(n, n))\n    return \"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return str(max(i for i in range(2, int(stdin) + 1) if i % 2 == 0 and i % int(stdin) == 0))\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"6\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_n = stdin.strip()\n    num_2 = 2\n    n = int(stdin_n)\n    while True:\n        if n % num_2 == 0 and n % num_2!= 0 and n % num_2 == 1:\n            return str(n)\n        elif n % num_2 == 1:\n            num_2 += 1\n        elif n % num_2 == 0:\n            num_2 += 2\n        else:\n            num_2 += 3\n\nprint(solution(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    n = int(stdin)\n    return str(int((n * (n+1))/2)) if gcd(n, 2) == 1 else str(int(n / 2) + 1)\n    \n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = stdin.split(' ')\n    N, D = int(N), int(D)\n    return str(min(D // 2, (N - D) // 2))"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    tree_range = []\n    for i in range(1, n + 1):\n        tree_range.append(i)\n    tree_range = range(1, n + 1)\n    inspector_range = []\n    for i in range(n, 0, -1):\n        inspector_range.append(i)\n    inspector_range = range(n, 1, -1)\n    count = 0\n    for i in tree_range:\n        for j in inspector_range:\n            if j - i <= d <= j + i:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    tree_nums = list(range(1, n + 1))\n    res = 0\n    for i in range(1, n - d + 2):\n        res += 1\n        cur_tree_nums = tree_nums[i:i + d]\n        prev_tree_nums = tree_nums[:i]\n        if cur_tree_nums == prev_tree_nums:\n            res -= 1\n    return str(res)\n\"\"\"\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    return str(min(int(n / d) + 1, int((n * (n - 1)) / 2) + 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n\n    return str(min([math.ceil((n-d+1)/2) for i in range(1, n+1)]))\n\nstdin = \"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    n = int(n)\n    d = int(d)\n\n    i = 1\n    while (i + d - 1) <= n:\n        i += d\n\n    print(i)\n    return"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return str(min(N - D + 1, D))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    2 3\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    n, d = map(int, lines[0].split())\n    return str(min(max(2, int(round((n-2)/2, 0))), max(d, n-d)))"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = stdin.split()\n    N = int(N)\n    D = int(D)\n    trees = list(range(N + 1))\n    ans = 0\n    while len(trees) >= D:\n        ans += 1\n        for i in range(D, len(trees)):\n            trees.pop(0)\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return ''\n    if n <= 999:\n        return {\n            0: '',\n            1: '',\n            2: 'hon',\n            3: 'bon',\n            4: 'pon',\n            5: 'on',\n            6: 'hon',\n            7: 'bon',\n            8: 'pon',\n            9: 'on',\n            10: 'hon',\n            11: 'bon',\n            12: 'pon',\n            13: 'on',\n            14: 'hon',\n            15: 'bon',\n            16: 'pon',\n            17: 'on',\n            18: 'hon',\n            19: 'bon',\n            20: 'pon',\n            21: 'on',\n            22: 'hon',\n            23: 'bon',\n            24: 'pon',\n            25: 'on',\n            26: 'hon',\n            27: 'bon',\n            28: 'pon',\n            29: 'on',\n            30: 'hon',\n            31: 'bon',\n            32: 'pon',\n            33: 'on',\n            34: 'hon',\n            35: 'bon',\n            36: 'pon',\n            37: 'on',\n            38: 'hon',\n            39: 'bon',\n            40: 'pon',\n            41: 'on',\n            42: 'hon',\n            43: 'bon',\n            44: 'pon',\n            45: 'on',\n            46: 'hon',\n            47: 'bon',\n            48: 'pon',\n            49: 'on',\n            50: 'hon',\n            51: 'bon',\n            52: 'pon',\n            53: 'on',\n            54: 'hon',\n            55: 'bon',\n            56: 'pon',\n            57: 'on',\n            58: 'hon',\n            59: 'bon',\n            60: 'pon',\n            61: 'on',\n            62: 'hon',\n            63: 'bon',\n            64: 'pon',\n            65: 'on',\n            66: 'hon',\n            67: 'bon',\n            68: 'pon',\n            69: 'on',\n            70: 'hon',\n            71: 'bon',\n            72: 'pon',\n            73: 'on',\n            74: 'hon',\n            75: 'bon',\n            76: 'pon',\n            77: 'on',\n            78: 'hon',\n            79: 'bon',\n            80: 'pon',\n            81: 'on',\n            82: 'hon',\n            83: 'bon',\n            84: 'pon',\n            85: 'on',\n            86: 'hon',\n            87: 'bon',\n            88: 'pon',\n            89: 'on',\n            90: 'hon',\n            91: 'bon',\n            92: 'pon',\n            93: 'on',\n            94: 'hon',\n            95: 'bon',\n            96: 'pon',\n            97: 'on',\n            98: 'hon',\n            99: 'bon',\n            100: 'pon',\n            101: 'on',\n            102: 'hon',\n            103: 'bon',\n            104: 'pon',\n            105: 'on',\n            106: 'hon',\n            107: 'bon',\n            108: 'pon',\n            109: 'on',\n            110: 'hon',\n            111: 'bon',\n            112: 'pon',\n            113: 'on',\n            114: 'hon',\n            115: 'bon',\n            116: 'pon',\n            117: 'on',\n            118: 'hon',\n            119: 'bon',\n            120: 'pon',\n            121: 'on',\n            122: 'hon',\n            123: 'bon',\n            124: 'pon',\n            125: 'on',\n            126: 'hon',\n            127: 'bon',\n            128: 'pon',\n            129: 'on',\n            130: 'hon',\n            131: 'bon',\n            132: 'pon',\n            133: 'on',\n            134: 'hon',\n            135: 'bon',\n            136: 'pon',\n            137: 'on',\n            138: 'hon',\n            139: 'bon',\n            140: 'pon',\n            141: 'on',\n            142: 'hon',\n            143: 'bon',\n            144: 'pon',\n            145: 'on',\n            146: 'hon',\n            147: 'bon',\n            148: 'pon',\n            149: 'on',\n            150: 'hon',\n            151: 'bon',\n            152: 'pon',\n            153: 'on',\n            154: 'hon',\n            155: 'bon',\n            156: 'pon',\n            157: 'on',\n            158: 'hon',\n            159: 'bon',\n            160: 'pon',\n            161: 'on',\n            162: 'hon',\n            163: 'bon',\n            164: 'pon',\n            165: 'on',\n            166: 'hon',\n            167: 'bon',\n            168: 'pon',\n            169: 'on',\n            170: 'hon',\n            171: 'bon',\n            172: 'pon',\n            173: 'on',\n            174: 'hon',\n            175: 'bon',\n            176: 'pon',\n            177: 'on',\n            178: 'hon',\n            179: 'bon',\n            180: 'pon',\n            181: 'on',\n            182: 'hon',\n            183: 'bon',\n            184: 'pon',\n            185: 'on',\n            186: 'hon',\n            187: 'bon',\n            188: 'pon',\n            189: 'on',\n            190: 'hon',\n            191: 'bon',\n            192: 'pon',\n            193: 'on',\n            194: 'hon',\n            195: 'bon',\n            196: 'pon',\n            197: 'on',\n            198: 'hon',\n            199: 'bon',\n            200: 'pon',\n            201: 'on',\n            202: 'hon',\n            203: 'bon',\n            204: 'pon',\n            205: 'on',\n            206: 'hon',\n            207: 'bon',\n            208: 'pon',\n            209: 'on',\n            210: 'hon',\n            211: 'bon',\n            212: 'pon',\n            213: 'on',\n            214: 'hon',\n            215: 'bon',\n            216: 'pon',\n            217: 'on',\n            218: 'hon',\n            219: 'bon',\n            220: 'pon',\n            221: 'on',\n            222: 'hon',\n            223: 'bon',\n            224: 'pon',\n            225: 'on',\n            226: 'hon',\n            227: 'bon',\n            228: 'pon',\n            229: 'on',\n            230: 'hon',\n            231: 'bon',\n            232: 'pon',\n            233: 'on',\n            234: 'hon',\n            235: 'bon',\n            236: 'pon',\n            237: 'on',\n            238: 'hon',\n            239: 'bon',\n            "
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in stdin:\n        if i.isdigit():\n            if int(i) <= 999:\n                if int(i) % 3 == 0:\n                    answer += 'pon'\n                elif int(i) % 3 == 1:\n                    answer += 'hon'\n                elif int(i) % 3 == 2:\n                    answer += 'bon'\n            else:\n                break\n        else:\n            break\n    return answer\n    \n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N >= 1000:\n        return \"\u672c\"\n    elif N >= 100:\n        if N % 10 == 2:\n            return \"hon\"\n        elif N % 10 == 1:\n            return \"pon\"\n        elif N % 10 == 0:\n            return \"bon\"\n        else:\n            return \"bon\"\n    elif N >= 10:\n        if N % 10 == 1:\n            return \"hon\"\n        elif N % 10 == 3:\n            return \"pon\"\n        else:\n            return \"bon\"\n    else:\n        if N % 10 == 1:\n            return \"hon\"\n        else:\n            return \"bon\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 999:\n        if (n % 10 == 2) or (n % 10 == 4) or (n % 10 == 5) or (n % 10 == 7) or (n % 10 == 9):\n            return \"hon\"\n        elif (n % 10 == 0) or (n % 10 == 1) or (n % 10 == 6) or (n % 10 == 8):\n            return \"pon\"\n        else:\n            return \"bon\"\n    else:\n        return \"error\"\nprint(solution(input()))\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    result = 0\n    for i in stdin:\n        if i <= 99:\n            result += i\n        if i > 99:\n            result += i % 10\n        if i > 99:\n            result += i % 100\n        if i > 99:\n            result += i % 1000\n        if i > 99:\n            result += i % 10000\n        if i > 99:\n            result += i % 100000\n        if i > 99:\n            result += i % 1000000\n        if i > 99:\n            result += i % 10000000\n    return str(result)\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(f\"pon when the digit in the one's place of {n} is 6, 4, 5, 7, or 9;\")\n    print(f\"hon when the digit in the one's place of {n} is 2, 4, 5, 7, or 9;\")\n    print(f\"bon when the digit in the one's place of {n} is 3.\")\n    return stdin\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n > 999 or n < 0:\n        return None\n    if n >= 10 and n % 10!= 1:\n        return '\u30fd(\u00b4\u25bd\uff40)'\n    if n >= 10 and n % 10 == 1:\n        return '\u30fd(\u00b4\u25bd\uff40)' if n in (2, 3, 5, 7, 8, 9) else '\u30fd(`\u25bd\uff40)'\n    if n == 10:\n        return '\u30fd(`\u25bd\uff40)'\n    if n in (11, 12, 13, 14):\n        return '\u30fd(\u00b4\u25bd\uff40)' if n == 10 else '\u30fd(`\u25bd\uff40)'\n    if n in (20, 30, 40, 50, 60, 70, 80, 90, 100):\n        return '\u30fd(\u00b4\u25bd\uff40)' if n == 10 else '\u30fd(`\u25bd\uff40)'\n    if n in (201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n             221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\n             241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254):\n        return '\u30fd(\u00b4\u25bd\uff40)' if n == 10 else '\u30fd(`\u25bd\uff40)'\n    if n in (300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,\n             320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339,\n             340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359,\n             360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379,\n             380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399,\n             400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,\n             420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439,\n             440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459,\n             460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479,\n             480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499,\n             500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,\n             520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539,\n             540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,\n             560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579,\n             580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599,\n             600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619,\n             620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639,\n             640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659,\n             660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679,\n             680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699,\n             700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719,\n             720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739,\n             740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759,\n             760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779,\n             780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799,\n             800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810,"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if int(n) <= 999:\n        if int(n) % 10 == 2:\n            print('hon')\n        elif int(n) % 10 == 0:\n            print('pon')\n        elif int(n) % 10 == 1 or int(n) % 10 == 6:\n            print('bon')\n        else:\n            print('\u672c')\n    else:\n        print('\u672c')"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 100:\n        if N % 10 == 2:\n            return \"hon\"\n        elif N % 10 == 4:\n            return \"pon\"\n        elif N % 10 == 5:\n            return \"bon\"\n        elif N % 10 == 7:\n            return \"pon\"\n        elif N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"hon\"\n    elif N < 1000:\n        if N % 10 == 0:\n            return \"pon\"\n        elif N % 10 == 1:\n            return \"bon\"\n        elif N % 10 == 6:\n            return \"bon\"\n        elif N % 10 == 7:\n            return \"pon\"\n        elif N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"hon\"\n    elif N < 10000:\n        if N % 10 == 2:\n            return \"hon\"\n        elif N % 10 == 4:\n            return \"pon\"\n        elif N % 10 == 5:\n            return \"bon\"\n        elif N % 10 == 7:\n            return \"pon\"\n        elif N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"hon\"\n    elif N < 100000:\n        if N % 10 == 0:\n            return \"pon\"\n        elif N % 10 == 1:\n            return \"bon\"\n        elif N % 10 == 6:\n            return \"bon\"\n        elif N % 10 == 7:\n            return \"pon\"\n        elif N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"hon\"\n    elif N < 1000000:\n        if N % 10 == 2:\n            return \"hon\"\n        elif N % 10 == 4:\n            return \"pon\"\n        elif N % 10 == 5:\n            return \"bon\"\n        elif N % 10 == 7:\n            return \"pon\"\n        elif N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"hon\"\n    elif N < 10000000:\n        if N % 10 == 0:\n            return \"pon\"\n        elif N % 10 == 1:\n            return \"bon\"\n        elif N % 10 == 6:\n            return \"bon\"\n        elif N % 10 == 7:\n            return \"pon\"\n        elif N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"hon\"\n    else:\n        return \"hon\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    total: int = 0\n\n    for i in range(1, N):\n        for j in range(i):\n            total += (N - (i + 1)) * (i - j) / 2\n\n    return str(total)\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = map(int, stdin.split())\n    # d is an ordered list of N integers in the range from 1 to 100.\n    # Every integer in the list is guaranteed to be in the range of 1 to 100.\n    # Create a dictionary to map integers to their index in the ordered list.\n    # If the integer X is in the dictionary, then its index in the ordered list is the value of the dictionary.\n    dictionary = {x: i for i, x in enumerate(d)}\n    return sum(d[i] + d[j] for i in range(0, N) for j in range(i + 1, N))"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h_mat = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            h_mat[i][j] = int(stdin.split()[i * (n - j) + j])\n    rows = 0\n    cols = 0\n    for i in range(n):\n        for j in range(n):\n            rows += h_mat[i][j]\n            cols += h_mat[j][i]\n    if rows > cols:\n        rows, cols = cols, rows\n    return str(rows * cols)\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes stdin input, splits by space, and uses recursion to calculate sum\"\"\"\n    dish, *dishes = stdin.split()\n    dishes = [int(item) for item in dishes]\n    if len(dishes) < 2:\n        raise Exception(\"Need at least 2 dishes.\")\n    if not all(1 <= item <= 100 for item in dishes):\n        raise Exception(\"All values are to small to be valid.\")\n    return str(solution_helper(dishes, 1, 0))\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    dp = [[0] * (N - 1) for _ in range(N)]\n    dp[0] = [0] * (N - 1)\n\n    for i in range(1, N):\n        for j in range(i):\n            dp[i][j] = dp[i - 1][j] + d[i]\n        for j in range(i):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j])\n\n    print(sum([dp[N - 1][i] for i in range(N - 1)]) + dp[N - 1][N - 1])"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = list(map(int, stdin.split()))\n    return str(sum([d[i] * (d[i] - 1) // 2 for i in range(len(d))]))\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    \n    # We will count the takoyaki served\n    count = 0\n    \n    # An array of all possible choices\n    choices = []\n    \n    # Fill the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            choices.append([d[i], d[j]])\n    \n    # Helper function to get the sum of a single choice\n    def get_sum(choice):\n        return sum(choice)\n    \n    # Helper function to sort the choices in ascending order\n    def sort_and_add(choices):\n        choices.sort(key=lambda x: x[0] * x[1])\n        for choice in choices:\n            sum_of_choice.append(get_sum(choice))\n    \n    # Helper function to get the sum of all choices\n    sum_of_choice = []\n    \n    # Sort the choices\n    sort_and_add(choices)\n    \n    # Get the sum\n    sum_of_choice = sum(sum_of_choice)\n    \n    return str(sum_of_choice)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[1][1] = d[0]\n\n    for i in range(2, n + 1):\n        dp[i][1] = dp[i - 1][1] + d[i - 1]\n        for j in range(2, i):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return str(dp[-1][-1])\n\nsolution(\"3 1 2\")\n\nsolution(\"4 2 4\")\n\nsolution(\"5 5 5\")\n\nsolution(\"10 4 4 4 4 4 4 4 4 4 4\")"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    maxi = max(int(i) for i in lines[1:])\n    return lines[0] + \"\\n\" + str(maxi)"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, *numbers = map(int, stdin.split())\n    for i in range(len(numbers)-1):\n        if numbers[i+1] > numbers[i]:\n            return '\\n'.join(map(str, numbers))\n    return '\\n'.join(map(str, numbers))"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    print(*sorted(A, reverse=True)[1:])\n    return None\n\nsolution(\"5\\n5 3 4 1 2\\n\")\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return '\\n'.join(map(str, map(lambda x: x - 1 if x > 0 else x, (stdin.strip() for _ in range(n - 1))))).strip()"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    if stdin.isnumeric():\n        n = int(stdin)\n        maxs = []\n        for i in range(1, n):\n            if i > 2:\n                maxs.append(max(maxs[i-2], maxs[i-3], maxs[i-4]))\n        return str(maxs[-1])\n    return ''\nprint(solution('3\\n1\\n4\\n3\\n'))"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_split = stdin.split(\"\\n\")\n    n = int(stdin_split[0])\n    max_list = stdin_split[1:]\n    max_list.sort()\n    max_list.reverse()\n    return str(max_list[0]) + \"\\n\" + str(max_list[1]) + \"\\n\" + str(max_list[2])\n\nstdin = ''\nfor line in sys.stdin:\n    stdin += line\nprint(solution(stdin))"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.splitlines()\n  for i in range(1,len(lines)):\n    # print(lines[i])\n    lines[i] = lines[i].split()\n    # print(lines[i])\n    lines[i][1] = int(lines[i][1])\n    # print(lines[i])\n  for i in range(1,len(lines)):\n    for j in range(2,len(lines[i])):\n      if lines[i][j] > lines[i][1]:\n        lines[i][j] = lines[i][j]\n      else:\n        lines[i][j] = lines[i][1]\n    # print(lines[i])\n  for i in range(1,len(lines)):\n    lines[i] = str(lines[i][1]) + \" \" + lines[i][0]\n  return \"\\n\".join(lines)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\" \")]\n    max_arr = arr.copy()\n    max_arr.sort(reverse=True)\n    for i in range(1, n):\n        max_arr.remove(max_arr[i])\n    return max_arr"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = [int(i) for i in stdin.splitlines()[1:]]\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            print(arr[i])\n        else:\n            print(arr[i - 1])\n    return stdin\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_coins = 0\n    button_1_size = int(stdin.split(' ')[0])\n    button_2_size = int(stdin.split(' ')[1])\n    buttons_size = [button_1_size, button_2_size]\n    buttons = [0, 0]\n    while buttons_size!= [0, 0]:\n        if buttons_size[0]!= 0 and buttons_size[1]!= 0:\n            if buttons_size[0] == buttons_size[1]:\n                buttons_size[0] = buttons_size[0] - 1\n                buttons_size[1] = buttons_size[1] - 1\n            else:\n                if buttons_size[0] > buttons_size[1]:\n                    buttons[0] = buttons[0] + buttons_size[0]\n                    buttons_size[0] = buttons_size[0] - 1\n                else:\n                    buttons[1] = buttons[1] + buttons_size[1]\n                    buttons_size[1] = buttons_size[1] - 1\n            if buttons_size[0] == 0 and buttons_size[1] == 0:\n                break\n        elif buttons_size[0]!= 0:\n            buttons[0] = buttons[0] + buttons_size[0]\n            buttons_size[0] = buttons_size[0] - 1\n            if buttons_size[0] == 0:\n                break\n        elif buttons_size[1]!= 0:\n            buttons[1] = buttons[1] + buttons_size[1]\n            buttons_size[1] = buttons_size[1] - 1\n            if buttons_size[1] == 0:\n                break\n    max_coins = buttons[0] + buttons[1]\n    return max_coins\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    coins = []\n    A, B = map(int, stdin.split())\n    for i in range(1, A + 1):\n        coins.append(i)\n    for i in range(1, B + 1):\n        coins.append(i)\n    coins.sort(reverse=True)\n    max_coin = 0\n    for i in range(len(coins)):\n        if coins[i] <= A and coins[i] <= B:\n            max_coin += coins[i]\n    return str(max_coin)"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    cache = {}\n    min_coins = sys.maxsize\n    for i in range(n + 1):\n        for j in range(m + 1):\n            res = 0\n            if i == 0 or j == 0:\n                continue\n            elif i == j:\n                res = i\n            elif i > j:\n                break\n            else:\n                res = min(i, j) + 1\n            cache[i, j] = res\n            min_coins = min(min_coins, res)\n    return str(min_coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, size = stdin.split()\n    # Your code goes here\n    return str(eval(f\"{int(size) * 2}\"))\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = [i for i in range(A, B + 1)]\n    coins.reverse()\n    max_result = 0\n    for i in range(len(coins)):\n        for j in range(i + 1, len(coins)):\n            for k in range(j + 1, len(coins)):\n                if coins[i] + coins[j] + coins[k] <= B:\n                    max_result = max(max_result, coins[i] + coins[j] + coins[k])\n    return str(max_result)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    coins = 0\n    while A >= 0 and B >= 0:\n        if A > B:\n            A = A - 1\n        elif A <= B:\n            coins = coins + A\n            B = B - 1\n    return str(coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    coins = 0\n    while a!= 0 and b!= 0:\n        if a >= b:\n            coins += a\n            a -= b\n            b = 0\n        else:\n            coins += b\n            b -= a\n            a = 0\n\n    if a!= 0:\n        coins += a\n\n    return str(coins)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n\n    # The amount of coins used is the minimum of A and B\n    amount_of_coins = min(A, B)\n\n    # Start counting from the beginning of the lists\n    # The smallest of A and B, until the end of the list\n    A_list_index = 0\n    B_list_index = 0\n\n    # An index used to print the result\n    index = 0\n\n    # This variable controls when to stop incrementing A or B\n    stopping_variable = False\n\n    while not stopping_variable:\n        # Print the current value of A\n        print(amount_of_coins)\n\n        # Check if A has become empty (it is greater than 0)\n        if A_list_index > A - 1:\n            A_list_index = 0\n\n        # Check if B has become empty (it is greater than 0)\n        if B_list_index > B - 1:\n            B_list_index = 0\n\n        # Check if A_list_index and B_list_index are both at the end of the list\n        if A_list_index == A and B_list_index == B:\n            # If they are, that means that the list has been exhausted\n            # Hence we know that the result is A + B - 1 (since A_list_index == 0)\n            return str(A + B - 1)\n\n        # Increase A\n        A_list_index += 1\n\n        # Check if A is greater than 0\n        if A_list_index > A:\n            # If it is, we need to start over\n            A_list_index = 0\n\n        # Increase B\n        B_list_index += 1\n\n        # Check if B is greater than 0\n        if B_list_index > B:\n            # If it is, we need to start over\n            B_list_index = 0\n\n        # Check if A_list_index and B_list_index are both not at the end of the list\n        if A_list_index!= A and B_list_index!= B:\n            # We need to increment the amount of coins\n            amount_of_coins += 1\n            # If it is not, we need to stop incrementing A or B\n            stopping_variable = True\n\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size_of_button = list(map(int, stdin.split()))\n    size_of_button = size_of_button[::-1]\n    start_size = size_of_button.pop()\n\n    print(start_size)\n    while size_of_button:\n        print(size_of_button[-1])\n        size_of_button = size_of_button[::-1]\n        if size_of_button[-1] == start_size - 1:\n            start_size -= 1\n            size_of_button.pop()\n        else:\n            break\n\n    return start_size"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    d = {}\n    t = 0\n    for i in range(k):\n        d[x[i]] = t\n        t += 1\n    for j in range(k, n):\n        if x[j] == x[j - k]:\n            continue\n        d[x[j]] = d[x[j - k]] + 1\n    print(max(d.values()))\n    return \"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n    left_candle = candles[0]\n    right_candle = candles[1]\n\n    time = 0\n\n    while left_candle <= k and right_candle <= k:\n        if left_candle < right_candle:\n            left_candle = candles[left_candle + 1]\n        if left_candle > right_candle:\n            right_candle = candles[right_candle + 1]\n        time += 1\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n, k = data[0], data[1]\n    lines = []\n    for _ in range(n):\n        lines.append(list(map(int, stdin.split())))\n    min_time = float('inf')\n    coordinates = list(range(n))\n\n    def can_be_lighted(candle):\n        for candle_coordinate in range(n):\n            if lines[candle][candle_coordinate] == lines[candle][candle_coordinate] or (candle_coordinate - candle) % 2 == 0:\n                continue\n            else:\n                return False\n        return True\n\n    def light_candle(candle):\n        lighted = False\n        for candle_coordinate in range(candle - 1, -1, -1):\n            if lines[candle][candle_coordinate] == 0:\n                lines[candle][candle_coordinate] = 1\n                lighted = True\n                break\n        return lighted\n\n    def move_candle(candle, value):\n        lighted = False\n        while True:\n            candle += value\n            if candle in coordinates:\n                lighted = light_candle(candle)\n            else:\n                break\n        return lighted\n\n    for candle in range(n):\n        candle = move_candle(candle, 1)\n        candle = move_candle(candle, -1)\n        if can_be_lighted(candle) and candle == k:\n            min_time = min(min_time, (candle + 1) * 2)\n\n    return str(min_time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pos = [int(i) for i in stdin.split()]\n\n    # The first candle\n    pos[0] = -1\n\n    # The last candle\n    pos[-1] = n + 1\n\n    # All the candidates\n    candidates = set(range(1, n + 1))\n\n    # Initializing a queue\n    queue = deque([])\n\n    # An empty deque\n    if not queue:\n        queue.append([pos[0], pos[1]])\n        candidates.remove(pos[0])\n\n    # Initializing a visited set\n    visited = set()\n\n    # Variables for counting the time\n    total_time = 0\n    current_pos = pos[0]\n    candidate_pos = pos[1]\n\n    # We will keep moving the queue till we exhaust the\n    # candles.\n    while queue:\n        # We will keep moving the queue till all the\n        # candles are burned.\n        while candidate_pos not in visited:\n            # We will remove all the candidates from\n            # the set and add them back to the queue\n            candidate_pos = candidates.pop()\n            visited.add(candidate_pos)\n            queue.append([candidate_pos, candidate_pos + 1])\n\n        # While we can move right\n        while candidate_pos <= pos[-1]:\n            # We will move to the right\n            candidate_pos += 1\n\n            # If it is a candidate that satisfies the\n            # constraints, we will add it to the set\n            if candidate_pos in candidates:\n                candidates.remove(candidate_pos)\n                visited.add(candidate_pos)\n                queue.append([candidate_pos, candidate_pos + 1])\n\n        # We will move to the left\n        current_pos += 1\n\n        # If it is a candidate that satisfies the\n        # constraints, we will add it to the set\n        if current_pos in candidates:\n            candidates.remove(current_pos)\n            visited.add(current_pos)\n            queue.append([current_pos, current_pos + 1])\n\n        # If all the candidates are exhausted, we will stop\n        # moving the queue and print the time required to\n        # light all the candles.\n        if not queue:\n            total_time += 1\n            # Since we are adding 1 to the position at\n            # each move, we will subtract 1 from the total\n            # time required.\n            total_time -= 1\n            print(total_time)\n            return\n    print(-1)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (N, K) = stdin.split()\n    N, K = int(N), int(K)\n    x = [int(x) for x in stdin.split()]\n\n    x.sort()\n\n    d = {}\n    for i in range(1, K+1):\n        d[i] = 0\n    for i in range(1, N):\n        d[x[i]] = d.get(x[i], 0) + 1\n    return str(N*(max(d.values()) + 1))\n\n\nprint(solution(\"5 3\\n-30 -10 10 20 50\"))\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    candles = list(map(int, stdin.split()))\n    left = 0\n    right = K - 1\n    for i in range(K):\n        left = candles[left] + candles[right]\n        candles[left] = candles[left] + candles[right]\n        candles[right] = candles[right] - candles[left]\n        candles[left] = candles[left] - candles[right]\n        right = (right + 1) % N\n    return left\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    ans = -1\n    c = 0\n    x_list.sort()\n    for i in range(n):\n        if x_list[i] == x_list[i - 1] and i!= 0:\n            ans = c\n        c = max(c, x_list[i] - x_list[i - 1] + 1)\n    return str(ans)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n\n    coordinates = stdin.split(\" \")\n    coordinates = [(int(coordinate), i) for i, coordinate in enumerate(coordinates)]\n\n    def solver(n, k, coordinates):\n        candle_remaining = k\n        candle_lit = 0\n        time_spent = 0\n        while candle_remaining > 0:\n            candle_remaining -= 1\n            candle_lit += 1\n            # print(candle_remaining, candle_lit, time_spent, coordinates)\n            if coordinates[candle_lit][0] < time_spent:\n                time_spent = coordinates[candle_lit][0]\n        return time_spent\n\n    # print(solver(n, k, coordinates))\n    return str(solver(n, k, coordinates))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    xs = list(map(int, stdin.split()))\n\n    time = 0\n    cur_x = 0\n    for x in xs:\n        time += abs(cur_x - x)\n        cur_x = x\n    print(time)\n    return"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N, K = stdin.strip().split()\n    N = int(N)\n    K = int(K)\n    coords = list(map(int, stdin.strip().split()))\n    x = coords[0]\n    \n    max_time = 10**8\n    if K == 1:\n        max_time = max(coords[-1]-coords[0], max_time)\n        print(max_time)\n        return\n    \n    if N == 1:\n        print(max(x, max_time))\n        return\n\n    # Min heap\n    heap = []\n    heapq.heappush(heap, x)\n\n    for i in range(1, N):\n        coords[i] = min(coords[i], x)\n        while heap and coords[i] < heap[0]:\n            heapq.heappush(heap, coords[i])\n            heapq.heappop(heap)\n        x = heap[0]\n        \n        if K-1 == i:\n            print(max(x, max_time))\n            return\n\n        max_time = max(x, max_time)\n        heapq.heappush(heap, x)\n    print(max(x, max_time))\n    return"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(1 + 2 * ((a - 1) // 2) + 2 * ((b - 1) // 2))\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(stdin.split()[1]) - int(stdin.split()[0])}'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    return str(min(a, b))\n\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        if b == 1:\n            return 0\n        else:\n            return 1\n    elif a == b:\n        return 1 + (b - a)\n    else:\n        return 2 + (b - a)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b)"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Part 1 ---\n\n    In the above example, we are left with a problem that is a little bit tricky, in that we are trying to find the total height of the tower that is not covered by the snow.\n\n    We can assume that each tower is of an equal height.\n    So, we can use a monotonic stack to record the heights of the towers that are not covered by snow, which makes the problem much easier.\n\n    We are left with the following problem, and the stack can be found in the above code.\n\n    Let the stack be s. We will push the starting tower's height onto the stack.\n    We will push the ending tower's height onto the stack.\n    We will push the difference between the heights on the towers onto the stack.\n    We will pop the top of the stack, and we will pop off the top of the stack, and we will push onto the stack the height of the tower that is not covered by snow.\n    If we are left with a height that is greater than the top of the stack, we know that this tower will be covered by snow, so we will pop off the stack.\n    If we are left with a height that is lower than the top of the stack, we know that this tower will not be covered by snow, so we will push onto the stack the height of the tower that is not covered by snow.\n    When we are done, we will have the total height of the tower that is not covered by snow.\n\n    We can use two stacks, and we will push the starting tower's height onto the first stack, and we will push the ending tower's height onto the second stack.\n    We will push the difference between the heights on the towers onto the stacks.\n    We will pop off the top of the first stack, and we will pop off the top of the second stack, and we will push onto the stacks the height of the tower that is not covered by snow.\n    If we are left with a height that is greater than the top of the second stack, we know that this tower will be covered by snow, so we will pop off the second stack.\n    If we are left with a height that is lower than the top of the second stack, we know that this tower will not be covered by snow, so we will push onto the stack the height of the tower that is not covered by snow.\n    When we are done, we will have the total height of the tower that is not covered by snow.\n    \"\"\"\n    first_tower = int(stdin.split()[0])\n    second_tower = int(stdin.split()[1])\n    difference = abs(first_tower - second_tower)\n    s = []\n    s.append(first_tower)\n    s.append(second_tower)\n    while len(s) > 0:\n        last = s.pop()\n        if last > s[-1]:\n            break\n        else:\n            s.append(last + difference)\n    return str(s[-1])\n    return str(max(s) - min(s))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return f\"{(a + b - 2) // (a - 1)}\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b == 1:\n        return \"0\"\n    else:\n        total = (a + b - 1) // (a - 1)\n        return str(total)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if b < a:\n        a, b = b, a\n    if a <= 1:\n        return \"0\"\n    if b <= 1:\n        return \"0\"\n    n = 0\n    while True:\n        c = a - (2 ** n)\n        if c <= b:\n            break\n        else:\n            n += 1\n    if a <= 1:\n        return \"0\"\n    if b <= 1:\n        return \"0\"\n    else:\n        return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a, b) - min(a, b))"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (H, A) = map(int, stdin.split())\n    return str(H - (H % A) + A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.strip().split())\n    return str(H * A // (H - A))\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = list(map(int, stdin.split()))\n    # H = int(H)\n    # A = int(A)\n    # print(H, A)\n    while True:\n        H -= A\n        if H <= 0:\n            return '2'\n        A += 1"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(' ')\n    return f'{int(stdin_list[0])} {int(stdin_list[1])}'"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function runs through each case and returns the minimum number of attacks needed to win.\n    :param stdin: The input data as a string.\n    :return: The output as a string.\n    \"\"\"\n    return len(list(filter(lambda x: x > 0, map(lambda x: int(x) - 1, stdin.split(' ')))))"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    h, a = int(stdin_list[0]), int(stdin_list[1])\n    i = 0\n    while True:\n        i += 1\n        if (h + i * a) >= h:\n            return str(i)\n\nsolution(input())\n'''"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    h = H\n    if h <= 10:\n        h = h * 10\n    if h < 1:\n        return 0\n    return min(1, h//A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    list_ = stdin.split()\n    h = int(list_[0])\n    a = int(list_[1])\n    monster_health = h\n    serval_health = h\n    attack = 1\n    while monster_health > 0 and serval_health > 0:\n        serval_health -= a\n        monster_health += a\n        attack += 1\n        if monster_health == 0:\n            return str(attack)\n        if monster_health < 0:\n            monster_health = 0\n            return str(attack)\n    return str(0)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    health, attack = map(int, stdin.split())\n    if health == 0:\n        return \"0\"\n    while health > 0:\n        health -= attack\n        if health <= 0:\n            return f\"{attack}\"\n        attack -= 1\n    return f\"{attack}\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    print(int(A * 2 + 3))"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    result = (B - A) + (C - D)\n    print(result)\n    return result\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a, b, c, d = stdin\n    a1 = b1 = 0\n    b1 = a1 + a\n    a2 = b2 = c + d\n    b2 = a2 + b\n    a3 = b3 = c + d\n    b3 = a3 + b\n    a4 = b4 = c + d\n    b4 = a4 + b\n    a5 = b5 = c + d\n    b5 = a5 + b\n    a6 = b6 = c + d\n    b6 = a6 + b\n    a7 = b7 = c + d\n    b7 = a7 + b\n    a8 = b8 = c + d\n    b8 = a8 + b\n    a9 = b9 = c + d\n    b9 = a9 + b\n    print(int(a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9))\n    print(int(b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9))\n    return stdin[0]"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    return str(int(A) - int(B)) + \" \" + str(int(C) - int(D))\nprint(solution(input()))"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    count = 0\n    while b!= a:\n        if b > a:\n            b = b - a\n            count = count + b\n        else:\n            a = a - b\n            count = count + a\n        if a == 1 and b == 1:\n            print(count)\n            return count\n        elif a == 1 and b > 1:\n            print(count + (b - 1))\n            return count + (b - 1)\n        elif a > 1 and b == 1:\n            print(count + (a - 1))\n            return count + (a - 1)\n        else:\n            print(count + (a - 1) + (b - 1))\n            return count + (a - 1) + (b - 1)"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    A = int(x[0])\n    B = int(x[1])\n    C = int(x[2])\n    D = int(x[3])\n    a = A / 1000\n    b = B / 1000\n    c = C / 1000\n    d = D / 1000\n    return str(round((a + b + c + d) / 2, 2))\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    if A == C:\n        if D - A >= C:\n            return str(C)\n        return str(D - C)\n    else:\n        if C - A >= D:\n            return str(C)\n        return str(D - C)"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    return str(int((b-a)+(c-d)))\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    return str(int(A) + int(B) + int(C) + int(D))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = stdin.split()\n    alice_seconds = int(alice)\n    bob_seconds = int(bob)\n    alice_duration = alice_seconds / 2\n    bob_duration = bob_seconds / 2\n    print(alice_duration)\n    print(bob_duration)\n    total_duration = alice_duration + bob_duration\n    return str(total_duration)\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = stdin.split(' ')\n    a = int(input_arr[0])\n    b = int(input_arr[1])\n    c = int(input_arr[2])\n    d = int(input_arr[3])\n    return (b - a) + (c - d)\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code will be run on multiple devices and you must sum the results using + operator.\n\n    Using * operator you can concatenate strings and numbers.\n    Using float() you can convert strings into numbers.\n\n    If one of the values entered by the user is not a valid number, then the program should\n    display an appropriate error message and exit.\n\n    \"\"\"\n    if int(stdin) < 1 or int(stdin) > 200:\n        return 'ERROR'\n\n    divisor = 1\n    count = 0\n\n    while divisor < int(stdin):\n        divisor += 1\n        if divisor == 8:\n            count += 1\n        else:\n            for i in range(1, divisor):\n                if divisor % i == 0:\n                    count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    if input > 200:\n        return 0\n    div = 8\n    total = 0\n    while div >= 2:\n        if input % div == 0:\n            total += 1\n        div -= 2\n    if total == 8:\n        return total\n    return total + 1"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_n = int(stdin)\n    counter = 0\n    for i in range(2, max_n):\n        divisors_count = divisors(i)\n        if divisors_count == 8:\n            counter += 1\n    return str(counter)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum(i for i in range(1, n) if (n+1) % i == 0 and 8 in {divisor(n+1) for divisor in range(1, i)})\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if len(filter(lambda x: len(x) == 8, range(1, int(stdin)))) else '0'"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # N = 109\n    # N = 8\n    if N <= 3:\n        return 0\n\n    odds_count = 0\n    for i in range(2, N):\n        divisor_count = 0\n        for j in range(2, i):\n            if i % j == 0:\n                divisor_count += 1\n        if divisor_count == 8:\n            odds_count += 1\n\n    return odds_count\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement the function.\n    n = int(stdin)\n    if n <= 8:\n        return str(1)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(\n        sum(1 if len(list(divisors(i))) == 8 else 0 for i in range(1, int(stdin) + 1) if is_odd(i))\n    )\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    count: int = 0\n    for i in range(n + 1):\n        divisor = 1\n        for j in range(2, int(i ** (0.5)) + 1):\n            if i % j == 0:\n                divisor += 2\n                if divisor > i:\n                    break\n        if divisor == i:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for x in range(int(stdin), int(input()) + 1):\n        if 8 in divisors(x):\n            return str(x)\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    maximum = -1\n    minimum = n\n    for i in range(1, n):\n        if i > maximum:\n            maximum = i\n    for i in range(1, n):\n        if i < minimum:\n            minimum = i\n    return str(abs(maximum - minimum))\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    n, k = int(data[0]), int(data[1])\n    if n == 0 and k == 0:\n        return \"0\"\n    return str(int(math.ceil(n / k)))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = stdin.rstrip().split()\n    N,K = int(input_arr[0]),int(input_arr[1])\n    #print(N,K)\n    num = range(1,N+1)\n    res = 0\n    cnt = 1\n    while True:\n        #print(cnt)\n        #print(num,cnt)\n        if cnt > K:\n            break\n        min_num = min(num)\n        max_num = max(num)\n        if max_num-min_num < res:\n            res = max_num-min_num\n        if num[0]==min_num:\n            num.remove(min_num)\n            cnt += 1\n        else:\n            num.remove(max_num)\n            cnt += 1\n    return str(res)"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    if k == 1:\n        return str(n)\n    elif n == 1:\n        return str(k)\n    return str(min(n, k) - max(n, k))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    crackers = sorted(map(int, input().split()))\n    diff = float('inf')\n    for i in range(len(crackers) - k + 1):\n        diff = min(diff, crackers[i + k - 1] - crackers[i])\n    return str(diff)"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numberOfCrackers, numberOfUsers = map(int, stdin.split())\n    diff = 2 ** numberOfUsers\n    return str(diff)\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(min(map(max, zip(*[iter(range(1, n+1))]*k))))\n    return\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, K] = list(map(int, stdin.split()))\n    return f\"{min(K, N - K)} {min(N - K, K)}\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k=int(stdin.split()[0]),int(stdin.split()[1])\n    a=list(range(1,n+1))\n    b=[]\n    d=0\n    while len(a)!=0:\n        if k==len(a):\n            break\n        else:\n            d=len(a)\n            b.append(a[k])\n            a.pop(k)\n    return str(d)\nsolution(input())\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(N, K) - max(N, K))"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 100:\n        return '1'\n    if n == 999:\n        return '1'\n    if n == 0:\n        return '2'\n    for i in range(1, 1000):\n        if all(int(str(i)[j]) == int(str(i)[j]) for j in range(len(str(i)))):\n            return str(i)\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(10, n + 1):\n        str = str(i)\n        if len(set(str)) == len(str):\n            return str\n    return \"No valid ABC.\"\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for n in stdin.split():\n        print(find(n))\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        if \"\".join(sorted(str(i))) == str(i):\n            return str(i)"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def f(N):\n        if N == 0:\n            return 1\n        if N < 0:\n            return 0\n        if N % 9 == 0:\n            return 10\n        return f(N // 9) * 10 + 9\n    return str(f(N))"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    while n!= 0:\n        n, r = divmod(n, 10)\n        a = a * 10 + r\n    print(a)\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n\n    digit_list = list(n)\n\n    for i in range(len(digit_list)):\n        for j in range(i + 1, len(digit_list)):\n            if digit_list[i]!= digit_list[j]:\n                break\n        else:\n            return n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return print(get_next_abc(int(data[0])))\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    while len(n) <= 1:\n        n = str(int(n)+1)\n    print(n)\n    return n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N^2)\n    Space: O(1)\n    \"\"\"\n    task_costs = stdin.split()\n    # sort tasks according to their costs\n    task_costs.sort(key=lambda x: int(x), reverse=True)\n\n    min_cost = 0\n    while len(task_costs) > 0:\n        i = 0\n        for j in range(len(task_costs)):\n            # skip if current i-th task is complete\n            if task_costs[i] == task_costs[j]:\n                i += 1\n            # else:\n            #     if min_cost < int(task_costs[i]) + min_cost:\n            #         min_cost = int(task_costs[i]) + min_cost\n            #     task_costs.pop(i)\n            #     i -= 1\n        task_costs.pop(i)\n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, *A = map(int, stdin.split())\n    return sum(i * (i + 1) for i in range(1, A[0] + 1)) + sum(A[1] * (A[1] + 1) for i in range(1, A[1] + 1)) - sum(A[2] * (A[2] + 1) for i in range(1, A[2] + 1))\n\nsolution(input())\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    tasks, _ = stdin.split(\" \")\n    A = list(map(int, tasks.split()))\n    return str(min(A))"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    if A1 < A2:\n        A1, A2 = A2, A1\n    if A1 < A3:\n        A1, A3 = A3, A1\n    if A2 < A3:\n        A2, A3 = A3, A2\n    cost = (A2 - A1) + min((A1, A3), key=abs)\n    return str(cost)"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(int, stdin.split()))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    return str(min(A1, A2, A3))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    return str(min(A_1 + A_2 + A_3, A_1 + abs(A_3 - A_2), A_2 + abs(A_1 - A_3)))"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    A = sorted([A1, A2, A3])\n    if A[0] > 0 and A[1] > 0 and A[2] > 0:\n        return \"0\"\n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= 0:\n        return str(A[0])\n    if A[0] <= 0 and A[1] <= A[2] and A[2] <= A[1]:\n        return str(A[1])\n    if A[0] <= A[1] and A[1] <= 0 and A[2] <= A[0]:\n        return str(A[2])\n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= 0:\n        return str(A[2])\n    if A[0] <= 0 and A[1] <= 0 and A[2] <= A[0]:\n        return str(A[0])\n    if A[0] <= 0 and A[1] <= A[2] and A[2] <= 0:\n        return str(A[1])\n    if A[0] <= A[1] and A[1] <= 0 and A[2] <= 0:\n        return str(A[2])"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = map(int, stdin.split())\n    return str(min(sum(i - j for i, j in zip(args, args[1:])) for j in args))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    possible_paths = ((A_1, 0), (A_2, 1), (A_3, 2))\n    total_cost = 0\n    for i, j in possible_paths:\n        if i == A_1:\n            total_cost += j\n        elif i == A_2:\n            total_cost += j\n        elif i == A_3:\n            total_cost += j\n        else:\n            total_cost += abs(i - j)\n    return str(total_cost)\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = []\n    # loop\n    for i in stdin.split(' '):\n        a.append(int(i))\n    a.sort()\n    while len(a)!= 0 and a[0] % 2!= 0:\n        a.pop(0)\n    while len(a)!= 0 and a[-1] % 2!= 0:\n        a.pop()\n    for i in range(1,len(a)):\n        a[i] = a[i-1] // 2\n    return str(max(a))\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        if n % 2 == 0:\n            return n / 2\n        else:\n            return 3 * n + 1\n\n    a = list(map(int, stdin.split()))\n    s = a[0]\n    ans = 0\n    for i in range(1, len(a)):\n        s = f(s)\n        if a[i] == s:\n            ans = a[i]\n            break\n    return str(ans)\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    res = s\n    for i in range(1,s+1):\n        if i%2 == 0:\n            res = max(res,int(i/2))\n        else:\n            res = max(res,3*i+1)\n    return str(res)"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    m = s\n    while s > m:\n        s = s/2 if s%2==0 else 3*s+1\n        m = min(m,s)\n    return str(m)\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    arr = set()\n    arr.add(s)\n    while True:\n        n = len(arr)\n        if n == 1:\n            break\n        if n == 2:\n            return str(min(arr))\n        k = len(arr) - n\n        ans = []\n        for i in range(1, k + 1):\n            if i == 1:\n                ans.append(s)\n            else:\n                ans.append(int(s/2 if s % 2 else 3*s+1))\n        arr = set(ans)\n    return str(min(arr))\nsolution(\"8\")\n\n\"\"\"\nfrom math import ceil\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = n//2 if n%2==0 else 3*n+1\n    while s <= 1000000:\n        if s in a:\n            return str(s)\n        s += n\nprint(solution(stdin))\n\na = [8, 4, 2, 1, 4, 2, 1, 4, 2, 1, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4,"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    for i in range(100000):\n        if i % 2 == 0 and i % 3 == 0:\n            continue\n        if i % 2 == 1 and i % 3 == 1:\n            continue\n        if i == 1:\n            continue\n        if i == 2:\n            continue\n        if i == 3:\n            continue\n        if i == 4:\n            continue\n        if i == 5:\n            continue\n        if i == 6:\n            continue\n        if i == 7:\n            continue\n        if i == 8:\n            continue\n        if i == 9:\n            continue\n        if i == 10:\n            continue\n        if i == 11:\n            continue\n        if i == 12:\n            continue\n        if i == 13:\n            continue\n        if i == 14:\n            continue\n        if i == 15:\n            continue\n        if i == 16:\n            continue\n        if i == 17:\n            continue\n        if i == 18:\n            continue\n        if i == 19:\n            continue\n        if i == 20:\n            continue\n        if i == 21:\n            continue\n        if i == 22:\n            continue\n        if i == 23:\n            continue\n        if i == 24:\n            continue\n        if i == 25:\n            continue\n        if i == 26:\n            continue\n        if i == 27:\n            continue\n        if i == 28:\n            continue\n        if i == 29:\n            continue\n        if i == 30:\n            continue\n        if i == 31:\n            continue\n        if i == 32:\n            continue\n        if i == 33:\n            continue\n        if i == 34:\n            continue\n        if i == 35:\n            continue\n        if i == 36:\n            continue\n        if i == 37:\n            continue\n        if i == 38:\n            continue\n        if i == 39:\n            continue\n        if i == 40:\n            continue\n        if i == 41:\n            continue\n        if i == 42:\n            continue\n        if i == 43:\n            continue\n        if i == 44:\n            continue\n        if i == 45:\n            continue\n        if i == 46:\n            continue\n        if i == 47:\n            continue\n        if i == 48:\n            continue\n        if i == 49:\n            continue\n        if i == 50:\n            continue\n        if i == 51:\n            continue\n        if i == 52:\n            continue\n        if i == 53:\n            continue\n        if i == 54:\n            continue\n        if i == 55:\n            continue\n        if i == 56:\n            continue\n        if i == 57:\n            continue\n        if i == 58:\n            continue\n        if i == 59:\n            continue\n        if i == 60:\n            continue\n        if i == 61:\n            continue\n        if i == 62:\n            continue\n        if i == 63:\n            continue\n        if i == 64:\n            continue\n        if i == 65:\n            continue\n        if i == 66:\n            continue\n        if i == 67:\n            continue\n        if i == 68:\n            continue\n        if i == 69:\n            continue\n        if i == 70:\n            continue\n        if i == 71:\n            continue\n        if i == 72:\n            continue\n        if i == 73:\n            continue\n        if i == 74:\n            continue\n        if i == 75:\n            continue\n        if i == 76:\n            continue\n        if i == 77:\n            continue\n        if i == 78:\n            continue\n        if i == 79:\n            continue\n        if i == 80:\n            continue\n        if i == 81:\n            continue\n        if i == 82:\n            continue\n        if i == 83:\n            continue\n        if i == 84:\n            continue\n        if i == 85:\n            continue\n        if i == 86:\n            continue\n        if i == 87:\n            continue\n        if i == 88:\n            continue\n        if i == 89:\n            continue\n        if i == 90:\n            continue\n        if i == 91:\n            continue\n        if i == 92:\n            continue\n        if i == 93:\n            continue\n        if i == 94:\n            continue\n        if i == 95:\n            continue\n        if i == 96:\n            continue\n        if i == 97:\n            continue\n        if i == 98:\n            continue\n        if i == 99:\n            continue\n        if i == 100:\n            continue\n        break\n    print(i)\n    return"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s=int(stdin)\n    while(s%2!=0):\n        s=3*s+1\n    while(s%2==0):\n        s=s/2\n    return str(int(s))"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    s = int(stdin[0])\n    a = sorted(list(map(int, stdin[1].split(\",\"))))\n    print(a)\n    print(s)\n    if (s % 2) == 0:\n        return (s // 2)\n    else:\n        return ((s*3) + 1)\n\nsolution(input())\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s=int(stdin)\n    min_val=s\n    if s%2==0:\n        for i in range(1,s//2+1):\n            a=s-i\n            if a>min_val:\n                min_val=a\n    else:\n        for i in range(1,s+1):\n            a=s-i\n            if a>min_val:\n                min_val=a\n    return str(min_val)\nprint(solution(input()))\n\"\"\"\n\n\n\"\"\"\n3\n1000000000\n0\n100000000\n2\n\"\"\"\n\n\"\"\"\n6\n8\n\"\"\"\n\n\"\"\"\n8\n4\n\"\"\"\n\n\"\"\"\n4\n1\n2\n3\n\"\"\"\n\n\"\"\"\n10\n\"\"\"\n\n\"\"\"\n0\n\"\"\"\n\n\"\"\"\n6\n8\n\"\"\"\n\n\"\"\"\n1000000000\n\"\"\"\n\n\"\"\"\n8\n\"\"\"\n\n\"\"\"\n1000000000\n\"\"\"\n\n\"\"\"\n1\n\"\"\"\n\n\"\"\"\n4\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Code here\n    arr = stdin.strip().split()\n    a, b, c, d = map(int, arr)\n    if max(a, b, c, d) >= max(a, d):\n        return \"Yes\"\n    else:\n        return \"No\"\n    pass\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t = map(int, stdin.split())\n    if (x > t) and (y > t):\n        return \"No\"\n    if (x > t) or (y > t):\n        return \"Yes\"\n    if x == y:\n        return \"Yes\" if z >= t else \"No\"\n    return \"Yes\" if (z > t) else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    l = stdin.split(' ')\n    A, B, C, D = [int(i) for i in l]\n    count = 1\n    if A < 0 or B < 0 or C < 0 or D < 0:\n        print('No')\n        return\n    while True:\n        if count > 100:\n            print('No')\n            return\n        if A == 0 or B == 0:\n            print('Yes')\n            return\n        if C == 0 or D == 0:\n            print('No')\n            return\n        if A >= 10 and C >= 10:\n            print('Yes')\n            return\n        if A >= 10 and C <= 1:\n            print('Yes')\n            return\n        if B >= 10 and D >= 10:\n            print('Yes')\n            return\n        if B >= 10 and D <= 1:\n            print('Yes')\n            return\n        A -= min(max(C, D), max(B, C))\n        B -= max(max(C, D), max(A, C))\n        count += 1\n    # Your code goes here"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(\"\\n\")\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n    d = int(nums[3])\n    n = 1\n    while n < len(nums):\n        if a < b:\n            a, b = b, a\n        if c < d:\n            c, d = d, c\n        if a < b and a < c and a < d:\n            a, b, c, d = b, c, d, a\n        n += 1\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a > b and a > c and a > d:\n        a, b, c, d = b, c, d, a\n    if a > b and a > c and a > d and b < c and d < a:\n        a, b, c, d = c, d, a, b\n    if a > b and a > c and a > d and b > c and c > a and d > b:\n        a, b, c, d = a, b, c, d\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = b, d, a, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = c, d, a, b\n    if a > b and a > c and a > d and b > c and c > a and d > b:\n        a, b, c, d = b, a, d, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, c, d\n    if a > b and a > c and a > d and b > c and c > a and d > b:\n        a, b, c, d = b, a, c, d\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, d, b, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = c, d, a, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, c, d\n    if a > b and a > c and a > d and b > c and c > a and d > b:\n        a, b, c, d = b, c, d, a\n    if a > b and a > c and a > d and b > c and c > a and d > b:\n        a, b, c, d = b, d, a, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = c, a, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, d, c\n    if a > b and a > c and a > d and b > c and c > a and d > b:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, d, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, c, d\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, d, b, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, d, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, c, d\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, d, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, d, b, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, c, d, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = a, b, d, c\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = c, d, a, b\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = b, a, c, d\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = b, c, d, a\n    if a > b and a > c and a > d and c > b and b > a and d > c:\n        a, b, c, d = c, a, d, b\n    if a > b and a > c and a > d and c >"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, A, B, C, D = map(int, stdin.split())\n    Aoki_health = 10 - C\n    Takahashi_health = 10 - D\n    if Aoki_health <= 0:\n        return \"Yes\"\n    if Takahashi_health <= 0:\n        return \"No\"\n    while True:\n        if Aoki_health <= 0:\n            return \"Yes\"\n        if Takahashi_health <= 0:\n            return \"No\"\n        Aoki_health -= B\n        Aoki_health = max(0, Aoki_health)\n        Takahashi_health -= A\n        Takahashi_health = max(0, Takahashi_health)\n        print(\"Aoki:\", Aoki_health, \"Takahashi:\", Takahashi_health)\n        if Aoki_health <= 0:\n            return \"No\"\n        if Takahashi_health <= 0:\n            return \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    alive_aoki, alive_takahashi = True, True\n    while alive_aoki and alive_takahashi:\n        if alive_aoki:\n            alive_aoki = a > 0 and a - c <= b\n            if alive_aoki:\n                a -= c\n            else:\n                alive_aoki = False\n        if alive_takahashi:\n            alive_takahashi = d > 0 and d - b <= a\n            if alive_takahashi:\n                d -= a\n            else:\n                alive_takahashi = False\n    if alive_aoki:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    A, B, C, D = map(int, stdin.split())\n    x = []\n    x.append(A)\n    x.append(B)\n    x.append(C)\n    x.append(D)\n    x.sort()\n    if x[0] > x[1] or x[1] > x[2] or x[2] > x[3] or x[3] > x[0]:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get the number of attacks\n    n = int(stdin.split()[0])\n    # get the attack parameters\n    attacker, defender, strength = map(int, stdin.split()[1:])\n    # if either attack is 0 or less than their strength, the attacker loses\n    if attacker <= strength or defender <= strength:\n        return 'No'\n    # if they fight, fight until one of them loses\n    while True:\n        # the attacker takes an attack and reduces the defender's health\n        defender -= strength\n        # the defender takes an attack and reduces the attacker's health\n        attacker -= strength\n        # if the defender or the attacker is 0 or less, they lose\n        if defender <= 0 or attacker <= 0:\n            return 'No'\n        # if neither of them has 0 or less health, they lose\n        if defender <= 0 or attacker <= 0:\n            return 'No'\n        # the attacker can still attack if the defender is still alive\n        if attacker > 0:\n            break\n    return 'Yes'"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = map(int, stdin.split())\n    if aoki < takahashi + takahashi:\n        return \"No\"\n    takahashi_attack = takahashi + takahashi\n    aoki_attack = aoki + aoki\n    while True:\n        if aoki_attack <= 0 or takahashi_attack <= 0:\n            break\n        aoki_attack -= aoki\n        takahashi_attack -= takahashi\n    if aoki_attack <= 0:\n        return \"No\"\n    if takahashi_attack <= 0:\n        return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    line.pop(0)\n    line = [int(i) for i in line]\n    a,b,c,d = line\n    print(a<=c and b<=d)\n    print(c<=d and b<=a)\n    return \"No\" if a<=c and b<=d else \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C_list = list(map(int, stdin.split()))\n    gem_values = list(map(int, stdin.split()))\n    gem_costs = list(map(int, stdin.split()))\n    gem_costs.sort()\n    gem_values.sort()\n    gem_values_dict = {gem_values[i]: i+1 for i in range(N)}\n    gem_costs_dict = {gem_costs[i]: i+1 for i in range(N)}\n    gem_costs_dict.pop(gem_costs[-1])\n    gem_values_dict.pop(gem_values[-1])\n    gem_cost_X = 0\n    gem_value_Y = 0\n    gem_i = 0\n    for gem in range(N):\n        gem_cost_X += gem_costs[gem]\n        gem_value_Y += gem_values[gem]\n        if gem_cost_X < gem_value_Y:\n            continue\n        while gem_cost_X - gem_value_Y in gem_costs_dict:\n            gem_i = gem_costs_dict[gem_cost_X - gem_value_Y]\n            gem_cost_X -= gem_costs[gem_i-1]\n            gem_value_Y -= gem_values[gem_i-1]\n            gem_costs_dict.pop(gem_cost_X - gem_value_Y)\n            gem_cost_X = 0\n            gem_value_Y = 0\n            if gem_cost_X <= gem_value_Y:\n                break\n        if gem_cost_X <= gem_value_Y:\n            break\n    return str(gem_cost_X - gem_value_Y)"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{stdin} {max(map(lambda x: x[0] - x[1], enumerate(map(int, stdin.split()))))}\""
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def compute(gem_cost: int, gem_value: int) -> float:\n        return gem_cost + gem_value\n\n    def maximize(gem_cost: list, gem_value: list) -> int:\n        def compute_max(gem_cost: list, gem_value: list, max_cost: int) -> int:\n            if len(gem_cost) == 0:\n                return max_cost\n\n            new_gem_cost = []\n            new_gem_value = []\n            for i in range(len(gem_cost)):\n                new_gem_cost.append(compute(gem_cost[i], gem_value[i]))\n                new_gem_value.append(gem_value[i])\n\n            return max(compute_max(new_gem_cost, new_gem_value, max_cost),\n                       compute_max(gem_cost[:], gem_value[:], max_cost))\n\n        return max(compute_max(gem_cost, gem_value, 0), compute_max([], gem_value, 0))\n\n    n = int(stdin)\n    gem_cost = [int(x) for x in stdin.split()]\n    gem_value = [int(x) for x in stdin.split()]\n    print(maximize(gem_cost, gem_value))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    n = int(stdin[0])\n    gem_values = stdin[1].split()\n    costs = stdin[2].split()\n\n    gems = []\n    for i in range(n):\n        gems.append(int(gem_values[i]))\n\n    costs = list(map(int, costs))\n\n    gems.sort(reverse=True)\n    costs.sort(reverse=True)\n\n    gems_values = []\n    for i in range(n):\n        gems_values.append(gems[i] * costs[i])\n\n    # print(gems)\n    # print(gems_values)\n    # print(costs)\n    # print(gem_values)\n    X = sum(gems_values)\n    Y = sum(costs)\n\n    return str(X - Y)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *input = map(int, stdin.split())\n    return str(max(sum(input) - sum(i for i in input if i > input[-1]) - min(input), 0))"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, *vals, _ = stdin.split()\n    vals = list(map(int, vals))\n\n    value_sum = sum(vals)\n    cost_sum = sum(map(int, input().split()))\n\n    return f\"{value_sum - cost_sum} {value_sum}\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    gem_cost = []\n    gem_val = []\n    for i in range(n):\n        gem_val.append(int(stdin.split()[i + 1]))\n        gem_cost.append(int(stdin.split()[i + 2]))\n    gem_cost.sort(reverse=True)\n    gem_val.sort(reverse=True)\n    cost = 0\n    gem_index = 0\n    while gem_index < n and gem_cost[gem_index] > cost:\n        cost += gem_cost[gem_index]\n        gem_index += 1\n    x = 0\n    y = 0\n    if gem_index < n:\n        x = gem_val[gem_index]\n    if gem_index < n and cost > 0:\n        y = cost\n    print(x, y)\n    return str(x - y)\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n').split()\n    N = int(stdin[0])\n    V_i = stdin[1:]\n    V_i = list(map(int, V_i))\n    C_i = stdin[2:]\n    C_i = list(map(int, C_i))\n    V_i.sort()\n    C_i.sort()\n    X, Y = 0, 0\n    i, j = 0, 0\n    while i < N and j < N:\n        if V_i[i] <= C_i[j]:\n            i += 1\n            X += V_i[i - 1]\n            Y += C_i[j]\n        else:\n            j += 1\n    print(X - Y)"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    gem_values = list(map(int, stdin[1:]))\n    costs = list(map(int, stdin[1:]))\n    total_cost = 0\n    total_value = 0\n    for gem in range(n):\n        gem_value = gem_values[gem]\n        total_value += gem_value\n        total_cost += costs[gem]\n    return f\"{total_value-total_cost}\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *V_i = map(int, stdin.split())\n    *C_i, Y = map(int, stdin.split())\n\n    def get_max_X_Y():\n        max_X, max_Y = -float(\"inf\"), -float(\"inf\")\n        for i, (V_i_i, C_i_i) in enumerate(zip(V_i, C_i)):\n            max_X = max(max_X, V_i_i + C_i_i)\n            max_Y = max(max_Y, max_X - V_i_i)\n\n        return max_X - Y\n\n    return str(get_max_X_Y())\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (H, W) = tuple(map(int, stdin.split()))\n    grid = stdin.split('\\n')\n\n    # solution\n    for i in range(H - 1):\n        for j in range(W - 1):\n            if grid[i][j] == '.' and grid[i + 1][j] == '#':\n                grid[i] = grid[i][:j] + '.' + grid[i][j + 1:]\n            elif grid[i][j] == '#' and grid[i + 1][j] == '.':\n                grid[i] = grid[i][:j] + '#' + grid[i][j + 1:]\n    \n    return '\\n'.join(''.join(i) for i in grid)\n\nstdin = '''\n1 2\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        row = stdin.split()[(_]\n        grid.append([char for char in row])\n    # get the first row and the first column\n    first_row = grid.pop(0)\n    first_column = grid.pop(0)\n    # set the first row and the first column to #\n    first_row = ['#'] * W\n    first_column = ['#'] * H\n    # remove the empty rows\n    while len(grid) > 0:\n        # get the last row\n        last_row = grid.pop(-1)\n        # compare it with the first row\n        if last_row == first_row:\n            # remove the last row\n            grid = grid[:-1]\n            # add the row to the first row\n            first_row = first_row + ['#']\n        # compare it with the first column\n        elif last_row == first_column:\n            # remove the last column\n            grid = grid[:-1]\n            # add the column to the first column\n            first_column = first_column + ['#']\n    # join the first rows and columns\n    return ''.join(first_row + first_column)\n\nsolution(stdin)\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    h, w = n, n\n    grid = []\n    for i in range(h):\n        grid.append(input[1 + i * w])\n    cnt = 0\n    for row in range(h):\n        for col in range(w):\n            if grid[row][col] == '#':\n                cnt += 1\n    if cnt == 0:\n        return \".\" * w\n    if cnt == 1:\n        return \".\" + \".\" * (w - 2) + \"#\"\n    if cnt == 2:\n        return \".\" + \"#\" + \".\" * (w - 2) + \"#\"\n    if cnt == 3:\n        return \"#\" + \".\" * (w - 2) + \"#\"\n    if cnt == 4:\n        return \"#\" + \"#\" + \".\" * (w - 2) + \"#\"\n    if cnt == 5:\n        return \"#\" + \"#\" + \"#\" + \".\" * (w - 2) + \"#\"\n    if cnt == 6:\n        return \"#\" + \"#\" + \"#\" + \"#\" + \".\" * (w - 2) + \"#\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    h = int(lines[0])\n    w = int(lines[1])\n    grid = [[] for _ in range(h)]\n    for i in range(1, h+1):\n        line = lines[i]\n        for j in range(1, w+1):\n            grid[i-1].append(line[j-1])\n    for i in range(h):\n        if sum(grid[i]) == 0:\n            print(*grid[i], end='')\n        else:\n            print('#', end='')\n    print()\n    return ''"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines.\n    lines = stdin.split(\"\\n\")\n\n    # Parse the lines.\n    [num_rows, num_cols] = lines[0].split()\n    num_rows = int(num_rows)\n    num_cols = int(num_cols)\n    grid = [[None for _ in range(num_cols)] for _ in range(num_rows)]\n    for line in lines[1:]:\n        [line_row, line_col] = line.split()\n        line_row = int(line_row)\n        line_col = int(line_col)\n        grid[line_row - 1][line_col - 1] = \"#\" if line_col % 2 == 0 else \".\"\n    # print(grid)\n    # print(num_rows)\n    # print(num_cols)\n\n    # Init the final result.\n    final_result = \"\"\n\n    # Remove rows and cols until all the \"white\" squares are at the end.\n    while True:\n        is_reduced = True\n        while True:\n            # Remove the first row if any black square is in it.\n            if grid[0][0] == \"#\":\n                grid.pop(0)\n                final_result += \"#\"\n                is_reduced = False\n            else:\n                break\n\n        # Remove the last col if any black square is in it.\n        if grid[0][-1] == \"#\":\n            grid.pop()\n            final_result += \"#\"\n            is_reduced = False\n\n        # Remove the first col if any black square is in it.\n        if grid[-1][0] == \"#\":\n            grid.pop()\n            final_result += \"#\"\n            is_reduced = False\n\n        # Remove the first row if any black square is in it.\n        if grid[0][0] == \"#\":\n            grid.pop(0)\n            final_result += \"#\"\n            is_reduced = False\n\n        # Check if the grid is reduced.\n        if not is_reduced:\n            break\n\n        # Remove the last row if any black square is in it.\n        if grid[-1][0] == \"#\":\n            grid.pop()\n            final_result += \"#\"\n            is_reduced = False\n\n        # Remove the last row if any black square is in it.\n        if grid[-1][-1] == \"#\":\n            grid.pop()\n            final_result += \"#\"\n            is_reduced = False\n\n        # Check if the grid is reduced.\n        if not is_reduced:\n            break\n\n    # Print the final result.\n    print(final_result)\n    return final_result\n\n\nsolution(stdin)\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = stdin.split()\n    arr = stdin.split(\"\\n\")\n    arr = list(map(lambda x: list(x), arr))\n    H = int(h)\n    W = int(w)\n    \n    row = []\n    col = []\n    \n    for i in range(len(arr)):\n        if arr[i].count('.') == 0:\n            row.append(i)\n        if arr[i].count('.') == 0:\n            col.append(i)\n    \n    def _compress(n, row, col):\n        for i in range(len(row)):\n            arr[row[i]][col[i]] = '#'\n        for i in range(len(row)):\n            arr[row[i]][col[i]] = '.'\n        \n        # remove row\n        if n == 0:\n            return\n        else:\n            while(row.count(row[-1]) == 0):\n                row.pop()\n                n -= 1\n            # remove col\n            if n == 0:\n                return\n            else:\n                while(col.count(col[-1]) == 0):\n                    col.pop()\n                    n -= 1\n            \n            if n!= 0:\n                _compress(n, row, col)\n                return\n            else:\n                return\n    \n    _compress(H, row, col)\n    _compress(W, col, row)\n    \n    for i in range(len(row)):\n        for j in range(len(col)):\n            arr[row[i]][col[j]] = '#'\n    arr = \"\\n\".join([\"\".join(row) for row in arr])\n    \n    return arr\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    grid = stdin.split('\\n')\n    grid_rows = []\n    for i in range(rows):\n        grid_rows.append(list(grid[i]))\n\n    # keep track of the first white square that\n    # appears in any column or row,\n    # keep track of the first black square that appears in any column or row,\n    # and\n    # keep track of the first black square that appears in any column or row,\n    # if all white squares\n    # are in the same row or column or\n    # if all black squares are in the same row or column, then\n    # we have found the solution\n\n    first_white_row = 0\n    first_black_row = 0\n    first_black_col = 0\n    first_white_col = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid_rows[i][j] == '.':\n                continue\n            elif grid_rows[i][j] == '#':\n                first_black_row = i\n                first_black_col = j\n                break\n        else:\n            continue\n        break\n    for i in range(rows):\n        if grid_rows[i].count('#') == 0:\n            first_white_row = i\n            break\n    for i in range(cols):\n        if grid_rows[0][i] == '#':\n            first_white_col = i\n            break\n    for i in range(cols):\n        if grid_rows[first_black_row][i] == '#':\n            first_black_col = i\n            break\n    for i in range(cols):\n        if grid_rows[first_white_row][i] == '#':\n            first_white_col = i\n            break\n\n    # return the solution\n    return ''.join(['.' * (first_white_col + 1)] + ['#'] + ['.' * (first_black_col + 1)] + ['#'] + ['.' * (first_black_row + 1)])\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        line = stdin.split()[0]\n        grid.append(line)\n    return ''.join([str(grid[i][j]) for i in range(H) for j in range(W) if grid[i][j] == '#'])\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    radius = int(stdin)\n    return str(3.141592654 * radius ** 2)\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    r = inputs[0]\n    return f'{2 * math.pi * r}'\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(3.14159265358979323846 * radius * 2)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Return the circumference of a circle of radius R.\n    return stdin.strip()\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return f\"{2 * math.pi * r:.3f}\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    print(round(2 * 3.14 * r, 2))"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.pi*2*math.sqrt(int(stdin)))\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14159265358979323846 * R\n    return str(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the circumference of a circle of radius 'R' as a string.\n    \"\"\"\n    return str(float(3.14159265358979323846 * 2) * float(stdin))"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(2 * 3.14159265358979323846 * R)\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        raise ValueError('S has invalid length.')\n    n = len(s)\n    if n < 2:\n        raise ValueError('S has invalid length.')\n    occur = {\n        x: s.count(x) for x in set(s)\n    }\n    if len(occur) < 3:\n        raise ValueError('S consists of less than 3 letters.')\n    return 'Yes' if len(occur) == 3 and occur['A'] == occur['S'] else 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if stdin.count(char) == 2:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    counts = dict()\n    for c in s:\n        if c in counts.keys():\n            counts[c] += 1\n        else:\n            counts[c] = 1\n    is_twice = False\n    for k in counts.keys():\n        if counts[k] == 2:\n            is_twice = True\n    return \"Yes\" if is_twice else \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Return your answer to the question below.\n    data = stdin.split()\n    letter_set = set()\n    double_set = set()\n    for letter in data[0]:\n        if letter not in letter_set:\n            letter_set.add(letter)\n        else:\n            double_set.add(letter)\n    if len(letter_set) == 2 and len(double_set) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, S = stdin.split()\n    # count = dict()\n    # for ch in S:\n    #     if ch not in count:\n    #         count[ch] = 1\n    #     else:\n    #         count[ch] += 1\n    #\n    # n = len(S)\n    # count = dict()\n    # for ch in S:\n    #     if ch not in count:\n    #         count[ch] = 1\n    #     else:\n    #         count[ch] += 1\n    #\n    # if count[S[0]] == n and count[S[1]] == n:\n    #     return 'Yes'\n    # else:\n    #     return 'No'\n    count = dict()\n    for ch in S:\n        if ch not in count:\n            count[ch] = 1\n        else:\n            count[ch] += 1\n\n    return 'Yes' if 2 in count.values() else 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if (s.count(s[0]) == 2 and s.count(s[1]) == 2) or (s.count(s[1]) == 2 and s.count(s[2]) == 2) or (\n            s.count(s[2]) == 2 and s.count(s[3]) == 2):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    A = 0\n    S_A = 0\n    for i in range(len(S)):\n        if S[i].isupper():\n            A += 1\n            S_A += 1\n        else:\n            S_A += 1\n    if A == 1 and S_A == 2:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_a = 0\n    number_of_others = 0\n    for ch in stdin:\n        if ch == 'A':\n            number_of_a += 1\n        else:\n            number_of_others += 1\n    if number_of_a == 2 and number_of_others == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) == 4 and stdin.count(\"A\") == 2 and stdin.count(\"S\") == 2 else \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    char_list = list(stdin)\n    print(char_list)\n    set_char_list = set(char_list)\n    # print(set_char_list)\n    print(len(set_char_list))\n    if len(set_char_list) == 2:\n        if set_char_list.pop() == set_char_list.pop():\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return max(a+b, a-b, a*b)"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    print(max(A + B, A - B, A * B))\n    return ''\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split(' ')\n    num_list = [int(i) for i in num_list]\n    num_list.sort()\n    return str(num_list[-1] + num_list[-2] - num_list[0])\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(max(A + B, A - B, A * B))\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    max_number = -1\n    for x in range(0, 100, 1):\n        for y in range(0, 100, 1):\n            z = A + x + y\n            if z > max_number:\n                max_number = z\n            z = A - x - y\n            if z > max_number:\n                max_number = z\n            z = x * y\n            if z > max_number:\n                max_number = z\n    return str(max_number)\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 or b == 0:\n        return -1\n    print(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return max(int(stdin.split()[0]) + int(stdin.split()[1]), int(stdin.split()[0]) - int(stdin.split()[1]), int(stdin.split()[0]) * int(stdin.split()[1]))"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(' ')\n    \n    if len(inputs) == 3:\n        return calculate(int(inputs[0]), int(inputs[1]), int(inputs[2]))\n    else:\n        raise Exception('inputs error')\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if a < b:\n        print(a + b)\n    elif a > b:\n        print(a - b)\n    else:\n        print(a * b)\n\nsolution(input())\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inns, heights = stdin.split(\"\\n\")\n    inns = inns.split()\n    inns = [int(i) for i in inns]\n    heights = heights.split()\n    heights = [int(i) for i in heights]\n    count = 0\n    for i in range(len(heights)):\n        if heights[i] < heights[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    mountains = list(map(int, stdin.split()[1:]))\n\n    distinct_mountain_count = 0\n\n    for i in range(N):\n        if i == 0:\n            if mountains[i] > mountains[i + 1]:\n                distinct_mountain_count += 1\n        else:\n            if mountains[i] >= mountains[i - 1] and mountains[i] > mountains[i + 1]:\n                distinct_mountain_count += 1\n\n    return str(distinct_mountain_count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_s = []\n    for _ in range(N):\n        h_s.append(int(stdin.split()[_]))\n    print(solution2(h_s))\n    return '\\n'.join([str(i) for i in solution2(h_s)])\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    mountain_h = list(map(int, stdin.split()[1:]))\n    res = 0\n    for i in range(n):\n        if mountain_h[i] >= mountain_h[i-1] and mountain_h[i-1] >= mountain_h[i-2]:\n            res += 1\n    return str(res)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n\n    # max_h = max(h)\n    # max_i = h.index(max_h)\n    # for i in range(max_i):\n    #     h.pop(max_i)\n    #     if max_i - i > 0:\n    #         h.append(max_i - i)\n    #     else:\n    #         h.append(max_h)\n    #     if sum(h) < max_h:\n    #         h.append(max_h)\n    #     elif sum(h) > max_h:\n    #         h.append(sum(h) - max_h)\n\n    # print(h)\n    h.sort(reverse=True)\n\n    cnt = 0\n    max_h = max(h)\n    max_i = h.index(max_h)\n    # print(max_i)\n    for i in range(max_i):\n        h.pop(max_i)\n        if max_i - i > 0:\n            h.append(max_i - i)\n        else:\n            h.append(max_h)\n        if sum(h) < max_h:\n            h.append(max_h)\n        elif sum(h) > max_h:\n            h.append(sum(h) - max_h)\n        cnt += 1\n    return cnt\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    mountain_heights = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(N):\n        # we can see the ocean if and only if the lower mountain is lower than the current mountain and the lower mountain is lower than the previous mountain\n        if mountain_heights[i] > mountain_heights[i - 1] and mountain_heights[i] < mountain_heights[i - 2]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inns_height = list(map(int, stdin.split()))\n    inns_height.sort(reverse=True)\n\n    cnt = 0\n    for i in range(1, len(inns_height)):\n        if inns_height[i - 1] <= inns_height[i]:\n            cnt += 1\n\n    return str(cnt)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    mountains = list(map(int, stdin.split()[1:]))\n    return str(min(mountains, key=lambda x: x if mountains[0] <= x <= mountains[-1] else x + 1000000))\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    height_list = list(map(int, line[1:]))\n    max_height = max(height_list)\n    print(height_list.count(max_height))\n    return\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = list(map(int, stdin.split()))\n    # for each mountain we only check if the height from the next mountain is lower or equal to the current\n    # mountain's height. If so we can see the mountain and add the mountain to the result\n    # This is O(N) time and O(N) space\n    res = []\n    for i in range(N):\n        result = 0\n        for j in range(i):\n            if heights[i] >= heights[j]:\n                result += 1\n        res.append(result)\n    return \" \".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_steps(sequence: list) -> int:\n        steps_list = []\n        for num in sequence:\n            steps_list.append(num)\n        for i in range(1, len(steps_list)):\n            steps_list[i] = steps_list[i] + steps_list[i - 1]\n        return steps_list\n\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    result = calculate_steps(numbers)\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    steps = list(map(int, stdin.split()))\n    count = 1\n    sum = steps[0]\n    result = []\n    for i in range(1, n):\n        if steps[i] > sum:\n            result.append(str(count))\n            sum = steps[i]\n            count = 1\n        else:\n            count += 1\n    result.append(str(count))\n    print(len(result))\n    for i in range(len(result)):\n        print(result[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    step = 1\n    for _ in range(n):\n        step += 1\n        print(step)\n    return step"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"1 2 3 1 2 3 4\")\n    2\n    >>> solution(\"1 1 1 1\")\n    1\n    >>> solution(\"1 2 3 4 5\")\n    3\n    >>> solution(\"1 2 1 2 1\")\n    2\n    >>> solution(\"1 1 1 1\")\n    1\n    '''\n    n = int(stdin)\n    stair = list(map(int, stdin.split()))\n    steps = []\n    stair_to_step = dict()\n    for i in range(1, n+1):\n        steps.append(i)\n        stair_to_step[i] = i\n    for stair in stair:\n        steps.remove(stair)\n        steps.append(stair_to_step[stair] - stair)\n    return str(len(steps)) + '\\n' +''.join(map(str, steps))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1].split(' ')\n    steps = {}\n    for x in a:\n        if x not in steps.keys():\n            steps[x] = 1\n        else:\n            steps[x] += 1\n    result = 1\n    for x in steps.values():\n        result *= x\n    return str(result)\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stairs = [int(x) for x in stdin.split()]\n    t = 1\n    step = stairs[0]\n    stairs_dict = {1:1,2:1,3:2}\n    for i in range(1,n):\n        if i == 0:\n            t += 1\n            step = stairs[i]\n        elif i == 1:\n            t += 1\n            step = stairs[i] + stairs[i-1]\n        elif i == n-1:\n            t += 1\n            step = stairs[i] + stairs[i-1] + stairs[i-2]\n        else:\n            t += 1\n            step = stairs[i] + stairs[i-1] + stairs[i-2] + stairs[i-3]\n        if step in stairs_dict:\n            step_count = stairs_dict[step]\n        else:\n            step_count = 1\n            stairs_dict[step] = 1\n        t += step_count\n    return t"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(map(int, stdin.strip().split())))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return str(n)\n    else:\n        return str(n) + '\\n' + str(solution(stdin[:n - 1]))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split()\n    n = int(n)\n    l = len(seq)\n    steps = []\n    i = 0\n    while i < l:\n        a = seq[i]\n        b = seq[i + 1]\n        if int(a) + 1!= int(b):\n            i += 1\n            continue\n        a = int(a)\n        b = int(b)\n        for _ in range(a):\n            steps.append(b)\n        i += 2\n    steps.sort()\n    return f'{len(steps)}' + '\\n' +''.join(map(str, steps))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = [int(i) for i in stdin.split()[1:]]\n\n    stairs = {}\n    for i in numbers:\n        if i not in stairs:\n            stairs[i] = 1\n        else:\n            stairs[i] += 1\n\n    result = 1\n    stairs = list(stairs.items())\n    stairs = sorted(stairs, key=lambda x: x[0])\n    for i in range(1, n + 1):\n        if i in stairs:\n            result += 1\n            stairs.remove(i)\n        else:\n            result = 0\n            break\n    return result\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_cases, total = int(stdin.split()[0]), 0\n    for i in range(number_of_test_cases):\n        total += int(stdin.split()[i + 1])\n    return str(total)\n\nsolution(\"\"\"4\n10\n100\n100\n30\n\"\"\")\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(1, int(stdin)):\n        a,b = stdin.split()\n        answer += int(a) + int(b)\n    return str(answer)\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        x, k = 1, 2\n        while x + 2 * x + 4 * x + 2 ** (k - 1) * x!= n:\n            x += 2\n            k += 1\n        print(x)\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    t = int(inputs[0])\n    inputs = inputs[1:]\n    nums = list(map(int, inputs))\n    for i in range(t):\n        i = i + 1\n        x = nums[i - 1]\n        for j in range(1, i):\n            x = x + nums[i - j]\n        if x == nums[i]:\n            print(x)\n            return\n    print(\"no answer\")"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        x = 0\n        k = 0\n        while True:\n            x += 1\n            k += 1\n            if (2**k) * x == n:\n                break\n        print(x)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        x, k = list(map(int, stdin.split()))\n        if x + 2*x**k - x**2 == n:\n            return str(x) + \" \" + str(k)"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t = int(stdin.strip())\n    for i in range(t):\n        n = int(stdin.strip())\n        m = 1\n        while m * m <= n:\n            if n % m == 0:\n                x = n // m\n                break\n            m += 1\n        else:\n            x = -1\n        print(x)\n    return \"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,int(1e6)+1):\n        if i+2*i+4*i+2**(i-1)*i == n:\n            return str(i)\n\nsolution(input())\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        for j in range(2, 8):\n            x = n // j\n            k = 2\n            while x >= 2 ** k:\n                if x == 2 ** k:\n                    break\n                k += 1\n            if k > 1:\n                print(x)\n                break\n\n\nsolution(input())\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin())\n        found_k_int = False\n        for k in range(2, int(math.sqrt(n))):\n            if n == k * (k + 2) * (k + 4):\n                found_k_int = True\n                print(k)\n                break\n        if not found_k_int:\n            print(-1)\n\n\nsolution(input())\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = stdin\n    return str(int(n) - int(k))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn, k = map(int, stdin.split())\n\ns = n\nfor i in range(k):\n    if s % 10!= 0:\n        s = (s-1) // 10 * 10 + s % 10\n    else:\n        s = s // 10\nprint(s)\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n!= 1:\n        if n % 10!= 0:\n            n = n - 1\n        else:\n            n = n // 10\n        count += 1\n\n    return str(count + k)\n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    a = x\n    while y > 0:\n        x = x - 1 if x > 0 else x * 10\n        y -= 1\n    return str(x)\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[1]"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nresult = \"\"\nwhile (int(stdin)):\n    result += str(int(stdin)-1)\n    stdin = result\n    result = \"\"\n\nreturn result\n'''\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    count = 0\n    nums = []\n    while n!= 1:\n        nums.append(n)\n        n = max(n // 10, n % 10)\n        count += 1\n    n = 0\n    while count > k:\n        count -= 1\n        n = n * 10 + nums[-1]\n        nums.pop()\n    return str(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    for _ in range(int(stdin.split()[1])):\n        print(int(stdin.split()[0])-1)\n    return \"0\"\n\nsolution(input())\n\ninput()\n\nsolution(input())\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, k = int(stdin[0]), int(stdin[1])\n    while n > 1:\n        if n % 10!= 0:\n            n = n - 1\n        else:\n            n = n // 10\n    return n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = stdin.split()[1:]\n    heights.sort()\n    ans = 0\n    current = 0\n    for i in range(n):\n        if (current - heights[i]) >= 1:\n            ans += 1\n            current = heights[i]\n    return str(ans)\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    people = list(map(int, stdin.split()))\n    max_circle = people.copy()\n    people = list(set(people))\n    people.sort(reverse=True)\n    while len(max_circle) > 1:\n        new_circle = []\n        for i in range(len(max_circle)):\n            new_circle.append(max_circle[i])\n            if i + 1 < len(max_circle):\n                new_circle.append(max_circle[i + 1])\n            if i + 2 < len(max_circle):\n                new_circle.append(max_circle[i + 2])\n        max_circle = new_circle\n    return str(len(max_circle)) +'' + str(max_circle).replace(', ','')\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    c = 0\n    while c <= n // 2:\n        c += 1\n        heights = heights[1:] + [heights[0]]\n        if heights[0] - heights[-1] <= 1:\n            return str(c)\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    k = max(arr)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sum([abs(arr[i] - arr[i - mid]) for i in range(mid, n)]) <= 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    result = mid + 1\n    # print(left, right, mid)\n    if left == right:\n        return result\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sum([abs(arr[i] - arr[i - mid]) for i in range(mid, n)]) <= 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    result = left + 1\n    # print(left, right, mid)\n    return result\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    heights = list(map(int, stdin[1].split()))\n    max_bal_circle_size = 0\n    max_bal_circle_heights = []\n    for i in range(1, N + 1):\n        bal_circle_size = 0\n        bal_circle_heights = []\n        for j in range(1, N + 1):\n            if heights[j - 1] < heights[j]:\n                bal_circle_size += 1\n                bal_circle_heights.append(heights[j - 1])\n                if j!= N and heights[j] < heights[j + 1]:\n                    bal_circle_heights.append(heights[j])\n        if bal_circle_size > max_bal_circle_size:\n            max_bal_circle_size = bal_circle_size\n            max_bal_circle_heights = bal_circle_heights\n    return''.join(map(str, max_bal_circle_heights)) +'' + str(max_bal_circle_size)\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = sorted(map(int, stdin.split()))\n    i = 1\n    j = 2\n    res = 1\n    while h[i] - h[j] <= 1:\n        if h[i] - h[j] == 1:\n            res += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    print(res)\n    print(*[h[i] for i in range(1, n)], sep=' ')\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    k = 0\n    res = []\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s > k:\n            k = s\n            res = [a[i]]\n        elif s == k:\n            res.append(a[i])\n\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s > k:\n            k = s\n            res.append(a[i])\n        elif s == k:\n            res.append(a[i])\n\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s > k:\n            k = s\n            res.append(a[i])\n        elif s == k:\n            res.append(a[i])\n\n    return str(len(res)) + \"\\n\" + \" \".join(map(str, res))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split()))\n    res = []\n    count = 0\n    for i in range(n):\n        if a[i]!= res[-1]:\n            res.append(a[i])\n            count += 1\n    return str(count)"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    n = data[0]\n    arr = data[1:]\n    sorted_arr = sorted(arr, key=lambda x: -x)\n    # print(sorted_arr)\n    res = []\n    for i in range(n):\n        index = (i+1) % n\n        # print(index)\n        res.append(sorted_arr[index])\n    # print(res)\n    res.sort()\n    # print(res)\n    return \" \".join([str(x) for x in res])"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    k = int(max(a))\n    a.sort()\n    a = a[::-1]\n    result = []\n    while len(result) < k:\n        for i in range(n):\n            if i > 1 and a[i] == a[i - 1]:\n                continue\n            if a[i] - a[i - 1] > 1:\n                break\n            result.append(a[i])\n    return str(len(result)) +'' +''.join(map(str, result))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = sorted([int(x) for x in stdin.split()])\n    return -1 if len(s) < n or sum(s) > m else str(len(s))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    song_sizes = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split()))\n        song_sizes.append((a, b))\n\n    def get_sizes_sum(sizes):\n        sum_size = 0\n        for song in sizes:\n            sum_size += song[0]\n        return sum_size\n\n    for i in range(len(song_sizes)):\n        for j in range(i+1, len(song_sizes)):\n            if get_sizes_sum(song_sizes[:i]) + get_sizes_sum(song_sizes[i+1:]) <= m:\n                return str(i+1)\n    return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = list(map(int, stdin.split()))\n    n, m = stdin_lines[0], stdin_lines[1]\n    song_sizes = list(map(int, stdin_lines[2:]))\n    compressed_sizes = [0] * n\n    result = -1\n    for i in range(n):\n        compressed_sizes[i] = min(song_sizes[i], m)\n        m -= compressed_sizes[i]\n\n    if m > 0:\n        result = n\n    else:\n        for i in range(n):\n            if compressed_sizes[i] == m:\n                result = i\n                break\n    if result == -1:\n        print(-1)\n    else:\n        print(result)\n\n\nprint(solution(\"\"\"4 21\n10 8\n7 4\n3 1\n5 4\n\"\"\"))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = sorted([int(i) for i in stdin.split()])\n    tot = 0\n    for i in range(n):\n        tot += arr[i]\n\n    if tot > m:\n        return \"-\"\n\n    while True:\n        if sum(arr) <= m:\n            break\n        tot -= arr.pop(0)\n    return str(len(arr))\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # feel free to create and use additional functions if you wish\n    n, m = map(int, stdin.split())\n    # return 1\n    if n == 1:\n        return str(m)\n    a = []\n    b = []\n    for _ in range(n):\n        a_i, b_i = map(int, stdin.split())\n        a.append(a_i)\n        b.append(b_i)\n    a = sorted(a, reverse=True)\n    b = sorted(b, reverse=True)\n    res = 0\n    for i in range(n):\n        a_i = a[i]\n        b_i = b[i]\n        # print(a_i, b_i)\n        if a_i >= b_i:\n            res += a_i\n        else:\n            res += b_i\n    # print(res)\n    if res > m:\n        return -1\n    else:\n        return str(res)\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def comp(i):\n        if a[i] >= b[i]:\n            return 1 + comp(i - 1)\n        else:\n            return max(comp(i - 1), 1 + comp(i - 1))\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    return str(comp(len(a) - 1) + m) if comp(len(a) - 1) + m <= m else \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    all_sizes = stdin[2:]\n    all_sizes = [int(i) for i in all_sizes]\n    all_sizes.sort()\n    output = None\n    for i in range(n):\n        for j in range(i + 1, n):\n            if output is None:\n                output = 2\n            else:\n                output = max(output, i + all_sizes[i] + j + all_sizes[j])\n    return str(output)\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[0])\n    if sum(map(lambda x: x[1], songs)) <= m:\n        return \" \".join(map(str, map(lambda x: x[0], songs)))\n    else:\n        return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    songs = []\n    for i in range(n):\n        songs.append(tuple(map(int, stdin.strip().split())))\n\n    # find compation\n    total_size = 0\n    for song in songs:\n        song = list(song)\n        total_size += sum(song)\n        song.append(0)\n        comp = (total_size - m) - (sum(song))\n        if comp <= 0:\n            return str(0)\n        else:\n            return str(comp)\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = [map(int, stdin.split()) for _ in range(n)]\n    songs.sort(key=lambda x: x[1], reverse=True)\n\n    res = 0\n    for song in songs:\n        if sum(song) > m:\n            return \"-\"\n        else:\n            res += 1\n            m -= song[1]\n    return str(res)\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2])\n\n    s = \"\"\n    for i in range(n):\n        s += chr(97 + random.randint(0, 25)) * a\n    s = s[:n]\n\n    for i in range(n):\n        sub = s[i:i+a]\n        print(sub)\n        if len(set(sub)) == b:\n            s = s[:i] + sub[0] + s[i+a:]\n        else:\n            for j in range(i + 1, n):\n                sub = s[i:i+a]\n                if len(set(sub)) == b:\n                    s = s[:i] + sub[0] + s[i+a:]\n                    break\n\n    return s\n\nsolution(stdin)\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    ans = []\n    for i in range(n):\n        sub = ''\n        for j in range(a):\n            sub += chr(65 + random.randrange(b))\n        ans.append(sub)\n    return \" \".join(ans)\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for case in range(int(stdin)):\n        length, a, b = map(int, stdin.split())\n        ans = []\n        while length >= 0:\n            ans += [list(''.join(set((''.join(sorted(ans))).split('_'))))]\n            length -= a\n        print(*ans)\n    return ''\n\nsolution('6 5 3')\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given: Three non-negative integers, each less than 10,000.\n    Return: The product of the three integers, minus their sum.\n    '''\n\n    return\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if __name__!= \"__main__\":\n        sys.exit(0)\n    \n    t = int(stdin.strip())\n    for _ in range(t):\n        n,a,b = map(int,stdin.strip().split())\n        res = \"\".join(string.ascii_lowercase[i:i+a] for i in range(n))\n        if len(set(res.replace(\"\", \".\"))) == b:\n            print(res)\n        else:\n            print(\"-1\")\nsolution(\"4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\\n\")"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for i in range(int(stdin.split()[0])):\n        l, a, b = map(int, stdin.split()[1:])\n        str_arr = []\n        for i in range(l):\n            str_arr.append(stdin[i:i + a])\n        str_arr = sorted(str_arr, key=lambda x: (len(set(x)), x))\n        ans.append(str_arr[0])\n    return \" \".join(ans)\nprint(solution(input()))\n\nIn the second test case of the example, consider all the substrings of length $6$:  \"twelve\": it contains $3$ distinct (unique) letters,  \"pikye\": it contains $2$ distinct (unique) letters,  \"eyer\": it contains $2$ distinct (unique) letters,  \"pike\": it contains $2$ distinct (unique) letters,  \"er\": it contains $2$ distinct (unique) letters,  \"jere\": it contains $1$ distinct (unique) letters.\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, a, b = map(int, stdin.split())\n\ns = \"\"\n\nfor i in range(n):\n    s += \"\".join(set(stdin[i:i+a]))\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n\nfor i in range(1, n+1):\n    s += stdin[i:n]\n    s += stdin[0:n-i]\n\nfor i in range(1, n+1):\n    s += stdin[0:n-i]\n    s += stdin[i:n]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nfor i in range(1, n+1):\n    s += stdin[0:n-i]\n    s += stdin[i:n]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nfor i in range(1, n+1):\n    s += stdin[0:n-i]\n    s += stdin[i:n]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nprint(s)\n\ns = \"\"\n\nfor i in range(n):\n    s += stdin[i:i+a]\n    s += stdin[0:n-i]\n\nfor i in range(1, n+1):\n    s += stdin[0:n-i]\n    s += stdin[i:n]\n\nprint(s)\n\n\n\nprint(\"two\")\n\n\n\nprint(\"three\")\n\n\n\nprint(\"four\")\n\n\n\nprint(\"five\")\n\n\n\nprint(\"six\")\n\n\n\nprint(\"seven\")\n\n\n\nprint(\"eight\")\n\n\n\nprint(\"nine\")\n\n\n\nprint(\"ten\")\n\n\n\n\nprint(\"eleven\")\n\n\n\nprint(\"twelve\")\n\n\n\nprint(\"thirteen\")\n\n\n\nprint(\"fourteen\")\n\n\n\nprint(\"fifteen\")\n\n\n\nprint(\"sixteen\")\n\n\n\nprint(\"seventeen\")\n\n\n\nprint(\"eighteen\")\n\n\n\nprint(\"nineteen\")\n\n\n\nprint(\"twenty\")\n\n\n\nprint(\"twenty one\")\n\n\n\nprint(\"twenty two\")\n\n\n\nprint(\"twenty three\")\n\n\n\nprint(\"twenty four\")\n\n\n\nprint(\"twenty five\")\n\n\n\nprint(\"twenty six\")\n\n\n\nprint(\"twenty seven\")\n\n\n\nprint(\"twenty eight\")\n\n\n\nprint(\"twenty nine\")\n\n\n\nprint(\"twenty ten\")\n\n\n\nprint(\"twenty eleven\")\n\n\n\nprint(\"twenty twelve\")\n\n\n\nprint(\"twenty thirteen\")\n\n\n\nprint(\"twenty fourteen\")\n\n\n\nprint(\"twenty fifteen\")\n\n\n\nprint(\"twenty sixteen\")\n\n\n\nprint(\"twenty seventeen\")\n\n\n\nprint(\"twenty eighteen\")\n\n\n\nprint(\"twenty nineteen\")\n\n\n\nprint(\"twenty twenty\")\n\n\n\nprint(\"twenty one\")\n\n\n\nprint(\"twenty two\")\n\n\n\nprint(\"twenty three\")\n\n\n\nprint(\"twenty four\")\n\n\n\nprint(\"twenty five\")\n\n\n\nprint(\"twenty six\")\n\n\n\nprint(\"twenty seven\")\n\n\n\nprint(\"twenty eight\")\n\n\n\nprint(\"twenty nine\")\n\n\n\nprint(\"twenty ten\")\n\n\n\nprint(\"twenty eleven\")\n\n\n\nprint(\"twenty twelve\")\n\n\n\nprint(\"twenty thirteen\")\n\n\n\nprint(\"twenty fourteen\")\n\n\n\nprint(\"twenty fifteen\")\n\n\n\nprint(\"twenty sixteen\")\n\n\n\nprint(\"twenty seventeen\")\n\n\n\nprint(\"twenty eighteen\")\n\n\n\nprint(\"twenty nineteen\")\n\n\n\nprint(\"twenty twenty\")\n\n\n\nprint(\"twenty one\")\n\n\n\nprint(\"twenty two\")\n\n\n\nprint(\"twenty three\")\n\n\n\nprint(\"twenty four\")\n\n\n\nprint(\"twenty five\")\n\n\n\nprint(\"twenty six\")\n\n\n\nprint(\"twenty seven\")\n\n\n\nprint(\"twenty eight\")\n\n\n\nprint(\"twenty nine\")\n\n\n\nprint(\"twenty ten\")\n\n\n\nprint(\"twenty eleven\")\n\n\n\nprint(\"twenty twelve\")\n\n\n\nprint(\"twenty thirteen\")\n\n\n\nprint(\"twenty fourteen\")\n\n\n\nprint(\"twenty fifteen\")\n\n\n\nprint(\"twenty sixteen\")\n\n\n\nprint(\"twenty seventeen\")\n\n\n\nprint(\"twenty eighteen\")\n\n\n\nprint(\"twenty nineteen\")\n\n\n\nprint(\"twenty twenty\")\n\n\n\nprint(\"twenty one\")\n\n\n\nprint(\"twenty two\")\n\n\n\nprint(\"twenty three\")\n\n\n\nprint(\"twenty four\")\n\n\n\nprint(\"twenty five\")\n\n\n\nprint(\"twenty six\")\n\n\n\nprint(\"twenty seven\")\n\n\n\nprint(\"twenty eight\")\n\n\n\nprint(\"twenty nine\")\n\n\n\nprint(\"twenty ten\")\n\n\n\nprint(\"twenty eleven\")\n\n\n\nprint(\"twenty twelve\")\n\n\n\nprint(\"twenty thirteen\")\n\n\n\nprint(\"twenty fourteen\")\n\n\n\nprint(\"twenty fifteen\")\n\n\n\nprint(\"twenty sixteen\")\n\n\n\nprint(\"twenty seventeen\")\n\n\n\nprint(\"twenty eighteen\")\n\n\n\nprint(\"twenty nineteen\")\n\n\n\nprint(\"twenty twenty\")\n\n\n\nprint(\"twenty one\")\n\n\n\nprint(\"twenty two\")\n\n\n\nprint(\"twenty three\")\n\n\n\nprint(\"twenty four\")\n\n\n\nprint(\"twenty five\")\n\n\n\nprint(\"twenty six\")\n\n\n\nprint(\"twenty seven\")\n\n\n\nprint(\"twenty eight\")"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    t = int(input[0])\n\n    for _ in range(t):\n        n, a, b = map(int, input[1].split())\n        c = []\n        for i in range(n):\n            c.append(str(input[2][i * a:i * a + a]))\n        if (n == 1) and (a == 1) and (b == 1):\n            return \"a\"\n        if (n == 1) and (a == 1) and (b >= 2):\n            return \"\".join(set(c[0]))\n        if (n == 1) and (a >= 2) and (b == 1):\n            return \"\".join(set(c[0]))\n        if (n == 1) and (a >= 2) and (b >= 2):\n            return \"\".join(set(c[0]))\n        if (n >= 2) and (a == 1) and (b == 1):\n            return \"\".join(set(c[0])+set(c[1]))\n        if (n >= 2) and (a == 1) and (b >= 2):\n            return \"\".join(set(c[0]) + set(c[1]))\n        if (n >= 2) and (a >= 2) and (b == 1):\n            return \"\".join(set(c[0]) + set(c[1]))\n        if (n >= 2) and (a >= 2) and (b >= 2):\n            return \"\".join(set(c[0]) + set(c[1]))"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, a, b = list(map(int, stdin.strip().split()))\n        s = \"\".join([chr(97+i) for i in range(n)])\n        if len(set(s[i:i+a] for i in range(n-a+1))) == b:\n            print(s)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,x,t = map(int,stdin.split())\n    ans = []\n    for i in range(n+1):\n        if i*x <= t:\n            ans.append(i*x)\n        else:\n            ans.append(i*x-t)\n            ans.append(n*x)\n    return str(min(ans))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = list(map(int, stdin.split()))\n    return str(x * min(n // x, t))\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = stdin.split()\n    n = int(n)\n    x = int(x)\n    t = int(t)\n    minutes = 0\n    while x > 0:\n        minutes += 1\n        x -= 2\n        if x > 0:\n            x -= 1\n        else:\n            x += 1\n    return str(minutes)\n\nprint(solution(input()))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    n,x,t = int(line[0]), int(line[1]), int(line[2])\n    return(str(int(n/x*t)+min(x,t)))\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    # using brute force here to solve\n    return \"time\"\n    time = 0\n    while x > 0:\n        x = x - 1\n        time = time + t\n    return time\n\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    [n, x, t] = stdin.split()\n    n, x, t = int(n), int(x), int(t)\n\n    # solution:\n    #  the number of minutes it takes to make X pieces of takoyaki at a time\n    #  can be directly calculated based on the formula\n    #  log_2(n) + t*log_2(x)\n    #  log_2(n) is number of minutes needed to make n pieces of takoyaki\n    #  log_2(n) is number of minutes needed to make n pieces of takoyaki\n    #  log_2(x) is number of minutes needed to make x pieces of takoyaki\n    #  t*log_2(x) is number of minutes needed to make x pieces of takoyaki\n    #  so the answer is just log_2(n) + t*log_2(x)\n    return str(math.ceil(math.log2(n) + t * math.log2(x)))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N,X,T = [int(x) for x in stdin.split()]\n    return str(math.ceil(N/X) * min(X,T))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, X, T] = stdin.split()\n    X = int(X)\n    N = int(N)\n    T = int(T)\n    return str(min((N * X) // T, (N * X) % T))\n\nsolution(input())\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # put your python3 code here\n    a, b, c = stdin.split()\n    n, x, t = int(a), int(b), int(c)\n    if n > x or x > n*t:\n        return '-1'\n    elif n <= x:\n        return str(t)\n    else:\n        if n == x:\n            return str(x * t)\n        else:\n            return str(min((x * t - n * t) // (x - n) + 1 + (x * t - n * t) % (x - n), (x * t) - n * t))\n\nsolution('20 12 6')\nsolution('10 3 5')\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    i = t\n    j = 0\n    while n > 0:\n        i += n * x - j\n        j += n * x\n        n -= x\n    return str(i)\n    \n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return str(max(groups(stdin)))\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return \"2\" if len(stdin) < 3 else \"3\""
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    return max(input)\n\nprint(solution(input))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    for i in range(n):\n        if 3 <= n - i:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 3 == 0 or N % 5 == 0:\n        return \"0\"\n    return str(int(N//3 + N//5 - N//15 + N//20))"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"0\"\n    if N == 2:\n        return \"1\"\n    if N == 3:\n        return \"2\"\n    if N == 4:\n        return \"3\"\n    if N == 5:\n        return \"4\"\n    if N == 6:\n        return \"5\"\n    if N == 7:\n        return \"6\"\n    if N == 8:\n        return \"7\"\n    if N == 9:\n        return \"8\"\n    if N == 10:\n        return \"9\"\n    return \"ERROR\""
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    stdin = stdin[:-1]\n    stdin = list(map(int, stdin))\n    return str(max(0, min(stdin[0], 3 * max(stdin))))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n % 3!= 0:\n        return f\"{n//3}\"\n\n    for group in range(1, n // 3 + 2):\n        if n % group!= 0:\n            continue\n\n        m = n // group\n        if m % 3!= 0:\n            return f\"{group}\"\n\n    return f\"{n // 2}\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    if N <= 3:\n        return str(N)\n    dp: List[int] = [0 for _ in range(N+1)]\n    dp[3] = 1\n    for i in range(3, N+1):\n        dp[i] = max(dp[i-1], dp[i-2] + 1, dp[i-3] + 1)\n    return str(dp[N])\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    # find the maximum number of apples we can make with what we have\n    # we can make a piece of apple in 4 pieces\n    # because we have A pieces of apple and P pieces of apple\n    # we can make at most 2*p pieces of apple\n    # in this case, 4*p = 8 pieces of apple\n    # we can make at most 2*4 = 8 pieces of apple\n    return str(min(4*p, 2*a))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_apple, num_pie = map(int, stdin.split())\n    apple_pie = 0\n    all_pie = num_pie * 3\n    if all_pie <= num_apple:\n        return str(all_pie)\n    elif all_pie > num_apple:\n        temp = num_apple\n        num_pie = all_pie - num_apple\n        while num_pie > 0:\n            temp += num_pie\n            num_pie -= 2\n            if temp < num_apple:\n                temp = num_apple\n            apple_pie += 1\n    return str(apple_pie)\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (A, P) = map(int, stdin.split())\n    if A == 0 and P == 0:\n        return 0\n    # Idea:\n    # We can make 1 Apple pie using one piece of apple\n    # We can make 2 Apple pies using two pieces of apple\n    # We can make 3 Apple pies using three pieces of apple\n    # All the 3 Apple pies can be done by cutting one apple and 3 more pieces\n    # And we can cut 3 apples and make a 3 apple pie by simpering them together\n    # If we know how many apples are cut out, and how many apples we need to make,\n    # Then we can determine how many apples we have. If we know how many apples are left,\n    # And how many apples we need to make, then we can determine the number of apples we have.\n    apple_pieces = 3\n    while apple_pieces < P:\n        apple_pieces *= 2\n    apple_pie_count = min(A, apple_pieces) // 3\n    return apple_pie_count\n'''"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split(\" \"))\n    if (N, P) == (0, 0):\n        return \"\"\n    return str(min(N, P) // 3) + \" \" + str(min(N, P) % 3)\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(int((((P // 2) * ((P // 2) + 1)) + A) / (P * A)))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, p = (int(i) for i in stdin.split())\n    # a, p = 4, 2\n    a_pieces = a // 3\n    if a % 3!= 0:\n        a_pieces += 1\n    p_pieces = p // 2\n    # a_pieces = 2\n    # p_pieces = 2\n    pies = a_pieces + p_pieces\n    if a_pieces >= p_pieces:\n        pies = a_pieces\n    return str(pies)\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    print(min(a // 3, a // 2, p))\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if A < P:\n        return \"NO\"\n    res = A // (P - 1)\n    if A % (P - 1)!= 0:\n        res += 1\n    return str(res)"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, A, P = stdin.split()\n    return str(int(A/3 + int(A/3/3 + A/3/3/3)))"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin.split()\n    a = int(A)\n    p = int(P)\n    if p > a or a > p:\n        return '-1'\n    elif p == a:\n        return str(1)\n    elif a == p:\n        return str(a)\n    else:\n        return str(a - p + 3)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A+B)\n    else:\n        return str(B-A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    values = lines[0].split()\n    A, B = int(values[0]), int(values[1])\n    print(A + B if A % B == 0 else B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(x) for x in stdin.split())\n    if A > B:\n        return str(B - A)\n    else:\n        return str(A + B)\nsolution(\"4 12\")\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(*stdin.split()) if'' in stdin else '{} {}'.format(*stdin.split('-'))\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    A, B = int(stdin[0]), int(stdin[1])\n    if A % B == 0:\n        return str(A + B)\n    return str(B - A)\nprint(solution(input()))"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return str(int(data[0]) + int(data[1]))"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        raise ValueError\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return f'{b-a}'\n    return f'{a+b}'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.replace(' ', '')\n    return string"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) > 10 or len(s) < 1:\n        return \"Yes\"\n    elif s[-1] not in set('zZ'):\n        return \"No\"\n    else:\n        return \"Yes\" if s[-1] == 'z' else \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 2:\n        raise ValueError(\"Input must be greater than 1.\")\n    if n > 2:\n        raise ValueError(\"Input must be less than or equal to 2.\")\n    chokudai_length = len(stdin[0])\n    chokudaiz_length = chokudai_length + 1\n    if chokudai_length!= chokudaiz_length:\n        raise ValueError(\"Inputs must have same length.\")\n    chokudai_start = stdin[0]\n    chokudaiz_start = stdin[1]\n    if chokudai_start == chokudaiz_start:\n        return \"No\"\n    for chokudai in range(1, chokudai_length):\n        if chokudai_start + chokudai + 1 == chokudaiz_start:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(\"chokudai\"))\n\n------OUTPUT------\nYes\n\n------Explanation------\nThe string \"chokudai\" can be obtained by appending one letter at the end of chokudai.\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if len(string) < 10 or len(string) > 10:\n        return \"No\"\n    return \"Yes\" if (string[-1]!= \"z\" or string[:-1] in string) else \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    user_id = stdin.strip()\n    # convert user_id from string to a list\n    user_id = list(user_id)\n    # print(user_id)\n\n    # if the length of user_id is greater than 10, return \"No\"\n    if len(user_id) > 10:\n        return \"No\"\n\n    # if the length of user_id is less than 10, return \"Yes\"\n    if len(user_id) < 10:\n        return \"Yes\"\n\n    # check if the last character of the user_id is appended with z\n    if user_id[-1] == 'z':\n        return \"Yes\"\n\n    # otherwise return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while len(s) <= 10:\n        if s not in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]:\n            s += \"z\"\n    if s in [\"ab\", \"ac\", \"ad\", \"ba\", \"bc\", \"bd\", \"cb\", \"cd\", \"ce\", \"da\", \"db\", \"dc\", \"da\", \"db\", \"dc\"]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = f'{S}z'\n    if T.find(S)!= -1:\n        return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[-1]!= \"z\":\n        s += \"z\"\n    if s in solutions:\n        return \"Yes\"\n    else:\n        solutions.add(s)\n        return \"No\"\n\n\nsolutions = set()\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.rstrip()\n    T = S + stdin[0]\n    return T.count(\"a\") == S.count(\"a\") + 1\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s,t = stdin.split('\\n')\n    if len(s)!= len(t):\n        return 'No'\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin_list = stdin.split(\"\\n\")\n    num_one = int(stdin_list[0])\n    num_two = int(stdin_list[1])\n    if (num_one - num_two) % 2 == 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(num_one - num_two + 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    m = int(stdin.split(\" \")[1])\n\n    left_sum = 0\n    right_sum = 0\n    for i in range(1, m):\n        left_sum += i\n\n    right_sum = sum(range(1, m + 1))\n\n    if left_sum == right_sum:\n        return str(m - 1)\n    else:\n        return \"IMPOSSIBLE\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 'IMPOSSIBLE'\n    return '{} {}'.format(max(a, b), min(a, b))\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = map(int, stdin.split())\n    if abs(a - b) == abs(a - b):\n        return \"IMPOSSIBLE\"\n    else:\n        return str(abs(a - b) - abs(a - b))\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    A, B = int(A), int(B)\n    for i in range(max(A,B),min(A,B)+1):\n        if abs(A - i) == abs(B - i):\n            return str(i)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2 == 1:\n        return \"IMPOSSIBLE\"\n    for k in range(max(A, B), -1, -2):\n        if abs(A - k) == abs(B - k):\n            return str(k)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    # nums = list(range(0, 101))\n    # print(len(nums))\n    # print(min(nums))\n    # print(max(nums))\n    if A == 1 or B == 1:\n        return \"IMPOSSIBLE\"\n\n    if abs(A-B) == 0:\n        return \"IMPOSSIBLE\"\n\n    target = abs(A-B)\n    low = 0\n    high = len(nums)-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if abs(nums[mid]-target) < abs(A-B):\n            high = mid - 1\n        elif abs(nums[mid]-target) > abs(A-B):\n            low = mid + 1\n        else:\n            return str(nums[mid])\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = 10\n\n    while (n - 1) * (n - 2) >= 2 * a:\n        if (n - 1) * (n - 2) == 2 * a:\n            return str(n - 1)\n\n        n = n - 1\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_int(s: str) -> int:\n        return int(s)\n\n    A, B = map(get_int, stdin.split())\n    if abs(A - B) == abs(A - B):\n        return str(A - B)\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for k in range(max(A,B),min(A,B)):\n        if abs(A-k)==abs(B-k):\n            return str(k)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 10 == 7:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    int_stdin = int(stdin)\n    if int_stdin % 10 == 7:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        print('Yes')\n    else:\n        print('No')\n    return 'Done!'"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    while len(number) > 1:\n        if number[-1] == '7':\n            print('Yes')\n            return\n        number = number[:-1]\n    print('No')\n    return"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if str(number)[-1] == '7':\n        return 'Yes'\n    else:\n        return 'No'\nsolution(input())\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.strip()\n    for i in range(1, 10):\n        if number.find(str(i)) == -1:\n            print(False)\n            break\n    else:\n        print(True)\n    return\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N.endswith('7'):\n        print('Yes')\n    else:\n        print('No')\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n\n    if str(N).find('7') >= 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # your code goes here\n    if n % 10 == 7:\n        print('Yes')\n    else:\n        print('No')\n    return ''"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    res = \"\"\n    if not n.isdigit():\n        raise Exception(\"Input needs to be an integer\")\n    n = int(n)\n    if n % 9 == 0 or n % 7 == 0:\n        res = \"Yes\"\n    else:\n        res = \"No\"\n    return res"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = str(N)\n    return \"Yes\" if N % sum(map(int, s)) == 0 else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if (num == 1):\n        return \"No\"\n    if (num%2 == 0):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # start writing your code here\n    N = int(stdin)\n    def sum_digits(num):\n        num = str(num)\n        sum = 0\n        for i in num:\n            sum += int(i)\n        return sum\n\n    if sum_digits(N) % N == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % sum(map(int, list(str(N)))) == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(int(x) for x in list(stdin)) % int(stdin) == 0 else 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 2 == 0 and N % 3 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(int(i) for i in str(n))\n    print(\"Yes\" if n % s == 0 else \"No\")"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N % S(N) == 0 else 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solution_recursive(i: int, j: int):\n        nonlocal x1, x2, y1, y2, x3, y3, x4, y4\n        if i == j:\n            return\n        if i == j-1:\n            x1 = x2\n            y1 = y2\n            x2 = x3\n            y2 = y3\n            x3 = x4\n            y3 = y4\n            x4 = x1\n            y4 = y1\n            return\n        for k in range(i+1, j):\n            if x1 == x2 and x2 == x3 and x3 == x4:\n                x1, y1 = x1, y1\n                x2, y2 = x2, y2\n                x3, y3 = x3, y3\n                x4, y4 = x4, y4\n                break\n            x1 = x2\n            y1 = y2\n            x2 = x3\n            y2 = y3\n            x3 = x4\n            y3 = y4\n            x4 = stdin[k][0]\n            y4 = stdin[k][1]\n            if x1 == x2 and y1 == y2:\n                if x3 == x4 and y3 == y4:\n                    continue\n            solution_recursive(i+1, j)\n            break\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(int, stdin.split())\n    solution_recursive(0, len(stdin))\n    return''.join(map(str, (x3, y3, x4, y4)))"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split()\n    return f'{int(a)}{int(b)}'"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def recur(x1, y1, x2, y2):\n        if x1 > x2:\n            x1, x2 = x2, x1\n        if y1 > y2:\n            y1, y2 = y2, y1\n        if (x2, y2) == (0, 0):\n            return\n        if (x1, y1) == (0, 0) or (x1, y1) == (x2, y2):\n            return\n        if x1 == x2 and y1 == y2:\n            return\n        else:\n            recur(x1 + 1, y1 + 1, x2 - 1, y2 - 1)\n            print(x1, y1, x2, y2)\n\n    x1, y1, x2, y2 = map(int, stdin.split())\n    recur(x1, y1, x2, y2)\n    return '{} {} {} {}'.format(*recur(x1, y1, x2, y2))\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    if n!= 4:\n        raise Exception(\"Expected 4 points\")\n    points = []\n    for i in range(4):\n        x,y = map(int,stdin.split()[i].split(','))\n        points.append((x,y))\n    points = sorted(points)\n    x_1,y_1 = points[0]\n    x_2,y_2 = points[1]\n    x_3,y_3 = points[2]\n    x_4,y_4 = points[3]\n    if x_1!= x_2:\n        x_4 = (y_1 - y_2) / (x_1 - x_2)\n    else:\n        x_4 = y_4 = 0\n    if x_3!= x_4:\n        y_3 = (x_3 - x_4) / (x_3 - x_4)\n    else:\n        y_3 = 0\n    print(int(x_4),int(y_3),int(x_1),int(y_2))\n    return \" \".join([str(int(i)) for i in [x_4,y_3,x_1,y_2]])\n    \ndef"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = stdin.split()\n    x_1 = int(x_1)\n    y_1 = int(y_1)\n    x_2 = int(x_2)\n    y_2 = int(y_2)\n\n    vertices = [(x_1, y_1), (x_2, y_2)]\n\n    return vertices\n    # x_3, y_3, x_4, y_4 = solution(stdin)\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string of the form \"x1 y1 x2 y2\"\n    Returns the four coordinates of a square in clockwise order.\n    '''\n    # put your code here\n    return \"x3 y3 x4 y4\""
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = stdin.split()\n    return str(-1*int(x_1))+' '+str(-1*int(y_1))+' '+str(-1*int(x_2))+' '+str(-1*int(y_2))\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    return '{:d},{:d},{:d},{:d}'.format(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]))\n    '''\n    solution = lambda stdin: f'{int(stdin.split()[0])},{int(stdin.split()[1])},{int(stdin.split()[2])},{int(stdin.split()[3])}'\n    '''"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    a = max(abs(x_1), abs(y_1))\n    b = max(abs(x_2), abs(y_2))\n    c = max(abs(x_3), abs(y_3))\n    d = max(abs(x_4), abs(y_4))\n    if (a == 0 and b == 0) or (c == 0 and d == 0):\n        return \"1 1 -1 0\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"0 0 0 1\"\n    if (a == 0 and b == 1) or (a == 1 and b == 0):\n        return \"1 0 -1 0\"\n    if (a == 0 and b == 1) or (a == 1 and b == 0):\n        return \"0 1 -1 0\"\n    return \"0 0 0 1\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return str(len(s)-i) + \" \" + str(len(t)-i)\n    return str(len(s) - len(t)) + \" \" + str(len(t))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    a, b = map(int, stdin.split())\n    u = input()\n    s = u.count(a)\n    t = u.count(b)\n    return str(s) + \" \" + str(t)\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return str(int(s[0])*int(s[1]))"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\" \")\n    a, b = int(s[0]), int(s[1])\n    ans = 0\n    for i in range(a):\n        for j in range(b):\n            if s[2] == s[3]:\n                ans += 1\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    A = int(input())\n    B = int(input())\n    U = input()\n    return str(len(S)-len(U))+\" \"+str(len(S)-len(U))+\"\\n\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(stdin.count(i) for i in ('S', 'T')))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # if stdin = \"red blue\"\n    # if stdin = \"3 4\"\n    # if stdin = \"red\"\n    # if stdin = \"1 1\"\n    # if stdin = \"blue\"\n    # if stdin = \"2 2\"\n    # if stdin = \"blue\"\n    # if stdin = \"3 3\"\n    # if stdin = \"3 3\"\n    # if stdin = \"3 3\"\n    # if stdin = \"3 3\"\n    # if stdin = \"3 3\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin = \"4 4\"\n    # if stdin"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('red blue')\n    '2 4'\n    \"\"\"\n    return str(sum(int(line[1]) for line in stdin.splitlines()))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(' ')\n    return str(len(set(A[0]))) +'' + str(len(set(A[1])))"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_concatenation(str1: str, str2: str) -> bool:\n        if len(str1)!= len(str2):\n            return False\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\n    # Return True if string S is a concatenation of two copies of some string.\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        if len(s) == n:\n            return \"Yes\"\n        else:\n            return \"No\"\n    for i in range(len(s)-1):\n        str1 = s[0:i]\n        str2 = s[i+1:n]\n        if is_concatenation(str1, str2):\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\n---Solution---\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    if n == len(s):\n        return \"Yes\"\n    \n    if n == 1:\n        return \"No\"\n    \n    return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split(' ')[1]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i:j] == s[i:j + 1]*2:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    S = S[:N]\n\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            if S == S[i:j+1]:\n                return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip().split()\n    t1 = t[1].split(t[0])\n    for i in t1:\n        if i not in t:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stdin = stdin.strip()\n    \n    for i in range(0, n):\n        if (stdin[i]!= 'a' or stdin[-1]!= 'a') or i == n - 1:\n            continue\n        for j in range(0, i):\n            if stdin[j]!= 'a' or stdin[-i - 1]!= 'a':\n                continue\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    concat = S + S\n    if concat.find(S)!= -1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.rstrip().split(\" \"))\n    if \"\".join(list(S)) == \"\".join(list(S) + list(S)):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    for i in range(1, len(S)):\n        T = S[:i]\n        if T in S:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 2:\n        return \"No\"\n\n    S = stdin[1:]\n    for i in range(N):\n        for j in range(i + 1, N):\n            if S == S + S:\n                return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    h = stdin[0]\n    w = stdin[1]\n    x = stdin[2]\n    y = stdin[3]\n    return h, w, x, y\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    width, height, x, y = map(int, stdin.split())\n    x2 = x + width\n    y2 = y + height\n    print(width * height)\n    if (x >= x2 or y >= y2):\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    w,h,x,y = stdin.split()\n    w = int(w)\n    h = int(h)\n    x = int(x)\n    y = int(y)\n    \n    if (x == 0 or y == 0) or (x == w or y == h):\n        return \"1\"\n    \n    # Calculate maximum possible area\n    max_area = min(w,h) * min(x,y)\n    \n    # Calculate the maximum possible area of the part which does not cut the rectangle\n    for i in range(x,w):\n        for j in range(y,h):\n            if (i == 0 or j == 0) or (i == w or j == h):\n                continue\n            \n            # Calculate the cut area\n            cut_area = w * h - (min(w,h) - max(w,h)) * (i + j - min(x,y))\n            \n            # Calculate the total area\n            area = w * h - (min(w,h) - max(w,h)) * (i + j - min(x,y)) + min(w,h) * min(x,y)\n            \n            # Calculate the maximum possible area\n            if area > max_area:\n                max_area = area\n    \n    # Calculate the number of ways\n    if max_area == w * h:\n        ways = 1\n    else:\n        ways = 0\n    \n    # Calculate the answer\n    if ways == 0:\n        return \"0\"\n    else:\n        return str(max_area) + \" \" + str(ways)\n\nsolution(\"2 3 1 2\")"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, w, h = map(int, stdin.split())\n    if (x >= 0 and y >= 0 and x < w and y < h) or (x >= 0 and y >= w and x < h and y < 0):\n        return max(0, min(w * h - max((x, y), (x + w, y + h)), (x, y) + (x + w, y + h) - (x, y)))\n    else:\n        return max(0, min((w - x, h - y), (x + w, y + h) - (x, y)))\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import os\n    import random\n    import re\n    import sys\n\n    # Complete the maximumSum function below.\n    def maximumSum(a: int, b: int) -> float:\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n\n        return max(a, b) + math.floor(max(a, b) / 2)\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    width, height, x, y = map(int, stdin.split())\n    if x + 1 < width and y + 1 < height:\n        if (x, y) == (1, 1) or (x, y) == (width - 2, height - 2):\n            return 0\n        else:\n            if (x, y) == (1, 1):\n                return width * height - max((width * height, (x + 1, y + 1) - (x, y), (x + 1, y) - (x, y + 1), (x, y + 1) - (x + 1, y)))\n            elif (x, y) == (width - 2, height - 2):\n                return width * height - max((width * height, (x + 1, y + 1) - (x, y), (x + 1, y) - (x, y + 1), (x, y + 1) - (x + 1, y)))\n            else:\n                return width * height - max((width * height, (x + 1, y + 1) - (x, y), (x + 1, y) - (x, y + 1), (x, y + 1) - (x + 1, y)))\n    else:\n        if x == 1 and y == 1:\n            return width * height - (width * height - max((width * height, (x + 1, y + 1) - (x, y), (x + 1, y) - (x, y + 1), (x, y + 1) - (x + 1, y))))\n        elif x == width - 2 and y == height - 2:\n            return width * height - (width * height - max((width * height, (x + 1, y + 1) - (x, y), (x + 1, y) - (x, y + 1), (x, y + 1) - (x + 1, y))))\n        else:\n            return width * height - (width * height - max((width * height, (x + 1, y + 1) - (x, y), (x + 1, y) - (x, y + 1), (x, y + 1) - (x + 1, y))))\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [W, H, x, y] = list(map(int, stdin.split()))\n    if W == 1 and H == 1:\n        if x == 1 and y == 1:\n            return str(H * W)\n        else:\n            return str(0)\n    else:\n        if x == 0 and y == 0:\n            return str(min(H, W))\n        else:\n            if x == 0 or y == 0:\n                if x == 0:\n                    x1 = 0\n                    y1 = min(H, y)\n                else:\n                    x1 = max(W, x)\n                    y1 = 0\n                if y == 0:\n                    x2 = 0\n                    y2 = min(W, x)\n                else:\n                    x2 = max(W, x)\n                    y2 = max(H, y)\n                return str(max((x1 - x) * (y2 - y), (x2 - x) * (y1 - y)))\n            else:\n                if x == 0:\n                    x1 = 0\n                    y1 = min(H, y)\n                else:\n                    x1 = max(W, x)\n                    y1 = 0\n                if y == 0:\n                    x2 = max(W, x)\n                    y2 = min(H, y)\n                else:\n                    x2 = 0\n                    y2 = max(H, y)\n                return str(max(x1 - x, x2 - x, y1 - y, y2 - y))\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = list(map(int, stdin.split()))\n    if x == 0 or x == w or y == 0 or y == h:\n        return str(max(w * h - min(w * h - h, w * h - y), w * h - min(w * h - y, w * h - x), w * h - min(w * h - x, y), w * h - min(w * h - y, x), 0))\n    else:\n        return str(max(w * h - min(w * h - h, w * h - y), w * h - min(w * h - y, w * h - x), w * h - min(w * h - x, y), w * h - min(w * h - y, x), 0))"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_array = stdin.split()\n    w,h,x,y = int(stdin_array[0]),int(stdin_array[1]),int(stdin_array[2]),int(stdin_array[3])\n    if w < x or h < y:\n        return \"0\"\n    if h > w:\n        return \"0\"\n    if x == w or y == h:\n        return \"0\"\n    if x == 0:\n        return str(h-y)\n    if y == 0:\n        return str(w-x)\n    if w >= y:\n        return str(max(h-y, w-x))\n    else:\n        return str(max(h-y, w-x)) + \" 1\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    colors = stdin[1]\n\n    colors_counts = {}\n    colors_counts[colors[0]] = 1\n    colors_counts[colors[1]] = 1\n    colors_counts[colors[2]] = 1\n    colors_counts[colors[3]] = 1\n\n    if len(colors) == 3:\n        for color in colors:\n            if color == colors[0]:\n                colors_counts[colors[1]] = 1\n            elif color == colors[1]:\n                colors_counts[colors[2]] = 1\n            else:\n                colors_counts[colors[3]] = 1\n        if colors_counts[\"Three\"] >= 3:\n            return \"Three\"\n        else:\n            return \"Four\"\n\n    if len(colors) == 4:\n        for color in colors:\n            if color == colors[0]:\n                colors_counts[colors[1]] = 1\n            elif color == colors[1]:\n                colors_counts[colors[2]] = 1\n            elif color == colors[2]:\n                colors_counts[colors[3]] = 1\n        if colors_counts[\"Four\"] >= 4:\n            return \"Four\"\n        else:\n            return \"Three\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    color_of_arare = stdin.strip().split()\n    print('Three' if color_of_arare.count('P') == color_of_arare.count('W') == color_of_arare.count('G') == 3 else 'Four')"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n    bag = {'P': 0, 'W': 0, 'G': 0, 'Y': 0}\n    for i in a:\n        bag[i[0]] += 1\n\n    if (bag['P'] * 3 == bag['W'] * 2 + bag['G'] * 1 + bag['Y'] * 1) or (\n            bag['P'] * 4 == bag['W'] * 3 + bag['G'] * 1 + bag['Y'] * 1) or (\n            bag['P'] * 4 == bag['W'] * 2 + bag['G'] * 2 + bag['Y'] * 1) or (\n            bag['P'] * 4 == bag['W'] * 1 + bag['G'] * 2 + bag['Y'] * 1):\n        return 'Three'\n    else:\n        return 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    arr = stdin[1].split()\n    max_count = 0\n    for i in range(1, N):\n        if arr[i] == 'P':\n            if max_count < 3:\n                max_count += 1\n        elif arr[i] == 'W':\n            if max_count < 4:\n                max_count += 1\n    if max_count == 3:\n        return \"Three\"\n    else:\n        return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    N = int(input[0])\n    arr = input[1].split()\n    counter_p, counter_w, counter_g, counter_y = 0, 0, 0, 0\n    for i in range(N):\n        if arr[i] == 'P':\n            counter_p += 1\n        elif arr[i] == 'W':\n            counter_w += 1\n        elif arr[i] == 'G':\n            counter_g += 1\n        else:\n            counter_y += 1\n    if counter_p == 3:\n        return 'Three'\n    elif counter_p == 4:\n        return 'Four'\n    elif counter_w == 3:\n        return 'Three'\n    elif counter_w == 4:\n        return 'Four'\n    elif counter_g == 3:\n        return 'Three'\n    elif counter_g == 4:\n        return 'Four'\n    elif counter_y == 3:\n        return 'Three'\n    elif counter_y == 4:\n        return 'Four'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    colors = {'P': 0, 'W': 1, 'G': 2, 'Y': 3}\n    n = int(stdin.strip())\n    n_hina_arare = [stdin.strip().split() for i in range(n)]\n    pink_white = sum(1 for a in n_hina_arare if a[0] == 'P' and a[1] == 'W')\n    green_yellow = sum(1 for a in n_hina_arare if a[0] == 'G' and a[1] == 'Y')\n    if pink_white == green_yellow == 3:\n        print('Three')\n    elif pink_white == green_yellow == 4:\n        print('Four')\n    else:\n        print('None')"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hina = stdin.split()\n\n    n_colors = {\n        \"pink\": 0,\n        \"white\": 0,\n        \"green\": 0,\n        \"yellow\": 0\n    }\n    for i in range(n):\n        color = hina[i]\n        if color == \"pink\":\n            n_colors[\"pink\"] += 1\n        elif color == \"white\":\n            n_colors[\"white\"] += 1\n        elif color == \"green\":\n            n_colors[\"green\"] += 1\n        elif color == \"yellow\":\n            n_colors[\"yellow\"] += 1\n    if n_colors[\"pink\"] == 3:\n        return \"Three\"\n    elif n_colors[\"pink\"] == 4:\n        return \"Four\"\n    else:\n        return \"Not Enough\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (N, *S) = list(map(int, stdin.split()))\n    S = tuple(S)\n\n    if len(S) == 3:\n        if S in (('P', 'W', 'G'), ('P', 'Y', 'G')):\n            return \"Three\"\n    if len(S) == 4:\n        if S in (('P', 'W', 'Y', 'G'), ('P', 'Y', 'W', 'G')):\n            return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, colors = int(stdin), stdin.strip().split()\n    if len(colors) == 1 and colors[0] == 'P':\n        return 'Three'\n    if len(colors) == 1 and colors[0] == 'W':\n        return 'Four'\n    if len(colors) == 1 and colors[0] == 'G':\n        return 'Four'\n    if len(colors) == 1 and colors[0] == 'Y':\n        return 'Four'\n\n    return 'Four' if len(colors) == 4 else 'Three'\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nOur goal is to maximize the number of doors with durability equal to $0$ at the end of the game.\n\nOur optimal strategy is to break as many doors as possible. In the first phase we have to break the first door if we can break it, otherwise we skip this turn.\n\nOur optimal strategy is to repair as many doors as possible. In the second phase we have to repair the first door if we can repair it, otherwise we skip this turn.\n\nOur optimal strategy is to repair as many doors as possible.\n\"\"\"\n\n\nfrom itertools import product\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the result of an optimized game\n    \"\"\"\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    b = a[0]\n    i = 0\n    c = 0\n    d = []\n    while i < n:\n        while i < n and b <= x:\n            c += 1\n            d.append(b)\n            i += 1\n            if b == x:\n                break\n            b += y\n        if c == 0:\n            break\n        b = d[-1]\n        c -= 1\n    return c\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    x = int(stdin[1])\n    y = int(stdin[2])\n\n    # n, x, y = map(int, stdin)\n\n    doors = sorted(map(int, stdin[1].split()), reverse=True)\n\n    # print(n, x, y)\n    # print(doors)\n\n    def try_break(door_number, durability):\n        if door_number >= n:\n            return durability\n\n        # print(door_number, durability)\n        if door_number == 0 and durability >= x:\n            return durability - x\n        if door_number == 0 and durability < x:\n            return 0\n\n        if durability >= x:\n            return durability - x\n        if durability < x:\n            return 0\n\n        return durability\n\n    def try_repair(door_number, durability):\n        if door_number >= n:\n            return durability\n        if door_number == 0 and durability > x:\n            return durability + y\n\n        if door_number == 0 and durability < x:\n            return 0\n        if door_number == 0 and durability == x:\n            return y\n\n        return durability\n\n    # print(doors)\n    # print(try_break(0, doors[0]))\n\n    # print(try_repair(1, doors[1]))\n\n    max_durability = 0\n    max_durability_door = -1\n    max_durability_repairer = -1\n\n    for i in range(n):\n        # print(i, doors[i], try_break(i, doors[i]))\n        if try_break(i, doors[i]) > max_durability:\n            max_durability = try_break(i, doors[i])\n            max_durability_door = i\n\n        # print(i, doors[i], try_repair(i, doors[i]))\n        if try_repair(i, doors[i]) > max_durability:\n            max_durability = try_repair(i, doors[i])\n            max_durability_repairer = i\n\n    # print(max_durability, max_durability_door, max_durability_repairer)\n\n    return max_durability\n\n\nsolution(input())\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, x, y = map(int, stdin.split())\n\n    # a = map(int, stdin.split())\n\n    n = int(a)\n    x = int(x)\n    y = int(y)\n\n    max_d = int(x ** 0.5) + 1\n\n    # max_d = max(x, y)\n\n    dur_list = []\n    for i in range(1, max_d):\n        dur_list.append(i ** 2 - x)\n        dur_list.append(i ** 2 + y)\n\n    dur_list.sort()\n\n    if dur_list[0] == 0:\n        return \"0\"\n\n    doors = []\n    for i in range(len(dur_list)):\n        doors.append(dur_list[i] == 0)\n\n    cnt = 0\n    dp = [[False for _ in range(n + 1)] for _ in range(max_d + 1)]\n    for i in range(len(dp[0])):\n        dp[0][i] = True\n    for i in range(1, max_d + 1):\n        dp[i][0] = False\n        if doors[0]:\n            dp[i][1] = True\n        else:\n            dp[i][1] = False\n\n    for i in range(1, max_d + 1):\n        for j in range(1, n + 1):\n            if j < i:\n                dp[i][j] = dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n\n    return str(n - dp[-1].count(True))\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a = a[1:]\n    n, x, y = a[0], a[1], a[2]\n    a = a[3:]\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 a \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f, \u0447\u0442\u043e \u043e\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\n    # \u043f\u043e\u0442\u043e\u043c\u0443 \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f, \u0438 \u043e\u0442\u0432\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d\n    # \u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n    a = [max(i, x) - i for i in a]\n    # \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u0432\u0441\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f\n    # \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0434\u0432\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u0441\u0442\u0430\u0442\u044c\u044f\u043c\u0438\n    # \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u0447\u0435\u0442\u043d\u044b\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0447\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0446\u0438\u043a\u043b\u0430 for\n    # \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u0438 \u0434\u0432\u0443\u043c\u044f \u043a\u0430\u0436\u0434\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e\n    # \u0430 \u0437\u0430\u0442\u0435\u043c \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0445 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    a_len = len(a)\n    a_new = [a[-1], a[a_len - 2], a[a_len - 3]]\n    a = a + a_new\n    a = sorted(a, key=lambda x: x)\n    # \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a \u0441\u0442\u0438\u043b\u044c\u044e \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n    # \u043a\u043e\u0433\u0434\u0430 \u043e\u0434\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\n    count_pos = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            count_pos += 1\n    return count_pos\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, x, y = list(map(int, stdin.split()))\n  a = list(map(int, stdin.split()))\n\n  def bfs(i, j, k):\n    if i == j == k:\n      return True\n    if i == 0:\n      return False\n    if a[i] + x > k:\n      return bfs(i - 1, j, k)\n    if a[j] + y > k:\n      return bfs(i, j - 1, k)\n    if a[k] + x > k:\n      return bfs(i, j, k - 1)\n    return bfs(i - 1, j, k) or bfs(i, j - 1, k) or bfs(i, j, k - 1)\n\n  def solution(i):\n    if i == 0:\n      return 0\n    return len([a[k] for k in range(i) if bfs(i, k, i)])\n\n  return solution(n)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    __m = None\n    __n = None\n    __x = None\n    __y = None\n    __a = None\n    __b = None\n    __doors = None\n    __cnt = None\n    __str = None\n    for line in stdin.split(\"\\n\"):\n        if len(line.split()) == 3:\n            __n, __x, __y = map(int, line.split())\n        if len(line.split()) == 2:\n            __a, __b = map(int, line.split())\n        if len(line.split()) == 1:\n            __doors = list(map(int, line.split()))\n\n    __m = __n\n    __a = __a\n    __b = __b\n    __doors = __doors\n    __cnt = 0\n\n    __str = f\"{__m} {__n} {__x} {__y} {__a} {__b} {__doors}\\n\"\n\n    while (__m >= 1):\n        __m -= 1\n        __cnt += 1\n        # \u041f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u043a\u043e\u043b\u0435\u0446 \u043e\u0442 \u0434\u0432\u0443\u0445 \u0434\u0432\u0443\u0445\n        __a -= 1\n        __b += 1\n        # \u041f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u043e\u0434\u043d\u043e \u043a\u043e\u043b\u0435\u0446\n        __b = __a - 1 if __a > __b else __a\n        # \u041f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u043e\u0434\u043d\u043e \u043a\u043e\u043b\u0435\u0446\n        __a = __b + 1 if __b < __a else __b\n        __str += f\"{__m} {__n} {__x} {__y} {__a} {__b} {__doors}\\n\"\n\n    return __str\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, x, y = map(int, stdin.split())\n  doors = list(map(int, stdin.split()))\n  max_door = max(doors)\n  \n  a = sorted(doors, reverse=True)\n  b = max(a)\n  \n  if b <= x:\n    return len(doors)\n  \n  def change(k):\n    for i, a in enumerate(a):\n      if k == a:\n        return i\n    return -1\n  \n  d = [x]\n  \n  while True:\n    d.sort(key=change)\n    if d[-1] == 0:\n      break\n    if d[-1] > y:\n      d[-1] = 0\n      continue\n    for i in range(n):\n      if d[-1] == 0:\n        break\n      if d[-1] >= doors[i]:\n        d[-1] -= doors[i]\n      else:\n        d.append(d[-1])\n        break\n    else:\n      d.append(0)\n  return len(d)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    topic_a = list(map(int, stdin.split()[1:]))\n    topic_b = list(map(int, stdin.split()[1:]))\n\n    counter = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if topic_a[i] + topic_a[j] > topic_b[i] + topic_b[j]:\n                counter += 1\n\n    return str(counter)"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    return sum([1 if a + b > max(x) else 0 for a, b in zip(x[::2], x[1::2])])\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    good_pairs = 0\n    a_list = list(map(int, stdin.split()))\n    n = a_list[0]\n    a_list.pop(0)\n    b_list = list(map(int, stdin.split()))\n    b_list.pop(0)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a_list[i] + a_list[j] > b_list[i] + b_list[j]:\n                good_pairs += 1\n    return str(good_pairs)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(good_pairs(a))\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = stdin.split(\"\\n\")\n    a = list(map(int, s[0].split()))\n    b = list(map(int, s[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem.\"\"\"\n    # Get the number of topics from stdin.\n    n = int(stdin)\n    # Create the input lists from stdin.\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    # Create the output variable.\n    out = 0\n    # Iterate through all pairs of topics.\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                out += 1\n    # Return the output.\n    return str(out)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(stdin.strip()) for i in range(n)]\n    b = [int(stdin.strip()) for i in range(n)]\n    a.sort()\n    b.sort()\n    c = 0\n    for i in range(n):\n        if a[i]+b[i]>a[i]+b[i+1]:\n            c += 1\n    print(c)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    return str(good_pairs(n, a, b))\n\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    good_pairs = 0\n\n    for i in range(1, len(data)):\n        a = int(data[0])\n        b = int(data[i])\n        good_pairs += (a + b) > max(a, b)\n\n    return good_pairs\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1].split()\n    b = a\n    c = []\n    d = []\n    e = []\n    for i in range(n):\n        if a[i] == 1:\n            d.append(1)\n        elif a[i] == 2:\n            b.remove(b[i - 1])\n            d.append(2)\n        elif a[i] == 3:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(3)\n        elif a[i] == 4:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(4)\n        elif a[i] == 5:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(5)\n        elif a[i] == 6:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(6)\n        elif a[i] == 7:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(7)\n        elif a[i] == 8:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(8)\n        elif a[i] == 9:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            d.append(9)\n        elif a[i] == 10:\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1])\n            b.remove(b[i - 1"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(map(int, stdin.split()[1:]))\n    b = []\n    i = 1\n    while i < n:\n        if a[i] == a[i - 1]:\n            b.append(a[i])\n            del a[i]\n        else:\n            i += 1\n    return \" \".join(map(str, b))\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = int(sum(a) / 2)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a = list(a)\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        if a[i] == 1:\n            a[i] = 2\n            a[i + 1] = 1\n        elif a[i] == 2:\n            a[i] = 1\n            a[i + 1] = 2\n        elif a[i] == 4:\n            a[i] = 3\n            a[i + 1] = 4\n        elif a[i] == 3:\n            a[i] = 4\n            a[i + 1] = 3\n        elif a[i] == 5:\n            a[i] = 6\n            a[i + 1] = 5\n        elif a[i] == 6:\n            a[i] = 5\n            a[i + 1] = 6\n        elif a[i] == 10:\n            a[i] = 9\n            a[i + 1] = 10\n        else:\n            a[i] = 10\n            a[i + 1] = 10\n\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def replace(arr: List[int], pos1: int, pos2: int):\n        del arr[pos1]\n        del arr[pos1]\n        del arr[pos2]\n        del arr[pos2]\n        arr[pos1:pos2 + 1] = (list(range(pos1, pos2 + 1)))\n        return arr\n    a = list(map(int, stdin.split(' ')))\n    n = len(a)\n    while n > 1:\n        n -= 1\n        k = n - 1\n        while k >= 0:\n            if a[k] % 10 == 1:\n                a = replace(a, k, k - 1)\n            elif a[k] % 10 == 2:\n                a = replace(a, k, k + 1)\n            elif a[k] % 10 == 3:\n                a = replace(a, k, k - 2)\n            elif a[k] % 10 == 4:\n                a = replace(a, k, k - 1)\n            elif a[k] % 10 == 5:\n                a = replace(a, k, k + 1)\n            elif a[k] % 10 == 6:\n                a = replace(a, k, k - 2)\n            elif a[k] % 10 == 7:\n                a = replace(a, k, k - 1)\n            elif a[k] % 10 == 8:\n                a = replace(a, k, k + 1)\n            elif a[k] % 10 == 9:\n                a = replace(a, k, k - 2)\n            k -= 1\n    print(*a)"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    \n    b = []\n    for i in range(len(a)):\n        if a[i] == 1:\n            a[i] = 2\n        else:\n            a[i] = 1\n    \n    for i in range(len(a)):\n        if a[i] == 2:\n            a[i] = 1\n        else:\n            a[i] = 2\n    \n    for i in range(len(a)):\n        if a[i] == 3:\n            a[i] = 4\n        else:\n            a[i] = 3\n    \n    for i in range(len(a)):\n        if a[i] == 4:\n            a[i] = 3\n        else:\n            a[i] = 4\n    \n    for i in range(len(a)):\n        if a[i] == 5:\n            a[i] = 6\n        else:\n            a[i] = 5\n    \n    for i in range(len(a)):\n        if a[i] == 6:\n            a[i] = 5\n        else:\n            a[i] = 6\n    \n    for i in range(len(a)):\n        if a[i] == 10:\n            a[i] = 9\n        else:\n            a[i] = 10\n    \n    for i in range(len(a)):\n        if a[i] == 100000000:\n            a[i] = 999999999\n        else:\n            a[i] = 100000000\n    \n    for i in range(len(a)):\n        if a[i] == 999999999:\n            a[i] = 1000000000\n        else:\n            a[i] = 999999999\n    \n    for i in range(len(a)):\n        if a[i] == 99999:\n            a[i] = 9\n        else:\n            a[i] = 9\n    \n    for i in range(len(a)):\n        if a[i] == 9:\n            a[i] = 8\n        else:\n            a[i] = 9\n    \n    for i in range(len(a)):\n        if a[i] == 8:\n            a[i] = 7\n        else:\n            a[i] = 8\n    \n    for i in range(len(a)):\n        if a[i] == 7:\n            a[i] = 6\n        else:\n            a[i] = 7\n    \n    for i in range(len(a)):\n        if a[i] == 6:\n            a[i] = 5\n        else:\n            a[i] = 6\n    \n    for i in range(len(a)):\n        if a[i] == 5:\n            a[i] = 4\n        else:\n            a[i] = 5\n    \n    for i in range(len(a)):\n        if a[i] == 4:\n            a[i] = 3\n        else:\n            a[i] = 4\n    \n    for i in range(len(a)):\n        if a[i] == 3:\n            a[i] = 2\n        else:\n            a[i] = 3\n    \n    for i in range(len(a)):\n        if a[i] == 2:\n            a[i] = 1\n        else:\n            a[i] = 2\n    \n    for i in range(len(a)):\n        if a[i] == 1:\n            a[i] = 0\n        else:\n            a[i] = 1\n    \n    b = a\n    return''.join([str(i) for i in b])\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    new_a = []\n    new_a.append(a[0])\n    for i in range(1, n):\n        new_a.append(a[i] if a[i] == a[i - 1] else a[i - 1] + 1)\n    return''.join(str(i) for i in new_a)\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  i = 0\n  while i < len(a):\n    if i == 0:\n      a[0], a[i] = a[i], a[0]\n    elif i == 1:\n      a[0], a[i] = a[i], a[0]\n    elif i == 2:\n      a[0], a[i] = a[i], a[0]\n    elif i == 3:\n      a[0], a[i] = a[i], a[0]\n    elif i == 4:\n      a[0], a[i] = a[i], a[0]\n    else:\n      i -= 1\n    i += 1\n  return''.join(map(str, a))\n\nsolution(input())"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return''.join(str(i) for i in [1,2,4,5,10] * n)\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(n):\n        graph[i] = set(graph[i])\n    components = {}\n    for i in range(n):\n        if i not in components:\n            components[i] = {i}\n            for j in graph[i]:\n                if j!= i:\n                    components[i].add(j)\n        else:\n            components[i] = components[i].union(graph[i])\n    visited = {n: 0 for n in components}\n    cycles = 0\n    for i in components:\n        if visited[i] == 0:\n            visited[i] = 1\n            stack = []\n            stack.append(i)\n            while stack:\n                x = stack.pop()\n                for j in components[x]:\n                    if visited[j] == 0:\n                        visited[j] = 1\n                        stack.append(j)\n                    elif visited[j] == 1:\n                        cycles += 1\n    return cycles\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_cycle_start(cycle):\n        start = cycle[0]\n        for i in range(len(cycle)):\n            if cycle[i]!= start:\n                start = cycle[i]\n                break\n        return start\n\n    # cycle = set()\n    def get_cycle_end(cycle):\n        start = cycle[0]\n        for i in range(len(cycle)):\n            if cycle[i]!= start:\n                end = cycle[i]\n                break\n        return end\n\n    for i in range(int(stdin.split(' ')[0])):\n        cycle = set()\n        nodes = list(map(int, stdin.split(' ')[1:]))\n        for node in nodes:\n            # if node not in cycle:\n            #     cycle.add(node)\n            if node not in cycle:\n                cycle.add(node)\n                visited = {node}\n                stack = []\n                stack.append(node)\n                while len(stack)!= 0:\n                    temp = stack.pop()\n                    for j in range(len(nodes)):\n                        if nodes[j]!= temp and nodes[j] not in visited:\n                            if nodes[j] not in cycle:\n                                cycle.add(nodes[j])\n                                visited.add(nodes[j])\n                                stack.append(nodes[j])\n        if len(cycle) == len(nodes):\n            print(0)\n        else:\n            print(len(cycle))\n\n\nsolution(\"\"\"5 4\n1 2\n3 4\n5 4\n3 5\n\n\"\"\")"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    if n == 1 and m == 0:\n        return \"1\"\n    graph = defaultdict(set)\n    for i in range(m):\n        u, v = list(map(int, stdin.strip().split()))\n        u, v = u - 1, v - 1\n        graph[u].add(v)\n        graph[v].add(u)\n    # print(graph)\n    count = 0\n    for u in range(n):\n        if u not in graph:\n            continue\n        # print(u, list(graph[u]))\n        for v in graph[u]:\n            if u!= v:\n                if (v, u) in graph:\n                    # print(u, v)\n                    count += 1\n    return str(count)\n\nprint(solution(\"\"\"5 4\n1 2\n3 4\n5 4\n3 5\n\"\"\"))\nprint(solution(\"\"\"17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\"\"\"))"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10**7)\n\nn, m = map(int, input().split())\n\nedges = [[] for i in range(n + 1)]\nfor _ in range(m):\n    v, u = map(int, input().split())\n    edges[v].append(u)\n    edges[u].append(v)\n\ncount = 0\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport collections\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return 0\n    graph = {i: [] for i in range(n)}\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = {}\n    visited[1] = 1\n    cycle = False\n    count = 0\n    for i in graph[1]:\n        if i not in visited:\n            cycle = True\n            stack = [1]\n            while stack:\n                u = stack.pop()\n                if u not in visited:\n                    visited[u] = 1\n                    stack.extend(graph[u])\n    if not cycle:\n        return count\n    else:\n        count += 1\n    visited = {i: 0 for i in graph}\n    visited[1] = 1\n    cycle = False\n    count = 0\n    for i in graph[1]:\n        if i not in visited:\n            cycle = True\n            stack = [1]\n            while stack:\n                u = stack.pop()\n                if u not in visited:\n                    visited[u] = 1\n                    stack.extend(graph[u])\n    if not cycle:\n        return count\n    else:\n        count += 1\n    visited = {i: 0 for i in graph}\n    visited[1] = 1\n    cycle = False\n    count = 0\n    for i in graph[1]:\n        if i not in visited:\n            cycle = True\n            stack = [1]\n            while stack:\n                u = stack.pop()\n                if u not in visited:\n                    visited[u] = 1\n                    stack.extend(graph[u])\n    if not cycle:\n        return count\n    else:\n        count += 1\n    return count\n\n'''\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    connections = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        connections[u].append(v)\n        connections[v].append(u)\n    res = 0\n    for i in range(1, n+1):\n        visited = set()\n        visited.add(i)\n        # explore\n        stack = [i]\n        while stack:\n            curr = stack.pop()\n            visited.add(curr)\n            for neighbor in connections[curr]:\n                if neighbor not in visited:\n                    stack.append(neighbor)\n        # count\n        if len(visited) > 2:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    graph = {}\n    for i in range(m):\n        v, u = list(map(int, stdin.split()))\n        if v not in graph:\n            graph[v] = []\n        if u not in graph:\n            graph[u] = []\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = set()\n    res = 0\n    for k, v in graph.items():\n        if k not in visited:\n            visited.add(k)\n            if len(v) > 1:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    n = int(inp[0])\n    red = inp[1]\n    blue = inp[2]\n    edges = []\n    for i in range(3, n + 3):\n        edges.append((int(inp[i]), int(inp[i + 1])))\n    edges = sorted(edges, key=lambda x: x[0])\n    def bs(start, end):\n        if start > end:\n            return 0\n        mid = (start + end) // 2\n        if edges[mid][0] == red:\n            if edges[mid][1] == blue:\n                return bs(mid + 1, end) + 1\n            else:\n                return bs(start, mid - 1)\n        elif edges[mid][0] == blue:\n            if edges[mid][1] == red:\n                return bs(start, mid - 1) + 1\n            else:\n                return bs(mid + 1, end)\n        else:\n            return bs(start, mid - 1) + 1 + bs(mid + 1, end)\n    return str(bs(0, n))"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 1 0 0 1 2\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3\n   ... 1 1 2\n   ... 2 3\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 4\n   ... 1 1 2\n   ... 2 3\n   ... 3 4\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.strip())\n    tree = {}\n    for _ in range(n - 1):\n        u, v = map(int, stdin.strip().split())\n        tree[u] = tree.get(u, set()) | {v}\n        tree[v] = tree.get(v, set()) | {u}\n    visited = set()\n    good = True\n    for u, v in tree.items():\n        if u in visited:\n            continue\n        if not good:\n            break\n        if any(v & {x for x in v if x not in visited}):\n            good = False\n            break\n        visited |= v\n    return str(good)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    graph = []\n    for _ in range(n):\n        graph.append([int(i) for i in stdin.splitlines()[1].split()])\n    \n    graph = [graph[i:i+n] for i in range(0, len(graph), n)]\n    for i in range(len(graph) - 1):\n        graph[i + 1] = graph[i + 1][::-1]\n    \n    graph = {(i, j): graph[i][j] for i in range(len(graph)) for j in range(len(graph[i])) if graph[i][j]!= 0}\n\n    visited = set()\n    visited.add(1)\n    visited.add(2)\n    to_visit = set()\n    to_visit.add(1)\n    to_visit.add(2)\n\n    def dfs(v):\n        for u in graph[v]:\n            if u in visited:\n                return False\n            if u not in to_visit:\n                to_visit.add(u)\n                visited.add(u)\n                if not dfs(u):\n                    return False\n            else:\n                to_visit.remove(u)\n        return True\n    \n    return sum(dfs(i) for i in range(1, 3))\n\nprint(solution(open(0).read()))"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(color_tree(int(stdin)))\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    arr = [[int(i) for i in stdin.split()[1:]] for stdin in arr]\n    red_vertices = []\n    blue_vertices = []\n    for i in range(n):\n        if arr[i][1] == 1:\n            red_vertices.append(i)\n        elif arr[i][1] == 2:\n            blue_vertices.append(i)\n    if len(red_vertices) == 0 and len(blue_vertices) == 0:\n        return 0\n    if len(red_vertices) >= len(blue_vertices):\n        red_vertices, blue_vertices = blue_vertices, red_vertices\n    result = 0\n    for i in range(len(red_vertices)):\n        for j in range(i+1, len(blue_vertices)):\n            if (red_vertices[i] == blue_vertices[j]) or (red_vertices[i] == red_vertices[j]):\n                result += 1\n    return result\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    red_vertices = 0\n    blue_vertices = 0\n    for _ in range(n):\n        if int(stdin) % 2 == 0:\n            red_vertices += 1\n        else:\n            blue_vertices += 1\n        stdin = stdin.split()\n        n = int(stdin[0])\n        stdin = stdin[1:]\n        if n == 0:\n            break\n        for i in range(n):\n            for j in range(i + 1, n):\n                if int(stdin[i])!= 0 and int(stdin[j])!= 0:\n                    print('red', 'blue')\n                elif int(stdin[i]) == 0 and int(stdin[j])!= 0:\n                    print('blue','red')\n                elif int(stdin[i])!= 0 and int(stdin[j]) == 0:\n                    print('red','red')\n                else:\n                    print('blue', 'blue')\n                stdin = stdin[n + 1:]\n    if red_vertices > blue_vertices:\n        return'red'\n    elif red_vertices < blue_vertices:\n        return 'blue'\n    else:\n        return '0'\nprint(solution(input()))\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = [int(i) for i in stdin.split()]\n    edges = set()\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if colors[i] == colors[j] and colors[i] == 0:\n                edges.add((i, j))\n    return str(len(edges))\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    c: list = list(map(int, stdin.split()[1:]))\n    uf: UF = UF(n)\n    for i in range(n):\n        uf.union(i, c[i])\n    visited: set = set()\n    visited.add(uf.find(1))\n    visited.add(uf.find(2))\n    visited.add(uf.find(3))\n    visited.add(uf.find(4))\n    visited.add(uf.find(5))\n    for i in range(n):\n        if i not in visited:\n            return 0\n    return 1"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    colors.sort()\n    if colors[0] == colors[1]:\n        return \"0\"\n\n    # build the adjacency list\n    adj = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[i + 2].split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # check if the tree is nice\n    visited = set()\n    visited.add(colors[0])\n    dfs_nice(adj, visited, colors[1], colors[2])\n    if len(visited) == n:\n        return \"1\"\n    return \"0\"\n\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = set()\n    for _ in range(n):\n        color, *s = map(int, stdin.split())\n        tree.add(color)\n        if not (color == 1 and s[0] in tree) and not (color == 2 and s[1] in tree):\n            return '0'\n    return str(len(tree))\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    k = int(lines[0])\n    s = lines[1]\n    t = lines[2]\n    strings = lines[3:]\n    strings = sorted(strings)\n    median_index = len(strings) // 2\n    return strings[median_index]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Transform stdin input into a list of strings\n    input_list = stdin.strip().split('\\n')\n    # Create a list of strings\n    strings = []\n    # Initialize a list of strings to be sorted\n    for _ in range(len(input_list)):\n        strings.append(input_list[_])\n    # Sort the list\n    strings.sort()\n    # Retrieve the median\n    return strings[len(strings) // 2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[1]\n    t = stdin[2]\n\n    start_index = 0\n    end_index = len(s) - 1\n\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n\n        if s[mid_index] < t[mid_index]:\n            end_index = mid_index - 1\n        elif s[mid_index] > t[mid_index]:\n            start_index = mid_index + 1\n        else:\n            return s\n\n    return s\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    s_list = list(s)\n    t_list = list(t)\n\n    s_list.sort()\n    t_list.sort()\n\n    s_list.sort(key=lambda x: ord(x))\n    t_list.sort(key=lambda x: ord(x))\n\n    print(s_list)\n    print(t_list)\n\n    if k == 2:\n        if s_list == t_list:\n            return t\n        elif t_list > s_list:\n            return s\n        else:\n            return t_list\n    else:\n        if s_list == t_list:\n            return t_list[len(t_list) // 2]\n        elif t_list > s_list:\n            return s_list[len(s_list) // 2]\n        else:\n            return t_list[len(t_list) // 2]\n\n\nprint(solution(input()))"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n\n    def mysorts(x, y):\n        if x + y > y + x:\n            return (y, x)\n        else:\n            return (x, y)\n\n    a = list(a)\n    b = list(b)\n    a.sort()\n    b.sort()\n    return mysorts(a, b)[1]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    min_string = stdin[:k]\n    max_string = stdin[k:]\n\n    sorted_min_string = sorted(min_string)\n    sorted_max_string = sorted(max_string)\n\n    if sorted_min_string == sorted_max_string:\n        return sorted_max_string[k // 2]\n\n    sorted_min_string_to_max_string = sorted(sorted_min_string + sorted_max_string)\n    return sorted_min_string_to_max_string[k // 2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n\n    if k % 2 == 0:\n        return ''\n\n    sorted_list = []\n    for i in range(len(s)):\n        sorted_list.append(s[i])\n        sorted_list.append(t[i])\n\n    sorted_list.sort()\n    sorted_list = sorted_list[1:]\n\n    return sorted_list[k // 2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = int(stdin.split()[0]), stdin.split()[1], stdin.split()[2]\n    s = sorted(s)\n    t = sorted(t)\n    if s > t:\n        s, t = t, s\n    if k % 2 == 0:\n        return ''.join(s[k//2-1:k//2+1])\n    return ''.join(s[k//2])\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    return median(k, s, t)\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split('\\n')\n    k = int(k)\n\n    strings = []\n    for i in range(k):\n        strings.append(s[i] + t[i])\n\n    strings.sort()\n\n    strings.sort(key=lambda x: x[k//2])\n\n    return strings[k//2]\n\n\nprint(solution(input()))"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.split())\n\nrating = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n    if len(s) < k:\n        return 'NO'\n    for i in range(1, n+1):\n        if i not in s:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    numbers = sorted(map(int, stdin.strip().split()))\n    possible = set(range(1, n + 1))\n    for i in range(n):\n        possible &= set(map(lambda x: x - i, range(1, n + 1)))\n    print(possible)\n    if k == 1 or k == n:\n        return \"NO\"\n    team = []\n    team_size = k - 1\n    while len(possible) > 0:\n        student = possible.pop()\n        team.append(student)\n        possible -= set(map(lambda x: x - team_size, team))\n        if len(possible) == 0:\n            break\n        team_size += 1\n    return \"YES\" if len(team) == k else \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = [*map(int, stdin.split())]\n    students.sort()\n    \n    if len(students) % k!= 0:\n        return 'NO'\n    \n    students = students[:len(students)//k]\n    \n    if len(set(students)) == len(students):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = a[0]\n    k = a[1]\n    for i in range(n):\n        for j in range(n):\n            if i!= j and a[i]!= a[j]:\n                return \"NO\"\n    answers = [i for i in range(1, n+1)]\n    for j in range(k):\n        new_answers = []\n        for answer in answers:\n            new_answers.append(answer)\n            for i in range(1, n+1):\n                if a[j]!= a[i]:\n                    new_answers.append(i)\n        answers = new_answers\n    return str(len(answers)) + \" \" + \" \".join(map(str, answers))\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = sorted([int(x) for x in stdin.split()])\n    if n == k:\n        return \"YES\"\n    l = 0\n    r = n-1\n    for i in range(k):\n        if a[l]!= a[r]:\n            l += 1\n            r -= 1\n            continue\n        l += 1\n        r -= 1\n        if l >= r:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n > 100 or k > 100:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 4 0 2\n   ... ''')\n    'YES'\n    >>> solution('''7\n   ... 5 4 9 2 1 3\n   ... ''')\n    'NO'\n    >>> solution('''7\n   ... 9 5 1 2 3 4\n   ... ''')\n    'YES'\n    \"\"\"\n    first = list(map(int, stdin.split(\"\\n\")[1].split()))\n    second = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if not first or not second:\n        return \"NO\"\n\n    first.sort()\n    second.sort()\n\n    i = 0\n    while i < len(first) and i < len(second) and first[i] <= second[i]:\n        i += 1\n\n    if i >= len(first):\n        return \"NO\"\n\n    i = len(second) - 1\n    while i >= 0 and i < len(first) and first[i] <= second[i]:\n        i += 1\n\n    if i >= len(second):\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    increasing = deque()\n    decreasing = deque()\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            decreasing.append(a[i - 1])\n        else:\n            increasing.append(a[i - 1])\n\n    if len(increasing) == len(decreasing):\n        for i in range(len(increasing)):\n            if increasing[i] == decreasing[i]:\n                return 'YES'\n        return 'NO'\n\n    return 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    if a[0] == a[n - 1]:\n        return \"NO\"\n    a = sorted(a)\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n    if a[0] < a[-1]:\n        dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(i, -1, -1):\n            if a[j] < a[i] and dp[i][j] == 1:\n                dp[i][j] = 1\n                break\n    for i in range(1, n):\n        if dp[i][0] == 1:\n            dp[i][0] = 1\n        else:\n            dp[i][0] = 0\n    ans = []\n    for i in range(n):\n        if dp[0][i] == 1:\n            ans.append(1)\n        else:\n            ans.append(0)\n    for i in range(1, n):\n        for j in range(n - 1, i - 1, -1):\n            if a[i] > a[j] and dp[i][j] == 1:\n                ans[i] = 1\n                break\n    print(''.join(map(str, ans)))\n    return stdout"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    a = stdin.split()\n    first_sequence = ''\n    second_sequence = ''\n    for i in range(n):\n        if int(a[i]) == 1:\n            first_sequence += str(int(i)) +''\n        if int(a[i]) == 0:\n            second_sequence += str(int(i)) +''\n    if len(first_sequence) == 1:\n        first_sequence = '1 0 '\n    if len(second_sequence) == 1:\n        second_sequence = '0 1 '\n    if int(first_sequence) <= int(second_sequence):\n        print('YES')\n        print(first_sequence)\n        print(second_sequence)\n    else:\n        print('NO')\n        print(first_sequence)\n        print(second_sequence)\n    return None\n\n\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    increasing = []\n    decreasing = []\n    for i in range(n - 1):\n        if arr[i + 1] > arr[i]:\n            increasing.append(arr[i])\n        elif arr[i + 1] < arr[i]:\n            decreasing.append(arr[i])\n    if len(increasing) > 1 and decreasing:\n        return \"NO\"\n    if len(increasing) == 1 and decreasing:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            break\n    else:\n        return \"NO\"\n    for j in range(len(a) - 1, 0, -1):\n        if a[j] > a[j - 1]:\n            break\n    else:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp_arr = stdin.split()\n    a = [int(i) for i in inp_arr[1].split(' ')]\n    if check_strictly_increasing(a) or check_strictly_decreasing(a):\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1].split()))\n    inc = []\n    dec = []\n    for i in range(n):\n        if seq[i] > seq[i - 1]:\n            inc.append(seq[i])\n        else:\n            dec.append(seq[i])\n    if inc == dec:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(int, stdin.split(' ')))\n    if n == 1:\n        print(n)\n        print(a)\n        return\n    # Sort the array\n    a.sort()\n    print(n)\n    print(a)\n    # Check if the array is increasing\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            return \"NO\"\n    # Check if the array is decreasing\n    for i in range(len(a) - 1):\n        if a[i] > a[i + 1]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        l, v, l1, r = map(int, stdin.split())\n        if r - l1 > v * l:\n            print(0)\n        else:\n            print(r // v)\n\n    return \"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.split())\n        if v % L == 0:\n            print(r)\n        elif r % L == 0:\n            print(l)\n        else:\n            print(0)\n    return ''\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    answer = 1\n    t = int(stdin[0])\n    for _ in range(t):\n        l, v, l1, r1 = map(int, stdin.pop(0).split())\n        print(l1)\n        if l % v!= 0:\n            answer = 0\n            break\n        elif l1 < l:\n            if r1 - l1 < l:\n                answer += l1 - l\n            else:\n                answer += r1 - l1\n        else:\n            answer += l1 - l\n    return answer\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        l, v, l1, r1 = map(int, stdin.split())\n        l, r = l // v, r1 // v\n        if (r % l) == (r - l) % l:\n            return '0'\n        return str(l) +'' + str(r)\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        l, v, ln, rn = map(int, stdin.split())\n        if ln <= l and l <= rn:\n            print(0)\n        else:\n            print(ln + 1 - l + (rn - ln) // v)\n\n    return ''\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, t = stdin.split()\n    t = int(t)\n    for _ in range(t):\n        _, v, l, r = stdin.split()\n        v, l, r = int(v), int(l), int(r)\n        ans = 1\n        for i in range(l, r + 1, v):\n            if i % v == 0:\n                ans += 1\n        print(ans)\n    return '\\n'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\na = stdin\nfor _ in range(int(input())):\n    l, v, l1, r1 = map(int, a.split())\n    if l1 < l:\n        print(0)\n    elif r1 % v == 0:\n        print(r1 // v - l1 + 1)\n    else:\n        print((r1 // v + 1) - (l // v + 1))\n\nsolution(a)"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.split())\n        if not (L % v) and not (l % v) and (r % v):\n            return '{}'.format(r - l)\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        l, v, l1, r = map(int, stdin.split())\n        if (l1 % v == 0) and (r % v == 0):\n            if r >= l:\n                return \"0\"\n        if (l1 % v == 0) or (r % v == 0):\n            if (l1 % v == 0) and (r % v == 0):\n                return \"0\"\n        if (l1 >= l) and (r <= r1):\n            return str(r - l)\n    return \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n')\n    '3'\n    >>> solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n')\n    '0'\n    >>> solution('3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n')\n    '1134'\n    >>> solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n')\n    '0'\n    '''\n    t = int(stdin.split()[0])\n    answers = []\n    for i in range(t):\n        L, v, l, r = map(int, stdin.split()[1:])\n        if r-l < v:\n            answers.append(0)\n        elif r%v == 0:\n            answers.append(r//v)\n        else:\n            answers.append(r//v+1)\n    return '\\n'.join([str(ans) for ans in answers])"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    # first party and second party have equal number\n    if input_n % 2 == 0:\n        n_div = input_n // 2\n        ways_1 = 1\n        ways_2 = 1\n        for i in range(1, n_div + 1):\n            ways_1 *= i\n        for i in range(1, n_div + 1):\n            ways_2 *= n_div - i\n        return str(ways_1 + ways_2)\n    else:\n        # first party has more people than second party\n        n_div = input_n // 2\n        ways_1 = 1\n        ways_2 = 1\n        for i in range(1, n_div + 1):\n            ways_1 *= i\n        for i in range(1, n_div + 1):\n            ways_2 *= n_div - i\n        return str(ways_1 + ways_2)\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return '-1'\n    if n % 4 == 0:\n        return '0'\n    \n    s = ''\n    r = 1\n    t = 1\n    for _ in range(0, n):\n        s += str(r)\n        r = r * 2\n        s += str(t)\n        t = t * 2\n    \n    print(s)\n    return s\n\nsolution('2')\nsolution('4')\nsolution('8')\nsolution('20')\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 0\n    return binomial_coefficient(n//2, n//2)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return str(round_dances(int(stdin)))\n    '''\n    return str(round_dances(int(stdin)))"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(round((n/2), 1))\n    else:\n        return str(round((n/2+1), 1))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2!= 0:\n        return -1\n    elif n % 4 == 0:\n        return 1\n    elif n % 2 == 0:\n        return 2\n\n    t = n // 2\n    res = 1\n    for k in range(t, n - 1):\n        res = 2 * res + solution(str(k))\n    return str(res)"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    print(1 if n % 2 == 0 else 2)\n    "
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n <= 2:\n        return 1\n    if n % 2 == 0:\n        return solution(str(n // 2))\n    return solution(str(n // 2)) + solution(str(n // 2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2 == 0 and n > 0) or (n % 2!= 0 and n > 1):\n        return '0'\n    else:\n        return '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n   ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n   ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''')\n    '''\n    pass"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    k = int(input[1])\n    s = input[2]\n    return ''\n\n\nsolution(\"15 3\\ncccaabababaccbc\")\nsolution(\"1 1\\nu\")"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if not k or not n:\n        return ''\n    if n < k:\n        return s\n\n    while len(s) > 0:\n        for c in s:\n            if c == 'a' or c == 'b' or c == 'z':\n                s = s[1:]\n                break\n            s = s[1:]\n        if len(s) == n - 1:\n            s = s[1:]\n    return s"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    \n    if n == 1 and k == 1:\n        return \"\"\n    \n    res = []\n    i = 0\n    while i < n:\n        if 'a' in res:\n            res.remove('a')\n            i += 1\n        elif 'b' in res:\n            res.remove('b')\n            i += 1\n        elif 'c' in res:\n            res.remove('c')\n            i += 1\n        elif 'd' in res:\n            res.remove('d')\n            i += 1\n        elif 'e' in res:\n            res.remove('e')\n            i += 1\n        elif 'f' in res:\n            res.remove('f')\n            i += 1\n        elif 'g' in res:\n            res.remove('g')\n            i += 1\n        elif 'h' in res:\n            res.remove('h')\n            i += 1\n        elif 'i' in res:\n            res.remove('i')\n            i += 1\n        elif 'j' in res:\n            res.remove('j')\n            i += 1\n        elif 'k' in res:\n            res.remove('k')\n            i += 1\n        elif 'l' in res:\n            res.remove('l')\n            i += 1\n        elif'm' in res:\n            res.remove('m')\n            i += 1\n        elif 'n' in res:\n            res.remove('n')\n            i += 1\n        elif 'o' in res:\n            res.remove('o')\n            i += 1\n        elif 'p' in res:\n            res.remove('p')\n            i += 1\n        elif 'q' in res:\n            res.remove('q')\n            i += 1\n        elif 'r' in res:\n            res.remove('r')\n            i += 1\n        elif's' in res:\n            res.remove('s')\n            i += 1\n        elif 't' in res:\n            res.remove('t')\n            i += 1\n        elif 'u' in res:\n            res.remove('u')\n            i += 1\n        elif 'v' in res:\n            res.remove('v')\n            i += 1\n        elif 'w' in res:\n            res.remove('w')\n            i += 1\n        elif 'x' in res:\n            res.remove('x')\n            i += 1\n        elif 'y' in res:\n            res.remove('y')\n            i += 1\n        elif 'z' in res:\n            res.remove('z')\n            i += 1\n        elif 'a' in res:\n            res.remove('a')\n            i += 1\n        elif 'b' in res:\n            res.remove('b')\n            i += 1\n        elif 'c' in res:\n            res.remove('c')\n            i += 1\n        elif 'd' in res:\n            res.remove('d')\n            i += 1\n        elif 'e' in res:\n            res.remove('e')\n            i += 1\n        elif 'f' in res:\n            res.remove('f')\n            i += 1\n        elif 'g' in res:\n            res.remove('g')\n            i += 1\n        elif 'h' in res:\n            res.remove('h')\n            i += 1\n        elif 'i' in res:\n            res.remove('i')\n            i += 1\n        elif 'j' in res:\n            res.remove('j')\n            i += 1\n        elif 'k' in res:\n            res.remove('k')\n            i += 1\n        elif 'l' in res:\n            res.remove('l')\n            i += 1\n        elif'm' in res:\n            res.remove('m')\n            i += 1\n        elif 'n' in res:\n            res.remove('n')\n            i += 1\n        elif 'o' in res:\n            res.remove('o')\n            i += 1\n        elif 'p' in res:\n            res.remove('p')\n            i += 1\n        elif 'q' in res:\n            res.remove('q')\n            i += 1\n        elif 'r' in res:\n            res.remove('r')\n            i += 1\n        elif's' in res:\n            res.remove('s')\n            i += 1\n        elif 't' in res:\n            res.remove('t')\n            i += 1\n        elif 'u' in res:\n            res.remove('u')\n            i += 1\n        elif 'v' in res:\n            res.remove('v')\n            i += 1\n        elif 'w' in res:\n            res.remove('w')\n            i += 1\n        elif 'x' in res:\n            res.remove('x')\n            i += 1\n        elif 'y' in res:\n            res.remove('y')\n            i += 1\n        elif 'z' in res:\n            res.remove('z')\n            i += 1\n        elif 'a' in res:\n            res.remove('a')\n            i += 1\n        elif 'b' in res:\n            res.remove('b')\n            i += 1\n        elif 'c' in res:\n            res.remove('c')\n            i += 1\n        elif 'd' in res:\n            res.remove('d')\n            i += 1\n        elif 'e' in res:\n            res.remove('e')\n            i += 1\n        elif 'f' in res:\n            res.remove('f')\n            i += 1\n        elif 'g' in res:\n            res.remove('g')\n            i += 1\n        elif 'h' in res:\n            res.remove('h')\n            i += 1\n        elif 'i' in res:\n            res.remove('i')\n            i += 1\n        elif 'j' in res:\n            res.remove('j')\n            i += 1\n        elif 'k' in res:\n            res.remove('k')\n            i += 1\n        elif 'l' in res:\n            res.remove('l')\n            i += 1\n        elif'm' in res:\n            res.remove('m')\n            i += 1\n        elif 'n' in res:\n            res.remove('n')\n            i += 1\n        elif 'o' in res:\n            res.remove('o')\n            i += 1\n        elif 'p' in res:\n            res.remove('p')\n            i += 1\n        elif 'q' in res:\n            res.remove('q')\n            i += 1\n        elif 'r' in res:\n            res.remove('r')\n            i"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(stdin)\n    l = l[k:]\n    return ''.join(l)"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def remove_letter(s: str, i: int) -> str:\n        if s[i] == 'a':\n            return s[:i] + s[i+1:]\n        if s[i] == 'b':\n            return s[:i] + s[i+1:]\n        if s[i] == 'z':\n            return s[:i] + s[i+1:]\n        return s\n    def remove_k_characters(s: str, k: int) -> str:\n        if k == 0:\n            return ''\n        if len(s) == 1:\n            return s\n        while k > 0 and s[0] == 'a':\n            k -= 1\n            s = remove_letter(s, 0)\n        while k > 0 and s[0] == 'b':\n            k -= 1\n            s = remove_letter(s, 0)\n        while k > 0 and s[0] == 'z':\n            k -= 1\n            s = remove_letter(s, 0)\n        return s\n    return remove_k_characters(stdin, int(input()))"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    if len(input_lines)!= 2:\n        print(\"Wrong input\")\n    else:\n        n, k = map(int, input_lines[0].split())\n        s = input_lines[1]\n        if n <= 0 or k <= 0 or k > len(s) or n > len(s):\n            print(\"Wrong input\")\n        else:\n            result_string = \"\"\n            count = 0\n            while count < k:\n                if count + 1 <= len(s):\n                    if s[count] == \"a\":\n                        count += 1\n                        if count == len(s):\n                            break\n                    elif s[count] == \"b\":\n                        count += 1\n                        if count == len(s):\n                            break\n                else:\n                    break\n            result_string = s[count:]\n            print(result_string)\n\nsolution(input())\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    c = 0\n    while True:\n        l = s.count('a')\n        if l >= 1:\n            s = s.replace('a', '')\n        else:\n            break\n        c += 1\n        l = s.count('b')\n        if l >= 1:\n            s = s.replace('b', '')\n        else:\n            break\n        c += 1\n        l = s.count('z')\n        if l >= 1:\n            s = s.replace('z', '')\n        else:\n            break\n        c += 1\n    if s == '':\n        return ''\n    return s\n\nsolution(input())\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    res = []\n    c = 0\n    for i in range(k):\n        if c <= n:\n            if 'a' in res:\n                res.remove('a')\n                c = 0\n            else:\n                res.append('a')\n                c += 1\n        if c <= n:\n            if 'b' in res:\n                res.remove('b')\n                c = 0\n            else:\n                res.append('b')\n                c += 1\n        if c <= n:\n            if 'z' in res:\n                res.remove('z')\n                c = 0\n            else:\n                res.append('z')\n                c += 1\n    return \"\".join(res)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    orders = []\n    for _ in range(n):\n        orders.append(list(map(int, stdin.split())))\n    \n    k = [0] * n\n    days = set()\n    \n    for k_i, d_i, t_i in orders:\n        k_i = k_i % m\n        \n        if k_i == 0:\n            if t_i in days:\n                days.remove(t_i)\n        elif t_i in days:\n            days.remove(t_i)\n            k[k_i - 1] = max(k[k_i - 1], d_i + 1)\n            days.add(t_i)\n        else:\n            if d_i + 1 <= t_i:\n                k[k_i - 1] = max(k[k_i - 1], d_i + 1)\n                days.add(t_i)\n            else:\n                days.add(t_i)\n    \n    return max(k)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n\n    for line in stdin.split('\\n'):\n        line = line.split()\n        if len(line) > 1:\n            graph[int(line[0])].append((int(line[1]), int(line[2])))\n\n    k = 0\n    ans = float('inf')\n    for i in range(1, n + 1):\n        if k == m:\n            break\n        k += 1\n        visited = set()\n        visited.add(i)\n        if n <= k:\n            continue\n        queue = deque([(i, 0)])\n        while queue:\n            n, lvl = queue.popleft()\n            visited.add(n)\n            if lvl > m:\n                continue\n            if lvl == m:\n                if k == m:\n                    ans = min(ans, lvl)\n                continue\n            for t, m in graph[n]:\n                if t not in visited:\n                    queue.append((t, lvl + m))\n    if ans == float('inf'):\n        return -1\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n\n    d_t = [(i, 2 * i) for i in range(1, n + 1)]\n    d_m = [(j, 2 * j) for j in range(1, m + 1)]\n    d_m = [(i, j) for i in range(1, n + 1) for j in range(1, m + 1)]\n    d = d_t + d_m\n\n    t_k = []\n    for i in range(n):\n        t_k.append((i, k[i]))\n    t = t_k\n\n    m = len(d)\n    best = float('inf')\n    best_day = 0\n    while t:\n        day = t[0][0]\n        k = t[0][1]\n        t.pop(0)\n        if k <= 0:\n            break\n        for i in range(m):\n            if day < d[i][0] or day >= d[i][1]:\n                continue\n            if d[i][0] in t:\n                continue\n            t.append((d[i][0], k - d[i][1]))\n        if not t:\n            break\n        if best > sum(k for _, k in t):\n            best = sum(k for _, k in t)\n            best_day = day\n\n    return str(best_day)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    s = input()\n    s = s.split()\n    k_dict = {}\n    for i in range(n):\n        k_dict[i] = int(k[i])\n\n    k_dict_s = {}\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if s[i] not in k_dict_s:\n            k_dict_s[s[i]] = []\n        k_dict_s[s[i]].append(i)\n\n    def is_on_sale(k, day):\n        for i in range(n):\n            if k[i] > 0 and k_dict_s[s[i]][day] == i:\n                return True\n        return False\n\n    k_dict = {k_dict[i]: i for i in range(n)}\n\n    if s[0] == '0':\n        return 0\n\n    k = k_dict[1]\n    for i in range(2, n):\n        if k + 1 == n:\n            k = k_dict[1]\n            continue\n        if k_dict_s[s[i]][i] == k:\n            k = k + 1\n        else:\n            k = k_dict[1]\n    return i\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, *k = map(int, stdin.split())\n    s = []\n    for i in range(1, n + 1):\n        s.append(2 * i)\n    for i in k:\n        s.append(i)\n    s.sort()\n    print(s)\n    ans = -1\n    for i in range(m):\n        d, t = map(int, input().split())\n        if t > len(s):\n            print('INVALID')\n            continue\n        elif s[t - 1] - s[d - 1] <= 1:\n            if s[d - 1] - s[0] > ans:\n                ans = s[d - 1] - s[0]\n            s.pop(t - 1)\n            s.pop(d - 1)\n        else:\n            print('INVALID')\n            continue\n    print(ans)\n    return"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *k = list(map(int, stdin.split()))\n    special = list(map(int, stdin.split()))\n\n    k_set = set(k)\n    special_dict = {}\n    special_tot = 0\n    for i in range(m):\n        start, end = special[2*i], special[2*i+1]\n        special_tot += end - start + 1\n        special_dict[(start, end)] = i\n\n    special_tot = list(special_dict.keys())\n\n    special_tot.sort(key=lambda x: x[0])\n\n    print(special_tot)\n\n    special_tot.sort(key=lambda x: x[1])\n\n    print(special_tot)\n\n    special_tot.sort(key=lambda x: x[1], reverse=True)\n\n    print(special_tot)\n\n    special_tot.sort(key=lambda x: x[0], reverse=True)\n\n    print(special_tot)\n\n    special_tot.sort(key=lambda x: x[1], reverse=True)\n\n    print(special_tot)\n\n    special_tot.sort(key=lambda x: x[0], reverse=True)\n\n    print(special_tot)\n\n    def check_special(special, special_tot):\n        for special_start, special_end in special_tot:\n            for i in range(special_start, special_end + 1):\n                if i not in special_set:\n                    return False\n        return True\n\n    special_set = set(special_tot)\n    print(special_set)\n\n    print(k_set)\n    if len(k_set) < special_tot[-1][1] + 1:\n        return -1\n    else:\n        for i in range(len(special_tot)):\n            special_start, special_end = special_tot[i]\n            special_dict[(special_start, special_end)] = i\n        print(special_dict)\n        if special_tot[0][0] - 1 not in special_set:\n            return -1\n        else:\n            tot_special = 0\n            special_min = special_tot[0][0]\n            for i in range(len(special_tot)):\n                special_start, special_end = special_tot[i]\n                if special_start > special_min:\n                    break\n                else:\n                    tot_special += special_end - special_start + 1\n                    special_min = special_end\n            print(special_tot)\n            print(tot_special)\n            return tot_special\n            for i in range(len(special_tot)):\n                special_start, special_end = special_tot[i]\n                if special_start > special_min:\n                    break\n                else:\n                    tot_special += special_end - special_start + 1\n                    special_min = special_end\n            print(special_tot)\n            print(tot_special)\n            return tot_special\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *transactions = map(int, stdin.split())\n    minimum = n + 1\n    answer = -1\n    transactions = sorted(list(map(lambda x: (x, transactions.index(x)), transactions)), key=lambda x: x[1])\n    for t, d in transactions:\n        if t == 0:\n            if minimum == n + 1:\n                answer = -1\n            minimum = n + 1\n        else:\n            if t - minimum <= 2:\n                minimum = n + 1\n            else:\n                minimum += t - minimum - 1\n    return str(answer)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    orders = [list(map(int, stdin.split())) for _ in range(n)]\n\n    special_offers = []\n    for j in range(m):\n        d, t = list(map(int, input().split()))\n        special_offers.append((d, t))\n\n    prices = [[] for _ in range(n)]\n\n    for i, (d, t) in enumerate(special_offers):\n        for j in range(d):\n            prices[t].append(1)\n        prices[t].append(2)\n    prices = [sum(x) for x in prices]\n\n    for order in orders:\n        cnt = 0\n        for i, (d, t) in enumerate(special_offers):\n            if i >= t:\n                break\n            if order[i] == 0:\n                cnt += 2\n            else:\n                cnt += 1\n        order.append(cnt)\n\n    min_price = 10**6\n    for order in orders:\n        price = sum(order[n:])\n        if price < min_price:\n            min_price = price\n    return min_price"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    orders = list(map(int, lines[1].split()))\n    special_offers = list(map(lambda x: tuple(map(int, x.split())), lines[2:]))\n    print(n, m, orders, special_offers)\n    return n\n\nsolution(input())"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    burles = [0] * n\n    for i in range(n):\n        burles[i] = int(stdin.split()[i])\n    burles.sort()\n    maximum_burles_in_order = sum(burles)\n    k = 0\n    days = 0\n    while k < m:\n        j = 0\n        while j < n and burles[j] > 0:\n            burles[j] -= 1\n            j += 1\n        while j < n and burles[j] <= 0:\n            burles[j] = maximum_burles_in_order\n            j += 1\n        days += 1\n        k += j\n    return days\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = \"*.\" * (n + 2) + \".\"\n    k = 0\n    for i in range(m):\n        k += 1\n        s = s[:-1] + \"*\" * (n + 2) + \".\"\n        s += \"*.\" * (n + 2)\n    if len(s) < n * m:\n        return -1\n    return str(k)\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = []\n    for i in range(n):\n        row = stdin.replace('*', '.').replace('.', '*')\n        grid.append(row)\n\n    stars_placed = 0\n    max_stars_placed = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars_placed += 1\n                max_stars_placed = max(stars_placed, max_stars_placed)\n\n    if max_stars_placed == 0:\n        return '-1'\n\n    else:\n        return str(stars_placed // max_stars_placed) + \" \" + str(max_stars_placed) + \" \" + \" \".join([str(x) for x in range(1, max_stars_placed + 1)])"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin\n    if n * m == 0:\n        return '-1'\n\n    min_stars = 0\n    while True:\n        cur_stars = get_stars(grid)\n        if cur_stars > min_stars:\n            min_stars = cur_stars\n            if min_stars > n * m:\n                return '-1'\n        else:\n            return str(min_stars)\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [['.'] * (m+2)] + [['.'] + list(input()) + ['.'] for _ in range(n)] + [['.'] * (m+2)]\n\n    for row in grid:\n        print(''.join(row))\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dots = set()\n            for k in range(max(0, j - 1), min(j + 2, m + 1)):\n                for l in range(max(0, i - 1), min(i + 2, n + 1)):\n                    if grid[l][k] == '*':\n                        dots.add(k)\n                        dots.add(l)\n                        break\n\n            if len(dots) == 0:\n                return '-1'\n\n            for k in dots:\n                grid[i][k] = '*'\n\n    k = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i][j] == '*':\n                k += 1\n\n    return str(k)\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(x) for x in stdin.split()]\n    print(grid)\n    if n == 1 and m == 1 and grid[0][0] == '*':\n        return '1'\n\n    for r in range(1, n):\n        if not is_a_star(grid, r, 0):\n            return '-1'\n\n    for c in range(1, m):\n        if not is_a_star(grid, 0, c):\n            return '-1'\n\n    return str(max_stars(grid, n, m))\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    grid = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(len(stdin[2:])):\n        x, y, s = stdin[2 + i]\n        grid[int(x)][int(y)] = '*'\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                count += 1\n\n    if count == 0:\n        return str(count)\n\n    max_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for r in range(n):\n                    if i == r:\n                        continue\n                    for c in range(m):\n                        if j == c:\n                            continue\n                        if grid[r][c] == '*':\n                            continue\n                        if r > i:\n                            break\n                        if c > j:\n                            break\n                        if r + i > n or c + j > m:\n                            break\n                        if grid[r][c] == '.':\n                            continue\n                        if grid[r][c] == '*':\n                            max_count = max(max_count, 1)\n\n    if max_count == 0:\n        return str(0)\n\n    return str(count) + \" \" + str(max_count)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.replace(\"\\n\", \"\").split(\"*\")\n    if not all(x in \".*\" for x in grid):\n        return \"-\"\n    if n == 0 or m == 0:\n        return \"-\"\n    \n    for i in range(n):\n        if not all(x == \".\" or x == \"*\" for x in grid[i]):\n            return \"-\"\n\n    for i in range(m):\n        if not all(x == \".\" or x == \"*\" for x in grid[i]):\n            return \"-\"\n\n    d = set([\"*\"])\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                d.add((i, j, 1))\n    result = 0\n    while d:\n        l = list(d)\n        result += 1\n        while l:\n            x, y, s = l.pop()\n            for dx, dy in ((0, 1), (0, -1), (1, 0), (-1, 0)):\n                if 0 <= x+dx < n and 0 <= y+dy < m and grid[x+dx][y+dy] == \"*\":\n                    d.add((x+dx, y+dy, s+1))\n                    grid[x+dx][y+dy] = \".\"\n    return result\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip()\n    if n*m == 0:\n        return \"-1\"\n    if (n, m) in (4, 5):\n        return str(2*n*m)\n    if n % 2 == 1 or m % 2 == 1:\n        return \"-1\"\n    grid = grid.split('.')\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                result += 1\n    return str(result)\n\nsolution(\"4 5\")\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n < 1 or n > 1000 or m < 1 or m > 1000:\n        return -1\n    grid = stdin\n    min_stars = 1\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= '*':\n                continue\n            for di in range(1, min(n - i, m - j)):\n                k = 2 * di + 1\n                if not (grid[i + di][j] == '*' or grid[i][j + di] == '*'):\n                    break\n                for s in range(2, min(n - i, m - j)):\n                    if (grid[i + di][j + s] == '*' or\n                            grid[i + di][j + s] == '.' or\n                            grid[i + di][j + s] == '*' or\n                            grid[i + di][j + s] == '.'):\n                        break\n                    if (grid[i + di][j] == '*' or grid[i + di][j] == '.' or\n                            grid[i + di][j] == '*' or\n                            grid[i + di][j] == '.'):\n                        break\n                    if grid[i + di][j + s] == '*' or grid[i + di][j + s] == '.':\n                        continue\n                    if grid[i + di][j + s] == '*' or grid[i + di][j + s] == '.':\n                        continue\n                    ans += 1\n                    break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n    # print(n)\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    for i in range(len(stdin)):\n        print(stdin[i])\n        stdin[i] = str(stdin[i])\n        print(stdin[i])\n        stdin[i] = stdin[i][::-1]\n        print(stdin[i])\n        stdin[i] = int(stdin[i])\n    # print(stdin)\n    for i in range(len(stdin)):\n        # print(type(stdin[i]))\n        if stdin[i] == stdin[i][::-1]:\n            print('Yes')\n            return 'Yes'\n    print('No')\n    return 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(n):\n        return n == int(str(n)[::-1])\n    if is_palindrome(stdin):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp_number = int(stdin)\n    if str(inp_number) == str(inp_number)[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 0:\n        return \"No\"\n    return str(pow(num, 2) + num + 1)"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N=int(stdin)\n    N_str=str(N)\n    N_list=list(N_str)\n    if N_str == N_str[::-1]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        num = int(stdin)\n        if num < 0 or num > 9999999999999999:\n            raise ValueError\n        return \"Yes\" if str(num) == str(num)[::-1] else \"No\"\n    except ValueError:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) == int(stdin[::-1]) else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x=int(stdin)\n    if str(x)==str(x)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \nsolution(input())\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\" \")))\n    return \"Alice\" if stdin[0] > stdin[1] else \"Bob\" if stdin[0] < stdin[1] else \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    if stdin[0] == stdin[1]:\n        return \"Draw\"\n    elif int(stdin[0]) > int(stdin[1]):\n        return \"Alice\"\n    elif int(stdin[0]) < int(stdin[1]):\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 13 or A == 1:\n        if B == 13 or B == 1:\n            return 'Draw'\n        else:\n            return 'Bob'\n    elif B == 13 or B == 1:\n        if A == 13 or A == 1:\n            return 'Draw'\n        else:\n            return 'Alice'\n    elif A > B:\n        return 'Alice'\n    else:\n        return 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = list(map(int, stdin.split()))\n    alice, bob = n1, n2\n    while True:\n        alice_card = alice % 10\n        bob_card = bob % 10\n        if alice_card > bob_card:\n            return \"Alice\"\n        elif alice_card < bob_card:\n            return \"Bob\"\n        else:\n            alice = alice // 10\n            bob = bob // 10\n\nsolution(\"8 6\")\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a > b:\n        print('Alice')\n    elif a < b:\n        print('Bob')\n    else:\n        print('Draw')"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Alice' if int(stdin.split()[0]) > int(stdin.split()[1]) else 'Bob' if int(stdin.split()[0]) < int(stdin.split()[1]) else 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = stdin.split()\n    n1 = int(n1)\n    n2 = int(n2)\n    if n1 > n2:\n        print(\"Alice\")\n    elif n1 < n2:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n    return \"Alice\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 13 or b > 13:\n        print(\"Invalid\")\n        return\n    if (13 - a) > (13 - b):\n        print(\"Alice\")\n    elif (13 - a) < (13 - b):\n        print(\"Bob\")\n    else:\n        print(\"Draw\")"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        return 'Alice'\n    elif a < b:\n        return 'Bob'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    return''.join(s)"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\",\")\n    result = \"\"\n    for index, item in enumerate(input_list):\n        if index == 0 or index == 1 or index == 3:\n            result += item\n        elif index == 4 or index == 6 or index == 8:\n            result += item\n        else:\n            result += item + \" \"\n    return result"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an input string of s.\n    Convert the string into a comma separated string with spaces.\n    Return the new string.\n\n    >>> solution(\"happy,newyear,enjoy\")\n    'happy newyear enjoy'\n    >>> solution(\"\")\n    ''\n    >>> solution(\"s\")\n   's'\n    >>> solution(\"abc,def\")\n    'abc def'\n    >>> solution(\"abc,def,ghi\")\n    'abc def ghi'\n    >>> solution(\"abc,def,ghi,jkl\")\n    'abc def ghi jkl'\n    >>> solution(\"abc,def,ghi,jkl,mno\")\n    'abc def ghi jkl mno'\n    >>> solution(\"abc,def,ghi,jkl,mno,pqr\")\n    'abc def ghi jkl mno pqr'\n    \"\"\"\n\n    return stdin.replace(\",\", \" \")\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.split(\",\")\n    print(\",\".join(s))\n    return \",\".join(s)"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i = 0\n    while i < len(s):\n        if s[i] == \",\":\n            s = s[:i] + \" \" + s[i + 1:]\n            i += 1\n        i += 1\n    return s\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    first = s[0:5]\n    second = s[6:11]\n    third = s[12:17]\n    fourth = s[18:23]\n    fifth = s[24:29]\n    sixth = s[30:35]\n    seventh = s[36:41]\n    eighth = s[42:47]\n    ninth = s[48:53]\n    tenth = s[54:59]\n    eleventh = s[60:65]\n    twelfth = s[66:71]\n    thirteenth = s[72:77]\n    fourthteen = s[78:83]\n    fifteenth = s[84:89]\n    sixteenth = s[90:95]\n    seventeenth = s[96:101]\n    eighteenth = s[102:107]\n    nineteenth = s[108:113]\n    tenthfirst = s[114:119]\n    twentieth = s[120:125]\n    eighthfirst = s[126:131]\n    ninthfirst = s[132:137]\n    tenthfirst = s[138:143]\n    twentieth = s[144:149]\n    eighthfirst = s[150:155]\n    nineteenth = s[156:161]\n    tenthfirst = s[162:167]\n    twentieth = s[168:173]\n    eighthfirst = s[174:179]\n    nineteenth = s[180:185]\n    tenthfirst = s[186:191]\n    twentieth = s[192:197]\n    eighthfirst = s[198:203]\n    nineteenth = s[204:209]\n    tenthfirst = s[210:215]\n    twentieth = s[216:221]\n    eighthfirst = s[222:227]\n    nineteenth = s[228:233]\n    tenthfirst = s[234:239]\n    twentieth = s[240:245]\n    eighthfirst = s[246:251]\n    nineteenth = s[252:257]\n    tenthfirst = s[258:263]\n    twentieth = s[264:269]\n    eighthfirst = s[270:275]\n    nineteenth = s[276:281]\n    tenthfirst = s[282:287]\n    twentieth = s[288:293]\n    eighthfirst = s[294:299]\n    nineteenth = s[300:305]\n    tenthfirst = s[306:311]\n    twentieth = s[312:317]\n    eighthfirst = s[318:323]\n    nineteenth = s[324:329]\n    tenthfirst = s[330:335]\n    twentieth = s[336:341]\n    eighthfirst = s[342:347]\n    nineteenth = s[348:353]\n    tenthfirst = s[354:359]\n    twentieth = s[360:365]\n    eighthfirst = s[366:371]\n    nineteenth = s[372:377]\n    tenthfirst = s[378:383]\n    twentieth = s[384:389]\n    eighthfirst = s[390:395]\n    nineteenth = s[396:401]\n    tenthfirst = s[402:407]\n    twentieth = s[408:413]\n    eighthfirst = s[414:419]\n    nineteenth = s[420:425]\n    tenthfirst = s[426:431]\n    twentieth = s[432:437]\n    eighthfirst = s[438:443]\n    nineteenth = s[444:449]\n    tenthfirst = s[450:455]\n    twentieth = s[456:461]\n    eighthfirst = s[462:467]\n    nineteenth = s[468:473]\n    tenthfirst = s[474:479]\n    twentieth = s[480:485]\n    eighthfirst = s[486:491]\n    nineteenth = s[492:497]\n    tenthfirst = s[498:503]\n    twentieth = s[504:509]\n    eighthfirst = s[510:515]\n    nineteenth = s[516:521]\n    tenthfirst = s[522:527]\n    twentieth = s[528:533]\n    eighthfirst = s[534:539]\n    nineteenth = s[540:547]\n    tenthfirst = s[548:553]\n    twentieth = s[554:559]\n    eighthfirst = s[560:566]\n    nineteenth = s[567:573]\n    tenthfirst = s[574:579]\n    twentieth = s[580:585]\n    eighthfirst = s[586:591]\n    nineteenth = s[592:597]\n    tenthfirst = s[598:603]\n    twentieth = s[604:609]\n    eighthfirst = s[610:615]\n    nineteenth = s[616:621]\n    tenthfirst = s[622:627]\n    twentieth = s[628:633]\n    eighthfirst = s[634:639]\n    nineteenth = s[640:647]\n    tenthfirst = s[648:653]\n    twentieth = s[654:659]\n    eighthfirst = s[660:665]\n    nineteenth = s[666:681]\n    tenthfirst = s[682:687]\n    twentieth = s[688:693]\n    eighthfirst = s[694:699]\n    nineteenth = s[700:705]\n    tenthfirst = s[706:711]\n    twentieth = s[712:717]\n    eighthfirst = s[718:722]\n    nineteenth = s[723:729]\n    tenthfirst = s[730:735]\n    twentieth = s[736:741]\n    eighthfirst = s[742:747]\n    nineteenth = s[748:753]\n    tenthfirst = s[754:759]\n    twentieth = s[760:765]\n    eighthfirst = s[766:771]\n    nineteenth = s[772:777]\n    tenthfirst = s[778:783]\n    twentieth = s[784:789]\n    eighthfirst = s[790:795]\n    nineteenth = s[796:801]\n    tenthfirst = s[802:807]\n    twentieth = s[808:813]\n    eighthfirst = s[814:819]\n    nineteenth = s[820:825]\n    tenthfirst = s[826:831]\n    twentieth = s[832:837]\n    eighthfirst = s[838:843]\n    nineteenth = s[844:849]\n    tenthfirst = s[850:855]\n    twentieth = s[856:861]\n    eighthfirst = s[862:877]\n    nineteenth = s[878:883]\n    tenthfirst = s[884:899]\n    twentieth = s[900:905]\n    eighthfirst = s[906:911]\n    nineteenth = s[912:917]\n    tenthfirst = s[918:923]\n    twentieth = s[924:929]\n    eighthfirst = s[930:935]\n    nineteenth = s[936:941]\n    tenthfirst = s[942:947]\n    twentieth = s["
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return''.join(s.split(','))\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\",\" \")"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Splits the stdin and returns a 2-dimensional list.\n    '''\n    input_ = stdin.split()\n    input_ = [list(map(int, input_[i].split(','))) for i in range(2)]\n    return input_\n\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    N,M = [int(x) for x in stdin[0].split()]\n    checkpoints = [[int(x) for x in stdin[i + 1].split()] for i in range(M)]\n    students = [[int(x) for x in stdin[i + 2].split()] for i in range(N)]\n    students.sort()\n    checkpoints.sort(key=lambda x: (x[0],x[1]))\n    output = []\n    for student in students:\n        distance = math.inf\n        for checkpoint in checkpoints:\n            distance = min(distance, abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1]))\n        output.append(distance)\n    return '\\n'.join([str(x) for x in output])"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split(\" \")\n    N, M = int(N), int(M)\n    a, b = [], []\n    for i in range(1, N+1):\n        a.append(int(stdin.split(\" \")[2*i]))\n        b.append(int(stdin.split(\" \")[2*i+1]))\n    check = {}\n    for i in range(M):\n        check[i+1] = (int(stdin.split(\" \")[2*i+2]), int(stdin.split(\" \")[2*i+3]))\n    # print(a, b)\n    # print(check)\n    res = []\n    for i in range(1, N+1):\n        dist = []\n        for j in range(1, M+1):\n            dist.append(abs(a[i-1] - check[j][0]) + abs(b[i-1] - check[j][1]))\n        res.append(dist.index(min(dist)))\n    return \" \".join(map(str, res))\n\nprint(solution(input()))"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import math\n    N, M = list(map(int, sys.stdin.readline().split()))\n    inputs = list(map(int, sys.stdin.readline().split()))\n    inputs.sort()\n    output = []\n    for i in range(N):\n        output.append(math.floor(inputs[i] * math.sin(math.pi * inputs[i] / M) + (M * inputs[i]) / math.cos(math.pi * inputs[i] / M)))\n    return \" \".join(map(str, output))\n    "
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin.pop()\n    student = 0\n    check = 1\n    while True:\n        x = int(stdin[student].split()[0])\n        y = int(stdin[student].split()[1])\n        if check % 2 == 0:\n            check_x = (x + y) / 2\n            check_y = (x - y) / 2\n        else:\n            check_x = (y - x) / 2\n            check_y = (y + x) / 2\n        check += 1\n        if check == len(stdin):\n            break\n        student += 1\n    output = ''\n    for i in range(student):\n        output += str(i + 1) +''\n    return output\n\nsolution(stdin)"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a string of student information.\n    Return the student's checkpoint choice.\n    '''\n    N, M = map(int, stdin.split())\n    points = []\n    for i in range(1, N + 1):\n        points.append(tuple(map(int, stdin.split())))\n\n    points.sort(key=lambda x: abs(x[0]) + abs(x[1]))\n    print(points)\n    print(points[0][0], points[0][1])\n    return points[0][0], points[0][1]\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    x_1, y_1 = a, b\n    x_2, y_2 = c, d\n    if a > c:\n        x_1, x_2 = c, a\n    if b > d:\n        y_1, y_2 = d, b\n    min_dist = abs(x_1 - x_2) + abs(y_1 - y_2)\n    checkpoints = [(a, b)]\n    for i in range(1, n):\n        for j in range(1, m):\n            new_dist = abs(x_1 - j) + abs(y_1 - i)\n            if new_dist < min_dist:\n                min_dist = new_dist\n                checkpoints.append((j, i))\n    print(checkpoints.index(min(checkpoints)))"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m = int(input[0]), int(input[1])\n    checkpoints = []\n    for i in range(m):\n        checkpoints.append(list(map(int, input[i * 2 + 2].split())))\n    n_student = int(input[n * 2 + 2])\n    n_checkpoints = int(input[n * 2 + 3])\n    student_position = []\n    for i in range(n_student):\n        student_position.append(list(map(int, input[i * 2 + 1].split())))\n    output = []\n    for student_position in student_position:\n        output.append(check_manhattan_distance(student_position, checkpoints))\n    for i in range(n_checkpoints):\n        print(output.index(min(output)) + 1)\n        output[output.index(min(output))] = float('inf')\n    return ''\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    checkpoints = []\n    for _ in range(N):\n        c, d = list(map(int, stdin.split()))\n        checkpoints.append((c, d))\n    checkpoints = sorted(checkpoints, key=lambda x: x[0])\n    checkpoints = sorted(checkpoints, key=lambda x: x[1])\n    distances = []\n    for i in range(N):\n        x = abs(checkpoints[i][0])\n        y = abs(checkpoints[i][1])\n        distances.append(x + y)\n    result = []\n    for i in range(N):\n        result.append(distances.index(min(distances))+1)\n        distances[distances.index(min(distances))] = float('inf')\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n\n    N = int(input_lines[0].split()[0])\n    M = int(input_lines[0].split()[1])\n    a = list(map(int, input_lines[1].split()))\n    b = list(map(int, input_lines[2].split()))\n    c = list(map(int, input_lines[3].split()))\n    d = list(map(int, input_lines[4].split()))\n\n    for i in range(N):\n        min_dist = float('inf')\n        min_point = None\n        for j in range(M):\n            dist = abs(a[i]-c[j]) + abs(b[i]-d[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_point = j\n        print(min_point+1, end = \" \")\n    return \"\"\n\nsolution(\"\"\"4 4\n-1 -1\n0 -1\n1 -1\n-1 0\"\"\") #\"\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    output = input + input * input * input\n    return str(output)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(f\"{stdin} + {stdin} + {stdin} = {stdin} + {stdin} + {stdin} = {stdin} + {stdin} + {stdin} + {stdin} + {stdin} = {stdin} + {stdin} + {stdin} + {stdin} + {stdin}\")"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def base_exp(number):\n        if number <= 3:\n            return 1\n        else:\n            return (number + 1) * base_exp(number - 1)\n\n    return str(base_exp(int(stdin)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(a + a ** 2 + a ** 3)\n    return ''\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return str(num + num * num + num * num * num)\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(stdin.split('\\n')[1:])\n    b = list(stdin.split('\\n')[2:])\n\n    t_len = len(b)\n    for i in range(t_len):\n        b[i] = b[i].split('#')\n    t_len = len(b)\n\n    for i in range(n):\n        a[i] = a[i].split('.')\n    n = len(a)\n\n    res = False\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[0][0]:\n                if a[i][j]!= b[t_len - 1][0]:\n                    if a[i][j]!= b[t_len - 1][t_len - 1]:\n                        if a[i][j]!= b[0][t_len - 1]:\n                            if a[i][j]!= b[0][0]:\n                                if a[i][j]!= b[t_len - 1][0]:\n                                    if a[i][j]!= b[0][t_len - 1]:\n                                        if a[i][j]!= b[t_len - 1][t_len - 1]:\n                                            if a[i][j]!= b[t_len - 1][0]:\n                                                res = True\n                                                break\n    return \"Yes\" if res else \"No\"\n\nsolution(input())\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    return \"Yes\" if A == [\"A\", \"B\"] else \"No\"\n\n\n\nsolution(\"3 2\")\n\n\"\"\"\n\nfrom itertools import product\n\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin.split()\n    b = stdin.split()\n    rows = [list(i) for i in a]\n    cols = [list(i) for i in b]\n    result = 0\n    for i in range(len(rows)):\n        for j in range(len(rows[i])):\n            if rows[i][j] == '#':\n                for k in range(len(cols)):\n                    if rows[i][j] == cols[k][0]:\n                        for l in range(len(cols)):\n                            if rows[i][j] == cols[k][l]:\n                                if cols[k][0] == cols[l][0]:\n                                    if cols[k][l] == '#':\n                                        result += 1\n                                else:\n                                    result += 1\n            else:\n                for k in range(len(cols)):\n                    if rows[i][j] == cols[k][0]:\n                        for l in range(len(cols)):\n                            if rows[i][j] == cols[k][l]:\n                                if cols[k][0] == cols[l][0]:\n                                    if cols[k][l] == '#':\n                                        result += 1\n                                else:\n                                    result += 1\n    return str(result)"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    M = int(stdin[1])\n    a = stdin[2]\n    b = stdin[3]\n    if a == b:\n        return \"No\"\n    b = b.replace(\".\", \"\")\n    a = a.replace(\".\", \"\")\n    b_list = list(b)\n    a_list = list(a)\n    index_a_list = []\n    index_b_list = []\n    index = 0\n    while index < len(a_list):\n        index_a_list.append(index)\n        index += 1\n    index = 0\n    while index < len(b_list):\n        index_b_list.append(index)\n        index += 1\n    result = \"\"\n    if len(index_b_list) > len(index_a_list):\n        for index in range(0, len(index_b_list)):\n            for i in range(0, len(index_a_list)):\n                if index_b_list[index] == index_a_list[i]:\n                    result = result + b_list[index]\n                else:\n                    result = result + \".\"\n        result = result + \"\\n\"\n        return result\n    elif len(index_b_list) < len(index_a_list):\n        for index in range(0, len(index_a_list)):\n            for i in range(0, len(index_b_list)):\n                if index_a_list[index] == index_b_list[i]:\n                    result = result + a_list[index]\n                else:\n                    result = result + \".\"\n        result = result + \"\\n\"\n        return result\n    elif len(index_b_list) == len(index_a_list):\n        for index in range(0, len(index_a_list)):\n            result = result + a_list[index]\n        result = result + \"\\n\"\n        return result\n    else:\n        return \"No\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        s = stdin.rstrip(\"\\n\").split(\"\\n\")\n        print(solution(s))\n\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = stdin.split()\n    b = stdin.split()\n    if (M > N):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(len(a)):\n            a[i] = a[i].replace('#', '1')\n            a[i] = a[i].replace('.', '0')\n        for j in range(len(b)):\n            b[j] = b[j].replace('#', '1')\n            b[j] = b[j].replace('.', '0')\n        k = len(b)\n        count = 0\n        while k!= 0:\n            for i in range(len(a)):\n                a[i] = a[i].replace('0', '.')\n            if (count == len(a)):\n                break\n            else:\n                k = k - 1\n        if(len(a) == len(b)):\n            for i in range(len(b)):\n                b[i] = b[i].replace('0', '.')\n            if (a == b):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    stdin = stdin.strip().split()\n    a = stdin[:n]\n    b = stdin[n:]\n    result = 'Yes'\n    b = ''.join(b)\n    for i, ai in enumerate(a):\n        for j, bi in enumerate(b):\n            if ai[j]!= bi:\n                result = 'No'\n    return result\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if not (True if __verify(stdin) else \"Yes\") else \"Yes\"\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # N, M = map(int, stdin.split())\n    N, M = 3, 2\n\n    A = stdin.split('\\n')[1:-1]\n    B = stdin.split('\\n')[-1][:-1]\n    B = stdin.split('\\n')[-2][:-1]\n\n    for i in range(len(A)):\n        A[i] = A[i].replace('.', '#')\n\n    # print(N, M)\n    # print(A)\n    # print(B)\n    '''\n\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return max(A+B, A+C, B+C)"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds an equation based on input.\n\n    >>> solution(\"2 4 5\")\n    '53'\n\n    >>> solution(\"2 4 5 8\")\n    '69'\n    \"\"\"\n\n    def calculate(panels: list) -> int:\n        return int(\"\".join(panels))\n\n    a, b, c = map(int, stdin.split())\n    return str(max(calculate([a, b, c]), calculate([c, b, a]), calculate([a, c, b]), calculate([b, a, c])))\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return f\"{max(A,B,C) + 1}\""
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    n = max(A, B, C)\n    while True:\n        if n == A and n == B:\n            return str(n + C)\n        elif n == A:\n            return str(n + B)\n        elif n == B:\n            return str(A + n)\n        else:\n            return str(A + B + n)"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    if a + b > c:\n        return str(a + b)\n    elif a > c:\n        return str(c)\n    elif b > c:\n        return str(b)\n    else:\n        return str(a)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(A + B, A + C, B + C, key=abs))\n\"\"\"\nimport math\nA, B, C = map(int, input().split())\nprint(max(A + B, A + C, B + C, key=abs))\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    if (a + b) == (c + 1):\n        return str(a) + str(b) + \"+\" + str(c)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = A + B + C\n    if max_allowance > A:\n        return str(max_allowance - A)\n    elif max_allowance > A + B:\n        return str(max_allowance - A - B)\n    else:\n        return str(max_allowance - A - C)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(A + B, C))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    panels = stdin.split()\n    return max(int(x) + int(y) for x, y in zip(panels, panels[1:]))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 3:\n        return 'ERROR'\n\n    N = int(stdin.split()[0])\n    Prices = list(map(int, stdin.split()[1:]))\n\n    # 1. Lowest price\n    lowest = Prices[0]\n    i = 1\n    while i < N:\n        if Prices[i] < lowest:\n            lowest = Prices[i]\n        i += 1\n\n    # 2. Discount\n    if N % 2!= 0:\n        return 'ERROR'\n    elif Prices[N // 2] * 0.5 >= lowest:\n        lowest = Prices[N // 2] * 0.5\n        lowest = lowest * 2\n\n    # 3. Total price\n    total = sum(Prices)\n\n    return str(total - lowest)\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split()\n    if int(num[0])%2==0:\n        return \"0\"\n    else:\n        sum = 0\n        for i in range(int(num[0])):\n            sum+=int(num[i+1])\n        if sum%2==0:\n            return str(int(sum/2))\n        else:\n            return str(int(sum/2+1))\nprint(solution(input()))\n\n---\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    return sum(prices[i] // 2 * (i + 1) for i in range(n))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    if N > 10:\n        raise ValueError(\"Input Error\")\n    if (N == 1 and arr[0] == 1) or (N == 2 and arr[0] == 1 and arr[1] == 1):\n        return \"Wrong Answer\"\n    result = 0\n    for i in range(N):\n        if N == 1 and arr[0] == 1:\n            result = result + arr[0]\n        else:\n            if arr[i] >= arr[i + 1]:\n                result = result + arr[i] / 2 + arr[i + 1]\n            else:\n                result = result + arr[i] / 2 + arr[i + 1] - arr[i] / 2\n    return str(result)\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = [int(x) for x in stdin.split()]\n    p.sort(reverse=True)\n    for i in range(N-1, -1, -1):\n        if p[i] % 2 == 0:\n            p[i] //= 2\n            if i == N-1:\n                return str(sum(p))\n            else:\n                return str(sum(p[:i+1]))\n    return str(sum(p))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read each line.\n    N = int(stdin.split()[0])\n    p = [int(x) for x in stdin.split()[1:]]\n\n    # Fill in the rest\n    # Make a list of max values.\n    max_values = sorted([x for x in p], reverse=True)[:N-1]\n\n    # Add the first element to the total.\n    return sum([x*2 + y for x, y in zip(p, max_values)])\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    discount = int(stdin.split()[0])\n    curr_max = 0\n    curr_min = 100000\n    for i in range(0, N):\n        curr_max = max(curr_max, prices[i] - discount)\n        curr_min = min(curr_min, prices[i])\n    return str(curr_max + (curr_max - curr_min) / 2)\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin\n    n = int(input())\n    prices = list(map(int, input().split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # for i in range(n):\n    #     dp[i][i] = prices[i]\n    for i in range(n):\n        for j in range(n - i):\n            dp[i][i + j] = prices[i] * (i + 1)\n            if i > 0:\n                dp[i][i + j] -= dp[i - 1][i + j]\n            if j > 0:\n                dp[i][i + j] -= dp[i][i + j - 1]\n            dp[i][i + j] = max(dp[i][i + j], dp[i][i + j - 1])\n    print(sum(dp[n - 1]))\n    return\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = list(map(int, stdin.split()))\n    # prices.sort()\n    # print(prices)\n    # print(prices[-2])\n    # print(prices[-1])\n    # print(prices[0])\n    if n == 1:\n        return prices[0]\n    elif n == 2:\n        return sum(prices)\n    else:\n        return sum(prices[:n]) - max(prices[:n]) / 2 * n + max(prices[n-2:])"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = []\n    for _ in range(N):\n        P.append(int(stdin))\n\n    return str(sum(P) * 2 + sum(P) // 2)"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    line_1 = stdin[0]\n    line_2 = stdin[1]\n    line_3 = stdin[2]\n    line_4 = stdin[3]\n    line_5 = stdin[4]\n    A = int(line_1)\n    B = int(line_2)\n    C = int(line_3)\n    D = int(line_4)\n    E = int(line_5)\n\n    min_val = 10000000000\n    max_val = 0\n\n    if (A < min_val):\n        min_val = A\n    if (B > max_val):\n        max_val = B\n\n    if (C < min_val):\n        min_val = C\n    if (D > max_val):\n        max_val = D\n\n    if (E < min_val):\n        min_val = E\n\n    if (B % 10 == 0):\n        temp_val = (min_val + (max_val - min_val) + 1)\n        temp_val = temp_val % 10000000000\n        if (temp_val < min_val):\n            min_val = temp_val\n\n    if (C % 10 == 0):\n        temp_val = (min_val + (max_val - min_val) + 1)\n        temp_val = temp_val % 10000000000\n        if (temp_val < min_val):\n            min_val = temp_val\n\n    if (D % 10 == 0):\n        temp_val = (min_val + (max_val - min_val) + 1)\n        temp_val = temp_val % 10000000000\n        if (temp_val < min_val):\n            min_val = temp_val\n\n    if (E % 10 == 0):\n        temp_val = (min_val + (max_val - min_val) + 1)\n        temp_val = temp_val % 10000000000\n        if (temp_val < min_val):\n            min_val = temp_val\n\n    print(min_val)\n    return min_val\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def decode(s: str) -> tuple:\n        a = list(map(int, s.split()))\n        return (a[0], a[1], a[2], a[3], a[4])\n\n    def encode(a: tuple) -> str:\n        return f\"{a[0]} {a[1]} {a[2]} {a[3]} {a[4]}\"\n\n    def is_valid(a: tuple) -> bool:\n        return True if a[0] <= a[4] else False\n\n    def min_max_diff(a: tuple) -> int:\n        return abs(a[1] - a[0]) + abs(a[3] - a[2])\n\n    def find_earliest_valid_order_time(a: list) -> str:\n        b = sorted(a)\n        for i in range(1, len(b)):\n            if b[i] - b[i - 1] > 1:\n                return encode(b[i - 1])\n\n    def find_earliest_time(a: list) -> str:\n        b = sorted(a)\n        for i in range(1, len(b)):\n            if b[i] - b[i - 1] > 1:\n                return encode(b[i - 1])\n\n    def find_earliest_valid_order_time_min_diff(a: list) -> str:\n        b = sorted(a)\n        for i in range(1, len(b)):\n            if b[i] - b[i - 1] > 1:\n                return encode(b[i - 1])\n\n    def find_earliest_time_min_diff(a: list) -> str:\n        b = sorted(a)\n        for i in range(1, len(b)):\n            if b[i] - b[i - 1] > 1:\n                return encode(b[i - 1])\n\n    f_list = decode(stdin)\n    res = None\n    # print(f_list)\n    for i in range(1, 1_000_000):\n        if is_valid(f_list):\n            res = f_list[4]\n            break\n\n        f_list = f_list[1:] + [i]\n\n    # print(f_list)\n    if res is None:\n        print(-1)\n    else:\n        print(find_earliest_time(f_list))\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split('\\n')))\n\n    if len(inputs) == 1:\n        return str(inputs[0])\n\n    inputs[1] = inputs[1] % 10\n\n    for i in range(2, len(inputs)):\n        inputs[i] = inputs[i] % 10\n\n    for i in range(2, len(inputs)):\n        inputs[i] = inputs[i] + inputs[i - 1]\n\n    print(inputs)\n\n    for i in range(2, len(inputs)):\n        if inputs[i] < inputs[i - 1]:\n            print(inputs[i])\n            return str(inputs[i])\n\n\nsolution('29\\n20\\n7\\n35\\n120')\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    mins = a % 10\n    if mins == 0:\n        mins = 10\n    elif mins == 5:\n        mins = 5\n    else:\n        mins = mins\n    mins = mins + b\n    if mins % 10 == 0:\n        mins = mins\n    else:\n        mins = mins + 5\n    if mins % 10 == 0:\n        mins = mins\n    else:\n        mins = mins + 10\n    mins = mins + c\n    if mins % 10 == 0:\n        mins = mins\n    else:\n        mins = mins + 5\n    mins = mins + d\n    if mins % 10 == 0:\n        mins = mins\n    else:\n        mins = mins + 10\n    mins = mins + e\n    if mins % 10 == 0:\n        mins = mins\n    else:\n        mins = mins + 5\n    print(mins)"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = 99999999\n    for a, b, c, d, e in zip(*[iter(stdin.split())]*5):\n        res = min(res, abs(int(a) - int(d)) + abs(int(b) - int(e)) + int(c) + abs(int(d) - int(e)) )\n    return str(res)\n\nsolution(\"29 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"7 30 20 7 35 120\")\nsolution(\"7 30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120\")\nsolution(\"30 20 7 35 120"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    m = 10\n    res = min(m * (E - C), m * (D - B), m * (A - 1))\n    print(res)\n    return res\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution())\n\n'''\nimport sys\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    import collections\n\n    def calc(arr, t):\n        num_times = collections.Counter(arr)\n        for time, num in num_times.items():\n            if num > 1:\n                return False\n        return True\n\n    n = int(stdin.split()[0])\n    time = 0\n    while time % 10!= 0:\n        if calc(stdin.split(), time):\n            return str(time)\n        time += 10\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    result = 0\n    return result\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    last_day = E % 10\n    first_day = max(last_day, E - last_day)\n    last_day = max(first_day, first_day + C)\n    first_day = max(last_day, first_day + last_day + A)\n    last_day = max(first_day, first_day + last_day + D)\n    first_day = max(last_day, first_day + last_day + E)\n    last_day = max(first_day, first_day + last_day + last_day + F)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + G)\n    last_day = max(first_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day + last_day)\n    first_day = max(last_day, first_day + last_day + last_day + last_day + last_"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 1 / sum((-1) ** i / a for i, a in enumerate(map(int, stdin.split()), 1))\n    return ('%.4f' % res) if isinstance(res, float) else ('%d' % res)"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = stdin.split()[1:]\n    inv_sum = 0\n    for i in range(len(A)):\n        inv_sum += 1 / int(A[i])\n    print(inv_sum / (sum(list(map(int, A))) / N))\n    return\nprint(solution(input()))\n\n\"\"\"\nfrom math import factorial\nfrom time import perf_counter\n\nN = 3\nA = [2, 4, 3]\nt = perf_counter()\nprint(factorial(N) / sum(factorial(a) for a in A) / factorial(N))\nprint(f\"N={N}, A={A}\")\nprint(f\"time={perf_counter()-t}\")"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 100:\n        return 'Error: N out of bounds.'\n    A = list(map(int, stdin.split()))\n    if len(A)!= n:\n        return 'Error: Incorrect input format.'\n    return str(reduce(lambda x, y: x * y, map(lambda x: 1 / x, A)))\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    inverses: list[int] = []\n    for i in range(n):\n        inverses.append(1 / (int(stdin.split()[i]) ** -1))\n    return str(sum(inverses))\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nInput:\n2\n10 30\n\nOutput:\n7.5\n\n9.05239961471141\n\nInput:\n2\n10 20\n\nOutput:\n8.0\n\n9.05239961471141\n\ninput\n\n2\n10 30\n\nOutput\n7.5\n\n9.05239961471141\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = stdin.split()\n    ans = 0\n    for num in nums:\n        ans += 1 / int(num)\n    return \"{:.5f}\".format(ans)\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def remainder(k):\n        x, y = k // 10, k % 10\n        return x, y\n    l = list(map(int, stdin.split()))\n    n = l[0]\n    a = l[1:]\n    n = n\n    a = a\n    if n == 1:\n        return str(a[0])\n    else:\n        while n!= 1:\n            n, y = remainder(n)\n            x = a[0]\n            a = a[1:]\n            a.append(x)\n            a = a\n            # print(a)\n            if n == 1:\n                return str(a[0])\n        return str(a[0])\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Return your answer in the following format (do not use newline character)\n    # Print an integer (or a float)\n    # Use as many lines as needed to represent the float in float format\n    # Use as many decimal places as needed\n    # Use the format string to print the value in float format\n    # e.g. print(\"%.3f\" % 7.5)\n    # return the float value 7.50001\n    # for example:\n    # print(float(\"%.3f\" % 7.5))\n    # print(7.5)\n    # print(7.50001)\n    \n    return 7.5\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    tot = sum(a)\n    inv = 1\n    for i in range(n):\n        inv *= a[i]\n    return str(float(inv) / tot)"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    inverse_sum = sum([int(i ** -1) for i in input_data])\n    return f\"{inverse_sum:.5f}\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    result = 1\n    for i in range(len(A)):\n        result = result * int(A[i])\n    result = str(result)\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    h = list(map(int, stdin.split(' ')))\n    max_h = max(h)\n    min_h = min(h)\n    if max_h - min_h < k:\n        return str(max_h - min_h)\n    else:\n        h.sort(reverse=True)\n        if h[0] - h[k - 1] > 0:\n            return str(h[0] - h[k - 1])\n        elif h[k - 1] - h[0] > 0:\n            return str(h[k - 1] - h[0])\n        else:\n            return str(0)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, K = int(stdin[0]), int(stdin[1])\n    height = list(map(int, stdin[2].split(\" \")))\n    return str(min(height) - max(height))\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    K = int(stdin[1])\n    height = []\n    for i in range(2, 2 + N):\n        height.append(int(stdin[i]))\n    height.sort()\n    result = []\n    for i in range(2 + N, len(stdin)):\n        result.append(height[i - 2 - N])\n    result.sort()\n    result.sort(key=lambda x: abs(x - height[0]))\n    result.sort(key=lambda x: abs(x - height[-1]))\n    return str(result[0] - result[-1])"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h = list(map(lambda x: x - min(h), h))\n    print(max(h) - min(h))\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    h.sort()\n    print(h[K-1] - h[K-2])\n    return"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(\" \"))\n    heights = list(map(int, stdin.split(\" \")))\n    heights.sort(reverse=True)\n    ans = heights[K - 1] - heights[0]\n    return ans\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    trees = list(map(int, stdin.split()))\n    _min, _max = min(trees), max(trees)\n    print(int(_max - _min))\n    return\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    N, K = list(map(int, inp[0].split()))\n    heights = list(map(int, inp[1].split()))\n\n    min = max = heights[0]\n\n    for i in range(1, N):\n        if heights[i] < min:\n            min = heights[i]\n        elif heights[i] > max:\n            max = heights[i]\n\n    return str(max - min)\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(int(10 ** 9 + 1) - int(10 ** 9 - int(max(map(int, stdin.split()))), 10) + int(10 ** 9 - int(min(map(int, stdin.split())), 10))))\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"\nprint(solution(input()))\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin\n    alpha = alpha.lower()\n    if alpha == alpha.upper():\n        print(alpha.upper())\n    else:\n        print(alpha.lower())\n    return alpha\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine whether the input is uppercase or lowercase.\n\n    The input is guaranteed to be one line (string)\n\n    Parameters\n    ----------\n    stdin : str\n        Input string.\n\n    Returns\n    -------\n    str\n        The output is either A or a.\n    \"\"\"\n    return \"A\" if stdin.isupper() else \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        alpha = stdin.strip()\n    except:\n        alpha = stdin\n    \n    if alpha.isupper():\n        return \"A\"\n    elif alpha.islower():\n        return \"a\"\n    else:\n        return alpha"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    alpha = stdin.upper()\n    if alpha.islower():\n        result = \"a\"\n    elif alpha.isupper():\n        result = \"A\"\n    return result"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.upper()\n    if alpha.isupper():\n        return \"A\"\n    return \"a\"\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here.\n    Return a.\n    \"\"\"\n    return stdin.lower() if stdin.isupper() else stdin.upper()"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns answer as string. Expected time complexity is O(N). \"\"\"\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.lower()\n    if alpha.isupper():\n        return alpha\n    else:\n        return alpha.upper()\n\"\"\"\n\n\"\"\"\nQuick solution\n\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alp_dict = {\n        \"a\": \"A\",\n        \"b\": \"B\",\n        \"c\": \"C\",\n        \"d\": \"D\",\n        \"e\": \"E\",\n        \"f\": \"F\",\n        \"g\": \"G\",\n        \"h\": \"H\",\n        \"i\": \"I\",\n        \"j\": \"J\",\n        \"k\": \"K\",\n        \"l\": \"L\",\n        \"m\": \"M\",\n        \"n\": \"N\",\n        \"o\": \"O\",\n        \"p\": \"P\",\n        \"q\": \"Q\",\n        \"r\": \"R\",\n        \"s\": \"S\",\n        \"t\": \"T\",\n        \"u\": \"U\",\n        \"v\": \"V\",\n        \"w\": \"W\",\n        \"x\": \"X\",\n        \"y\": \"Y\",\n        \"z\": \"Z\"\n    }\n    return alp_dict.get(stdin, \"\")"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K, S = int(K), int(S)\n    ans = 0\n    \n    if K == 0 or S == 0:\n        return str(ans)\n    for x in range(1, K + 1):\n        for y in range(1, K + 1):\n            for z in range(1, K + 1):\n                if x + y + z == S:\n                    ans += 1\n    return str(ans)\n\n'''\n\n\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    \n    count = 0\n    \n    for x in range(k):\n        for y in range(k):\n            for z in range(k):\n                if x + y + z == s:\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    d = []\n    for i in range(a):\n        for j in range(b):\n            for k in range(a):\n                if k+j+i == b:\n                    d.append(i)\n    d.sort()\n    return len(d)\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    s = int(s)\n    return str(triplet(k, s))\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.strip().split())!= 2:\n        return -1\n\n    K, S = int(stdin.strip().split()[0]), int(stdin.strip().split()[1])\n\n    return 3*(K - S) + 3*(K - S) + 3*(K - S)"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(' ')\n    K, S = int(data[0]), int(data[1])\n    data = []\n    for i in range(0, K):\n        data.append(int(input()))\n    print(data)\n    count = 0\n    for i in range(len(data)):\n        for j in range(i, len(data)):\n            for k in range(j, len(data)):\n                if data[i] + data[j] + data[k] == S:\n                    count += 1\n    return count\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *args = stdin.split()\n    k, s = int(args[0]), int(args[1])\n    count = 0\n    for i in range(k + 1):\n        for j in range(k + 1):\n            for z in range(k + 1):\n                x = i + j + z\n                if x == s:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, S = list(map(int, stdin.split()))\n    return print(sum((x + y + z) == S for x in range(K + 1)\n                     for y in range(K + 1)\n                     for z in range(K + 1) if x + y + z == S))\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, S = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(K + 1):\n        for j in range(K + 1):\n            for k in range(K + 1):\n                if i + j + k == S:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, S = list(map(int, stdin.split()))\n    X, Y, Z = 0, 0, 0\n    count = 0\n    for i in range(K):\n        if X + Y + Z == S:\n            count += 1\n        X += K\n        Y += K\n        Z += K\n    return str(count)\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    is_year = True\n    is_month = True\n    for char in stdin:\n        if not char.isdigit():\n            return \"NA\"\n    if stdin[2] < '0' or stdin[2] > '9':\n        return \"NA\"\n    if stdin[1] < '0' or stdin[1] > '9':\n        return \"NA\"\n    if int(stdin[0]) < '0' or int(stdin[0]) > '9':\n        return \"NA\"\n    if int(stdin[2]) <= int(stdin[1]):\n        return \"NA\"\n    if stdin[2] == '0' and int(stdin[1])!= 0:\n        return \"NA\"\n    if stdin[1] == '0' and int(stdin[2])!= 0:\n        return \"NA\"\n    if int(stdin[1]) <= int(stdin[0]):\n        return \"NA\"\n    if int(stdin[1]) == int(stdin[0]) and stdin[0]!= '0':\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1])!= 0 and int(stdin[2]) == 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9]) == 0 and int(stdin[10])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9]) == 0 and int(stdin[10]) == 0 and int(stdin[11])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9]) == 0 and int(stdin[10]) == 0 and int(stdin[11]) == 0 and int(stdin[12])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9]) == 0 and int(stdin[10]) == 0 and int(stdin[11]) == 0 and int(stdin[12]) == 0 and int(stdin[13])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9]) == 0 and int(stdin[10]) == 0 and int(stdin[11]) == 0 and int(stdin[12]) == 0 and int(stdin[13]) == 0 and int(stdin[14])!= 0:\n        return \"NA\"\n    if int(stdin[0]) == 0 and int(stdin[1]) == 0 and int(stdin[2]) == 0 and int(stdin[3]) == 0 and int(stdin[4]) == 0 and int(stdin[5]) == 0 and int(stdin[6]) == 0 and int(stdin[7]) == 0 and int(stdin[8]) == 0 and int(stdin[9]) == 0 and int(stdin[10]) == 0 and int(stdin[11]) == 0 and int(stdin[12]) == 0 and int(stdin[13]) == 0 and int(stdin[14]) == 0 and int(stdin["
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    seq = stdin.split()\n    if seq[-1] == 'YYMM' and seq[-2] == 'MMYY':\n        return 'MMYY'\n    elif seq[-1] == 'MMYY' and seq[-2] == 'YYMM':\n        return 'YYMM'\n    elif seq[-1] == 'YYMM' and seq[-2] == 'MMYY':\n        return 'AMBIGUOUS'\n    else:\n        return 'NA'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    year = '19'\n    month = stdin\n    if year <= '0' or month <= '0':\n        return 'NA'\n    if len(month) < 2:\n        return 'NA'\n    if len(month) == 2:\n        if int(month) <= '12':\n            return 'YYYY'\n    if len(month) == 3:\n        if int(month[0]) <= '12':\n            return 'YYYYMM'\n    return 'AMBIGUOUS'"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 4:\n        return 'NA'\n    if stdin[-2:] == '00':\n        return 'AMBIGUOUS'\n    if stdin[-4:] == '0000':\n        return 'NA'\n    if stdin[-2:] == '01':\n        return 'YYMM'\n    if stdin[-4:] == '0204':\n        return 'MMYY'"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    invalid_formats = []\n    if len(stdin) == 4:\n        if stdin[2] == '1' and stdin[3] == '2':\n            return 'YYMM'\n        elif stdin[0] == '1' and stdin[1] == '2':\n            return 'MMYY'\n        elif stdin[1] == stdin[2]:\n            invalid_formats.append('MMYY')\n        elif stdin[0] == stdin[1]:\n            invalid_formats.append('YYMM')\n        else:\n            invalid_formats.append('AMBIGUOUS')\n    if len(invalid_formats) == 0:\n        return 'NA'\n    else:\n        return invalid_formats[0]"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2:4] == s[:2]:\n        return \"YYMM\"\n    elif s[2:4] == s[4:6]:\n        return \"MMYY\"\n    else:\n        return \"AMBIGUOUS\"\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin)!= 4:\n        return \"NA\"\n    if stdin[0] == '1':\n        return \"YYMM\"\n    elif stdin[0] == '2' and stdin[1] == '0':\n        return \"MMYY\"\n    return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = stdin[0]\n    if len(stdin) == 1 and not stdin.isnumeric():\n        return stdin\n    if len(stdin) == 4:\n        if stdin[0:2] == '19' and stdin[2:4] == '05':\n            return 'YYMM'\n        elif stdin[0:2] == '02' and stdin[2:4] == '12':\n            return 'MMYY'\n        else:\n            return 'AMBIGUOUS'\n    else:\n        return 'NA'\nprint(solution(stdin))\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.split(\" \")\n    YYMM = \"NA\"\n    MMYY = \"NA\"\n    if len(digits) == 4:\n        if len(digits[0]) == 2 and len(digits[1]) == 2:\n            YYMM = \"YYMM\"\n        elif len(digits[0]) == 2 and len(digits[1]) == 1:\n            MMYY = \"MMYY\"\n        elif len(digits[0]) == 1 and len(digits[1]) == 2:\n            YYMM = \"YYMM\"\n        else:\n            YYMM = \"AMBIGUOUS\"\n    elif len(digits) == 3:\n        if len(digits[0]) == 2 and len(digits[1]) == 2 and len(digits[2]) == 2:\n            YYMM = \"YYMM\"\n        elif len(digits[0]) == 2 and len(digits[1]) == 2 and len(digits[2]) == 1:\n            MMYY = \"MMYY\"\n        elif len(digits[0]) == 2 and len(digits[1]) == 1 and len(digits[2]) == 2:\n            YYMM = \"YYMM\"\n        elif len(digits[0]) == 1 and len(digits[1]) == 2 and len(digits[2]) == 2:\n            YYMM = \"YYMM\"\n        else:\n            YYMM = \"AMBIGUOUS\"\n    elif len(digits) == 2:\n        if len(digits[0]) == 2 and len(digits[1]) == 2:\n            YYMM = \"YYMM\"\n        elif len(digits[0]) == 2 and len(digits[1]) == 1:\n            MMYY = \"MMYY\"\n        elif len(digits[0]) == 1 and len(digits[1]) == 2:\n            YYMM = \"YYMM\"\n        else:\n            YYMM = \"AMBIGUOUS\"\n    else:\n        YYMM = \"NA\"\n        MMYY = \"NA\"\n    return YYMM\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for _ in range(1, int(stdin) + 1) if is_even_odd_number(_))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    numbers = list(map(int, stdin.split(' ')))\n    res = 0\n\n    if (numbers[0] - 1) % 2 == 0:\n        res += 1\n    for i in range(1, numbers[0]):\n        if (numbers[0] - i) % 2 == 0:\n            res += 1\n    for i in range(1, numbers[1]):\n        if (numbers[1] - i) % 2 == 0:\n            res += 1\n    print(res)\n    return res\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    k = int(inputs[0])\n    count = 0\n\n    def findN(n, count):\n        if n % 2 == 0 and n > 1:\n            n = n / 2\n            if n == 1:\n                count += 1\n                return count\n            count = findN(n, count)\n        else:\n            return count\n\n    for i in range(1, k + 1):\n        count = findN(i, count)\n\n    print(count)\n    return count"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    if a % 2 == 0:\n        if b % 2 == 0:\n            ans = 0\n        else:\n            ans = 1\n    else:\n        if b % 2 == 0:\n            ans = 1\n        else:\n            ans = 0\n    return str(ans)\n\nprint(solution(input()))\n\"\"\"\nfrom math import sqrt\na, b = map(int, input().split())\nans = 0\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(choose_pair(K))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return 0"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    k = int(stdin)\n    count = 0\n    if k % 2 == 1:\n        return \"0\"\n    else:\n        for i in range(1, k + 1):\n            if i % 2 == 1:\n                if i % 3 == 1:\n                    count += 1\n        return str(count)\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k <= 0:\n        return \"Invalid Input\"\n    if k == 1:\n        return \"Invalid Input\"\n    # The first line represents the number of test cases.\n    # The next line represents the number of integers between 1 and k inclusive\n    n = int(input())\n    # The following lines represent the input in the form of a list\n    # The elements of the list are integers from 1 to k inclusive\n    a = list(map(int, input().split()))\n    # n is used to calculate the amount of ways to choose a pair\n    if k == 2:\n        # If k is 2, we can choose only one odd number from the list\n        n = n + 1\n    if k == 3:\n        # We can choose odd and even numbers from the list\n        n = n * 2\n    if k == 4:\n        # We can choose odd, even and prime numbers from the list\n        n = n * 3\n    if k > 4:\n        # We can choose odd, even, prime, prime and prime numbers from the list\n        n = n * 4\n    if k > 5:\n        # We can choose odd, even, prime, prime, prime and prime numbers from the list\n        n = n * 5\n    if k > 6:\n        # We can choose odd, even, prime, prime, prime, prime and prime numbers from the list\n        n = n * 6\n    if k > 7:\n        # We can choose odd, even, prime, prime, prime, prime, prime, prime and prime numbers from the list\n        n = n * 7\n    if k > 8:\n        # We can choose odd, even, prime, prime, prime, prime, prime, prime, prime and prime numbers from the list\n        n = n * 8\n    if k > 9:\n        # We can choose odd, even, prime, prime, prime, prime, prime, prime, prime, prime and prime numbers from the list\n        n = n * 9\n    if k > 10:\n        # We can choose odd, even, prime, prime, prime, prime, prime, prime, prime, prime, prime and prime numbers from the list\n        n = n * 10\n\n    # Using the fact that the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and k (inclusive)\n    # is equal to n\n    return str(n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B = list(map(int,stdin.split(' ')))\n    h = (B-A)*24\n    hh = h+(21 if h%24<21 else 0)\n    return str(hh % 24)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    a, b = stdin.split()\n    hour = int(a)\n    min = int(b)\n    if min > 59:\n        print((hour+1)%24)\n    else:\n        print(hour%24)\n    \n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    A, B = int(stdin[0]), int(stdin[1])\n    hour = int((A + B) % 24)\n    if A + B >= 24:\n        hour = hour + 1 if A == 23 else hour\n    return str(hour)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return str(24 * h + m)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = map(int, stdin.split())\n    res = A + (B - A) * 24\n    return str(res)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    A, B = map(int, stdin.pop(0).split())\n    currTime = A\n    while currTime < B:\n        currTime += 1\n    return str(currTime - A)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    return f\"{(A + B) // 2} {((A + B) % 2) * 2}\""
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute = map(int, stdin.split())\n    hour_after_twelve = (hour + 12) % 24\n    hour_after_twelve = hour_after_twelve if minute > 50 else hour_after_twelve + 12\n    hour_after_twelve = hour_after_twelve if minute > 50 else hour_after_twelve - 12\n    return str(hour_after_twelve)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str((int(stdin.split()[0]) + int(stdin.split()[1])) % 24)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    hh = int(A)\n    mm = int(B)\n\n    hh = int(hh) + mm // 60\n    hh = hh + mm % 60\n    hh = hh % 24\n\n    return str(hh)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, r) = stdin.split()\n    return str(int(n) + int(r) - (int(n) * int(r)) // 10)\n    \n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    k = n - 10\n    if k <= 0:\n        return str(r)\n    return str(r - 100 * (k - 2))\n    # N = int(stdin)\n    # K = int(stdin)\n    # R = int(stdin)\n    # # print(\"N is: \", N, \"\\n\", \"K is: \", K, \"\\n\", \"R is: \", R)\n    # if N < 10:\n    #     print(R)\n    # elif N <= 100:\n    #     print(R - (100 * (N - K)) if K < 10 else R)\n    # else:\n    #     print(R - (100 * (N - K)) if K < 10 else R - 100 * (N - K))"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    n = int(n)\n    r = int(r)\n    print(n - (n // 10 - r // 10) * 100)\n    return str(n - (n // 10 - r // 10) * 100)\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, N, R = stdin.split()\n    return str(int(N) * int(R) - 100 * int(N) // int(K) + int(R))"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = stdin.split(\" \")\n    n = int(stdin_data[0])\n    r = int(stdin_data[1])\n    k = 10 - n\n    if k == 0:\n        return str(r)\n    else:\n        return str(r - (k * 100))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[0])\n    r = int(stdin[1])\n    for i in range(n):\n        if i + 10 <= n:\n            if i + 10 == n:\n                if r >= 10:\n                    return str(r)\n                else:\n                    return str(r - (10 - i) * 100)\n            else:\n                if r >= 10:\n                    return str(r)\n                else:\n                    return str(r - (10 - i) * 100)\n        else:\n            return str(r)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, R = stdin.split()\n    N, R = int(N), int(R)\n    if N <= 10 and R >= 10:\n        return str(N * 100 + R)\n    else:\n        return str(N * 100 - 100 * (N - 10) + R)\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = stdin.split()\n    N = int(N)\n    R = int(R)\n\n    if N == 1:\n        return str(R)\n\n    if R < 10:\n        return str(R - 100 * (N - 1))\n\n    return str(R)\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    k = n // 10\n    for i in range(1, n+1):\n        if i <= k:\n            print(r, r - 100 * (10 - k) if i >= 10 else r)\n        else:\n            print(r - 100 * (i - k) if i >= 10 else r)\n    return ''"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = N // 10\n    if N <= 10 or N >= 100:\n        return '-1'\n    if K > N:\n        return '-1'\n    if K == N:\n        return str(R)\n    return str(R - 100 * K)\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin.strip())\n    if len(stdin)!= 2:\n        return \"\"\n    base = int(stdin[1])\n    if base > 2:\n        return \"\"\n    if base == 1:\n        return int(stdin[0])\n    if base == 0:\n        return int(stdin[0]) + 1\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [N, K] = map(int, stdin.split())\n    binary = bin(N)[2:]\n    return str(len(binary))"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin.split()[0]))[2:].count(str(stdin.split()[1])))\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take input from stdin, and print the number of digits that N has in base K.\n\n    >>> solution('11 2')\n    4\n    \"\"\"\n    # Replace this with your code\n    n, k = map(int, stdin.split())\n    return str(len(str(n)))\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin\n    total = 0\n    while True:\n        if len(binary) == 0:\n            return \"0\"\n        if binary[0] == '0':\n            break\n        else:\n            binary = binary[1:]\n            total += 1\n    return str(total)\nprint(solution(input()))\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    num_str = format(N, 'b')\n    return str(len(num_str))\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - 1\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    return str(bin(n).count('1')).count('0')"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    print(len(bin(N)[2:]))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_pages = int(stdin)\n    return '{} {}'.format(int(num_pages / 2), num_pages % 2)"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    ans = 0\n    num = 1\n    while(num <= N):\n        ans = ans + (num*2)\n        num = num + 1\n    return str(ans)\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(1)\n    Space: O(1)\n    \"\"\"\n    n = int(stdin)\n    p = 1\n    q = 1\n    r = 1\n    t = 1\n    for i in range(1, n + 1):\n        p *= 2\n        q *= 2\n        r *= 2\n        t *= 2\n    return str(max(p, q, r, t))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    return str(int(2 * n / 3))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    result = math.ceil((n-1)/2)\n    print(result)\n    return result\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    return str(n//2 + (1 if n % 2 else 0))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    while n >= 2:\n        result += 1\n        n //= 2\n    return str(result)\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    number_of_sheets = (N//2) + (1 if (N % 2) == 1 else 0)\n    return str(number_of_sheets)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = lines.pop(0)\n    n = int(n)\n    a = [int(x) for x in lines]\n    print(len(a))\n    print(math.ceil(n / 2))\n    return \" \".join([str(x) for x in a])\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B <= 16:\n        return \"Yay!\"\n    else:\n        return \":((\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    A, B = map(int, stdin.split())\n\n    return ((\"Yay!\", \" :(\")[min(A,B)!= max(A,B) + 1])\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_ok(a, b):\n        return (a + b) <= 16 and (a * b) <= 16\n\n    a, b = map(int, stdin.split())\n    return (a * b) > 0 and not is_ok(a, b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(i) for i in stdin.split())\n    if A + B <= 16:\n        return 'Yay!'\n    return ':( '\n\nassert solution('5 4') == 'Yay!'\nassert solution('1 2') == ':( '\nassert solution('5 1') == 'Yay!'\nassert solution('16 1') == 'Yay!'\nassert solution('15 1') == ':('\nassert solution('16 2') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return \"Yay!\" if int(a) + int(b) <= 16 else \":(\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an input, return a boolean.\n\n    >>> solution('5 4')\n    'Yay!'\n\n    >>> solution('5 5')\n    'Yay!'\n    \"\"\"\n    [A, B] = stdin.split()\n    return 'Yay!' if int(A) + int(B) <= 16 else ':( '\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A + B <= 16:\n        return \"Yay!\"\n    else:\n        return \":( \""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    A, B = int(stdin[0]), int(stdin[1])\n    if A + B <= 16:\n        if A * 3 + B * 2 >= 16:\n            return \"Yay!\"\n        else:\n            return \":((\"\n    else:\n        return \":((\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 16:\n        return \"Yay!\"\n    else:\n        return \":((\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return abs(int(stdin) - 753)"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    string = s[0]\n    min_diff = float('inf')\n    if len(string) < 4 or len(string) > 10:\n        return -1\n    for i in range(0, len(string) - 3):\n        first_digit = string[i]\n        second_digit = string[i + 1]\n        third_digit = string[i + 2]\n        fourth_digit = string[i + 3]\n        num = int(first_digit) * 10 + int(second_digit) * 1 + int(third_digit) * 2 + int(fourth_digit) * 3\n        diff = abs(num - 753)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nsolution(\"1234567876\")\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    S = S[2:len(S)-1]\n    x = 0\n    for i in range(len(S)):\n        if int(S[i]) < int(S[i+1]):\n            x += 1\n    return x\n\nfor i in range(10):\n    print(i)"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    list_num = []\n    for i in stdin:\n        if i.isdigit():\n            list_num.append(i)\n        else:\n            break\n    list_num.sort()\n    return min([i - 753 for i in list_num])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  if len(stdin) < 4:\n    return 'Invalid Input'\n  num = list(map(int, list(stdin)))\n  num.sort()\n  return str(num[0] - num[-1])\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin\n    lst = list(s)\n    lst = sorted(lst, key=int)\n    res = 0\n    for i in range(0, len(lst)-3):\n        res = max(res, abs(int(lst[i])-int(lst[i+3])))\n    return str(res)\ns = input()\nprint(solution(s))"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Lunlun will take out three consecutive digits from S\n    and bring them to her master\n    '''\n    result = float('inf')\n    x, n = '', 0\n    while len(stdin) > 0:\n        stdin = stdin.lstrip()\n        if len(stdin) < 3:\n            x = stdin\n            break\n        x = x + stdin[0:3]\n        stdin = stdin[3:]\n    while len(x) > 0:\n        n = int(x[0]) + int(x[1]) + int(x[2])\n        if n == 753:\n            return str(abs(result - n))\n        result = min(result, abs(n - 753))\n        x = x[3:]\n    return str(result)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1234567876')\n    34\n    >>> solution('1234')\n    0\n    >>> solution('1234567876')\n    34\n    >>> solution('1')\n    0\n    >>> solution('1234')\n    0\n    >>> solution('1234567876')\n    34\n    >>> solution('123456')\n    10\n    >>> solution('1234567')\n    9\n    >>> solution('1234567')\n    9\n    >>> solution('123456789')\n    9\n    >>> solution('12345678')\n    10\n    >>> solution('123456789')\n    9\n    >>> solution('12345678')\n    10\n    \"\"\"\n    n = len(stdin)\n    n = max(n, 4)\n    n = min(n, 10)\n    s = stdin\n    ss = []\n    for i in range(n):\n        ss.append(int(s[i]))\n    n = len(ss)\n    if n < 3:\n        return 0\n    if n == 3:\n        return abs(int(ss[0]) - int(ss[2]))\n    if n == 4:\n        return abs(int(ss[0]) - int(ss[3]))\n    if n == 5:\n        return abs(int(ss[0]) - int(ss[4]))\n    if n == 6:\n        return abs(int(ss[0]) - int(ss[5]))\n    if n == 7:\n        return abs(int(ss[0]) - int(ss[6]))\n    if n == 8:\n        return abs(int(ss[0]) - int(ss[7]))\n    if n == 9:\n        return abs(int(ss[0]) - int(ss[8]))\n    if n == 10:\n        return abs(int(ss[0]) - int(ss[9]))\n    return abs(int(ss[0]) - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1234567876')\n    '34'\n    >>> solution('123456789123456789')\n    '554612'\n    \"\"\"\n    s = stdin.strip()\n    x = int(s[6:9])\n    return str(int(s[0:3] + str(x)) - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def parse(s: str) -> tuple:\n        return tuple(map(int, s))\n    s = parse(stdin)\n    return abs(min(map(lambda x: x - 753, s)) - min(map(lambda x: x - 753, s)))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(map(int, stdin.split()[1].split()), reverse=True)\n    m = int(stdin.split()[2])\n    print(n, m)\n    print(a)\n\n    answer = 0\n    for i in range(n):\n        if answer == 0:\n            answer += m\n        else:\n            answer -= a[i]\n    print(answer)\n    return answer\n\n\nprint(solution(\"6\\n3 0 0 3 1\"))"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    min_y = min(a)\n    z = sum(i-min_y for i in a)\n    return str(min_y) +'' + str(z)"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    people = 1\n    swords = 0\n    for a_i in a:\n        if a_i == a[0]:\n            people += 1\n        else:\n            swords += 1\n            people -= 1\n    return str(people) +'' + str(swords)"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(a[0] + a[1] + a[2] - a[3] - a[4])\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = stdin.strip().split()[1]\n    a = list(map(int, a))\n    a.sort()\n    min_y = min_z = 0\n    for i in range(len(a)):\n        if i == 0:\n            min_y = min_z = a[i]\n        elif min_y > a[i]:\n            min_y = a[i]\n            z = i\n        elif min_z > a[i]:\n            min_z = a[i]\n            y = i\n    return f'{min_y} {min_z}'\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    print(f\"{min(a)} {min(a)}\")"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and print the minimum number of people who could have broken into the basement, and the number of swords each of them has taken.\"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    min_people = float('inf')\n    for i in range(n):\n        if a[i] == 0:\n            min_people = min(min_people, 1)\n        else:\n            min_people = min(min_people, a[i] / a[i - 1])\n    people = 1\n    swords = 0\n    for i in range(n):\n        people = people * (1 - a[i] / a[i - 1])\n        if a[i]!= 0:\n            swords = max(swords, a[i] / a[i - 1])\n    return f\"{int(people)} {int(swords)} \"\n\"\"\"\n2\n5 5\n2 0 2 4 4\n\n2\n7 5\n5 0 0 1 2 4\n\n6\n13 52 0 13 26 52\n\n6\n13 52 0 13 26 52\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    y = min(a)\n    z = sum(a) - y\n    return str(y) + \" \" + str(z)\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    contests, k = stdin.splitlines()\n    contests = list(map(int, contests.split()))\n    contests = sorted(contests)\n    start = 0\n    end = max(contests)\n    length = len(contests)\n\n    for i in range(1, length):\n        start = end + 1\n        end = min(start + contests[i], end)\n\n    return end\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    contests = stdin.split()\n    max_contests = max(map(int, contests))\n    days = 1\n    for i in range(len(contests)):\n        if contests[i] > days:\n            days = contests[i]\n        else:\n            max_contests = max(max_contests, days)\n            days += 1\n    return str(max_contests)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    contests, n = stdin.split(\"\\n\")\n    contests = list(map(int, contests.split()))\n    n = int(n)\n    left_contests = [c for c in contests if c <= n]\n    right_contests = [c for c in contests if c > n]\n    if len(left_contests) == 0:\n        return \"-\"\n    elif len(right_contests) == 0:\n        return str(len(left_contests))\n    else:\n        left_max_problem = max(left_contests)\n        left_contests = [c for c in left_contests if c <= left_max_problem]\n        right_max_problem = max(right_contests)\n        right_contests = [c for c in right_contests if c >= right_max_problem]\n        return str(min(len(left_contests), len(right_contests)))\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    contests = list(map(int, stdin.split()))\n    n = contests[0]\n    problems = contests[1:]\n    print(n, problems)\n    days = 0\n\n    for i in range(0, n):\n        k = problems[i]\n        if k > days:\n            days = k\n\n    return days\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    counter = 0\n    while len(a) > counter:\n        a.pop()\n        counter += 1\n    return counter\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = stdin.split()\n    n = int(n)\n    *contests, k = map(int, args)\n    print(1 + min(contests, key=lambda x: x < k) - 1)\n    return \"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    contests = int(stdin_list[0])\n    problems = list(map(int, stdin_list[1:]))\n    solutions = [1]\n    for day in range(1, contests + 1):\n        new_solutions = []\n        for j in range(len(solutions)):\n            if solutions[j] * problems[day - 1] > solutions[j] * problems[day - 2] and solutions[j] * problems[day - 1] > solutions[j] * problems[day - 3]:\n                new_solutions.append(solutions[j] * problems[day - 1])\n            if solutions[j] * problems[day - 2] > solutions[j] * problems[day - 1] and solutions[j] * problems[day - 2] > solutions[j] * problems[day - 3]:\n                new_solutions.append(solutions[j] * problems[day - 2])\n            if solutions[j] * problems[day - 3] > solutions[j] * problems[day - 1] and solutions[j] * problems[day - 3] > solutions[j] * problems[day - 2]:\n                new_solutions.append(solutions[j] * problems[day - 3])\n        if len(new_solutions) == 0:\n            return \"NO SOLUTION\"\n        solutions = new_solutions\n    return str(max(solutions))\n    \"\"\"\n    from collections import deque\n    n = int(input())\n    q = deque()\n    for _ in range(n):\n        q.append(int(input()))\n    cnt = 0\n    while len(q) > 1:\n        cnt += 1\n        if q.popleft() > q.popleft():\n            q.append(q.popleft())\n            q.append(q.popleft())\n    print(cnt)\n    \"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems_in_contests = list(map(int, stdin.readline().split()))\n    n_of_contests = len(problems_in_contests)\n    n_of_days_in_training = 1\n    while n_of_days_in_training < n:\n        max_problems = 0\n        max_problems_id = -1\n        for i in range(n_of_contests):\n            if problems_in_contests[i] > max_problems:\n                max_problems = problems_in_contests[i]\n                max_problems_id = i\n        problems_in_contests[max_problems_id] += 1\n        n_of_days_in_training += 1\n    return str(n_of_days_in_training)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    contests = [int(i) for i in stdin.split()]\n    \n    a1, a2, a3 = contests[0], contests[1], contests[2]\n    \n    length = 3\n    while length <= n:\n        if a1 <= a2 and a2 <= a3:\n            return str(length)\n        a1, a2, a3 = a2, a3, a1\n        length += 1\n    return str(length - 1)\n    "
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    if k < 3:\n        return str(k)\n    else:\n        return str(k - 1)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    root = 1\n    visited = set()\n    q = deque([root])\n    while q:\n        curr = q.popleft()\n        if curr in visited:\n            continue\n        visited.add(curr)\n        q.extend(graph[curr])\n    return len(visited) - 1\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    graph = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        a, b = (int(x) for x in stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # get the tree\n    def get_tree(g):\n        nonlocal graph\n        # find the root\n        root = next(x for x in range(len(graph)) if len(graph[x]) == 1)\n        # build the tree\n        tree = []\n        queue = [(root, 0)]\n        while queue:\n            v, dist = queue.pop(0)\n            if v not in tree:\n                tree.append(v)\n            for u in graph[v]:\n                if u not in tree:\n                    queue.append((u, dist + 1))\n\n        # get the diameter\n        return max([dist for u, dist in tree])\n\n    return str(get_tree(graph))"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    from collections import deque\n    dq = deque()\n    dq.append(0)\n    visited = set()\n    visited.add(0)\n    max_diameter = 0\n    while dq:\n        node = dq.popleft()\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                dq.append(neighbor)\n                max_diameter = max(max_diameter, len(dq))\n    return str(max_diameter)\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    diam = n\n\n    # build directed graph\n    g = {i: set() for i in range(n)}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        g[u].add(v)\n        g[v].add(u)\n\n    # while there are edges to add\n    while g:\n        # get one shortest path\n        edges_to_add = set()\n        edges_to_remove = set()\n        for v in g:\n            # remove all edges to v and their reverse edges\n            edges_to_remove.update(g[v] | {w for w in g[v] if w!= v})\n            for w in g[v]:\n                edges_to_remove.update(g[w] | {v for v in g[w] if v!= w})\n            # find the shortest path and add all edges to it\n            shortest_path = n\n            for w in g[v]:\n                if shortest_path > len(g[w]) + 1:\n                    shortest_path = len(g[w]) + 1\n            if shortest_path > 1:\n                edges_to_add.update(g[v] | {w for w in g[v] if w!= v})\n        # add new edges\n        for w in edges_to_remove:\n            g[w].update(edges_to_add)\n        # find diameter of the resulting graph\n        new_diam = max(diam, n - m) + len(edges_to_add)\n        if diam < new_diam:\n            diam = new_diam\n    return str(diam)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()[1:]))\n\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    result = 0\n    queue = deque()\n    queue.append((1, 1))\n    visited = set()\n    visited.add(1)\n\n    while queue:\n        vertex, diameter = queue.pop()\n        result = max(result, diameter)\n\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                queue.append((neighbor, diameter + 1))\n                visited.add(neighbor)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(node, parent, ans):\n        if node in graph:\n            for neigh in graph[node]:\n                if neigh!= parent:\n                    dfs(neigh, node, ans + 1)\n        ans = max(ans, ans)\n        return ans\n\n    ans = dfs(0, -1, 0)\n    return str(ans)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_root(root: int, parents: List[int]):\n        root_parent = root\n        while root_parent!= parents[root]:\n            root_parent = parents[root_parent]\n        return root_parent\n\n    n = int(stdin)\n    parents = list(range(n))\n    edges = list(map(int, stdin.split()))\n\n    for edge in edges:\n        root1 = find_root(edge[0], parents)\n        root2 = find_root(edge[1], parents)\n\n        if root1!= root2:\n            parents[root1] = root2\n\n    diameter = 0\n    for i in range(n):\n        curr_root = find_root(i, parents)\n        if curr_root!= i:\n            diameter = max(diameter, i - curr_root)\n\n    return str(diameter)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def diameter(x, y):\n        if x not in tree or y not in tree:\n            return 0\n        else:\n            return 1 + max(diameter(tree[x][1], tree[y][0]), diameter(tree[x][0], tree[y][1]))\n\n    tree = {}\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n\n    for i in range(1, n + 1):\n        tree[i] = (None, None)\n\n    for i in range(m):\n        a, b = map(int, stdin.split()[2 * i].split())\n        tree[a][0] = b\n        tree[b][1] = a\n\n    d = diameter(1, n)\n    print(d)\n    return stdin\n\n\nsolution(input())\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    n, m = int(inp[0]), int(inp[1])\n    edges = list()\n    for i in range(m):\n        edges.append([int(inp[i * 2 + 2]), int(inp[i * 2 + 3])])\n    print(edges)\n    tree = [i for i in range(n)]\n    diameter = 0\n    if m!= n - 1:\n        for edge in edges:\n            if edge[0] not in tree and edge[1] not in tree:\n                tree.append(edge[0])\n                tree.append(edge[1])\n            elif edge[0] not in tree:\n                tree.append(edge[1])\n            elif edge[1] not in tree:\n                tree.append(edge[0])\n            else:\n                pass\n            diameter = max(diameter, len(tree))\n    else:\n        diameter = len(tree)\n    return str(diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.strip().split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # print(graph)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n\n    for cur in range(n):\n        for v in graph[cur]:\n            if cur + k < v:\n                continue\n            for c in graph[cur]:\n                if cur + k < c:\n                    continue\n                dp[cur][v] = max(dp[cur][v], dp[cur][c] + dp[c][v])\n                dp[cur][v] = max(dp[cur][v], dp[v][cur] + dp[cur][c])\n    return max(dp[0])"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    a = list(map(int, stdin.split()))\n    s = list(set(a))\n    d = {}\n    for i in s:\n        d[i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] in d.keys():\n                d[a[i] + a[j]] += 1\n    return str(max(d.values()))"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    graph = []\n    for _ in range(n):\n        graph.append([])\n        for _ in range(n):\n            graph[_].append([])\n    for u, v in zip(range(1, n + 1), range(1, n + 1)):\n        graph[u - 1].append([v, weights[u - 1]])\n    graph = [[edge for edge in sorted(subgraph, key=lambda x: x[1])] for subgraph in graph]\n    while graph[-1]:\n        graph.append([])\n        for _ in range(len(graph) - 1):\n            min_weight = float('inf')\n            for edge in graph[-2]:\n                if edge[1] < min_weight:\n                    min_weight = edge[1]\n                    u, v = edge\n            graph[-2].remove(graph[-2][graph[-2].index([u, v])])\n            graph[-2].append([v, min_weight])\n    return sum([edge[1] for edge in graph[-1]])\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    parents = [-1] * n\n    distances = [-1] * n\n    weights_sums = [0] * n\n\n    def find(x):\n        if parents[x] == -1:\n            return x\n        p = find(parents[x])\n        parents[x] = p\n        return p\n\n    for i in range(1, n):\n        w = weights[i]\n        u = find(i)\n        v = find(w)\n        if u!= v:\n            parents[u] = v\n            distances[u] = distances[v] + 1\n            weights_sums[u] += weights_sums[v] + w\n    for u, v in enumerate(distances):\n        if v > k:\n            return weights_sums[u]\n    return weights_sums[0]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    in_degrees = [0] * (n + 1)\n    out_degrees = [0] * (n + 1)\n    max_weight = 0\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        in_degrees[v] += 1\n        out_degrees[u] += 1\n    queue = []\n    for i in range(1, n + 1):\n        if in_degrees[i] == 0 and out_degrees[i] == 0:\n            queue.append(i)\n    while queue:\n        v = queue.pop(0)\n        for i in range(1, n + 1):\n            if out_degrees[i] == 0:\n                if i not in queue and in_degrees[i] <= k:\n                    queue.append(i)\n                in_degrees[i] -= 1\n        for i in range(1, n + 1):\n            if in_degrees[i] == 0:\n                if i not in queue and out_degrees[i] <= k:\n                    queue.append(i)\n                out_degrees[i] -= 1\n        max_weight = max(max_weight, sum(out_degrees) + sum(in_degrees))\n    return max_weight\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  nodes = list(map(int, stdin.split()))\n  node_weights = list(map(int, stdin.split()))\n  adjacency = [[] for i in range(n)]\n  max_weight = -1\n  for i in range(n - 1):\n    u, v = map(int, stdin.split())\n    adjacency[u - 1].append(v - 1)\n    adjacency[v - 1].append(u - 1)\n  for i in range(n):\n    if len(adjacency[i]) > max_weight:\n      max_weight = len(adjacency[i])\n  for i in range(n - 1):\n    u, v = map(int, stdin.split())\n    if max_weight - adjacency[u - 1].count(v - 1) <= k:\n      return str(max(node_weights))\n  return str(max_weight)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  graph = []\n  for _ in range(n):\n    graph.append(list(map(int, stdin.split())))\n  max_path_weight = 0\n  for i in range(n):\n    for j in range(n):\n      if j == i: continue\n      weight = 0\n      for path_count in range(k + 1):\n        if i + path_count > n or j + path_count > n: continue\n        path = set()\n        path.add(i)\n        path.add(j)\n        for k in range(i, i + path_count):\n          path.add(k)\n        for l in range(j, j + path_count):\n          path.add(l)\n        for vert in range(n):\n          if vert not in path:\n            weight += graph[i][vert] + graph[l][vert]\n        if weight > max_path_weight:\n          max_path_weight = weight\n  return max_path_weight\n  \nprint(solution(input()))\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def min_dist(graph: Dict[int, List[int]], u: int, v: int, k: int) -> int:\n        if u > v:\n            u, v = v, u\n        if k == 0:\n            return 0\n        for x in graph[u]:\n            if x == v:\n                return min(min_dist(graph, x, v, k - 1), min_dist(graph, u, x, k - 1)) + 1\n        return min_dist(graph, u + 1, v, k - 1) + 1\n    if __name__ == \"__main__\":\n        n, k = list(map(int, input().split()))\n        graph = {}\n        for i in range(n):\n            graph[i] = []\n            weight = list(map(int, input().split()))\n            for j in range(n):\n                if weight[j] > 0:\n                    graph[i].append(j)\n        for i in range(n - 1):\n            u, v = list(map(int, input().split()))\n            if u not in graph:\n                graph[u] = []\n            if v not in graph:\n                graph[v] = []\n            graph[u].append(v)\n            graph[v].append(u)\n        print(min_dist(graph, 0, 0, k))\nsolution(stdin)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    weights = sorted(w)\n    if max(w) > k:\n        print(0)\n        return\n    dp = [[-1] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if dp[i][j] == -1:\n                dp[i][j] = max(weights[i] + dp[i + 1][j], weights[j] + dp[i][j - 1])\n                if dp[i][j] >= k:\n                    print(dp[i][j])\n                    return\n    print(0)\n    return\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    print(solution2(graph, n, k, a))\n    return solution2(graph, n, k, a)\n\n\ndef"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    res = []\n\n    for i in range(m):\n        d = b.index(a[i]) + 1\n        room = d % a[i]\n        res.append(room)\n        res.append(d)\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dormitories = list(map(int, stdin.split()[1]))\n    letters = list(map(int, stdin.split()[2]))\n    letters.sort()\n\n    for i in range(m):\n        if letters[i] == letters[i - 1]:\n            continue\n\n        print(letters.index(letters[i]) + 1, letters[i])\n\n    return\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    dormitories, letters = input[0], input[1]\n    roommates = list(map(int, stdin.split()[2]))\n    chosen_dormitory = 0\n    roommates_in_dormitory = roommates[chosen_dormitory]\n\n    for letter_index in range(letters):\n        letter = ord(input[letter_index + 3]) - ord(\"A\")\n        room = ord(input[letter_index + 2]) - ord(\"1\")\n        if roommates_in_dormitory == roommates[room]:\n            chosen_dormitory = room\n            roommates_in_dormitory = roommates[room]\n\n    for index in range(letters):\n        if roommates_in_dormitory == roommates[index]:\n            return f\"{index + 1} {chosen_dormitory + 1}\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = [list(map(int, stdin.split())) for i in range(n)]\n    sorted_data = sorted(data, key=lambda x: x[0])\n    sorted_data.sort(key=lambda x: x[1])\n    res = sorted_data[0][1]\n    for i in range(1, n):\n        res += 1\n        if sorted_data[i][0]!= sorted_data[i-1][1]:\n            res = sorted_data[i][1]\n    return '\\n'.join(map(str, [sorted_data[i][0] for i in range(n)])) + '\\n' + str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    dormitories = list(range(1, n + 1))\n    rooms = []\n    for i in range(1, n + 1):\n        rooms.append([])\n        for room in range(1, a[i - 1] + 1):\n            rooms[i - 1].append(room)\n    \n    for i in range(m):\n        for j in range(1, n + 1):\n            rooms[j - 1].append(b[i])\n            rooms[j - 1].sort()\n    \n    for room in rooms:\n        dormitory = dormitories[room[0] - 1]\n        for room in room[1:]:\n            dormitory = dormitory + \" \" + str(room)\n        yield dormitory"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, input().split()))\n    letters = list(map(int, input().split()))\n\n    for letter in letters:\n        room = -1\n        for i in range(1, len(rooms)):\n            if letter in range(rooms[i - 1], rooms[i] + 1):\n                room = i\n                break\n        if room!= -1:\n            print(f'{room} {letter}')\n\nsolution(stdin)\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    lines = stdin.splitlines()\n    n, m = int(lines[0]), int(lines[1])\n    dorm_rooms = {}\n    for line in lines[2:]:\n        dorm, room = line.split()\n        dorm_rooms[int(dorm)] = int(room)\n    letters = []\n    for line in lines[2:]:\n        letters.append(int(line))\n    letters.sort()\n    for i in range(m):\n        letter = letters[i]\n        for j in range(n):\n            if letters.count(j) == 1:\n                continue\n            if letters.count(j) == 2:\n                continue\n            if j in dorm_rooms.keys():\n                continue\n            if j not in letters:\n                continue\n            dorm = j\n            for k in range(n):\n                if k == j:\n                    continue\n                if k in letters:\n                    continue\n                if k in dorm_rooms.keys():\n                    continue\n                if k not in letters:\n                    continue\n                if dorm_rooms[k] == dorm_rooms[j]:\n                    continue\n                return f\"{j} {k}\"\n        letters.remove(letter)\n    return letters\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    b = list(map(int, stdin[3].split()))\n    dorm_num = 1\n    dorm_room = 1\n    for i in range(m):\n        if b[i] > a[dorm_room - 1]:\n            dorm_room += 1\n        else:\n            dorm_room = 1\n            dorm_num += 1\n            if i == m - 1:\n                continue\n            dorm_room = b[i]\n            dorm_num += 1\n    return''.join(f'{dorm_num} {dorm_room}' for dorm_room in range(1, a[dorm_num - 1] + 1))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    res = \"\"\n    for i in range(m):\n        res += str(i + 1)\n        if a[i] - 1 == i:\n            res += \" \" + str(b[i])\n        else:\n            res += \" \" + str(a[i] - 1 + 1)\n            res += \" \" + str(b[i])\n        res += \"\\n\"\n    return res\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()[1:]))\n    #d = list(map(int, stdin.split()[1:]))\n    rooms = {}\n    for i in range(1, n + 1):\n        rooms[i] = []\n        for j in range(1, d[i - 1] + 1):\n            rooms[i].append(j)\n    letters = []\n    for i in range(m):\n        letters.append(i + 1)\n    letters.sort()\n    #print(letters)\n    res = []\n    for l in letters:\n        res.append(1)\n        res.append(rooms[1][l - 1])\n    return '\\n'.join(map(str, res))\n\n\n\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    a, b, c, d = int(numbers[0]), int(numbers[1]), int(numbers[2]), int(numbers[3])\n    a, b, c, d = sorted([a, b, c, d])\n    a, b, c, d = sorted([a, b, c, d])\n    print(a, b, c)\n    print(a, b, c)\n    return stdin"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every solution, write a single line in the format $a+b+c=x$, where $a, b, c$ are the three integers in the given order, and $x$ is the sum of the first three numbers.\n    \"\"\"\n    x = list(map(int, stdin.split()))\n    c = []\n    for i in range(len(x)-1):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == x[len(x)-1]:\n                c.append([x[i], x[j], x[len(x)-1]])\n    if len(c) == 0:\n        return \"No\"\n    return c[0]\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    d = (a + b + c + d) / 4\n    ans = sorted(list(set([a, b, c, d])))\n    for e in ans:\n        if a == e:\n            continue\n        elif b == e:\n            continue\n        elif c == e:\n            continue\n        else:\n            return str(e) + \" \" + str(e) + \" \" + str(e) + \" \" + str(e)\n    return str(ans[0]) + \" \" + str(ans[1]) + \" \" + str(ans[2]) + \" \" + str(ans[3])\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [*map(int, stdin.split())]\n    for a in range(numbers[0] + 1):\n        for b in range(numbers[0] + 1):\n            for c in range(numbers[0] + 1):\n                if a + b + c == numbers[1]:\n                    return f\"{a} {b} {c}\"\nprint(solution(input()))\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    numbers = list(map(int, numbers))\n    #print(numbers)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                #print(numbers[i], numbers[j], numbers[k])\n                if numbers[i] + numbers[j] + numbers[k] == 2020:\n                    return str(numbers[i]) + \" \" + str(numbers[j]) + \" \" + str(numbers[k])\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A,B,C,D= map(int,stdin.split())\n    if A==B==C==D:\n        return str(C)+str(D)+str(B)+str(A)\n    else:\n        if A==B or A==C or A==D:\n            return str(A)+str(D)+str(B)+str(C)\n        elif A==C or A==B or A==D:\n            return str(A)+str(C)+str(B)+str(D)\n        else:\n            return str(A)+str(C)+str(B)+str(D)\n\nsolution(input())\n\nInput\n6 5 4\n\nOutput\n2 1 3\n\nInput\n201 101 101 200\n\nOutput\n1 100 100\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    nums = [int(n) for n in stdin]\n    nums.sort()\n    a = nums[0]\n    b = nums[1]\n    c = nums[2]\n    d = nums[3]\n    result = str(a + b) + str(a + c) + str(a + d) + str(b + c) + str(b + d) + str(c + d)\n    print(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b == c and a + c == b + d and a + b + c == d:\n        return f'{a} {b} {c}'\n    if a + b == c + d and a + c == b + d and a + b + c == d:\n        return f'{a} {b} {c}'\n    if a + b == c and a + d == b + d and a + b + c == d:\n        return f'{a} {b} {d}'\n    if a + b == c + d and a + c == b + d and a + b + c == d:\n        return f'{d} {a} {b}'\n    if a + b + c == d and a + c + d == b + d and a + b + c == d:\n        return f'{a} {b} {c}'\n    if a + b + c == d and a + d + b == c + d and a + b + c == d:\n        return f'{d} {a} {c}'\n    if a + b + c == d and a + d + b == c + d and a + b + c == d:\n        return f'{c} {a} {b}'\n    if a + b + c + d == e and a + e + b + c + d == e and a + e + b + c + d == e:\n        return f'{d} {c} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {c} {b} {a}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {a} {b} {d}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {b} {a}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {c} {b} {a}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{d} {a} {b} {c}'\n    if a + b + c + d == e and a + e + b + d + c == e and a + e + b + c + d == e:\n        return f'{c} {d} {a} {b}'\n    if a + b + c + d == e and a + e +"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    numbers = [int(x) for x in numbers]\n    print(numbers)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                for z in range(k + 1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] == numbers[z]:\n                        print(numbers[i], numbers[j], numbers[k], numbers[z])\n\nsolution(input())\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split()\n    numbers = list(map(int, first_line[1:]))\n    a, b, c, d = numbers\n    if (a + b + c + d) % 2 == 0:\n        return str(a + b + c + d)\n    else:\n        for i in range(3):\n            if numbers[i]!= numbers[i + 1]:\n                if numbers[i] == numbers[i + 2]:\n                    return str(numbers[i]) + str(numbers[i + 1]) + str(numbers[i + 2])\n                elif numbers[i] == numbers[i + 1] + numbers[i + 2]:\n                    return str(numbers[i]) + str(numbers[i + 1]) + str(numbers[i + 2])\n        return str(numbers[0]) + str(numbers[1]) + str(numbers[2])\n\n\ndef"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lamps = stdin.split('\\n')\n    start = []\n    for i in lamps:\n        start.append(int(i[0]))\n    start.sort()\n    lamps.sort()\n    if start == lamps:\n        return '{0}'.format(0)\n    lamps_l = []\n    for i in range(len(lamps)-1):\n        lamps_l.append(lamps[i+1] - lamps[i])\n    lamps_l.sort()\n    lamps_l = ''.join(lamps_l)\n    lamps_l = int(lamps_l)\n    s = ''\n    for i in range(lamps_l):\n        for j in range(start[i]):\n            s += 'R'\n        for j in range(start[i+1] - start[i] - 1):\n            s += 'G'\n        for j in range(start[i+1] - start[i] - 1):\n            s += 'B'\n    return '{0}\\n{1}'.format(len(s), s)\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    colors = stdin.split()\n    colors = [color for color in colors if color!= '\\n']\n    colors = sorted(colors)\n    garlands = []\n    colors = list(set(colors))\n    for i in range(len(colors)):\n        garlands.append(colors[i] * (i+1))\n    if len(colors) == 0:\n        return ''\n    garlands = list(set(garlands))\n    garlands = sorted(garlands)\n    recolored_garlands = 0\n    new_garland = garlands[0]\n    garland_number = 0\n    while garlands!= []:\n        new_garland = garlands.pop()\n        if new_garland == new_garland[::-1]:\n            recolored_garlands += 1\n            garland_number = garlands.index(new_garland)\n            garlands = garlands[:garland_number] + garlands[garland_number+1:]\n        else:\n            recolored_garlands += 1\n            new_garland = new_garland[::-1]\n            garlands.insert(garland_number, new_garland)\n            garlands.pop()\n    return str(recolored_garlands)"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = list(s)\n    lst = []\n    for i in range(n):\n        if s[i] == 'R':\n            lst.append(i)\n        elif s[i] == 'G':\n            lst.append(i)\n        elif s[i] == 'B':\n            lst.append(i)\n    lst.sort()\n    print(lst)\n    print(lst[0], lst[1])\n    print(lst[2], lst[3])\n    print(lst[4], lst[5])\n    if lst[0] - lst[1] == 0 and lst[2] - lst[3] == 0 and lst[4] - lst[5] == 0:\n        return 0\n    if lst[0] - lst[1] == 0 and lst[2] - lst[3]!= 0 and lst[4] - lst[5] == 0:\n        return 1\n    if lst[0] - lst[1]!= 0 and lst[2] - lst[3] == 0 and lst[4] - lst[5] == 0:\n        return 2\n    if lst[0] - lst[1]!= 0 and lst[2] - lst[3] == 0 and lst[4] - lst[5]!= 0:\n        return 3\n    if lst[0] - lst[1] == 0 and lst[2] - lst[3] == 0 and lst[4] - lst[5]!= 0:\n        return 4\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    counts = collections.defaultdict(int)\n    for i in range(n):\n        if s[i] not in counts:\n            counts[s[i]] = 0\n        counts[s[i]] += 1\n    c = 0\n    for key, value in counts.items():\n        if value == 1:\n            c += 1\n    if c > n // 2:\n        c = c - n\n    return str(c)"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin.split(\"\\n\")[1]\n    garland_colors = set()\n    garland_colors.add(garland[0])\n    for i in range(len(garland)-1):\n        if garland[i+1] in garland_colors:\n            garland_colors.add(garland[i])\n            break\n    recoloring = garland[i+1]\n    for i in range(len(garland)-1):\n        if garland[i]!= recoloring:\n            return -1\n    colors = set(recoloring)\n    i = 1\n    while colors:\n        if len(colors) == 1:\n            return i\n        new_colors = {i}\n        for j in range(i, len(garland)):\n            new_colors.add(garland[j])\n            colors -= new_colors\n        i += 1\n        colors = new_colors\n    return -1"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = set(s)\n    if len(colors) == 1:\n        return 0\n    if n == 1:\n        return len(colors)\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        if s[i] == 'R':\n            matrix[i][i] = 1\n        elif s[i] == 'G':\n            matrix[i][i] = 2\n        else:\n            matrix[i][i] = 3\n    for k in range(2, n):\n        for i in range(n - k):\n            j = i + k\n            if matrix[i][i]!= 0:\n                matrix[i][j] = matrix[i][i]\n            else:\n                if matrix[i][i]!= matrix[i + 1][i + 1]:\n                    matrix[i][j] = matrix[i][i] + 1\n                else:\n                    matrix[i][j] = 2\n    for i in range(n):\n        if matrix[i][i] == 2:\n            matrix[i][i] = 3\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 0:\n                if matrix[i][j] == matrix[i + 1][j] + 1:\n                    ans = max(ans, matrix[i][j])\n    return ans\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    lamps = list(s)\n    n_red, n_green, n_blue = 0, 0, 0\n    for i in range(n):\n        if lamps[i] == 'R':\n            n_red += 1\n        elif lamps[i] == 'G':\n            n_green += 1\n        else:\n            n_blue += 1\n    lamps_string = ''\n    n_s = n_red + n_green + n_blue\n    lamps_string += 'RRRRRR' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBBBBB' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'RRGBRB' * n_green\n    lamps_string += 'RBBBGBR' * n_blue\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBBBBB' * n_blue\n    lamps_string += 'RBBBBBB' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBBBBB' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'BBBBBB' * n_blue\n    lamps_string += 'BBBGBRR' * n_red\n    lamps_string += 'BBBBBB' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string += 'RRRRGG' * n_red\n    lamps_string += 'GGGGRRR' * n_green\n    lamps_string += 'BBBGBRR' * n_blue\n    lamps_string +="
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # make garland from given string\n    garland = []\n    for i in range(len(stdin)):\n        if stdin[i] == 'B':\n            garland.append((i, 'B'))\n        elif stdin[i] == 'G':\n            garland.append((i, 'G'))\n        elif stdin[i] == 'R':\n            garland.append((i, 'R'))\n        else:\n            print('Nonsense')\n            return\n    # count number of colors in garland\n    colors = set()\n    for i in garland:\n        colors.add(i[1])\n    count_of_colors = len(colors)\n\n    # try to recolor with every possible color\n    if count_of_colors == 2:\n        for i in garland:\n            for j in garland:\n                if i!= j and abs(i[0] - j[0]) == 1:\n                    if i[1] == j[1]:\n                        return '1'\n        return '0'\n    else:\n        min_recolors = count_of_colors\n        for i in garland:\n            for j in garland:\n                if i!= j and abs(i[0] - j[0]) == 1:\n                    if i[1]!= j[1]:\n                        garland_2 = list(garland)\n                        garland_2.remove(i)\n                        garland_2.remove(j)\n                        colors = set()\n                        for i in garland_2:\n                            colors.add(i[1])\n                        count_of_colors = len(colors)\n                        if count_of_colors == 2:\n                            for k in garland_2:\n                                for l in garland_2:\n                                    if k!= l and abs(k[0] - l[0]) == 1:\n                                        if k[1] == l[1]:\n                                            return str(min_recolors)\n                        else:\n                            min_recolors = min(min_recolors, count_of_colors)\n        return str(min_recolors)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(garland):\n        for i in range(1, len(garland)):\n            if garland[i] == garland[i - 1] and garland[i]!= garland[i - 1]:\n                return False\n        return True\n\n    count = 0\n    garlands = []\n    garland = stdin.split()\n    garlands.append(garland[1])\n    while True:\n        if garlands[-1] == garlands[0]:\n            count += 1\n            garlands.pop()\n        else:\n            garlands.append(garland[0])\n            garland = stdin.split()\n            garlands.append(garland[0])\n        if len(garlands) == 1:\n            break\n\n    result = \" \".join(garlands)\n\n    return f\"{count} {result}\"\n\n\ndef"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return '{} {}'.format(stdin[0], stdin[1])"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build a subsequence of the array, that forms an increasing sequence of consecutive integers.\n    \"\"\"\n    n = int(stdin)\n    # If the array has less than 4 elements it is impossible to make the subsequence\n    if n < 4:\n        return -1\n    a = list(map(int, stdin.split()))\n    # Keep all starting indices, that is, up to the current index\n    indices = set()\n    # Keep all indices for the subsequence, that are still valid\n    s_indices = set()\n    # The length of the subsequence\n    length = 0\n    for i in range(n):\n        # Keep the indices, that are still valid\n        s_indices.add(i)\n        # If it is the first element in the subsequence\n        if i == 0:\n            indices.add(i)\n        # If the sequence is still longer than the subsequence length\n        if length < i:\n            # Update the length of the subsequence\n            length = i\n        # If the sequence is longer than the subsequence\n        elif length > i:\n            # If this subsequence contains no elements\n            if not s_indices:\n                return -1\n            # If there is a previous element in the subsequence\n            if i in s_indices:\n                # Remove the previous element\n                s_indices.remove(i - 1)\n            # If the current element has been used in the current subsequence\n            if i in indices:\n                # Remove the current element\n                indices.remove(i)\n            # If there are still valid indices in the current subsequence\n            if s_indices:\n                # Add the element at the beginning of the subsequence\n                indices.add(s_indices.pop())\n    # If all indices are valid, we have a subsequence\n    if len(indices) == n:\n        # Return the length of the subsequence\n        return length\n    # If not, return -1\n    return -1\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    tmp = 0\n    prev = 0\n    i = 0\n    count = 0\n    for j in range(n):\n        if arr[j] > tmp:\n            tmp = arr[j]\n        else:\n            if prev == tmp:\n                count += 1\n            else:\n                count = 1\n            tmp = arr[j]\n        if count > i:\n            i = count\n    if count == i:\n        return i\n    else:\n        return i + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    s = []\n    k = 0\n    for i in range(n):\n        s.append(arr[i])\n        while k > 0 and s[k] > s[i]:\n            s.pop(k)\n            k -= 1\n        k += 1\n    return str(k) + \"\\n\" +''.join(map(str, s))\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin:\n    n integer\n    a1 a2... an integer\n    '''\n    a = list(map(int, stdin.split()))\n    ans = 1\n    if not a:\n        return 0\n    else:\n        while a:\n            c = []\n            for i in range(len(a)):\n                c.append(a.pop(0))\n                if len(c) > ans:\n                    ans = len(c)\n            a = c\n        return ans\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    \n    dp = [1] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    \n    return str(max(dp))"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res = []\n    counter = 0\n    max = 0\n    for i in range(n):\n        if a[i] >= max:\n            max = a[i]\n            counter = 1\n            res.append(i)\n        elif a[i] == max and counter >= 2:\n            res.append(i)\n            counter = 1\n            max = a[i]\n        else:\n            counter += 1\n    return str(len(res)) + \" \" + str(*res)\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    k = 0\n    start = 0\n    end = 0\n    for i in range(len(a)):\n        if i > start and a[i] > a[start]:\n            k = i\n            start = i\n            if end == 0:\n                end = i\n    return str(k) +'' + str(a[k] + 1) +'' + str(a[k + 1] + 1) +'' + str(a[k + 2] + 1) +'' + str(\n        a[k + 3] + 1) +'' + str(a[k + 4] + 1) +'' + str(a[k + 5] + 1) +'' + str(a[k + 6] + 1) +'' + str(\n        a[k + 7] + 1)\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n\n    def _solution(nums: list) -> tuple:\n        n_ = len(nums)\n        if n_ == 1:\n            return 1, [1]\n\n        res = 0\n        k = 1\n        cur_nums = nums[:k]\n        cur_min = min(cur_nums)\n        if cur_min!= cur_nums[0]:\n            k += 1\n            cur_nums = nums[:k]\n\n        while k <= n_:\n            next_nums = nums[k:]\n            next_min = min(next_nums)\n            if cur_min >= next_min:\n                res += 1\n                k += 1\n                cur_nums = nums[:k]\n                cur_min = min(cur_nums)\n            else:\n                k += 1\n                cur_nums = next_nums\n\n        return res, [i + 1 for i in range(n_) if nums[i] == cur_min]\n\n    res = min(_solution(nums)[0] for _ in range(1, n))\n    return str(res)\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(map(int, stdin.split()[1]))\n    k = 1\n    i = 0\n    while k < n and i < len(s):\n        if s[i] >= s[i + 1]:\n            k = i + 1\n        i += 1\n    if i == len(s):\n        return str(i)\n    return str(i - 1)\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_subsequences(arr, idx, res):\n        if idx == len(arr):\n            nonlocal maximum\n            if maximum == len(res):\n                maximum = len(res)\n                max_res.append(res)\n            return\n        if len(res) < maximum:\n            if arr[idx] > res[-1] + 1:\n                find_subsequences(arr, idx + 1, res + [arr[idx]])\n            find_subsequences(arr, idx + 1, res)\n        else:\n            if arr[idx] > res[-1] + 1:\n                find_subsequences(arr, idx + 1, res + [arr[idx]])\n\n    maximum = 0\n    max_res = []\n    a = [int(i) for i in stdin.split()]\n    find_subsequences(a, 0, [])\n    return str(len(max_res)) + '\\n' +''.join([str(i) for i in max_res])\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if 9 % int(stdin) == 0 else 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    if int(A) % 2 == 1 and int(B) % 2 == 1 and int(A) * int(B) * 3 == int(C):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a * b) % 2 == 1:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if (a * b * (a + b + 1) // 2) % 3 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"Yes\" if A * B * (A+B) % 2 else \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 2\n   ... 3\n   ... ''')\n    'Yes'\n    >>> solution('''3 4\n   ... 2\n   ... 4\n   ... ''')\n    'No'\n    \"\"\"\n    a, b = map(int, stdin.strip().split())\n    return \"Yes\" if (a * b * (a + b + 1)) % 2!= 0 else \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if isOdd(stdin) else \"No\")\n\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    if A == 1 and (B == 1 or B == 3) and (3 * int(A) * int(B)) % 2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a*b)*(a+b)*(a-b) % 2 == 1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split(\" \")))\n    x, y = line\n    return str(x * y // 2)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f1(x,y):\n        return int(x)//2 if int(x)%2 == 0 else int(x)//2 + 1\n    \n    x,y = list(map(int,stdin.split()))\n    \n    return str(f1(x,y))"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    a = x//2\n    b = 2*y//3\n    c = (x + y) // 2\n    if a == b and c == x + y:\n        print(x + y)\n    else:\n        print(c)\nsolution(input())\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x == y == 0:\n        return \"0\"\n    if y % 2 == 0:\n        return f\"{x * 0.5:.1f}\"\n    return f\"{x * 0.5 + (x - y):.1f}\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x,y = stdin.split()\n    print(int(x)*int(y)//2 if int(y)%2==0 else int(x)*int(y))\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = int(stdin[0])\n    y = int(stdin[1])\n    if y % 2!= 0:\n        y = y - 1\n    return x * y // 2\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(\" \")[0])\n    y = int(stdin.split(\" \")[1])\n    return f\"{int(x / 2):.0f}\" if x % 2 == 0 else f\"{x * y / 2:.0f}\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    x = int(x)\n    y = int(y)\n\n    if x % 2!= 0:\n        x = int(x / 2)\n    if y % 2!= 0:\n        y = int(y / 2)\n\n    return str(x + y)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if (Y % 2 == 0):\n        print(X // 2)\n    else:\n        print(X // 2 + X // 2)\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mul = 1\n    for i in range(1, n+1):\n        mul *= i\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i < j and j < k and i < k:\n                    ans += mul // (i * j * k)\n    return str(ans)"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    password_length = number\n    password = []\n\n    # create password array\n    for i in range(0, number):\n        password.append('0')\n\n    for i in range(1, number):\n        password[i] = str(i)\n\n    print(password)\n\n    # pass 1\n    for i in range(2, number):\n        password_length = number - i\n        print(\"pass \" + str(i))\n        for j in range(0, password_length):\n            pass_length = i - 1\n            password[j] = str(j)\n            print(\"[\", end=\"\")\n            print(password, end=\"\")\n            print(\"]\")\n            # pass 2\n            for k in range(pass_length):\n                print(\"i: \" + str(i))\n                print(\"j: \" + str(j))\n                print(\"k: \" + str(k))\n                if k < password_length - 1:\n                    password[j] = password[j] + str(j + 1)\n                    print(\"password[j] + str(j+1) + j: \" + str(password[j]))\n                else:\n                    password[j] = password[j] + str(0)\n                    print(\"password[j] + str(0) + j: \" + str(password[j]))\n                print(\"[\", end=\"\")\n                print(password, end=\"\")\n                print(\"]\")\n                # pass 3\n            if j < password_length - 1:\n                password[j] = str(j + 1) + password[j]\n                print(\"password[j + 1] + password[j]: \" + str(password[j]))\n            else:\n                password[j] = str(0) + password[j]\n                print(\"password[j] + str(0): \" + str(password[j]))\n            print(\"[\", end=\"\")\n            print(password, end=\"\")\n            print(\"]\")\n            print(\"pass_length: \" + str(pass_length))\n            print(\"\")\n    return password\n\nsolution(\"2\")"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    count: int = 0\n\n    for i in range(1, n + 1):\n        for j in range(10):\n            if j in range(1, n + 1):\n                if j == i:\n                    count += 1\n                else:\n                    break\n    return str(count)\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len([\n        '{}{}{}'.format(i, j, k)\n        for i in range(1, n + 1)\n        for j in range(1, n + 1)\n        for k in range(1, n + 1)\n    ])"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    N = int(stdin)\n    if N <= 0 or N > 9:\n        raise ValueError('N must be an integer between 1 and 9 inclusive.')\n\n    digits = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    answers = {'1111', '1122', '1221', '1222', '2112', '2211', '2221', '2222', '21112', '22112', '22211', '22222'}\n\n    return len(answers)\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(password: str) -> bool:\n        if password.isnumeric() and 1 <= int(password) <= int(stdin.strip()):\n            return True\n        return False\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    for password in map(lambda x: int(x), stdin.split()):\n        if is_valid(alphabet[:password]):\n            yield password\n        if is_valid(alphabet[password:]):\n            yield password\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # ---Write your code here---\n    # initialise N\n    N = int(stdin)\n    # initialise empty set\n    possibilities = set()\n    # 1 to N\n    for i in range(1, N+1):\n        # set to true\n        true = True\n        # 2 to N\n        for j in range(2, N+1):\n            # set to false\n            false = False\n            # add characters to set\n            for k in range(1, N+1):\n                # if the i-th digit is k\n                if i%10 == k:\n                    # if the j-th digit is k\n                    if j%10 == k:\n                        # if the k-th digit is k\n                        if k%10 == k:\n                            # if the j-th digit is k and false\n                            if false:\n                                # if the i-th digit is k and false\n                                if false:\n                                    # if the k-th digit is k and false\n                                    if false:\n                                        # add the i-th digit to the set\n                                        possibilities.add(i)\n                                        # break\n                                        break\n                                    else:\n                                        # break\n                                        break\n                                else:\n                                    # break\n                                    break\n                            else:\n                                # add the i-th digit to the set\n                                possibilities.add(i)\n                                # break\n                                break\n                        else:\n                            # break\n                            break\n                    else:\n                        # break\n                        break\n                else:\n                    # break\n                    break\n            else:\n                # break\n                break\n        else:\n            # break\n            break\n    print(len(possibilities))"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    results = []\n    for i in range(1, n+1):\n        if i < 10:\n            results.append(i)\n        else:\n            for digit in range(1, n+1):\n                if digit < 10:\n                    results.append(i*digit)\n                else:\n                    results.append(i*10 + digit)\n    print(len(results))\n    return results\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    password = []\n    for i in range(1, N+1):\n        password.append(str(i) * i)\n    password_total = len(password)\n    for i in range(len(password)):\n        for j in range(len(password)):\n            if len(password[i]) == len(password[j]):\n                password[i] = password[i] + password[j]\n                password_total = password_total + 1\n    return str(password_total)\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    return 'YES' if int(stdin[0]) >= 7 else 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '5' else 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE GOES HERE"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 1 and X <= 9:\n        if X >= 7:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'wrong'"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # x is an integer\n    # x is between 1 and 9\n    if x == 1:\n        print(\"YES\")\n    elif x == 2:\n        print(\"YES\")\n    elif x == 3:\n        print(\"YES\")\n    elif x == 4:\n        print(\"YES\")\n    elif x == 5:\n        print(\"YES\")\n    elif x == 6:\n        print(\"YES\")\n    elif x == 7:\n        print(\"YES\")\n    elif x == 8:\n        print(\"YES\")\n    elif x == 9:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Step 1. Inputs\n    >>> stdin = \"\"\"4\n    # \"\"\"\n    # >>> stdin = '10'\n    # >>> stdin = '8'\n    # >>> stdin = '12'\n    #\n    # # Step 2. Output\n    # #\n    # >>> solution(stdin)\n    # 'NO'\n    '''\n    x = int(stdin)\n    if (x % 7 == 0) and (x % 5 == 0) and (x % 3 == 0):\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a positive integer,, print YES if it's a multiple of, or print NO otherwise.\n\n    Note:.\n\n    >>> solution('''\n   ... 4\n   ... '''.strip())\n    YES\n\n    >>> solution('''\n   ... 5\n   ... '''.strip())\n    NO\n\n    \"\"\"\n    x = int(stdin)\n    if x % 5 == 0 and x % 7 == 0 and x % 3 == 0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 0:\n        return 'YES'\n    elif X == 1:\n        return 'NO'\n    else:\n        return \"YES\" if ((X//5) - (X//3)) % 2 == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    print(\"YES\" if x >= 7 else \"NO\")\n    return \"YES\" if x >= 7 else \"NO\""
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'ABC'[N - 1:3]"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    round = 'ABC' * N\n    return round[:3]\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using input\n    \"\"\"\n    N = int(stdin)\n    label = \"ABC\"\n    for i in range(1, N):\n        label = label + \"001\"\n    return label[:3]\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the first three characters of the label of the N-th round of AtCoder Beginner Contest.\n    >>> solution('')\n    'ABC'\n    >>> solution('999')\n    'ABC'\n    >>> solution('123')\n    '123'\n    >>> solution('12345')\n    '123'\n    \"\"\"\n    n = int(stdin)\n    if n < 1 or n > 1998:\n        raise ValueError('Input error')\n    if n < 1000:\n        return 'ABC'\n    if n < 1001:\n        return 'ABC'\n    if n < 1002:\n        return 'ABC'\n    if n < 1003:\n        return 'ABC'\n    if n < 1004:\n        return 'ABC'\n    if n < 1005:\n        return 'ABC'\n    if n < 1006:\n        return 'ABC'\n    if n < 1007:\n        return 'ABC'\n    if n < 1008:\n        return 'ABC'\n    if n < 1009:\n        return 'ABC'\n    if n < 1010:\n        return 'ABC'\n    if n < 1011:\n        return 'ABC'\n    if n < 1012:\n        return 'ABC'\n    if n < 1013:\n        return 'ABC'\n    if n < 1014:\n        return 'ABC'\n    if n < 1015:\n        return 'ABC'\n    if n < 1016:\n        return 'ABC'\n    if n < 1017:\n        return 'ABC'\n    if n < 1018:\n        return 'ABC'\n    if n < 1019:\n        return 'ABC'\n    if n < 1020:\n        return 'ABC'\n    if n < 1021:\n        return 'ABC'\n    if n < 1022:\n        return 'ABC'\n    if n < 1023:\n        return 'ABC'\n    if n < 1024:\n        return 'ABC'\n    if n < 1025:\n        return 'ABC'\n    if n < 1026:\n        return 'ABC'\n    if n < 1027:\n        return 'ABC'\n    if n < 1028:\n        return 'ABC'\n    if n < 1029:\n        return 'ABC'\n    if n < 1030:\n        return 'ABC'\n    if n < 1031:\n        return 'ABC'\n    if n < 1032:\n        return 'ABC'\n    if n < 1033:\n        return 'ABC'\n    if n < 1034:\n        return 'ABC'\n    if n < 1035:\n        return 'ABC'\n    if n < 1036:\n        return 'ABC'\n    if n < 1037:\n        return 'ABC'\n    if n < 1038:\n        return 'ABC'\n    if n < 1039:\n        return 'ABC'\n    if n < 1040:\n        return 'ABC'\n    if n < 1041:\n        return 'ABC'\n    if n < 1042:\n        return 'ABC'\n    if n < 1043:\n        return 'ABC'\n    if n < 1044:\n        return 'ABC'\n    if n < 1045:\n        return 'ABC'\n    if n < 1046:\n        return 'ABC'\n    if n < 1047:\n        return 'ABC'\n    if n < 1048:\n        return 'ABC'\n    if n < 1049:\n        return 'ABC'\n    if n < 1050:\n        return 'ABC'\n    if n < 1051:\n        return 'ABC'\n    if n < 1052:\n        return 'ABC'\n    if n < 1053:\n        return 'ABC'\n    if n < 1054:\n        return 'ABC'\n    if n < 1055:\n        return 'ABC'\n    if n < 1056:\n        return 'ABC'\n    if n < 1057:\n        return 'ABC'\n    if n < 1058:\n        return 'ABC'\n    if n < 1059:\n        return 'ABC'\n    if n < 1060:\n        return 'ABC'\n    if n < 1061:\n        return 'ABC'\n    if n < 1062:\n        return 'ABC'\n    if n < 1063:\n        return 'ABC'\n    if n < 1064:\n        return 'ABC'\n    if n < 1065:\n        return 'ABC'\n    if n < 1066:\n        return 'ABC'\n    if n < 1067:\n        return 'ABC'\n    if n < 1068:\n        return 'ABC'\n    if n < 1069:\n        return 'ABC'\n    if n < 1070:\n        return 'ABC'\n    if n < 1071:\n        return 'ABC'\n    if n < 1072:\n        return 'ABC'\n    if n < 1073:\n        return 'ABC'\n    if n < 1074:\n        return 'ABC'\n    if n < 1075:\n        return 'ABC'\n    if n < 1076:\n        return 'ABC'\n    if n < 1077:\n        return 'ABC'\n    if n < 1078:\n        return 'ABC'\n    if n < 1079:\n        return 'ABC'\n    if n < 1080:\n        return 'ABC'\n    if n < 1081:\n        return 'ABC'\n    if n < 1082:\n        return 'ABC'\n    if n < 1083:\n        return 'ABC'\n    if n < 1084:\n        return 'ABC'\n    if n < 1085:\n        return 'ABC'\n    if n < 1086:\n        return 'ABC'\n    if n < 1087:\n        return 'ABC'\n    if n < 1088:\n        return 'ABC'\n    if n < 1089:\n        return 'ABC'\n    if n < 1090:\n        return 'ABC'\n    if n < 1091:\n        return 'ABC'\n    if n < 1092:\n        return 'ABC'\n    if n < 1093:\n        return 'ABC'\n    if n < 1094:\n        return 'ABC'\n    if n < 1095:\n        return 'ABC'\n    if n < 1096:\n        return 'ABC'\n    if n < 1097:\n        return 'ABC'\n    if n < 1098:\n        return 'ABC'\n    if n < 1099:\n        return 'ABC'\n    if n < 1100:\n        return 'ABC'\n    if n < 1101:\n        return 'ABC'\n    if n < 1102:\n        return 'ABC'\n    if n < 1103:\n        return 'ABC'\n    if n < 1104:\n        return 'ABC'\n    if n < 1105:\n        return 'ABC'\n    if n < 1106:\n        return 'ABC'\n    if n < 1107:\n        return 'ABC'\n    if n < 1108:\n        return 'ABC'\n    if n < 1109:\n        return 'ABC'\n    if n < 1110:\n        return 'ABC'\n    if n < 1111:\n        return 'ABC'\n    if n < 1112:\n        return 'ABC'\n    if n < 1113:\n        return 'ABC'\n    if n < 1114:\n        return 'ABC'\n    if n < 1115:\n        return 'ABC'\n    if n < 1116:\n        return 'ABC'\n    if n < 1117:\n        return 'ABC'\n    if n < 1118:\n        return 'ABC'\n    if n < 1119:\n        return 'ABC'\n    if n < 1120:\n        return 'ABC'\n    "
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ''.join(chr(ord('A') + n % 10 - 1) * (n // 10 + 1))\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while N!= i:\n        if N < 100:\n            if N < 10:\n                i += 1\n            elif N < 100:\n                if N >= 90:\n                    i += 9\n        elif N >= 100:\n            if N < 1000:\n                if N >= 900:\n                    i += 8\n            elif N < 1000:\n                if N >= 900:\n                    if N >= 900:\n                        i += 7\n            elif N < 1000:\n                if N >= 900:\n                    if N >= 900:\n                        i += 6\n        else:\n            i += 1\n    return str(i)\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num >= 1000 and num <= 1999:\n        return \"ABD\" + str(num - 999)\n    elif num >= 2000 and num <= 2999:\n        return \"ABC\" + str(num - 2000)\n    elif num >= 3000 and num <= 3999:\n        return \"ABD\" + str(num - 3000)\n    else:\n        return \"ABC\" + str(num - 3000)\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1000, n+1):\n        if i >= 1001:\n            print(str(i)[0:3])\n        elif i >= 1000:\n            print(str(i)[0:2])\n        else:\n            print(str(i))\n    return \"\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'ABC'\n    else:\n        labels = 'ABC'\n        for i in range(1, n - 1):\n            labels += str(i * 100 + 1)\n        return labels\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if a < k <= b or c < k <= d or e < k <= a or e < k <= b:\n        return 'Yay!'\n    else:\n        return 'Nay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c, d, e, k = [int(x) for x in stdin.split()]\n\n    if max(a, b, c, d, e) < k < min(a, b, c, d, e):\n        print('Yay!')\n    else:\n        print('Nay!')\n\n    return ''\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"Yay!\"\n    for i in stdin.split():\n        a, b, c, d, e, k = map(int, i.split())\n        if a + b < d + e and c + d < e + a and c + d < e + b and e + c < b + a:\n            ans = \"Yay!\"\n            break\n    print(ans)\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check(a: int, b: int, c: int, d: int, e: int, k: int) -> bool:\n        return a < b < c < d < e and a + c <= k <= a + e <= b + d <= k <= a + b\n\n    a, b, c, d, e, k = map(int, stdin.split())\n    for i in range(a, b + 1):\n        for j in range(c, d + 1):\n            for k in range(e, k + 1):\n                if check(i, j, k, c, d, e):\n                    return \"Yay!\"\n    return \"Nay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if (a - k) ** 2 + (b - k) ** 2 + (c - k) ** 2 + (d - k) ** 2 + (e - k) ** 2 <= k ** 2:\n        return \"Yay!\"\n    return \"Nay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = list(map(int, stdin.split()))\n    dist = (a, b, c, d, e)\n    x = sorted(dist, key=lambda x: x)\n    for i in range(0, len(x)-1):\n        for j in range(i+1, len(x)):\n            if x[i] + k == x[j]:\n                return 'Yay!'\n    return 'Nay!'"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    x = (a+b)**2\n    y = (a+c)**2\n    z = (a+d)**2\n    aa = (b+c)**2\n    ab = (b+d)**2\n    ac = (c+d)**2\n    \n    aa = (a**2 + b**2) - x - (a + b)**2\n    ab = (a**2 + c**2) - y - (a + c)**2\n    ac = (a**2 + d**2) - z - (a + d)**2\n    ad = (b**2 + d**2) - x - (b + d)**2\n    bd = (c**2 + d**2) - y - (c + d)**2\n    bc = (b**2 + c**2) - z - (b + c)**2\n    \n    if k >= x:\n        return \"Yay!\"\n    if k >= y:\n        return \"Yay!\"\n    if k >= z:\n        return \"Yay!\"\n    if k >= aa:\n        return \"Yay!\"\n    if k >= ab:\n        return \"Yay!\"\n    if k >= ac:\n        return \"Yay!\"\n    if k >= ad:\n        return \"Yay!\"\n    if k >= bd:\n        return \"Yay!\"\n    if k >= bc:\n        return \"Yay!\"\n    return \"Nay!\""
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    dist = lambda x, y: abs(x - y)\n    if (a - dist(a, b)) < k and (a - dist(a, c)) < k and (a - dist(a, d)) < k and (a - dist(a, e)) < k:\n        if (b - dist(b, c)) < k and (b - dist(b, d)) < k and (b - dist(b, e)) < k and (c - dist(c, d)) < k:\n            if (d - dist(d, e)) < k:\n                return 'Yay!'\n    return 'Nay!'"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    return \"Yay!\" if max(a, b) < max(c, d) + max(e, k) else \"Nay!\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    p = d - k\n    q = e + k\n\n    if a < p < b and c < p < d:\n        print(\"Yay!\")\n    elif a < q < b and c < q < d:\n        print(\"Yay!\")\n    elif a < p < c < d and e < p < q:\n        print(\"Yay!\")\n    elif a < q < c < e and d < q < e:\n        print(\"Yay!\")\n    else:\n        print(\"Nay!\")\n    return"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 3200:\n        return'red'\n    else:\n        return 'pink'"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    else:\n        return'red'\n\nsolution(input())\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    s = stdin.strip()\n    if a < 2800:\n        print(s)\n    elif a > 2800:\n        print('red')\n    else:\n        print('pink')\n    return 'pink'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a = stdin\n    if int(a) < 3200:\n        return stdin\n    else:\n        return'red'\n    pass\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    else:\n        return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return \"pink\" if a < 3200 else \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 2800:\n        return stdin\n    else:\n        return \"red\"\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 2800:\n        s = stdin\n    else:\n        s = \"red\"\n    return s"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(str, stdin.split())\n    if int(a) < 3200:\n        print(s)\n    else:\n        print(\"red\")"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ratings = {'ABC': 1200, 'ARC': 2800, 'AGC': 4208}\n    rating = stdin\n    while True:\n        if rating > 4208:\n            rating = 4208\n        rating = ratings.get(str(rating))\n        if rating!= None:\n            return str(rating)"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return abc\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    next_contest = None\n    total_contest = 0\n\n    for i, number in enumerate(stdin.split('\\n')):\n        if i == 0:\n            total_contest = int(number)\n        else:\n            if int(number) < total_contest:\n                next_contest = number\n            else:\n                break\n\n    return next_contest"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    if R < 2800:\n        return \"ARC\"\n    return \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return next(filter(lambda x: int(x) < 1200, map(lambda x: int(x), list(stdin))))\n\"\"\"\nimport sys\nimport ast\nsys.setrecursionlimit(10**8)\n\ndef"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n\n    if R >= 1200:\n        if R >= 2800:\n            if R >= 4208:\n                if R > 4208:\n                    print(\"AGC\")\n                else:\n                    print(\"ARC\")\n            else:\n                print(\"ARC\")\n        else:\n            print(\"ABC\")\n    else:\n        print(\"ABC\")\n    return \"the answer\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin.replace('1', '9').replace('9', '1')"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('1', '9').replace('9', '1')))"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a)"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    tens_digit = n % 10\n    hundreds_digit = (n % 100) // 10\n    ones_digit = (n // 1000)\n    if tens_digit == 1:\n        tens_digit = 9\n    if ones_digit == 1:\n        ones_digit = 9\n    if hundreds_digit == 1:\n        hundreds_digit = 9\n    return str(tens_digit * 10 + ones_digit * 10 + hundreds_digit)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    for i in range(3):\n        if i == 1:\n            number = number.replace('1', '9')\n        if i == 2:\n            number = number.replace('9', '1')\n    return number"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.split(' ')\n    result = \"\"\n    for digit in digits:\n        result += str(int(digit.replace(\"1\",\"9\").replace(\"9\",\"1\")))\n    return result"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\"1\", \"9\")\n    stdin = stdin.replace(\"9\", \"1\")\n    return stdin\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return str(int(n.replace('1', '9').replace('9', '1').replace('0', '9')))"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1', '9').replace('9', '1')\n    \n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.replace(\"1\", \"9\")\n    n = n.replace(\"9\", \"1\")\n    n = n.replace(\"1\", \"9\")\n    return n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    return a"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    c = a.split(\"\\n\")\n    for i in range(len(c)):\n        c[i] = c[i][0]\n    return \"\".join(c)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin)\n    answers = []\n    for i in range(testcases):\n        b = stdin.split()[i+1]\n        for j in range(len(b)):\n            if j == 0:\n                continue\n            else:\n                c = b[:j]\n                d = b[j:]\n                break\n        answers.append(c)\n        answers.append(d)\n    for i in range(len(answers)):\n        if len(answers[i]) == len(answers[i+1]):\n            answers[i] = answers[i] + answers[i+1]\n            answers[i+1] = ''\n    return ''.join(answers)\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin[i].strip()\n        b = len(s)\n        res = \"\"\n        for j in range(b):\n            if j < b-1:\n                res += s[j:j+2]\n            else:\n                res += s[j]\n        print(res)\n\nsolution(\"4\\nabbaac\\nac\\nbccddaaf\\nzzzzzzzzzz\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        a = stdin.rstrip('\\n')\n        b = a.replace(\" \", \"\")\n        res = \"\"\n        for i in range(0, len(b)):\n            if b[i] == a[i]:\n                res += \"a\"\n            else:\n                res += \"b\"\n        print(res)\n    return a\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a,b = map(int,stdin.split())\n        a_divis = a\n        while a_divis % b!= 0:\n            a_divis += 1\n        if a_divis == 1:\n            print(1)\n        else:\n            print(a_divis)\nsolution(input())\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        if a % b == 0:\n            return \"0\"\n        return str(a // b + 1)\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    counter = 0\n    while a % b!= 0:\n        counter += 1\n        a += 1\n    return str(counter)"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if a%b==0:\n            return str(0)\n        if a==1:\n            return str(1)\n        if a==2:\n            return str(2)\n        if a%2==1:\n            return str(1)\n        if a==3:\n            return str(3)\n        if a%2==0:\n            return str(2)\n        if a==4:\n            return str(4)\n        if a%2==1:\n            return str(3)\n        if a==5:\n            return str(5)\n        if a%2==0:\n            return str(4)\n        if a==6:\n            return str(6)\n        if a%2==1:\n            return str(5)\n        if a==7:\n            return str(7)\n        if a%2==0:\n            return str(6)\n        if a==8:\n            return str(8)\n        if a%2==1:\n            return str(7)\n        if a==9:\n            return str(9)\n        if a%2==0:\n            return str(8)\n        if a==10:\n            return str(10)\n        if a%2==1:\n            return str(9)"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for _ in range(t):\n        a, b = map(int, stdin().split())\n        return print(find_min_moves(a, b))\n\n\ndef"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = list(map(int, stdin.split()))\n        if a % b == 0:\n            print(0)\n        else:\n            print(a // b + 1)\n    return \"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split(\"\\n\"):\n        a,b = map(int, line.split())\n        print(min(a//b, (a-1)//b))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test = int(stdin)\n    for i in range(test):\n        arr = list(map(int, stdin.split()))\n        a = arr[0]\n        b = arr[1]\n        if a % b == 0:\n            return \"0\"\n        else:\n            moves = 0\n            while a % b!= 0:\n                a = a + 1\n                moves += 1\n            return str(moves)"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temp = map(int, stdin.split())\n    segment_sum = 0\n    segment_num = 0\n    sum_list = []\n    max_segment = []\n    for i in range(1, n+1):\n        sum_list.append(sum(temp[0:i]))\n        if i >= k:\n            segment_sum = max(segment_sum, sum(sum_list[0:k]))\n        if i == n:\n            segment_sum = max(segment_sum, sum(sum_list[0:i]))\n        max_segment.append(segment_sum)\n    max_segment_index = max_segment.index(max(max_segment))\n    res = max_segment_index + 1\n    return str(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    a_new = a[:]\n    a_new.sort()\n    # print(a_new)\n    for i in range(1, len(a_new)):\n        if i <= k:\n            count += a_new[i]\n        else:\n            count = count / k\n            return str(count)"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    segments = [[] for i in range(n)]\n    res_0 = 0\n    for i in range(n):\n        segments[i].append(int(stdin.split()[i]))\n        res_0 += segments[i][i]/n\n\n    res = 0\n    for i in range(n):\n        if len(segments[i]) > k:\n            seg = segments[i][0:k]\n        else:\n            seg = segments[i]\n        # print(seg)\n        res += max(seg)\n    # print(res_0)\n    return \"%.4f\" % round(res/n, 4)"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    average = []\n    for i in range(len(a)):\n        average.append(sum(a[i:i+k])/k)\n\n    return max(average)"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '2.666666666666667'"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    avg_temp = [float(x) for x in stdin.split()]\n    max_avg_temp = 0\n    for i in range(k, len(avg_temp)):\n        max_avg_temp = max(max_avg_temp,\n                           (avg_temp[i - k] + avg_temp[i - k + 1] + avg_temp[i - k + 2]) / 3)\n    return str(max_avg_temp)\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(sum(int(i) for i in stdin.split())/len(stdin.split()), 0))"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    return str(max(\n        max(map(float, stdin.strip().split())) - min(map(float, stdin.strip().split()))\n        for _ in range(k))\n    )\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    avg = list()\n    for i in range(n):\n        avg.append(sum(map(int, stdin.split())) / (n - i + 1))\n    return str(max(avg))"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    segments = []\n    s = sum(days)\n    for i in range(n - k + 1):\n        s -= days[i]\n        segments.append(s)\n\n    return max(segments)\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    set_nums = list(map(int, stdin.split()))\n    nums.sort()\n    print(nums)\n    print(set_nums)\n    for i in range(len(set_nums) - 1):\n        nums[set_nums[i]] = nums[set_nums[i] - 1]\n        nums[set_nums[i] - 1] = nums[set_nums[i]]\n        if nums == sorted(nums):\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    p = sorted(list(map(int, stdin.strip().split())))\n    if p == a:\n        return \"YES\"\n    for i in range(len(p)):\n        if i == 0:\n            a[p[i]], a[p[i + 1]] = a[p[i + 1]], a[p[i]]\n        elif i == len(p) - 1:\n            a[p[i]], a[p[i - 1]] = a[p[i - 1]], a[p[i]]\n        else:\n            a[p[i]], a[p[i + 1]] = a[p[i + 1]], a[p[i]]\n        if p == sorted(a):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        p = list(map(int, stdin.split()))\n        dic = {}\n        for p_i in p:\n            if p_i in dic:\n                dic[p_i] += 1\n            else:\n                dic[p_i] = 1\n        if n % 2 == 0:\n            if all(dic[p_i] == 1 for p_i in p):\n                return \"YES\"\n        else:\n            if all(dic[p_i] == 2 for p_i in p):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin)\n    for _ in range(testcases):\n        n, m = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        p = list(map(int, stdin.split()))\n        swaps = 0\n        for i in range(m):\n            swaps += 1\n            for j in range(p[i]):\n                if a[j] > a[p[i] + 1]:\n                    a[j], a[p[i] + 1] = a[p[i] + 1], a[j]\n                    swaps -= 1\n        if swaps == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_sorted(sorted(stdin)) else 'NO'\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    #print(a)\n    #print(p)\n    b = sorted(a[1:], reverse=True)\n    #print(b)\n    c = sorted(a)\n    #print(c)\n    for i in range(m):\n        if c[p[i]-1] <= b[i]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        p = list(map(int, stdin.split()))\n\n        p_sort = sorted(p)\n\n        for x in a:\n            if x not in p_sort:\n                return \"NO\"\n        return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    return \"YES\" if sorted(a) == a and not sorted(set(p)) == set(range(1, n)) else \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    if len(a) < len(p):\n        return \"NO\"\n    for i in range(len(a) - 1):\n        a[i + 1] = a[i + 1] + a[i]\n    for i in range(len(p) - 1):\n        p[i + 1] = p[i + 1] + p[i]\n    return \"YES\" if a[1:] < p else \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))[:n]\n    p = list(map(int, stdin.split()))[n:]\n\n    for i, j in zip(p, range(1, len(p) + 1)):\n        a[i - 1], a[i] = a[i], a[i - 1]\n        if a == sorted(a):\n            print(\"YES\")\n            return\n        a[i - 1], a[i] = a[i], a[i - 1]\n\n    print(\"NO\")\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    enc_string = ''\n    while n!= 1:\n        enc_string += string[:n//2]\n        string = string[n//2:]\n        n = n//2\n    enc_string += string\n    return enc_string\nprint(solution(input()))\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    t = stdin\n    for i in range(1,n):\n        for j in range(i):\n            if s[j]==s[i]:\n                s[i] = str(int(s[i])*2)\n            else:\n                s[i] = str(3)\n    return \" \".join(s)\n    \n\nsolution(input())\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    enc_string = s[1]\n    dec_string = \"\"\n    for c in enc_string:\n        if c == \"1\":\n            dec_string += \"o\"\n        elif c == \"2\":\n            dec_string += \"p\"\n        elif c == \"3\":\n            dec_string += \"s\"\n        elif c == \"4\":\n            dec_string += \"s\"\n            dec_string += \"s\"\n        elif c == \"5\":\n            dec_string += \"a\"\n        elif c == \"6\":\n            dec_string += \"b\"\n    return dec_string\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    s = \"\"\n    while t:\n        c = t[:5]\n        s += c\n        t = t[5:]\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:-1]\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n\n    s = \"\"\n    while t:\n        l = t[0]\n        t = t[1:]\n        while l!= \"0\":\n            if l == \"1\":\n                s = s + \"a\"\n            elif l == \"2\":\n                s = s + \"b\"\n            elif l == \"3\":\n                s = s + \"c\"\n            elif l == \"4\":\n                s = s + \"d\"\n            elif l == \"5\":\n                s = s + \"e\"\n            elif l == \"6\":\n                s = s + \"f\"\n            elif l == \"7\":\n                s = s + \"g\"\n            elif l == \"8\":\n                s = s + \"h\"\n            elif l == \"9\":\n                s = s + \"i\"\n            elif l == \"0\":\n                s = s + \"j\"\n            l = t[0]\n            t = t[1:]\n\n    return s\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(10):\n        stdin = stdin.replace(\"o\", \"0\").replace(\"o\", \"0\").replace(\"o\", \"0\").replace(\"0\", \"o\")\n    return stdin\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t = stdin\n    t = t.split(\"\\n\")[0]\n    t = t[::-1]\n    s = t.split(\"\\n\")[0]\n    s = s[::-1]\n    print(s)\n    return s\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    s = stdin\n    dec = \"\"\n    if n > len(s):\n        for i in range(n):\n            if s[i] not in \"123456789\":\n                dec += s[i]\n            else:\n                dec += s[i]*3\n                break\n        dec = \"\".join(dec[::-1])\n    else:\n        while len(s) > 0:\n            if len(s) < n:\n                s += \"9\"*(n-len(s))\n            dec += s[:n]\n            s = s[n:]\n    return dec\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, s = int(stdin[0]), stdin[1].replace(' ', '')\n    return s\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  a = []\n  for _ in range(m):\n    a.append(list(map(int, stdin.split())))\n  return str(constraint(n, a))\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cost_matrix = {}\n    for i in range(n):\n        cost_matrix[i] = {}\n        for j in range(n):\n            cost_matrix[i][j] = 0\n    for i in range(m):\n        a, b, cost = map(int, stdin.split())\n        cost_matrix[a][b] = cost\n        cost_matrix[b][a] = cost\n    edges = sorted(set([(i, j, cost) for i in range(n) for j in range(n) if cost_matrix[i][j] > 0]), key=lambda x: x[2], reverse=True)\n\n    def is_connected(x, y):\n        count = 0\n        for i in range(n):\n            if x == i or y == i:\n                count += 1\n        return count >= 2\n\n    def find_root(x):\n        root = x\n        while root!= parent[root]:\n            root = parent[root]\n        while x!= root:\n            tmp = parent[x]\n            parent[x] = root\n            x = tmp\n        return root\n\n    parent = {}\n    for i in range(n):\n        parent[i] = i\n    for i in range(n):\n        for j in range(n):\n            if is_connected(i, j):\n                root_i = find_root(i)\n                root_j = find_root(j)\n                if root_i!= root_j:\n                    parent[root_j] = root_i\n    return str(len(edges) - sum(cost_matrix[i][j] for i, j, _ in edges) + 1)\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for i in range(n)]\n    dist = [0]*n\n\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges[u-1].append((v-1, w))\n        edges[v-1].append((u-1, w))\n        dist[u-1] += w\n        dist[v-1] += w\n\n    unvisited = set(range(n))\n\n    def Dijkstra(start):\n        visited = set()\n        curr_dist = dist[start]\n        unvisited.remove(start)\n        visited.add(start)\n        while unvisited:\n            min_dist = float('inf')\n            for node in unvisited:\n                if dist[node] < min_dist:\n                    min_dist = dist[node]\n                    min_node = node\n            unvisited.remove(min_node)\n            for adj_node, adj_dist in edges[min_node]:\n                if adj_node in unvisited and dist[min_node] + adj_dist < dist[adj_node]:\n                    dist[adj_node] = dist[min_node] + adj_dist\n            visited.add(min_node)\n        return curr_dist\n\n    max_dist = 0\n    for start in range(n):\n        max_dist = max(max_dist, Dijkstra(start))\n    return str(max_dist)\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    weights = []\n    for i in range(n):\n        weights.append([0] * n)\n\n    def dfs(i, j):\n        if i == j:\n            return weights[i][j]\n\n        if weights[i][j]!= 0:\n            return weights[i][j]\n\n        res = 0\n        for edge in graph[i]:\n            if edge[0] == j or edge[1] == j:\n                continue\n            res = max(res, edge[1] + dfs(edge[0], j))\n\n        weights[i][j] = res\n        weights[j][i] = res\n        return res\n\n    return str(dfs(0, 1))\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    edges = set()\n    cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i, j, k) not in edges and (j, k, i) not in edges:\n                    c = 0\n                    for v in graph[i]:\n                        c += v[1]\n                    for v in graph[j]:\n                        c += v[1]\n                    for v in graph[k]:\n                        c += v[1]\n                    edges.add((i, j, k))\n                    edges.add((j, k, i))\n                    edges.add((k, i, j))\n                    if c > cost:\n                        cost = c\n    return str(cost)\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *edges = map(int, stdin.split())\n    weights = [e for e in edges]\n    # graph = [[] for _ in range(N + 1)]\n    graph = [[] for _ in range(N + 1)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    q = deque()\n    heapq.heappush(q, (0, 0, 0))\n    cost, p_u, p_v = heapq.heappop(q)\n    while q:\n        cost, p_u, p_v = heapq.heappop(q)\n        if p_u!= p_v:\n            if len(graph[p_u]) > 1 and len(graph[p_v]) > 1:\n                u, v, w = graph[p_u]\n                if u == p_v and w > weights[u]:\n                    continue\n                if v == p_u and w > weights[v]:\n                    continue\n                heapq.heappush(q, (cost + 1, v, u))\n            else:\n                heapq.heappush(q, (cost + 1, p_u, p_v))\n    return str(len(edges) - len(graph))\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = map(int, stdin.split())\n\ng = defaultdict(list)\nfor _ in range(m):\n    u, v, w = map(int, stdin.split())\n    g[u].append((v, w))\n    g[v].append((u, w))"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0430\u043c \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u0437 \u0444\u0430\u0439\u043b\u0430. \u043d\u0435 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0435\u0451 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f. \u043e\u0434\u043d\u0430 \u0438 \u0442\u0430 \u0436\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\n    n, m = list(map(int, input().split()))\n    graph = []\n    for i in range(m):\n        u, v, w = list(map(int, input().split()))\n        graph.append((u-1, v-1, w))\n    graph = sorted(graph, key=lambda x: x[2])\n    n_cost = 0\n    for u, v, w in graph:\n        n_cost += w\n        if n_cost > m:\n            n_cost = m\n            break\n    return str(n_cost)\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s.split()[0])\n    s = s.split()[1]\n    s = [s[i:i+2] for i in range(0, n*2, 2)]\n    s = [''.join([c for c in s if c!= 'R']) for s in s]\n    s = [''.join([c for c in s if c!= 'G']) for s in s]\n    s = [''.join([c for c in s if c!= 'B']) for s in s]\n    m = 0\n    for i in range(1, len(s)):\n        if(i % 3 == 0):\n            if(s[i-1]!= s[i]):\n                if(s[i-2]!= s[i]):\n                    if(s[i-3]!= s[i]):\n                        m += 1\n    print(m)\n    for i in range(1, len(s)):\n        if(i % 3 == 0):\n            if(s[i-1]!= s[i]):\n                if(s[i-2]!= s[i]):\n                    if(s[i-3]!= s[i]):\n                        s[i-1] = s[i]\n                        s[i] = s[i-1]\n                        s[i-2] = s[i]\n                        s[i-3] = s[i]\n    t = ''\n    for i in range(n):\n        t += s[i]\n    print(t)\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    lamps = set()\n    for i in range(n):\n        lamps.add((s[i], s[i]))\n\n    lamps = list(lamps)\n    lamps.sort(key=lambda lamp: (lamp[0], lamp[1]))\n\n    answer = 0\n    for i in range(len(lamps)):\n        for j in range(i+1, len(lamps)):\n            if (lamps[i][0], lamps[i][1]) == (lamps[j][0], lamps[j][1]):\n                continue\n            if (lamps[i][0], lamps[i][1]) == (lamps[j][1], lamps[j][0]):\n                continue\n\n            if (lamps[i][0], lamps[i][1]) in lamps[j][1:]:\n                continue\n            if (lamps[i][1], lamps[i][0]) in lamps[j][1:]:\n                continue\n\n            answer = max(answer, (lamps[i][0], lamps[i][1]) in lamps[j][1:], (lamps[i][1], lamps[i][0]) in lamps[j][1:])\n\n    return str(answer)\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    num, garland = stdin.split()\n    garland = garland.replace(' ', '')\n    # convert the string to a list\n    garland = list(garland)\n    # sort the list\n    garland.sort()\n    # convert to tuple\n    garland = tuple(garland)\n    # get the values of groups\n    l1, l2, l3 = garland[0], garland[1], garland[2]\n    # check if group 1 and group 2 are symmetric\n    if (l1 + l2) == l3:\n        # get the distance between groups\n        dis1 = abs(l1 - l2)\n        dis2 = abs(l2 - l3)\n        dis3 = abs(l3 - l1)\n        dis4 = abs(l1 - l3)\n        dis5 = abs(l2 - l3)\n        dis6 = abs(l3 - l2)\n        # check if distance between groups is divisible by 3\n        if (dis1 % 3 == 0 and dis2 % 3 == 0) or (dis3 % 3 == 0 and dis4 % 3 == 0) or (dis5 % 3 == 0 and dis6 % 3 == 0):\n            return \"1\"\n        # if distance is divisible by 3 it is not a nice garland\n        else:\n            return \"0\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    # n = 7\n    # s = \"RGBGRBB\"\n\n    # all the colors are distinct\n    # n = 3\n    # s = \"R\"\n\n    # all colors are distinct\n    # n = 3\n    # s = \"RB\"\n\n    # only 2 different colors\n    # n = 2\n    # s = \"R\"\n\n    # only 2 different colors\n    # n = 2\n    # s = \"RG\"\n\n    # only 2 different colors\n    # n = 3\n    # s = \"RBG\"\n\n    # only 2 different colors\n    # n = 3\n    # s = \"RG\"\n\n    # no need to recolor\n    # n = 1\n    # s = \"GRB\"\n\n    # only 1 different color\n    # n = 1\n    # s = \"GB\"\n\n    # only 1 different color\n    # n = 1\n    # s = \"GR\"\n\n    # only 1 different color\n    # n = 1\n    # s = \"RB\"\n\n    # 2 different colors\n    # n = 2\n    # s = \"BR\"\n\n    # only 2 different colors\n    # n = 2\n    # s = \"BRB\"\n\n    # n = 3\n    # s = \"BRBB\"\n\n    # n = 3\n    # s = \"RBBG\"\n\n    # n = 3\n    # s = \"BRBB\"\n\n    # n = 3\n    # s = \"RBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s = \"BBBB\"\n\n    # n = 3\n    # s"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    step = 0\n    while True:\n        if step == 0:\n            if s == t:\n                print(0)\n                break\n            step += 1\n        elif step == 1:\n            if 'R' not in t:\n                t = t.replace('R', 'R', 1)\n            else:\n                step += 1\n        elif step == 2:\n            if 'G' not in t:\n                t = t.replace('G', 'G', 1)\n            else:\n                step += 1\n        elif step == 3:\n            if 'B' not in t:\n                t = t.replace('B', 'B', 1)\n            else:\n                step += 1\n        elif step == 4:\n            if s == t:\n                print(0)\n                break\n            step += 1\n\n    return t\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    g = []\n    cnt = 0\n    result = \"\"\n\n    for i in range(n):\n        if s[i] == 'R':\n            g.append(1)\n        elif s[i] == 'G':\n            g.append(2)\n        elif s[i] == 'B':\n            g.append(3)\n\n    if len(g) == 1:\n        cnt = 1\n        result = str(cnt) + \" \" + str(s)\n        return result\n\n    g = sorted(g, key=lambda x: (x % 3))\n\n    for i in range(len(g)):\n        if i == 0:\n            g[i] -= 1\n        else:\n            g[i] -= g[i - 1]\n\n    for i in range(len(g)):\n        if g[i] % 3 == 0:\n            g[i] = 1\n        else:\n            g[i] = 0\n\n    g = list(filter(lambda x: x!= 0, g))\n\n    if len(g) == 0:\n        return \"0\"\n\n    cnt = 1\n    result = str(cnt) + \" \" + str(s)\n\n    for i in g:\n        cnt += 1\n        result += \" \" + str(i)\n\n    return result\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s_set = set()\n    n = len(s)\n    # print(s, n)\n    while s not in s_set:\n        s_set.add(s)\n        s = change_color(s)\n    if (s == 'RGBRGBR'):\n        return '3'\n    return (len(s_set) - 1)\n\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.split(\"\\n\")\n    s = stdin.split(\"\\n\")\n    s.remove(\"\")\n    print(s)\n    t = []\n    v = []\n    x = []\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i < j:\n                t.append(s[i] + s[j])\n            if i > j:\n                x.append(s[i] + s[j])\n    v = list(set(t))\n    x = list(set(x))\n    print(v, x)\n    v = list(set(v))\n    print(v)\n    for i in range(len(v)):\n        for j in range(len(x)):\n            if v[i] == x[j]:\n                v.remove(v[i])\n                break\n    print(v)\n    for i in range(len(v)):\n        for j in range(len(x)):\n            if v[i] == x[j]:\n                v.remove(v[i])\n                break\n    print(v)\n    for i in range(len(v)):\n        for j in range(len(x)):\n            if v[i] == x[j]:\n                v.remove(v[i])\n                break\n    print(v)\n    if len(v) == 0:\n        return \"0\"\n    elif len(v) == 1:\n        return \"1\"\n    else:\n        return \"2\"\n\nprint(solution(\"BRB\\n\"))"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    res = []\n    for i in range(1, n + 1):\n        if s[i - 1] == s[i % n]:\n            res.append(i)\n    return str(min(res)) + \" \" + str(s)\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0.0\n    for i in range(1,N+1):\n        if stdin[i-1] == \"JPY\":\n            result += float(stdin[i])\n        else:\n            result += float(stdin[i]) / (10**8)\n    return str(result)\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    input_list = [list(map(int, stdin.split())) for _ in range(N)]\n\n    output_list = []\n    for i in input_list:\n        output_list.append(\n            convert_to_yen(int(i[0]), i[1])\n        )\n    return \"\\n\".join(output_list)\n\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    ans = 0\n    for i in range(1, N + 1):\n        if stdin.splitlines()[i][-1] == 'JPY':\n            ans += int(stdin.splitlines()[i][:-1])\n        else:\n            ans += float(stdin.splitlines()[i][:-1])\n    return str(ans)\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    u = []\n    for i in range(n):\n        x.append(int(stdin.split()[i*2]))\n        u.append(stdin.split()[i*2+1])\n    x_sum = sum(x)\n    u_sum = 0\n    for i in range(len(x)):\n        if u[i] == \"JPY\":\n            u_sum += x[i]/pow(10,8)\n        elif u[i] == \"BTC\":\n            u_sum += x[i]*pow(10,8)\n    return str(u_sum+x_sum)"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = stdin.split('\\n')\n    data.pop(0)\n    total = 0\n    for i in range(0, n):\n        x = float(data[i].split(' ')[0])\n        u = data[i].split(' ')[1]\n        if u == 'JPY':\n            total += x\n        elif u == 'BTC':\n            total += x * 10000000\n    return str(total)\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = {int: lambda x: f'{x}'}\n    f = {'JPY': lambda x: int(x * 1000), 'BTC': lambda x: round(x * 1000000)}\n    x = map(d[n], map(f[n], stdin.split()))\n    return str(sum(x))\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x = []\n    u = []\n    for i in range(N):\n        x.append(int(stdin.split()[i+1].split(' ')[0]))\n        u.append(stdin.split()[i+1].split(' ')[1])\n    otoshidama_list = []\n    for i in range(N):\n        if u[i] == 'JPY':\n            otoshidama_list.append(x[i] * 10 ** 8)\n        else:\n            otoshidama_list.append(x[i] * 10 ** 5)\n    sum_x = sum(otoshidama_list)\n    rate = 380000\n    y = sum_x / rate\n    if y < 0:\n        return '-1.0'\n    return str(y)\nsolution(stdin)\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    num_relative = int(stdin[0])\n    relative = stdin[1:]\n\n    for i in range(0, num_relative):\n        if relative[i] == \"JPY\":\n            relative[i] = int(float(relative[i]) * 1000000)\n        else:\n            relative[i] = float(relative[i]) * 1000000000\n    print(sum(relative))\n    return\n\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    lst_x: list = []\n    lst_u: list = []\n    for i in range(0, N):\n        if i == 0:\n            lst_x.append(int(stdin.split()[i]))\n            lst_u.append(stdin.split()[i])\n        else:\n            lst_x.append(int(stdin.split()[i]) + lst_x[i - 1])\n            if stdin.split()[i] == \"BTC\":\n                lst_u.append(float(stdin.split()[i + 1]) * lst_x[i])\n            else:\n                lst_u.append(stdin.split()[i + 1])\n    return str(sum(lst_x)) + \" \" + str(lst_u[N - 1])\n\n\nprint(solution(\"2\\n10000 JPY\\n0.10000000 BTC\"))\nprint(solution(\"5\\n1000000 JPY\\n100.000000 BTC\"))\nprint(solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n100.000000 BTC\\n1000000 JPY\\n1000000 BTC\"))\nprint(solution(\"2\\n1000000 JPY\\n100.000000 BTC\\n1000000 JPY\\n1000000 BTC\"))\nprint(solution(\"5\\n100000 JPY\\n100.000000 BTC\\n100.000000 JPY\\n100.000000 BTC\\n100.000000 JPY\"))\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = []\n    u = []\n    for _ in range(N):\n        x.append(int(stdin.split()[2 * _]))\n        u.append(stdin.split()[2 * _ + 1])\n    total = 0\n    for i in range(N):\n        if u[i] == 'JPY':\n            total += x[i] * 5.18\n        else:\n            total += x[i] / 1.5\n    return str(total)\n\n\nsolution(\"2\")"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n = a[0]\n    k = a[1]\n    if k >= n:\n        raise ValueError(\"Not enough cars\")\n    a.sort(reverse=True)\n    a = a[k:]\n    a = a[:k]\n    return \" \".join([str(i) for i in a])\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = N\n    j = 1\n    while i > 0:\n        i = i - 1\n        j = j + 1\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\" \")[0])\n    i = int(stdin.split(\" \")[1])\n    num_list = list(range(1, N + 1))\n    print(num_list[i - 1])\n    return num_list[i - 1]\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split(' ')\n    n = int(data[0])\n    i = int(data[1])\n    \n    print(n - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    N = int(line[0])\n    i = int(line[1])\n    j = 0\n    while j < N:\n        j = j + i\n    print(j)\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\" \")\n    n = int(arr[0])\n    i = int(arr[1])\n    arr = list(range(n))\n    return arr[-i]\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return:\n        the number of cars that are moving forward\n    \"\"\"\n    pass"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, i = list(map(int, stdin.split()))\n    \n    if n < 2:\n        return 0\n    \n    # i is a negative number\n    for j in range(n, 0, -1):\n        if (n - j) == i:\n            return j\n    return 0"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    front_to_back = 1\n    for i in range(1, n+1):\n        front_to_back = (front_to_back*i) % (10**9 + 7)\n    return str(front_to_back)"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    s = list(s)\n    t = list(t)\n    result = []\n    while len(s) > 0 and len(t) > 0:\n        result.append(s.pop(0))\n        result.append(t.pop(0))\n    while len(s) > 0:\n        result.append(s.pop(0))\n    while len(t) > 0:\n        result.append(t.pop(0))\n    return \"\".join(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, inputS = stdin.splitlines()\n    _, inputT = inputS.split()\n    result = ''.join(inputT[i] + inputS[i] for i in range(len(inputS)))\n    return result"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[2]\n    new_s = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            new_s += s[i]\n        else:\n            new_s += t[i]\n    return new_s"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    str1: str = stdin[1]\n    str2: str = stdin[2]\n    final_str: str = \"\"\n    i: int = 0\n    j: int = 0\n    while (i < n):\n        if (i % 2!= 0):\n            final_str += str1[i]\n            i += 1\n        else:\n            final_str += str2[i]\n            i += 1\n    return final_str\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.split()\n    t = s.pop()\n    for i in range(N):\n        s.append(t)\n        t = s.pop(0)\n    return \"\".join(s)\n\n\ndef"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s,t = stdin.split(\" \")\n    return ''.join([a + b for a, b in zip(s,t)])\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns:\n        str: the string formed.\n    '''\n    N = int(stdin)\n    return ''.join(stdin.split(' ')[::-1])\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_chars = int(stdin)\n    first = stdin.split(\" \")[0]\n    second = stdin.split(\" \")[1]\n    new_string = \"\"\n    for i in range(num_chars):\n        new_string += first[i] + second[i]\n    return new_string\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1\\nabc\\n')\n    'abc'\n    >>> solution('2\\nabcd\\n')\n    'cdab'\n    >>> solution('3\\nabcdef\\n')\n    'fedcba'\n    >>> solution('4\\nabcdefgh\\n')\n    'gfedcbah'\n    >>> solution('5\\nabcdefghi\\n')\n    'ghiabcdef'\n    \"\"\"\n    n = stdin\n    print(\"\".join(stdin.splitlines()[1::2]))\n    return \"\".join(stdin.splitlines()[1::2])\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    t = s[::2] + s[1::2]\n    return t\n\nsolution(input())"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if bus_service(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, s = stdin.split()\n    if s == \"ABA\":\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stations = set()\n    for i in range(3):\n        if stdin[i] == 'A':\n            stations.add(i+1)\n        else:\n            stations.add(i+2)\n    for i in range(3):\n        for j in range(i+1, 3):\n            if (stdin[i], stdin[j]) in stations or (stdin[j], stdin[i]) in stations:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stations = stdin.strip()\n    stations = stations.lower()\n    stations = stations.replace(' ', '')\n    if len(stations)!= 3:\n        raise ValueError('Length of string is not 3!')\n    if not (stations[0] == 'a' and stations[1] == 'b' and stations[2] == 'a'):\n        raise ValueError('String does not have a valid format!')\n    stations = tuple(stations)\n    A_bus_service = False\n    B_bus_service = False\n    A_bus_service_stations = set()\n    B_bus_service_stations = set()\n    for i in range(len(stations)):\n        if stations[i] == 'a':\n            A_bus_service = True\n            A_bus_service_stations.add(i+1)\n        if stations[i] == 'b':\n            B_bus_service = True\n            B_bus_service_stations.add(i+1)\n    A_bus_service_stations = set(A_bus_service_stations)\n    B_bus_service_stations = set(B_bus_service_stations)\n    A_bus_service = A_bus_service and A_bus_service_stations\n    B_bus_service = B_bus_service and B_bus_service_stations\n    if A_bus_service or B_bus_service:\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return your answer"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    bus_services = {\n        1: 'A',\n        2: 'B',\n        3: 'A',\n    }\n    stations = {\n        'A': 1,\n        'B': 2,\n        'C': 3,\n    }\n    stations_in_bus_service = set()\n    for i in range(len(stdin)):\n        if stdin[i] in bus_services:\n            stations_in_bus_service.add(stations[stdin[i]])\n\n    for i in range(len(stdin)):\n        if stdin[i] in bus_services:\n            if len(stations_in_bus_service) == len(bus_services):\n                return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    from collections import Counter\n    pairs = list(itertools.permutations([\"A\", \"B\"], r=2))\n    for i in range(len(pairs)):\n        if pairs[i][0] == stdin[0] and pairs[i][1] == stdin[2]:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an input string, determine if there is a pair of stations that\n    will be connected by a bus service.\n\n    :param stdin: input string\n    :return: solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    # stdin = stdin.split()\n    # print(stdin)\n    # stdin = list(stdin)\n    # print(stdin)\n    # stdin = ''.join(stdin)\n    # print(stdin)\n    # stdin = '{}'.format(stdin)\n    # print(stdin)\n    # stdin = ''.join(stdin)\n    # print(stdin)\n\n    # stdin = stdin.split()\n    # stdin = list(stdin)\n    # stdin = ''.join(stdin)\n    # print(stdin)\n    #\n    # stdin = '{}'.format(stdin)\n    # print(stdin)\n    # stdin = ''.join(stdin)\n    # print(stdin)\n    #\n    # stdin = '{}'.format(stdin)\n    # print(stdin)\n    # stdin = ''.join(stdin)\n    # print(stdin)\n\n    # stdin = stdin.replace(\"{\", \"\")\n    # stdin = stdin.replace(\"}\", \"\")\n    # stdin = stdin.replace(\"'\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"'\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"{\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"{\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n    #\n    # stdin = stdin.replace(\"'\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin)\n\n    # stdin = stdin.replace(\"}\", \"\")\n    # print(stdin"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (stdin[0] == stdin[2] and stdin[1] == stdin[3]) else \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    days_since_rainy = 0\n    for day, character in enumerate(stdin):\n        if character == 'R':\n            days_since_rainy += 1\n        else:\n            days_since_rainy = 0\n        if days_since_rainy >= 3:\n            rainy_days += 1\n    return rainy_days\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    max_consecutive_rainy_days = 0\n    # Dictionary to track consecutive rainy days\n    consecutive_rainy_days = {\n        \"S\": 0,\n        \"R\": 0\n    }\n\n    for character in string:\n        if character == \"S\":\n            consecutive_rainy_days[\"S\"] += 1\n            max_consecutive_rainy_days = max(max_consecutive_rainy_days, consecutive_rainy_days[\"S\"])\n\n        else:\n            consecutive_rainy_days[\"R\"] += 1\n            max_consecutive_rainy_days = max(max_consecutive_rainy_days, consecutive_rainy_days[\"R\"])\n\n    return str(max_consecutive_rainy_days)\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('RRS')\n    '2'\n    >>> solution('RSSRRRR')\n    '3'\n    >>> solution('RR')\n    '1'\n    \"\"\"\n    total_rain = 0\n    rain_day = 0\n    prev_day = stdin[0]\n    for day in stdin:\n        if day == 'R':\n            rain_day += 1\n        else:\n            rain_day = 0\n        if prev_day == 'R' and rain_day == 3:\n            total_rain += 1\n        prev_day = day\n    return str(total_rain)\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    str_list = list(stdin)\n    if str_list[0] == \"R\":\n        count += 1\n    if str_list[1] == \"R\":\n        count += 1\n    if str_list[2] == \"R\":\n        count += 1\n    if str_list[0] == \"R\":\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    max_rain = 0\n    i = 0\n    while i < len(s):\n        if s[i] == 'R':\n            max_rain = max(max_rain, 1)\n        elif s[i] == 'S':\n            max_rain = max(max_rain, 2)\n        else:\n            i += 1\n        i += 1\n    return str(max_rain)\n\n\nprint(solution('RRS'))\nprint(solution('RSS'))\nprint(solution('SSS'))\nprint(solution('RS'))\nprint(solution('RS'))\nprint(solution('SS'))\nprint(solution('RS'))\nprint(solution
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    consecutive_rainy_days = 0\n    for char in stdin:\n        if char == \"R\":\n            consecutive_rainy_days += 1\n        else:\n            consecutive_rainy_days = 0\n        if consecutive_rainy_days >= 3:\n            return \"3\"\n    return str(consecutive_rainy_days)\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if i < len(stdin) - 2 and stdin[i] == stdin[i + 1] and stdin[i + 1] == stdin[i + 2]:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return str(count)"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rain_index = []\n    rain_day = 0\n    max_rain = 0\n    for i, letter in enumerate(stdin):\n        if letter == 'R':\n            rain_day += 1\n        else:\n            if rain_day > max_rain:\n                max_rain = rain_day\n            rain_day = 0\n    if rain_day > max_rain:\n        max_rain = rain_day\n    return str(max_rain)\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rain_days = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'R':\n            rain_days += 1\n        else:\n            rain_days = 0\n        if rain_days > 2:\n            return 'Too many consecutive rain days'\n    return str(rain_days)"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rain = stdin[0]\n    max_rain = 0\n    for i in range(3):\n        if rain == \"R\":\n            max_rain = max(max_rain, 1)\n            rain = stdin[i + 1]\n        elif rain == \"R\":\n            max_rain = max(max_rain, 2)\n            rain = stdin[i + 1]\n        else:\n            rain = stdin[i + 1]\n    return str(max_rain)\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    x = int(stdin[0].split(\" \")[0])\n    y = int(stdin[0].split(\" \")[1])\n    z = int(stdin[0].split(\" \")[2])\n    swap(x, y, z)\n    swap(x, z, y)\n    swap(y, x, z)\n    swap(y, z, x)\n    swap(z, x, y)\n    swap(z, y, x)\n    print(x, y, z)\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X,Y,Z = map(int,stdin.split())\n    for i in range(2):\n        if i == 0:\n            X,Y,Z = Y,X,Z\n        else:\n            X,Y,Z = Z,X,Y\n    for i in range(2):\n        if i == 0:\n            X,Y,Z = Y,Z,X\n        else:\n            X,Y,Z = Z,Y,X\n    return str(X)+\" \"+str(Y)+\" \"+str(Z)\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b, c = sorted([a, b, c])\n    a, b, c = sorted([a, b, c], reverse=True)\n    return f\"{a} {b} {c}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    a, b, c = lines[0].split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    for i in range(3):\n        if i == 0:\n            if a == b and a == c:\n                a, b, c = c, a, b\n            elif a == b or a == c or b == c:\n                a, b, c = b, a, c\n            else:\n                pass\n        elif i == 1:\n            if a == b and a == c:\n                a, b, c = c, b, a\n            elif a == b or a == c or b == c:\n                a, b, c = b, a, c\n            else:\n                pass\n        elif i == 2:\n            if a == b and a == c:\n                a, b, c = c, b, a\n            elif a == b or a == c or b == c:\n                a, b, c = b, a, c\n            else:\n                pass\n\n    return str(a) +'' + str(b) +'' + str(c)\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    \n    for i in range(len(stdin)):\n        if i < a or i > c:\n            stdin[i] = int(stdin[i])\n        else:\n            stdin[i] = int(stdin[i]) * -1\n    \n    for i in range(len(stdin)):\n        if i > b:\n            stdin[i] = int(stdin[i]) * -1\n    \n    stdin.sort()\n    \n    for i in range(len(stdin)):\n        if i < b or i > c:\n            stdin[i] = int(stdin[i])\n        else:\n            stdin[i] = int(stdin[i]) * -1\n    \n    return''.join(str(x) for x in stdin)\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, sorted([stdin.split() for _ in range(3)], key=lambda x: (x[0], x[1], x[2]))))\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n    if x!= y and x!= z and y!= z:\n        return str(min(x, y, z)) +'' + str(max(x, y, z))\n    elif x == y and x == z:\n        return str(x) +'' + str(x)\n    elif x == y and x!= z:\n        return str(x) +'' + str(z)\n    elif x == z and x!= y:\n        return str(y) +'' + str(x)\n    elif y == z and y!= x:\n        return str(y) +'' + str(x)\n    elif y == x and y!= z:\n        return str(z) +'' + str(y)\n    elif z == x and z!= y:\n        return str(z) +'' + str(y)\nsolution(input())"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (x, y, z) = stdin.split()\n    x, y, z = int(x), int(y), int(z)\n\n    #Swap the values\n    temp1 = x\n    temp2 = y\n    x = y\n    y = temp1\n    temp3 = z\n    z = temp2\n    temp4 = z\n\n    #Sort the box\n    x = sorted([x,y,z])\n    y = sorted([y,z,x])\n    z = sorted([z,x,y])\n\n    return''.join(map(str,x)) +'' +''.join(map(str,y)) +'' +''.join(map(str,z))\n\nsolution(input())\n\n\"\"\"\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    a = int(arr[0])\n    b = int(arr[1])\n    c = int(arr[2])\n    swap_a = a\n    swap_b = b\n    swap_c = c\n    if a > b:\n        swap_a = b\n        swap_b = a\n        swap_c = c\n    if c > a:\n        swap_a = a\n        swap_b = c\n        swap_c = b\n    swap_a, swap_b, swap_c = swap_a, swap_b, swap_c\n    print(swap_a, swap_b, swap_c)\n    return''.join(map(str, [swap_a, swap_b, swap_c]))\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.strip().split(' ')\n    a, b, c = int(a), int(b), int(c)\n    b, c, a = a, c, b\n    return str(b) +'' + str(c) +'' + str(a)\n\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > 13:\n        if A <= 55:\n            return str(int(0.5 * B))\n        else:\n            return str(B)\n    else:\n        return str(B)\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A <= 13 and A >= 6 and (A % 2 == 0 or A <= 12 and A >= 6):\n        return str(B * 2)\n    elif A >= 5 and A <= 12:\n        return str(B / 2)\n    return str(B)"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > 65 and (A - 65) % 2 == 0 and A - 65 >= 6:\n        return str(B // 2)\n    if A > 0 and A <= 12:\n        if A <= 5:\n            return '0'\n        return str(B // 2)\n    if A <= 13 and A >= 6:\n        return str(B // 2)\n    if A >= 6:\n        return str(B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    A = stdin[0]\n    B = stdin[1]\n    if A <= 13:\n        if A % 2 == 0:\n            if A >= 6:\n                if A <= 12:\n                    if A >= 5:\n                        return str(B)\n                    else:\n                        return str(0.5 * B)\n                else:\n                    return str(B)\n            else:\n                return str(B)\n        else:\n            if A >= 6:\n                if A <= 12:\n                    if A >= 5:\n                        return str(B)\n                    else:\n                        return str(0.5 * B)\n                else:\n                    return str(B)\n            else:\n                return str(B)\n    else:\n        if A % 2 == 0:\n            if A >= 6:\n                if A <= 12:\n                    if A >= 5:\n                        return str(B)\n                    else:\n                        return str(0.5 * B)\n                else:\n                    return str(B)\n            else:\n                return str(B)\n        else:\n            if A >= 6:\n                if A <= 12:\n                    if A >= 5:\n                        return str(B)\n                    else:\n                        return str(0.5 * B)\n                else:\n                    return str(B)\n            else:\n                return str(B)\n\nTakahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.\n'''"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 13 or (a == 13 and b % 2!= 0):\n        return str(a*b/2)\n    else:\n        return str(a*b)\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 13:\n        return int(B / 2)\n    elif A > 13 and A % 2 == 0:\n        return int((A - 6) * int(B / 2))\n    else:\n        return int(A * int(B / 2))"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 13 and (B % 2 == 0 or A >= 5):\n        return str(int(B/2))\n    if (A >= 6 and A <= 12) or (A >= 5 and A <= 13):\n        return str(int(B / 2))\n    return str(int(B / 2) + int(B / 4))\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    if (a >= 13) & (a <= 60):\n        if a <= 5:\n            return str(b)\n        else:\n            return str(int(b / 2))\n    elif (a >= 6) & (a <= 12):\n        return str(int(b / 2))\n    else:\n        return str(b)"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    a = int(data[0])\n    b = int(data[1])\n    if a <= 13 and a > 6:\n        if a%2 == 0:\n            return str(int(a/2)*b)\n        else:\n            return str(a*b)\n    elif a > 6:\n        if a%2 == 0:\n            return str(int(a/2)*b)\n        else:\n            return str(a*b)\n    else:\n        return str(a*b)\n\nsolution(input())\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 13:\n        if A == 13:\n            if A >= 6 and A <= 12:\n                return int(B/2)\n            else:\n                return int(B/2) * 0.5\n        else:\n            return int(B)\n    else:\n        return int(B)"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    int_in_takahashi: int = 0\n    for ch in stdin:\n        if ch == '+':\n            int_in_takahashi += 1\n        elif ch == '-':\n            int_in_takahashi -= 1\n    return str(int_in_takahashi)"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for ch in stdin:\n        if ch == '+':\n            res += 1\n        elif ch == '-':\n            res -= 1\n    return str(res)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(' ')\n    s = S[0]\n    return \"\".join([c if c == '+' else '-' for c in s])\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] == '+':\n            total += 1\n        else:\n            total -= 1\n    return str(total)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    stack = []\n    for i in range(len(s)):\n        if s[i] == \"+\":\n            stack.append(1)\n        elif s[i] == \"-\":\n            stack.append(-1)\n        else:\n            stack.append(int(s[i]))\n    return str(sum(stack))\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for i in range(0, len(stdin)):\n        if stdin[i] == '+':\n            integer += 1\n        elif stdin[i] == '-':\n            integer -= 1\n        else:\n            pass\n    return integer\nprint(solution(input()))"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    for i in s:\n        res += int(i)\n    return str(res)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\" \")\n    result = 0\n    for i in lst:\n        if i == \"+\":\n            result += 1\n        elif i == \"-\":\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i = 0\n    while i < len(s):\n        if s[i] == '+':\n            i += 1\n            continue\n        elif s[i] == '-':\n            i += 1\n            continue\n        i += 1\n    return s\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    months = {\n        'Jan': 1,\n        'Feb': 2,\n        'Mar': 3,\n        'Apr': 4,\n        'May': 5,\n        'Jun': 6,\n        'Jul': 7,\n        'Aug': 8,\n        'Sep': 9,\n        'Oct': 10,\n        'Nov': 11,\n        'Dec': 12\n    }\n    return print('Heisei' if datetime.datetime(int(stdin.split('/')[0]), months[stdin.split('/')[1]], int(stdin.split('/')[2])) < datetime.datetime(2020, 4, 30) else 'TBD')\n\nsolution(input())\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split(\"/\")\n    if (date[0] == \"2019\") and (date[1] == \"04\") and (date[2] == \"30\"):\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(stdin)\n    if (int(stdin[1]) > int(stdin[2][:-1])):\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")\n\nsolution(input())\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    date = stdin.split(\"/\")\n    if date[0] > \"4\" and date[1] > \"3\" and date[2] > \"30\":\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string representing a date in the yyyy/mm/dd format, print Heisei if the date is not later than April 30, 2019, and print TBD otherwise.\n\n    :param stdin: string\n    :return: string\n    \"\"\"\n    month, day, year = stdin.split(\"/\")\n    year, month, day = int(year), int(month), int(day)\n\n    if year >= 2019 and month <= 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = {'Jan': 31, 'Feb': 29, 'Mar': 31, 'Apr': 30, 'May': 31, 'Jun': 30, 'Jul': 31, 'Aug': 31, 'Sep': 30, 'Oct': 31, 'Nov': 30, 'Dec': 31}\n    date = stdin.split('/')\n    if date[0] in days and date[1] in days and date[2] in days:\n        if date[1] > 29:\n            return \"TBD\"\n        else:\n            return \"Heisei\"\n    else:\n        return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('/', '.')\n    s = s.split('.')\n    if (len(s) == 3) and (s[1] == '04'):\n        if (len(s[2]) == 8) and (s[2][4] == '1') and (s[2][7] == '1') and (s[2][6] == '1') and (s[2][5] == '1') and (s[2][2] == '1') and (s[2][0] == '1') and (s[2][1] == '1') and (s[2][3] == '1'):\n            return \"Heisei\"\n        elif (len(s[2]) == 7) and (s[2][2] == '1') and (s[2][1] == '1') and (s[2][0] == '1') and (s[2][3] == '1') and (s[2][4] == '1') and (s[2][5] == '1') and (s[2][6] == '1'):\n            return \"Heisei\"\n        elif (len(s[2]) == 6) and (s[2][2] == '1') and (s[2][1] == '1') and (s[2][0] == '1') and (s[2][3] == '1') and (s[2][4] == '1') and (s[2][5] == '1') and (s[2][6] == '1'):\n            return \"Heisei\"\n        elif (len(s[2]) == 5) and (s[2][2] == '1') and (s[2][1] == '1') and (s[2][0] == '1') and (s[2][3] == '1') and (s[2][4] == '1') and (s[2][5] == '1'):\n            return \"Heisei\"\n        elif (len(s[2]) == 4) and (s[2][2] == '1') and (s[2][1] == '1') and (s[2][0] == '1') and (s[2][3] == '1') and (s[2][4] == '1'):\n            return \"Heisei\"\n        elif (len(s[2]) == 3) and (s[2][2] == '1') and (s[2][1] == '1') and (s[2][0] == '1') and (s[2][3] == '1'):\n            return \"Heisei\"\n        elif (len(s[2]) == 2) and (s[2][2] == '1') and (s[2][1] == '1') and (s[2][0] == '1'):\n            return \"Heisei\"\n        else:\n            return \"TBD\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    month = int(stdin.split('/')[1])\n    day = int(stdin.split('/')[2])\n    \n    if (month == 4 and day <= 30) or (month == 5 and day <= 31) or (month == 6 and day <= 30) or (month == 7 and day <= 31) or (month == 8 and day <= 31) or (month == 9 and day <= 30) or (month == 10 and day <= 31) or (month == 11 and day <= 30):\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Heisei\" if stdin[:3] > \"2019/04/30\" else \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Split input into a list of strings.\n    s = stdin.split()\n\n    # Check for valid date in the given year.\n    if s[0]!= '2019':\n        return 'TBD'\n\n    # Check if the date is invalid.\n    if int(s[1]) > 3 or int(s[2]) > 12 or int(s[3]) > 31:\n        return 'TBD'\n\n    # Check for valid date.\n    else:\n        return 'Heisei'\n\nsolution(input())\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *topics = list(map(int, stdin.split()))\n    if n == 1:\n        return 1\n    problems_in_contests = n // 2\n    problems_in_contests_of_a_topic = 2 * problems_in_contests\n    problems_in_contests_of_other_topics = n - 2 * problems_in_contests_of_a_topic\n    if all(topics):\n        return problems_in_contests_of_a_topic * 2 + problems_in_contests_of_other_topics * 2\n    else:\n        return problems_in_contests_of_a_topic * 2\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        stdin: input for the function\n    Output:\n        None\n    '''\n    n = int(stdin)\n    problems = [int(x) for x in stdin.split()]\n    n = n-1\n    divisor = int(problems[0])\n    for i in range(n):\n        if divisor % 2 == 1:\n            divisor = (divisor * 2) + problems[i+1]\n        else:\n            divisor = divisor + problems[i+1]\n    return str(divisor)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  l = [int(x) for x in stdin.split()]\n  return str(max(l[i] + l[i - 1] for i in range(1, len(l) - 1)))\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    problems = []\n    for i in range(n):\n        problems.append(int(stdin.strip()))\n    problems.sort()\n    contests = set()\n    curr = -1\n    for j in range(len(problems)):\n        if problems[j]!= curr:\n            if curr!= -1:\n                contests.add((curr,curr))\n            curr = problems[j]\n    if curr!= -1:\n        contests.add((curr,curr))\n    if len(contests) == 0:\n        return str(len(problems) // 2)\n    contests = sorted(contests,key=lambda x: (x[0],x[1]))\n    prev = -1\n    count = 1\n    for i in range(1,len(contests)):\n        if contests[i][0] == contests[i-1][1]:\n            count += 1\n        else:\n            contests.append(contests[i-1])\n            if count > 2:\n                count -= 1\n            else:\n                count = 1\n    return str(len(contests) - len(contests) // 2)\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    problems = []\n    for line in inputs:\n        problems.append(list(map(int, line.split())))\n    # sort the problems according to their topics\n    problems.sort(key=lambda p: p[1])\n    # compute the number of contests for each topic\n    topic_count = {}\n    count = 0\n    for p in problems:\n        if p[0] not in topic_count:\n            topic_count[p[0]] = count\n            count += 1\n        else:\n            topic_count[p[0]] += 1\n    # return the number of contests\n    return count"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    topics = list(map(int, stdin.split()))\n    all_count = sum([2 * t for t in topics])\n    if all_count < 2 * n:\n        return str(n)\n    else:\n        return str(2 * n)\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    problems = []\n    for i in range(n):\n        problems.append(int(stdin.split()[i]))\n    \n    problems.sort()\n    \n    current_topic = problems[0]\n    current_count = 1\n    best = 1\n    \n    for p in problems[1:]:\n        if current_topic == p:\n            current_count += 1\n        else:\n            if current_count > best:\n                best = current_count\n            current_count = 1\n            current_topic = p\n    if current_count > best:\n        best = current_count\n    return str(best)\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = sorted(map(int, stdin.split()))\n    \n    topic = problems[0]\n    res = 0\n    \n    for i in range(1, n):\n        if topic!= problems[i]:\n            res += 2\n            topic = problems[i]\n    \n    return str(res)"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = list(map(int, stdin.split()))\n    return str(max(problems))\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = stdin.split()\n    first = problems.pop(0)\n    first = int(first)\n    last = problems.pop(0)\n    last = int(last)\n\n    problems = list(map(int, problems))\n    total = 0\n    first = first // 2\n    maxProblems = 0\n    count = 0\n    for i in range(0, n):\n        if problems[i] == first:\n            count += 1\n        total = count // 2\n        if total > maxProblems:\n            maxProblems = total\n    print(maxProblems)\n    return maxProblems\n\n\nsolution(input())\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    friends = list(map(int, stdin.split()))\n\n    count = 0\n\n    for friend in friends:\n        if (count < k):\n            friends.remove(friend)\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    msgs = [*map(int, stdin.split())]\n    cns = []\n    for i in range(1, n+1):\n        cns.append(i)\n    while len(cns) > k:\n        cns.pop(0)\n    return str(len(cns))+\" \"+\" \".join(map(str, cns))\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friend_ids = list(map(int, stdin.split()))\n    screen = []\n    result = []\n\n    for i in range(n):\n        screen.append([i])\n        result.append(i)\n\n    while True:\n        if len(screen) == 0:\n            break\n        if len(result) == k:\n            break\n        if len(screen[0]) == k:\n            screen.pop(0)\n            result.pop(0)\n        else:\n            screen[0].append(screen[0][-1])\n            screen[0].pop(0)\n            screen[0].append(friend_ids.pop(0))\n            result.append(screen[0][0])\n\n    return''.join([str(i) for i in result])\n\n\nsolution('7 2')\nsolution('10 4')"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # nums = tuple(map(int, input().split()))\n    nums = (int(i) for i in stdin.split())\n    k = int(next(nums))\n    n = int(next(nums))\n    print(min(n, k))\n    print(*[next(nums) for i in range(min(n, k))])\n    return\n\nsolution(\"1 2 3 2 1 3 2\")\nsolution(\"10 4\")\nsolution
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    n_msgs = list(map(int, stdin.strip().split()))\n    cnt = len(n_msgs)\n    if cnt < k:\n        return str(cnt)\n    n_cnt = 0\n    n_msgs.sort()\n    ans = []\n    while n_cnt < cnt:\n        if n_msgs[n_cnt] == n_msgs[n_cnt + k - 1]:\n            n_cnt += k\n        else:\n            ans.append(n_msgs[n_cnt])\n            n_cnt += k - 1\n    return str(len(ans)) +'' +''.join(map(str, ans))\n    # return''.join(map(str, ans))\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friends = list(map(int, stdin.split()))\n\n    # First pass: sort the list by id\n    # Second pass: remove the last n messages\n    # Third pass: place each friend's id on the first spot on the screen\n    # Fourth pass: merge the screen and output\n    screen = []\n    removed_messages = 0\n    for message in friends:\n        if removed_messages < k:\n            screen.append(message)\n            removed_messages += 1\n            continue\n        \n        first_screen_index = -1\n        # Find the index of the first chat with the friend\n        for i, id in enumerate(screen):\n            if id == message:\n                first_screen_index = i\n                break\n        if first_screen_index!= -1:\n            # Remove the chat\n            del screen[first_screen_index]\n            removed_messages += 1\n        else:\n            # Add the chat\n            screen.append(message)\n            removed_messages += 1\n    \n    return str(min(k, removed_messages))\n\nsolution(\"7 2\\n2 3 3 1 1 2 1 2\")"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    stdin = list(map(int, stdin.split()))\n    msgs = list(stdin[0:n])\n    conversations = list(stdin[n:])\n\n    \n    ans = 0\n    while len(conversations) > 0:\n        m_conversations = []\n        for conversation in conversations:\n            m_conversations.append(conversation)\n            if len(conversations) == 1:\n                break\n            if len(m_conversations) > k:\n                m_conversations.pop(0)\n            conversations = m_conversations\n        if len(m_conversations) > k:\n            m_conversations.pop(-1)\n        conversations = m_conversations\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friends = list(map(int, stdin.split()))\n    \n    conversations = []\n    for i in range(n):\n        for j in range(i, n):\n            conversations.append((friends[i], friends[j]))\n\n    # conversations = set(conversations)\n    # conversations = list(conversations)\n\n    # conversations = sorted(conversations, key=lambda x: x[0])\n    # conversations = sorted(conversations, key=lambda x: x[1])\n    # conversations = sorted(conversations)\n\n    # print(conversations)\n\n    # conversation = conversations.pop(0)\n    # print(conversation)\n\n    conversations = sorted(conversations, key=lambda x: x[0])\n    conversations = sorted(conversations, key=lambda x: x[1])\n    conversations = sorted(conversations)\n\n    result = []\n    # print(conversations)\n\n    for i in range(k):\n        # print(i)\n        if i >= len(conversations):\n            break\n\n        # print(conversations[i])\n        result.append(conversations[i][0])\n        result.append(conversations[i][1])\n\n        # conversations.pop(i)\n        conversations.pop(i)\n        conversations = sorted(conversations, key=lambda x: x[0])\n        conversations = sorted(conversations, key=lambda x: x[1])\n        conversations = sorted(conversations)\n\n    # conversations = sorted(conversations)\n    # conversations = sorted(conversations, key=lambda x: x[0])\n    # conversations = sorted(conversations, key=lambda x: x[1])\n\n    print(len(result))\n    print(*result)\n    return '\\n'.join(map(str, result))\n\n\nsolution(input())\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n\n    conversation_ids = sorted(int(x) for x in stdin.split())\n\n    conversations = []\n    conversations.append(conversation_ids[:k])\n\n    for i in range(k, len(conversation_ids)):\n        if conversation_ids[i] == conversations[-1][-1]:\n            conversations[-1].append(conversation_ids[i])\n        else:\n            conversations.append(conversation_ids[i])\n\n    return len(conversations)"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n\n    arr = []\n    for i in range(1, n+1):\n        arr.append(i)\n    k = min(len(arr), k)\n    # print(arr)\n    # print(k)\n    # print(ids)\n    for i in range(1, k+1):\n        arr.remove(ids[i-1])\n    # print(arr)\n    return str(k) + '\\n' +''.join(map(str, arr))\n\nprint(solution(input()))"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[0][i] = dp[0][i - 1] + 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            dp[i][j] = min(dp[i][j], dp[i - 1][j]) + 1\n    for i in range(q):\n        b = int(stdin.split()[i + 1])\n        if dp[n][b] == dp[n][n]:\n            print(-1)\n        else:\n            print(dp[n][b])\n    return \"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(i) for i in stdin.split()]\n    coins = [int(i) for i in stdin.split()]\n    a = sorted(coins, reverse=True)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if dp[i][j]:\n                dp[i][j] = dp[i][j-1]+dp[i+1][j]-dp[i+1][j-1]\n            else:\n                dp[i][j] = dp[i+1][j]\n    return \" \".join([str(dp[i][q-1]) if dp[i][q-1] else \"-\" for i in range(q)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    ans = [-1] * q\n    for _ in range(q):\n        b = int(stdin())\n        res = min_coins(coins, n, b)\n        if res == -1:\n            ans[_] = -1\n        else:\n            ans[_] = res\n\n    return '\\n'.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    ans = []\n    for i in range(q):\n        b = int(stdin.split()[i + 1])\n        if b not in a:\n            ans.append(-1)\n        else:\n            x = a.index(b)\n            ans.append(x)\n            a.pop(x)\n\n    for i in range(len(ans)):\n        if ans[i] == -1:\n            ans[i] = i + 1\n\n    return''.join([str(i) for i in ans])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    ans = []\n    for _ in range(q):\n        b = int(stdin.strip())\n        if any(i > b for i in a):\n            ans.append(-1)\n        else:\n            a.sort(reverse=True)\n            ans.append(a[0])\n            a.pop(0)\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    answers = [-1] * q\n\n    def solution_recursive(idx, target):\n        if target == 0:\n            answers[idx] = 1\n            return\n        if idx >= n:\n            return\n        if coins[idx] > target:\n            answers[idx] = -1\n            return\n        solution_recursive(idx + 1, target - coins[idx])\n        solution_recursive(idx + 1, target)\n\n    solution_recursive(0, target=1)\n    return '\\n'.join(map(str, answers))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n, q = stdin.split()\n    n = int(n)\n    a = list(map(int, stdin.split()[1:]))\n    queries = list(map(int, stdin.split()[2:]))\n\n    ans = [-1]*q\n    d = defaultdict(int)\n    for x in a:\n        d[x] += 1\n\n    def solve():\n        for x in queries:\n            if x in d:\n                return d[x]\n        return -1\n\n    for _ in range(int(n)):\n        ans[0] = min(ans[0], solve())\n        if ans[0] == -1:\n            return\n    print(*ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, q = int(stdin[0]), int(stdin[1])\n    coins = list(map(int, stdin[2:]))\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(n - 1, -1, -1):\n        if coins[i] <= n:\n            dp[i] = min(dp[i + 1], dp[i] + 1)\n        elif dp[i] == float('inf'):\n            dp[i] = -1\n    print(' '.join(map(str, dp[::-1])))\n    return''.join(map(str, dp[::-1]))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    c = [int(x) for x in stdin.strip().split()]\n\n    g = defaultdict(lambda: defaultdict(int))\n    for i in range(n):\n        g[i][c[i]] = 1\n    ans = []\n    for _ in range(q):\n        b = int(input())\n        ans.append(b)\n        for i in range(n):\n            g[i][b] = 1\n            g[i][2 ** int(c[i])] += 1\n\n    for i in range(n):\n        if ans[i] in g[i]:\n            print(i)\n            break\n    else:\n        print(-1)\n    return \"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, q = stdin.split()\n    n, q = int(n), int(q)\n\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[-1] * (n + 1) for _ in range(q + 1)]\n\n    for i in range(1, n + 1):\n        if a[i - 1] == 2 ** i:\n            dp[0][i] = i\n\n    for i in range(1, q + 1):\n        for j in range(i, n + 1):\n            if j - a[j - 1] >= 0 and dp[i - 1][j - a[j - 1]]!= -1:\n                dp[i][j] = 1 + dp[i][j - a[j - 1]]\n            else:\n                dp[i][j] = -1\n\n    return '\\n'.join(map(str, dp[q]))\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.strip().split('\\n')\n  n, k = map(int, lines[0].split())\n  cards = list(map(int, lines[1].split()))\n  fav_nums = list(map(int, lines[2].split()))\n\n  max_joy = 0\n  opt_cards = []\n  for i in range(k):\n    cards_with_num = []\n    for j in range(i+1, k):\n      cards_with_num.append(cards[j])\n    for j in range(i):\n      cards_with_num.append(cards[j])\n    for j in range(i+1, k):\n      cards_with_num.append(cards[j])\n    max_joy_with_num = get_max_joy_with_num(cards_with_num, fav_nums)\n    if max_joy_with_num > max_joy:\n      max_joy = max_joy_with_num\n      opt_cards = cards_with_num\n  print(max_joy)\n  return str(max_joy)\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()[1:]))\n    f = list(map(int, stdin.split()[2]))\n    h = list(map(int, stdin.split()[3:]))\n    c.sort()\n    f.sort()\n    h.sort()\n    h = sorted(h, reverse=True)\n    res = 0\n    for i in range(n):\n        if f[i] not in c:\n            res += h[i]\n        else:\n            res += h[i] - 1\n    return str(res)\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()[1:]))\n\n    fav = list(map(int, stdin.split()[2].split()))\n\n    h = stdin.split()[3]\n\n    dist = []\n    cnt = []\n\n    for i, card in enumerate(cards):\n        if card == fav[i % len(fav)]:\n            dist.append(i)\n            cnt.append(1)\n\n    for i, h_i in enumerate(h):\n        if h_i == 0:\n            continue\n        elif h_i > cnt[i]:\n            continue\n        elif h_i < cnt[i]:\n            return '0'\n        else:\n            cnt[i] -= h_i\n            cnt[(i + 1) % len(cnt)] += h_i\n\n    return str(sum([x * min(cnt) for x, cnt in zip(dist, cnt)]))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *nums = list(map(int, stdin.split()))\n    cards = list(map(int, stdin.split()))\n\n    nums.sort()\n    k_ = k\n    for i in range(n):\n        if nums[i] == cards[i]:\n            k_ -= 1\n        if k_ == 0:\n            return str(0)\n\n    nums.sort()\n    nums = nums[::-1]\n    counts = []\n    for i in range(1, k_ + 1):\n        counts.append(nums.count(i))\n\n    m = max(counts)\n    if counts.count(m) == 1:\n        return str(m)\n    else:\n        return str(m + 1)\n\n\nsolution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\")\nsolution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\")\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    #print(n, k)\n    #print(c)\n    #print(f)\n    #print(h)\n    \n    \n    #n = 4\n    #k = 3\n    #c = [1, 3, 2, 8, 5, 5, 8, 2, 2, 8, 5, 2]\n    #f = [1, 2, 2, 5]\n    #h = [2, 6, 7]\n    \n    c.sort()\n    f.sort()\n    h.sort()\n    #print(c)\n    #print(f)\n    #print(h)\n    \n    #print(len(c))\n    #print(len(f))\n    #print(len(h))\n    \n    #print(c[0] > f[0])\n    #print(c[1] > f[1])\n    #print(c[2] > f[2])\n    \n    #print(c[-1] > f[-1])\n    #print(c[-2] > f[-2])\n    #print(c[-3] > f[-3])\n    \n    #print(c[3] < f[3])\n    #print(c[4] < f[4])\n    #print(c[5] < f[5])\n    \n    #print(c[2] == f[2])\n    #print(c[3] == f[3])\n    #print(c[4] == f[4])\n    \n    #print(c[0] == f[0])\n    #print(c[1] == f[1])\n    #print(c[2] == f[2])\n    \n    #print(h[0] < h[1])\n    #print(h[0] < h[2])\n    #print(h[0] < h[3])\n    \n    #print(h[1] < h[2])\n    #print(h[1] < h[3])\n    #print(h[2] < h[3])\n    \n    \n    #print(c[0] <= f[0])\n    #print(c[1] <= f[1])\n    #print(c[2] <= f[2])\n    \n    #print(c[3] <= f[3])\n    #print(c[4] <= f[4])\n    #print(c[5] <= f[5])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, c = map(int, stdin.split())\n    cards = sorted(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    d = {1:0, 2:0, 3:0}\n    for c,f in zip(cards, f):\n        d[f] += 1\n    ans = 0\n    for i in range(n):\n        ans += d[c[i]] * (k - d[c[i]])\n    return str(ans)\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    cards = list(map(int, stdin[2].split()))\n    players = list(map(int, stdin[3].split()))\n    cards = sorted(cards)\n    max_joy = 0\n    for player in range(n):\n        if players[player] == cards[-1]:\n            max_joy += 1\n        else:\n            for i in range(len(cards) - 1, -1, -1):\n                if cards[i] == players[player]:\n                    break\n                else:\n                    cards.pop(i)\n    return str(max_joy)\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    # line 1: get the players favorite numbers\n    f = list(map(int, stdin.split()))\n\n    # line 2: get the maximum joy level of a player\n    h = list(map(int, stdin.split()))\n\n    # line 3: get all the possible card distributions\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    # dp = [[0 for _ in range(k)] for _ in range(n)]\n    # dp[0][0] = 0\n\n    # dp = [[0 for _ in range(k)] for _ in range(n)]\n    # dp[0] = 0\n    for i in range(k):\n        for j in range(n):\n            dp[j][i] = dp[j][i-1] + h[i] if h[i] > 0 else 0\n            # dp[j][i] = dp[j][i-1] + h[i]\n            # if h[i] > 0:\n            #     dp[j][i] = dp[j][i-1] + h[i]\n            # else:\n            #     dp[j][i] = dp[j][i-1]\n    # print(f\"DP: {dp}\")\n    # print(f\"c: {c}\")\n    # print(f\"f: {f}\")\n\n    # line 4: get the maximum joy level of a player\n    # print(f\"line 4: dp: {dp}\")\n    # print(f\"line 4: c: {c}\")\n    # print(f\"line 4: f: {f}\")\n\n    # line 5: search all possible card distributions\n    # dp[n][k] = max(dp[n-1][k], dp[n-1][k-1],..., dp[n-1][k-n], dp[n][k-1])\n    # for j in range(k):\n    #     dp[n-1][j] = max(dp[n-1][j], dp[n-1][j-1])\n    #     dp[n-1][j] += c[j]\n    #     if f[j] > 0:\n    #         dp[n-1][j] += f[j]\n\n    # line 6: get the maximum joy level of a player\n    # print(f\"line 6: dp: {dp}\")\n\n    # line 7: get the maximum joy level of a player\n    # print(f\"line 7: dp: {dp}\")\n    # print(f\"line 7: f: {f}\")\n\n    # line 8: search all possible card distributions\n    # max_joy_level = max(dp[n-1])\n    # if f[0] > 0:\n    #     max_joy_level += f[0]\n\n    # line 9: get the maximum joy level of a player\n    # print(f\"line 9: dp: {dp}\")\n    # print(f\"line 9: f: {f}\")\n\n    # line 10: get the maximum joy level of a player\n    # print(f\"line 10: dp: {dp}\")\n    # print(f\"line 10: f: {f}\")\n\n    # line 11: search all possible card distributions\n    # max_joy_level = max(dp[n-1])\n    # if f[0] > 0:\n    #     max_joy_level += f[0]\n    # print(f\"max_joy_level: {max_joy_level}\")\n\n    # line 12: get the maximum joy level of a player\n    # print(f\"line 12: dp: {dp}\")\n    # print(f\"line 12: f: {f}\")\n\n    # line 13: get the maximum joy level of a player\n    # print(f\"line 13: dp: {dp}\")\n    # print(f\"line 13: f: {f}\")\n\n    # line 14: search all possible card distributions\n    # max_joy_level = max(dp[n-1])\n    # if f[0] > 0:\n    #     max_joy_level += f[0]\n    # print(f\"max_joy_level: {max_joy_level}\")\n\n    # line 15: get the maximum joy level of a player\n    # print(f\"line 15: dp: {dp}\")\n    # print(f\"line 15: f: {f}\")\n\n    # line 16: get the maximum joy level of a player\n    # print(f\"line 16: dp: {dp}\")\n    # print(f\"line 16: f: {f}\")\n\n    # line 17: search all possible card distributions\n    # max_joy_level = max(dp[n-1])\n    # if f[0] > 0:\n    #     max_joy_level += f[0]\n    # print(f\"max_joy_level: {max_joy_level}\")\n\n    # line 18: get the maximum joy level of a player\n    # print(f\"line 18: dp: {dp}\")\n    # print(f\"line 18: f: {f}\")\n\n    # line 19: get the maximum joy level of a player\n    # print(f\"line 19: dp: {dp}"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [int(c) for c in stdin.split()]\n    players = set()\n    for i in range(n):\n        fav = int(stdin.split()[i+1])\n        players.add(fav)\n    max_joy = 0\n    for i in range(1, k+1):\n        for card in cards:\n            if i <= card <= n:\n                cur_joy = i\n                for j in range(1, n):\n                    if i <= card <= n:\n                        cur_joy += j\n                        if cur_joy not in players:\n                            cur_joy = 0\n                            break\n            if cur_joy > max_joy:\n                max_joy = cur_joy\n    return max_joy\n    \n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # n = int(input())\n    # a = list(map(int, input().split()))\n\n    dp = [[float('inf')] * n for _ in range(2)]\n    # dp = [[-1] * n for _ in range(2)]\n    # dp = [[0] * n for _ in range(2)]\n    # dp = [[float('inf')] * n for _ in range(2)]\n    for i in range(n):\n        # print(dp)\n        # dp[0][i] = a[i]\n        dp[0][i] = float('inf')\n        dp[1][i] = dp[0][i] + abs(a[i] - a[i - 1])\n        for j in range(1, n):\n            dp[1][j] = min(dp[1][j - 1], dp[0][j - 1] + abs(a[j] - a[j - 1]))\n            dp[0][j] = min(dp[1][j - 1], dp[0][j - 1] - abs(a[j] - a[j - 1]))\n\n    # print(dp)\n    return str(dp[1][n - 1])\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    moves = [1, 2]\n    for i in range(1, n):\n        if abs(a[i] - a[i-1]) == 1:\n            moves[0] += 1\n        else:\n            moves[1] += 1\n        a[i] = abs(a[i] - a[i-1])\n\n    print(min(moves))\n    print(*moves)\n    return \"ok\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    m = len(arr)\n\n    res = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            if abs(arr[i] - arr[j]) == 1:\n                res += 1\n\n    print(res)\n    return\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    moves = 0\n    k = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] == a[j]:\n                k += 1\n            else:\n                moves += 1\n                if k == 1:\n                    moves += abs(a[i] - a[j])\n                else:\n                    moves += k * 2\n                k = 0\n    return str(moves)"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n\n    while True:\n        t = None\n        i = None\n        j = None\n\n        if len(a) == 2 and sum(a) == 0:\n            break\n\n        for i, ai in enumerate(a):\n            for j, aj in enumerate(a):\n                if i < j:\n                    if abs(ai - aj) == 1 and ai + aj > 0:\n                        t = 1\n                        break\n                    if abs(ai - aj) == 1 and ai - aj < 0:\n                        t = 2\n                        break\n            if t:\n                break\n        if t:\n            break\n        else:\n            for i in range(len(a)):\n                if a[i] < 0:\n                    t = 2\n                    break\n                elif a[i] > 0:\n                    t = 1\n                    break\n            if t:\n                break\n\n        for i in range(len(a)):\n            if a[i] < 0:\n                a[i] = abs(a[i])\n        cnt += 1\n\n        for i, ai in enumerate(a):\n            for j, aj in enumerate(a):\n                if i < j:\n                    if abs(ai - aj) == 1 and ai + aj > 0:\n                        a[i] = a[i] + abs(a[i] - a[j])\n                        a[j] = a[j] - abs(a[i] - a[j])\n                    elif abs(ai - aj) == 1 and ai - aj < 0:\n                        a[i] = a[i] - abs(a[i] - a[j])\n                        a[j] = a[j] + abs(a[i] - a[j])\n\n        if sum(a) == 0:\n            break\n\n    return cnt\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n\n    ans = 0\n    for i in range(1, n - 1):\n        if abs(a[i] - a[i - 1]) == abs(a[i] - a[i + 1]):\n            ans += 1\n            a[i] = a[i] + abs(a[i] - a[i - 1])\n            a[i - 1] = a[i - 1] - abs(a[i] - a[i + 1])\n        else:\n            a[i] = a[i] - abs(a[i] - a[i - 1])\n            a[i - 1] = a[i - 1] + abs(a[i] - a[i + 1])\n\n    return str(ans)\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    count = 0\n    left = 0\n    right = n-1\n    while left < right:\n        if abs(a[left] - a[right]) == 1:\n            count += 1\n            left += 1\n            right -= 1\n        else:\n            if abs(a[left] - a[right]) > 1:\n                left += 1\n            elif abs(a[left] - a[right]) < 1:\n                right -= 1\n    print(count)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if abs(a[i] - a[j]) == 1:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    k = 0\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if abs(a[i] - a[j]) == 1:\n                k += 1\n                result.append((1, i, j))\n            if abs(a[i] - a[j]) == 1:\n                k += 1\n                result.append((2, i, j))\n    print(k)\n    print(result)\n    return k"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    k = 0\n    left_sum = a[0]\n    i = 1\n    while i < n:\n        if abs(a[i] - left_sum) > 1:\n            k += 1\n            left_sum = a[i]\n        i += 1\n    return k"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(int, stdin.split()))\n    c: Dict[int, int] = {}\n    p: int = 1\n    ans: str = str(0)\n    for i in range(0, n):\n        if i not in c:\n            c[a[i]] = i\n        else:\n            if c[a[i]]!= i:\n                c[a[i]] = i\n                if c[a[i]] > c[a[i - 1]]:\n                    ans += str(p) + \" \" + str(c[a[i]]) + \" \" + str(c[a[i - 1]])\n                    p += 1\n                else:\n                    ans += str(p) + \" \" + str(c[a[i - 1]]) + \" \" + str(c[a[i]])\n                    p += 1\n    return ans\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for i in range(test_cases):\n        n, k = map(int, stdin.split())\n        table = stdin[:n]\n        if len(table) == n:\n            return(\"0\")\n        if n == k:\n            return(\"1\")\n        free_tables = 0\n        for i in range(n):\n            if table[i] == \"1\":\n                continue\n            else:\n                if i - k <= 0:\n                    free_tables += 1\n                elif i + k > n - 1:\n                    free_tables += 1\n                else:\n                    free_tables += 1\n        print(free_tables)\n    return(free_tables)\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.strip().split(\"\\n\")\n  print(lines)\n  num_test = int(lines.pop(0))\n  for i in range(num_test):\n    num_tables, table_dist = [int(x) for x in lines.pop(0).split()]\n    table_string = lines.pop(0)\n    valid_tables = []\n    for j in range(num_tables):\n      if not table_string[j] == \"1\":\n        valid_tables.append(j)\n    if len(valid_tables) <= table_dist:\n      print(len(valid_tables))\n    else:\n      print(0)\n\nsolution(\"6 1\\n100010\\n6 2\\n000000\\n5 1\\n10101\\n3 1\\n001\\n2 2\\n00\\n1 1\\n0\\n\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # initializing all the required variables\n    n, k = map(int, stdin.split())\n    free_tables = list(map(int, stdin.split()))\n    # initializing the maximum number of free tables\n    max_free_tables = 0\n\n    # taking the minimum number of tables\n    minimum_tables = min(free_tables)\n    for i in range(minimum_tables, n + 1):\n        # initializing a temp variable to check if you can take any free table\n        temp = 0\n        # checking if a table with a distance less than or equal to k can be taken\n        if i - k >= 0:\n            # checking if the distance is not equal to the minimum_tables\n            if i - k!= minimum_tables:\n                # checking if i can be taken as many times as possible\n                for j in range(i - k, i + k + 1):\n                    # if the table is occupied, then it cannot be taken\n                    if free_tables[j] == 1:\n                        temp += 0\n                        break\n                    # if the table is free, then it must be taken\n                    else:\n                        temp += 1\n                if temp > max_free_tables:\n                    max_free_tables = temp\n        else:\n            # if there is no more tables with a distance less than or equal to k\n            # then the answer is always 0\n            max_free_tables = 0\n            break\n\n    if max_free_tables == 0:\n        print(0)\n    else:\n        print(max_free_tables)\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()\n    print(len(a))\n    return len(a)"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\nn, k = map(int, input().split())\ns = input()\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for line in stdin:\n        n, k, s = list(map(int, line.split()))\n        if k == 0:\n            total += 1\n            continue\n        if len(s) < n:\n            continue\n        t = 0\n        tmp = 0\n        for i in range(n):\n            if s[i] == '0':\n                if tmp <= k:\n                    tmp += 1\n                    continue\n                else:\n                    t += 1\n                    tmp = 1\n            else:\n                tmp = 0\n        if t > k:\n            total += 1\n    return str(total)\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # input = get_input()\n    # tables, k = input\n\n    # n, k = parse_input(input)\n    # tables = create_tables(n)\n    # print(tables, k)\n\n    # solution = solve(tables, k)\n    # return solution\n    n, k = map(int, stdin.split())\n    tables = list(stdin)\n    n = len(tables)\n    \n    return solve(tables, k)\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, n, k = map(int, stdin.split())\n    tabl = []\n    for i in range(n):\n        tabl.append(str(i))\n    tabl.pop()\n    tabl = tabl[::-1]\n    tot_cols = len(tabl)\n    i = 0\n    while i < n:\n        if tabl[i] == '1':\n            i += 1\n            continue\n        if tabl[i] == '0':\n            for j in range(n - 1, i, -1):\n                if tabl[j] == '1':\n                    tabl[j] = '0'\n                    i = j\n                    break\n    print(''.join(tabl))\n    return ''.join(tabl)\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_1 = stdin.split()\n    n = int(stdin_1[0])\n    k = int(stdin_1[1])\n    points = sorted(list(map(int, stdin_1[2:])))\n    points_l = 0\n    points_r = n - 1\n    points_mid = 0\n\n    bad_points = {}\n    bad_points_indices = []\n    for index in range(len(points)):\n        if index == 0:\n            points_l = 0\n            points_mid = points[index]\n            points_r = n - 1\n        elif points_l < points[index] <= points_mid:\n            points_l = points[index]\n        elif points_mid < points[index] <= points_r:\n            points_mid = points[index]\n        else:\n            points_r = points[index]\n        bad_points_indices.append((points_l, points_r))\n        if points_l == points_r:\n            bad_points[points_l] = True\n        if points_l == points_mid:\n            bad_points[points_mid] = True\n        if points_mid == points_r:\n            bad_points[points_r] = True\n\n    bad_points_indices = sorted(bad_points_indices)\n\n    i = 0\n    while i < len(bad_points_indices):\n        if bad_points_indices[i][1] - bad_points_indices[i][0] > k:\n            bad_points_indices.pop(i)\n        else:\n            i += 1\n\n    bad_points_indices.sort()\n    bad_points_indices = list(map(lambda x: x[0], bad_points_indices))\n\n    m = n - len(bad_points_indices)\n    return f'{m} {bad_points_indices}'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = []\n    for i in range(int(stdin.split(' ')[0])):\n        lines.append(list(map(int, stdin.split(' ')[1])))\n    lines = sorted(lines, key=lambda a: a[0])\n    lines = sorted(lines, key=lambda a: a[1])\n    return str(lines[0][1] - lines[-1][0] + 1) +'' +''.join(map(str, lines[0][2:]))"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    points = [(x, x) for x in range(1, n + 1)]\n\n    for _ in range(k):\n        points = sorted(points)\n        p1, p2 = points.pop(0)\n        points.append((p1, p2))\n\n    points = sorted(points)\n\n    def distance(a: tuple, b: tuple) -> int:\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def bad_points(point: tuple) -> int:\n        return sum(1 for _, _ in points if distance(point, _) > 1)\n\n    return str(len(points) - len(set(points)))\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n    segments.sort()\n    segments.append(segments[-1] + k)\n    m = len(segments)\n\n    dp = [[0] * m for _ in range(m)]\n    for i in range(m):\n        dp[i][i] = 1\n\n    for l in range(m):\n        for r in range(m - l - 1):\n            for j in range(r + 1, m - l):\n                dp[l][r] = max(dp[l][r], dp[l][j] + dp[j + 1][r])\n\n    min_segments = m\n    min_indices = []\n    for i in range(m):\n        if dp[0][i] <= k:\n            min_segments = dp[0][i]\n            min_indices = [i]\n\n    for i in range(1, m):\n        if dp[i][m - 1] <= k:\n            min_segments = min(min_segments, dp[i][m - 1])\n            min_indices.append(m - i)\n\n    return str(min_segments) +'' +''.join(map(str, min_indices))\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lines = sorted([tuple(map(int, stdin.split())) for _ in range(n)])\n\n    bad_points = []\n    for i, line in enumerate(lines):\n        left, right = line\n        points = [(left, False), (right, True)]\n        bad_points += points\n        for j, (x, is_right) in enumerate(points[:-1]):\n            for y, is_left in points[j+1:]:\n                if is_right ^ is_left and not (left <= x <= right) and x <= y and y <= right:\n                    bad_points.append((x, False))\n                    break\n    bad_points = set(bad_points)\n    bad_points = sorted(bad_points)\n\n    count = 0\n    for x in range(n):\n        if not (bad_points[x][1] and bad_points[x + 1][0]):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = sorted(list(map(int, stdin.split())))\n    index = 0\n    bad_points = []\n    bad_point_count = 0\n    while index < n:\n        if segments[index] >= index + 1:\n            index += 1\n            continue\n        if segments[index] > index + k:\n            index += k\n            continue\n        bad_points.append(index)\n        bad_point_count += 1\n        index += 1\n\n    print(bad_point_count)\n    bad_points = set(bad_points)\n    good_points = list(segments)\n    for p in bad_points:\n        good_points.remove(p)\n    print(good_points)\n    return str(len(good_points))\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *data = map(int, stdin.split())\n    segments = sorted([tuple(map(int, i.split())) for i in data], key=lambda x: x[0])\n    bad = set()\n    res = 0\n    for x, y in segments:\n        for j in range(x, y + 1):\n            if j in bad:\n                break\n        else:\n            res += 1\n            bad.add(x)\n            bad.add(y)\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    bad_points = {}\n    max_points = 0\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        bad_points.setdefault(l, set()).add(r)\n        bad_points.setdefault(r, set()).add(l)\n        max_points = max(max_points, r)\n        segments.append((l, r))\n    segments.sort()\n    segments = set(segments)\n    for i in range(max_points):\n        bad_count = 0\n        for j in range(n):\n            if i in bad_points[i]:\n                bad_count += 1\n        if bad_count < k:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n    # n = 4, k = 2\n    # segments = [11, 11, 9, 11]\n    bad_points = list()\n    bad_points_to_indices = dict()\n    count = 0\n    for segment in segments:\n        start = segment\n        end = segment\n        while start < end:\n            if start not in bad_points_to_indices:\n                bad_points_to_indices[start] = count\n                count += 1\n            if start == end:\n                break\n            start += 1\n\n    min_segments = count - k\n    max_bad_points = count - k\n    min_segments_to_bad_points = dict()\n    min_segments_to_bad_points[1] = max_bad_points\n    min_segments_to_bad_points[2] = max_bad_points\n\n    for segment in segments:\n        start = segment\n        end = segment\n        while start < end:\n            if start not in bad_points_to_indices:\n                bad_points_to_indices[start] = count\n                count += 1\n            if start == end:\n                break\n            start += 1\n\n    while count > min_segments:\n        min_segments = min(min_segments, max(bad_points_to_indices.values()))\n        bad_points_to_remove = min_segments_to_bad_points[min_segments]\n        del bad_points_to_indices[bad_points_to_remove]\n        for bad_points_to_remove in bad_points_to_indices.values():\n            min_segments_to_bad_points[min_segments] = min(min_segments_to_bad_points[min_segments], bad_points_to_remove)\n\n    return min_segments\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    points = sorted(points)\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points = sorted(points)\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = sorted(points)\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points = sorted(points)\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points = sorted(points)\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points.reverse()\n    points = set(points)\n    points"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    n = int(stdin)\n    problems = stdin.split()\n    problems = [int(p) for p in problems]\n    res = sum(problems)\n    for i in range(3, len(problems) + 1):\n        res = max(res, (sum(problems[i - 3:i]) + sum(problems[0:i - 3])) // (i - 1))\n    return str(res)\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    num = int(stdin)\n    problems = [int(i) for i in stdin.split()]\n    problems.sort()\n    best = problems[0]\n    for i in range(1, num):\n        if not divisibility(problems[i], best):\n            best = problems[i]\n    return str(best)\n\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    problems = [int(i) for i in stdin[1].split()]\n    for i in range(2, 2 * n + 1, 2):\n        problems[i - 2] = max(problems[i - 2], problems[i - 1])\n    return sum(problems)\nsolution(input())"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    if q == 1:\n        N = int(stdin.strip())\n        problems = [int(i) for i in stdin.strip().split()]\n        return str(max(sum(problems), sum(problems) / len(problems)))\n    elif q == 2:\n        N = int(stdin.strip())\n        problems = [int(i) for i in stdin.strip().split()]\n        problems = sorted(problems, reverse=True)\n        problems = sorted(problems, reverse=True)\n        result = 0\n        for i in range(len(problems) - 1):\n            result = max(result, problems[i] + problems[i + 1])\n        return str(result)\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    t = 0\n    for i in range(n):\n        t += a[i]\n    ans = t\n    for i in range(n):\n        for j in range(i+1, n):\n            if t % a[j] == 0:\n                ans = max(ans, t//a[j]+a[j-i])\n            elif t % a[i] == 0:\n                ans = max(ans, t//a[i]+a[i-i])\n    return str(ans)\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    pretties = {}\n    for p in a:\n        pretties[p] = pretties.get(p, 0) + 1\n    max_prettie = max(pretties.values())\n    cnt = 0\n    for p in pretties:\n        if pretties[p] == max_prettie:\n            cnt += 1\n            if cnt == 3:\n                return str(p)\n    return str(max_prettie)\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    n = int(stdin.strip())\n    a = stdin.strip().split()\n    a = [int(i) for i in a]\n\n    a.sort(reverse=True)\n    ans = 0\n    count = 1\n    while True:\n        for i in range(0, len(a)-1, 2):\n            if a[i] == a[i+1]:\n                count += 1\n            else:\n                break\n        ans += count\n        if count == 2:\n            return str(ans)\n        else:\n            count = 1\n            for i in range(1, len(a)-1, 2):\n                if a[i] == a[i+1]:\n                    count += 1\n                else:\n                    break\n            ans += count"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for line in stdin.split('\\n'):\n        n, *_ = list(map(int, line.split()))\n        a = list(map(int, _[:3]))\n        a.sort()\n        if a[0] % a[1] and a[1] % a[2]:\n            result = max(result, a[0] + a[1] + a[2])\n        elif a[0] % a[1] and a[1] % a[2] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[1])\n        elif a[0] % a[1] and a[1] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[0])\n        elif a[0] % a[1] == 0 and a[1] % a[2]:\n            result = max(result, a[0] + a[1] + a[2] - a[2])\n        elif a[0] % a[1] == 0 and a[1] % a[2] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[0] - a[1])\n        elif a[0] == a[1] and a[1] % a[2]:\n            result = max(result, a[0] + a[1] + a[2] - a[2])\n        elif a[0] == a[1] and a[1] % a[2] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[0] - a[1])\n        elif a[0] == a[1] and a[1] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[0] - a[1] - a[2])\n        elif a[0] == a[1] == 0 and a[2] % a[1]:\n            result = max(result, a[0] + a[1] + a[2] - a[2] - a[1])\n        elif a[0] == a[1] == 0 and a[2] % a[1] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[2] - a[0] - a[1])\n        elif a[0] == a[1] == 0 and a[2] == 0:\n            result = max(result, a[0] + a[1] + a[2] - a[2] - a[0] - a[1] - a[2])\n        else:\n            result = max(result, a[0] + a[1] + a[2] - a[0] - a[1] - a[2])\n\n    return str(result)\n\n\nsolution('5 6 30 15\\n'\n        '3 4 6\\n'\n        '3 5 6')"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    #n = 4\n    #a = [2, 10, 1, 20]\n    #n = 2\n    #a = [3, 6]\n    #q = 1\n    #n = 2\n    #a = [3, 6]\n    #q = 1\n    #n = 4\n    #a = [2, 10, 1, 20]\n    #q = 4\n    #n = 4\n    #a = [1, 2, 3, 4]\n\n    teams = []\n    while len(a) > 1:\n        #print(a)\n        a_i, a_j = a[0], a[1]\n        #print(a_i, a_j)\n        if abs(a_i - a_j) <= 1:\n            teams.append([a_i, a_j])\n        a.pop(0)\n        a.pop(0)\n        #print(a)\n    #print(teams)\n    teams = sorted(teams)\n    #print(teams)\n    return str(len(teams))\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prog_skill = sorted(map(int, stdin.split()[1:]))\n\n    team_size = 2\n    while (team_size <= n):\n        for i in range(len(prog_skill)):\n            if prog_skill[i] - prog_skill[i - 1] == 1:\n                prog_skill[i] = -1\n            else:\n                break\n        if (sum(prog_skill) < 0):\n            team_size += 1\n        else:\n            team_size = 2\n\n    return str(team_size)\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    print(a)\n    \n    a.sort()\n    print(a)\n    \n    count = 1\n    for i in range(1, len(a)):\n        if abs(a[i] - a[i-1]) > 1:\n            count += 1\n    print(count)\n\n    return str(count)"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    team_size = 1\n    # keep track of the best solution so far\n    best = a[0]\n    while team_size < n:\n        # go through each student\n        for i in range(n):\n            # check if we should add it\n            # add it if we should and if it adds to the best solution so far\n            if a[i] - a[(i + 1) % n] == 1 and a[(i + 1) % n] - a[i] == 1:\n                best = max(best, a[i] + a[(i + 1) % n])\n        team_size += 1\n    return str(best)\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def groups(skills):\n        from collections import defaultdict\n        d = defaultdict(list)\n        for s in skills:\n            d[s].append(s)\n        return d.values()\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n    print(min(map(len, groups(skills))))\n    return\n\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\nsolution(\"7\")\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 4\n   ... 2 10 1 20\n   ... 2\n   ... 3 6\n   ... 5\n   ... 2 3 4 99 100\n   ... 1\n   ... 42\n   ... ''')\n    '1'\n    >>> solution('''4\n   ... 4\n   ... 2 10 1 20\n   ... 2\n   ... 3 6\n   ... 5\n   ... 2 3 4 99 100\n   ... 1\n   ... 42\n   ... ''')\n    '2'\n    \"\"\"\n    q = int(stdin.splitlines()[0])\n    n = int(stdin.splitlines()[1])\n    \n    s = stdin.splitlines()[2:]\n    \n    teams = []\n    skills = []\n    \n    for i in range(n):\n        skills.append(int(s[i]))\n        \n    skills.sort()\n    \n    \n    for i in range(n):\n        if i == 0 or skills[i]!= skills[i - 1] + 1:\n            teams.append([i])\n    \n    for i in range(len(teams)):\n        for j in range(i + 1, len(teams)):\n            for k in range(j + 1, len(teams)):\n                if skills[teams[i][0]] == skills[teams[j][0]] + 1:\n                    teams[i].extend(teams[j])\n                    teams[j] = []\n    \n    return str(len(teams))\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Reads a text stream of n integers\n    \"\"\"\n    stdin = stdin.strip()\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    return str(solution2(n, a))\n\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import math\n    import re\n    from collections import defaultdict\n\n    def split_pairs(a):\n        b = []\n        for i in range(0, len(a), 2):\n            b.append(a[i:i+2])\n        return b\n    def compare(a,b):\n        if abs(int(a)-int(b)) > 1:\n            return 0\n        else:\n            return abs(int(a)-int(b))\n    def get_n(a,b):\n        return abs(int(a)-int(b))\n    def get_l(a):\n        return len(a)\n    def get_total(a):\n        return sum(a)\n    def get_s(a):\n        return a.split()\n    def get_d(a):\n        return defaultdict(lambda: int(0))\n    def check_divisible(a):\n        if len(a) % 2 == 0:\n            return False\n        else:\n            return True\n    def find_l(a,b):\n        l = 0\n        for i in range(0, len(a)):\n            if i % 2 == 0:\n                continue\n            l += 1\n            if i % 2 == 1:\n                break\n        return l\n    def find_s(a):\n        s = 0\n        for i in range(0, len(a)):\n            if i % 2 == 0:\n                continue\n            s += 1\n            if i % 2 == 1:\n                break\n        return s\n    def get_new_list(a):\n        l = []\n        for i in a:\n            l.append(str(i))\n        return l\n    def get_f(a):\n        return math.factorial(len(a))\n    def get_n_f(a):\n        return math.factorial(len(a))/(math.factorial(get_l(a)))\n    def get_gcd(a,b):\n        while b:\n            a, b = b, a % b\n        return a\n    def get_reminder(a,b):\n        return a % b\n    def get_h(a):\n        return int(math.sqrt(a))\n    def gcd(a,b):\n        return math.gcd(a,b)\n    def get_lcm(a,b):\n        return a*b // math.gcd(a,b)\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a*b / math.gcd(a,b))\n    def get_lcm(a,b):\n        return int(a"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    # print(stdin)\n    n = int(stdin[0].strip())\n    # print(n)\n    data = stdin[1:]\n    # print(data)\n    return \"\".join([str(len(set(data))) for i in range(n)])\n\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solution1(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    for i, _ in enumerate(stdin):\n        if nCr(int(stdin[i][0]), int(stdin[i][1]), int(stdin[i][2]) + 1) < int(stdin[i][3]):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return\n\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, s = map(int, stdin.split())\n    for x in range(a, b+1):\n        for y in range(b, n+1):\n            if s == x + y:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using only four coins of values 1, 2, 3, 6.\n    The total value of the coins will be 3 + 1 + 1 + 1 = 7.\n    The total value of the coins after taking $1$ is 6.\n\n    The total value of the coins after taking $2$ is 5.\n\n    The total value of the coins after taking $3$ is 4.\n\n    The total value of the coins after taking $6$ is 3.\n\n    The total value of the coins after taking $5$ is 1.\n    \"\"\"\n    a, b, n, s = map(int, stdin.split())\n    if a <= s <= b:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, s = map(int, stdin.split())\n    if a >= s:\n        return 'YES'\n    if b >= s:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(a):\n        n, b, x, y = stdin.split()\n        n = int(n)\n        b = int(b)\n        x = int(x)\n        y = int(y)\n        s = x + y\n        if s < b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n,m,s=map(int,stdin.split())\n        if(n+m<=s):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        return\n\nsolution(input())\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for q in range(int(stdin)):\n        line = stdin.split(\"\\n\")[q]\n        n,b,x,s = int(line.split()[0]), int(line.split()[1]),int(line.split()[2]),int(line.split()[3])\n        coins = [1]\n        for i in range(2,n+1):\n            coins.append(coins[-1]*b)\n            if (n-i)%(i-1)==0:\n                #print(coins[-1]*i)\n                break\n        print(\"YES\" if x+s-coins[n-1]<=b else \"NO\")\n\n    return \"\""
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,b,x,s=map(int,stdin.split())\n    x=x%n\n    b=b%n\n    while n>0:\n        if n%x==0 and b%x==0:\n            s=s+n\n        elif n%x==0:\n            s=s+b\n        elif b%x==0:\n            s=s+x\n        n=n//x\n        b=b//x\n    if s==s:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, S = map(int, stdin.split())\n    x = 0\n    y = 0\n    while y <= b and x <= a:\n        if x + n == S or y + 1 == S:\n            return \"YES\"\n        x += n\n        y += 1\n    return \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split()]\n    if len(arr) == 2:\n        if len(arr[1]) > 1:\n            return 'NO'\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return 'NO'\n    arr.sort()\n    increasing = True\n    decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n    if increasing and decreasing:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count_increasing = 0\n    count_decreasing = 0\n    inc_list = []\n    dec_list = []\n    for i, a_i in enumerate(a):\n        if i == 0:\n            continue\n        if a_i <= a[i-1]:\n            count_increasing += 1\n            a[i-1] = -1\n            inc_list.append(a_i)\n        elif a_i > a[i-1]:\n            count_decreasing += 1\n            a[i-1] = -1\n            dec_list.append(a_i)\n    if count_increasing > count_decreasing:\n        count = count_increasing\n    else:\n        count = count_decreasing\n    for i in range(count):\n        if len(inc_list) == 0:\n            return \"NO\"\n        if len(dec_list) == 0:\n            break\n        a[inc_list[0]] = -1\n        a[dec_list[0]] = -1\n        inc_list.pop(0)\n        dec_list.pop(0)\n        if len(inc_list) == 0 or len(dec_list) == 0:\n            break\n    count_increasing = 0\n    count_decreasing = 0\n    for i, a_i in enumerate(a):\n        if i == 0:\n            continue\n        if a_i <= a[i-1]:\n            count_increasing += 1\n            a[i-1] = -1\n        elif a_i > a[i-1]:\n            count_decreasing += 1\n            a[i-1] = -1\n    if count_increasing > count_decreasing:\n        count = count_increasing\n    else:\n        count = count_decreasing\n    for i in range(count):\n        if len(inc_list) == 0:\n            return \"NO\"\n        if len(dec_list) == 0:\n            break\n        a[inc_list[0]] = -1\n        a[dec_list[0]] = -1\n        inc_list.pop(0)\n        dec_list.pop(0)\n        if len(inc_list) == 0 or len(dec_list) == 0:\n            break\n    for i in range(len(a)):\n        if a[i]!= -1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input = stdin.split()\n\n    is_inc = True\n    n_inc = 0\n    n_dec = 0\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0:\n            is_inc = True\n            n_inc += 1\n            inc.append(int(input[i]))\n        else:\n            if inc[-1] > int(input[i]):\n                is_inc = False\n                n_dec += 1\n                dec.append(int(input[i]))\n                n_dec += 1\n            else:\n                is_inc = True\n                n_inc += 1\n                inc.append(int(input[i]))\n    \n    if is_inc:\n        if len(inc) > 1 and len(dec) > 1:\n            return \"NO\"\n        if len(inc) == 0 or len(dec) == 0:\n            return \"NO\"\n        return \"YES\"\n    else:\n        if len(inc) == 0 or len(dec) == 0:\n            return \"NO\"\n        return \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 0:\n        return 'NO'\n\n    inc = []\n    dec = []\n    inc_count = 0\n    dec_count = 0\n\n    for i in range(N):\n        if len(inc) == 0:\n            inc.append(int(stdin[i]))\n        elif inc[-1] < int(stdin[i]):\n            inc.append(int(stdin[i]))\n            inc_count += 1\n        elif inc[-1] > int(stdin[i]):\n            dec.append(int(stdin[i]))\n            dec_count += 1\n        else:\n            inc.append(int(stdin[i]))\n            inc_count += 1\n            dec.append(int(stdin[i]))\n            dec_count += 1\n\n    if inc_count == 0 and dec_count == 0:\n        return 'NO'\n    elif inc_count == 0 or dec_count == 0:\n        return 'YES'\n\n    if inc_count > 0 and dec_count > 0:\n        return 'YES'\n\n    if inc_count > 0:\n        return 'YES'\n\n    if dec_count > 0:\n        return 'YES'\n\n    if inc_count == dec_count:\n        return 'YES'\n\n    return 'YES'\n\n\nsolution(\"5\")\nsolution(\"1\")\nsolution(\"3\")\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    while len(a) > 2:\n        if a[0] < a[1] and a[1] < a[2] and a[2] > a[3] and a[0] > a[3]:\n            # a.sort()\n            a.sort(key=lambda x: -x)\n            if a[0] < a[1] < a[2] < a[3]:\n                return \"YES\" + \"\\n\" + str(a[3]) + \"\\n\" + str(a[2]) + \"\\n\" + str(a[1]) + \"\\n\" + str(a[0])\n            elif a[0] < a[1] < a[2]:\n                return \"YES\" + \"\\n\" + str(a[0]) + \"\\n\" + str(a[1]) + \"\\n\" + str(a[2]) + \"\\n\" + str(a[3])\n            else:\n                return \"YES\" + \"\\n\" + str(a[3]) + \"\\n\" + str(a[0]) + \"\\n\" + str(a[2]) + \"\\n\" + str(a[1])\n        a.pop(0)\n        a.pop(0)\n    return \"NO\"\n    # return \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n\n    if not lst or len(lst)!= 2:\n        return 'NO'\n\n    a, b = lst\n    if a <= 0 or a > 2 * 10 ** 5 or b <= 0 or b > 2 * 10 ** 5:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    lst = []\n    inc = []\n    dec = []\n    for i in range(len(inp)):\n        n = int(inp[i])\n        if n == 0 or i == 0:\n            if len(inc) == 0:\n                inc.append(n)\n            else:\n                inc.append(inc[-1])\n                inc.append(n)\n        else:\n            if len(inc) == 0:\n                inc.append(n)\n            else:\n                if n > inc[-1]:\n                    inc.append(n)\n                else:\n                    for j in range(len(inc)):\n                        if inc[j] > n:\n                            inc[j] = n\n                            break\n    for i in range(len(inp)):\n        n = int(inp[i])\n        if n == 0:\n            if len(dec) == 0:\n                dec.append(n)\n            else:\n                dec.append(dec[-1])\n                dec.append(n)\n        else:\n            if len(dec) == 0:\n                dec.append(n)\n            else:\n                if n < dec[-1]:\n                    dec.append(n)\n                else:\n                    for j in range(len(dec)):\n                        if dec[j] < n:\n                            dec[j] = n\n                            break\n    if len(inc) == 0:\n        if len(dec) == 0:\n            return \"NO\"\n        else:\n            return str(len(dec))+\"\\n\"+str(dec)\n    if len(dec) == 0:\n        if len(inc) == 0:\n            return \"NO\"\n        else:\n            return str(len(inc))+\"\\n\"+str(inc)\n    if inc[0] > dec[0]:\n        return \"NO\"\n    else:\n        lst = []\n        lst.append(inc)\n        lst.append(dec)\n        lst.sort()\n        if lst == [[], []]:\n            return \"NO\"\n        else:\n            return str(len(lst[0]))+\"\\n\"+str(lst[0])\n\ninp = input()\nprint(solution(inp))\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443\n    # while True:\n    #     for i in range(len(a)):\n    #         if i == 0:\n    #             if a[i] > a[i + 1]:\n    #                 return 'NO'\n    #         else:\n    #             if a[i - 1] > a[i]:\n    #                 return 'NO'\n    #     a.sort()\n    #     for i in range(len(a) - 1):\n    #         if a[i + 1] <= a[i]:\n    #             return 'NO'\n    #     break\n    if n <= 2:\n        return 'NO'\n    a.sort()\n    i = 0\n    while i < n and a[i] < 1:\n        i += 1\n    if i >= n:\n        return 'NO'\n    while i < n and a[i] == 1:\n        i += 1\n    if i == n:\n        return 'NO'\n    i = 0\n    while i < n and a[i] < 2:\n        i += 1\n    if i == n:\n        return 'NO'\n    while i < n and a[i] == 2:\n        i += 1\n    if i == n:\n        return 'NO'\n    if a[i] >= 3:\n        while i < n and a[i] == 3:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 4:\n        while i < n and a[i] == 4:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 5:\n        while i < n and a[i] == 5:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 6:\n        while i < n and a[i] == 6:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 7:\n        while i < n and a[i] == 7:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 8:\n        while i < n and a[i] == 8:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 9:\n        while i < n and a[i] == 9:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 10:\n        while i < n and a[i] == 10:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 11:\n        while i < n and a[i] == 11:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 12:\n        while i < n and a[i] == 12:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 13:\n        while i < n and a[i] == 13:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 14:\n        while i < n and a[i] == 14:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 15:\n        while i < n and a[i] == 15:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 16:\n        while i < n and a[i] == 16:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 17:\n        while i < n and a[i] == 17:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 18:\n        while i < n and a[i] == 18:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 19:\n        while i < n and a[i] == 19:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 20:\n        while i < n and a[i] == 20:\n            i += 1\n        if i == n:\n            return 'NO'\n    if a[i] >= 21:\n        while i < n and a[i] == 21:\n            i += 1\n        if i == n:"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a_inc = []\n    a_dec = []\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            a_inc.append(a[i])\n        else:\n            a_dec.append(a[i])\n    if len(a_inc) == 0:\n        return 'NO'\n    elif len(a_inc) > len(a_dec):\n        return 'NO'\n    else:\n        for i in range(len(a_inc)):\n            if i == 0:\n                a_inc[i] = 1\n                a_inc_s =''.join(map(str, a_inc))\n            else:\n                a_inc[i] = a_inc[i-1]+1\n                a_inc_s =''.join(map(str, a_inc))\n            if i == len(a_inc)-1:\n                a_dec[i] = 1\n                a_dec_s =''.join(map(str, a_dec))\n            else:\n                a_dec[i] = a_dec[i+1]-1\n                a_dec_s =''.join(map(str, a_dec))\n            if a_inc_s == a_dec_s:\n                return 'YES'\n            else:\n                continue\n    return 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # return print(*solution(stdin))\n    return solution(stdin)\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    <description>\n    \n        <rest>\n    '''\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    \n    books = [[int(x) for x in stdin[2:]] for _ in range(n)]\n    \n    books.sort(key=lambda x: x[1])\n    \n    if books[0][1] == 1:\n        return -1\n    \n    ans = 0\n    \n    for i in range(n):\n        if books[i][2] == 1:\n            ans += books[i][0]\n        else:\n            ans += books[i][0] * 2\n    \n    return ans\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '8 4'\n    '''\n    n, k = map(int, stdin.split())\n    t, a, b = list(), list(), list()\n    for _ in range(n):\n        t, a, b = list(map(int, input().split()))\n    t = sorted(t)\n    a = sorted(a)\n    b = sorted(b)\n    \n    # I can't think of a brute force way to solve this, so I'll try to make it by hand\n    # we can just check for n(k)=0, and make sure we have k elements\n    n_k = n - k\n    if n_k < 0:\n        return -1\n    \n    # we can't find an optimal solution with exactly k books\n    if n_k == 0:\n        return 0\n    \n    # there can only be one optimal solution if there are at least k books\n    if n_k < k:\n        return max(t)\n    \n    # otherwise we can at least use as many books as possible\n    # now we just need to make sure we use as many books as possible\n    # the maximum solution is the minimum of the number of used books plus the minimum of all used books\n    # since we used k+1 books\n    # we just need to try out all combinations of books\n    # this is basically a binary search\n    # we can start with the minimum solution\n    # and then increase it by one\n    # until we get to the maximum solution\n    t_min = min(t)\n    t_max = max(t)\n    res = t_max\n    while t_min <= t_max:\n        # since we used k+1 books, we can try all combinations\n        # in the range of the number of used books\n        t_min_k = t_min\n        t_min_k_1 = t_min + 1\n        for i in range(n_k):\n            if a[i] == 1:\n                t_min_k_1 += t[i]\n            else:\n                t_min_k += t[i]\n        # now we can check if this is the optimal solution\n        if t_min_k >= k:\n            res = min(res, t_min_k_1)\n        t_min = t_min_k_1\n    return res\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = map(int, stdin.split())\n    maxBooks = 10**5\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split())))\n    res = -1\n    maxBooks = 10**5\n    for i in range(maxBooks):\n        booksCount = 0\n        for j in range(n):\n            if i == books[j][0]:\n                booksCount += books[j][1]\n            if i == books[j][2]:\n                booksCount += books[j][3]\n        if booksCount >= k:\n            booksCount = -1\n            break\n        else:\n            booksCount = -1\n        if booksCount > res:\n            res = booksCount\n    return str(res)"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    books = [int(x) for x in stdin.strip().split()]\n    alice, bob = 0, 0\n    alice_set = set()\n    bob_set = set()\n    for i in range(n):\n        if alice and bob:\n            alice, bob = 0, 0\n        if books[i] in alice_set:\n            alice += 1\n        elif books[i] in bob_set:\n            bob += 1\n        else:\n            alice_set.add(books[i])\n            bob_set.add(books[i])\n            if alice < k:\n                alice += 1\n            elif bob < k:\n                bob += 1\n    return str(min(alice*bob, -1)) if alice*bob > 0 else str(-1)\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '18'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split())))\n    alice_books = [True] * n\n    bob_books = [True] * n\n    ans = inf\n    alice_stack = []\n    bob_stack = []\n    for i in range(n):\n        if alice_books[i] == True:\n            alice_stack.append(books[i])\n        if bob_books[i] == True:\n            bob_stack.append(books[i])\n    alice_stack = sorted(alice_stack, key=lambda x: x[0] + x[2], reverse=True)\n    bob_stack = sorted(bob_stack, key=lambda x: x[0] + x[2], reverse=True)\n    for i in range(n):\n        if alice_books[i] == False and bob_books[i] == False:\n            if ans > alice_stack[i][0] + bob_stack[i][0]:\n                ans = alice_stack[i][0] + bob_stack[i][0]\n    if ans!= inf:\n        print(ans)\n    else:\n        print(-1)\n    return ans\n\nprint(solution(input()))\n\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        books = []\n        for i in range(n):\n            books.append(list(map(int, stdin.split())))\n        alice_books = [True] * n\n        bob_books = [True] * n\n        ans = inf\n        alice_stack = []\n        bob_stack = []\n        for i in range(n):\n            if alice_books[i] == True:\n                alice_stack.append(books[i])\n            if bob_books[i] == True:\n                bob_stack.append(books[i])\n        alice_stack = sorted(alice_stack, key=lambda x: x[0] + x[2], reverse=True)\n        bob_stack = sorted(bob_stack, key=lambda x: x[0] + x[2], reverse=True)\n        for i in range(n):\n            if alice_books[i] == False and bob_books[i] == False:\n                if ans > alice_stack[i][0] + bob_stack[i][0]:\n                    ans = alice_stack[i][0] + bob_stack[i][0]\n        if ans!= inf:\n            print(ans)\n        else:\n            print(-1)\n    return ans"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tasks = list()\n    for _ in range(n):\n        a, b, t = map(int, stdin.split())\n        tasks.append((t, a, b))\n    tasks.sort(key=lambda t: t[0])\n\n    s = 0\n    for t, a, b in tasks:\n        s = max(s, t)\n\n        if s < t:\n            return str(s)\n    return str(-1)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    alice_count = 0\n    bob_count = 0\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split())))\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    print(books)\n    alice_likes = 0\n    bob_likes = 0\n    for i in range(n):\n        if alice_likes < k and bob_likes < k:\n            if books[i][1] == 1:\n                alice_likes += 1\n            else:\n                bob_likes += 1\n            books[i][2] = 1 if alice_likes <= bob_likes else 0\n            print(books)\n        else:\n            break\n    return \" \".join(map(str,books))\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t, a, b = zip(*(map(int, input().split()) for _ in range(n)))\n    ab_ = [i for i in range(n) if a[i] == 1 and b[i] == 1]\n    alice_ = [i for i in range(n) if a[i] == 1]\n    bob_ = [i for i in range(n) if b[i] == 1]\n    print(*(t[i] + min(t) if (ab_ and alice_) or (bob_ and alice_) else -1 for i in range(k)))\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        n, k = map(int, stdin.split()[1:3])\n        a = list(map(int, stdin.split()[3:]))\n        for b in range(1, min(n, 10**8)):\n            if any(abs(a[i] - b) <= k for i in range(n)):\n                return str(b)\n        return str(-1)\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        n, k = map(int, stdin().split())\n        arr = list(map(int, stdin().split()))\n        arr.sort()\n        ans = 0\n        for i in range(n):\n            ans = max(ans, (arr[i] - (arr[i] + k)))\n        print(ans)\n\n    return \"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(f'{i}' for i in range(int(stdin.split()[0])))"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        a, k = [int(j) for j in stdin.split()]\n        price = sorted([int(j) for j in stdin.split()], reverse=True)\n        for j in range(len(price)):\n            if price[j] - k > price[j]:\n                price[j] = k\n                break\n        if price == sorted([int(j) for j in stdin.split()], reverse=True):\n            print(\"-1\")\n            continue\n        print(max(price))\n    return \"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    number_of_queries = int(input[0])\n    products_number = int(input[1])\n    products_prices = input[2].split()\n\n    for i in range(products_number):\n        products_prices[i] = int(products_prices[i])\n\n    def equalize_prices(price, max_diff, equal_price):\n        if abs(price - equal_price) <= max_diff:\n            return True\n        return False\n\n    def find_max_equal_price():\n        max_equal_price = 0\n        for i in range(products_number):\n            for j in range(i + 1, products_number):\n                if products_prices[i] < products_prices[j] and equalize_prices(products_prices[i], products_prices[j] - products_prices[i], products_prices[i]):\n                    max_equal_price = max(max_equal_price, products_prices[i])\n        return max_equal_price\n\n    products_prices.sort()\n    max_equal_price = find_max_equal_price()\n    if max_equal_price == 0:\n        return -1\n    return max_equal_price\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n, k = map(int, stdin.split())\n        prices = list(map(int, stdin.split()))\n        if max(prices) - min(prices) > k:\n            return '-1'\n        else:\n            return str(max(prices))\nprint(solution(input()))\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for i in range(int(stdin.splitlines()[0])):\n        queries.append(\n            [\n                int(stdin.splitlines()[i * 2 + 1].split()[0]),\n                [\n                    int(x)\n                    for x in stdin.splitlines()[i * 2 + 2].split()[0].split(\" \")\n                ],\n            ]\n        )\n\n    return \" \".join([str(max(x)) for x in queries])\n\n\nprint(solution(input()))"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    input = input[1:]\n\n    q = int(input[0].split()[0])\n    input = input[1:]\n    output = []\n    for _ in range(q):\n        n, k = int(input[0].split()[0]), int(input[1].split()[0])\n        a = list(map(int, input[0].split()[1:]))\n        a = a[:n]\n        if all(abs(a[i] - a[i + 1]) <= k for i in range(n - 1)):\n            output.append(max(a))\n        else:\n            output.append(-1)\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n, k = list(map(int, stdin.split()))\n        l = list(map(int, stdin.split()))\n        prices = []\n        for j in range(1, n + 1):\n            prices.append(l[j - 1])\n        price_max = max(prices)\n        price_min = min(prices)\n        k_max = (price_max - price_min) // k\n        if price_max - k_max <= price_max - price_min or k_max - price_max <= k_max - price_min:\n            print(price_max)\n        else:\n            print(\"-1\")\n\n\nsolution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''')\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n, k = map(int, stdin.strip().split())\n        a = list(map(int, stdin.strip().split()))\n        b = []\n        for i in a:\n            b.append(i + k)\n        b.sort()\n        c = list(set(a + b))\n        if max(c) - min(c) <= k:\n            print(max(c))\n        else:\n            print('-1')\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    c = 0\n    while i < len(a):\n        j = i\n        while j < len(a) and a[j] == 4:\n            c += 1\n            j += 1\n        i = j\n    if len(a) % 6!= 0:\n        return c\n    for i in range(0, len(a)):\n        if i % 6 == 0:\n            j = i\n            while j < len(a) and a[j] == 4:\n                j += 1\n            if j - i > c:\n                c = j - i\n    return c\n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    # your code goes here\n    return str(sum(a))"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    count = 0\n    for i in range(n):\n        if (int(arr[i]) % 6)!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  arr = list(map(int, stdin.split()[1:]))\n  count = 0\n  while True:\n    count += 1\n    if (n % 6 == 0) and (count % 6 == 0) and (all([i % 6 == 0 for i in arr])):\n      return str(count)\n    arr = sorted([i for i in arr if i % 6 == 0], reverse=True)\n    arr.pop()\n    n -= 1"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_i = 0\n    min_i = 0\n    for i in range(n):\n        if a[i] == max(a):\n            max_i = i\n        if a[i] == min(a):\n            min_i = i\n    if (max_i - min_i) % 6 == 0:\n        print(0)\n        return\n    if max_i - min_i > 0:\n        print((max_i - min_i)//6 + 1)\n        return\n    print((max_i - min_i)//6)\n    return"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = list(map(int, stdin.split()))\n    return str(min_delete_num(num))\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    min_elem_to_remove = 0\n    while i < n and min_elem_to_remove!= 0:\n        if a[i] % 6!= 0:\n            min_elem_to_remove += 1\n        i += 1\n    if min_elem_to_remove == 0:\n        return \"0\"\n    elif min_elem_to_remove < 5:\n        return str(min_elem_to_remove)\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min_valid_elements(a))\n\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 8\n   ... 15\n   ... 16\n   ... 23\n   ... ''')\n    5\n    >>> solution('''\n   ... 4\n   ... 8\n   ... 15\n   ... 16\n   ... 23\n   ... ''')\n    0\n    >>> solution('''\n   ... 9\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... ''')\n    1\n    \"\"\"\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    k = 0\n    while a.count(4) > 0:\n        a.remove(4)\n        k += 1\n    while a.count(8) > 0:\n        a.remove(8)\n        k += 1\n    while a.count(15) > 0:\n        a.remove(15)\n        k += 1\n    while a.count(16) > 0:\n        a.remove(16)\n        k += 1\n    while a.count(23) > 0:\n        a.remove(23)\n        k += 1\n    while a.count(42) > 0:\n        a.remove(42)\n        k += 1\n    if k >= 6:\n        return str(int(n/6))\n    return str(k)\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 4 8 15 16 23\n   ... ''')\n    '0'\n    >>> solution('''15\n   ... 4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n   ... ''')\n    '3'\n    '''\n    n = int(input())\n    a = list(map(int, input().split()))\n    return str(solution_naive(a))\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def sub(x):\n        return x-a\n    def add(x):\n        return x+a\n    a,b=map(int,stdin.split())\n    b=add(b)\n    res=b\n    while b<a:\n        res=sub(res)\n    return str(res)"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nt = int(input())\nfor i in range(t):\n    a, b = [int(x) for x in input().split()]\n    moves = b-a\n    moves = 0\n    while moves < b:\n        if moves == 0:\n            moves = moves + a\n        elif moves > 0:\n            moves = moves - a\n            if moves < 0:\n                moves = moves + a\n    print(moves)\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b = stdin.split()\n        a, b = int(a), int(b)\n        moves = 0\n        while a!= b:\n            if a > b:\n                a -= 1\n            else:\n                a += 1\n            moves += 1\n        print(moves)\n    return \"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n    if a < b:\n        return b - a\n    return a - b\n\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    t = int(lines.pop(0))\n    for _ in range(t):\n        a, b = map(int, lines.pop(0).split())\n        return str(a + (b - a) // 10)\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    res = a\n    while a!= b:\n        a += int(res[-1])\n        res = str(a)\n    return str(len(res))"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    a, b = int(a), int(b)\n    cnt = 0\n    while a!= b:\n        if a > b:\n            a -= b\n            cnt += 1\n        elif a < b:\n            a += b\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.strip())):\n        a, b = map(int, stdin.strip().split())\n        # a = int(stdin.strip())\n        # b = int(stdin.strip())\n        if a == b:\n            return str(0)\n        steps = 0\n        for i in range(min(a, b), max(a, b)):\n            if a - i in range(min(a, b), max(a, b)):\n                steps += 1\n                a = a - i\n                break\n            elif b - i in range(min(a, b), max(a, b)):\n                steps += 1\n                b = b - i\n                break\n        print(steps)\n    return str(steps)\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin)\n    result = 0\n    for i in range(num_of_cases):\n        a, b = map(int, stdin.split())\n        result = max(result,\n                     (a + min(10, a + b - a)) + (a + max(10, a - b)),\n                     (b + min(10, b + a - a)) + (b + max(10, a - b)))\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # n, x, y = map(int, input().split())\n    n, x, y = list(map(int, stdin.split()))\n    return str(x * y // n)"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    # sys.stdin = open(stdin)\n    T = int(stdin)\n    for i in range(T):\n        x, y, n = list(map(int, stdin.split()))\n        k = 0\n        while k <= n:\n            if (k % x) == y:\n                break\n            k += 1\n        if k <= n:\n            print(k)\n    return ''\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        x, y, n = map(int, stdin.split())\n        if x == y:\n            return '0'\n        # def f(x, y, n):\n        #     if x > y:\n        #         return f(x - y, y, n - 1)\n        #     elif x == y:\n        #         return n\n        #     else:\n        #         return f(x, y - x, n - 1)\n        # return f(x, y, n)\n        #\n        # def gcd(a, b):\n        #     if a == 0:\n        #         return b\n        #     return gcd(b % a, a)\n        #\n        # def modInverse(a, m):\n        #     if gcd(a, m)!= 1:\n        #         return None\n        #     u1, u2, u3 = 1, 0, a\n        #     v1, v2, v3 = 0, 1, m\n        #     while v3!= 0:\n        #         q = u3 // v3\n        #         v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3\n        #     return u1 % m\n        #\n        # print(gcd(x, y))\n        # print(modInverse(x, y))\n        # return\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_cases, = stdin_to_ints(stdin)\n    for _ in range(num_cases):\n        x, y, n = stdin_to_ints(stdin)\n        print(greatest_modulo(x, y, n))\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    for _ in range(n):\n        x, y, n = map(int, stdin.split())\n        print(str(x) +'' + str(y) +'' + str(n))\n        if x % y == 0:\n            k = x / y\n            print(k)\n\nsolution(input())\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        print('')\n\nsolution(input())\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.split()[0])):\n        x, y, n = list(map(int, stdin.split()[1:]))\n        print(find_max_value(x, y, n))\n    return ''\n\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    return str(k - m * (k // m) + m * (k % m))"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, n = map(int, stdin.split())\n        x = (a * b) % n\n        y = (((a - 1) * b) % n)\n        if y < x:\n            x = y\n        print(x)\n\n\nsolution()\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort(reverse=True)\n    if k % 2!= 0:\n        return n\n    return int(k * (n // 2))\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        res += min(d[i], k)\n    return str(res)\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candy_boxes = list(map(int, stdin.split()))\n    \n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (candy_boxes[i] + candy_boxes[j]) % k == 0:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    return str(int(max((i + 1) // 2 for i in range(1, n + 1)) / k))"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort()\n    candies = 0\n    for i in range(n):\n        candies += d[i]\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (candies - (d[i] + d[j])) % k == 0:\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, k = int(lines[0]), int(lines[1])\n    d = list(map(int, lines[2].split()))\n    d.sort()\n    cnt = 0\n    # print(d)\n    # print(d)\n    # print(d)\n    # for i in range(k):\n    #     # print(d)\n    #     if sum(d[:i]) % k == 0 and sum(d[i:]) % k == 0:\n    #         cnt += 1\n    # print(cnt)\n    # print(sum(d[:i]) % k)\n    # print(sum(d[i:]) % k)\n    # print(sum(d[:k]) % k)\n    # print(sum(d[k:]) % k)\n    for i in range(n):\n        # print(d)\n        if sum(d[:i]) % k == 0 and sum(d[i:]) % k == 0:\n            cnt += 1\n        # print(i, d[:i])\n    return str(cnt)"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    return str(max([n // 2 + k * ((n + 1) // 2), k * (n + 1) // 2]))"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = (int(i) for i in stdin.split())\n    d = tuple(int(i) for i in stdin.split()[1:])\n    print(math.floor((sum(d) // k) + (sum(d) % k!= 0)))"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(int(n * (n - 1) / 2))\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    boxes = list(map(int, stdin.split()[1:]))\n    part = []\n    for i in range(0, k):\n        for j in range(i + 1, k):\n            if (boxes[i] + boxes[j]) % k == 0:\n                part.append((i, j))\n    return str(len(part))"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lower_nth_char(string: str, n: int) -> str:\n        lower_n_th = string[n-1]\n        return lower_n_th.lower()\n    return lower_nth_char(stdin, int(stdin))"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    s = ''.join(stdin.split(' '))\n    return s.lower()[int(k)-1]\n\ns = solution(input())\nprint(s)"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    string = input()\n    string = string[:int(K)-1] + string[int(K)-1].upper() + string[int(K):]\n    return string\n    \n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    s = stdin.split()[2]\n    s = list(s)\n\n    s = list(map(str.lower, s))\n    print(''.join(s[k-1:] + s[:k-1]))\n    return s\n\n\nsolution(input())"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    s = input()\n    #  s = \"\".join(s.split()[1:])\n    print(s[int(K)-1])\n    return s"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower()[int(stdin.split()[1]) - 1]\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples:\n        Input:  solution('')\n        Output:  ''\n\n        Input:  solution('A')\n        Output:  ''\n\n        Input:  solution('A1B2C3D')\n        Output:  ''\n\n        Input:  solution('A1B2C3D4')\n        Output:  ''\n    \"\"\"\n    s = stdin\n\n    # Split the string on every space\n    s = s.split(' ')\n\n    # Loop over every word in the string and perform the following processes:\n    # 1. Remove the first letter from each word\n    # 2. Remove the last letter from each word\n    # 3. Upper case the first letter of each word\n    # 4. Remove the final space\n    # 5. Join all the words back together\n\n    for i, word in enumerate(s):\n        s[i] = word[1:-1].upper()\n\n    return''.join(s)\n\n\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.split()\n    new_string = list()\n    for i in range(n):\n        if i == k-1:\n            new_string.append(string[i].lower())\n        else:\n            new_string.append(string[i])\n    return ''.join(new_string)"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n    print(s.lower()[k-1])"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n\n    S = stdin.replace(\" \",\"\")\n    s = list(S)\n\n    for i in range(0, N):\n        if i + K > len(S):\n            break\n\n        s[i] = chr(ord(s[i]) - 32)\n\n    return ''.join(s)\n\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    S = stdin.split()[1]\n    S = S.split(\":\")\n    # print(S)\n    ans = []\n    for i in range(n):\n        if i == 0:\n            ans.append(i+1)\n            ans.append(i+1)\n        else:\n            if ans[i] > ans[i-1]:\n                ans.append(i+1)\n                ans.append(i+1)\n            else:\n                ans.append(ans[i-1]+1)\n                ans.append(i+1)\n    return \" \".join([str(x) for x in ans])\n\nsolution(\"6\")"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, *input = stdin.split()\n    n = int(n)\n    restaurants = input\n    restaurants = sorted(restaurants, key=lambda x: (x.split(' ')[1], x.split(' ')[0]))\n    print(\"\\n\".join(map(str, restaurants)))\n    return \"\\n\".join(map(str, restaurants))\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *restaurants = list(map(int, stdin.split()))\n    res = sorted(range(1, n + 1), key=lambda x: (-restaurants[x - 1], x))\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    restaurants, scores = stdin.splitlines()\n    # for each restaurant\n    for i in range(len(scores)):\n        # sort restaurants by scores in descending order\n        scores[i] = sorted(scores[i].split(), key=lambda x: x, reverse=True)\n        # print the restaurant with highest score\n        print(scores[i][-1])\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    alp = list(map(str, input().split()))\n    alp = sorted(alp)\n    alp.sort(key=lambda x: int(x))\n    print(*alp, sep='\\n')\n    return stdin\nsolution(input())\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    restaurants = []\n    for i in range(N):\n        restaurants.append((stdin.split()[i*2], int(stdin.split()[i*2+1])))\n    restaurants.sort(key=lambda x: x[1], reverse=True)\n    print(*[restaurants[i][0] for i in range(N)], sep=\"\\n\")\n    return \"\""
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = []\n    res.append(s[0])\n    if n == 1:\n        return res[0]\n    res.sort(reverse=True)\n    for i in range(1, n):\n        if res[0] > s[i]:\n            res.append(s[i])\n            res.sort(reverse=True)\n    return''.join(res)"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    s: str = stdin.split()[1]\n    ret: str = \"\"\n    citys: dict = dict()\n    for i in range(N):\n        k, v = stdin.split()[i + 2].split(\":\")\n        citys[k] = int(v)\n    citys = sorted(citys.items(), key=lambda item: (-item[1], item[0]))\n    for i in range(len(citys)):\n        ret += str(citys[i][0]) + \" \"\n    return ret"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for i in range(0, len(lines)):\n        score = lines[i].split(\" \")\n        score[2] = int(score[2])\n        score[3] = int(score[3])\n        score[4] = int(score[4])\n    score.sort(key = lambda x: (x[1], x[0]))\n    for i in range(0, len(score)):\n        score[i] = str(score[i][2])+\" \"+str(score[i][3])+\" \"+str(score[i][4])\n    return \"\\n\".join(score)\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        S = stdin.split('\\n')[i+1][:10].strip()\n        S = list(S)\n        S = sorted(S,reverse=True)\n        for j in range(i+1,N):\n            P_i = int(stdin.split('\\n')[i+1].split(' ')[1].strip())\n            P_j = int(stdin.split('\\n')[j+1].split(' ')[1].strip())\n            if P_i > P_j:\n                print(i+1,j+1)\n                break\n    return ''\n\nsolution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40')\nsolution('5\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nkhabarovsk 100\\nmoscow 100\\nkazan 100\\nmoscow 100\\nkazan 100\\nmoscow 100')\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\ub97c \uc77d\uc5b4\uc11c, \ubaa8\ub4e0 \uc218\ub97c \ub300\ube44\ud574 K\uc640 X\uc758 \uac12\uc744 \ubaa8\ub450 \uc785\ub825 \ubc1b\uace0, \ud55c \ud6c4\uc5d0 K\ub97c \ube80 \uac12\uc744 X\ub85c \ubc14\uafbc \ud6c4\uc5d0 \ub450 \uac12\uc744 \ube44\uad50\ud558\uc5ec\n    \ub450 \uac12\uc774 \uac19\uc740 \uacbd\uc6b0\ub294 YES, \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 NO\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc8fc\uc138\uc694.\n    \"\"\"\n    stdin = list(map(int, stdin.split()))\n    K, X = stdin\n    return \"YES\" if K - X >= 0 else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K < 1 or X < 1:\n        return \"No\"\n    if K == X:\n        return \"Yes\"\n    if K >= X:\n        if K - X <= 1000:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split(' ')\n    K, X = int(stdin[0]), int(stdin[1])\n\n    if (K*500) + (K*100) + (K*50) + (K*10) + (K*5) + (K*2) + K > X:\n        return 'Yes'\n    return 'No'\n\nprint(solution('2 900'))\n\n\n----END----\n\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return answer using given input.\n    \"\"\"\n    return \"Yes\" if int(stdin.split()[0]) >= int(stdin.split()[1]) else \"No\"\n\nsolution(\"2 900\")\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    K = int(stdin[0])\n    X = int(stdin[1])\n    if K > 0 and K <= 100 and X > 0 and X <= 1000000:\n        if K >= 500 and K <= X:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Error\"\n\n\nprint(solution(\"1 900\"))\nprint(solution(\"2 900\"))\nprint(solution(\"3 900\"))\nprint(solution(\"4 900\"))\nprint(solution(\"5 900\"))\nprint(solution(\"6 900\"))\nprint(solution(\"7 900\"))\nprint(solution(\"8 900\"))\nprint(solution(\"9 900\"))\nprint(solution(\"10 900\"))\nprint(solution(\"10 901\"))\nprint(solution(\"11 900\"))\nprint(solution(\"12 900\"))\nprint(solution(\"13 900\"))\nprint(solution(\"14 900\"))\nprint(solution(\"15 900\"))\nprint(solution(\"16 900\"))\nprint(solution(\"17 900\"))\nprint(solution(\"18 900\"))\nprint(solution(\"19 900\"))\nprint(solution(\"20 900\"))\nprint(solution(\"21 900\"))\nprint(solution(\"22 900\"))\nprint(solution(\"23 900\"))\nprint(solution(\"24 900\"))\nprint(solution(\"25 900\"))\nprint(solution(\"26 900\"))\nprint(solution(\"27 900\"))\nprint(solution(\"28 900\"))\nprint(solution(\"29 900\"))\nprint(solution(\"30 900\"))\nprint(solution(\"31 900\"))\nprint(solution(\"32 900\"))\nprint(solution(\"33 900\"))\nprint(solution(\"34 900\"))\nprint(solution(\"35 900\"))\nprint(solution(\"36 900\"))\nprint(solution(\"37 900\"))\nprint(solution(\"38 900\"))\nprint(solution(\"39 900\"))\nprint(solution(\"40 900\"))\nprint(solution(\"41 900\"))\nprint(solution(\"42 900\"))\nprint(solution(\"43 900\"))\nprint(solution(\"44 900\"))\nprint(solution(\"45 900\"))\nprint(solution(\"46 900\"))\nprint(solution(\"47 900\"))\nprint(solution(\"48 900\"))\nprint(solution(\"49 900\"))\nprint(solution(\"50 900\"))\nprint(solution(\"51 900\"))\nprint(solution(\"52 900\"))\nprint(solution(\"53 900\"))\nprint(solution(\"54 900\"))\nprint(solution(\"55 900\"))\nprint(solution(\"56 900\"))\nprint(solution(\"57 900\"))\nprint(solution(\"58 900\"))\nprint(solution(\"59 900\"))\nprint(solution(\"60 900\"))\nprint(solution(\"61 900\"))\nprint(solution(\"62 900\"))\nprint(solution(\"63 900\"))\nprint(solution(\"64 900\"))\nprint(solution(\"65 900\"))\nprint(solution(\"66 900\"))\nprint(solution(\"67 900\"))\nprint(solution(\"68 900\"))\nprint(solution(\"69 900\"))\nprint(solution(\"70 900\"))\nprint(solution(\"71 900\"))\nprint(solution(\"72 900\"))\nprint(solution(\"73 900\"))\nprint(solution(\"74 900\"))\nprint(solution(\"75 900\"))\nprint(solution(\"76 900\"))\nprint(solution(\"77 900\"))\nprint(solution(\"78 900\"))\nprint(solution(\"79 900\"))\nprint(solution(\"80 900\"))\nprint(solution(\"81 900\"))\nprint(solution(\"82 900\"))\nprint(solution(\"83 900\"))\nprint(solution(\"84 900\"))\nprint(solution(\"85 900\"))\nprint(solution(\"86 900\"))\nprint(solution(\"87 900\"))\nprint(solution(\"88 900\"))\nprint(solution(\"89 900\"))\nprint(solution(\"90 900\"))\nprint(solution(\"91 900\"))\nprint(solution(\"92 900\"))\nprint(solution(\"93 900\"))\nprint(solution(\"94 900\"))\nprint(solution(\"95 900\"))\nprint(solution(\"96 900\"))\nprint(solution(\"97 900\"))\nprint(solution(\"98 900\"))\nprint(solution(\"99 900\"))\nprint(solution(\"100 900\"))\nprint(solution(\"101 900\"))\nprint(solution(\"102 900\"))\nprint(solution(\"103 900\"))\nprint(solution(\"104 900\"))\nprint(solution(\"105 900\"))\nprint(solution(\"106 900\"))\nprint(solution(\"107 900\"))\nprint(solution(\"108 900\"))\nprint(solution(\"109 900\"))\nprint(solution(\"110 900\"))\nprint(solution(\"111 900\"))\nprint(solution(\"112 900\"))\nprint(solution(\"113 900\"))\nprint(solution(\"114 900\"))\nprint(solution(\"115 900\"))\nprint(solution(\"116 900\"))\nprint(solution(\"117 900\"))\nprint(solution(\"118 900\"))\nprint(solution(\"119 900\"))\nprint(solution(\"120 900\"))\nprint(solution(\"121 900\"))\nprint(solution(\"122 900\"))\nprint(solution(\"123 900\"))\nprint(solution(\"124 900\"))\nprint(solution(\"125 900\"))\nprint(solution(\"126 900\"))\nprint(solution(\"127 900\"))\nprint(solution(\"128 900\"))\nprint(solution(\"129 900\"))\nprint(solution(\"130 900\"))\nprint(solution(\"131 900\"))\nprint(solution(\"132 900\"))\nprint(solution(\"133 900\"))\nprint(solution(\"134 900\"))\nprint(solution(\"135 900\"))\nprint(solution(\"136 900\"))\nprint(solution(\"137 900\"))\nprint(solution(\"138 900\"))\nprint(solution(\"139 900\"))\nprint(solution(\"140 900\"))\nprint(solution(\"141 900\"))\nprint(solution(\"142 900\"))\nprint(solution(\"143 900\"))\nprint(solution(\"144 900\"))\nprint(solution(\"145 900\"))\nprint(solution(\"146 900\"))\nprint(solution(\"147 900\"))\nprint(solution(\"148 900\"))\nprint(solution(\"149 900\"))\nprint(solution(\"150 900\"))\nprint(solution(\"151 900\"))\nprint(solution(\"152 900\"))\nprint(solution(\"153 900\"))\nprint(solution(\"154 900\"))\nprint(solution(\"155 900\"))\nprint(solution(\"156 900\"))\nprint(solution(\"157 900\"))\nprint(solution(\"158 900\"))\nprint(solution(\"159 900\"))\nprint(solution(\"160 900\"))\nprint(solution(\"161 900\"))\nprint(solution(\"162 900\"))\nprint(solution(\"163 900\"))\nprint(solution(\"164 900\"))\nprint(solution(\"165 900\"))\nprint(solution(\"166 900\"))\nprint(solution(\"167 900\"))\nprint(solution(\"168 900\"))\nprint(solution(\"169 900\"))\nprint(solution(\"170 900\"))\nprint(solution(\"171 900\"))\nprint(solution(\"172 900\"))\nprint(solution(\"173 900\"))\nprint(solution(\"174 900\"))\nprint(solution(\"175 900\"))\nprint(solution(\"176 900\"))\nprint(solution(\"177 900\"))\nprint(solution(\"178 900\"))\nprint(solution(\"179 900\"))\nprint(solution(\"180 900\"))\nprint(solution(\"181 900\"))\nprint(solution(\"182 900\"))\nprint(solution(\"183 900\"))\nprint(solution(\"184 900\"))\nprint(solution(\"185 900\"))\nprint(solution(\"186 900\"))\nprint(solution(\"187 900\"))\nprint(solution(\"188 900\"))\nprint(solution(\"189 900\"))\nprint(solution(\"190 900\"))\nprint(solution(\"191 900\"))\nprint(solution(\"192 900\"))\nprint(solution(\"193 900\"))\nprint(solution(\"194 900\"))\nprint(solution(\"195 900\"))\nprint(solution(\"196 900\"))\nprint(solution(\"197 900\"))\nprint("
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    # return \"Yes\"\n\n    K, X = map(int, stdin.split(\" \"))\n    if K == 1 and X <= 1000:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    K = K if K < 500 else 500\n    X = X if X < 1000 else 1000\n    for k in range(1, 501):\n        if (K - k) % 2 == 0:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    for i in range(k):\n        if x < k * 500:\n            return 'No'\n        x = x - k * 500\n        if x < k * 100:\n            return 'No'\n        x = x - k * 100\n        if x < k * 100:\n            return 'No'\n        x = x - k * 100\n        if x < k * 100:\n            return 'No'\n        x = x - k * 100\n        if x < k * 100:\n            return 'No'\n        x = x - k * 100\n        if x < k * 100:\n            return 'No'\n        x = x - k * 100\n        if x < k * 100:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [K, X] = stdin.split(' ')\n    K = int(K)\n    X = int(X)\n    if K <= X <= 500:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin.split():\n        if int(i) > 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(stdin)\n    N, K = int(stdin[0]), int(stdin[1])\n    if N == 1 and K == 0:\n        return 0\n    if N == 1 and K >= 1:\n        return 1\n    if N == 2 and K == 1:\n        return 1\n    if N == 3 and K == 2:\n        return 1\n    if N == 4 and K == 3:\n        return 1\n    if N == 5 and K == 4:\n        return 1\n    if N == 6 and K == 5:\n        return 1\n    if N == 7 and K == 6:\n        return 1\n    if N == 8 and K == 7:\n        return 1\n    if N == 9 and K == 8:\n        return 1\n    if N == 10 and K == 9:\n        return 1\n    return 0\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(1 - 4 * (K - 1) / (2 * N) - (K - 1) * (K - 2) / (6 * N) + (K - 1) * (K - 2) / (12 * N))\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(1 - (1 - (1 / (2**n))**(k - 1)) / (2**n - 1))\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{1 / (1 + math.pow(2, -n)) * (1 / (1 + math.pow(2, -k)) - 1)}\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.9f}'.format(float(stdin) / 48.0 + float(stdin) / 24.0 + float(stdin) / 12.0)\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(float(stdin) / 48 + float(stdin) / 24 + float(stdin) / 12)\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    score = 1\n    while score < K:\n        score *= 2\n        if score < K:\n            score += 1\n    score += (score - 1)\n    if score == K:\n        print(1)\n    else:\n        print(0)\n    return"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    result = 0.0\n    while N >= 0:\n        score = N\n        tails = 0\n        while True:\n            if score == 0:\n                break\n            if score % 2 == 0:\n                score /= 2\n                tails += 1\n            elif score % 2 == 1:\n                score *= 2\n                tails += 1\n            if score > K:\n                break\n        if tails > 0:\n            result += 1/tails\n        N -= 1\n    return str(result)\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    * Note:\n    - 0.145833333333 = 1/48, = 1/48 * (1/2)^4\n    - 0.1 = 1/48 * (1/2)^4, = 1/48 * (1/2)^4 * (1/2)^4\n    - 0.10 = 1/48 * (1/2)^4 * (1/2)^4, = 1/48 * (1/2)^4 * (1/2)^4 * (1/2)^4\n    - 0.01 = 1/48 * (1/2)^4 * (1/2)^4 * (1/2)^4, = 1/48 * (1/2)^4 * (1/2)^4 * (1/2)^4 * (1/2)^4\n    - 0.0001 = 1/48 * (1/2)^4 * (1/2)^4 * (1/2)^4 * (1/2)^4, = 1/48 * (1/2)^4 * (1/2)^4 * (1/2)^4 * (1/2)^4 * (1/2)^4\n    '''\n    stdin = list(map(int, stdin.split()))\n    return str(1 / ((1 / (stdin[0] * (1 / stdin[1]))) * (1 / stdin[0])))\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    return str(float(input[0])/int(input[1]))\nprint(solution(input))"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day, next_day = stdin.split()\n    if day == \"SUN\":\n        print(0)\n        return\n    if day == \"MON\":\n        if next_day == \"FRI\":\n            print(1)\n            return\n        print(3)\n        return\n    if day == \"TUE\":\n        if next_day == \"FRI\":\n            print(1)\n            return\n        if next_day == \"SAT\":\n            print(2)\n            return\n        print(3)\n        return\n    if day == \"WED\":\n        if next_day == \"SAT\":\n            print(1)\n            return\n        if next_day == \"FRI\":\n            print(1)\n            return\n        print(3)\n        return\n    if day == \"THU\":\n        if next_day == \"SAT\":\n            print(1)\n            return\n        if next_day == \"FRI\":\n            print(1)\n            return\n        print(3)\n        return\n    if day == \"FRI\":\n        if next_day == \"MON\":\n            print(1)\n            return\n        if next_day == \"TUE\":\n            print(1)\n            return\n        print(3)\n        return\n    if day == \"SAT\":\n        if next_day == \"MON\":\n            print(1)\n            return\n        if next_day == \"WED\":\n            print(2)\n            return\n        print(3)\n        return\n    return"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin\n    day += 1\n    day_check = 0\n    while day!= 6:\n        if day == 1 or day == 2 or day == 3 or day == 4 or day == 5:\n            day_check += 1\n        day += 1\n    print(day_check)\nsolution(day)\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    saturday = stdin\n    \n    for day in range(1, 8):\n        saturday = saturday[:5] + str(int(saturday[5]) + 1) + saturday[6:]\n        \n    return saturday\n    \n    \n    \n    "
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    days = stdin\n    \n    if days == 'SUN':\n        return str(1)\n    elif days == 'MON':\n        return str(2)\n    elif days == 'TUE':\n        return str(3)\n    elif days == 'WED':\n        return str(4)\n    elif days == 'THU':\n        return str(5)\n    elif days == 'FRI':\n        return str(6)\n    elif days == 'SAT':\n        return str(7)\n    \n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"It is Sunday today, and tomorrow will be \" + str(next_sunday(stdin))\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build a string of the day of the week given stdin and return it.\n\n    >>> solution(\"SAT\")\n    \"SUN\"\n    >>> solution(\"WED\")\n    \"TUE\"\n    >>> solution(\"THU\")\n    \"FRI\"\n    \"\"\"\n    day, count = stdin.split()\n    if day == \"SUN\":\n        return \"SUN\"\n    if day == \"MON\":\n        return \"TUE\"\n    if day == \"TUE\":\n        return \"WED\"\n    if day == \"WED\":\n        return \"THU\"\n    if day == \"THU\":\n        return \"FRI\"\n    if day == \"FRI\":\n        return \"SAT\"\n    if day == \"SAT\":\n        return day\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    week = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    days_in_week = {'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6}\n\n    day = stdin.upper()\n\n    if day not in week:\n        raise ValueError('Invalid day')\n\n    return str(days_in_week[day] + 1)\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    first_day = int(input_data[0])\n    print(first_day)\n    day = first_day\n    while day < 7:\n        day += 1\n        if day == 7:\n            day = 0\n        if day == 6:\n            day = 1\n        if day == 5:\n            day = 2\n        if day == 4:\n            day = 3\n        if day == 3:\n            day = 4\n        if day == 2:\n            day = 5\n        if day == 1:\n            day = 6\n    print(day)\nsolution(input())\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin\n    if day == \"SUN\":\n        return \"SUN\"\n    elif day == \"MON\":\n        return \"MON\"\n    elif day == \"TUE\":\n        return \"TUE\"\n    elif day == \"WED\":\n        return \"WED\"\n    elif day == \"THU\":\n        return \"THU\"\n    elif day == \"FRI\":\n        return \"FRI\"\n    elif day == \"SAT\":\n        return \"SAT\""
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calc(r,d,i):\n        return r*(i+1)-d\n\n    r,d,x=int(stdin.split()[0]),int(stdin.split()[1]),int(stdin.split()[2])\n    for i in range(2001,2011):\n        x+=calc(r,d,i)\n    return str(x)\nsolution(input())\n'''"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, r, x = map(int, stdin.split())\n    # WRITE YOUR SOLUTION BELOW\n    # Hint: try to use for loops\n    if x <= d:\n        x = 0\n    else:\n        x = x - d\n    for i in range(2001, 2011):\n        x = r * x - d\n        print(x)\n    return"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [r, d, x_2000] = list(map(int, stdin.split()))\n    delta = r * x_2000 - d\n    for i in range(2001, 2012):\n        x_i = r * x_i + delta\n        print(x_i)\n    return \"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = stdin.split()\n    x = []\n    x.append(x_2000)\n    for i in range(2001, 2011):\n        x.append(int(x[i-2000]) - int(D))\n    return \"\\n\".join(map(str, x))"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    r, D, x = stdin.split()\n    r, D, x = int(r), int(D), int(x)\n    x = r * x - D\n    for i in range(2001, 2011):\n        x = x + r * x - D\n        print(x)\n    return \"\"\n\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    r_ = r\n    d = D\n    x_ = x_2000\n    x_list = [x_]\n    for i in range(2001, 2011):\n        x_ += r_ * x_\n        x_ = r_ * x_ - d\n        x_list.append(x_)\n    return '\\n'.join(map(str, x_list))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, d, x = list(map(int, stdin.split()))\n    x = x - r * d\n    for i in range(2001, 2011):\n        x = x + d\n    return str(x)"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = stdin.split()\n    return''.join(str(x) for x in range(int(x_2000), int(x_2000) + 10))\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    for i in range(2000, 2011):\n        x_i = r * x_2000 - D\n        print(x_i)\n        x_2000 = x_i\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dp(i, r, d):\n        if i == 0:\n            return d\n        return d + (r * dp(i - 1, r, d))\n\n    _, r, d = stdin.split()\n    r, d = int(r), int(d)\n    print(dp(10, r, d))\n    return stdin\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  arr = list(map(int, stdin.strip().split()))\n  \n  for i in range(n - 1):\n    if (arr[i] > 0 and arr[i + 1] > 0) or (arr[i] > 0 and arr[i + 1] < 0):\n      return '0'\n    \n  if arr[-1] == 0:\n    return '0'\n    \n  ans = []\n  sum = 0\n  for i in range(n):\n    sum += arr[i]\n    ans.append(sum)\n  \n  return str(max(ans))\n  \n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    a = max(arr)\n    b = len(arr)\n    c = sum(arr)\n    d = sum([(b * i + 1) * i for i in range(b)])\n    e = sum([(b * i + b) * i for i in range(b)])\n    f = sum([(b * i + b + 1) * i for i in range(b)])\n    g = sum([(b * i + b + c) * i for i in range(b)])\n    h = sum([(b * i + b + c + 1) * i for i in range(b)])\n    if a == c:\n        print(d)\n    elif a == c + 1:\n        print(e)\n    elif a == c + 2:\n        print(f)\n    elif a == c + 3:\n        print(g)\n    elif a == c + 4:\n        print(h)\n    else:\n        print(0)\n    return 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.strip().split()))\n    #print(n, d)\n    return str(max(d))\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n\n    def sum_of_three_sums(arr):\n        s1, s2, s3 = 0, 0, 0\n        for i, num in enumerate(arr):\n            s1 += num\n            if s1 == s3:\n                return s1, s2, s3\n            s2 += num\n            if s2 == s3:\n                return s1, s2, s3\n            s3 += num\n        return -1\n\n    return max(sum_of_three_sums(arr))\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = list(map(int, stdin.split()))\n    return str(max(sum(d[:i]) + sum(d[i + 1:]) for i in range(N)))\n\n\nsolution('5')\nsolution('1 3 1 1 4')\nsolution('3 2')\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    d = list(map(int, stdin.splitlines()[1]))\n\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    def _solution(d: list):\n        assert len(d) >= 2\n\n        # \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445\n        # \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438\n        if d[0] + d[1] == d[2]:\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0441 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c\n            if d[0] == d[2]:\n                return 0\n            return 1 + _solution(d[1:])\n        elif d[0] - d[1] == d[2]:\n            return 2 + _solution(d[1:])\n        else:\n            return 1 + _solution(d[1:])\n\n    print(_solution(d))\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.strip().split()))\n    a = 0\n    b = n\n    c = n\n    for i in d:\n        if i > a:\n            a = i\n        elif i > b:\n            b = i\n        elif i > c:\n            c = i\n    return str(a + b + c)\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    return str(max(\n        partition(d, i, i + 3)\n        for i in range(n + 1)\n        if sum(d[i:i + 3]) == max(sum(d[i:i + 3])))\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = list(map(int, stdin.split()))\n    n = len(d)\n    a, b, c = 0, 0, n\n    while a < n:\n        while b <= n and d[b - 1] == d[b]:\n            b += 1\n        while c <= n and d[c - 1] == d[c]:\n            c += 1\n        a, b, c = b - 1, c - 1, n\n        s1 = sum(d[a:b])\n        s2 = sum(d[b:c])\n        if s1 == s2:\n            return str(s2)\n    return str(0)\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        x, y, z = map(int, stdin.strip().split())\n        if x > y:\n            if y > z:\n                if x > z:\n                    print('NO')\n                else:\n                    print('YES', x, y, z)\n            else:\n                print('YES', x, z, y)\n        else:\n            if y > x:\n                if y > z:\n                    print('NO')\n                else:\n                    print('YES', x, y, z)\n            else:\n                print('YES', y, x, z)\n    return 'OK'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        x, y, z = map(int, stdin.split())\n        if x == max(x, y) and y == max(x, z) and z == max(y, z):\n            print('YES')\n            print(max(x, y), max(x, z), max(y, z))\n        else:\n            print('NO')\n            print(max(x, y), max(x, z), max(y, z))\n    return"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        x, y, z = map(int, stdin.split())\n        if (x >= max(y, z)) and (y >= max(x, z)) and (z >= max(x, y)):\n            print(\"NO\")\n        else:\n            print(\"YES\", max(x, y, z), min(x, y, z))\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    t = int(input)\n    for _ in range(t):\n        input = stdin.strip().split('\\n')\n        x, y, z = map(int, input[0].split())\n        a = max(x, y)\n        b = max(x, z)\n        c = max(y, z)\n        if a == x and b == y and c == z:\n            print('NO')\n        else:\n            print(f'{a} {b} {c}')\n    return ''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, y, z = map(int, stdin.split())\n        if x == y == z:\n            print(\"NO\")\n        elif x <= max(y, z) and y <= max(x, z) and z <= max(x, y):\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        nums = list(map(int, stdin.split()))\n        if (nums[0] > nums[1] and nums[1] > nums[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    while n:\n        x, y, z = inp[1], inp[2], inp[3]\n        if x > max(y, z):\n            if x > max(y, z) and x > max(y, z):\n                if x > max(y, z) and x > max(y, z):\n                    if x > max(y, z):\n                        return \"NO\"\n        elif x > max(y, z):\n            if x > max(y, z) and x > max(y, z):\n                if x > max(y, z) and x > max(y, z):\n                    if x > max(y, z):\n                        return \"NO\"\n        elif y > max(x, z):\n            if y > max(x, z) and y > max(x, z):\n                if y > max(x, z) and y > max(x, z):\n                    if y > max(x, z):\n                        return \"NO\"\n        elif y > max(x, z):\n            if y > max(x, z) and y > max(x, z):\n                if y > max(x, z) and y > max(x, z):\n                    if y > max(x, z):\n                        return \"NO\"\n        elif z > max(x, y):\n            if z > max(x, y) and z > max(x, y):\n                if z > max(x, y) and z > max(x, y):\n                    if z > max(x, y):\n                        return \"NO\"\n        elif z > max(x, y):\n            if z > max(x, y) and z > max(x, y):\n                if z > max(x, y) and z > max(x, y):\n                    if z > max(x, y):\n                        return \"NO\"\n        n -= 1\n    return \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, y, z = map(int, stdin.split())\n        if x <= y or y <= z or x <= z:\n            print('NO')\n        else:\n            print('YES')\n            print(max(x, y), max(x, z), max(y, z))\n        return\n\nsolution(input())\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, y, z = map(int, stdin.split())\n        if x <= z <= y:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        x, y, z = map(int, stdin.strip().split())\n        if x >= y and x >= z:\n            print(\"YES\")\n            print(x, y, z)\n        elif y >= x and y >= z:\n            print(\"YES\")\n            print(x, y, z)\n        elif z >= x and z >= y:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution()\n\n'''\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_count = 0\n    s = set(a)\n    for i in range(k - 1, m):\n        a.sort()\n        if a[i] > a[i - 1]:\n            continue\n        left = 0\n        right = i\n        cnt = 0\n        while right < n:\n            if a[left] <= a[right]:\n                cnt += 1\n                left = right\n            else:\n                right += 1\n            if cnt >= max_count:\n                max_count = cnt\n    return str(max_count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(len(a) - sum([(a[i] + 1) // k for i in range(m)]), len(a) - 1))\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def dfs(i, a, idx):\n        if i == len(a):\n            return 0\n\n        res = 0\n        for j in range(idx, len(a)):\n            if a[j] <= a[i] and dfs(i + 1, a, j + 1) + 1 > res:\n                res = dfs(i + 1, a, j + 1) + 1\n        return res\n\n    return dfs(0, a, 0)\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    while a:\n        if len(a) == 1:\n            ans += 1\n            break\n        if a[0] + a[-1] > k:\n            a.pop(0)\n            a.pop()\n            ans += 1\n        else:\n            ans += 1\n            a.pop(0)\n    return str(ans)\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        a.sort()\n        if a[i] <= k:\n            k -= a[i]\n            a.remove(a[i])\n            k = max(k, 0)\n    print(len(a))\n    return ''\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    sum = 0\n    while len(a)!= 1:\n        if sum + a[0] > k:\n            a = a[1:]\n        else:\n            sum += a[0]\n            a = a[1:]\n    return str(len(a))\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n < m or n < k:\n        return 0\n    a.sort(reverse=True)\n    res = 0\n    while n > 0:\n        if a[0] <= m:\n            res += 1\n            m -= a[0]\n            n -= 1\n        else:\n            m -= a[0]\n        a = a[1:]\n    return res\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 2 6\n   ... 5 2 1 4 2\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 5 1 4\n   ... 4 2 3 4 1\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 5 3 3\n   ... 1 2 3 1 1\n   ... ''')\n    '5'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = 0\n    b = a[::]\n    while len(a) > 0:\n        if c == m:\n            break\n        i = 0\n        c += 1\n        while True:\n            if sum(a) >= k:\n                break\n            elif i == len(b) and sum(a) < k:\n                break\n            elif sum(a) >= k:\n                a.append(b.pop(0))\n                c += 1\n                if sum(a) == k:\n                    break\n            i += 1\n    return str(c)\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    while sum(a) > k:\n        a_list = sorted(a)\n        i, j = 0, len(a_list) - 1\n        while a_list[i] + a_list[j]!= k:\n            if a_list[i] + a_list[j] > k:\n                j -= 1\n            else:\n                i += 1\n        a_list.pop(i)\n        a_list.pop(j)\n        a_list.sort()\n        if i == j:\n            i += 1\n            j = len(a_list) - 1\n        a = a_list[:i] + a_list[i:j] + a_list[j:]\n        cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split(\"\\n\")\n    n, m, k = int(n), int(m), int(k)\n    a = sorted(stdin.split(\"\\n\")[1].split(\" \"))\n    res = 0\n    for i in range(m):\n        res += max(a[i], k - a[i])\n    print(res)\n    return res"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.strip()\n    letters = list(map(chr, range(97, 97 + k)))\n    all_substrings = []\n    for letter in letters:\n        for i in range(n):\n            all_substrings.append(s[i: i + n])\n    print(len(all_substrings))\n    return\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    s = stdin[1]\n    c = list(stdin[2])\n    t = ''\n    for i in range(n):\n        for j in range(n):\n            t = t + s[i:j + 1]\n    res = 0\n    if len(t) == 0:\n        return 0\n    if len(t) == 1:\n        if c.count(t[0]) == 1:\n            return 1\n        else:\n            return 0\n    else:\n        i = 0\n        j = len(c) - 1\n        while i <= j:\n            if c.count(t[i]) == 1 and c.count(t[j]) == 1:\n                if c.index(t[i]) == c.index(t[j]):\n                    j -= 1\n                else:\n                    i += 1\n            elif c.count(t[i]) == 1:\n                i += 1\n            elif c.count(t[j]) == 1:\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n    return res\n\n\nsolution(\"1 3\\nabacaba\\nf a\\nd\")\nsolution(\"1 4\\nabacaba\\nf a\\nd\")\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    n = min(n, k)\n    s = stdin\n    s = s.replace(\" \", \"\")\n    sub = []\n    for i in range(0, len(s)):\n        sub += s[i]\n        if len(sub) == n:\n            sub.pop(0)\n    return str(len(sub))\n\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = map(int, stdin[0].split())\n    s = stdin[1]\n    c = stdin[2]\n    return str(int((n * (n + 1)) / 2))\n\nsolution('{} {}'.format(n, k))\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[1]\n    valid_chars = list(map(str, range(1, 27)))\n\n    return f'{len(s) - n + n ** 2 / 2}'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.strip()\n\n    x = 1\n    for i in range(1, n):\n        x = x * (i + 1)\n\n    count = x / 2\n    for c in string:\n        count -= 1\n        if c in string:\n            count += 1\n\n    return str(int(count))\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()[1]\n    st = stdin.split()[2]\n\n    res = 0\n    for i in range(n - 1):\n        if st == s[i:i + 2]:\n            res += 1\n    print(res)\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.split()[1]\n    letters = stdin.split()[2]\n    print(len(string) // (len(letters) + 1))\n    print(int(len(string) / (len(letters) + 1)))\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[1]\n    t = stdin[2]\n    s_len = len(s)\n    c_len = len(t)\n\n    if n < s_len:\n        return 0\n    if n < k:\n        return 0\n\n    if c_len!= k:\n        return 0\n\n    if k == 1:\n        return n\n    if k == 2:\n        if n <= 4:\n            return n * (n - 1) * (n - 2) // 6\n        else:\n            return (n - 4) * (n - 3) * (n - 2) * (n - 1) // 6\n    if k > 2 and k % 2 == 0:\n        return (n - k + 1) * (n - k) * (n - k + 1) // 6\n    if k % 2 == 1:\n        return (n - k + 1) * (n - k) * (n - k - 1) // 6\n\n\nprint(solution('7 2\\nabacaba\\nf a d'))\nprint(solution('10 3\\nsadfaasdda\\nf a d'))\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    for _ in range(n):\n        a = list(map(int, stdin.split()))\n        a.sort(key=lambda x: -1 * x)\n        ans.append(a)\n    print(*ans)\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def to_str(arr: list) -> str:\n        return''.join(map(str, arr))\n\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if N == 1:\n        return str(sum(arr))\n    A = list(map(str, arr))\n    A = list(set(A))\n    A.sort(key=lambda x: -len(x))\n    print(to_str(A))\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    best_sum = 0\n    best_sub = []\n\n    for size in range(1, n+1):\n        for i in range(len(a)-size+1):\n            if sum(a[i:i+size]) > best_sum:\n                best_sum = sum(a[i:i+size])\n                best_sub = a[i:i+size]\n\n    print(' '.join(map(str, best_sub)))"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    max_so_far = 0\n    for i in range(n):\n        current = 0\n        prev = a[i]\n        for j in range(i+1, n):\n            current += abs(a[j] - prev)\n            prev = a[j]\n        if current > max_so_far:\n            max_so_far = current\n    return str(max_so_far)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    max_sum = 0\n    max_len = 0\n    for i in range(n):\n        if i == 0 or a[i - 1]!= a[i]:\n            k = 1\n        else:\n            k = 2\n        sum_a = 0\n        while k <= n:\n            j = i\n            while j + k < n + 1 and a[j + k] == a[i]:\n                sum_a += a[j + k]\n                k += 1\n            if sum_a > max_sum:\n                max_sum = sum_a\n                max_len = k\n            k += 1\n    print(max_len)\n    return str(max_sum)\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max = 0\n    for i in range(n):\n        j = 0\n        add = 0\n        while j < n:\n            if a[j] > 0:\n                add += a[j]\n                j += 2\n            else:\n                j += 1\n        if max < add:\n            max = add\n    return str(max)\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # return maximum by size alternating subsequence of given sequence\n    #   - element is the opposite from the element before it\n    #   - subsequence is alternating so that every element is the opposite\n    #   from the next (except for the last element)\n    #   - output is maximum\n    #   - if max elements are of the same value then max is sum of elements\n    #   - else max is the sum of largest of the max\n    #   - if max is negative then max is sum of abs(max)\n    #   - if sum is bigger then -max then return abs(sum)\n\n    n = len(stdin.split())\n    # sequence: list[int] = list(map(int, stdin.split()))\n    sequence = list(map(int, stdin.split()))\n    # sort sequence by length\n    sequence = sorted(sequence, key=lambda x: len(x))\n    # build alternating subsequence\n    # alternating subsequence will contain the elements of the sequence\n    #   - if its length is even then alternating subsequence will contain elements\n    #   - if its length is odd then alternating subsequence will contain elements\n    #       1 and -1 as alternating subsequence starts with the positive element\n    #       (i.e. alternating subsequence will have alternating first element)\n    #   - if its length is zero then alternating subsequence is empty\n    #   - alternating subsequence ends when the sequence length is zero\n    #   - if the sequence is negative then alternating subsequence will contain\n    #       -1 and -1\n    #   - if the sequence is negative then alternating subsequence will contain\n    #       -1 and 1\n    if len(sequence)!= 0:\n        if len(sequence) % 2 == 0:\n            sequence.insert(len(sequence) // 2, 1)\n        else:\n            sequence.insert(len(sequence) // 2, -1)\n        alternating = sequence\n    else:\n        alternating = []\n\n    def find_max(lst):\n        # return maximum\n        #   - if max elements are of the same value then max is sum of elements\n        #   - else max is the sum of largest of the max\n        #   - if max is negative then max is sum of abs(max)\n        #   - if sum is bigger then -max then return abs(sum)\n        if len(lst) == 0:\n            return 0\n        if len(lst) == 1:\n            return lst[0]\n\n        # calculate max and sum\n        max_sum = max(lst[0], lst[1])\n        # sum_max = lst[0] + lst[1]\n        sum_max = max(lst[0], lst[1])\n\n        # if max and sum are equal then max_sum is sum of max\n        if max_sum == sum_max:\n            return max_sum\n\n        # else if max is negative and sum is positive then max_sum is sum of abs(max)\n        if max_sum > 0 and sum_max < 0:\n            return abs(max_sum)\n\n        # else if sum is negative and max is positive then max_sum is sum of abs(sum)\n        elif max_sum < 0 and sum_max > 0:\n            return abs(sum_max)\n\n        # else max_sum is sum_max\n        return max(max_sum, sum_max)\n\n    # return maximum by size alternating subsequence of given sequence\n    #   - element is the opposite from the element before it\n    #   - subsequence is alternating so that every element is the opposite\n    #   - output is maximum\n    #   - if max elements are of the same value then max is sum of elements\n    #   - else max is the sum of largest of the max\n    #   - if max is negative then max is sum of abs(max)\n    #   - if sum is bigger then -max then return abs(sum)\n    #\n    #   example:\n    #   sequence:  [1, 2, 3, 4, 5, 6]\n    #   alternating:  [1, -2, 3, -4, 5, -6]\n    #   output:  7\n    #   since in the sequence 6 is the largest element, sum of the subsequence is the sum of 6\n\n    # first calculate sum and sum of max\n    sum = 0\n    max_sum = 0\n    for i in range(len(sequence)):\n        sum += sequence[i]\n        max_sum += find_max(alternating[i:])\n\n    # if sum is bigger then -max then return abs(sum)\n    if sum > -max_sum:\n        return abs(sum)\n    else:\n        return max_sum\n\n\nt = int(input())  # read number of tests\nfor i in range(t):\n    sequence = []\n    n = int(input())  # read number of elements\n    for j in range(n):\n        sequence.append(int(input()))  # read elements of sequence\n    print(solution(str(sequence)))\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_applicable(arr):\n        flag = False\n        sum_so_far = 0\n        for i, n in enumerate(arr):\n            if i == 0:\n                if n > 0:\n                    return False\n                elif n < 0:\n                    return False\n                else:\n                    pass\n            else:\n                if n > 0:\n                    if n < 0:\n                        return False\n                    else:\n                        sum_so_far += n\n                else:\n                    if sum_so_far > 0:\n                        sum_so_far -= n\n                    else:\n                        flag = True\n                        break\n        if flag:\n            return True\n        else:\n            return False\n\n    def sol(n, a):\n        if n == 1:\n            return a\n        else:\n            if a[n - 1] < 0:\n                return sol(n - 1, a)\n            else:\n                if a[n - 1] > 0:\n                    a[n - 1] = -a[n - 1]\n                    return sol(n - 1, a)\n                else:\n                    a[n - 1] = -a[n - 1]\n                    return sol(n - 1, a)\n\n    def sol_longer(n, a):\n        if n == 1:\n            return a\n        else:\n            a[n - 1] = -a[n - 1]\n            return sol_longer(n - 1, a)\n\n    n = int(stdin)\n    arr = []\n    for _ in range(n):\n        arr.append(int(stdin.readline()))\n    if is_applicable(arr):\n        return \" \".join([str(x) for x in sol(len(arr), arr)])\n    else:\n        return \" \".join([str(x) for x in sol_longer(len(arr), arr)])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        ans = []\n        a.sort()\n        if n == 1:\n            return a[0]\n        a_arr = []\n        for i in range(len(a)):\n            a_arr.append(a[i])\n        a_arr.append(0)\n        a_arr.sort()\n        prev_max = 0\n        for j in range(n - 1):\n            curr_max = a_arr[j] + a_arr[j + 1]\n            if curr_max > prev_max:\n                ans.append(a_arr[j + 1])\n                ans.append(a_arr[j])\n                prev_max = curr_max\n        ans.append(a_arr[-2])\n        ans.append(a_arr[-1])\n        return str(max(ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for _ in range(n):\n        n = int(stdin.strip())\n        nums = stdin.strip().split()\n        nums = list(map(int, nums))\n        res = []\n        # k = 0\n        # sum = 0\n        for i in range(n):\n            if i % 2 == 0:\n                res.append(nums[i])\n            else:\n                res.append(-nums[i])\n        print(res)\n        return str(max(res))\n\nsolution(input())\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        g[u].append(v)\n        g[v].append(u)\n    n_succ = [0 for _ in range(n)]\n    max_deg = 0\n    for i in range(n):\n        n_succ[i] = len(g[i])\n        if max_deg < n_succ[i]:\n            max_deg = n_succ[i]\n    res = ''\n    for i in range(n):\n        if n_succ[i] == max_deg:\n            res += str(i) +''\n    return res\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = {}\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        if v in edges:\n            edges[v].add(u)\n        else:\n            edges[v] = {u}\n        if u in edges:\n            edges[u].add(v)\n        else:\n            edges[u] = {v}\n    res = []\n    for i in range(n):\n        if i not in edges:\n            res.append(str(i))\n        else:\n            edges_i = edges[i]\n            res.append(str(i) +'' +''.join(map(str, sorted(edges_i))))\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(i) for i in stdin.split()] for _ in range(m)]\n    vertices = [i for i in range(n)]\n\n    graph = {v: set() for v in vertices}\n    for v, u in edges:\n        graph[v].add(u)\n        graph[u].add(v)\n\n    vertices.sort(key=lambda x: len(graph[x]), reverse=True)\n    edges_count = 0\n\n    for vertex in vertices:\n        edges_count += len(graph[vertex])\n    return str(edges_count)\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_path(start, end, visited):\n        path = [start]\n        while path[-1]!= end:\n            path.append(visited[path[-1]])\n        path.append(end)\n        return path\n\n    def solution(n, edges):\n        graph = {}\n        for u, v in edges:\n            if u not in graph:\n                graph[u] = set()\n            if v not in graph:\n                graph[v] = set()\n            graph[u].add(v)\n            graph[v].add(u)\n        visited = {}\n        for v in range(1, n + 1):\n            if v not in graph:\n                visited[v] = set()\n        visited[1] = set()\n        visited[1].add(1)\n        edges = {}\n        for u, v in graph.items():\n            for v in v:\n                if u not in visited[v]:\n                    visited[v].add(u)\n                edges[(u, v)] = 0\n        for v in range(2, n + 1):\n            queue = {(u, 0) for u in visited[v]}\n            visited[v] = set()\n            while queue:\n                visited[v] = visited[v] | queue\n                for (u, w) in queue:\n                    for uu in graph[u]:\n                        if uu not in visited[v]:\n                            visited[v].add(uu)\n                        if uu not in queue:\n                            queue.add((uu, w + 1))\n                queue = queue - visited[v]\n        stack = []\n        for v in range(2, n + 1):\n            if v in visited[v]:\n                stack.append(v)\n        return str(len(stack) - 1) +'' +''.join(str(v) for v in stack)\n\n    return''.join(solution(*map(int, stdin.split('\\n')))\n                    for _ in range(int(stdin.split('\\n')[0])))\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    return '\\n'.join(' '.join(map(str, e)) for e in edges)\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = list(map(int, lines[0].split()))\n    # print(n, m)\n    edges = list()\n    for _ in range(m):\n        e = lines.pop(0).split()\n        edges.append((int(e[0]), int(e[1])))\n    # print(edges)\n\n    def edgestovertices(e):\n        # print(e)\n        edges = set()\n        for i in e:\n            edges.add(i)\n        return edges\n\n    # print(edges)\n    edges_from_to = {}\n    edges_from = {}\n    edges_to = {}\n    for e in edges:\n        e1, e2 = e\n        edges_from_to[e1] = e2\n        edges_from_to[e2] = e1\n\n        if e1 not in edges_from:\n            edges_from[e1] = set()\n        edges_from[e1].add(e2)\n        if e2 not in edges_from:\n            edges_from[e2] = set()\n        edges_from[e2].add(e1)\n\n        if e1 not in edges_to:\n            edges_to[e1] = set()\n        edges_to[e1].add(e2)\n        if e2 not in edges_to:\n            edges_to[e2] = set()\n        edges_to[e2].add(e1)\n\n    # print(edges_from_to)\n    # print(edges_from)\n    # print(edges_to)\n    # print(edges_from_to)\n    def connected(e):\n        return e in edges_from_to\n\n    def degree(v):\n        # print(v)\n        if v not in edges_from:\n            return 0\n        return len(edges_from[v])\n\n    def degree_all(e):\n        # print(e)\n        s = 0\n        for i in e:\n            s += degree(i)\n        return s\n\n    def vertices_no_edges():\n        # print(edges)\n        return set(range(1, n + 1)) - set(edges)\n\n    def vertices_no_edges_without_endpoints():\n        # print(edges)\n        return set(range(1, n + 1)) - set(edges) - {1, n}\n\n    def has_odd_degree():\n        # print(degree(1))\n        return degree(1) % 2 == 1\n\n    def is_complete():\n        # print(edges)\n        return len(edges_from) == n\n\n    def is_complete_without_endpoints():\n        # print(edges)\n        return len(edges_from) == n - 1\n\n    def max_degree():\n        return max(degree(i) for i in range(1, n + 1))\n\n    def has_degree(d):\n        # print(degree(1))\n        return degree(1) == d\n\n    def has_odd_degree_without_endpoints():\n        # print(degree(1))\n        return degree(1) % 2 == 1\n\n    def degree_without_endpoints():\n        return degree_all(vertices_no_edges())\n\n    def degree_without_endpoints_without_odd_degree():\n        # print(degree_all(vertices_no_edges_without_endpoints()))\n        return degree_all(vertices_no_edges_without_endpoints()) % 2 == 0\n\n    def is_complete_without_odd_degree():\n        # print(degree(1))\n        return degree_all(vertices_no_edges()) == n - 1\n\n    def is_complete_without_odd_degree_without_endpoints():\n        # print(degree_all(vertices_no_edges_without_endpoints()))\n        return degree_all(vertices_no_edges_without_endpoints()) == n\n\n    def degree_without_odd_degree_without_endpoints():\n        # print(degree_all(vertices_no_edges_without_endpoints()))\n        return degree_all(vertices_no_edges_without_endpoints()) % 2 == 0\n\n    def is_complete_without_odd_degree_without_endpoints():\n        # print(degree_all(vertices_no_edges_without_endpoints()))\n        return degree_all(vertices_no_edges_without_endpoints()) == n - 1\n\n    def check_connectivity():\n        # print(degree(1))\n        return degree(1) >= n - 1\n\n    def has_odd_degree_without_endpoints_without_odd_degree():\n        # print(degree(1))\n        return degree(1) % 2 == 1\n\n    def degree_without_odd_degree_without_endpoints_without_odd_degree():\n        # print(degree_all(vertices_no_edges_without_endpoints()))\n        return degree_all(vertices_no_edges_without_endpoints()) % 2 == 0\n\n    def check_connectivity_without_odd_degree_without_odd_degree():\n        # print(degree("
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        v, u = map(int, input().split())\n        graph[v - 1].append(u - 1)\n        graph[u - 1].append(v - 1)\n    \n    # sort vertices by degree\n    for i in range(N):\n        graph[i].sort()\n    \n    # get maximum degree\n    max_degree = 0\n    for v in range(N):\n        degree = len(graph[v])\n        if degree > max_degree:\n            max_degree = degree\n    \n    # check if any other pair (v, u) exists\n    for i in range(N):\n        for j in range(i + 1, N):\n            if len(graph[i]) > len(graph[j]) and graph[i][0] == graph[j][0]:\n                return \"\"\n    \n    # sort vertices by degree\n    for i in range(N):\n        graph[i].sort()\n    \n    # get maximum degree\n    max_degree = 0\n    for v in range(N):\n        degree = len(graph[v])\n        if degree > max_degree:\n            max_degree = degree\n    \n    # print spanning tree\n    tree = []\n    for i in range(N):\n        if i > 0 and i % 2 == 0:\n            continue\n        if i == 0:\n            tree.append([i + 1])\n        else:\n            tree.append(graph[i])\n    \n    # print spanning tree\n    return \"\\n\".join(map(str, tree[-1])) + \"\\n\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for u, v in map(lambda x: int(x) - 1, stdin.split()):\n        graph[u].append(v)\n        graph[v].append(u)\n    # longest = 0\n    # for i in range(n):\n    #     longest = max(longest, max_degree(graph, i, i))\n    #\n    # # for i in range(n):\n    # #     for j in range(i + 1, n):\n    # #         if max_degree(graph, i, j) == longest:\n    # #             print(i, j)\n    # #             return\n    # # longest = 0\n    # # for i in range(n):\n    # #     for j in range(i + 1, n):\n    # #         for k in range(j + 1, n):\n    # #             if max_degree(graph, i, j) + max_degree(graph, j, k) + max_degree(graph, k, i) == longest:\n    # #                 print(i, j, k)\n    # #                 return\n\n    # from collections import defaultdict\n    # longest = 0\n    # for i in range(n):\n    #     longest = max(longest, max_degree(graph, i, i))\n    #\n    # # for i in range(n):\n    # #     for j in range(i + 1, n):\n    # #         if max_degree(graph, i, j) == longest:\n    # #             print(i, j)\n    # #             return\n    # longest = 0\n    # graph_dict = defaultdict(list)\n    # for i in range(n):\n    #     for j in graph[i]:\n    #         graph_dict[i].append(j)\n    #         graph_dict[j].append(i)\n    #\n    # from collections import defaultdict\n    # longest = 0\n    # for i in range(n):\n    #     longest = max(longest, max_degree(graph_dict, i, i))\n    #\n    # # for i in range(n):\n    # #     for j in range(i + 1, n):\n    # #         if max_degree(graph_dict, i, j) == longest:\n    # #             print(i, j)\n    # #             return\n    #\n    # longest = 0\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         for k in range(j + 1, n):\n    #             if max_degree(graph_dict, i, j) + max_degree(graph_dict, j, k) + max_degree(graph_dict, k, i) == longest:\n    #                 print(i, j, k)\n    #                 return\n\n    # longest = 0\n    # graph_dict = defaultdict(list)\n    # for i in range(n):\n    #     for j in graph[i]:\n    #         graph_dict[i].append(j)\n    #         graph_dict[j].append(i)\n    #\n    # longest = 0\n    # for i in range(n):\n    #     longest = max(longest, max_degree(graph_dict, i, i))\n    #\n    # # for i in range(n):\n    # #     for j in range(i + 1, n):\n    # #         if max_degree(graph_dict, i, j) == longest:\n    # #             print(i, j)\n    # #             return\n    #\n    # longest = 0\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         for k in range(j + 1, n):\n    #             if max_degree(graph_dict, i, j) + max_degree(graph_dict, j, k) + max_degree(graph_dict, k, i) == longest:\n    #                 print(i, j, k)\n    #                 return\n\n    # longest = 0\n    # for i in range(n):\n    #     longest = max(longest, max_degree(graph, i, i))\n    #\n    # # for i in range(n):\n    # #     for j in range(i + 1, n):\n    # #         if max_degree(graph, i, j) == longest:\n    # #             print(i, j)\n    # #             return\n    #\n    # longest = 0\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         for k in range(j + 1, n):\n    #             if max_degree(graph, i, j) + max_degree(graph, j, k) + max_degree(graph, k, i) == longest:\n    #                 print(i, j, k)\n    #                 return\n\n    # longest = 0\n    # graph_dict = defaultdict(list)\n    # for i in range(n):\n    #     for j in graph[i]:\n    #         graph_dict[i].append(j)\n    #         graph_dict[j].append(i)\n    "
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    l = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        l[v].append(u)\n        l[u].append(v)\n    p = {i: j for j, i in enumerate(sorted(set(range(n)) - {0, n - 1}), start=1)}\n    res = n - 1\n    for i in range(n):\n        for u in l[i]:\n            if u in p:\n                continue\n            if p[u] >= i:\n                res = max(res, i - p[u])\n    return str(res)"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    g = [[] for _ in range(n)]\n    for i in range(m):\n        [u, v] = list(map(int, stdin.split()))\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n    max_degree = 0\n    for i in range(n):\n        if len(g[i]) > max_degree:\n            max_degree = len(g[i])\n    ans = ''\n    for i in range(n):\n        if len(g[i]) == max_degree:\n            ans += str(i) +'' + str(i) + '\\n'\n    return ans[:-1]\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    # print(n)\n    if (n == 1) or (n % 2 == 1):\n        return str(0)\n    #print(n)\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2 - n + 1)\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N, K = map(int, stdin.split())\n    board = [[0] * N for i in range(N)]\n    for i in range(1, N):\n        board[i][i] = 1\n    for i in range(0, N, 2):\n        for j in range(1, N, 2):\n            board[i][j] = board[i + 1][j] + board[i + 1][j - 1]\n            board[j][i] = board[j][i + 1] + board[j - 1][i]\n    for i in range(1, N, 2):\n        for j in range(1, N, 2):\n            board[i][j] = board[i][j] + board[i - 1][j - 1]\n            board[j][i] = board[j][i] + board[j - 1][i - 1]\n    for i in range(1, N, 2):\n        for j in range(1, N, 2):\n            board[i][j] = board[i][j] + board[i - 1][j]\n            board[j][i] = board[j][i] + board[j][i - 1]\n    for i in range(1, N, 2):\n        for j in range(1, N, 2):\n            board[i][j] = board[i][j] + board[i][j + 1]\n            board[j][i] = board[j][i] + board[j + 1][i]\n    print(board)\n    return str(board[N // 2][N // 2])\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j + (i + j + 1) + (i + j + 2) == n * (n - 1) / 2:\n                s += 1\n    return str(s)\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'Impossible'\n    ans = n ** 2\n    for i in range(1, n // 2 + 1):\n        if i == 1:\n            ans -= (n - 2) * (n - 1)\n            continue\n        ans -= (n - 2) * i\n    return str(ans)\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    n = n - 1\n    for i in range(n):\n        for j in range(n):\n            graph[i].append(0)\n\n    for i in range(1, n + 1):\n        graph[i - 1] = list(map(int, stdin.split()))\n\n    for i in range(n):\n        for j in range(n):\n            for di in range(1, n + 1):\n                if i == n:\n                    break\n                for dj in range(1, n + 1):\n                    if j == n:\n                        break\n                    if i + di == n:\n                        break\n                    if j + dj == n:\n                        break\n                    if graph[i][j]!= 0:\n                        graph[i + di][j + dj] = graph[i][j] + 1\n\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == n:\n                result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    dp = [[0] * n for _ in range(n)]\n    dp[n // 2][n // 2] = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i % 2 == 0:\n                dp[i][j] = dp[i + 1][j - 1] + dp[i + 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    return str(sum(dp[0]) + sum(sum(i) for i in dp))\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = N\n    # print(n)\n    moves = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        # print(n)\n        moves += 1\n    # print(n)\n    return str(moves)\n\nsolution(\"3\")\nsolution(\"3\")\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"\""
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = [(i, j) for i in range(1, n) for j in range(1, n)]\n    res = n * n\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            moves.append((i, j))\n            moves.append((j, n - i - 1))\n            moves.append((n - i - 1, j))\n            moves.append((n - i - 1, n - j - 1))\n    # print(moves)\n    for i, j in moves:\n        if i == j or i == n - j - 1 or j == n - i - 1 or j == i:\n            res -= 1\n    return str(res)\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n\n    odd = False\n    ans = []\n\n    for i in range(1, n+1):\n        if a[i-1] % 2 == 0:\n            odd = True\n            continue\n        else:\n            odd = False\n        ans.append(-1 if odd else 1)\n\n    for i in range(1, n+1):\n        print(ans[i], end=' ')\n    return ''"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    ans = []\n    for i in range(1, n):\n        if a[i] > a[i - 1] and a[i] % 2 == 1:\n            ans.append(1)\n        elif a[i] < a[i - 1] and a[i] % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(-1)\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    p1 = p2 = float('inf')\n    ans = []\n    for i, x in enumerate(a):\n        if x % 2 == 1:\n            p1 = i\n        elif x % 2 == 0:\n            p2 = i\n        if p1!= float('inf') and p2!= float('inf'):\n            ans.append(p2 - p1 + 1)\n            p1 = p2 = float('inf')\n    if p1!= float('inf'):\n        ans.append(p1)\n    if p2!= float('inf'):\n        ans.append(p2)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # [1, 1, 1, 2, -1, -1, 3, 1, 1, 3, 1, 1]\n    # 2\n    # 1\n    # 2\n    # 1\n    # 2\n    # 1\n    # 2\n    # -1\n    # 1\n    # 3\n    # 1\n    # 3\n    # 1\n    # 3\n    # 1\n    # 1\n    # 2\n    # -1\n    # 1\n    # 3\n    # 1\n    # 3\n    # 1\n    # 3\n    # 1\n    # 3\n    # 1\n    # 1\n    # 3\n    # 1\n    # 3\n\n    def play(num):\n        if num == 0:\n            return 1, 0\n\n        if num == 1:\n            return 1, 1\n\n        cnt = 0\n        cnt_odd = 0\n        ans = 0\n        for i in range(2, n + 1):\n            if a[i - 1] % 2 == 0:\n                cnt_odd = 0\n            else:\n                cnt_odd += 1\n\n            if a[i - 1] % 2 == 0:\n                cnt_odd = 0\n            else:\n                cnt_odd += 1\n\n            if a[i - 1] % 2 == 0 and cnt_odd == 0:\n                cnt += 1\n            elif a[i - 1] % 2 == 0 and cnt_odd!= 0:\n                cnt += 2\n\n            if a[i - 1] % 2 == 1 and cnt_odd == 0:\n                cnt += 1\n            elif a[i - 1] % 2 == 1 and cnt_odd!= 0:\n                cnt += 2\n\n            ans = max(ans, cnt)\n            cnt = 0\n        return ans\n\n    # a = [1,1,1,2,-1,2,3,1,1,3,1,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,1]\n    # a = [1,1,2,1,3,1,3,1,1,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [1,1,2,3,1,3,1,3,1,3,1,1]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,1]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,1,2,1,3,1,3,1,1,1,3,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [1,1,2,1,3,1,3,1,1,1,3,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,1,2,1,3,1,3,1,1,1,3,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [1,1,2,1,3,1,3,1,1,1,3,1]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,2,1,3,1,3,1,3,1,3,1,3]\n    # a = [2,3,1,1,3,1,3,1,3,1,3,1]\n    # a = [1,3,1,3,1,3,1,3,"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n\n    visited = set()\n    odds = set()\n    evens = set()\n    answer = []\n    for i in range(n):\n        if i + a[i] in odds:\n            odds.remove(i + a[i])\n            answer.append(i + a[i])\n        elif i - a[i] in evens:\n            evens.remove(i - a[i])\n            answer.append(i - a[i])\n        else:\n            odds.add(i)\n            evens.add(i)\n        if i in odds and i in evens:\n            answer.append(-1)\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split(' ')[0])\n    array = stdin.split(' ')[1:]\n    if not len(array) == n:\n        print(\"You should enter {} items\".format(n))\n        return\n    array = list(map(int, array))\n    if not array:\n        print(\"You should enter at least one number\")\n        return\n    evens = []\n    odds = []\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            evens.append(array[i])\n        else:\n            odds.append(array[i])\n    evens.sort(reverse=True)\n    odds.sort()\n    if len(evens) == 0:\n        return \"-1\"\n    for i in range(len(evens)):\n        if evens[i] % 2 == 1:\n            if odds.pop() % 2 == 0:\n                return str(i + 1)\n    return \"-1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, problem(stdin)))\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    cnt = [0] * n\n    s = 0\n    e = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            s += 1\n        else:\n            e += 1\n        cnt[i] = e - s\n    maxx = max(cnt)\n    maxi = cnt.index(maxx)\n    if maxx == 0:\n        return str(maxi + 1)\n    for i in range(n):\n        if cnt[i] == maxx:\n            return str(i + 1)\n    return str(maxi + 1)\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    odds = []\n    evens = []\n    result = []\n    odds.append(a[0])\n    evens.append(a[0])\n    for i in range(1, len(a)):\n        if a[i] % 2 == 0:\n            evens.append(a[i])\n        else:\n            odds.append(a[i])\n    if odds!= [] and evens!= [] and len(odds) >= 1 and len(evens) >= 1:\n        # print(odds, evens)\n        odd_min = min(odds)\n        even_min = min(evens)\n        if odd_min % 2 == 0:\n            if even_min % 2 == 1:\n                odd_min = -1\n            else:\n                odd_min = min(odd_min, even_min)\n        else:\n            if even_min % 2 == 0:\n                even_min = -1\n            else:\n                even_min = min(even_min, odd_min)\n        if odd_min == -1 and even_min == -1:\n            result.append(-1)\n        else:\n            result.append(odd_min)\n            result.append(even_min)\n    else:\n        result.append(-1)\n    print(' '.join(map(str, result)))\n    return''.join(map(str, result))"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a, b, c = [], [], []\n        for i in range(3):\n            a.append(int(stdin) % 10)\n            stdin = stdin[:-1]\n            stdin = stdin + \" \"\n        for i in range(3):\n            b.append(int(stdin) % 10)\n            stdin = stdin[:-1]\n            stdin = stdin + \" \"\n        for i in range(3):\n            c.append(int(stdin) % 10)\n            stdin = stdin[:-1]\n            stdin = stdin + \" \"\n        if (n*a[0]*b[0]*c[0]) == n:\n            print(\"YES\")\n            print(a[0], b[0], c[0])\n        else:\n            print(\"NO\")\n    return \"\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    s = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i * j * n == n:\n                s.add(i)\n                s.add(j)\n                s.add(n)\n    if len(s) == 3:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    for i in range(3):\n        while(True):\n            try:\n                a, b, c = map(int, stdin.split())\n                if 2 < a < 10 and 2 < b < 10 and 2 < c < 10 and a*b*c == num:\n                    return 'YES'\n                else:\n                    return 'NO'\n            except:\n                break"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        for a in range(1, n + 1):\n            for b in range(1, n + 1):\n                for c in range(1, n + 1):\n                    if 2 * a * b * c == n:\n                        print(f\"YES {a} {b} {c}\")\n                        return\n        print(f\"NO {n}\")\n        return\n\nsolution(stdin)"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for i in range(test_cases):\n        n = int(stdin)\n        if n % 2 == 0:\n            print(\"NO\")\n        else:\n            a = b = c = -1\n            while a == -1 or b == -1 or c == -1:\n                a = b = c = -1\n                while a <= 0:\n                    a = n // 10\n                    n = n // 10\n                while b <= 0:\n                    b = n // 10\n                    n = n // 10\n                while c <= 0:\n                    c = n // 10\n                    n = n // 10\n                if a * b * c == n:\n                    print(\"YES\")\n                    return\n                else:\n                    print(\"NO\")\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        n = int(stdin.strip())\n        if (\n            n == 4\n            or n == 9\n            or n == 24\n            or n == 49\n            or n == 81\n            or n == 100\n            or n == 121\n            or n == 144\n            or n == 169\n            or n == 196\n            or n == 225\n            or n == 256\n            or n == 289\n            or n == 324\n            or n == 361\n            or n == 400\n            or n == 441\n            or n == 484\n            or n == 529\n            or n == 576\n            or n == 616\n            or n == 681\n            or n == 726\n            or n == 776\n            or n == 821\n            or n == 884\n            or n == 929\n            or n == 995\n            or n == 1024\n            or n == 1089\n            or n == 1141\n            or n == 1188\n            or n == 1241\n            or n == 1296\n            or n == 1350\n            or n == 1396\n            or n == 1456\n            or n == 1498\n            or n == 1555\n            or n == 1598\n            or n == 1650\n            or n == 1697\n            or n == 1753\n            or n == 1798\n            or n == 1852\n            or n == 1899\n            or n == 1925\n            or n == 1927\n            or n == 1933\n            or n == 1949\n            or n == 1971\n            or n == 1973\n            or n == 1979\n            or n == 1987\n            or n == 2027\n            or n == 2063\n            or n == 2069\n            or n == 2087\n            or n == 2113\n            or n == 2137\n            or n == 2163\n            or n == 2169\n            or n == 2187\n            or n == 2201\n            or n == 2209\n            or n == 2229\n            or n == 2245\n            or n == 2251\n            or n == 2255\n            or n == 2262\n            or n == 2269\n            or n == 2276\n            or n == 2281\n            or n == 2288\n            or n == 2329\n            or n == 2373\n            or n == 2379\n            or n == 2391\n            or n == 2396\n            or n == 2425\n            or n == 2441\n            or n == 2470\n            or n == 2483\n            or n == 2494\n            or n == 2498\n            or n == 2507\n            or n == 2515\n            or n == 2522\n            or n == 2531\n            or n == 2545\n            or n == 2557\n            or n == 2561\n            or n == 2570\n            or n == 2578\n            or n == 2588\n            or n == 2591\n            or n == 2593\n            or n == 2595\n            or n == 2597\n            or n == 2605\n            or n == 2612\n            or n == 2614\n            or n == 2615\n            or n == 2616\n            or n == 2617\n            or n == 2618\n            or n == 2619\n            or n == 2620\n            or n == 2621\n            or n == 2623\n            or n == 2625\n            or n == 2626\n            or n == 2627\n            or n == 2628\n            or n == 2629\n            or n == 2630\n            or n == 2631\n            or n == 2632\n            or n == 2633\n            or n == 2634\n            or n == 2635\n            or n == 2636\n            or n == 2637\n            or n == 2638\n            or n == 2639\n            or n == 2640\n            or n == 2641\n            or n == 2642\n            or n == 2643\n            or n == 2644\n            or n == 2645\n            or n == 2646\n            or n == 2647\n            or n == 2648\n            or n == 2649\n            or n == 2650\n            or n == 2651\n            or n == 2652\n            or n == 2653\n            or n == 2654\n            or n == 2655\n            or n == 2656\n            or n == 2657\n            or n == 2658\n            or n == 2659\n            or n == 2660\n            or n == 2661\n            or n == 2662\n            or n == 2663\n            or n == 2664\n            or n == 2665\n            or n == 2666\n            or n == 2667\n            or n == 2668\n            or n == 2669\n            or n == 2670\n            or n == 2671\n            or n == 2672\n            or n == 2673\n            or n == 2674\n            or n == 2675\n            or n == 2676\n            or n == 2677\n            or n == 2678\n            or n == 2679\n            or n == 2680\n            or n == 2681\n            or n == 2682\n            or n == 2683\n            or n == 2684\n            or n == 2685\n            or n == 2686\n            or n == 2687\n            or n == 2688\n            or n == 2689\n            or n == 2690\n            or n == 2691\n            or n == 2692\n            or n == 2693\n            or n == 2694\n            or n == 2695\n            or n == 2696\n            or n == 2697\n            or n == 2698\n            or n == 2699\n            or n == 2700\n            or n == 2701\n            or n == 2702\n            or n == 2703\n            or n == 2704\n            or n == 2705\n            or n == 2706\n            or n == 2707\n            or n == 2708\n            or n == 2709\n            or n == 2710\n            or n == 2711\n            or n == 2712\n            or n == 2713\n            or n == 2714\n            or n == 2715\n            or n == 2716\n            or n == 2717\n            or n == 2718\n            or n == 2719\n            or n == 2720\n            or n == 2721\n            or n == 2722\n            or n == 2723\n            or n == 2724\n            or n == 2725\n            or n == 2726\n            or n == 2727\n            or n == 2728\n            or n == 2729\n            or n == 2730\n            or n == 2731\n            or n == 2732\n            or n == 2733\n            or n == 2734\n            or n == 2735\n            or n == 2736\n            or n == 2737\n            or n == 2738\n            or n == 2739\n            or n == 2740\n            or n == 2741\n            or n == 2742\n            or n == 2743\n            or n == 2744\n            or n == 2745\n            or n == 2746\n            or n == 2747\n            or n == 2748\n            or n == 2749\n            or n == 2750\n            or n == 2751\n            or n == 2752\n            or n == 2753\n            or n == 2754\n            or n == 2755\n            or n == 2756\n            or n == 2757\n            or n == 2758\n            or n == 2759\n            or n == 2760\n            or n == 2761\n            or n == 2762\n            or n == 2763\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for test_case in range(1, int(stdin) + 1):\n        n = int(input())\n        if is_possible(n):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin.strip()\n    if n % 2 == 0:\n        return str(len(s) // 2)\n    else:\n        return str(len(s) // 2 + 1)\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_n = stdin.strip()\n    input_n = int(input_n)\n    # s = stdin.strip()\n    # s = input()\n    # print(s)\n    s = \"a\" * input_n\n    k = len(s)\n    # print(k)\n    # print(s)\n    a = 0\n    b = 0\n    # print(a)\n    # print(b)\n    a_count = 0\n    b_count = 0\n    while a < k:\n        # print(a)\n        # print(b)\n        if a!= b:\n            if s[a] == 'a':\n                a_count += 1\n            elif s[a] == 'b':\n                b_count += 1\n        a += 1\n        # print(a_count)\n        # print(b_count)\n    if a_count > b_count:\n        a_count = a_count - b_count\n    elif a_count < b_count:\n        b_count = b_count - a_count\n    print(a_count)\n    print(b_count)\n    return \"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    s: str = stdin.strip()\n\n    ans = 0\n\n    while len(s) > 0:\n        if len(s) % 2 == 0:\n            n_a: int = 0\n            n_b: int = 0\n\n            for i in range(len(s)):\n                if s[i] == 'a':\n                    n_a += 1\n                elif s[i] == 'b':\n                    n_b += 1\n\n            if n_a == n_b:\n                ans += 1\n                s = s[:len(s) - n_a] + s[len(s) - n_b + 1:]\n            else:\n                break\n        else:\n            break\n\n    return str(ans) + '\\n' + s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    \n    l = 0\n    while l <= n and s[l] == 'a':\n        l += 1\n    \n    if l == n:\n        return \"0\"\n    \n    a = b = 0\n    \n    for i in range(n):\n        if s[i] == 'a':\n            a += 1\n        if s[i] == 'b':\n            b += 1\n        \n        if a == b:\n            return str(l - n)\n        \n        l += 1\n        \n    return str(a) +'' + str(b)\nprint(solution(input()))"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin\n  for i in range(len(s)):\n    if s[i] == 'a':\n      s = s[:i] + 'b' + s[i:]\n    elif s[i] == 'b':\n      s = s[:i] + 'a' + s[i:]\n  return s\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    ans = 0\n    while n > 0:\n        if len(s) == 2:\n            ans += 1\n            break\n        if s[0]!= s[1]:\n            ans += 1\n            s = s[1:]\n        n -= 2\n    return str(ans)\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    max_count = 0\n    result = \"\"\n    for i in range(n):\n        # count of 'a'\n        count_a = s.count(\"a\")\n        count_b = s.count(\"b\")\n        # if we have more than one 'b' in the string\n        if count_a + count_b > 1:\n            # return false, impossible to divide the string\n            return \"impossible\"\n        # if we have only one 'b' in the string\n        elif count_a + count_b == 1:\n            max_count = max(max_count, count_a, count_b)\n        # if we don't have any 'b' in the string\n        else:\n            max_count = max_count\n        # concatenating\n        result += \"a\" * max_count + \"b\" * max_count\n        # if we are not done yet\n        if i < n-1:\n            # replace 'b' with 'a' and add 'a'\n            result += \"a\" * max_count + \"b\" * max_count\n        else:\n            # return result\n            return result"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    s = inp[1]\n    # print(s)\n    # print(len(s))\n    n = len(s)\n    max_even = n // 2\n    counter_even = 0\n    for i in range(0, max_even):\n        if s[i] == 'a':\n            counter_even += 1\n    # print(counter_even)\n    # print(max_even)\n    # print(n)\n    # print(n-max_even)\n    if (n - max_even) % 2 == 0:\n        # print(\"True\")\n        return str(counter_even) + \" \" + str(n)\n    else:\n        # print(\"False\")\n        # print(n-max_even)\n        # print((n-max_even)/2)\n        return str(counter_even + (n - max_even) // 2) + \" \" + str(n)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_in_range(x, y):\n        return 0 <= x <= 100 and 0 <= y <= 100\n\n    def max_of_two(a, b):\n        return max(a, b)\n\n    points = set()\n    for _ in range(int(stdin)):\n        x, y = map(int, stdin.readline().split())\n        points.add((x, y))\n\n    def distance(p1, p2):\n        return max_of_two(abs(p1[0] - p2[0]), abs(p1[1] - p2[1]))\n\n    distances = dict()\n    distances[(0, 0)] = 0\n\n    def visit_point(p):\n        if p not in distances:\n            return True\n\n        if p in points and p!= (0, 0):\n            return False\n\n        for v in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if v not in distances and (is_in_range(p[0] + v[0], p[1] + v[1])):\n                distances[v] = distance(p, v) + visit_point(v)\n\n        return True\n\n    def solve():\n        return min(distances.values()) if visit_point((0, 0)) else 100\n\n    return str(solve())"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = abs(x[i] - x[j]) + abs(y[i] - y[j])\n            ans = min(ans, dist)\n    return str(ans)\nprint(solution(input()))\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    max_x = max_y = 1\n    # O(N)\n    min_x, min_y = 1, 1\n    visited = set()\n    # O(N)\n    for i in range(N):\n        x, y = map(int, stdin.strip().split())\n        visited.add((x, y))\n        max_x = max(max_x, x)\n        max_y = max(max_y, y)\n        min_x = min(min_x, x)\n        min_y = min(min_y, y)\n    # O(N)\n    distances = {}\n    # O(N^2)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            distances[x, y] = abs(x - min_x) + abs(y - min_y)\n    # O(N^3)\n    ans = 0\n    # O(N)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for i in range(min_x, max_x + 1):\n        for j in range(min_y, max_y + 1):\n            ans = max(ans, distances[i, j])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    # O(N^3)\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            ans = max(ans, distances[x, y])\n    "
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = sorted([list(map(int, stdin.split())) for _ in range(n)])\n    return str(min([sum([abs(x - x2) + abs(y - y2) for (x, y), (x2, y2) in zip(p, p2)] + [abs(x - x2) + abs(y - y2) for (x, y), (x2, y2) in zip(p, p1)]) for p, p2, p1 in zip(points, points[1:], points[:-1])]))\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  points = []\n  for _ in range(n):\n    points.append(tuple(map(int, stdin.split())))\n  points.sort(key=lambda x: x[0] + x[1])\n  points.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n  point_map = {}\n  for i, p in enumerate(points):\n    if p not in point_map:\n      point_map[p] = i\n  n = len(point_map)\n  points = sorted(points, key=lambda x: x[0] ** 2 + x[1] ** 2)\n  distance = 0\n  for i in range(n - 1):\n    distance += abs(points[i][0] - points[i + 1][0]) + abs(points[i][1] - points[i + 1][1])\n  return str(distance)"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    key_points = set()\n    for i in range(n):\n        key_points.add(tuple(map(int, stdin.split())))\n\n    key_points = list(key_points)\n\n    x = 0\n    y = 0\n\n    min_distance = 0\n\n    # x - y\n    for key_point in key_points:\n        x, y = key_point\n        min_distance += abs(x - y)\n    # x + y\n    for i in range(1, len(key_points)):\n        x_i, y_i = key_points[i - 1]\n        x_j, y_j = key_points[i]\n        min_distance += abs(x_i - x_j) + abs(y_i - y_j)\n\n    return str(min_distance)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    N = int(stdin)\n    D = 0\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append([x, y])\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    for i in range(N):\n        D += abs(points[i][0] - points[i + 1][0]) + abs(points[i][1] - points[i + 1][1])\n    return str(D)"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x1, y1, x2, y2):\n        if (x1, y1) == (x2, y2):\n            return False\n        return True\n\n    def is_key_point(x, y):\n        return max(x, y) == 1\n\n    n = int(stdin)\n    arr = [[None for _ in range(n)] for _ in range(n)]\n    for _ in range(n):\n        x, y = map(int, input().split())\n        arr[_][0] = x\n        arr[_][1] = y\n\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    distance = [[0 for _ in range(n)] for _ in range(n)]\n\n    q = []\n    heapq.heapify(q)\n    heapq.heappush(q, (arr[0][0], 0, arr[0][1]))\n\n    distance[0][0] = abs(arr[0][0] - arr[0][1]) + abs(arr[0][1] - arr[0][1])\n    visited[0][0] = True\n    distance[0][1] = abs(arr[0][0] - arr[1][1]) + abs(arr[1][1] - arr[0][1])\n    visited[0][1] = True\n    distance[0][2] = abs(arr[0][0] - arr[2][1]) + abs(arr[2][1] - arr[0][1])\n    visited[0][2] = True\n    distance[0][3] = abs(arr[0][0] - arr[3][1]) + abs(arr[3][1] - arr[0][1])\n    visited[0][3] = True\n\n    while len(q) > 0:\n        x, y, parent = heapq.heappop(q)\n\n        if x == y == 1:\n            return distance[parent][parent]\n\n        for i in range(4):\n            if is_valid(x, y, arr[i][0], arr[i][1]):\n                if not is_key_point(x, y):\n                    continue\n\n                if not visited[i][parent]:\n                    heapq.heappush(q, (arr[i][0], i, i))\n                    distance[i][parent] = distance[parent][i] + abs(arr[parent][parent] - arr[i][parent])\n                    visited[i][parent] = True\n                    distance[i][i] = distance[i][i] + abs(arr[i][i] - arr[i][parent])\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [[int(x), int(y)] for x, y in (stdin.split())]\n    min_distance = 10 ** 10\n\n    def get_distance(point1, point2):\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = get_distance(points[i], points[j])\n            min_distance = min(distance, min_distance)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = get_distance(points[i], points[j])\n            min_distance = min(min_distance, distance + get_distance(points[i], points[j - 1]))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = get_distance(points[i], points[j])\n            min_distance = min(min_distance, distance + get_distance(points[j], points[i - 1]))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = get_distance(points[i], points[j])\n            min_distance = min(min_distance, distance + get_distance(points[i - 1], points[j - 1]))\n\n    return str(min_distance)\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        return 'B'\n    elif B == 1:\n        return 'A'\n    else:\n        return 'C'"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    if (a + b) % 3!= 0:\n        return str(int((a + b) % 3))\n    if a == b:\n        return str(a)\n    if a + b == 3:\n        return str(2)\n    if a == 2:\n        return str(1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    if a[1] == a[2]:\n        return a[0]\n    elif a[0] == a[2]:\n        return a[1]\n    elif a[0] == a[1]:\n        return a[0]\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a == b:\n        return \"1\"\n\n    elif a == 1:\n        if b == 2:\n            return \"2\"\n\n        elif b == 3:\n            return \"3\"\n\n    elif a == 2:\n        if b == 3:\n            return \"3\"\n\n        elif b == 1:\n            return \"2\"\n\n    elif a == 3:\n        if b == 1:\n            return \"1\"\n\n        elif b == 2:\n            return \"2\"\n    return \"A\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 3:\n        return '2' if A == B else '1'\n    else:\n        return '1' if A == 3 else '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B=stdin.split(\" \")\n    if A==B:\n        return \"1\"\n    if A==\"2\" and B==\"3\":\n        return \"1\"\n    if A==\"3\" and B==\"1\":\n        return \"1\"\n    return \"2\""
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    b = []\n    for i in range(A):\n        b.append(input().strip())\n    if \"1\" in b and \"2\" in b:\n        return \"2\"\n    if \"1\" in b and \"3\" in b:\n        return \"3\"\n    if \"2\" in b and \"3\" in b:\n        return \"1\"\n    print(\"3\")"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    if A == 1 and B == 2:\n        return \"2\"\n    if A == 2 and B == 3:\n        return \"2\"\n    return \"1\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split('\\n')\n    A = int(A)\n    B = int(B)\n    if A == B:\n        return A\n    elif (A == 1 and B == 2) or (A == 2 and B == 3) or (A == 3 and B == 1):\n        return A\n    elif (A == 2 and B == 1) or (A == 1 and B == 3) or (A == 3 and B == 2):\n        return B\n    else:\n        return \"1\""
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    correct = {1: 2, 2: 1}\n    a, b = map(int, stdin.split())\n\n    a = correct[a]\n    b = correct[b]\n    if a == b:\n        return \"2\"\n    return \"1\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    for i in range(1, L + 1):\n        for j in range(1, L + 1):\n            for k in range(1, L + 1):\n                volume = i * j * k\n                if volume > L:\n                    return volume\n    return L\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    while True:\n        if l % 2!= 0:\n            break\n        l = l - 1\n    if l == 0:\n        return \"0\"\n    return str(1.5 * l ** 2)\n    \n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return str(max(int(stdin) - i * i * i for i in range(1, int(stdin) + 1)))\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    v = 0.99 * l\n    while l > 0:\n        v -= 0.99 * l\n        l -= 1\n    return str(v)"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    volume = 0\n    for i in range(int(stdin)):\n        volume += i\n    return str(volume)"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    naive implementation\n    '''\n    if len(stdin) > 1:\n        res = 0\n        for x in stdin:\n            x = float(x)\n            res = max(res, x * x * x)\n    else:\n        x = float(stdin)\n        res = x * x * x\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    maximum = 0\n    while l >= 0:\n        maximum = max(maximum, l * (l + 1) * (l + 2) // 6)\n        l -= 1\n    return str(maximum)\n\nprint(solution(input()))"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input data string\n    :return: solution\n    '''\n    # Write your code here\n    input = stdin.split()\n    L = int(input[0])\n\n    n = 2\n    m = 2\n    while (L >= (n * m)):\n        n += 1\n        m += 1\n\n    if (n % 2 == 0):\n        n -= 1\n    else:\n        m -= 1\n    return str(n * m)\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    dimensions = [int(i) for i in stdin[0].split()]\n    max_volume = dimensions[0]\n    for i in range(1, len(dimensions)):\n        max_volume = max(max_volume, (dimensions[i] * dimensions[i]))\n    return max_volume\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n == \"1\":\n        return \"Hello World\"\n    elif n == \"2\":\n        a = int(stdin.split()[0])\n        b = int(stdin.split()[1])\n        return a + b\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Hello World\"\n    return str(int(stdin) + int(stdin))\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin)\n        b = int(stdin)\n        return str(a + b)\nprint(solution(input()))"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        if stdin == '1':\n            return 'Hello World'\n        else:\n            return 'Hello World!'\n    else:\n        stdin = stdin.split()\n        if stdin[0] == '1':\n            return 'Hello World'\n        else:\n            return 'Hello World!'\n\ndef"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        print('Hello World')\n    else:\n        A, B = map(int, input().split())\n        print(A + B)\n    return \"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 1:\n        print('Hello World')\n    else:\n        a = int(stdin.split()[1])\n        b = int(stdin.split()[2])\n        print(a + b)\n    return \"\""
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N=int(stdin)\n    if N==1:\n        return \"Hello World\"\n    if N==2:\n        A=int(stdin)\n        B=int(stdin)\n        return str(A+B)\n    \n    return \"Not found\""
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # input the number of the child\n    try:\n        N = int(stdin)\n    except ValueError:\n        return 'Invalid input'\n\n    # check the age\n    if N == 1:\n        return 'Hello World'\n    if N == 2:\n        try:\n            a, b = map(int, stdin.split())\n        except ValueError:\n            return 'Invalid input'\n\n        return str(a + b)\n\nsolution(input())\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n\n    if len(stdin) == 1:\n        print(\"Hello World\")\n    else:\n        stdin = stdin.split()\n        n = int(stdin[0])\n        if n == 1:\n            print(\"Hello World\")\n        else:\n            a, b = map(int, stdin[1:])\n            print(a+b)\n\n    return ''"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split(' ')\n    a = list(map(int, a))\n    b = list(map(int, b))\n    if a < b:\n        return ''.join(map(str, b))\n    elif a > b:\n        return ''.join(map(str, a))\n    else:\n        return ''.join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b = map(int, stdin.split())\n    if input_a < input_b:\n        return str(input_b)\n    elif input_a > input_b:\n        return str(input_a)\n    else:\n        return str(input_a)\nprint(solution(input()))"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    big = \"\"\n    small = \"\"\n\n    for i in range(10):\n        big += str(i * a)\n        small += str(i * b)\n\n    if len(big) < len(small):\n        return big\n    else:\n        return small"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    n = min(a, b)\n    m = max(a, b)\n    \n    if n == m:\n        return a\n\n    # count copies\n    result = n\n    while n <= m:\n        n *= 10\n        result += n\n    \n    # get first\n    for x in range(result):\n        if a * x % 10 == b or a * x % 10 == m:\n            return a * x % 10\n\n    # get last\n    for x in range(result):\n        if b * x % 10 == a or b * x % 10 == n:\n            return b * x % 10"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = map(int, stdin.split())\n    return str(sorted(str(num1*num2))[0])"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    a = int(a[0])\n    b = int(a)\n    a = str(a)\n    b = str(b)\n    return str(b)"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return min(x*int(y), y*int(x))"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_copy = a * b\n    b_copy = a * a\n    if len(str(a_copy)) > len(str(b_copy)):\n        return str(a_copy)\n    return str(b_copy)\n\n------Submissions------\nSubmission 1:\nRuntime: 64 ms, faster than 99.13% of Python3 online submissions for Lexicographically Smaller String.\nMemory Usage: 14.2 MB, less than 80.39% of Python3 online submissions for Lexicographically Smaller String.\n\nSubmission 2:\nRuntime: 32 ms, faster than 95.76% of Python3 online submissions for Lexicographically Smaller String.\nMemory Usage: 14 MB, less than 70.23% of Python3 online submissions for Lexicographically Smaller String.\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    if a == b:\n        return str(a)\n    elif a < b:\n        return str(a * b)\n    else:\n        return str(a * b)\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return min(a + b, a + a + b)\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C = stdin\n    if C == 'z':\n        return 'a'\n    C = ord(C) - 97\n    L = ord('z') - 97\n    if C < L:\n        return chr(C + 26)\n    else:\n        return chr(C - 1)\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i == 'z':\n            return stdin\n        else:\n            stdin = stdin.replace(i, '')\n            return stdin"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    if ord(a) < 91:\n        b = ord(a) + 1\n    elif ord(a) > 90 and ord(a) < 97:\n        b = ord(a) - 26\n    elif ord(a) > 96 and ord(a) < 123:\n        b = ord(a) - 26\n    else:\n        b = ord(a) + 1\n    return chr(b)\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for ch in stdin:\n        print(chr(ord(ch) + 1))"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    str_list = list(stdin)\n    for i in range(len(str_list)-1):\n        if str_list[i] < str_list[i+1]:\n            print(str_list[i+1])\n            break\n    else:\n        print(str_list[0])\n    return \"\"\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    for i in range(len(l)):\n        if l[i].isalpha():\n            if l[i+1].isalpha():\n                return l[i+1]\n    return \"z\""
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_char = stdin[0]\n    new_char = stdin.replace(first_char, \"\", 1)\n    print(new_char)\n    return new_char"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.replace('a','').replace('z','').replace('A','').replace('Z','')\n    return c\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1]\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return''.join(s[1:] + s[:1])\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    print(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the concatenation of S and T in string format.\n    \"\"\"\n    s, t = stdin.split(' ')\n    return t + s\n\"\"\"\nTime Complexity: O(2N)\nSpace Complexity: O(N)\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: String input of two strings\n    :return: String concatenation of two strings\n    \"\"\"\n    print(stdin)\n    return stdin\n\nsolution(input())\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', '')\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[1].split()\n    a = list(map(int, a))\n    k = 2\n    while k <= len(a):\n        i = 0\n        while i < len(a) - k:\n            if (a[i] + a[i + 1]) % 2 == 0:\n                a.remove(a[i + 1])\n            else:\n                a.remove(a[i])\n            i += 2\n        k *= 2\n    return str(sum(a))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    d = {i: {'odd': 0, 'even': 0} for i in range(1, n+1)}\n    d[1]['odd'] = d[1]['even'] = a[0]\n    odd = 1\n    even = 0\n    for i in range(1, n):\n        if a[i] % 2 == 1:\n            odd ^= 1\n        else:\n            even ^= 1\n        d[i + 1] = {'odd': even, 'even': odd}\n    cnt = 0\n    ans = 0\n    while True:\n        cnt += 1\n        if cnt > n:\n            break\n        elif d[cnt]['odd'] == d[cnt]['even']:\n            ans = cnt\n            break\n        else:\n            a[d[cnt]['odd']] = a[d[cnt]['even']]\n            d[cnt]['odd'] = d[cnt]['even']\n    return str(ans)\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    a = list(map(int,inputs[1]))\n    answer = 0\n    odds = [x for x in a if x % 2 == 1]\n    evens = [x for x in a if x % 2 == 0]\n    #print(odds)\n    #print(evens)\n    for i in range(1, n):\n        if i % 2 == 1:\n            odds = [x for x in odds if x > 0 and odds.count(x) % 2 == 0]\n            answer += sum(odds)\n            odds = odds[1:]\n        if i % 2 == 0:\n            evens = [x for x in evens if x > 0 and evens.count(x) % 2 == 0]\n            answer += sum(evens)\n            evens = evens[1:]\n    return str(answer)\n\nstdin = \"\"\"10\n1 5 7 8 2\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    curr = 0\n    cnt = 0\n    # for a_i in range(n):\n    #     if a[a_i] & 1 == 0:\n    #         curr += a[a_i]\n    #     else:\n    #         curr -= a[a_i]\n    # print(curr)\n    while True:\n        if curr < 0:\n            return '0'\n        if curr == 0:\n            break\n        if curr & 1 == 1:\n            for i in range(n):\n                if a[i] & 1 == 1:\n                    curr -= a[i]\n            cnt += 1\n        else:\n            for i in range(n):\n                if a[i] & 1 == 0:\n                    curr += a[i]\n            cnt += 1\n    print(cnt)\n    return str(curr)\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    even_sum = 0\n    odd_sum = 0\n    p = 0\n    while p < len(a):\n        if a[p] % 2 == 0:\n            even_sum += a[p]\n        else:\n            odd_sum += a[p]\n        p += 1\n    if odd_sum == even_sum:\n        return 0\n    odd_sum_after_deletion = 0\n    even_sum_after_deletion = 0\n    p = 0\n    while p < len(a):\n        if p == len(a)-1:\n            break\n        if a[p] % 2 == 1:\n            odd_sum_after_deletion += a[p]\n            p += 1\n        elif a[p] % 2 == 0:\n            even_sum_after_deletion += a[p]\n            p += 1\n    if odd_sum_after_deletion + even_sum_after_deletion == even_sum:\n        return 0\n    else:\n        return even_sum - odd_sum_after_deletion + even_sum_after_deletion - even_sum\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    odd = []\n    even = []\n    for i in range(n):\n        if a[i] & 1:\n            even.append(a[i])\n        else:\n            odd.append(a[i])\n    even.sort()\n    odd.sort(reverse=True)\n    if len(odd) > 1:\n        if odd[0] ^ odd[1] & 1:\n            even.append(odd.pop(0))\n    ans = sum(even)\n    for i in range(len(odd)):\n        ans -= odd[i]\n    return str(ans)\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    a = int(input.split()[0])\n    a = list(map(int, input.split()[1:]))\n    return 0\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    deleted_element = 0\n    parity = 0\n    result = 0\n    for i in range(len(a)):\n        if deleted_element == 0:\n            if parity % 2 == 0:\n                parity += 1\n            else:\n                parity -= 1\n            if parity == 0:\n                result += a[i]\n                deleted_element += 1\n        else:\n            if parity == 0:\n                if a[i] % 2 == 0:\n                    parity = 1\n                else:\n                    parity = -1\n            else:\n                if a[i] % 2 == 0:\n                    parity = -1\n                else:\n                    parity = 1\n    if deleted_element == 0:\n        return \"0\"\n    return str(result)\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    n = int(a[0])\n    array = list(map(int, a[1].split()))\n    count = 0\n    while len(array)!= 1:\n        if len(array) % 2 == 0:\n            count += array.pop()\n        else:\n            count += array.pop(0)\n    return str(count)\n\nsolution(input())\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    moves = 1\n    while a[0] % 2 == a[-1] % 2:\n        a.pop()\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = list(map(int, stdin.split()))\n    monsters = list(map(int, stdin.split()))\n    monsters.sort()\n    health = monsters.pop()\n    best = health\n\n    for i in range(1, n):\n        health = monsters.pop()\n        if a > 0:\n            a -= 1\n            health = monsters[0] + 1\n        if b > 0:\n            b -= 1\n            health = max(health, monsters[1] + 1)\n        if health <= 0:\n            break\n        best = max(best, health)\n    return best\n    \"\"\"\n    h1, h2, h3, h4 = monsters\n    a = a - 1\n    b = b - 1\n    if h3 + a + b > h4:\n        return h4\n    elif h2 + a + b > h3:\n        return h3\n    else:\n        return h2\n    \"\"\"\nsolution(stdin)\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = max(0, k)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], 0)\n        if i >= 2 and k >= 1:\n            dp[i] = max(dp[i], dp[i - 1] + max((h[i - 2] - a + dp[i - 1]) // b, 0))\n            dp[i] = max(dp[i], dp[i - 1] + max((h[i - 2] - b + dp[i - 1]) // a, 0))\n        elif i >= 2 and k == 0:\n            dp[i] = max(dp[i], dp[i - 1] + max((h[i - 2] - a + dp[i - 1]) // b, 0))\n        elif i >= 2:\n            dp[i] = max(dp[i], dp[i - 1] + max((h[i - 2] - b + dp[i - 1]) // a, 0))\n        else:\n            dp[i] = max(dp[i], dp[i - 1] + max((h[i - 1] - a + dp[i - 1]) // b, 0))\n    return max(dp)"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b,k = list(map(int,stdin.split()))\n    n_monsters = n\n    h_monsters = list(map(int,stdin.split()))\n    if n<2:\n        print(0)\n        return\n    h_monsters.sort(reverse=True)\n    count_h = 0\n    if h_monsters[0]<=a and h_monsters[1]<=b:\n        count_h = h_monsters[0]\n    else:\n        count_h = 0\n    if h_monsters[0]>a and h_monsters[1]>b:\n        count_h = 0\n    if count_h==0:\n        return\n    \n    i = 2\n    while i<n:\n        if h_monsters[i]<=a:\n            count_h += 1\n            i += 1\n        else:\n            break\n    if i==n:\n        count_h = h_monsters[i-1]\n    \n    if count_h==0:\n        return\n    \n    i = n\n    while i>2:\n        if h_monsters[i]<=b:\n            count_h += 1\n            i -= 1\n        else:\n            break\n    if i==n:\n        count_h = h_monsters[i-1]\n    \n    return str(count_h)\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h: List[int] = list(map(int, stdin.strip().split()))\n    n, a, b, k = h[0], h[1], h[2], h[3]\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n\n    def calculate(hp_a, hp_b):\n        return min(hp_a + hp_b, a, b)\n    \n    hp_a, hp_b = max(h), max(h)\n    \n    h.sort(reverse=True)\n    hp_a, hp_b = calculate(hp_a, hp_b), calculate(hp_a, hp_b)\n    \n    for i in range(k):\n        if hp_a < 0:\n            break\n        hp_a -= h[i]\n        hp_b -= h[i]\n    \n    hp_a = calculate(hp_a, hp_b)\n    return str(hp_a)\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    hp = sorted(map(int, stdin.split()))\n    hp.reverse()\n    ans = 0\n    a_win = 0\n    b_win = 0\n    a_hp = a\n    b_hp = b\n    for i in range(n):\n        if hp[i] < a_hp:\n            hp[i] += 1\n            a_hp += 1\n            ans += 1\n        elif hp[i] < b_hp:\n            hp[i] += 1\n            b_hp += 1\n            ans += 1\n        else:\n            if a_hp > b_hp:\n                if a_win < k:\n                    a_hp += 1\n                    a_win += 1\n                    ans += 1\n                else:\n                    break\n            elif a_hp < b_hp:\n                if b_win < k:\n                    b_hp += 1\n                    b_win += 1\n                    ans += 1\n                else:\n                    break\n    return ans\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    if k >= n:\n        return \"Impossible\"\n    points = 0\n    atk = a\n    opponent_points = 0\n    for i in range(n):\n        points += 1\n        atk -= h[i]\n        opponent_points += 1\n        opponent_atk = b\n        while opponent_points < opponent_atk:\n            opponent_points += 1\n            opponent_atk -= h[i]\n        if opponent_points >= opponent_atk:\n            points += 1\n    return str(points)"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    score_cnt = 0\n    score = 0\n    h_cnt = 0\n    for i in range(n):\n        score_cnt += 1\n        if h_cnt >= k:\n            score += h_cnt - 1\n            break\n        if a > h[i]:\n            score += 1\n            score_cnt += 1\n        if b > h[i]:\n            score += 1\n        h_cnt = score_cnt\n    return str(score)\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h = [x for x in h if x > 0]\n    # print(n, a, b, k)\n    # print(h)\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans += (b * h[i])\n            # print(ans)\n        if i > 0:\n            # print(i)\n            if i % 2 == 0:\n                ans += a\n                # print(ans)\n                # print(\"a\")\n            if i % 2 == 1:\n                ans += (b * h[i])\n                # print(ans)\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    points = 0\n\n    while h:\n        d = 1\n        while d < k:\n            # player 1\n            if h[0] >= a:\n                points += 1\n                h[0] -= a\n                break\n            if h[0] <= b:\n                d += 1\n            else:\n                break\n        # player 2\n        if d < k:\n            h[0] -= b\n            points += 1\n    return str(points)\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    dp[1] = h[0]\n    dp[2] = h[0] + a * h[1]\n    dp[3] = max(h[0] + a * h[1], h[0] + a * h[2])\n    for i in range(4, n + 1):\n        dp[i] = max(h[i - 1] + a * h[i],\n                    max(h[i - 1] + a * h[i - 2],\n                        max(h[i - 1] + a * h[i - 3],\n                            max(h[i - 1] + b * h[i],\n                                max(h[i - 1] + b * h[i - 2],\n                                    max(h[i - 1] + b * h[i - 3],\n                                        max(h[i - 1] + a * b * h[i],\n                                            max(h[i - 1] + b * h[i - 2],\n                                                max(h[i - 1] + b * h[i - 3],\n                                                    max(h[i - 1] + a * b * h[i],\n                                                        max(h[i - 1] + a * h[i - 2],\n                                                            max(h[i - 1] + a * h[i - 3],\n                                                               max(h[i - 1] + b * h[i],\n                                                                   max(h[i - 1] + b * h[i - 2],\n                                                                       max(h[i - 1] + b * h[i - 3],\n                                                                           max(h[i - 1] + a * b * h[i],\n                                                                               max(h[i - 1] + a * h[i - 2],\n                                                                                   max(h[i - 1] + a * h[i - 3],\n                                                                                      max(h[i - 1] + b * h[i],\n                                                                                          max(h[i - 1] + b * h[i - 2],\n                                                                                              max(h[i - 1] + b * h[i - 3],\n                                                                                                max(h[i - 1] + a * b * h[i],\n                                                                                                    max(h[i - 1] + a * h[i - 2],\n                                                                                                         max(h[i - 1] + a * h[i - 3],\n                                                                                                              max(h[i - 1] + b * h[i],\n                                                                                                                      max(h[i - 1] + b * h[i - 2],\n                                                                                                                            max(h[i - 1] + b * h[i - 3],\n                                                                                                                                max(h[i - 1] + a * b * h[i],\n                                                                                                                                             max(h[i - 1] + a * h[i - 2],\n                                                                                                                                                 max(h[i - 1] + a * h[i - 3],\n                                                                                                                                                    max(h[i - 1] + b * h[i],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + a * b * h[i],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + b * h[i],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + a * b * h[i],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + b * h[i],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + a * b * h[i],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + b * h[i],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + a * b * h[i],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + a * h[i - 3],\n                                                                                                                                                     max(h[i - 1] + b * h[i],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 2],\n                                                                                                                                                     max(h[i - 1] + b * h[i - 3],\n                               "
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = int(n / m)\n    return str(s) + \"\\n\" + str(s) + str(s) + str(s)\n    # return int(n / m)\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # a = [3, 2, 1, 0, 6, 10, 12]\n    c = a[:]\n    for i in range(n):\n        c[i] += m\n    a.sort()\n    print(max(0, min(a) // m))\n    return stdout.getvalue()\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = list(range(1, n + 1))\n    while n % m!= 0:\n        print(ans)\n        n += 1\n        ans = ans[: -1] + ans\n    print(ans)\n    return stdout\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = 0\n    for r in range(1, m):\n        c += sum(a[i] for i in range(n) if i % r!= 0)\n    return str(c)\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    while True:\n        cnt = 0\n        for i in range(m):\n            if i % m == 0:\n                cnt += 1\n        if n % m == 0:\n            res = cnt\n        if res == m:\n            break\n        for i in range(n):\n            if i % m == 0:\n                a[i] += 1\n        n += 1\n    return str(res)"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = n // m\n    remainders = list(range(m))\n    for _ in range(moves):\n        for i, v in enumerate(remainders):\n            if v > n - 1:\n                break\n            remainders[i] += 1\n    return f'{moves}\\n' +''.join(map(str, remainders))\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = 0\n    while (m % n!= 0):\n        if (m % n == 0):\n            res = res + 1\n            for i in range(n):\n                if (i % m!= 0):\n                    a[i] = a[i] - 1\n            break\n        else:\n            m = m - 1\n    return str(res) + \"\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n = a[0]\n    m = a[1]\n    remainders = []\n    for i in range(2, m + 1):\n        remainders.append(n // i)\n    count = 0\n    for i in range(0, m):\n        count += remainders[i]\n    return str(count)\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    count = 0\n    curr = 1\n    while curr <= n:\n        count += n//curr\n        curr *= m\n    return str(count) + \"\\n\" + \" \".join(map(str, arr))"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = sorted([int(x) for x in stdin.split()])\n    n = len(a)\n    m = int(stdin.split()[1])\n    count = 0\n    for r in range(1, n):\n        a_count = 0\n        for i in range(n):\n            if a[i] % m == r:\n                a_count += 1\n        if a_count == n:\n            count += 1\n    return str(count) +'' + str(a)\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    d = []\n    t = []\n    for i in range(m):\n        d.append(int(stdin.split()[i*2+1]))\n        t.append(int(stdin.split()[i*2+2]))\n    max_day = 0\n    for i in range(len(k)):\n        max_day = max(max_day, d[i] + t[i])\n    return max_day\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    k = sorted(k, reverse=True)\n    # print(k)\n    # create a dictionary of n dictionaries\n    d = {k[i]: {k[i+1]: 0 for k[i+1] in range(1, n+1)} for i in range(len(k)-1)}\n    # print(d)\n    # for each item in list\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # if item i has value of j in the dictionary\n            if j in d[i]:\n                # add 1 to item j in dictionary\n                d[i][j] += 1\n    print(d)\n    # return the maximum number of day when items are ordered\n    return max(d[k[0]])\n\nsolution(\"5 6\")\nsolution(\"3 5\")\nsolution(\"4 2 1 3 2\")\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *k = map(int, stdin.split())\n    sched = [(int(i), i) for i in stdin.split()]\n    k_copy = k.copy()\n    curr = 0\n    days = 0\n    while k_copy:\n        for i in range(min(k_copy)):\n            k_copy.pop(0)\n            curr += 1\n            days += 1\n        curr = 0\n        for i in range(min(k_copy)):\n            if sched[curr][1] in k_copy:\n                k_copy.remove(sched[curr][1])\n            curr += 1\n    return days\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = sorted(map(int, stdin.split()))\n    t = sorted(map(int, stdin.split()))\n    days = [[0, 0]]\n    for i in range(len(k)):\n        days.append([k[i] + days[i][0], t[i]])\n    for i in range(1, len(days)):\n        days[i][0] += days[i-1][1]\n    return str(days[-1][0])\n\n\nprint(solution(input()))"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = [int(x) for x in stdin.split()]\n    d = []\n    t = []\n    for i in range(m):\n        d_j, t_j = map(int, stdin.split())\n        d.append(d_j)\n        t.append(t_j)\n    k.sort(key=lambda x: x // 2)\n    max_d = max(d)\n    t = set(t)\n    t_set = set(range(1, n + 1))\n    #print(max_d, d, t, t_set)\n    if max_d > d[0]:\n        return -1\n    while t_set:\n        if max_d <= d[0]:\n            break\n        k_1 = k.pop(0)\n        for i in range(k_1):\n            t_set.remove(d.pop(0))\n        for i in range(k_1):\n            t_set.remove(d.pop(0))\n        for i in range(k_1):\n            d.pop(0)\n    return max_d\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = [int(i) for i in stdin.split()]\n    k.sort(reverse=True)\n    s = 0\n    for i in k:\n        s += i\n    c = n - s\n    if c >= 0:\n        return c\n    return '-1'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split())\n    (k1, k2, k3) = map(int, stdin.split())\n    k_1, k_2, k_3 = map(int, stdin.split())\n    s = 0\n    best = float(\"inf\")\n    for i in range(n):\n        # print(f\"{i}\", end='')\n        # print(f\"{k1} {k2} {k3}\")\n        if (k1 + k2 + k3) <= m:\n            s += k1 + k2 + k3\n            if s <= best:\n                best = s\n        k1 = min(k1 + 1, n - i)\n        k2 = min(k2, n - i)\n        k3 = min(k3, n - i)\n        s -= k1 + k2 + k3\n    print(best)\n    return\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    k = []\n    for i in range(n):\n        k.append([int(j) for j in stdin.split()[2 * i + 1].split()])\n    best = float(\"inf\")\n    for i in range(n):\n        min_days = 100000\n        curr = 1\n        days = 0\n        for j in range(m):\n            if k[i][j]:\n                days += curr\n                curr += 2\n            else:\n                curr += 1\n        days += curr\n        if days < min_days:\n            best = days\n    return str(best)\n\nsolution(\n    '5 6\\n'\n    '1 2 0 2 0\\n'\n    '2 4\\n'\n    '3 3\\n'\n    '1 5\\n'\n    '1 2\\n'\n    '1 5\\n'\n    '2 3\\n'\n    )\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = (int(i) for i in stdin.split())\n    k = tuple((int(i) for i in stdin.split()[1:]))\n    \n    # k is the number of copies of microtransactions per type\n    \n    # d_j is the day when jth microtransaction is on sale\n    # t_j is the type of the jth microtransaction\n    \n    # microtransactions are ordered at the same time.\n    # thus, k[i] must be <= k[i+1]\n    # so, we can go backwards over the list of microtransactions\n    # and find the first index j where k[j] > k[j+1]\n    \n    k_index = {}\n    for i in range(len(k)):\n        k_index[k[i]] = i\n    \n    days = 0\n    \n    while k_index[k[-1]] > k_index[k[-2]]:\n        days += 1\n        \n        # find the first value in k that is greater than k[-2]\n        # and larger than or equal to k[-1]\n        for j in range(k_index[k[-1]], len(k)):\n            if k[j] >= k[k_index[k[-2]]] and k[j] <= k[k_index[k[-1]]]:\n                break\n        \n        # order the k[j]\n        if k[j] == k[k_index[k[-2]]]:\n            k[k_index[k[j]]] = 1\n        else:\n            k[k_index[k[j]]] = 2\n            \n    return days\n    \n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    price = list(map(int, stdin.split()))\n    profit = []\n    for i in range(m):\n        price[2*i+1] += price[2*i]\n    for i in range(m):\n        profit.append(price[2*i+1] - price[2*i])\n    profit.sort()\n    profit.reverse()\n    ans = 0\n    for i in range(m):\n        ans += profit[i]\n        if profit[i] == 0:\n            return str(0)\n    return str(ans)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n\n    for _ in range(q):\n        n = int(stdin())\n        sticks = list(map(int, stdin().split()))\n\n        left_sum = 0\n        right_sum = 0\n        for i in range(len(sticks) - 4):\n            left_sum += sticks[i]\n            right_sum += sticks[i + 4]\n        if left_sum == right_sum:\n            return \"YES\"\n        if right_sum - left_sum == 4:\n            return \"YES\"\n\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1:]))\n    # print(sticks)\n    # print(n)\n    max_l = max(sticks)\n    sticks.sort()\n    # print(sticks)\n    # print(max_l)\n    s = 0\n    e = max_l\n    for i in range(1, n+1):\n        if e-s < 0:\n            print(\"NO\")\n            return\n        # print(s, e)\n        cur_area = (e - s) * max_l\n        # print(cur_area)\n        for i in range(4):\n            # print(i)\n            if sticks[i] > e or sticks[i] < s:\n                print(\"NO\")\n                return\n            # print(cur_area)\n            cur_area -= max(sticks[i], e) - max(s, sticks[i])\n            # print(cur_area)\n        s += max_l\n        e += max_l\n        print(cur_area)\n    print(\"YES\")\n    return"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    l = list(map(int, s[1].split()))\n    return 'YES' if n == sum(l) else 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    in_q = stdin.split(\"\\n\")\n    q = int(in_q.pop(0))\n    ans = []\n    for i in range(q):\n        in_rectangles = in_q.pop(0).split(\" \")\n        n = int(in_rectangles.pop(0))\n        rectangles = []\n        for j in range(n):\n            rectangles.append(\n                [int(in_rectangles[2*j]), int(in_rectangles[2*j + 1])]\n            )\n        if all(\n            (rectangle[0] - rectangle[1]) == (rectangle[2] - rectangle[3]) for rectangle in rectangles\n        ):\n            ans.append(\"YES\")\n        else:\n            ans.append(\"NO\")\n    return \"\\n\".join(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solution_1(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if rectangles_are_equal_area(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_q = stdin.splitlines()\n    print(input_q)\n    # q = int(input())\n    q = int(input_q[0])\n    n = int(input_q[1])\n\n    a = list(map(int, input_q[2].split()))\n    print(a)\n    # a = list(map(int, input().split()))\n    # print(a)\n    print(f'{a}')\n\n    cnt = 0\n    # for _ in range(q):\n    #     print(a)\n    for i in range(0,n):\n        if (a[i]*a[i+1]) > (a[i+1]*a[i+2]):\n            print(a[i]*a[i+1])\n            cnt += 1\n    if cnt!= n:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(10**7)\n\n    n = int(stdin.split()[0])\n    rectangles = stdin.split()\n\n    def are_rectangles_equally_areas(rectangles, length):\n        rectangles = sorted(rectangles, key=lambda x: -x[0])\n        return [sum(rectangles[i:i+4]) == length for i in range(len(rectangles)-3)]\n\n    def rectangles(rectangles, length):\n        return all(are_rectangles_equally_areas(rectangles, length))\n\n    return \"YES\" if rectangles(rectangles, 4*n) else \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #print(stdin)\n    #return 0\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1].split()))\n\n    #print(sticks)\n    #return 0\n    arr_area = []\n    arr_sides = []\n\n    for i in range(4):\n        arr_sides.append(sticks[4*i:4*i+4])\n        arr_area.append(arr_sides[i][0]*arr_sides[i][1])\n    #print(arr_area)\n    #return 0\n\n    for i in range(1, n):\n        for j in range(0,4):\n            for k in range(0,4):\n                if j==k:\n                    continue\n                if (arr_sides[j][0]+arr_sides[k][1])==arr_sides[j][1]:\n                    print('YES')\n                    return 'YES'\n\n    if (sum(arr_area) > n):\n        print('YES')\n        return 'YES'\n    else:\n        print('NO')\n        return 'NO'"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    n = int(stdin.strip())\n    for i in range(q):\n        l = list(map(int, stdin.strip().split()))\n        if len(l) == 4:\n            if get_area(l) == n:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n)]\n    visited = [False for _ in range(n)]\n    distance = [float('inf') for _ in range(n)]\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.strip().split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    def dfs(start, distance, visited):\n        visited[start] = True\n        distance[start] = 0\n        for neighbor, weight in graph[start]:\n            if distance[neighbor] > distance[start] + weight:\n                distance[neighbor] = distance[start] + weight\n                dfs(neighbor, distance, visited)\n\n    dfs(1, distance, visited)\n    distance.sort()\n    return distance[k - 1]\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    # sort the graph by the length of each edge, so we can use binary search\n    sorted_graph = {k: sorted(v, key=lambda x: x[1]) for k, v in graph.items()}\n\n    # result = None\n    # for k in sorted_graph:\n    #     if k == 1:\n    #         result = k\n    #     elif k == k + 1:\n    #         result = k\n    #     else:\n    #         break\n    # print(result)\n\n    def get_distances(x):\n        distances = {k: float('inf') for k in sorted_graph[x]}\n        visited = {x}\n        parent = {x: None}\n        for y in sorted_graph[x]:\n            distances[y] = 0\n            heapq.heappush(visited, y)\n            while len(visited) > 0:\n                next = heapq.heappop(visited)\n                for nei in sorted_graph[next]:\n                    if nei not in visited:\n                        distances[nei] = min(distances[nei], distances[next] + 1)\n                        parent[nei] = next\n                        heapq.heappush(visited, nei)\n        return distances, parent\n\n    distances, parent = get_distances(1)\n\n    # print(distances)\n    # print(parent)\n    print(distances[k + 1])\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dijkstra(arr: List[List[int]], n: int, start: int) -> List[List[int]]:\n        distances = {i: float('inf') for i in range(1, n + 1)}\n        distances[start] = 0\n        previous = {i: None for i in range(1, n + 1)}\n        current_time = 0\n        time_to_check = 0\n\n        while current_time < n:\n            current = float('inf')\n            for vertex in range(1, n + 1):\n                if current == float('inf'):\n                    if distances[vertex] < current:\n                        current = distances[vertex]\n                        current_vertex = vertex\n                else:\n                    if distances[vertex] + arr[vertex - 1][current_vertex - 1] < distances[vertex]:\n                        current = distances[vertex] + arr[vertex - 1][current_vertex - 1]\n                        current_vertex = vertex\n            time_to_check += 1\n            current_time += 1\n            previous[current_vertex] = current_vertex\n            distances[current_vertex] = current\n\n        return previous\n\n    n, m, k = map(int, stdin.split())\n    arr = [[float('inf')] * n for _ in range(n)]\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        arr[x - 1][y - 1] = w\n\n    previous = dijkstra(arr, n, 1)\n    graph_matrix = [[float('inf')] * n for _ in range(n)]\n    for vertex in range(1, n + 1):\n        for adj_vertex in range(1, n + 1):\n            if vertex!= adj_vertex:\n                graph_matrix[vertex - 1][adj_vertex - 1] = arr[vertex - 1][adj_vertex - 1]\n            elif vertex == adj_vertex:\n                graph_matrix[vertex - 1][adj_vertex - 1] = 0\n    distances = {i: float('inf') for i in range(1, n + 1)}\n    distances[1] = 0\n    time_to_check = 0\n\n    while time_to_check < n:\n        min_distance = float('inf')\n        current_vertex = 1\n        for vertex in range(1, n + 1):\n            if min_distance == float('inf'):\n                min_distance = distances[vertex]\n                current_vertex = vertex\n            elif distances[vertex] < min_distance:\n                min_distance = distances[vertex]\n                current_vertex = vertex\n\n        time_to_check += 1\n        distances[current_vertex] = float('inf')\n        previous_vertex = previous[current_vertex]\n        while previous_vertex:\n            previous_vertex_value = graph_matrix[current_vertex - 1][previous_vertex - 1]\n            distances[previous_vertex] = min(distances[previous_vertex], distances[current_vertex] + previous_vertex_value)\n            current_vertex = previous_vertex\n            previous_vertex = previous[current_vertex]\n        distances[current_vertex] = float('inf')\n\n    return time_to_check\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds a graph from the input file, then\n    finds the minimum spanning tree\n    of the graph and prints the result.\n    \"\"\"\n    n, m, k = list(map(int, stdin.split()))\n    edges = {i + 1: [] for i in range(n)}\n    for _ in range(m):\n        u, v, w = list(map(int, stdin.split()))\n        edges[u].append([v, w])\n        edges[v].append([u, w])\n    distances = {i + 1: [float('inf')] * n for i in range(n)}\n    distances[1] = [0] * n\n    for _ in range(n - 1):\n        unvisited = set(range(n))\n        for i, j in enumerate(unvisited):\n            for k, l in edges[j]:\n                if distances[k][i] == float('inf'):\n                    distances[k][i] = distances[j][i] + l\n        unvisited.remove(1)\n        unvisited = unvisited & set(range(n))\n        next_lowest_distances = min((distances[i], i) for i in unvisited)\n        next_lowest_distance = next_lowest_distances[1]\n        unvisited.remove(next_lowest_distance)\n        distances[next_lowest_distance] = next_lowest_distances[0] + [0] * n\n    res = min(\n        (distances[i], i)\n        for i in range(1, n + 1)\n        if distances[i]!= float('inf')\n    )\n    return str(res[1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,M,K = list(map(int, stdin.split()))\n    d = [[1e9]*N for _ in range(N)]\n    for _ in range(M):\n        X,Y,W = list(map(int, stdin.split()))\n        d[X-1][Y-1] = min(d[X-1][Y-1], W)\n        d[Y-1][X-1] = min(d[Y-1][X-1], W)\n    visited = [False]*N\n    q = []\n    q.append(0)\n    visited[0] = True\n    ans = 0\n    while q:\n        cur = q.pop(0)\n        for i in range(N):\n            if d[cur][i] == 1e9 and not visited[i]:\n                ans += 1\n                q.append(i)\n                visited[i] = True\n    if K > ans:\n        K = ans\n    return str(K)\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    A = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        A[u - 1].append((v - 1, w))\n    B = [[] for _ in range(n)]\n    for _ in range(n):\n        B[_].append((0, 0))\n    for _ in range(n):\n        for v, w in A[_]:\n            B[_][v] = (w + B[_][v][0], min(B[_][v][1], w) + 1)\n    d = []\n    for _ in range(n):\n        d.append(B[_][_][1])\n    d.sort()\n    print(d[k - 1])\n    return ''\n\n\nprint(solution(input()))"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    # first_path = [[1] * (n + 1) for _ in range(n + 1)]\n\n    lengths = [[0] * (n + 1) for _ in range(n + 1)]\n    for x, _ in graph[1]:\n        lengths[x][x] = 0\n    for i in range(2, n + 1):\n        for j in range(1, n + 1):\n            for y, w in graph[j]:\n                lengths[y][i] = max(lengths[y][i], lengths[j][i - 1] + w)\n    return lengths[1][n]\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        matrix[x - 1][y - 1] = w\n        matrix[y - 1][x - 1] = w\n\n    distances = [[0] * n for _ in range(n)]\n    for i in range(n):\n        distances[i][i] = 0\n        for j in range(i + 1, n):\n            distances[i][j] = distances[j][i] = 1e9\n    for i in range(n):\n        for j in range(n):\n            if i!= j and matrix[i][j]!= 0:\n                distances[i][j] = distances[j][i] = matrix[i][j]\n                break\n\n    def find(node: int) -> tuple:\n        if distances[node][node] == 0:\n            return node, 0\n        else:\n            min_dist, parent = float('inf'), -1\n            for nei in range(n):\n                if distances[node][nei] < min_dist and nei!= node:\n                    min_dist, parent = distances[node][nei], nei\n            return find(parent)\n\n    path = []\n    for _ in range(k):\n        node, distance = find(0)\n        path.append(node + 1)\n        for nei in range(n):\n            distances[node][nei] = min(distances[node][nei], distances[node][nei] + distance)\n\n    return''.join(map(str, sorted(path)))\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for i in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x - 1].append((y - 1, w))\n        graph[y - 1].append((x - 1, w))\n    return print(solve(n, graph, k))\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    d = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        d[u].append((w, v))\n        d[v].append((w, u))\n    d = sorted(d, key=lambda x: (x[0], x[1]))\n    visited = {i: False for i in range(1, n + 1)}\n    q = collections.deque()\n    q.append(1)\n    visited[1] = True\n    t = 0\n    while len(q) > 0:\n        u = q.popleft()\n        if u == k:\n            return t\n        for i in range(len(d[u])):\n            w, v = d[u][i]\n            if not visited[v]:\n                visited[v] = True\n                q.append(v)\n                t += w\n    return -1\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    #\u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0442\u0430\u043a\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0422\u0430\u043a \u043a\u0430\u043a \u0438\u043c\u0435\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1 \u0438\u043b\u0438 2 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n    max_diff = 0\n    for i in range(len(a)-1):\n        if a[i+1] - a[i] > max_diff:\n            max_diff = a[i+1] - a[i]\n    res = n - max_diff\n    team_diff = 0\n    team_count = 0\n    for i in range(len(a)):\n        team_diff = max(team_diff, a[i]-min(a))\n        team_count += 1\n        if team_diff > max_diff:\n            max_diff = team_diff\n            res += 1\n    return str(res) +'' + str(team_count)"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    n2 = len(a)\n    a.sort()\n    # print(n2)\n    minD = min(a[i] - a[i - 1] for i in range(1, n2))\n    # print(minD)\n    ans = 0\n    res = 0\n    count = 1\n    for i in range(1, n2):\n        if a[i] - a[i - 1] < minD:\n            count += 1\n        else:\n            res = max(res, count)\n            count = 1\n    if count > 0:\n        res = max(res, count)\n    return str(res) +'' + str(res)\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    skills = sorted([int(x) for x in stdin.split()[1:]])\n    # if n < 3:\n    #     return str(sum(skills))\n    # else:\n    #     total_diversity = 0\n    #     while skills:\n    #         if skills[0] + skills[-1] == max(skills) + min(skills):\n    #             total_diversity += skills.pop() - skills.pop()\n    #         else:\n    #             return str(total_diversity)\n    #     return str(total_diversity)\n    # print(total_diversity)\n    # return 0\n\n    teams = []\n    teams.append(set(skills))\n    while len(skills) > 2:\n        diversity = skills[0] - skills[1]\n        diversity_teams = set()\n        for i in range(1, len(skills)):\n            if skills[i] + diversity > skills[i - 1] + diversity:\n                diversity_teams.add(skills[i] + diversity)\n                continue\n            for j in range(i + 1, len(skills)):\n                if skills[j] + diversity > skills[i - 1] + diversity:\n                    diversity_teams.add(skills[i - 1] + diversity)\n                    break\n            else:\n                diversity_teams.add(skills[i - 1] + diversity)\n        teams.append(diversity_teams)\n        skills = list(diversity_teams)\n    return str(len(teams) - 1) + \" \" + str(min(skills))\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    res = 9999999\n    k = 0\n    team = []\n    for i in range(n):\n        if len(team) == 0:\n            team.append(i)\n            k += 1\n            if array[i] > max(array[team[0]:team[0]+k]):\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            elif array[i] < min(array[team[0]:team[0]+k]):\n                res = min(res, min(array[team[0]:team[0]+k]) - max(array[team[0]:team[0]+k]))\n            else:\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            continue\n        if i >= team[0] and i < team[0] + k:\n            continue\n        if i == team[0] + k:\n            team.append(i)\n            k += 1\n            if array[i] > max(array[team[0]:team[0]+k]):\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            elif array[i] < min(array[team[0]:team[0]+k]):\n                res = min(res, min(array[team[0]:team[0]+k]) - max(array[team[0]:team[0]+k]))\n            else:\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            continue\n        if array[i] < array[team[0]] and len(team) < 3:\n            continue\n        if array[i] < array[team[0]] and len(team) >= 3:\n            team = team[0:1]\n        if i == n - 1 and len(team) == 3:\n            res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            break\n        if len(team) < 3:\n            team.append(i)\n            k += 1\n            if array[i] > max(array[team[0]:team[0]+k]):\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            elif array[i] < min(array[team[0]:team[0]+k]):\n                res = min(res, min(array[team[0]:team[0]+k]) - max(array[team[0]:team[0]+k]))\n            else:\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n        elif len(team) == 3:\n            if array[i] < max(array[team[0]:team[0]+k]):\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n            elif array[i] > min(array[team[0]:team[0]+k]):\n                res = min(res, min(array[team[0]:team[0]+k]) - max(array[team[0]:team[0]+k]))\n            else:\n                res = min(res, max(array[team[0]:team[0]+k]) - min(array[team[0]:team[0]+k]))\n    return str(res) + \" \" + str(k)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    skills = sorted([int(i) for i in stdin])\n    min_skill = min(skills)\n    max_skill = max(skills)\n    diversities = []\n    for i in range(1, len(skills)):\n        diversities.append(max_skill - min_skill)\n        min_skill = min(min_skill, skills[i])\n        max_skill = max(max_skill, skills[i])\n    diversities.append(max_skill - min_skill)\n    return str(sum(diversities)) +'' + str(len(diversities) + 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    teams = sorted(map(int, stdin.split()))\n    diversity = 0\n    min_skill = teams[0]\n    max_skill = teams[0]\n    teams = [[teams[0]]]\n    for i in range(1, n):\n        if teams[-1][-1] == max(teams[-1]) or teams[-1][-1] == min(teams[-1]):\n            diversity += max(teams[-1]) - min(teams[-1])\n            teams[-1].append(teams[-1][-1])\n        else:\n            teams[-1].append(teams[-1][-1])\n            diversity += max(teams[-1]) - min(teams[-1])\n            max_skill = max(max_skill, max(teams[-1]))\n            min_skill = min(min_skill, min(teams[-1]))\n            teams.append([teams[-1][0]])\n    diversity += max_skill - min_skill\n    return str(diversity) + \" \" + str(len(teams))\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = list(map(int, stdin.split()))\n    skills.sort()\n    res = n\n    k = n\n    t = n\n    ans = []\n    while k > 0:\n        d = skills[k] - skills[0]\n        if d < 0:\n            k -= 1\n        else:\n            ans.append(k)\n            res += d\n            k -= k\n    for i in range(len(ans) - 1):\n        if i == len(ans) - 2:\n            res += skills[ans[i]]\n        else:\n            res += (skills[ans[i + 1]] - skills[ans[i]])\n    print(res)\n    return str(res) + \" \" + str(len(ans))\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = sorted(map(int, stdin.split()[1:]))\n    res = n\n    k = 0\n    for i in range(n):\n        if skills[i] == skills[i-1]:\n            continue\n        if i == 0 or skills[i] > skills[i-1] + 1:\n            k = 1\n            res += k\n            continue\n        res += skills[i] - skills[i-1]\n    return str(res) + \" \" + str(k)"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skill = list(map(int, stdin.split()))\n    best_team = []\n    for i in range(n):\n        skills = []\n        for j in range(i, n):\n            if skill[j] >= skill[i]:\n                skills.append(skill[j])\n        best_team.append(len(skills))\n    best_team.sort(reverse=True)\n    total_div = 0\n    for i in range(len(best_team) - 1):\n        total_div += best_team[i] - best_team[i + 1]\n    print(total_div, best_team[0])\n    return\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # 1\n    min_d = a[0]\n    max_d = a[0]\n    for i in range(1, n):\n        min_d = min(min_d, a[i])\n        max_d = max(max_d, a[i])\n    # 2\n    res = (max_d - min_d)\n    k = 1\n    while k <= n:\n        min_d = min(min_d, a[0])\n        max_d = max(max_d, a[0])\n        max_d = max(max_d, max(a[1:]))\n        min_d = min(min_d, min(a[1:]))\n        res += (max_d - min_d)\n        k += 1\n    print(res, k)\n    return res, k\n    \n    \nsolution(stdin)\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, min_summands(int(stdin))))\n    \n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    count = 1\n    if stdin[0] == 0:\n        return \"0\"\n    if stdin[0] < 10:\n        return str(stdin[0])\n    while count < 10:\n        if stdin[0] == 10 ** count:\n            if count == 8:\n                return \"10\"\n            if count == 7:\n                return \"100\"\n            return \"1000\"\n        elif stdin[0] % 10 == 0 and (count - 1) * 10 == stdin[0]:\n            return str(stdin[0] // 10) + str(stdin[0] % 10) + \"0\"\n        else:\n            return str(stdin[0] // 10) + str(stdin[0] % 10)\n        count += 1\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    total = 0\n    for _ in stdin.split():\n        a = int(_)\n        if a == 0:\n            cnt += 1\n            total += a\n        elif cnt == 0:\n            total += a\n        elif cnt == 1:\n            total += a\n        else:\n            total += a\n        cnt += 1\n    print(cnt)\n    print(total)\n    return ''.join(str(total) + '\\n')\n\n\nsolution(input())\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    lst = sorted(int(i) for i in lst)\n    ans = 0\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            ans += 1\n        else:\n            ans += 2\n            lst = lst[:i-1] + [ans] + lst[i-1:]\n            ans = 0\n    return lst[-1]\n\n\nfor case in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    what is the minimum number of summands?\n    '''\n    \n    all_num = []\n    for i in stdin.splitlines():\n        all_num.append(int(i))\n\n    # print(all_num)\n    def binary_search(array, target, lo = 0, hi = None):\n        hi = len(array) if hi is None else hi\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if array[mid] == target:\n                return mid\n            elif array[mid] > target:\n                hi = mid\n            else:\n                lo = mid + 1\n        return -1\n\n    all_num.sort()\n    # print(all_num)\n    \n    sum = 0\n    count = 1\n    n = 1\n    summands = []\n    for i in range(len(all_num)):\n        if all_num[i] == all_num[i - 1]:\n            n += 1\n        else:\n            summands.append(n)\n            n = 1\n    # print(summands)\n    if len(summands) > 0:\n        summands.append(n)\n    # print(summands)\n    \n    for i in range(len(summands)):\n        if summands[i] == 1:\n            sum += all_num[i]\n        else:\n            # print(i)\n            sum += all_num[i]\n            sum += all_num[i]\n            sum -= all_num[i - 1]\n        count += 1\n        # print(sum, count)\n    # print(sum, count)\n    \n    return count\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    max_number = int(max(stdin.split()))\n    min_number = int(min(stdin.split()))\n    return str(min_number if min_number < max_number else max_number)\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    res = []\n    cnt = 0\n    while n > 0:\n        if cnt == 0:\n            res.append(n)\n        cnt += 1\n        n = n // 10\n    for i in range(len(res)):\n        if res[i] == 0:\n            res.pop(i)\n    if len(res) == 0:\n        return 0\n    for i in range(len(res)):\n        if i!= len(res) - 1:\n            if res[i] == res[i + 1]:\n                res[i] += 1\n    for i in range(len(res)):\n        if i!= len(res) - 1:\n            if res[i]!= res[i + 1]:\n                nums.append(res[i])\n        else:\n            nums.append(res[i])\n    for i in range(len(nums)):\n        if nums[i] < 10:\n            nums[i] = nums[i]\n    return''.join(str(x) for x in nums)\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    answer = ''\n    for index, i in enumerate(stdin):\n        if index == 0:\n            answer = str(int(i)) + '\\n'\n        else:\n            i = int(i)\n            if i == 0:\n                answer = answer\n            else:\n                temp = i\n                sum_ = i\n                while temp > 0:\n                    temp, mod = divmod(temp, 10)\n                    sum_ += mod\n                if sum_ == i:\n                    answer = answer + str(sum_) + '\\n'\n    return answer\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    count = 0\n    while (num // 10) >= 1:\n        count += 1\n        num = num // 10\n    if count!= 0:\n        print(count)\n    else:\n        print(num)\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0:\n            print(i)\n            break\n    else:\n        print(n)\n    return\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q: int = int(stdin)\n    for i in range(q):\n        n: int = int(stdin.split()[1])\n        p: list = list(map(int, stdin.split()[2]))\n        res: list = []\n        for j in range(n):\n            if p[j] == 1:\n                res.append(1)\n            else:\n                for k in range(1, n + 1):\n                    if p[j] == k:\n                        res.append(j + 1)\n                        break\n        print(*res)\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1:\n        return '1' * n\n    ans = 1\n    for i in range(1, n):\n        ans += (i + 1) * 2\n    return str(ans)\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    for _ in range(q):\n        n = int(lines[1])\n        p = list(map(int, lines[2].split()))\n        answer = []\n        for i in range(1, n+1):\n            answer.append(answer.count(i))\n        print(*answer)\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p))\n    times = 0\n    for i in range(1, n + 1):\n        times += (p[i - 1] - 1) * p[i - 1] - 1\n    print(times)\n    return stdin\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = list(map(int, stdin.split()))\n    ans = []\n    for i, (p_1, p_2, p_3, p_4) in enumerate(zip(p, p[1:], p[2:], p[3:]), 1):\n        ans.append(str(i))\n        if i == p_1:\n            ans.append(str(i))\n        elif i == p_2:\n            ans.append(str(i))\n        elif i == p_3:\n            ans.append(str(i))\n        else:\n            ans.append(str(i))\n        ans.append(str(i))\n        ans.append(str(i))\n        ans.append(str(i))\n        ans.append(str(i))\n        ans.append(str(i))\n        ans.append(str(i))\n    return''.join(ans)\n\nsolution(\"3\\n5 1 2 3 4 5\\n3\\n2 3 1\")\n\nsolution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\")\n\nsolution(\"6\\n6 6 2 1 5 3\\n3\\n2 3 1\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\")\n\nsolution(\"6\\n6 6 2 1 5 3\\n2\\n2 3 1\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\")\n\nsolution(\"6\\n6 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\")\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    print(p)\n    results = []\n    def calc(p_i, day):\n        return sum(map(lambda x: 1 if x == day else 0, p))\n    for day in range(1, n + 1):\n        temp = calc(p_i, day)\n        results.append(temp)\n    return str(results)\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = sorted(map(int, stdin.split()))\n    a = [0] * n\n    p_dict = dict()\n    for i in range(len(p)):\n        p_dict[p[i]] = i\n\n    for i in range(1, n):\n        a[i] = p_dict[i] - p_dict[i-1]\n\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    t = n + 1\n    c = 1\n    ans = []\n    while t!= 1:\n        for i in p:\n            if i == c:\n                c += 1\n        ans.append(c)\n        p.remove(c)\n        t -= 1\n        c = 1\n    return''.join(str(i) for i in ans)\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    ans = {}\n    for _ in range(q):\n        n = int(stdin())\n        p = list(map(int, stdin().split()))\n        nums = []\n        for i in range(1, n + 1):\n            nums.append((i, p.count(i)))\n        nums.sort(key=lambda x: x[1], reverse=True)\n        ans[nums[0][0]] = 1\n        for i in range(1, n):\n            ans[nums[i][0]] = max(ans[nums[i][0]], nums[i - 1][1] + 1)\n    return \" \".join(str(e) for e in ans.values())\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = sorted(map(int, stdin.split()))\n    return \" \".join(map(str, (len(set(p)) - len(p))))\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for i in range(int(stdin.strip().split()[0])):\n        n, k = stdin.strip().split()[1:]\n        k = int(k)\n        a = sorted(list(map(int, stdin.strip().split()[1:])))\n        k = max(a)\n        d = {}\n        for x in a:\n            if x in d:\n                d[x] += 1\n            else:\n                d[x] = 1\n        # print(d)\n        for x, y in d.items():\n            if k == x:\n                if k == 0:\n                    continue\n                else:\n                    a = k - 1\n                break\n        else:\n            a = k\n        answer.append(str(a))\n    return''.join(answer)\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    \n    ans = 0\n    for i in range(q):\n        l = 0\n        r = n-1\n        while l < r:\n            ans = max(ans, arr[l] + arr[r])\n            if arr[l] + arr[r] > n:\n                r -= 1\n            else:\n                l += 1\n    print(ans)"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    goods = []\n    for _ in range(n):\n        goods.append(int(stdin.pop(0)))\n    q = int(stdin.pop(0))\n    stdin = stdin[1:]\n    prices = []\n    for _ in range(q):\n        prices.append(int(stdin.pop(0)))\n    prices.sort()\n    #print(prices)\n    prices = prices[::-1]\n    #print(prices)\n    answer = []\n    for price in prices:\n        #print(goods)\n        #print(prices)\n        tmp = 0\n        for good in goods:\n            #print(good)\n            tmp += good\n            if tmp > price:\n                break\n        answer.append(price)\n    return \"\\n\".join(map(str, answer))\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        prices = list(map(int, stdin.split()))\n        prices.sort()\n        print(prices)\n    return \"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.strip().split('\\n')\n    a = stdin.strip().split('\\n')\n    d = {}\n    for i in range(len(a)):\n        d[i] = int(a[i])\n    sorted_a = sorted(d.keys(), key=lambda x: d[x])\n    return_a = sorted_a[0]\n    return_b = 0\n    for i in sorted_a[1:]:\n        if d[return_a] + d[i] < d[return_b]:\n            return_b = i\n        return_a = i\n    return str(return_a) + '\\n' + str(return_b)\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    goods = list(map(int, stdin.split()))\n\n    res = []\n    for i in range(q):\n        goods_price = goods.copy()\n        goods_price.sort()\n        res.append(goods_price[-1] - goods_price[0])\n\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, q = stdin.split()\n    goods = stdin.split()\n    for i in range(int(q)):\n        goods.sort()\n        min_price = goods[0]\n        for j in range(1, len(goods)):\n            if goods[j] < min_price:\n                min_price = goods[j]\n            else:\n                continue\n        print(min_price)\n\n\nsolution(input())\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = list(map(int, stdin.split()))\n\n    min_price = prices[0]\n    max_price = prices[0]\n    for price in prices[1:]:\n        min_price = min(min_price, price)\n        max_price = max(max_price, price)\n\n    res = 0\n    for price in prices:\n        res += (price - min_price)\n        res += (price - max_price)\n    return str(res)\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    input = stdin.split()\n    goods = input[1:]\n    print(sum(goods))\n    return goods\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = sorted([int(stdin) for stdin in stdin.split()])\n    count = [0] * n\n    for i in range(n):\n        count[i] = sum([1 if skills[j] >= skills[i] else 0 for j in range(i + 1, n)])\n    return '\\n'.join(map(str, count))\nprint(solution(input()))\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    st = list(map(int, stdin.split()))\n    c = {}\n    ans = []\n    for i in range(n):\n        c[st[i]] = i\n    for i in range(k):\n        a, b = map(c.get, stdin.split())\n        if (a < b):\n            ans.append(a)\n    return''.join([str(x) for x in ans])\nsolution('4 2')\nsolution('10 4 10 15')\nsolution('5 4 1 5 4 3 7 1 2 5')\nsolution('1 2')\nsolution('2 1')\nsolution('4 6')\nsolution('2 1')\nsolution('5 4 3 5 3 1 7 5')\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    r = sorted(map(int, stdin.split()))\n    dp = [[0 for i in range(n)] for j in range(n)]\n    #print(dp)\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if r[i] < r[j]:\n                dp[i][j] = dp[i][j - 1] + dp[i + 1][j]\n            else:\n                dp[i][j] = dp[i][j - 1]\n    for i in range(n - 1):\n        if dp[i][i] < k:\n            return \"-1 -1\"\n        else:\n            return \" \".join(map(str, range(i + 1, n)))"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return '\\n'.join(str(i) for i in range(1, n + 1)\n                     if (i + 1) % i == 0 and i!= 1)\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = sorted(list(map(int, stdin.split())), reverse=True)\n\n    ret = []\n    for i in range(n):\n        ret.append(0)\n        for j in range(n):\n            if i!= j and skills[i] > skills[j]:\n                ret[i] += 1\n    return''.join(map(str, ret))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def mentor_exists(p1, p2):\n        for p in p1:\n            if p == p2:\n                return True\n        return False\n\n    def mentor_from_pairs(pairs):\n        return len([p for p in pairs if p[0] < p[1]])\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    programmers = {}\n    for i in range(k):\n        p1, p2 = map(int, stdin.split()[i*2+2:i*2+4])\n        if p1 not in programmers:\n            programmers[p1] = []\n        if p2 not in programmers:\n            programmers[p2] = []\n        programmers[p1].append(p2)\n        programmers[p2].append(p1)\n    pairs = [(int(stdin.split()[i*2+2]), int(stdin.split()[i*2+3])) for i in range(k)]\n    res = []\n    for p1 in programmers:\n        if p1 not in programmers:\n            res.append(0)\n        else:\n            counter = mentor_from_pairs(pairs)\n            if mentor_exists(programmers[p1], p1):\n                counter -= 1\n            res.append(counter)\n    return''.join([str(x) for x in res])"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    x, y = stdin.split()\n    return''.join(map(str, [i for i in range(1, n + 1) if not i in x and not i in y]))"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = sorted(map(int, stdin.split()))\n    pairs = [[int(i) for i in input().split()] for _ in range(k)]\n    num_pairs = {}\n    for p in pairs:\n        if p[0] not in num_pairs:\n            num_pairs[p[0]] = {p[1]}\n        else:\n            num_pairs[p[0]].add(p[1])\n        if p[1] not in num_pairs:\n            num_pairs[p[1]] = {p[0]}\n        else:\n            num_pairs[p[1]].add(p[0])\n    ans = []\n    for i in range(n):\n        if i in num_pairs and skills[i] in num_pairs[i]:\n            ans.append(0)\n        else:\n            ans.append(len(num_pairs))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    pairs = []\n    for i in range(k):\n        pairs.append(tuple(map(int, stdin.split())))\n    #print(pairs)\n    m = len(pairs)\n    res = []\n    for i in range(n):\n        d = {i: skills[i]}\n        #print(d)\n        if i in skills:\n            continue\n        else:\n            res.append(i)\n        for j in range(m):\n            if i == pairs[j][0]:\n                d[pairs[j][1]] = skills[pairs[j][1]]\n        print(d)\n        for key in d.keys():\n            if key in res:\n                continue\n            else:\n                res.append(key)\n    return''.join(str(i) for i in res)\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prog = {}\n    for _ in range(n):\n        s, v = map(int, input().split())\n        prog[s] = v\n    max_skill = max(prog.values())\n    res = []\n    for _ in range(k):\n        x, y = map(int, input().split())\n        if prog[x] < max_skill and prog[y] < max_skill:\n            res.append(1)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2:\n        return \"NO\"\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    d = {}\n    for i in range(n):\n        d[p[i]] = d.get(p[i], 0) + 1\n        d[q[i]] = d.get(q[i], 0) + 1\n    if len(d.keys()) < k:\n        return \"NO\"\n    s = list(map(str, range(1, n + 1)))\n    res = []\n    for key in d:\n        if d[key] == 1:\n            res.append(key)\n            continue\n        elif d[key] > 1:\n            res.append(key)\n            d[key] -= 1\n        else:\n            if len(res) < k:\n                continue\n            if all(s[i] >= s[i + 1] for i in range(len(res) - 1)):\n                res.sort()\n                break\n            else:\n                continue\n    return \"YES\" if len(res) == k else \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1:]))\n    q = list(map(int, stdin.split()[1:]))\n    s = [\"\"] * n\n    for i in range(n):\n        s[p[i]] = stdin[i + 1]\n    for i in range(n):\n        s[q[i]] = stdin[i + 1]\n    if len(set(s)) < k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\"\".join(s))\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1]))\n    q = list(map(int, stdin.split()[2]))\n\n    if (\n        (\n            all(\n                s[i] <= s[i + 1] for i in range(0, n - 1)\n            )\n            and all(\n                s[j] <= s[j + 1] for j in range(0, n - 1)\n            )\n        )\n        and len(set(p)) <= k\n        and len(set(q)) <= k\n    ):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(\"3 2\\n1 2 3\\n1 3 2\")\nsolution(\"2 2\\n1 2 1\\n1 3 2\")"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *perms = map(int, stdin.split())\n    a, b = map(int, input().split())\n    if n > k:\n        return \"NO\"\n    s = \"\"\n    while len(s) < n:\n        s += chr(ord('a') + a)\n        a = (a + 1) % n\n    if s[:n] == perms[0] * k:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = \"\".join(map(str, range(1, n + 1)))\n    perm1, perm2 = list(map(int, stdin.split()))\n\n    s = sorted(s[i - 1] for i in perm1)\n    s = sorted(s[i - 1] for i in perm2)\n    if \"\".join(s) == s:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n\n    p = sorted(map(int, stdin.split()[1:]))\n    q = sorted(map(int, stdin.split()[2:]))\n\n    if n < k:\n        return \"NO\"\n    else:\n        from itertools import product\n        for res in product(range(1, n + 1), repeat=k):\n            if sorted(res) == p and sorted(res[:k]) == q:\n                return \"YES\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = stdin.split()\n    p = list(map(int, p))\n    n = int(n)\n    k = int(k)\n    q = list(map(int, stdin.split()))\n    q = list(map(int, q))\n    s = list(input())\n    return \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = ''.join(sorted([i for i in stdin]))\n    return \"YES\" if len(s) >= k and len(s) - len(set(s)) >= k else \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, k = int(stdin[0]), int(stdin[1])\n\n    p, q = [], []\n    for i in range(n):\n        p.append(int(stdin[2][i]))\n\n    for i in range(n):\n        q.append(int(stdin[3][i]))\n    return \"YES\" if restore_string(p, q, n, k) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n, k = [int(x) for x in stdin.split()]\n    a = list(stdin.split())\n    a.sort()\n    if(a[0] > a[1]):\n        a = a[::-1]\n    result = \"\"\n    for i in range(n):\n        result += a[i]\n    if(k < 1 or len(set(a)) < k):\n        return \"NO\"\n    return \"YES\" + result"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.strip().split()))\n\n    shots = 0\n    start = 0\n    current = 0\n    for i in range(n):\n        shots += current\n        if d[i] == 0:\n            start = i + 1\n            current = 0\n        else:\n            current += 1\n\n    shots += current\n    return str(shots)\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"6\")\nsolution(\"2\")\nsolution(\"1 4\")\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    shots = 1\n    cans = 1\n    res = []\n    for i in range(n):\n        shots *= a[i]\n        if shots >= can:\n            shots -= a[i]\n            res.append(cans)\n            cans += 1\n        else:\n            cans = 1\n            break\n    if len(res) == n:\n        return str(shots)\n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dur = list(map(int, stdin.strip().split()))\n    print(min(dur)*n)\n    order = []\n    for i in range(n):\n        order.append((i, dur[i]))\n    order.sort(key=lambda x: x[1], reverse=True)\n    print(order)\n    # print(len(order))\n    # for i in range(len(order)-1):\n    #     print(i, order[i], order[i+1])\n    #     if order[i+1][1] - order[i][1] < 0:\n    #         print(\"error\")\n    #         break\n    #     print(\"ok\")\n    #     print(i+1, order[i][1])\n    #     if i == 0:\n    #         order.append((i, order[i+1][1]))\n    #     elif i == len(order)-1:\n    #         order.append((i, order[i-1][1]))\n    #     else:\n    #         if order[i+1][1] - order[i][1] < 0:\n    #             order.append((i, order[i+1][1]))\n    #         if order[i-1][1] - order[i][1] < 0:\n    #             order.append((i, order[i-1][1]))\n    # return(order)\n    return(min(dur)*n)\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1]))\n    cnt = 0\n    m = 0\n    for i in range(n):\n        cnt += max(0,a[i]-m)\n        m = max(m,a[i])\n    return str(cnt)\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    # print(solution([4, 2, 5, 3, 5, 3, 4, 5, 4, 3, 2]))\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n\n    for i in range(1, n + 1):\n        a[i - 1] *= i\n\n    print(sum(a))\n    print(*sorted(a))\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = list(map(int, stdin.split()))\n\n    if len(stdin) == 1:\n        return str(stdin[0] ** 2)\n\n    can_dur = list(map(int, stdin[1:]))\n    num_shots = 1\n    can_shooting_order = []\n    prev_can = stdin[0]\n    for cur_can in range(1, len(stdin)):\n        if cur_can == len(stdin):\n            break\n        can_dur.append(can_dur[-1])\n        if cur_can!= prev_can:\n            can_shooting_order.append(cur_can)\n            prev_can = cur_can\n        num_shots += min(can_dur[cur_can - 1], can_dur[cur_can])\n    return str(num_shots) + \" \" + \" \".join(map(str, can_shooting_order))\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = sorted([int(x) for x in stdin.split()])\n    if len(nums) == 1:\n        return str(nums[0] * n)\n    count = 0\n    for i in range(len(nums)):\n        if i == 0:\n            count += (nums[i] * n)\n        elif i == 1:\n            count += nums[i] * (n - nums[i - 1])\n        elif i >= 2:\n            count += nums[i] * (n - nums[i - 2] + nums[i - 1])\n    return str(count)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = stdin.strip().split()\n    return str(min(len(a) - a.count(str(x + 1)) for x in range(n))) + \" \" + \" \".join(map(str, sorted(a)))\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i][j] = dp[i - 1][j] + a[i - 1] * (i - 1 - j)\n            dp[j][i] = dp[j][i - 1] + a[i - 1] * (i - 1 - j)\n    ans = max(dp[-1])\n    for i in range(n, 0, -1):\n        if ans == dp[-1][i]:\n            ans = i\n    return str(ans)\n\ndef"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P_arr = list(map(int, stdin.split()))\n    output = \"\"\n    P = dict()\n    for i in range(N):\n        P[P_arr[i]] = i+1\n    P_arr.sort()\n    output = str(P[P_arr[0]]) + \" \" + str(P[P_arr[-1]]) + \"\\n\"\n    for i in range(1, N-1):\n        output += str(P[P_arr[i]]) + \" \"\n    output += str(P[P_arr[N-1]]) + \"\\n\"\n    return output\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    P = stdin.split(\" \")\n    P = sorted(P)\n    res = 0\n    for i in range(len(P)):\n        for j in range(i):\n            if P[i] > P[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin.split(' ')[0])\n    P = stdin.split(' ')[1:]\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i > j and P[i - 1] < P[j - 1]:\n                count += 1\n    return str(count)\n    \"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('2\\n1 2\\n3 2\\n4 2\\n5 1\\n3 2\\n2 2\\n1 1\\n')\n    '3'\n    >>> solution('2\\n1 2\\n3 2\\n4 2\\n5 1\\n3 2\\n2 2\\n1 1\\n')\n    '2'\n    >>> solution('3\\n3 2 2\\n1 1 1\\n3 2 1\\n3 1 2\\n')\n    '1'\n    '''\n    n = int(stdin.strip())\n    P = list(map(int, stdin.strip().split()))\n    P = sorted(P)\n    i = 1\n    while i < len(P) - 1:\n        if P[i] > P[i+1]:\n            return str(i)\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split()\n    nums = sorted(list(map(int, stdin.split())))\n    \n    def _is_satisfied(n1, n2):\n        if n1 > n2:\n            return True\n        if n1 == n2:\n            return False\n        return _is_satisfied(n2, nums[n1-1])\n    \n    return str(nums[len(nums)-1] - nums[0])\n    \n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = stdin.split()\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if j < i and P[j-1] > P[i-1]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    nums: list = list(map(int, stdin.split()))\n    count: int = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if nums[i] <= nums[j]:\n                count += 1\n    print(count)\n    return ''"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    perms = list(map(int, stdin.split()))\n    \n    counter = 0\n    for i in range(1, num+1):\n        for j in range(i):\n            if perms[j] > perms[i]:\n                counter += 1\n    return str(counter)\n\nsolution(input())\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n] = [int(n) for n in stdin.split()]\n    P = list(map(int, stdin.split()))\n    # print(n)\n    # print(P)\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if P[i] <= P[j]:\n                break\n        else:\n            count += 1\n    print(count)\n    return \"\"\n\nsolution(\"4 4 5 3 1 2\")\nsolution(\"3 3 3 3\")\nsolution(\"2 4 5 3 1 2\")\nsolution(\"1\")\nsolution(\"1 1\")\nsolution(\"2 3 5 4\")\nsolution
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    P = sorted(map(int, stdin.split()[1:]))\n    count = 0\n\n    for i in range(1, N):\n        if P[i-1] < P[i]:\n            count += 1\n\n    print(count)\n    return\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.strip().split(\" \")\n    N = int(input_[0])\n    a = input_[1:]\n    i = 0\n    while i < N:\n        count = 0\n        for j in range(i + 1, N):\n            if a[i] == a[j]:\n                count += 1\n        if count > 0:\n            i += 1\n        else:\n            N -= 1\n    return str(N)\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    count = {}\n    for i in a:\n        count[i] = count.get(i, 0) + 1\n    print(count)\n    a.sort(reverse=True)\n    while a:\n        tmp = a.pop()\n        if count[tmp] > 1:\n            count[tmp] -= 1\n        else:\n            del count[tmp]\n    print(len(count))\n    return str(len(count))\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 1\n    while l < N:\n        if a.count(a[l]) == 1:\n            a.pop(l)\n            l -= 1\n        else:\n            l += 1\n    return str(len(a))"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N: int = int(stdin)\n    sequence: list = list(map(int, stdin.split()))\n    \n    def remove_occ(sequence: list, to_remove: int) -> int:\n        i = 0\n        while i < len(sequence):\n            if sequence[i] == to_remove:\n                sequence.pop(i)\n            else:\n                i += 1\n        return len(sequence)\n    \n    result: int = remove_occ(sequence, sequence[0])\n    if result > 0:\n        print(result)\n    else:\n        print(len(sequence))\n    \n    return\n\nsolution(input())\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    N = int(inputs[0])\n    data = list(map(int, inputs[1].split()))\n    print(data)\n    data.sort()\n    print(data)\n    return\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    n = int(a[0])\n    b = map(int, a[1].split())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[i] == b[j]:\n                count += 1\n    return str(n - count)"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    remove = 0\n    while True:\n        if a[0]!= 1:\n            for i in range(len(a)-1, 0, -1):\n                if a[i]!= a[i-1]:\n                    a[i-1] = a[i]\n                    remove += 1\n            break\n        a.pop(0)\n    return remove"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    if n < 2:\n        return str(0)\n    nums = list(map(int, stdin.split()))\n\n    d = {}\n    result = 0\n    for x in nums:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n\n    for k in d:\n        if d[k] == 1:\n            continue\n        result += 1\n    return str(result)"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    for i in range(n):\n        if a[i] not in b:\n            b.append(a[i])\n            if d[a[i]] == 1:\n                del d[a[i]]\n            else:\n                d[a[i]] -= 1\n    return str(len(b))\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(solution(str(a)))\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    count = 0\n    while True:\n        flag = True\n        for i in range(len(arr)):\n            if arr[i]!= i + 1:\n                flag = False\n        if flag:\n            return''.join([str(x) for x in arr])\n        arr = [x for x in arr if x!= arr[i]]\n        count += 1"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.split()\n    Snuke = int(values[0])\n    x_1 = int(values[1])\n    x_2 = int(values[2])\n    x_3 = int(values[3])\n    x_4 = int(values[4])\n    x_5 = int(values[5])\n\n    if Snuke == 0:\n        if x_1 == 0:\n            print(1)\n        elif x_2 == 0:\n            print(2)\n        elif x_3 == 0:\n            print(3)\n        elif x_4 == 0:\n            print(4)\n        else:\n            print(5)\n    else:\n        if x_1 == 0:\n            print(2)\n        elif x_2 == 0:\n            print(3)\n        elif x_3 == 0:\n            print(4)\n        elif x_4 == 0:\n            print(5)\n        else:\n            print(1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(' ')\n    if inp[0] == '0':\n        return inp[1]\n    else:\n        return inp[2]"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, x_2, x_3, x_4, x_5) = stdin.split()\n    if x_1 == x_2 == x_3 == x_4 == x_5:\n        return '0'\n    if x_1 == x_2:\n        return '1'\n    if x_1 == x_3:\n        return '2'\n    if x_1 == x_4:\n        return '3'\n    if x_1 == x_5:\n        return '4'\n    if x_2 == x_3:\n        return '5'\n    if x_2 == x_4:\n        return '6'\n    if x_2 == x_5:\n        return '7'\n    if x_3 == x_4:\n        return '8'\n    if x_3 == x_5:\n        return '9'\n    if x_4 == x_5:\n        return '0'\n    return 'error'\n\nsolution('0 2 3 4 5')\nsolution('1 2 3 4 5')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 1 2 3 4')\nsolution('0 0 0 0 0')\nsolution('0 0 0 0 1')\nsolution('0 0 0 0 0')\nsolution('1 1 1 1 1')\nsolution('0 1 2 3 4')\ns"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    x_1, x_2, x_3, x_4, x_5 = map(int, tokens[:5])\n    if x_1 == 0:\n        print(1)\n    return \"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = stdin.split(\" \")\n    snuke = 0\n    if x_1 == \"0\":\n        snuke = 1\n    elif x_2 == \"0\":\n        snuke = 2\n    elif x_3 == \"0\":\n        snuke = 3\n    elif x_4 == \"0\":\n        snuke = 4\n    elif x_5 == \"0\":\n        snuke = 5\n    return str(snuke)\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    return str(x_1 if x_1 == 0 else x_2)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = stdin.split()\n    x_1 = int(x_1)\n    x_2 = int(x_2)\n    x_3 = int(x_3)\n    x_4 = int(x_4)\n    x_5 = int(x_5)\n    if x_1 == 0:\n        return str(x_2)\n    elif x_2 == 0:\n        return str(x_3)\n    elif x_3 == 0:\n        return str(x_4)\n    elif x_4 == 0:\n        return str(x_5)\n    elif x_5 == 0:\n        return str(x_1)\n    else:\n        return str(x_1)"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    height = int(input_list[0])\n    width = int(input_list[1])\n    s_min = height * width\n    s_max = height * width\n    if height == 1 or width == 1:\n        return str(s_max - s_min)\n    cut_count = 0\n    cut_count += height // 2 + 1\n    cut_count += width // 2 + 1\n    for i in range(0, cut_count):\n        s_min += width\n        s_max += width\n        if height <= width:\n            s_max -= height\n        else:\n            s_min -= height\n    return str(s_max - s_min)\n\nsolution(\"3 5\")\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return f\"{(h * w) - (h + w)} - {(h * w)}\""
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  H, W = map(int, stdin.split())\n  min_side_h = min_side_w = float('inf')\n  max_side_h = max_side_w = float('-inf')\n  for h in range(1, H + 1):\n    for w in range(1, W + 1):\n      if w < h:\n        max_side_h = max(max_side_h, h)\n        min_side_h = min(min_side_h, h)\n        max_side_w = max(max_side_w, w)\n        min_side_w = min(min_side_w, w)\n      elif w > h:\n        max_side_w = max(max_side_w, w)\n        min_side_w = min(min_side_w, w)\n        max_side_h = max(max_side_h, h)\n        min_side_h = min(min_side_h, h)\n  return f\"{min_side_h - max_side_h} {min_side_w - max_side_w}\"\n\n\ndef"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    left = max(n, m)\n    right = min(n, m)\n    return str(left - right)"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split()\n    H = int(H)\n    W = int(W)\n\n    return str(H * W - (min(H, W) * max(H, W)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def max_pie_size(h, w):\n        return h * w\n\n    def min_pie_size(h, w):\n        return max_pie_size(h, w) - (max_pie_size(h, w) - min_pie_size(h, w)) // 3\n\n    h, w = map(int, stdin.split())\n    return str(min_pie_size(h, w) - max_pie_size(h, w))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(i) for i in stdin.split()]\n    return str(h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*w - (h*"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, w = stdin.split()\n    h = int(h)\n    w = int(w)\n    # The area of the largest piece is w*h.\n    largest_piece = w * h\n    # The area of the smallest piece is (w-1)*(h-1).\n    smallest_piece = (w-1) * (h-1)\n\n    return str(largest_piece-smallest_piece)"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    height, width = int(stdin[0]), int(stdin[1])\n    if height % 2!= 0 or width % 2!= 0:\n        return \"0\"\n    # since we have to divide the bar into 3 pieces, the height and width of each piece must be odd\n    if height < width:\n        return \"0\"\n    if height == width:\n        return str(height * width)\n    # calculate the height and width of the largest rectangle\n    height_of_largest_rectangle = max(height, width)\n    height_of_smallest_rectangle = min(height, width)\n    # calculate the area of the largest rectangle\n    area_of_largest_rectangle = height_of_largest_rectangle * height_of_largest_rectangle\n    # calculate the area of the smallest rectangle\n    area_of_smallest_rectangle = height_of_smallest_rectangle * height_of_smallest_rectangle\n    # return the minimum possible value of S_{max} - S_{min}\n    return str(area_of_largest_rectangle - area_of_smallest_rectangle)\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    input_data = input_data.split(\" \")\n    h, w = int(input_data[0]), int(input_data[1])\n    max_s = 0\n    min_s = 0\n    for i in range(1,h+1):\n        for j in range(1,w+1):\n            s = i*j\n            if s > max_s:\n                max_s = s\n            if s < min_s:\n                min_s = s\n    return max_s-min_s\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 2:\n        return \"Yes\"\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a)\n    b = a\n    for i in range(2,N):\n        if a[i] % 4 == 0:\n            a = a[0:i]\n            a.append(b[i])\n            a = a + b[i+1:]\n            break\n    print(a)\n    if sum([x*y for x,y in zip(a,a[1:])]) % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(input())\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = map(int, stdin.split())\n    for i in range(1, n):\n        if a[i] % 4 == 0:\n            a[i], a[i - 1] = a[i - 1], a[i]\n            break\n    return \"Yes\" if a == [1, 10, 100] else \"No\"\n\n\nsolution(\"3\\n1 10 100\")\nsolution(\"5\\n1 2 4 10 100\")\nsolution(\"6\\n1 2 3 4 5 6\")\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    mult = 4\n    for i in range(N):\n        a[i] *= mult\n        if a[i] % 4!= 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    if (4 * a[0]) % (4 * a[1]) == 0 and (4 * a[-1]) % (4 * a[-2]) == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n\n    for i in range(1, n - 1):\n        if a[i] % 4 == 0:\n            if a[i] * a[i + 1] % 4 == 0:\n                ans = 1\n                break\n    if ans == 0:\n        print('No')\n    else:\n        print('Yes')\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split()))\n    count = 1\n    ans = True\n    for i in range(1, N):\n        if count == 4:\n            ans = False\n            break\n        if a[i] % 4 == 0:\n            count *= a[i] // 4\n        else:\n            ans = False\n            break\n    if ans:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # ---YOUR CODE HERE------\n    # return your answer\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_multiple(num: int) -> bool:\n        return num % 4 == 0\n\n    n: int = int(stdin)\n    lst: List[int] = list(map(int, stdin.split()))\n    a, b = lst[:2]\n    s: Set[int] = set()\n    for i in range(n):\n        s.add(b * lst[i + 1])\n    if is_multiple(a) and is_multiple(b) and (not s):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n    for i in range(len(seq)):\n        for j in range(i + 1, len(seq)):\n            if seq[i] * seq[j] % 4 == 0:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        return \"Yes\"\n\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[i + 1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = ''\n    for i in range(len(s)):\n        t += s[i]\n        if i < len(s) - 1:\n            t += s[i + 1]\n    t = t[::-1]\n    if s < t:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i]!= s[i+1]:\n            return 'No'\n    return 'Yes'\n\"\"\"\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = ''.join(sorted(s))\n    return t < s\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin, stdin\n    t.replace(' ', '')\n    s.replace(' ', '')\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        if s.count(s[i]) < t.count(s[i]):\n            s = s.replace(s[i], '', 1)\n        else:\n            t = t.replace(t[i], '', 1)\n    return 'Yes' if s < t else 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    temp_t = ''\n    for i in range(len(t)):\n        if t[i] > s[i]:\n            temp_t += t[i]\n        else:\n            temp_t += s[i]\n    if t < temp_t:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    # Let us check if a string, t, is a substring of a string, s\n    if s in t:\n        # Split s into a list of its characters\n        s_list = list(s)\n        s_list.sort()\n        # Split t into a list of its characters\n        t_list = list(t)\n        t_list.sort()\n        # Compare each char in the list of characters of t with that of s\n        for i in range(len(t_list)):\n            if s_list[i]!= t_list[i]:\n                return 'No'\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(input())"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 'Yes' if sorted(s) < sorted(t) else 'No'\n    # Your code goes here\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    print(sorted(s) < sorted(t))\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'YES' if c % (a * b) == 0 else 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    S = 0\n    N = 1\n    while True:\n        S += N\n        N += 1\n        if N % A == 0 and N % B == 0 and N % C == 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    if (a % c) == 0 and (b % c) == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    A_binary = bin(A)[2:]\n    B_binary = bin(B)[2:]\n    C_binary = bin(C)[2:]\n    A_binary = \"0\" * (len(A_binary) - len(A_binary.rstrip(\"0\"))) + A_binary.rstrip(\"0\")\n    B_binary = \"0\" * (len(B_binary) - len(B_binary.rstrip(\"0\"))) + B_binary.rstrip(\"0\")\n    C_binary = \"0\" * (len(C_binary) - len(C_binary.rstrip(\"0\"))) + C_binary.rstrip(\"0\")\n    for i in range(len(B_binary)):\n        if A_binary[i]!= B_binary[i]:\n            break\n    if A_binary[i]!= \"1\":\n        return \"NO\"\n    elif C_binary[i]!= \"1\":\n        return \"NO\"\n    elif A_binary[-i]!= \"1\" or B_binary[-i]!= \"1\" or C_binary[-i]!= \"1\":\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a%b == 0 and a%c == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if is_congruent_to_modulus(a, b, c) == True:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A % 2 == 0 and B % 2 == 0 and C % 2 == 0 and max(A, B) <= min(A, C) and max(C, A) <= min(C, B):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = list(map(int,stdin.split()))\n    def is_multiple_of(n, m):\n        return n % m == 0\n\n    for i in range(1,A+1):\n        if not is_multiple_of(i,A) and is_multiple_of(C,B):\n            print('YES')\n            return 'YES'\n    print('NO')\n    return 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    if a * b * c % 2 == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    n = int(stdin[0])\n    m = int(stdin[1])\n    c = int(stdin[2])\n\n    A = list(map(int, stdin[0]))\n    B = list(map(int, stdin[1]))\n    C = list(map(int, stdin[2]))\n\n    if (len(A)!= len(B) or len(B)!= len(C)):\n        return \"NO\"\n\n    elif len(A) == 1:\n        if (c % A[0]) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    elif len(B) == 1:\n        if (c % B[0]) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    elif len(C) == 1:\n        if (c % C[0]) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    else:\n        for i in range(len(A)):\n            for j in range(len(B)):\n                for k in range(len(C)):\n                    if (A[i] * B[j] * C[k]) == c:\n                        return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B=map(int,input().split())\n    print(A*B-((A-2)*2+2)*2)\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n\n    return str(int(A*B - (A+B)**2 + A**2 + 2*A*B + (A+B)**2))\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b) - 1)\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(1 - (a * b))"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    c = a * b - 2 * (a + b)\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(i) for i in stdin.split())\n    return str(1 + (A - 1) * (B - 1))\nprint(solution(input()))\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    return str(a * b - 2)"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split())\n    return(1)\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    print(A * (B - 2) + (A - 1) * 2)\n    return None"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(pow(a*b, 0.5))"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return str(max((x+2)*(y+2)*(z+2)-((x+y)*y+2*x+2*z)*x, 0))\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [X, Y, Z] = stdin.split(' ')\n    X, Y, Z = int(X), int(Y), int(Z)\n    ans = 0\n    while X - Y > Z:\n        ans += 1\n        X -= Y\n    return ans\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [X, Y, Z] = list(map(int, stdin.split()))\n\n    if X < Y:\n        return ''\n\n    seats = [[False for _ in range(X + 1)] for _ in range(Y + 1)]\n\n    for i in range(Z + 1):\n        for x in range(X):\n            for y in range(Y):\n                if not seats[y][x]:\n                    seats[y][x] = True\n                if seats[y][x] and y + 1 < Y and not seats[y + 1][x]:\n                    seats[y + 1][x] = True\n                if seats[y][x] and y + 1 < Y and seats[y + 1][x] and x - 1 >= 0 and not seats[y][x - 1]:\n                    seats[y + 1][x - 1] = True\n\n    return seats[-1][-1]\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return x // (y + 2 * z) + 1 if x // (y + 2 * z) >= 3 else 3\n\nprint(solution(input()))\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, z = map(int, stdin.split())\n    if x + 2 * z < y:\n        return '0'\n    if x + 2 * z > y + z:\n        return '1'\n    return '2'\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n\n    # Check if enough space to fit 3 people\n    if X + 2 * Y + 2 * Z < X:\n        return \"0\"\n\n    # If enough space, check if enough space between 2 people\n    if (X + 2 * Y) % (2 * Z) == 0:\n        return str(X // (2 * Z) + 1)\n    else:\n        return \"0\""
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N = stdin.pop(0)\n    if N == 1:\n        return '1'\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = 1\n    for i in range(N - 1):\n        dp[i][i + 1] = 1 if stdin[0] < stdin[1] else 2\n        dp[i + 1][i] = 1 if stdin[0] > stdin[1] else 2\n    for i in range(N - 2):\n        for j in range(i + 2, N):\n            if dp[i][j - 1] == 1:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return str(dp[0][-1])"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [[i, int(j)] for i, j in zip(*[[*map(int, stdin.split())] for _ in range(n)])]\n    b = [[i, int(j)] for i, j in zip(*[[*map(int, stdin.split())] for _ in range(n)])]\n\n    a.sort(key=lambda x: x[1])\n    b.sort(key=lambda x: x[1])\n\n    i = 0\n    j = 0\n    count = 0\n\n    while i < n and j < n:\n        if a[i][1] < b[j][1]:\n            count += 1\n            i += 1\n        else:\n            j += 1\n\n    return str(count)\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    reds, blues = stdin.strip().splitlines()\n    reds = list(map(lambda x: x.split(), reds.split(\" \")))\n    blues = list(map(lambda x: x.split(), blues.split(\" \")))\n    pairs = []\n    for red in reds:\n        if len(red) > 1:\n            pairs.append((int(red[0]), int(red[1])))\n    for blue in blues:\n        if len(blue) > 1:\n            pairs.append((int(blue[0]), int(blue[1])))\n    pairs.sort(key=lambda x: x[0])\n    print(pairs)\n    cnt = 0\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            if pairs[i][1] < pairs[j][1]:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    N = N - 1\n    a_list = list(map(int, stdin.splitlines()[1].split()))\n    a = a_list.copy()\n    b = a_list.copy()\n    b_list = list(map(int, stdin.splitlines()[2].split()))\n    c_list = list(map(int, stdin.splitlines()[3].split()))\n    c = c_list.copy()\n    d_list = list(map(int, stdin.splitlines()[4].split()))\n    d = d_list.copy()\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    count = 0\n    for i in range(N):\n        if a[i] < b[i] and c[i] < d[i]:\n            count += 1\n    return str(count)\n    \n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # from left to right\n    # N-1 because the second to last pair is (a[-2], b[-2])\n    # and the last pair is (a[-3], b[-3])\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            # check if this pair is going to make a rival pair\n            if a[i] < a[j] and b[i] < b[j]:\n                # print(a[i], b[i], a[j], b[j])\n                return str(2)\n\n    return str(1)"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    red = list(map(int, stdin.split()[1:]))\n    blue = list(map(int, stdin.split()[1:]))\n    pairs = []\n    if N == 0:\n        return \"\"\n    for i in range(N):\n        for j in range(N):\n            if i < j and red[i] < blue[j] and red[j] < blue[i] and red[i] < blue[j] < red[j]:\n                pairs.append((red[i], blue[i]))\n                pairs.append((red[j], blue[j]))\n    return str(len(set(pairs)))\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    n = int(a)\n    al = []\n    bl = []\n    for i in range(n):\n        al.append(int(b[i].split()[0]))\n        bl.append(int(b[i].split()[1]))\n    al.sort()\n    bl.sort()\n    ans = 0\n    for i in range(n):\n        if al[i] < bl[i]:\n            ans += 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    red = [int(i) for i in stdin.split()]\n    blue = [[int(i) for i in stdin.split()] for j in range(N)]\n    res = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                if blue[i][0] < blue[j][0] and blue[i][1] < blue[j][1]:\n                    res += 1\n    return str(res)"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = {}\n    for i in range(N):\n        a, b = map(int, stdin.split())\n        d[(a, b)] = 1\n        d[(b, a)] = 1\n    return str(len(d.keys()))"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    0\n    >>> solution('4 2')\n    7\n    >>> solution('2 3')\n    7\n    >>> solution('1 3')\n    3\n    >>> solution('2 2')\n    3\n    >>> solution('1 2')\n    2\n    >>> solution('2 1')\n    2\n    >>> solution('1 1')\n    1\n    \"\"\"\n    N, T = map(int, stdin.strip().split())\n    return sum(T - i - 1 for i in range(N) if i == 0 or i == N - 1)\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total = 0\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = t\n            total += t\n            a[i + 1] += t\n            total += t\n        else:\n            a[i] = 0\n    print(total)\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 4')\n    '7'\n    \"\"\"\n    return str(sum([int(stdin.split()[i + 1]) - int(stdin.split()[i]) for i in range(len(stdin.split()))]))\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    return str(max([sum([max(abs(x - y), abs(x + y)) for y in lines[1:]]) for x in lines[0].split()]))\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    turn = 0\n    pre_turn = 0\n    total_time = 0\n    while turn < N:\n        turn = turn + 1\n        if pre_turn < turn - 1:\n            total_time = total_time + T\n            pre_turn = turn\n        else:\n            total_time = total_time + T + pre_turn - turn\n            turn = turn + 1\n            pre_turn = turn\n    return str(total_time)"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    times = sorted(times)\n    answer = 0\n    for i in range(n):\n        if times[i] > answer:\n            answer = times[i]\n    return str(answer)\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nT: O(N + T)\nS: O(1)\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    first = n - 1\n    switch = 0\n    total = 0\n    for i in range(n):\n        switch += t\n        total += switch\n        if total == 0 and switch == 0:\n            continue\n        if switch == t:\n            switch = 0\n        if total == t:\n            return str(t)\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    return str(N * (T - 1) + 3)\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = stdin.split()\n    n, t = int(N), int(T)\n    return str(min(t, n * (t + 1) // 2))"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    stdin_array = list(map(int, stdin.split()))\n    for i in range(N):\n        if i == 0:\n            if stdin_array[i] >= T:\n                print(stdin_array[i])\n            else:\n                print(T - stdin_array[i])\n        else:\n            if stdin_array[i] <= T:\n                print(stdin_array[i])\n            else:\n                print(T - stdin_array[i])\n    return ''\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... L 1\n   ... R 2\n   ... R 3\n   ...? 2\n   ... L 4\n   ...? 1\n   ... L 5\n   ...? 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... L 100\n   ... R 100000\n   ... R 123\n   ... L 101\n   ...? 123\n   ... L 10\n   ... R 115\n   ...? 100\n   ... R 110\n   ...? 115\n   ... ''')\n    '2'\n    \"\"\"\n    shelves = set()\n    l_q, r_q = stdin.split('\\n')[1:3]\n    for i in range(len(l_q)):\n        shelves.add(l_q[i])\n        shelves.add(r_q[i])\n    for q in l_q:\n        if q == r_q[0]:\n            break\n        shelves.remove(q)\n    for q in r_q:\n        if q == l_q[0]:\n            break\n        shelves.remove(q)\n    for q in r_q:\n        if q == r_q[1]:\n            break\n        shelves.remove(q)\n    for q in l_q:\n        if q == l_q[1]:\n            break\n        shelves.remove(q)\n    return len(shelves)\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    q = int(input_lines.pop(0))\n    assert q == len(input_lines)\n    for i in range(q):\n        query = input_lines[i].split()\n        if query[0] == \"L\":\n            _, id = int(query[1]), int(query[2])\n            res = 1\n            while id > _ and res <= i:\n                res += 1\n                _ = _ * 2\n            if id == _:\n                return str(res)\n        elif query[0] == \"R\":\n            _, id = int(query[1]), int(query[2])\n            res = 1\n            while id < _ and res <= i:\n                res += 1\n                _ = _ // 2\n            if id == _:\n                return str(res)\n        elif query[0] == \"?\":\n            _, id = int(query[1]), int(query[2])\n            res = 1\n            while id > _ and res <= i:\n                res += 1\n                _ = _ * 2\n            if id == _:\n                return str(res)\n        else:\n            assert False\n\nprint(solution(input()))\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    q = int(stdin.pop(0))\n    def remove_out_of_range(input):\n        output = []\n        for i in input:\n            if int(i) <= 10:\n                output.append(i)\n        return output\n    def find_min_pop(input):\n        output = []\n        if len(input) > 0:\n            for i in range(0, len(input), 1):\n                if input[i] <= 10:\n                    output.append(input[i])\n        return output\n    def pop(input):\n        if len(input) > 0:\n            if input[0] <= 10:\n                input = input[1:]\n        return input\n    for _ in range(q):\n        id = int(stdin.pop(0))\n        book_id = int(stdin.pop(0))\n        query = stdin.pop(0).split()\n        if int(query[0]) == 3:\n            if id > 10:\n                stdin.append(pop(find_min_pop(remove_out_of_range(query))))\n        if int(query[0]) == 1:\n            if id > 10:\n                stdin.append(remove_out_of_range(query)[0])\n        if int(query[0]) == 2:\n            if id > 10:\n                stdin.append(remove_out_of_range(query)[1])\n    return''.join(stdin)\n\nprint(solution(input()))"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes input and returns output.\"\"\"\n    def pop_left(q):\n        if len(q) == 1:\n            return 0\n        else:\n            return len(q) - 1\n    def pop_right(q):\n        if len(q) == 1:\n            return 0\n        else:\n            return len(q) - 1\n    q = int(stdin.split()[0])\n    def func(q):\n        if q == 1:\n            print(1)\n        else:\n            print(min(pop_left(q), pop_right(q)))\n    for _ in range(q):\n        l, r, m = stdin.split()\n        if r.startswith('?'):\n            m = int(m)\n            r = int(r[1:])\n        else:\n            r = int(r)\n        if l.startswith('?'):\n            l = int(l[1:])\n        else:\n            l = int(l)\n        if l == m:\n            print(1)\n        elif l > m:\n            print(pop_left(q))\n        else:\n            print(pop_right(q))\n        func(q)\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... L 100\n   ... R 100000\n   ... R 123\n   ...? 123\n   ... L 101\n   ...? 100\n   ... L 10\n   ...? 115\n   ... ''')\n    '1'\n    >>> solution('''\n   ... L 100\n   ... R 100000\n   ... R 123\n   ... L 101\n   ...? 100\n   ... L 10\n   ...? 115\n   ... ''')\n    '0'\n    \"\"\"\n    # read all the queries\n    q = int(stdin.split()[0])\n    queries = stdin.splitlines()\n    # for each query\n    for i in range(q):\n        # read the query\n        query = queries[i]\n        # extract the query type\n        query_type = query.split()[0]\n        # if the query is of type 3 we need to return the result of the last query\n        if query_type == '3':\n            # get the last query\n            query = queries[q - 1]\n            # get the first and second numbers\n            num1, num2 = map(int, query.split()[1:])\n            return str(get_result(num1, num2))\n        # else if the query is of type 2 we need to return the result of the previous query\n        elif query_type == '2':\n            # get the previous query\n            query = queries[i - 1]\n            # get the first and second numbers\n            num1, num2 = map(int, query.split()[1:])\n            return str(get_result(num1, num2))\n        # else if the query is of type 1 we need to return the result of the previous query\n        elif query_type == '1':\n            # get the previous query\n            query = queries[i - 1]\n            # get the first and second numbers\n            num1, num2 = map(int, query.split()[1:])\n            return str(get_result(num1, num2))\n        # otherwise we don't know what to return\n        else:\n            return '0'\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # data = stdin.split('\\n')\n    # data = list(map(lambda x: x.strip(), data))\n    data = stdin.split('\\n')\n\n    # 1\n    # data = [\n    #     'L 100',\n    #     'R 100000',\n    #     'R 123',\n    #     'L 101',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    #     'R 110',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    # ]\n    # data = [\n    #     'L 1',\n    #     'R 2',\n    #     'R 3',\n    #     '? 2',\n    #     'L 4',\n    #     '? 1',\n    #     'L 5',\n    #     '? 1',\n    # ]\n    # data = [\n    #     'L 100',\n    #     'R 100000',\n    #     'R 123',\n    #     'L 101',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    #     'R 110',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    # ]\n    # data = [\n    #     'L 1',\n    #     'R 2',\n    #     'R 3',\n    #     '? 2',\n    #     'L 4',\n    #     '? 1',\n    #     'L 5',\n    #     '? 1',\n    # ]\n    # data = [\n    #     'L 100',\n    #     'R 100000',\n    #     'R 123',\n    #     'L 101',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    #     'R 110',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    # ]\n\n    # 3\n    # data = [\n    #     'L 1',\n    #     'R 2',\n    #     'R 3',\n    #     '? 2',\n    #     'L 4',\n    #     '? 1',\n    #     'L 5',\n    #     '? 1',\n    # ]\n    # data = [\n    #     'L 100',\n    #     'R 100000',\n    #     'R 123',\n    #     'L 101',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    #     'R 110',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 100',\n    #     'L 10',\n    #     'R 115',\n    #     '? 115',\n    # ]\n    # data = [\n    #     'L 100',\n    #     'R 100000',\n    #     'R 123',\n    #     'L 101',\n    #     'L 10',\n    #     'R 115',\n    #     '"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''L 1\n   ... R 2\n   ... R 3\n   ...? 2\n   ... L 4\n   ...? 1\n   ... L 5\n   ...? 1\n   ... ''')\n    '1'\n    >>> solution('''L 100\n   ... R 100000\n   ... R 123\n   ...? 123\n   ... L 101\n   ...? 100\n   ... L 10\n   ... R 115\n   ...? 100\n   ... R 110\n   ...? 115\n   ... ''')\n    '2'\n    '''\n    q = int(stdin.strip().split()[0])\n    for _ in range(q):\n        l, r, k = map(int, stdin.strip().split()[1:4])\n        if l == 1:\n            if r == 2:\n                print(0)\n            else:\n                print(1)\n        elif l == 4:\n            if r == 1:\n                print(2)\n            else:\n                print(1)\n        elif l == 5:\n            if r == 4:\n                print(2)\n            else:\n                print(1)\n        else:\n            print(3)\n    return ''\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_queries = int(stdin.split()[0])\n    queries = []\n    shelf = []\n    for i in range(1, number_of_queries + 1):\n        if len(shelf) == 0:\n            shelf.append(i)\n        else:\n            if len(shelf) == 1:\n                shelf.append(i)\n                shelf.append(shelf[0])\n            else:\n                if len(shelf) == 2:\n                    shelf.append(shelf[0])\n                    shelf.append(i)\n                else:\n                    if len(shelf) == 3:\n                        if i == shelf[0]:\n                            shelf[0] = i\n                        else:\n                            shelf = shelf[0], i\n                    else:\n                        if i == shelf[0]:\n                            shelf[0] = i\n                        elif i == shelf[1]:\n                            shelf[1] = i\n                        else:\n                            shelf = shelf[0], i\n        queries.append(shelf)\n        shelf = []\n    # print(queries)\n    result = []\n    for query in queries:\n        if len(query) == 1:\n            result.append(1)\n        else:\n            if query[2] == query[1]:\n                result.append(1)\n            else:\n                result.append(2)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    if q < 1 or q > 1000:\n        return -1\n\n    for i in range(q):\n        n = int(stdin.split()[i])\n        count = 0\n        if n % 2 == 0:\n            count += 1\n        if n % 3 == 0:\n            count += 1\n        if n % 5 == 0:\n            count += 1\n        if count > 0:\n            count += 1\n        else:\n            count = -1\n\n        stdin = stdin.replace(str(n), str(count))\n    return stdin\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        '%d' % min(map(lambda n: ((n // 2) if n % 2 == 0 else ((2 * n // 3) if n % 3 == 0 else ((4 * n // 5) if n % 5 == 0 else -1)) if n <= 1 else n, map(int, stdin.split())), range(1, 1000)))\n        if min(map(lambda n: ((n // 2) if n % 2 == 0 else ((2 * n // 3) if n % 3 == 0 else ((4 * n // 5) if n % 5 == 0 else -1)) if n <= 1 else n, map(int, stdin.split()))\n                ) <= 1 else -1)\n        else -1\n    ])\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            moves += 1\n        elif n % 3 == 0:\n            n /= 3\n            moves += 1\n        elif n % 5 == 0:\n            n /= 5\n            moves += 1\n        else:\n            break\n    if moves == 0:\n        return -1\n    else:\n        return str(moves)\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    data = [line.split() for line in stdin.split(\"\\n\")]\n    \n    n = int(data[0][0])\n    \n    result = 0\n    \n    for i in data:\n        \n        if int(i[0]) == 1 and n == int(i[1]):\n            \n            result = -1\n            \n        elif int(i[0]) == 1:\n            \n            result = max(result, int(i[1]) // 2)\n            \n            if result % 3 == 0 and int(i[1]) % 3 == 0:\n                \n                result = min(result, int(i[1]) // 3)\n                \n            elif result % 5 == 0 and int(i[1]) % 5 == 0:\n                \n                result = min(result, int(i[1]) // 5)\n            \n            else:\n                \n                result = min(result, int(i[1]) // 2)\n                \n        elif int(i[0]) == 2:\n            \n            result = max(result, int(i[1]) // 3)\n            \n            if result % 2 == 0 and int(i[1]) % 2 == 0:\n                \n                result = min(result, int(i[1]) // 2)\n                \n            elif result % 5 == 0 and int(i[1]) % 5 == 0:\n                \n                result = min(result, int(i[1]) // 5)\n            \n            else:\n                \n                result = min(result, int(i[1]) // 3)\n                \n        elif int(i[0]) == 3:\n            \n            result = max(result, int(i[1]) // 5)\n            \n            if result % 2 == 0 and int(i[1]) % 2 == 0:\n                \n                result = min(result, int(i[1]) // 2)\n                \n            elif result % 3 == 0 and int(i[1]) % 3 == 0:\n                \n                result = min(result, int(i[1]) // 3)\n                \n            else:\n                \n                result = min(result, int(i[1]) // 5)\n                \n        elif int(i[0]) == 4:\n            \n            result = max(result, int(i[1]) // 5)\n            \n            if result % 2 == 0 and int(i[1]) % 2 == 0:\n                \n                result = min(result, int(i[1]) // 3)\n                \n            elif result % 3 == 0 and int(i[1]) % 3 == 0:\n                \n                result = min(result, int(i[1]) // 2)\n                \n            else:\n                \n                result = min(result, int(i[1]) // 5)\n                \n        elif int(i[0]) == 5:\n            \n            result = max(result, int(i[1]) // 2)\n            \n            if result % 2 == 0 and int(i[1]) % 2 == 0:\n                \n                result = min(result, int(i[1]) // 3)\n                \n            elif result % 5 == 0 and int(i[1]) % 5 == 0:\n                \n                result = min(result, int(i[1]) // 2)\n                \n            else:\n                \n                result = min(result, int(i[1]) // 5)\n                \n        else:\n            \n            result = max(result, int(i[1]) // 2)\n            \n            if result % 3 == 0 and int(i[1]) % 3 == 0:\n                \n                result = min(result, int(i[1]) // 3)\n                \n            elif result % 5 == 0 and int(i[1]) % 5 == 0:\n                \n                result = min(result, int(i[1]) // 5)\n                \n            else:\n                \n                result = min(result, int(i[1]) // 2)\n                \n    return result\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    min_moves = float(\"inf\")\n    for i in range(2, num+1):\n        if i % 2 == 0 and num % 2 == 0:\n            min_moves = min(min_moves, int(num/2))\n        elif i % 3 == 0 and num % 3 == 0:\n            min_moves = min(min_moves, int(num/3))\n        elif i % 5 == 0 and num % 5 == 0:\n            min_moves = min(min_moves, int(num/5))\n        else:\n            min_moves = min(min_moves, -1)\n    return str(min_moves)\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    q = int(stdin.strip())\n    for i in range(q):\n        n = int(stdin.strip())\n        if n % 2 == 0:\n            if n // 2 <= 1:\n                return \"-\"\n            else:\n                return str(n // 2)\n        elif n % 3 == 0:\n            if n // 3 <= 1:\n                return \"-\"\n            else:\n                return str(n // 3)\n        elif n % 5 == 0:\n            if n // 5 <= 1:\n                return \"-\"\n            else:\n                return str(n // 5)\n        else:\n            return \"-\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    q = int(nums[0])\n    for i in range(q):\n        n = int(nums[i+1])\n        if n == 1:\n            print(0)\n        elif n % 2 == 0:\n            print(n // 2)\n        elif n % 3 == 0:\n            print(n // 3)\n        elif n % 5 == 0:\n            print(n // 5)\n        else:\n            print(-1)\n\nsolution(input())"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    q = int(s[0])\n    for _ in range(q):\n        n = int(s[1])\n        moves = 0\n        if n % 2 == 0:\n            moves += n // 2\n        if n % 3 == 0:\n            moves += n // 3\n        if n % 5 == 0:\n            moves += n // 5\n        if moves > 0:\n            print(moves)\n        else:\n            print(-1)\n    return \"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    N = int(input.pop(0))\n    queries = []\n    for i in range(N):\n        queries.append(int(input.pop(0)))\n    moves = 0\n    while queries:\n        n = queries.pop(0)\n        if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            moves += n // 2 - n // 3 // 2 - n // 5 // 2\n        elif n % 2 == 0:\n            moves += n // 2\n        elif n % 3 == 0:\n            moves += n // 3\n        elif n % 5 == 0:\n            moves += n // 5\n        else:\n            moves = -1\n    if moves == -1:\n        return '-1'\n    return str(moves)\n\n\nprint(solution(input))\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    if n % 2 == 0:\n        return str(solution(str(n/2)))\n    if n % 3 == 0:\n        return str(solution(str(2*n/3)))\n    if n % 5 == 0:\n        return str(solution(str(4*n/5)))\n    return -1"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2].split()))\n        placements = [[a[0]], ]\n        for j in range(1, n):\n            for k in range(len(placements)):\n                placements[k].append(a[j] + placements[k][-1])\n        if all([placements[i][-1] > 0 for i in range(len(placements))]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return stdin\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin())\n        a = list(map(int, stdin().split()))\n        for _ in range(n - 1):\n            for i in range(len(a) - 1):\n                if a[i] > 0:\n                    a[i] = a[i] - 1\n                    a[i + 1] = a[i + 1] + 2\n            a = list(map(lambda x: x - 1 if x > 0 else x, a))\n        print(\"YES\" if all(el > 0 for el in a) else \"NO\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        i = j = 0\n        while j < n:\n            if a[j] == 0:\n                break\n            if a[j] % 2 == 0 and j - i >= 2:\n                a[j] -= 2\n                a[i] -= 1\n            i = j + 1\n            j += 1\n        if a[i]!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a = list(map(int, stdin.split()))\n        if (a[0] - a[1]) % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"10\")\nsolution(\"2\")\nsolution(\"10\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for _ in range(n - 1):\n        for i in range(n):\n            if a[i] > 0:\n                a[i] += 2\n                if i + 1 < n and a[i + 1] > 0:\n                    a[i + 1] -= 1\n    if sum(a) == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted([int(i) for i in stdin.split('\\n')[1:n + 1]])\n    for i in range(1, n):\n        a[i] = a[i] - 1 if a[i] > 0 else 0\n    return \"YES\" if a == [0] * n else \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def clear(f):\n        while True:\n            for _ in range(n - 1):\n                if a[_] > 0:\n                    a[_] -= 1\n                    break\n            else:\n                return \"NO\"\n            for _ in range(n - 1):\n                if a[_] < 1:\n                    break\n                a[_] -= 1\n        return \"YES\"\n    for _ in range(int(stdin)):\n        n = int(stdin())\n        a = list(map(int, stdin().split()))\n        print(clear(a))\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    field = []\n    for i in range(n):\n        field.append(int(stdin.split()[i]))\n    return solution_core(field)\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    while n > 0 and max(a) > 0:\n        n -= 1\n        a = [(a[i] - 1) if a[i] > 0 else a[i] for i in range(len(a))]\n        if sum(a) == 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... abacaba\n   ... bacabaa\n   ... ''')\n    4\n    >>> solution('''\n   ... 5\n   ... zcabd\n   ... dbacz\n   ... ''')\n    0\n    \"\"\"\n    # n = int(stdin.split()[0])\n    # a = stdin.split()[1]\n    # b = stdin.split()[2]\n    n = int(input())\n    a = input()\n    b = input()\n    a_list = list(a)\n    b_list = list(b)\n    ans = 0\n    # swap = 0\n    # for i in range(n):\n    #     if a_list[i]!= b_list[i]:\n    #         swap += 1\n    #         a_list[i], b_list[i] = b_list[i], a_list[i]\n    #         # print(i, a_list, b_list)\n    #         if i >= n // 2:\n    #             ans = swap\n    #             break\n    #         if swap >= n // 2:\n    #             ans = swap\n    #             break\n    #     else:\n    #         swap = 0\n    # print(ans)\n\n    # a_set = set(a_list)\n    # b_set = set(b_list)\n    # print(a_set, b_set)\n    # if a_set == b_set:\n    #     return 0\n    # a_list.sort()\n    # b_list.sort()\n    # print(a_list, b_list)\n    # swap = 0\n    # for i in range(n):\n    #     # print(i, swap)\n    #     if a_list[i]!= b_list[i]:\n    #         swap += 1\n    #         a_list[i], b_list[i] = b_list[i], a_list[i]\n    #         if swap >= n // 2:\n    #             return swap\n    #         if swap > n // 2 - 1:\n    #             return swap + 1\n    #     else:\n    #         swap = 0\n    #     # print(a_list, b_list)\n    # print(swap)\n    a_list.sort()\n    b_list.sort()\n    print(a_list, b_list)\n    swap = 0\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if a_list[i]!= b_list[j]:\n            swap += 1\n            a_list[i], b_list[j] = b_list[j], a_list[i]\n            # print(i, a_list, b_list)\n            if i >= n // 2:\n                return swap\n            if swap >= n // 2:\n                return swap\n            if swap > n // 2 - 1:\n                return swap + 1\n        else:\n            swap = 0\n            i += 1\n            j += 1\n        # print(a_list, b_list)\n    print(swap)\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    if len(a)!= len(b):\n        return \"0\"\n\n    dp = [[float('inf')] * len(a) for _ in range(len(b))]\n\n    dp[0][0] = 0\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            dp[i][j] = abs(i - j) + ord(b[i]) - ord(a[j])\n\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                dp[i][j] = 0\n\n    return str(min(dp[i][j] for i in range(len(a)) for j in range(len(b))))\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    n = int(a)\n    a = a[1:-1].replace('\\'', '').replace(', ', '')\n    b = b[1:-1].replace('\\'', '').replace(', ', '')\n    a = list(map(int, list(a)))\n    b = list(map(int, list(b)))\n    return min(solution_helper(a, b, 0), solution_helper(b, a, 0))\n\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    \n    a_dict = {}\n    b_dict = {}\n    \n    for i in range(n):\n        a_dict[i+1] = a[i]\n        b_dict[i+1] = b[i]\n    \n    min_move = 0\n    \n    while a!= b:\n        \n        for i in range(n):\n            if a_dict[i+1]!= b_dict[i+1]:\n                min_move += 1\n                a_dict[i+1] = b_dict[i+1]\n                b_dict[i+1] = a_dict[i+1]\n                break\n            \n            if i == n - 1:\n                min_move += 1\n                a_dict[i+1] = b_dict[i+1]\n                b_dict[i+1] = a_dict[i+1]\n    \n    return str(min_move)\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin)\n    a = stdin[1]\n    b = stdin[2]\n    return 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = stdin.rstrip()\n  b = stdin.rstrip()\n  return min(\n    compute_edit_distance(a, b),\n    compute_edit_distance(b, a),\n  )\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... abacaba\n   ... bacabaa\n   ... ''')\n    4\n    \"\"\"\n    n = int(stdin)\n    a = stdin[1]\n    b = stdin[2]\n\n    # a.replace('a', 'b')\n    a = a.replace('a', 'b')\n\n    # b.replace('b', 'a')\n    b = b.replace('b', 'a')\n\n    if a == b:\n        return 0\n\n    a = list(a)\n    b = list(b)\n    result = 0\n    while a!= b:\n        i = len(a) - 1\n        while a[i] == b[i]:\n            i -= 1\n        a[i], b[i] = b[i], a[i]\n        result += 1\n    return result\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(a)\n    b = list(b)\n    n = int(len(a))\n    if n!= int(len(b)):\n        return -1\n    c = 0\n    while True:\n        max_change = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i]!= b[j]:\n                    if max_change < abs(i - j):\n                        max_change = abs(i - j)\n                        p1 = i\n                        p2 = j\n        if max_change == 0:\n            return c\n        else:\n            a[p1] = b[p2]\n            c += max_change\n            if p2 > p1:\n                a[p1 + 1:p2 + 1] = list(reversed(a[p1 + 1:p2 + 1]))\n    return c\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  a = stdin.split()[1]\n  b = stdin.split()[2]\n  def swap(a, b):\n    a = list(a)\n    b = list(b)\n    for i in range(len(a)):\n      if a[i]!= b[i]:\n        a[i], b[i] = b[i], a[i]\n        return ''.join(a), ''.join(b)\n  def solve(a, b):\n    if len(a)!= len(b):\n      return 0\n    if a == b:\n      return 1\n    a = a.replace(\"a\", \"\")\n    a = a.replace(\"b\", \"\")\n    return solve(a, b[1:]) + solve(a[1:], b)\n  return solve(a, b)\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = 0\n    print(stdin)\n    for line in stdin.splitlines():\n        print(line)\n        a, b, k = map(int, line.split())\n        if a % 2 == 0:\n            print(f\"{k * a} {k * a + b}\")\n        else:\n            print(f\"{k * a + b} {k * a}\")\n        c += 1\n    return str(c)\n\n\nsolution(\"\")\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, a, b = map(int, stdin.split())\n        if a % 2!= 0:\n            return str(x + a - 1)\n        return str(x + b - 1)"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, k = map(int, stdin.split())\n        if k % 2 == 0:\n            print(a * b)\n        else:\n            print(a - b + a)\n\n    return ''\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n\n    for _ in range(t):\n        _, a, b, k = stdin.split()\n        a, b, k = int(a), int(b), int(k)\n        print(a * b + (a - k) * (b - k) + max(a - k, b - k, 1))\n\n    return '0'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        x, a, b = list(map(int, stdin.strip().split()))\n        print(x + a - b)\n    return '0'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answers = []\n    for i in stdin.splitlines():\n        a, b, c = i.split()\n        a, b = int(a), int(b)\n        c = int(c)\n        while a > b:\n            a -= c\n            b += c\n        if b - a > 0:\n            a += c\n            b -= c\n        answers.append(b - a)\n    return '\\n'.join(map(str, answers))\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([i if i % 2 == 0 else -1*i for i in map(int, stdin.split(\"\\n\")[1:])]))\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b, k = stdin.split()\n        a, b = int(a), int(b)\n        print(a + (k * 2 - 2) + (k * 2 - 1) * (k - 1) // 2)\n    return \" \"\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(str(x) for x in stdin.splitlines())"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        l, r, k = map(int, stdin.split())\n        if k % 2 == 0:\n            print(l - r + k)\n        else:\n            print(l - r + k - 1)\n\n    return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q: int = int(stdin)\n    n: int = int(stdin)\n    if n <= 1:\n        return \"0\"\n    if n == 2:\n        return \"3\"\n    if n == 3:\n        return \"7\"\n    sums = []\n    for i in range(n, 1, -1):\n        sums.append(i)\n        for j in range(i - 1, 0, -1):\n            sums.append(j)\n    print(sums)\n    def check(num):\n        flag = True\n        for i in range(len(sums)):\n            tmp = num - sums[i]\n            if tmp == 0:\n                flag = False\n                break\n            elif tmp < 0:\n                continue\n            else:\n                flag = False\n                break\n        return flag\n    ans = \"0\"\n    while True:\n        print(ans)\n        if check(ans):\n            break\n        else:\n            ans += \"3\"\n    return ans\n\nsolution(\"6\")\nsolution(\"1000000000000000000\")\nsolution(\"2\")\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = int(input())\n\n    for i in range(q):\n        n = int(input())\n\n        if n == 1:\n            print(1, 3)\n        elif n == 2:\n            print(3, 3)\n        else:\n            max = 0\n            while n >= 2:\n                n -= 3\n                max += 1\n            if max == 0:\n                print(2, 2)\n            else:\n                print(max, max)\n\n    return stdin\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # TLE\n    return"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def to_int(x):\n        return int(x)\n\n    def int_to_n(x, p):\n        return x % p == 0\n\n    def is_good(n):\n        return int_to_n(n, 3)\n\n    def is_good_list(l):\n        for i in l:\n            if not is_good(i):\n                return False\n        return True\n\n    q = int(stdin)\n    for i in range(q):\n        n = int(stdin)\n        if is_good_list([to_int(stdin) for stdin in stdin.split()]):\n            print(n)\n        else:\n            print(-1)\n    return ''\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    <Your code here>\n    \"\"\"\n    n = int(stdin)\n    def test(m):\n        # n = m + 1\n        sum_3 = 3 ** m\n        sum_ = 0\n        for i in range(m+1):\n            sum_ += 3 ** i\n            if sum_ > n:\n                return False\n        return True\n\n    def solve(n):\n        ans = 0\n        for i in range(n+1):\n            if test(i):\n                ans = i\n        return ans\n\n    return str(solve(n))\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_qs: List[str] = stdin.split()\n    q = int(input_qs[0])\n    n = int(input_qs[1])\n\n    min_good = float('inf')\n    for _ in range(q):\n        k = int(input_qs[2])\n        min_good = min(min_good, find_smallest_good(k, n))\n    return str(min_good)\n\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdout"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        while True:\n            k = random.randint(3,10**18)\n            if str(k) not in str(list(map(lambda x: x*k, list(range(1,(k+1))))))[:k+1]:\n                print(k)\n                break\n    return None\n\nsolution()\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(i) for i in range(int(stdin[0]), int(stdin[1]) + 1) if sum(int(i) ** j for j, i in enumerate(map(int, str(i)))) > int(stdin[1])))\n    return str(min(i for i in range(int(stdin[0]), int(stdin[1]) + 1) if sum(int(i) ** j for j, i in enumerate(map(int, str(i)))) > int(stdin[1])))"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    You are given four integers $a$, $b$, $x$ and $y$. Initially, $a \\ge x$ and $b \\ge y$. You can do the following operation no more than $n$ times:\n    \n    Choose either $a$ or $b$ and decrease it by one. However, as a result of this operation, value of $a$ cannot become less than $x$, and value of $b$ cannot become less than $y$. \n    \n    Your task is to find the minimum possible product of $a$ and $b$ ($a \\cdot b$) you can achieve by applying the given operation no more than $n$ times.\n    \n    You have to answer $t$ independent test cases.\n    \n    Each test case consists of a line containing integers $a$, $b$, $x$ and $y$ and $n$.  $n$ is an integer in the range $[1, 10^9]$ inclusive.\n    \n    The only constraint on the input is that $a \\ge x$ and $b \\ge y$ always holds.\n    \n    Return the minimum possible product of $a$ and $b$ ($a \\cdot b$) you can achieve by applying the given operation no more than $n$ times.\n    \n    \"\"\"\n    \n    pass"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y, n = map(int, stdin.split())\n    if a > x or b > y:\n        return -1\n    if x == y:\n        return max(x, n) * min(a, b)\n    if a > b:\n        return min(x, n) * max(a, b)\n    return min(x, n) * max(b, y)\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.split())\n        if a >= x and b >= y:\n            return str(min(a * b, a * y + b, x * y + a * b))\nsolution(\"7\")\nsolution(\"1000000000 1000000000 1 1 1\")\nsolution(\"12343 43 4543 39 123212\")\nsolution(\"10 11 2 1 5\")\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def val(i, a, b, n):\n        if i == n:\n            return a*b\n        return min(val(i+1, a, b+1, n), val(i+1, a, b, n), val(i+1, a+1, b, n))\n    n = int(stdin)\n    a, b, x, y = map(int, stdin.split())\n    return val(0, a, b, n)\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y, n = map(int, stdin.split())\n    ans = 0\n    while (a > x and b > y) or (b > x and a > y) or (a < x and b < y):\n        ans += 1\n        a -= 1\n        b -= 1\n        x -= 1\n        y -= 1\n    return str(ans)"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  t = int(stdin)\n  for i in range(t):\n    a, b, x, y, n = map(int, stdin.split())\n    ans = 1\n    for j in range(n):\n      if a > x:\n        a -= 1\n      elif b > y:\n        b -= 1\n      else:\n        break\n    ans *= a * b\n    print(ans)\n  return ''\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.split())\n        if a >= x and b >= y:\n            a -= 1\n            b -= 1\n        if a * b >= x * y:\n            a -= 1\n        elif a * b < x * y:\n            b -= 1\n        else:\n            a -= 1\n            b -= 1\n            b -= 1\n            a -= 1\n            b -= 1\n        print(a * b)\n    return \"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y, n = map(int, stdin.split())\n\n    # x + y = a\n    # x + y = b\n    # x - y = a\n    # x - y = b\n    # x + y = x - y + b = a\n    # x + y = x - y + a = b\n    # x + y - a = b\n    # x + y - a = x - y + a = b\n    # x + y - a = x - y + b = a\n    # x + y - b = a\n    # x + y - b = a = b\n    # x - y - a = b\n    # x - y - a = x - y + b = a = b\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    gcd_x = gcd(x, y)\n    gcd_y = gcd(y, x)\n    gcd_a = gcd(a, b)\n\n    if x == gcd_x and y == gcd_y:\n        return a * b\n    else:\n        if y == gcd_y:\n            # x - y = a\n            # x - y - b = a\n            diff = a - b\n        else:\n            # x - y - a = b\n            # x - y = b\n            diff = b - a\n\n        dividend = a\n        divisor = 1\n        if diff < 0:\n            divisor = -1\n            dividend = -dividend\n            diff = -diff\n\n        for _ in range(n):\n            dividend -= divisor\n            divisor = divisor * gcd_x\n            diff = dividend - diff\n\n        if diff == 0:\n            return dividend\n\n        else:\n            return -1\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(a,b):\n        c = a * b\n        for i in range(10):\n            for j in range(10):\n                if c == a * b:\n                    return True\n                a,b = b,a\n                c = a * b\n        return False\n    a,b,x,y,n = map(int,stdin.split())\n    x = min(x,a)\n    y = min(y,b)\n    for i in range(n):\n        if check(x,y):\n            break\n        if x == a and y == b:\n            break\n        a,b,x,y = x,y,x+1,y+1\n    return str(a*b)\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    min_moves = 0\n    for a in range(1, M + 1):\n        for b in range(a, M + 1):\n            moves = 0\n            if a % 2 == 0:\n                moves += 1\n            if b % 2 == 0:\n                moves += 1\n            if a % 4 == 0 and b % 2 == 0:\n                moves += 1\n            if a == b and a % 4 == 0:\n                moves += 1\n            if moves == 1:\n                min_moves = max(min_moves, moves)\n    return str(min_moves)\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  t = int(stdin)\n  for i in range(t):\n    a, b = map(int, stdin.split())\n    evens = (a + b) // 2\n    odds = a - (evens + 1)\n    if odds < evens:\n      print(odds)\n    else:\n      print(evens)\n  return ''\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        if a == b:\n            print(0)\n        else:\n            b = a + b\n            while a!= b:\n                if a % 2 == 1 and b % 2 == 0:\n                    b -= 1\n                elif a % 2 == 0 and b % 2 == 1:\n                    b += 1\n                a += a\n            print(a - b)\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  input_list = stdin.split('\\n')\n  test_cases = int(input_list[0])\n  for i in range(test_cases):\n    input_list = input_list[1].split(' ')\n    a = int(input_list[0])\n    b = int(input_list[1])\n    print(a-b)\nsolution(input())"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    res = 0\n    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10:\n        return 0\n    b = a\n    while a > 0 and b > 0:\n        b -= a % 2\n        a = a // 2\n    return a if b == 0 else 0\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        a, b = map(int, stdin.split())\n        if a == b:\n            print(0)\n        elif a+1 == b:\n            print(1)\n        elif a-1 == b:\n            print(1)\n        elif a-1 == b+1:\n            print(1)\n        elif a-1 == b-1:\n            print(1)\n        else:\n            print(2)"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    t = int(stdin.strip())\n    for i in range(t):\n        a, b = map(int, stdin.strip().split())\n        if a >= b:\n            print(a - b)\n        else:\n            print(2 * (a + b - 2 * min(a, b)))\n\nsolution()\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\na, b = (int(i) for i in input().split())\n\nn = 2\n\nwhile a * n <= b:\n    if a * n > b:\n        break\n    n = n + 1"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given the resident's apartment number, which includes digits.\n    Count the number of digits in the apartment.\n    '''\n    total = 0\n    for i in stdin.split():\n        if len(i) == 1:\n            total += 1\n        else:\n            for j in i:\n                total += 1\n    return str(total)\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    x = stdin[0]\n    for i in range(1,len(stdin)):\n        if x == stdin[i]:\n            res += 1\n        else:\n            res += 2\n    return res\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in range(1, 10):\n        num = int(stdin.strip())\n        for j in range(1, num+1):\n            if str(j)[-i] == str(j)[0]:\n                res += 1\n        return str(res)"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n').split()\n    x = int(stdin[1])\n    digits = {i for i in range(1, 10)}\n    i = 1\n    j = 0\n    count = 0\n    while i <= x:\n        if j == 0:\n            digits = {i for i in range(1, x+1)}\n        if i in digits:\n            digits = digits.union(digits)\n            count += i\n        else:\n            digits = digits.difference(digits)\n            count += len(digits)\n        i += 1\n        j = 1\n    return str(count)\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    key_presses = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if str(i) + str(j) == stdin:\n                key_presses = key_presses + 1\n                break\n            if str(j) + str(i) == stdin:\n                key_presses = key_presses + 1\n                break\n    return key_presses\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    result = \"\"\n    for _ in range(t):\n        result += str(len(digit_count(int(stdin.strip()))))\n    return result\n\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(len(stdin.splitlines())):\n        line = stdin.splitlines()[i]\n        x = int(line)\n        b = 0\n        if x % 10 == 1:\n            b += 1\n        if x % 10 == 2:\n            b += 1\n        if x % 10 == 3:\n            b += 1\n        if x % 10 == 4:\n            b += 1\n        if x % 10 == 5:\n            b += 1\n        if x % 10 == 6:\n            b += 1\n        if x % 10 == 7:\n            b += 1\n        if x % 10 == 8:\n            b += 1\n        if x % 10 == 9:\n            b += 1\n        if x % 10 == 0:\n            b += 1\n        if b == 1:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        print(len(set(map(int, list(str(i + 1)) + list(str(i + 2)) + list(str(i + 3)) + list(str(i + 4)) + list(str(i + 5))))))\n    return \" \"\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()))\n    k = int(data[0][0])\n    for i in range(k):\n        data[i][1] = list(map(lambda x: x - data[i][2], data[i][1]))\n    for i in range(k):\n        data[i][1] = list(map(lambda x: x - data[i][2], data[i][1]))\n    return \"YES\" if k == 2 else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n_k = int(stdin.split()[0])\n    seqs = []\n    for i in range(n_k):\n        l = int(stdin.split()[i * 2 + 1])\n        seq = stdin.split()[i * 2 + 2:]\n        if l + len(seq) == len(set(seq)):\n            seqs.append(seq)\n    if len(seqs) == 0:\n        return \"NO\"\n    for i in range(len(seqs)):\n        for j in range(len(seqs)):\n            if i!= j:\n                if sum(seqs[i]) == sum(seqs[j]) and set(seqs[i]).issubset(set(seqs[j])):\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n_seqs, seqs_len = int(stdin.split(\"\\n\")[0]), int(stdin.split(\"\\n\")[1])\n    all_seqs = []\n    for _ in range(n_seqs):\n        seq = list(map(int, stdin.split(\"\\n\")[2 + _].split(\" \")))\n        all_seqs.append(seq)\n    for seq_1 in range(seqs_len):\n        for seq_2 in range(seqs_len):\n            if seq_1!= seq_2:\n                remove_seq_1 = all_seqs[seq_1][:]\n                remove_seq_2 = all_seqs[seq_2][:]\n                while seq_1 in remove_seq_1 and seq_2 in remove_seq_2:\n                    remove_seq_1.remove(seq_1)\n                    remove_seq_2.remove(seq_2)\n                if sum(remove_seq_1) == sum(remove_seq_2):\n                    return \"YES\" + \" \" + str(seq_1 + 1) + \" \" + str(seq_2 + 1)\n    return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 2:\n        a, b = stdin.split()\n        n_a, n_b = int(a), int(b)\n        if n_a > n_b:\n            print(\"NO\")\n            return\n        print(\"YES\")\n        print(n_a, n_b)\n        return\n    for _ in range(k):\n        a, b = stdin.split()\n        n_a, n_b = int(a), int(b)\n        if (n_a > n_b):\n            print(\"NO\")\n            return\n        if n_a == n_b:\n            print(\"NO\")\n            return\n        if n_a == 0 and n_b == 0:\n            print(\"YES\")\n            return\n        print(\"YES\")\n        print(n_a, n_b)\n        return\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for _ in range(k):\n        n = int(input())\n        sequence_1 = list(map(int, input().split()))\n        sequence_2 = list(map(int, input().split()))\n        if sequence_1[0] == sequence_2[0] and len(sequence_1) > 1 and len(sequence_2) > 1:\n            flag = True\n            for i in range(1, len(sequence_1)):\n                if sequence_1[i]!= sequence_2[i]:\n                    flag = False\n                    break\n            if flag:\n                print(\"YES\")\n                print(sequence_1[0], sequence_1[i])\n                print(sequence_2[0], sequence_2[i])\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n    return \"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seqs = []\n    for i in range(k):\n        seqs.append(list(map(int, stdin.split())))\n    for seq1, seq2 in combinations(seqs, 2):\n        sum1 = sum(seq1)\n        sum2 = sum(seq2)\n        if sum1!= sum2:\n            continue\n        sum1 = sum1 - seq1[0]\n        sum2 = sum2 - seq2[0]\n        if sum1!= sum2:\n            continue\n        return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split()[0])\n    if k < 3:\n        return 'NO'\n    for i in range(k):\n        l1 = int(stdin.strip().split()[2*i])\n        l2 = int(stdin.strip().split()[2*i+1])\n        if l1 + l2 == sum(range(l1-1, l2)):\n            return 'YES' + str(l1) +'' + str(l2)\n    return 'NO'"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, n_1, n_2 = map(int, stdin.split())\n    all_seq = []\n    for i in range(k):\n        n = int(stdin.split()[i * 2])\n        sequence = list(map(int, stdin.split()[i * 2 + 1][1:-1].split(',')))\n        all_seq.append(sequence)\n\n    for i in range(len(all_seq)):\n        for j in range(len(all_seq)):\n            if i!= j:\n                sum_of_i = sum(all_seq[i])\n                sum_of_j = sum(all_seq[j])\n                if sum_of_i - sum_of_j in range(1, n_1 + 1):\n                    print(\"YES\")\n                    print(i + 1, j + 1)\n                    return\n    print(\"NO\")\n    return\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(k):\n        n1 = int(stdin.split()[i*2+1])\n        n2 = int(stdin.split()[i*2+2])\n        if n1 == n2:\n            return 'NO'\n        print(n1,n2)\n        if n1 == 0:\n            return 'YES'\n        if n2 == 0:\n            return 'YES'\n    return 'YES'"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 2 or k > 10 ** 5:\n        return 'NO'\n    for _ in range(k):\n        n_i = int(stdin.split()[1])\n        a_i = list(map(int, stdin.split()[2:n_i + 2]))\n        if n_i == 1:\n            if a_i[0]!= 0:\n                return 'NO'\n            else:\n                continue\n        if max(a_i) > 10 ** 4 or min(a_i) < -10 ** 4:\n            return 'NO'\n        elif sum(a_i) > 2 * 10 ** 5 or sum(a_i) < 2 * 10 ** 5:\n            return 'NO'\n        for i in range(n_i):\n            for j in range(n_i):\n                if i!= j and sum(a_i) - sum(a_i[:i] + a_i[i + 1:j] + a_i[j + 1:]) == sum(a_i[:j] + a_i[j + 1:]):\n                    return 'YES'"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        N = len(A)\n        for _ in range(K):\n            A = sorted(A, reverse=True)\n            for i in range(N - 1):\n                if A[i] < 0:\n                    A[i] = -A[i]\n                else:\n                    break\n            A = [-x for x in A]\n        return sum(A)\n\n\nclass Test(unittest.TestCase):\n    def test_result(self):\n        self.assertEqual(\n            7,\n            solution.largestSumAfterKNegations(\n                [4, 2, 3], 1\n            ),\n        )\n\n    def test_result2(self):\n        self.assertEqual(\n            6,\n            solution.largestSumAfterKNegations(\n                [3, -1, 0, 2], 3\n            ),\n        )\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        '''\n        Time: O(N)\n        Space: O(N)\n        '''\n        A.sort()\n        i = 0\n        while i < len(A) and A[i] < 0:\n            i += 1\n        if i == len(A):\n            return sum(A)\n        \n        while i < len(A) and K > 0:\n            if A[i] < 0:\n                k = 1\n                while i+k < len(A) and A[i+k] < 0:\n                    k += 1\n                while i-k >= 0 and A[i-k] < 0:\n                    k += 1\n                A[i] *= -1\n                A[i-k] *= -1\n                K -= k\n            i += 1\n            \n        return sum(A)\n\n\nfrom collections import deque\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        '''\n        Time: O(N)\n        Space: O(1)\n        '''\n        A = deque(A)\n        K = K % len(A)\n        for _ in range(K):\n            if A[0] < 0:\n                A.appendleft(-A.pop())\n            else:\n                A.append(A.popleft())\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nfrom typing import List\nfrom collections import deque\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split()))\n    return \"YES\" if is_partitioned(A) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] + A[j] == sum(A[i + 1: j]):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    A = stdin[0]\n    A = list(map(int, A))\n    print(A)\n    n = len(A)\n    ans = []\n    for i in range(n):\n        if i > 0 and A[i] == A[i-1]:\n            continue\n        if i < n-1 and A[i] == A[i+1]:\n            continue\n        cur = A[i]\n        count = 0\n        for j in range(i+1,n):\n            if cur == A[j]:\n                count += 1\n            else:\n                break\n        if count == 2:\n            ans.append([cur,i,count])\n            # print(ans)\n    print(ans)\n    for i in ans:\n        for j in i:\n            if j == 0:\n                print(i)\n            else:\n                print(i, end=' ')\n        print()\n    return 'done'\nsolution()"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        part1 = sum(A)\n        part2 = sum(A) - part1\n        # print(part1, part2)\n        if part1 == part2:\n            return True\n        left, right = 0, len(A) - 1\n        while left < right:\n            if A[left] + A[right]!= part1:\n                return False\n            left += 1\n            right -= 1\n        return True\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\nfrom collections import Counter\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    votes = []\n    votes_dict = {}\n    for i in range(0, len(input_data)):\n        votes.append(input_data[i].split(':'))\n    for i in range(0, len(votes)):\n        votes_dict[votes[i][0]] = i + 1\n    sorted_votes = sorted(votes_dict.items(), key=lambda kv: kv[1])\n    output = []\n    for i in range(len(sorted_votes)):\n        output.append(sorted_votes[i][0])\n    return '\\n'.join(output)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    strings = lines[1:]\n    max_votes = max(strings, key=lambda x: len(x))\n    print(max_votes)\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    votes: List[str] = []\n    for _ in range(N):\n        votes.append(stdin)\n    votes.sort(key=lambda x: len(x))\n    print(*votes, sep='\\n')\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vote = {}\n    for i in range(1, n+1):\n        vote[i] = stdin.replace(\"S_\", str(i), 1)\n    keys = sorted(list(vote.keys()), key=lambda x: x)\n    for i in keys:\n        print(vote[i])\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    votes = []\n    for i in range(N):\n        votes.append(stdin)\n    votes.sort(key=lambda x: len(x))\n    for i in range(len(votes)):\n        for j in range(len(votes)):\n            if i!= j and votes[i] == votes[j]:\n                print(votes[i], end=' ')\n    return ''\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split(\"\\n\")\n    votes = votes[1:]\n    votes.sort(key=lambda s: s.split(\":\")[0])\n    print(*votes, sep=\"\\n\")\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_votes = 0\n    result = []\n    for i in range(0, len(stdin)):\n        if max_votes < len(stdin[i]):\n            max_votes = len(stdin[i])\n            result = stdin[i]\n    return result\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = set()\n    for i in range(N):\n        S_i = stdin.split('\\n')[i]\n        ans.add(S_i)\n    ans = sorted(ans, key=lambda x: (len(x), x))\n    return '\\n'.join(ans)"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return ''\n\n\nsolution(sys.stdin.read())\n\n\"\"\"\n\n\"\"\"\nimport math\n\nn = int(input())\nvotes = {}\nfor i in range(n):\n    s = input()\n    votes[s] = votes.get(s, 0) + 1\n\nfor k, v in sorted(votes.items(), key=lambda x: x[1], reverse=True):\n    print(k)\n\"\"\"\n\n\n\"\"\"\nN = int(input())\nvotes = {}\nfor i in range(N):\n    s = input()\n    votes[s] = votes.get(s, 0) + 1"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    votes = stdin[1:]\n    answers = []\n\n    for vote in votes:\n        vote = vote.split(':')\n        vote[0] = vote[0].lower()\n        answers.append(vote[0])\n\n    answers = sorted(answers, key=lambda x: (answers.count(x), x))\n    print(''.join(answers))\n\n\nsolution(input())\n\"\"\"\n\nimport collections\n\n\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    arr: List[int] = list(map(int, stdin.split()))\n    arr.sort()\n    return str(sum(arr[i] - arr[j] for i in range(1, N) for j in range(i + 1, N) if arr[i] == arr[j]))"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    return sum(map(lambda x, y: (x - y) ** 2, a, a))\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        raise ValueError(f\"{n} is not between 1 and 100\")\n    l = list(map(int, stdin.split()))\n    if len(set(l))!= len(l):\n        raise ValueError(\"The input contains duplicate values\")\n    return str(sum(min(abs(x - y), abs(y - x)) for x, y in zip(l, sorted(l))))\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_n = list(map(int, stdin.split()))\n    total_cost = 0\n    min_total_cost = 10000000000\n    for i in range(N):\n        for j in range(i, N):\n            total_cost += abs(a_n[i] - a_n[j]) ** 2\n            if total_cost < min_total_cost:\n                min_total_cost = total_cost\n    return str(min_total_cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    #print(a)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                total += (a[i] - a[j]) ** 2\n    return total\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    sum_ = 0\n    for i in range(n - 1):\n        sum_ += (a[i + 1] - a[i]) ** 2\n    return str(sum_)"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (sum(int(i) for i in stdin.split())*n-n+1)//2"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    int_list = [int(i) for i in stdin.split()]\n    N = int_list[0]\n    int_list = int_list[1:]\n\n    # NOTE: This will return the cost\n    return str(min_cost(int_list, N))\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.strip().split('\\n')\n    N = int(input_[0])\n    array = list(map(int, input_[1].split()))\n    array_ = sorted(array)\n    min_cost = 0\n    for i in range(N):\n        if array_[i]!= array[i]:\n            cost_ = ((array_[i] - array[i])**2)\n            if min_cost < cost_:\n                min_cost = cost_\n        else:\n            continue\n    return str(min_cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    for i in range(1, N):\n        d += abs(a[i] - a[i - 1]) ** 2\n    return str(d)\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    d = min(x // a, b)\n    x = x - d * a\n    if x >= 0:\n        return f\"{x} left\"\n    else:\n        return f\"{x} left\""
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    x = x - a - b\n    if x > 0:\n        return str(x)\n    else:\n        return str(0)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    sum = X\n    sum -= A\n    sum -= B\n    return str(sum)"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    left = X\n    for cake in range(1, A+1):\n        left -= cake\n        if left <= 0:\n            break\n    for cake in range(1, B+1):\n        left += cake\n        if left <= 0:\n            break\n    print(left)\n    return\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = stdin.split()\n    X = int(X)\n    A = int(A)\n    B = int(B)\n\n    for i in range(X):\n        if A >= B:\n            A = A - B\n        else:\n            A = 0\n            break\n    return str(A)"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    A = int(stdin_list[1])\n    B = int(stdin_list[2])\n    if A + B > int(stdin_list[0]):\n        left = int(stdin_list[0]) - (A + B)\n        return str(left)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    X -= A\n    X -= X // (A + B) * (A + B)\n    return str(X)\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while b > 0 and a > 0:\n        if a < b:\n            a += a\n        else:\n            a -= b\n        b -= 1\n    return str(a)\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    a -= x\n    b -= x\n    return f\"{a + b} {a - b} {a * b}\""
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # if stdin:\n    #     x, a, b = stdin.split()\n    #     x, a, b = int(x), int(a), int(b)\n    # else:\n    #     x, a, b = stdin.split()\n    #     x, a, b = int(x), int(a), int(b)\n\n    x, a, b = map(int, stdin.split())\n\n    x %= a * b\n    print(x)\n    return x\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            if i == j:\n                continue\n            for k in range(1, M + 1):\n                for l in range(k, M + 1):\n                    if i == k or j == l or (i == l and j == k):\n                        continue\n                    res += 1\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (N, M) = map(int, stdin.split())\n\n    # Calculate solutions for each possible arrangement\n    # Since it's a symmetrical problem we can flip the input to solve the problem\n    return str(8 + (8 - 8) + (8 - 8) + (8 - 8) - (8 - 8) - (8 - 8) - (8 - 8) - (8 - 8) - (8 - 8) - (8 - 8))"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # return sum([comb(n, i) * comb(m, n-i) for i in range(1, n+1)]) % 1000000007\n    return sum([comb(n, i) * comb(m, n-i) for i in range(1, n+1)]) % 1000000007\n\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    count = 0\n    for i in range(1, m + 1):\n        if n % i == 0 and m % i == 0:\n            count += (n // i) * (m // i)\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nfirst_line = stdin.split('\\n')[0].split(' ')\nfirst_line = list(map(int, first_line))\n\nprint(binomial(first_line[0], first_line[1]) % (10**9+7))\n\"\"\"\nfrom math import factorial\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(comb(n-2, m-2))\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    # use bit manipulation to solve\n    return 0"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return '\\n'.join(sorted([str(n) + str(m) + str(m) + str(n) for n in range(n, m + 1) for m in range(n, m + 1)]))\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if (a < b):\n        a, b = b, a\n\n    def valid(arr):\n        for i in range(a - 1):\n            if arr[i] == arr[i + 1]:\n                return False\n        for i in range(b - 1):\n            if arr[i] == arr[i + 1]:\n                return False\n        return True\n\n    def order(arr):\n        result = \"\"\n        for i in range(len(arr)):\n            result += arr[i]\n        return result\n\n    arrs = []\n    for i in range(2 ** b):\n        tmp = bin(i)[2:]\n        tmp = tmp.rjust(a, '0')\n        arr = list(tmp)\n        if (valid(arr)):\n            arrs.append(order(arr))\n    print(len(arrs))\n    return order(arrs)\n\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n\n    if n == m == 1:\n        return 1\n\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n    dp[1][2] = 2\n    for i in range(3, n+1):\n        dp[i][0] = (dp[i-1][1] + dp[i-1][2]) % 1000000007\n        dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % 1000000007\n        dp[i][2] = (dp[i-1][0] + dp[i-1][1]) % 1000000007\n    return (dp[n][m] % 1000000007)"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    connection = [[i, j] for i in range(1, n + 1) for j in range(n + 1) if i!= j]\n    connections = [[set() for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for a, b in connection:\n        connections[a][b].add(a)\n        connections[a][b].add(b)\n\n    for a, b in connection:\n        for c in connections[a]:\n            for d in connections[b]:\n                if len(connections[c]) > 1 or len(connections[d]) > 1:\n                    connections[c].add(b)\n                    connections[c].add(a)\n                    connections[d].add(b)\n                    connections[d].add(a)\n\n    queue = deque([(1, n + 1)])\n\n    while queue:\n        start, end = queue.popleft()\n        if len(connections[start]) == 1 and len(connections[end]) == 1:\n            return \"POSSIBLE\"\n\n        for c in connections[start]:\n            if c in connections[end]:\n                queue.append((c, end))\n\n    return \"IMPOSSIBLE\"\n\nprint(solution(input()))"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, M = list(map(int, stdin[0].split()))\n    graph = []\n    for i in range(1, N + 1):\n        graph.append([int(x) for x in stdin[i].split()])\n\n    path = {}\n    visited = []\n    check_neighbours(1, visited, graph, path)\n    print(check_island(2, visited, graph, path))\n    return path\n\n\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 2\n   ... 2 3\n   ... ''')\n    'POSSIBLE'\n    >>> solution('''3 2\n   ... 4 1\n   ... 5 2\n   ... 6 3\n   ... ''')\n    'IMPOSSIBLE'\n    >>> solution('''4 3\n   ... 1 2\n   ... 3 2\n   ... 2 3\n   ... 5 6\n   ... ''')\n    'IMPOSSIBLE'\n    \"\"\"\n    # You can write any code you want here\n    N, M = map(int, stdin.strip().split())\n    return \"POSSIBLE\" if is_possible(N, M) else \"IMPOSSIBLE\"\n\n\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ab_list = []\n    for i in range(1, N + 1):\n        a, b = map(int, stdin.split())\n        ab_list.append((a, b))\n    ab_list = list(set(ab_list))\n    ab_list.sort()\n    for i in range(len(ab_list) - 2):\n        if ab_list[i] == ab_list[i + 1] or ab_list[i + 1] == ab_list[i + 2]:\n            return 'IMPOSSIBLE'\n    if ab_list[-2] == ab_list[-1]:\n        return 'IMPOSSIBLE'\n    return 'POSSIBLE'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    nodes = [[] for _ in range(N + 1)]\n\n    for i in range(M):\n        a, b = [int(x) for x in stdin.split(\" \")]\n        nodes[a].append(b)\n        nodes[b].append(a)\n\n    for i in range(1, N + 1):\n        nodes[i].sort()\n\n    return \"POSSIBLE\" if (nodes[1] and nodes[N]) else \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement solution\n    return 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [(i, int(x)) for i, x in enumerate(stdin.split(), 1)]\n    arr.sort()\n\n    d = {}\n    for i in range(1, len(arr)):\n        d[arr[i][1]] = i\n\n    def get_arr(a, b):\n        if a == 1:\n            return b\n        if b == 1:\n            return a\n\n        a_i, a_j = a, a\n        b_i, b_j = b, b\n\n        while a_i!= b_i and a_j!= b_j:\n            if a_i > b_i:\n                a_i, a_j = a_j, a_i\n            if a_j > b_j:\n                b_i, b_j = b_j, b_i\n        return d[a_i], d[b_i]\n\n    # print(arr)\n    # print(d)\n    for a, b in arr:\n        res = get_arr(d[a], d[b])\n        if res == (1, n):\n            return 'POSSIBLE'\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lines = [(int(x), int(y)) for x, y in (stdin.split())]\n    lines = sorted(lines)\n    N = lines[-1][0]\n    possible = True\n    for i, (a, b) in enumerate(lines):\n        if b > N:\n            possible = False\n            break\n        if a > N or b > N:\n            possible = False\n            break\n    if not possible:\n        return \"IMPOSSIBLE\"\n    for i, (a, b) in enumerate(lines):\n        if b - a == N:\n            if a == 1 or b == 1:\n                possible = False\n                break\n            if i + 1 < len(lines) and lines[i + 1][0]!= lines[i][0] + 1:\n                possible = False\n                break\n            if i + 1 < len(lines) and lines[i + 1][1]!= lines[i][1] + 1:\n                possible = False\n                break\n        if b - a < N:\n            possible = False\n            break\n    if possible:\n        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\"\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N, M = int(data[0]), int(data[1])\n    islands = {}\n    for i in range(1, N + 1):\n        islands[i] = []\n    for _ in range(M):\n        islands[int(data[2 * _])].append(int(data[2 * _ + 1]))\n        islands[int(data[2 * _ + 1])].append(int(data[2 * _]))\n    for island in islands.values():\n        if len(island) > 2:\n            return 'IMPOSSIBLE'\n    return 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a_to_n = [(int(x) - 1, n) for x in stdin.split()]\n    for a, b in a_to_n:\n        if a <= b <= n:\n            a_to_n.remove((a, b))\n    if len(a_to_n) == m:\n        return 'POSSIBLE'\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin[1::2])"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return stdin\n\n    return ''.join([stdin[i] for i in range(1, len(stdin), 2)])\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin[::2] + stdin[1::2]\n    return stdin[1::2] + stdin[::2]"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    #\n    # return stdin[::2]\n    print(stdin[::2])\n    return stdin[::2]\n\n\nsolution('atcoder')\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([stdin[i] for i in range(1, len(stdin), 2)])"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin[i] if i % 2 == 0 else stdin[i + 1] for i in range(len(stdin)))\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([stdin[2 * i + 1] for i in range(len(stdin) // 2)])"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    odd_positions = []\n    for i, c in enumerate(stdin):\n        if i % 2!= 0:\n            odd_positions.append(c)\n    return ''.join(odd_positions)"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([stdin[i] for i in range(1, len(stdin), 2)])"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    while len(stdin) > 0:\n        if stdin[0] == stdin[1]:\n            stdin = stdin[2:]\n        else:\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0]:\n        if A[0] == C[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if A[0] == C[0]:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    trie_words = {'word_A': {}, 'word_B': {}, 'word_C': {}}\n    for word in stdin.split('\\n'):\n        curr_node = trie_words['word_A']\n        for char in word[::-1]:\n            if char not in curr_node:\n                curr_node[char] = {'word_A': None, 'word_B': None, 'word_C': None}\n            curr_node = curr_node[char]\n        curr_node['word_B'] = None\n        curr_node['word_C'] = None\n    return 'YES' if _validate_trie(trie_words['word_A']) else 'NO'\n\n\ndef"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A == B == C[:-1]:\n        return \"YES\"\n    elif A == B == C[1:]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words) < 3:\n        return 'NO'\n    length_of_a = len(words[0])\n    length_of_b = len(words[1])\n    length_of_c = len(words[2])\n    if length_of_a!= length_of_b:\n        return 'NO'\n    if length_of_b!= length_of_c:\n        return 'NO'\n    if words[2][-1] == words[1][0]:\n        return 'YES'\n    if words[1][-1] == words[0][0]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    if len(stdin_list)!= 3:\n        raise ValueError('Invalid input format.')\n\n    a_len = len(stdin_list[0])\n    b_len = len(stdin_list[1])\n    c_len = len(stdin_list[2])\n\n    if a_len!= b_len and b_len!= c_len:\n        raise ValueError('Strings are not equal length.')\n\n    a_str = stdin_list[0]\n    b_str = stdin_list[1]\n    c_str = stdin_list[2]\n\n    if a_str[-1] == b_str[0] and b_str[0] == c_str[0]:\n        print('YES')\n    else:\n        print('NO')\n    return ''"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and A[0] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    last, initial = stdin.split()\n    last, initial = last[::-1], initial[::-1]\n    if last == initial:\n        return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n\"\"\"\n\na, b, c = input().split()"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if i == 0:\n            continue\n        if stdin[i-1] == stdin[i]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    #\n    for i in range(len(A) - 1):\n        if A[i][-1]!= A[i + 1][0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return 'GREATER'\n    elif A < B:\n        return 'LESS'\n    else:\n        return 'EQUAL'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a > b:\n        return 'GREATER'\n    if a < b:\n        return 'LESS'\n    if a == b:\n        return 'EQUAL'\n\n\ndef"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        return 'GREATER'\n    elif a == b:\n        return 'EQUAL'\n    else:\n        return 'LESS'"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split()\n    if float(a) > float(b):\n        return \"GREATER\"\n    if float(a) < float(b):\n        return \"LESS\"\n    if float(a) == float(b):\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    if A >= B:\n        print(f\"GREATER\")\n    elif A < B:\n        print(f\"LESS\")\n    elif A == B:\n        print(f\"EQUAL\")\n\nsolution(input())"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(stdin)\n    if int(stdin[0]) > int(stdin[1]):\n        return \"GREATER\"\n    elif int(stdin[0]) < int(stdin[1]):\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return 'GREATER'\n    elif a < b:\n        return 'LESS'\n    else:\n        return 'EQUAL'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    if A>B:\n        return \"GREATER\"\n    elif A<B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _,a,b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a>b:\n        return 'GREATER'\n    elif a<b:\n        return 'LESS'\n    else:\n        return 'EQUAL'"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = []\n    for i in range(1, n+1):\n        strings.append(stdin.splitlines()[i])\n\n    left = 0\n    right = n-1\n    balance = 0\n    while left <= right:\n        mid = (left+right)//2\n        for i in range(n):\n            if strings[i][mid]!= strings[i][mid-1]:\n                balance += 1\n                break\n        if balance > n//2:\n            left = mid + 1\n        else:\n            right = mid - 1\n        balance = 0\n    return str(left)\n\nsolution(input())"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    cards = stdin[1:]\n    cards = [card.split(\":\") for card in cards]\n    cards = [[card[0], card[1]] for card in cards]\n\n    def check(cards: List[str], s: str, t: str):\n        for i in range(N):\n            if cards[i][0] == s and cards[i][1] == t:\n                return True\n\n        return False\n\n    c = check(cards, \"apple\", \"orange\")\n    if c:\n        return \"2\"\n\n    c = check(cards, \"grape\", \"apple\")\n    if c:\n        return \"2\"\n\n    return str(2)\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1 or N > 100:\n        raise ValueError('invalid')\n    result = 0\n    arr = [[] for i in range(N)]\n    for i in range(N):\n        arr[i] = stdin.strip()\n        if len(arr[i])!= N:\n            raise ValueError('invalid')\n    for i in range(N):\n        for j in range(len(arr[i]) - 1):\n            if arr[i][j]!= arr[i][j + 1]:\n                return result\n        result += 1\n    return result\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin.pop(0))\n    s = list(stdin[0])\n    m = int(stdin.pop(0))\n    t = list(stdin[0])\n    \n    ans = 0\n    \n    while len(s) > 0 and len(t) > 0:\n        if s[0] == t[0]:\n            s.pop(0)\n            t.pop(0)\n            ans += 1\n        else:\n            t.pop(0)\n            \n    if ans >= m:\n        print(ans)\n    else:\n        print(-1)\n\nsolution('')"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, N_, M, M_, N_N, N_M = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]), int(stdin.split()[4]), int(stdin.split()[5])\n    N_s = []\n    N_t = []\n    M_s = []\n    M_t = []\n    for _ in range(N_):\n        N_s.append(stdin.split()[6 * _ + 1])\n        N_t.append(stdin.split()[6 * _ + 2])\n    for _ in range(M_):\n        M_s.append(stdin.split()[6 * _ + 3])\n        M_t.append(stdin.split()[6 * _ + 4])\n    N_s = sorted(set(N_s))\n    N_t = sorted(set(N_t))\n    M_s = sorted(set(M_s))\n    M_t = sorted(set(M_t))\n    N_C = []\n    M_C = []\n    for _ in N_s:\n        N_C.append(stdin.split()[_])\n    for _ in M_s:\n        M_C.append(stdin.split()[_])\n    for _ in N_t:\n        N_C.append(stdin.split()[_])\n    for _ in M_t:\n        M_C.append(stdin.split()[_])\n    N_C_N = 0\n    N_C_M = 0\n    M_C_N = 0\n    M_C_M = 0\n    for _ in N_C:\n        if _ in N_C_N:\n            N_C_N += 1\n        else:\n            N_C_N = 1\n    for _ in M_C:\n        if _ in M_C_M:\n            M_C_M += 1\n        else:\n            M_C_M = 1\n    if N_C_M > M_C_M:\n        N_C_M = M_C_M\n        N_C_N = N_C_N\n    else:\n        M_C_M = N_C_M\n        M_C_N = N_C_N\n    if N_C_N > M_C_N:\n        N_C_N = M_C_N\n        N_C_M = N_C_M\n    else:\n        M_C_N = N_C_N\n        M_C_M = N_C_M\n    if N_C_N + N_C_M <= N_N:\n        X = N_C_N * N_C_M\n        return str(X)\n    else:\n        X = N_N - N_C_N - M_C_N\n        return str(X)\n\n    return str(X)\nstdin = input()\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(1, n+1):\n        strings.append(stdin[i])\n\n    # print(strings)\n    while(True):\n        # print(\"strings\")\n        # print(strings)\n        curr_string = \"\"\n        for i in range(n):\n            curr_string += strings[i]\n            if curr_string == strings[n]:\n                print(curr_string)\n                break\n            if curr_string in strings:\n                strings.remove(curr_string)\n            else:\n                strings.remove(strings[0])\n                strings.remove(strings[0])\n                strings.remove(strings[0])\n        else:\n            print(curr_string)\n            break\n\nsolution(stdin)\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n]\n    t = stdin[n+1:]\n    lst = [s, t]\n    x = 0\n    for i in range(2):\n        for j in range(len(lst[i])):\n            if lst[i][j] in s:\n                if lst[i][j] == s[j]:\n                    x += 1\n                else:\n                    x -= 1\n    return str(x)\n\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_i = list(stdin.split()[1:])\n    t_i = list(stdin.split()[2:])\n    i = 0\n    x = 0\n    while i < N:\n        while s_i[i]!= t_i[i]:\n            if t_i[i] == s_i[i]:\n                x += 1\n            i += 1\n        i += 1\n    return str(x)\n\nprint(solution(input()))\n\"\"\"\nfrom typing import List\n\nN, M = map(int, input().split())\ns_i = input()\nt_i = input()\n\ni = 0\nx = 0\nwhile i < N:\n    while s_i[i]!= t_i[i]:\n        if t_i[i] == s_i[i]:\n            x += 1\n        i += 1\n    i += 1\n\nprint(x)\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    \n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    base_letter = stdin[0]\n\n    if base_letter == 'A':\n        return 'T'\n    elif base_letter == 'C':\n        return 'G'\n    elif base_letter == 'G':\n        return 'C'\n    elif base_letter == 'T':\n        return 'A'\n    else:\n        return 'Invalid'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    \n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'\n    else:\n        return 'error'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == \"A\":\n            return \"T\"\n        elif stdin[i] == \"T\":\n            return \"A\"\n        elif stdin[i] == \"C\":\n            return \"G\"\n        elif stdin[i] == \"G\":\n            return \"C\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    N = int(stdin[0])\n    A = stdin[1].split()\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = int(A[i])\n    for i in range(N):\n        for j in range(N - 1, -1, -1):\n            if j == N - 1:\n                dp[i][j] = dp[i + 1][j] + int(A[i])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) + int(A[i])\n    print(dp[0][0])\n    return ''\n\nsolution('5 2 2 4 1')\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = stdin.split()\n\n    candies = {}\n\n    for row in range(2, n + 2):\n        for col in range(1, n + 1):\n            if (row, col) not in candies:\n                candies[(row, col)] = int(grid[row - 1][col - 1])\n\n    return str(sum(candies.values()))\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    data = list(map(int, stdin.split()[1:]))\n    total = 0\n    for i in range(N):\n        total += data[i]\n    if (total % 2) == 0:\n        return total\n    else:\n        return total + 1"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples:\n       input: 3\n       output: 1\n       input: 1\n       output: 0\n       input: 2\n       output: 2\n       input: 5\n       output: 8\n    \"\"\"\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    s = 0\n    for i in range(1, N):\n        for j in range(i, N):\n            if A[j] > A[i - 1]:\n                s += A[j] - A[i - 1]\n            else:\n                s += A[i - 1] - A[j - 1]\n    return str(s)\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = stdin.strip().split()\n\n    matrix = [list(map(int, row.split())) for row in arr]\n\n    # at each cell, calculate how many candidate candies there are\n    # starting from the first cell\n    counts = [1] + [0] * (n - 1)\n\n    # for each cell, count the number of candies\n    # and move to the next cell\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[j][i] > matrix[j + 1][i]:\n                counts[i] = max(counts[i], counts[j] + 1)\n\n    return str(max(counts))\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rows = list(map(int, stdin.split()))\n    R, C = 2, n\n    r, c = 1, 1\n    ans = 0\n    while r < R and c < C:\n        ans = max(ans, sum(rows[r:c]))\n        r += 1\n        c += 1\n    return str(ans)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    candies = stdin.split()[1:]\n    # arr = [[0] * N for _ in range(N)]\n    #\n    # for i in range(N):\n    #     for j in range(N):\n    #         arr[i][j] = int(candies[i*N + j])\n    #\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #         elif i == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j+1])\n    #\n    # return str(arr[N-1][N-1])\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N):\n    #         result += arr[i][j]\n    # return str(result)\n    #\n    # res = 0\n    #\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0 or j == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #             arr[i][j] += arr[i+1][j]\n    #             res = max(res, arr[i][j])\n    #         elif i == N-1 or j == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #             arr[i][j] += arr[i][j-1]\n    #             res = max(res, arr[i][j])\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j-1])\n    #             res = max(res, arr[i][j])\n    #\n    # return str(res)\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0 or j == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #             arr[i][j] += arr[i+1][j]\n    #             result = max(result, arr[i][j])\n    #         elif i == N-1 or j == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #             arr[i][j] += arr[i][j-1]\n    #             result = max(result, arr[i][j])\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j-1])\n    #             result = max(result, arr[i][j])\n    # return str(result)\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0 or j == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #             arr[i][j] += arr[i+1][j]\n    #             result = max(result, arr[i][j])\n    #         elif i == N-1 or j == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #             arr[i][j] += arr[i][j-1]\n    #             result = max(result, arr[i][j])\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j-1])\n    #             result = max(result, arr[i][j])\n    # return str(result)\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0 or j == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #             arr[i][j] += arr[i+1][j]\n    #             result = max(result, arr[i][j])\n    #         elif i == N-1 or j == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #             arr[i][j] += arr[i][j-1]\n    #             result = max(result, arr[i][j])\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j-1])\n    #             result = max(result, arr[i][j])\n    # return str(result)\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0 or j == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #             arr[i][j] += arr[i+1][j]\n    #             result = max(result, arr[i][j])\n    #         elif i == N-1 or j == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #             arr[i][j] += arr[i][j-1]\n    #             result = max(result, arr[i][j])\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j-1])\n    #             result = max(result, arr[i][j])\n    # return str(result)\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i == 0 or j == 0:\n    #             arr[i][j] += arr[i][j+1]\n    #             arr[i][j] += arr[i+1][j]\n    #             result = max(result, arr[i][j])\n    #         elif i == N-1 or j == N-1:\n    #             arr[i][j] += arr[i-1][j]\n    #             arr[i][j] += arr[i][j-1]\n    #             result = max(result, arr[i][j])\n    #         else:\n    #             arr[i][j] += max(arr[i-1][j], arr[i][j-1])\n    #             result = max(result, arr[i][j])\n    # return str(result)\n    #\n    # result = 0\n    # for i in range(N):\n    #     for j in range(N"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    A = [[a[i]] + a[i + 1 : i + n + 1] for i in range(n)]\n    return str(max(map(max_from_row, A)))\n\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    i = 1\n    j = N - 2\n    res = 0\n    while (i <= j):\n        # print(i, j)\n        res += (min(arr[i], arr[j]))\n        i += 1\n        j -= 1\n    return res\n\nsolution(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = stdin.split()\n    candies = [[int(i) for i in arr[i * N:(i + 1) * N]] for i in range(len(arr) // N)]\n    return str(find_max(candies))\n\n\ndef"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if N == 1:\n        return A[0]\n    A.sort()\n    # 2<=N<=10^5\n    # a<=10^9\n    # 0<=x<=10^9\n    if N % 2!= 0:\n        # if N is odd\n        # one candy can only be in 2 boxes\n        # 2 boxes\n        # 1 candy in 1 box\n        # 2 candies in 2 boxes\n        res = A[1] + 1\n        if res > x:\n            # if x is more than 2*A[1] + 1, it means A[1] is included\n            res = A[1] + 2\n        if res > x:\n            return \"IMPOSSIBLE\"\n    else:\n        # if N is even\n        # N/2 candies can be in 2 boxes\n        # N/2 candies in 2 boxes\n        # N/2 candies in 1 box\n        # 2 candies in 1 box\n        # if x>N/2+1, it means that\n        # 2 candies can be in 2 boxes, and they are more than 2*(N/2+1) + 1\n        res = A[N // 2] + 1\n        if res > x:\n            # if x is more than 2*(N/2+1) + 1, it means that 2 candies can be in 2 boxes, and they are more than 2*(N/2+1) + 1\n            res = A[N // 2] + 2\n        if res > x:\n            # if x is more than 2*(N/2+1) + 2, it means that 2 candies can be in 2 boxes, and they are more than 2*(N/2+1) + 2\n            res = \"IMPOSSIBLE\"\n    return res"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    \"\"\"\n    n, x = map(int, stdin.strip().split())\n    left = []\n    right = []\n    for i in range(n):\n        left.append(int(stdin.strip()[i]))\n    left.sort(reverse=True)\n    for i in range(n):\n        right.append(int(stdin.strip()[i]))\n    right.sort(reverse=True)\n    count = 0\n    while left and right:\n        if left[0] >= right[0]:\n            count += left.pop(0)\n            left.pop(0)\n        else:\n            count += right.pop(0)\n            right.pop(0)\n    return str(count)\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [N, x] = stdin.strip().split(' ')\n    N = int(N)\n    x = int(x)\n    box_one = []\n    box_two = []\n    for i in range(N):\n        box_one.append(int(stdin.strip().split(' ')[i]))\n        box_two.append(int(stdin.strip().split(' ')[N + i]))\n    box_one = box_one[::-1]\n    box_two = box_two[::-1]\n\n    for i in range(N - 1):\n        if box_one[i] <= box_two[i]:\n            box_one[i + 1] = min(box_one[i + 1], box_one[i] + box_one[i + 1])\n        else:\n            box_two[i + 1] = min(box_two[i + 1], box_two[i] + box_two[i + 1])\n    return min(box_one[-1], box_two[-1])\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # N = int(stdin)\n    count = 0\n    i = 1\n    l = list(map(int, stdin.split()))\n    while(i <= len(l)-1):\n        if l[i] > l[i-1]:\n            count += 1\n        elif l[i] < l[i-1]:\n            count += l[i-1] - l[i]\n        i += 1\n    return count"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    candy_map = []\n    for i in range(N):\n        candy_map.append(list(map(int, stdin.split())))\n    res = 0\n    #  1. Fill any empty box with the candy_map[0][i] and fill any empty box with the candy_map[i+1][0]\n    # 2. Set to 1 if any of the boxes contain a candy_map[i][j] > x\n    for i in range(N):\n        for j in range(N):\n            if j < i:\n                continue\n            if candy_map[i][j] > x:\n                res = max(res, j - i)\n    return str(res)\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    boxes = list(map(int, stdin.split()))\n    i = 0\n    while True:\n        if boxes[i] >= x:\n            boxes[i] -= x\n            i += 2\n        else:\n            return str(i + 1)\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    min_ops = 0\n    start = 0\n    end = 1\n    while end <= len(candies) and start <= end:\n        curr_sum = sum(candies[start:end])\n        if curr_sum <= x:\n            min_ops = max(min_ops, end - start)\n            start += 1\n        else:\n            end += 1\n    return str(min_ops)\n\nprint(solution(input()))"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = list(map(int, stdin.split()))\n    k = 2\n    while candies[k]!= candies[k - 1]:\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    m = 1\n    pre = c[0]\n    for i in range(1, n):\n        if c[i] > pre:\n            if m < c[i] - pre:\n                m = c[i] - pre\n        pre = c[i]\n    print(m)"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(N):\n        while sum(arr) - arr[i] > x:\n            arr[i] -= x\n            cnt += 1\n        if sum(arr) - arr[i] <= x:\n            break\n    print(cnt)\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = stdin.split()\n    rows = list(map(int, rows.split()))\n    cols = list(map(int, cols.split()))\n    if rows[0] + cols[0]!= rows[1] + cols[1] and rows[0] + cols[0]!= rows[2] + cols[2] and rows[1] + cols[1]!= rows[0] + cols[2] and rows[2] + cols[2]!= rows[0] + cols[1]:\n        return 'No'\n    if rows[0] + cols[0] == rows[1] + cols[1] and rows[0] + cols[0] == rows[2] + cols[2] and rows[1] + cols[1] == rows[0] + cols[2]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if solution.valid(stdin) else \"No\")\ndef"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    rows = list(map(lambda x: x.split(), stdin.splitlines()))\n    return \"Yes\" if validate(rows) else \"No\"\n\ndef"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for i in range(3):\n        for j in range(3):\n            if stdin[i*3+j] == '0':\n                cnt += 1\n    \n    if cnt == 0 or cnt > 6:\n        print('No')\n        return\n\n    # print(cnt)\n    for i in range(3):\n        for j in range(3):\n            if stdin[i*3+j] == '0':\n                a = int(stdin[i*3+j-1])\n                b = int(stdin[i*3+j-2])\n                \n                if cnt == 6:\n                    if a!= 0 or b!= 0:\n                        print('No')\n                        return\n                else:\n                    if cnt == 6:\n                        print('No')\n                        return\n\n                stdin = stdin[:i*3+j-1] + '1' + stdin[i*3+j-2:]\n                # print(cnt)\n                # print(stdin)\n    print('Yes')\n    return"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = [[int(i) for i in stdin.split()] for _ in range(3)]\n    \n    for i in range(3):\n        if (c[0][i] + c[1][i] + c[2][i])!= sum(c[i]):\n            return \"No\"\n    \n    for i in range(3):\n        if c[0][i] == c[1][i] and c[0][i] == c[2][i]:\n            return \"Yes\"\n        if c[0][i]!= c[1][i] and c[1][i]!= c[2][i] and c[2][i]!= c[0][i]:\n            return \"Yes\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elements = int(stdin.split()[0])\n    square_coordinates = stdin.split()[1:]\n    for i in range(num_of_elements):\n        x_coordinate = i % 3\n        y_coordinate = i // 3\n        if square_coordinates[x_coordinate] == square_coordinates[y_coordinate]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = []\n    for i in stdin:\n        data.append(list(map(int, i.split())))\n    n = len(data)\n    if n == 0:\n        return\n    n = len(data[0])\n    for i in range(n):\n        if data[0][i]!= 0 and data[0][i]!= 1:\n            return\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if data[i][j]!= data[i][0] + data[0][j]:\n                return\n    return 'Yes'\n\nsolution(input())\n\n'''\n\nfrom itertools import combinations_with_replacement"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_rows = int(stdin.split()[0])\n    num_cols = int(stdin.split()[1])\n    for row in range(1, num_rows + 1):\n        for col in range(1, num_cols + 1):\n            if row * col!= int(stdin.split()[row * num_cols + col]):\n                print('No')\n                return\n    print('Yes')\n    return"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n\n    for i in range(1, 4):\n        for j in range(1, 4):\n            s = stdin[i - 1].split()\n            s2 = stdin[j - 1].split()\n            s = (int(s[0]), int(s[1]))\n            s2 = (int(s2[0]), int(s2[1]))\n            if s!= s2:\n                print(\"No\")\n                return\n    print(\"Yes\")\n    return\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    solution = stdin.split()[0]\n    return solution\n    \ndef"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'ABC':\n        print('ARC')\n    elif stdin == 'ARC':\n        print('ABC')\n    else:\n        print('ARC')\n\nsolution(stdin)\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\" if stdin == \"ABC\" else \"ARC\""
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'ABC':\n        return 'ARC'\n    elif stdin == 'ARC':\n        return 'ABC'\n    else:\n        return stdin"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == \"ABC\":\n        return \"ARC\"\n    elif s == \"ARC\":\n        return \"ABC\"\n    else:\n        return \"Invalid\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if (s == 'ABC'):\n        s = 'ARC'\n    elif (s == 'ARC'):\n        s = 'ABC'\n    return s\n\nprint(solution('ABC'))\nprint(solution('ARC'))\n'''\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    return \"ABC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdin"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    \"\"\"\n    n = int(stdin)\n    # sum the divisors\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(len([i for i in range(a, b + 1) if i % x == 0]))"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    num = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            num += 1\n    return str(num)\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for i in range(int(stdin.split()[0]), int(stdin.split()[1]) + 1) if i % int(stdin.split()[2]) == 0)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(sum(i for i in range(a, b + 1) if i % x == 0))\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n\nsolution(input())\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split()\n    return''.join(map(str, range(int(a), int(b) + 1))) + '\\n' + str(int(x) - 1)\n\n\ndef"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num, a, b, x = stdin.split()\n    return str(sum([i for i in range(int(num) + 1) if i % int(x) == 0]))\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    c = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            c += 1\n    return str(c)"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    x = int(stdin[2])\n\n    count = 0\n\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    if days >= 25:\n        return \"Christmas\"\n    elif days >= 24:\n        return \"Christmas Eve\"\n    elif days == 23:\n        return \"Christmas Eve Eve\"\n    elif days == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Christmas Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n\n    if D == 25:\n        print(\"Christmas\")\n    elif D == 24:\n        print(\"Christmas Eve\")\n    elif D == 23:\n        print(\"Christmas Eve Eve\")\n    elif D == 22:\n        print(\"Christmas Eve Eve Eve\")"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        D = int(stdin.strip())\n        if 22 <= D <= 24:\n            return \"Christmas\"\n        elif D == 23:\n            return \"Christmas Eve\"\n        elif D == 22:\n            return \"Christmas Eve Eve\"\n        else:\n            return \"Christmas Eve Eve\"\n    except Exception:\n        return \"Expected Integer value\""
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        D = int(stdin)\n        if D == 25:\n            return \"Christmas\"\n        elif D == 24:\n            return \"Christmas Eve\"\n        elif D == 23:\n            return \"Christmas Eve Eve\"\n        elif D == 22:\n            return \"Christmas Eve Eve Eve\"\n    except:\n        return \"Invalid Input\"\n    \n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Christmas Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        print('Christmas')\n    elif D == 24:\n        print('Christmas Eve')\n    elif D == 23:\n        print('Christmas Eve Eve')\n    elif D == 22:\n        print('Christmas Eve Eve Eve')\n    else:\n        print('Error')"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 1:\n        print(\"Christmas\")\n    elif day == 2:\n        print(\"Christmas Eve\")\n    elif day == 3:\n        print(\"Christmas Eve Eve\")\n    elif day == 4:\n        print(\"Christmas Eve Eve Eve\")\n    elif day == 5:\n        print(\"Christmas Eve Eve Eve Eve\")\n    elif day == 6:\n        print(\"Christmas Eve Eve Eve Eve Eve\")\n    elif day == 7:\n        print(\"Christmas Eve Eve Eve Eve Eve Eve\")\n    elif day == 8:\n        print(\"Christmas Eve Eve\")\n    elif day == 9:\n        print(\"Christmas\")\n    elif day == 10:\n        print(\"Christmas Eve\")\n    elif day == 11:\n        print(\"Christmas Eve Eve\")\n    elif day == 12:\n        print(\"Christmas Eve Eve Eve\")\n    elif day == 13:\n        print(\"Christmas Eve Eve Eve Eve\")\n    elif day == 14:\n        print(\"Christmas Eve Eve Eve Eve Eve\")\n    elif day == 15:\n        print(\"Christmas Eve Eve Eve Eve Eve Eve\")\n    elif day == 16:\n        print(\"Christmas Eve\")\n    elif day == 17:\n        print(\"Christmas\")\n    elif day == 18:\n        print(\"Christmas Eve\")\n    elif day == 19:\n        print(\"Christmas Eve Eve\")\n    elif day == 20:\n        print(\"Christmas Eve Eve Eve\")\n    elif day == 21:\n        print(\"Christmas Eve Eve Eve Eve\")\n    elif day == 22:\n        print(\"Christmas Eve Eve Eve Eve Eve\")\n    elif day == 23:\n        print(\"Christmas Eve Eve\")\n    elif day == 24:\n        print(\"Christmas\")\n    elif day == 25:\n        print(\"Christmas Eve\")\n    else:\n        print(\"Invalid input\")\n    return day\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 24:\n        return \"Christmas Eve Eve Eve Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve\"\n    elif d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve\"\n    elif d == 22:\n        return \"Christmas\"\n    else:\n        return \"Christmas\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    day, days = stdin.split(' ')\n    if int(day) <= 23:\n        if int(day) == 1:\n            print('Christmas')\n        if int(day) == 2:\n            print('Christmas Eve')\n        if int(day) == 3:\n            print('Christmas Eve Eve')\n        if int(day) == 4:\n            print('Christmas Eve Eve Eve')\n        if int(day) == 5:\n            print('Christmas Eve Eve Eve Eve')\n        if int(day) == 6:\n            print('Christmas Eve Eve Eve Eve Eve')\n        if int(day) == 7:\n            print('Christmas Eve Eve Eve Eve Eve Eve')\n        if int(day) == 8:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 9:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 10:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 11:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 12:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 13:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 14:\n            print('Christmas Eve Eve Eve')\n        if int(day) == 15:\n            print('Christmas Eve')\n        if int(day) == 16:\n            print('Christmas')\n        if int(day) == 17:\n            print('Christmas Eve Eve Eve Eve Eve')\n        if int(day) == 18:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 19:\n            print('Christmas Eve Eve Eve Eve Eve Eve Eve Eve')\n        if int(day) == 20:\n            print('Christmas Eve Eve')\n        if int(day) == 21:\n            print('Christmas Eve')\n        if int(day) == 22:\n            print('Christmas Eve Eve Eve')\n        if int(day) == 23:\n            print('Christmas Eve Eve Eve Eve')\n    else:\n        print('Invalid day')\n    return stdin\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    most_divisible = -1\n    divisible_by = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            divisible_by.append(i)\n            if len(divisible_by) > count:\n                count = len(divisible_by)\n                most_divisible = i\n            \n    if most_divisible == -1:\n        return -1\n    else:\n        print(most_divisible)\n        return count\n\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input as a string\n    Returns a single integer as output\n    \"\"\"\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    for i in range(n):\n        ans *= 2\n    return str(ans)\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            nums.append(i)\n\n    return max(nums, key=lambda x: nums.count(x))\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for i in range(1, int(stdin) + 1):\n        if i not in d.keys():\n            d[i] = 0\n        d[i] += 1\n    max_count = 0\n    max_key = 0\n    for i in range(1, int(stdin) + 1):\n        if d[i] > max_count:\n            max_count = d[i]\n            max_key = i\n    return str(max_key)\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    maximum = 0\n    for i in range(1, 100):\n        count = 0\n        for j in range(1, i + 1):\n            if j % 2 == 0:\n                count += 1\n        if count > maximum:\n            maximum = count\n            maximum_num = i\n    return str(maximum_num)\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    min_divisor = min(stdin)\n    max_divisor = max(stdin)\n    max_count = 0\n    count = 0\n    for divisor in range(min_divisor, max_divisor+1):\n        count = stdin.count(divisor)\n        if count > max_count:\n            max_count = count\n            max_divisor = divisor\n    return max_divisor\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisibles = {}\n    for i in range(1,n):\n        if i in divisibles:\n            divisibles[i] = divisibles[i] + 1\n        else:\n            divisibles[i] = 2\n        if i%2==0:\n            divisibles[i] = divisibles[i] + 1\n    print(max(divisibles, key=divisibles.get))"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = {}\n    ans = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            divisors[i] = i // 2\n            if divisors[i] in divisors:\n                divisors[i] = divisors[divisors[i]] + 1\n        else:\n            divisors[i] = i * 2\n            if divisors[i] in divisors:\n                divisors[i] = divisors[divisors[i]] + 1\n\n    for value in divisors.values():\n        if value > ans:\n            ans = value\n\n    return str(ans)\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if min(b, c) + min(a, d) <= max(b, c, a, d):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    if a+b <= d and a+c <= d and b+c <= d:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    if(a + b <= d) and (b + c <= d) and (a + c <= d):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    return 'Yes' if a + b <= d and b + c <= d and a + c <= d else 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, d = map(int, stdin.split())\n    if max(x, y) <= d and max(y, z) <= d and max(x, z) <= d:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a + b <= c) or (c + b <= a):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if a + b <= c and a + c <= b and b + c <= a:\n        print('Yes')\n    else:\n        print('No')\n    return\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    if abs(a - b) <= d and abs(c - b) <= d:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a <= d and b <= d and c <= d:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the three coordinates of two people, A and B, and the distance between them, \n    determine if two people can communicate or not. \n    \"\"\"\n    A, B, C, D = map(int, stdin.split())\n    if D >= max(abs(A-C), abs(B-C)):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    return \"\".join([word.title() for word in stdin])\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nsol = stdin\n\nsol.split(None,3)\n\nfor i in range(0, len(sol)):\n    #print(sol[i].title())\n    \n    sol.title()\n\nsolution('solution')\n\n--------\nclass Solution:\n    def solve(self, s):\n        result = \"\"\n\n        for i in range(len(s)):\n            if s[i].isupper():\n                result += s[i].lower()\n\n            elif not s[i].isupper():\n                result += s[i]\n\n        return result\n\n\n--------\nclass Solution:\n    def solve(self, s):\n        result = \"\"\n\n        for i in range(len(s)):\n            if s[i].isupper():\n                result += s[i]\n            elif s[i].isupper():\n                result += s[i].lower()\n\n        return result\n\n-----Explanation-----\nclass Solution:\n    def solve(self, s):\n        result = \"\"\n\n        for i in range(len(s)):\n            if s[i].isupper():\n                result += s[i]\n            elif not s[i].isupper():\n                result += s[i].lower()\n\n        return result\n\n-----Code\nclass Solution:\n    def solve(self, s):\n        result = \"\"\n\n        for i in range(len(s)):\n            if s[i].isupper():\n                result += s[i].lower()\n            elif not s[i].isupper():\n                result += s[i]\n\n        return result\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n\"\"\"\n\nstdin = input()\nwords = stdin.split()\nresult = []\nfor word in words:\n    result.append(word[0].upper())\nprint(\"\".join(result))\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return \"\".join(\n        list(map(lambda i: i.capitalize(), s))\n    )"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split(' ')\n    return ''.join(i.upper() + i for i in [s_1, s_2, s_3])\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', '').upper()"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin.split())) >= 120 else \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a + b) > c:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + 50 <= 1000 and C + 120 <= 1000 and B + 100 <= 500:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n\n    a = int(data[0])\n    b = int(data[1])\n    c = int(data[2])\n\n    if a + b + c <= 500:\n        if a + c <= 500:\n            if b + c <= 500:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    if A * C >= B:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A > B and A < C:\n        print('Yes')\n    else:\n        print('No')\n\n    return 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if(A <= 50 and B <= 50 and C <= 120):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    if a + b <= c and c <= a + b + c:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"Yes\" if a + b <= c else \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b <= c:\n        return \"No\"\n    else:\n        return \"Yes\"\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split(' ')\n    N, A = int(N), int(A)\n    A = A / 2\n    if A % 2 == 0:\n        A = A // 2\n    else:\n        A = A // 2 + 1\n    total = 0\n    for i in range(1, N + 1):\n        total += int(((i - 1) * A) // i)\n    return str(total)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    def dfs(idx: int, selected: list, total: int, sum: int) -> int:\n        if idx >= len(nums):\n            if total == A:\n                return 1\n            return 0\n        if total >= A:\n            return 0\n        cnt = 0\n        if idx in selected:\n            cnt += dfs(idx+1, selected, total, sum)\n        cnt += dfs(idx+1, selected+[idx], total+nums[idx], sum+nums[idx])\n        return cnt\n    return str(dfs(0, [], 0, 0))\n'''\n'''\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    return str(int(round(sum([x / n for x in range(1, n + 1)]) - a)))\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split()\n    N = int(N)\n    A = int(A)\n    result = 0\n    for i in range(1, N + 1):\n        aver = A / i\n        result += math.floor((aver * math.ceil(N / i) * (N - 1)) / 2)\n    return str(result)"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split()\n    N = int(N)\n    A = int(A)\n    def num_cards(N: int, A: int) -> int:\n        if N == 1:\n            return 1 if A % 2 == 0 else 2\n        if N == 2:\n            return 1 if A % 2 == 0 else 2\n        if N == 3:\n            return 2\n        if N == 4:\n            return 3\n        if N == 5:\n            return 4\n        if N == 6:\n            return 5\n        if N == 7:\n            return 6\n        if N == 8:\n            return 7\n        if N == 9:\n            return 8\n        if N == 10:\n            return 9\n        if N == 11:\n            return 10\n        if N == 12:\n            return 11\n        if N == 13:\n            return 12\n        if N == 14:\n            return 13\n        if N == 15:\n            return 14\n        if N == 16:\n            return 15\n        return -1\n\n    def ways(N: int, A: int, memo: List[int]) -> int:\n        if N == 1:\n            return 1 if A % 2 == 0 else 2\n        if N == 2:\n            return 1 if A % 2 == 0 else 2\n        if N == 3:\n            return 2\n        if N == 4:\n            return 3\n        if N == 5:\n            return 4\n        if N == 6:\n            return 5\n        if N == 7:\n            return 6\n        if N == 8:\n            return 7\n        if N == 9:\n            return 8\n        if N == 10:\n            return 9\n        if N == 11:\n            return 10\n        if N == 12:\n            return 11\n        if N == 13:\n            return 12\n        if N == 14:\n            return 13\n        if N == 15:\n            return 14\n        if N == 16:\n            return 15\n        if N == 17:\n            return 16\n        if N == 18:\n            return 17\n        if N == 19:\n            return 18\n        if N == 20:\n            return 19\n        if N == 21:\n            return 20\n        if N == 22:\n            return 21\n        if N == 23:\n            return 22\n        if N == 24:\n            return 23\n        if N == 25:\n            return 24\n        if N == 26:\n            return 25\n        if N == 27:\n            return 26\n        if N == 28:\n            return 27\n        if N == 29:\n            return 28\n        if N == 30:\n            return 29\n        if N == 31:\n            return 30\n        if N == 32:\n            return 31\n        if N == 33:\n            return 32\n        if N == 34:\n            return 33\n        if N == 35:\n            return 34\n        if N == 36:\n            return 35\n        if N == 37:\n            return 36\n        if N == 38:\n            return 37\n        if N == 39:\n            return 38\n        if N == 40:\n            return 39\n        if N == 41:\n            return 40\n        if N == 42:\n            return 41\n        if N == 43:\n            return 42\n        if N == 44:\n            return 43\n        if N == 45:\n            return 44\n        if N == 46:\n            return 45\n        if N == 47:\n            return 46\n        if N == 48:\n            return 47\n        if N == 49:\n            return 48\n        if N == 50:\n            return 49\n        if N == 51:\n            return 50\n        if N == 52:\n            return 51\n        if N == 53:\n            return 52\n        if N == 54:\n            return 53\n        if N == 55:\n            return 54\n        if N == 56:\n            return 55\n        if N == 57:\n            return 56\n        if N == 58:\n            return 57\n        if N == 59:\n            return 58\n        if N == 60:\n            return 59\n        if N == 61:\n            return 60\n        if N == 62:\n            return 61\n        if N == 63:\n            return 62\n        if N == 64:\n            return 63\n        if N == 65:\n            return 64\n        if N == 66:\n            return 65\n        if N == 67:\n            return 66\n        if N == 68:\n            return 67\n        if N == 69:\n            return 68\n        if N == 70:\n            return 69\n        if N == 71:\n            return 70\n        if N == 72:\n            return 71\n        if N == 73:\n            return 72\n        if N == 74:\n            return 73\n        if N == 75:\n            return 74\n        if N == 76:\n            return 75\n        if N == 77:\n            return 76\n        if N == 78:\n            return 77\n        if N == 79:\n            return 78\n        if N == 80:\n            return 79\n        if N == 81:\n            return 80\n        if N == 82:\n            return 81\n        if N == 83:\n            return 82\n        if N == 84:\n            return 83\n        if N == 85:\n            return 84\n        if N == 86:\n            return 85\n        if N == 87:\n            return 86\n        if N == 88:\n            return 87\n        if N == 89:\n            return 88\n        if N == 90:\n            return 89\n        if N == 91:\n            return 90\n        if N == 92:\n            return 91\n        if N == 93:\n            return 92\n        if N == 94:\n            return 93\n        if N == 95:\n            return 94\n        if N == 96:\n            return 95\n        if N == 97:\n            return 96\n        if N == 98:\n            return 97\n        if N == 99:\n            return 98\n        if N == 100:\n            return 99\n        if N == 101:\n            return 100\n        if N == 102:\n            return 101\n        if N == 103:\n            return 102\n        if N == 104:\n            return 103\n        if N == 105:\n            return 104\n        if N == 106:\n            return 105\n        if N == 107:\n            return 106\n        if N == 108:\n            return 107\n        if N == 109:\n            return 108\n        if N == 110:\n            return 109\n        if N == 111:\n            return 110\n        if N == 112:\n            return 111\n        if N == 113:\n            return 112\n        if N == 114:\n            return 113\n        if N == 115:\n            return 114\n        if N == 116:\n            return 115\n        if N == 117:\n            return 116\n        if N == 118:\n            return 117\n        if N == 119:\n            return 118\n        if N == 120:\n            return 119\n        if N == 121:\n            return 120\n        if N == 122:\n            return 121\n        if N == 123:\n            return 122\n        if N == 124:\n            return 123\n        if N == 125:\n            return 124\n        if N == 126:\n            return 125\n        if N == 127:\n            return 126\n        if N == 128:\n            return 127\n        if N == 129:\n            return 128\n        if N == 130:\n            return 129"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(' ')\n    n, a = int(n), int(a)\n    n = int(n)\n    N = n + 1\n    A = a * N\n    print(A)\n\n    return str(A)\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.strip().split()\n    N, A = int(N), int(A)\n    n = N\n    cards = sorted([int(i) for i in stdin.strip().split()])\n    if A == cards[-1]:\n        return \"1\"\n    if A == cards[-2]:\n        return \"2\"\n    if A == cards[-3]:\n        return \"3\"\n    if A == cards[-4]:\n        return \"4\"\n    dp = {0: 1, 1: 1}\n    for i in range(n):\n        prev_dp = dp.copy()\n        for k in range(i + 1):\n            dp[k] = 0\n            for j in range(k):\n                dp[k] += prev_dp[j]\n        dp[i + 1] = dp[i]\n    return str(dp[-1])\n\n-------------------------------------------------------------------------------------------------\n\nSample Input 1:\n10 8\n1 2 3 4 5 6 7 8 9 10\n\nSample Output 1:\n10\n\n - The following are the 10 ways to select cards:\n - Select the 4th card.\n - Select the 1st and 5th cards.\n - Select the 2nd and 6th cards.\n - Select the 3rd and 7th cards.\n - Select the 1st and 5th, 3rd and 7th cards.\n - Select the 4th and 5th, 1st and 3rd, 2nd and 6th cards.\n - Select the 4th and 5th, 3rd and 2nd, 1st and 6th cards.\n - Select the 4th, 1st and 5th, 3rd and 2nd, 1st and 6th cards.\n - Select the 4th, 3rd and 5th, 1st and 2nd, 1st and 6th cards.\n - Select the 4th, 3rd and 2nd, 1st and 5th, 1st and 6th cards.\n - Select the 4th, 3rd, 1st and 5th, 2nd and 6th, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd and 5th, 1st and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 1st and 6th, 3rd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 6th, 1st and 2nd, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and 2nd, 2nd and 6th, 1st and 5th, 2nd and 6th cards.\n - Select the 4th, 3rd, 2nd, 1st and 5th, 3rd and 2nd, 1st and 6th, 3rd and 5th, 1st and"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split()\n    N = int(N)\n    A = int(A)\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N - 1, -1, -1):\n        if sum(arr[:i + 1]) == A:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(sum([a - i * ((i + 1) / 2) for i in range(1, n + 1)]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = int(a)\n    arr = list(map(int, stdin.split()))\n    result = 0\n    if n == 1:\n        if sum(arr) == a:\n            result = 1\n        else:\n            result = 0\n    else:\n        arr.sort()\n        if sum(arr) == a:\n            result = 1\n        else:\n            result = 0\n    return str(result)\n\n------Time Complexity------\nThe time complexity of the above algorithm will be O(N x logN)O(NlogN) where N is the number of cards.\n\n------Space Complexity------\nThe space complexity of the above algorithm will be O(N)O(N) as the size of the temporary array used in the algorithm will be N.\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        print(i, end=' ')"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = lines[0]\n    b = lines[1].split()\n    b = list(map(int, b))\n    for i in range(len(b)):\n        if i == 0:\n            # append\n            b.append(b[i])\n        else:\n            # reverse\n            b.insert(0, b[i])\n    return''.join(map(str, b))\n\nstdin = \"\"\"\n1\n1\n2\n3\n\"\"\"\n\nstdout = \"\"\"\n1 2 1 3\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each operation, perform the operation and return the result.\n    \"\"\"\n    n = int(stdin)\n    a = stdin.split()\n    for i in range(n):\n        b = a[:]\n        b.append(a[i])\n        b.pop(i)\n        b.reverse()\n    return \" \".join(b)\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    seq = list(map(int, lines[1].split()))\n    seq_len = len(seq)\n    while seq_len > 1:\n        seq.append(seq.pop(0))\n        seq.reverse()\n        seq_len -= 1\n    return str(seq[0])\nprint(solution(input()))\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = range(n)\n    n = list(n)\n    \n    \n    # TODO: Write your code here\n    for i in range(len(n)):\n        n[i] = n.pop(-1)\n        n[i] = n.pop(-1)\n        n[i] = n.pop(-1)\n        n.append(n.pop(-1))\n        n.append(n.pop(-1))\n        n.append(n.pop(-1))\n        n.append(n.pop(-1))\n    return \" \".join(map(str, n))\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the answer as a string, sans the trailing newline.\n    \"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    strings = stdin\n    n_ops = n\n\n    while n_ops > 0:\n        new_strings = []\n        for string in strings:\n            string = string.strip()\n            if len(string) > 0:\n                new_strings.append(string)\n            if len(string) > 0:\n                new_strings.append(string[::-1])\n\n        strings = new_strings\n        n_ops -= 1\n\n    return \"\\n\".join(strings)\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        a.append(a[i])\n        a.pop(i)\n        a.reverse()\n    return''.join(str(i) for i in a)\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.strip())\n    sequence = list(map(int, stdin.split()))\n\n    for _ in range(n):\n        sequence = sequence[::-1]\n        sequence.append(sequence.pop(0))\n\n    return''.join(map(str, sequence))\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution - Solution to the problem.\n    parameters - \n    stdin - input.\n    '''\n    n = int(stdin)\n    \n    a = stdin.split(\" \")\n    \n    b = []\n    for i in range(n):\n        b.append(int(a[i]))\n    \n    b.reverse()\n    \n    b = \" \".join(map(str, b))\n    print(b)\n    return b\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def reverse(num):\n        return int(str(num)[::-1])\n    n = int(stdin.split()[0])\n    sequence = stdin.split()[1:]\n    b = sequence\n    for _ in range(n):\n        b.append(reverse(b[0]))\n        b.append(reverse(b[-1]))\n        b.append(reverse(b[-2]))\n        b = list(map(int, b))\n    return''.join(map(str, b))"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = list(map(int, stdin.split()))\n    moves = list(map(int, stdin.split()))\n    h -= min(moves)\n    if h <= 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    prev = 0\n    for i in range(N):\n        A[i] -= prev\n        if A[i] <= 0:\n            return \"No\"\n        prev = A[i]\n    return \"Yes\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    ans = \"No\"\n    for i in range(1, n+1):\n        a = list(map(int, stdin.split()))\n        if (a[0] * h) % a[i] < a[i-1]:\n            ans = \"Yes\"\n            break\n    return ans\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, N = stdin.split(\" \")\n    H, N = int(H), int(N)\n\n    # print(H, N)\n\n    moves = []\n    for _ in range(N):\n        moves.append(stdin.split())\n\n    for move in moves:\n        count = 0\n        for _ in range(int(move[0])):\n            count += 1\n            H -= int(move[1])\n            if H <= 0:\n                return \"No\"\n        if count == 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    health, moves = stdin.split()\n    health = int(health)\n    moves = list(map(int, moves.split()))\n    if len(moves) > 1 and moves.count(moves[0]) == len(moves):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split(' ')\n    n = int(n)\n    h, moves = list(map(int, stdin.split(' ')))\n    moves = list(map(int, stdin.split(' ')))\n\n    def game(moves, h, moves_to_use):\n        return sum(1 for i in range(len(moves)) if moves[i] >= h and moves_to_use[i] > 0)\n\n    min_h = 0\n    max_h = h\n    while min_h <= max_h:\n        moves_to_use = moves\n        if game(moves, h, moves_to_use) >= n:\n            return 'Yes'\n        if game(moves, max_h, moves_to_use) == n:\n            return 'Yes'\n        if game(moves, min_h, moves_to_use) == n:\n            return 'Yes'\n        if game(moves, min_h, moves_to_use) == n:\n            return 'Yes'\n        min_h += 1\n\n    return 'No'\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [h, n] = list(map(int, stdin.split()))\n    moves = list(map(int, stdin.split()))\n    for move in range(n):\n        h -= moves[move]\n        if h <= 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    monster_health = H\n    for i in range(N):\n        monster_health -= A[i]\n        if monster_health <= 0:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    l = []\n    while H!= 0 or N!= 0:\n        for i in range(N):\n            if A[i]!= 0:\n                l.append(i)\n            else:\n                A[i] = A[i] + H\n        H -= A[N]\n        A[N] = 0\n        N -= 1\n        if l:\n            for j in l:\n                A[j] = A[j] + A[i]\n            A[i] = 0\n            l = []\n    if A == [0] * N:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n = stdin.split()\n    a = list(map(int, a.split()))\n    h, m = a\n    return \"Yes\" if h <= 0 or m <= 0 else \"No\"\n    \n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    while len(string)!= 1:\n        if is_even(string):\n            string = string[:-1]\n        else:\n            string = string[:-2]\n    return str(len(string))\n\n\ndef"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    longest = []\n    while len(s) >= 2:\n        if s[-2] == s[-1]:\n            longest.append(s[-2])\n            s = s[:-2]\n        else:\n            break\n    print(len(longest))\n    return\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length % 2!= 0:\n        return length\n\n    result = 0\n    start, end = 0, 0\n    while start <= length - 1:\n        if start == length - 1:\n            end = length\n        while end <= length:\n            if start == end:\n                if stdin[start] == stdin[end]:\n                    end += 1\n                    continue\n                break\n            elif stdin[start] == stdin[end]:\n                end += 1\n            else:\n                break\n        if end == length:\n            end = length\n        if end == length:\n            end = length\n        if end - start > result:\n            result = end - start\n        start += 1\n        end += 1\n    return result\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(len(stdin) if stdin.isupper() else len(stdin) - 1) if stdin.isupper() else '{}'.format(len(stdin) - 1)"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # getting input from stdin\n    string = stdin\n    \n    # This will take care of the even length of the string.\n    while len(string) % 2!= 0:\n        # replacing the last character with the last character from the string.\n        string = string[:-1]\n    \n    # printing the length of even length string.\n    return len(string)\n\nprint(solution(input()))"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return max(solution(stdin[:-1]), solution(stdin[:-2]), solution(stdin[:-3]), solution(stdin[:-4]), solution(stdin[:-5]), solution(stdin[:-6]))"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    ans: int = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            ans += 1\n        else:\n            break\n    return ans\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin\n    \n    for i in range(len(s)-1, -1, -1):\n        if s[i] == s[i-1]:\n            s = s[:i] + s[i+1:]\n            break\n    return len(s)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    len_S = len(S)\n    s = \"\"\n    while len_S > 0:\n        if s!= \"\" and s[-1] == s[-2]:\n            s = s[:-2] + s[-1]\n            len_S -= 2\n        elif s!= \"\":\n            s = s[:-1]\n            len_S -= 1\n        else:\n            break\n    return len(s)\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin\n    return letters == letters[::-1]\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(3):\n        s = s.replace(s[0], s[2], 1)\n        s = s.replace(s[1], s[0], 1)\n        s = s.replace(s[2], s[1], 1)\n    return s\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    b, a, c = s\n    return 'Yes' if (a, c, b) == (b, a, c) else 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s[0] + s[2] + s[1] if len(s) == 3 and s[0] == s[1] and s[0]!= s[2] else \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Solution starts here\n    if stdin.count('a') == stdin.count('b') and stdin.count('a') == stdin.count('c'):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.count('a')\n    b = stdin.count('b')\n    c = stdin.count('c')\n    if c!= 0 and a!= 0 and b!= 0:\n        if a < b and b < c:\n            if stdin == 'bac':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    abc = stdin\n    abc_new = abc[1] + abc[0] + abc[2]\n    if abc_new == abc:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    if stdin == \"bac\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(i) for i in stdin.split()]\n    b = [*a]\n    for i in range(n):\n        for j in range(i + 1, n):\n            b[i] *= b[j]\n            b[j] = 0\n    b = [*filter(lambda x: x!= 0, b)]\n    b.sort()\n    return''.join([str(i) for i in b])\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    aa = []\n    bb = []\n    ans = float('inf')\n    for i in range(n):\n        if i <= a.index(max(a)):\n            aa.append(max(a))\n            a.remove(max(a))\n        else:\n            aa.append(min(a))\n            a.remove(min(a))\n        if i <= b.index(max(b)):\n            bb.append(max(b))\n            b.remove(max(b))\n        else:\n            bb.append(min(b))\n            b.remove(min(b))\n        ans = min(ans, sum([aa[i]*bb[i] for i in range(n)]) % 998244353)\n    return str(ans)\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # print(a,b)\n    b = sorted(b, key=lambda x: b.index(x))\n    # print(b)\n    # print(f\"1: {b}\")\n    # print(f\"2: {b[::-1]}\")\n    # print(f\"3: {b}\")\n    # print(f\"4: {b[::-1]}\")\n    res = sum([i * j for i, j in zip(a, b)])\n    res = res % 998244353\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    b = b[::-1]\n    d = {}\n    for i, num in enumerate(a):\n        d[num] = i\n\n    ans = 0\n    for i, num in enumerate(b):\n        ans += num * a[d[num]]\n    return str(ans % 998244353)\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    b = list(map(int, stdin.split()))\n\n    a.sort()\n    b.sort()\n    ans = sum(a) * sum(b)\n    ans = sum([a[i] * b[i] for i in range(n)])\n\n    return str(ans % 1000000009)\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[1].split()\n    b = stdin.split(\"\\n\")[2].split()\n    n = int(a[0])\n    a = a[1:]\n    b = b[1:]\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    result = 0\n    \n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            sum += a[j] * b[i+j]\n        result += sum\n    result = str(result % (998244353))\n    return result\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n\n    result = 0\n    for i in range(len(a)):\n        result += a[i] * b[i]\n    return str(result % 998244353)\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n\n    answer = 0\n    while a!= sorted(a) or b!= sorted(b):\n        if a!= sorted(a):\n            a = sorted(a)\n            for i in range(len(a)):\n                a[i] = 1 - a[i]\n            answer += sum(a)\n        if b!= sorted(b):\n            b = sorted(b)\n            for i in range(len(b)):\n                b[i] = 1 - b[i]\n            answer += sum(b)\n    return answer\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n\n    a.sort()\n    b.sort()\n\n    return str(sum(a * b) % 998244353)\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    s = sum(a) * sum(b)\n    mod = (10**9) + 7\n    for i in range(1, n + 1):\n        s += sum(a[:i]) * sum(b[i:])\n    s %= mod\n    print(s)\n    return s\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, m, k, a)\n    offers = list(map(int, stdin.split()))\n    # print(offers)\n    total = 0\n    best = float('inf')\n    best_offer = None\n\n    for i in range(m):\n        # print(i)\n        # print(offers)\n        if total >= k:\n            break\n        cnt = 0\n        for j in range(i, len(a)):\n            if cnt >= k:\n                break\n            if a[j] <= k:\n                if a[j] < best:\n                    best = a[j]\n                    best_offer = (i, j)\n                    cnt += 1\n                else:\n                    break\n\n    if best == float('inf'):\n        return total\n    else:\n        # print(best)\n        # print(best_offer)\n        offers[best_offer[0]] = a[best_offer[1]]\n        total += best\n        for offer in offers:\n            if offer!= 0:\n                total += offer\n    return str(total)\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    shovels = list(map(int, stdin.split()))\n    special_offers = list(map(int, stdin.split()))\n    costs = {}\n    costs_b = {}\n    count = 0\n    for i in range(n):\n        if shovels[i] not in costs:\n            costs[shovels[i]] = 1\n            costs_b[shovels[i]] = 0\n        else:\n            count += 1\n    for i in range(m):\n        costs[special_offers[i]] -= 1\n    shovels = sorted(costs)\n    costs = sorted(costs, key=lambda x: costs[x])\n    costs_b = sorted(costs_b, key=lambda x: costs_b[x])\n    costs_b = costs_b[::-1]\n    ans = 0\n    costs = list(costs)\n    costs_b = list(costs_b)\n    costs_b.reverse()\n    for i in range(k):\n        if i > len(costs) - 1:\n            ans += costs_b[0]\n        else:\n            ans += costs[i]\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_offer(offer: str):\n        new_offer = offer.split()\n        new_offer = (int(new_offer[0]), int(new_offer[1]))\n        return new_offer\n\n    count_list = []\n    n, m, k = map(int, stdin.split())\n    shovels = []\n    for i in range(n):\n        shovels.append(int(input()))\n    for i in range(m):\n        offer = input()\n        offer = check_offer(offer)\n        count_list.append(offer)\n    count_list.sort(key=lambda offer: offer[1])\n    print(count_list)\n    shovels = sorted(shovels)\n    print(shovels)\n    count = 0\n    for i in range(len(count_list)):\n        if count < k:\n            if count_list[i][0] <= shovels[-1]:\n                shovels = shovels[0:-1]\n                count += 1\n            else:\n                continue\n        else:\n            break\n    print(shovels)\n    return count\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    a = list(map(int, stdin[3:]))\n    misha = {tuple(a[i:i + 2]) for i in range(0, len(a), 2)}\n    ans = 0\n    while len(misha)!= 0:\n        curr = set()\n        for offer in misha:\n            if offer[1] <= k:\n                curr.add(offer)\n            elif offer[0] == k:\n                curr.add(offer)\n        for offer in misha:\n            if offer in curr:\n                curr.remove(offer)\n        ans += len(curr)\n        k -= min(curr, key=lambda x: x[0])[0]\n        for offer in curr:\n            misha.remove(offer)\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    hshovels = list(map(int, stdin.split()))\n    special_offer = [[] for _ in range(m)]\n\n    for j in range(m):\n        x, y = map(int, stdin.split())\n        special_offer[j].append((x, y))\n\n    output = -1\n    c = 0\n    while c < k:\n        c = 0\n        h = 0\n        for i in range(n):\n            if hshovels[i] == 0:\n                h += 1\n            if h == k:\n                break\n        if h == k:\n            output = c\n            break\n        if h > k:\n            continue\n\n        #h += hshovels[h]\n        for i in range(h, n):\n            hshovels[i] -= 1\n        c += h\n\n        for j in range(m):\n            if not special_offer[j]:\n                continue\n            if c == k:\n                break\n            if c > k:\n                break\n            if hshovels[i] == 0:\n                h += 1\n            if h == k:\n                break\n            if hshovels[i] == 0:\n                h += 1\n            for x, y in special_offer[j]:\n                if h >= x:\n                    h += y\n        c += h\n        for i in range(h, n):\n            hshovels[i] += 1\n    return str(output) if output > -1 else \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    a = sorted([int(i) for i in stdin.split()[1:]])\n    s = list(zip(range(1, n+1), a))\n    ans = 0\n    while s and k > 0:\n        i, c = s.pop()\n        if c == a[0]:\n            ans += c\n            if len(s) > 0 and s[0][1] == a[0]:\n                ans += c\n                k -= 1\n            a = a[1:]\n        else:\n            if c == a[-1]:\n                if k > 0:\n                    ans += c\n                    k -= 1\n                    a = a[:-1]\n            else:\n                a = a[a.index(c) + 1:] + a[:a.index(c)]\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    a = sorted(int(i) for i in stdin.split()[1:])\n    s = set(a)\n    e = set()\n    for i in range(m):\n        x, y = (int(i) for i in stdin.split()[1:])\n        s.update(range(min(x, y), max(x, y) + 1))\n        e.add((x, y))\n    ans = sum(min(a) for i in range(k) for a in itertools.combinations(s, i))\n    return str(ans)"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, m, k = stdin[0], stdin[1], stdin[2]\n    shovels = list(map(int, stdin[3:]))\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    shovels.sort()\n    shovels.reverse()\n\n    def buy(n: int, k: int, m: int, shovels: list, c: list, j: int):\n        if n == 0:\n            return 0\n        if n == 1:\n            if c[0] == 0:\n                if c[0] == 0:\n                    return c[0]\n                else:\n                    return k\n            else:\n                return k\n\n        if c[n - 1]!= 0:\n            return c[n - 1]\n\n        if c[n - 1] == 0:\n            if k >= m:\n                return buy(n - 1, k, m, shovels, c, j)\n            else:\n                c[n - 1] = buy(n - 1, k, m, shovels, c, j) + buy(n - 1, k, m, shovels, c, j + 1)\n                return c[n - 1]\n\n\n    c = [0] * n\n    for i in range(n):\n        c[i] = buy(n, k, m, shovels, c, 0)\n\n    return str(min(c))\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solution_1(a, m, k):\n        dp = [[-1 for _ in range(k + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 0\n        for i in range(k + 1):\n            dp[0][i] = 0\n        for i in range(1, m + 1):\n            for j in range(1, k + 1):\n                if a[i - 1] <= j:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + a[i - 1])\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n\n    def solution_2(a, m, k):\n        dp = [[0 for _ in range(k + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 0\n        for i in range(k + 1):\n            dp[0][i] = 0\n        for i in range(1, m + 1):\n            for j in range(1, k + 1):\n                if a[i - 1] <= j:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + a[i - 1])\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n\n    def solution_3(a, m, k):\n        dp = [[0 for _ in range(k + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 0\n        for i in range(k + 1):\n            dp[0][i] = 0\n        for i in range(1, m + 1):\n            for j in range(1, k + 1):\n                if a[i - 1] <= j:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + a[i - 1])\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n    return str(solution_1(list(map(int, stdin.split())), int(stdin.split()[1]), int(stdin.split()[2])))\n\nprint(solution(input()))"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.strip().split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    dist = [-1] * n\n    dist[0] = 0\n    q = deque([0])\n    while q:\n        v = q.popleft()\n        for nei in graph[v]:\n            if dist[nei] == -1 or dist[nei] > dist[v] + 1:\n                dist[nei] = dist[v] + 1\n                q.append(nei)\n    m = float('inf')\n    for i in range(n):\n        if dist[i] <= 2:\n            m = min(m, dist[i])\n    return str(m) if m!= float('inf') else \"0\""
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    tree = []\n    for i in range(n - 1):\n        u, v = stdin.split()[i * 2], stdin.split()[i * 2 + 1]\n        tree.append((u, v))\n    tree.sort(key=lambda x: x[0])\n    res = 0\n    for i in range(len(tree) - 1):\n        if tree[i][1] == tree[i + 1][0]:\n            continue\n        dist = set()\n        dist.add(tree[i][1])\n        for j in range(i + 1, len(tree)):\n            if tree[j][0] in dist:\n                continue\n            dist.add(tree[j][0])\n            res = max(res, j - i + 1)\n    print(res)\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = collections.defaultdict(set)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n\n    def dfs(graph, start, prev, steps):\n        if start == prev:\n            return steps\n        for v in graph[start]:\n            if v!= prev:\n                steps = max(steps, dfs(graph, v, start, steps + 1))\n        return steps\n\n    res = float('inf')\n    for v in range(1, n):\n        steps = dfs(graph, 1, -1, 0)\n        if steps <= 2:\n            res = min(steps, res)\n    return res if res < float('inf') else -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # num_vertices, num_edges = map(int, input().split())\n    # tree = {i + 1: set() for i in range(num_vertices)}\n    # for i in range(num_edges):\n    #     u, v = map(int, input().split())\n    #     tree[u].add(v)\n    #     tree[v].add(u)\n    #\n    # Q = int(input())\n    # dist = [[-1] * (num_vertices + 1) for _ in range(num_vertices + 1)]\n    # dist[1][1] = 0\n    #\n    # for _ in range(Q):\n    #     u, v = map(int, input().split())\n    #     if dist[u][v] == -1:\n    #         dist[u][v] = dist[v][u] = 2\n    #         path = bfs(u, v)\n    #         if dist[1][v]!= -1:\n    #             dist[u][v] = dist[v][u] = min(dist[u][v], dist[v][1])\n    #             dist[1][v] = min(dist[u][v], dist[v][1])\n    #         else:\n    #             dist[u][v] = dist[v][u] = dist[1][v] = min(dist[u][v], dist[v][1])\n    #             dist[1][v] = dist[u][v] = min(dist[u][v], dist[v][1])\n    #         # print(\"u=\", u, \"v=\", v, \"path=\", path)\n    #         for i in path:\n    #             if dist[1][i] == -1:\n    #                 dist[1][i] = dist[u][v]\n    #             else:\n    #                 dist[1][i] = min(dist[1][i], dist[u][v])\n    #\n    # print(dist[1][1])\n    # print(dist)\n    # return dist\n    num_vertices, num_edges = map(int, input().split())\n    tree = {i + 1: set() for i in range(num_vertices)}\n    for i in range(num_edges):\n        u, v = map(int, input().split())\n        tree[u].add(v)\n        tree[v].add(u)\n\n    Q = int(input())\n    dist = [[-1] * (num_vertices + 1) for _ in range(num_vertices + 1)]\n    dist[1][1] = 0\n\n    for _ in range(Q):\n        u, v = map(int, input().split())\n        if dist[u][v] == -1:\n            dist[u][v] = dist[v][u] = 2\n            path = bfs(u, v)\n            if dist[1][v]!= -1:\n                dist[u][v] = dist[v][u] = min(dist[u][v], dist[v][1])\n                dist[1][v] = min(dist[u][v], dist[v][1])\n            else:\n                dist[u][v] = dist[v][u] = dist[1][v] = min(dist[u][v], dist[v][1])\n                dist[1][v] = dist[u][v] = min(dist[u][v], dist[v][1])\n            # print(\"u=\", u, \"v=\", v, \"path=\", path)\n            for i in path:\n                if dist[1][i] == -1:\n                    dist[1][i] = dist[u][v]\n                else:\n                    dist[1][i] = min(dist[1][i], dist[u][v])\n\n    print(dist[1][1])\n    print(dist)\n\n    return dist\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = set()\n    edges = []\n    \n    for _ in range(n-1):\n        v1, v2 = map(int, stdin.split())\n        vertices.add(v1)\n        vertices.add(v2)\n        edges.append((v1, v2))\n        \n    return str(min(2 + min((vertices - set(e)).pop(), len(e)-2) for e in edges))\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for line in stdin.split():\n        graph[int(line.split(\" \")[0])].append(int(line.split(\" \")[1]))\n        graph[int(line.split(\" \")[1])].append(int(line.split(\" \")[0]))\n    dist = {}\n    for i in graph:\n        dist[i] = float('inf')\n    dist[1] = 0\n    while True:\n        flag = False\n        for i in graph:\n            if dist[i] < dist[1] + 1:\n                dist[i] = dist[1] + 1\n                flag = True\n        if not flag:\n            break\n    for i in graph:\n        if dist[i] > 2:\n            return '0'\n    return str(dist[1] + 1)\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = []\n    for i in range(n):\n        data.append(list(map(int, stdin.split())))\n\n    dist = {}\n    dist[1] = 0\n    visited = []\n    visited.append(1)\n\n    for i in range(n):\n        #dist[i+1] = i + 1\n        dist[data[i][0]] = data[i][1]\n\n    queue = []\n    visited = []\n    queue.append(1)\n\n    while len(queue) > 0:\n        v = queue.pop(0)\n        visited.append(v)\n\n        for i in data:\n            if i[0] == v and i[1] not in visited:\n                if i[1] in queue:\n                    queue.remove(i[1])\n                dist[i[1]] = dist[v] + i[1]\n                queue.append(i[1])\n            elif i[0] == v and i[1] in visited:\n                if dist[v] + i[1] < dist[i[1]]:\n                    dist[i[1]] = dist[v] + i[1]\n\n    return dist\nprint(solution(\"3\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\"))"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    lines = stdin.splitlines()\n    edges = []\n    for line in lines:\n        line = line.split(' ')\n        edges.append((line[0], line[1]))\n    tree = []\n    for i in range(1, len(edges) + 1):\n        tree.append([i])\n    for i in range(len(edges)):\n        tree[i].append(edges[i][1])\n        tree[i].append(edges[i][0])\n    min_ways = sys.maxsize\n    for i in range(len(tree)):\n        if tree[i][0] == 1:\n            distances = [0]\n        else:\n            distances = []\n        for j in range(1, len(tree[i])):\n            if tree[i][j] == 1:\n                distances.append(distances[-1] + 1)\n            else:\n                distances.append(distances[-1] + 2)\n            if tree[i][j] == 2:\n                distances.append(distances[-1] + 1)\n        if min(distances) < min_ways:\n            min_ways = min(distances)\n    return str(min_ways)\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    t = stdin.split(\"\\n\")\n    for i in range(len(t)):\n        t[i] = t[i].split(\" \")\n    t.pop()\n    t.sort(key=lambda x: int(x[0]))\n    n = int(t.pop(0)[0])\n    min_count = float('inf')\n    count = 0\n    while len(t) > 0:\n        i, j = t.pop(0)\n        i = int(i)\n        j = int(j)\n        if i!= j and abs(n - i) + abs(n - j) <= 2:\n            count += 1\n    if count > min_count:\n        print(count)\n    else:\n        print(min_count)\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = {i: [] for i in range(n)}\n\n    for i in range(1, n - 1):\n        u, v = stdin.split()\n        u = int(u)\n        v = int(v)\n        tree[u].append(v)\n        tree[v].append(u)\n    # we don't want loops and multiple edges\n    n_edges = 0\n    # we don't want loops and multiple edges\n    for v in tree.values():\n        if len(v) > 1:\n            n_edges += 1\n    return str(n_edges)\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 101):\n        if i % 2!= 0:\n            return str(i)\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    return \" \".join(str(x) for x in range(1, n+1) if x % n!= k % n)"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    list1 = []\n    for i in stdin.split():\n        n, k = map(int, i.split())\n        list1.append(find_k_different_number(n, k))\n    return \"\\n\".join(list1)\n\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    input_data = stdin.split()\n    number_of_test_cases = int(input_data[0])\n    \n    for i in range(1, number_of_test_cases + 1):\n        number_of_numbers = int(input_data[i])\n        number_of_numbers_div_by = int(input_data[i+1])\n        for j in range(1, number_of_numbers + 1):\n            if j % number_of_numbers_div_by!= 0:\n                print(j)\n                return\n        \n\nsolution(input())\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    for i in range(len(stdin)):\n        input_array = stdin[i].split()\n        for j in range(len(input_array)):\n            input_array[j] = int(input_array[j])\n        if input_array[0] % input_array[1] == 0:\n            return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n        else:\n            if input_array[1] - input_array[0] < input_array[1]:\n                for k in range(input_array[1] - input_array[0]):\n                    if input_array[0] + k > input_array[1]:\n                        return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n                    else:\n                        if input_array[0] + k > input_array[1]:\n                            return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n            elif input_array[1] - input_array[0] > input_array[1]:\n                for k in range(input_array[1] - input_array[0]):\n                    if input_array[0] + k > input_array[1]:\n                        return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n                    else:\n                        if input_array[0] + k > input_array[1]:\n                            return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n            else:\n                for k in range(input_array[1] - input_array[0]):\n                    if input_array[0] + k > input_array[1]:\n                        return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n                else:\n                    return '{0} is not divisible by {1}'.format(input_array[1], input_array[0])\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.strip().split())\n        if k!= n:\n            print(k)\n    return ''"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code must return a single line(str) of output as described below.\n\n    ## Sample Test Case ##\n    Input\n    6\n    3 7\n    4 12\n    2 1000000000\n    7 97\n    1000000000 1000000000\n    2 1\n    \n    Output\n    10\n    15\n    1999999999\n    113\n    1000000001\n    1\n    \n    ## Constraints ##\n    * `1 <= t <= 1000`\n    * `1 <= n, k <= 10^9`\n    \n    \"\"\"\n    # stdin = '''\n    # 5\n    # 3 7\n    # 4 12\n    # 2 1000000000\n    # 7 97\n    # 1000000000 1000000000\n    # 2 1\n    # '''\n    # stdin = input()\n    \n    t = int(stdin)\n    for _ in range(t):\n        n, k = list(map(int, stdin.split()))\n        print(f'{k} {((n**2+n)//2) - k}')\n    \n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n, 100000000000):\n        if i % n!= 0:\n            print(i)\n            return\n    print(i+1)\n    return"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    numbers = list(range(1,n+1))\n    k_numbers = []\n    for i in range(1,k+1):\n        k_numbers.append(numbers[i-1])\n    for j in range(len(numbers)):\n        if numbers[j]%n==0:\n            if numbers[j] not in k_numbers:\n                return str(numbers[j])\n    return '{:03}'.format(numbers[k-1])\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [x for x in range(1, 10**9 + 1) if x % n!= 0]\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return str(arr[i])\n        \n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    ids = list(map(int, stdin.split()))\n    id_by_order = sorted(ids, reverse=True)\n    m = 0\n    for i in range(k):\n        if id_by_order[i] == i:\n            m += 1\n            id_by_order.pop(i)\n    for i in range(k, n):\n        if id_by_order == ids:\n            m += 1\n            id_by_order.pop(0)\n    return str(m)\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  _, n, k = stdin.split()\n  n, k = int(n), int(k)\n  ids = list(map(int, stdin.split()))\n\n  visited = [False] * (k+1)\n  visited[0] = True\n  max_conversation = 0\n  max_conversation_id = None\n  for i in ids:\n    if visited[i]:\n      continue\n    max_conversation = max(max_conversation, i)\n    max_conversation_id = i\n\n    for j in range(1, k+1):\n      if max_conversation == j:\n        visited[j] = True\n        if visited[i]:\n          break\n      if visited[j] and i > j:\n        break\n    if visited[i]:\n      break\n  else:\n    max_conversation = k\n\n  return str(max_conversation) + \" \" + \" \".join(map(str, [max_conversation_id] * max_conversation))"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    id_convo = []\n    for i in range(n):\n        id_convo.append(int(input()))\n    convo = [0 for i in range(k)]\n    cur = 0\n    convo_pos = []\n    for i in range(n):\n        if id_convo[i]!= cur:\n            cur = id_convo[i]\n            convo_pos.append(i)\n            convo[convo_pos[len(convo_pos)-1]] = cur\n    for i in range(k):\n        if i in convo:\n            continue\n        else:\n            convo[i] = id_convo[convo_pos[i]]\n    return str(len(convo)) +'' +''.join(map(str, convo))\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friends = list(map(int, stdin.split()))\n    # In the first example the conversations will change in the following way:\n    # The last conversation disappears, all the conversations before the last one are shifted by one position to the right and the first conversation is inserted to the left.\n    # The second example the conversations will not change.\n    if n <= k:\n        while len(friends) > 0:\n            friends.pop()\n            friends.append(friends[-1])\n        return str(len(friends))\n    else:\n        while len(friends) > 0 and friends[-1] == max(friends):\n            friends.pop()\n            friends.insert(0, friends[0])\n        return str(len(friends))\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    conversations = []\n    for _ in range(n):\n        conversations.append(list(map(int, stdin.split())))\n    # print(conversations)\n\n    new_conversations = []\n    for i, conversation in enumerate(conversations):\n        # print(i, conversation)\n        # print(new_conversations)\n        if len(new_conversations) < k:\n            new_conversations.append(conversation)\n        else:\n            new_conversations.append(conversation[:k])\n\n    # print(new_conversations)\n    return str(len(new_conversations)) + '\\n' +''.join([str(i) for i in new_conversations])\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    list_of_friends_and_conversation_id = list(map(int, stdin.split()))\n    #print(list_of_friends_and_conversation_id)\n    #print(n, k)\n    #print(list_of_friends_and_conversation_id)\n    #print(n, k)\n\n    #d = collections.deque(list_of_friends_and_conversation_id)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d)\n    #print(d"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n    \n    # check if all messages are received\n    if sum(messages)!= n * k:\n        print(n, k)\n        return ''\n    \n    # check if there is no conversations\n    if k == 0:\n        return ''\n\n    # first sort by messages, to not change order of conversations\n    messages = sorted(messages)\n    \n    # check if last message does not appear in the screen\n    last_message_id = messages.pop()\n    if last_message_id in messages:\n        print(n, k)\n        return ''\n\n    # print(messages)\n    return''.join(map(str, messages[:k]))\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friend_ids = list(map(int, stdin.split()))\n    friend_ids.sort()\n    answer = 1\n    while n:\n        if len(friend_ids) < k:\n            return str(answer)\n        answer += 1\n        friend_ids.pop(0)\n        friend_ids.sort()\n\nsolution(input())\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    ids = list(map(int, lines[1].split()))\n\n    conversations = []\n    for i in range(n):\n        conversations.append([])\n    last_msg = 0\n    for i, id in enumerate(ids):\n        conversations[id - 1].append(i)\n    while len(conversations) > k:\n        last_msg += 1\n        to_remove = conversations.pop(0)\n        conversations.append(to_remove)\n\n    return str(last_msg) +'' +''.join(map(str, conversations))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n\n    removed = 0\n    new_conversations = []\n    while removed < k:\n        for i in range(len(messages)):\n            if i + 1 == len(messages):\n                break\n            if messages[i] == messages[i + 1]:\n                removed += 1\n            else:\n                new_conversations.append(messages[i])\n                break\n\n        messages = messages[1:] + [new_conversations.pop(0)]\n\n    return str(len(new_conversations)) + '\\n' +''.join(map(str, new_conversations))"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # We are not using `# from typing import List` because we are not expecting any `List` type in this `solution`\n    # It is only a place-holder for the test cases.\n    result = 0\n    # We are not using `# from typing import List` because we are not expecting any `List` type in this `solution`\n    # It is only a place-holder for the test cases.\n    cards = []\n    costs = []\n    dmgs = []\n    for i in range(n):\n        cards.append(stdin)\n        costs.append(int(stdin))\n        dmgs.append(int(stdin))\n    # We are not using `# from typing import List` because we are not expecting any `List` type in this `solution`\n    # It is only a place-holder for the test cases.\n    cards = sorted(cards, key=lambda x: x[1])\n    cards = sorted(cards, key=lambda x: x[0])\n    cards = sorted(cards, key=lambda x: x[0])\n    for i in range(n):\n        if (costs[i] + dmgs[i]) <= 3:\n            dmgs[i] = costs[i] * 2\n        else:\n            dmgs[i] = costs[i]\n    for i in range(n):\n        result = max(result, dmgs[i])\n    return result\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using stdin:\n        Sample Input:\n        5\n        3\n        1 6\n        1 7\n        1 5\n        2\n        1 4\n        1 3\n        3\n        1 10\n        3 5\n        2 3\n        3\n        1 15\n        2 4\n        1 10\n        1\n        1 100\n        \n        Sample Output:\n        263\n    \"\"\"\n    # n = 5\n    # for line in stdin.splitlines():\n    #     n = int(line)\n    #     break\n    \n    # for i in range(n):\n    #     line = next(stdin)\n    #     k = int(line.split()[0])\n    #     d = int(line.split()[1])\n    #     max_damage = 0\n    #     for j in range(k):\n    #         if max_damage < d:\n    #             max_damage = d\n    #     print(max_damage)\n    # return\n\n\n    # n = int(stdin.readline().strip())\n    # cards = {int(line.split()[0]): int(line.split()[1]) for line in stdin.readlines()}\n    # turn = 0\n    # damage = 0\n    # while turn < n:\n    #     damage += cards[max(cards, key=lambda x: cards[x])]\n    #     cards.pop(max(cards, key=lambda x: cards[x]))\n    #     turn += 1\n    # print(damage)\n    # return\n\n    n = int(stdin.readline().strip())\n    cards = {int(line.split()[0]): int(line.split()[1]) for line in stdin.readlines()}\n    turn = 0\n    while turn < n:\n        damage = 0\n        for i in range(min(3, len(cards))):\n            damage += cards[max(cards, key=lambda x: cards[x])]\n            cards.pop(max(cards, key=lambda x: cards[x]))\n        turn += 1\n    print(damage)\n    return\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    \n    c,d = 0,0\n    for i in range(n):\n        tmp = stdin.split(\"\\n\")[i+1].split()\n        if len(tmp) == 2:\n            c,d = int(tmp[0]),int(tmp[1])\n        else:\n            c,d = 0,0\n    \n    ans = c+d\n    \n    if n>=2:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=3:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=4:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=5:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=6:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=7:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=8:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=9:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=10:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=11:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=12:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=13:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=14:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=15:\n        for i in range(n):\n            tmp = stdin.split(\"\\n\")[i+1].split()\n            if len(tmp) == 2:\n                c,d = int(tmp[0]),int(tmp[1])\n            else:\n                c,d = 0,0\n            if c+d > ans:\n                ans = c+d\n    if n>=16:\n        for i in range(n):\n            tmp"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n = int(lines.pop(0))\n\n    cards = []\n    costs = []\n    damage = []\n    for i in range(n):\n        line = lines.pop(0).split()\n        cards.append(int(line[0]))\n        costs.append(int(line[1]))\n        damage.append(int(line[2]))\n\n    def play(cards, costs, damage):\n        cost = 0\n        max_damage = 0\n        for i in range(len(cards)):\n            for j in range(len(cards)):\n                if i!= j:\n                    if costs[j] >= costs[i] and damage[i] + damage[j] <= 3:\n                        damage[j] += damage[i]\n                        cost += costs[i]\n                        cards.remove(cards[j])\n                        cards.remove(cards[i])\n                        damage.remove(damage[j])\n                        damage.remove(damage[i])\n                        break\n        return cost, max_damage\n\n    max_damage = 0\n    while len(cards) > 0:\n        cost, max_damage = play(cards, costs, damage)\n        if cost > 3:\n            cards.append(costs.pop(0))\n            cards.append(costs.pop(0))\n            cards.append(costs.pop(0))\n            damage.append(damage.pop(0))\n            damage.append(damage.pop(0))\n            damage.append(damage.pop(0))\n\n    return str(max_damage)\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    input_data = stdin.split(\"\\n\")\n    maximum_damage = 0\n    number_of_cards_played = 0\n    for block in input_data[:n]:\n        cards_played = list(map(int, block.split()))\n        number_of_cards_played += len(cards_played)\n        cards_played.sort()\n        number_of_cards_played = number_of_cards_played + 1\n        for i in range(len(cards_played)-1):\n            current_damage = cards_played[i] + cards_played[i+1]\n            if current_damage > maximum_damage:\n                maximum_damage = current_damage\n    return str(maximum_damage)\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    turns = data[0]\n    data = data[1:]\n    dp = [[0] * (turns + 1) for _ in range(3)]\n    for i in range(turns):\n        cards = data[i * 2]\n        damage = data[i * 2 + 1]\n        dp[1][i + 1] = damage\n        dp[0][i + 1] = damage\n        for j in range(2, cards):\n            dp[0][i + 1] = max(dp[0][i + 1], dp[1][i + 1] + damage, dp[1][i + 1] + 2 * damage)\n            dp[1][i + 1] = max(dp[0][i + 1], dp[2][i + 1] + damage, dp[2][i + 1] + 2 * damage)\n            dp[2][i + 1] = max(dp[0][i + 1], dp[1][i + 1] + damage, dp[1][i + 1] + 2 * damage)\n        if i!= turns - 1:\n            dp[0][i + 1] = max(dp[0][i + 1], dp[0][i + 2] + 2 * damage)\n            dp[1][i + 1] = max(dp[0][i + 1], dp[1][i + 2] + 2 * damage)\n            dp[2][i + 1] = max(dp[0][i + 1], dp[1][i + 2] + 2 * damage)\n    return str(max(max(dp[0]), max(dp[1]), max(dp[2])))"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n <= 1:\n        return \"0\"\n    inp = stdin.split(\"\\n\")\n    out = \"0\"\n    for i in range(n):\n        out += '\\n' + str(play(inp[i].split()))\n    return out\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    maxDamage = 0\n    for turn in range(n):\n        cards = []\n        cardsSum = 0\n        for card in range(1, 4):\n            cardsSum += int(stdin.split()[turn * 2 + card][0])\n        if cardsSum > 3:\n            damage = cardsSum * 2\n        else:\n            damage = cardsSum\n        cardsSum = 0\n        for card in range(1, 4):\n            cardsSum += int(stdin.split()[turn * 2 + card][1])\n        if cardsSum > 3:\n            damage += cardsSum * 2\n        else:\n            damage += cardsSum\n        maxDamage = max(maxDamage, damage)\n    return str(maxDamage)\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    turns = stdin.split('\\n')\n    tours = []\n    for turn in turns:\n        tour = turn.split()\n        tours.append(tour)\n    tours = np.array(tours)\n    max_damage = 0\n    for tour in tours:\n        if tour[0] == \"2\":\n            tour[0] = tour[0] +'' + tour[1]\n            del tour[1]\n            max_damage += int(tour[0])\n        else:\n            max_damage += int(tour[1])\n    return str(max_damage)\n'''\n\nimport numpy as np\n\ndef"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    q = int(stdin.split()[1])\n\n    for _ in range(q):\n        l, r = map(int, stdin.split()[2:])\n\n        if stdin.split()[0] == '1':\n            s = s[:l - 1] + stdin.split()[3] + s[r:]\n        else:\n            s = s[:l] + stdin.split()[3] + s[r:]\n\n    return''.join(sorted(set(s)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    2\n    8\n    2 1 4\n    1 4 b\n    1 5 b\n    2 4 6\n    2 1 7\n    \n    Output:\n    3\n    1\n    2\n    \"\"\"\n    s = stdin.strip()\n    \n    # calculate q, the number of queries\n    q = int(stdin.strip().split(\"\\n\")[0])\n    \n    # iterate through q lines\n    for _ in range(q):\n        # split line into query and data\n        line = stdin.strip().split(\"\\n\")[1].split()\n        # determine type of query\n        if line[0] == \"1\":\n            # replace single letter\n            s = replace_char(s, int(line[1]), line[2])\n        elif line[0] == \"2\":\n            # count distinct letters\n            s = count_distinct_letters(s, int(line[1]), int(line[2]))\n    return s\n\n\ndef"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    cnt = 0\n\n    if len(string) <= 1:\n        return str(0)\n\n    q = int(input())\n    for i in range(q):\n        command, l, r = input().split()\n        if command == '1':\n            string = string[:int(l) - 1] + command + string[int(r):]\n        else:\n            cnt += len(set(string[int(l) - 1: int(r)]))\n    print(cnt)\n\nsolution(input())\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    total_count = 0\n    for i in range(1,len(input)):\n        if input[i][0] == '1':\n            start = int(input[i][1])\n            end = int(input[i][2])\n            if start == 1:\n                input[i] = input[i].replace(input[i][1], input[i][2])\n            else:\n                for j in range(start - 1, end):\n                    input[i] = input[i].replace(input[i][j], '')\n            input[i] = input[i].replace(' ', '')\n            count = input[i]\n            total_count += len(set(count))\n        else:\n            count = input[i]\n            count = count.replace(' ', '')\n            total_count += len(count)\n    return str(total_count)\n\nprint(solution(input))\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(stdin.split()[1])\n    p = stdin.split()[2]\n    sub = []\n    d = {}\n    if p == '1':\n        for i in range(q):\n            t = stdin.split()[i+2]\n            sub.append(t)\n        print(sub)\n        for x in sub:\n            if x in d:\n                d[x] += 1\n            else:\n                d[x] = 1\n        return len(d)\n    else:\n        l = int(p)\n        r = int(p)+1\n        print(s[l:r])\n        print(len(s[l:r]))\n        d = {}\n        for i in range(q):\n            print(stdin.split()[i+2])\n            t = s[int(stdin.split()[i+2])-1]\n            print(t)\n            if t in d:\n                d[t] += 1\n            else:\n                d[t] = 1\n        return len(d)\n\nsolution(input())"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(stdin.split()[1])\n    ret = ''\n    if q == 1:\n        ret = str(len(set(s)))\n    elif q == 2:\n        ret = str(s.count('a'))\n    return ret"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(input())\n    for i in range(q):\n        l, r = input().split()\n        if int(l) == 1:\n            s = s[:int(r)] + s[int(r):]\n        else:\n            s = s[int(l):int(r)]\n    return len(set(s))"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin\n    l = []\n    for _ in range(N):\n        l.append(stdin[stdin.index(' '):])\n    for j in range(len(l)):\n        if l[j][0] == l[j][-1]:\n            l[j] = l[j].replace(l[j][0], '', 1)\n    print(l)\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    print(l)\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\"y\")\n            break\n    for j in range(len(l)):\n        if l[j] == \"\":\n            print(\""
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(len(stdin)):\n        tmp = stdin[i]\n        tmp = tmp.replace(\" \", \"\")\n        tmp = tmp.replace(\"\\n\", \"\")\n        tmp = tmp.split(\"\\t\")\n        stdin[i] = tmp\n    \n    for i in range(len(stdin)):\n        if stdin[i][0] == \"154873296\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"386592714\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"729641835\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"863725149\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"975314628\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"412968357\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"631457982\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"598236471\":\n            print(stdin[i][1])\n        if stdin[i][0] == \"247189563\":\n            print(stdin[i][1])\nsolution(input())\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1')\n    '154873296'\n    >>> solution('5')\n    '24917316'\n    >>> solution('5')\n    '24917316'\n    >>> solution('5')\n    '24917316'\n    >>> solution('5')\n    '24917316'\n    '''\n    def check_sudoku(sudoku: List[List[int]]) -> bool:\n        rows = [[False] * 9 for _ in range(9)]\n        cols = [[False] * 9 for _ in range(9)]\n        blocks = [[False] * 9 for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j] == '.':\n                    continue\n                elif rows[i][int(sudoku[i][j]) - 1] or cols[j][int(sudoku[i][j]) - 1] or blocks[3 * (i // 3) + (j // 3)][int(sudoku[i][j]) - 1]:\n                    return False\n                rows[i][int(sudoku[i][j]) - 1] = True\n                cols[j][int(sudoku[i][j]) - 1] = True\n                blocks[3 * (i // 3) + (j // 3)][int(sudoku[i][j]) - 1] = True\n        return True\n    for _ in range(int(stdin.strip())):\n        sudoku = []\n        for _ in range(9):\n            sudoku.append(stdin.strip())\n        sudoku = [list(item) for item in sudoku]\n        if not check_sudoku(sudoku):\n            continue\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j]!= '.':\n                    sudoku[i][j] = str(int(sudoku[i][j]) + 1)\n        return '\\n'.join([''.join(item) for item in sudoku])"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    field = stdin.split()\n    field = list(map(int, field))\n    print(field)\n    for i in range(len(field)):\n        for j in range(len(field)):\n            for k in range(len(field)):\n                if k!= i and j!= i and k!= j:\n                    field[i] = field[i] % 9 + 1\n                    field[j] = field[j] % 9 + 1\n                    field[k] = field[k] % 9 + 1\n                    if field == field[i] + field[j] + field[k] - field[i] - field[j] - field[k]:\n                        print(field)\n                        return stdin.replace(str(field[i]), str(field[j])).replace(str(field[k]), str(field[i]))\n    return stdin\n\nsolution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\")\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    nums = {str(i): i for i in range(1, 10)}\n    arr = [['.'] * 9 for _ in range(9)]\n    for i, j, num in stdin.splitlines():\n        arr[int(i) - 1][int(j) - 1] = num\n    for arr_ in arr:\n        print(''.join(arr_))\n    return ''.join(str(i) for i in range(1, 10))"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.split()\n        answer = \"\"\n        for i in range(9):\n            for j in range(9):\n                if s[i] == str(j + 1) and s[j] == str(i + 1):\n                    s[i] = str(s[i])\n                    s[j] = str(s[j])\n                    if s[i] not in answer:\n                        answer = answer + s[i]\n                    if s[j] not in answer:\n                        answer = answer + s[j]\n                    if answer == str(i + 1) + str(j + 1):\n                        break\n                    if s[i] not in answer:\n                        answer = answer + s[i]\n                    if s[j] not in answer:\n                        answer = answer + s[j]\n                    break\n        print(answer)\n\n\n\nsolution(\"1\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\")\n\nsolution(\"2\\n158697267\\n644912346\\n948687792\\n916815426\\n897888826\\n733241423\\n876634223\\n846682819\\n948758884\")"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    ans = []\n    for i in range(N):\n        s = stdin.splitlines()[i+1]\n        ans.append([s[3*i+3], s[3*i+2], s[3*i+1], s[3*i]])\n    s = \"(\"+ans[0][0]+\",\"+ans[0][1]+\",\"+ans[0][2]+\",\"+ans[0][3]+\")\"\n    for i in range(1, N):\n        s = s+\"\\n\"+\"((\"+ans[i][0]+\",\"+ans[i][1]+\",\"+ans[i][2]+\",\"+ans[i][3]+\")\"\n    return s\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    board = [[int(num) for num in line.split()] for line in stdin.split('\\n')[1:]]\n    ans = ''\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]!= 0:\n                if j % 3 == 2:\n                    if j == 4 or j == 5:\n                        continue\n                    if board[i][j]!= board[i][j + 1]:\n                        board[i][j] = board[i][j] + 1\n                    if board[i][j]!= board[i][j - 1]:\n                        board[i][j] = board[i][j] + 1\n                elif j % 3 == 0:\n                    if j == 1 or j == 2:\n                        continue\n                    if board[i][j]!= board[i][j + 3]:\n                        board[i][j] = board[i][j] + 1\n                    if board[i][j]!= board[i][j - 3]:\n                        board[i][j] = board[i][j] + 1\n                elif j % 3 == 1:\n                    if j == 1 or j == 2 or j == 3:\n                        continue\n                    if board[i][j]!= board[i][j + 6]:\n                        board[i][j] = board[i][j] + 1\n                    if board[i][j]!= board[i][j - 6]:\n                        board[i][j] = board[i][j] + 1\n    for i in range(n):\n        ans +=''.join([str(num) for num in board[i]]) + '\\n'\n    return ans\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    output = []\n    for i in range(len(stdin)):\n        curr_field = stdin[i]\n        curr_field = curr_field.replace(' ', '')\n        curr_field = list(map(int, curr_field))\n        n = len(curr_field)\n        output.append(curr_field)\n    output = list(map(list, zip(*output)))\n    for i in range(len(output)):\n        for j in range(len(output)):\n            if output[i][j]!= 0:\n                break\n            else:\n                output[i][j] = -1\n    output = list(map(list, zip(*output)))\n    output = list(map(str, output))\n    output = '\\n'.join(output)\n    return output\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.replace(\"\\n\", \"\")\n        numbers = list(map(int, s.split()))\n        numbers = [[numbers[3 * i + j] for j in range(3)] for i in range(3)]\n        numbers = [[numbers[i][j] for i in range(3)] for j in range(3)]\n        numbers = [[numbers[i][j] for i in range(3)] for j in range(3)]\n        for i in range(3):\n            for j in range(3):\n                numbers[i][j] = numbers[i][j] % 10\n        numbers = [[numbers[i][j] for i in range(3)] for j in range(3)]\n        s = \"\"\n        for i in range(3):\n            for j in range(3):\n                s += str(numbers[i][j])\n            s += \"\\n\"\n        print(s)\n    return s"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = (int(x) for x in stdin.split())\n    officers = [(i, 0) for i in range(1, n + 1)]\n    indirect = {1: {1, 2, 5, 6, 8, 7, 9, 4}}\n    for u, k in (int(x) for x in stdin.split()):\n        officers[u - 1] = (k, u)\n    officers.sort()\n    ans = []\n    for u, k in stdin.split():\n        ans.append(indirect.get(k, {}).get(u, -1))\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = [(1, 1)]\n    res = []\n    for i in range(2, n + 1):\n        a.append((i, i))\n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        a.append((k, u))\n    a.sort()\n    cur = 1\n    for i in range(q):\n        if a[i][1] == cur:\n            cur += 1\n            res.append(a[i][1])\n        else:\n            break\n    return''.join(map(str, res))\n\nprint(solution(input()))"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    se_map = {i: [] for i in range(1, n+1)}\n    for _ in range(n-1):\n        u, v = map(int, stdin.split())\n        se_map[u].append(v)\n        se_map[v].append(u)\n    # print(se_map)\n    res = []\n    for i in range(q):\n        x, y = map(int, stdin.split())\n        res.append(solve(x, y, se_map))\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = (int(x) for x in stdin.split())\n    indirect_su = {1: 3, 2: 1, 3: 2, 4: 4, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 11, 13: 12, 14: 13, 15: 14, 16: 15, 17: 16, 18: 17, 19: 18, 20: 19, 21: 20, 22: 21, 23: 22, 24: 23, 25: 24, 26: 25, 27: 26, 28: 27, 29: 28, 30: 29, 31: 30, 32: 31, 33: 32, 34: 33, 35: 34, 36: 35, 37: 36, 38: 37, 39: 38, 40: 39, 41: 40, 42: 41, 43: 42, 44: 43, 45: 44, 46: 45, 47: 46, 48: 47, 49: 48, 50: 49, 51: 50, 52: 51, 53: 52, 54: 53, 55: 54, 56: 55, 57: 56, 58: 57, 59: 58, 60: 59, 61: 60, 62: 61, 63: 62, 64: 63, 65: 64, 66: 65, 67: 66, 68: 67, 69: 68, 70: 69, 71: 70, 72: 71, 73: 72, 74: 73, 75: 74, 76: 75, 77: 76, 78: 77, 79: 78, 80: 79, 81: 80, 82: 81, 83: 82, 84: 83, 85: 84, 86: 85, 87: 86, 88: 87, 89: 88, 90: 89, 91: 90, 92: 91, 93: 92, 94: 93, 95: 94, 96: 95, 97: 96, 98: 97, 99: 98, 100: 99, 101: 100, 102: 101, 103: 102, 104: 103, 105: 104, 106: 105, 107: 106, 108: 107, 109: 108, 110: 109, 111: 110, 112: 111, 113: 112, 114: 113, 115: 114, 116: 115, 117: 116, 118: 117, 119: 118, 120: 119, 121: 120, 122: 121, 123: 122, 124: 123, 125: 124, 126: 125, 127: 126, 128: 127, 129: 128, 130: 129, 131: 130, 132: 131, 133: 132, 134: 133, 135: 134, 136: 135, 137: 136, 138: 137, 139: 138, 140: 139, 141: 140, 142: 141, 143: 142, 144: 143, 145: 144, 146: 145, 147: 146, 148: 147, 149: 148, 150: 149, 151: 150, 152: 151, 153: 152, 154: 153, 155: 154, 156: 155, 157: 156, 158: 157, 159: 158, 160: 159, 161: 160, 162: 161, 163: 162, 164: 163, 165: 164, 166: 165, 167: 166, 168: 167, 169: 168, 170: 169, 171: 170, 172: 171, 173: 172, 174: 173, 175: 174, 176: 175, 177: 176, 178: 177, 179: 178, 180: 179, 181: 180, 182: 181, 183: 182, 184: 183, 185: 184, 186: 185, 187: 186, 188: 187, 189: 188, 190: 189, 191: 190, 192: 191, 193: 192, 194: 193, 195: 194, 196: 195, 197: 196, 198: 197, 199: 198, 200: 199, 201: 200, 202: 201, 203: 202, 204: 203, 205: 204, 206: 205, 207: 206, 208: 207, 209: 208, 210: 209, 211: 210, 212: 211, 213: 212,"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    tree = {i: [] for i in range(1, n + 1)}\n    direct_superiors = {i: set() for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        direct_superiors[u].add(v)\n        direct_superiors[v].add(u)\n        tree[u].append(v)\n        tree[v].append(u)\n    def dfs(node, path, visited):\n        if node in visited:\n            return 0\n        visited.add(node)\n        for nei in tree[node]:\n            if nei not in path:\n                path.append(nei)\n                for nei in tree[nei]:\n                    dfs(nei, path, visited)\n        return len(path)\n    \n    def solve(u, k):\n        path = []\n        visited = set()\n        dfs(u, path, visited)\n        cnt = 0\n        for i in range(1, k + 1):\n            if i not in visited:\n                cnt += 1\n        return cnt\n\n    def main():\n        for i in range(q):\n            u, k = map(int, stdin.split())\n            if solve(u, k) < k:\n                print(-1)\n            else:\n                print(solve(u, k))\n    main()\n    return \"\""
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    graph = defaultdict(list)\n    for u, s in map(int, stdin.split()):\n        graph[u].append(s)\n    for u, d in map(int, stdin.split()):\n        if d in graph[u]:\n            graph[u].remove(d)\n    result = []\n    for i in range(q):\n        u, k = map(int, stdin.split())\n        for u, v in enumerate(graph[k]):\n            result.append(v)\n            if u == 0:\n                break\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = (int(i) for i in stdin.split())\n    # a = list(range(1, n))\n    # b = []\n    # for i in a:\n    #     b.append(i)\n    a = list(range(1, n))\n    # print(a)\n    # print(b)\n    for i in range(q):\n        # print(i)\n        # print(a)\n        # print(b)\n        u, k = map(int, stdin.split())\n        # print(u)\n        # print(k)\n        u = a.index(u)\n        k = a.index(k)\n        # print(u)\n        # print(k)\n        if u > k:\n            u, k = k, u\n        # print(u)\n        # print(k)\n        # print(u < k)\n        # print(k - u)\n        # print(k)\n        # print(u)\n        # print(u - k)\n        # print(k - u)\n        # print(min(u, k))\n        if u < k:\n            tmp = k\n            while u > tmp:\n                tmp = tmp - 1\n            a = a[:u] + a[tmp:]\n            u = u - tmp\n        else:\n            tmp = u\n            while k > tmp:\n                tmp = tmp + 1\n            a = a[:tmp] + a[k:]\n            k = k - tmp\n        # print(a)\n        # print(b)\n        # a = [i for i in range(1, n)]\n        # print(a)\n        # print(b)\n    # print(a)\n    # print(b)\n    # print(len(a))\n    # print(len(b))\n    return str(a[0]) + \"\\n\" + str(len(a)) + \"\\n\" + \" \".join(str(i) for i in a) + \"\\n\" + str(b) + \"\\n\" + str(len(b)) + \"\\n\" + \" \".join(str(i) for i in b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    p = list(map(int, input().split()))\n    ans = [\"-1\" for _ in range(q)]\n    taken = set()\n    stack = [(1, 0)]\n    for _ in range(q):\n        u, k = map(int, input().split())\n        while stack:\n            d, u = stack.pop()\n            if u in taken:\n                ans[k - 1] = str(u)\n                break\n            if p[u - 1] == d:\n                stack.append((d, k))\n                stack.append((u, k + 1))\n                break\n            if u!= 1:\n                stack.append((u, k + 1))\n        taken.add(u)\n    return \" \".join(ans)\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    q = input_data[1]\n\n    officers_parent = {}\n    num_of_officers = n - 1\n\n    for i in range(1, n):\n        officers_parent[i] = i\n\n    for i in range(q):\n        u, k = map(int, input_data[2 + i].split())\n        num_of_officers -= 1\n        officers_parent[u] = k\n\n    visited = set()\n    res = []\n\n    def dfs(u):\n        nonlocal res, visited, num_of_officers\n        if u in visited:\n            return\n        visited.add(u)\n        res.append(u)\n\n        for v in officers_parent[u]:\n            dfs(v)\n\n    dfs(1)\n\n    return''.join(map(str, res[:num_of_officers]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = (int(_) for _ in stdin.split())\n    order = stdin[0].split()\n    order = [[int(_) for _ in range(int(_))] for _ in order]\n    for i in range(1, len(order)):\n        order[i] = order[i][::-1]\n    order = order + [[1] for _ in range(n - 1)]\n    order = [[_] for _ in order[n - 1]]\n    for _ in range(q):\n        u, k = (int(_) for _ in stdin.split())\n        if k < len(order[u - 1]):\n            order[u - 1].pop(k - 1)\n        else:\n            order[u - 1].pop(0)\n    for i in range(1, n):\n        if len(order[i]) > 0:\n            return str(i) +'' + str(order[i][0])\n    return str(-1)\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.strip().split())\n        if a == 0 or b == 0 or c == 0:\n            print(\"YES\")\n        elif a + a == b + b and b + b == c + c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b, c, n = stdin.split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        n = int(n)\n        if (a + b + c) % n!= 0:\n            print('NO')\n        else:\n            if a == n:\n                print('YES')\n            elif b == n:\n                print('YES')\n            elif c == n:\n                print('YES')\n            else:\n                print('NO')\n    return 'OK'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = stdin.split()\n    if int(a) + int(a) == int(b) + int(b) + int(c):\n        if int(a) + int(b) + int(c) == int(n):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = stdin.split()\n    a, b, c, n = map(int, (s1, s2, s3, s4))\n    al, ar, ac = a // 2, b // 2, c // 2\n    br, bc, bc = a + al, b + ar, c + ac\n    if al == br and ar == bc and ac == bc:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, a, b, c = list(map(int, stdin.split()[1:]))\n        if (a == b == c) or (a + a == b + b == c + c) or (a + a == b + b == c + c):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    # return \"YES\" if Alice = Bob and Barbara = Cerene\n    # return \"NO\" if Alice = Barbara and Cerene = Alice\n    # return \"YES\" if Alice = Cerene and Barbara = Bob and Alice = Bob\n    # return \"NO\" if Alice = Cerene and Barbara = Bob and Alice = Bob\n    a, b, c, n = list(map(int, stdin.split()))\n    if (a+b+c) == n:\n        return \"YES\"\n    elif (a+b+c) < n:\n        return \"NO\"\n    elif (a+b+c) > n:\n        return \"NO\"\n    return \"YES\"\n\n\nsolution(\"5 3 2 8\")\nsolution(\"10 20 15 14\")\nsolution(\"101 101 101 3\")\nsolution(\"3 2 1 100000000\")\n\nsolution(\"3 4 1 2\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.split()[0])):\n        a, b, c, n = list(map(int, stdin.split()[1:]))\n        if a + b == c and a == n:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, b, c, n):\n        return (a+a) == (b+b) == (c+c)\n\n    def check1(a, b, c, n):\n        return a == (b+b) and b == (c+c)\n\n    def check2(a, b, c, n):\n        return a == (c+c)\n\n    for i in range(int(stdin)):\n        a, b, c, n = map(int, stdin.split())\n        if check1(a, b, c, n):\n            print(\"YES\")\n        elif check2(a, b, c, n):\n            print(\"YES\")\n        elif check(a, b, c, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 3 2 8\n   ... 100 101 102 105\n   ... 3 2 1 100000000\n   ... 10 20 15 14\n   ... 101 101 101 3\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 1 2 3\n   ... 1 1 1 1\n   ... 1 1 1 1\n   ... 1 1 1 1\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 1 2 3 4\n   ... 1 1 1 1\n   ... 1 1 1 1\n   ... 1 1 1 1\n   ... ''')\n    'NO'\n    \"\"\"\n    t = int(stdin.strip().split()[0])\n    for _ in range(t):\n        a, b, c, n = list(map(int, stdin.strip().split()[1:]))\n        if a + b + c == n and a == a or b == b and c == c or a == b == c:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_coins = int(stdin)\n    a = 0\n    b = 0\n    c = 0\n    n = 0\n    for i in range(num_of_coins):\n        A, B, C, N = list(map(int, stdin.split()))\n        a += A\n        b += B\n        c += C\n        n += N\n\n    if a == b and b == c and c == n:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, m):\n        x_p = x[i:] + x[:i]\n        for j in range(1, n):\n            ans += abs(x[j] - x_p[j])\n    return str(ans)"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    x = list(map(int, stdin.split()))\n    ans = 0\n    for p in itertools.permutations(x, n):\n        ans += sum(abs(x[i] - x[i+1]) for i in range(n - 1))\n    return str(ans)\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, m):\n        res += abs(x[i] - x[i-1])\n    return str(res)\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    p = [[] for _ in range(x[0])]\n    for i in range(1, x[1] + 1):\n        p[i - 1] = list(map(lambda x: abs(x - i), p[i - 1]))\n    return str(sum(p[i - 1]))"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    p1 = list(range(1, m + 1))\n    p2 = list(range(m, 0, -1))\n    p3 = list(range(2, m + 1))\n    p4 = list(range(m, 0, -1))\n    p5 = list(range(3, m + 1))\n\n    return str(sum([abs(i - j) for i, j in zip(p1, p2)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p1, p3)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p1, p4)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p2, p1)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p2, p3)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p2, p4)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p3, p1)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p3, p2)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p3, p4)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p4, p1)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p4, p2)])) + \\\n           str(sum([abs(i - j) for i, j in zip(p4, p3)]))"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join(map(str, *map(int, stdin.split())))\n    \nprint(solution(input()))"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    return \" \".join(str(sum(abs(i - j) for i, j in zip(x, x[1:]))) for i in x)\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    # print(n, m, x)\n    perm = []\n    for i in range(1, n+1):\n        perm.append(i)\n    # print(perm)\n    for i in range(1, n):\n        for j in range(i, 0, -1):\n            if j >= i:\n                break\n            pos1 = perm.index(x[j-1])\n            pos2 = perm.index(x[j])\n            # print(i, j, x[j-1], x[j], pos1, pos2)\n            if abs(pos1 - pos2) > abs(pos1 - pos2 + 1):\n                break\n            else:\n                perm[pos1], perm[pos2] = perm[pos2], perm[pos1]\n    # print(perm)\n    result = []\n    for i in range(1, n+1):\n        result.append(str(perm.index(i) + 1))\n    # print(result)\n    return \" \".join(result)\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return \" \".join(map(str, (sorted(map(int, stdin.split())))))\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    def p(n):\n        p = []\n        for i in range(1, n + 1):\n            p.append(i)\n        return p\n    res = 0\n    for i in range(1, n + 1):\n        p1 = p(n)\n        p2 = p(n)\n        p1 = p(n)\n        for j in range(1, m):\n            p2.remove(x[j - 1])\n            p1.remove(x[j - 1])\n        res += abs(p1[i - 1] - p2[i - 1])\n    return str(res)\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = [x.split() for x in stdin.split(\"\\n\")[:-1]]\n    for line in lines:\n        n = int(line[0])\n        m = int(line[1])\n        tree = {}\n        for i in range(n - 1):\n            u, v = list(map(int, line[2 * i + 1].split(\",\")))\n            tree[u] = v\n            tree[v] = u\n        queue = []\n        visited = set()\n        for i in range(m):\n            k = int(line[2 * i + 2])\n            for j in range(k):\n                queue.append(int(line[2 * i + 1 + j]))\n        while queue:\n            u = queue.pop(0)\n            visited.add(u)\n            for v in tree:\n                if v not in visited:\n                    if u in tree:\n                        if tree[u] == tree[v]:\n                            visited.add(v)\n                            break\n                    else:\n                        visited.add(v)\n                        break\n        print(\"YES\" if len(visited) == n else \"NO\")\n    return stdin\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(n)}\n    for i in range(1, n):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(m):\n        query = stdin.split()\n        root = 1\n        for j in range(1, len(query)):\n            root = graph[root].index(int(query[j]))\n        if root == 1:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(x) for x in stdin.split()] for _ in range(n - 1)]\n    queries = [[int(x) for x in stdin.split()] for _ in range(m)]\n    res = []\n    for i in queries:\n        # find all connected components\n        components = []\n        for e in edges:\n            u, v = e\n            if u == i[0] or v == i[0]:\n                if u!= i[0]:\n                    components.append(u)\n                if v!= i[0]:\n                    components.append(v)\n        # if this is a new component, we are in a new path\n        if len(components) == len(set(components)):\n            # check if vertices of this path are \"in\" the query\n            count = 0\n            for v in components:\n                for q in i:\n                    if v == q:\n                        count += 1\n            if count == len(i):\n                res.append('YES')\n            else:\n                res.append('NO')\n        else:\n            res.append('NO')\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(n - 1):\n        edges.append(tuple(map(int, stdin.split())))\n\n    queries = []\n    for _ in range(m):\n        queries.append(tuple(map(int, stdin.split())))\n\n    for i in range(len(queries)):\n        has_path = False\n        current_node = 1\n        for j in range(queries[i][0]):\n            for v in edges[current_node - 1]:\n                if v == queries[i][j + 1]:\n                    has_path = True\n                    current_node = v\n                    break\n            if has_path:\n                break\n        print('YES' if has_path else 'NO')\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        u, v = u - 1, v - 1\n        g[u].append(v)\n        g[v].append(u)\n    for _ in range(m):\n        k, *x = map(int, stdin.split())\n        x = x[0] - 1\n        for i in g[x]:\n            if i!= k:\n                print(\"NO\")\n                return\n        print(\"YES\")\n    return\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for u, v in (map(int, input().split()) for _ in range(n - 1)):\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    for _ in range(m):\n        u, k = map(int, input().split())\n        for v in graph[u - 1]:\n            if v + k not in graph[v]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    tree = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    for i in range(m):\n        k = int(input())\n        for j in range(k):\n            l = int(input())\n            if l in tree[1]:\n                print(\"YES\")\n                break\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = (int(x) for x in stdin[0].split(\" \"))\n    edges = []\n    for i in range(1, n + 1):\n        edges.append(tuple(map(int, stdin[i].split(\" \"))))\n    edges = dict(edges)\n\n    for _ in range(m):\n        v = int(stdin[len(stdin) - 1].split(\" \")[0])\n        k = int(stdin[len(stdin) - 1].split(\" \")[1])\n        print(\"YES\" if _find(edges, v, k) else \"NO\")\n\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tree = list(map(int, stdin.split()))\n    # --\n    def test_path(u, v):\n        if tree[u] == tree[v]:\n            return True\n        return False\n    # --\n    def test_paths(v):\n        # --\n        m = 0\n        visited = set()\n        q = deque()\n        q.append(v)\n        visited.add(v)\n        while q:\n            u = q.popleft()\n            m += 1\n            for i in range(n):\n                if tree[u] == tree[i] and i not in visited:\n                    q.append(i)\n                    visited.add(i)\n        return m\n    # --\n    res = ''\n    for q in range(m):\n        # --\n        k = int(stdin.split()[q + 1])\n        # --\n        u = int(stdin.split()[q + 2])\n        v = int(stdin.split()[q + 3])\n        # --\n        v_u_path = test_path(u, v)\n        u_v_path = test_path(v, u)\n        # --\n        if v_u_path:\n            res += 'YES\\n'\n        elif k == 1 and u_v_path:\n            res += 'YES\\n'\n        else:\n            res += 'NO\\n'\n    return res\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    num = 0\n    roads = []\n    for i in range(n):\n        roads.append([i+1, i+1])\n    for i in range(n):\n        for j in range(i+1, n):\n            if roads[i][0] == roads[j][1]:\n                return \"NO\"\n            if roads[i][1] == roads[j][0]:\n                return \"NO\"\n            if roads[i][1] in roads[j] or roads[j][1] in roads[i]:\n                return \"NO\"\n    if num > 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    if len(a) < n - 1:\n        print(\"NO\")\n        return \"NO\"\n    road = [[None] * n for i in range(n)]\n    for i in range(n):\n        road[i][i] = -1\n    for i in range(n):\n        road[a[i] - 1][i] = i + 1\n        road[i][a[i] - 1] = i + 1\n    visited = set()\n    for i in range(n):\n        if road[i][i]!= None:\n            visited.add(i + 1)\n    print(\"YES\")\n    for i in range(n - 1):\n        if road[i][i]!= None:\n            if road[i][i] + 1 in visited:\n                print(\"NO\")\n                return \"NO\"\n            else:\n                visited.add(road[i][i] + 1)\n    print(road)\n    for i in range(n - 1):\n        if road[i][i]!= None:\n            if road[i][i] + 1 in visited:\n                visited.add(road[i + 1][i])\n            if road[i][i] + 1 in visited:\n                visited.add(road[i][i] + 1)\n            if road[i][i] + 1 in visited:\n                visited.add(road[i][i] + 1)\n    for i in range(n - 1):\n        if road[i][i]!= None:\n            if road[i][i] + 1 in visited:\n                visited.add(road[i + 1][i])\n            if road[i][i] + 1 in visited:\n                visited.add(road[i][i] + 1)\n            if road[i][i] + 1 in visited:\n                visited.add(road[i][i] + 1)\n    print(visited)\n    return \"YES\""
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    testcases = []\n    for _ in range(n):\n        testcases.append(stdin)\n    for case in testcases:\n        res = solve(case)\n        print(res)\n    return ''\n\ndef"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1]))\n    G = []\n    for i in range(1, n + 1):\n        if c[i - 1] > 0:\n            G.append([i, c[i - 1]])\n    \n    G = [[i, j] for i, j in G if i < j]\n    if not G:\n        return 'YES'\n\n    ans = 0\n    for i in range(len(G)):\n        for j in range(i + 1, len(G)):\n            if G[i][1]!= G[j][1]:\n                ans += 1\n                \n    return 'NO' if ans > len(G) else 'YES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_road(road):\n        i, j = road\n        if i > j:\n            return False\n        return a[i]!= a[j]\n\n    def connect_districts(road):\n        i, j = road\n        a[i], a[j] = a[j], a[i]\n        if i in graph[j]:\n            graph[j].remove(i)\n            graph[i].append(j)\n        else:\n            graph[i].append(j)\n\n    def is_reachable(road):\n        i, j = road\n        if a[i]!= a[j]:\n            return False\n        if i == j:\n            return True\n        return any(is_reachable((i, p)) for p in graph[j])\n\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        a = list(map(int, stdin().split()))\n        graph = [[] for _ in range(n)]\n        roads = []\n        for i in range(0, n, 2):\n            roads.append((i, i + 1))\n        roads += [(i + 1, i) for i in range(1, n, 2)]\n        for road in roads:\n            connect_districts(road)\n        for road in roads:\n            if not is_valid_road(road):\n                return \"NO\"\n            if not is_reachable(road):\n                return \"NO\"\n        print(\"YES\")\n        for road in roads:\n            print(*road)\n    return \"YES\"\n\n\n----\nInput\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\nOutput\nYES\n1 3\n3 5\n5 4\n1 2\nNO\nYES\n1 2\n2 3\n3 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1 2\n1 3\n1 4\nYES\n1"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = [\"NO\", ] * (int(stdin.strip()) + 1)\n    answer[int(stdin.strip())] = \"YES\"\n    return \"\\n\".join(answer)\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    t = int(stdin.pop(0))\n\n    for _ in range(t):\n        n = int(stdin.pop(0))\n        a = list(map(int, stdin.pop(0).split()))\n\n        r = []\n\n        for i in range(1, n):\n            if a[i]!= a[0]:\n                r.append((a[0], i))\n\n            if a[0] == a[i]:\n                return \"NO\"\n\n        if len(r) == 0:\n            return \"YES\"\n\n        for i in range(len(r) - 1):\n            if r[i][1] == r[i + 1][0]:\n                return \"NO\"\n\n        print(\"YES\", end=\"\")\n        for i in range(len(r)):\n            print(\" \" + str(r[i][1]) + \" \" + str(r[i][0]), end=\"\")\n        print(\"\")\n\n    return \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 5\n   ... 1 2 2 1 3\n   ... 3\n   ... 1 1 1\n   ... 4\n   ... 1 2 3 4\n   ... ''')\n    YES\n    1 3\n    3 5\n    5 4\n    1 2\n    NO\n    YES\n    1 2\n    2 3\n    3 4\n    YES\n    1 2\n    1 3\n    1 4\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n < 3 or (n - 1) * (n - 1) > n * n:\n        return 'NO\\n'\n    n = n - 1\n    if max(a) > n:\n        return 'NO\\n'\n    roads = []\n    intermediate = n - 1\n    for i in range(n):\n        roads.append((i, a[i]))\n    roads.sort(key=lambda x: x[1])\n    connected = []\n    for i in range(n):\n        connected.append(i)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if roads[i][1] == roads[j][1]:\n                return 'NO\\n'\n            if (i, j) in connected:\n                return 'NO\\n'\n            if (i + 1, j - 1) in connected:\n                return 'NO\\n'\n            connected.append((i, j))\n            connected.append((j, i))\n    for i in range(n - 1):\n        if roads[i][1] == roads[i + 1][1]:\n            return 'NO\\n'\n    return 'YES\\n' +''.join(map(str, roads))\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    for _ in range(t):\n        n = int(stdin.splitlines()[1])\n        data = stdin.splitlines()[2:]\n        a = list(map(int, stdin.splitlines()[2:]))\n        ans = \"YES\"\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] == a[j] and (i, j) not in [(1, 2), (2, 1)]:\n                    ans = \"NO\"\n                    break\n        print(ans)\n    return\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    districts = []\n    for i in range(n):\n        districts.append(int(stdin.split()[2 * i + 1]))\n        districts.append(int(stdin.split()[2 * i + 2]))\n    res = \"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if districts[i] == districts[j] or \\\n                    districts[i] - 1 == districts[j] or \\\n                    districts[i] + 1 == districts[j]:\n                res += \"YES\\n\"\n            else:\n                res += \"NO\\n\"\n    return res"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return \"\".join(sorted(stdin))"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = list(stdin)\n    t = sorted(s)\n    j = 0\n    while j < k:\n        if j == k - 1:\n            s[j] = t[j]\n        else:\n            if s[j]!= t[j] and s[j]!= t[j + 1]:\n                s[j] = t[j]\n        j += 1\n    return ''.join(s)\n    \n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1:\n        return stdin\n\n    ans = '1'\n    i = 1\n    while i <= k:\n        if i < n:\n            ans = ans[:i] + ans[i:]\n        if not ans:\n            break\n\n        ans = ans[::-1]\n        for j in range(i, n):\n            ans = ans[:j] + '1' + ans[j:]\n\n        i += 1\n    return ans[::-1]\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace('0', '1').replace('1', '0')\n    res = []\n    def swap(s, i, j):\n        s[i], s[j] = s[j], s[i]\n    while k > 0:\n        idx = -1\n        for i in range(n):\n            if s[i]!= s[i - 1]:\n                idx = i\n                break\n        if idx == -1:\n            break\n        swap(s, idx, idx - 1)\n        for i in range(idx - 1, -1, -1):\n            if s[i]!= s[i + 1]:\n                swap(s, i, i + 1)\n                break\n        k -= 1\n    return s\n\n\n\n---or---\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(stdin)\n    x.sort()\n    ans = ''\n    for i in range(n):\n        if x[i] == x[i+1]:\n            continue\n        if x[i] < x[i+1]:\n            ans += '0'\n        else:\n            ans += '1'\n    return ans\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin)\n    ans = \"\"\n    i = 0\n    j = 0\n    for _ in range(k):\n        if s[i] == s[j]:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j += 1\n        else:\n            ans += s[i]\n            i += 1\n    if i == j:\n        ans += s[i]\n    return \"\".join(ans)\n\n\nfor _ in range(int(input())):\n    print(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = stdin.strip()\n    if k == n:\n        return a\n    else:\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if a[i] > a[j]:\n                    a = a[:i] + a[i:j][::-1] + a[j:]\n                    break\n        return a[:n]\n\n\n\nfor i in range(int(input())):\n    print(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    k, n = int(inputs[0]), int(inputs[1])\n    s = str(inputs[2])\n    moves = k + n - 1\n    if n < 2:\n        return s\n    for i in range(0, n, 2):\n        if s[i]!= s[i + 1]:\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n            moves -= 2\n    return s + s[:n - moves] if moves > 0 else s[:n]\n\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\n\ns = input()\ns = list(s)"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n\n    bad = [0] * n\n\n    for i in range(n):\n        bad[i] = max(0, min(n - 1, r_i) - max(0, l_i))\n        l_i = min(l_i, r_i)\n        r_i = max(r_i, l_i)\n\n    if k == 1:\n        return \"0\"\n\n    bad = sorted(bad)\n\n    for i in range(1, k):\n        bad[i] = min(bad[i], bad[i - 1])\n\n    return str(len(bad)) + \" \" + \" \".join([str(i) for i in bad])\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n    segments.sort()\n    bad_points = 0\n    counter = 0\n    for i in range(n):\n        start = segments[i][0]\n        end = segments[i][1]\n        j = i + 1\n        while j < n and segments[j][0] <= end:\n            bad_points += 1\n            j += 1\n        if bad_points > k:\n            counter += 1\n            bad_points = 0\n    return str(counter)\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"0\"\n    if k == 0:\n        return \"1\"\n\n    distinct_points = set()\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        distinct_points.add(l)\n        distinct_points.add(r)\n\n    points_covered = set()\n    points_covered.add(0)\n    i = 0\n    while len(points_covered)!= n:\n        i += 1\n        points_covered.clear()\n        for p in distinct_points:\n            if p - i > i and p - i > 0:\n                points_covered.add(p - i)\n            if i - p > i and i - p > 0:\n                points_covered.add(i - p)\n        distinct_points -= points_covered\n\n    return str(len(distinct_points))\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = stdin.splitlines()\n    # print(n, k)\n    m = 0\n    p = []\n    for i in range(len(s)):\n        l = int(s[i].split()[0])\n        r = int(s[i].split()[1])\n        if l <= 0 or r <= 0:\n            continue\n        if max(l, r) > 1000000:\n            continue\n        l, r = int(min(l, r)), int(max(l, r))\n        # print(l, r)\n        if l % 2 == 0:\n            l += 1\n        if r % 2 == 0:\n            r -= 1\n        if m < r-l:\n            m = r-l\n            p = []\n            p.append(i+1)\n        elif r-l == m:\n            p.append(i+1)\n    for i in range(len(p)-1):\n        print(p[i], end=' ')\n    print(p[-1])\n\n    return m\n\nsolution('''\n1 2 3 4 5 6\n5 3 2 1 6\n3 6 5 1 2\n3 4 1 1 2\n5 4 5 5 2\n5 2 4 3 1\n3 7 5 1 4\n''')\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    segs = sorted([[int(i) for i in stdin.split()] for _ in range(N)], key=lambda x: x[0])\n    k = 0\n    j = 0\n    ranges = []\n    for i in range(N):\n        while j < N and segs[j][0] <= segs[i][1]:\n            j += 1\n        if j >= N:\n            break\n        while k < N and segs[i][0] <= segs[k][1]:\n            k += 1\n        ranges.append(segs[i][1] - segs[i][0])\n    ranges = sorted(ranges, key=lambda x: x % K)\n    if not ranges:\n        return str(0)\n    k = 0\n    ans = 0\n    for i in range(N):\n        while j < N and segs[j][0] <= segs[i][1]:\n            j += 1\n        if j >= N:\n            break\n        while k < N and segs[i][0] <= segs[k][1]:\n            k += 1\n        if k >= N:\n            break\n        ans += min(ranges[-1], segs[i][1] - segs[i][0])\n    return str(ans)\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    segments = list(map(list, stdin.splitlines()))\n    sorted_segments = sorted(segments, key=lambda x: (x[0], x[1]))\n    #print(sorted_segments)\n\n    unvisited_segments = []\n    for segment in sorted_segments:\n        #print(segment)\n        if segment[0] > segment[1]:\n            unvisited_segments.append(segment)\n            continue\n        if len(unvisited_segments) >= k:\n            break\n        else:\n            for unvisited_segment in unvisited_segments:\n                if unvisited_segment[1] < segment[0]:\n                    #print(unvisited_segment[0], segment[0])\n                    unvisited_segments.remove(unvisited_segment)\n                    unvisited_segments.append(segment)\n                    break\n                else:\n                    if unvisited_segment[1] > segment[1]:\n                        unvisited_segments.append(segment)\n                        break\n\n    return len(unvisited_segments)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    points = [(i, i) for i in range(1, n+1)]\n    points = sorted(points)\n    def merge(left, right):\n        merged = []\n        while left or right:\n            a, b = left.pop() if left else (0, 0)\n            c, d = right.pop() if right else (0, 0)\n            merged.append((a, c))\n            merged.append((b, d))\n        return merged\n    while True:\n        groups = [[] for _ in range(n)]\n        for i, p in enumerate(points):\n            if i % 2 == 0:\n                groups[p[0]].append(p)\n            else:\n                groups[p[1]].append(p)\n        left = [(i, j) for i in range(n) if j in groups[i]]\n        if len(left) > k:\n            return str(n-len(left))\n        right = [(i, j) for j in range(n) if i in groups[j]]\n        if len(right) > k:\n            return str(n-len(right))\n        if len(left) == len(right):\n            return str(n)\n        points = merge(left, right)\n    return \"\".join(str(i) for i in range(1, n+1))"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    points = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        points.append((l, i))\n        points.append((r, i))\n        segments.append((l, r))\n    segments = sorted(segments, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[0])\n    bad_points = {}\n    for segment in segments:\n        bad_points[segment] = 0\n        for point in points:\n            if bad_points[segment] == 0 and segment[0] <= point[1] < segment[1]:\n                bad_points[segment] += 1\n            elif bad_points[segment] == 1:\n                if segment[0] <= point[1] < segment[1]:\n                    bad_points[segment] += 1\n    return str(len(bad_points))\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *points = list(map(int, stdin.split()))\n    points.sort()\n    l = 0\n    r = n\n    bad = 0\n    min_bad = n\n    segments = []\n    i = 0\n    while l < r:\n        if l == r:\n            segments.append([l, r])\n            break\n        if points[i] <= points[i + 1]:\n            l = points[i] + 1\n            i += 1\n        else:\n            l = points[i + 1] + 1\n            i += 2\n            if points[i] >= points[i + 1]:\n                bad += 1\n        if bad > k:\n            bad = 0\n            l = points[i] + 1\n            i += 1\n            if l == r:\n                segments.append([l, r])\n                break\n    if bad:\n        min_bad = min(min_bad, bad)\n    return str(min_bad) + \" \" + \" \".join([str(i) for i in segments])\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    points = set(map(int, input().split()))\n    check = set()\n    while n > 0:\n        minimum = min(points, key=points.__getitem__)\n        print(minimum)\n        if minimum in check:\n            return \"IMPOSSIBLE\"\n        else:\n            check.add(minimum)\n        points -= {minimum}\n        n -= 1\n    return \"POSSIBLE\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    v = list(map(int, stdin.split()[1:]))\n    for i in range(n):\n        x.append(x[i] + v[i]*((i+1)//2) + (n-1-i)*v[i])\n    return str(sum(min(x[i], x[j]) for i in range(1, n) for j in range(i, n)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, stdin.split())))\n\n    def dist(x, y):\n        return abs(x[0] - y[0]) + abs(x[1] - y[1])\n\n    def dist_max(a, b):\n        return min(dist(a, b), dist(a, b))\n\n    def dist_min(a, b):\n        return max(dist(a, b), dist(a, b))\n\n    max_dist = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_dist = max(max_dist, dist_max(points[i], points[j]))\n            max_dist = max(max_dist, dist_max(points[j], points[i]))\n    return str(max_dist)"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_points = n\n    points = []\n    speeds = []\n    for i in range(1, n+1):\n        p, v = list(map(int, input().split()))\n        points.append(p)\n        speeds.append(v)\n    points.sort()\n    speeds.sort()\n    d = 0\n    for i in range(1, n):\n        d += abs(points[i]-points[i-1]) + speeds[i]\n    print(d)\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    v = list(map(int, stdin.split()[2].split()))\n    return str(len(set([abs(i - j) for i, j in zip(x, x[1:])])))\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n\n    a.sort()\n\n    def dp(i, j):\n        if i == j:\n            return 0\n        if i + 1 == j:\n            return a[i] + v[i]\n\n        res = float('inf')\n\n        for k in range(i + 1, j):\n            res = min(res, a[i] + v[i] + dp(i, k) + dp(k, j))\n\n        return res\n\n    return str(dp(0, n - 1))\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    x.sort()\n    v.sort()\n    c.sort()\n    res = 0\n    for i in range(n):\n        res += distance(x[i], v[i], c[i])\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            res += abs(x[i] - x[j]) + abs(v[i] - v[j])\n    return str(res)"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = sorted([int(i) for i in stdin.split()[1:]])\n    v = sorted([int(i) for i in stdin.split()[1:]])\n    d = 0\n    for i in range(1, n):\n        d += abs(x[i-1]-x[i]) + abs(v[i-1]-v[i])\n    return d\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_points = sorted([int(stdin) for stdin in stdin.split()])\n    v_points = sorted([int(stdin) for stdin in stdin.split()])\n    x = x_points[0]\n    v = v_points[0]\n    dp = [[x_points[i], v_points[i]] for i in range(n)]\n    dp = [[x, v]]\n    for i in range(1, n):\n        for j in range(i):\n            if x_points[i] == dp[j][0]:\n                v_i = v_points[i]\n                dp[i][1] = max(v_i + dp[j][1], dp[i][1])\n        dp.append([x_points[i], v_points[i]])\n    return str(sum([x_points[i] + v_points[i] for i in range(1, n)]))\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x_1 = list(map(int, stdin.split()))\n    v_1 = list(map(int, stdin.split()))\n    dp = [[float('inf')] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = x_1[i]\n\n    for i in range(n-1):\n        dp[i][i+1] = x_1[i+1] - x_1[i]\n        dp[i+1][i] = x_1[i] - x_1[i+1]\n    for i in range(n-2):\n        for j in range(i+2, n):\n            dp[i][j] = min(dp[i][j], dp[i][j-1] + v_1[i], dp[j-1][j] + v_1[j])\n    return str(sum(min(a, b) for i, a in enumerate(dp) for j, b in enumerate(dp)))\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    g = defaultdict(lambda: defaultdict(lambda: 0))\n    for i in range(n - 1):\n        u, v, w = (int(x) for x in input().split())\n        g[u][v] = g[v][u] = w\n    q = (int(x) for x in stdin.split())\n    for i in range(m):\n        u, v = (int(x) for x in input().split())\n        max_ = 0\n        for k in g[u]:\n            if g[u][k] > g[k][u] and g[k][v] > g[u][v]:\n                max_ = max(max_, g[u][v] - g[u][k])\n        print(max_)\n    return ''\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = {}\n    for i in range(n):\n        graph[i] = set()\n    for i in range(1, n + 1):\n        u, v, w = list(map(int, stdin.split()))\n        graph[u].add((v, w))\n        graph[v].add((u, w))\n    print(graph)\n    print(graph.keys())\n    queries = list(map(int, stdin.split()))\n    print(queries)\n    tree = []\n    for i in range(len(queries)):\n        tree.append((sorted(graph[queries[i]])[0][0], sorted(graph[queries[i]])[0][1]))\n    print(tree)\n    print(tree[0])\n    return tree[0]\n\n\nsolution(input())\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, *edges = stdin.split()\n    edges = list(map(lambda x: tuple(map(int, x.split())), edges))\n    edges = sorted(edges, key=lambda x: x[2])\n    tree = [0] * n\n\n    for x, y, z in edges:\n        if not tree[x - 1] and not tree[y - 1]:\n            tree[x - 1] = tree[y - 1] = z\n        else:\n            if z > tree[x - 1]:\n                tree[x - 1] = z\n            if z > tree[y - 1]:\n                tree[y - 1] = z\n\n    return''.join(map(str, tree))\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tree = []\n    for i in range(n):\n        a, b, c = map(int, stdin.split())\n        tree.append([a, b, c])\n    tree = sorted(tree, key=lambda x: x[2])\n    v = n\n    w = []\n    for i in range(n):\n        v = max(v, tree[i][1])\n        w.append(tree[i][2])\n    return str(sum(w))\n\nsolution(\"\"\"1 2\n1 2\n3 2\n2 3\n3 4\n1 3\n2 4\n4 5\n5 7\n3 6 2\n5 2 3 4 1\"\"\")\n\nsolution(\"\"\"3 5\n1 2 1\n2 3 2\n1 3 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\"\"\")\n\nsolution(\"\"\"1 2\n1 2\n3 2\n2 3\n1 3\n3 4\n4 5\n5 6\n5 2 3 4 1\"\"\")\n\nsolution(\"\"\"3 3\n1 2 1\n2 3 2\n1 3 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\"\"\")\n\nsolution(\"\"\"3 3\n1 2 1\n2 3 2\n1 3 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\"\"\")\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for i in range(n - 1):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    total_edges = 0\n    for v, w in graph.values():\n        total_edges += len(v) * len(w)\n    max_e = 0\n    for i in range(1, 2 ** n):\n        edges = 0\n        x = i\n        while x > 0:\n            if x & 1:\n                edges += total_edges\n            x >>= 1\n        if edges > max_e:\n            max_e = edges\n    return str(max_e)\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(x) for x in input().split()] for _ in range(n - 1)]\n    max_weight = int(stdin.split()[-1])\n    ans = 0\n    for query in map(int, stdin.split()):\n        queue = deque()\n        visited = set()\n        for edge in edges:\n            queue.append((edge[0], edge[1], query))\n        while queue:\n            node1, node2, max_weight = queue.popleft()\n            if node1 in visited or node2 in visited:\n                continue\n            visited.add(node1)\n            visited.add(node2)\n            if max_weight > query:\n                continue\n            if node1 == node2:\n                ans += 1\n                continue\n            queue.append((node1, node2, max_weight - 1))\n            queue.append((node2, node1, max_weight - 1))\n    return str(ans)\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nThe graph G is shown below:\n\n  \n\nG = {\n    1: [2, 3],\n    2: [1, 4],\n    3: [1, 4],\n    4: [2, 3, 5],\n    5: [4, 2]\n}\n\n1) Compute the maximal weight of an edge e, which doesn't go through vertex e, for each vertex v in G[e].\n2) Calculate the number of pairs of vertices that don't exceed e, i.e., e + G[v] - 2, for each v in G[e].\n3) Return the total of this operation.\n\"\"\"\n\n\n\nimport math\n\nn, m = map(int, input().split())\ng = {}\n\nfor i in range(n-1):\n    u, v, w = map(int, input().split())\n    if u not in g:\n        g[u] = []\n    if v not in g:\n        g[v] = []\n    g[u].append(v)\n    g[v].append(u)\n\nfor i in range(m):\n    w = int(input())\n    print(len(g[w]) - 2)"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    def solve(u):\n        for v, w in graph[u]:\n            if w > solution(v):\n                solution(v) = max(solution(v), w + solution(u))\n\n    solution(1)\n    return str(solution(1))\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_weight(v1, v2):\n        return abs(v1 - v2)\n    vertices = [[] for _ in range(int(stdin.split()[0]) + 1)]\n    queries = [int(x) for x in stdin.split()[1:]]\n    for e in stdin.split()[1:]:\n        a, b, w = map(int, e.split())\n        vertices[a].append((b, w))\n        vertices[b].append((a, w))\n    visited = [False for _ in range(len(vertices))]\n    res = 0\n    for query in queries:\n        m = [-1] * len(vertices)\n        qu = []\n        for i, x in enumerate(vertices):\n            if not visited[i]:\n                qu.append(x)\n                visited[i] = True\n        while qu:\n            cur = qu.pop(0)\n            for j in cur:\n                if m[j[0]] == -1:\n                    visited[j[0]] = True\n                    m[j[0]] = m[j[1]] - j[2]\n        visited = [False for _ in range(len(vertices))]\n        for i in range(len(m)):\n            if m[i] > query:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    res = []\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        edges[u].append([v, w])\n        edges[v].append([u, w])\n\n    max_ = max(map(lambda x: max(x), edges))\n    max_w = 2 * 10 ** 5\n    q = int(stdin)\n    c = 0\n    for i in range(n):\n        c += max_w + 1 - min(max_w, max(edges[i]))\n    return str(c)\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    moves = 0\n    while a:\n        a = sorted(a)\n        if a[0] == max(a):\n            moves += 1\n            a.pop(0)\n        else:\n            a.pop(a.index(max(a)))\n    return \"YES\" if moves < 2 else \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution_rec(curr_ans, curr_rem):\n        if len(curr_ans) == 1:\n            return curr_ans\n        if len(curr_ans) == 2 and curr_ans[0]!= curr_ans[1]:\n            return 'NO'\n        if curr_rem > 10:\n            return 'NO'\n        for i in range(1, len(curr_ans)):\n            if abs(curr_ans[i] - curr_ans[i-1]) > 1:\n                curr_rem += 1\n        if curr_rem == 0:\n            return 'YES'\n        return solution_rec(curr_ans[1:], curr_rem)\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    result = solution_rec([arr[0]], 0)\n    if result == 'YES':\n        print(result)\n    else:\n        print(result)\n\nsolution(input())"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n == 1:\n        return 'YES'\n\n    a.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 1:\n                return 'YES'\n            elif abs(a[i] - a[j]) == 2:\n                return 'NO'\n    return 'NO'"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        a = [a[i] for i in range(n)]\n        remove = False\n        a.sort()\n        for i in range(n - 1):\n            if abs(a[i] - a[i + 1]) > 1:\n                remove = True\n                break\n        if remove:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1 and a[0] == 1:\n        return \"YES\"\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) < 2:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0] == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve_it(a):\n        if len(a) <= 2:\n            return 'NO'\n        n = len(a)\n        while len(a) > 2:\n            min_dist = a[0] - a[1]\n            for i in range(1, n - 1):\n                for j in range(i + 1, n):\n                    dist = a[i] - a[j]\n                    if abs(dist) <= 1:\n                        return 'YES'\n                    if abs(dist) < abs(min_dist):\n                        min_dist = dist\n            a = a[:i] + [min_dist] + a[i + 1:]\n        return 'NO'\n\n    n = int(stdin.split()[0])\n    a = sorted(map(int, stdin.split()[1]))\n    print(solve_it(a))\n    return 'YES'\n\n\nsolution('''3\n1 2 2\n4\n5 5 5 5''')\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    for i in range(n):\n        a[i] = int(a[i])\n\n    min_diff = abs(a[0] - a[1])\n    for i in range(1, len(a) - 1):\n        min_diff = min(min_diff, abs(a[i] - a[i + 1]))\n    \n    if min_diff <= 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    a = int(stdin[2])\n    b = int(stdin[3])\n    res = 0\n    if b > 0:\n        res += (a | b)\n        if (res % 2) == 0:\n            res = (res >> 1)\n        else:\n            res = (res >> 1) ^ 0xFFFFFFFF\n        while res >= 2 ** m:\n            res = (res >> 1)\n    return str(res)"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin)\n    b = int(stdin)\n    if b > 0:\n        c = 0\n        while b:\n            c += (a & b)\n            c %= 998244353\n            a, b = (a ^ b), ((a & b) << 1) | (a & b)\n        return str(c)\n    else:\n        while b > 0:\n            c = (a & b)\n            c %= 998244353\n            a, b = (a ^ b), ((a & b) << 1) | (a & b)\n        return str(c)\n\nprint(solution(input()))"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if b > 0:\n        a = a & b\n        print((a << 1) + (b >> 1))\n    else:\n        print((a << 1) + (b << 1))\n    return \"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    a=stdin\n    b=stdin\n    while b>0:\n        a=bin(a^b)\n        b=bin(b/2)[2:]\n        b=a\n    return str(a)\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    res = a\n    while b > 0:\n        res = (res << 1) + a\n        b >>= 1\n    return str(res)\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = int(stdin.split(\"_\")[0]), int(stdin.split(\"_\")[1])\n    while b > 0:\n        a = (a + b) % 2 ** 32\n        b = (b >> 1)\n    return str(a)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin, 2)\n    b = int(stdin, 2)\n    while b!= 0:\n        a = (a & b) | (a & 2) | (a & 4) | (a & 8)\n        a = (a & b) | (a & 2) | (a & 4) | (a & 8)\n        b = (b & 2) | (b & 4) | (b & 8)\n    return str(a)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = int(stdin[0]), int(stdin[1])\n    while b > 0:\n        b = max(0, b)\n        a = a + (b * 2)\n        b = max(0, b >> 1)\n    return str(a % 998244353)\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    return str(a*b % 10)\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin)\n    b = int(stdin)\n    while b > 0:\n        if (b & 1) > 0:\n            a = a & ~b\n        b >>= 1\n    return str(a)\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        if n % 2 == 0 and (n - 1) % 2 == 0 and n - 2 <= 10 ** 9:\n            return 'YES\\n' +''.join(map(str, sorted([n - 1, n - 2])))\n    return 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    n = int(stdin.splitlines()[1])\n\n    for _ in range(t):\n        ans = \"NO\"\n        if(n % 2 == 0):\n            ans = \"YES\"\n\n        print(ans)\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        print(\"YES\" if is_even_even(n) else \"NO\")\n    return \"ok\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  t = int(stdin)\n  for _ in range(t):\n    n = int(stdin)\n    if 2 * (n // 2) > n:\n      print('NO')\n    elif n % 2 == 1:\n      print('NO')\n    else:\n      print('YES')\n    \n    a = list(map(int, stdin.split()))\n    for i in range(0, int(n / 2), 2):\n      if a[i] % 2 == 1:\n        print('NO')\n        break\n    else:\n      print('YES')\n      print(*a)\n  return ''\n\nsolution(input())\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_testcases = int(stdin.splitlines()[0])\n    num_of_elements = int(stdin.splitlines()[1])\n\n    a = [True] * num_of_elements\n    for i in range(2, num_of_elements, 2):\n        if a[i]:\n            a[i] = False\n        else:\n            a[i] = True\n\n    if a[:num_of_elements // 2].count(True) < num_of_elements // 2:\n        return \"NO\"\n\n    sum = 0\n    for i in range(1, num_of_elements):\n        sum += a[i]\n\n    if sum!= num_of_elements:\n        return \"NO\"\n\n    sum = 0\n    for i in range(num_of_elements // 2, num_of_elements - 1):\n        sum += a[i]\n\n    if sum!= num_of_elements:\n        return \"NO\"\n\n    a = [1] * num_of_elements\n    for i in range(2, num_of_elements // 2):\n        a[i] = a[i - 1] + a[i - 2]\n\n    a[num_of_elements // 2 - 1] = a[num_of_elements // 2]\n    for i in range(num_of_elements // 2, num_of_elements - 1):\n        a[i] = a[i - 1] + a[i - 2]\n\n    if a[0]!= 1:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(range(n))\n    even_odd = [2] * (n // 2)\n    odd_even = [2] * ((n + 1) // 2)\n    odd_even.sort()\n    for idx in range(n):\n        if even_odd[idx] == 2:\n            even_odd.pop(idx)\n            odd_even.pop(idx)\n            break\n        elif odd_even[idx] == 2:\n            odd_even.pop(idx)\n            even_odd.pop(idx)\n            break\n\n    for i in range(n // 2):\n        if even_odd[i] == odd_even[i]:\n            return \"NO\"\n        elif even_odd[i] == 1 and odd_even[i] == 3:\n            return \"YES\"\n        elif even_odd[i] == 3 and odd_even[i] == 1:\n            return \"YES\"\n        elif even_odd[i] == 1 and odd_even[i] == 1:\n            return \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin)\n    for _ in range(testcases):\n        n = int(stdin)\n        a = list(map(lambda x: int(x) % 2, range(n//2, n)))\n        if not a or sum(a)!= (n//2 + 1) * (n//2 - 1) // 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    for test in range(int(stdin.split()[0])):\n        n = int(stdin.split()[1])\n        odd_numbers = [i for i in range(1, n // 2 + 1) if i % 2 == 1]\n        odd_numbers += [i for i in range(n // 2 + 1, n + 1) if i % 2 == 1]\n        if math.sum(odd_numbers)!= 0:\n            print(f\"YES {', '.join([str(i) for i in odd_numbers])}\")\n        else:\n            print(f\"NO\")\n    return ''\n\n\nsolution(input())\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    even = []\n    odd = []\n    sum_even = 0\n    sum_odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(i)\n            sum_even += i\n        else:\n            odd.append(i)\n            sum_odd += i\n    if sum_even == sum_odd:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] == 0:\n                ans += 1\n        elif i == n - 1:\n            if arr[i] == 0:\n                ans += 1\n        elif arr[i] - arr[i - 1] == 1:\n            ans += 1\n    print(ans)\n    return ans\n\n\nsolution(input())\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        ans += isSpecial(a)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.strip().split())\n    res = 0\n    for i in range(N):\n        # print(A[i])\n        temp = 0\n        for j in range(i + 1, N):\n            temp += A[j]\n            if temp == A[i]:\n                res += 1\n    return res\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n, *a = map(int, stdin.split())\n        i, j = 0, 0\n        while j < len(a):\n            if a[i] == a[j]:\n                a.pop(j)\n            else:\n                i += 1\n                j += 1\n        print(len(a))\n        print(*a)\n\nsolution(input())"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    a = [int(i) for i in stdin.split()]\n    s = []\n    for i in range(n):\n        s.append(i)\n    for i in range(n - 1, -1, -1):\n        if a[i] in s:\n            s.remove(a[i])\n    return str(len(s))\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        _ = int(input())\n        a = list(map(int, stdin.split()))\n        b = []\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1] + 1:\n                b.append(a[i] + a[i - 1])\n            elif a[i] == a[i - 1] - 1:\n                b.append(a[i] - a[i - 1])\n        print(len(b))\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        arr = list(map(int, stdin.split()[2].split()))\n        print(sum(arr))\n        # check 1\n        # Check 2\n        # Check 3\n        # Check 4\n        # Check 5\n    return \"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2].split()))\n        print(special_numbers(a, n))\n    return \"\""
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_of_special_elements = 0\n    for i in range(int(stdin.split()[0])):\n        num_of_special_elements += count_special_elements(stdin.split()[i + 1])\n    return str(num_of_special_elements)\n\n\ndef"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    ans = []\n    for i in stdin:\n        ans.append(solution1(i))\n    print(ans)\n    return \"\\n\".join(ans)\n\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split()[1].split(' '))))\n    print(segments)\n    segments.sort(key=lambda x: (x[0], x[1]))\n    ans = [1]\n    for i in range(1, n):\n        is_in_seg = False\n        for j in range(i):\n            if segments[j][1] < segments[i][0]:\n                is_in_seg = True\n                break\n        if not is_in_seg:\n            ans.append(ans[i - 1] + 1)\n    return \" \".join([str(x) for x in ans])\n\nprint(solution(input()))"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    input_data = list(map(lambda x: list(map(lambda y: int(y), x.split(\" \"))), input_data))\n\n    output = []\n    for i in range(len(input_data)):\n        output.append(check(input_data[i][0], input_data[i][1], input_data[i][2], input_data[i][3]))\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, stdin.split()[1:])))\n    max_size = float('-inf')\n    for i in range(1 << n):\n        seg_set = set()\n        for j in range(n):\n            if i & (1 << j):\n                seg_set.add(segments[j][0])\n                seg_set.add(segments[j][1])\n        if len(seg_set) == 0:\n            continue\n        else:\n            curr_size = 0\n            seg_set.add(segments[0][0])\n            seg_set.add(segments[0][1])\n            for j in range(1, n):\n                if not seg_set:\n                    break\n                l_seg = segments[j - 1]\n                r_seg = segments[j]\n                if l_seg[0] < r_seg[0] and l_seg[1] > r_seg[0]:\n                    seg_set.remove(l_seg[0])\n                elif l_seg[0] > r_seg[1] and l_seg[1] < r_seg[1]:\n                    seg_set.remove(r_seg[1])\n                elif l_seg[0] < r_seg[1] and l_seg[1] < r_seg[0]:\n                    seg_set.remove(l_seg[0])\n                    seg_set.remove(l_seg[1])\n            curr_size = len(seg_set)\n            max_size = max(curr_size, max_size)\n    return str(max_size)\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    s = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        s.append([l, r])\n    s = sorted(s, key=lambda x: (x[1], x[0]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i][0] > s[j][1] or s[i][1] < s[j][0]:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n\n    res = float('inf')\n    for i in range(s[1]):\n        for j in range(s[2]):\n            res = max(res, (s[i+1] - s[i])*(s[j+1] - s[j]))\n\n    return str(res)\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    xs = []\n    for _ in range(n):\n        xs.append([int(x) for x in stdin.split()])\n    #print(xs)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (xs[i][1] < xs[j][0]) or (xs[j][1] < xs[i][0]):\n                continue\n            #print(i, j, xs[i][0], xs[j][1])\n            ans = max(ans, 2)\n            if (xs[i][0] <= xs[j][0]) and (xs[j][1] <= xs[i][1]):\n                ans = max(ans, 1)\n            elif (xs[i][0] < xs[j][1]) and (xs[j][0] < xs[i][1]):\n                ans = max(ans, 1)\n    return str(ans)\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[2+i].split(' '))\n        segments.append((l, r))\n    for i in range(n):\n        for j in range(i+1, n):\n            seg1 = segments[i]\n            seg2 = segments[j]\n            if seg1[1] <= seg2[0] or seg2[1] <= seg1[0]:\n                continue\n            if seg1[0] <= seg2[0] and seg2[1] >= seg1[1]:\n                continue\n            if seg1[1] >= seg2[0] and seg2[1] <= seg1[1]:\n                continue\n            return str(1 + max(seg1[1] - seg2[0] + 1, seg1[1] - seg2[1] + 1))\n    return str(max(segments[i][1] - segments[i][0] + 1 for i in range(n)))\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.splitlines()\n    n = int(inp[0])\n    segments = []\n    for i in range(1, n + 1):\n        l, r = map(int, inp[i].split())\n        segments.append((l, r))\n    segments = list(set(segments))\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    result = 0\n    for i in range(n):\n        if segments[i][1] > segments[i][0]:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    segments = list(map(lambda i: (int(i.split()[0]), int(i.split()[1])), x[1:]))\n    segments = list(set(segments))\n\n    output = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (segments[i][0] <= segments[j][0] and segments[i][1] <= segments[j][1]) or (\n                segments[i][0] <= segments[j][1] and segments[i][1] <= segments[j][0]\n            ):\n                output += 1\n\n    return str(output)\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in stdin.split()][1:])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n                return str(i)\n            if segments[i][0] <= segments[j][0] and segments[i][1] >= segments[j][1]:\n                return str(j)\n    return \"0\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split())\n    midnight_hours, midnight_minutes = 23, 59\n    midnight_minutes += minutes\n    if midnight_minutes > 59:\n        midnight_minutes -= 60\n        midnight_hours += 1\n\n    return f\"{midnight_hours} {midnight_minutes}\"\n\nsolution(input())\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m = list(map(int, stdin.split()))\n    if h == 0 and m == 0:\n        return '1'\n    if h == 0:\n        return str(minutes_until_new_year(m))\n    if m == 0:\n        return str(minutes_until_new_year(h))\n    return str(minutes_until_new_year(h) + minutes_until_new_year(m))\n    \"\"\"\n    return (60 - min(h, m)) * 60 + (max(h, m))\n    \"\"\"\n    # h, m = map(int, input().split())\n    # if h == 0 and m == 0:\n    #     return 1\n    # if h == 0:\n    #     return 60 + m\n    # if m == 0:\n    #     return h\n    # return h * 60 + m\n    # result = (60 - min(h, m)) * 60 + (max(h, m))\n    # print(result)\n    # return str(result)\n    \"\"\"\n    h, m = map(int, input().split())\n    if h == 0 and m == 0:\n        return '1'\n    if h == 0:\n        return str(m)\n    if m == 0:\n        return str(h)\n    return str(minutes_until_new_year(h) + minutes_until_new_year(m))\n    \"\"\"\n    # h, m = map(int, input().split())\n    # if h == 0 and m == 0:\n    #     return '1'\n    # if h == 0:\n    #     return str(m)\n    # if m == 0:\n    #     return str(h)\n    # return str(minutes_until_new_year(h) + minutes_until_new_year(m))\n    \"\"\"\n    h, m = map(int, input().split())\n    if h == 0 and m == 0:\n        return '1'\n    if h == 0:\n        return str(m)\n    if m == 0:\n        return str(h)\n    return str(minutes_until_new_year(h) + minutes_until_new_year(m))\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    total_hours = 0\n    for _ in range(test_cases):\n        current_hours, current_minutes = map(int, stdin.splitlines()[1].split())\n        total_hours += current_hours\n        total_minutes = total_hours * 60 + current_minutes\n        if total_minutes < 0:\n            total_minutes = total_minutes % 1440\n            total_hours = total_hours - 1\n        elif total_minutes > 1440:\n            total_minutes = total_minutes - 1440\n            total_hours = total_hours + 1\n        print(total_hours, total_minutes)\n    return \"Nope\"\n\nsolution(\"\"\"2\n23 55\n23 0\"\"\")\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        h, m = map(int, stdin.split())\n        if h == 0 and m == 0:\n            print(0)\n        else:\n            print(60*h + m)\n    return 'OK'"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    return str(get_minutes(input_list))\n\ndef"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        h, m = map(int, stdin.split())\n        if h == 0 and m == 0:\n            print(0)\n        else:\n            print(24 * 60 + (h * 60 + m) - (h * 60 - m) % (24 * 60))\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        h, m = list(map(int, input().split()))\n        # print(h, m)\n        if h == 0 and m == 0:\n            print(0)\n        else:\n            print(h * 60 + m)\nsolution(input())\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_minutes = 0\n    hour = 0\n    minute = 0\n    for x in stdin.split(\"\\n\"):\n        if x!= \"\":\n            hour, minute = map(int, x.split())\n            total_minutes += (hour * 60 + minute)\n        else:\n            hour = 0\n            minute = 0\n    return str(total_minutes)\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin = read_input()\n    \"\"\"\n    t = int(stdin)\n    for i in range(t):\n        h, m = map(int, stdin.split())\n        if h == 0 and m == 0:\n            print(0)\n        else:\n            print(h*60 + m)\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    for l in stdin.splitlines():\n        h, m = list(map(int, l.split()))\n        print(h, m)\n        h, m = h-1, m-1\n        print(h, m)\n        h, m = h, m\n        print(h, m)\n        if h == 0 and m == 0:\n            res = '1'\n        elif h == 0:\n            res = str((60-m)//60)\n        elif m == 0:\n            res = str((24-h)//24)\n        else:\n            res = str(max(0, (24-h)%24, (60-m)//60))\n        print(res)\n    return res\n\n\nsolution(\"\"\"1 1\n0 0\n2 1\n3 2\n0 0\n\"\"\")\n\"\"\"\nres = '0'\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    starts = []\n    ends = []\n    for i in range(1, n):\n        starts.append(i - 1)\n        ends.append(i)\n    # print(starts)\n    # print(ends)\n\n    for i in range(n - 1, 0, -1):\n        if s[i] == 'L':\n            # print(s[starts[i]:ends[i] + 1])\n            if s[starts[i]:ends[i] + 1] == 'RL':\n                starts[i] -= 1\n            elif s[starts[i]:ends[i] + 1] == 'RU':\n                starts[i] -= 2\n            elif s[starts[i]:ends[i] + 1] == 'DU':\n                starts[i] -= 3\n            elif s[starts[i]:ends[i] + 1] == 'RDD':\n                starts[i] -= 4\n            elif s[starts[i]:ends[i] + 1] == 'U':\n                starts[i] -= 5\n            elif s[starts[i]:ends[i] + 1] == 'D':\n                starts[i] -= 6\n        elif s[i] == 'R':\n            # print(s[starts[i]:ends[i] + 1])\n            if s[starts[i]:ends[i] + 1] == 'RU':\n                starts[i] -= 1\n            elif s[starts[i]:ends[i] + 1] == 'RDD':\n                starts[i] -= 2\n            elif s[starts[i]:ends[i] + 1] == 'L':\n                starts[i] -= 3\n            elif s[starts[i]:ends[i] + 1] == 'LD':\n                starts[i] -= 4\n            elif s[starts[i]:ends[i] + 1] == 'D':\n                starts[i] -= 5\n            elif s[starts[i]:ends[i] + 1] == 'U':\n                starts[i] -= 6\n        elif s[i] == 'U':\n            # print(s[starts[i]:ends[i] + 1])\n            if s[starts[i]:ends[i] + 1] == 'RD':\n                starts[i] -= 1\n            elif s[starts[i]:ends[i] + 1] == 'UD':\n                starts[i] -= 2\n            elif s[starts[i]:ends[i] + 1] == 'L':\n                starts[i] -= 3\n            elif s[starts[i]:ends[i] + 1] == 'D':\n                starts[i] -= 4\n            elif s[starts[i]:ends[i] + 1] == 'R':\n                starts[i] -= 5\n            elif s[starts[i]:ends[i] + 1] == 'U':\n                starts[i] -= 6\n        elif s[i] == 'D':\n            # print(s[starts[i]:ends[i] + 1])\n            if s[starts[i]:ends[i] + 1] == 'RU':\n                starts[i] -= 1\n            elif s[starts[i]:ends[i] + 1] == 'RD':\n                starts[i] -= 2\n            elif s[starts[i]:ends[i] + 1] == 'U':\n                starts[i] -= 3\n            elif s[starts[i]:ends[i] + 1] == 'DU':\n                starts[i] -= 4\n            elif s[starts[i]:ends[i] + 1] == 'RD':\n                starts[i] -= 5\n            elif s[starts[i]:ends[i] + 1] == 'L':\n                starts[i] -= 6\n            elif s[starts[i]:ends[i] + 1] == 'R':\n                starts[i] -= 7\n        elif s[i] == 'RDD':\n            # print(s[starts[i]:ends[i] + 1])\n            if s[starts[i]:ends[i] + 1] == 'RDD':\n                starts[i] -= 1\n            elif s[starts[i]:ends[i] + 1] == 'RDD':\n                starts[i] -= 2\n            elif s[starts[i]:ends[i] + 1] == 'U':\n                starts[i] -= 3\n            elif s[starts[i]:ends[i] + 1] == 'D':\n                starts[i] -= 4\n            elif s[starts[i]:ends[i] + 1] == 'R':\n                starts[i] -= 5\n            elif s[starts[i]:ends[i] + 1] == '"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    l, r = 0, n\n    res = []\n    while True:\n        sub = s[l:r]\n        if len(sub) == n:\n            res.append(sub)\n        else:\n            res.append(sub)\n            break\n        l += 1\n        r -= 1\n    if len(res) == 0:\n        return -1\n    for _ in res:\n        if 'LR' in _:\n            l = _.index('LR')\n            r = _.index('RD') + 1\n        elif 'RD' in _:\n            r = _.index('RD')\n            l = _.index('LR') + 1\n        elif 'UL' in _:\n            l = _.index('UL')\n            r = _.index('LD') + 1\n        elif 'LD' in _:\n            r = _.index('LD')\n            l = _.index('UL') + 1\n        else:\n            return -1\n        if r - l > 0:\n            return str(l) + \" \" + str(r)\n    return -1\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The task is to remove any non-empty substring from the path, to optimize the robot's path such that its endpoint doesn't change.\n\n    :param stdin: The input consists of a string $s$ that describes the robot's path and a integer $n$ that specifies the length of the path.\n    :return: If the robot's path ends at the point $(x_e, y_e)$, then the robot should also end at the point $(x_e, y_e)$. Otherwise, the robot should end at the point $(x_e, y_e)$ such that the endpoint does not change.\n    \"\"\"\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin\n        x, y = list(map(int, stdin.split()))\n        if x == 0 and y == 0:\n            return '-1'\n        elif x == y and y == 0:\n            return '1'\n        s_l = s[:x]\n        s_r = s[y:]\n        new_s = ''\n        while True:\n            if s_l == s_r:\n                return '-1'\n            if s_l == '' or s_r == '':\n                break\n            if s_l == s_r[-1:]:\n                s_l = s_l[:-1]\n                s_r = s_r[:-1]\n                new_s += s_l\n                continue\n            if s_l == s_r[-1:]:\n                s_r = s_r[:-1]\n                new_s += s_r\n                continue\n            if s_r == s_l[-1:]:\n                s_l = s_l[:-1]\n                new_s += s_l\n                continue\n            if s_r == s_l[-1:]:\n                s_l = s_l[:-1]\n                new_s += s_l\n                continue\n            new_s += s_l[-1:]\n            s_l = s_l[:-1]\n            s_r = s_r[:-1]\n        return new_s"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    for i in range(len(stdin)):\n        test_case = stdin[i].split('\\n')\n        length = int(test_case[0])\n        path = test_case[1]\n        l, r = remove_substring(path, length)\n        if l == -1 or r == -1:\n            print(-1)\n        else:\n            print(l, r)\n    return\n\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    n = 0\n    for i in range(t):\n        n = max(n, int(stdin.split()[i]))\n    answers = []\n    for i in range(t):\n        str = stdin.split()[i]\n        n = len(str)\n        min_remove = n\n        substring_len = 0\n        substring = \"\"\n        while True:\n            substring_len += 1\n            for j in range(1, n+1):\n                if substring_len == n:\n                    if substring == \"\":\n                        answers.append(-1)\n                    else:\n                        answers.append(substring)\n                    break\n                else:\n                    if substring[-1] == str[j-1]:\n                        substring += str[j-1]\n                    else:\n                        if substring[-1] == 'R':\n                            if min_remove == n:\n                                min_remove = j-1\n                            if substring[-2] == 'R':\n                                substring += str[j-1]\n                                min_remove = j-1\n                            else:\n                                substring += str[j-1]\n                        elif substring[-1] == 'U':\n                            if min_remove == n:\n                                min_remove = j-1\n                            if substring[-2] == 'U':\n                                substring += str[j-1]\n                                min_remove = j-1\n                            else:\n                                substring += str[j-1]\n                        elif substring[-1] == 'L':\n                            if min_remove == n:\n                                min_remove = j-1\n                            if substring[-2] == 'L':\n                                substring += str[j-1]\n                                min_remove = j-1\n                            else:\n                                substring += str[j-1]\n                        else:\n                            if min_remove == n:\n                                min_remove = j-1\n                            substring = substring[:-1]\n                            break\n            if len(substring) == n and min_remove == n:\n                min_remove = j-1\n            else:\n                break\n        answers.append(str)\n    return answers\n\n\nsolution(\"3\")\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        return str(find_substring_endpoint(s))\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, s = stdin.split()\n        l = 0\n        r = len(s)\n        while l <= r and r - l!= 1:\n            mid = (l + r) // 2\n            if s[:mid] == s[mid:]:\n                l = mid + 1\n            else:\n                r = mid\n        if l == r and l!= len(s):\n            return '-1'\n        else:\n            return l, r"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    import sys\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, s = map(str, sys.stdin.readline().strip().split())\n        l, r = -1, -1\n        if s[0] == s[-1] == 'L' or s[0] == s[-1] == 'R':\n            r = n\n        if s[0] == s[-1] == 'U' or s[0] == s[-1] == 'D':\n            l = n\n        for i in range(1, len(s)):\n            if s[i] == 'L' and s[i - 1] == s[i]:\n                l = i\n            if s[i] == 'R' and s[i - 1] == s[i]:\n                r = i\n            if s[i] == 'U' and s[i - 1] == s[i]:\n                l = i\n            if s[i] == 'D' and s[i - 1] == s[i]:\n                r = i\n        if l!= -1 and r!= -1:\n            print(l, r)\n        else:\n            print(-1)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    t = int(input.strip())\n    for _ in range(t):\n        n = int(input.strip())\n        s = input.strip()\n        if isValid(s):\n            print(0)\n            continue\n        else:\n            result = find_begin_end(s, n)\n            if result == -1:\n                print('-1')\n                continue\n            print(result[0], result[1])\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[0])\n        s = stdin.split()[1]\n        s_list = list(s)\n        # print(s_list)\n        res = \"\"\n        end_res = \"\"\n        j = 0\n        for i in range(1, n):\n            if s_list[i - 1] == \"L\":\n                if j == 0:\n                    j += 1\n                else:\n                    s_list.remove(s_list[i - 1])\n                    s_list.remove(s_list[i - 1])\n                    res += s_list[j]\n                    s_list.remove(s_list[j])\n                    j += 1\n            elif s_list[i - 1] == \"R\":\n                if j == 0:\n                    s_list.remove(s_list[i - 1])\n                    j += 1\n                else:\n                    s_list.remove(s_list[i - 1])\n                    s_list.remove(s_list[i - 1])\n                    res += s_list[j]\n                    s_list.remove(s_list[j])\n                    j += 1\n            elif s_list[i - 1] == \"U\":\n                if j == 0:\n                    s_list.remove(s_list[i - 1])\n                    s_list.remove(s_list[i - 1])\n                    res += s_list[j]\n                    s_list.remove(s_list[j])\n                    j += 1\n                else:\n                    s_list.remove(s_list[i - 1])\n                    s_list.remove(s_list[i - 1])\n                    res += s_list[j]\n                    s_list.remove(s_list[j])\n                    j += 1\n            elif s_list[i - 1] == \"D\":\n                if j == 0:\n                    s_list.remove(s_list[i - 1])\n                    s_list.remove(s_list[i - 1])\n                    res += s_list[j]\n                    s_list.remove(s_list[j])\n                    j += 1\n                else:\n                    s_list.remove(s_list[i - 1])\n                    s_list.remove(s_list[i - 1])\n                    res += s_list[j]\n                    s_list.remove(s_list[j])\n                    j += 1\n\n        if len(res)!= 0:\n            end_res = res\n        if len(res)!= len(s_list) - 1:\n            end_res = res\n        # print(res)\n        if end_res!= res:\n            return \"0\"\n        else:\n            return res\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    skills = set()\n    for line in lines:\n        skills.add(int(line))\n    sorted_skills = sorted(skills)\n    answers = set()\n    for i in range(n):\n        answers.add(i)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sorted_skills[i] == sorted_skills[j]:\n                answers.add(i)\n                answers.add(j)\n    if len(answers) == n:\n        return len(answers)\n    return -1"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = list(map(int, stdin.strip().split(\" \")))\n    dp = {(0, 0): 1}\n    for i in skills:\n        dp2 = {}\n        for j in range(i):\n            for k in range(i):\n                if k!= j:\n                    dp2[(j, k)] = max(dp2.get((j, k), 0), dp.get((j, k), 0) + dp.get((j, i-1-k), 0))\n        dp = dp2\n    return str(max(dp.values()))\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        skills = list(map(int, stdin.split()))\n        teams = []\n        skills.sort()\n        seen = set()\n        for i in range(len(skills)):\n            if i in seen:\n                continue\n            skill = skills[i]\n            if len(teams) >= 2 and skills[i] == skills[i + 1]:\n                continue\n            seen.add(i)\n            teams.append([skill])\n        if len(teams) == n:\n            return str(len(teams))\n        else:\n            print('0')\n    return '0'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    print(solution_naive(a))\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        skills = list(map(int, stdin.split()))\n        skills = sorted(list(set(skills)))\n\n        if len(skills) == len(skills):\n            return '0'\n\n        if len(skills) == 1:\n            return str(len(skills))\n\n        # Not possible to make 2 teams with all unique skills\n        if len(skills) == 2:\n            return '0'\n\n        # Only two groups of students can have the same skill\n        if len(skills) == 3:\n            if len(set(skills[0:2])) == 1:\n                return str(len(skills))\n\n        # A set of students with the same skill cannot be composed\n        if len(skills) == 4:\n            if len(set(skills[0:3])) == 1:\n                return '0'\n\n        # An even better way can be found\n        if len(skills) == 5:\n            if len(set(skills[0:3])) == 1 and len(set(skills[3:])) == 1:\n                return str(len(skills))\n        if len(skills) == 6:\n            if len(set(skills[0:4])) == 1 and len(set(skills[4:])) == 1:\n                return str(len(skills))\n\n        # Smallest possible set of teams can be found\n        if len(skills) == 7:\n            if len(set(skills[0:6])) == 1 and len(set(skills[6:])) == 1:\n                return str(len(skills))\n\n        # Smallest possible set of teams can be found\n        if len(skills) == 8:\n            if len(set(skills[0:7])) == 1 and len(set(skills[7:])) == 1:\n                return str(len(skills))\n\n        # Smallest possible set of teams can be found\n        if len(skills) == 9:\n            if len(set(skills[0:8])) == 1 and len(set(skills[8:])) == 1:\n                return str(len(skills))\n\n        # Smallest possible set of teams can be found\n        if len(skills) == 10:\n            if len(set(skills[0:9])) == 1 and len(set(skills[9:])) == 1:\n                return str(len(skills))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    student_n = int(stdin)\n    teams = [[int(i) for i in stdin.split()] for _ in range(student_n)]\n\n    # teams = [[3,2,1],[4,3,2]]\n    # teams = [[4,4,3],[2,3,3]]\n    # teams = [[1,1,2],[2,2,2]]\n    # teams = [[1,2,1],[2,2,2]]\n    # teams = [[3,3,3],[2,2,2]]\n    # teams = [[4,4,3],[4,4,4]]\n    # teams = [[1,2,1],[3,3,3]]\n    # teams = [[1,2,1],[1,2,3],[3,3,3],[2,2,2]]\n\n    # The problem is actually for teams of size $x$ and $x-1$ or more, so we need to sort the teams.\n    teams.sort(key=lambda x: x[0])\n    teams.sort(key=lambda x: x[1])\n\n    teams.sort(key=lambda x: x[2])\n\n    x = 1\n    res = 0\n    while x < student_n:\n        # This is a greedy approach. If the team of size $x$ is large enough, we need to decrease it by one to find the minimum size of the team of size $x-1$ and then pick it.\n        # If the team of size $x-1$ is too small, we can increase it by one to find the minimum size of the team of size $x$ and then pick it.\n        if teams[x-1][2] > teams[x-1][1]:\n            # teams[x-1][2] > teams[x-1][1]\n            x += 1\n        else:\n            # teams[x-1][2] < teams[x-1][1]\n            x -= 1\n\n        if teams[x][2] > teams[x][1]:\n            # teams[x][2] > teams[x][1]\n            x += 1\n        else:\n            # teams[x][2] < teams[x][1]\n            x -= 1\n\n        res = x\n    return str(res)\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    s_a = set(a)\n    m = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if len(s_a.intersection(set(a[i:j])))!= 0 and len(s_a.intersection(set(a[i:j])))!= len(set(a[i:j])):\n                m = max(m, j - i)\n    return str(m)"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code will be run on an infinite number of input lines.\n    At the end of the input there will be one line containing one integer, the answer.\n    \"\"\"\n    t = int(stdin.strip())\n    for i in range(t):\n        n = int(stdin.strip())\n        a = list(map(int, stdin.strip().split(' ')))\n        x = []\n        for j in range(1, n + 1):\n            s = set()\n            for k in range(1, n + 1):\n                if k not in s:\n                    s.add(k)\n                    if a[k - 1] in s:\n                        if j not in x:\n                            x.append(j)\n                        break\n        print(len(x))\n    return stdout\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # return \"1\"\n    pass\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    graph = {}\n    for i in range(n):\n        if a[i] in graph:\n            graph[a[i]].append(i)\n        else:\n            graph[a[i]] = [i]\n    res = 0\n    for i in graph:\n        dist_to_i = 0\n        for j in graph:\n            if i!= j:\n                dist_to_i += 1\n        res = max(res, sum(a) * dist_to_i)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = int(stdin.split()[1])\n    edges = list(map(int, stdin.split()[2].split()))\n    edges.sort(key=lambda x: (x[1], x[0]))\n    dp = [[0] * n for _ in range(n)]\n    ans = 0\n    for u, v in edges:\n        dp[u - 1][v - 1] = max(dp[u - 1][v - 1], dp[u - 1][v]) + v\n    for i in range(n):\n        dp[i][i] = 0\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + v * (j - i) + v)\n        ans = max(ans, dp[i][i] + dp[i][i - 1])\n    return str(ans)\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(0, n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    cnt = 0\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            stack = [(i, 0, 0)]\n            while stack:\n                node, v, c = stack.pop()\n                cnt = max(cnt, v + a[node] * c)\n                for nei in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append((nei, v + a[node], c + 1))\n    return str(cnt)\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    edges = [tuple(map(int, stdin.split()[2].split())) for _ in range(n-1)]\n    print(solution_part_1(n, a, edges))\n    return solution_part_2(n, a, edges)\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vals = list(map(int, stdin.split()))\n\n    graph = {\n        u: {v: vals[u-1] + vals[v-1] for v in range(1, n+1) if u!= v} for u in range(1, n+1)\n    }\n    for u, v in graph.items():\n        for v in v.values():\n            if v > 0:\n                graph[v] = {u: v}\n    dist = {u: {} for u in range(1, n+1)}\n    for u in range(1, n+1):\n        for v, v_dist in graph[u].items():\n            if u == v:\n                continue\n            for w, w_dist in graph[v].items():\n                dist[w] = min(w_dist, dist[w], v_dist + w_dist)\n    for u, v in dist.items():\n        dist[u] = sum(v.values())\n\n    return max(dist.values())\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = {}\n    max_cost = 0\n    for i in range(1, n):\n        d[i] = a[i]\n    for i in range(1, n):\n        for j in range(1, n):\n            if j in d:\n                continue\n            d[j] = d[i] * a[i] + d[i - 1] * a[i - 1]\n    for i in range(1, n):\n        max_cost = max(max_cost, d[i])\n    return str(max_cost)\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n\n    edges = stdin.split()[2:]\n    t = []\n    for e in edges:\n        t.append((int(e.split()[0]) - 1, int(e.split()[1]) - 1))\n\n    dist = {x: -1 for x in range(n)}\n    dist[0] = 0\n    curr_time = 0\n    curr_val = a[0]\n    trees = {a[0]}\n    while True:\n        for e in t:\n            if e[0] in trees and dist[e[1]] == -1:\n                dist[e[1]] = curr_time + 1\n                trees.add(e[1])\n            if e[1] in trees and dist[e[0]] == -1:\n                dist[e[0]] = curr_time + 1\n                trees.add(e[0])\n        curr_time += 1\n        if len(trees) == n:\n            break\n    print(curr_time)\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split(\"\\n\")\n    n = int(input[0])\n    nodes = list(map(int, input[1].split()))\n\n    # print(n)\n    # print(nodes)\n\n    # print(len(nodes))\n    # print(nodes)\n\n    # print(nodes[0])\n    # print(nodes[1])\n    # print(nodes[2])\n\n    # print(nodes[0])\n    # print(nodes[1])\n    # print(nodes[2])\n\n    # print(nodes)\n\n    # print(nodes[0])\n\n    # print(nodes[1])\n\n    # print(nodes[2])\n\n    # print(nodes[3])\n\n    # print(nodes[4])\n\n    # print(nodes[5])\n\n    # print(nodes[6])\n\n    # print(nodes[7])\n\n    # print(nodes[8])\n\n    # print(nodes[9])\n\n    # print(nodes[10])\n\n    # print(nodes[11])\n\n    # print(nodes[12])\n\n    # print(nodes[13])\n\n    # print(nodes[14])\n\n    # print(nodes[15])\n\n    # print(nodes[16])\n\n    # print(nodes[17])\n\n    # print(nodes[18])\n\n    # print(nodes[19])\n\n    # print(nodes[20])\n\n    # print(nodes[21])\n\n    # print(nodes[22])\n\n    # print(nodes[23])\n\n    # print(nodes[24])\n\n    # print(nodes[25])\n\n    # print(nodes[26])\n\n    # print(nodes[27])\n\n    # print(nodes[28])\n\n    # print(nodes[29])\n\n    # print(nodes[30])\n\n    # print(nodes[31])\n\n    # print(nodes[32])\n\n    # print(nodes[33])\n\n    # print(nodes[34])\n\n    # print(nodes[35])\n\n    # print(nodes[36])\n\n    # print(nodes[37])\n\n    # print(nodes[38])\n\n    # print(nodes[39])\n\n    # print(nodes[40])\n\n    # print(nodes[41])\n\n    # print(nodes[42])\n\n    # print(nodes[43])\n\n    # print(nodes[44])\n\n    # print(nodes[45])\n\n    # print(nodes[46])\n\n    # print(nodes[47])\n\n    # print(nodes[48])\n\n    # print(nodes[49])\n\n    # print(nodes[50])\n\n    # print(nodes[51])\n\n    # print(nodes[52])\n\n    # print(nodes[53])\n\n    # print(nodes[54])\n\n    # print(nodes[55])\n\n    # print(nodes[56])\n\n    # print(nodes[57])\n\n    # print(nodes[58])\n\n    # print(nodes[59])\n\n    # print(nodes[60])\n\n    # print(nodes[61])\n\n    # print(nodes[62])\n\n    # print(nodes[63])\n\n    # print(nodes[64])\n\n    # print(nodes[65])\n\n    # print(nodes[66])\n\n    # print(nodes[67])\n\n    # print(nodes[68])\n\n    # print(nodes[69])\n\n    # print(nodes[70])\n\n    # print(nodes[71])\n\n    # print(nodes[72])\n\n    # print(nodes[73])\n\n    # print(nodes[74])\n\n    # print(nodes[75])\n\n    # print(nodes[76])\n\n    # print(nodes[77])\n\n    # print(nodes[78])\n\n    # print(nodes[79])\n\n    # print(nodes[80])\n\n    # print(nodes[81])\n\n    # print(nodes[82])\n\n    # print(nodes[83])\n\n    # print(nodes[84])\n\n    # print(nodes[85])\n\n    # print(nodes[86])\n\n    # print(nodes[87])\n\n    # print(nodes[88])\n\n    # print(nodes[89])\n\n    # print(nodes[90])\n\n    # print(nodes[91])\n\n    # print(nodes[92])\n\n    # print(nodes[93])\n\n    # print(nodes[94])\n\n    # print(nodes[95])\n\n    # print(nodes[96])\n\n    # print(nodes[97])\n\n    # print(nodes[98])\n\n    # print(nodes[99])\n\n    # print(nodes[100])\n\n    # print(nodes[101])\n\n    # print(nodes[102])\n\n    # print(nodes[103])\n\n    # print(nodes[104])\n\n    # print(nodes[105])\n\n    # print(nodes[106])\n\n    # print(nodes[107])\n\n    # print(nodes[108])\n\n    # print(nodes[109])\n\n    # print(nodes[110])\n\n    # print(nodes[111])\n\n    # print(nodes[112])\n\n    # print(nodes[113])\n\n    # print(nodes[114])\n\n    # print(nodes[115])\n\n    # print(nodes[116])\n\n    # print(nodes[117])\n\n    # print(nodes[118])\n\n    # print(nodes[119])\n\n    # print(nodes[120])\n\n    # print(nodes[121])\n\n    # print(nodes[122])\n\n    # print(nodes[123])\n\n    # print(nodes[124])\n\n    # print(nodes[125])\n\n    # print(nodes[126])\n\n    # print(nodes[127])\n\n    # print(nodes[128])\n\n    # print(nodes[129])\n\n    # print(nodes[130])\n\n    # print"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_cost(num_list: list, n: int) -> int:\n        current_cost = 0\n        for i in range(n):\n            current_cost += num_list[i]\n            current_cost *= i\n        return current_cost\n\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    num_dict = {}\n    for i in range(1, n):\n        num_dict[i] = get_max_cost(a, n)\n        a[i] = 0\n    max_cost = -1\n    max_vertex = -1\n    for vertex in range(n):\n        cost = get_max_cost(a, n)\n        if cost > max_cost:\n            max_cost = cost\n            max_vertex = vertex\n    return str(max_cost)\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        moves = 0\n        for i in range(n):\n            if a[i] % k!= 0:\n                a[i] -= a[i] % k\n                moves += 1\n        print(moves)\n    return ''\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    x = 0\n    ans = 0\n    moves = 0\n    last = 0\n    for i in range(len(arr)):\n        if arr[i] % k == 0:\n            ans += 1\n            moves += last - i\n            last = i\n        elif i == len(arr) - 1:\n            moves += last - i\n            ans += 1\n    return str(ans) +'' + str(moves)"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    ans = 0\n    for i in range(len(a)):\n        if a[i] % k!= 0:\n            ans += a[i] // k\n            break\n    return str(ans)\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of moves required to obtain an array such that each of its elements is divisible by 'k'.\n    '''\n    a = stdin.split()\n    n, k = int(a[0]), int(a[1])\n    a = sorted(int(x) for x in a[2:])\n    count = 0\n    while a[0]!= 0:\n        if a[0] % k == 0:\n            a[0] *= k\n            a = sorted(a)\n            count += a.count(0)\n            if a[0] % k!= 0:\n                count += 1\n            a = sorted(a)\n        else:\n            a[0] += 1\n    return str(count)"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.split()[0])):\n        n = int(stdin.split()[1])\n        k = int(stdin.split()[2])\n        a = list(map(int, stdin.split()[3].split()))\n        x = 0\n        prev = 0\n        for i in range(1, n):\n            if a[i] % k == 0:\n                x += 1\n                prev = a[i]\n            if x == 1:\n                a[i] += prev\n        print(x)\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    moves = 0\n    for i in range(n):\n        if i == 0:\n            moves += (a[0] // k + 1)\n        else:\n            if a[i] % k == 0:\n                moves += a[i] // k\n                a[i] += 1\n            elif a[i] % k > 0:\n                moves += (a[i] // k + 1)\n            else:\n                moves += a[i] // k\n\n    return moves\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = 0\n    for i in range(n):\n        a[i] = a[i] - c\n        c = max(a[i], c)\n        if c % k!= 0:\n            break\n    return str(i + 1)\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    l = [int(x) for x in stdin.split()]\n    res = []\n    \n    for x in l:\n        if x % K == 0:\n            res.append(x)\n    if not res:\n        return -1\n    return min(res)\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    nums = list(map(int, stdin.strip().split()))\n\n    return min([num % k for num in nums])\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a = stdin[2].split()\n    moves = 0\n    for i in range(n):\n        if a[i] % k == 0:\n            a[i] = (a[i] // k)\n        else:\n            a[i] = (a[i] + k)\n        moves += a[i]\n    return moves\n\nprint(solution(input()))"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *g_l, g_r = [int(x) for x in stdin.split()]\n    g_l = sorted(g_l)\n    g_r = sorted(g_r)\n    g = g_l + g_r\n    s = 0\n    res = 0\n    \n    for i in range(n):\n        if s + g[i] <= g_r[i]:\n            s += g[i]\n            res += 1\n    return str(res)\n    "
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcf(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(a, b):\n        return a * b // gcf(a, b)\n\n    children, cookies = map(int, stdin.split())\n    cookies = sorted(cookies)\n    children = sorted(children)\n    children_content = 0\n    cookie_content = 0\n    total_cookies = 0\n\n    while children:\n        if cookie_content + cookies[0] <= children[0]:\n            children_content += 1\n            cookie_content += cookies.pop(0)\n        else:\n            cookies.pop(0)\n            cookie_content = 0\n        total_cookies += 1\n\n    return str(lcm(children_content, total_cookies))\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of cookies to be given out, who's greed factor should be no less than the other cookies' greed factor.\n    \"\"\"\n    stdin = list(map(int, stdin.split()))\n    children, cookies = stdin[0], stdin[1]\n    cookies = sorted(cookies)\n\n    def get_cookie_content_count(cookies, greed_factor):\n        \"\"\"Return the maximum number of cookies that are content with given greed factor.\n        \"\"\"\n        s, e = 0, len(cookies) - 1\n        while s <= e:\n            mid = (s + e) // 2\n            if cookies[mid] < greed_factor:\n                s = mid + 1\n            else:\n                e = mid - 1\n        return len(cookies[s:])\n\n    def solution(cookies, greed_factor):\n        \"\"\"Return the maximum number of cookies that are content with given greed factor.\n        \"\"\"\n        count = 0\n        for child in children:\n            count += get_cookie_content_count(cookies, child)\n        return count\n\n    print(solution(cookies, stdin[1]))"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, input = stdin.split('\\n')\n    n = int(input)\n    stdin = input.split()\n    g = []\n    s = []\n    for i in range(n):\n        g.append(int(stdin[i]))\n        s.append(int(stdin[i+n]))\n    g = sorted(g, reverse=True)\n    s = sorted(s)\n    ans = 0\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if s[j] >= g[i]:\n            ans += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return str(ans)\nprint(solution(input))\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin.split()\n    cookies = list(map(int, s[1:]))\n    children = list(map(int, s[0].split(\",\")))\n    children.sort(reverse=True)\n    cookies.sort(reverse=True)\n    max_children = 0\n    max_cookies = 0\n    for i in children:\n        max_children += 1\n        if max_children > i:\n            max_children = i\n            break\n    for i in cookies:\n        max_cookies += 1\n        if max_cookies > i:\n            max_cookies = i\n            break\n    return max_children * max_cookies\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size, num_children = map(int, stdin.split())\n    num_cookies = (size // num_children) + (size % num_children > 0)\n    return str(num_cookies)"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def search(cookies, g):\n        g_cnt = 0\n        res = 0\n        for size in cookies:\n            if size >= g:\n                g_cnt += 1\n                res = max(res, g_cnt)\n            else:\n                g_cnt = 0\n        return res\n\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    p = int(stdin[1])\n    cookies = list(map(int, stdin[2].split()))\n    g = list(map(int, stdin[3].split()))\n    if n == 0:\n        return 0\n    res = search(cookies, g[0])\n    for g_idx in range(1, len(g)):\n        res = max(res, search(cookies, g[g_idx]))\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, content_children = list(map(int, stdin.split()))\n    content_children = [i + 1 for i in range(content_children)]\n    size_children = list(map(int, stdin.split()))\n    size_children = sorted(size_children, reverse=True)\n    greed_children = []\n    while content_children:\n        greed_children.append(size_children.pop())\n        if not size_children:\n            break\n        if min(greed_children) < max(greed_children):\n            break\n        else:\n            greed_children.pop()\n    return str(len(greed_children))"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 7\n   ... 8\n   ... 9\n   ... 10\n   ... 11\n   ... 12\n   ... 13\n   ... 14\n   ... 15\n   ... 16\n   ... 17\n   ... 18\n   ... 19\n   ... 20\n   ... 21\n   ... 22\n   ... 23\n   ... 24\n   ... 25\n   ... 26\n   ... 27\n   ... 28\n   ... 29\n   ... 30\n   ... 31\n   ... 32\n   ... 33\n   ... 34\n   ... 35\n   ... 36\n   ... 37\n   ... 38\n   ... 39\n   ... 40\n   ... 41\n   ... 42\n   ... 43\n   ... 44\n   ... 45\n   ... 46\n   ... 47\n   ... 48\n   ... 49\n   ... 50\n   ... 51\n   ... 52\n   ... 53\n   ... 54\n   ... 55\n   ... 56\n   ... 57\n   ... 58\n   ... 59\n   ... 60\n   ... 61\n   ... 62\n   ... 63\n   ... 64\n   ... 65\n   ... 66\n   ... 67\n   ... 68\n   ... 69\n   ... 70\n   ... 71\n   ... 72\n   ... 73\n   ... 74\n   ... 75\n   ... 76\n   ... 77\n   ... 78\n   ... 79\n   ... 80\n   ... 81\n   ... 82\n   ... 83\n   ... 84\n   ... 85\n   ... 86\n   ... 87\n   ... 88\n   ... 89\n   ... 90\n   ... 91\n   ... 92\n   ... 93\n   ... 94\n   ... 95\n   ... 96\n   ... 97\n   ... 98\n   ... 99\n   ... 100\n   ... 101\n   ... 102\n   ... 103\n   ... 104\n   ... 105\n   ... 106\n   ... 107\n   ... 108\n   ... 109\n   ... 110\n   ... 111\n   ... 112\n   ... 113\n   ... 114\n   ... 115\n   ... 116\n   ... 117\n   ... 118\n   ... 119\n   ... 120\n   ... 121\n   ... 122\n   ... 123\n   ... 124\n   ... 125\n   ... 126\n   ... 127\n   ... 128\n   ... 129\n   ... 130\n   ... 131\n   ... 132\n   ... 133\n   ... 134\n   ... 135\n   ... 136\n   ... 137\n   ... 138\n   ... 139\n   ... 140\n   ... 141\n   ... 142\n   ... 143\n   ... 144\n   ... 145\n   ... 146\n   ... 147\n   ... 148\n   ... 149\n   ... 150\n   ... 151\n   ... 152\n   ... 153\n   ... 154\n   ... 155\n   ... 156\n   ... 157\n   ... 158\n   ... 159\n   ... 160\n   ... 161\n   ... 162\n   ... 163\n   ... 164\n   ... 165\n   ... 166\n   ... 167\n   ... 168\n   ... 169\n   ... 170\n   ... 171\n   ... 172\n   ... 173\n   ... 174\n   ... 175\n   ... 176\n   ... 177\n   ... 178\n   ... 179\n   ... 180\n   ... 181\n   ... 182\n   ... 183\n   ... 184\n   ... 185\n   ... 186\n   ... 187\n   ... 188\n   ... 189\n   ... 190\n   ... 191\n   ... 192\n   ... 193\n   ... 194\n   ... 195\n   ... 196\n   ... 197\n   ... 198\n   ... 199\n   ... 200\n   ... 201\n   ... 202\n   ... 203\n   ... 204\n   ... 205\n   ... 206\n   ... 207\n   ... 208\n   ... 209\n   ... 210\n   ... 211\n   ... 212\n   ... 213\n   ... 214\n   ... 215\n   ... 216\n   ... 217\n   ... 218\n   ... 219\n   ... 220\n   ... 221\n   ... 222\n   ... 223\n   ... 224\n   ... 225\n   ... 226\n   ... 227\n   ... 228\n   ... 229\n   ... 230\n   ... 231\n   ... 232\n   ... 233\n   ... 234\n   ... 235\n   ... 236\n   ... 237\n   ... 238\n   ... 239\n   ... 240\n   ... 241\n   ... 242\n   ... 243\n   ... 244\n   ... 245\n   ... 246\n   ... 247\n   ... 248\n   ... 249\n   ... 250\n   ... 251\n   ... 252\n   ... 253\n   ... 254\n   ... 255\n   ... 256\n   ... 257\n   ... 258\n   ... 259\n   ... 260\n   ... 261\n   ... 262\n   ... 263\n   ... 264\n   ... 265\n   ... 266\n   ... 267\n   ... 268\n   ... 269\n   ... 270\n   ... 271\n   ... 272\n   ... 273\n   ... 274\n   ... 275\n   ... 276\n   ... 277\n   ... 278\n   ... 279\n   ... 280\n   ... 281\n   ... 282\n   ... 283\n   ... 284\n   ... 285\n   ... 286\n   ... 287\n   ... 288\n   ... 289\n   ... 290\n   ... 291\n   ... 292\n   ... 293\n   ... 294\n   ... 295\n   ... 296\n   ... 297\n   ... 298\n   ... 299\n   ... 300\n   ... 301\n   ... 302\n   ... 303\n   ... 304\n   ... 305\n   ... 306\n   ... 307\n   ... 308\n   ... 309\n   ... 310\n   ... 311\n   ... 312\n   ... 313\n   ... 314\n   ... 315\n   ... 316\n   ... 317\n   ... 318\n   ... 319\n   ... 320\n   ... 321\n   ... 322\n   ... 323\n   ... 324\n   ... 325\n   ... 326\n   ... 327\n   ... 328\n   ... 329\n   ... 330\n   ... 331\n   ... 332\n   ... 333\n   ... 334\n   ... 335\n   ... 336\n   ... 337\n   ... 338\n   ... 339\n   ... 340\n   ... 341\n   ... 342\n   ... 343\n   ... 344\n   ... 345\n   ... 346\n   ... 347\n   ... 348\n   ... 349\n   ... 350\n   ... 351\n   ... 352\n   ... 353\n   ... 354\n   ... 355\n   ... 356\n   ... 357\n   ... 358\n   ... 359\n   ... 360\n   ... 361\n   ... 362\n   ... 363\n   ... 364\n   ... 365\n   ... 366\n   ... 367\n   ... 368\n   ... 369\n   ... 370\n   ... 371\n   ... 372\n   ... 373\n   ... 374\n   ... 375\n   ... 376\n   ... 377\n   ... 378\n   ... 379\n   ... 380\n   ... 381\n   ... 382\n   ... 383\n   ... 384\n   ... 385\n   ... 386\n   ... 387\n   ... 388\n   ... 389\n   ... 390\n   ... 391\n   ... 392\n   ... 393\n   ... 394\n   ... 395\n   ... 396\n   ... 397\n   ... 398\n   ... 399\n   ... 400\n   ... 401\n   ... 402\n   ... 403\n   ... 404\n   ... 405\n   ... 406\n   ... 407\n   ... 408\n   ... 409\n   ... 410\n   ... 411\n   ... 412\n   ... 413\n   ... 414\n   ... 415\n   ... 416\n   ... 417\n   ... 418\n   ... 419\n   ... 420\n   ... 421\n   ... 422\n   ... 423\n   ... 424\n   ... 425\n   ... 426\n   ... 427\n   ... 428\n    "
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = sys.stdin.read()\n    foods, chils = list(map(int, stdin.split())), []\n\n    for _ in range(len(foods)):\n        food, *chil = list(map(int, stdin.split()))\n        chils.append([food, chil])\n\n    # Sort by the size of the cookie\n    chils.sort(key=lambda x: x[0], reverse=True)\n    chils.sort(key=lambda x: x[1], reverse=True)\n\n    children, cookies = 0, 0\n\n    # Check if the child has enough to fulfill the cookie.\n    for child in chils:\n        if child[1] and cookies + child[0] <= child[1][0]:\n            child[1][0] = cookies + child[0]\n            children += 1\n        cookies += child[0]\n\n    print(children)\n    return\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split(\"\\n\")\n    output = []\n\n    def helper(k):\n        if k == 1:\n            output.append(1)\n            return\n        if k == 2:\n            output.append(1)\n            output.append(1)\n            return\n        output.append(1)\n        helper(k-1)\n        for i in range(k - 2):\n            output.append(output[-1] + output[-2])\n        output.append(1)\n        helper(k-2)\n\n    helper(int(input[0]))\n    return output\n\n\nstdin = \"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\"\"\"\nprint(solution(stdin))\n\n\"\"\"\nRuntime: 28 ms, faster than 99.37% of Python3 online submissions for Pascal's Triangle.\nMemory Usage: 14.5 MB, less than 97.55% of Python3 online submissions for Pascal's Triangle.\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pascal = [1]\n    i = 1\n    while i <= N:\n        temp = [1]\n        for j in range(i - 1):\n            temp.append(pascal[j] + pascal[j + 1])\n        temp.append(1)\n        pascal = temp\n        i += 1\n    return \" \".join(map(str, pascal[:N]))\n\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,1]\n    else:\n        t = [1]\n        for i in range(1,n):\n            tmp = [1]\n            for j in range(1,i+1):\n                tmp.append(t[j]+t[i-j])\n            t = tmp + t\n        return tmp\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ..."
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(str(i) for i in pascal_triangle(int(stdin)))\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [1]\n    for i in range(1, n + 1):\n        curr = 0\n        for j in range(i, 0, -1):\n            curr += arr[j - 1]\n            arr.append(curr)\n        arr.append(1)\n    return '\\n'.join([str(i) for i in arr])\n\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    triangle = [[1] * (i + 1) for i in range(n)]\n    for i in range(n - 1):\n        for j in range(i + 1):\n            triangle[i][j] = triangle[i - 1][j] + triangle[i - 1][j + 1]\n    return '\\n'.join(' '.join(map(str, row)) for row in triangle)\n\"\"\"\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin, 2)).count(\"1\"))\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bit_count = 0\n    for i in stdin:\n        if i == '1':\n            bit_count += 1\n    return bit_count\n\n\n'''\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return str(count)\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    bit = 0\n    for i in range(32):\n        if stdin & (1 << i):\n            bit += 1\n    return str(bit)\n    \"\"\"\n    return str(bin(int(stdin)).count('1'))\n\nn = \"00000000000000000000000000001011\"\nprint(solution(n))"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin).count('1')"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nprint(solution('00000000000000000000000000001011'))\nprint(solution('00000000000000000000000010000000'))\nprint(solution('11111111111111111111111111111101'))"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    for i in range(len(stdin)):\n        if i == len(stdin) - 1:\n            return stdin.copy()\n        if stdin[i]!= 9:\n            return stdin[0:i] + [stdin[i] + 1] + stdin[i+1:len(stdin)]\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split(\" \")\n    int_list = []\n    for i in num_list:\n        int_list.append(int(i))\n    for i in range(len(int_list)):\n        int_list[i] = int_list[i] + 1\n    return str(int_list)\nprint(solution(input()))\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    num = nums.pop(0)\n    carry = 1\n    while nums:\n        num += carry\n        carry = num // 10\n        num %= 10\n        nums.pop(0)\n    if carry:\n        num += 1\n    return str(num)\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split(\",\")\n    num_list = []\n    for number in numbers:\n        if not number:\n            continue\n        num_list.append(int(number))\n    num_list.append(int(1))\n    num_list.sort(reverse=True)\n    number = int(''.join(str(n) for n in num_list))\n    return str(number)"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, map(int, stdin.split())))\n    \n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    while stdin:\n        res.append(str(int(stdin[0])+1))\n        stdin = stdin[1:]\n    return ''.join(res)"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #s = \"\"\n    #s = int(stdin) + 1\n    #return str(s)\n    return list(map(int, stdin))\n    #return list(map(int, stdin))"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    array = stdin.split()\n    output = []\n    for i in array:\n        output.append(str(int(i) + 1))\n    return''.join(output)\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return max(int(a) + int(b), int(a) - int(b), int(a) * int(b))"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))\n\nprint(solution(input()))"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"maximum among {} and {}, is {}, and {}, and {}\".format(\n        A + B,\n        A - B,\n        A * B,\n        max(A + B, A - B, A * B),\n        max(A + B, A - B, A * B),\n    )\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return max(A+B, A-B, A*B)\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return max(a+b, a-b, a*b)"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(max(int(x) + int(y) for x, y in (stdin.split(),)))\n    print(max(int(x) - int(y) for x, y in (stdin.split(),)))\n    print(max(int(x) * int(y) for x, y in (stdin.split(),)))\n    return max(int(x) + int(y) for x, y in (stdin.split(),))"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = map(int, stdin.split())\n    return str(max(a+b, a-b, a*b))"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    print(max(a + b, a - b, a * b))\nsolution(input())\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    print(a + b)\n    print(a - b)\n    print(a * b)\n    if a >= b:\n        print(a + b)\n    elif b >= a:\n        print(b + a)\n    else:\n        print(a - b)"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x = [[int(i) for i in input().split()] for _ in range(n)]\n    x = sorted(x, key=lambda x: x[0]**2 + x[1]**2)\n    cnt = 0\n    for i in range(n):\n        if x[i][0]**2 + x[i][1]**2 <= d**2:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i, p in enumerate(points):\n        for j, q in enumerate(points):\n            if i == j:\n                continue\n            if abs(p[0] - q[0]) + abs(p[1] - q[1]) <= d:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    N, D = map(int, input_values[0].split())\n    X_arr = list(map(int, input_values[1].split()))\n    Y_arr = list(map(int, input_values[2].split()))\n    X_arr = [(X_arr[i], Y_arr[i]) for i in range(N)]\n    output = \"3\"\n    return output"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        points.append((x, y))\n\n    points = sorted(points, key=lambda point: point[0] ** 2 + point[1] ** 2)\n    print(len(points))\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = []\n    for _ in range(N):\n        points.append(list(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0]**2+x[1]**2)\n    return str(len([point for point in points if abs(point[0]) + abs(point[1]) <= D]))\n\ndef"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    distances = []\n    points.sort(key=lambda p: (p[0]**2 + p[1]**2))\n    for i in range(1, N):\n        d = (points[i][0] - points[i - 1][0])**2 + (points[i][1] - points[i - 1][1])**2\n        distances.append(d)\n    points.sort(key=lambda p: (-p[0]**2 - p[1]**2))\n    for i in range(1, N):\n        d = (points[i][0] - points[i - 1][0])**2 + (points[i][1] - points[i - 1][1])**2\n        distances.append(d)\n    points.sort(key=lambda p: (p[0]**2 + p[1]**2))\n    for i in range(1, N):\n        d = (points[i][0] - points[i - 1][0])**2 + (points[i][1] - points[i - 1][1])**2\n        distances.append(d)\n    points.sort(key=lambda p: (-p[0]**2 - p[1]**2))\n    return len(distances)\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.rstrip().split()\n    N, D = int(input[0]), int(input[1])\n    points = []\n    for i in range(N):\n        points.append([int(x) for x in input[i * 2 + 2].split()])\n    count = 0\n    for i in range(len(points)):\n        count += points[i][0]**2 + points[i][1]**2 < D**2\n    return str(count)\n\nimport atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n\ndef"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_points(stdin))\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [[int(i) for i in stdin.split()] for _ in range(N)]\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) <= D:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    points = []\n    for i in range(N):\n        x, y = list(map(int, stdin.split()))\n        points.append((x, y))\n    points = sorted(points, key=lambda p: (p[0] ** 2 + p[1] ** 2) ** (1 / 2))\n    cnt = 0\n    for i in range(N):\n        if abs(points[i][0] ** 2 + points[i][1] ** 2) <= D:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    while N > 0:\n        if N % 10 == 0:\n            return \"No\"\n        N //= 10\n    return \"Yes\""
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % sum(map(int, list(str(n)))) == 0:\n        print('Yes')\n    else:\n        print('No')\n    return"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1 and n < 10 ** 8:\n        if n == sum(list(map(int, str(n)))) % n:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if N % sum([int(i) for i in str(N)]) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0 or n == 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if (N % sum(list(map(int, list(str(N)))))):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'No'\n    d = []\n    for i in str(n):\n        d.append(int(i))\n    if sum(d) % 2 == 0:\n        return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n % sum(int(c) for c in str(n)) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n    \n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    f = lambda x: sum(int(d) for d in str(x))\n    if N % f(N) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(input())\n\n\"\"\"\n\nN = int(input())\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total = 0\n    while N > 0:\n        total += (N % 10)\n        N = int(N / 10)\n    return 'Yes' if total % 2 == 0 else 'No'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split('\\n')\n    n = int(stdin.pop(0))\n    line1 = stdin.pop(0).split(' ')\n    line2 = stdin.pop(0).split(' ')\n    coords = []\n    visits = []\n    for i in range(n):\n        coords.append(int(line1[i]))\n        visits.append(int(line2[i]))\n    costs = []\n    for i in range(n):\n        costs.append(abs(coords[i] - coords[i - 1]) + abs(visits[i] - visits[i - 1]))\n    costs.append(0)\n    costs.append(0)\n    total_cost = 0\n    for i in range(1, n - 1):\n        total_cost += costs[i]\n    print(total_cost)\n    for i in range(1, n - 1):\n        costs[i] = costs[i] - costs[i - 1]\n    return total_cost\n\n\ndef"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()))\n\n    def total_cost(num_spot: int, a: int, b: int) -> int:\n        return abs(a - b) * num_spot\n\n    def answer(num_spot: int, a: int, b: int) -> int:\n        if num_spot == 1:\n            return total_cost(num_spot, a, b)\n        if num_spot == 2:\n            return total_cost(num_spot, a, b) + total_cost(num_spot, b, a)\n        if num_spot == 3:\n            return total_cost(num_spot, a, b) + total_cost(num_spot, b, a) + total_cost(num_spot, a, b)\n\n    return \"\\n\".join(map(lambda x: str(answer(int(x[0]), int(x[1]), int(x[2]))), inputs))"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    ans = 0\n    for i in range(N):\n        c = 0\n        for j in range(i+1, N):\n            c += abs(A[i] - A[j])\n        ans += c\n    for i in range(N):\n        c = 0\n        for j in range(N):\n            if i!= j:\n                c += abs(A[i] - A[j])\n        ans += c\n    return ans"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    if N < 2:\n        raise Exception('N < 2')\n\n    A = list(map(int, stdin.split()[1:]))\n    res = 0\n    i = 0\n    while i < N:\n        if A[i]!= i:\n            if A[i + 1] == A[i]:\n                i += 1\n                continue\n            cost = abs(A[i] - A[i + 1])\n            if i!= 0:\n                cost += A[i - 1]\n            if i!= N - 1:\n                cost += A[i + 2]\n            res += cost\n        i += 1\n    return res\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    remaining_spots = n\n    cost = 0\n    while remaining_spots > 0:\n        current_spot = a.index(0)\n        cost += abs(a[current_spot] - a[(current_spot - 1) % n])\n        remaining_spots -= 1\n        a[current_spot], a[(current_spot - 1) % n] = a[(current_spot - 1) % n], a[current_spot]\n    print(cost)\n    return\nsolution(input())"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    nums = stdin.split()\n    \n    c = 0\n    for i in range(N):\n        a, b = nums[i].split()\n        a = int(a)\n        b = int(b)\n        c = c + abs(a-b)\n    \n    return str(c)\n    \n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2 or n > 10_000_000:\n        raise ValueError\n\n    s = input().split()\n    a = list(map(int, s))\n    if len(a)!= n:\n        raise ValueError\n\n    k = len(a)\n    dp = [0] * k\n    for i in range(k - 2, -1, -1):\n        dp[i] = a[i] + min(dp[i + 1], dp[i + 2])\n\n    ans = min(dp)\n    return str(ans)\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    cost = [int(stdin.split()[1]) for _ in range(N)]\n    cancel = []\n    for i, c in enumerate(cost):\n        if i in cancel:\n            continue\n        total_cost = 0\n        for ci in range(i):\n            if cost[ci] > c:\n                total_cost += cost[ci] - c\n            elif cost[ci] < c:\n                total_cost += c - cost[ci]\n        for ci in range(i+1, N):\n            if cost[ci] > c:\n                total_cost += cost[ci] - c\n            elif cost[ci] < c:\n                total_cost += c - cost[ci]\n        print(total_cost)\n    return stdin"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N, N)\n    for i in range(N):\n        print(N, N)\n    print(N, N)\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    al: list = list(map(int, stdin.split()))\n    al.sort()\n    return '\\n'.join(str(al[i] + (al[i + 1] if i + 1 < n else 0)) for i in range(n))\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin == vowels:\n        return stdin\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if input in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'vowel' if stdin in 'aeiou' else 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    for letter in stdin:\n        if letter.lower() in vowels:\n            print(letter)\n        else:\n            print(letter.upper())\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in stdin:\n        if i.lower() in vowels:\n            print(f'vowel')\n            break\n        else:\n            print(f'consonant')\n        break\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    letter = stdin[0]\n    if letter in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    if stdin in vowels:\n        print(\"vowel\")\n    else:\n        print(\"consonant\")\n    return \"\"\n\n\nsolution(input())\n\nNotes:\n\nTo make use of a string method, such as lower(), we can use the built-in function str.lower() as follows:\n\nprint(str.lower(input()))\n\nNote that the above is equivalent to the following. We could also use the built-in function ord() and chr() to accomplish this:\n\nprint(ord(input()))\nprint(chr(ord(input())))\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    if stdin.lower() in vowels:\n        return \"vowel\"\n    return \"consonant\"\n\nsolution(stdin)"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1, n):\n        if stdin[i] == 'B':\n            for j in range(i-1, -1, -1):\n                if stdin[j] == 'W':\n                    dp[i][i] = dp[i-1][i-1] + 1\n                    break\n                else:\n                    dp[i][i] = dp[i-1][i]\n        else:\n            for j in range(i-1, -1, -1):\n                if stdin[j] == 'B':\n                    dp[i][i] = dp[i-1][i-1] + 1\n                    break\n                else:\n                    dp[i][i] = dp[i-1][i]\n    for j in range(i, n):\n        if stdin[j] == 'W':\n            for i in range(j+1, n):\n                if stdin[i] == 'B':\n                    dp[i][j] = dp[i-1][j] + 1\n                    break\n                else:\n                    dp[i][j] = dp[i][j-1]\n        else:\n            for i in range(j+1, n):\n                if stdin[i] == 'W':\n                    dp[i][j] = dp[i-1][j] + 1\n                    break\n                else:\n                    dp[i][j] = dp[i][j-1]\n    return dp[-1][-1]\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - stdin.count('W')\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin\n    input_line = input_line.split()\n    input_line = \"\".join(input_line)\n    input_line = input_line.replace(\"B\", \"1\")\n    input_line = input_line.replace(\"W\", \"0\")\n    input_line = list(input_line)\n\n    return \"\".join(input_line)"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    \n    count = 0\n    \n    for i in range(n - 1):\n        if s[i] == \"B\" and s[i + 1] == \"W\":\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[::-1]\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i] == 'B':\n            if i + 1 < n and s[i + 1] == 'W':\n                s = s[:i] + 'B' + s[i + 1:]\n                i -= 1\n                n += 1\n        elif s[i] == 'W':\n            if i - 1 >= 0 and s[i - 1] == 'B':\n                s = s[:i] + 'W' + s[i + 1:]\n                i += 1\n                n += 1\n        i += 1\n    print(len(s) - 1)\n    return s[::-1]\n\nsolution(\"BBBWW\")\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    rows = len(s)\n    cols = len(s[0])\n    if rows > cols:\n        # vertical\n        return rows - cols\n    else:\n        # horizontal\n        return cols - rows\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    number_of_stones = len(input_string)\n    first_white_index = next(i for i in range(number_of_stones) if input_string[i] == \"W\")\n    last_black_index = next(i for i in range(number_of_stones) if input_string[i] == \"B\")\n    if first_white_index > last_black_index:\n        number_of_new_stones = first_white_index - last_black_index - 1\n        return number_of_new_stones\n    elif first_white_index < last_black_index:\n        number_of_new_stones = last_black_index - first_white_index - 1\n        return number_of_new_stones\n    elif first_white_index == last_black_index:\n        return 0"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == \"B\":\n            stack.append(char)\n        elif char == \"W\":\n            if stack:\n                stack.pop()\n            else:\n                continue\n    return str(len(stack))\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    s = sorted(board)\n    black_count = 0\n    white_count = 0\n    black_count = 0\n    while True:\n        if black_count == len(s):\n            break\n        elif black_count + white_count == len(s):\n            break\n        if s[black_count] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    return str(len(s) - black_count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    result = ''\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            result += '1'\n        else:\n            result += '0'\n    return result\nprint(solution(input()))\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yes' if (a * a + b * b == a + b) else 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = int(a**0.5)\n    m = int(b**0.5)\n    return 'Yes' if (n*n == a + b or m*m == a + b) else 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * a == b + b:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    if a*a == b + b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a,b = map(int, stdin.split(\" \"))\n    if a*a+b*b == a+b*b:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if isSquare(a, b):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yes' if str(a*b) == str(a+b) else 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    a = a*a\n    b = b*b\n    if a + b == (a*a) + (b*b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Processes the input and prints the output.\"\"\"\n    a, b = map(int, stdin.split())\n    if str(a * a + b * b) == str(a + b):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if int(a) ** 2 + int(b) ** 2 == int(a) + int(b):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    count = 0\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin.pop(0))\n    nums = list(map(int, stdin.pop().split()))\n    for i in range(N):\n        if nums[i]!= N + 1:\n            nums[i] += 1\n            count += 1\n        elif nums[i] == N + 1:\n            nums[i] -= 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if n <= 3:\n        return \"0\"\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        dp[i][i] = arr[i]\n        if i > 1:\n            dp[i][i-1] = arr[i-1]\n        if i > 2:\n            dp[i][i-2] = arr[i-2]\n        for j in range(i-3, -1, -1):\n            dp[i][j] = max(dp[i][j+1], dp[i][j+2], dp[i][j+3]) + arr[i]\n    return str(dp[n-1][n-1])"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.strip().split()\n    N = int(N)\n    sequence = stdin.strip().split()\n    sequence = [int(i) for i in sequence]\n    sequence.sort()\n    result = 0\n    count = 1\n    for i in range(1,N):\n        if sequence[i-1]<sequence[i]:\n            result += 1\n            count = 1\n        else:\n            count += 1\n        if count > result:\n            result = count\n    return str(result)"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    max_value = 0\n    seq_len = len(seq)\n    for i in range(1, seq_len + 1):\n        result = 0\n        for j in range(seq_len - i + 1):\n            result += seq[j]\n        if result > max_value:\n            max_value = result\n    return str(max_value)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seq = list(map(int, stdin.split()))\n    c = Counter(seq)\n    maxx = max(c.values())\n    print(maxx)\n    return maxx\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = map(int, stdin.split())\n    return str(max(len(list(filter(lambda x: x == sequence[i], sequence))) for i in range(n)))\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(3)] for _ in range(n + 1)]\n\ndp[0][0], dp[0][1], dp[0][2] = 1, 1, 1\nfor i in range(1, n + 1):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][2])\n    dp[i][2] = max(dp[i - 1][1] + 1, dp[i - 1][2])\n\nprint(max(max(dp[n]), 0))\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = [int(x) for x in stdin.split()]\n\n    # Choose X\n    X = max(sequence)\n\n    # Count # of i such that a_i=X\n    count = 0\n    for x in sequence:\n        if x == X:\n            count += 1\n\n    # Print the result\n    print(count)\n    return 'OK'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    return str(max(i for i in seq if i == seq[seq.index(i) + 1]))\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    data = stdin.split()\n    myList = []\n    for i in range(n):\n        myList.append(int(data[i]))\n    for x in range(1, 10):\n        count = 0\n        for i in range(n):\n            if myList[i] == x:\n                count += 1\n        print(count)\n    return\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    return str(int(A * (A - 1) / 2 + N * (N - 1) / 2))"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = int(stdin.strip())\n    b = n * n\n    if b!= a:\n        return \"0\"\n    return str(b - a)\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = int(lines[1])\n\n    print(n * n)\n\nsolution()\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n\n    def row(i: int) -> int:\n        row = 1\n        for j in range(i):\n            row += row\n        return row\n\n    def col(i: int) -> int:\n        col = 1\n        for j in range(i):\n            col += col\n        return col\n\n    return str(row(N) - col(N))\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = int(stdin.split('\\n')[1])\n    return str(N * N - A)"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = int(stdin.strip())\n    return str(N * N - A)"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n\n    if N < 1 or N > 100:\n        raise Exception('Invalid N value')\n    if A < 0 or A > N ** 2:\n        raise Exception('Invalid A value')\n\n    # We have an N \\times N square grid.\n    square_size = N\n    num_squares = N ** 2\n    white_squares = N ** 2 - A\n    num_black_squares = num_squares - white_squares\n\n    # We will paint each square in the grid either black or white.\n    if num_black_squares > 0:\n        return str(num_black_squares)\n    else:\n        return str(white_squares)\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\"\\n\")\n    N = stdin_arr[0]\n    A = stdin_arr[1]\n    N = int(N)\n    A = int(A)\n    # Your code here\n    return str(ans)\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    input_N, input_A = stdin[0].split(\" \")\n    input_N = int(input_N)\n    input_A = int(input_A)\n\n    white_count = 0\n    square_count = 0\n    for i in range(1, input_N + 1):\n        for j in range(1, input_N + 1):\n            square_count += 1\n            if i == j:\n                continue\n\n            if square_count == input_A:\n                white_count += 1\n                square_count = 0\n            if white_count == input_N:\n                return str(white_count)\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Day 10: Surrounded Regions ---\n    Surrounded Regions are a classic problem in the computer science\n    stacks and queues problems. There are various rules and\n    assumptions that one must obey to properly implement and use stacks\n    and queues. (Source: https://en.wikipedia.org/wiki/Surrounded_Regions_problem)\n\n    Imagine a scenario: You are given a m \\times n grid, and want to paint it\n    all white. The only constraint is that adjacent cells should be adjacent.\n\n    You can assume that every cell will be either white or black.\n\n    The first step of this puzzle is to \"surround\" all of the white cells.\n    To do so, consider each of the four adjacent cells, which are the four\n    corners of the square. Since the cells are adjacent, there will be exactly\n    four adjacent cells. After \"surrounding\", each cell will be painted the same color.\n\n    But, you don't want all cells white. For example, if the input grid is\n    the following, you should paint it all white, instead:\n\n        1   2   1\n        2   1   1\n        1   1   1\n\n    After \"surrounding\" it, the following input grid would look like this:\n        3   3   1\n        3   2   1\n        3   1   1\n\n    By this logic, in the next step, it would be possible to paint every\n    white cell white.\n\n    Paint the grid so that the resulting grid will have exactly A white cells.\n\n    Input\n        The first line of the input consists of a single integer, N\n        (2 \\leq N \\leq 100). The following N lines contain the grid in the form of N \\times N white and black characters. Each white character is either '1' or '0' and corresponds to a black square. Each black character is either '1' or '0' and corresponds to a white square.\n\n    Output\n        Output a single line containing a single integer, A\n        (0 \\leq A \\leq N^2) representing the number of white squares that will be painted black.\n    \"\"\"\n    n = int(stdin.readline())\n    m = 0\n    for _ in range(n):\n        m += n\n    A = int(stdin.readline())\n    return str(m - A)\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    a, b, c = line[0], line[1], line[2]\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = map(int, stdin.split())\n    return \"YES\" if b-a == c-b else \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return \"YES\" if b - a == c - b else \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if (b - a) == (c - b):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a + b == c or a + c == b or b + c == a:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 2 * max(a, b, c):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a*(b-c) == a*(c-b) and a*(c-b) == a*(b-c):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        number = int(stdin)\n        if str(number).find('9') >= 0:\n            return 'Yes'\n        else:\n            return 'No'\n    except ValueError:\n        return 'Invalid Input'"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if int(n) % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    n = int(input_str)\n\n    # Store the number of one's digit in the variable digit1.\n    digit1 = n % 10\n\n    # Calculate the number of zeros in the number n.\n    zero_count = int(n / 10) % 10\n\n    # Check if n has a one in its first digit.\n    if digit1!= 0:\n        return \"Yes\"\n\n    # Check if n has zeros in its first digit.\n    if zero_count > 1:\n        return \"No\"\n\n    return \"Yes\" if digit1 == 0 else \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if 9 in f\"{N:0>9}\" else 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.strip()\n    s = s.split()\n    s = int(s[0])\n    if str(9) in str(s):\n        return \"Yes\"\n    else:\n        return \"No\"\n    # n = int(input())\n    # if str(9) in str(n):\n    #     return \"Yes\"\n    # else:\n    #     return \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    decimal: str = stdin\n    is_number_in_decimal_notation: bool = True\n    if len(decimal)!= 2:\n        is_number_in_decimal_notation = False\n    for digit in decimal:\n        if not (digit.isdigit() and int(digit) <= 9):\n            is_number_in_decimal_notation = False\n    if is_number_in_decimal_notation:\n        if int(decimal) == 9:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\n\nsolution(input())"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_str = str(N)\n    # print(N_str)\n    # print(N_str[0])\n    if 9 in N_str[0]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\"\n\nsolution()\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n // 100 == 9:\n        print('Yes')\n    else:\n        print('No')\n    return \"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if '9' in str(n) else 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    for i in n:\n        if '9' in i:\n            print('Yes')\n            break\n        else:\n            print('No')"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _, N, M, X, *A_in = stdin.split()\n    A_in = [int(x) for x in A_in]\n    A_in.sort()\n\n    # create a lookup table for each square\n    lookup = dict()\n    for i, a in enumerate(A_in):\n        lookup[i] = a\n    # M is the number of toll gates\n    for i in range(M):\n        lookup[i] = X\n\n    # create the lookup table\n    for i in range(M):\n        lookup[i] = lookup[i] - 1\n\n    min_cost = 0\n    for j in range(M, N):\n        min_cost += 1\n        if lookup[j] == X:\n            continue\n\n        if lookup[j] < X:\n            lookup[j] = lookup[j] + 1\n            min_cost += 1\n\n    return str(min_cost)\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = stdin.split()\n    N = int(N)\n    M = int(M)\n    X = int(X)\n    tolls = []\n    for i in range(M):\n        a, b = stdin.split()\n        a = int(a)\n        b = int(b)\n        tolls.append((a, b))\n\n    tolls.sort(key=lambda x: x[1], reverse=True)\n    tolls.sort(key=lambda x: x[0])\n\n    cost = 0\n    tolled = 0\n    for i in range(N - 1):\n        if i == X:\n            return cost\n        for j in range(len(tolls)):\n            toll = tolls[j]\n            if toll[0] <= i and i < toll[1]:\n                cost += 1\n                tolled += 1\n                if tolled == len(tolls):\n                    tolls.sort(key=lambda x: x[1])\n                    tolls.sort(key=lambda x: x[0])\n                    tolled = 0\n                    cost += 1\n                break\n            if tolled == len(tolls):\n                tolls.sort(key=lambda x: x[1])\n                tolls.sort(key=lambda x: x[0])\n                tolled = 0\n                cost += 1\n\n    return cost\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m, x = stdin.split()\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    a = [int(a_i) for a_i in stdin.split()]\n\n    min_cost = 0\n    for i in range(m):\n        min_cost += a[i]\n    for i in range(m, n):\n        if i!= x:\n            min_cost += 1\n    return str(min_cost)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, *a = list(map(int, stdin.split()))\n    r = n + 1\n    vis = {}\n    res = r\n    for i in range(1, m+1):\n        vis[a[i-1]] = i\n    q = collections.deque()\n    q.append((x, 0))\n    while q:\n        s, c = q.popleft()\n        if s == 0:\n            res = min(res, c)\n        elif s == r:\n            res = min(res, c+1)\n        else:\n            for i in range(n+1):\n                if i not in vis:\n                    vis[i] = 1\n                    q.append((i, c+1))\n    return str(res)"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, x = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    route = [[x, float('inf')]]\n    for i in range(1, n + 1):\n        route.append([i, costs[i - 1]])\n    for i in range(1, n + 1):\n        if i!= x:\n            route.append([i, costs[i - 1]])\n    route = sorted(route, key=lambda x: x[1])\n    curr_cost = 0\n    for i in range(1, n + 1):\n        if route[i][1]!= float('inf'):\n            curr_cost += route[i][1]\n        else:\n            if i!= n:\n                curr_cost += costs[i]\n    return str(curr_cost)\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3 3\")\n    1\n    >>> solution(\"5 5 7\")\n    7\n    >>> solution(\"8 3 4\")\n    8\n    >>> solution(\"8 8 5\")\n    8\n    >>> solution(\"7 6 7\")\n    7\n    \"\"\"\n    N, M, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    cost = 0\n    index = 0\n    visited = set()\n\n    while index not in visited and index < N:\n        visited.add(index)\n        cost += 1\n        for i in range(M):\n            if (A[i] == index + 1) and (index + 1!= X):\n                index = A[i]\n                cost += 1\n                break\n\n    return cost\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = list(map(int, stdin.split(\" \")))\n    graph = {i: set() for i in range(n + 1)}\n    tolls = set()\n    for i in range(m):\n        a, b = list(map(int, stdin.split(\" \")))\n        tolls.add(a)\n        tolls.add(b)\n        graph[a].add(b)\n        graph[b].add(a)\n    queue = [(x, 0)]\n    visited = set()\n    visited.add(x)\n    while queue:\n        cur_node, cost = queue.pop(0)\n        visited.add(cur_node)\n        for neighbor in graph[cur_node]:\n            if neighbor not in visited:\n                queue.append((neighbor, cost + 1))\n    return str(min(cost for _, cost in queue))"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = stdin.split()\n    n, m, x = int(n), int(m), int(x)\n    cost_list = []\n    for i in range(m + 1):\n        if i == 0:\n            cost_list.append(x)\n        else:\n            cost_list.append(i * x)\n    cost = 0\n    for i in range(n):\n        cost += min(cost_list)\n        cost_list.remove(min(cost_list))\n    return str(cost)"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    # ex. 1\n    # min_cost = 0\n    #\n    # # ex. 2\n    # min_cost = 1\n    #\n    # # ex. 3\n    # min_cost = 2\n    #\n    # # ex. 4\n    # min_cost = 3\n    #\n    # # ex. 5\n    # min_cost = 4\n    #\n    # # ex. 6\n    # min_cost = 5\n    #\n    # # ex. 7\n    # min_cost = 6\n    #\n    # # ex. 8\n    # min_cost = 7\n    #\n    # # ex. 9\n    # min_cost = 8\n    #\n    # # ex. 10\n    # min_cost = 9\n    #\n    # # ex. 11\n    # min_cost = 10\n    #\n    # # ex. 12\n    # min_cost = 11\n    #\n    # # ex. 13\n    # min_cost = 12\n    #\n    # # ex. 14\n    # min_cost = 13\n    #\n    # # ex. 15\n    # min_cost = 14\n    #\n    # # ex. 16\n    # min_cost = 15\n    #\n    # # ex. 17\n    # min_cost = 16\n    #\n    # # ex. 18\n    # min_cost = 17\n    #\n    # # ex. 19\n    # min_cost = 18\n    #\n    # # ex. 20\n    # min_cost = 19\n    #\n    # # ex. 21\n    # min_cost = 20\n    #\n    # # ex. 22\n    # min_cost = 21\n    #\n    # # ex. 23\n    # min_cost = 22\n    #\n    # # ex. 24\n    # min_cost = 23\n    #\n    # # ex. 25\n    # min_cost = 24\n    #\n    # # ex. 26\n    # min_cost = 25\n    #\n    # # ex. 27\n    # min_cost = 26\n    #\n    # # ex. 28\n    # min_cost = 27\n    #\n    # # ex. 29\n    # min_cost = 28\n    #\n    # # ex. 30\n    # min_cost = 29\n    #\n    # # ex. 31\n    # min_cost = 30\n    #\n    # # ex. 32\n    # min_cost = 31\n    #\n    # # ex. 33\n    # min_cost = 32\n    #\n    # # ex. 34\n    # min_cost = 33\n    #\n    # # ex. 35\n    # min_cost = 34\n    #\n    # # ex. 36\n    # min_cost = 35\n    #\n    # # ex. 37\n    # min_cost = 36\n    #\n    # # ex. 38\n    # min_cost = 37\n    #\n    # # ex. 39\n    # min_cost = 38\n    #\n    # # ex. 40\n    # min_cost = 39\n    #\n    # # ex. 41\n    # min_cost = 40\n    #\n    # # ex. 42\n    # min_cost = 41\n    #\n    # # ex. 43\n    # min_cost = 42\n    #\n    # # ex. 44\n    # min_cost = 43\n    #\n    # # ex. 45\n    # min_cost = 44\n    #\n    # # ex. 46\n    # min_cost = 45\n    #\n    # # ex. 47\n    # min_cost = 46\n    #\n    # # ex. 48\n    # min_cost = 47\n    #\n    # # ex. 49\n    # min_cost = 48\n    #\n    # # ex. 50\n    # min_cost = 49\n    #\n    # # ex. 51\n    # min_cost = 50\n    #\n    # # ex. 52\n    # min_cost = 51\n    #\n    # # ex. 53\n    # min_cost = 52\n    #\n    # # ex. 54\n    # min_cost = 53\n    #\n    # # ex. 55\n    # min_cost = 54\n    #\n    # # ex. 56\n    # min_cost = 55\n    #\n    # # ex. 57\n    # min_cost = 56\n    #\n    # # ex. 58\n    # min_cost = 57\n    #\n    # # ex. 59\n    # min_cost = 58\n    #\n    # # ex. 60\n    # min_cost = 59\n    #\n    # # ex. 61\n    # min_cost = 60\n    #\n    # # ex. 62\n    # min_cost = 61\n    #\n    # # ex. 63\n    # min_cost = 62\n    #\n    # # ex. 64\n    # min_cost = 63\n    #\n    # # ex. 65\n    # min_cost = 64\n    #\n    # # ex. 66\n    # min_cost = 65\n    #\n    # # ex. 67\n    # min_cost = 66\n    #\n    # # ex. 68\n    # min_cost = 67\n    #\n    # # ex. 69\n    # min_cost = 68\n    #\n    # # ex. 70\n    # min_cost = 69\n    #\n    # # ex. 71\n    # min_cost = 70\n    #\n    # # ex. 72\n    # min_cost = 71\n    #\n    # # ex. 73\n    # min_cost = 72\n    #\n    # # ex. 74\n    # min_cost = 73\n    #\n    # # ex. 75\n    # min_cost = 74\n    #\n    # # ex. 76\n    # min_cost = 75\n    #\n    # # ex. 77\n    # min_cost = 76\n    #\n    # # ex. 78\n    # min_cost = 77\n    #\n    # # ex. 79\n    # min_cost = 78\n    #\n    # # ex. 80\n    # min_cost = 79\n    #\n    # # ex. 81\n    # min_cost = 80\n    #\n    # # ex. 82\n    # min_cost = 81\n    #\n    # # ex. 83\n    # min_cost = 82\n    #\n    # # ex. 84\n    # min_cost = 83\n    #\n    # # ex. 85\n    # min_cost = 84\n    #\n    # # ex. 86\n    # min_cost = 85\n    #\n    # # ex. 87\n    # min_cost = 86\n    #\n    # # ex. 88\n    # min_cost = 87\n    #\n    # # ex. 89\n    # min_cost = 88\n    #\n    # # ex. 90\n    # min_cost = 89\n    #\n    # # ex. 91\n    # min_cost = 90\n    #\n    # # ex. 92\n    # min_cost = 91\n    "
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    A = stdin.split()\n    for h in range(H):\n        for w in range(W):\n            if A[h * W + w] == '#':\n                A[h * W + w] = '*'\n            elif A[h * W + w] == '.':\n                A[h * W + w] = '*'\n    print('\\n'.join(A))\n\nsolution(input())\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    squares = [['.'] * W for _ in range(H)]\n    N = int(input())\n    for _ in range(N):\n        r, c = list(map(int, input().split()))\n        squares[r - 1][c - 1] = '#'\n    # print(squares)\n    for r in range(H):\n        for c in range(W):\n            if squares[r][c] == '#':\n                for dr in range(r - 1, r + 2):\n                    for dc in range(c - 1, c + 2):\n                        if 0 <= dr < H and 0 <= dc < W:\n                            if squares[dr][dc] == '.':\n                                squares[dr][dc] = '#'\n    for r in range(H):\n        for c in range(W):\n            if squares[r][c] == '#':\n                squares[r][c] = '.'\n    for row in squares:\n        print(''.join(row))\n    return 'Yes' if all(c == '.' for c in ''.join(row) for row in squares) else 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... #.\n   ... #.#\n   ... #.#\n   ... ''')\n    'Yes'\n    \"\"\"\n\n    H, W = map(int, stdin.strip().split())\n\n    black_squares = 0\n    white_squares = 0\n\n    for row in range(H):\n        for col in range(W):\n            if stdin[row][col] == '#':\n                black_squares += 1\n            else:\n                white_squares += 1\n\n    if black_squares == white_squares:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    squares = []\n\n    for i in range(1, H + 1):\n        squares.append(stdin[i * (i * W): (i + 1) * (i * W)])\n\n    for i in range(1, len(squares)):\n        for j in range(1, len(squares[i])):\n            if squares[i][j] == '#':\n                if squares[i - 1][j] == '#':\n                    if squares[i + 1][j] == '#':\n                        if squares[i][j - 1] == '#':\n                            if squares[i][j + 1] == '#':\n                                squares[i - 1][j] = '*'\n                                squares[i + 1][j] = '*'\n                                squares[i][j - 1] = '*'\n                                squares[i][j + 1] = '*'\n\n    for i in squares:\n        print(''.join(i))\n\n    return 'Yes' if '*' not in squares else 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    s = ''.join([stdin[i].strip() for i in range(h)])\n    result = 'Yes' if count_black(s) == 0 else 'No'\n    print(result)\n    return result\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 3\\n###\\n#..')\n    'Yes'\n    >>> solution('4 2\\n###\\n##.\\n###\\n#..')\n    'Yes'\n    \"\"\"\n    n_rows, n_cols = map(int, stdin.split())\n    matrix = [[s for s in stdin] for _ in range(n_rows)]\n\n    counts = 0\n    for i in range(1, n_rows):\n        for j in range(1, n_cols):\n            if matrix[i][j] == '#':\n                matrix[i][j] = '*'\n                counts += 1\n\n    for i in range(1, n_rows):\n        for j in range(1, n_cols):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '#'\n                counts -= 1\n\n    if counts == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (H, W) = (len(stdin.splitlines()), len(stdin.splitlines()[0]))\n\n    squares = {}\n    for i in range(H):\n        for j in range(W):\n            if stdin.splitlines()[i][j] == '#':\n                squares[(i, j)] = '#'\n            else:\n                squares[(i, j)] = '.'\n\n    for _ in range(1000):\n        temp_squares = {(i, j): '.' for (i, j) in squares}\n\n        for (i, j) in squares:\n            if j > 0:\n                if temp_squares[(i, j - 1)] == '#' and squares[(i, j)] == '#':\n                    temp_squares[(i, j)] = '.'\n            if j < W - 1:\n                if temp_squares[(i, j + 1)] == '#' and squares[(i, j)] == '#':\n                    temp_squares[(i, j)] = '.'\n            if i > 0:\n                if temp_squares[(i - 1, j)] == '#' and squares[(i, j)] == '#':\n                    temp_squares[(i, j)] = '.'\n            if i < H - 1:\n                if temp_squares[(i + 1, j)] == '#' and squares[(i, j)] == '#':\n                    temp_squares[(i, j)] = '.'\n\n            if temp_squares[(i, j)] == '#':\n                temp_squares[(i, j)] = '#'\n            else:\n                temp_squares[(i, j)] = '.'\n\n        squares = temp_squares\n\n    return 'Yes' if '.' in squares.values() else 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    H, W = map(int, stdin.split())\n\n    def is_white(square):\n        return square == '.'\n\n    def is_black(square):\n        return square == '#'\n\n    def color_square(square):\n        # square is a single character\n        if is_white(square):\n            return '#'\n        else:\n            return '.'\n\n    black_white = list(map(color_square, input()))\n\n    # do not count black pixels\n    black_count = 0\n\n    def adj(i, j):\n        # if current square is white\n        if is_white(black_white[i][j]):\n            # then it is white\n            return '#'\n        else:\n            # then it is black\n            return '.'\n\n    for i in range(H):\n        for j in range(W):\n            if is_black(black_white[i][j]):\n                black_count += 1\n\n            black_white[i] = list(map(adj, i, j))\n\n    for i in range(H):\n        for j in range(W):\n            if is_white(black_white[i][j]):\n                black_count -= 1\n\n    if black_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nsample = solution(\"3 3\")\nprint(sample)\n\nsample = solution(\"1 1\")\nprint(sample)\n\nsample = solution(\"10 10\")\nprint(sample)\n\nsample = solution(\"5 4\")\nprint(sample)\n\nsample = solution(\"3 5\")\nprint(sample)\n\nsample = solution(\"5 1\")\nprint(sample)\n\nsample = solution(\"9 8\")\nprint(sample)\n\nsample = solution(\"5 5\")\nprint(sample)"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   .#.\n    ###\n   .#.\n    ''')\n    'Yes'\n    >>> solution('''2 2\n    #.\n    #.\n    #.\n    #.\n    ''')\n    'Yes'\n    >>> solution('''5 5\n    #.\n   .##\n   .##\n   .##\n    #.\n    #.\n    ''')\n    'No'\n    \"\"\"\n    def is_square(i, j):\n        return i in range(1, H+1) and j in range(1, W+1)\n\n    def adjacent(i, j):\n        for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n            if not is_square(x, y):\n                continue\n            if s_i[x][y] == '#':\n                return False\n            if s_i[x][y] == '*':\n                return True\n        return False\n\n    H, W = map(int, stdin.strip().split())\n    s_i = [list(stdin) for _ in range(H)]\n    for i in range(1, H+1):\n        if s_i[i][0] == '#':\n            if adjacent(i, 1):\n                s_i[i] = ['*']*W\n            else:\n                return 'No'\n        if s_i[i][W-1] == '#':\n            if adjacent(i, W-1):\n                s_i[i] = ['*']*W\n            else:\n                return 'No'\n    for j in range(1, W+1):\n        if s_i[0][j] == '#':\n            if adjacent(1, j):\n                s_i[0] = ['*']*H\n            else:\n                return 'No'\n        if s_i[H-1][j] == '#':\n            if adjacent(H-1, j):\n                s_i[H-1] = ['*']*H\n            else:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split()\n    H = int(H)\n    W = int(W)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if a + b + c!= 100:\n        return 'No'\n\n    if (a + b) > (c + a):\n        return 'No'\n\n    if (a + c) > (b + c):\n        return 'No'\n\n    if (b + c) > (a + c):\n        return 'No'\n\n    if (a + b) == (c + a) and (a + c) == (b + c):\n        return 'Yes'\n\n    return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, b, c = map(int, stdin.split())\n\n    return 'Yes' if a == b == c else 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, *args = stdin.split(' ')\n    a, b, c = map(int, args)\n    x = ((a + b) // 2) + (c // 2)\n    if a + b >= x and x <= a + c and x <= b + c:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    a, b, c = map(int, stdin[0].split())\n    if b >= a and c >= a:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    list_input = stdin.split(\" \")\n    a, b, c = list_input\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if(a == b) or (a == c) or (b == c):\n        return(\"No\")\n    else:\n        return(\"Yes\")"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a, b, c = sorted([int(i) for i in stdin.split()])\n    if a + b + c!= m:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return \"Yes\" if int(a) * int(b) * int(c) == int(a) + int(b) + int(c) else \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c!= 100:\n        return 'No'\n    if a + b + c % 2!= 0:\n        return 'No'\n    if a >= 20:\n        return 'No'\n    if a * 20 + b * 10 + c * 30 == 100:\n        return 'Yes'\n    return 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b and b == c:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A == D:\n        print(\"Balanced\")\n    elif A + B < D + C:\n        print(\"Left\")\n    else:\n        print(\"Right\")"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B and C > D:\n        print(\"Left\")\n    elif A == B and C > D:\n        print(\"Balanced\")\n    else:\n        print(\"Right\")\n    return \"\""
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    if (A+C)>B:\n        print('Left')\n    elif (A+C)==B:\n        print('Balanced')\n    else:\n        print('Right')\n    return\nsolution(input())\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    left = 0\n    right = 0\n    for i in stdin.split():\n        left += int(i)\n    for i in stdin.split():\n        right += int(i)\n    if left > right:\n        return \"Left\"\n    elif left == right:\n        return \"Balanced\"\n    else:\n        return \"Right\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > C:\n        if A == B:\n            print('Right')\n        elif A > D:\n            print('Left')\n        else:\n            print('Left')\n    elif A == C:\n        print('Balanced')\n    else:\n        print('Left')\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D=stdin.split()\n    A,B,C,D=int(A),int(B),int(C),int(D)\n    if A>B:\n        if A<C:\n            return \"Left\"\n        elif A<D:\n            return \"Right\"\n        else:\n            return \"Left\"\n    elif A==B:\n        if A<C:\n            return \"Right\"\n        elif A<D:\n            return \"Left\"\n        else:\n            return \"Right\"\n    else:\n        if A<C:\n            return \"Right\"\n        elif A<D:\n            return \"Left\"\n        else:\n            return \"Right\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.strip().split()))\n    if A + B > C + D:\n        return 'Left'\n    elif A + B == C + D:\n        return 'Balanced'\n    return 'Right'\nprint(solution(input()))"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b:\n        if a > c:\n            if a > d:\n                print('Left')\n            else:\n                print('Right')\n        else:\n            if c > d:\n                print('Left')\n            else:\n                print('Right')\n    else:\n        if b > c:\n            if b > d:\n                print('Left')\n            else:\n                print('Right')\n        else:\n            if c > d:\n                print('Left')\n            else:\n                print('Right')\n\nsolution(input())\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n\n    if A > B:\n        if A > C + D:\n            print('Right')\n        elif A < C - D:\n            print('Left')\n        else:\n            print('Balanced')\n    elif A < B:\n        if A < C - D:\n            print('Right')\n        elif A > C + D:\n            print('Left')\n        else:\n            print('Balanced')\n    else:\n        print('Balanced')\n\nsolution(input())\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C, D] = stdin.split(' ')\n    if int(D) > int(B):\n        return 'Left'\n    if int(D) == int(B):\n        if int(C) == int(A):\n            return 'Left'\n        else:\n            return 'Right'\n    if int(D) < int(B):\n        return 'Right'\n    if int(D) == int(B):\n        if int(C) == int(A):\n            return 'Right'\n        else:\n            return 'Left'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    input_arr = stdin.split('\\n')\n    N = int(input_arr[0])\n\n    store_info = input_arr[1:]\n\n    shop_dict = {}\n    for i in range(len(store_info)):\n        store_info[i] = tuple(map(int, store_info[i].split()))\n        shop_dict[i+1] = store_info[i]\n\n    # print(shop_dict)\n    # print(N)\n    \n    # total_profit = 0\n\n    # def check_shop(store_info, N):\n    #     for i in range(0, N):\n    #         # print(i)\n    #         # print(store_info)\n    #         # print(store_info[i])\n    #         if i not in shop_dict:\n    #             # print(\"shop not in\")\n    #             return False\n    #         if shop_dict[i] == (1,1,1,1,1,1,1,1,1,1):\n    #             return True\n    #         if shop_dict[i] == (0,0,0,0,0,0,0,0,0,0):\n    #             return False\n\n    #         if (store_info[i][0] % 2 == 1) and (store_info[i][1] % 2 == 1) and (store_info[i][2] % 2 == 1) and (store_info[i][3] % 2 == 1):\n    #             # print(\"day odd\")\n    #             # print(store_info[i])\n    #             if shop_dict[i][4] > 0:\n    #                 # print(\"open\")\n    #                 return True\n    #             else:\n    #                 # print(\"close\")\n    #                 return False\n    #         if (store_info[i][0] % 2 == 0) and (store_info[i][1] % 2 == 0) and (store_info[i][2] % 2 == 0) and (store_info[i][3] % 2 == 0):\n    #             # print(\"day even\")\n    #             # print(store_info[i])\n    #             if shop_dict[i][4] > 0:\n    #                 # print(\"open\")\n    #                 return True\n    #             else:\n    #                 # print(\"close\")\n    #                 return False\n    \n    # for i in range(1, N+1):\n    #     # print(\"i: \", i)\n    #     if check_shop(store_info, i):\n    #         # print(\"return true\")\n    #         return str(i)\n    # return str(0)\n    \n    # for i in range(1, N+1):\n    #     print(\"i: \", i)\n    #     if i in shop_dict and check_shop(shop_dict, i):\n    #         print(\"return true\")\n    #         return str(i)\n    # return str(0)\n\n    # if not check_shop(store_info, N):\n    #     return str(0)\n    # else:\n    #     print(len(store_info))\n    #     for i in range(len(store_info)):\n    #         if store_info[i][4] == 1:\n    #             total_profit += store_info[i][0] * store_info[i][1]\n    # return str(total_profit)\n\nprint(solution(stdin))"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    open_min = []\n    open_max = []\n    p = stdin.split('\\n')[1:]\n    for i in p:\n        tmp = i.split()\n        min_i = (int(tmp[0])-1)*2\n        max_i = (int(tmp[1])-1)*2\n        open_min.append(min_i)\n        open_max.append(max_i)\n    op_min = sorted(open_min)\n    op_max = sorted(open_max)\n    ans = 0\n    for i in range(n):\n        if op_min[i] <= 1 <= op_max[i]:\n            ans += p[i].split()[2]\n        if op_min[i] <= 2 <= op_max[i]:\n            ans += p[i].split()[3]\n        if op_min[i] <= 3 <= op_max[i]:\n            ans += p[i].split()[4]\n        if op_min[i] <= 4 <= op_max[i]:\n            ans += p[i].split()[5]\n        if op_min[i] <= 5 <= op_max[i]:\n            ans += p[i].split()[6]\n        if op_min[i] <= 6 <= op_max[i]:\n            ans += p[i].split()[7]\n        if op_min[i] <= 7 <= op_max[i]:\n            ans += p[i].split()[8]\n        if op_min[i] <= 8 <= op_max[i]:\n            ans += p[i].split()[9]\n        if op_min[i] <= 9 <= op_max[i]:\n            ans += p[i].split()[10]\n    return str(ans)\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    store = []\n    for i in range(N):\n        store.append(list(map(int, stdin.split())))\n\n    costs = []\n    for i in range(N):\n        costs.append([])\n        for j in range(N):\n            costs[i].append([])\n            for k in range(N):\n                costs[i][j].append(int(store[i][j] == 1 and store[j][k] == 1))\n    print(costs)\n    profit = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                profit = max(profit, costs[i][j][k] * (k - j))\n    print(profit)\n    return profit\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    N = int(stdin[0])\n    shops = list(map(int, stdin[1]))\n    profits = list(map(int, stdin[2]))\n    total = 0\n    for i in range(N):\n        if shops[i] == 1:\n            for j in range(len(profits)):\n                if profits[j] == 1:\n                    total += shops[j]\n    return str(total)\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    shop = [[int(x) for x in stdin.split()[i * 2 + 1].split(',')]\n            for i in range(n)]\n    prof = 0\n    for i in range(len(shop)):\n        for j in range(len(shop[i]) - 1):\n            if shop[i][j] == 1 and shop[i][j + 1] == 1:\n                prof += 1\n    for i in range(len(shop)):\n        for j in range(len(shop[i]) - 1):\n            if shop[i][j] == 1 and shop[i][j + 1] == 0:\n                prof += 1\n    return str(prof)\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    sales: List[List[int]] = [[int(x) for x in stdin.split()] for _ in range(N)]\n    max_profit: int = 0\n    for i in range(N):\n        open_period: int = 0\n        for j in range(5):\n            if sales[i][j] == 1:\n                open_period += 1\n        if open_period >= 2:\n            for j in range(5):\n                if sales[i][j] == 0:\n                    open_period += 1\n        max_profit = max(max_profit, open_period)\n    print(max_profit)\n    return max_profit\n\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, N, *F = list(map(int, stdin.split()))\n    P = [[0] * N for _ in range(2)]\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if F[i][j] == F[i][k] == F[k][j] == 1:\n                    P[i % 2][j] += P[(i + 1) % 2][k]\n    return str(max(P[(1 if max(P) == 0 else 0)]))\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin)\n    # stores = [list(map(int, stdin.split())) for _ in range(N)]\n    #\n    # stores.sort(key=lambda x:x[0])\n    #\n    # months = [[] for _ in range(N)]\n    # for i in range(N):\n    #     for j in range(1, 5):\n    #         if stores[i][1] == j:\n    #             months[i].append(j)\n    #\n    # maximum = 0\n    #\n    # for i in range(1, 5):\n    #     if len(months[0]) == 1:\n    #         if months[1] == months[0]:\n    #             maximum = max(maximum, stores[0][2])\n    #     else:\n    #         if len(months[0]) == 5:\n    #             maximum = max(maximum, stores[0][2])\n    #         else:\n    #             if months[1] == months[0]:\n    #                 maximum = max(maximum, stores[0][2])\n    #             if months[2] == months[0]:\n    #                 maximum = max(maximum, stores[0][2])\n    #             if months[3] == months[0]:\n    #                 maximum = max(maximum, stores[0][2])\n    #             if months[4] == months[0]:\n    #                 maximum = max(maximum, stores[0][2])\n    #         for j in range(1, 5):\n    #             if len(months[j]) == 1:\n    #                 if months[j] == months[0]:\n    #                     maximum = max(maximum, stores[0][2])\n    #             else:\n    #                 if len(months[j]) == 5:\n    #                     maximum = max(maximum, stores[0][2])\n    #                 else:\n    #                     if months[j] == months[0]:\n    #                         maximum = max(maximum, stores[0][2])\n    #                     if months[j] == months[1]:\n    #                         maximum = max(maximum, stores[0][2])\n    #                     if months[j] == months[2]:\n    #                         maximum = max(maximum, stores[0][2])\n    #                     if months[j] == months[3]:\n    #                         maximum = max(maximum, stores[0][2])\n    #                     if months[j] == months[4]:\n    #                         maximum = max(maximum, stores[0][2])\n    #\n    # return maximum\n    return '{}'.format(solution(stdin))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    F = stdin[1]\n    P = stdin[2]\n    F = F.split()\n    P = P.split()\n    max_profit = 0\n    for i in range(len(P)):\n        if F[i] == \"1\":\n            if P[i] > max_profit:\n                max_profit = P[i]\n    return str(max_profit)"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    if len(stdin)!= A + B + 1:\n        return \"No\"\n    if stdin[A + 1]!= \"-\":\n        return \"No\"\n    for i in range(A):\n        if not stdin[i].isdigit():\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if '-' in stdin or ',' in stdin:\n        return 'No'\n    else:\n        s = stdin.split(' ')\n        if len(s) == 2:\n            if len(s[0]) == len(s[1]) == 2:\n                if s[1].isdigit():\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif len(s) == 3:\n            if len(s[0]) == len(s[1]) == len(s[2]) == 2:\n                if s[2].isdigit():\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif len(s) == 4:\n            if len(s[0]) == len(s[1]) == len(s[2]) == len(s[3]) == 2:\n                if s[3].isdigit():\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif len(s) == 5:\n            if len(s[0]) == len(s[1]) == len(s[2]) == len(s[3]) == len(s[4]) == 2:\n                if s[4].isdigit():\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif len(s) == 6:\n            if len(s[0]) == len(s[1]) == len(s[2]) == len(s[3]) == len(s[4]) == len(s[5]) == 2:\n                if s[5].isdigit():\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    if len(A) == int(A) and len(B) == int(B) and A[1] == \"-\" and A[0]!= \"-\" and int(A) >= 1 and int(A) <= 9 and A[0] + A[1] == A and A[1] + A[2] == A and int(A) <= 9 and A[0] + A[1] == A:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    if (a+1)*2 == len(stdin):\n        if stdin.count('-') == 1 and stdin.count('0') == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    s = stdin\n    if a!= len(s) - 1:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_hyphens, num_of_digits = map(int, stdin.split(\" \"))\n    if num_of_hyphens == num_of_digits + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return 'Yes' if validates else 'No'\n    postal_code = stdin.split(' ')\n    a = int(postal_code[0])\n    b = int(postal_code[1])\n    if a + b!= int(len(postal_code[2])):\n        return 'No'\n    if postal_code[2][a - 1]!= '-':\n        return 'No'\n    for i in range(a):\n        if not postal_code[2][i].isdigit():\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A,B=stdin.split()\n    if (len(A)+len(B)+1)==(int(A)+int(B)+1):\n        if A[0]=='-' and len(A)==int(A)+1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if len(stdin)!= A + B + 1:\n        return 'No'\n\n    return 'Yes' if stdin[:A] == '-' * A + '-' + '-' * (B - 1) + '-' + stdin[A:] else 'No'\n\n\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = map(int, stdin.split())\n    return str(int(min(abs(a-b), abs(a-b-W), abs(a-b+W))))\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    return str(min(w, b) - max(w, b))\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Code here\n    return result\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [W, a, b] = list(map(int, stdin.split()))\n    if W == 0:\n        return '0'\n    if a == 0 and b == 0:\n        return '0'\n    if a == 0:\n        return '0'\n    if b == 0:\n        return '0'\n    if (a * b) <= W:\n        return '0'\n    if (a * (b + 1) <= W):\n        return str(0)\n    if (a * (b + 1)) < (b * (a + 1)):\n        return str(0)\n    if (a * (b + 1)) > (b * (a + 1)):\n        return str(a * (b + 1) - b * (a + 1))\n    else:\n        return str(a * (b + 1) - b * (a + 1))\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [W, a, b] = map(int, stdin.split())\n    if a == b:\n        return 0\n    if a <= 1 and b <= 1:\n        return max(a, b)\n    return max(1, (max(a, b) - 1) // min(a, b) + 1)\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(1, abs(float(stdin.split()[1])-float(stdin.split()[2]))))"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        [str]: [description]\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    W = int(lines[0])\n    a, b = list(map(int, lines[1].split(\" \")))\n\n    if (a > W):\n        return str(1)\n    elif (b > W):\n        return str(1)\n    else:\n        if (W > (a+b)):\n            return str(1)\n        else:\n            return str(W-(a+b))\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, w = map(int, stdin.split())\n    if a > 0 and b > 0 and a < w and b < w:\n        return \"1\"\n    return \"0\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.strip().split())\n    return str(min(w, a, b - 1))"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, W = map(int, stdin.split())\n    return str(min((a - 1, b), (b - 1, a + W)))\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(*sorted(map(int, input().split())), sep='\\n')\n    return ''\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    arr = [i for i in range(A, B + 1)]\n    arr.sort(key=lambda x: (x, -x))\n    smallest, largest = None, None\n    for i in range(len(arr)):\n        if i + 1 <= K:\n            smallest = arr[i]\n            break\n        if i - K >= 0:\n            largest = arr[i]\n            break\n    print(smallest, largest)\n    return \" \".join(map(str, arr))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    #  A <= B\n    #  0 <= K\n    #  A <= 0 <= B\n    if K == 0:\n        return\n    lower_bound = A\n    upper_bound = B\n    if K > 0:\n        lower_bound = A - (K + 1)\n        upper_bound = A - (K - 1)\n    if lower_bound <= A <= upper_bound:\n        return A\n    if lower_bound <= B <= upper_bound:\n        return B\n    return -1\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    a, b, k = int(input_[0]), int(input_[1]), int(input_[2])\n    print(search_smallest_largest(a, b, k))"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    if len(nums) == 3:\n        if int(nums[0]) > int(nums[1]):\n            return '{} {} {}'.format(int(nums[0]), int(nums[2]), int(nums[1]))\n        else:\n            return '{} {} {}'.format(int(nums[1]), int(nums[0]), int(nums[2]))\n    else:\n        return''.join(sorted(nums))\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if m < k:\n        m, k = k, m\n    \n    def reverse(n):\n        if n < 10:\n            return n\n        else:\n            return reverse(n // 10) * 10 + n % 10\n    \n    def is_ok(target, k):\n        arr = [reverse(i) for i in range(target, target + 10)]\n        for i in range(1, 10):\n            if i not in arr:\n                return False\n            if arr.count(i) < k:\n                return False\n        return True\n\n    def solve(target):\n        if target > m:\n            return\n        for i in range(target, m):\n            if is_ok(i, k):\n                print(i)\n                return\n    \n    solve(n)\n    return ''\n\n\n\"\"\"\n\n\nclass Solution:\n    def getSmallestAndLargest(self, arr, k, n):\n        for i in range(n - k + 1):\n            if arr[i] > arr[i + k - 1]:\n                arr[i], arr[i + k - 1] = arr[i + k - 1], arr[i]\n        return arr[:k] + arr[k:][::-1]\n\n    def findKSmallest(self, arr, k):\n        n = len(arr)\n        if n == 0 or n < k:\n            return arr\n        arr = self.getSmallestAndLargest(arr, k, n)\n        return arr\n\n    def findKLargest(self, arr, k):\n        n = len(arr)\n        if n == 0 or n < k:\n            return arr\n        arr = self.getSmallestAndLargest(arr, k, n)\n        return arr[-k:]\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    print(f'Solution A: {solution_a(stdin)}')\n    print(f'Solution B: {solution_b(stdin)}')\n\n\ndef"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A == B:\n        return str(A)\n    if A > B:\n        A, B = B, A\n    A_list = list(range(A, B + 1))\n    A_list.sort()\n    if K >= len(A_list):\n        return str(A)\n    if K == 0:\n        return str(A)\n    left = A_list[:K]\n    right = A_list[K:]\n    res_list = []\n    res_list.extend(left)\n    res_list.extend(right[::-1])\n    return ','.join(map(str, res_list))\nprint(solution(input()))\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    ans = ''\n    l = 1\n    r = 100\n    while r - l > 1:\n        m = (r + l) // 2\n        if a <= m:\n            ans = ans + str(m)\n            r = m\n        else:\n            ans = ans + str(a)\n            l = a\n    ans = ans + str(r) +''\n    m = 1\n    n = 100\n    while n - m > 1:\n        if b <= n:\n            ans = ans + str(n)\n            n = n\n        else:\n            ans = ans + str(b)\n            m = b\n    print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_1 = stdin.split()\n    a = int(input_1[0])\n    b = int(input_1[1])\n    k = int(input_1[2])\n    largest = sorted([i for i in range(a, b + 1) if i < k])\n    smallest = sorted([i for i in range(a, b + 1) if i > k])\n    return \" \".join([str(i) for i in sorted(largest + smallest)])\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = stdin.split()[0]\n    if len(x) > 1:\n        s = x\n    return s"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a, x = s[0], s[1]\n    x = ord(x)\n    x -= ord('a')\n    if len(s) == 1:\n        print(x, x)\n    elif x == ord('a') or x == ord('b') or x == ord('c') or x == ord('d') or x == ord('e') or x == ord('f') or x == ord('g') or x == ord('h') or x == ord('i') or x == ord('j') or x == ord('k') or x == ord('l') or x == ord('m') or x == ord('n') or x == ord('o') or x == ord('p') or x == ord('q') or x == ord('r') or x == ord('s') or x == ord('t') or x == ord('u') or x == ord('v') or x == ord('w') or x == ord('x') or x == ord('y') or x == ord('z'):\n        print(x, x+1)\n    elif x == ord('A') or x == ord('B') or x == ord('C') or x == ord('D') or x == ord('E') or x == ord('F') or x == ord('G') or x == ord('H') or x == ord('I') or x == ord('J') or x == ord('K') or x == ord('L') or x == ord('M') or x == ord('N') or x == ord('O') or x == ord('P') or x == ord('Q') or x == ord('R') or x == ord('S') or x == ord('T') or x == ord('U') or x == ord('V') or x == ord('W') or x == ord('X') or x == ord('Y') or x == ord('Z'):\n        print(x, x+1)\n    else:\n        print(x, x+2)\nstdin = input()\nsolution(stdin)\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    x = s[0]\n    print(x+s[1:])"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) > 10:\n        return \"Invalid\"\n    x = s[0]\n    return x + ''.join(i for i in s[1:])\n\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0].upper()\n    s = stdin[1:]\n    if x == 'AtCoder':\n        if len(s) < 5:\n            return s.upper() + '.'\n        else:\n            return s[:4] + '..'\n    else:\n        return s[0].upper() + s[1:]\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    contest = stdin.strip().split()\n    for i in range(len(contest)):\n        if len(contest[i]) > 1:\n            if contest[i][0].isupper() and contest[i][1:].islower():\n                contest[i] = contest[i][0].lower() + contest[i][1:]\n        elif len(contest[i]) == 1 and contest[i][0].isupper():\n            contest[i] = contest[i][0].lower()\n    return ''.join(contest)\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()[:1] + stdin[1:].lower()"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if (a + b) % 2 == 0:\n        if (a + b) / 2 == x:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        if (a + b + 1) / 2 == x:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if (a + b) % 2 == 1 and a <= x <= (a + b) / 2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split(' '))\n\n    if A == 1 and X == (B * (B + 1) // 2):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split()\n    return \"NO\" if int(a) + int(b) < int(x) else \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    return \"YES\" if A + B == X else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    A = A % 10\n    if A + B > X:\n        return 'NO'\n    if A + B <= X:\n        return 'YES'\n\n\ndef"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    a = A\n    b = B\n\n    while a > 0 and b > 0:\n        if a > b:\n            b -= 1\n        elif a < b:\n            a -= 1\n        else:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    [A, B, X] = map(int, stdin.split())\n    if A <= X <= A + B:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A > 0 and X == (A + B):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, X = stdin.split()\n    A, B, X = int(A), int(B), int(X)\n    if A < X or X < A + B:\n        print('NO')\n    else:\n        print('YES')\n    return"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    return str(int((x - (t * 1)) // t))\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    X, t = map(int, stdin.split())\n    for i in range(t):\n        result += (X - i)//X * i\n    return result\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    return f\"{int(x * t / 60 / 60 * 3)}\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, t = stdin.split()\n    x = int(x)\n    t = int(t)\n    initial_value = 100\n    k = 0\n    while k < t:\n        initial_value = initial_value - int(x / 1000)\n        k += 1\n    print(initial_value)\n    return initial_value\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X * ((t - 1) / X) + 1)\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, t = stdin.split()\n    x = int(x)\n    t = int(t)\n    return str(int(x*(x-1)/2) + int(t*x))"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    #print(input_data)\n    x = int(input_data[0])\n    t = int(input_data[1])\n    return f'{(x * (x-1)//2) * t:.0f}'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    return str(int(x*t/2))"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    x, t = int(stdin[0]), int(stdin[1])\n    return f\"{(int(x/t))*t:.2f}\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [x, t] = stdin.strip().split()\n    x = int(x)\n    t = int(t)\n    return str(x * (1 - (1 / t)) + x)\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()\n    n = int(number[0])\n    for i in range(n):\n        number[i] = int(number[i])\n    for i in range(n):\n        number[i] = number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number[i]*number["
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = [int(stdin) for stdin in stdin.split()]\n\n    result = 1\n    for number in numbers:\n        result *= number\n\n    if result > 10**18:\n        return -1\n\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = 1\n    for i in range(1, N+1):\n        res = res * i\n        if res > 10**18:\n            return str(-1)\n    return str(res)\n    \"\"\"\n    N = int(stdin)\n    res = 1\n    for i in range(1, N+1):\n        res = res * i\n        if res > 10**18:\n            return str(-1)\n    return str(res)\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    if n < 2:\n        return str(-1)\n\n    a: list = stdin.strip().split(' ')\n    a: list = list(map(int, a))\n\n    max_num: int = max(a)\n\n    if max_num > 10**18:\n        return str(-1)\n\n    return str(a[0]*(a[1]))\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    if n >= 10**18:\n        return '-1'\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin)\n    # A = list(map(int, stdin.split()))\n    # print(A)\n\n    # A = map(int, stdin.split())\n    # print(type(A))\n    # print(map(int, stdin.split()))\n    # N = int(input())\n    # A = map(int, input().split())\n    # A = list(map(int, stdin.split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # N = int(input())\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    A: List[int] = list(map(int, stdin.split()))\n    return \"{}\".format(math.prod(A))\n\"\"\"\n\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split()\n    n = int(stdin_arr[0])\n    arr = stdin_arr[1:]\n    \n    max_product = -1\n    while max_product <= 10**18:\n        \n        max_product = max(max_product, _solve(arr))\n        \n    return str(max_product)\n\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    A: List[int] = stdin.split()[1:]\n    \n    ans: int = 1\n    for a in A:\n        ans *= a\n    if ans > 10**18:\n        return '-1'\n    return str(ans)\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    M = max(A)\n    if M > 10**18:\n        print(-1)\n    else:\n        result = 1\n        for i in range(N):\n            result *= A[i]\n        print(result)"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(dp(N))\n\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin: str\n\n    >>> solution('18')\n    'Yes'\n    >>> solution('50')\n    'Yes'\n    >>> solution('1')\n    'Yes'\n    \"\"\"\n    n = int(stdin)\n    if n % 500 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N <= 500 * A:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = int(stdin.splitlines()[0]), int(stdin.splitlines()[1])\n    x = lambda y: y * (y - 1) // 2\n    y = lambda n: n * (n + 1) // 2\n    return 'Yes' if x(a) + x(y(n - 1)) >= n else 'No'"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    count_a = a//5\n    count_b = b//5\n    count_c = c//1\n    if count_a >= n and count_b >= n and count_c >= n:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 500 == 0 and N % 1 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # N, A = stdin.split()\n    N, A = map(int, input().split())\n    # N = int(N)\n    # A = int(A)\n    # if A <= 500 and N >= A and N % 500 == 0:\n    #     print(\"Yes\")\n    # else:\n    #     print(\"No\")\n\n    if A <= 500 and (N * 500) % A == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return A <= 500 and (N * 500) % A == 0\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,a = map(int, stdin.split())\n    dp = [[False]*(a+1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1,n+1):\n        for j in range(1,a+1):\n            dp[i][j] = dp[i-1][j]\n            if j - 1 >= 0:\n                dp[i][j] |= dp[i][j-1]\n            if i - 1 >= 0:\n                dp[i][j] |= dp[i-1][j]\n    print(dp[n][a])\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    if a > 1000000:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input:\n    x: int\n    a: int\n    b: int\n    output:\n    str\n    \"\"\"\n    x,a,b=map(int,stdin.split())\n    if x+1-a>b:\n        return 'delicious'\n    elif x+1-a<b:\n        return'safe'\n    else:\n        return 'dangerous'\n\nsolution(\"3 4 6\")\nsolution(\"4 3 6\")\nsolution(\"4 2 6\")\n\ndef"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A >= (X + 1):\n        if (A - 1) % (X + 1) <= 0:\n            if A % (X + 1) <= (X + 1) - (A - 1):\n                print(\"dangerous\")\n            else:\n                print(\"safe\")\n        else:\n            if (A - 1) % (X + 1) <= (X + 1) - (A - 1):\n                print(\"dangerous\")\n            else:\n                print(\"safe\")\n    else:\n        if A % (X + 1) <= (X + 1) - (A - 1):\n            print(\"dangerous\")\n        else:\n            print(\"safe\")"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    X, A, B = map(int, stdin.split())\n\n    if A + 1 >= X:\n        return \"safe\" if X - A <= 1 else \"dangerous\"\n    else:\n        return \"delicious\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = list(map(int, stdin.split()))\n    best_by = X + A\n    if best_by < B:\n        return \"dangerous\"\n    elif best_by <= B:\n        if A == 0:\n            return \"delicious\"\n        else:\n            return \"safe\"\n    else:\n        return \"delicious\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    x += 1\n    if a + 1 >= x and x <= b:\n        if x - a >= 3:\n            return \"safe\"\n        elif x - a == 2:\n            return \"dangerous\"\n        else:\n            return \"delicious\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if (B + X) <= A:\n        if A % (B + 1) == 0:\n            return \"dangerous\"\n        else:\n            return \"safe\"\n    if A % (B + 1) == 0:\n        return \"delicious\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    x, a, b = map(int, inputs)\n    if a + b > x:\n        return 'dangerous'\n    else:\n        return 'delicious' if a <= x and x - b <= a else'safe'"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if x - a >= 3 or a - b >= 3:\n        print(\"delicious\")\n    elif x - a == 1 or a - b == 1:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = stdin.split()\n    x = int(x)\n    a = int(a)\n    b = int(b)\n    if a + b <= x:\n        print(\"dangerous\")\n    elif (a + b - 1) % x == 0:\n        print(\"safe\")\n    elif a + b > x:\n        print(\"delicious\")\n    return \"\""
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A > X:\n        if (X + 1) < A:\n            print(\"safe\")\n        else:\n            print(\"dangerous\")\n    elif (X - 1) > A:\n        print(\"dangerous\")\n    else:\n        if (A + 1) < X:\n            print(\"dangerous\")\n        else:\n            print(\"safe\")"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    return str(max(i ** 2 for i in range(1, N + 1) if i ** 2 > N))"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num = int(num)\n    square_num = num*num\n    if num > square_num:\n        print(square_num)\n    else:\n        print(num)"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # N = 10\n    largest_square = 0\n    for i in range(1, N):\n        square = i * i\n        # print(\"Square: \", i, square)\n        if square > largest_square:\n            largest_square = square\n    print(largest_square)"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(max(int(x)**2 for x in stdin.split()))\nsolution(stdin)\n\n'''\n\ndef"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    intN = int(stdin)\n    if intN == 0:\n        return 0\n    if intN == 1:\n        return 1\n    if intN == 2:\n        return 4\n    squareN = int(intN ** (1/2))\n    for i in range(squareN, 0, -1):\n        for j in range(i, 0, -1):\n            if i**2 == j:\n                print(i)\n                return i\n    print(squareN * squareN)\n    return squareN * squareN\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    j = n\n    while(j > i):\n        i = i + 1\n        j = j - (i * i)\n    return i"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return stdin\n    #\n    # max_sqr = 0\n    # for num in range(1, int(stdin)):\n    #     if num ** 2 > max_sqr:\n    #         max_sqr = num ** 2\n    # print(max_sqr)\n    max_sqr = 0\n    for i in range(1, int(stdin)):\n        if i ** 2 > max_sqr:\n            max_sqr = i ** 2\n    return max_sqr\n\nprint(solution(input()))\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    largest = 0\n    for i in range(N, 0, -1):\n        if largest > largest * i:\n            largest = largest * i\n            print(largest)\n    return largest\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = map(int, stdin.split())\n    data = sorted(data)\n    count = 1\n    total = 0\n    for i, v in enumerate(data):\n        if v == data[i - 1]:\n            count += 1\n        else:\n            total += (count * (count + 1)) // 2\n            count = 1\n    total += (count * (count + 1)) // 2\n    print(total)\n    return total\n\n\nsolution(stdin)\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    votes = {}\n    for i in range(N):\n        x, y = stdin.split()\n        x = int(x)\n        y = int(y)\n        votes[x] = votes.get(x, 0) + 1\n        votes[y] = votes.get(y, 0) + 1\n    nums = sorted(votes.values(), reverse=True)\n    cnt = 0\n    res = 10**18\n    for i in nums:\n        if cnt + i < res:\n            res = cnt + i\n        elif cnt + i == res:\n            res = min(cnt, res)\n        cnt += i\n    return str(res)\n\nstdin = '1 2 3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    takahashi = stdin.split()[1]\n    aoki = stdin.split()[2]\n    ans = 0\n    c = 0\n    for i in range(N):\n        if c!= 0:\n            if c == int(takahashi) or c == int(aoki):\n                c += 1\n                ans += 1\n            else:\n                c += 1\n        else:\n            c = int(takahashi) if int(takahashi) > int(aoki) else int(aoki)\n    return str(ans)\n\nstdin = '5\\n2 3\\n1 1\\n3 2\\n'\nprint(solution(stdin))\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Day 1: Report Repair ---\n    Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan.\n\n    The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look.\n\n    Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.\n\n    To try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set.\n\n    For example, suppose you have the following list:\n\n    1-3 a: abcde\n    1-3 b: cdefg\n    2-9 c: ccccccccc\n\n    Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.\n\n    In the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies.\n\n    How many passwords are valid according to their policies?\n\n    --- Part Two ---\n    While it appears you validated the passwords correctly, they don't seem to be what the Official Toboggan Corporate Authentication System is expecting.\n\n    The shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\n    Each policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \"index zero\"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\n    Given the same example list from above:\n\n    1-3 a: abcde is valid: position 1 contains a and position 3 does not.\n    1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.\n    2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.\n\n    How many passwords are valid according to the new interpretation of the policies?\n    \"\"\"\n    valid_count = 0\n    total = 0\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        password_policies, password = line.split(':')\n        policy_count, *policy = password_policies.split(' ')\n        letter, *numbers = policy\n        first, last = int(numbers[0]), int(numbers[1])\n        policies = {\n            'a': 1,\n            'b': 2,\n            'c': 3,\n        }\n        if (total := 0) < int(password):\n            total = 0\n            continue\n        if (letter := password[first - 1]) == password[last - 1]:\n            total += 1\n        if (letter := password[first - 1])!= password[last - 1]:\n            total = 0\n    return valid_count, total\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    votes = []\n    for _ in range(N):\n        line = stdin.split()\n        votes.append(tuple(map(int, line[1:])))\n    votes.sort(key=lambda x: x[0] / x[1])\n    for i in range(N):\n        votes[i] = list(votes[i])\n    # print(votes)\n    return str(sum(votes[i][0] for i in range(N)) // sum(votes[i][1] for i in range(N)))\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    sample input\n    10\n    2 3\n    3 2\n    :return:\n    '''\n    # Read data from stdin and store it to appropriate variables\n    stdin = stdin.strip()\n    n = int(stdin.split(\"\\n\")[0])\n    takahashi_votes = int(stdin.split(\"\\n\")[1].split(\" \")[0])\n    akaoka_votes = int(stdin.split(\"\\n\")[1].split(\" \")[1])\n\n    # Check if numbers of votes are coprime\n    if gcd(takahashi_votes, akaoka_votes)!= 1:\n        raise ValueError(\"Numbers of votes of Takahashi and Aoki are not coprime!\")\n\n    # Check if numbers of votes are larger than 0\n    if takahashi_votes <= 0 or akaoka_votes <= 0:\n        raise ValueError(\"Numbers of votes are not larger than 0!\")\n\n    # Check if numbers of votes are less than or equal to 10\n    if takahashi_votes > 10 or akaoka_votes > 10:\n        raise ValueError(\"Numbers of votes are more than 10!\")\n\n    # Write your code here\n    result = 0\n    votes = {1: takahashi_votes, 2: akaoka_votes}\n    takahashi_list = sorted(votes.items(), key=lambda x: x[1], reverse=True)\n    akaoka_list = sorted(votes.items(), key=lambda x: x[1], reverse=False)\n    # print(takahashi_list)\n    # print(akaoka_list)\n    for i in range(n):\n        if i == 0:\n            result = takahashi_votes + akaoka_votes\n        elif i == 1:\n            if result == takahashi_votes + akaoka_votes:\n                result = takahashi_votes\n            else:\n                result = result - takahashi_list[0][1]\n                takahashi_votes = takahashi_list[0][1]\n                takahashi_list = sorted(takahashi_list, key=lambda x: x[1], reverse=True)\n        elif i == 2:\n            if result == takahashi_votes + akaoka_votes:\n                result = akaoka_votes\n            else:\n                result = result - akaoka_list[0][1]\n                akaoka_votes = akaoka_list[0][1]\n                akaoka_list = sorted(akaoka_list, key=lambda x: x[1], reverse=False)\n        else:\n            if result == takahashi_votes + akaoka_votes:\n                result = takahashi_votes\n            else:\n                result = result - takahashi_list[0][1]\n                result = result - akaoka_list[0][1]\n                takahashi_votes = takahashi_list[0][1]\n                akaoka_votes = akaoka_list[0][1]\n                akaoka_list = sorted(akaoka_list, key=lambda x: x[1], reverse=False)\n                takahashi_list = sorted(takahashi_list, key=lambda x: x[1], reverse=True)\n\n    return result\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    votes_takahashi = list(map(int, stdin.split()))\n    votes_aoki = list(map(int, stdin.split()))\n    # votes_takahashi = [2, 3]\n    # votes_aoki = [1, 1]\n    res = 0\n    while True:\n        num_votes = 0\n        for i in range(2):\n            if votes_takahashi[i] <= votes_aoki[i]:\n                num_votes += votes_aoki[i]\n                votes_aoki[i] = 0\n            else:\n                num_votes += votes_aoki[i]\n                votes_aoki[i] -= votes_takahashi[i]\n                votes_takahashi[i] = 0\n        if num_votes == N:\n            break\n        res += 1\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    takahashi_votes = Aoki_votes = 0\n    for i in range(1, N + 1):\n        T, A = stdin.split()\n        takahashi_votes += int(T) // int(A)\n        Aoki_votes += int(A) // int(T)\n    return str(min(takahashi_votes, Aoki_votes))\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    stdin = stdin.split()\n    N = int(stdin.pop(0))\n    T = list(map(int, stdin.pop().split()))\n    A = list(map(int, stdin.pop().split()))\n    m = 10 ** 18\n    ans = m\n    for T_idx, T_i in enumerate(T):\n        a_idx = A.index(T_i)\n        ans = min(ans, sum(T_idx + 1, a_idx + 1))\n    for i, j in itertools.product(range(N), range(N)):\n        if i!= j:\n            ans = min(ans, abs(T[i] - T[j]) + abs(A[i] - A[j]))\n    return str(ans)"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.strip().splitlines()\n    n = int(stdin_lines[0])\n    takahashi = list(map(int, stdin_lines[1].split()))\n    aoki = list(map(int, stdin_lines[2].split()))\n    for _ in range(n - 1):\n        takahashi.append(sum(takahashi) / n)\n        aoki.append(sum(aoki) / n)\n    return str(int(min(takahashi) - min(aoki)))"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin)) == len(stdin) else \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n    return stdout\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if ''.join(set(stdin)) == stdin:\n        return 'yes'\n    else:\n        return 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char.isalpha():\n            count += 1\n        else:\n            print('No')\n            exit()\n    if count == 26:\n        print('Yes')\n        exit()\n    print('No')\n\nsolution(stdin)"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == 26 else 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    if len(s) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) == 26:\n        if S.count('a') == 1 and S.count('e') == 1 and S.count('i') == 1 and S.count('o') == 1 and S.count('u') == 1:\n            return \"yes\"\n    return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if stdin[i] == stdin[j]:\n                return \"yes\"\n    return \"no\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[0]:\n            stdout = \"yes\"\n        else:\n            stdout = \"no\"\n    return stdout"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(stdin) == len(set(stdin)) else 'no'\n\nprint(solution(input()))"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    S: str = stdin.split()\n    return str(solution_helper(N, S))\n\ndef"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split()\n\n    S_count = collections.Counter(S)\n\n    count = 0\n\n    for value in S_count.values():\n        if value % 2:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    S = stdin.splitlines()[1]\n    return str(min(N - 1, abs(S.count(\"E\") - S.count(\"W\")) + abs(S.count(\"E\") - S.count(\"W\"))))\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n - 1\n    s = stdin.strip()\n    s = s[::-1]\n    print(s)\n    return \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split()\n    return str(min([abs(int(s) - 1) for s in S]))\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    S = list(S)\n    turn = 0\n    if S[0] == \"E\":\n        turn = 1\n    result = 0\n    for i in range(1, N):\n        if S[i] == \"E\" and turn == 1:\n            result += 1\n            turn = 0\n        else:\n            turn = 1\n    return result\n    "
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split(' ')\n\n    count_of_turns = 0\n    for i in range(N):\n        if S[i] == 'E':\n            count_of_turns += 1\n    return str(count_of_turns)\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split()\n    print(min(len([i for i in S if i == 'E']), len([i for i in S if i == 'W'])))\n    return \"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    s: str = stdin.split()[1]\n    # count = 0\n    min_count = float('inf')\n    # print(n)\n    # print(s)\n    for i in range(n):\n        if s[i] == 'E':\n            min_count = min(min_count, i+1)\n    return min_count\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n\n    graph = [[] for i in range(n)]\n\n    for i in range(m):\n        a = int(stdin.split()[2 * i])\n        b = int(stdin.split()[2 * i + 1])\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    def dfs(start_city: int, city_visited: set) -> set:\n        city_visited.add(start_city)\n        for adj_city in graph[start_city]:\n            if adj_city not in city_visited:\n                city_visited = dfs(adj_city, city_visited)\n\n        return city_visited\n\n    for i in range(n):\n        print(len(dfs(i, set())), end=' ')\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        matrix[a].append(b)\n        matrix[b].append(a)\n    visited = [False] * (n + 1)\n    res = 0\n    for i in range(1, n + 1):\n        stack = [i]\n        while stack:\n            curr = stack.pop()\n            if visited[curr]: continue\n            visited[curr] = True\n            for j in matrix[curr]:\n                stack.append(j)\n        res += 1\n    return str(res)\n\nstdin = '2 2\\n1 2\\n2 3\\n3 4'\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = {c: [] for c in range(1, N + 1)}\n    roads = {r: set() for r in range(1, M + 1)}\n\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        cities[a].append(b)\n        cities[b].append(a)\n\n        roads[a].add(b)\n        roads[b].add(a)\n\n    for i in range(1, N + 1):\n        cities[i].sort()\n        roads_counter = 0\n        for j in range(1, len(cities[i])):\n            if cities[i][j] in roads[cities[i][j - 1]]:\n                roads_counter += 1\n        print(roads_counter)\n\n    return stdin\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split(\" \"))\n    a, b = (int(i) for i in stdin.split(\" \"))\n    c = 1\n    d = 1\n    if b == a:\n        c = 1\n        d = 0\n    for i in range(1, n):\n        if c!= 1:\n            c = 0\n            d = 0\n        c = d + 1\n        if a == i:\n            continue\n        elif b == i:\n            continue\n        else:\n            c = c + 1\n    return str(c) + \"\\n\" + str(d)\n\n----------------------------------------------------------------------\n'''\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    arr = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, m + 1):\n        a, b = map(int, input().split())\n        arr[a][b] = 1\n        arr[b][a] = 1\n    count = 0\n    for i in range(1, n + 1):\n        count += sum(arr[i])\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = {i: set() for i in range(1, N + 1)}\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        graph[a].add(b)\n        graph[b].add(a)\n\n    visited = {i: False for i in range(1, N + 1)}\n    answer = []\n    for i in range(1, N + 1):\n        if not visited[i]:\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                visited[node] = True\n                answer.append(len(graph[node]))\n                for j in graph[node]:\n                    if not visited[j]:\n                        stack.append(j)\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = [[] for _ in range(N)]\n    roads = [[] for _ in range(M)]\n    for _ in range(N-1):\n        a, b = map(int, stdin.split())\n        a, b = a-1, b-1\n        cities[a].append(b)\n        cities[b].append(a)\n        roads[0].append(a)\n        roads[0].append(b)\n    roads[1].append(0)\n    roads[1].append(0)\n    for _ in range(M-1):\n        a, b = map(int, stdin.split())\n        a, b = a-1, b-1\n        roads[0].append(a)\n        roads[0].append(b)\n    roads[1].append(1)\n    roads[1].append(1)\n    for i in range(2, N):\n        roads[i].append(i)\n        roads[i].append(i)\n        roads[i].append(roads[0].index(roads[i-1][0]))\n        roads[i].append(roads[0].index(roads[i-1][1]))\n    roads.pop(0)\n    cities.pop(0)\n    for i in range(1, N):\n        roads[i].pop(0)\n        roads[i].pop(0)\n    cities.pop(0)\n    return str(len(roads)) + '\\n' + str(len(cities))\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    city_count, roads_count = map(int, stdin.split())\n    cities = {}\n    for _ in range(roads_count):\n        cities[stdin.split()[0]] = stdin.split()[1]\n        cities[stdin.split()[1]] = stdin.split()[0]\n    for i in range(1, city_count+1):\n        print(len(cities.keys())-len(set(cities.values())))\n    \ndef"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 4')\n    2\n    2\n    1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    connections = {}\n    for i in range(m):\n        city1, city2 = map(int, stdin.split())\n        connections.setdefault(city1, []).append(city2)\n        connections.setdefault(city2, []).append(city1)\n    res = 0\n    for i in range(1, n + 1):\n        tmp_roads = connections.get(i, None)\n        if tmp_roads:\n            res += len(tmp_roads)\n    return str(res)\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s_arr = map(int, stdin.split())\n    s_arr = list(s_arr)\n\n    ans = 0\n    for s in s_arr:\n        if s % 10 == 0:\n            ans = 0\n            break\n        else:\n            if (s - 10) % 2 == 0:\n                ans += 5\n            else:\n                ans += 10\n\n    return str(ans)"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a, b = stdin.split()\n        a, b = int(a), int(b)\n        if a == b:\n            print(a)\n        else:\n            print((a+b)%10)\nsolution(input())\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # N = 3\n    # s_1 = 5\n    # s_2 = 10\n    # s_3 = 15\n    # s_4 = 20\n    # s_5 = 25\n    # s_6 = 30\n\n    # ans = 0\n    # ans += (N * s_1) + (N * s_2) + (N * s_3) + (N * s_4) + (N * s_5) + (N * s_6)\n    # return str(ans)\n    \n    # ans = 0\n    # for i in range(N):\n    #     if i % 2 == 1:\n    #         ans += s_i\n    # return str(ans)\n    \n    # ans = 0\n    # for i in range(N):\n    #     if i % 2 == 0:\n    #         ans += s_i\n    # return str(ans)\n    \n    return str(sum(range(N)) % 10)"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    s_1 = int(stdin.split()[1])\n    s_2 = int(stdin.split()[2])\n    s_3 = int(stdin.split()[3])\n    \n    if s_1 + s_2 + s_3 == 0:\n        return '0'\n    elif s_1 + s_2 + s_3 > 0:\n        return str(s_1 + s_2 + s_3)\n\nsolution('3 5 10 15')\n\n'''\ndef"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_list = list(map(int, stdin.split()))\n    max_score = max(s_list)\n    correct_count = 0\n    incorrect_count = 0\n    for i in s_list:\n        if i == max_score:\n            correct_count += 1\n        else:\n            incorrect_count += 1\n    if correct_count + incorrect_count <= N:\n        return str(max_score * (correct_count / (correct_count + incorrect_count)))\n    else:\n        return str(0)"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = list(map(int, stdin.split()[1:]))\n    max_score = 0\n    max_score_index = 0\n    for i in range(1, n + 1):\n        if scores[i - 1] % 10 == 0:\n            scores[i - 1] = 0\n        if scores[i - 1] > max_score:\n            max_score = scores[i - 1]\n            max_score_index = i\n    if max_score % 10!= 0:\n        print(max_score_index)\n    else:\n        print(max_score)\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(max(int(x) for x in stdin.split()))\n    return 0\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p_sum = 0\n    for i in range(N):\n        p_sum += int(stdin.strip())\n    if p_sum % 10 == 0:\n        return str(p_sum // 10)\n    elif p_sum % 10 == 1:\n        return str(p_sum // 10 + 10)\n    else:\n        return str(p_sum // 10 + 5)\nprint(solution(input()))\n\n----Solutions----\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    else:\n        return str(10 * n) + \" \" + str(100 - 10 * n)"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    # sum all the correct answers\n    sum_correct = sum([i for i in arr if i % 10 == 0])\n    # calculate the incorrect answers, those who are not multiple of 10\n    sum_incorrect = sum(list(filter(lambda x: x % 10!= 0, arr)))\n    # if the sum of incorrect answers and sum of correct answers are equal, return the sum\n    return str(sum_correct + sum_incorrect)\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    string = stdin\n    result = 0\n    i = 0\n    while i < length - 2:\n        string_start = string[i]\n        while i < length - 2 and string_start == string[i]:\n            i += 1\n        if i < length - 2:\n            string_end = string[i]\n            while i < length - 2 and string_end == string[i]:\n                i += 1\n            if i < length - 2:\n                string = string[:i] + string[i + 1:]\n            else:\n                break\n        result += 1\n    return result\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    l = len(s)\n    ans = 0\n    for i in range(1,l):\n        print(i)\n        t = s[:i] + s[i+1:]\n        ans = max(ans,len(set(t)))\n    return ans\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    S: str = stdin.strip()\n\n    n_a = 0\n    n_b = 0\n    for i in range(N - 1):\n        n_a += S.count(S[i])\n        n_b += S.count(S[i + 1])\n    return str(max(n_a, n_b))"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.split()\n    x = string[0]\n    y = string[1]\n    x_length = len(x)\n    y_length = len(y)\n    max_length = 0\n    for i in range(1, x_length + 1):\n        for j in range(i + 1, x_length + 1):\n            if x[i:j] == y[i:j]:\n                max_length = max(max_length, len(x[i:j]))\n    return max_length"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return max(len(set(stdin.replace(stdin[i], \"\"))), len(set(stdin.replace(stdin[i+1], \"\"))))\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin\n    strings: list = []\n    strings.append(s[0:n//2])\n    strings.append(s[n//2:])\n    distincts: int = 0\n    for i in range(len(strings[0])):\n        distincts += 1 if len(set(strings[0][i:i+1])) == len(strings[0][i:i+1]) else 0\n        distincts += 1 if len(set(strings[1][i:i+1])) == len(strings[1][i:i+1]) else 0\n    return distincts\nsolution(input())"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin\n    max_count: int = 0\n    x_list: list = []\n    y_list: list = []\n    if n == 1:\n        return str(len(set(s)))\n    for i in range(1, n):\n        x_list.append(s[0:i])\n        y_list.append(s[i:n])\n    x_list.sort()\n    y_list.sort()\n    x_set = set(x_list[0])\n    y_set = set(y_list[0])\n    for i in range(1, len(x_list)):\n        x_set = x_set.intersection(set(x_list[i]))\n    for i in range(1, len(y_list)):\n        y_set = y_set.intersection(set(y_list[i]))\n    count = 0\n    for i in x_set:\n        if i in y_set:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return len(set(stdin))"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    lst = []\n    for i in range(N-1):\n        for j in range(i+1, N):\n            lst.append(S[i:j+1])\n    lst = list(set(lst))\n    print(len(lst))\nsolution(input())\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    result = ''\n    if string[0] == 'Sunny':\n        result = 'Cloudy'\n    elif string[0] == 'Cloudy':\n        result = 'Rainy'\n    else:\n        result = 'Rainy'\n    return result\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    weather = stdin.strip()\n    if weather == \"Sunny\":\n        return \"Cloudy\"\n    elif weather == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Rainy\"\n\n\nsolution(input())"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\".join(sorted(stdin))"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin\n    if weather == \"Sunny\":\n        weather = \"Cloudy\"\n    elif weather == \"Cloudy\":\n        weather = \"Rainy\"\n    elif weather == \"Rainy\":\n        weather = \"Sunny\"\n    return weather\n\nprint(solution(input()))\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    weather = stdin.strip()\n    if weather == 'Sunny':\n        return 'Cloudy'\n    elif weather == 'Cloudy':\n        return 'Sunny'\n    elif weather == 'Rainy':\n        return 'Rainy'"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    weather = {'S': 0, 'C': 0, 'R': 0}\n    for w in stdin:\n        weather[w] += 1\n    return ''.join(weather.keys())\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    if N >= A and N >= B:\n        return \"%.2f\" % (A*N)\n    elif N <= A:\n        return \"%.2f\" % (B)\n    else:\n        return \"%.2f\" % (A)\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= 2*a and a <= 2*b:\n        return str(a*b)\n    else:\n        if n <= a:\n            return str(a)\n        else:\n            if n <= b:\n                return str(b)\n            else:\n                return str(b)"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    plan, duration, fee = stdin.split(' ')\n    plan = int(plan)\n    duration = int(duration)\n    fee = int(fee)\n    if plan == 1:\n        return str(duration * fee)\n    elif plan == 2:\n        return str(fee)\n    else:\n        raise Exception('Invalid input')"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    if a * n < b:\n        return str(b)\n    else:\n        return str(a * n)\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    if n <= a:\n        if n <= b:\n            return str(a * n)\n        else:\n            return str(a * n + b)\n    else:\n        return str(b)\nprint(solution(input()))\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= a:\n        return str(a * b)\n    else:\n        x = (a * b)\n        if n <= b:\n            return str(x)\n        else:\n            return str(x + ((n - b) * a))\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min_fee(list(map(int, stdin.split()))))\ndef"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    args = stdin.split()\n    plan1_fee = 0\n    plan2_fee = 0\n    if int(args[1]) <= 180:\n        plan1_fee = int(args[2]) * int(args[1])\n    if int(args[1]) > 180:\n        plan1_fee = int(args[2])\n    if int(args[2]) <= 120:\n        plan2_fee = int(args[2]) * int(args[1])\n    if int(args[2]) > 120:\n        plan2_fee = int(args[2])\n    print(min(plan1_fee, plan2_fee))\n    return plan1_fee + plan2_fee\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    if A == 0 and N <= 1:\n        return str(0)\n    if N >= 1:\n        if A == 0 and N >= 2:\n            return str(B)\n        if N == 1:\n            return str(int(A * N * 120 / 120))\n        else:\n            return str(int(A * N * 120 / 120) + int(N * (N - 1) / 2 * 120 / 120))\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    docstring\n    \"\"\"\n    data = list(map(int, stdin.split()))\n    if data[2] < data[1]:\n        data[2] = data[1]\n    print((data[0] * data[1]) + data[2])\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == m:\n        return \"3800\"\n    total = 0\n    while m > n:\n        if m % 2 == 1:\n            break\n        m = m >> 1\n        total += 1\n    if m == n:\n        return str(total) + \" \" + str(round(total * 2))\n    if total == 0:\n        return str(total) + \" \" + str(total * 2)\n    return str(total * 2) + \" \" + str(total * 2 + total)\n'''"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split()\n    n = int(n)\n    m = int(m)\n    for i in range(n):\n        if 1 <= m <= 5:\n            print(n*(m//5) + (n*(m//5)**2 + m//5)//2)\n        else:\n            print(n*m)\n    return\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.split()[0])\n    prob = float(stdin.split()[1])\n    # Probability of each submission to be successful\n    pp = prob / 2\n    # List of all submission times\n    subm = []\n    for _ in range(cases):\n        # Get submission time\n        subm.append(int(input()))\n    # Solution\n    res = 0\n    # Number of unsuccessful submissions\n    nn = 0\n    # While there are still some unsuccessful submissions\n    while nn < cases:\n        # Check if each submission time is successful\n        for i in range(len(subm)):\n            if subm[i] > 0:\n                # Successful submission\n                subm[i] -= 1\n                if nn == cases:\n                    return str(int(res * pp))\n                continue\n            # Submission is not successful\n            nn += 1\n            # This is not the first submission\n            if nn!= cases and nn!= 1:\n                # Get the submission times in the past\n                past = subm[:i]\n                # Get the submission times in the future\n                future = subm[i + 1:]\n                # Get the time difference\n                diff = future[0] - past[0]\n                # Get probability\n                probability = 1 - prob\n                # Get the execution time of each submission\n                execution = diff * probability\n                # Add the execution time to the total execution time\n                res += execution\n            break\n    return str(int(res * pp))\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    while True:\n        try:\n            n, m = list(map(int, stdin.split()))\n            break\n        except:\n            x += 1\n            stdin = stdin[:-1]\n    l = list(map(int, stdin.split()))\n    N, M = n, m\n    t = sum([x * (1 / 2) for x in l])\n    for i in range(1, max(N, M)):\n        if i == M:\n            t += (i - 1) * sum(x * 1 / 2 for x in l)\n        else:\n            t += (i - 1) * (i * sum(x * 1 / 2 for x in l) + (1 / 2) * sum(l[j] * (1 / 2) for j in range(i - 1, N)))\n    return int(t)"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n    p = 1 / 2\n    t = 0\n    while True:\n        if N <= 5:\n            break\n        N -= 5\n        t += p * 1900\n        p = p * 2\n    if M >= N:\n        M -= N\n        t += p * 100\n        p = p * 1.5\n    else:\n        t += p * (1900 * M + 1900 * (M - N))\n        p = p * 1.5\n    return str(int(t))\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 1:\n        return str(min(n, 5))\n    start = 1\n    end = min(n, 5)\n    while end - start >= 1:\n        mid = (start + end) // 2\n        if check_code(mid):\n            start = mid\n        else:\n            end = mid - 1\n    return str(start)\n\n\ndef"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(i) for i in stdin.split())\n    time = 0\n    while True:\n        if time % 2:\n            break\n        time += 1\n    if M == 1:\n        time += M\n    return str(time)\n\nsolution('1 1')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n*m - sum([1/2**i for i in range(n, 5)]))\n\nprint(solution(input()))\n\nThis problem is similar to the above problem, but in this case, the input is not given as a string (instead, it is given as the actual input).\nInput is given in the following format:\nN M\n\nOutput is as in the previous problem.\n\"\"\"\n\nn, m = map(int, input().split())\n\ndef"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    _sum = 0\n    for _i in range(M):\n        _sum += _i\n    _1M = _sum * (N - M)\n    _1M2 = _sum * (N - M - 1)\n    _2M = _1M + (_1M2 * 2)\n    _2M2 = _1M + (_1M2 * 4)\n    _3M = _2M + (_2M2 * 2)\n    _3M2 = _2M + (_2M2 * 4)\n    _4M = _3M + (_3M2 * 2)\n    _4M2 = _3M + (_3M2 * 4)\n    _5M = _4M + (_4M2 * 2)\n    _5M2 = _4M + (_4M2 * 4)\n    _6M = _5M + (_5M2 * 2)\n    _6M2 = _5M + (_5M2 * 4)\n    _7M = _6M + (_6M2 * 2)\n    _7M2 = _6M + (_6M2 * 4)\n    _8M = _7M + (_7M2 * 2)\n    _8M2 = _7M + (_7M2 * 4)\n    _9M = _8M + (_8M2 * 2)\n    _9M2 = _8M + (_8M2 * 4)\n    _10M = _9M + (_9M2 * 2)\n    _10M2 = _9M + (_9M2 * 4)\n    _11M = _10M + (_10M2 * 2)\n    _11M2 = _10M + (_10M2 * 4)\n    _12M = _11M + (_11M2 * 2)\n    _12M2 = _11M + (_11M2 * 4)\n    _13M = _12M + (_12M2 * 2)\n    _13M2 = _12M + (_12M2 * 4)\n    _14M = _13M + (_13M2 * 2)\n    _14M2 = _13M + (_13M2 * 4)\n    _15M = _14M + (_14M2 * 2)\n    _15M2 = _14M + (_14M2 * 4)\n    _16M = _15M + (_15M2 * 2)\n    _16M2 = _15M + (_15M2 * 4)\n    _17M = _16M + (_16M2 * 2)\n    _17M2 = _16M + (_16M2 * 4)\n    _18M = _17M + (_17M2 * 2)\n    _18M2 = _17M + (_17M2 * 4)\n    _19M = _18M + (_18M2 * 2)\n    _19M2 = _18M + (_18M2 * 4)\n    _20M = _19M + (_19M2 * 2)\n    _20M2 = _19M + (_19M2 * 4)\n    _21M = _20M + (_20M2 * 2)\n    _21M2 = _20M + (_20M2 * 4)\n    _22M = _21M + (_21M2 * 2)\n    _22M2 = _21M + (_21M2 * 4)\n    _23M = _22M + (_22M2 * 2)\n    _23M2 = _22M + (_22M2 * 4)\n    _24M = _23M + (_23M2 * 2)\n    _24M2 = _23M + (_23M2 * 4)\n    _25M = _24M + (_24M2 * 2)\n    _25M2 = _24M + (_24M2 * 4)\n    _26M = _25M + (_25M2 * 2)\n    _26M2 = _25M + (_25M2 * 4)\n    _27M = _26M + (_26M2 * 2)\n    _27M2 = _26M + (_26M2 * 4)\n    _28M = _27M + (_27M2 * 2)\n    _28M2 = _27M + (_27M2 * 4)\n    _29M = _28M + (_28M2 * 2)\n    _29M2 = _28M + (_28M2 * 4)\n    _30M = _29M + (_29M2 * 2)\n    _30M2 = _29M + (_29M2 * 4)\n    _31M = _30M + (_30M2 * 2)\n    _31M2 = _30M + (_30M2 * 4)\n    _32M = _31M + (_31M2 * 2)\n    _32M2 = _31M + (_31M2 * 4)\n    _33M = _32M + (_32M2 * 2)\n    _33M2 = _32M + (_32M2 * 4)\n    _34M = _33M + (_33M2 * 2)\n    _34M2 = _33M + (_33M2 * 4)\n    _35M = _34M + (_34M2 * 2)\n    _35M2 = _34M + (_34M2 * 4)\n    _36M = _35M + (_35M2 * 2)\n    _36M2 = _35M + (_35M2 * 4)\n    _37M = _36M + (_36M2 * 2)\n    _37M2 = _36M + (_36M2 * 4)\n    _38M = _37M + (_37M2 * 2)\n    _38M2 = _37M + (_37M2 * 4)\n    _39M = _38M + (_38M2 * 2)\n    _39M2 = _38M + (_38M2 * 4)\n    _40M = _39M + (_39M2 * 2)\n    _40M2 = _39M + (_39M2 * 4)\n    _41M = _40M + (_40M2 * 2)\n    _41M2 = _40M + (_40M2 * 4)\n    _42M = _41M + (_41M2 * 2)\n    _42M2 = _41M + (_41M2 * 4)\n    _43M = _42M + (_42M2 * 2)\n    _43M2 = _42M + (_42M2 * 4)\n    _44M = _43M + (_43M2 * 2)\n    _44M2 = _43M + (_43M2 * 4)\n    _45M = _44M + (_44M2 * 2)\n    _45M2 = _44"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    s = stdin\n    i = 0\n    while i < len(s):\n        if s[i] in s[i+1:]:\n            i += 1\n        else:\n            print(s[i])\n            return\nsolution(input())\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\n\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    if all(i in stdin for i in stdin):\n        return None\n    else:\n        return min(stdin)"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    # 1. \ub0b4\ubd80\uc5d0 \uc788\ub294 \uc22b\uc790\uac00 \uc544\ub2cc \uc601\ubb38\uc790\ub4e4\uc744 \ucc3e\uc544\uc11c lowercase \uc21c\uc11c\ub300\ub85c \uc815\ub82c\n    # 2. \ub0b4\ubd80\uc5d0 \uc788\ub294 \uc22b\uc790\uac00 \uc544\ub2cc \uc601\ubb38\uc790\ub4e4\uc744 \ucc3e\uc544\uc11c \uc21c\uc11c\ub300\ub85c \uc815\ub82c\n    # 3. lowercase\uc5d0 \uc788\ub294 \uc22b\uc790\ub4e4 \uc911 \uc22b\uc790\uac00 \uc544\ub2cc \uc601\ubb38\uc790\uc778 \uacbd\uc6b0 print None, \uc22b\uc790\uac00 \uc544\ub2cc \uc601\ubb38\uc790\uc778 \uacbd\uc6b0 \ub0b4\ubd80\uc5d0 \uc788\ub294 \uc22b\uc790\ub4e4\uc744 \ucc3e\uc544\uc11c \uc815\ub82c\n    # 4. lowercase\uc5d0 \uc788\ub294 \uc22b\uc790\ub4e4 \uc911 \uc22b\uc790\uac00 \uc544\ub2cc \uc601\ubb38\uc790\uc778 \uacbd\uc6b0 None\n    lowercase = sorted(stdin, key=lambda x: ord(x))\n\n    # 2. \ub0b4\ubd80\uc5d0 \uc788\ub294 \uc22b\uc790\uac00 \uc544\ub2cc \uc601\ubb38\uc790\ub4e4\uc744 \ucc3e\uc544\uc11c lowercase \uc21c\uc11c\ub300\ub85c \uc815\ub82c\n    for i in lowercase:\n        if i not in stdin:\n            return i\n\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    # set() returns a set.\n    # s = set(s)\n    l = list(s)\n    l.sort()\n    for i in range(len(s)):\n        if l[i] in s:\n            continue\n        else:\n            return l[i]"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        string = stdin.strip()\n        if string == '':\n            break\n        if ''.join(sorted(string)) == string:\n            print(None)\n        else:\n            print(string[0])\n\nsolution(stdin)\n'''"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    char = stdin.strip()\n    if char == \"\":\n        print(None)\n    else:\n        char = char[0]\n        if char in stdin:\n            print(None)\n        else:\n            return char"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    for c in s:\n        if c not in s:\n            return c\n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None\n    # Your code here"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(c for c in stdin if c not in stdin.lower()) or None\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution.\n    \"\"\"\n    if not stdin:\n        return None\n    \n    #list with values in string\n    values = stdin.split(\" \")\n    \n    #set with all values\n    values_set = set(values)\n    \n    #set with lowercase letters in set\n    lowercase_letters = set(chr(i) for i in range(97,123))\n    \n    #set with lowercase letters without \"a\"\n    no_a = lowercase_letters - {values_set.pop()}\n    \n    #string with the smallest letter\n    smallest_letter = min(no_a)\n    \n    #print the result\n    if smallest_letter == None:\n        print(None)\n    else:\n        print(smallest_letter)\n    \n    return None"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = map(int, stdin.split())\n    X = sorted(list(X))\n    X.pop()\n    result = []\n    for i in range(len(X)):\n        result.append(X[N // 2 - i])\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip().split()\n    N = int(x.pop(0))\n    A = x\n    B = []\n    for i in range(1, N + 1):\n        B.append(int(sorted(A)[i // 2 - 1]))\n    return '\\n'.join(map(str, B))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = sorted(map(int, stdin.split()))\n    medians = [nums[i] if i % 2 == 0 else (nums[i - 1] + nums[i]) // 2\n                for i in range(1, len(nums), 2)]\n    return '\\n'.join(map(str, medians))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_numbers = stdin.split()\n    n = int(number_numbers.pop(0))\n    numbers = list(map(int, number_numbers))\n    return \"\\n\".join([str(find_median(n, numbers)) for i in range(n)])\n\ndef"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    X = list(map(int, stdin.strip().split()))\n    B = [None]*n\n    B[0] = X[0]\n    B[1] = max(X[0], X[1])\n    B[2] = max(B[1], X[2])\n    B[3] = max(B[2], X[3])\n    B[4] = max(B[3], X[4])\n    for i in range(5, n):\n        B[i] = max(B[i-1], X[i])\n    return '\\n'.join(map(str, B))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()\n    n = int(number[0])\n    X = list(map(int, number[1:]))\n    B = []\n    sorted_X = sorted(X)\n    median = len(X) // 2\n    for i in range(0, len(sorted_X)):\n        if i <= median:\n            B.append(sorted_X[i])\n        else:\n            B.append(sorted_X[i - median])\n\n    return '\\n'.join(map(str, B))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = sorted(map(int, stdin.split()))\n    return '\\n'.join(map(str, sorted(arr[1:-1:2], reverse=True)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    N = int(input_str[0])\n    X_list = list(map(int, input_str[1:]))\n    B_list = []\n    B_list.append(max(X_list))\n    X_list.remove(max(X_list))\n    B_list.append(max(X_list))\n    X_list.remove(max(X_list))\n    B_list.append(max(X_list))\n    X_list.remove(max(X_list))\n    B_list.append(max(X_list))\n    print(B_list[0], B_list[1], B_list[2], B_list[3])\n\nsolution(\"4 2 4 3\")\nsolution(\"6 1 2 3 4 5\")\nsolution(\"5 2 3 4 5\")\nsolution(\"10 2 3 4 5 6 7 8 9 10\")\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    numbers = stdin.split()\n    n = int(numbers[0])\n    numbers = list(map(int, numbers[1:]))\n    B = []\n    n = len(numbers)\n    if n % 2 == 0:\n        mid = n // 2\n        B.append(sorted(numbers)[mid - 1])\n        B.append(sorted(numbers)[mid])\n    else:\n        mid = (n // 2) + 1\n        B.append(sorted(numbers)[mid - 1])\n        B.append(sorted(numbers)[mid - 1])\n    for i in range(1, n, 2):\n        B.append(sorted(numbers)[i - 1])\n    for i in range(0, n, 2):\n        B.append(sorted(numbers)[i + 1])\n    return '\\n'.join(map(str, B))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    arr.sort()\n    arr = arr[1:-1]\n    median = arr[len(arr)//2]\n    left, right = 1, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == median:\n            right = mid\n        elif arr[mid] < median:\n            left = mid + 1\n        else:\n            right = mid\n    return str(arr[left - 1])\n\nsolution(\"4 2 4 3\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    A = sorted(A)\n    # print(A)\n\n    # n = len(A)\n    # for i in range(n):\n    #     if i == 0 or A[i-1]!= A[i]:\n    #         print(A[i-1], end='')\n    #         print('*', end='')\n    #     else:\n    #         print(A[i-1], end='')\n    #         print('+', end='')\n    # print()\n\n    # n = len(A)\n    # if n % 2 == 0:\n    #     m = n // 2\n    # else:\n    #     m = n // 2 + 1\n\n    # # print('n', n)\n    # # print('m', m)\n\n    # if m == 1:\n    #     print(A[0] + A[1])\n    # else:\n    #     print(A[0] * A[m] + A[1] * A[m - 1])\n    # print()\n\n    n = len(A)\n    if n < 4:\n        return 0\n\n    m = n // 2\n    if m == 1:\n        print(A[0] + A[1])\n    elif n == 4:\n        print(A[0] * A[2] + A[1] * A[3])\n    else:\n        print(A[0] * A[m] + A[1] * A[m - 1] + A[2] * A[m - 2] + A[3] * A[m - 3])\n\n    return 0"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sticks = [int(x) for x in stdin.split()]\n    res = max([sticks[i] * sticks[j] for i in range(N) for j in range(i + 1, N)])\n    return str(res)\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.strip().split()))\n    sticks.sort()\n    # print(sticks)\n    max_area = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # print(sticks[i:j], sticks[j], sticks[k])\n                side1 = sticks[i]\n                side2 = sticks[j] + sticks[k]\n                max_area = max(max_area, side1 * side2)\n    if max_area > 0:\n        return str(max_area)\n    return \"0\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1:]))\n\n    dp = [0] * N\n    dp[0] = sticks[0]\n    for i in range(1, N):\n        if dp[i - 1] <= sticks[i]:\n            dp[i] = sticks[i]\n\n    for i in range(N - 1, -1, -1):\n        if dp[i] <= sticks[i]:\n            dp[i] = sticks[i]\n\n    max_area = max(dp)\n    print(max_area)\n    return max_area\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin.pop(0))\n    sticks = stdin.pop()\n    sticks = sticks.split(\" \")\n    sticks = list(map(int, sticks))\n    sticks = sorted(sticks, reverse=True)\n    \n    i = 0\n    while len(sticks) > i+2:\n        if sticks[i] + sticks[i+1] < sticks[i+2]:\n            break\n        i += 1\n    \n    if i == 0:\n        return 0\n    if len(sticks) - i == 1:\n        return (sticks[i+1] ** 2)\n    \n    return (sticks[i] ** 2) + (sticks[i+1] ** 2) + (sticks[i+2] ** 2)\n\nsolution(input())\n\n// This is not a good way of doing this problem. I have to keep track of all the sticks and check if the largest pair of sticks makes a rectangle.\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calc_area_rectangle(a_i):\n        return a_i * a_i\n\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    max_area = -1\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    a = calc_area_rectangle(arr[i])\n                    b = calc_area_rectangle(arr[j])\n                    c = calc_area_rectangle(arr[k])\n                    d = calc_area_rectangle(arr[l])\n                    if a + b + c + d > max_area:\n                        max_area = a + b + c + d\n\n    return str(max_area)\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    max_area = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    if sticks[i] < sticks[j] + sticks[k] < sticks[l] or sticks[i] < sticks[l] + sticks[j] < sticks[k]:\n                        max_area = max(max_area, sticks[i]*sticks[j]*sticks[k]*sticks[l])\n    return str(max_area) if max_area!= 0 else '0'\n\nprint(solution(input()))"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split('\\n')\n\n    num_sticks = int(inp[0])\n    sticks_data = inp[1:]\n    sticks_data = list(map(int, sticks_data))\n\n    area = 0\n    for i in range(num_sticks):\n        for j in range(i + 1, num_sticks):\n            for k in range(j + 1, num_sticks):\n                for l in range(k + 1, num_sticks):\n                    area = max(area, sticks_data[i] * sticks_data[j] +\n                               sticks_data[k] * sticks_data[l])\n\n    print(area)\n    return area\n\n\nsolution(input())\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split(\" \")))\n    return str(largest_rectangle_area(sticks))\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(input())\n    # D = int(input())\n    # X = int(input())\n    # A = list(map(int, input().split()))\n\n    N = int(stdin.split()[0])\n    D = int(stdin.split()[1])\n    X = int(stdin.split()[2])\n    A = list(map(int, stdin.split()[3].split(' ')))\n    \n    counter = 0\n\n    for i in range(D):\n        counter += 1\n        for j in range(len(A)):\n            A[j] += 1\n            if A[j] >= X:\n                A[j] = 0\n    \n    print(counter)\n    return counter\n    \n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split())\n    total_cups = n * x\n    events = [0] * total_cups\n    for d_i in range(1, d + 1):\n        for a_i in range(1, n + 1):\n            events[a_i + a_i * d_i] += 1\n    for i in range(len(events)):\n        events[i] %= (d - 1)\n    return str(sum(events))\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x, *a = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n + 1):\n        days = (i - 1) * x + i\n        if days % d == 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n\n    A = 0\n    for i in range(1, N+1):\n        A += min(D, i+1)\n        A -= max(D, i-1)\n    print(A)"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N, D, X = map(int, stdin.split())\n    # We can't have more than 100 people\n    if N > 100:\n        return -1\n    # We can't have less than 1 person in the camp\n    if D <= 0 or X <= 0:\n        return -1\n    # If D is 100 and X is 10, then no one wants chocolate pieces\n    if D == 100 and X == 10:\n        return 0\n    # We can't have more than 100 chocolate pieces\n    if X > 100:\n        return -1\n    # We can't have less than 1 chocolate piece\n    if X <= 0:\n        return -1\n    # To start, we need to eat 1 chocolate piece for each day\n    return N + D * X\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d, x, *a = map(int, stdin.split())\n\n    d = d - 1\n    chocolate_pieces = 0\n    for i in range(n):\n        if d > 0:\n            chocolate_pieces += 1\n            d = d - x\n        d = d + (a[i] - 1)\n\n    return str(chocolate_pieces)\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    days = (D-1) * X\n    chocolate_pieces = 0\n    for a in A:\n        chocolate_pieces += (days // a) + 1\n    return str(chocolate_pieces)"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_help(**parse_input(stdin)))\n\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.rstrip()\n    \n    N, D, X = map(int, input_data.split())\n    return N*X"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input from Standard Input, separates it into N, D and X, and returns the total number of chocolate pieces prepared at the beginning of the camp.\n    \"\"\"\n    N, D, X = map(int, stdin.split())\n    return str(D * X - D)\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    if A + B + C == X:\n        return str(A + B + C)\n    elif A + B + C > X:\n        return str(A + B + C - (X - A - B - C))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c, x) = map(int, stdin.split())\n    # TODO: Write your code here\n    return \"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a + b + c!= 1:\n        return '0'\n    if c == 0:\n        return '1'\n    if c == 1:\n        if b == 0:\n            return '2'\n        if b == 1:\n            if a == 0:\n                return '2'\n            else:\n                return '1'\n        if a == 1:\n            if b == 0:\n                return '1'\n            else:\n                return '2'\n    if c == 2:\n        if b == 0:\n            if a == 0:\n                return '2'\n            if a == 1:\n                return '1'\n            if a == 2:\n                return '2'\n        if b == 1:\n            if a == 1:\n                return '1'\n            if a == 2:\n                return '2'\n            if a == 0:\n                return '2'\n        if b == 2:\n            if a == 0:\n                if a == 1:\n                    return '1'\n                if a == 2:\n                    return '2'\n            if a == 1:\n                if a == 2:\n                    return '1'\n                if a == 0:\n                    return '2'\n            if a == 2:\n                if a == 1:\n                    return '2'\n                if a == 0:\n                    return '2'\n    if c == 3:\n        if b == 0:\n            if a == 0:\n                if a == 1:\n                    if a == 2:\n                        return '2'\n                    if a == 3:\n                        return '1'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 3:\n                    if a == 2:\n                        return '2'\n                    if a == 0:\n                        return '1'\n            if a == 1:\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 1:\n                        return '2'\n                if a == 3:\n                    if a == 1:\n                        return '1'\n                    if a == 2:\n                        return '2'\n            if a == 2:\n                if a == 3:\n                    return '1'\n                if a == 0:\n                    if a == 1:\n                        if a == 2:\n                            return '1'\n                        if a == 3:\n                            return '2'\n                    if a == 2:\n                        if a == 3:\n                            return '2'\n                        if a == 0:\n                            return '1'\n                if a == 1:\n                    if a == 2:\n                        if a == 3:\n                            return '2'\n                        if a == 0:\n                            return '1'\n                if a == 3:\n                    if a == 2:\n                        if a == 1:\n                            return '2'\n                        if a == 0:\n                            return '1'\n        if b == 1:\n            if a == 0:\n                if a == 1:\n                    if a == 2:\n                        return '1'\n                    if a == 3:\n                        return '2'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 3:\n                    if a == 2:\n                        return '2'\n                    if a == 1:\n                        return '1'\n            if a == 1:\n                if a == 2:\n                    if a == 3:\n                        return '2'\n                    if a == 0:\n                        return '1'\n                if a == 2:\n                    if a == 3:\n                        return '2'\n                    if a == 1:\n                        return '1'\n                if a == 3:\n                    if a == 2:\n                        return '2'\n                    if a == 1:\n                        return '1'\n            if a == 2:\n                if a == 3:\n                    return '2'\n                if a == 0:\n                    if a == 1:\n                        if a == 2:\n                            return '2'\n                        if a == 3:\n                            return '1'\n                    if a == 2:\n                        if a == 3:\n                            return '1'\n                        if a == 0:\n                            return '2'\n                if a == 1:\n                    if a == 2:\n                        if a == 3:\n                            return '1'\n                        if a == 0:\n                            return '2'\n                    if a == 3:\n                        if a == 1:\n                            return '2'\n                        if a == 2:\n                            return '1'\n                if a == 3:\n                    if a == 2:\n                        if a == 1:\n                            return '1'\n                        if a == 0:\n                            return '2'\n        if b == 2:\n            if a == 0:\n                if a == 1:\n                    if a == 2:\n                        return '1'\n                    if a == 3:\n                        return '2'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 3:\n                    if a == 2:\n                        return '2'\n                    if a == 1:\n                        return '1'\n            if a == 1:\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 1:\n                        return '2'\n                if a == 3:\n                    if a == 2:\n                        return '2'\n                    if a == 1:\n                        return '1'\n            if a == 2:\n                if a == 3:\n                    return '2'\n                if a == 0:\n                    if a == 1:\n                        if a == 2:\n                            return '1'\n                        if a == 3:\n                            return '2'\n                    if a == 2:\n                        if a == 3:\n                            return '1'\n                        if a == 0:\n                            return '2'\n                if a == 1:\n                    if a == 2:\n                        if a == 3:\n                            return '1'\n                        if a == 0:\n                            return '2'\n                    if a == 3:\n                        if a == 1:\n                            return '2'\n                        if a == 2:\n                            return '1'\n        if b == 3:\n            if a == 0:\n                if a == 1:\n                    if a == 2:\n                        return '1'\n                    if a == 3:\n                        return '2'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 3:\n                    if a == 2:\n                        return '2'\n                    if a == 1:\n                        return '1'\n            if a == 1:\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 0:\n                        return '2'\n                if a == 2:\n                    if a == 3:\n                        return '1'\n                    if a == 1:\n                        return '2'\n                if a == 3:\n                    if a == 2:\n                        return '"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a, b, c, x = 0, 0, 0, 0\n    # initializing ans as 0, since no way to select any of the coins\n    ans = 0\n    while x < k:\n        if a == n:\n            x = x + b\n            a, b, c, x = 0, 0, 0, 0\n        elif b == m:\n            x = x + c\n            a, b, c, x = 0, 0, 0, 0\n        elif c == k:\n            x = x + a\n            a, b, c, x = 0, 0, 0, 0\n        else:\n            x = x + a + b + c\n            a, b, c, x = 0, 0, 0, 0\n        # increase the coin count\n        if a!= n:\n            a = a + 1\n        elif b!= m:\n            b = b + 1\n        elif c!= k:\n            c = c + 1\n    return ans\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    x = int(x)\n    coins_types = []\n    coins_types.append([a, b, c])\n    coins_types.append([a, c, b])\n    coins_types.append([b, a, c])\n    coins_types.append([b, c, a])\n    coins_types.append([c, a, b])\n    coins_types.append([c, b, a])\n    answer = []\n    for i in coins_types:\n        if len(i) == 2:\n            if i[0] + i[1] == x:\n                answer.append(i)\n        elif len(i) == 3:\n            if (i[0] + i[1]) == x and (i[1] + i[2]) == x:\n                answer.append(i)\n        else:\n            continue\n    return str(len(answer))\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x = 0\n    coin_cnt = 0\n    if a >= 50:\n        x += 1\n        coin_cnt += 1\n    if b >= 50:\n        x += 1\n        coin_cnt += 1\n    if c >= 50:\n        x += 1\n        coin_cnt += 1\n\n    if x > 1:\n        coin_cnt = 0\n    if x == 0:\n        coin_cnt = 1\n    if x == 1:\n        if a == 1:\n            coin_cnt += 1\n        elif b == 1:\n            coin_cnt += 1\n        elif c == 1:\n            coin_cnt += 1\n\n    return str(coin_cnt)"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    a = int(x[0])\n    b = int(x[1])\n    c = int(x[2])\n    x = int(x[3])\n\n    if x % 50!= 0:\n        return '0'\n    if a + b + c!= x:\n        return '0'\n    if a + b!= x:\n        return '0'\n    return '1'"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    coins = [0, 0, 0]\n    coins[0] = x // 500\n    x %= 500\n    coins[1] = x // 100\n    x %= 100\n    coins[2] = x // 50\n    return str(coins[2]) + \" \" + str(coins[1]) + \" \" + str(coins[0])\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if (n < 0):\n        return \"No way to select coins to satisfy the condition.\"\n    elif (n == 0):\n        return \"No ways to select coins to satisfy the condition.\"\n    elif (n == 1):\n        return \"No way to select coins to satisfy the condition.\"\n    elif (n == 2):\n        return \"2 ways to select coins to satisfy the condition.\"\n    elif (n == 3):\n        return \"3 ways to select coins to satisfy the condition.\"\n    elif (n == 4):\n        return \"4 ways to select coins to satisfy the condition.\"\n    elif (n == 5):\n        return \"5 ways to select coins to satisfy the condition.\"\n    elif (n == 6):\n        return \"6 ways to select coins to satisfy the condition.\"\n    elif (n == 7):\n        return \"7 ways to select coins to satisfy the condition.\"\n    elif (n == 8):\n        return \"8 ways to select coins to satisfy the condition.\"\n    elif (n == 9):\n        return \"9 ways to select coins to satisfy the condition.\"\n    elif (n == 10):\n        return \"10 ways to select coins to satisfy the condition.\"\n    elif (n == 11):\n        return \"11 ways to select coins to satisfy the condition.\"\n    elif (n == 12):\n        return \"12 ways to select coins to satisfy the condition.\"\n    elif (n == 13):\n        return \"13 ways to select coins to satisfy the condition.\"\n    elif (n == 14):\n        return \"14 ways to select coins to satisfy the condition.\"\n    elif (n == 15):\n        return \"15 ways to select coins to satisfy the condition.\"\n    elif (n == 16):\n        return \"16 ways to select coins to satisfy the condition.\"\n    elif (n == 17):\n        return \"17 ways to select coins to satisfy the condition.\"\n    elif (n == 18):\n        return \"18 ways to select coins to satisfy the condition.\"\n    elif (n == 19):\n        return \"19 ways to select coins to satisfy the condition.\"\n    elif (n == 20):\n        return \"20 ways to select coins to satisfy the condition.\"\n    elif (n == 21):\n        return \"21 ways to select coins to satisfy the condition.\"\n    elif (n == 22):\n        return \"22 ways to select coins to satisfy the condition.\"\n    elif (n == 23):\n        return \"23 ways to select coins to satisfy the condition.\"\n    elif (n == 24):\n        return \"24 ways to select coins to satisfy the condition.\"\n    elif (n == 25):\n        return \"25 ways to select coins to satisfy the condition.\"\n    elif (n == 26):\n        return \"26 ways to select coins to satisfy the condition.\"\n    elif (n == 27):\n        return \"27 ways to select coins to satisfy the condition.\"\n    elif (n == 28):\n        return \"28 ways to select coins to satisfy the condition.\"\n    elif (n == 29):\n        return \"29 ways to select coins to satisfy the condition.\"\n    elif (n == 30):\n        return \"30 ways to select coins to satisfy the condition.\"\n    elif (n == 31):\n        return \"31 ways to select coins to satisfy the condition.\"\n    elif (n == 32):\n        return \"32 ways to select coins to satisfy the condition.\"\n    elif (n == 33):\n        return \"33 ways to select coins to satisfy the condition.\"\n    elif (n == 34):\n        return \"34 ways to select coins to satisfy the condition.\"\n    elif (n == 35):\n        return \"35 ways to select coins to satisfy the condition.\"\n    elif (n == 36):\n        return \"36 ways to select coins to satisfy the condition.\"\n    elif (n == 37):\n        return \"37 ways to select coins to satisfy the condition.\"\n    elif (n == 38):\n        return \"38 ways to select coins to satisfy the condition.\"\n    elif (n == 39):\n        return \"39 ways to select coins to satisfy the condition.\"\n    elif (n == 40):\n        return \"40 ways to select coins to satisfy the condition.\"\n    elif (n == 41):\n        return \"41 ways to select coins to satisfy the condition.\"\n    elif (n == 42):\n        return \"42 ways to select coins to satisfy the condition.\"\n    elif (n == 43):\n        return \"43 ways to select coins to satisfy the condition.\"\n    elif (n == 44):\n        return \"44 ways to select coins to satisfy the condition.\"\n    elif (n == 45):\n        return \"45 ways to select coins to satisfy the condition.\"\n    elif (n == 46):\n        return \"46 ways to select coins to satisfy the condition.\"\n    elif (n == 47):\n        return \"47 ways to select coins to satisfy the condition.\"\n    elif (n == 48):\n        return \"48 ways to select coins to satisfy the condition.\"\n    elif (n == 49):\n        return \"49 ways to select coins to satisfy the condition.\"\n    elif (n == 50):\n        return \"50 ways to select coins to satisfy the condition.\"\n    elif (n == 51):\n        return \"51 ways to select coins to satisfy the condition.\"\n    elif (n == 52):\n        return \"52 ways to select coins to satisfy the condition.\"\n    elif (n == 53):\n        return \"53 ways to select coins to satisfy the condition.\"\n    elif (n == 54):\n        return \"54 ways to select coins to satisfy the condition.\"\n    elif (n == 55):\n        return \"55 ways to select coins to satisfy the condition.\"\n    elif (n == 56):\n        return \"56 ways to select coins to satisfy the condition.\"\n    elif (n == 57):\n        return \"57 ways to select coins to satisfy the condition.\"\n    elif (n == 58):\n        return \"58 ways to select coins to satisfy the condition.\"\n    elif (n == 59):\n        return \"59 ways to select coins to satisfy the condition.\"\n    elif (n == 60):\n        return \"60 ways to select coins to satisfy the condition.\"\n    elif (n == 61):\n        return \"61 ways to select coins to satisfy the condition.\"\n    elif (n == 62):\n        return \"62 ways to select coins to satisfy the condition.\"\n    elif (n == 63):\n        return \"63 ways to select coins to satisfy the condition.\"\n    elif (n == 64):\n        return \"64 ways to select coins to satisfy the condition.\"\n    elif (n == 65):\n        return \"65 ways to select coins to satisfy the condition.\"\n    elif (n == 66):\n        return \"66 ways to select coins to satisfy the condition.\"\n    elif (n == 67):\n        return \"67 ways to select coins to satisfy the condition.\"\n    elif (n == 68):\n        return \"68 ways to select coins to satisfy the condition.\"\n    elif (n == 69):\n        return \"69 ways to select coins to satisfy the condition.\"\n    elif (n == 70):\n        return \"70 ways to select coins to satisfy the condition.\"\n    elif (n == 71):\n        return \"71 ways to select coins to satisfy the condition.\"\n    elif (n == 72):\n        return \"72 ways to select coins to satisfy the condition.\"\n    elif (n == 73):\n        return \"73 ways to select coins to satisfy the condition.\"\n    elif (n == 74):\n        return \"74 ways to select coins to satisfy the condition.\"\n    elif (n =="
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    X = 100 * A + 50 * B + 20 * C\n    if X % 100 == 0 and X // 100 >= 10:\n        return str(int(X // 100)) +'ways.'\n    if X % 50 == 0 and X // 50 >= 2:\n        return str(int(X // 50)) +'ways.'\n    if X % 20 == 0 and X // 20 >= 3:\n        return str(int(X // 20)) +'ways.'\n    return str(int(X // 100)) +'ways.'"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C=list(map(int,stdin.split()))\n    if(C<=A)and(C<=B)and(C>=A)and(C>=B)and(C!=A)and(C!=B)and(C!=A)and(C!=B):\n        return \"Yes\"\n    else:\n        return \"No\"\nstdin=input()\nprint(solution(stdin))"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C=stdin.split()\n    if C<=A and C>=B:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    if C >= A and C <= B:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C < A and C > B:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == stdin.strip():\n        return None\n    A, B, C = map(int, stdin.split())\n    if C > A and C > B:\n        return 'Yes'\n    elif C < A and C < B:\n        return 'No'\n    else:\n        return None\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int, stdin.split())\n    return \"Yes\" if C>=A and C<=B else \"No\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C=list(map(int,stdin.split()))\n    if(C>=min(A,B) and C<=max(A,B)):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A!= C:\n        return 'Yes'\n    elif C > A:\n        return 'No'\n    elif C < A:\n        return 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    A, B, C = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if (C < A) or (C > B):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C > A and C > B:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = stdin.split(\" \")\n    n, x = int(n), int(x)\n    \n    m = x // n\n    print(m)\n    print(int(x / m))\n    return m"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(i) for i in stdin.split()]\n    m_1, m_2, m_3, m_4, m_5 = [int(i) for i in stdin.split()[1:]]\n    m = X - (m_1 + m_2 + m_3 + m_4 + m_5)\n    d = [m_1, m_2, m_3, m_4, m_5]\n    res = 0\n    while m > 0:\n        if m <= d[0]:\n            res += 1\n            m -= d[0]\n        else:\n            res += 2\n            m -= d[1]\n        for i in range(len(d)-2, -1, -1):\n            if d[i] <= m:\n                d[i+1] = d[i]\n                m -= d[i]\n            else:\n                d[i+1] = m\n                m = 0\n                break\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = (int(i) for i in stdin.split())\n    m = n * x\n    i = 1\n    sum = 0\n    while True:\n        if sum + m * i <= x:\n            sum += m * i\n            i += 1\n        else:\n            break\n    return str(i - 1)\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    _, N, *M = map(int, stdin.split())\n\n    m = [x for x in M]\n    m = sorted(m, reverse=True)\n    max_d = []\n    for i in range(N):\n        # print(i)\n        max_d.append(i+1)\n        d = 0\n        for k in range(i+1):\n            if k == 0:\n                d += m[k]\n            else:\n                d += m[k] - m[k-1]\n        if d < max_d[-1]:\n            max_d[-1] = d\n    return len(max_d)"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    m_1, m_2, m_3, m_4, m_5, m_6 = list(map(int, stdin.split()))\n    max_dough = 0\n    res = 0\n    for i in range(N):\n        if (m_1 + m_2 + m_3) <= X and (m_4 + m_5 + m_6) <= X:\n            res += 1\n        if res >= max_dough:\n            max_dough = res\n    return str(max_dough)\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    N = int(stdin_list[0])\n    X = int(stdin_list[1])\n\n    m = []\n    for i in range(2, N + 1):\n        m.append(int(stdin_list[i]))\n\n    total = sum(m)\n    if total > X:\n        return \"0\"\n\n    dp = [[0] * (X + 1) for _ in range(N + 1)]\n\n    for i in range(1, N + 1):\n        dp[i][0] = 0\n        dp[i][1] = 1\n\n    for i in range(2, N + 1):\n        for j in range(2, X + 1):\n            if j >= m[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - m[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return str(dp[N][X])\n\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\n============================================================\nBubble Sort\n\nSort an array, using the bubble sort algorithm.\n\nInput:  [1, 2, 4, 5, 8, 1, 5, 4, 7, 4, 8, 2, 1, 6, 4, 5, 6, 9]\n\nOutput: [1, 1, 1, 2, 4, 4, 5, 5, 5, 6, 6, 7, 8, 8, 9, 4, 5, 4]\n============================================================\n\"\"\"\n\n\"\"\"\n-------------\n[1, 2, 4, 5, 8, 1, 5, 4, 7, 4, 8, 2, 1, 6, 4, 5, 6, 9]\n--------------------------------------\n0 1 2 3 4 5 6 7 8 9\n\n0 0 0 0 0 1 1 1 1 1\n0 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4 5\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n0 1 2 3\n0 1 2\n0 1\n0\n\n0 0 0 0 0 1 1 1 1 1\n1 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6\n0 1 2 3 4\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    m.sort()\n    if n == 1 and x == m[0]:\n        return '1'\n    dp = [0 for _ in range(x + 1)]\n    for i in range(n):\n        for j in range(x + 1):\n            if j >= m[i]:\n                dp[j] = max(dp[j], dp[j - m[i]] + 1)\n    return str(dp[-1])\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to a list\n    lines = stdin.split('\\n')\n    n_doughnut = int(lines[0])\n    m_doughnut = list(map(int, lines[1].split(' ')))\n    X = int(lines[2])\n\n    # Initialize result\n    result = 0\n\n    # Make a loop\n    for i in range(1, n_doughnut + 1):\n        # Check if X can be divided into i and X - i\n        if (X - i) % i == 0:\n            result = max(result, i)\n\n    # Return result\n    return str(result)"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    m_1, m_2, m_3, m_4, m_5, m_6 = map(int, stdin.split())\n    m_7, m_8, m_9, m_10, m_11, m_12 = map(int, stdin.split())\n    m_13, m_14, m_15, m_16, m_17, m_18 = map(int, stdin.split())\n\n    m = max(m_1, m_2, m_3, m_4, m_5, m_6, m_7, m_8, m_9, m_10, m_11, m_12, m_13, m_14, m_15, m_16, m_17, m_18)\n\n    if m < x:\n        return '0'\n    return str(max(n, int(math.ceil(x / m))))\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    ans = 0\n\n    if X < 1 or X > 10**6:\n        return '0'\n\n    M = X\n\n    M -= N * min(1, (X - 1) // N)\n    ans = max(ans, min(M // N, M % N + 1))\n\n    for i in range(1, N):\n        M -= min(1, (X - 1) // N)\n        ans = max(ans, min(M // N, M % N + 1))\n\n    return str(ans)\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    turtle = turtle_type()\n    for i in range(N):\n        turtle = turtle.draw()\n    return turtle\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def convert_string_to_number_list(string: str):\n        number_list = []\n        number_string = ''\n        for i in string:\n            if i.isnumeric():\n                number_string += i\n            else:\n                number_list.append(int(number_string))\n                number_string = ''\n        if number_string!= '':\n            number_list.append(int(number_string))\n        return number_list\n    n, *numbers_list = stdin.splitlines()\n    number_list_of_numbers = convert_string_to_number_list(n)\n    print(len(set(number_list_of_numbers)))\n    return ''\n\nsolution('1\\napple\\n2\\napple\\n')"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    out_of_order_numbers = 0\n    for i in range(N):\n        valid = True\n        for j in range(1, len(stdin)):\n            if stdin[i] < stdin[j]:\n                valid = False\n                break\n        if valid:\n            out_of_order_numbers += 1\n    return str(out_of_order_numbers)\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.split()\n    return len(set(s))\nprint(solution(input()))\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        if stdin[i].isalpha():\n            stdin[i] = stdin[i].lower()\n    return len(set(stdin))"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *S = stdin.split()\n    N = int(N)\n    S = \"\".join(sorted(S))\n    count = 0\n    for i in range(N):\n        if S[i] == S[i - 1]:\n            count += 1\n    return str(count)\nprint(solution(input()))"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    # N = int(stdin.readline())\n    # N = input()\n    N = int(stdin.readline())\n    N = int(N)\n    # S = stdin.readline().strip()\n    S = stdin.readline()\n    s = list(S)\n    s.sort()\n    result = 0\n    for i in range(N):\n        a = s.count(s[i])\n        result += math.ceil(a / 2)\n    print(result)\n    return result\n    # return len(set(s))"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = [stdin[i] for i in range(N)]\n    kinds = {}\n\n    for s in S:\n        if s not in kinds:\n            kinds[s] = 1\n        else:\n            kinds[s] += 1\n    return len(kinds.keys())\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = set()\n    for i in range(N):\n        S.add(stdin.split()[i])\n    return str(len(S))\n\nsolution(input())\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of kinds of items you got.\n    \"\"\"\n    n = int(stdin)\n    s1 = stdin.strip()\n    s2 = stdin.strip()\n    a = 0\n    b = 0\n    for i in range(n):\n        if s1[i]!= s2[i]:\n            a += 1\n        s1 = s1[1:] + s1[0]\n        s2 = s2[1:] + s2[0]\n    return f\"{a} {b}\"\n    \n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rating = [int(i) for i in stdin.split()]\n    \n    #print(rating)\n    print(len(set(rating)))\n    print(len(set(rating))*2)\n    return\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    docstring\n    '''\n    # Get the number of inputs\n    N = int(stdin.split()[0])\n    \n    # Get the rating of each person\n    # Store each rating in an array\n    arr = [int(x) for x in stdin.split()[1:]]\n    \n    # Find the minimum and maximum possible ratings\n    # (number of colors)\n    min_ = min(arr)\n    max_ = max(arr)\n    \n    # Check if the user with the minimum rating has any color\n    # If it does, print the number of different colors\n    # Else print -1\n    if min_ < 400:\n        print(min_, max_)\n    else:\n        print(-1)\n\nsolution('')"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    my_colors = [int(stdin) for stdin in stdin.split()]\n    colors = set()\n    for rating in my_colors:\n        colors.add(rating)\n    print(min(len(colors), max(colors)))"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, min_max_colors()))\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_colors = 0\n    min_colors = 0\n    for i in range(n):\n        if i == 0:\n            max_colors = max_colors + (max_colors - 1) + 1\n            min_colors = max_colors + (max_colors - 1) + 1\n        else:\n            max_colors = max_colors + (max_colors - 1) + 1\n            min_colors = min_colors + (min_colors - 1) + 1\n    return \"{} {}\".format(min_colors, max_colors)"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(min(int(x) for x in stdin.split())) + \" \" + str(max(int(x) for x in stdin.split()))"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 500 1050 1050\n   ... 700 1430 1820\n   ... 800 1750 2160''')\n    '4 4'\n    \"\"\"\n    a = list(map(int, stdin.strip().split()))\n    res = []\n    for i in range(len(a)):\n        #1. we need to check if we need to increase the\n        #2. we need to check if we need to decrease the\n        #3. we need to check if we need to increase in two steps\n        #4. we need to check if we need to decrease in two steps\n        #5. we need to check if we need to increase by two steps\n        #6. we need to check if we need to decrease by two steps\n        if i < len(a) - 1:\n            if a[i + 1] > a[i]:\n                res.append(a[i] + 1)\n            else:\n                res.append(a[i] - 1)\n        else:\n            if a[i] > a[i - 1]:\n                res.append(a[i] - 1)\n            else:\n                res.append(a[i] + 1)\n\n    # print(res)\n    return''.join([str(res[0]), str(res[-1])])\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    users = []\n    for i in range(N):\n        users.append(int(stdin.split()[i]))\n    start_colors = []\n    end_colors = []\n    color = 0\n    # for i in range(1, N+1):\n    for i in range(1, N+1):\n        if i == 1:\n            if users[i-1] == users[i]:\n                color = users[i-1]\n                continue\n            else:\n                start_colors.append(users[i-1])\n                end_colors.append(users[i])\n        else:\n            if users[i-1] == users[i]:\n                color = users[i-1]\n                continue\n            else:\n                start_colors.append(users[i-1])\n                end_colors.append(users[i])\n    start_colors.sort()\n    end_colors.sort()\n    # print(start_colors)\n    # print(end_colors)\n    # print(len(start_colors))\n    # print(len(end_colors))\n    if len(start_colors) == len(end_colors):\n        return '%d %d' %(len(start_colors), len(end_colors))\n    elif len(start_colors) < len(end_colors):\n        return '%d %d' %(len(start_colors), len(start_colors))\n    else:\n        return '%d %d' %(len(end_colors), len(end_colors))\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(min(len(set(map(lambda x: int(x), stdin.split()))) - 1, max(len(set(map(lambda x: int(x), stdin.split()))) - 1)))\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    max_lst, min_lst = stdin[0], stdin[0]\n    for i in stdin[1:]:\n        max_lst = max(max_lst, i)\n        min_lst = min(min_lst, i)\n    return (max_lst - min_lst) + 1\n\nstdin = input()\nprint(solution(stdin))\n\n---Submission---\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *words = stdin.split()\n    top_status = words[0]\n    price = 0\n\n    for word in words[1:]:\n        if word == 'o':\n            price += 700\n        else:\n            price += 100\n        if word == 'x':\n            price -= 100\n\n    return f'The price of the bowl of ramen corresponding to S is {price} yen.'\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    memo = stdin\n    \n    # # Brute force\n    # def check(memo: str, index: int) -> str:\n    #     if index >= len(memo):\n    #         return \"\"\n    #     elif memo[index] == \"o\":\n    #         return check(memo, index + 1) + \"o\"\n    #     else:\n    #         return check(memo, index + 2) + \"x\"\n    # print(check(memo, 0))\n\n    # Top down\n    def check(memo: str, index: int, memo_d: dict) -> str:\n        if index >= len(memo):\n            return \"\"\n        elif memo[index] == \"o\":\n            return check(memo, index + 1, memo_d) + \"o\"\n        else:\n            if index not in memo_d:\n                memo_d[index] = check(memo, index + 2, memo_d) + \"x\"\n            return memo_d[index]\n    print(check(memo, 0, memo_d={}))\n\n    # Bottom up\n    # def check(memo: str, index: int, memo_d: dict) -> str:\n    #     if index >= len(memo):\n    #         return \"\"\n    #     elif memo[index] == \"o\":\n    #         return check(memo, index + 1, memo_d) + \"o\"\n    #     else:\n    #         if index not in memo_d:\n    #             memo_d[index] = check(memo, index + 1, memo_d) + \"o\"\n    #         return memo_d[index]\n    # print(check(memo, 0, memo_d={}))\n\n    return"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if s[0] == 'o':\n        return str(700 + 100 * int(s[1]))\n    else:\n        return str(700)"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    sum = 0\n    if S[0] == 'o':\n        sum += 700\n    else:\n        sum -= 700\n    if S[1] == 'o':\n        sum += 100\n    else:\n        sum -= 100\n    if S[2] == 'o':\n        sum += 700\n    else:\n        sum -= 700\n    return str(sum)\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    new_string: str = stdin\n    if new_string[0] == 'o':\n        return '{}'.format(800)\n    if new_string[0] == 'x':\n        return '{}'.format(700)\n    return '{}'.format(700)\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_pound(char):\n        if char == 'o':\n            return True\n        elif char == 'x':\n            return False\n    def is_boiled_egg(char):\n        if char == 'o':\n            return True\n        elif char == 'x':\n            return False\n    def is_sliced_pork(char):\n        if char == 'o':\n            return True\n        elif char == 'x':\n            return False\n    def is_green_onions(char):\n        if char == 'o':\n            return True\n        elif char == 'x':\n            return False\n    if is_pound(stdin[0]) and is_boiled_egg(stdin[1]) and is_green_onions(stdin[2]):\n        return \"900\"\n    elif is_pound(stdin[0]) and is_boiled_egg(stdin[1]) and is_sliced_pork(stdin[2]):\n        return \"700\"\n    elif is_pound(stdin[0]) and is_green_onions(stdin[1]) and is_sliced_pork(stdin[2]):\n        return \"500\"\n    elif is_pound(stdin[0]) and is_boiled_egg(stdin[1]) and is_green_onions(stdin[2]):\n        return \"400\"\n    elif is_pound(stdin[0]) and is_boiled_egg(stdin[1]) and is_sliced_pork(stdin[2]):\n        return \"300\"\n    elif is_pound(stdin[0]) and is_green_onions(stdin[1]) and is_sliced_pork(stdin[2]):\n        return \"200\"\n    elif is_pound(stdin[0]) and is_boiled_egg(stdin[1]) and is_sliced_pork(stdin[2]):\n        return \"100\"\n    elif is_pound(stdin[0]) and is_green_onions(stdin[1]) and is_sliced_pork(stdin[2]):\n        return \"50\"\n    else:\n        return \"0\""
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cost = 700\n    s = stdin.strip()\n\n    if s[0] == 'o':\n        cost += 100\n    elif s[0] == 'x':\n        cost -= 100\n\n    if s[1] == 'o':\n        cost += 100\n    elif s[1] == 'x':\n        cost -= 100\n\n    if s[2] == 'o':\n        cost += 100\n    elif s[2] == 'x':\n        cost -= 100\n\n    return str(cost)"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return sum(\n        700\n        if stdin[0] == 'o'\n        else 0\n        if stdin[0] == 'x'\n        else 0\n        for stdin in stdin[1]\n    )\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # NOTE: Write your code below this comment.\n    s = stdin.strip()\n    memo = {}\n    if s == \"o\":\n        return \"0\"\n    if s == \"x\":\n        return \"0\"\n    if s == \"oox\":\n        return \"0\"\n    if s == \"xxo\":\n        return \"0\"\n\n    return \"0\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split(' ')\n    return 'H' if a == 'H' and b == 'H' else 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'H' if int(stdin) == 0 else 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = a.strip(), b.strip()\n    if a == b:\n        return 'H'\n    else:\n        return 'D'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return 'H'\n    elif a == 'H' and b == 'D':\n        return 'H'\n    else:\n        return 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    return 'H' if a[0] == 'H' else 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = a.lower()\n    b = b.lower()\n    if a == b:\n        return 'H'\n    else:\n        return 'D'\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"D\"\n    else:\n        return \"H\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return 'H'\n    else:\n        return 'D'\n    # Write your code here\n    return 'H'\n    # Write your code here\n    # return 'H'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    elif a == \"H\" and b == \"D\":\n        return \"D\"\n    elif a == \"D\" and b == \"H\":\n        return \"D\"\n    elif a == \"D\" and b == \"D\":\n        return \"D\""
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    return str(int(input_list[0]) * int(input_list[1]) * int(input_list[2]) * int(input_list[3]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = s[0]\n    s = int(s)\n    a = s // 100\n    b = (s % 100) // 10\n    c = (s % 100) % 10\n    d = s % 10\n    a = a + d * 2\n    a = a - c * 2\n    a = a - b * 2\n    return str(a) + \"+\" + str(b) + \"+\" + str(c) + \"+\" + str(d)\n    \"\"\"\n    return \"1+2+2+2=7\""
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    D = int(D)\n    return str(A + B + C + D)\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    A = int(stdin[0])\n    B = int(stdin[1])\n    C = int(stdin[2])\n    D = int(stdin[3])\n\n    op1 = \"+\"\n    op2 = \"+\"\n    op3 = \"+\"\n\n    result = A * op1 + B * op2 + C * op3 + D * op1\n    return str(result)\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return f'{A+B+C+D}={A*(2*B+3*C)+(2*D+3*C)}'\n\"\"\"\n\nA, B, C, D = map(int, input().split())\nprint(f'{A+B+C+D}={A*(2*B+3*C)+(2*D+3*C)}')"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin\n    numbers = numbers.split(\" \")\n    numbers = list(map(int, numbers))\n\n    #Your code here\n    a = numbers[0]\n    b = numbers[1]\n    c = numbers[2]\n    d = numbers[3]\n    return str(a+b+c+d)\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(eval(stdin))\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    # Your code here\n    return str(eval(numbers[0] + str(int(numbers[1]) + int(numbers[2]) + int(numbers[3])) ))"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    return '{}{}{}{}={}'.format(A, '+', B, '+', C)"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    D = int(D)\n    formula = 7\n    print(\"1+2+2+2=\",formula)\nsolution(stdin)\n\n--------------------------------\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_members, num_of_immediate_subordinates = stdin.split()\n    num_of_members = int(num_of_members)\n    immediate_subordinates = set()\n    for i in range(1, num_of_members + 1):\n        immediate_subordinates.add(i)\n    for i in range(1, int(num_of_immediate_subordinates) + 1):\n        immediate_subordinates.remove(int(stdin.split()[i]))\n    print(len(immediate_subordinates))\n\nsolution(input())\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    #print(a)\n    #print(n)\n    #for i in range(n):\n        #print(\"i: \", i)\n        #print(\"a[i]: \", a[i])\n    #print(a)\n\n    #M = (n-1)//2\n    #print(M)\n\n    #a[i] = a[i-1] if i > 1 else a[i]\n    #for i in range(1, n):\n        #a[i] = a[i-1] + 1 if a[i-1] < a[i] else a[i-1]\n    #print(a)\n    #for i in range(n):\n        #print(a[i])\n    #print(a)\n\n    #print(a)\n    #print(n)\n    #print(n-1)\n    #print(n-2)\n    #print(n-3)\n    #print(n-4)\n    #print(n-5)\n    #print(n-6)\n    #print(n-7)\n    #print(n-8)\n    #print(n-9)\n    #print(n-10)\n\n    #print(a)\n\n    count = 0\n    for i in range(1, n):\n        count = count + 1 if a[i - 1] < a[i] else count\n\n    return str(count)\n\nsolution(stdin)\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # read in N member names\n    # read in N immediate subordinates\n\n    # create a 2D array NxN where each row is a member and each cell is its immediate boss\n    # populate this array with -1 to indicate that no boss\n    # populate the cells with the value of the immediate boss\n    # as you go down the graph, add 1 to the value in the cell it is in\n\n    members = []\n    for i in range(N):\n        members.append([-1] * N)\n    immediate_bosses = list(map(int, stdin.split()))\n    # populate members\n    for i in range(len(immediate_bosses)):\n        members[immediate_bosses[i]][i] = immediate_bosses[i]\n    # populate the immediate boss cell\n    for i in range(len(members)):\n        for j in range(len(members[i])):\n            if members[i][j]!= -1:\n                members[i][j] = j\n\n    # initialize an array to record the number of immediate subordinates\n    # for each member\n    n = len(members[0])\n    counts = []\n    for i in range(n):\n        counts.append(0)\n    # calculate the number of immediate subordinates\n    for i in range(len(members)):\n        for j in range(n):\n            counts[j] += 1\n\n    # iterate through the members\n    for i in range(len(members)):\n        for j in range(len(members[i])):\n            # if the current member is the immediate boss of a member, increment the counts\n            if members[i][j]!= -1:\n                counts[j] += counts[members[i][j]]\n\n    # print out the counts\n    for i in range(len(counts)):\n        print(counts[i])\n    return\n\n\nsolution(\"5 1 1 2 2\")\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\nimport sys\nimport collections\n\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n\n    n = int(data[0])\n\n    _list = list(map(int, data[1:]))\n\n    _dict = {}\n\n    for i in range(1, n + 1):\n        _dict[i] = _list.count(i)\n\n    _dict_pairs = []\n    for key, value in _dict.items():\n        _dict_pairs.append([key, value])\n\n    _dict_pairs.sort(key=lambda x: (x[1], x[0]))\n    result = [str(x) for x in _dict_pairs]\n\n    return''.join(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ab = [int(stdin.split()[i]) for i in range(1, n + 1)]\n\n    d = {}\n\n    for i in ab:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    return \" \".join([str(d[i]) for i in range(1, n + 1)])\n\n\nprint(solution(input()))"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = stdin.split()\n    N = int(N)\n\n    if N == 1:\n        return '0'\n\n    boss = {int(a): [] for a in A}\n    for i in range(2, N + 1):\n        for a in boss[i - 1]:\n            if i!= a:\n                boss[a].append(i)\n    result = []\n    for a in boss:\n        result.append(len(boss[a]))\n\n    return''.join([str(i) for i in result])"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] > a[i]:\n                a[i] += a[j]\n    return \"\\n\".join(map(str, a))"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A_dict = {i: A[i-1] for i in range(1, N+1)}\n    for a in A_dict:\n        while a in A_dict:\n            A_dict[a] = A_dict.get(a) - 1\n    ans = []\n    for a in A:\n        ans.append(A_dict[a])\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(X):\n        if (X - i) % (i + 1) == 0:\n            print(i + 1)\n            return (i + 1)\n    return 'Not found'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"Infinity\"\n    elif x > 0:\n        return \"Infinity\" if x % 2 == 0 else x // 2"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(min(x, x+x))"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if x == y:\n        return str(0)\n    i = 1\n    while y >= x:\n        y -= x\n        if y == i:\n            return str(i)\n        if y > i:\n            i += 1"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 1\n    while X!= 1:\n        if X - time >= time:\n            X = X - time\n        else:\n            X = (X - time) - 1\n        time = time + 1\n    return str(time)\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"0\"\n    if x < y:\n        return str(y - x)\n    else:\n        return str(x - y)"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\")\n    '0'\n    >>> solution(\"4\")\n    '1'\n    >>> solution(\"5\")\n    '2'\n    >>> solution(\"7\")\n    '4'\n    >>> solution(\"10\")\n    '5'\n    '''\n    X = int(stdin)\n    return str(find_earliest_time(X))\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input string\n    :return: the output of the problem\n    \"\"\"\n    X = int(stdin)\n\n    return str(find_earliest_time(X))\n\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    left = 0\n    right = num\n    while left < right:\n        if num % 2 == 0:\n            right = num // 2\n            if right % 2 == 1:\n                right += 1\n        else:\n            left = num // 2\n            if left % 2 == 1:\n                left += 1\n    return str(left)\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N.count('1') >= 3:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n\n    if N < 1000 or N > 9999:\n        raise ValueError('N is out of range')\n\n    digits: list = list(map(int, str(N)))\n    if len(set(digits)) == 1 and digits[0] == 9:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    n = int(number)\n    if n < 1000 or n > 9999:\n        print('Wrong Input')\n    else:\n        if (n % 1000 == n % 100) and (n % 100 == n % 10) and (n % 10 == n):\n            print('Yes')\n        else:\n            print('No')\n\n\nsolution(input())\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_good(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            if s[i] == s[i+1]:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while len(str(n)) < 4:\n        n = n * 10 + 1\n    if str(n) == str(n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if all(i not in str(N) for i in range(1, len(str(N)) - 1)) else \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    return 'Yes' if len(N) == len(set(N)) == 3 else 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin!= 'exit':\n        input_number = stdin.split(' ')\n        input_number = list(map(int, input_number))\n        is_good = False\n        if len(input_number) == 4:\n            if input_number[0] < 100 or input_number[0] > 999:\n                is_good = False\n            elif input_number[1] < 100 or input_number[1] > 999:\n                is_good = False\n            elif input_number[2] < 100 or input_number[2] > 999:\n                is_good = False\n            elif input_number[3] < 100 or input_number[3] > 999:\n                is_good = False\n            else:\n                is_good = True\n        if is_good:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        return 'exit'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        if n % 100 == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        nums = str(n)\n        nums = list(map(int, nums))\n        dct = {}\n        for i in nums:\n            if i not in dct:\n                dct[i] = 1\n            else:\n                dct[i] += 1\n        for i in dct:\n            if dct[i] == 4:\n                return \"Yes\"\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    n = len(str(C))\n    max_upper = max(A, max(B, n))\n    max_middle = max(B, n)\n    max_lower = max(A, n)\n\n    def alt(a: int, b: int, c: int) -> int:\n        return (a > 0) & ((max_middle < b) | (c > max_middle)) & ((max_upper < a) | (c > max_upper)) & ((max_lower < b) | (c > max_lower))\n\n    return sum(map(alt, A, B, C))\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(i) for i in stdin.split()]\n    ans = 1\n    for i in range(1, n):\n        for j in range(i, n):\n            if (a[i] < a[j] and a[i] < a[j - 1]) or (a[i] > a[j] and a[i] > a[j - 1]):\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n    a = list(map(int, stdin.pop(0).split()))\n    b = list(map(int, stdin.pop(0).split()))\n    c = list(map(int, stdin.pop(0).split()))\n\n    return len(set(a) & set(b) & set(c))"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, parts = map(int, stdin.split())\n    parts = list(map(int, stdin.split()))\n    parts.sort(reverse=True)\n    upper, lower, middle = parts[:3]\n\n    return upper * middle * lower"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    c = map(int, stdin.split())\n\n    res = 0\n    while a[0] < min(a) or b[0] < min(b) or c[0] < min(c):\n        a = [x + 1 for x in a]\n        b = [x + 1 for x in b]\n        c = [x + 1 for x in c]\n        res += 1\n    print(res)\n    return res"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.strip().split(' ')))\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if A[i] < A[j] and A[j] > A[k] and A[k] > A[i]:\n                    res += 1\n    print(res)\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = map(int, stdin.split())\n    return(3 * sum(max(i, j) for i, j in zip(nums[0::3], nums[1::3])))"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return number of different altars that Ringo can build.\n\n    >>> solution('''\n   ... 2\n   ... 1 5\n   ... 2 4\n   ... 3 6\n   ...\n   ... ''')\n    '3'\n    \"\"\"\n    N = int(stdin.strip())\n    parts = [int(part) for part in stdin.strip().split(' ')]\n    return str(3 if all(parts[0] > part for part in parts) else 2 if all(parts[0] > part for part in parts[1:]) else 1)\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    B = list(map(int, stdin.split()[1:]))\n    C = list(map(int, stdin.split()[1:]))\n    upper_order = sorted(zip(A, range(N)), reverse=True)\n    middle_order = sorted(zip(B, range(N)), reverse=True)\n    lower_order = sorted(zip(C, range(N)), reverse=True)\n    upper_tree = []\n    middle_tree = []\n    lower_tree = []\n    for upper, middle, lower in zip(upper_order, middle_order, lower_order):\n        if len(upper_tree) == 0 or upper[0] > upper_tree[-1]:\n            upper_tree.append(upper[1])\n        if len(middle_tree) == 0 or middle[0] > middle_tree[-1]:\n            middle_tree.append(middle[1])\n        if len(lower_tree) == 0 or lower[0] > lower_tree[-1]:\n            lower_tree.append(lower[1])\n    ans = len(set(upper_tree) & set(middle_tree) & set(lower_tree))\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, upper, middle, lower = stdin.split()\n    upper = [int(x) for x in upper.split()]\n    middle = [int(x) for x in middle.split()]\n    lower = [int(x) for x in lower.split()]\n    n = int(n)\n    count = 0\n    for i in range(1, n):\n        if upper[i - 1] < middle[i - 1] and middle[i - 1] < lower[i - 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(lambda x: ord(x) - ord('A') + 1, stdin.split())\n    if n < m:\n        return \"<\"\n    elif n > m:\n        return \">\"\n    else:\n        return \"=\"\nprint(solution(input()))\n\n//10 < 11.\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    if (int(stdin[0]) < int(stdin[1])):\n        return \"<\"\n    elif (int(stdin[0]) > int(stdin[1])):\n        return \">\"\n    return \"=\"\nsolution(input())"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    if int(X) < int(Y):\n        return \"<\"\n    if int(X) > int(Y):\n        return \">\"\n    if int(X) == int(Y):\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    print(str(int(x, 16) < int(y, 16)))\n    return 0\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x,y = stdin.split(\" \")\n    x = int(x,16)\n    y = int(y,16)\n\n    if x > y:\n        return \"<\"\n    elif x < y:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if int(x) < int(y):\n        return \"<\"\n    elif int(x) > int(y):\n        return \">\"\n    else:\n        return \"=\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    if a < b:\n        return '<'\n    elif a > b:\n        return '>'\n    else:\n        return '='\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    if int(a[0]) < int(a[1]):\n        print(\"<\")\n    elif int(a[0]) > int(a[1]):\n        print(\">\")\n    else:\n        print(\"=\")\n\nsolution(input())"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        x, y = line.split(' ')\n        if (int(x, 16) < int(y, 16)):\n            return \"<\"\n        if (int(x, 16) > int(y, 16)):\n            return \">\"\n        else:\n            return \"=\"\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n"
    }
]