[
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = {i: set() for i in range(1, n + 1)}\n    for i in range(n - 1):\n        v1, v2 = map(int, stdin.split()[i + 1].split())\n        edges[v1].add(v2)\n        edges[v2].add(v1)\n    edges = {k: v - {k} for k, v in edges.items()}\n    return max([len(v) for v in edges.values()])\n\n\nsolution('8')\n\nsolution('2 5 4')"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n - 1):\n        edges.append(stdin)\n    edges = sorted(edges)\n    max_edges = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            edges1 = edges[:i]\n            edges2 = edges[i + 1:j]\n            edges3 = edges[j + 1:]\n            edges = edges1 + edges2 + edges3\n            max_edges = max(max_edges, edges.count(i))\n    return str(max_edges)\n\nsolution(\"\"\"\n6\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n\"\"\")\n\"\"\"\nOutput\n5\n1 8 6\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return str(solution_naive(stdin))\n    return str(solution_optimized(stdin))\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    ans = 0\n    moves = []\n    n = len(list(map(int, stdin.split())))\n    for i in range(1, n):\n        moves.append((a, i, b))\n        moves.append((i, b, c))\n        moves.append((i, c, a))\n    moves.append((a, 1, b))\n    moves.append((1, b, c))\n    moves.append((1, c, a))\n    moves.append((a, n, b))\n    moves.append((n, b, c))\n    moves.append((n, c, a))\n    for i, j, k in moves:\n        if k == c and (j < a and i < a) or k == a and (j > b and i > b) or k == b and (j < c and i < c) or k == c and (j > b and i > b):\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    vertices = []\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.strip().split())\n        vertices.append(a)\n        vertices.append(b)\n        edges.append(a)\n        edges.append(b)\n    print(max(edges))\n    # print(vertices)\n    print(vertices)\n    res = 1\n    for i in range(n):\n        if (\n            vertices.count(i + 1) > 1\n            and vertices.count(i + 1) < vertices.count(i + 2)\n            and vertices.count(i + 2) < vertices.count(i + 3)\n        ):\n            res = max(res, vertices.count(i + 1) + vertices.count(i + 2))\n    return str(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = [int(x) for x in stdin.split()]\n    \n    if len(set(edges))!= n:\n        return -1\n    \n    # connect nodes by some connection\n    # where there is a connection, there can be at max one path\n    # if not connected, there can be two paths\n    # one with more connections, one with less\n    \n    edges.sort()\n    edges = [(edges[i], edges[i + 1]) for i in range(len(edges) - 1)]\n    \n    \n    # create a graph for this graph\n    graph = defaultdict(list)\n    for i, j in edges:\n        graph[i].append(j)\n        graph[j].append(i)\n    \n    \n    \n    # we know that if we can choose (1,2), (2,3), (3,4) and (4,5), the answer is 5\n    # if we choose (1,2), (2,3), (3,4) and (4,5), the answer is 4\n    # if we choose (1,2), (2,3), (3,4) and (4,6), the answer is 6\n    \n    \n    # we can also try to reduce the search space to only consider paths of the form (1,2), (2,3), (3,4), (4,5), (4,6), (1,6)\n    # but since we are already checking that (1,2) and (2,3) are the only paths, we don't need to consider (1,2), (2,3), (3,4) and (4,6)\n    \n    \n    \n    \n    \n    # (1,2), (2,3), (3,4), (4,5), (4,6) are the only paths\n    # since only (1,2), (2,3), (3,4), (4,6) are the possible paths, (1,2), (2,3), (3,4) and (4,5) are the possible paths as well\n    # but we need to choose one of them\n    # so if we choose the (1,2), (2,3), (3,4) and (4,6), the answer is 5\n    # so we choose the (1,2), (2,3), (3,4) and (4,5)\n    \n    # we can also try to remove paths of the form (1,2), (2,3), (3,4) and (4,6)\n    # but since we are already checking that (1,2), (2,3), (3,4) and (4,6) are the only paths, we don't need to consider (1,2), (2,3), (3,4) and (4,6)\n    \n    \n    # in the beginning we only have one path\n    \n    \n    \n    # the answer is the maximum path count\n    return max([len(path) for path in graph.values()])\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    verts = []\n    for i in range(1, n + 1):\n        verts.append(i)\n    edges = []\n    for i in stdin.split()[1:]:\n        edges.append(list(map(int, i.split())))\n    # print(verts)\n    # print(edges)\n    res = 0\n    for i in range(1, len(verts)):\n        # print(i)\n        k = 0\n        v = 0\n        visited = []\n        while k < len(verts):\n            # print(k)\n            if k in visited:\n                k += 1\n                continue\n            curr = verts[k]\n            # print(curr)\n            # print(visited)\n            # print(\"\")\n            if curr == i:\n                v = k\n                visited.append(v)\n                k += 1\n                continue\n            curr_edges = 0\n            for edge in edges:\n                if edge[0] == curr and edge[1] not in visited:\n                    curr_edges += 1\n                    visited.append(edge[1])\n                if edge[1] == curr and edge[0] not in visited:\n                    curr_edges += 1\n                    visited.append(edge[0])\n            if curr_edges > res:\n                res = curr_edges\n                v = k\n                # print(res)\n                # print(v)\n            k += 1\n        visited = []\n        k = 0\n        while k < len(verts):\n            if k not in visited:\n                visited.append(k)\n            k += 1\n        # print(visited)\n        # print(v)\n        if v < i:\n            res = v + 1\n            # print(res)\n        if res == n:\n            return \"0\"\n        # print(\"\")\n        # print(res)\n    return str(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    matrix = [[] for _ in range(n)]\n    edges = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.strip().split())\n        edges.append((a, b))\n        edges.append((b, a))\n        matrix[a].append(b)\n        matrix[b].append(a)\n\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            res = max(res,\n                      len(set(matrix[i]) & set(matrix[j]))\n                      )\n    for a, b in edges:\n        if a == 1 or b == 1:\n            continue\n        res = max(res, len(set(matrix[a]) & set(matrix[b])))\n\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    res = 0\n    for i in range(n):\n        counter = Counter(graph[i])\n        for j in range(n):\n            if j!= i and counter[j] == 1:\n                res = max(res, counter[i] + counter[j])\n    return str(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    graph = dict()\n    for _ in range(n - 1):\n        u, v = stdin.strip().split()\n        u, v = int(u), int(v)\n        if u not in graph:\n            graph[u] = list()\n        if v not in graph:\n            graph[v] = list()\n        graph[u].append(v)\n        graph[v].append(u)\n\n    max_e = 0\n    for k, v in graph.items():\n        curr_e = 0\n        for i in v:\n            for j in v:\n                if i!= j:\n                    curr_e += 1\n        if max_e < curr_e:\n            max_e = curr_e\n    return str(max_e)\n\nsolution(\"\"\"\n4\n1 2\n2 3\n3 4\n4 5\n\"\"\")"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split(' ')]\n    y = [int(i) for i in stdin.split(' ')]\n    x.sort()\n    y.sort()\n    # print(x, y)\n    d = []\n    for i in range(n):\n        if x[i]!= y[i]:\n            d.append(x[i])\n            d.append(y[i])\n    # print(d)\n    x = sorted(d)\n    y = sorted(d)\n    for i in range(len(x)):\n        if x[i]!= y[i]:\n            return '{} {}'.format(x[i], y[i])\n    return '{} {}'.format(x[0], y[0])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x_divisors = [d for d in range(2, x + 1) if x % d == 0]\n    y_divisors = [d for d in range(2, y + 1) if y % d == 0]\n    common_divisors = list(set(x_divisors) & set(y_divisors))\n    common_divisors.sort()\n    x_divisors.sort()\n    y_divisors.sort()\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    divisors_x = list(map(int, x[1].split()))\n    divisors_y = list(map(int, x[2].split()))\n    new_list = []\n    for i in range(len(divisors_x)):\n        for j in range(len(divisors_y)):\n            if divisors_x[i] == divisors_y[j]:\n                new_list.append(divisors_x[i])\n    return str(max(new_list)) + \" \" + str(min(new_list))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 10\n   ... 10 2 8 1 2 4 1 20 4 5\n   ... ''')\n    '20 8'\n    >>> solution('''\n   ... 20\n   ... 7 15 9 8 2 8 9 1 15 5 8 1\n   ... ''')\n    '7 15 9 8 2 8 9 1 15 5 8 1'\n    \"\"\"\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x = sorted(set(x))\n    y = list(map(int, stdin.split()))\n    y = sorted(set(y))\n    print(*x, *y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.splitlines()[0]\n    y = stdin.splitlines()[1]\n    list_x = set(int(i) for i in list(x))\n    list_y = set(int(i) for i in list(y))\n    list_x = sorted(list(list_x))\n    list_y = sorted(list(list_y))\n    i = 0\n    j = 0\n    x_found = False\n    y_found = False\n    while not (x_found and y_found):\n        if list_x[i]!= list_y[j]:\n            return ''\n        if list_x[i] == list_y[j]:\n            if (i + 1) < len(list_x) and (list_x[i + 1] - list_x[i]) == (list_y[j] - list_y[j + 1]):\n                x_found = True\n            else:\n                i += 1\n                j += 1\n        else:\n            i += 1\n            j += 1\n    return '{} {}'.format(x_found, y_found)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    ans = []\n    s = sorted(list(map(int, list(a + b))))\n    #print(s)\n    #for i in range(n):\n        #if i not in s:\n            #return str(i)\n        #if i not in ans:\n            #ans.append(i)\n    #print(ans)\n    for i in range(n):\n        if s[i] in ans:\n            ans.append(s[i])\n    print(*ans)"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    x = int(input[0])\n    y = int(input[1])\n    x_divisors = list(range(1, x + 1))\n    y_divisors = list(range(1, y + 1))\n    x_divs_lst = []\n    y_divs_lst = []\n    x_divs_lst.append(x_divisors[0])\n    y_divs_lst.append(y_divisors[0])\n    for i in range(x - 1):\n        x_divisors.remove(x_divisors[i])\n        x_divs_lst.append(x_divisors[0])\n    for i in range(y - 1):\n        y_divisors.remove(y_divisors[i])\n        y_divs_lst.append(y_divisors[0])\n    for i in range(len(x_divisors)):\n        if x_divisors[i] in y_divisors:\n            y_divs_lst.remove(x_divisors[i])\n            x_divs_lst.remove(x_divisors[i])\n            x_divisors.remove(x_divisors[i])\n            x_divisors.remove(x_divisors[i])\n            break\n    print(x_divs_lst)\n    print(y_divs_lst)\n\n\nsolution(input())\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    X, Y = A[0], A[1]\n    result = []\n    for i in range(1, n):\n        if A[i] not in result:\n            result.append(A[i])\n    for i in range(2, n):\n        if A[i] in result:\n            result.remove(A[i])\n            if A[i] in result:\n                result.remove(A[i])\n    return str(result[0]) +'' + str(result[1])"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n\n    # solutions\n    x = 1\n    y = 1\n\n    def merge_list(l1, l2):\n        # 0-indexed\n        i = 0\n        j = 0\n        merged = []\n        while i < len(l1) or j < len(l2):\n            if i < len(l1) and j < len(l2):\n                if l1[i] > l2[j]:\n                    merged.append(l2[j])\n                    j += 1\n                else:\n                    merged.append(l1[i])\n                    i += 1\n            elif i < len(l1):\n                merged.append(l1[i])\n                i += 1\n            else:\n                merged.append(l2[j])\n                j += 1\n\n        return merged\n\n    # solve\n    for d in arr:\n        if d == x or d == y:\n            continue\n\n        # all divisors of x\n        if d % x == 0:\n            x *= d // x\n        # all divisors of y\n        if d % y == 0:\n            y *= d // y\n\n    x = x % 10\n    y = y % 10\n\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    divisors_x = list(map(int, a.split(\" \")))\n    divisors_y = list(map(int, b.split(\" \")))\n\n    # remove duplicates\n    divisors_x = list(set(divisors_x))\n    divisors_y = list(set(divisors_y))\n\n    divisors_x.sort()\n    divisors_y.sort()\n\n    merged_list = []\n    for i in range(len(divisors_x)):\n        if divisors_x[i] in divisors_y:\n            merged_list.append(divisors_x[i])\n    return \" \".join(map(str, sorted(merged_list)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples:\n       Input:  2 2 2\n       Output:  6\n       Input:  3 4 3\n       Output:  24\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    res = 0\n    best = 0\n    for i in range(n):\n        for j in range(m):\n            if j < m // 2:\n                sum = a[i][j]\n                for k in range(i):\n                    sum += a[k][j]\n                if sum % k == 0:\n                    best = max(best, sum)\n            else:\n                sum = a[i][j]\n                for k in range(i):\n                    sum += a[k][j]\n                if sum % k!= 0:\n                    continue\n                else:\n                    best = max(best, sum)\n    print(best)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [list(map(int, stdin.split()))]\n    return str(max([sum(list(filter(lambda x: x % 2 == 0, a[0][i:i+m//2]))) for i in range(0, n, m) for m in range(1, n, 2)]))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n    s = 0\n    max_sum = 0\n    for i in range(m // 2):\n        if s % k!= 0:\n            s += a[i][i]\n        else:\n            s += a[i][i]\n        if s > max_sum:\n            max_sum = s\n        if s % k == 0:\n            s = 0\n        else:\n            s += a[i][n - 1 - i]\n    for i in range(n - m + 1):\n        if s % k!= 0:\n            s += a[i][n - 1 - i]\n        else:\n            s += a[i][n - 1 - i]\n        if s > max_sum:\n            max_sum = s\n        if s % k == 0:\n            s = 0\n        else:\n            s += a[n - 1 - i][i]\n    if s > max_sum:\n        max_sum = s\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, m, k = map(int, stdin.split())\n    # a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    n, m, k = map(int, input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    ans = 0\n    for row in a:\n        for i, num in enumerate(row):\n            if i > 0:\n                row[i] += row[i-1]\n        if row[-1] % k == 0:\n            ans = max(ans, sum(row))\n    print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    mat = [[int(x) for x in stdin.split()] for i in range(n)]\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(m // 2):\n            current_sum += mat[i][j]\n            current_sum += mat[i][m - 1 - j]\n        if current_sum % k == 0:\n            max_sum = max(max_sum, current_sum)\n    for i in range(m):\n        current_sum = 0\n        for j in range(n // 2):\n            current_sum += mat[j][i]\n            current_sum += mat[n - 1 - j][i]\n        if current_sum % k == 0:\n            max_sum = max(max_sum, current_sum)\n    return str(max_sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(s) for s in stdin.split())\n    arr = [(int(x) for x in stdin.split()[i]) for i in range(n)]\n    arr.sort()\n    rows_sum = 0\n    max_sum = 0\n    for i in range(len(arr)):\n        rows_sum += arr[i]\n        if rows_sum % k == 0:\n            max_sum = max(max_sum, rows_sum)\n    return max_sum\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = [[int(elem) for elem in stdin.strip().split()] for _ in range(n)]\n    return max([sum([elem for elem in a[i]]) for i in range(n)])"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n    # Get inputs from stdin\n    n, m, k = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    s = 0\n\n    for i in range(n):\n        # Filter the row that contains the required elements\n        row = [el for el in a[i] if el % 2!= 0]\n\n        # Filter the remaining elements\n        row = sorted(row, reverse=True)\n\n        # Get the sum\n        sum_el = sum(row)\n        s += sum_el\n\n    print(s)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    mat = [[int(i) for i in stdin.split()] for _ in range(n)]\n    max_count = 0\n    best_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(m):\n            current_sum += mat[i][j]\n        if current_sum % k == 0:\n            max_count = max(max_count, current_sum // k)\n    for i in range(n):\n        current_sum = 0\n        for j in range(m):\n            current_sum += mat[j][i]\n        if current_sum % k == 0:\n            max_count = max(max_count, current_sum // k)\n    for i in range(m):\n        current_sum = 0\n        for j in range(n):\n            current_sum += mat[i][j]\n        if current_sum % k == 0:\n            max_count = max(max_count, current_sum // k)\n    for i in range(m):\n        current_sum = 0\n        for j in range(n):\n            current_sum += mat[i][j]\n        if current_sum % k == 0:\n            max_count = max(max_count, current_sum // k)\n    return str(max_count)\n\nprint(solution(input()))\n\n\n\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    max_s = 0\n    for i in range(n):\n        if i >= len(a[i]):\n            max_s = 0\n        else:\n            max_s = max(max_s, sum([a[i][j] for j in range(min(len(a[i]), i + 1 + 2 * int(i < len(a[i])) + 1))]))\n    return max_s\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a == sorted(a) and a:\n        return str(len(a)) + '\\n' + ''.join(\n            'R' if x < a[i - 1] else 'L' for i, x in enumerate(a))\n    else:\n        return str(len(a)) + '\\n' + ''.join('RR' if x < a[i] else 'LL'\n                                            for i, x in enumerate(a))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    a = sorted(map(int, inp[1].split()))\n    result = 1\n    curr = a[0]\n    for i in range(1, n):\n        curr = min(curr, a[i])\n        if curr > a[i]:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nThe second example is described in the test case.\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    length = 0\n    s = \"\"\n    for i in range(n):\n        if a[i] == min(a):\n            length += 1\n            s += \"R\"\n        else:\n            length += 1\n            s += \"L\"\n        a.pop(0)\n    return length, s\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(map(int, stdin.split()[1:]))\n    count = 1\n    ans = 1\n    for i in range(1, n):\n        if a[i - 1] <= a[i]:\n            count += 1\n            ans = max(count, ans)\n        else:\n            count = 1\n    return str(ans)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-----Implementation-----\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    def problem(a: list) -> (int, str):\n        n = len(a)\n        if n <= 1:\n            return 0, \"\"\n        cnt = 1\n        str = \"\"\n        for i in range(n - 1):\n            if a[i + 1] > a[i]:\n                cnt += 1\n                str += \"R\"\n            else:\n                str += \"L\"\n        return cnt, str\n    k, str = problem(a)\n    return k, str\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from collections import deque\n    from functools import partial\n    from itertools import accumulate, groupby\n\n    a = list(map(int, input().split()))\n    a = deque(a)\n    k = int(input())\n    def bb(x): return bool(x)\n    r = 0\n    ans = []\n    while True:\n        if not a:\n            break\n        elif a[0] < a[-1]:\n            ans.append(a.popleft())\n            r += 1\n        else:\n            ans.append(a.pop())\n            r += 1\n    print(r)\n    for x in range(r):\n        if x == k-1:\n            print(\"\".join(map(str, ans[:k])))\n        elif x == r-1:\n            print(\"\".join(map(str, ans[k:])))\n        else:\n            print(\"\".join(map(str, ans[x:x+k])))\n    return\n\nsolution(stdin)\n'''\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    N = len(a)\n    min_val = 0\n    max_val = max(a)\n    # print(max_val)\n    for i in range(N):\n        if min_val == 0 and max_val == 0:\n            min_val = a[i]\n            max_val = a[i]\n        elif min_val < a[i]:\n            min_val = a[i]\n        elif max_val > a[i]:\n            max_val = a[i]\n    return max_val - min_val\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u043e\u0434\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u0434\u043d\u0430\u043a\u043e \u044d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u043f\u043e \u043c\u0435\u0440\u0435 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 (\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0432\u0435\u0440\u0445 \u043d\u0435\u0433\u043e)\n\u0422\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u0430\u044f, \u0442\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u043a \u044d\u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e. \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438 \u0435\u0451 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0432\u044b\u0448\u0435. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u044b \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u0447\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u0430 $n$ (1 \\le n \\le 2 \\cdot 10^5) \u0438 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0434\u043e\u043b\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 $a_1, a_2, \\dots, a_n$. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $k$ \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u0447\u043a\u0430 \u0441 \u0432\u0435\u0440\u0445\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0414\u0430\u043b\u0435\u0435 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u0447\u043a, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n3\n2 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n4\nLRRR\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n7\n1 3 5 6 5 4 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n6\nLLRRRRRRRR\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\u0412 \u043f\u0440\u0438\u043c"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = 0\n    while True:\n        if all(x + d > 0 for x in a):\n            for i in range(n):\n                a[i] += d\n        elif all(x + d < 0 for x in a):\n            for i in range(n):\n                a[i] -= d\n        else:\n            d += 1\n        if d == 0:\n            break\n    return str(d) if d!= -1 else '-1'\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    d = -1\n    while True:\n        a_s = [x + d if x + d >= 0 else x - d for x in a]\n        if sorted(a_s) == a:\n            return str(d)\n        d += 1"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    max_diff = 0\n    for i in range(len(a)):\n        if max_diff < abs(a[i]):\n            max_diff = abs(a[i])\n    for i in range(len(a)):\n        if a[i] >= 0:\n            a[i] = a[i] + max_diff\n        else:\n            a[i] = a[i] - max_diff\n    for i in range(len(a)):\n        if abs(a[i]) <= max_diff:\n            return str(max_diff)\n    return '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    # print(n, a)\n    if n == 1:\n        if sum(a) == 0:\n            return str(1)\n        return -1\n    \n    a.sort()\n    # print(a)\n    if sum(a) < 0:\n        return -1\n    \n    s = 0\n    for i in range(n):\n        s += a[i]\n        # print(a[i])\n        # print(s)\n        if s < 0:\n            return -1\n        if s == 0:\n            return str(0)\n    \n    for i in range(n):\n        s = s - a[i] + a[i]\n        # print(s)\n        if s > 0:\n            return str(0)\n    \n    return str(s)\n\nsolution('3')"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    max_len = max(a)\n    max_id = a.index(max_len)\n    # for elem in a:\n    #     if elem < max_len:\n    #         return -1\n    # print(max_id)\n    n = len(a)\n    # print(a)\n    # print(max_len)\n    # print(max_id)\n    res = -1\n    while True:\n        # print(max_id, a[max_id])\n        a[max_id] += 1\n        max_id = a.index(max(a))\n        # print(a)\n        # print(max_id)\n        if a[max_id] >= max_len:\n            res = max_id\n            break\n    return res\n\n\nsolution(\"5 4 4 7 4 1\")\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 1 4 4 7 4 1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 5\n   ... 2 2 5 2 5\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 6\n   ... 1 4 4 7 4 1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 4\n   ... 1 3 3 7\n   ... ''')\n    '-1'\n    '''\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    \n    # [a_i+D, a_i-D, a_i]\n    changes = []\n    for i, a_i in enumerate(a):\n        changes.append([a_i + D, a_i - D, a_i])\n\n    changes.sort(key=lambda x: x[1] - x[0])\n\n    for change in changes:\n        if change[1] > 0:\n            # negative a_i => a_i + D < 0\n            return str(-1)\n        elif change[2] == change[1]:\n            # not enough a_i and a_j => -1\n            return str(-1)\n\n    return str(min([change[0] for change in changes]))"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    if len(set(a))!= len(a):\n        return \"Impossible\"\n    return min([a[i] - a[i+1] for i in range(len(a) - 1)], default=0)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n\n    def equal(a1, a2, b):\n        for i in range(len(a1)):\n            if a1[i]!= a2[i]:\n                return False\n        return True\n\n    def sort(a):\n        a.sort()\n        return a\n\n    max_d = -1\n    d = 0\n    while True:\n        if max_d!= -1 and max_d >= d:\n            break\n        for i in range(1, len(a)):\n            if a[i] <= a[i - 1]:\n                break\n        else:\n            continue\n\n        d = (a[-1] - a[i])\n        a = sort(a)\n        for i in range(len(a)):\n            if a[i]!= a[i - 1]:\n                break\n        else:\n            continue\n        a[i] += d\n        a[i - 1] -= d\n    return str(d)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = len(a)\n\n    if n <= 1:\n        return \"0\"\n    elif n == 2:\n        return str(min(a[0], a[1]))\n    elif n == 3:\n        if a[0] == a[1] and a[2]!= a[0]:\n            return str(a[2])\n        elif a[0] == a[2] and a[1]!= a[0]:\n            return str(a[1])\n        elif a[2] == a[1] and a[0]!= a[2]:\n            return str(a[0])\n        else:\n            return -1\n    elif n == 4:\n        if a[0] == a[1] and a[2] == a[3] and a[1]!= a[0]:\n            return str(a[1])\n        elif a[0] == a[1] and a[2]!= a[3] and a[1]!= a[0]:\n            return str(a[3])\n        elif a[0] == a[3] and a[1] == a[2] and a[2]!= a[0]:\n            return str(a[2])\n        elif a[0]!= a[1] and a[0]!= a[2] and a[0]!= a[3] and a[1]!= a[2] and a[1]!= a[3] and a[2]!= a[3]:\n            return -1\n        else:\n            for i in range(1, 4):\n                if a[0] == a[i] and a[1]!= a[0]:\n                    return str(a[1])\n                elif a[1] == a[i] and a[0]!= a[1]:\n                    return str(a[0])\n                elif a[2] == a[i] and a[1]!= a[2]:\n                    return str(a[1])\n                elif a[3] == a[i] and a[2]!= a[3]:\n                    return str(a[2])\n                else:\n                    continue\n    elif n == 5:\n        if a[0] == a[1] and a[2] == a[3] and a[3]!= a[4] and a[1]!= a[0]:\n            return str(a[1])\n        elif a[0] == a[1] and a[2]!= a[3] and a[3] == a[4] and a[1]!= a[0]:\n            return str(a[0])\n        elif a[0] == a[3] and a[1] == a[2] and a[2]!= a[4] and a[1]!= a[0]:\n            return str(a[1])\n        elif a[0] == a[3] and a[1]!= a[2] and a[2] == a[4] and a[1]!= a[0]:\n            return str(a[0])\n        elif a[0] == a[4] and a[1] == a[2] and a[2] == a[3] and a[1]!= a[0]:\n            return str(a[0])\n        elif a[0] == a[4] and a[1]!= a[2] and a[2] == a[3] and a[1] == a[0]:\n            return str(a[0])\n        elif a[0]!= a[1] and a[0]!= a[2] and a[0]!= a[3] and a[0]!= a[4] and a[1]!= a[2] and a[1]!= a[3] and a[1]!= a[4] and a[2]!= a[3] and a[2]!= a[4] and a[3]!= a[4]:\n            return -1\n        else:\n            for i in range(1, 5):\n                if a[0] == a[i] and a[1]!= a[0]:\n                    return str(a[1])\n                elif a[1] == a[i] and a[0]!= a[1]:\n                    return str(a[0])\n                elif a[2] == a[i] and a[1]!= a[2]:\n                    return str(a[1])\n                elif a[3] == a[i] and a[2]!= a[3]:\n                    return str(a[2])\n                elif a[4] == a[i] and a[3]!= a[4]:\n                    return str(a[3])\n                elif a[0] == a[i] and a[1]!= a[0]:\n                    return str(a[0])\n                elif a[0] == a[i] and a[1] == a[4]:\n                    return str(a[4])\n                elif a[0] == a[3] and a[1] == a[2]:\n                    return str(a[2])\n                elif a[0] == a[4] and a[1] == a[2]:\n                    return str(a[2])\n                elif a[0] == a[2] and a[1] == a[3]:\n                    return str(a[3])\n                elif a[0] == a[4] and a[1] == a[3]:\n                    return str(a[3])\n                elif a[0] == a[3] and a[1] == a[4]:\n                    return str(a[4])\n                elif a[0] == a[4] and a[1] == a[3]:\n                    return str(a[3])\n                elif a[0]!= a[1] and a[0]!= a[2] and a[0]!= a[3] and a[0]!= a[4] and a[1]!= a[2] and a[1]!= a[3] and a[1]!= a[4] and a[2"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split('\\n')\n    n = int(a)\n    if n == 1:\n        return '-1'\n    a = list(map(int, a.split()))\n    ans = -1\n    for d in range(1, 10 ** 6 + 1):\n        if is_possible(a, d):\n            ans = d\n            break\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet_x_1, white_sheet_y_1, white_sheet_x_2, white_sheet_y_2 = (int(i) for i in stdin.split())\n\n    black_sheet_x_3, black_sheet_y_3, black_sheet_x_4, black_sheet_y_4 = (int(i) for i in stdin.split())\n    black_sheet_x_5, black_sheet_y_5, black_sheet_x_6, black_sheet_y_6 = (int(i) for i in stdin.split())\n\n    bottom_left_x = min(white_sheet_x_1, black_sheet_x_1)\n    bottom_left_y = min(white_sheet_y_1, black_sheet_y_1)\n    top_right_x = max(white_sheet_x_2, black_sheet_x_2)\n    top_right_y = max(white_sheet_y_2, black_sheet_y_2)\n\n    if bottom_left_x >= top_right_x or bottom_left_y >= top_right_y:\n        return 'NO'\n    if (bottom_left_x < white_sheet_x_3 or top_right_x < white_sheet_x_3) or (bottom_left_y < white_sheet_y_3 or top_right_y < white_sheet_y_3):\n        return 'NO'\n    if (bottom_left_x < white_sheet_x_4 or top_right_x < white_sheet_x_4) or (bottom_left_y < white_sheet_y_4 or top_right_y < white_sheet_y_4):\n        return 'NO'\n    if (bottom_left_x < white_sheet_x_5 or top_right_x < white_sheet_x_5) or (bottom_left_y < white_sheet_y_5 or top_right_y < white_sheet_y_5):\n        return 'NO'\n    if (bottom_left_x < white_sheet_x_6 or top_right_x < white_sheet_x_6) or (bottom_left_y < white_sheet_y_6 or top_right_y < white_sheet_y_6):\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2 4 4\n   ... 1 1 3 5\n   ... 3 1 5 5\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 3 3 7 5\n   ... 0 0 4 6\n   ... 0 0 7 4\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5 2 10 5\n   ... 3 1 7 6\n   ... 8 1 11 7\n   ... ''')\n    'YES'\n    \"\"\"\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.strip().split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.strip().split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.strip().split()))\n    x_3, y_3, x_4, y_4 = sorted([x_3, y_3, x_4, y_4])\n    x_5, y_5, x_6, y_6 = sorted([x_5, y_5, x_6, y_6])\n    if max(x_1, x_2) > min(x_3, x_4) and max(x_1, x_2) > min(x_5, x_6) and max(x_3, x_4) > min(x_5, x_6) and max(y_1, y_2) > min(y_3, y_4) and max(y_1, y_2) > min(y_5, y_6) and max(y_3, y_4) > min(y_5, y_6):\n        return 'NO'\n    if (max(x_1, x_2) > min(x_3, x_4) or max(x_3, x_4) > min(x_5, x_6)) or (max(x_1, x_2) > min(x_5, x_6) or max(x_5, x_6) > min(x_3, x_4)) or (max(y_1, y_2) > min(y_3, y_4) or max(y_3, y_4) > min(y_5, y_6)) or (max(y_1, y_2) > min(y_5, y_6) or max(y_5, y_6) > min(y_3, y_4)) and (max(x_1, x_2) > min(x_3, x_4) or max(x_3, x_4) > min(x_5, x_6)) or (max(x_1, x_2) > min(x_5, x_6) or max(x_5, x_6) > min(x_3, x_4)) or (max(y_1, y_2) > min(y_3, y_4) or max(y_3, y_4) > min(y_5, y_6)) or (max(y_1, y_2) > min(y_5, y_6) or max(y_5, y_6) > min(y_3, y_4)):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_point_outside(coord: tuple, black_sheet: tuple) -> bool:\n        return (\n            coord[0] < black_sheet[0] or\n            coord[0] > black_sheet[2] or\n            coord[1] < black_sheet[1] or\n            coord[1] > black_sheet[3]\n        )\n    xs, ys, ws, bs = map(int, stdin.split())\n    white_sheet = (xs, ys, ws, bs)\n    black_sheet_1 = (xs, ys, ws + bs, bs)\n    black_sheet_2 = (xs + ws, ys, ws + bs, bs)\n    for coord in ((xs + ws, ys), (xs + ws, ys + bs), (xs, ys + bs), (xs, ys)):\n        if is_point_outside(coord, black_sheet_1):\n            return \"NO\"\n    for coord in ((xs + ws, ys + bs), (xs + ws, ys), (xs, ys)):\n        if is_point_outside(coord, black_sheet_2):\n            return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('2 2 4 4')\n    'NO'\n    >>> solution('1 1 3 5')\n    'YES'\n    >>> solution('3 1 5 5')\n    'YES'\n    '''\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    return \"NO\" if (x1 * x2 + y1 * y2) % (x3 * x4 + y3 * y4) else \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    return 'YES' if not (x5 < x3 < x4 or x5 < x6 < x4 or x3 < x5 < x4 or x3 < x6 < x4) else 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.split()))\n\n    if (x_3 < x_1 < x_4 or x_3 < x_2 < x_4 or x_1 < x_3 < x_2 or x_1 < x_4 < x_2 or x_1 < x_5 < x_6 or x_1 < x_6 < x_2 or x_2 < x_3 < x_4 or x_2 < x_4 < x_3 or x_2 < x_5 < x_6 or x_2 < x_6 < x_3 or x_3 < x_5 < x_6 or x_3 < x_6 < x_5) and (y_3 < y_1 < y_4 or y_3 < y_2 < y_4 or y_1 < y_3 < y_2 or y_1 < y_4 < y_2 or y_1 < y_5 < y_6 or y_1 < y_6 < y_2 or y_2 < y_3 < y_4 or y_2 < y_4 < y_3 or y_2 < y_5 < y_6 or y_2 < y_6 < y_3 or y_3 < y_5 < y_6 or y_3 < y_6 < y_5):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def points_on_rectangle(a: int, b: int, c: int, d: int) -> bool:\n        \"\"\"\n        Returns whether the points (x, y) lies on the rectangle defined by a and b, c and d.\n        \"\"\"\n        return (b > a > 0 and d > c > 0) or (b < a < 100000 and c < d < 100000)\n\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n\n    top_left_1 = (x_3, y_3)\n    top_right_1 = (x_4, y_4)\n\n    top_left_2 = (x_5, y_5)\n    top_right_2 = (x_6, y_6)\n\n    return points_on_rectangle(x_1, y_1, x_2, y_2) or points_on_rectangle(\n        x_3, y_3, x_4, y_4\n    ) or points_on_rectangle(x_5, y_5, x_6, y_6)"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersect(first_rect: tuple, second_rect: tuple) -> bool:\n        def is_right(first_rect: tuple, second_rect: tuple) -> bool:\n            x1, y1, x2, y2 = first_rect\n            x3, y3, x4, y4 = second_rect\n            return x1 < x2 < x3 < x4 or x1 < x4 < x2 < x3\n\n        def is_bottom(first_rect: tuple, second_rect: tuple) -> bool:\n            x1, y1, x2, y2 = first_rect\n            x3, y3, x4, y4 = second_rect\n            return y1 < y2 < y3 < y4 or y1 < y4 < y2 < y3\n\n        if not (is_right(first_rect, second_rect) or is_bottom(first_rect, second_rect)):\n            return False\n        x1, y1, x2, y2 = first_rect\n        x3, y3, x4, y4 = second_rect\n        if x2 >= x3 and x1 <= x4 or x2 <= x3 and x1 >= x4:\n            if y2 >= y3 and y1 <= y4 or y2 <= y3 and y1 >= y4:\n                return True\n        return False\n\n    def first_rect(x1, y1, x2, y2) -> tuple:\n        x1, y1, x2, y2 = map(float, (x1, y1, x2, y2))\n        return (x1, y1, x2, y1 + y2)\n\n    def second_rect(x1, y1, x2, y2) -> tuple:\n        x1, y1, x2, y2 = map(float, (x1, y1, x2, y2))\n        return (x1, y1, x1 + x2, y2)\n\n    s = stdin.split(\"\\n\")\n    s = s[1:]\n    res = \"NO\"\n    for line in s:\n        if line:\n            line = list(map(int, line.split(\" \")))\n            if is_intersect(first_rect(line[0], line[1], line[2], line[3]), second_rect(line[4], line[5], line[6], line[7])):\n                res = \"YES\"\n    return res\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    x1, y1, x2, y2 = n[0], n[1], n[2], n[3]\n    n = list(map(int, stdin.split()))\n    x3, y3, x4, y4 = n[0], n[1], n[2], n[3]\n    n = list(map(int, stdin.split()))\n    x5, y5, x6, y6 = n[0], n[1], n[2], n[3]\n\n    if (x1 < x3 < x4 and y1 < y3 < y4) or (x3 < x5 < x6 and y3 < y5 < y6):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x3y3 = (x3, y3)\n    x4y4 = (x4, y4)\n    x5y5 = (x5, y5)\n    x6y6 = (x6, y6)\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    if (x3y3[0] <= x4y4[0] <= x5y5[0]) and (x3y3[1] <= x4y4[1] <= x5y5[1]):\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        return x + 1\n    \n    number = int(stdin)\n    \n    if number == 1:\n        return 1\n    \n    def g(x: int) -> int:\n        return f(x)\n        \n    reachable = set()\n    reachable.add(number)\n    \n    while reachable:\n        reachable_this_round = set()\n        for reachable_number in reachable:\n            for _ in range(len(str(reachable_number))):\n                reachable_this_round.add(g(reachable_number))\n        reachable = reachable_this_round\n    return len(reachable)\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = [1]\n    while reachable[-1] < n:\n        reachable.append(reachable[-1] + 1)\n        for i in range(len(reachable) - 1, 0, -1):\n            if reachable[i] == reachable[-1]:\n                reachable.pop()\n                reachable[i-1] = reachable[i-1] + 1\n    return len(reachable)"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 42\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # map numbers to their distance from n\n    dist = {}\n    dist[n] = 0\n    to_visit = {n}\n    while to_visit:\n        next_visit = set()\n        for num in to_visit:\n            if num + 1 in dist:\n                dist[n] = dist[n] + 1\n            if num - 1 in dist:\n                dist[n] = dist[n] + 1\n            if num * 2 in dist:\n                dist[n] = dist[n] + 1\n            if num % 2 == 0 and num + 1 in dist:\n                dist[n] = dist[n] + 1\n            if num % 2 == 1 and num + 1 in dist:\n                dist[n] = dist[n] + 1\n            for i in range(10):\n                if i!= 0:\n                    if num + i in dist:\n                        dist[n] = dist[n] + 1\n                    if num - i in dist:\n                        dist[n] = dist[n] + 1\n                    if num * i in dist:\n                        dist[n] = dist[n] + 1\n                    if i + num in dist:\n                        dist[n] = dist[n] + 1\n                    if i - num in dist:\n                        dist[n] = dist[n] + 1\n            next_visit.update(dist)\n            del dist[num]\n        to_visit = next_visit\n    return dist[n]\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    def f(x):\n        if x == 1:\n            return 0\n        return 1 + f(x - 1)\n    return str(f(x))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    liste = []\n    def rev(n):\n        return n\n    def fib(n):\n        if n <= 1:\n            return n\n        return fib(n - 2) + fib(n - 1)\n    \n    while fib(n)!= n:\n        n = fib(n)\n        liste.append(n)\n    \n    l = list(map(rev, liste))\n    n= 0\n    for i in l:\n        n += i\n    return n\n\nsolution(\"1098\")\n\nsolution(\"10\")\n\nsolution(\"1\")\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_str = list(map(str, list(map(int, stdin.split()))))\n    # print(num_str)\n    # print(len(num_str))\n    # print(len(set(num_str)))\n    return str(len(set(num_str)))\n\nsolution(\"1 2 3 4 5 6 7 8 9 10 98 1099\")\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_digit(s):\n        return s.isdigit()\n    def zero_at_start(s):\n        if s[0] == '0':\n            return True\n        return False\n    def cnt_digit(s):\n        cnt = 0\n        for i in range(len(s)):\n            if is_digit(s[i]):\n                cnt += 1\n        return cnt\n    x, n = stdin.split()\n    x = int(x)\n    n = int(n)\n    if (cnt_digit(str(n)) == 1 or n == 1) and zero_at_start(str(n)):\n        return 1\n    else:\n        return cnt_digit(str(n)) + cnt_digit(str(x))\nsolution(\"1098\")\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    Return your answer as a string, or print/return your answer as a list/tuple if\n    your answer is a list/tuple of strings.\n    \"\"\"\n    n = int(stdin)\n    return str(len(set(range(1, n+1)) - set(map(lambda x: x+1, range(1, n+1)))))"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    answer = []\n\n    def give_gifts(arr):\n        arr = sorted(arr)\n        result = 0\n        for i in range(len(arr)):\n            result += arr[i]\n            arr[i] = result\n\n    def friends_for_gifts(arr):\n        result = []\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                continue\n            for j in range(len(arr)):\n                if arr[i] == arr[j]:\n                    continue\n                if arr[i] + 1 == arr[j]:\n                    result.append((i, j))\n        return result\n\n    while True:\n        if len(friends) == 1 and friends[0] == 0:\n            break\n        tmp = friends.copy()\n        give_gifts(tmp)\n        answer.append(tmp.index(0) + 1)\n        for i in range(len(tmp)):\n            if tmp[i]!= 0:\n                friends.remove(tmp[i])\n        for j in friends_for_gifts(tmp):\n            tmp[j[0]] = 0\n            tmp[j[1]] = 0\n        friends = tmp\n\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friends = list(map(int, stdin.splitlines()[1].split()))\n    if n == 1:\n        return '1'\n    if n == 2:\n        if friends[0] == friends[1]:\n            return '2'\n        return '1' +'' + str(friends[0])\n    result = []\n    for i in range(2,n+1):\n        if friends[i] == 0:\n            break\n    else:\n        result = [str(i) for i in range(1,n+1)]\n    for i in range(len(result)):\n        if i+1!= len(result):\n            if result[i] == result[i+1]:\n                result[i] = '0'\n    result =''.join(result)\n    return result\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    friends = []\n    for friend in map(int, stdin.split()):\n        if friend == 0:\n            continue\n        friends.append(friend)\n    friends.sort()\n    for friend in friends:\n        print(friend, end=' ')\n    return''.join(map(str, friends))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nf = [int(x) for x in stdin.split()]\n    nf = set(nf)\n    # print(nf)\n    m = len(nf)\n    # print(m)\n    for i in range(m):\n        if nf[i] == 0:\n            nf[i] = i+1\n    print(nf)\n    for i in range(m):\n        for j in range(i+1, m):\n            # print(i, j)\n            if nf[i] > nf[j]:\n                nf[i], nf[j] = nf[j], nf[i]\n    # print(nf)\n    for i in range(m):\n        print(nf[i], end=\" \")\n    return ''\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    answers = []\n    for i in range(n):\n        if friends[i] == 0:\n            answers.append(i)\n            for j in range(i):\n                if j!= i:\n                    if friends[j] == 1:\n                        friends[j] = 0\n                        answers.append(j)\n                    else:\n                        friends[j] -= 1\n                        if friends[j] == 0:\n                            answers.append(j)\n        else:\n            friends[i] -= 1\n    return''.join(map(str, answers))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    # print(friends)\n    # if len(friends) < n:\n    #     raise ValueError(f'Too few friends')\n    # if len(friends) > n:\n    #     raise ValueError(f'Too many friends')\n    if len(set(friends))!= len(friends):\n        raise ValueError('Unknown friends')\n\n    # mapping from friends to their giver\n    givers = {}\n    # mapping from friends to their receiver\n    receivers = {}\n    for i, friend in enumerate(friends):\n        # if friend == 0:\n        #     continue\n        if friend not in givers:\n            givers[friend] = i\n        else:\n            raise ValueError(f'Friend {friend} already exists')\n\n        if friend not in receivers:\n            receivers[friend] = i\n        else:\n            raise ValueError(f'Friend {friend} already exists')\n\n    # mapping from givers to their receivers\n    # mapping from receivers to their givers\n    maps = {}\n    # the number of givers to be notified\n    n_givers = len(givers)\n    for i in givers:\n        maps[givers[i]] = i\n    # the number of receivers to be notified\n    n_receivers = len(receivers)\n    # the number of receivers which are not connected to anyone\n    n_not_connected = n_receivers - 1\n    # the number of receivers who have already been notified\n    n_already_notified = 0\n\n    for i in range(n_not_connected):\n        # send one packet to the closest friend\n        if givers[i] not in maps:\n            print(i)\n            continue\n        # map from receiver to their givers\n        receiver_givers = maps[i]\n        # the number of givers who are not connected to the receiver\n        n_not_connected_to_receiver = len(receiver_givers) - 1\n        # the number of givers who have already been notified\n        n_already_notified_to_receiver = n_already_notified + n_not_connected_to_receiver\n        # if there is not receiver who can be notified now, break the loop\n        if n_already_notified_to_receiver == n_receivers:\n            print(i)\n            break\n\n        # send one packet to the receiver\n        receiver_id = receiver_givers[0]\n        # map from givers to their receivers\n        giver_receiver = maps[receiver_id]\n        # the number of givers who are not connected to the receiver\n        n_not_connected_to_giver = len(giver_receiver) - 1\n        # the number of givers who have already been notified\n        n_already_notified_to_giver = n_already_notified + n_not_connected_to_giver\n        # if there is not giver who can be notified now, break the loop\n        if n_already_notified_to_giver == n_givers:\n            print(i)\n            break\n\n        # if there are multiple receivers that can be notified, pick the one that has the least amount of givers\n        # then remove the giver from his receiver's map\n        # remove the giver from receiver's giver's map\n        # send one packet to the closest giver\n        receiver_id = receiver_givers[0]\n        giver_id = givers[receiver_id]\n        if giver_id not in maps:\n            raise ValueError(f'Unknown giver {giver_id}')\n        giver_receiver = maps[giver_id]\n        giver_receiver.remove(receiver_id)\n        receiver_givers.remove(receiver_id)\n        maps[giver_id] = receiver_givers\n        maps[receiver_id] = giver_receiver\n\n        # if there are multiple givers that can be notified, pick the one that has the least amount of receivers\n        # then remove the giver from his receiver's map\n        # remove the giver from receiver's giver's map\n        # send one packet to the giver\n        giver_id = givers[receiver_id]\n        if giver_id not in maps:\n            raise ValueError(f'Unknown giver {giver_id}')\n        giver_receiver = maps[giver_id]\n        giver_receiver.remove(receiver_id)\n        receiver_givers.remove(receiver_id)\n        maps[giver_id] = receiver_givers\n        maps[receiver_id] = giver_receiver\n\n    return''.join(map(str, maps[givers[0]]))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    nf = [0] * n\n    friends_set = set(range(n))\n    for i in range(n):\n        friend = friends[i]\n        if friend not in friends_set:\n            friends_set.add(friend)\n            if friend!= 0:\n                nf[i] = friend\n            else:\n                nf[i] = i\n    return''.join(map(str, nf))\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # return solution1(n, k, a)\n    return solution2(n, k, a)\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # Your code here\n    a.sort()\n    return \"YES\" if k > 1 and a[1]!= a[0] else \"NO\"\n\nsolution('4 2')\nsolution('5 2')\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    colors = {i: 1 for i in range(1, k + 1)}\n    for i in range(n):\n        if len(colors) == 0:\n            print(\"NO\")\n            return\n        if a[i] in colors.keys():\n            colors[a[i]] += 1\n            if colors[a[i]] == 2:\n                colors[a[i]] -= 1\n                del colors[a[i]]\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    for color, n in colors.items():\n        if n == 1:\n            print(color)\nsolution(input())\n\n---\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # elements = list(map(int, stdin.split()))\n    elements = list(map(int, input().split()))\n    if len(set(elements))!= len(elements):\n        return \"NO\"\n\n    colors = set()\n    for element in elements:\n        if element in colors:\n            colors.remove(element)\n        else:\n            colors.add(element)\n\n    if len(colors)!= k:\n        return \"NO\"\n\n    for element in colors:\n        if element - 1 not in colors and element + 1 not in colors:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = a[1]\n\n    colors = {}\n    if k > n:\n        return 'NO'\n    for i in range(k):\n        colors[i + 1] = 1\n    for i in range(n):\n        for c in colors:\n            if a[i] in colors:\n                colors[a[i]] += 1\n    colors = {k: v for k, v in sorted(colors.items(), key=lambda item: item[0])}\n    if len(colors) > len(set(colors.values())):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  a = list(map(int, stdin.split()))\n  return \"NO\" if not all(\n    a[i] == i\n    for i in range(len(a))\n    if a[i] in {i for i in range(1, k + 1)}\n    if a[i]!= i\n  ) else \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = (int(x) for x in stdin.split()[1:])\n    possible = []\n    for i in range(1, k + 1):\n        s = set()\n        for j in a:\n            if i not in s:\n                s.add(j % i)\n            else:\n                break\n        else:\n            possible.append(i)\n    if len(possible) == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    return \"NO\" if any(a[i] == j for i in range(k) for j in range(i + 1, k)) else \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # numbers in range(1, k+1)\n    possible = list(range(1, k+1))\n    # all elements are distinct\n    if len(set(a)) == len(a):\n        return \"YES\"\n    # each element is colored in at least one color\n    for i in range(len(a)):\n        if a[i] not in possible:\n            return \"NO\"\n        # each element must be colored in one color\n        possible.remove(a[i])\n    return \"YES\"\n\n\nsolution(input())\n'''\n\n\n'''\n----SOLUTION----\nclass Solution:\n    def solution(self, n, k, a):\n        a.sort()\n        return 'YES' if len(set(a)) == len(a) and all(a[i] not in set(a) for i in range(k)) else 'NO'\n'''\n\n'''\n------SOLUTION 2-------\nclass Solution:\n    def solution(self, n, k, a):\n        colors = set(range(1, k+1))\n        s = set()\n        for e in a:\n            if e not in colors: return 'NO'\n            s.add(e)\n            colors -= {e}\n        return 'YES' if len(colors) == 1 else 'NO'\n'''\n\n'''\n------SOLUTION 3-------\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na = list(map(int, input().split()))\n\nn, k = a[0], a[1]\n\nprint(\"YES\")\nfor i in range(1, k + 1):\n    if (i in a) and (len(set(a)) == k):\n        print(*range(i), sep=\" \")\n        break\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    s = \"\".join(stdin)\n    s = int(s)\n    x = abs(x)\n    y = abs(y)\n    d = pow(2, x - 1, 10) * pow(2, y - 1, 10)\n    return str(d - s)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    return str(min(x, y) - max(x, y))\n\nsolution('11 5 2') == '1'\nsolution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, x, y = map(int, stdin.split())\n    min_ops = n\n    while n % 10!= y:\n        n //= 10\n        min_ops += 1\n    if n % 10!= x:\n        min_ops += 1\n    return str(min_ops)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y = map(int,stdin.split())\n    data = list(stdin)\n    while True:\n        if x==y:\n            break\n        elif x>y:\n            if data[-1]=='1':\n                data = data[:len(data)-1]\n            else:\n                data.pop()\n            x+=1\n        else:\n            if data[-1]=='0':\n                data = data[:len(data)-1]\n            else:\n                data.pop()\n            y+=1\n    print(len(data))\n    return stdin\nsolution(input())\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    remainder = (10 ** y) % (10 ** x)\n    count = 0\n    while remainder > 0:\n        if remainder % 2 == 0:\n            remainder /= 2\n        else:\n            remainder = (remainder * 3 + 1) / 2\n        count += 1\n    return str(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = int(stdin)\n    ans = 0\n    while a % (10 ** x) == 0:\n        a = a // 10\n        ans += 1\n    while a % (10 ** y) == 0:\n        a = a // 10\n        ans += 1\n    if ans == 0:\n        ans = 1\n    return str(ans)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    k = n // 10\n    d = n % 10\n    x = x * 2**(n-1)\n    y = y * 2**(n-1)\n    z = 10**(n-1)\n    x, y = x+d*z, y+d*z\n    count = 1\n    for i in range(1,k+1):\n        if x%2 == 1 and y%2 == 1:\n            x += 1\n            y += 1\n            count += 1\n        elif x%2 == 0 and y%2 == 1:\n            x //= 2\n            y += 1\n            count += 1\n        elif x%2 == 1 and y%2 == 0:\n            x += 1\n            y //= 2\n            count += 1\n        else:\n            x //= 2\n            y //= 2\n            count += 1\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = int(stdin) % (10 ** x)\n    a = (int(stdin) % (10 ** x)) // (10 ** (x - 1))\n    a = a % (10 ** x)\n    a = (int(stdin) % (10 ** x)) // (10 ** (x - 1))\n    a = a % (10 ** x)\n    return str(a)\n\nsolution(input())\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    str_num = ''.join(str(int(i)) for i in stdin.split())\n    # print(n, x, y, str_num)\n    int_num = int(str_num, 2)\n    # print(int_num)\n    if int_num % (10 ** x) == 10 ** y:\n        return 0\n    else:\n        return x + y - 1\n    return x + y - 1\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn, x, y = list(map(int, stdin.split()))"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr: list):\n        for i in range(0, len(arr) // 2):\n            if arr[i]!= arr[len(arr) - i - 1]:\n                return False\n        return True\n\n    tests = int(stdin)\n    for _ in range(tests):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        i = 0\n        while i < n - 1:\n            if is_palindrome(a[i:i + 2]):\n                i += 2\n            else:\n                i += 1\n        if is_palindrome(a[i:i + 2]):\n            print('YES')\n        else:\n            print('NO')\n    return ''\n\n\nsolution('5')\nsolution('3')\nsolution('1 2 1')\nsolution('5')\nsolution('1 2 2 3 2')\nsolution('3')\nsolution('1 1 2')\nsolution('4')\nsolution('1 2 2 1')\nsolution('10')\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        s = set()\n        for i in range(n):\n            for j in range(i+1, n):\n                a[i] = a[i] - a[j]\n                a[j] = a[j] - a[i]\n                if i == 0 and a[i]!= 0:\n                    continue\n                if i == n-1 and a[i]!= 0:\n                    continue\n                if len(s) < 3 or (len(s) >= 3 and a[i]!= a[s[-1]]):\n                    s.add(a[i])\n        if len(s) >= 3:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution()\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a = list(map(int, stdin.split()))\n        if is_palindrome(a) and check_length(a, 3):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.strip().split()[0])\n        a = stdin.strip().split()[1]\n        if is_palindrome(a) and is_palindrome_after_removing_duplicates(a, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    for i in range(n):\n        arr[i] = int(arr[i])\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if arr[0] == arr[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    for i in range(n):\n        lst = []\n        lst.append(arr[i])\n        temp = arr[i]\n        for j in range(i+1, n):\n            if temp + arr[j] not in lst:\n                lst.append(temp + arr[j])\n                temp = temp + arr[j]\n            else:\n                continue\n        if len(lst) >= 3:\n            return 'YES'\n    return 'NO'\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for _ in range(n):\n        l.append(list(map(int, stdin.split())))\n    for i in l:\n        if len(i) > 3:\n            for j in range(3, len(i)):\n                if i[j] == i[len(i) - j]:\n                    continue\n                elif i[j] == i[len(i) - j - 1] and i[j] == i[len(i) - j - 2]:\n                    continue\n                else:\n                    return \"NO\"\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        n = int(stdin)\n        a = [int(i) for i in stdin.split()]\n        # if a[0] == a[-1]:\n        #     return \"YES\"\n        n = int(stdin)\n        a = [int(i) for i in stdin.split()]\n        if a[0] == a[-1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 2 1\n   ... 5\n   ... 1 2 2 3 2\n   ... 3\n   ... 1 1 2\n   ... 4\n   ... 1 2 2 1\n   ... 10\n   ... 1 1 2\n   ... 3\n   ... 1 1 2\n   ... 4\n   ... 1 2 2 1\n   ... 10\n   ... ''')\n    'YES'\n    \"\"\"\n\n    # your code here\n    n = int(stdin.strip())\n    for _ in range(n):\n        a = list(map(int, stdin.strip().split()))\n        if is_palindrome(a):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        odds = []\n        evens = []\n        for i in range(n):\n            if i % 2 == 0:\n                evens.append(a[i])\n            else:\n                odds.append(a[i])\n        #print(odds)\n        #print(evens)\n        # check if odds are palindromes\n        if odds == odds[::-1]:\n            print('YES')\n        # check if evens are palindromes\n        if evens == evens[::-1]:\n            print('YES')\n        else:\n            print('NO')\n        # check if odds are palindromes\n        # if odds == odds[::-1]:\n        #     print('YES')\n        # # check if evens are palindromes\n        # if evens == evens[::-1]:\n        #     print('YES')\n        # else:\n        #     print('NO')\n    return ''"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    for i in range(n):\n        if (arr[i] == arr[n - i - 1]) and (len(arr[i:]) >= 3):\n            return \"YES\"\n    return \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    f = stdin.split()[2]\n\n    digit_map = {\n        1: '1',\n        2: '2',\n        3: '3',\n        4: '4',\n        5: '5',\n        6: '6',\n        7: '7',\n        8: '8',\n        9: '9'\n    }\n\n    n_digits = len(a)\n    current_num = ''\n    answer = 0\n\n    for i in range(n_digits):\n        if i == 0:\n            current_num += a[i]\n        else:\n            current_num += a[i]\n            for j in range(i, n_digits):\n                if j == n_digits - 1:\n                    answer = max(answer, int(current_num) * int(f[int(current_num[0]) - 1]))\n                    break\n                else:\n                    if int(current_num[j]) == int(current_num[j + 1]):\n                        current_num = current_num[:j] + f[int(current_num[j]) - 1] + current_num[j + 1:]\n                        answer = max(answer, int(current_num) * int(f[int(current_num[0]) - 1]))\n                        break\n    return answer\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    data = stdin.split('\\n')\n    #print(data)\n    a = data[0]\n    #print(a)\n    f = data[1]\n    #print(f)\n    #print(len(f))\n    result = ''\n    for x in range(len(a)):\n        #print(a[x])\n        if len(f)!= 0:\n            #print(x)\n            #print(x+len(f))\n            if (x+len(f)) < len(a):\n                result += str(int(a[x])*int(f[x]))\n            else:\n                for y in range(x,len(a)):\n                    result += str(int(a[y])*int(f[y]))\n                break\n        else:\n            result += a[x]\n    #print(result)\n    return result\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = len(a)\n    f = stdin.split()\n    c = []\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                for l in range(1,10):\n                    for m in range(1,10):\n                        for n in range(1,10):\n                            for o in range(1,10):\n                                for p in range(1,10):\n                                    s = str(i*10+j*100+k*1000+l*10000+m*1000000+n*10000000+o*100000000+p*1000000000)\n                                    s = list(s)\n                                    f = []\n                                    for j in range(n):\n                                        f.append(int(s[j]))\n                                    c.append(sum(f))\n    return max(c)\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    f = [int(x) for x in stdin]\n    max = -1\n    i = 0\n    while i < n:\n        curr = f[i]\n        j = i + 1\n        while j < n and a[j] == '0':\n            j += 1\n        for k in range(j, n):\n            if a[k]!= '0':\n                curr *= int(a[k])\n                if max < curr:\n                    max = curr\n                curr //= 10\n        i = j\n    return str(max)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    f = {1: 1, 2: 5, 3: 9, 4: 8, 5: 7, 6: 6, 7: 5, 8: 4, 9: 3}\n    for i in range(n - 1):\n        for j in range(i, -1, -1):\n            f[a[j]] = 9\n        a = list(a[i + 1:]) + a[:i + 1]\n    return ''.join(map(str, a))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n\n    def f(x):\n        return x + (x // 10) + (x // 100) * (x // 1000) * 10\n\n    def get_digits(a, n):\n        arr = []\n        while len(a) >= n:\n            a, x = a[:n], a[n:]\n            arr.append(x)\n        return arr\n\n    def get_max_digit(a, n):\n        max = 0\n        for i in a:\n            if max < int(i):\n                max = int(i)\n        return max\n\n    a = a[::-1]\n    a = get_digits(a, n)\n    max = get_max_digit(a, n)\n    for i in a:\n        max = f(max)\n    return str(max)\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = len(a)\n    ans = []\n    for i in range(n):\n        digits = a[i:]\n        while digits:\n            sub = digits[:3]\n            r = int(\"\".join(sub))\n            f = int(a[i])\n            digits = digits[3:]\n            ans.append(str(r * f))\n    return \"\".join(ans)"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    res = a\n    for i in range(len(n)):\n        t = list(n)\n        x = int(a[i])\n        t[i] = str(f(x))\n        res = ''.join(t)\n    print(res)\n    return res"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[0]\n    b = stdin.split(\"\\n\")[1]\n    f = stdin.split(\"\\n\")[2]\n    n = len(a)\n    max_number = int(a)\n    i = 0\n    while i < n:\n        if b[i]!= \"0\":\n            if int(f[i]) > int(b[i]):\n                max_number += int(f[i]) * int(b[i])\n            else:\n                max_number += int(b[i]) * int(f[i])\n            i += 1\n        else:\n            i += 1\n    return str(max_number)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # initialise variables\n    max_value = -1\n    max_value_str = \"\"\n\n    # first turn stdin into a list\n    input_list = stdin.split()\n\n    # loop through each digit in the string\n    for index, digit in enumerate(input_list[1]):\n        # add one to the max value\n        max_value += int(digit)\n        # create a new max_value_str\n        max_value_str = str(max_value)\n\n        # check the max value_str is equal to the first digit in the input\n        if int(input_list[1][0]) == int(max_value_str[0]):\n            # return the max value_str\n            return max_value_str\n\n        # replace the max_value_str with the digit from the input\n        max_value_str = max_value_str[0] + max_value_str[1]\n        # remove the digit from the input\n        input_list[1] = input_list[1][1:]\n\n        # remove the digit from the input\n        input_list[1] = input_list[1][1:]\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        if b % a == 0 and c % b == 0:\n            print(f'{a} {b} {c}')\n            return\n        elif c % a == 0 and b % c == 0:\n            print(f'{a} {c} {b}')\n            return\n        elif a % b == 0 and c % a == 0:\n            print(f'{b} {a} {c}')\n            return\n        else:\n            print(f'{a} {b} {c}')\n            return\n\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        if c % a == 0 and b % c == 0:\n            return str(a) +'' + str(b) +'' + str(c)\n        if c % a == 0:\n            return str(a) +'' + str(b) +'' + str(c)\n        if b % c == 0:\n            return str(a) +'' + str(b) +'' + str(c)\n        if a % c == 0:\n            return str(a) +'' + str(b) +'' + str(c)\n        \n        if c > b and a > c:\n            print(str(c) +'' + str(a) +'' + str(b))\n            print(str(c) +'' + str(b) +'' + str(a))\n            print(str(c) +'' + str(b) +'' + str(a))\n        elif c > b and a < c:\n            print(str(c) +'' + str(b) +'' + str(a))\n            print(str(c) +'' + str(a) +'' + str(b))\n            print(str(c) +'' + str(a) +'' + str(b))\n        elif c < b and a > c:\n            print(str(a) +'' + str(c) +'' + str(b))\n            print(str(a) +'' + str(b) +'' + str(c))\n            print(str(a) +'' + str(b) +'' + str(c))\n        elif c < b and a < c:\n            print(str(a) +'' + str(b) +'' + str(c))\n            print(str(a) +'' + str(c) +'' + str(b))\n            print(str(a) +'' + str(c) +'' + str(b))\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = [int(j) for j in stdin.split()]\n        if b % a == 0 and c % b == 0:\n            print(\"{} {} {}\".format(a, b, c))\n            return\n    print(a, b, c)\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        a, b, c = map(int, line.split())\n        print(minOperations(a, b, c))\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        res = 0\n        while True:\n            if a % b == 0 and c % b == 0:\n                res += min(a, b, c) - 1\n                a, b = a // b, c // b\n                c = min(a, b, c)\n            elif a % b == 0:\n                res += 1\n                a = a // b\n            elif c % b == 0:\n                res += 1\n                c = c // b\n            else:\n                break\n        print(res)\n        # break\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _input = stdin.rstrip().split('\\n')\n\n    T = int(_input[0])\n    for i in range(T):\n        a, b, c = [int(x) for x in _input[i+1].split()]\n        count = 0\n        for j in range(a, b+1):\n            if b % j == 0:\n                count += (b//j)\n        for k in range(b, c+1):\n            if c % k == 0:\n                count += (c//k)\n        print(count)\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = sys.stdin.read()\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    '''\n    # n = int(input())\n    # A = list(map(int, input().split()))\n    # B = list(map(int, input().split()))\n    # C = list(map(int, input().split()))\n    # res = 0\n    # A_f = 1\n    # while A_f:\n    #     A_f = 0\n    #     for i in range(len(A)):\n    #         if A[i] % 2 == 1:\n    #             A[i] += 1\n    #             A_f = 1\n    #             break\n    #     for j in range(len(B)):\n    #         if B[j] % 2 == 1:\n    #             B[j] += 1\n    #             A_f = 1\n    #             break\n    #     for k in range(len(C)):\n    #         if C[k] % 2 == 1:\n    #             C[k] += 1\n    #             A_f = 1\n    #             break\n    #     res += 1\n    # return res\n\n    res = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] % 2 == 1 and B[j] % 2 == 1 and C[k] % 2 == 1 and (A[i] + B[j] + C[k] % 2 == 2):\n                    res += 1\n    return res\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        if (b % a == 0 and c % b == 0) or (c % a == 0 and b % c == 0):\n            res = a + b + c - 1\n            if res % 3 == 0:\n                print(res)\n            else:\n                print(res + 1)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def div(n):\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n    def get_div(n):\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 1\n    t = int(stdin)\n    for i in range(t):\n        a,b,c = list(map(int, stdin.split()))\n        if a+b+c == 0:\n            print('1')\n        else:\n            ans = float('inf')\n            for j in range(1, c):\n                if div(j) and div(a*j) and div(b*j):\n                    if ans > abs(j):\n                        ans = abs(j)\n            print(ans)\n    return '1'\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # read in the test case\n    # split the numbers into a list\n    t = int(stdin)\n    for i in range(t):\n        # split the input into a list\n        a, b, c = list(map(int, stdin.split()))\n        # find the prime factors of a\n        a_factors = []\n        a_factor = 2\n        while a_factor * a_factor <= a:\n            if a % a_factor == 0:\n                a_factors.append(a_factor)\n                a //= a_factor\n            else:\n                a_factor += 1\n        # find the prime factors of b\n        b_factors = []\n        b_factor = 2\n        while b_factor * b_factor <= b:\n            if b % b_factor == 0:\n                b_factors.append(b_factor)\n                b //= b_factor\n            else:\n                b_factor += 1\n        # find the prime factors of c\n        c_factors = []\n        c_factor = 2\n        while c_factor * c_factor <= c:\n            if c % c_factor == 0:\n                c_factors.append(c_factor)\n                c //= c_factor\n            else:\n                c_factor += 1\n        # if the a factors are the same\n        if a_factors == b_factors:\n            if a_factors[0] * c_factors[0] == a_factors[1] * c_factors[1]:\n                # print the the min number of operations to make the two numbers\n                # print(str(a_factors[0]) + \" \" + str(c_factors[0]) + \" \" + str(b))\n                print(int(a_factors[0]))\n        # if the b factors are the same\n        if b_factors == a_factors:\n            if b_factors[0] * c_factors[0] == b_factors[1] * c_factors[1]:\n                # print the the min number of operations to make the two numbers\n                # print(str(a_factors[0]) + \" \" + str(c_factors[0]) + \" \" + str(b))\n                print(int(b_factors[0]))\n        # if the c factors are the same\n        if c_factors == a_factors:\n            if c_factors[0] * b_factors[0] == c_factors[1] * b_factors[1]:\n                # print the the min number of operations to make the two numbers\n                # print(str(a_factors[0]) + \" \" + str(c_factors[0]) + \" \" + str(b))\n                print(int(c_factors[0]))\n        # if the a factors are the same\n        if a_factors == b_factors:\n            if a_factors[0] * c_factors[0] == a_factors[1] * c_factors[1]:\n                # print the the min number of operations to make the two numbers\n                # print(str(a_factors[0]) + \" \" + str(c_factors[0]) + \" \" + str(b))\n                print(int(a_factors[0]))\n        # if the b factors are the same\n        if b_factors == c_factors:\n            if b_factors[0] * a_factors[0] == b_factors[1] * a_factors[1]:\n                # print the the min number of operations to make the two numbers\n                # print(str(a_factors[0]) + \" \" + str(c_factors[0]) + \" \" + str(b))\n                print(int(b_factors[0]))\n        # if the c factors are the same\n        if c_factors == a_factors:\n            if c_factors[0] * b_factors[0] == c_factors[1] * b_factors[1]:\n                # print the the min number of operations to make the two numbers\n                # print(str(a_factors[0]) + \" \" + str(c_factors[0]) + \" \" + str(b))\n                print(int(c_factors[0]))\n        # if a and b are prime numbers\n        # if b and c are prime numbers\n        # if a and c are prime numbers\n        # if a and b are prime numbers\n        # if a and c are prime numbers\n        # if b and c are prime numbers\n\n        # if all numbers are prime numbers\n        # if a and b are prime numbers\n        # if b and c are prime numbers\n        # if a and c are prime numbers\n        # if a and b are prime numbers\n        # if c and b are prime numbers\n        # if a and c are prime numbers\n        # if b and c are prime numbers\n        # if a and b are prime numbers\n        # if a and c are prime numbers\n        # if b and c are prime numbers\n    # if all numbers are prime numbers\n    # if a and b are prime numbers\n    # if b and c are prime numbers\n    # if a and c are prime numbers\n    # if a and b are prime numbers\n    # if c and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n    # if a and b are prime numbers\n    # if a and c are prime numbers\n    # if b and c are prime numbers\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    for i in range(len(arr)):\n        if arr[i] == max(arr):\n            arr[i] = min(arr)\n    return str(max(arr) - min(arr))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split(\"\\n\")\n    a = list(map(int, a.split()))\n    return min(a) - max(a)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return str(min(arr))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lst = stdin.split()[1:]\n    maxi = 0\n    mini = float('inf')\n    for i in range(n):\n        mini = min(mini,lst[i])\n        maxi = max(maxi, lst[i])\n    return maxi - mini"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if len(a) == 1:\n        return 0\n    return max(a) - min(a)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(min(a)-max(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = stdin.split(\"\\n\")[1].strip().split(\" \")\n    infinity = float(\"inf\")\n    if n == 1:\n        return str(infinity)\n    inf_min = infinity\n    inf_max = float(\"-inf\")\n    min_inf = float(\"inf\")\n    max_inf = float(\"-inf\")\n    for i in array:\n        if int(i) > max_inf:\n            max_inf = int(i)\n        elif int(i) < min_inf:\n            min_inf = int(i)\n        if int(i) < inf_min:\n            inf_min = int(i)\n        elif int(i) > inf_max:\n            inf_max = int(i)\n    inf_max = inf_max - min_inf\n    inf_min = inf_min - min_inf\n    if max_inf == inf_max or max_inf == inf_min or min_inf == inf_max or min_inf == inf_min:\n        return str(infinity)\n    else:\n        return str(max(inf_max, inf_min))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    return '%d' % min(a)"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    inf = min(a)\n    n = len(a)\n    l = []\n    for i in range(n):\n        l.append(a[i] - inf)\n    for i in range(n):\n        if min(l) == l[i]:\n            l.pop(i)\n            l.insert(i,inf)\n    return max(l)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    inf = float('inf')\n    min_inf = inf\n    for i in range(1, n):\n        if min_inf > A[i] - A[i - 1]:\n            min_inf = A[i] - A[i - 1]\n    return str(min_inf)\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * (n + 1) for _ in range(m + 1)]\n    result = 0\n    for i in range(1, m + 1):\n        s, d, c = map(int, stdin.split())\n        matrix[i][s] += 1\n        matrix[i][d] -= 1\n        matrix[i][c] += 1\n\n    for j in range(1, n + 1):\n        for i in range(1, m + 1):\n            if matrix[i][j] > 0:\n                result += 1\n    if result == 0:\n        return \"0\"\n    print(result)\n\n\n    for i in range(1, n + 1):\n        if matrix[1][i] > 0:\n            result += 1\n    print(result)\n    return\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days_of_exams, exams_count = map(int, stdin.split())\n    petya_days = list(map(int, stdin.split()))\n    days_of_petya = []\n    max_exams = -1\n    for i in range(1, days_of_exams):\n        if petya_days[i - 1] <= petya_days[i]:\n            days_of_petya.append(i)\n            max_exams += 1\n    if max_exams > exams_count:\n        return f'{-1}'\n    if max_exams == exams_count:\n        return f'{0} {0} {0}'\n\n    def solver(days, c):\n        if len(days) == c:\n            return''.join([str(n) for n in days])\n        # print(days, c, days[-1], days[-2], days[-3])\n        if days[-1] <= days[-2] and days[-2] <= days[-3]:\n            d1 = days[-1]\n            d2 = days[-2]\n            d3 = days[-3]\n            if d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d1 + 1)\n                solver(days, c)\n                days.pop()\n            elif d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d2 + 1)\n                solver(days, c)\n                days.pop()\n            elif d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d3 + 1)\n                solver(days, c)\n                days.pop()\n        elif days[-1] <= days[-2] and days[-2] > days[-3]:\n            d1 = days[-1]\n            d2 = days[-2]\n            d3 = days[-3]\n            if d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d1 + 1)\n                solver(days, c)\n                days.pop()\n            elif d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d2 + 1)\n                solver(days, c)\n                days.pop()\n        else:\n            d1 = days[-1]\n            d2 = days[-2]\n            d3 = days[-3]\n            if d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d1 + 1)\n                solver(days, c)\n                days.pop()\n            elif d1 + 1 == d2 or d2 + 1 == d3:\n                days.append(d2 + 1)\n                solver(days, c)\n                days.pop()\n    return solver(days_of_petya, max_exams)\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    data = []\n    for _ in range(m):\n        day, exam, question = [int(i) for i in stdin.split()]\n        data.append((day, exam, question))\n    data = sorted(data)\n    print(data)\n\n    ans = []\n    for day, exam, question in data:\n        c = 0\n        for i in range(1, day+1):\n            if i == day and c!= 0:\n                break\n            if i <= day:\n                c += 1\n        if c == question:\n            ans.append(c + 1)\n        else:\n            ans.append(0)\n    print(ans)\n    return''.join([str(i) for i in ans])\n\nsolution(input())\n\n'''\n\nimport bisect\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    min_day = 1\n    max_day = n\n    cnt = 0\n    while cnt < m:\n        s_day, d_day, c_day = map(int, stdin.split())\n        if s_day < min_day:\n            min_day = s_day\n        if d_day < min_day:\n            min_day = d_day\n        if d_day > max_day:\n            max_day = d_day\n        if s_day > max_day:\n            max_day = s_day\n        cnt += 1\n    if max_day < min_day:\n        return \"-\"\n    result = []\n    for day in range(min_day, max_day + 1):\n        result.append(m + 1)\n        if day <= s_day:\n            result[day - min_day - 1] = 0\n        if day <= d_day:\n            result[day - min_day - 1] = c_day\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    schedule = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        schedule.append((s, d, c))\n    for d, c in zip(*schedule):\n        if d > n:\n            print(-1)\n            return\n    days = [i for i in range(1, n + 1)]\n    print(days)\n    passes = []\n    presents = []\n    special = []\n    for s, d, c in schedule:\n        if days[d - 1] == s:\n            passes.append((s, d, c))\n        elif days[d - 1] == s - 1:\n            if not presents:\n                presents.append((s, d, c))\n            else:\n                presents.append((s, d, c))\n                passes.append((s, d, c))\n        else:\n            special.append((s, d, c))\n        days.pop(0)\n        days.append(d)\n    presents.extend(passes)\n    presents.sort()\n    print(presents)\n    ans = []\n    for (s, d, c) in presents:\n        ans.append(s)\n        ans.append(d)\n        ans.append(c)\n        if d == n:\n            ans.append(m)\n            return \" \".join(map(str, ans))\n        else:\n            ans.append(0)\n            ans.append(0)\n    ans.append(0)\n    ans.append(0)\n    ans.append(0)\n    print(ans)\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    exams = list()\n    for i in range(1, m+1):\n        exams.append(list(map(int, lines[i].split())))\n    \n    days = range(n)\n    schedule = list()\n    for day in days:\n        total_time = 0\n        rest = 0\n        for exam in exams:\n            if exam[0] <= day <= exam[1]:\n                total_time += 1\n            elif exam[1] < day <= exam[0]:\n                rest += exam[2]\n        \n        if total_time >= 1:\n            schedule.append(total_time)\n        elif rest > 0:\n            schedule.append(1)\n        else:\n            schedule.append(-1)\n    \n    print(*schedule, sep=' ')\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = [(i + 1, j, k) for i, j, k in map(int, stdin.split())]\n    res = []\n\n    day = 0\n    day_list = []\n\n    for exam in exams:\n        day += exam[2]\n        day_list.append(day)\n\n    day_list = sorted(day_list)\n\n    for day_i in day_list:\n        if day_i > day:\n            res.append(0)\n            continue\n\n        day = 0\n        for exam in exams:\n            if exam[0] == day_i:\n                day += exam[2]\n                break\n        res.append(day)\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, stdin.split())))\n\n    # the number of days in one special day\n    special_days = n + m - 1\n\n    for day in range(special_days + 1):\n        # if day is a day of any exam\n        if any(exam[1] == day for exam in exams):\n            # check if there is a rest\n            if any(exam[0] == day for exam in exams):\n                return '-1'\n            # if there is a rest, then schedule is impossible\n            else:\n                return '-1'\n        else:\n            # check if there is a rest\n            if any(exam[2] == day for exam in exams):\n                return '-1'\n            # if there is a rest, then schedule is impossible\n            else:\n                return '-1'\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    schedule = []\n    for _ in range(m):\n        schedule.append(list(map(int, stdin.split())))\n\n    days = set()\n    for day, exam in schedule:\n        days.add(day)\n\n    days = sorted(days)\n\n    schedule = [(day, exam) for day, exam in schedule]\n    schedule = sorted(schedule)\n\n    print(len(days), schedule)\n\n    # if len(days) == 0:\n    #     print(0, 0, 0, 0)\n    #     return\n\n    day = 1\n    i = 1\n    while i < len(schedule):\n        if schedule[i][0] - schedule[i - 1][0] >= 1:\n            day += 1\n        elif schedule[i][0] - schedule[i - 1][0] < 1:\n            if schedule[i - 1][1] == 0:\n                schedule[i - 1][1] = 1\n            elif schedule[i - 1][1] == 1:\n                schedule[i - 1][1] = 0\n        i += 1\n\n    print(day, *[0] * (n - day), *schedule)\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    day = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4}\n    ans = []\n    for i in range(1, n + 1):\n        if day[i] == 0:\n            continue\n        time = day[i]\n        d = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4}\n        r = 0\n        for j in range(m):\n            if d[j + 1] == time:\n                r += 1\n        ans.append(r)\n    if len(ans) == 1:\n        return str(ans[0])\n    return''.join(map(str, ans))\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def factors(x):\n        res = []\n        for i in range(1, x + 1):\n            if x % i == 0:\n                res.append(i)\n        return res\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    n = factors(n)\n    m = factors(m)\n    for i in range(len(n)):\n        if n[i] in m:\n            return str(len(n) - i - 1)\n    return \"-\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n > m:\n        return -1\n    moves = {n: 1, 2: 2, 3: 4}\n    for i in range(1, m):\n        if n not in moves:\n            return -1\n        n *= 2 if n % 2 else 3\n        moves[n] = moves[n//2] if n in moves else moves[n] + moves[n//3]\n    return moves[m]\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return '0'\n    if n * 2 == m:\n        return str(1)\n    if n * 3 == m:\n        return str(1)\n    if n * 2 == m * 3:\n        return str(2)\n    if n * 3 == m * 2:\n        return str(2)\n    return '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''120 51840\n   ... 42 42\n   ... 48 72\n   ... ''')\n    '7'\n    >>> solution('''42 42\n   ... 120 51840\n   ... 48 72\n   ... ''')\n    '0'\n    >>> solution('''48 72\n   ... 120 51840\n   ... 42 42\n   ... ''')\n    '-1'\n    \"\"\"\n    n, m = map(int, stdin.strip().split())\n    if n * 2 == m or n * 3 == m:\n        return \"0\"\n    if n * 2!= m and n * 3!= m:\n        return -1\n    ans = 0\n    while n!= m:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        else:\n            return -1\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(0)\n    count = 0\n    while n!= m:\n        count += 1\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n *= 3\n    return str(count)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    return str(abs(n - m) - 1)"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def can_transform(n, m):\n        if n == 0:\n            return True\n        if n < 0 or m < 0:\n            return False\n        if n == m:\n            return True\n        if n % 2 == 0:\n            return can_transform(n // 2, m)\n        if n % 3 == 0:\n            return can_transform(n // 3, m)\n        return False\n\n    n, m = map(int, stdin.split())\n    if not can_transform(n, m):\n        return -1\n    return str(n) + \" \" + str(m)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_sub(arr, n):\n        if len(arr) < 2:\n            return arr\n        else:\n            new_arr = []\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    new_arr.append(arr[i]*2)\n                    if n < (arr[i] * 2):\n                        return new_arr\n                else:\n                    new_arr.append(arr[i] * 3)\n                    if n < (arr[i] * 3):\n                        return new_arr\n            new_arr.append(arr[-1])\n            if n < (arr[-1] * 3):\n                return new_arr\n            else:\n                return new_arr\n\n\n    arr = list(map(int, stdin.split(\" \")))\n    if len(arr) <= 2:\n        return str(-1)\n    return str(get_sub(arr, arr[-1]))"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return \"0\"\n    if n > m:\n        if m % 2 == 1:\n            return \"-1\"\n        else:\n            return \"1\"\n    else:\n        if n % 3 == 1:\n            return \"1\"\n        else:\n            return \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    # The number of moves required to transform $n$ to $m$\n    # if $m$ is a factor of $n$\n    ans = 0\n    while n!= m:\n        if not m % 2 and not n % 3:\n            m, n = m // 2, n // 3\n            ans += 2\n        elif not m % 3 and not n % 2:\n            m, n = m // 3, n // 2\n            ans += 1\n        else:\n            break\n    return str(ans)\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.split()[1]\n    return solution_recursive(n, string, k)\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n\n    if n == 1:\n        if k == 1:\n            return t\n        else:\n            return ''.join(['a'] * k)\n\n    # Longest substring with k occurrences of t.\n    m = 0\n    for i in range(n - k + 1):\n        if len(t[i:i + k]) == k:\n            m = max(m, len(t[i:i + k]))\n\n    if m == 0:\n        return ''.join(['a'] * k)\n\n    # kth smallest substring.\n    if n - m == 1:\n        return ''.join(sorted(t))\n\n    # Longest substring with more than k occurrences of t.\n    ans = 0\n    for i in range(n - k + 1):\n        if len(t[i:i + k]) > m:\n            ans = max(ans, len(t[i:i + k]))\n    return t[:ans]\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, k = map(int, stdin.split())\n    t = stdin\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            s = t[j: j + i]\n            if s == t and len(s) == k:\n                return s\n    return \"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    i = 0\n    while True:\n        if i + n - 1 < len(s):\n            if s[i : i + n] == s[i : i + n][::-1]:\n                return s[i : i + n]\n        if i + n - 2 >= len(s):\n            break\n        i += 1\n    if i < len(s):\n        if s[i : i + n - 1] == s[i : i + n - 1][::-1]:\n            return s[i : i + n - 1] + s[i + n - 1] + s[i + n]\n    if i > 0:\n        if s[i - 1 : i + n - 2] == s[i - 1 : i + n - 2][::-1]:\n            return s[i - 1 : i + n - 2] + s[i] + s[i + n - 1] + s[i + n]\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            s = t[i:j]\n            if s == t and len(s) == n:\n                return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    assert n >= k, f'n {n} >= k {k}'\n    if n == k:\n        return t\n    else:\n        lo, hi = 0, n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if check(t, mid):\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return ''.join([t[i] for i in range(lo, lo + n - 1)])\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    t = t.lower()\n    if k < n:\n        return \"No solution.\"\n    l = 0\n    r = n - 1\n    while l < r:\n        s = t[l:r]\n        if len(s) == k:\n            if s == t:\n                return s\n            else:\n                l += 1\n        else:\n            r -= 1\n    return \"No solution.\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    t = stdin\n    s = ''\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if t == t[i:j+1]:\n                count += 1\n                if count == k:\n                    s = s + t[i:j+1] +''\n    return s.strip()\n\n\nprint(solution(input()))"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    substrs = set()\n    res = \"\"\n    for i in range(n):\n        for j in range(i, n):\n            substr = t[i:j + 1]\n            if substr == t[i:j + 1]:\n                substrs.add(substr)\n    for substr in substrs:\n        if substr == substr[::-1]:\n            return substr\n    return res\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    t = stdin.strip()\n\n    def _suffix_pattern_matching(s, t):\n        seen = set()\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i]!= t[j]:\n                return False\n            if s[i] in seen:\n                return False\n            seen.add(s[i])\n            i += 1\n            j += 1\n        return True\n\n    # left, right = 0, len(t) - 1\n    # while left <= right:\n    #     mid = (left + right) // 2\n    #     if _suffix_pattern_matching(t[left: mid + 1], t):\n    #         right = mid - 1\n    #     else:\n    #         left = mid + 1\n    # return t[left]\n    return t[:k] + t[n - k + 1:]\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    sum = 0\n    for i in range(n):\n        sum += int(stdin.split()[i])\n    for i in range(n):\n        for j in range(n):\n            if int(stdin.split()[i]) + int(stdin.split()[j]) == sum - int(stdin.split()[i]) - int(stdin.split()[j]):\n                if j in res:\n                    continue\n                res.append(j)\n    if len(res) == 0:\n        return str(0)\n    return str(len(res)) +'' +''.join(str(i) for i in res)\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    k = 0\n    for i in range(n):\n        removed = a.pop(i)\n        if sum(a) == removed:\n            k += 1\n    if k == 0:\n        return '0'\n    return str(k) +'' +''.join(map(str, range(k, n)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    j = 0\n    for i in range(n):\n        j += 1\n        if j == n:\n            break\n        j += i\n        if i == a[i]:\n            j += 1\n        if j == n:\n            k = 1\n            break\n    if k == 1:\n        return \"0\"\n    else:\n        k = 0\n        for i in range(len(a)):\n            j = i + 1\n            if j == len(a):\n                break\n            if sum(a[:j]) == sum(a[i:j]):\n                k += 1\n        return str(k)"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    good_indices = []\n    for i in range(len(a)):\n        if sum(a) == sum(a[:i] + a[i + 1:]):\n            good_indices.append(i)\n    return len(good_indices)\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    c = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(a[:i]+a[j+1:]) == sum(a)-a[i]+a[j]:\n                c += 1\n                print(i, j)\n                a.pop(i)\n                a.pop(j-1)\n                break\n    return str(c)\nsolution(input())"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    count = 0\n    for i, e in enumerate(a):\n        if i == 0:\n            if a[i] + a[i + 1] == e:\n                count += 1\n        else:\n            if a[i - 1] == e:\n                continue\n            elif a[i] + a[i + 1] == e:\n                count += 1\n    return str(count)\n\nsolution(\"5 2 5 1 2 2\")\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    c = []\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            if j == i:\n                continue\n            sum += a[j]\n        if sum == a[i]:\n            c.append(i)\n            k += 1\n    if k == 0:\n        return 0\n    else:\n        for i in range(k):\n            print(c[i], end=' ')\n        return k\n\nsolution(input())\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good_indices = []\n    s = 0\n    for i in range(len(a)):\n        s += a[i]\n        if s == n:\n            good_indices.append(i + 1)\n            s = 0\n    if s!= 0:\n        good_indices.append(s)\n    if len(good_indices) == 0:\n        return 0\n    return''.join(map(str, good_indices))"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    ans = 0\n    res = []\n    for i, a in enumerate(arr):\n        sum_a = sum(arr[:i] + arr[i+1:])\n        if a!= sum_a and a!= sum_a + a and a!= sum_a - a:\n            ans += 1\n            res.append(i)\n    if ans:\n        return str(ans) + \" \" + \" \".join(map(str, res))\n    else:\n        return str(0)\n\nsolution(\"2 5 1 2 2\")\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n    def nice_indexes(arr):\n        taken = set()\n        result = []\n        for idx, a in enumerate(arr):\n            if a == 0:\n                continue\n            taken.add(idx)\n            for x in range(idx + 1, len(arr)):\n                if x not in taken:\n                    if arr[x] == a:\n                        taken.add(x)\n                        if len(taken) == n:\n                            result.append(idx)\n                        break\n                    elif arr[x] == a + arr[x-1]:\n                        taken.add(x)\n                        if len(taken) == n:\n                            result.append(idx)\n                        break\n        return result\n\n    def nice_idx(arr, nice):\n        res = 0\n        for i in range(len(arr)):\n            if i not in nice:\n                res += arr[i]\n        return res\n    return nice_idx(arr, nice_indexes(arr))"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = sorted(s, key=lambda x: len(x))\n    if len(s) == 1:\n        if k == 1:\n            return 0\n        else:\n            return -1\n    if len(s) == 2 and k == 1:\n        return 0\n    if len(s) == 2:\n        return 1 + (len(s) - 1)\n\n    p = 1\n    while p < k:\n        i = 0\n        while i < len(s):\n            if i == 0:\n                if len(s) == 2:\n                    return 1 + (len(s) - 1)\n                p += 1\n            elif i < (len(s) - 1):\n                if s[i] == s[i + 1]:\n                    p += 1\n                else:\n                    break\n            else:\n                break\n            i += 1\n\n    if p == k:\n        p = -1\n    else:\n        p = 0\n\n    if p == -1:\n        return -1\n    else:\n        return sum(map(lambda x: 1 + (len(x) - 1), s)) + p\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n, k = map(int, stdin.split())\n    n += 1\n    subseq = []\n    cost = 0\n    while len(s) > 0:\n        c = s[:k]\n        subseq.append(c)\n        s = s[k:]\n    subseq.sort(key=len)\n    for i in range(len(subseq)):\n        s = s.replace(subseq[i], \"\")\n        cost += len(subseq[i])\n    return str(cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, n, k = stdin\n    s = list(s)\n    size = len(s)\n    if size < k:\n        return -1\n    if size == k:\n        return sum(n-i for i in range(size))\n    if size == k+1:\n        for i in range(size-1):\n            if s[i]!= s[i+1]:\n                return -1\n        return sum(n-i for i in range(size-1))\n    result = 1e10\n    for i in range(k, size):\n        current = s[:i]\n        left = s[i:]\n        if len(left) == k:\n            result = min(result, sum(n-i for i in range(size)) + sum(n-i for i in range(k)))\n        else:\n            current = ''.join(sorted(current))\n            result = min(result, sum(n-i for i in range(size)) + sum(n-i for i in range(k)) + get_cost(current, left))\n    return result\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n, k = list(map(int, stdin.split()))\n    s = sorted(s)\n    if len(s) < k:\n        return -1\n\n    cost = 0\n    for i in range(len(s)):\n        if i == 0:\n            cost += k - (len(s[i:]) + 1)\n        elif i < len(s):\n            cost += k - len(s[:i])\n    return cost\n\nsolution(\n\"\"\"\n5 6\naaaaa\n\n\"\"\"\n)\n\nsolution(\n\"\"\"\n5 7\naaaaa\n\n\"\"\"\n)\n\nsolution(\n\"\"\"\n10 100\najihiushda\n\n\"\"\"\n)"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 6\n   ... aaaaa\n   ... ''')\n    '4'\n    >>> solution('''5 7\n   ... aaaaa\n   ... ''')\n    '-1'\n    >>> solution('''10 100\n   ... ajihiushda\n   ... ''')\n    '233'\n    '''\n    n, k = map(int, stdin.split())\n    a = stdin.replace('\\n', '')\n    if n == 1:\n        return '-1'\n    if k == 1:\n        return str(n)\n    if k == n:\n        return str(n)\n    else:\n        subsequence = []\n        for i in range(k):\n            subsequence.append(a[i])\n        for i in range(k, n):\n            if a[i] in subsequence:\n                subsequence.remove(a[i])\n                if len(subsequence) == 0:\n                    return '-1'\n            else:\n                subsequence.append(a[i])\n        return str(n - len(subsequence) + 1)\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    if n <= 0 or k <= 0 or k > 10**12:\n        return -1\n\n    S = list(stdin)\n    for i in range(len(S)):\n        for j in range(i + 1, len(S)):\n            if j - i + 1 <= k:\n                S[i:j + 1] = sorted(S[i:j + 1])\n                S.pop(j + 1)\n                break\n\n    return str(len(S))\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    s = stdin\n    if N >= 10**12 or K > 10**12:\n        return '-1'\n    if N == K:\n        return '0'\n    if N == 1 and K == 1:\n        return '0'\n    if N == 1 and K > 1:\n        return '-1'\n    if N == K:\n        return '0'\n    if N > K:\n        return '-1'\n    freq = {}\n    for i in range(N):\n        if s[i] in freq:\n            freq[s[i]] += 1\n        else:\n            freq[s[i]] = 1\n    sum = 0\n    for i in range(K):\n        if s[i] not in freq:\n            return '-1'\n        sum += freq[s[i]]\n        freq[s[i]] -= 1\n    return str(sum)"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin\n    if len(s) < n or len(set(s)) < k:\n        return -1\n    res = float('inf')\n    for i in range(1, len(s) - k + 1):\n        res = min(res, (i + 1 + sum(x == s[i + i] for x in set(s[i:i + k]))) + i)\n    return res\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    if k > len(stdin):\n        return -1\n    s = stdin\n    if k <= len(s) and len(set(s)) == len(s):\n        return n * k - len(s)\n    return n * k\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # ugly_s = list(stdin)\n    # ugly_s = map(lambda x: x.replace(\"a\", \"\") if x!= \"a\" else x, ugly_s)\n    # ugly_s = list(itertools.chain.from_iterable(\n    #     map(lambda x: x.replace(\"a\", \"\"), ugly_s)))\n    # ugly_s = list(map(lambda x: x.replace(\"a\", \"\"), ugly_s))\n\n    def is_subseq(ugly_s, ugly_t):\n        i, j = 0, 0\n        while i < len(ugly_s) and j < len(ugly_t):\n            if ugly_s[i] == ugly_t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return j == len(ugly_t)\n\n    def ugly_cost(ugly_s):\n        return sum(map(lambda x: (len(x) - 1) * x, ugly_s))\n\n    ugly_s = list(map(lambda x: list(x), stdin))\n    ugly_s = list(filter(lambda x: len(x) >= k, ugly_s))\n\n    if len(ugly_s)!= 0:\n        ugly_cost_s = map(lambda x: ugly_cost(x), ugly_s)\n        ugly_cost_s = sorted(ugly_cost_s)\n        min_cost = ugly_cost_s[k - 1]\n        for i in range(len(ugly_cost_s)):\n            if ugly_cost_s[i] == min_cost:\n                if is_subseq(ugly_s[i], stdin):\n                    return min_cost\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    for i in range(n):\n        if D == len(graph[i]):\n            print(\"YES\")\n            for j in range(n):\n                print(graph[j][i], end=\" \")\n            print()\n            return\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for i in range(m):\n        v, u = list(map(int, stdin.split()))\n        edges[v-1].append(u-1)\n        edges[u-1].append(v-1)\n    for i in range(n):\n        if len(edges[i]) == 0:\n            return 'NO'\n    for i in range(n):\n        d = sum([len(edges[j]) for j in range(n)])\n        if d == d:\n            return 'YES'\n    return 'NO'\n\n\n\n'''\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        edges[x].append(y)\n        edges[y].append(x)\n    return \"YES\" if n == d else \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = [(i + 1, j + 1) for i in range(n) for j in range(i + 1, n)]\n    ans = \"NO\"\n    for x, y in a:\n        if x + y == n:\n            ans = \"YES\"\n            break\n    if ans == \"YES\":\n        a = sorted(((v, u) for v, u in a), key=lambda x: x[0])\n        print(*a[:d], sep=' ')\n    return ans\nsolution(input())\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def make_edges(graph):\n        n, m, d = len(graph), len(graph[0]), 0\n        graph.sort(key=lambda x: x[0])\n        for edge in graph:\n            if d < n and edge[0] == d:\n                d = edge[1]\n                if d < n:\n                    yield d, n\n            else:\n                d = edge[1]\n                if d < n:\n                    yield d, n\n                    d = edge[0]\n        return\n\n    def find_spanning(edges, n, D):\n        graph = [[] for _ in range(n)]\n        for e in edges:\n            graph[e[0]].append(e[1])\n            graph[e[1]].append(e[0])\n\n        spanning = {}\n        spanning[1] = True\n        spanning[n] = True\n        for e in edges:\n            if spanning[e[0]] and spanning[e[1]]:\n                continue\n            path = find_path(graph, e[0], e[1])\n            if len(path)!= D:\n                continue\n            spanning[e[0]] = True\n            spanning[e[1]] = True\n            spanning[n] = False\n\n        return spanning\n\n    def find_path(graph, v, u):\n        # print(\"find_path:\", v, u)\n        q = deque()\n        q.append(v)\n        spanning = {}\n        spanning[v] = True\n        path = []\n        while q:\n            v = q.popleft()\n            # print(\"v:\", v, \"q:\", q)\n            if v == u:\n                break\n            for node in graph[v]:\n                if node not in spanning:\n                    spanning[node] = True\n                    q.append(node)\n                    path.append(node)\n        return path\n\n    edges = make_edges(list(map(lambda x: list(map(int, x.split())), stdin.split(\"\\n\")))))\n    # print(edges)\n    spanning = find_spanning(edges, n, D)\n    print(\"YES\" if spanning[1] else \"NO\")\n    return \"YES\" if spanning[1] else \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, d] = stdin.split()\n    n = int(n)\n    m = int(m)\n    d = int(d)\n    if n <= 1 or d < n:\n        return 'NO'\n    edges = [[] for i in range(n)]\n    for i in range(m):\n        v, u = stdin.split()\n        v = int(v)\n        u = int(u)\n        edges[v].append(u)\n    for i in range(n):\n        if len(edges[i]) < d:\n            return 'NO'\n    ans = []\n    for i in range(n):\n        for u in edges[i]:\n            for j in range(n):\n                if u == j:\n                    continue\n                if j in ans or (u, j) in ans:\n                    break\n            else:\n                ans.append(i)\n    return 'YES'"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges[v].append(u)\n        edges[u].append(v)\n    for e in edges:\n        e.sort()\n    for v in range(1, n):\n        if len(edges[v])!= d:\n            return \"NO\"\n    for i in range(n):\n        if len(edges[i])!= d:\n            return \"NO\"\n    for e in edges:\n        if e!= e[::-1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each line, represent the string \"YES\" or \"NO\", then add the number of edges between 1 and D-1.\n    For each edge, add the two nodes, from which it is built.\n    \"\"\"\n    n, m, d = map(int, stdin.split())\n    graph = Graph(n)\n    for _ in range(m):\n        graph.add_edge(*map(int, stdin.split()))\n    return \"YES\" if d == graph.degree(1) else \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = list(map(lambda x: x.split(), stdin.split('\\n')))\n    return 'YES' if solve(n, m, D, edges) else 'NO'\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h1, m1 = int(h1), int(m1)\n    h2, m2 = stdin.split(':')\n    h2, m2 = int(h2), int(m2)\n\n    return f'{int(h1 + ((h2 - h1) // 2))}:{int(m1 + ((m2 - m1) // 2))}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2, m2 = stdin.split(':')\n    h2 = int(h2)\n    m2 = int(m2)\n    mid_time = (h1 * 60) + m1\n    mid_time += (h2 * 60) + m2\n    print(mid_time // 2)\n    print(mid_time % 2)\n    return mid_time // 2, mid_time % 2\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(' ')\n    h1 = int(h1)\n    m1 = int(m1)\n\n    h2, m2 = stdin.split(' ')\n    h2 = int(h2)\n    m2 = int(m2)\n\n    delta = m2 - m1\n    if m2 % 2 == 0:\n        midpoint = h1 + (delta // 2)\n    else:\n        midpoint = h1 + (delta // 2) + 1\n    return f\"{midpoint // 60}:{midpoint % 60:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '{}:{}'.format(*stdin.strip().split(':'))"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    midpoint = (h1 * 60 + m1) // 2\n    midpoint2 = (h2 * 60 + m2) // 2\n\n    if midpoint2 % 2!= midpoint % 2:\n        print(f\"{midpoint + 1}:{midpoint}\")\n    else:\n        print(f\"{midpoint}:{midpoint + 1}\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split())\n    h_2, m_2 = map(int, stdin.split())\n    mid_time_1 = h_1 * 60 + m_1\n    mid_time_2 = h_2 * 60 + m_2\n    if mid_time_1 > mid_time_2:\n        mid_time_1, mid_time_2 = mid_time_2, mid_time_1\n    mid_time = mid_time_2 - mid_time_1\n    mid_time_1, mid_time_2 = \"{:02}:{:02}\".format(mid_time_1, mid_time_2)\n    return mid_time_1 + \":\" + mid_time_2\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = stdin.split()\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n\n    h_diff = h2 - h1\n    if h_diff % 2 == 0:\n        mid_time = int(h1 + h_diff / 2)\n    else:\n        mid_time = int(h1 + (h_diff - 1) / 2)\n    m_diff = m2 - m1\n    if m_diff % 2 == 0:\n        return str(mid_time) + ':' + str(m1 + m_diff / 2)\n    else:\n        return str(mid_time) + ':' + str(m1 + m_diff / 2 + 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(i) for i in stdin.split(':')]\n    h2, m2 = [int(i) for i in stdin.split(':')]\n    m = (m1 + m2) % 2\n    if m:\n        h = (h1 + h2) / 2\n        m = 60 - m\n        h2 = h2 - 1\n    else:\n        h = (h1 + h2) / 2\n    return '{}:{}'.format(int(h), int(m))\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = list(map(int, stdin.split()))\n    h2, m2 = list(map(int, stdin.split()))\n\n    diff = h2 - h1\n\n    if diff % 2!= 0:\n        m1 += 1\n        if m1 >= 60:\n            m1 -= 60\n            h1 += 1\n\n    print(\"{0:02d}:{1:02d}\".format(h1, m1))\n    print(\"{0:02d}:{1:02d}\".format(h2, m2))\n    return \"{0:02d}:{1:02d}\".format(h1, m1)\n\n\nsolution(\n\"\"\"10:00\n11:00\"\"\"\n)\n\nsolution(\n\"\"\"11:10\n11:12\"\"\"\n)\n\nsolution(\n\"\"\"01:02\n03:02\"\"\"\n)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    h1 = int(stdin[0].split(\":\")[0])\n    m1 = int(stdin[0].split(\":\")[1])\n    h2 = int(stdin[1].split(\":\")[0])\n    m2 = int(stdin[1].split(\":\")[1])\n    total_minutes = ((h2 * 60) + m2) - ((h1 * 60) + m1)\n    mid_point = (total_minutes // 2)\n    h3 = (mid_point // 60)\n    m3 = mid_point % 60\n    return f\"{h3:02}:{m3:02}\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return result"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return a"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            binary = binary[i:] + '0' + '1' + binary[:i]\n            break\n    return str(int(binary, 2))\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(chr(int(b) + ord('a')) for b in stdin.split() if b.isdigit())\n\nprint(solution('1')) # Output: a\nprint(solution('2')) # Output: b\nprint(solution('27')) # Output: c\nprint(solution('42')) # Output: d\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return str(sum(i for i in range(1, max(int(stdin), 1) + 1) if i % 7 == 0 or i % 5 == 0))\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    print(a)\n    return a"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    # Write your code here\n    return str(pow(2,a))\n\nstdin = \"3\"\nprint(solution(stdin))\n\nstdin = \"27\"\nprint(solution(stdin))\n\nstdin = \"42\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    segments = [list(map(int, stdin.split(\"\\n\")[1].split())) for i in range(n)]\n\n    segments.sort(key=lambda x: x[0])\n    segments = segments[1:]\n\n    segments_to_remove = []\n\n    for i in range(len(segments) - 1):\n        if segments[i][1] > segments[i + 1][0]:\n            segments_to_remove.append(i + 1)\n\n    segments = [i for j, i in enumerate(segments) if j not in segments_to_remove]\n\n    intersection = []\n\n    for i in range(len(segments) - 1):\n        if segments[i][1] > segments[i + 1][0]:\n            intersection.append([segments[i][0], segments[i + 1][1]])\n\n    if len(intersection) > 0:\n        return sum([max(i[1] - i[0] for i in intersection)] + [0])\n    else:\n        return 0\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    segments = []\n    for _ in range(n):\n        segments.append(stdin.pop(0).split())\n    for i in range(len(segments)):\n        segments[i] = sorted(segments[i])\n    res = []\n    for i in range(len(segments) - 1):\n        if segments[i][0] == segments[i + 1][0]:\n            segments[i] = segments[i] + segments[i + 1]\n            segments.pop(i + 1)\n            break\n    for i in range(len(segments) - 1):\n        if segments[i][1] == segments[i + 1][1]:\n            segments[i] = segments[i] + segments[i + 1]\n            segments.pop(i + 1)\n            break\n    for segment in segments:\n        res.append(int(max(segment) - min(segment)))\n    return str(max(res))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each input line, first find the length of the segments\n    then find the longest intersection\n    \"\"\"\n    n = int(stdin.split()[0])\n    seg = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    len_seg = [(seg[i], seg[i + 1]) for i in range(n - 1)]\n    seg = [(seg[i], seg[i + 1]) for i in range(n)]\n\n    def dfs(seg_len):\n        if not seg_len:\n            return 0\n        seg_len = sorted(seg_len)\n        seg_len.sort(key=lambda x: x[0])\n        seg_len = list(zip(*seg_len))\n        # print(seg_len)\n        min_len = float('inf')\n        # print(seg_len)\n        for i in range(1, len(seg_len)):\n            if i == 1:\n                if seg_len[i][0] < seg_len[i - 1][1]:\n                    continue\n                else:\n                    min_len = min(min_len, seg_len[i - 1][1] - seg_len[i][0] + 1)\n            else:\n                if seg_len[i][0] < seg_len[i - 1][1]:\n                    continue\n                elif seg_len[i][1] < seg_len[i - 1][0]:\n                    min_len = min(min_len, seg_len[i][0] - seg_len[i - 1][1] + 1)\n                else:\n                    min_len = min(min_len, seg_len[i][1] - seg_len[i - 1][0] + 1)\n        return min_len\n\n    intersection = dfs(len_seg)\n    # print(intersection)\n    if not intersection:\n        return str(intersection)\n    return str(intersection - 1)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.split('\\n')\n    lines = [list(map(int, line.split())) for line in lines[:n]]\n    lines = sorted(lines, key=lambda x: x[1])\n    print(lines)\n    prev = lines.pop(0)\n    result = 0\n    print(prev)\n    while lines:\n        current = lines.pop(0)\n        print(current)\n        intersect = min(prev[1], current[0]) - max(prev[0], current[1])\n        if intersect > 0:\n            result = max(intersect, result)\n        prev = current\n    return str(result)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([str(i) for i in solve(stdin.splitlines())])\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = [int(i) for i in stdin.split()]\n    segments = []\n    for i in range(1, len(a)):\n        segments.append([a[i - 1], a[i]])\n    segments.sort(key=lambda x: (x[0], x[1]))\n    # print(segments)\n\n    def check_segment(segment):\n        for s in segments:\n            if segment[0] > s[1]:\n                return False\n            if segment[1] < s[0]:\n                return False\n        return True\n\n    # print(check_segment([3, 3]))\n    # print(check_segment([1, 3]))\n\n    def check_segment_intersection(segment):\n        intersection = []\n        if segment[0] > segment[1]:\n            return False, intersection\n        for s in segments:\n            if segment[0] > s[1]:\n                continue\n            if segment[1] < s[0]:\n                continue\n            if not check_segment(s):\n                continue\n            intersection.append(s)\n        return True, intersection\n\n    # print(check_segment_intersection([3, 3]))\n    # print(check_segment_intersection([1, 3]))\n\n    def max_length_segment(segments):\n        segment_lengths = []\n        for segment in segments:\n            intersection, lengths = check_segment_intersection(segment)\n            # print(segment, intersection, lengths)\n            if not intersection:\n                segment_lengths.append(0)\n            else:\n                segment_lengths.append(max(lengths))\n        return max(segment_lengths)\n\n    # print(max_length_segment([[1, 2], [2, 3], [3, 4]]))\n    # print(max_length_segment([[1, 3], [2, 6], [0, 4]]))\n    # print(max_length_segment([[1, 5], [2, 6], [0, 4]]))\n    # print(max_length_segment([[3, 3], [1, 3], [2, 6]]))\n    # print(max_length_segment([[3, 3], [1, 3], [2, 6]]))\n    # print(max_length_segment([[3, 3], [1, 3], [2, 6]]))\n\n    # print(max_length_segment([[3, 3], [1, 3], [2, 6]]))\n    # print(max_length_segment([[3, 3], [1, 3], [2, 6]]))\n    # print(max_length_segment([[3, 3], [1, 3], [2, 6]]))\n\n    def remove_segment(segments, i):\n        if i == len(segments) - 1:\n            return segments[:-1]\n        removing = segments[i:]\n        new_segments = segments[:i] + segments[i + 1:]\n        return new_segments\n\n    # print(remove_segment([[1, 3], [2, 6], [0, 4]], 1))\n    # print(remove_segment([[1, 3], [2, 6], [0, 4]], 2))\n    # print(remove_segment([[1, 3], [2, 6], [0, 4]], 3))\n    # print(remove_segment([[3, 3], [1, 3], [2, 6]], 1))\n    # print(remove_segment([[3, 3], [1, 3], [2, 6]], 2))\n    # print(remove_segment([[3, 3], [1, 3], [2, 6]], 3))\n\n    def remove_segment_intersection(segments, i):\n        intersection, lengths = check_segment_intersection(segments[i])\n        if not intersection:\n            return segments[:i] + segments[i + 1:]\n        else:\n            removing = intersection\n            new_segments = segments[:i] + segments[i + 1:]\n            return new_segments\n\n    # print(remove_segment_intersection([[1, 3], [2, 6], [0, 4]], 1))\n    # print(remove_segment_intersection([[1, 3], [2, 6], [0, 4]], 2))\n    # print(remove_segment_intersection([[1, 3], [2, 6], [0, 4]], 3))\n    # print(remove_segment_intersection([[3, 3], [1, 3], [2, 6]], 1))\n    # print(remove_segment_intersection([[3, 3], [1, 3], [2, 6]], 2))\n    # print(remove_segment_intersection([[3, 3], [1, 3], [2, 6]], 3))\n\n    def max_length_after_removal(segments):\n        new_segments = []\n        for i, segment in enumerate(segments):\n            new_segments.append(remove_segment_intersection(segments, i))\n        max_length = max_length_segment(new_segments)\n        return max_length\n\n    # print(max_length_after_removal([[1, 3], [2, 6], [0, 4]]))\n    # print(max_length_after_removal([[3, 3], ["
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    total_length = 0\n    intersection = []\n    for l, r in segments:\n        if not intersection:\n            intersection.append((l, r))\n        else:\n            if l > intersection[-1][1]:\n                intersection.append((l, r))\n            else:\n                for i, (il, ir) in enumerate(intersection):\n                    if ir < l:\n                        intersection[i] = (il, r)\n                        break\n                intersection = intersection[:i + 1] + [(l, r)] + intersection[i + 1:]\n    if intersection:\n        total_length = max(map(len, intersection))\n    print(total_length)\n\nsolution(input())\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    *A, = map(int, stdin.split()[1:])\n    # print(N)\n    # print(A)\n\n    l = 0\n    r = 0\n    for i in range(N - 1):\n        if A[i] <= A[i + 1]:\n            l = A[i + 1]\n            break\n    for i in range(N - 1, 0, -1):\n        if A[i - 1] <= A[i]:\n            r = A[i - 1]\n            break\n\n    res = max(l - A[0], r - A[-1])\n    for i in range(N - 1):\n        if A[i] == A[i + 1]:\n            continue\n        for j in range(i + 1, N - 1):\n            if A[j] == A[j + 1]:\n                continue\n            if A[i] < A[j]:\n                res = max(res, max(A[i], A[j + 1]) - min(A[i], A[j]))\n\n    return str(res)\n\n\nprint(solution(\"\"\"\n3\n2 6\n0 4\n3 3\n\n\"\"\"), \"1\")\nprint(solution(\"\"\"\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\n\"\"\"), \"2\")\nprint(solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\n\"\"\"), \"7\")\nprint(solution(\"\"\"\n4\n4 5\n1 2\n9 20\n\n\"\"\"), \"0\")\nprint(solution(\"\"\"\n2\n3 10\n1 5\n\n\"\"\"), \"1\")\nprint(solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\n\"\"\"), \"2\")\nprint(solution(\"\"\"\n4\n3 10\n1 5\n\n\"\"\"), \"0\")\nprint(solution(\"\"\"\n2\n3 10\n1 5\n\n\"\"\"), \"0\")\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    wall = sorted(list(map(int, stdin.split()[1:])))\n    answer = \"YES\" if all(wall[i] == wall[i+1] for i in range(n-1)) and \\\n            all(wall[i] <= wall[i+1] for i in range(n-1)) and \\\n            max(wall[i] for i in range(n)) > min(wall[i] for i in range(n)) else \"NO\"\n    return answer\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a.sort()\n    if n == 1:\n        return 'YES'\n    if a[0] == a[1]:\n        return 'NO'\n    ans = ''\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            return 'NO'\n        else:\n            ans += 'YES' if a[i - 1] == a[i] else 'NO'\n    return ans\n\nstdin = \"3\\n4 5 3\"\nprint(solution(stdin))\n\n\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    heights = a[:n]\n    while len(heights) < 2 * n:\n        heights.append(0)\n\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    wall = list(map(int, stdin.split()))\n    res = \"YES\"\n    # start from index 2 to n - 2\n    for i in range(2, n - 2):\n        if wall[i - 2] == wall[i] and wall[i + 2] == wall[i]:\n            continue\n        elif wall[i - 2] == wall[i] or wall[i + 2] == wall[i]:\n            continue\n        else:\n            res = \"NO\"\n            break\n    return res"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    count = 1\n    cur = a[0]\n\n    for i in range(1, n):\n        if cur == a[i]:\n            count += 1\n        else:\n            if cur > a[i]:\n                count = max(count, 2)\n            else:\n                count = max(count, 2 * (a[i] - cur) + 1)\n        cur = a[i]\n    return \"YES\" if count == n else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    a: list = list(map(int, stdin.strip().split(' ')))\n    heights: list = []\n    for i in range(n):\n        heights.append(a[i])\n    for i in range(n-1):\n        if heights[i] == heights[i+1]:\n            if i > 0:\n                if heights[i] == heights[i-1]:\n                    heights[i] += 1\n                    heights[i+1] += 1\n        elif heights[i] > heights[i+1]:\n            return 'NO'\n    if (len(heights)!= n or (len(heights) == n and heights[0]!= 0)) or (len(heights)!= n and heights[n-1]!= 0):\n        return 'NO'\n    else:\n        return 'YES'\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    parts = list(map(int, stdin.split()))\n    l = list(sorted(parts))\n    return \"YES\" if l == parts else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1]))\n    ans = 'NO'\n\n    if n <= 1:\n        return ans\n\n    if n == 2:\n        if sum(h) == 5:\n            ans = 'YES'\n        return ans\n\n    l = 0\n    r = n - 1\n    while l <= r:\n        if h[l] == h[r]:\n            return 'NO'\n        if h[l] == h[l] - 1:\n            l += 1\n        else:\n            l += 1\n            if h[l] == h[r] - 1:\n                r -= 1\n            else:\n                r -= 1\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_parts = int(stdin)\n    parts = stdin.split('\\n')\n    return 'YES' if wall(num_parts, parts) else 'NO'\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin\n    M = len(S)\n    for i in range(M-K+1):\n        if S[i:i+K] in set(S[j:j+K] for j in range(i, M)):\n            return str(K)\n    return \"-1\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if n < k:\n        return -1\n    res = []\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            res.append(s[i:j + 1])\n    res = list(dict.fromkeys(res))\n    if len(res) < k:\n        return -1\n    return sum(map(lambda x: x * (n - len(x)), res))\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if n >= k:\n        return '-1'\n    if n == 1:\n        return 0\n    if n == 2:\n        return k\n    max_sub_len = n - k\n    sub_lens = list(range(1, max_sub_len + 1))\n    s_list = []\n    for sub_len in sub_lens:\n        for i in range(0, n - sub_len + 1):\n            s_list.append(s[i:i + sub_len])\n    s_list = list(dict.fromkeys(s_list))\n    s_list.sort()\n    s_list.sort(key=len, reverse=True)\n    print(s_list)\n    s_list = list(map(lambda x: x * k, s_list))\n    s_list.sort()\n    return sum(s_list)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:-1]\n    # possible = set(itertools.permutations(s, k))\n    possible = {tuple(s)}\n    for i in range(k-1):\n        possible = possible.union(set(itertools.permutations(s, i + 1)))\n    return -1 if len(possible) > 100000 else sum(i*len(t) for i,t in enumerate(possible))"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    s = stdin[2]\n    if n > k:\n        return -1\n    if n == 1 and k == 1:\n        return 0\n    if k == 1:\n        return 0\n    if k > n:\n        return -1\n    S = set()\n    if k > 0:\n        S.add(s[:k])\n    for i in range(1, n):\n        p = list(S)\n        for j in range(len(p)):\n            if i <= len(p[j]):\n                if j + 1 < len(p):\n                    t = p[j] + p[j + 1]\n                    if len(t) == i:\n                        if t in S:\n                            continue\n                        S.add(t)\n        if len(S) == k:\n            return sum([len(i) for i in S])\n    return -1\n\n\nsolution(\"10 1 5\")\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.replace(\" \", \"\")\n\n    def is_subseq(s):\n        if len(s) > k:\n            return False\n        for i in range(1, len(s) - k + 1):\n            if s[:i] not in seqs:\n                return False\n        return True\n\n    if k > len(s):\n        return -1\n    seqs = {s}\n    for i in range(1, k):\n        t = set()\n        for s in seqs:\n            t.add(s[:i])\n        seqs = t\n\n    return len(seqs)"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length_string, number_of_subsequences = stdin.split()\n    number_of_subsequences = int(number_of_subsequences)\n    length_string = int(length_string)\n    s = stdin.strip()\n    n = len(s)\n    if number_of_subsequences == 0:\n        return \"-\"\n    if n == number_of_subsequences:\n        return 0\n    if number_of_subsequences == 1:\n        if s == \"\":\n            return 0\n        if s[0]!= s[-1]:\n            return -1\n        return length_string\n    sub_sequences = []\n    for i in range(n):\n        if s[i]!= s[i + 1]:\n            sub_sequences.append(s[i])\n    sub_sequences.sort()\n    if len(sub_sequences) == 0:\n        return -1\n    return number_of_subsequences + (\n        max(1, length_string - len(sub_sequences)) * len(sub_sequences)\n    )\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(stdin)\n    c = {}\n    res = []\n    def dfs(n):\n        if n in c:\n            return c[n]\n        s = 0\n        if len(n) > 0:\n            s += min(dfs(n[1:]), len(n) - 1)\n        if len(n) > 1:\n            s += min(dfs(n[2:]), len(n) - 2)\n        c[n] = s\n        return s\n    dfs(a)\n    print(c[a])\n    return '-1' if len(c)!= k else str(c[a])\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n    \n    if n==k:\n        return str(0)\n    \n    if n>k:\n        return -1\n    \n    ans=0\n    for i in range(n-k+1):\n        if len(set(s[i:i+k]))==k:\n            ans+=n-k+1\n        else:\n            break\n    \n    return str(ans)"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    n, k = map(int, s[0].split(\" \"))\n    string = s[1]\n\n    def can_do_set(s, k):\n        return len(s) <= k\n\n    def can_do_string(s, k):\n        return len(s) <= k and len(set(s)) == len(s)\n\n    def count(s):\n        return sum([ord(c) - ord(\"a\") + 1 for c in s])\n\n    if can_do_set(string, k) and can_do_string(string, k):\n        return \" \".join([count(string), str(n - count(string))])\n\n    if not can_do_string(string, k):\n        return -1\n    if not can_do_set(string, k):\n        return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 1\n   ... 2 1 1''')\n    4\n    >>> solution('''30 20 10\n   ... 3 2 2\n   ... 30 20 10\n   ... 1 100 1''')\n    39\n    >>> solution('''1 100 1\n   ... 3 2 2\n   ... 1 100 1''')\n    3\n    \"\"\"\n\n    a, b, c = map(int, stdin.split())\n\n    if a == b == c:\n        return \"No\"\n\n    if a == b:\n        if a == 1:\n            return \"Yes\"\n        return \"Yes\" if c == 1 else \"No\"\n\n    if b == c:\n        if b == 1:\n            return \"Yes\"\n        return \"Yes\" if a == 1 else \"No\"\n\n    if c == a:\n        if c == 1:\n            return \"Yes\"\n        return \"Yes\" if b == 1 else \"No\"\n\n    if a + b <= c:\n        return \"No\"\n\n    if b + c <= a:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k = 1\n    max_days = 0\n    while k * (7 * k) <= a + b + c:\n        day = k\n        while day <= 7:\n            if day == 6:\n                if k * (7 * k) + a <= a:\n                    max_days = max(max_days, k + 2)\n                else:\n                    max_days = max(max_days, k + 1)\n            else:\n                if k * (7 * k) + a <= a + b:\n                    max_days = max(max_days, k + 1)\n                elif k * (7 * k) + a <= a + b + c:\n                    max_days = max(max_days, k + 2)\n            day += 1\n        k += 1\n    return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    day = 1\n    n = 1\n    while n < a + b + c:\n        n += 1\n        day += 1\n        if day == 1 or day == 7:\n            day = 1\n            n = 1\n    return str(day)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = [0, 1, 2, 3, 4, 5, 6]\n    dp = [[0 for i in range(4)] for j in range(6)]\n    dp[0] = [0, a, b, 0]\n    for day in range(1,6):\n        dp[day][0] = max(dp[day - 1][0], dp[day - 1][1] + c)\n        dp[day][1] = max(dp[day - 1][1], dp[day - 1][2] + a)\n        dp[day][2] = max(dp[day - 1][2], dp[day - 1][3] + b)\n        dp[day][3] = max(dp[day - 1][3], 0)\n    return str(max(dp[5][0], dp[5][1], dp[5][2], dp[5][3]))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 0:\n        return '0'\n    dp = [0] * (a + 1)\n    dp[1] = c\n    for i in range(2, a + 1):\n        dp[i] = max(c, dp[i - 1] + b)\n    for i in range(3, a + 1):\n        dp[i] = max(b, dp[i - 1] + a)\n    return str(dp.index(max(dp[a], dp[a + 1])) + 1)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = map(int, stdin.split())\n  if max(a, b, c) <= 10 ** 8:\n    return str(max(a + b + c, a + min(b, c) + max(a, b, c) - 1))\n  return str(max(a, b, c))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read data from stdin and split it by newlines\n    data = stdin.splitlines()\n    # Parse data\n    a, b, c = map(int, data[0].split())\n    \n    # Define function\n    def is_valid(day):\n        # Return false if day is not valid\n        if day % 7 == 0 or day == 7:\n            return False\n        elif day % 7 == 1 or day == 6:\n            return True\n        else:\n            return False\n    \n    # Define function\n    def total_days(days):\n        if days % 7 == 0:\n            return days // 7\n        else:\n            return days // 7 + 1\n    \n    # Define function\n    def solution(a, b, c):\n        # Return false if day is not valid\n        if is_valid(a):\n            return total_days(a)\n        elif is_valid(b):\n            return total_days(b)\n        elif is_valid(c):\n            return total_days(c)\n        else:\n            return None\n    \n    # Return the result\n    return solution(a, b, c)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 1\n   ... ''')\n    '4'\n    >>> solution('''3 2 2\n   ... ''')\n    '7'\n    >>> solution('''1 100 1\n   ... ''')\n    '3'\n    >>> solution('''30 20 10\n   ... ''')\n    '39'\n    \"\"\"\n    lst = list(map(int, stdin.split()))\n    count = 0\n    res = []\n    while count!= len(lst):\n        day = lst.pop(0)\n        if day == 1:\n            res.append(count)\n            count = 0\n        else:\n            count += 1\n    return str(max(res))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    #     fish_food = a\n    #     rabbit_stew = b\n    #     chicken_stake = c\n\n    #     if fish_food >= rabbit_stew and fish_food >= chicken_stake:\n    #         return str(0)\n    #     elif rabbit_stew >= fish_food and rabbit_stew >= chicken_stake:\n    #         return str(0)\n    #     else:\n    #         return str(max([a, b, c]))\n    # print(solution(input()))\n\n    return max(0, a + b + c - min([a, b, c]))\n\n\nsolution('3 2 2')\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, stdin().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([int(s) for s in stdin().split()])\n        tiles = np.array(tiles, dtype=int)\n        rows = tiles.shape[0]\n        cols = tiles.shape[1]\n        tiles = tiles.tolist()\n        tiles = np.array(tiles, dtype=int)\n        rows = tiles.shape[0]\n        cols = tiles.shape[1]\n        if rows == cols and rows == m and rows == m:\n            tiles = np.rot90(tiles, -1)\n            tiles = np.rot90(tiles)\n            tiles = np.rot90(tiles, 1)\n            if np.allclose(tiles, tiles.T):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n    return \"done\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in a string of test cases and returns the right answer\n    '''\n    # the variables we'll be using\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n    tiles = stdin.splitlines()[2:]\n    tiles = [[int(x) for x in tile.split()] for tile in tiles]\n\n    # we'll be checking every combination of 2x2\n    for i in range(n):\n        for j in range(i+1, n):\n            # if the tiles are the same\n            if tiles[i][0] == tiles[j][0] and tiles[i][1] == tiles[j][1]:\n                # print the answer\n                return \"YES\"\n    # if we have reached here without returning, return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        a = list()\n        for _ in range(2 * n):\n            a.append(list(map(int, stdin.split())))\n        print(\"YES\" if is_square(n, m, a) else \"NO\")\n    return \"YES\" if a else \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split(\"\\n\")\n    n, m = list(map(int, stdin_lines[0].split()))\n    tiles = []\n    for i in range(1, 1 + n):\n        for j in range(1, 1 + m):\n            tiles.append(stdin_lines[i][j])\n    return \"YES\" if is_symmetric(tiles, n, m) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(list(map(int, stdin.split())))\n    square = [[0]*m for _ in range(m)]\n    for row in range(n):\n        for col in range(n):\n            square[row][col] = tiles[row][col]\n            if row < n-1:\n                square[row+1][col] = tiles[row+1][col]\n            if col < n-1:\n                square[row][col+1] = tiles[row][col+1]\n            if row < n-1 and col < n-1:\n                square[row+1][col+1] = tiles[row+1][col+1]\n    for row in range(n):\n        for col in range(n):\n            if row < n-1:\n                square[row+1][col] = square[row+1][col] + square[row][col]\n            if col < n-1:\n                square[row][col+1] = square[row][col+1] + square[row][col]\n            if row < n-1 and col < n-1:\n                square[row+1][col+1] = square[row+1][col+1] + square[row][col]\n    for row in range(n):\n        for col in range(n):\n            if row < n-1 and col < n-1:\n                square[row][col] = square[row][col] + square[row+1][col]\n            if row < n-1 and col < n-1:\n                square[row+1][col] = square[row+1][col] + square[row][col]\n            if row < n-1 and col < n-1:\n                square[row][col+1] = square[row][col+1] + square[row][col]\n    for row in range(n):\n        for col in range(n):\n            if row < n-1 and col < n-1:\n                square[row][col] = square[row][col] + square[row][col+1]\n            if row < n-1 and col < n-1:\n                square[row+1][col] = square[row+1][col] + square[row][col+1]\n            if row < n-1 and col < n-1:\n                square[row][col+1] = square[row][col+1] + square[row+1][col]\n    return \"YES\" if square == square[::-1] else \"NO\"\n\n\n------FINAL RESULT------\n\nYES\nYES\nYES\nYES\nYES\n\n\n\"\"\"\n\n\nfrom typing import List\nfrom functools import reduce\nimport operator\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = [[int(t) for t in stdin.strip().split('\\n')[i]] for i in range(2*n)]\n    tile_width = 2\n    tile_height = 2\n    tile_set = set()\n    for i in range(n):\n        tile_set.update(set(range(tile_width*i, tile_width*i+tile_width)))\n    for i in range(n):\n        tile_set.update(set(range(tile_height*i, tile_height*i+tile_height)))\n    matrix = [[False]*m for _ in range(m)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(tile_width):\n                for l in range(tile_height):\n                    if tiles[i][k] + tile_height*(j+l) not in tile_set:\n                        continue\n                    matrix[tile_height*i+l][tile_width*j+k] = True\n    symm = True\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                symm = False\n    print(symm)\n    if symm:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\nINPUT:\n\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n\nOUTPUT:\n\nYES\nNO\nYES\nNO\nYES\nYES\n\n'''\nn, m = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n, m = map(int, stdin[i * 2].split())\n        tiles = []\n        for j in range(n):\n            tiles.append(list(map(int, stdin[i * 2 + 1].split())))\n        tiles = sort_tiles(tiles)\n        print(tiles)\n        if is_symmetric(tiles):\n            if is_square(tiles, m, n):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n        print(\"\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for i in range(n):\n        line = stdin.split(\"\\n\")[i+1].split(\"\\n\")[1:]\n        tiles.append(line)\n    tiles = np.array(tiles)\n    return \"YES\" if is_square(tiles, m) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n    for line in stdin.strip().split('\\n'):\n        n, m = map(int, line.split())\n        symmetric_matrix = [[0]*m for _ in range(n)]\n        lines = stdin.strip().split('\\n')[1:]\n        for i in range(n):\n            symmetric_matrix[i] = lines[i*2]\n            symmetric_matrix[i+n] = lines[i*2+1]\n        symmetric_matrix = np.array(symmetric_matrix)\n        if np.all(symmetric_matrix == symmetric_matrix.T):\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n + 1):\n        sum1 = sum1 + i\n        if i == 1:\n            pass\n        elif i == 2:\n            pass\n        elif i == 3:\n            pass\n        elif i == 4:\n            pass\n        elif i == 5:\n            pass\n        elif i == 6:\n            pass\n        else:\n            pass\n    # print(sum1)\n    # print(sum2)\n    if abs(sum1 - sum2) < 0.01:\n        return str(abs(sum1 - sum2))\n    else:\n        return str(abs(sum1 - sum2))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = set()\n    b = set()\n    x = 0\n    while len(a) < n:\n        if x <= n - len(b):\n            x += 1\n            a.add(x)\n            b.add(x)\n        else:\n            x -= 1\n            b.add(x)\n    return str(abs(sum(a) - sum(b)))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(range(1, N + 1))\n    b = []\n    for i in range(1, len(a)):\n        if i % 2!= 0:\n            b.append(a[i])\n        else:\n            a.pop(i)\n    return str(abs(sum(a) - sum(b)))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # 1 2 3 4 5 6\n    n_a = 2 * n\n    n_b = n\n    sum_a = (n * (n - 1)) // 2\n    sum_b = n * n - sum_a\n    print(abs(sum_a - sum_b))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(i) for i in stdin.split('\\n')[0].split(',')]\n    return '{:.0f}'.format(sum(lst) - sum(lst[:2]))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 6''')\n    1\n    >>> solution('''5\n   ... 4\n   ... 6''')\n    1\n    >>> solution('''5\n   ... 1\n   ... 1''')\n    0\n    \"\"\"\n    n = int(stdin)\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    print(a)\n    if len(a) == 1:\n        return 0\n    a.sort(reverse=True)\n    b = []\n    for i in range(1, n + 1):\n        b.append(i)\n    print(b)\n    a.sort()\n    b.sort()\n    c = a + b\n    print(c)\n    return abs(sum(a) - sum(b))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l1 = [i for i in range(1, n+1)]\n    l2 = []\n    while len(l1) > 1:\n        l2.append(l1.pop(0))\n        l1.pop(0)\n    return str(sum(l2) - sum(l1))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = set(map(int, stdin.split()))\n    b = set()\n    for x in range(1, len(a)+1):\n        b.add(sum(a)-sum(b))\n    return str(abs(sum(a)-sum(b)))"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.split()\n    res = 0\n    i = 0\n    j = 1\n    while j < int(n):\n        while j < int(n) and s[j]!= s[i]:\n            j += 1\n        if j == int(n):\n            break\n        else:\n            if s[i] == \")\" and s[j] == \"(\":\n                res += 1\n            i += 1\n            j += 1\n    return str(res % 1000000007)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build a regular bracket sequence of length $2n$ using\n    the input string $s$ and return the number of regular bracket sequences\n    that contain the given string as a substring.\n    \"\"\"\n    # tokenize input\n    n, s = stdin.split()\n    n = int(n)\n    s = s.strip()\n    s = \"(\" + s + \")\"\n    return str(len(s)/2)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Examples:\n    solution(\"5\")  # => \"5\"\n    solution(\"3\")  # => \"4\"\n    solution(\"2\")  # => \"0\"\n    '''\n    n = int(stdin)\n    f = '1'\n    for i in range(n):\n        f += '+' + f\n    f += '1'\n    return f[:n]\n\nstdin = '5'\nprint(solution(stdin))"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return 0\n    ans = 1\n    for i in range(1,n//2+1):\n        ans += i*(n-i)\n        ans %= 1000000007\n    return ans"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    counter = 0\n    for i in range(n):\n        left = i - 1\n        right = i + 2\n        while left >= 0:\n            if s[left] == '(' and s[right] == ')':\n                counter += 1\n            left -= 1\n            right += 1\n    return str(counter % 1000000007)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    r = 0\n    while len(s) > 2:\n        if len(s) % 2 == 0:\n            s = s[1:]\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        r += 1\n    return r\n\nsolution(\"5\")\n\nsolution(\"3\")\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    length = 2 * n\n    s = stdin\n    result = 0\n    for i in range(length):\n        for j in range(i, length):\n            string = s[i:j]\n            # print(string)\n            if isValid(string):\n                result += 1\n    return result\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(s[i])\n            else:\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n        return not stack\n    \n    def dfs(n):\n        if n == 0:\n            return 1\n        if n % 2 == 1:\n            return 0\n        return dfs(n // 2) + dfs(n // 2)\n    \n    return sum([dfs(i) for i in range(1, len(stdin) + 1) if check(stdin[:i])]) % 1000000007"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(input())):\n        if '(' == stdin[0] and ')' == stdin[-1]:\n            print(2)\n        else:\n            print(0)\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n-1, -1, -1):\n        if not n%25 == 0:\n            n = n%25\n            continue\n        n = int(str(n)[:i]+str(int(str(n)[i:i+1])+1)+str(n)[i+1:])\n        if not n%25 == 0:\n            n = n%25\n            continue\n        return str(n)\n    return \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split()]\n    return \"1\" if not all(i % 25 for i in stdin) else \"0\" if all(i % 25 for i in stdin) else \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    while n % 25!= 0:\n        n = n * 10 + n % 10\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    seq = list(str(n))\n    print(seq)\n    #print(solution(n))\n    for i in range(len(seq) - 2):\n        print(i)\n        if seq[i] == '0' and seq[i + 1] == '0' and seq[i + 2] == '0':\n            return '-1'\n        if seq[i] > seq[i + 1]:\n            seq[i], seq[i + 1] = seq[i + 1], seq[i]\n            print(seq)\n            for j in range(i + 2, len(seq)):\n                print(j)\n                if seq[j] < seq[j - 1]:\n                    seq[j - 1], seq[j] = seq[j], seq[j - 1]\n                    print(seq)\n    return \"\".join(seq)\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    input_number = int(input_string)\n    if input_number < 2 or input_number > 10**18:\n        return -1\n    else:\n        return recursion(input_number)\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    for i in range(0,len(n)):\n        n = n[1:]+n[:1]\n    print(n)\n    s = n\n    while len(n)!= 1:\n        if n[0] == '0':\n            n = n[1:]\n            continue\n        \n        if n[0] == n[-1]:\n            n = n[:-1]\n            continue\n        \n        if n[0] == '1':\n            n = n[1:]\n            continue\n        \n        if n[0] == '2':\n            n = n[1:]\n            continue\n        \n        if n[0] == '3':\n            n = n[1:]\n            continue\n        \n        if n[0] == '4':\n            n = n[1:]\n            continue\n        \n        if n[0] == '5':\n            n = n[1:]\n            continue\n        \n        if n[0] == '6':\n            n = n[1:]\n            continue\n        \n        if n[0] == '7':\n            n = n[1:]\n            continue\n        \n        if n[0] == '8':\n            n = n[1:]\n            continue\n        \n        if n[0] == '9':\n            n = n[1:]\n            continue\n    return(n)\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build a number and return the minimum number of moves needed to obtain it.\n    \"\"\"\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"-\"\n    else:\n        return str(n) + \" \" + str(n + (n%25)) + \" \" + str(n + (n%25)) + \" \" + str(n + (n%25)) + \" \" + str(n + (n%25))\n\nsolution(\"1234\")"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  inp = int(stdin)\n  moves = []\n  while inp >= 25:\n    moves.append(inp % 25)\n    inp //= 25\n  moves.append(inp)\n  #print(moves)\n  for i in range(len(moves)):\n    moves[i] = str(moves[i])\n    moves[i] = moves[i][::-1]\n    moves[i] = int(moves[i])\n  moves = str(min(moves))\n  return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def make_divisible(num):\n        count = 0\n        while num % 25!= 0:\n            num = num * 10 + 1\n            count += 1\n        return num, count\n    return make_divisible(int(stdin))[1]"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = n\n    c = 0\n    while d % 25!= 0:\n        n = int(str(n)[0]) + int(str(n)[1])\n        d = n\n        c += 1\n    return -1 if c == 0 else c"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    I'm not sure how to solve the problem in one of the examples. The test case was provided by the problem statement. I had to think about it.\n    '''\n\n    # Your code goes here\n    n = int(stdin)\n    s = stdin\n\n    res = 0\n    n_chars = len(s)\n    # c_i = number of the color used for each character\n    c_i = [0] * n_chars\n\n    # count how many colors are used for each character.\n    for i in range(n_chars):\n        if c_i[i] == 0:\n            c_i[i] = 1\n        else:\n            c_i[i] += 1\n\n    while c_i.count(1)!= 1:\n        for i in range(n_chars):\n            if c_i[i] == 1:\n                res += 1\n                # i-th character is colored with a color which is not the same as the previous one\n                for j in range(n_chars):\n                    if j!= i:\n                        if s[i] > s[j]:\n                            if c_i[j] > 0:\n                                c_i[j] -= 1\n                        elif s[i] < s[j]:\n                            if c_i[i] > 0:\n                                c_i[i] -= 1\n\n    return str(res) + '\\n' + ''.join([str(x) +'' for x in c_i])"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    # sorting by index in the string\n    sorted_s = sorted(stdin)\n    # return the minimum number of colors used\n    return n - len(sorted_s)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # ---SOLUTION---\n    n = int(stdin)\n    s = stdin.split()[-1]\n    c = list(range(n))\n    for i in range(n):\n        if c[i] < n:\n            c[i] = c[i] + 1\n    while c[0] >= 1:\n        for i in range(1, n):\n            if c[i] > c[i - 1] + 1:\n                c[i] = c[i - 1] + 1\n                break\n        else:\n            c = c[::-1]\n            break\n    return str(c[0]) +'' +''.join([str(x) for x in c[1:]])\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n < 2:\n        return str(n)\n    c = collections.Counter(s)\n    ordered = sorted(list(c.keys()))\n    res = 1\n    for char in ordered:\n        if res == n:\n            return str(n)\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    h = {}\n    for i, c in enumerate(s):\n        h[c] = i\n    s_ord = list(map(ord, s))\n    num = 0\n    for i in range(n):\n        if s_ord[i] in h:\n            num = max(num, h[s_ord[i]] - i)\n    return str(num)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    d = {}\n    for i in range(n):\n        d[s[i]] = i\n\n    d = sorted(d.items(), key=lambda x: x[1])\n\n    s_reorder = \"\"\n    for i in d:\n        s_reorder += i[0]\n\n    return str(len(set(s_reorder))) + \"\\n\" + str(s_reorder)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    res = float('inf')\n    b = list(range(1, n+1))\n    while True:\n        a = b.copy()\n        while a:\n            x = a.pop(0)\n            for j in range(n):\n                if s[j] > x:\n                    a.append(x)\n                    break\n                if x == s[j]:\n                    continue\n                else:\n                    a.append(x)\n                    break\n        if a == b:\n            break\n        else:\n            b = a.copy()\n    for i in range(len(b)):\n        res = min(res, b[i])\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = n\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1) +'' + str(1)\n\n    arr = list(s)\n    colors = 0\n    while colors < res:\n        color_arr = []\n        for i in range(len(arr)):\n            if arr[i] == 'a' and color_arr == []:\n                color_arr.append(i)\n            elif arr[i] == 'a' and i in color_arr:\n                color_arr.remove(i)\n                color_arr.append(i)\n        if color_arr:\n            for i in range(len(color_arr)):\n                arr[color_arr[i]] = 'b'\n        colors += 1\n    return str(colors) +'' + ''.join(arr)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s)\n\n    if n == 1:\n        return str(1)\n\n    m = int(1e9 + 9)\n    if n == 2:\n        return str(m)\n\n    # 1 to m, m to n-1\n    # check if even\n    # keep track of last seen index\n    # go through all indexes\n    # keep track of last seen color\n    # compare to new color\n    # if they are same, try next color\n    # if they are different, swap and try next index\n    # add 1 to number of colors\n    # increment last seen index\n\n    if n % 2 == 0:\n        last = 1\n        l = 2\n        s = list(s)\n        c = []\n        for i in range(n):\n            if i == l:\n                c.append(last)\n            else:\n                c.append(last + 1)\n            if i % 2 == 0:\n                last = c[i]\n                l = i + 1\n            else:\n                last = c[i] + 1\n                l = i + 2\n        return''.join([str(x) for x in c])\n\n    else:\n        last = 1\n        l = 2\n        s = list(s)\n        c = []\n        for i in range(n):\n            if i == l:\n                c.append(last)\n            else:\n                c.append(last + 1)\n            if i % 2 == 1:\n                last = c[i]\n                l = i + 1\n            else:\n                last = c[i] + 1\n                l = i + 2\n        return''.join([str(x) for x in c])\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    res = float('inf')\n    colors = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        for p in range(m + 1, n):\n                            for q in range(p + 1, n):\n                                c = []\n                                for r in range(n):\n                                    if s[r] == s[i] or s[r] == s[j] or s[r] == s[k] or s[r] == s[l] or s[r] == s[m] or s[r] == s[p] or s[r] == s[q]:\n                                        c.append(1)\n                                    else:\n                                        c.append(0)\n\n                                if sum(c) == n:\n                                    colors.append(c)\n                                else:\n                                    pass\n\n    for i in range(len(colors)):\n        res = min(res, len(colors[i]))\n    return res\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns:\n        str:\n    '''\n    a, *l, b = stdin.split()\n    for i in range(len(l)-1, -1, -1):\n        if len(a) == 0:\n            break\n        if a in b:\n            l[i] = a\n            a = l[:i]\n    if not a:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string_array = stdin.split('\\n')\n    \n    if len(string_array) == 1:\n        if len(string_array[0]) == 0:\n            return 'NO'\n        else:\n            return 'YES'\n\n    for i in range(len(string_array)):\n        string_array[i] = string_array[i].strip()\n    \n    \n    for i in range(len(string_array)):\n        for j in range(len(string_array)):\n            if i!= j:\n                string_array[i] = ''.join(sorted(string_array[i]))\n                string_array[j] = ''.join(sorted(string_array[j]))\n\n                if string_array[i] in string_array[j]:\n                    return 'NO'\n    \n    return 'YES'"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nimport collections\nimport re\n\nn = int(input())\nstrs = collections.deque()\nfor i in range(n):\n    strs.append(input())\n\nfor i in range(n):\n    for j in range(n):\n        substring = re.compile(r'.'+strs[i])\n        if re.match(substring,strs[j])!= None:\n            print(\"YES\")\n            break\n    if j == n-1:\n        print(\"NO\")\n\n'''\n\nThe input contains $n$ strings, each consisting of lowercase English letters. Rearrange the given strings in such a way that for every string, all strings that are placed before it are its substrings.\n\nString $a$ is a substring of string $b$ if it is possible to choose several consecutive letters in $b$ in such a way that they form $a$. For example, string \"for\" is contained as a substring in strings \"codeforces\", \"for\" and \"therefore\", but is not contained as a substring in strings \"four\", \"fofo\" and \"rof\".\n\nInput\n5\nab\naba\nabacaba\nba\naba\n\nOutput\nYES\nab\naba\naba\nabacaba\nba\n\nInput\n5\na\naba\nabacaba\nba\naba\n\nOutput\nNO\n\nInput\n3\nqwerty\nqwerty\nqwerty\n\nOutput\nYES\nqwerty\nqwerty\nqwerty\n\n'''\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'NO'\n    a = stdin.split(\"\\n\")\n    for i in range(len(a)):\n        a[i] = sorted(a[i])\n        if i > 0:\n            for j in range(i):\n                if j == 0:\n                    continue\n                else:\n                    if a[j] == a[i] and a[j][0]!= a[i][0]:\n                        answer = 'NO'\n                        break\n                    elif a[j] == a[i] and a[j][0] == a[i][0]:\n                        if j > 0:\n                            if a[j - 1] == a[i] and a[j]!= a[i]:\n                                answer = 'NO'\n                                break\n                            elif a[j - 1] == a[i] and a[j] == a[i]:\n                                if j == 1:\n                                    answer = 'YES'\n                                    break\n                                else:\n                                    answer = 'YES'\n                                    break\n                        else:\n                            answer = 'YES'\n                            break\n        if answer == 'NO':\n            break\n    return answer\n\n\nsolution(\"\")\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom itertools import permutations\n\nn = int(input())\nstrings = []\n\nfor _ in range(n):\n    strings.append(input())\n\ncombinations = permutations(strings, n)\n\nfor combination in combinations:\n    if sorted(combination) == combination:\n        print(\"YES\")\n        for s in combination:\n            print(s)\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.splitlines()\n    input = [line.split() for line in input]\n    print(input)\n    print(input[1])\n    for i in input:\n        print(i)\n    print(input[1][0][0])\n    if input[0][0][0] in input[1][0]:\n        if input[1][0][0] in input[2][0]:\n            print(input[2][0])\n        if input[1][0][0] in input[2][0]:\n            print(input[1][0])\n        if input[2][0][0] in input[1][0]:\n            print(input[1][0])\n        if input[2][0][0] in input[1][0]:\n            print(input[1][0])\n    else:\n        return \"NO\""
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prms = list(map(int, stdin.split()))\n\n    if k > max(prms):\n        return str(0)\n\n    prms.sort(key=lambda x: x)\n    L, R = 0, len(prms) - 1\n    ans = 0\n    while L <= R:\n        if prms[L] <= k:\n            ans += 1\n            k -= prms[L]\n            L += 1\n        else:\n            k -= prms[R]\n            R -= 1\n\n    return str(ans)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst = sorted(lst)\n    left = 0\n    right = len(lst) - 1\n    cnt = 0\n    while left <= right:\n        if lst[left] + lst[right] > k:\n            right -= 1\n        elif lst[left] + lst[right] < k:\n            left += 1\n        else:\n            cnt += 1\n            left += 1\n            right -= 1\n    return str(cnt)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, k = map(int, input_lines[0].split())\n    p_d = input_lines[1].split()\n    problems = []\n    for p in p_d:\n        problems.append(int(p))\n    problems.sort(reverse=True)\n    res = 0\n    for p in problems:\n        if p >= k:\n            break\n        res += 1\n    return str(res)\n\nprint(solution('4 3\\n4 2 3 1 5 1 6 4'))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    possible = 0\n    while len(problems) > 0:\n        possible += 1\n        if len(problems) == 1:\n            break\n        if problems[0] > k:\n            break\n        possible += 1\n        if problems[-1] > k:\n            break\n        possible += 1\n        problems.pop(0)\n        problems.pop(-1)\n    return str(possible)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    i, j = 0, len(a) - 1\n    s = 0\n    while i <= j:\n        s += 1\n        if a[i] + a[j] <= k:\n            i += 1\n        j -= 1\n    return s\n\nsolution(input())\n\"\"\"\n\n\"\"\"\nProblem: Maximum number of problems that can be solved\n\nGiven an array A[ ] of positive integers of size N, where each element represents the difficulty of the problem in which the person is required to solve. The task is to find the maximum number of problems that can be solved in the minimum number of attempts.\n\n\n-----Examples-----\nInput:\n3 2\n6 5 2\n\nOutput:\n2\n\nInput:\n4 3\n1 1 2 3\n\nOutput:\n1\n\nInput:\n1 2\n1\n\nOutput:\n1\n\nInput:\n5 1\n6 2 5 3 1\n\nOutput:\n3\n\n\"\"\"\n\n\"\"\"\nThis is the brute force approach. If we sort the array, we can simply check each pair. If we sort the array, there are n - 1 pairs.\n\nTime complexity: O(nlogn)\nSpace complexity: O(1)\n\"\"\"\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # longest = 0\n    # max_right = 0\n    # for i in range(n):\n    #     longest = max(longest, i)\n    #     if longest > k:\n    #         return '0'\n    # if longest <= k:\n    #     return str(n)\n    # max_left = 0\n    # for i in range(n, 0, -1):\n    #     max_left = max(max_left, i)\n    #     if max_left > k:\n    #         return '0'\n    # if max_left <= k:\n    #     return str(n)\n\n    # while longest > k or max_left > k:\n    #     if longest > k:\n    #         longest = longest - 1\n    #     else:\n    #         max_left = max_left - 1\n    # if longest > k:\n    #     return '0'\n    # if max_left > k:\n    #     return '0'\n    # else:\n    #     return str(n)\n    return str(longest)"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    problems = list(map(int, stdin.split()))\n    left, right = 1, max(problems)\n    count = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if solve_problem(n, k, problems, mid):\n            count += 1\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n\n    res = 0\n    for i in range(n):\n        lst = lst[:i] + lst[i + 1:]\n        if sum(lst[i + 1 - len(lst) : i + 1]) <= k:\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a <= 2) and (b <= 2):\n        return str(2 * a + 2 * b - 4)\n    else:\n        return str(min(2 * a, 2 * b) + min(a, b) + max(a, b) - 4)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(2 * a + 2 * b, 2 * a + 2 * b + 2 * min(a, b)))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(min(a, b) * 2 + a * (b - a) * 2 + b * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return str(min(a * b, (a + b) * 4))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    if a <= 1 or b <= 1:\n        raise ValueError\n    return str(2 * (min(a, b) + max(a, b) - (max(a, b) - min(a, b)) + 2 * min(a, b) + 2))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    r, b, a = (set(range(1, b + 1)), set(range(1, a + 1)), set(range(1, b + 1)))\n    r_s, b_s = len(r), len(b)\n    res = min(\n        2 * (r_s + b_s) - r_s * a - b_s * b,\n        2 * (r_s + b_s) - r_s * a - b_s * b,\n        2 * (r_s + b_s) - r_s * a - b_s * b,\n    )\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return str(n*(n+1)//2)\n    if n == 1:\n        return str(m)\n    if m == 1:\n        return str(n)\n    l = n * (n-1) // 2\n    return str(min(l, l - m, l + m))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n + m) % 2 == 1:\n        return \"0\"\n    res = 0\n    while n % 2 == 0 and m % 2 == 0:\n        n = n // 2\n        m = m // 2\n        res += 2\n    while n > m:\n        n = n - m\n        m = m - 2\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = map(int, stdin.split())\n    return str(min(2 * (a + b), min(a, b) * 2 + max(a, b)))\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # make the string sorted\n    s = ''.join(sorted(s))\n\n    # count how many times a particular character is colored\n    colors = {c: 0 for c in s}\n    for c in s:\n        colors[c] += 1\n\n    # check if it is possible to color the given string so that after coloring it can become sorted\n    for _ in range(n):\n        # count all the neighbors that are colored different colors\n        nc = {c: 0 for c in colors}\n        for c in colors:\n            if c!= colors[c]:\n                nc[c] += 1\n        if nc.values()!= [n - 1] * n:\n            return 'NO'\n\n        # swap neighboring characters\n        for i in range(n - 1):\n            if colors[i] == colors[i + 1]:\n                colors[i] = 0\n                colors[i + 1] = 1\n            else:\n                colors[i + 1] = 0\n                colors[i] = 1\n\n    # check if the coloring is correct\n    return 'YES' if all(colors[i] == 0 or colors[i] == 1 for i in range(n)) else 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    n -= 1\n    c = {}\n    for i in range(len(s)):\n        if s[i] in c.keys():\n            if c[s[i]] == 1:\n                return \"NO\"\n        c[s[i]] = 0 if c.get(s[i]) == None else 1\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = len(stdin)\n    if n <= 2:\n        return 'NO'\n    # convert string to list\n    s = list(stdin)\n    s.sort()\n    #print(s)\n    # create dictionary\n    d = {}\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]] = 0\n        else:\n            d[s[i]] += 1\n    #print(d)\n    # check for same number of elements\n    if n!= len(d):\n        return 'NO'\n    # check for order\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]:\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return \"NO\"\n\n    colors = [0] * n\n    for i in range(1, n):\n        if stdin[i - 1] < stdin[i]:\n            colors[i] = 1\n        elif stdin[i - 1] > stdin[i]:\n            colors[i] = -1\n\n    changed = True\n    while changed:\n        changed = False\n        for i in range(n - 1):\n            if colors[i]!= 0 and colors[i + 1]!= 0:\n                colors[i] += colors[i + 1]\n                colors[i + 1] = 0\n                changed = True\n\n    colors.sort()\n    if colors == list(range(n)):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    count = 0\n    while True:\n        if n == count:\n            break\n        if s == sorted(s):\n            count += 1\n        s = sorted(list(s))\n        if len(s) <= 1:\n            return 'NO'\n        s = sorted(list(s), reverse=True)\n        s = \"\".join(list(map(str, s)))\n    return 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = [0]*n\n    for i in range(len(s)):\n        colors[i] = 1\n    swaps = 0\n    while swaps < len(colors):\n        for i in range(len(colors)):\n            if colors[i] == 1 and colors[i - 1] == 0 and colors[i + 1] == 0:\n                colors[i - 1] = 1\n                colors[i + 1] = 1\n                swaps += 2\n        swaps = 0\n        if colors == sorted(colors):\n            break\n    if colors == sorted(colors):\n        for i in range(len(colors)):\n            if colors[i] == 1:\n                colors[i] = 0\n            else:\n                colors[i] = 1\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    s = list(s)\n    for i in range(len(s)):\n        if i!= 0:\n            s[i] = str(int(s[i]) ^ int(s[i-1]))\n    s = ''.join(s)\n    if sorted(s) == list(s):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    str_input: str = stdin.split()[1]\n\n    if N < 2 or N > 200:\n        return \"NO\"\n    arr: list = []\n    str_len: int = len(str_input)\n    for i in range(str_len):\n        arr.append(str_input[i])\n\n    swap_counter: int = 0\n    swap_arr: list = []\n\n    # swap_arr = []\n    # swap_counter = 0\n    for i in range(str_len):\n        # swap_arr.append(i)\n        swap_counter += 1\n        if arr[i]!= '0':\n            swap_arr.append(i)\n\n    if swap_counter < 2:\n        return \"NO\"\n\n    swap_arr.sort()\n    swap_arr.reverse()\n\n    # print(swap_arr)\n\n    for i in range(swap_counter):\n        arr[swap_arr[i]] = arr[swap_arr[i]] + str(swap_arr[i])\n        if arr[swap_arr[i]] == '1':\n            arr[swap_arr[i]] = str(swap_arr[i])\n        else:\n            arr[swap_arr[i]] = str(swap_arr[i]) + '1'\n\n    for i in range(str_len):\n        arr[i] = int(arr[i])\n\n    arr.sort()\n    for i in range(str_len):\n        arr[i] = str(arr[i])\n\n    return''.join(arr)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    color = '0' + '1' * n\n\n    def swap(a, b):\n        a, b = b, a\n\n    def sort(s):\n        s = sorted(s)\n        return ''.join(s)\n\n    def color(s):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if color[i] == color[j] and color[i]!= '0':\n                    swap(s[i], s[j])\n\n    def is_ok(s):\n        for i in range(1, n + 1):\n            if color[i] == '0':\n                return False\n\n        return True\n\n    color(s)\n    return 'YES' if is_ok(s) else 'NO'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 2:\n        raise ValueError('Invalid input format')\n    try:\n        a, b = list(map(int, stdin.split()))\n    except ValueError as e:\n        raise ValueError('Invalid input format') from e\n    if a <= 0 or b <= 0:\n        raise ValueError('Invalid input format')\n    lowest = -1\n    lowest_price = a\n    if a!= b:\n        while a < b:\n            a = a * 0.8 + b * 0.1\n            if a >= 100:\n                break\n            else:\n                lowest = a\n                lowest_price = lowest\n        while a > b:\n            a = a * 0.8 - b * 0.1\n            if a < 0:\n                break\n            else:\n                lowest = a\n                lowest_price = lowest\n    return str(lowest_price)\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    A, B = stdin\n    ans = -1\n    for price in range(1, max(A,B) + 1):\n        if price * 0.1 >= A and price * 0.08 >= B:\n            ans = price\n            break\n    if ans == -1:\n        return '-1'\n    else:\n        return str(ans)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    for A_price in range(A, B + 1):\n        if A_price == 0:\n            continue\n\n        a_tax = A_price * 0.08\n        b_tax = A_price * 0.1\n\n        if a_tax > b_tax:\n            if b_tax % 1 == 0:\n                return str(round(a_tax))\n        elif b_tax > a_tax:\n            if a_tax % 1 == 0:\n                return str(round(b_tax))\n        else:\n            if a_tax % 1 == 0:\n                return str(round(a_tax))\n            elif b_tax % 1 == 0:\n                return str(round(b_tax))\n\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 0 and b > 0 and a <= b:\n        for i in range(b):\n            if a * i <= b * i:\n                return str(a * i)\n        return '-1'\n    else:\n        return '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    lowest = -1\n    for i in range(A, B + 1):\n        for j in range(A, B + 1):\n            conversion = (i * 0.08) + (j * 0.1)\n            if conversion.is_integer():\n                lowest = i if i < j else j\n                break\n    if lowest!= -1:\n        print(lowest)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    a = int(A)\n    b = int(B)\n    if a > 0 and b > 0:\n        for i in range(b):\n            if (a // 10) * 8 >= (b // 10) * 10:\n                print(a // 10 * 8)\n                return\n    print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_A, num_B = stdin.split()\n    num_A, num_B = int(num_A), int(num_B)\n    if num_A == 1 or num_B == 1:\n        return -1\n\n    for i in range(num_A, num_B):\n        if i * (num_A - 1) // num_A + i * (num_B - 1) // num_B == num_A * num_B:\n            return str(i)\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if (A <= 0 or A > B) or (B <= 0 or A > B):\n        return -1\n    if A == 1:\n        if B == 0:\n            return -1\n        else:\n            return A\n    else:\n        A = A + 1\n        B = B + 1\n        for i in range(A, B+1):\n            if is_consumption_tax(i, A, B):\n                return str(i)\n        return -1\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    if A % 2!= 0:\n        return -1\n    if A < 50:\n        return A\n    else:\n        lower = 1\n        upper = 100\n        while lower <= upper:\n            mid = (lower + upper) // 2\n            if mid < A:\n                upper = mid\n            elif mid > A:\n                lower = mid\n            else:\n                return str(mid)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a < b:\n        a, b = b, a\n    for i in range(a + 1, b):\n        if i * (1 - 0.08) / 1.08 - i * 0.08 == i * 0.1:\n            print(i)\n            return ''\n    return '-1'\n\nprint(solution(\"1 1\"))\nprint(solution(\"2 2\"))\nprint(solution(\"4 1\"))\nprint(solution(\"4 3\"))\nprint(solution(\"2 3\"))\nprint(solution(\"3 2\"))\nprint(solution(\"6 6\"))\nprint(solution(\"4 6\"))\nprint(solution(\"7 3\"))\nprint(solution(\"7 7\"))\nprint(solution(\"3 2\"))\nprint(solution(\"4 3\"))\nprint(solution(\"3 4\"))\nprint(solution(\"5 2\"))\nprint(solution(\"8 2\"))\nprint(solution(\"10 2\"))\nprint(solution(\"11 2\"))\nprint(solution(\"14 2\"))\nprint(solution(\"6 2\"))\nprint(solution(\"14 2\"))\nprint(solution(\"13 2\"))\nprint(solution(\"11 3\"))\nprint(solution(\"7 5\"))\nprint(solution(\"7 7\"))\nprint(solution(\"8 7\"))\nprint(solution(\"8 8\"))\nprint(solution(\"7 9\"))\nprint(solution(\"9 9\"))\nprint(solution(\"8 9\"))\nprint(solution(\"11 9\"))\nprint(solution(\"9 9\"))\nprint(solution(\"11 9\"))\nprint(solution(\"6 9\"))\nprint(solution(\"8 9\"))\nprint(solution(\"10 9\"))\nprint(solution(\"11 9\"))\nprint(solution(\"10 9\"))\nprint(solution(\"11 9\"))\nprint(solution(\"6 9\"))\nprint(solution(\"7 8\"))\nprint(solution(\"7 8\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))\nprint(solution(\"7 9\"))"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0 or n < k or n <= 0 or k <= 0:\n        return \"NO\"\n    a = []\n    b = []\n    a.append(1)\n    b.append(1)\n    c = []\n    d = []\n    for _ in range(k):\n        c.append(a[-1] + 1)\n        d.append(a[-1] + 2)\n        if max(b) < max(c):\n            b = c\n        if max(c) < max(d):\n            c = d\n        a.append(max(b) + 1)\n    return \"YES\" +''.join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    if n * k < n:\n        return \"NO\"\n    a = [0] * k\n    for i in range(k):\n        a[i] = 1\n        for j in range(i + 1, k):\n            if j == i + 1:\n                continue\n            if a[j] > a[i]:\n                break\n            if a[i] + a[j] <= n:\n                a[j] += a[i]\n                if a[j] == n:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 1 and k == 1:\n        return 'YES'\n    if k == 1 or n == k:\n        return 'NO'\n    \n    if n == 1:\n        return 'NO'\n    \n    if k == 1:\n        return 'YES'\n    \n    s = 0\n    for i in range(1, k + 1):\n        s += i\n    \n    s -= n\n    for i in range(1, k):\n        s += i + 2\n        s -= i\n        s += n - i\n        if s <= 0:\n            return 'YES'\n    \n    return 'NO'\n        \n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n >= k * 2:\n        return \"NO\"\n    a = list(range(1, n + 1))\n    ans = []\n    while len(a) > k:\n        if max(a) > max(a[1:]):\n            a.remove(max(a))\n        else:\n            a.remove(max(a))\n            a.remove(max(a))\n        if max(a) > max(a[1:]):\n            a.remove(max(a))\n    if max(a) < max(a[1:]):\n        return \"NO\"\n    ans.append(max(a))\n    ans.append(max(a[1:]))\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    if n <= 10**4:\n        def n_problem_array():\n            for i in range(n):\n                yield i + 1\n        def is_satisfied(solution):\n            problem_array = n_problem_array()\n            prev_answer = None\n            for answer in solution:\n                if prev_answer and answer!= prev_answer:\n                    return False\n                prev_answer = answer\n            return True\n        \n        def day_array():\n            for i in range(k):\n                yield 1\n        \n        for solution in itertools.permutations(day_array()):\n            if is_satisfied(solution):\n                return 'YES'\n        return 'NO'\n    else:\n        return 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n * k <= 0:\n        return \"NO\"\n    arr = []\n    i = 1\n    while len(arr) <= k:\n        arr.append(i)\n        i += 1\n    if not (n - (n * (k - 1))) <= sum(arr) <= (n * k):\n        return \"NO\"\n    while k <= n:\n        if arr[k-1] <= 2 * arr[k-2]:\n            arr.insert(k, arr.pop(k-2) + 1)\n        else:\n            k += 1\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1 or k <= 1:\n        return 'NO'\n    return 'YES' if n == k else 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == n:\n        return 'YES'\n    if n <= k:\n        return 'NO'\n\n    days = 1\n    results = []\n    while k >= 1:\n        res = sum(1 for _ in range(n) if 2 * days <= k)\n        if res <= k:\n            results.append(days)\n            k -= res\n        else:\n            k -= k\n        days += 1\n    if len(results) == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n < 2 or k < 2:\n        return \"NO\"\n    ans = list(range(1, k + 1))\n    while max(ans) <= n:\n        for i in range(1, k):\n            if ans[i] < ans[i - 1]:\n                ans[i] = ans[i - 1] + 1\n    return \"YES\" + \" \".join(map(str, ans))\n\"\"\"\n\n\"\"\"\n1)\n2)\n3)\n4)\n5)\n6)\n\"\"\"\n\n\"\"\"\n(a)\nfor i in range(2,n):\n    if a[i-1] <= a[i] and a[i] >= a[i-1]+1:\n        i += 1\n    else:\n        break\nreturn i\n\"\"\"\n\n\n\"\"\"\n(b)\nfor i in range(2,n):\n    if a[i-1] <= a[i] and a[i] >= a[i-1]+1:\n        i += 1\n    else:\n        break\nreturn i\n\"\"\"\n\n\"\"\"\n(c)\n1)\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 2:\n        return \"NO\"\n    a = list(map(int, stdin.split()))\n    for i in range(k):\n        a[i + 1] += a[i]\n    if (\n        sum(a) == n and all(a[i] > 0 for i in range(1, k))\n        and a[1] + 1 < a[2]\n        and a[2] + 1 < a[3]\n        and a[3] + 1 < a[4]\n        and a[4] + 1 < a[5]\n        and a[5] + 1 < a[6]\n        and a[6] + 1 < a[7]\n        and a[7] + 1 < a[8]\n    ):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    if inputs[0] >= inputs[1]:\n        return '-1'\n    return str(solution_dp(inputs[0], inputs[1]))\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input\n    >>> solution('''5 4\n   ... 5 6\n   ... 10 -2\n   ... 8 -1\n   ... ''')\n    3\n    >>> solution('''5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45\n   ... ''')\n    5\n    '''\n\n    rating = stdin.split()\n    n, r = map(int, rating[0:2])\n    ratings = sorted([tuple(map(int, rating[2*i:2*i+2])) for i in range(n)], key=lambda x: x[0])\n    if n==1:\n        return int(ratings[0][1]>=0)\n    # for each of the n people\n    for i in range(n):\n        if ratings[i][1] < 0:\n            return 1\n    # count the total number of project\n    total_size = 0\n    cur_size = 1\n    for i in range(n):\n        if ratings[i][0] < ratings[i+1][0]:\n            cur_size += 1\n            total_size = max(total_size, cur_size)\n        else:\n            cur_size = 1\n    return total_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, r = map(int, stdin.split())\n    projects = list(map(int, stdin.split()))\n\n    # calculate maximum size of possible subset\n    s = max(1, (sum(p + max(p - r, 0) for p in projects) - min(projects)) // (r + 1))\n\n    # return result\n    print(s)\n\n\nsolution(input())\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append([a, b])\n    projects = sorted(projects, key=lambda x: x[0])\n    projects = sorted(projects, key=lambda x: x[1])\n    print(len(set(projects)))\n    return len(set(projects))\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return sum(a)"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,r=map(int,stdin.split())\n    a=[]\n    b=[]\n    for i in range(n):\n        a_i,b_i=map(int,stdin.split())\n        a.append(a_i)\n        b.append(b_i)\n    a=sorted(a)\n    b=sorted(b)\n    ans=0\n    for i in range(n):\n        ans+=1\n        if a[i]<b[i]:\n            ans-=b[i]\n    return str(ans)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [tuple(map(int, stdin.split())) for _ in range(n)]\n    projects.sort(key=lambda p: (-p[0], p[1]))\n    return str(len(set([p[0] for p in projects])))\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    m = 1000000\n    stdin = list(map(int, stdin.split()))\n    A = sorted(stdin, reverse=True)\n    print(A)\n    for i in range(len(A)-1):\n        if A[i]+A[i+1]<0:\n            print(\"Yes\")\n            break\n        elif A[i]+A[i+1]>=0:\n            print(\"No\")\n            break\n    return i\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = list(map(lambda x: list(map(int, x.split())),\n                       [stdin for i in range(n)])\n    answer = 0\n    while projects:\n        curr = projects.pop()\n        if curr[1] >= 0:\n            answer += 1\n            curr[1] += curr[0]\n        else:\n            answer += 1\n        while curr and curr[1] >= 0:\n            curr[0] += curr[1]\n            curr[1] -= 1\n    return answer\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip()\nstdin = stdin.splitlines()\n\nn = int(stdin.pop(0))\n\nnumbers = stdin.pop(0).split()\n\nnumbers = list(map(int, numbers))\n\nvalid_number = False\n\nwhile not valid_number:\n    if len(numbers)!= len(set(numbers)):\n        numbers = numbers[::-1]\n    else:\n        valid_number = True\n\nrows, cols = n, n\nmatrix = [[0] * cols for _ in range(rows)]\n\nfor row_index, row in enumerate(matrix):\n    for col_index, column in enumerate(row):\n        matrix[row_index][col_index] = numbers[col_index + (row_index * cols)]\n\nfor row in matrix:\n    for number in row:\n        if number in row:\n            return \"NO\"\n\nreturn \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(stdin.split()[i]) for i in range(1, n ** 2 + 1)]\n    d = {}\n\n    # # a = a + a\n    # for x in a:\n    #     d[x] = d.get(x, 0) + 1\n\n    # a = list(dict.fromkeys(a))\n    # print(a)\n    # print(d)\n\n    if not a or len(a)!= len(set(a)):\n        print(\"NO\")\n        return\n    a.sort()\n    a = sorted(a)\n    # print(a)\n    # print(a)\n    # print(d)\n\n    # print(len(a))\n    # print(len(set(a)))\n\n    # print(a)\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1]!= 1:\n            print(\"NO\")\n            return\n\n    print(a)\n    print(a)\n    # print(len(a))\n    # print(len(set(a)))\n    #\n    # print(a)\n    # print(len(a))\n\n    # if not a or len(a)!= len(set(a)):\n    #     print(\"NO\")\n    #     return\n    # a = sorted(list(set(a)))\n    # print(a)\n    # print(a)\n    # print(len(a))\n\n    # print(a)\n    # print(len(set(a)))\n    # print(len(a))\n    #\n    # print(a)\n    # print(len(set(a)))\n    # print(len(set(a)))\n    # print(len(set(a)))\n    # print(len(set(a)))\n    # print(len(set(a)))\n    # print(len(set(a)))\n\n\n    # for i in range(1, len(a)):\n    #     if a[i] - a[i - 1]!= 1:\n    #         print(\"NO\")\n    #         return\n    # print(\"YES\")\n\n    # print(a)\n    # print(len(set(a)))\n    # if not a or len(a)!= len(set(a)):\n    #     print(\"NO\")\n    #     return\n    # a = sorted(list(set(a)))\n    # print(a)\n    # print(len(a))\n\n    # print(a)\n    # print(len(set(a)))\n    #\n    # print(a)\n    # print(len(set(a)))\n    # print(len(set(a)))\n    #\n    # print(a)\n    # print(len(set(a)))\n    # print(len(set(a)))\n    #\n    # print(a)\n    # print(len(set(a)))\n    # print(len(set(a)))\n    # print(len(set(a)))\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = stdin.split('\\n')[1].split()\n    for i in range(len(b)):\n        b[i] = int(b[i])\n    a = [[b[i+j] for i in range(n)] for j in range(n)]\n    print(solution(stdin))\n    return a\n\nsolution(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    p = []\n    for _ in range(n):\n        p.append(stdin.split(\" \"))\n\n    for i in range(n):\n        for j in range(n):\n            if p[i][j] == p[j][i]:\n                return \"NO\"\n\n    for i in range(n):\n        for j in range(n):\n            if len(p[i])!= len(p[j]):\n                return \"NO\"\n\n    for i in range(n):\n        for j in range(n):\n            p[i][j] = int(p[i][j])\n\n    for i in range(n):\n        for j in range(n):\n            if p[i][j]!= p[j][i]:\n                return \"NO\"\n\n    return \"YES\"\n\nsolution(stdin)\n'''\n\n\n'''\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    for row in range(len(arr) - 1, -1, -1):\n        arr[row] = 1\n        arr[0] = 2\n        for col in range(1, len(arr)):\n            if arr[col] == arr[col - 1]:\n                arr[col] = 1\n            else:\n                arr[col] = 2\n        for col in range(1, len(arr)):\n            if arr[col] == 1:\n                arr[col] = 2\n            else:\n                arr[col] = 1\n        if arr == sorted(arr):\n            for k in range(len(arr)):\n                if arr[k]!= 1:\n                    print(arr[k], end=\" \")\n            return 'YES'\n    return 'NO'\n\n\nsolution(stdin)"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n    try:\n        n = int(stdin)\n    except ValueError:\n        return 'NO'\n    n = n * n\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin.split()[i])\n\n    def reverse_column(col: list) -> list:\n        if n == 1:\n            return col[::-1]\n        return reverse_column(col[:-1]) + col[-1:]\n\n    if all(row == reverse_col for row in map(lambda x: x, a)):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 1 and N < 100:\n        # put numbers into matrix\n        input = stdin.split()\n        matrix = []\n        for i in range(N):\n            numbers = []\n            for j in range(N):\n                numbers.append(int(input[i * N + j]))\n            matrix.append(numbers)\n        # check if it is palindrome\n        is_palindrome = True\n        for i in range(N):\n            for j in range(N):\n                if i < j:\n                    if matrix[i][j]!= matrix[j][i]:\n                        is_palindrome = False\n        # print result\n        if is_palindrome:\n            return \"YES\" + \"\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == 3 else 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = sorted([int(i) for i in stdin.split()])\n    s = []\n    for i, v in enumerate(a):\n        if i == 0:\n            s.append(v)\n            continue\n        if v - s[-1] >= r:\n            s.append(v)\n        else:\n            break\n    return 'YES' if len(s) == n else 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    projects = [map(int, stdin.split()) for _ in range(n)]\n    projects.sort(key=lambda x: (x[0], x[1]))\n    end = n-1\n    for p in projects:\n        if p[1] > projects[end][1] + r:\n            return \"NO\"\n        elif p[0] < projects[end][0]:\n            return \"NO\"\n        end -= 1\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, r = int(lines[0]), int(lines[1])\n    projects = []\n    for i in range(2, 2 + n):\n        projects.append(tuple(map(int, lines[i].split())))\n\n    projects.sort(key=lambda t: t[1], reverse=True)\n\n    for i in range(1, n):\n        rating_diff = projects[i][1] - projects[i - 1][1]\n        if rating_diff <= 0:\n            return 'NO'\n        if projects[i][0] <= r:\n            return 'NO'\n        if r < projects[i][0]:\n            r = projects[i][0]\n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [(int(i), -int(j)) for i, j in zip(stdin.split()[::2], stdin.split()[1::2])]\n    # [(i, -j) for i, j in zip(stdin.split()[::2], stdin.split()[1::2])]\n    # [(i, -j) for i, j in zip(stdin.split()[::2], stdin.split()[1::2])]\n    # [(i, -j) for i, j in zip(stdin.split()[::2], stdin.split()[1::2])]\n    projects.sort()\n    for i in range(1, n):\n        if projects[i][1] < projects[i-1][1]:\n            return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_completed(rating):\n        return any(rating >= x and rating <= y for x, y in projects)\n\n    def change_rating(rating, change):\n        return max(0, rating - change)\n\n    n, r = map(int, stdin.split())\n    projects = sorted((map(int, stdin.split()), change), reverse=True)\n\n    def all_possible_orders():\n        for project in projects:\n            yield project\n\n    for project in all_possible_orders():\n        if not is_completed(project[0]):\n            continue\n        rating = change_rating(project[0], project[1])\n        if rating >= 0:\n            break\n    else:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, b):\n        s = a + b\n        if s < 0:\n            return False\n        elif s > 0:\n            return True\n        else:\n            return True\n\n    n, r = map(int, input().split())\n    arr = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        arr.append((a, b))\n    arr.sort(key=lambda x: x[0])\n    i = 1\n    while i < n:\n        if check(arr[i-1][1], arr[i][1]) == False:\n            return \"NO\"\n        i += 1\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projs.append((a, b))\n\n    assert projs[0][0] == projs[0][1]\n\n    sum = projs[0][0]\n    for a, b in projs:\n        sum = max(sum + a, b)\n        if sum < 0:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, r = stdin.split()\n    r = int(r)\n    n = int(input())\n    projects = list(map(lambda x: int(x.strip()), stdin.split()))\n    projects.sort()\n    print(\"YES\" if r < min(projects) else \"NO\")"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    if n == 0 or m == 0 or d <= 0:\n        return 'NO'\n    c = sorted(list(map(int, stdin.split())))\n    if n + 1!= sum(c):\n        return 'NO'\n    x = c.index(c[0])\n    res = [[] for _ in range(n+1)]\n    res[0] = [0]\n    for i in range(1, d + 1):\n        for j in range(x, n - i + 1):\n            res[i].append(res[i-1][j] + 1)\n    if res[d] == c:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    n += 2\n    if n % 2 == 0:\n        print('NO')\n        return\n    result = []\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            result.append(i)\n            continue\n        if i + d <= n:\n            result.append(i + d)\n        if i - d >= 0:\n            result.append(i - d)\n    if n == 1:\n        print('YES')\n        print(*result)\n    else:\n        print('YES')\n        print(*result)\n        for i in range(1, n - 1):\n            if i + c[i] <= n - 1 and i - c[i] >= 0:\n                result[i] = i - c[i]\n        print(*result)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, d, *c] = list(map(int, stdin.split()))\n    c = list(c)\n    c.sort()\n    res = [-1] * n\n    i = 0\n    while i + d <= n:\n        res[i + d - 1] = c.index(d) + 1\n        i += 1\n    print(res)\n    return \"YES\" if all(res[i] >= 0 and res[i + 1] >= 0 for i in range(n - 1)) else \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n\n    if n + 1!= n + d:\n        return \"NO\"\n\n    if n + 1 > n + m:\n        return \"YES\"\n\n    if (n + 1 - d) + d >= n:\n        return \"YES\"\n\n    if n + 1 > n + 1:\n        return \"YES\"\n\n    c = list(map(int, stdin.split()))\n    a = [0] * (n + 1)\n    b = a[:]\n    for c_i in c:\n        if a[c_i]!= 0:\n            a = b[:]\n            break\n        for i in range(1, c_i):\n            a[i] = 1\n            b[i] = 1\n        for j in range(c_i, n + 1):\n            a[j] = b[j] = 1\n        if a == b:\n            break\n    else:\n        return \"NO\"\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, *c = list(map(int, stdin.split()))\n    return \"YES\" if n!= 0 and n + 1!= n + 1 and m and max(c) <= n and (n + 1) % 2!= 0 else \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = (int(x) for x in stdin.split())\n    return 'YES' if is_possible(n, m, d, c) else 'NO'\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if answer(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, *c = map(int, stdin.split())\n    platforms = [i for i in range(1, n+1) if i not in c]\n    if len(platforms) < n - d:\n        return 'NO'\n\n    jumps = [[] for _ in range(n)]\n    for i, p in enumerate(platforms):\n        if i+d >= len(platforms):\n            break\n        for j in range(1, d+1):\n            if p+j >= len(platforms):\n                break\n            jumps[p+j].append(i+1)\n\n    for i, p in enumerate(platforms):\n        if i+d >= len(platforms):\n            break\n        for j in range(1, d+1):\n            if p+j >= len(platforms):\n                break\n            for k in range(1, d+1):\n                if p+j+k >= len(platforms):\n                    break\n                jumps[p+j].append(i+1)\n\n    for i, p in enumerate(platforms):\n        if i+d >= len(platforms):\n            break\n        for j in range(1, d+1):\n            if p+j >= len(platforms):\n                break\n            for k in range(1, d+1):\n                if p+j+k >= len(platforms):\n                    break\n                jumps[p+j].append(i+1)\n\n    return 'YES' if jumps == [[] for _ in range(n)] else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n    if n + 1 > m:\n        return \"NO\"\n    c = list(map(int, stdin.split()))\n    previous_platform = 0\n    def get_positions(positions):\n        return {i + 1 for i in range(previous_platform, max(c) + 1)}\n    while True:\n        platforms = {i for i in range(1, m + 1) if c[i - 1] <= d}\n        if not platforms or previous_platform >= max(c):\n            return \"YES\"\n        previous_platform = max(platforms)\n        positions = get_positions(c)\n        if len(positions & platforms) > 0:\n            return \"YES\"\n\n'''\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    c = c + c\n    c.sort()\n    if (c[-1] == n + 1 or c[0] == 0) and c[-1] - c[0] == n:\n        return \"YES\"\n    res = []\n    if c[0] == 0:\n        res = list(range(c[0], c[0] + d))\n    else:\n        res = list(range(c[0] - d, c[0]))\n    for i in range(1, m):\n        if c[i] - c[i - 1] > d:\n            res.append(0)\n            res.append(c[i - 1])\n            res.append(c[i])\n        else:\n            res.append(c[i - 1])\n            res.append(c[i - 1] + d)\n            res.append(c[i])\n    if c[-1] == n + 1:\n        res.append(n + 1)\n    return \"YES\" if len(res) == len(set(res)) else \"NO\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    for l in range(len(s)):\n        s = s[1:] + s[:1]\n        if isSubsequence(s, t):\n            return str(l)\n    return str(0)\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s = list(s)\n    i = 0\n    while i < len(s) and s[i] == t[0]:\n        i += 1\n    j = i - 1\n    while j < len(s) and s[j] == t[0]:\n        j += 1\n    if j == len(s):\n        return 0\n    return j - i"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin.split(' ')[1]\n    n = len(t)\n    m = len(s)\n\n    d = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for j in range(1, n + 1):\n        d[0][j] = 0\n    for i in range(1, m + 1):\n        d[i][0] = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                d[i][j] = d[i - 1][j - 1] + 1\n            else:\n                d[i][j] = max(d[i - 1][j], d[i][j - 1])\n    #print(d)\n    return d[m][n]"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    for i in range(1, l + 1):\n        for j in range(0, l - i + 1):\n            s_tmp = s[j:j + i]\n            if all(s_tmp[k]!= s[k] for k in range(i)):\n                if len(s_tmp) == l:\n                    return i\n    return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    h = len(s)\n    if h == 0 or len(t) == 0:\n        return 0\n    res = 0\n    for i in range(len(t)):\n        found = True\n        for j in range(h):\n            if s[j] == t[i]:\n                if j == h - 1:\n                    found = False\n                    break\n                else:\n                    s = s[:j] + s[j + 1:]\n                    break\n        if found:\n            res = max(res, len(s))\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    s = inp[0]\n    t = inp[1]\n    length = len(s)\n    res = 0\n    for i in range(length-1, -1, -1):\n        if s[i] == t[0]:\n            l = 0\n            for j in range(length):\n                if j!= i:\n                    if s[j] == t[l]:\n                        l += 1\n            res = max(l, res)\n    return res"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([char for char in stdin.lower() if char not in set(stdin.lower())])\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = stdin[0]\n    t = stdin[1]\n    return max(0, len(s)-len(t))\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[::-1]\n\n    if t in s:\n        substring_length = 0\n        for i in range(len(t)):\n            if t[i:] in s:\n                substring_length = max(substring_length, i+1)\n\n        return substring_length\n    else:\n        return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if ''.join(sorted(s)) == ''.join(sorted(s)):\n        return 0\n    if len(s) == 1:\n        return 0\n    s = list(s)\n    l, r = 0, len(s)\n    while r > l:\n        if all(s[l] >= s[i] for i in range(l, r)):\n            l += 1\n        r -= 1\n    return max(len(s) - len(s[l:]), len(s[:l]))\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    x = float(stdin[0])\n    \n    factors = 0\n    for i in range(1, 6):\n        if x % i == 0:\n            factors += 1\n    \n    return f\"{factors} {factors + 1}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # import ipdb; ipdb.set_trace()\n    x = float(stdin)\n\n    if x < 1:\n        return \"Error\"\n\n    if x < 5:\n        return str(int(x*10))\n    elif x < 10:\n        return str(int(x*10)+1)\n    elif x < 20:\n        return str(int(x*10)+2)\n    elif x < 30:\n        return str(int(x*10)+3)\n    elif x < 40:\n        return str(int(x*10)+4)\n    else:\n        return str(int(x*10)+5)\n    \n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x**(1/3))\n    b = int(x**(1/2))\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \"\"\"\n    x = n % 1\n    y = x + 0.5\n    x = int(y)\n    y = (n - x) / 1.5\n    y = int(y)\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    c = str(x)[2]\n    a = c.count(\".\")\n    if int(x) >= 5 and a >= 2:\n        return \"2 2\"\n    elif int(x) >= 5 and a >= 1:\n        return \"10 2\"\n    elif int(x) < 5:\n        return \"2 2\"\n    elif int(x) >= 2:\n        return \"10 2\"\nprint(solution(\"1.200000\"))\nprint(solution(\"2.572479\"))\nprint(solution(\"4.024922\"))\nprint(solution(\"4.0247999\"))"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    for i in range(len(stdin)):\n        stdin[i] = float(stdin[i])\n    \n    a = stdin[0]\n    b = stdin[1]\n    #print(a,b)\n    #print(a*b)\n    if a == b:\n        return str(int(a)) +'' + str(int(b))\n    else:\n        return str(int(a)) +'' + str(int(b)) + '\\n' + str(int(a)) +'' + str(int(b))\n\n    #print(len(stdin))\n    #print(len(stdin[0]))\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str,range(min(map(float,stdin.split())),max(map(float,stdin.split()))+1)))\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    d = x - math.floor(x)\n    a = math.ceil(x) + d\n    b = math.floor(x) - d\n    print(a, b)\n    return str(a) +'' + str(b)\n\n\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    decimal = float(stdin)\n    A = 5\n    B = 2\n    while A < 1:\n        A = int(A * 10)\n        print(A)\n    return str(A) + str(B)\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = float(stdin[0])\n    if x >= 1 and x < 6:\n        return f'1 2'\n    if x >= 6 and x < 11:\n        return f'3 2'\n    if x >= 11 and x < 16:\n        return f'9 9'\n    if x >= 16 and x < 21:\n        return f'1 3'\n    if x >= 21 and x < 26:\n        return f'3 3'\n    if x >= 26 and x < 31:\n        return f'9 9'\n    if x >= 31 and x < 36:\n        return f'1 4'\n    if x >= 36 and x < 41:\n        return f'3 4'\n    if x >= 41 and x < 46:\n        return f'9 9'\n    if x >= 46 and x < 51:\n        return f'1 5'\n    if x >= 51 and x < 56:\n        return f'3 5'\n    if x >= 56 and x < 61:\n        return f'9 9'\n    if x >= 61 and x < 66:\n        return f'1 6'\n    if x >= 66 and x < 71:\n        return f'3 6'\n    if x >= 71 and x < 76:\n        return f'9 9'\n    if x >= 76 and x < 81:\n        return f'1 7'\n    if x >= 81 and x < 86:\n        return f'3 7'\n    if x >= 86 and x < 91:\n        return f'9 9'\n    if x >= 91 and x < 96:\n        return f'1 8'\n    if x >= 96 and x < 101:\n        return f'3 8'\n    if x >= 101 and x < 106:\n        return f'9 9'\n    if x >= 106 and x < 111:\n        return f'1 9'\n    if x >= 111 and x < 116:\n        return f'3 9'\n    if x >= 116 and x < 121:\n        return f'9 9'\n    if x >= 121 and x < 126:\n        return f'1 10'\n    if x >= 126 and x < 131:\n        return f'3 10'\n    if x >= 131 and x < 136:\n        return f'9 9'\n    if x >= 136 and x < 141:\n        return f'1 11'\n    if x >= 141 and x < 146:\n        return f'3 11'\n    if x >= 146 and x < 151:\n        return f'9 9'\n    if x >= 151 and x < 156:\n        return f'1 12'\n    if x >= 156 and x < 161:\n        return f'3 12'\n    if x >= 161 and x < 166:\n        return f'9 9'\n    if x >= 166 and x < 171:\n        return f'1 13'\n    if x >= 171 and x < 176:\n        return f'3 13'\n    if x >= 176 and x < 181:\n        return f'9 9'\n    if x >= 181 and x < 186:\n        return f'1 14'\n    if x >= 186 and x < 191:\n        return f'3 14'\n    if x >= 191 and x < 196:\n        return f'9 9'\n    if x >= 196 and x < 201:\n        return f'1 15'\n    if x >= 201 and x < 206:\n        return f'3 15'\n    if x >= 206 and x < 211:\n        return f'9 9'\n    if x >= 211 and x < 216:\n        return f'1 16'\n    if x >= 216 and x < 221:\n        return f'3 16'\n    if x >= 221 and x < 226:\n        return f'9 9'\n    if x >= 226 and x < 231:\n        return f'1 17'\n    if x >= 231 and x < 236:\n        return f'3 17'\n    if x >= 236 and x < 241:\n        return f'9 9'\n    if x >= 241 and x < 246:\n        return f'1 18'\n    if x >= 246 and x < 251:\n        return f'3 18'\n    if x >= 251 and x < 256:\n        return f'9 9'\n    if x >= 256 and x < 261:\n        return f'1 19'\n    if x >= 261 and x < 266:\n        return f'3 19'\n    if x >= 266 and x < 271:\n        return f'9 9'\n    if x >= 271 and x < 276:\n        return f'1 20'\n    if x >= 276 and x < 281:\n        return f'3 20'\n    if x >= 281 and x < 286:\n        return f'9 9'\n    if x >= 286 and x < 291:\n        return f'1 21'\n    if x >= 291 and x < 296:\n        return f'3 21'\n    if x >= 296 and x < 301:\n        return f'9 9'\n    if x >= 301 and x < 306:\n        return f'1 22'\n    if x >= 306 and x < 311:\n        return f'3 22'\n    if x >= 311 and x < 316:\n        return f'9 9'\n    if x >= 316 and x < 321:\n        return f'1 23'\n    if x >= 321 and x < 326:\n        return f'3 23'\n    if x >= 326 and x < 331:\n        return f'9 9'\n    if x >= 331 and x < 336:\n        return f'1 24'\n    if x >= 336 and x < 341:\n        return f'3 24'\n    if x >= 341 and x < 346:\n        return f'9 9'\n    if x >= 346 and x < 351:\n        return f'1 25'\n    if x >= 351 and x < 356:\n        return f'3 25'\n    if x >= 356 and x < 361:\n        return f'9 9'\n    if x >= 361 and x < 366:\n        return f'1 26'\n    if x >= 366 and x < 371:\n        return f'3 26'\n    if x >= 371 and x < 376:\n        return f'9 9'\n    if x >= 376 and x < 381:\n        return f'1 27'\n    if x >= 381 and x < 386:\n        return f'3 27'\n    if x >= 386 and x < 391:\n        return f'9 9'\n    if x >= 391 and x < 396:\n        return f'1 28'\n    if x >= 396 and x < 401:\n        return f'3 28'\n    if x >= 401 and x < 406:\n        return f'9 9'\n    if x >= 406 and x < 411:\n        return f'1 29'\n    if x >= 411 and x < 416:\n        return f'3 29'\n    if x >= 416 and x < 421:\n        return f'9 9'\n    if x >= 421 and x < 426:\n        return f'1 30'\n    if x >= 426 and x < 432:\n        return f'3 30'\n    if x >= 432 and x < 437:\n        return f'9 9'\n    if x >= 437 and x < 441:\n        return f'1 31'\n    if x >= 441 and x < 446:\n        return f'3 31'\n    if x >= 446 and x < 451:\n        return f'9 9'\n    if x >= 451 and x < 456:\n        return f'1 32'\n    if x >= 456 and x < 461:\n        return f'3 32'\n    if x >= 461 and x < 466:\n        return f'9 9'\n    if x >= 466 and x < 471:\n        return f'1 33'\n    if x >= 471 and x < 476:\n        return f'3 33'\n    if x >= 476 and x < 481:\n        return f'9 9'\n    if x >= 481 and x < 486:\n        return f'1 34'\n    if x >= 486 and x < 491:\n        return f'3 34'"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_vertices, diameter, degree = map(int, stdin.split())\n    if num_of_vertices < 3:\n        return \"NO\"\n    if num_of_vertices > 20:\n        return \"NO\"\n    diameter = diameter + 1\n    degree_of_nodes = [0] * (num_of_vertices + 1)\n    for i in range(1, num_of_vertices + 1):\n        degree_of_nodes[i] = degree_of_nodes[i - 1] + 1\n    for i in range(num_of_vertices - 2, 0, -1):\n        for j in range(i + 1, num_of_vertices):\n            if degree_of_nodes[i] + degree_of_nodes[j] <= diameter:\n                degree_of_nodes[j] = degree_of_nodes[i] + degree_of_nodes[j]\n    print(degree_of_nodes)\n    if degree_of_nodes[1] > degree:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return \"YES\" if k < n - 1 else \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    if n - 1 <= d <= n * k:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if k == 0 or n == 1 or d >= n:\n        return 'NO'\n    if d >= n * (n - 1) // 2:\n        return 'NO'\n    if n == 2 and d == 1:\n        return 'YES'\n\n    graph = [[] for _ in range(n)]\n    for i in range(1, n):\n        graph[i].append(i + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i!= j:\n                paths = 0\n                for k in graph[i]:\n                    for l in graph[j]:\n                        if (k, l) not in graph:\n                            paths += 1\n                if paths < k + l - 1:\n                    return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k >= n or d >= n * (n - 1) / 2:\n        return \"NO\"\n    else:\n        tree = [[] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if (i, j) not in tree and (j, i) not in tree:\n                    if not check(i, j, tree):\n                        return \"NO\"\n        # print(tree)\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    if n - 1 < d:\n        print('NO')\n        return\n    if n * (n - 1) / 2 < k:\n        print('NO')\n        return\n    if n < 5:\n        return\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not is_connected(n, i, j):\n                return\n            count += 1\n    print('YES')\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if not is_connected(n, i, j):\n                print(i, j)\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    from math import sqrt, ceil\n    if n > d * (d + 1) / 2:\n        return \"NO\"\n    if n < d * d:\n        return \"NO\"\n    if d < k:\n        return \"NO\"\n\n    num_vertex = ceil(sqrt(n))\n    num_vertex = 1 if num_vertex % 2 else num_vertex\n    num_vertex = num_vertex * 2\n\n    edges = [[] for _ in range(num_vertex)]\n    degree = [0] * num_vertex\n    tree = []\n\n    for _ in range(n):\n        x, y = map(int, input().split())\n        edges[x - 1].append(y - 1)\n        edges[y - 1].append(x - 1)\n\n    for i in range(num_vertex):\n        if len(edges[i]) > 1 and degree[i] < k:\n            tree.append(i)\n        degree[i] = len(edges[i])\n\n    parent = [0] * num_vertex\n    par = [[] for _ in range(num_vertex)]\n    cnt = 0\n    for i in range(num_vertex):\n        if degree[i] == 0:\n            continue\n        if len(tree) == 0:\n            return \"NO\"\n        root = tree[0]\n        parent[i] = root\n        tree.remove(root)\n        for j in edges[root]:\n            if i == j:\n                continue\n            if degree[j] >= degree[i]:\n                cnt += 1\n            if degree[j] < degree[i]:\n                par[i].append(j)\n                if degree[j] == 0:\n                    par[j] = i\n                    tree.remove(j)\n        if degree[root] == 0:\n            return \"NO\"\n    if cnt > k:\n        return \"NO\"\n    if len(tree) > 0:\n        return \"NO\"\n    for i in range(num_vertex):\n        for j in par[i]:\n            if degree[i] >= degree[j]:\n                cnt += 1\n        if degree[i] < degree[par[i]]:\n            cnt += 1\n\n    if cnt > k:\n        return \"NO\"\n\n    cur = 0\n    while True:\n        if len(par[cur]) == 0:\n            break\n        for i in par[cur]:\n            if degree[i] < degree[cur]:\n                cur = i\n        tree.append(cur)\n        for i in par[cur]:\n            if degree[i] > degree[cur]:\n                par[i].remove(cur)\n        if degree[cur] == 0:\n            break\n        cur = par[cur]\n\n    for i in range(num_vertex):\n        for j in par[i]:\n            if degree[i] > degree[j]:\n                par[i].append(j)\n\n    if len(tree)!= n - 1:\n        return \"NO\"\n\n    cnt = 0\n    for i in tree:\n        if degree[i] > k:\n            cnt += 1\n    if cnt > k:\n        return \"NO\"\n\n    for i in tree:\n        print(i + 1, end=\" \")\n        for j in edges[i]:\n            print(j + 1, end=\" \")\n        print()\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given three integers $n$, $d$ and $k$.\n    Your task is to construct an undirected tree on $n$ vertices with diameter $d$ and degree of each vertex at most $k$, or say that it is impossible.\n    An undirected tree is a connected undirected graph with $n - 1$ edges.\n    Diameter of a tree is the maximum length of a simple path (a path in which each vertex appears at most once) between all pairs of vertices of this tree.\n    Degree of a vertex is the number of edges incident to this vertex (i.e. for a vertex $u$ it is the number of edges $(u, v)$ that belong to the tree, where $v$ is any other vertex of a tree).\n\n    Input\n    The first line of the input contains three integers $n$, $d$ and $k$ ($1 \\le n, d, k \\le 4 \\cdot 10^5$).\n\n    Output\n    If there is no tree satisfying the conditions above, print only one word \"NO\" (without quotes).\n    Otherwise in the first line print \"YES\" (without quotes), and then print $n - 1$ lines describing edges of a tree satisfying the conditions above. Vertices of the tree must be numbered from $1$ to $n$. You can print edges and vertices connected by an edge in any order. If there are multiple answers, print any of them.1\n\n    '''\n    stdin = stdin.strip().split('\\n')\n    n, d, k = map(int, stdin[0].split())\n    res = []\n    if d > (n - 1) or k > (n - 1):\n        res.append('NO')\n    else:\n        tree = {i: [] for i in range(1, n + 1)}\n        if n == 2:\n            res.append('YES')\n            res.append('')\n            return\n        for i in range(2, n + 1):\n            for j in range(i - 1):\n                tree[i].append(j + 1)\n        parent = {}\n        for k in range(1, n + 1):\n            parent[k] = -1\n        node_set = set()\n        for k in range(2, n + 1):\n            if len(tree[k]) > d:\n                node_set.add(k)\n        if node_set:\n            res.append('NO')\n            res.append('')\n        else:\n            for k in range(2, n + 1):\n                if k not in node_set:\n                    node_set.add(k)\n                    continue\n                if parent[k]!= -1:\n                    continue\n                parent[k] = k - 1\n                res.append('YES')\n                res.append(str(k) +'')\n                queue = [k]\n                while queue:\n                    cur = queue.pop(0)\n                    for n in tree[cur]:\n                        if parent[n] == -1:\n                            queue.append(n)\n                            parent[n] = cur\n                            res.append(str(n) +'')\n        while res[0] == 'YES':\n            res.pop(0)\n            res.pop(0)\n        if len(res) == 1:\n            return\n        else:\n            for i in range(len(res)):\n                res[i] = res[i].rstrip()\n            res = '\\n'.join(res)\n            return res\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k > 4 * 10 ** 5:\n        return \"NO\"\n    if d > max(n - 1, 3 * k):\n        return \"NO\"\n    if d <= 0:\n        return \"NO\"\n    # d = max(d, k)\n\n    def find(i):\n        if parent[i]!= i:\n            parent[i] = find(parent[i])\n        return parent[i]\n\n    def union(i, j):\n        parent_i, parent_j = find(i), find(j)\n        if parent_i == parent_j:\n            return\n        if rank[parent_i] < rank[parent_j]:\n            parent[parent_j] = parent_i\n        elif rank[parent_i] > rank[parent_j]:\n            parent[parent_i] = parent_j\n        else:\n            parent[parent_i] = parent_j\n            rank[parent_j] += 1\n\n    parent = list(range(n + 1))\n    rank = list(range(n + 1))\n    groups = {}\n    for i in range(1, n + 1):\n        groups[i] = []\n    # print(parent)\n    for i in range(n - 1):\n        v1, v2 = map(int, input().split())\n        if v1 not in groups:\n            groups[v1] = [v2]\n        elif v2 not in groups:\n            groups[v2] = [v1]\n        else:\n            groups[v1].append(v2)\n            groups[v2].append(v1)\n    # print(groups)\n    for i in range(1, n + 1):\n        groups[i] = sorted(groups[i])\n    # print(groups)\n    edges = []\n    vertices = []\n    for i in range(1, n + 1):\n        for j in groups[i]:\n            # print(i, j)\n            edges.append((i, j))\n        vertices.append(i)\n    # print(vertices)\n    # print(edges)\n    for i, j in edges:\n        # print(i, j)\n        if find(i)!= find(j):\n            union(i, j)\n    # print(parent)\n    diameter = 0\n    for i in range(1, n + 1):\n        # print(i)\n        if find(i) == find(i - 1):\n            # print(i, i - 1)\n            diameter = max(diameter, 2)\n            continue\n        connected_vertices = []\n        while find(i)!= find(i - 1):\n            connected_vertices.append(i)\n            i = find(i)\n        # print(connected_vertices)\n        diameter = max(diameter, len(connected_vertices) + 1)\n    # print(parent)\n    # print(rank)\n    # print(groups)\n    return \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The string is guaranteed to be at least one character long, and all\n    characters are 0 or 1.\n    \"\"\"\n    a, b, x = map(int, stdin.split())\n    zeros, ones, ind = a, b, 0\n    while ones > 0:\n        ind += x\n        zeros -= 1\n        ones += 1\n    s = \"\".join([str(0) if x == 0 else str(1) for x in range(a + b)])\n    print(s[:ind] + s[ind:])\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(n) for n in stdin.split())\n    #return\n    s = []\n    for i in range(a+b):\n        s.append(\"0\" if i < x else \"1\")\n    for i in range(a+b-1):\n        s.append(\"1\")\n        s.append(\"0\")\n    return \"\".join(s)\n\nsolution(input())\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()\n    a,b,x = int(t[0]),int(t[1]),int(t[2])\n    # print(f\"a,b,x are {a} {b} {x}\")\n    s=\"\"\n    for i in range(1,a+b+1):\n        s+=str(i%2)\n    for i in range(a):\n        s+=\"0\"\n    for i in range(b):\n        s+=\"1\"\n    if x in range(a,a+b):\n        s=s[:x]+\"1\"+s[x+1:]\n    elif x in range(a+b,a+b+a):\n        s=s[:x-a]+\"1\"+s[x+a:]\n    else:\n        s=s[:x-a]+\"1\"+s[x-a+1:]\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split(' ')))\n    if x < a:\n        print(0)\n    elif x == a:\n        print(1)\n    else:\n        if x - a < b:\n            b = x - a\n        else:\n            b = a\n        string = ''\n        for i in range(a, a + b + 1):\n            if i % 2 == 1:\n                string += '1'\n            else:\n                string += '0'\n        for i in range(a + b, x):\n            string += '0'\n        for i in range(x + 1, x + b + 1):\n            string += '1'\n        print(string)\nsolution(input())"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,x = map(int, stdin.split())\n    res = \"\"\n    for i in range(1,x+1):\n        res += \"1\" if i < a else \"0\"\n    for i in range(x+1,x+a+b):\n        res += \"0\"\n    for i in range(x+a+b+1,x+a+b+b):\n        res += \"1\"\n    return res\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    num = 1\n    for i in range(1,a+b+1):\n        if i >= a:\n            num *= 2\n        else:\n            num = num << 1\n    print(bin(num)[2:])\n\nsolution(input())\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    a,b,x = stdin\n    n = a + b\n    s = '0'\n    #print(s)\n    for i in range(n):\n        if i < x:\n            s += '1'\n        else:\n            s += '0'\n    #print(s)\n    return s\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, a, b, x = map(int, stdin.split())\n  return (\"\".join([\"0\" if i < x else \"1\" for i in range(n - a + 1)]) +\n          \"\".join([\"0\" if i >= n - x - b else \"1\" for i in range(x, x + b)]) +\n          \"\".join([str(i % 2) for i in range(n - a + 1, n)])\n          )\n\nsolution(\"2 2 1\")\nsolution(\"3 3 3\")\nsolution(\"5 3 6\")"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 1\n   ... ''')\n    '1100'\n    >>> solution('''3 3 3\n   ... ''')\n    '101100'\n    >>> solution('''5 3 6\n   ... ''')\n    '01010100'\n    \"\"\"\n    a, b, x = map(int, stdin.split())\n    total = a + b\n    if total!= x:\n        raise ValueError\n    if x <= a:\n        raise ValueError\n    if x <= b:\n        raise ValueError\n    if a + b + x < total:\n        raise ValueError\n    if a + b + x == total:\n        raise ValueError\n    ones = a\n    zeros = total - (a + b)\n    while ones + zeros!= x:\n        if ones < zeros:\n            ones += 1\n        else:\n            zeros -= 1\n    return '{:036b}'.format(ones) + '{:036b}'.format(zeros) + '{:036b}'.format(x - ones - zeros)\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    s_arr = [\"a\", \"b\", \"c\"]\n\n    ans = \"NO\"\n\n    for i in range(n):\n        s_arr.sort()\n        for j in range(len(s)):\n            if s[j]!= s_arr[i]:\n                break\n        else:\n            ans = \"YES\"\n            break\n    return ans\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    s = list(s)\n    t = list(t)\n\n    for i in range(1, n + 1):\n        if s.count(chr(97 + i)) == 0:\n            if t.count(chr(97 + i)) == 0:\n                if s.count(chr(97 + i)) == 0:\n                    if t.count(chr(97 + i)) == 0:\n                        return 'NO'\n    for i in range(n):\n        if s.count(chr(97 + i)) == 0:\n            if t.count(chr(97 + i)) == 0:\n                if s.count(chr(97 + i)) == 0:\n                    if t.count(chr(97 + i)) == 0:\n                        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"1 2 3 4 5 6 7 8 9\"\n    a = stdin.split()\n    n = int(a[0])\n    s = a[1]\n    t = a[2]\n    s_chars = \"abc\"\n    t_chars = \"abc\"\n    for i in range(n):\n        if s[i] not in s_chars:\n            return \"NO\"\n        if t[i] not in t_chars:\n            return \"NO\"\n        s_chars.remove(s[i])\n        t_chars.remove(t[i])\n    print(\"YES\", s_chars, t_chars, sep=\"\\n\")\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    n = len(s)\n    m = len(t)\n    \n    if n + m!= len(s + t):\n        return \"NO\"\n    \n    l = len(s) * 2\n    while l > len(t):\n        t += t\n        l = len(s) * 2\n    \n    res = ''\n    for i in range(l):\n        if s[i % n] == t[i % m]:\n            res += s[i % n]\n        else:\n            res += t[i % m]\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # ab, bc\n    a = stdin.strip()\n    b = stdin.strip()\n    # a, b, ac\n    if a == b:\n        return \"NO\"\n    res = \"\"\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        if a[0] == b[0] or a[1] == b[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(n):\n        # aacb, bca, cba\n        if a[i]!= b[i]:\n            return \"NO\"\n        if i == n - 1:\n            if a[i - 1] == b[i - 1]:\n                return \"YES\"\n            else:\n                return \"NO\"\n    for i in range(n):\n        # a, b, c, aa, ab, ac\n        if i == n - 1:\n            res += a[i]\n        else:\n            res += a[i]\n        if a[i]!= b[i]:\n            res += a[i]\n        else:\n            res += a[i]\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n    if n > 3:\n        return \"NO\"\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i + j + k!= n:\n                    continue\n                if s[:i] + t[:j] + s[i:] == s[:i] + t[:j] + t[j:] or s[:j] + s[i:] == s[:j] + s[i:] or s[:i] + t[:k] + s[k:] == s[:i] + t[:k] + t[k:]:\n                    return \"YES\" + s + t\n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if n % 3!= 0:\n        print(\"NO\")\n        return\n    a_count = {'a': 0, 'b': 0, 'c': 0}\n    t_count = {'a': 0, 'b': 0, 'c': 0}\n    for char in a:\n        a_count[char] += 1\n    for char in t:\n        t_count[char] += 1\n    if a_count!= t_count:\n        print(\"NO\")\n        return\n    if len(t) > len(a):\n        print(\"NO\")\n        return\n    if any(v > 3 for k, v in a_count.items()):\n        print(\"NO\")\n        return\n    if any(v > 3 for k, v in t_count.items()):\n        print(\"NO\")\n        return\n    print(\"YES\")\n    res = \"\".join(a*n)\n    print(res)\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    res = []\n    ans = []\n    if n % 3 == 0:\n        ans.append('YES')\n        for i in range(n):\n            ans.append(s[i] + t[i] + t[i])\n    elif n % 3 == 1:\n        ans.append('YES')\n        ans.append('YES')\n        for i in range(n):\n            if s[i] == t[i]:\n                ans.append('YES')\n            else:\n                ans.append('NO')\n    elif n % 3 == 2:\n        ans.append('YES')\n        ans.append('YES')\n        ans.append('YES')\n        for i in range(n):\n            if s[i] == t[i] or s[i] == t[i]:\n                ans.append('YES')\n            else:\n                ans.append('NO')\n    if 'YES' in ans:\n        return \"\\n\".join(ans)\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip('\\n')\n    t = stdin.rstrip('\\n')\n    result = ''\n    for i in range(n):\n        if s[i] == t[i]:\n            result = s[i]\n        elif s[i]!= t[i] and t[i]!= s[i]:\n            result = 'NO'\n            break\n    if result == 'NO':\n        return result\n    return result + ''.join([s[i] for i in range(n)])\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1].split()[0]\n    t = stdin[1].split()[1]\n\n    if n == 1:\n        return t if t not in s else \"NO\"\n\n    for i in range(1, n // 3 + 1):\n        if set(s).issubset(set(t)):\n            return \"YES\"\n        if set(t).issubset(set(s)):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n\n    if n == len(set(q)) == 1:\n        return str(q[0])\n\n    for i in range(1, n):\n        q[i] -= q[i - 1]\n\n    for i in range(n - 1, 0, -1):\n        if q[i] == i:\n            break\n\n    for j in range(i, n):\n        q[j] += i\n\n    return''.join(map(str, q))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n    permutation = stdin.pop()\n    \n    return permutation"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_array = list(map(int, stdin.split()))\n    q = sorted(input_array, reverse=True)\n    if n == 1:\n        if input_array[0] == 1:\n            return '1'\n        return '-1'\n    elif n == 2:\n        if input_array[0] == 2:\n            return '2'\n        if input_array[1] == 2:\n            return '3'\n        return '-1'\n    elif n == 3:\n        if input_array[0] == 3:\n            return '3'\n        if input_array[1] == 3:\n            return '4'\n        if input_array[2] == 3:\n            return '5'\n        return '-1'\n    else:\n        for i in range(2, n):\n            if q[0] + 1!= q[i]:\n                break\n        else:\n            return '{} {}'.format(*q)\n        q_mod = q[i:]\n        q_mod.sort(reverse=True)\n        for i in range(2, n - i + 1):\n            if q_mod[0] - i!= q[i - 1]:\n                break\n        else:\n            return '{} {}'.format(*q_mod)\n        q_mod = q_mod[i:]\n        q_mod.sort()\n        for i in range(2, n - i + 1):\n            if q_mod[0] - i!= q[i - 1]:\n                break\n        else:\n            return '{} {}'.format(*q_mod)\n        return '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n\n    def comb(a, b):\n        return a * (a - 1) // 2 + b * (b - 1) // 2\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if comb(i, j) == q[i] - q[j]:\n                print(*[a for a in range(i + 1, j + 1)])\n                return\n\n    if q[-1] == 0:\n        print(*[a for a in range(1, n)])\n        return\n\n    for i in range(n - 1):\n        if q[i] == q[i + 1]:\n            return\n    print(-1)\n    return\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    if n == 1:\n        return \"-\"\n    if n == 2:\n        if q == [1, 1]:\n            return \"1\"\n        else:\n            return \"-\"\n    for i in range(n-2):\n        if q[i+2] - q[i+1] == 1:\n            return f\"{q[i+1]} {q[i+2]}\"\n    return \"-\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    q = q[::-1]\n    p = []\n    for i in range(n-1):\n        p.append((q[i] - 1) % n)\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n\n    if not q:\n        return '-1'\n\n    for i in range(len(q)):\n        if q[i] < 0:\n            return '-1'\n\n    q = sorted(q)\n    if q[0]!= 0:\n        return '-1'\n\n    return''.join(map(str, q))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    q = stdin.split()[1]\n    q = list(map(int, q))\n    if len(q) == 1:\n        return str(1) if q[0] == 1 else str(-1)\n    elif n == 2 and q == [1, 1]:\n        return str(1) if q[0]!= 1 or q[1]!= 2 else str(-1)\n    elif n <= len(q):\n        p = [1] + q\n        p = sorted(p)\n        seen = set()\n        for i in range(1, n):\n            seen.add(p[i])\n            p[i] = p[i-1] + 1\n        if len(seen)!= len(q):\n            return str(1)\n        else:\n            return str(p[n-1])\n    else:\n        return str(1)\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    q.sort()\n    for i in range(1, n):\n        if q[i-1] == q[i]:\n            return str(q[i])\n    return '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    q_diff = map(lambda x, y: x - y, q[:-1], q[1:])\n    q_diff = sorted(set(q_diff))\n    for i in range(len(q_diff)):\n        if q_diff[i] in q:\n            return str(q.index(q_diff[i]))\n    return '-1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    ans = 0\n    for i in range(n):\n        ans += abs(arr[i])\n        if i!= 0:\n            ans += abs(arr[i] - arr[i - 1])\n    return str(ans)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coords = list(map(int, stdin.split()[1:]))\n    moves = []\n    for i in range(n):\n        moves.append((2, 1) if coords[i] % 2 == 0 else (1, 2))\n        if i < n-1:\n            moves.append((1, 1) if coords[i] % 2 == 0 else (1, 2))\n    return len(set(moves))\n\n\nsolution(\"\"\"\n3\n1 2 3\n\"\"\")\n\n\nsolution(\"\"\"\n5\n2 2 2 3 3\n\"\"\")"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n  # the list of coordinates of all chips\n  all_coordinates = list(map(int, stdin.strip().split()))\n  \n  # min_coins = 0\n  # for i in range(0, len(all_coordinates)-1):\n  #   if all_coordinates[i+1] == all_coordinates[i]+2:\n  #     min_coins += 0\n  #   elif all_coordinates[i+1] == all_coordinates[i]-2:\n  #     min_coins += 0\n  #   else:\n  #     min_coins += 1\n  # print(min_coins)\n  # return min_coins\n\n  # sol = 1\n  # for i in range(0, len(all_coordinates)):\n  #   if all_coordinates[i+1] == all_coordinates[i]+1:\n  #     sol *= 2\n  #   elif all_coordinates[i+1] == all_coordinates[i]-1:\n  #     sol *= 2\n  #   else:\n  #     sol += 1\n  # return sol\n  \n  # two options:\n  # 1. just change all the coordinates to the first coordinate and remove the last coordinate\n  # 2. change all the coordinates to the last coordinate and remove the first coordinate\n  # so it is possible to get the solution to all the cases\n  \n  # go back to step 1\n  \n  # if you get to the last coordinate you have a good solution\n  # you need to change the last coordinate\n  # in this case change it to first coordinate and remove the last coordinate\n  # you need to change the last coordinate\n  # in this case change it to second coordinate and remove the first coordinate\n  \n  # go back to step 2\n  # add 1 to the last coordinate\n  # in this case add 2 to the second coordinate\n  # in this case add 1 to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the second coordinate to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the second coordinate to the first coordinate\n  \n  # the idea is to add the last coordinate to the first coordinate and remove the last coordinate\n  # when you go to step 2, change the last coordinate to second coordinate and remove the first coordinate\n  # in this case add 2 to the second coordinate\n  # in this case add 1 to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # the idea is to add the last coordinate to the second coordinate and remove the first coordinate\n  # when you go to step 1, change the last coordinate to first coordinate and remove the second coordinate\n  # in this case add 2 to the first coordinate\n  # in this case add 1 to the second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the second coordinate to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the second coordinate to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the second coordinate to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the first coordinate\n  # in this case change the last coordinate to second coordinate\n  # in this case change the second coordinate to the first coordinate\n  \n  # go back to step 1\n  # if the last coordinate is the same as the first coordinate we need to change the last coordinate to the second coordinate\n  # in this case change the last coordinate to first coordinate\n  # in this case change the first coordinate to second coordinate\n  \n  # go back to step 2\n  # if the last coordinate is the same as the first coordinate we"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    n_chips = input_list[1:]\n    total_coins = 0\n    for i in range(n):\n        for j in range(len(n_chips)):\n            if i == int(n_chips[j]):\n                total_coins += 2\n                n_chips.pop(j)\n                break\n            else:\n                if i + 2 == int(n_chips[j]):\n                    total_coins += 1\n                    n_chips.pop(j)\n                    break\n    return total_coins\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    c = {}\n    for i in range(n):\n        if x[i] in c.keys():\n            c[x[i]] += 1\n        else:\n            c[x[i]] = 1\n\n    ans = 0\n    for key, val in c.items():\n        ans += val * (val - 1) // 2\n\n    return str(ans)"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    moves = 0\n    x.sort()\n    for i in range(n-1):\n        if x[i] == x[i+1]:\n            moves += 1\n        elif x[i] == x[i+1] + 1 or x[i] == x[i+1] - 1:\n            moves += 1\n            x[i+1] = x[i] + 2\n        else:\n            break\n    return moves\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_list = list(map(int, stdin.split()))\n    n_list.sort()\n    result = 0\n    x_current = 0\n    if n_list[0] == 1:\n        return 1\n    else:\n        for i in range(1, n):\n            if x_current == n_list[i]:\n                continue\n            else:\n                result += 1\n                x_current = n_list[i]\n                if result >= n:\n                    return result\n        return result\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 2\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 2 2 2 3 3\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    ans = 0\n    while n > 0:\n        while n > 0 and x[0] == x[1]:\n            ans += 2\n            x[0], x[1] = x[1], x[0]\n            x.pop(0)\n            n -= 2\n        while n > 0 and x[0] == x[1] - 1:\n            ans += 1\n            x[0], x[1] = x[1], x[0]\n            x.pop(0)\n            n -= 1\n        while n > 0 and x[0] == x[1] + 1:\n            ans += 1\n            x[0], x[1] = x[1], x[0]\n            x.pop(0)\n            n -= 1\n    return str(ans)\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_moves = float('inf')\n    visited = set()\n    visited.add((1,1))\n    q = deque()\n    q.append((1,1))\n    while q:\n        r, c = q.popleft()\n        if r == N:\n            min_moves = min(min_moves, r*c)\n            continue\n        if r+1 <= N and (r+1, c) not in visited:\n            q.append((r+1, c))\n            visited.add((r+1, c))\n        if r-1 >= 0 and (r-1, c) not in visited:\n            q.append((r-1, c))\n            visited.add((r-1, c))\n        if c+1 <= N and (r, c+1) not in visited:\n            q.append((r, c+1))\n            visited.add((r, c+1))\n        if c-1 >= 0 and (r, c-1) not in visited:\n            q.append((r, c-1))\n            visited.add((r, c-1))\n    return str(min_moves) if min_moves!= float('inf') else 'no path'"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n        return '135'\n    if n == 136:\n        return '136'\n    if n == 137:\n        return '137'\n    if n == 138:\n        return '138'\n    if n == 139:\n        return '139'\n    if n == 140:\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    count = 0\n    while (n * n!= n):\n        n = n * n\n        count += 1\n    print(count)\n    return '5' if (count <= 5) else '0'"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    rows = 1\n    columns = 1\n    while rows <= N:\n        rows *= 2\n    while columns <= N:\n        columns *= 2\n    if rows >= columns:\n        rows,columns = columns,rows\n    if N in (rows,columns):\n        return \"0\"\n    return str(rows - columns + 1)"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sqs = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            sqs.add((i, j))\n\n    visited = set()\n    cnt = 0\n    stack = [(1, 1)]\n    while stack:\n        new_stack = []\n        for i, j in stack:\n            if (i, j) == (n, n):\n                return cnt\n            visited.add((i, j))\n            if (i, j) in sqs:\n                return 'fail'\n            for a, b in [[i+1, j], [i, j+1]]:\n                if (a, b) in sqs:\n                    return cnt\n                if (a, b) not in visited:\n                    new_stack.append((a, b))\n\n        stack = new_stack\n        cnt += 1\n\n    return 'fail'\n\nimport sys\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum number of moves needed to reach a square that contains the integer N.\n    \"\"\"\n    # minimum number of moves to reach a square that contains N\n    # N is an integer\n    N = int(stdin)\n    # number of moves needed to reach a square that contains N\n    # minimum number of moves needed to reach a square that contains N\n    min_moves = -1\n    # maximum number of moves needed to reach a square that contains N\n    # maximum number of moves needed to reach a square that contains N\n    max_moves = -1\n    # iterate through each square that contains N\n    # calculate minimum number of moves needed to reach that square\n    # if current_moves is lower than min_moves, update min_moves\n    # if current_moves is higher than max_moves, update max_moves\n    for i in range(2, 10):\n        for j in range(2, 10):\n            current_moves = i * j\n            if N == current_moves:\n                min_moves = i + j\n                break\n            elif N < current_moves < N + 10:\n                min_moves = i + j\n                break\n            elif N + 10 <= current_moves < 2 * N + 10:\n                max_moves = i + j\n                break\n    return min_moves if min_moves > -1 else max_moves\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    else:\n        num = str(n)\n        r = 1\n        for i in range(len(num)):\n            r = r * int(num[i])\n        if r == n:\n            return \"0\"\n        else:\n            moves = 0\n            while n > 1:\n                if (r-1) == n:\n                    moves += 1\n                    break\n                else:\n                    moves += 1\n                    n -= 1\n                    r = r // 10\n                    r = r * int(num)\n            return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    if n <= 10:\n        return str(n)\n    m = n\n    while m > 10:\n        m = m // 2\n    if m == 1:\n        return str(m)\n    while m < n:\n        m = m * 2\n        if m > 10:\n            break\n    return str(m)\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split(\" \")[1:])\n    b = map(int, stdin.split(\" \")[1:])\n    a = list(a)\n    b = list(b)\n    def make_dict(lst):\n        d = {}\n        for i, j in enumerate(lst):\n            d[j] = i\n        return d\n    d_a = make_dict(a)\n    d_b = make_dict(b)\n    c = []\n    c.append(0)\n    c.append(0)\n    c.append(0)\n    s = 0\n    e = 0\n    for i in range(n):\n        if e >= len(c):\n            break\n        if a[e] in d_b.keys():\n            c[1] += 1\n        if b[e] in d_a.keys():\n            c[2] += 1\n        e += 1\n    if c[1] == n:\n        c[0] += 1\n    if c[2] == n:\n        c[0] += 1\n    print(c[0], c[1], c[2])\n    return c[0], c[1], c[2]\n\nsolution(input())"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    b = list(map(int,stdin.split()))\n    a = sorted(a,reverse=True)\n    b = sorted(b,reverse=True)\n    x = 0\n    y = n\n    count = 0\n    while x < y:\n        count+=1\n        if a[x] == b[x]:\n            x+=1\n            y-=1\n        else:\n            if a[x]>b[x]:\n                y-=1\n            else:\n                x+=1\n    return count,count\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    cnt = 0\n    while i < n and j < n:\n        if a[i]!= b[j]:\n            if a[i] == a[j]:\n                i += 1\n            elif a[i] < a[j]:\n                cnt += 1\n                i += 2\n            else:\n                cnt += 1\n                j += 2\n        else:\n            i += 1\n            j += 1\n    return str(cnt) +'' + str(cnt + 1)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split(\"\\n\")\n    n = int(input_values[0])\n    a1, a2, a3 = map(int, input_values[1].split())\n    b1, b2, b3 = map(int, input_values[2].split())\n    a_count = 0\n    b_count = 0\n    count = 0\n    while count < n:\n        if (a1 * 2 + a2 * 3 + a3) > (b1 * 2 + b2 * 3 + b3):\n            a_count += 1\n        elif (b1 * 2 + b2 * 3 + b3) > (a1 * 2 + a2 * 3 + a3):\n            b_count += 1\n        count += 1\n    if a_count > b_count:\n        return \"0 \" + str(a_count) + \" \" + str(b_count)\n    else:\n        return \"1 \" + str(a_count) + \" \" + str(b_count)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    takes in input string of numbers\n    returns max and min number of rounds that Alice can win\n    '''\n    count = 0\n    n = int(stdin)\n    a1, a2, a3 = map(int, stdin.split())\n    b1, b2, b3 = map(int, stdin.split())\n    max_a = a1\n    max_b = b1\n    min_a = a1\n    min_b = b1\n    a_index = 0\n    b_index = 0\n    while count < n:\n        if a_index < 3:\n            if a1 < max_a:\n                max_a = a1\n                a_index += 1\n                if a_index == 3:\n                    a1 = max_a\n        else:\n            if a1 > min_a:\n                min_a = a1\n                a_index += 1\n                if a_index == 3:\n                    a1 = min_a\n        if b_index < 3:\n            if b1 < max_b:\n                max_b = b1\n                b_index += 1\n                if b_index == 3:\n                    b1 = max_b\n        else:\n            if b1 > min_b:\n                min_b = b1\n                b_index += 1\n                if b_index == 3:\n                    b1 = min_b\n        count += 1\n    return str(min_a) +'' + str(max_a) +'' + str(min_b) +'' + str(max_b)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  a = list(map(int, stdin.split()[1].split()))\n  b = list(map(int, stdin.split()[2].split()))\n  return '{} {}'.format(min(max(a), max(b)), max(min(a), min(b)))"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rounds, num_of_rock_wins, num_of_scissors_wins, num_of_paper_wins = stdin.split()\n    num_of_rounds = int(num_of_rounds)\n    num_of_rock_wins = int(num_of_rock_wins)\n    num_of_scissors_wins = int(num_of_scissors_wins)\n    num_of_paper_wins = int(num_of_paper_wins)\n    if num_of_rounds == num_of_rock_wins + num_of_scissors_wins + num_of_paper_wins:\n        return str(0) + \" \" + str(0)\n    else:\n        return str(num_of_rounds - num_of_rock_wins - num_of_scissors_wins - num_of_paper_wins) + \" \" + str(num_of_rounds - num_of_rock_wins - num_of_scissors_wins - num_of_paper_wins)"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split('\\n')\n    a = tuple(map(int, a.split()))\n    b = tuple(map(int, b.split()))\n    return '%d %d' % (min(a), max(a))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n    a_wins = 0\n    b_wins = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            a_wins += 1\n        if a[i] == a[i + 1]:\n            a_wins += 1\n        if a[i] == a[i + 2]:\n            a_wins += 1\n        if a[i] == a[i + 3]:\n            a_wins += 1\n        if b[i] == b[i + 1]:\n            b_wins += 1\n        if b[i] == b[i + 2]:\n            b_wins += 1\n        if b[i] == b[i + 3]:\n            b_wins += 1\n        if b[i] == b[i + 4]:\n            b_wins += 1\n    return str(min(a_wins, b_wins)) + \" \" + str(max(a_wins, b_wins))"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    b = list(map(int, input[2].split()))\n    al = a[0]\n    al2 = a[1]\n    bl = b[0]\n    bl2 = b[1]\n    ans = 0\n    if al >= bl:\n        if al == bl:\n            ans = 0\n        elif al == bl2:\n            ans = 1\n        else:\n            ans = 2\n    else:\n        if bl == al2:\n            ans = 1\n        elif bl == al:\n            ans = 2\n        else:\n            ans = 3\n    return \"{} {}\".format(ans, max(al, bl))\n\nprint(solution(input))\n\n'''\n\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    sets = []\n    start = 0\n    while start < n:\n        end = start + 1\n        while end < n and a[end] == a[end - 1]:\n            end += 1\n        if end - start > len(sets):\n            sets.append((start, end))\n        start = end\n    return''.join(map(str, sorted(set([x[0] for x in sets] + [x[1] for x in sets]))))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0])\n    lst = list(map(int, input[1].split()))\n    res = []\n\n    for i in range(1, n+1):\n        for j in range(i):\n            if lst[j] + lst[j+1] == lst[i]:\n                res.append([j, i])\n    return str(len(res)) + '\\n' +''.join(map(str, sorted(res)))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(find(a, 1, n))\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3')\n    2\n    >>> solution('4')\n    4\n    >>> solution('5')\n    3\n    '''\n    n = int(input())\n    arr = [int(x) for x in stdin.split()]\n    arr = sorted(arr)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1) + \" \" + str(2)\n    if n == 3:\n        return str(1) + \" \" + str(2) + \" \" + str(3)\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] <= 2:\n            continue\n        else:\n            return str(i) + \" \" + str(i + 1)\n    return str(0)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    #print(a)\n    output_str = ''\n    sum_set = set()\n    if n == 1:\n        output_str = str(a[0])\n    else:\n        for i in range(n):\n            sum_set.add(a[i])\n        #print(sum_set)\n        for j in range(n):\n            if (j,j) not in sum_set:\n                output_str += '{} {}'.format(a[j],a[j+1])\n            elif (j+1,j) not in sum_set:\n                output_str += '{} {}'.format(a[j],a[j])\n            elif (j,j+1) not in sum_set:\n                output_str += '{} {}'.format(a[j],a[j+1])\n            elif (j+1,j+1) not in sum_set:\n                output_str += '{} {}'.format(a[j],a[j+1])\n            else:\n                pass\n    return output_str"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n    arr.sort()\n    #print(arr)\n    count = 0\n    length = len(arr)\n    #print(length)\n    #print(len(arr))\n    for i in range(length):\n        #print(i)\n        if i == 0:\n            #print(\"0\")\n            if arr[i]!= 1:\n                break\n            else:\n                count = count + 1\n                #print(count)\n        else:\n            #print(\"1\")\n            if arr[i]!= 1:\n                count = count + 1\n            else:\n                count = count + 2\n                #print(count)\n    #print(count)\n    if count == length:\n        return str(count)\n    elif count!= length:\n        return str(count)\n    else:\n        print(\"wrong\")\n\nsolution(input())\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    print(max_set(a, n))\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = 0\n    a = sorted(a)\n    count = 1\n    while True:\n        if a[r] == a[r + 1]:\n            count += 1\n            r += 1\n        else:\n            count += 1\n            l += 1\n        if r == n - 1:\n            break\n    print(l, r)\n    return str(l) +'' + str(r)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_len = 0\n    blocks = []\n    for l in range(n - 1):\n        if a[l] >= 0:\n            if a[l] > 0:\n                blocks.append([l, l + a[l]])\n            else:\n                blocks.append([l + a[l], l])\n    for r in range(n - 1):\n        if a[r + 1] >= 0:\n            if a[r + 1] > 0:\n                blocks.append([r + 1, r + 1 + a[r + 1]])\n            else:\n                blocks.append([r + 1 + a[r + 1], r + 1])\n    blocks = sorted(blocks)\n\n    for i, j in blocks:\n        if j - i > max_len:\n            max_len = j - i\n            answer = i\n    return str(answer)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1]))\n    ans = set()\n    if n == 1:\n        return str(len(ans))\n    def add_block(start, end):\n        cur = A[start]\n        while start < end:\n            ans.add((start, end))\n            start += 1\n            cur += A[start]\n        if cur == A[end]:\n            ans.add((start, end))\n    for i in range(1, n):\n        add_block(i - 1, n)\n        add_block(0, i - 1)\n        add_block(i, n - 1)\n    for start, end in ans:\n        print(start, end)\n    return str(len(ans))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    i = 0\n    while i < len(arr):\n        arr[i] = 'x'\n        if i < len(arr) - 1:\n            if arr[i] == arr[i + 1]:\n                j = i\n                while j < len(arr) - 1 and arr[j] == arr[j + 1]:\n                    arr[j] = 'x'\n                    j += 1\n                i = j\n            else:\n                i += 1\n        else:\n            i += 1\n    return 'YES' if not any(i == 'x' for i in arr) else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int,stdin.split()))\n    height = 0\n    stacks = []\n    while len(lst) > 0:\n        if len(stacks) == 0:\n            height = lst.pop(0)\n            stacks.append(height)\n        else:\n            if height!= lst.pop(0):\n                if len(stacks) > 1:\n                    stacks.pop()\n                if height < stacks[-1]:\n                    stacks[-1] -= 1\n                else:\n                    stacks.append(height)\n            else:\n                height = lst.pop(0)\n                stacks.append(height)\n    if len(stacks) > 1 and height < stacks[-1]:\n        stacks.pop()\n    if len(stacks) > 1:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    answer = 'YES'\n\n    while len(array) > 1:\n        temp = []\n        for i in range(len(array)-1):\n            if array[i] > array[i+1]:\n                temp.append(array[i+1])\n                temp.append(array[i])\n        \n        array = temp\n        answer = \"NO\" if len(array) > 1 else answer\n\n    print(answer)\n\nsolution(\"3\")\nsolution(\"3 2 1\")\nsolution(\"3 3 2 1\")\nsolution(\"5\")\nsolution(\"5 3 2 1\")\nsolution(\"10\")\n\n\n\nhttps://app.codility.com/programmers/lessons/3-time_complexity/rastgele/"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    heights = [0] * (n + 1)\n    stacks = []\n    for x in arr:\n        heights[x] += 1\n    i = 1\n    while i <= n:\n        if len(stacks) == 0:\n            stacks.append(heights[i])\n            i += 1\n        elif heights[i] > heights[i - 1]:\n            stacks.append(heights[i])\n            i += 1\n        elif heights[i] == heights[i - 1]:\n            while heights[i] == heights[i - 1]:\n                stacks.append(heights[i])\n                i += 1\n            heights.pop(i - 1)\n            i += 1\n    while len(stacks)!= 0:\n        stacks.pop()\n    print(stacks)\n    return \"YES\" if len(stacks) == 0 else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = [int(x) for x in arr]\n    largest = 0\n    for i in range(len(arr)):\n        if i == 0:\n            largest = arr[i]\n            stack = [largest]\n        else:\n            while len(stack) and arr[i] > stack[-1]:\n                largest = stack.pop()\n            stack.append(arr[i])\n    while len(stack) > 1:\n        largest = stack.pop()\n        while len(stack) and arr[i] > stack[-1]:\n            largest = stack.pop()\n        stack.append(largest)\n    if len(stack) == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    def solve(arr):\n        nonlocal max_height\n        height = 1\n        while arr:\n            if arr[-1] == max_height:\n                arr.pop()\n            else:\n                max_height = max(max_height, arr[-1])\n                arr.pop()\n                arr.append(max_height)\n                height += 1\n        return height\n\n    max_height = 1\n    h = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    result = str(solve(arr[:]))\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    heights = list(map(int, stdin.split()))\n    n = len(heights)\n    stacks = list()\n    for i in range(n):\n        while len(stacks) > 0 and heights[stacks[-1]] < heights[i]:\n            stacks.pop()\n        stacks.append(i)\n    return \"YES\" if len(stacks) == 1 else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if array_is_sorted(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    def h(n):\n        r = 0\n        s = []\n        while len(s) < n:\n            while r <= len(s):\n                s.append(r)\n                r += 1\n            while r > len(s):\n                s.pop()\n        return len(s)\n\n    for i in range(1,len(lst)):\n        # print(\"s:\",s,\"l:\",lst[i-1])\n        if h(lst[i-1]) > h(lst[i]):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if n <= 0:\n        return '-1'\n    if n == 1:\n        if s == t:\n            return str(0)\n        return '-1'\n    s = list(s)\n    t = list(t)\n    for i in range(n):\n        if s[i]!= t[i]:\n            if i > 0 and s[i] == s[i - 1] and t[i] == t[i - 1]:\n                t[i], t[i - 1] = t[i - 1], t[i]\n                s[i], s[i - 1] = s[i - 1], s[i]\n            elif i > 0 and s[i] == s[i - 1] and t[i] == t[i - 1]:\n                t[i], t[i - 1] = t[i - 1], t[i]\n            elif i < n - 1 and s[i] == s[i + 1] and t[i] == t[i + 1]:\n                t[i], t[i + 1] = t[i + 1], t[i]\n            else:\n                return '-1'\n    return str(len(t)) +'' +''.join(str(j) for j in range(1, len(t) + 1))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    t = stdin.strip()\n    s = sorted(s)\n    t = sorted(t)\n    if s!= t:\n        return \"-1\"\n    k = 0\n    cnt = 0\n    while True:\n        if k == 10**4:\n            return \"0\"\n        if k == 0:\n            break\n        if s[0] == t[0]:\n            s.pop(0)\n            t.pop(0)\n            k += 1\n        else:\n            break\n    if s!= t:\n        return \"0\"\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            cnt += 1\n        else:\n            break\n    return str(k) + \" \" + str(cnt)"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    s = s.replace(' ', '')\n    t = t.replace(' ', '')\n    if n == 1:\n        return '0'\n    s_len = len(s)\n    t_len = len(t)\n    if s_len!= t_len:\n        return '-1'\n    if s == t:\n        return '0'\n    swap = [[i, i + 1] for i in range(s_len)]\n    swap.append([s_len, 0])\n    move = 0\n    moves = []\n    while swap:\n        if len(swap) == 1:\n            return '-1'\n        if len(swap) > 2:\n            swap = swap[1:]\n        else:\n            swap = swap[:2]\n        swap_moves = [(0, 0)]\n        for i in range(1, len(swap)):\n            tmp = swap[i - 1][0] + swap[i][0]\n            tmp_moves = []\n            tmp_moves.append((tmp, i + 1))\n            tmp = swap[i - 1][1] + swap[i][1]\n            tmp_moves.append((tmp, i))\n            swap_moves.extend(tmp_moves)\n        swap = swap_moves\n    if swap == [[0, 0]]:\n        return '-1'\n    return str(len(swap) + 1) +'' +''.join(map(str, swap))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int, j: int) -> str:\n        return s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    moves = 0\n    while s!= t:\n        if len(s) > len(t):\n            s = s[1:]\n            moves += 1\n        else:\n            t = t[1:]\n            moves += 1\n    if s == t:\n        return str(moves)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = s.replace(' ', '')\n    if len(s)!= len(t):\n        return -1\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return -1\n    return len(s)\n\nsolution(stdin)"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    t = stdin[1]\n\n    moves = 0\n    while True:\n        s_moved = False\n        for i in range(n):\n            if s[i]!= t[i]:\n                s_moved = True\n                s_tmp = s[i]\n                s = s[:i] + t[i] + s[i + 1:]\n                t = t[:i] + s_tmp + t[i + 1:]\n        if not s_moved:\n            break\n        moves += 1\n    if moves > 10**4:\n        return -1\n\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    s = list(s)\n    t = list(t)\n    t = t[::-1]\n    if n!= len(t):\n        return '-1'\n    moves = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            if s[i]!= t[i + 1]:\n                if s[i]!= t[i - 1]:\n                    return '-1'\n    for i in range(n):\n        if s[i] == t[i]:\n            continue\n        t[i] = t[i].swapcase()\n        moves += 1\n    return moves\n\nsolution(input())\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = stdin\n    moves = 0\n    l = len(s)\n    while len(s)!= len(t):\n        if len(s) == l:\n            return \"-1\"\n        if len(s) > len(t):\n            return \"-1\"\n        if len(s) < len(t):\n            for i in range(len(s)):\n                if s[i]!= t[i]:\n                    break\n            if i == len(s):\n                return \"-1\"\n            temp = list(s)\n            temp[i], temp[i + 1] = temp[i + 1], temp[i]\n            s = \"\".join(temp)\n            moves += 1\n    return moves"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\"\\n\")\n    a = int(s[0])\n    s = s[1].strip()\n    t = s.upper()\n\n    return (a * (t[1:]).count(t[0]) + solution(t[1:])) if len(t) >= 2 else a\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = stdin\n\n    # We'll check each of the n-1 moves\n    for i in range(n - 1):\n        for j in range(n - 1):\n\n            # The first move we swap\n            a = s[j]\n            b = s[j + 1]\n\n            # The second move we swap\n            c = s[j]\n            d = s[j + 1]\n\n            # The third move we swap\n            e = s[j]\n            f = s[j + 1]\n\n            # The fourth move we swap\n            g = s[j]\n            h = s[j + 1]\n\n            # The fifth move we swap\n            i = s[j]\n            j = s[j + 1]\n\n            # The sixth move we swap\n            k = s[j]\n            l = s[j + 1]\n\n            # The seventh move we swap\n            m = s[j]\n            n = s[j + 1]\n\n            # The eight move we swap\n            o = s[j]\n            p = s[j + 1]\n\n            # The ninth move we swap\n            q = s[j]\n            r = s[j + 1]\n\n            # The tenth move we swap\n            s = s[:j] + s[j + 2:]\n            t = t[:j] + t[j + 2:]\n\n            if s == t:\n                return str(i) +'' + str(j) +'' + str(k) +'' + str(l) +'' + str(m) +'' + str(n) +'' + str(o) +'' + str(p) +'' + str(q) +'' + str(r)\n\n    return \"-\""
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    correct_prefixes = []\n    correct_suffixes = []\n    for i in range(n):\n        for j in range(n - 1):\n            if stdin[i + j].lower() < stdin[i]:\n                correct_prefixes.append(stdin[i + j])\n            else:\n                correct_suffixes.append(stdin[i + j])\n    correct_prefixes.sort()\n    correct_suffixes.sort()\n    correct_prefixes = correct_prefixes[::-1]\n    correct_suffixes = correct_suffixes[::-1]\n    result = correct_prefixes + correct_suffixes\n    result = ''.join(result)\n    return result\n    "
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prefixes = set()\n    suffixes = set()\n    for i in range(1, n-1):\n        prefixes.add(stdin[:i])\n        suffixes.add(stdin[i:])\n    if \"a\" in prefixes and \"b\" in suffixes:\n        return \"PS\"\n    elif \"a\" in prefixes:\n        return \"P\"\n    elif \"b\" in suffixes:\n        return \"S\"\n    else:\n        return \"PSP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    for i in range(len(lines)):\n        str = lines[i]\n        for j in range(len(lines)):\n            if i == j:\n                continue\n            if str == lines[j]:\n                print('PS')\n                return\n    for i in range(len(lines)):\n        str = lines[i]\n        for j in range(len(lines)):\n            if i == j:\n                continue\n            if str == lines[j][::-1]:\n                print('PS')\n                return\n    print('SPPSPSPS')\n\nsolution(input())\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a string of length n consisting only of Latin letters a-z. The task is to guess which one of the following is the prefix of the given string:\n    \n    1. All strings with the same prefix of the given string\n    2. All strings with the same prefix of the given string except the first character and the last character\n    3. A prefix of the given string\n\n    It is guaranteed that there is only one string that is a prefix of the given string.\n    '''\n    return stdin.replace('a', 'a').replace('A', 'A')[:2]\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read data\n    n = int(stdin)\n    s = stdin.split('\\n')\n    prefixes = []\n    suffixes = []\n    for i in range(2, n+2):\n        p = stdin.split('\\n')[i-1]\n        prefixes.append(p)\n        s = stdin.split('\\n')[i]\n        suffixes.append(s)\n    prefixes_set = set(prefixes)\n    suffixes_set = set(suffixes)\n    answer_set = prefixes_set & suffixes_set\n    answer_list = list(answer_set)\n    answer_list.sort()\n    return ''.join(answer_list)\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     '5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n\\n3\\na\\nc\\n')\n    'SPPSPSPS'\n    >>> solution(\n   ...     '2\\na\\n\\nc\\n')\n    'PS'\n    >>> solution(\n   ...     '3\\naba\\n\\n')\n    'SPS'\n    >>> solution(\n   ...     '1\\na\\n')\n    'SP'\n    \"\"\"\n    s = stdin.split()\n    if len(s) == 1:\n        return s[0]\n    return s[1]\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.splitlines()\n    n = int(inp[0])\n    p = ''.join(inp[1:])\n    prefix = {prefix: index for index, prefix in enumerate(p)}\n    suffix = {suffix: index for index, suffix in enumerate(p)}\n    results = []\n    for i in range(len(p)):\n        for j in range(i+1, len(p)):\n            # check if prefix is prefix of suffix\n            if p[i:j] == p[j:i-j]:\n                results.append(p[:i] + 'S' + p[i:])\n            # check if suffix is prefix of prefix\n            if p[i:j] == p[i-j:i]:\n                results.append(p[:i] + 'P' + p[i:])\n    # return the result with most common character count\n    return max(results, key=lambda x: (prefix[x], suffix[x]), default='SP')\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin.split()[0])\n    prefixes = list(stdin.split()[1:])\n    suffixes = []\n    for i in range(1, input_n):\n        suffixes.append(prefixes[i-1][::-1])\n        suffixes.append(prefixes[i])\n    suffixes = suffixes[1:]\n    suffixes = sorted(suffixes)\n    prefixes = sorted(prefixes)\n    prefixes = prefixes[::-1]\n    ans = \"\"\n    for s in prefixes:\n        for s_ in suffixes:\n            if s[0] == s_[-1]:\n                ans += \"P\"\n            else:\n                ans += \"S\"\n    return ans\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    print(\"SPPSPSPS\" if any(all(x in y for x in strings) for y in strings) else \"SPSP\")\n    print(\"SPPS\" if any(all(x in y for x in strings) for y in strings) else \"PS\")\n    print(\"SP\" if any(all(x in y for x in strings) for y in strings) else \"P\")\n    print(\"SPS\" if any(all(x in y for x in strings) for y in strings) else \"S\")\n    print(\"PS\" if any(all(x in y for x in strings) for y in strings) else \"P\")\n    print(\"SP\" if any(all(x in y for x in strings) for y in strings) else \"S\")\n    return \"SPSP\" if any(all(x in y for x in strings) for y in strings) else \"SPS\""
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ''.join(sorted(stdin, key=lambda x: x.lower())[:2])\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for x in stdin.split('\\n'):\n        res.append(int(x))\n    return \"\".join(map(str, res))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(len(a)-1, 0, -1):\n        if a[i] < a[i-1]:\n            return a[i]"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, range(1, int(stdin) + 1)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 = stdin.split()\n    return '1' if a1!= a2!= a3!= a4!= a5!= a6!= a7!= a8!= a9!= a10 == '1' else '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(' ')]\n    return f'{a[0] + a[1] + a[2] + a[3]}'"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if n == 1:\n        return str(1)\n    else:\n        return str(a[n-1] - a[0])"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if max(stdin) < 10 else '2'"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\nprint(solution(input()))\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    print(a[n - 1])"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lst = stdin.split()[1:]\n\n    num_of_people = 0\n    for i in range(n):\n        if lst[i] == '1':\n            num_of_people += 1\n\n    return str(num_of_people)"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n] = [int(s) for s in stdin.split()]\n    a = list(map(int, stdin.split()))\n\n    j = 0\n    count = 0\n    while j < n - 1:\n        if a[j] == 1:\n            while j < n - 1 and a[j + 1] == 1:\n                j += 1\n            if j + 1 < n:\n                if a[j] == 1 and a[j + 1] == 0:\n                    count += 1\n        j += 1\n\n    return str(count)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = list(map(int, stdin.split(\" \")))\n\n    def count_on(n):\n        total = 0\n        for i in range(n - 1):\n            if lights[i] and lights[i + 1]:\n                total += 1\n        return total\n\n    for i in range(n - 2):\n        if count_on(i) == 0:\n            return i + 1\n\n    return 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    flats = list(map(int, stdin.split()))\n    result = 0\n    while result == 0:\n        result = count_disturb(flats)\n        flats = [0 if i == 0 else 1 for i in flats]\n    return result\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    house = list(map(int, stdin.split('\\n')[1:]))\n    tot = 0\n    for i in range(n):\n        if house[i] == 1:\n            tot += 1\n            for j in range(i, n):\n                if house[j] == 1:\n                    tot += 1\n                    if tot == i + 1:\n                        return str(i)\n    return str(0)"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    if len(stdin) < 3:\n        return stdin\n    a = stdin[:len(stdin) // 2]\n    b = stdin[len(stdin) // 2:]\n    print(a)\n    print(b)\n    c = []\n    for i in range(len(a) - 1):\n        c.append(min(a[i + 1], a[i] + 1))\n    print(c)\n    return str(len(c))\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lights = [int(i) for i in stdin.split()[1]]\n    is_good = True\n    for i in range(len(lights)-1):\n        if lights[i]!= lights[i+1]:\n            if i == 0 or lights[i] == lights[i-1]:\n                is_good = False\n            else:\n                lights[i] = lights[i+1] = 0\n    return '1' if is_good else '0'\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(\" \")\n    print(a)\n    s = 0\n    for i in range(len(a)):\n        if a[i] == \"1\":\n            if i == 0:\n                continue\n            if a[i - 1] == \"1\":\n                s += 1\n        elif a[i] == \"0\":\n            if i == 0:\n                continue\n            if a[i - 1] == \"1\":\n                s += 1\n    return str(s)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(set(gcd(map(int, stdin.split()))))\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    divisors = {}\n    for i in range(1, max(arr)):\n        for j in range(i + 1):\n            if j == 0 or j == i:\n                continue\n            else:\n                if arr[0] % i == 0 and arr[1] % i == 0 and arr[2] % i == 0:\n                    divisors[i] = divisors.get(i, 0) + 1\n                else:\n                    continue\n\n    return str(divisors[1])"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_div = 0\n    divs = []\n    inputs = stdin.split(\"\\n\")\n\n    for item in inputs:\n        # get nums\n        arr = list(map(int, item.split(\" \")))\n\n        # get divs\n        nums = set([item for item in arr if item > 0])\n        num_div += len(nums)\n\n        divs += nums\n    print(num_div)\n    print(divs)\n\n\nsolution(\"5\\n1 2 3 4 5\\n6 90 12 18 30 18\\n\")\n\nsolution(\"7\\n9 10 22 33 50 71 77 88\\n\")\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    divisors = []\n    for i in range(1, int(stdin) + 1):\n        if stdin.count(str(i)) == 1:\n            divisors.append(i)\n    print(len(divisors))\nsolution(input())\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 2 == 0:\n        return '1'\n    else:\n        divisors = []\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return len(divisors)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    num_of_divisors = 0\n    for i in a:\n        if is_prime(i) and num_of_divisors < len(a):\n            num_of_divisors += 1\n    return str(num_of_divisors)\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    res = 0\n    for i in range(2, min(int(n ** 0.5), len(a)) + 1):\n        if a[0] % i == 0:\n            res += 1\n        for j in range(1, len(a)):\n            if a[j] % i == 0:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    def gcd(a, b):\n        if a < b:\n            a, b = b, a\n        while b:\n            a, b = b, a % b\n        return a\n\n    # return gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], gcd(arr[0], g"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = stdin[1]\n    # Write your code here\n    def gcd(a,b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(int(a[i]), int(a[j])) == 1:\n                cnt += 1\n    print(cnt)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = set()\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisors.add(j)\n    return str(len(divisors))\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = sorted(list(set(a)))\n    res = []\n    cur = 1\n    while(cur <= len(b)):\n        while(cur <= len(b) and b[cur - 1] == cur):\n            cur += 1\n        res.append(cur)\n        cur += 1\n    return str(min(res))"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input:\n    6\n    1 2 4 3 3 2\n    '''\n    # Your code here\n    c = int(stdin.split()[0])\n    coins = stdin.split()[1:]\n\n    # print(c)\n    # print(coins)\n\n    dp = [[0 for _ in range(c + 1)] for _ in range(c + 1)]\n    # print(dp)\n\n    for i in range(1, c + 1):\n        dp[i][i] = 1\n\n    for i in range(1, c + 1):\n        for j in range(i, c + 1):\n            for k in range(j, i, -1):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j])\n                # print(dp)\n    # print(dp)\n    print(dp[1][c])\n    return"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    coins = stdin.split(\"\\n\")[1:]\n    coins = list(map(lambda x: int(x), coins))\n    assert len(coins) == len(set(coins))\n    res = float(\"inf\")\n    current = 0\n    for c in coins:\n        current += 1\n        res = min(res, current)\n    return res\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.strip().split()))\n    n = inp[0]\n    arr = inp[1:]\n    result = 0\n    # if all numbers from arr are equal.\n    if n == len(set(arr)):\n        return result\n\n    while len(set(arr))!= 1:\n        arr = sorted(arr)\n        temp = []\n        for i in range(len(arr)):\n            temp.append(arr[i])\n            if len(temp) == n:\n                break\n            if i == len(arr) - 1:\n                return result\n        arr = temp\n        result += 1\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    # print(a)\n    # print(a)\n    p = 1\n    c = 0\n    while p < n:\n        if a[p] == a[c]:\n            p += 1\n            c += 1\n        else:\n            c += 1\n            p += 1\n    return str(c)"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    coins_dict = {}\n    min_pockets = 2 ** 31 - 1\n    for c in stdin.split(\" \"):\n        if coins_dict.get(int(c)):\n            if min_pockets > int(c):\n                min_pockets = int(c)\n        else:\n            coins_dict[int(c)] = 1\n    return str(min_pockets)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    \n    ans = 1\n    curr = a[0]\n    for x in a[1:]:\n        if x - curr > ans:\n            ans = x - curr\n        curr = x\n    return str(ans)\n\nsolution(\"3\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"100\")\nsolution(\"10\")\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    used = [False for _ in range(n)]\n    res = 0\n    for i in range(n):\n        if not used[i]:\n            count = 1\n            used[i] = True\n            for j in range(i+1, n):\n                if a[j] == a[i] and not used[j]:\n                    count += 1\n                    used[j] = True\n            res = max(res, count)\n    return str(res)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = sorted(list(map(int, stdin.split()[1].split())))\n    dp = [i for i in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        min_val = float('inf')\n        for j in range(i):\n            if coins[i] == coins[j]:\n                min_val = min(min_val, dp[j])\n        dp[i] = min_val + 1\n    return str(dp[-1])\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    pockets = []\n    for i in range(n):\n        if a[i] not in pockets:\n            pockets.append(a[i])\n        else:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_heat_on(pos):\n        for heater in heaters:\n            if heater[0] <= pos < heater[1]:\n                return True\n        return False\n    stdin = stdin.split()\n    n, r = int(stdin[0]), int(stdin[1])\n    heaters = [[int(a), int(b)] for a, b in zip(stdin[2::2], stdin[3::2])]\n    if not (is_heat_on(0) and is_heat_on(1) and is_heat_on(2) and is_heat_on(3) and is_heat_on(4) and is_heat_on(5)):\n        return '-1'\n    heat = [[0] * n for _ in range(n)]\n    for heater in heaters:\n        heat[heater[0]][heater[1]] = 1\n    print(heat)\n    pos = 0\n    temp = 0\n    while pos < n:\n        temp = 0\n        for i in range(n):\n            if heat[pos][i] == 1:\n                temp += 1\n        if temp > r:\n            return '-1'\n        for i in range(n):\n            if heat[pos][i] == 1:\n                temp = 0\n                break\n            temp = max(temp, heat[pos][i] + temp)\n        for i in range(n):\n            if temp > heat[pos][i]:\n                temp = heat[pos][i]\n                break\n        pos += 1\n    if temp < n:\n        return '-1'\n    return str(pos - 1)\n\n\nprint(solution(\"4 2\\n0 0 1 1\\n\"))\nprint(solution(\"5 3\\n1 0 0 0 1\\n\"))\nprint(solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\"))"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    pos = len(arr)\n    count = 0\n    for i in range(pos):\n        if arr[i] == 1:\n            count += 1\n    if count == 0:\n        return -1\n    arr_len = 1\n    while count < n:\n        pos_start = 1\n        pos_end = pos - 2\n        while pos_start <= pos_end:\n            mid = (pos_start + pos_end) // 2\n            if check_len(arr, pos_start, mid) and check_len(arr, mid, pos_end):\n                if (check_len(arr, pos_start, mid - 1) and check_len(arr, mid, pos_end)) or (check_len(arr, pos_start, mid + 1) and check_len(arr, mid, pos_end)):\n                    arr_len = max(arr_len, mid)\n                    pos_start = mid + 1\n                else:\n                    pos_end = mid - 1\n            else:\n                if check_len(arr, pos_start, mid - 1):\n                    pos_end = mid - 1\n                else:\n                    pos_start = mid + 1\n        if arr_len > r:\n            count += 1\n        else:\n            count = 0\n    return arr_len\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(cur_pos: int, acc: int) -> int:\n        if cur_pos == N:\n            return acc\n        if heaters[cur_pos]:\n            return max(acc + 1, dfs(cur_pos + 1, acc + 1))\n        else:\n            return max(acc, dfs(cur_pos + 1, acc))\n    N = int(stdin.split()[0])\n    heaters = list(map(int, stdin.split()[1]))\n    return str(dfs(0, 0))"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n    if n == 1 and count == 1:\n        return '1'\n    if n == 1 and count == 0:\n        return '-1'\n    if count == 0:\n        return '-1'\n    ans = []\n    for i in range(n):\n        if arr[i] == 1:\n            ans.append(i + 1)\n    if len(ans) <= 1:\n        return str(ans[0])\n    ans = []\n    for i in range(n):\n        if arr[i] == 1:\n            if len(ans) == 0:\n                ans.append(i + 1)\n            else:\n                if i - ans[-1] + 1 >= r:\n                    ans.append(i + 1)\n                else:\n                    ans.append(i + 1)\n    if len(ans) <= 1:\n        return str(ans[0])\n    return str(len(ans))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, r = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n\n    # constraint\n    if n < r:\n        return -1\n\n    # init\n    result = float('inf')\n    # for each position in the array\n    for i in range(n):\n        # if the position has a heater on\n        if arr[i] == 1:\n            # try to use all the heaters\n            # calculate the maximum amount of heaters needed\n            amount = r + 1\n            # if we can try to use all the heaters\n            # in this position\n            while amount <= n:\n                # if the position is valid\n                if i - amount + 1 <= 0:\n                    # try to use the heaters\n                    amount_2 = i + 1\n                    # if we can use all the heaters\n                    while amount_2 <= i + 1 + amount - 1:\n                        # add the elements to the result\n                        result = min(result, amount_2)\n                        amount_2 += amount\n                    # if we can't use all the heaters\n                    if result == float('inf'):\n                        return -1\n                # if we can't use all the heaters\n                if result == float('inf'):\n                    return -1\n                # else continue with the next position\n                amount += 1\n    return str(result)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_switched(start: int, end: int) -> bool:\n        return_value = False\n        for i in range(start, end):\n            if a[i] == 1:\n                return_value = True\n                break\n        return return_value\n\n    a = list(map(int, stdin.split()))\n    a.sort()\n    start = 0\n    end = len(a)\n    if end < 2:\n        return -1\n    if a[0] == 0 and a[-1] == 1:\n        return 0\n    if a[0] == 1 and a[-1] == 0:\n        return 0\n\n    while start < end - 1:\n        if is_switched(start + 1, end - 1):\n            return end - 1\n        start += 1\n    return -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r, a = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    return print(min(\n        (sum((1 for i in range(n) if a[i] == 0) // 2 + 1),\n         min(r, n) - 1)\n    ))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    # def\n    count = 0\n    house = []\n    for i in range(n):\n        if array[i] == 1:\n            count += 1\n            house.append(i)\n    # house.append()\n    # print(house)\n    if count == n:\n        return count\n    house_max = max(house) + r\n    house_min = min(house) + r\n    print(house_max, house_min)\n    if house_max > n:\n        print('false')\n        return -1\n    elif house_min < 1:\n        print('false')\n        return -1\n    house = []\n    for i in range(n):\n        if array[i] == 0:\n            house.append(i)\n    # print(house)\n    count = 0\n    ans = n\n    # for j in range(len(house)):\n    for j in range(len(house)):\n        start = 0\n        end = n\n        # while(start <= end):\n        while start <= end:\n            mid = (start + end) // 2\n            # print(start, end)\n            # print(mid)\n            if house[mid] > house_max:\n                start = mid + 1\n            elif house[mid] < house_min:\n                end = mid - 1\n            else:\n                return mid\n        # count += 1\n        if count!= 0:\n            ans = min(ans, count)\n        count = 0\n    return ans\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    max_arr = []\n    for _ in range(n):\n        max_arr.append(0)\n    for _ in range(r):\n        max_arr[arr.index(1)] += 1\n    for i in range(len(max_arr)):\n        if max_arr[i] > 0:\n            return str(i)\n    return str(-1)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return -1 if not can_heat(a, r) else len(a)\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    How many tuples (A,B,C) of positive integers\n    satisfy A \\times B + C = N?\n    \"\"\"\n    N = int(stdin)\n    ans = 0\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            for C in range(1, N + 1):\n                if A * B + C == N:\n                    ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tuples = []\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            k = n - i - j\n            if i * (i + 1) + j * (j + 1) + k * (k + 1) == n:\n                tuples.append([i, j, k])\n    return str(len(tuples))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '3'\n    >>> solution('1')\n    '3'\n    >>> solution('11')\n    '3'\n    >>> solution('12')\n    '1'\n    >>> solution('12')\n    '3'\n    >>> solution('123')\n    '2'\n    >>> solution('123')\n    '3'\n    \"\"\"\n    return '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(math.sqrt(N))\n    count = 0\n    for a in range(1, A + 1):\n        for b in range(1, A + 1):\n            c = N - a - b\n            if a*a + b*b + c*c == N:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '3'"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_naive(n))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\nimport math\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = list(map(int, stdin.split(' ')))\n    possible_tuples = []\n    for i in range(1, stdin[0] + 1):\n        for j in range(1, stdin[0] + 1):\n            if i * j + i + j == stdin[0]:\n                possible_tuples.append((i, j, i + j))\n    return '\\n'.join(map(str, possible_tuples))\nprint(solution(input()))\n\nsolution(input())\n\nSample Input:\n7\nSample Output:\n3\n2\n1\n(2, 1, 1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    for i in range(2, 10):\n        for j in range(2, 10):\n            k = x + j\n            if k == stdin:\n                print(x, j, k)\n                return\n\n        x += 1\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bracket_string = stdin\n    bracket_list = list()\n    i = 0\n    while i < len(bracket_string):\n        if bracket_string[i] == \"(\":\n            bracket_list.append(bracket_string[i])\n        elif bracket_string[i] == \")\":\n            if len(bracket_list) == 0:\n                bracket_list.append(bracket_string[i])\n            else:\n                bracket_list.pop()\n        i += 1\n    bracket_list.reverse()\n    if len(bracket_list) == 0:\n        return 0\n    else:\n        return len(bracket_list)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    s_list = list(s)\n    for i in range(0, len(s_list)):\n        if s_list[i] == '(':\n            s_list[i] = ')'\n            count += 1\n        elif s_list[i] == ')':\n            s_list[i] = '('\n            count -= 1\n        else:\n            continue\n\n    if count > 0:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    for i in range(len(s)):\n        if s[i] == \")\":\n            s = s.replace(s[i], \"(\", 1)\n            s = s.replace(s[i], \")\", 1)\n            res += 1\n    return str(res) + '\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    s1 = s.replace(')','(')\n    s2 = s1.replace('(','1')\n    s3 = s2.replace('1','(')\n    return s3\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solutions.py\n    Author: Gabriel Martinez\n    Date: 21 Nov 2020\n    '''\n    inp_str = stdin\n    inp_str = list(inp_str)\n    my_list = []\n    for i in inp_str:\n        if i == ')':\n            my_list.append('(')\n        else:\n            my_list.append(')')\n    if len(my_list) == len(inp_str):\n        print(0)\n        return\n    my_list = list(map(str, my_list))\n    my_str = \"\".join(my_list)\n    if my_str[0] == ')':\n        my_str = '(' + my_str\n    if my_str[len(my_str) - 1] == '(':\n        my_str = my_str + ')'\n    if eval(my_str) == True:\n        print(len(my_str) - 2)\n    else:\n        print(0)\n    return\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    # print(s)\n\n    def is_valid(s):\n        open = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                open += 1\n            elif s[i] == ')':\n                open -= 1\n            if open < 0:\n                return False\n        return open == 0\n\n    def dfs(i, s):\n        if i == len(s):\n            return is_valid(s)\n        if s[i] == ')':\n            if dfs(i + 1, s):\n                return True\n        if s[i] == '(':\n            if dfs(i + 1, s[:i] + ')' + s[i + 1:]):\n                return True\n        return False\n\n    if dfs(0, s):\n        return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    bracket_stack = list()\n    previous_bracket = '('\n    for char in stdin:\n        if char == '(':\n            bracket_stack.append(')')\n        elif char == ')':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(')')\n    return ''.join(bracket_stack)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"())\") + stdin.count(\"((\") - stdin.count(\")(\") - stdin.count(\"(((\")\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''abbaba\n   ... ab\n   ... ''')\n    3\n    >>> solution('''baaba\n   ... ab\n   ... ''')\n    2\n    >>> solution('''abcde\n   ... abcde\n   ... ''')\n    0\n    \"\"\"\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    len_s = len(s)\n    len_t = len(t)\n    if len_t == 0:\n        return 0\n    elif len_t > len_s:\n        return 0\n    elif len_t == 1:\n        return 0\n\n    num_one_char = len_s - len_t + 1\n    max_len = 0\n    for i in range(num_one_char):\n        s1 = s[0:i] + s[i+len_t:]\n        len_s1 = len(s1)\n        len_t1 = len(t)\n        if len_t1 == 1:\n            continue\n        elif len_s1 == len_t1:\n            max_len = max(max_len, i+1)\n        elif len_s1 < len_t1:\n            break\n        else:\n            pass\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    length = len(s)\n    while length > 1:\n        flag = 1\n        for i in range(length - 1):\n            if s[i]!= t[i]:\n                flag = 0\n        if flag == 0:\n            length = length - 1\n        else:\n            break\n    return length\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your program should output the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n    >>> solution('')\n    0\n    >>> solution('asdfasdf')\n    3\n    >>> solution('abcde')\n    2\n    >>> solution('aaaaaa')\n    0\n    >>> solution('aaaaaa')\n    2\n    >>> solution('aaaaaa')\n    2\n    >>> solution('aaaaaa')\n    2\n    \"\"\"\n\n    s = stdin\n    # Your code goes here\n    for _ in range(0, len(s)):\n        s = s.replace(\"asdfasdf\", \"\")\n        s = s.replace(\"fasd\", \"\")\n        if s == \"\":\n            return 0\n    return len(s)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    TEST 1\n    '''\n    s = stdin.strip()\n    t = stdin.strip()\n    s_len = len(s)\n    t_len = len(t)\n    # if s_len == 0:\n    #     return 0\n    #\n    # def lcs(s, t, s_len, t_len):\n    #     \"\"\"\n    #     :type s: str\n    #     :type t: str\n    #     :type s_len: int\n    #     :type t_len: int\n    #     :rtype: int\n    #     \"\"\"\n    #     if s_len == 0 or t_len == 0:\n    #         return 0\n    #\n    #     if s[s_len - 1] == t[t_len - 1]:\n    #         return 1 + lcs(s, t, s_len - 1, t_len - 1)\n    #\n    #     lcs_list = []\n    #     for i in range(s_len, -1, -1):\n    #         for j in range(t_len, -1, -1):\n    #             if s[i] == t[j]:\n    #                 lcs_list.append(1 + lcs(s, t, i, j))\n    #     return max(lcs_list)\n    #\n    # return lcs(s, t, s_len, t_len)\n\n\n    '''\n    SOLUTION 2\n    '''\n    dp = [[0] * (s_len + 1) for _ in range(t_len + 1)]\n    for i in range(1, t_len + 1):\n        for j in range(1, s_len + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[t_len][s_len]\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    n = len(s)\n    l = 0\n    r = 0\n    i = 0\n    j = 0\n    while (i <= n - j):\n        l = i\n        r = i\n        while (r < n) and (s[r] == t[r]):\n            r += 1\n        if (r - l > max_len):\n            max_len = r - l\n        i += 1\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    s = strings[0]\n    t = strings[1]\n    return len(t)\n    \"\"\"Your code goes here.\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import sys\n    from collections import deque\n    from typing import List, Deque\n    #sys.stdin = open('input.txt')\n    s = stdin.strip()\n    t = stdin.strip()\n    # print(s)\n    # print(t)\n    # print(len(s))\n    # print(len(t))\n    # print(''.join(re.findall(r'[a-z]', s)))\n    #print(''.join(re.findall(r'[a-z]', t)))\n    if len(s) == 0:\n        return 0\n    # s = 'asdfasdf'\n    # t = 'bfdcaf'\n    # s = 'ab'\n    # t = 'ba'\n    # print(s.find(t))\n    #print(len(s))\n    #print(len(t))\n    if s.find(t) == -1:\n        return 0\n    #print(s.index(t))\n    #print(s.index(t) - 1)\n    #print(s.index(t) - 2)\n    if s.index(t) == 1:\n        return 0\n    #print(s.index(t))\n    #print(s.index(t))\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):])\n    #print(s[s.index(t):])\n    #print(s[:s.index(t) + 1])\n    #print(s[:s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[:s.index(t) + 1])\n    #print(s[:s.index(t) + 1])\n    #print(s[:s.index(t) + 1])\n    #print(s[:s.index(t) + 1])\n    #print(s[:s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index(t):s.index(t) + 1])\n    #print(s[s.index"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    t = stdin.strip().split()\n    for i in range(len(s)):\n        s[i] = s[i].replace(s[i], \"\")\n        t[i] = t[i].replace(t[i], \"\")\n    for i in range(len(s)):\n        if len(s[i]) > len(t[i]):\n            s[i] = s[i].replace(s[i][:len(s[i]) - len(t[i])], \"\")\n        if len(s[i]) < len(t[i]):\n            t[i] = t[i].replace(t[i][:len(t[i]) - len(s[i])], \"\")\n    if \"\".join(s) == \"\".join(t):\n        return len(\"\".join(s))\n    else:\n        return len(\"\".join(t))\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    t = stdin[1]\n    i = 0\n    j = 0\n    result = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if j == 0:\n                i += 1\n            else:\n                j = 0\n                i = 0\n        result = max(result, j - i + 1)\n    return str(result)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n\n    s_len = len(s)\n    t_len = len(t)\n    left = 0\n    right = s_len\n\n    while left < s_len and right < t_len:\n        if s[left] == t[right]:\n            left += 1\n            right += 1\n        else:\n            right += 1\n\n    return right - left\n\n\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, a * c, a * d, b * c, b * d, c * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= c and b <= d:\n        return \"2\"\n    if c <= a and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        return \"2\"\n    if a <= c and b <= d:\n        "
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c, d] = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    if (a < b and a < c and a < d) or (a > b and a > c and a > d):\n        return str(a*b)\n    if (c < b and c < d) or (c > b and c > d):\n        return str(c*d)\n    return \"NA\"\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    if a <= c and b <= d:\n        return (c - a) * (d - b)\n    if b <= c and a <= d:\n        return (d - b) * (c - a)"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input: \"1 2 1 1\"\n    # output: \"2\"\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, c * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    if a <= d and b <= d and c <= d:\n        return f\"{d*c}\"\n    return f\"{max(a*b, max(a*c, max(b*c, d*d)))}\"\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split())\n    # Your code here\n    return str(max(a * b, c * d))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    return str(max(int(a) * int(c), int(b) * int(d)))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])))"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if (a < b and c < d) or (a > b and c > d):\n        return str(max(a * b, c * d))\n    else:\n        return str(min(a * b, c * d))"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # write your code here\n    d = list(map(int, stdin.split()))\n    d.sort()\n    d1 = d[:len(d)//2]\n    d2 = d[len(d)//2:]\n    return str(len(d1)//2) + \" \" + str(len(d2)//2)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    problems = list(map(int, stdin.split()))\n    problems.sort()\n    count_abc = count_arcs = 0\n    K = 1\n    while K < N + 1:\n        count_abc += problems.count(K)\n        count_arcs += problems.count(K)\n        K += 1\n    return str(count_arcs) + \" \" + str(count_abc)"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.rstrip().split('\\n')\n    N = int(inputs[0])\n    d_1, d_2,..., d_N = [int(x) for x in inputs[1].split()]\n    \n    k_1 = d_1\n    k_2 = d_2\n    k_3 = d_2\n    k_4 = d_2\n    while k_1 < k_2:\n        if k_1 % 2 == 0:\n            k_1 += d_1\n        else:\n            k_1 += d_2\n    while k_2 < k_3:\n        if k_2 % 2 == 0:\n            k_2 += d_2\n        else:\n            k_2 += d_3\n    while k_3 < k_4:\n        if k_3 % 2 == 0:\n            k_3 += d_3\n        else:\n            k_3 += d_4\n    return \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Remove spaces and newline\n    stdin = stdin.strip().split()\n    \n    # Store input\n    N = int(stdin[0])\n    d = list(map(int, stdin[1:]))\n    \n    # Get all combinations\n    combinations = get_all_combinations(N, d)\n\n    # Check for solution\n    unique_combinations = get_unique_combinations(combinations)\n\n    # Print the number of combinations\n    print(len(unique_combinations))\n\n    return 'OK'\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = sorted(map(int, stdin.split()))\n    count_arcs = 0\n    count_abc = 0\n    for i in range(len(problems)):\n        if problems[i] <= n and count_arcs == 0:\n            count_arcs += 1\n        elif problems[i] <= n and count_arcs!= 0:\n            count_arcs -= 1\n        if problems[i] >= n and count_abc == 0:\n            count_abc += 1\n        elif problems[i] >= n and count_abc!= 0:\n            count_abc -= 1\n    return str(count_arcs) +'' + str(count_abc)\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, num_k = list(map(int, stdin.split()))\n    problems_list = list(map(int, stdin.split()))\n    odd_problems = []\n    even_problems = []\n    odd_problems_with_k = 0\n    even_problems_with_k = 0\n\n    for i in range(0, num_problems, 2):\n        if (i % 2 == 0):\n            odd_problems.append(problems_list[i])\n        else:\n            even_problems.append(problems_list[i])\n\n    for i in range(0, num_k):\n        if i % 2 == 0:\n            odd_problems_with_k += 1\n        else:\n            even_problems_with_k += 1\n\n    print(odd_problems_with_k)\n    print(even_problems_with_k)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    k: int = 2\n    number_of_arcs: int = 0\n    number_of_abc: int = 0\n    while n >= k:\n        number_of_arcs += n // k\n        number_of_abc += n // k\n        k += 2\n    return str(number_of_arcs) +'' + str(number_of_abc)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    print(2 * (N // 2) + 1)\n    return\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L, R = list(map(int, stdin.split()))\n    data = list(map(int, stdin.split()))\n    max_count = 0\n    for i in range(N):\n        if L <= data[i] <= R:\n            count = 1\n            for j in range(i, N):\n                if L <= data[j] <= R:\n                    count += 1\n                else:\n                    break\n            max_count = max(max_count, count)\n    return str(max_count)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return max(a, key=lambda x: (h - x) % (h - l) + 1)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function receives a string from standard input and \n       has to return the maximal number of good times Vova can obtain.\"\"\"\n\n    # write your code here\n    return '2'"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    times, hours, l, r = (int(x) for x in stdin.split())\n\n    best = 0\n\n    for a in range(l, r + 1):\n        if a >= hours - times:\n            best = max(best, 1 + times + a)\n        else:\n            best = max(best, 1 + times + a - 1)\n\n    return str(best)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    # bst = BinarySearchTree()\n    # bst.insert(7, 16)\n    # bst.insert(15, 15)\n    # bst.insert(7, 14)\n    # bst.insert(6, 13)\n    # bst.insert(4, 12)\n    # bst.insert(3, 11)\n    # bst.insert(1, 9)\n    # bst.insert(2, 8)\n    # bst.insert(0, 5)\n    # bst.insert(8, 20)\n    # bst.insert(18, 21)\n    # bst.insert(21, 16)\n    # bst.insert(19, 16)\n    # bst.insert(17, 14)\n    # bst.insert(18, 14)\n    # bst.insert(20, 14)\n    # bst.insert(21, 13)\n    # bst.insert(22, 12)\n    # bst.insert(23, 11)\n    # bst.insert(24, 10)\n    # bst.insert(25, 9)\n    # bst.insert(26, 8)\n    # bst.insert(27, 7)\n    # bst.insert(28, 6)\n    # bst.insert(29, 5)\n    # bst.insert(30, 4)\n    # bst.insert(31, 3)\n    # bst.insert(32, 2)\n    # bst.insert(33, 1)\n    # bst.insert(34, 0)\n    # bst.insert(35, 0)\n    # bst.insert(36, 0)\n    # bst.insert(37, 0)\n    # bst.insert(38, 0)\n    # bst.insert(39, 0)\n    # bst.insert(40, 0)\n    # bst.insert(41, 0)\n    # bst.insert(42, 0)\n    # bst.insert(43, 0)\n    # bst.insert(44, 0)\n    # bst.insert(45, 0)\n    # bst.insert(46, 0)\n    # bst.insert(47, 0)\n    # bst.insert(48, 0)\n    # bst.insert(49, 0)\n    # bst.insert(50, 0)\n    # bst.insert(51, 0)\n    # bst.insert(52, 0)\n    # bst.insert(53, 0)\n    # bst.insert(54, 0)\n    # bst.insert(55, 0)\n    # bst.insert(56, 0)\n    # bst.insert(57, 0)\n    # bst.insert(58, 0)\n    # bst.insert(59, 0)\n    # bst.insert(60, 0)\n    # bst.insert(61, 0)\n    # bst.insert(62, 0)\n    # bst.insert(63, 0)\n    # bst.insert(64, 0)\n    # bst.insert(65, 0)\n    # bst.insert(66, 0)\n    # bst.insert(67, 0)\n    # bst.insert(68, 0)\n    # bst.insert(69, 0)\n    # bst.insert(70, 0)\n    # bst.insert(71, 0)\n    # bst.insert(72, 0)\n    # bst.insert(73, 0)\n    # bst.insert(74, 0)\n    # bst.insert(75, 0)\n    # bst.insert(76, 0)\n    # bst.insert(77, 0)\n    # bst.insert(78, 0)\n    # bst.insert(79, 0)\n    # bst.insert(80, 0)\n    # bst.insert(81, 0)\n    # bst.insert(82, 0)\n    # bst.insert(83, 0)\n    # bst.insert(84, 0)\n    # bst.insert(85, 0)\n    # bst.insert(86, 0)\n    # bst.insert(87, 0)\n    # bst.insert(88, 0)\n    # bst.insert(89, 0)\n    # bst.insert(90, 0)\n    # bst.insert(91, 0)\n    # bst.insert(92, 0)\n    # bst.insert(93, 0)\n    # bst.insert(94, 0)\n    # bst.insert(95, 0)\n    # bst.insert(96, 0)\n    # bst.insert(97, 0)\n    # bst.insert(98, 0)\n    # bst.insert(99, 0)\n    # bst.insert(100, 0)\n    # bst.insert(101, 0)\n    # bst.insert(102, 0)\n    # bst.insert(103, 0)\n    # bst.insert(104, 0)\n    # bst.insert(105, 0)\n    # bst.insert(106, 0)\n    # bst.insert(107, 0)\n    # bst.insert(108, 0)\n    # bst.insert(109, 0)\n    # bst.insert(110, 0)\n    # bst.insert(111, 0)\n    # bst.insert(112, 0)\n    # bst.insert(113, 0)\n    # bst.insert(114, 0)\n    # bst.insert(115, 0)\n    # bst.insert(116, 0)\n    # bst.insert(117, 0)\n    # b"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r, *slept = stdin.split(' ')\n    n, h, l, r = int(n), int(h), int(l), int(r)\n    slept = tuple(int(a) for a in slept)\n\n    good = 1\n\n    for t, a in enumerate(slept):\n        if t == 0:\n            continue\n\n        if t % a == 0:\n            good += 1\n        else:\n            good = 1\n\n    return good\n\nsolution(\"7 24 21 23\")"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = list(map(int, stdin.split()))\n    times = list(map(int, stdin.split()))\n    times.sort()\n    times = set(times)\n\n    max_count = 1\n    best = 0\n    for i in range(len(times)-1):\n        l_time = times.pop()\n        r_time = times.pop()\n        if l_time - 1 == r_time:\n            best = max(best, l_time - times.pop())\n            max_count += 1\n    return max_count\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split())))\n\n    result = 0\n\n    for i in range(n):\n        #  print(i, a[i], l, r, result)\n        if a[i] - l < 0:\n            result = max(result, a[i] + 1)\n        else:\n            result = max(result, a[i] - l)\n    print(result)\n    return result\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = stdin.split(' ')\n    n = int(n)\n    h = int(h)\n    l = int(l)\n    r = int(r)\n    good_times = []\n    for i in range(n):\n        good_times.append(l + r - i)\n    while True:\n        max_good_time = max(good_times)\n        if max_good_time >= h:\n            print(len(good_times))\n            break\n        else:\n            good_times.remove(max_good_time)\n    return''.join(map(str, good_times))"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, h, l, r = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    a_list = list(map(int, stdin[4:]))\n    # print(n, h, l, r, a_list)\n\n    # return solution1(n, h, l, r, a_list)\n    return solution2(n, h, l, r, a_list)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = sorted([int(i) for i in stdin.strip().split()[1:]])\n    i = 0\n    while True:\n        if a[i] * 2 <= a[i + 1]:\n            i += 1\n        else:\n            break\n    return i + 1\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    arr.sort()\n    max_val = 1\n    if n == 1:\n        return max_val\n    diff = int(arr[0])\n    for i in range(1, n):\n        if diff * 2 <= int(arr[i]):\n            diff = int(arr[i])\n            max_val += 1\n        else:\n            return max_val\n    return max_val\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n\n    a.sort(reverse=True)\n\n    def check(a, i, j):\n        return a[i] > 2 * a[j]\n\n    def get(a, n):\n        if n == 1:\n            return 1\n        t = 0\n        for i in range(n):\n            t = max(t, get(a, n - 1) + get(a, n - 1 - i))\n        return t\n\n    for i in range(n):\n        res = max(res, get(a, n - 1) + get(a, n - 1 - i))\n\n    return str(res)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    difficulties = list(map(int, stdin.strip().split()))\n    difficulties.sort(reverse=True)\n    result = 0\n    for i in range(n):\n        if i < n-1 and difficulties[i+1] * 2 <= difficulties[i]:\n            result += 1\n    return str(result)\n\nsolution('5 7 12 100 150 199')\n\nsolution('10 2 5 6 7 10 21 23 24 49')\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    problems = stdin.split('\\n')[1].split()\n    problems.sort()\n    contests = []\n    count = 0\n    problems.append(problems[-1]+1)\n    print(problems)\n    for i in range(len(problems)):\n        if problems[i] == problems[i+1]:\n            count += 1\n        else:\n            count = 0\n        contests.append(count)\n        if i == len(problems)-2:\n            break\n        \n    print(contests)\n    return str(max(contests))\n\nsolution(input())\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N^2)\n    \"\"\"\n    input_n, *input_diffs = [int(i) for i in stdin.split()]\n    diffs = []\n    for d in input_diffs:\n        diffs.append(d)\n\n    # find minimum\n    minimum_diff = min(diffs)\n    n = len(diffs)\n\n    if n == 1:\n        return str(1)\n\n    # find max diffs\n    max_diff = max(diffs)\n    if maximum_diff % 2 == 0:\n        max_diff = max_diff // 2\n\n    # check if min_diff <= 2*max_diff\n    if minimum_diff <= max_diff:\n        if minimum_diff > max_diff * 2:\n            return str(1)\n        else:\n            return str(n)\n\n    return str(n - 1)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = a[0]\n    a = a[1:]\n    return len(max_problems(a, n))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    ans = 0\n    for i in range(1, n):\n        if a[i] <= 2*a[i-1] or a[i] >= a[i-1]*2:\n            ans += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    list_of_diff = list(map(int, stdin.split()))\n    max_len = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if list_of_diff[i] <= list_of_diff[j] * 2:\n                break\n        if j == i - 1:\n            max_len = max(max_len, i)\n    return str(max_len)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    diffs = [int(x) for x in stdin.split()[1:]]\n    # create an array which has all the difficulties\n    # like that [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    diff_array = []\n    for i in range(n):\n        diff_array.append(diffs[i])\n\n    # find the maximum number of problems\n    # we can have if we select only 1 problem\n    # from the above problems\n    max_number_of_problems = 1\n    for i in range(1, len(diff_array)):\n        if diff_array[i] > diff_array[i-1]*2:\n            max_number_of_problems += 1\n\n    print(max_number_of_problems)\n    return\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    # Find two elements of a that are relatively prime (lcm)\n    def lcm(x, y):\n        while x % y!= 0:\n            x, y = y, x % y\n\n        return x\n\n    # Sort the list and find the two elements\n    a.sort()\n    i, j = 0, n - 1\n    lcm_i, lcm_j = lcm(a[i], a[j]), lcm(a[i + 1], a[j - 1])\n\n    # Find the least common multiple of these two elements\n    while lcm_i!= lcm_j:\n        if lcm_i > lcm_j:\n            lcm_i, lcm_j = lcm_j, lcm_i\n        lcm_i, lcm_j = lcm_i // lcm(lcm_i, lcm_j), lcm_j // lcm(lcm_i, lcm_j)\n\n    # Find the indices of these two elements\n    i = bisect_right(a, lcm_i) - 1\n    j = bisect_right(a, lcm_j) - 1\n\n    return \"%d %d\" % (i + 1, j + 1)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    num_list = sorted(int(x) for x in stdin.split()[1:])\n    return''.join(str(num_list.index(x)) for x in num_list if x % num_list.index(x) == 0)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n    m = min(arr)\n    ans = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            lcm = m*arr[i]*arr[j]\n            if lcm == min(lcm, arr[i]*arr[j], arr[j]*arr[i]):\n                ans.append(arr[i])\n                ans.append(arr[j])\n                break\n    ans.sort()\n    return str(ans[0]) +'' + str(ans[1])\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n\n    # convert input to list of integers\n    a = list(map(int, stdin.strip().split()))\n\n    # calculate LCM of the list of integers\n    lcm = reduce(lambda x, y: x * y // gcd(x, y), a)\n\n    # find all pairs with LCM less than lcm\n    pairs = list(filter(lambda pair: lcm % pair[0] == 0 and lcm % pair[1] == 0, list(zip(a, a[1:]))))\n\n    # if there are multiple answers, print them\n    if len(pairs) > 1:\n        print(*map(lambda pair: pair[0], pairs), sep='\\n')\n    # else print the first answer\n    else:\n        print(pairs[0][0], pairs[0][1], sep='\\n')\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = (999999999999999999)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % lcm(a[i], a[j]) < ans:\n                ans = (a[i] * a[j]) % lcm(a[i], a[j])\n    return str(ans)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split())\n\n    def gcd(x, y):\n        while x!= 0:\n            x, y = y % x, x\n        return y\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    lcm_pairs = []\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                lcm_pairs.append((lcm(a[i], a[j]), i, j))\n\n    lcm_pairs.sort(key=lambda x: x[0])\n\n    min_lcm_pairs = []\n\n    for lcm, i, j in lcm_pairs:\n        if min_lcm_pairs:\n            if lcm < min_lcm_pairs[0][0]:\n                break\n        min_lcm_pairs.append((lcm, i, j))\n\n    print(' '.join(map(str, [x[1] + 1 for x in min_lcm_pairs])))\n    print(' '.join(map(str, [x[2] + 1 for x in min_lcm_pairs])))\n    return ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    arr = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (a[i]*a[j]) % n == 0:\n                arr.append((i, j))\n    return arr[0]\n\n\nsolution(input())\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (math.gcd(arr[i], arr[j]) == 1):\n                ans.append(str(i + 1) + \" \" + str(j + 1))\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n\n    def compute(a, b):\n        return lcm(a, b)\n\n    res = min(\n        [compute(a, b) for a in arr for b in arr if a!= b],\n        key=lambda x: x)\n\n    return str(res)\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    i = 0\n\n    while i < n:\n        if s[i] == '0':\n            count0 += 1\n        elif s[i] == '1':\n            count1 += 1\n        else:\n            count2 += 1\n        i += 1\n\n    if count0 > count1 and count0 > count2:\n        s = '1' + s\n    elif count1 > count0 and count1 > count2:\n        s = '0' + s\n    else:\n        s = '2' + s\n\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    # n = 6\n    # s = \"0110\"\n    #\n    # n = 10\n    # s = \"1010101010101\"\n\n    if n % 3!= 0:\n        return \"\"\n    s = list(s)\n    s = sorted(s)\n    s = \"\".join(s)\n    s = list(s)\n\n    curr_count = 0\n    while curr_count < n and s[curr_count]!= \"0\":\n        curr_count += 1\n\n    left = curr_count\n    curr_count = 0\n    while curr_count < n and s[curr_count]!= \"2\":\n        curr_count += 1\n\n    right = curr_count\n\n    for i in range(left, right):\n        s[i] = \"2\"\n\n    return \"\".join(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(s)\n    n = len(s)\n    count = 0\n    while True:\n        k = 0\n        for i in range(n):\n            if s[i] == '0':\n                if k == 0:\n                    s[i] = '1'\n                    k = 1\n            elif s[i] == '1':\n                if k == 1:\n                    s[i] = '2'\n                    k = 2\n            elif s[i] == '2':\n                if k == 2:\n                    s[i] = '1'\n                    k = 3\n        count += 1\n        if count > n:\n            break\n    return ''.join(s)\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    l1 = '0'*n\n    l2 = '1'*n\n    l3 = '2'*n\n    s.sort()\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    s.sort(key=lambda x: x*3)\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '1'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '1'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '2'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '2'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '3'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '3'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '4'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '4'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '5'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '5'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15, x*16))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '6'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15, x*16, x*17))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '6'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15, x*16, x*17, x*18))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '7'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15, x*16, x*17, x*18, x*19))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '7'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15, x*16, x*17, x*18, x*19, x*20))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '8'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*8, x*9, x*10, x*11, x*12, x*13, x*14, x*15, x*16, x*17, x*18, x*19, x*20, x*21))\n    if s == l1 or s == l2 or s == l3:\n        return ''.join(s)\n    l3 = '8'\n    s.sort(key=lambda x: (x, x*3, x*4, x*5, x*6, x*7, x*"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    \n    if n == 1:\n        return \"1\"\n    \n    elif n == 2:\n        return \"11\"\n\n    else:\n        count = 0\n        while n > 2:\n            if count == 0:\n                s = s[0] + s[2:] + s[0]\n                count += 1\n            else:\n                s = s[1] + s[3:] + s[1]\n                count += 1\n            n = n // 3\n        return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    i = 0\n    cnt = 0\n    while i < n:\n        if s[i] == '2':\n            s[i] = '0'\n            cnt += 1\n        elif s[i] == '1':\n            s[i] = '2'\n            cnt += 1\n        elif s[i] == '0':\n            s[i] = '1'\n            cnt += 1\n        i += 1\n    return ''.join(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    removed = n\n    curr = ''\n    print(s)\n    while removed!= 0:\n        for i in range(n):\n            if s[i] == '0':\n                s = s[:i] + '1' + s[i + 1:]\n                removed -= 1\n            elif s[i] == '1':\n                s = s[:i] + '2' + s[i + 1:]\n                removed -= 1\n            else:\n                curr += s[i]\n        print(curr)\n        curr = ''\n        removed = n\n    return s\n\n\nsolution('121')\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = ''\n    while len(t) < n:\n        t += str(choice([0, 1, 2]))\n    return t"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = sorted(s, key=lambda x: x)\n    print(s)\n    if s[0] == '2':\n        s = s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n    else:\n        s = s[0] + s[1] + s[2] + s[3] + s[4]\n    s = sorted(s, key=lambda x: x)\n    print(s)\n    return s\n    #pass\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = \"\"\n    while len(s) > 0:\n        c = s[0]\n        s = s[1:]\n        if c == \"1\":\n            ans += \"0\"\n        elif c == \"2\":\n            ans += \"1\"\n        else:\n            ans += \"2\"\n    return ans"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    N = int(stdin[0])\n    M = int(stdin[1])\n    a = sorted(list(map(int, stdin[2:])))\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][1] = 1\n    for i in range(N):\n        for j in range(i, -1, -1):\n            if j == i:\n                if j == N-1:\n                    if i!= N-1:\n                        dp[i][j + 1] = dp[i][j]\n                    else:\n                        dp[i][j + 1] = 1\n                else:\n                    dp[i][j + 1] = dp[i][j] + dp[i][j+2]\n            else:\n                if j == N-1:\n                    dp[i][j + 1] = dp[i][j]\n                else:\n                    dp[i][j + 1] = dp[i][j] + dp[i][j + 2]\n    return str(dp[N - 1][M])\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ways = 0\n    for i in range(n-1):\n        if i+1 in a:\n            ways += 1\n    return str(ways)\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    step = 0\n    for i in range(0, m):\n        if i in a:\n            step += 2\n        else:\n            step += 1\n    return step\n\n\nsolution(input())\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return 1\n    if n == 1:\n        return 0\n    a_n = 1\n    a_n_minus_1 = 0\n    for a_i in range(m):\n        a_i_minus_1 = a_n_minus_1\n        a_n_minus_1 = a_n\n        a_n = a_i_minus_1 + a_i\n    return a_n - a_i_minus_1"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = map(int, stdin.split())\n    # print(f'N: {N}')\n    # print(f'M: {M}')\n    # if N < 1 or N > 10^5 or M < 1 or M > N-1:\n    #     print(f'N, M must be greater than 0 and less than {10^5}')\n    #     exit()\n    #\n    # dp = [0] * (N+1)\n    #\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # dp[3] = 4\n    # for i in range(4, N+1):\n    #     for j in range(1, min(i, M)+1):\n    #         dp[i] += dp[i-j]\n    #\n    #     dp[i] %= 1_000_000_007\n    #\n    # print(dp)\n    # return dp[N]"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(' ')\n    N = int(inputs[0])\n    M = int(inputs[1])\n    all_steps = list(range(N))\n    broken_steps = list(map(int, inputs[2].split(',')))\n\n    ways = [0 for _ in range(N)]\n    for i in range(N):\n        if i not in broken_steps:\n            ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n\n    # print(ways)\n    return str(ways[N - 1] % 1000000)\n\n\nsolution(\n    '6 1\\n'\n    '3\\n'\n    '3,1,2\\n'\n    '4,2,4,6')\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 1\n   ... 3\n   ... ''')\n    '4'\n\n    >>> solution('''\n   ... 7 2\n   ... 3\n   ... ''')\n    '3'\n\n    >>> solution('''\n   ... 4 2\n   ... 5\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 10 2\n   ... 2\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 10 2\n   ... 4\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 10 2\n   ... 1\n   ... ''')\n    '0'\n    \"\"\"\n    input_arr = stdin.strip().split()\n    n, m = map(int, input_arr[0].split(\" \"))\n    arr = list(map(int, input_arr[1].split(\" \")))\n\n    # NOTE: TODO:\n\n    return result\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n    # print(N, M)\n    if N == 1:\n        return 0\n    if M == 1:\n        return 1\n\n    paths = [[] for i in range(M)]\n\n    paths[0] = [1]\n    for i in range(1, M):\n        if i == 1:\n            paths[i] = 1\n        else:\n            paths[i] = sum(paths[j] for j in range(i - 1))\n\n    # print(paths)\n    return paths[N - 1] % 1000000007\n\n\nsolution(\"6 1\")\n\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    steps = []\n    for i in range(1, m + 1):\n        steps.append(int(stdin[i]))\n    # print(steps)\n    ways = 0\n    last = 0\n    i = 0\n    while i < n:\n        # print(i)\n        if last < i:\n            ways = ways % 1000000007\n            if i > last:\n                ways += 1\n            i += 2\n            continue\n        if i == n - 1:\n            ways = ways % 1000000007\n            ways += 1\n            break\n        if i >= steps[i]:\n            ways = ways % 1000000007\n            if i == steps[i] + 2:\n                ways += 1\n            i += 1\n            continue\n        ways = ways % 1000000007\n        i += 2\n    print(ways)\n    return\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(1, n):\n        a.append(i)\n    return len(a) % 1000000007\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Collect input\n    X, K, D = map(int, stdin.split())\n\n    # Check if we have enough space\n    if X + D > 10**15 or K < 1 or K > 10**15 or D < 1:\n        return \"NO SOLUTION\"\n\n    # Generate a list of x values\n    x_list = list(range(X + 1))\n    for _ in range(K):\n        # We want the absolute value of the destination\n        # The absolute value of the destination is the difference of the original x\n        # and the next x value\n        x_list.append(x_list[-1] + D)\n\n    # Find the smallest value in the list\n    # and return the minimum possible absolute value\n    return str(min(x_list))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = stdin.split()\n    X = int(X)\n    K = int(K)\n    D = int(D)\n    curr_coord = X\n    dist = 0\n    while K > 0:\n        if dist == D:\n            dist = -D\n        curr_coord += dist\n        K -= 1\n        dist = abs(curr_coord)\n    return str(curr_coord)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = stdin.split(\" \")\n    X, K, D = int(X), int(K), int(D)\n    X = int(X)\n    D = int(D)\n    x = X\n    while K > 0:\n        K -= 1\n        if D > 0:\n            x += D\n        else:\n            x -= D\n        D = abs(x - X)\n    return str(abs(x))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(i) for i in stdin.split()]\n    if k == 1:\n        return abs(x)\n    elif d == 0:\n        return abs(x)\n    elif k == 2:\n        return min(abs(x + d), abs(x - d))\n    else:\n        return min(min(abs(x + d), abs(x - d)), abs(x + k * d - k * d + d))"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(abs(x - k * (x + d)), abs(x - k * (x - d))))"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if K == 0:\n        return str(X)\n    moves = [1, 1, 2, -2]\n    for _ in range(K - 1):\n        move = abs(X + D)\n        X += D\n        if move < abs(X + D):\n            X = move\n    return str(X)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(abs(x + d)) if abs(x + d) < abs(x - d) else str(abs(x - d))"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = stdin.split()\n    x, k, d = int(x), int(k), int(d)\n    y = abs(x)\n    count = 1\n    while (count < k):\n        if x < 0:\n            x = x + d\n        else:\n            x = x - d\n        count = count + 1\n        y = min(y, abs(x))\n    return str(y)"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(abs(x + k * d))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    min_value = X\n    for _ in range(K):\n        delta = D if stdin[1] == '+' else -D\n        value = X + delta\n        if abs(value) < min_value:\n            min_value = abs(value)\n        X += delta\n    return str(min_value)\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"1\"\n    elif n < 5:\n        return \"2\"\n    else:\n        for i in range(3, n + 1):\n            j = i * i\n            if j % 2 == 0:\n                continue\n            else:\n                return str(i)\n\nsolution(input())\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    return (sum(int(x) for x in stdin))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin)"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    digits: str = str(n)\n    return len(digits)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in range(0,len(stdin),2):\n        a.append(int(stdin[i:i+2]))\n    a.sort()\n    return a[1]\n    \n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))\n    return stdin"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # PART 1\n    def part_1(n):\n        factors = []\n        factor = 2\n        while factor * factor <= n:\n            if n % factor == 0:\n                n = n // factor\n                factors.append(factor)\n            else:\n                factor += 1\n\n        # print(factors)\n        return len(factors)\n\n    # PART 2\n    def part_2(n):\n        return n - 1\n\n    print(\"PART 1:\", part_1(n))\n    print(\"PART 2:\", part_2(n))\n\n\nsolution(sys.stdin.read())\n\"\"\"\n\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divide = 3\n    while True:\n        if n % divide == 0:\n            n = n // divide\n        else:\n            divide += 2\n        if n == 1:\n            return str(divide)\n    return str(divide)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #...\n    return (stdout)\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    input = int(input[0])\n\n    return str(input ** 2)"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    \n    x = (2 ** 31) // 2\n    return str(x - a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdout = 0\n    for i in stdin.split():\n        stdout += int(i)\n    return str(stdout)\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    a = stdin\n\n    def find_prod(num_list: list) -> int:\n        \"\"\"\n        Returns the product of two consecutive numbers\n        in a list.\n        \"\"\"\n        product = 1\n        for i in range(len(num_list)-1):\n            product *= num_list[i]\n        return product\n    \n    num_list = []\n    for i in range(1, a+1):\n        num_list.append(i)\n    \n    for i in range(len(num_list)):\n        product = find_prod(num_list[i:])\n        if product > a:\n            product = product % a\n        else:\n            break\n    \n    return product\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = int(stdin)\n    return str(27)"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n    p = int(a)\n    q = int(a)\n    r = int(a)\n    s = int(a)\n    t = int(a)\n    u = int(a)\n    v = int(a)\n    w = int(a)\n    x = int(a)\n    y = int(a)\n    z = int(a)\n    a = int(a)\n    b = int(a)\n    c = int(a)\n    d = int(a)\n    e = int(a)\n    f = int(a)\n    g = int(a)\n    h = int(a)\n    i = int(a)\n    j = int(a)\n    k = int(a)\n    l = int(a)\n    m = int(a)\n    n = int(a)\n    o = int(a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(27)\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if 10 <= n <= 99 or n == 1000:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 999:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 10:\n        return \"0\"\n    elif a <= 100:\n        return \"1\"\n    else:\n        return \"0\"\nsolution(input())"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a%2==0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if sum(map(int,stdin.split())) < 1000 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 999:\n        return 1\n    else:\n        return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a%10 == 0 or a%10 == 1:\n        return \"1\"\n    return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # #method 1\n    # n = int(stdin)\n    # if n%2 == 0:\n    #     print(0)\n    # else:\n    #     print(1)\n    \n    #method 2\n    # n = int(stdin)\n    # if n%2 == 0:\n    #     print(\"0\")\n    # else:\n    #     print(\"1\")\n    \n    #method 3\n    n = int(stdin)\n    print(\"0\" if n%2 == 0 else \"1\")\n\nsolution(input())\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a%5 == 0 and a%3 == 0:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\nsolution(input())\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split(' ')\n    answer = ''\n    for i in range(len(a)):\n        if int(a[i]) > a[i]:\n            answer += str(int(a[i]) + 1)\n        else:\n            answer += str(int(a[i]))\n    return answer\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \" \"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 2\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 3\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 4\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 5\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 6\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 7\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 8\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 9\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 10\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 11\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 11\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 2\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 2 + 2\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 2 + 3\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 2 + 4\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 3\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 4\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 5\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 6\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 7\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 8\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 9\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 10\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 11\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 12\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 + 6\n    # 1 + 7\n    # 1 + 8\n    # 1 + 9\n    # 1 + 10\n    # 1 + 11\n    # 1 + 12\n    # 2\n    # 1 + 1\n    # 1 + 2\n    # 1 + 3\n    # 1 + 4\n    # 1 + 5\n    # 1 +"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(x) for x in stdin.split()]))\n\nsolution(input())\n\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return result\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    st = list(map(int, stdin[1].split()))\n    st.sort()\n    for i in range(n):\n        if st[i] % 3 == 0:\n            st[i] = str(st[i] // 3) + '+' + str(st[i] // 3)\n        if st[i] % 2 == 0:\n            st[i] = str(st[i] // 2) + '*' + str(st[i] // 2)\n        if st[i] == 1:\n            st[i] = str(st[i])\n    return''.join(st)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ''.join(str(max(int(i) for i in stdin.split())))"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each test case, prints the minimum number of packages Polycarp needs to buy to get exactly $n$ shovels.\n    \"\"\"\n    inputs = stdin.split()\n    T = int(inputs[0])\n    for i in range(1, T + 1):\n        n, k = list(map(int, inputs[i].split()))\n        print(solution_part_2(n, k))\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        print(min(n // k, n))\n    return ''"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples\n    >>> solution('''\n   ... 8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... ''')\n    '2'\n    \"\"\"\n    pass"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_number(test_number):\n        return test_number.isdigit() and (test_number.startswith('0') or test_number.startswith('1') or test_number.startswith('2'))\n\n    def test_one_package(test_number):\n        if is_valid_number(test_number):\n            if int(test_number) < 0 or int(test_number) > 10 ** 9:\n                raise ValueError('Test number should be an integer between 1 and 10^9')\n            return int(test_number)\n        raise ValueError('Test number should be an integer between 1 and 10^9')\n\n    def test_package(test_package):\n        if is_valid_number(test_package):\n            if int(test_package) < 0 or int(test_package) > 10 ** 9:\n                raise ValueError('Test number should be an integer between 1 and 10^9')\n            return int(test_package)\n        raise ValueError('Test number should be an integer between 1 and 10^9')\n\n    def get_n_number_of_shovels(test_number):\n        def test_one_shovel(test_number):\n            if is_valid_number(test_number):\n                if int(test_number) < 0 or int(test_number) > 10 ** 9:\n                    raise ValueError('Test number should be an integer between 1 and 10^9')\n                return int(test_number)\n            raise ValueError('Test number should be an integer between 1 and 10^9')\n\n        def test_package_size(test_number):\n            if is_valid_number(test_number):\n                if int(test_number) < 0 or int(test_number) > 10 ** 9:\n                    raise ValueError('Test number should be an integer between 1 and 10^9')\n                return int(test_number)\n            raise ValueError('Test number should be an integer between 1 and 10^9')\n\n        def test_number_of_shovels(test_number):\n            if is_valid_number(test_number):\n                if int(test_number) < 0 or int(test_number) > 10 ** 9:\n                    raise ValueError('Test number should be an integer between 1 and 10^9')\n                return int(test_number)\n            raise ValueError('Test number should be an integer between 1 and 10^9')\n\n        return test_one_shovel(test_number), test_package_size(test_number), test_number_of_shovels(test_number)\n\n    def print_result(result):\n        print(result)\n\n    def main_algorithm(test_number):\n        if int(test_number) <= 0:\n            raise ValueError('Test number should be an integer larger than 0')\n        return test_one_package(test_number) + test_package(test_number) + test_n_number_of_shovels(test_number)\n\n    test_number = stdin\n    test_n_number_of_shovels = main_algorithm(test_number)\n    print_result(test_n_number_of_shovels)\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from collections import deque\n    from collections import Counter\n    from heapq import heappush\n    from heapq import heappop\n    # input = sys.stdin.read()\n    # raw_data = input.split()\n    # n, k = int(raw_data[0]), int(raw_data[1])\n    #\n    # # \uc870\ud569\ub85c \ub9cc\ub4e0 \uc21c\uc5f4\n    # # \uc911\ubcf5\uc21c\uc5f4 \uacbd\uc6b0\ub294 \uc81c\uc678\ud558\uae30\n    # def get_all_subset(arr):\n    #     n = len(arr)\n    #     if n == 0:\n    #         return []\n    #     if n == 1:\n    #         return [[], [arr[0]]]\n    #\n    #     first_subset = get_all_subset(arr[1:])\n    #     copy_first_subset = first_subset.copy()\n    #     for subset in copy_first_subset:\n    #         subset.insert(0, arr[0])\n    #     second_subset = get_all_subset(arr[1:])\n    #     for subset in second_subset:\n    #         subset.insert(0, arr[0])\n    #     return first_subset + second_subset\n    #\n    #\n    #\n    #\n    # all_subsets = get_all_subset(list(range(1, k + 1)))\n    # # print(all_subsets)\n    # answer = []\n    # for subset in all_subsets:\n    #     if subset[0] * k == n:\n    #         answer.append(subset[0])\n    #     elif subset[0] * k > n:\n    #         break\n    #\n    # return str(min(answer))\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n\n    t = int(stdin[0])\n    inputs = []\n    for i in range(1, t + 1):\n        n, k = list(map(int, stdin[i].split()))\n        inputs.append((n, k))\n\n    res = []\n    for n, k in inputs:\n        count = 0\n        for i in range(1, k + 1):\n            count += (n // i)\n        res.append(count)\n\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for i in range(test_cases):\n        n, k = map(int, stdin.split())\n        shovel_packages = sorted([int(i) for i in stdin.split()], reverse=True)\n        result = 1\n        for pkg in shovel_packages:\n            if pkg > k:\n                break\n            result = result * (pkg + 1)\n        print(result)\n    return result\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([min(int(stdin.split()[i])*int(stdin.split()[i+1]) for i in range(0, len(stdin.split()), 2)), int(stdin.split()[-1])]))\n\nsolution(input())\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    switch_count = list(map(int, stdin.split()))\n\n    n, m = switch_count\n    k = m // 2\n\n    switch_count_odd = switch_count[k:]\n    switch_count_even = switch_count[:k]\n\n    return str(combinations_with_replacement(switch_count_odd, n - k)) + '\\n' + \\\n           str(combinations_with_replacement(switch_count_even, n - k))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n\n    p = list(map(int, stdin.strip().split()))\n\n    n = 2 ** N\n\n    count = 0\n\n    for k_1 in range(1, n + 1):\n        for k_2 in range(1, n + 1):\n            s_1 = [0] * N\n            s_2 = [0] * N\n            for i, p_i in enumerate(p):\n                s_1[i] = (k_1 >> i) & 1\n                s_2[i] = (k_2 >> i) & 1\n            if sum(s_1) == sum(s_2) or (sum(s_1) + sum(s_2)) % 2 == 1:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse stdin\n    N, M = map(int, stdin.split())\n    k_1, k_2, *p_1_p_2_p_m = map(int, stdin.split())\n\n    # determine if there is a bulb combination\n    if M == 0:\n        return '1'\n\n    # determine bulb combinations\n    bulb_combinations = set()\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if i == j or i == j + k_1:\n                bulb_combinations.add(i)\n\n    # determine bulb combinations which are bulb\n    bulb_combinations = list(bulb_combinations)\n    for k in p_1_p_2_p_m:\n        bulb_combinations.remove(k)\n\n    return str(len(bulb_combinations))\n\nsolution(input())\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n\n    switches = set()\n    for i in range(N):\n        switches.add((i, 1))\n\n    for i in range(M):\n        for j in range(N):\n            for k in range(2, N+1):\n                if (j, k) not in switches and (j, 1) in switches:\n                    switches.add((j, k))\n                    break\n    result = 1\n    for p_i in p:\n        for j in range(N):\n            if j not in switches and j!= 0:\n                switches.add((j, 2*p_i))\n                break\n\n    for i in range(len(switches)):\n        if switches[i][0] == 0:\n            result *= 2\n        else:\n            result %= (10 ** 9 + 7)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (N, M), *_, p = map(int, stdin.split())\n    p = tuple(map(int, p))\n    # The inputs are in the form of 1, 2, 3, 4\n    # so we have to take care of it\n    # The number of switches is 2, so we have to put that in the inputs\n    # The number of bulbs is 2, so we have to put that in the inputs\n    # Thus we have to convert the input to a list of tuples\n    # The list of tuples is (1, 2), (1, 3), (2, 4)\n    # This is done by taking the \"break\" in the below\n    # example statement and then split the list of tuples by the \",\"\n    # the list of tuples is now as above\n    # The list of tuples is [(1, 2), (1, 3), (2, 4)]\n    # The tuple (1, 2) is converted to (1, 2), which is\n    # (1, 2) and so we need to put it in the list\n    # Since all inputs are integers, we use int()\n    # For example, if the input is \"1, 2, 3, 4\" then\n    # we convert it to the list of tuples,\n    # [[1, 2], [1, 3], [2, 4]]\n    # Then we loop through the list, so that we get\n    # (1, 2) and (1, 3), (2, 4)\n    # and we convert them to their numbers to make the inputs\n    # 1 2 3 4, where they were strings\n    # we then use zip to create a tuple with the two numbers\n    # and use the map function to convert the tuple to a number\n    # then we need to convert the number into an integer\n    # and use int() to get the integer\n    # finally we print the integer\n    return '\\n'.join(map(str, map(int, (\n        map(lambda x: x[0] * x[1],\n            zip(*[tuple(map(int, input().split(',')))\n                  for _ in range(N)])\n        ))))"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = tuple(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    # print(n, m, k, p)\n    # exit(0)\n    ans = 0\n    possible = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for p in range(1, n+1):\n                if (i, j) == (1, p) or (j, p) == (i, 1):\n                    continue\n                for k_i in range(1, n+1):\n                    if (i, k_i) not in possible:\n                        possible.add((i, k_i))\n                        for p_i in range(1, n+1):\n                            if (p_i, k_i) not in possible:\n                                possible.add((p_i, k_i))\n                                if (p_i, k_i) in possible:\n                                    possible.remove((p_i, k_i))\n                    if (i, p_i) not in possible:\n                        possible.add((i, p_i))\n                        for k_i in range(1, n+1):\n                            if (p_i, k_i) not in possible:\n                                possible.add((p_i, k_i))\n                                if (p_i, k_i) in possible:\n                                    possible.remove((p_i, k_i))\n                    if (p_i, j) not in possible:\n                        possible.add((p_i, j))\n                        for k_i in range(1, n+1):\n                            if (k_i, j) not in possible:\n                                possible.add((k_i, j))\n                                if (k_i, j) in possible:\n                                    possible.remove((k_i, j))\n    if (n, m) % 2 == 1:\n        ans = 1\n    elif n % 2 == 1:\n        ans = 2\n    for i in range(1, n+1):\n        if i not in possible:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    k_1, s_1 = map(int, stdin.strip().split())\n    k_2, s_2 = map(int, stdin.strip().split())\n    p_1, p_2 = map(int, stdin.strip().split())\n    return str(N*(k_1 + k_2) - k_1*k_2)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switch = {}\n    for i in range(1, n + 1):\n        switch[i] = []\n    for i in range(n):\n        for j in range(m):\n            switch[i].append(int(stdin[i + j]))\n    return f\"{len(set(reduce(lambda a, b: a + b, switch.values())))}\""
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = map(int, stdin[0].split())\n    k_1, s_1, s_2, s_3,..., s_k_1 = list(map(int, stdin[1].split()))\n    p_1, p_2,..., p_m = list(map(int, stdin[2].split()))\n\n    l_1 = [k_1, s_1, s_2, s_3,..., s_k_1]\n    l_2 = [(k_1 + k_2 + k_3 + k_4 +... + k_m) % 2 for k_1, k_2, k_3, k_4,..., k_m in zip(k_1, k_2, k_3,..., k_m)]\n\n    return str(sum([i == j for i, j in zip(l_1, l_2)]))\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    states = stdin.split()\n\n    def process_states(states, counter):\n        counter += 1\n        for i in range(len(states)):\n            if states[i] == '1':\n                continue\n            elif states[i] == '0':\n                states[i] = str(int(states[i]) + 1)\n                continue\n            else:\n                states[i] = str(int(states[i]) - 1)\n        return counter\n\n    if m == 1:\n        return str(1)\n    elif m == 0:\n        return str(0)\n\n    counter = 0\n    while True:\n        counter = process_states(states, counter)\n        if counter >= m:\n            break\n    return str(counter)\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, a, b = map(int, stdin.split())\n\n    if h * 60 + m < 0:\n        a, b = b, a\n    h = (h * 60 + m + a) % (24 * 60)\n    m = (h * 60 + m + a) % 60\n\n    return '%d.%d' % (a + h, m + b)\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    h = H * 3600\n    m = M * 60\n    return f\"{h+h*((A+B)/2)*m + m*((h+h*A)/2):.9f}\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    H, M = 12, 1\n    v = A * 60 + B\n    v0 = H * 3600 + M * 60 + v\n    v1 = v0 + H * 3600 + M * 60 + v\n    return str(abs(v1 - v0))\n\"\"\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes, a, b = map(int, stdin.split())\n    a_endpoint = a*(((2*hours+1)//12)*100)\n    b_endpoint = b*(((12-2*minutes)//60)*100)\n    return str(a_endpoint+b_endpoint)\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H1, M1 = H % 12, M % 60\n    H2, M2 = (H+12) % 12, (M+60) % 60\n    return str(int(abs(A-B) + abs(H1-H2) + abs(M1-M2)))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    return str(abs(A*H*1.5+B*M*1.5))\n\nprint(solution(input()))\n\n---Input Example---\n4 4 9 0\n\n---Output---\n7.0\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H_radians = H * (2 * math.pi) / 12\n    M_radians = M * (2 * math.pi) / 60\n    A_x = A * math.cos(H_radians) * math.cos(M_radians)\n    B_x = B * math.cos(H_radians) * math.cos(M_radians)\n    A_y = A * math.cos(H_radians) * math.sin(M_radians)\n    B_y = B * math.cos(H_radians) * math.sin(M_radians)\n    A_z = A * math.sin(H_radians)\n    B_z = B * math.sin(H_radians)\n    return \"{:.9f}\".format(math.sqrt(math.pow(A_x - B_x, 2) + math.pow(A_y - B_y, 2) + math.pow(A_z - B_z, 2)))"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the distance in centimeters of the hour hand and the minute hand\n    # H hours and M minutes later\n    distance_hour_hand = (H * 12)\n    distance_minute_hand = (M * 60)\n    total_distance = distance_hour_hand + distance_minute_hand\n\n    # Calculate the distance in centimeters of the center of the hour hand and the center of the minute hand\n    # and put them together\n    center_hour_hand = (distance_hour_hand / 2)\n    center_minute_hand = (distance_minute_hand / 2)\n    total_center_hand = center_hour_hand + center_minute_hand\n\n    # Calculate the distance in centimeters of the center of the hour hand and the center of the minute hand\n    # and put them together\n    center_hour_hand_2 = (center_hour_hand * (-1))\n    center_minute_hand_2 = (center_minute_hand * (-1))\n    total_center_hand_2 = center_hour_hand_2 + center_minute_hand_2\n\n    # Return the result\n    return str(total_distance)\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m, A, B = stdin.split()\n    h, m = int(h), int(m)\n    A, B = int(A), int(B)\n    a = b = int((A * h / 12 + m * B / 60 + (h + m) / 2))\n    print(round(a, 9))\n    print(round(b, 9))\n    return str(round(a, 9)) +'' + str(round(b, 9))"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = (int(x) for x in stdin.split())\n    # Make both hands overlap on the same point at 0.5 * A = 0.5 * B\n    H_to_M = ((A * M) - (B * H)) / ((M * M) + (H * H))\n    # Find distance between the two hands\n    return str(H_to_M)"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    n = line[0]\n    m = line[1]\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    if n % 2 == 0:\n        mid = n // 2\n        for i in range(mid):\n            if a[i] == m:\n                res += 1\n        res += n - mid\n        return res\n    else:\n        mid = n // 2\n        if a[mid] == m:\n            res += 1\n        res += n - mid\n        return res\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = list(map(int, stdin.split()))\nseq = sorted(list(map(int, stdin.split())))\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4\n   ... 1 4 5 60 4\n   ... ''')\n    '8'\n    >>> solution('''3 1\n   ... 1 1 1\n   ... ''')\n    '6'\n    >>> solution('''15 2\n   ... 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n   ... ''')\n    '97'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(a)):\n        left, right = i - 1, i + 1\n        if left < 0 or right >= len(a):\n            continue\n        while left >= 0 and a[left] <= a[i]:\n            left -= 1\n        while right < len(a) and a[right] <= a[i]:\n            right += 1\n        if right - left == m:\n            count += 1\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    count = 0\n    a.sort()\n    if n % 2 == 0:\n        for i in range(n // 2):\n            if a[i] == m:\n                count += 1\n    else:\n        for i in range(n // 2):\n            if a[i] == m:\n                count += 1\n            elif a[n // 2] == m:\n                count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    median = a[n // 2]\n\n    def find_median_of_n_number(a, m):\n        n = len(a)\n        n_minus_1 = n - 1\n        return sum(sorted(a)[n_minus_1 - m: n_minus_1])\n\n    return find_median_of_n_number(a, m)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        print(0)\n        return\n    a.sort()\n    if a[0] > m:\n        print(0)\n        return\n    if n % 2 == 1:\n        if a[n//2]!= m:\n            print(0)\n            return\n        else:\n            print(n//2)\n            return\n    else:\n        if a[n//2 - 1]!= m:\n            print(0)\n            return\n        else:\n            print(n//2)\n            return\nsolution(input())\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    sequence = sorted(int(i) for i in stdin.split())\n    mid = n // 2\n    result = 0\n    if n % 2 == 0:\n        for i in range(mid):\n            result += min(sequence[i], sequence[n - i - 1])\n        result += abs(sequence[mid] - sequence[mid - 1])\n    else:\n        for i in range(mid):\n            result += min(sequence[i], sequence[n - i - 1])\n        result += abs(sequence[mid] - sequence[mid - 1])\n    result += min(sequence[mid], sequence[mid - 1])\n    return str(result)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n    left = 0\n    right = len(sequence) - 1\n    total = 0\n    while left < right:\n        if sequence[left] + sequence[right] < m:\n            left += 1\n        elif sequence[left] + sequence[right] > m:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n            total += 1\n    return str(total)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = sorted(map(int, stdin.split()))\n    mid = lst[len(lst)//2]\n    count = 0\n    for i in range(len(lst)):\n        if mid == lst[i]:\n            count += 1\n        elif mid < lst[i]:\n            return count\n    return count\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # reading data from stdin\n    n, m = (int(i) for i in stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    # define all needed variables\n    max_diff = -10 ** 6\n    cnt = 0\n    segs = []\n\n    # iterate through all segments\n    for _ in range(m):\n        segs.append([int(i) for i in stdin.split()])\n\n    # iterate through all segments\n    for j in range(n):\n        for i in segs:\n            if arr[j] >= i[0] and arr[j] <= i[1]:\n                # if arr[j]!= i[0]:\n                arr[j] = i[0]\n                # if arr[j]!= i[1]:\n                arr[j] = i[1]\n                # print(f'{arr}')\n                cnt += 1\n                if max_diff < arr[j] - min(arr):\n                    max_diff = arr[j] - min(arr)\n                # print(f'{arr}')\n\n    print(cnt)\n    return str(max_diff)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split()\n    m = int(m)\n    a = list(map(int, stdin.split()[1]))\n    b = []\n    max_diff = -1\n    count = 0\n    for i in range(m):\n        b.append(a[i])\n    for i in range(m):\n        for j in range(i+1, m):\n            if (b[i] - b[j]) > max_diff:\n                max_diff = b[i] - b[j]\n    return str(max_diff) + \" \" + str(count)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    while m > 0:\n        x = list(map(int, stdin.split()))\n        max_i = max(x[0], x[2])\n        min_i = min(x[0], x[2])\n        if x[1] > 0:\n            if min_i > x[1] and x[1] > x[3]:\n                x[1] = min_i\n            if min_i > x[3] and x[3] > x[1]:\n                x[3] = min_i\n        b.append(max_i - min_i)\n        m -= 1\n    return str(max(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    max_value = -float('inf')\n    min_value = float('inf')\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n        max_value = max(max_value, a[l-1])\n        min_value = min(min_value, a[r-1])\n\n    for s in segments:\n        mid = (s[1] + s[0]) // 2\n        curr = a[mid]\n        prev = a[mid-1]\n        diff = curr - prev\n        while s[0] <= mid <= s[1]:\n            a[mid] += diff\n            max_value = max(max_value, a[mid])\n            min_value = min(min_value, a[mid])\n            mid = (s[1] + s[0]) // 2\n            curr = a[mid]\n            prev = a[mid - 1]\n            diff = curr - prev\n\n    for i in range(n):\n        if a[i] > max_value:\n            res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 4\n   ... 2 -2 3 1 2\n   ... 1 3\n   ... 4 5\n   ... 2 5\n   ... 1 3\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 5 4\n   ... 2 -2 3 1 2\n   ... 1 3\n   ... 4 5\n   ... 2 5\n   ... 1 3\n   ... ''')\n    '7'\n    >>> solution('''\n   ... 1 0\n   ... 1000000\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 10 1\n   ... 1 2\n   ... 3 4\n   ... 5 6\n   ... 7 8\n   ... 9 10\n   ... ''')\n    '0'\n    \"\"\"\n    n, m = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    l = []\n    for i in range(m):\n        l.append((a[i * 2], a[i * 2 + 1]))\n    l.sort(reverse=True)\n    b = [0] * n\n    if n == 1:\n        return str(0)\n    for i in range(n):\n        b[i] = l[i][0] + l[i][1]\n    print(max(b) - min(b))\n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, stdin.strip().split())))\n    a_max = max(a)\n    a_min = min(a)\n    max_dif = 0\n    for i in segments:\n        l_elem = i[0]\n        r_elem = i[1]\n        l_diff = r_elem - l_elem\n        if l_diff < 0:\n            l_diff = 0\n        max_dif = max(max_dif, a_max - a_min - l_diff)\n    return str(max_dif)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    seg = {}\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        seg[l] = r\n    print(seg)\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        elif i + 1 in seg:\n            if i + 1 in seg and a[i] > a[seg[i + 1]]:\n                ans = max(ans, a[i] - a[seg[i + 1]])\n        else:\n            ans = max(ans, a[i] - 0)\n    return str(ans)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()[1:]]\n    segments = [int(x) for x in stdin.split()[1:]]\n    ans = float('-inf')\n    for seg in segments:\n        l = 0\n        r = n-1\n        while l <= r:\n            mid = (l+r)//2\n            if a[mid] < seg:\n                l = mid + 1\n            else:\n                r = mid - 1\n        ans = max(ans, a[l]-seg)\n    return str(ans)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    a = list(map(int, stdin.split()))\n\n    min_diff = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        min_diff.append([l, r])\n        min_diff.append([r, l])\n\n    min_diff = sorted(min_diff, key=lambda x: x[1])\n\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    for i in range(len(min_diff)):\n        l = min_diff[i][0]\n        r = min_diff[i][1]\n        if l!= r:\n            b[l], b[r] = b[r], b[l]\n\n    return str(max(b)-min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    count = 0\n    arr_b = arr.copy()\n    max_b = arr_b[0] - min(arr_b)\n    min_b = arr_b[0] - min(arr_b)\n    for i in range(n):\n        if min(arr_b) - min(arr_b) == 0:\n            break\n        count += 1\n        max_b = max(max_b, arr[i] - min(arr_b))\n        min_b = min(min_b, arr[i] - min(arr_b))\n        arr_b = arr_b[1:] + arr[:i]\n    return str(max_b - min_b) + \" \" + str(count)"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        s = stdin[i]\n        s = s.strip()\n        if (s[0] + s[-1]) not in (s[1:-1]):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split():\n        if is_diverse(s):\n            print('Yes')\n        else:\n            print('No')\n    return\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    diverse_strings = []\n    for s in stdin.split('\\n'):\n        if len(s) == len(set(s)):\n            diverse_strings.append(s)\n    return \"\\n\".join([\"Yes\" if len(s) == len(set(s)) else \"No\" for s in diverse_strings])\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for string in stdin.splitlines():\n        is_diverse = True\n        for index in range(len(string)-1):\n            if string[index] == string[index+1]:\n                is_diverse = False\n                break\n        answer.append('Yes' if is_diverse else 'No')\n    return '\\n'.join(answer)"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    result = []\n    for word in words:\n        is_diverse = True\n        for i in range(len(word)):\n            if word[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                is_diverse = False\n                break\n            if i == len(word)-1 or word[i+1]!= word[i]:\n                is_diverse = False\n                break\n        if is_diverse:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    diverse_strings = []\n    not_diverse_strings = []\n\n    for string in stdin.split('\\n'):\n        if is_diverse(string):\n            diverse_strings.append(string)\n        else:\n            not_diverse_strings.append(string)\n    \n    diverse_strings.sort()\n    not_diverse_strings.sort()\n    \n    print('\\n'.join(diverse_strings))\n    print('\\n'.join(not_diverse_strings))"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if is_diverse(line):\n            print('Yes')\n        else:\n            print('No')\n    return ''\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement this function and return the string\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    for i in range(len(s)):\n        for j in range(len(s[i])-1):\n            if s[i][j] == s[i][j+1]:\n                continue\n            else:\n                if s[i] == s[i+1]:\n                    print(\"Yes\")\n                    return(\"Yes\")\n                else:\n                    print(\"No\")\n                    return(\"No\")"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(m):\n        l.append((int(stdin.split()[2*i]), int(stdin.split()[2*i+1])))\n    ans = max([b - min(a) for a, b in l])\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = sorted(int(x) for x in stdin.split())\n    b = [(0, 0)] * m\n    for i in range(m):\n        l = a[i]\n        r = a[i] + 1\n        while r < n:\n            if r in a:\n                r += 1\n            else:\n                break\n        b[i] = (r - l, l)\n    return str(max(x[0] - min(x[1], y[0]) for x, y in zip(b, b[1:])))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each integer in the array return the max difference between that integer and the\n    minimum integer in the array.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(m):\n        l = int(stdin.split()[2*i])\n        r = int(stdin.split()[2*i+1])\n        result = max(result, max(a) - min(a))\n        a = [a[j] - 1 for j in range(l, r+1)]\n    return str(result)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    \n    segments = []\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        segments.append([l-1, r-1])\n    \n    max_val, min_val = 0, float('inf')\n    for seg in segments:\n        sub_array = arr[seg[0]:seg[1]]\n        sub_max = max(sub_array)\n        sub_min = min(sub_array)\n        max_val = max(max_val, sub_max - sub_min)\n    return str(max_val)"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    min_value = min(a)\n    max_value = max(a)\n    print(max_value - min_value)\n    return\n\nsolution(input())"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    n = len(a[0])\n    if m == 0 or n == 0:\n        return\n    for i in range(1, n):\n        a[0][i] = a[0][i] - a[0][i - 1]\n\n    for i in range(m - 1):\n        a[i + 1][0] = a[i + 1][0] - a[i][0]\n    for i in range(m - 1):\n        for j in range(1, n):\n            a[i + 1][j] = max(a[i][j - 1] - a[i][j], a[i + 1][j - 1] - a[i][j])\n    return str(max(a[-1]) - min(a[0]))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    l = min(arr)\n    r = max(arr)\n    all_subsets = []\n    def dfs(selected, start, end, l_start, r_start, l_end, r_end):\n        if l_end == r_start:\n            return l_end - l_start + 1\n        if start > end:\n            return 0\n        \n        l_res = 0\n        l_end_c = l_end\n        for i in range(l_start, l_end_c + 1):\n            if selected == 0:\n                l_res = max(l_res, dfs(selected, i + 1, end, l_start, r_start, l_end_c, r_end))\n            if selected == 1:\n                l_res = max(l_res, dfs(selected, l_start, i - 1, l_start, r_start, l_end_c, r_end))\n        \n        r_res = 0\n        r_start_c = r_start\n        for i in range(r_start, r_end + 1):\n            if selected == 0:\n                r_res = max(r_res, dfs(selected, start, i - 1, l_start, r_start_c, l_end_c, r_end))\n            if selected == 1:\n                r_res = max(r_res, dfs(selected, start, i + 1, l_start, r_start_c, l_end_c, r_end))\n        \n        \n        return max(l_res, r_res)\n    \n    def get_subsets(l, r):\n        if l == r:\n            return all_subsets.append([1])\n        \n        all_subsets.append([1])\n        l_res = []\n        r_res = []\n        \n        for i in range(l, r + 1):\n            all_subsets.append([0])\n            l_res = max(l_res, dfs(0, i + 1, r, l, r, i, r))\n            all_subsets.pop()\n            \n        for i in range(r, l - 1, -1):\n            all_subsets.append([0])\n            r_res = max(r_res, dfs(1, i, r, l, r, l, i - 1))\n            all_subsets.pop()\n        \n        return max(l_res, r_res)\n    \n    get_subsets(0, len(arr) - 1)\n    \n    return str(max(all_subsets))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    max_val = -float('inf')\n    min_val = float('inf')\n    for i in range(n):\n        if a[i]!= 0:\n            continue\n        max_val = max(max_val, a[i])\n        min_val = min(min_val, a[i])\n        for j in range(m):\n            if a[segments[j][0]-1]!= 0 or a[segments[j][1]-1]!= 0:\n                continue\n            a[segments[j][0]-1] -= 1\n            a[segments[j][1]-1] -= 1\n            max_val = max(max_val, a[segments[j][0]-1])\n            min_val = min(min_val, a[segments[j][1]-1])\n    return str(max_val - min_val)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = a[:]\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        a = a[:l - 1] + a[r - 1:]\n        b = b[:l - 1] + b[r - 1:]\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, m = a[0], a[1]\n    l, r = map(int, stdin.split()[2:])\n    A = list(map(int, stdin.split()[3:]))\n    max_diff = 0\n    for i in range(m):\n        for j in range(i, m):\n            if l <= A[i] <= r:\n                A[i], A[j] = A[j], A[i]\n                break\n    for k in range(m):\n        max_diff = max(max_diff, A[k] - min(A))\n    return str(max_diff)"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\nstdin = input()\na = stdin.split(' ')\na = list(map(int, a))\nn = len(a)\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  if n == 1:\n    return \"1\"\n  a = list(map(int, stdin.split()[1]))\n  k = 0\n  \n  if a[0] < a[1]:\n    k = 1\n    s = \"L\"\n  \n  if a[0] > a[1]:\n    k = 1\n    s = \"R\"\n  \n  for i in range(1, n):\n    if a[i - 1] < a[i]:\n      s = \"R\"\n      k = max(k, i + 1)\n    if a[i - 1] > a[i]:\n      s = \"L\"\n      k = max(k, i + 1)\n  \n  if a[-1] < a[-2]:\n    k = max(k, n)\n    s = \"R\"\n  \n  if a[-1] > a[-2]:\n    k = max(k, n)\n    s = \"L\"\n  \n  return str(k) + s\n\n'''\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a == sorted(set(a)) or not a:\n        return \"LLL\"\n    if len(a) > 2 and a[-1] < a[-2]:\n        return \"RLR\"\n    if len(a) > 2 and a[0] < a[1]:\n        return \"LLR\"\n    if a == sorted(set(a)) or a[0] < a[1]:\n        return \"LRR\"\n    if a == sorted(set(a)) or a[-1] > a[-2]:\n        return \"RLL\"\n    if a == sorted(set(a)) or a[0] > a[1]:\n        return \"RRL\"\n\nsolution(input())\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(set(map(int, stdin.split())))\n\n    k = len(a)\n    l = r = 0\n    for i, j in zip(a, a[1:]):\n        if i > j:\n            l = r = 1\n        else:\n            r += 1\n    k = max(k, r + l)\n\n    return k"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 1 2\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 3\n   ... 1 2 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5\n   ... 1 2 3 4 5\n   ... ''')\n    '5'\n    \"\"\"\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1]))\n    # the length of a strictly increasing sequence\n    length = 0\n    # the longest strictly increasing sequence\n    result = ''\n    for i in range(n):\n        if i == 0:\n            length += 1\n        else:\n            if a[i - 1] < a[i]:\n                length += 1\n        if length > length:\n            length = length\n            result = str(length) + result\n        elif length > 0:\n            length -= 1\n            result = str(length) + result\n    return result\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = \"\"\n    mx = 0\n    for i in range(n):\n        if a[i] < a[mx]:\n            res += \"R\"\n            mx = i\n        elif a[i] > a[mx]:\n            res += \"L\"\n        else:\n            mx = i\n    return res + \"LL\" * (mx - n + 1) + \"L\" * (n - mx)\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # base cases\n    if len(a) < 2:\n        return len(a)\n\n    # DP table\n    dp = [[0] * (len(a) + 1) for _ in range(len(a) + 1)]\n\n    for i in range(1, len(a) + 1):\n        dp[i][0] = dp[i - 1][0] + a[i - 1]\n        dp[0][i] = dp[0][i - 1] + a[i - 1]\n\n    for i in range(1, len(a) + 1):\n        for j in range(1, len(a) + 1):\n            # 3 cases:\n            # (a[i] > a[j - 1])\n            # (a[i] == a[j - 1])\n            # (a[i] < a[j - 1])\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) + 1\n\n    return dp[-1][-1]\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    c = 1\n    b = []\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            c += 1\n            b.append(a[i])\n        else:\n            if b:\n                if b[-1] > a[i + 1]:\n                    b.append(a[i + 1])\n    if b:\n        return''.join(map(str, sorted(b))) +'' + str(c)\n    else:\n        return str(c)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission function should return a single string.\n\nIf your code meets the requirements to run in a single-threaded environment, then your program should run in ~0.01 seconds.\n\nIf your code runs on an environment that supports threads, then your program should run in ~0.02 seconds.\n'''\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    a = list(map(int, stdin.split()))\n\n    a = sorted(list(set(a)))\n\n    longest = 1\n\n    for i in range(l):\n        for j in range(i + 1, l):\n            if a[j] > a[i]:\n                break\n        longest = max(longest, j - i + 1)\n\n    return str(longest)\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    print(len(a)-1)\n    return\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    last_idx = len(a) - 1\n    for idx, val in enumerate(a):\n        if idx == 0 or val > a[idx - 1]:\n            last_idx = idx\n        else:\n            last_idx = idx - 1\n    return last_idx + 1\n\n\nprint(solution(input()))\n\n\n\n##solution(input())\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    if n == 1:\n        return 1\n    \n    for i in range(n):\n        if i == 0:\n            if a[i] >= a[i+1]:\n                break\n            elif a[i] < a[i+1]:\n                a[i+1] = a[i]\n        else:\n            if a[i] >= a[i+1]:\n                if a[i] >= a[i-1]:\n                    break\n                else:\n                    a[i+1] = a[i]\n            else:\n                a[i+1] = a[i]\n    \n    return len(a) - (i + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    a = stdin[1]\n    # use count sort\n    # find the start index of max increasing subsequence\n    s = max(range(n), key=lambda x: a[x])\n    # to determine whether to delete or not\n    delete = False\n    for i in range(n):\n        if i!= s and a[i] > a[i + 1]:\n            delete = True\n            break\n    if delete:\n        del a[s + 1]\n    return str(len(a))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = [int(x) for x in stdin.strip().split()]\n    result = 1\n    for i in range(1, n):\n        if array[i] > array[i - 1]:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    if n <= 1:\n        return str(n)\n    print(n)\n    print(a)\n    print()\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] < a[i]:\n            j = i\n            while j < n and a[j - 1] >= a[j]:\n                j += 1\n            if j - i >= 2:\n                print(i)\n                print(j)\n                print(j - i)\n                print(a[i:j])\n                print(n - j + 1)\n                print(min(n - j + 1, i))\n                print(a[i:n - (j - i + 1)])\n                print(n - j + 1)\n                print(n - j)\n                return str(min(n - j + 1, i))\n    print(n)\n    return str(n)\n\nprint(solution(input()))"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n\n    m = 1\n    s = 0\n\n    for i in range(l - 1, n):\n        if a[i] <= a[i + 1]:\n            m = max(m, i + 1 - s)\n            s = i + 1\n\n    return str(m)"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    del a[0]\n    del a[0]\n    print(a)\n    count = 0\n    for i in range(len(a)):\n        count += 1\n        for j in range(len(a) - 1, i, -1):\n            if a[j] > a[j - 1]:\n                count += 1\n            else:\n                break\n    print(count)\n    return\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    x = []\n    for i in range(a[0]):\n        x.append(0)\n    for i in range(1, a[0]):\n        for j in range(a[0]):\n            x[i] += int(x[j] > 0)\n            x[i] += int(x[j] == 0)\n    return str(min(x))\n\nsolution(\"5 3\")\nsolution(\"5 3\")\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    res = 0\n    while a:\n        if a[-1] == a[0]:\n            a.pop()\n        else:\n            res += 1\n            a[-1] //= 2\n            a.pop()\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = a[1]\n    \n    def equal_nums(l):\n        if len(l) < 2:\n            return l\n        \n        x = l[0]\n        res = []\n        for i in range(1, len(l)):\n            if x == l[i]:\n                res.append(x)\n            else:\n                x = l[i]\n                res = []\n                res.append(x)\n        return res\n    \n    while k > 0:\n        res = equal_nums(a)\n        k -= len(res)\n    if k == 0:\n        print(0)\n    else:\n        print(len(a)-len(res))\n        \nsolution(input())\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    cnt = 0\n    while i < len(a):\n        if a[i]!= a[i - 1]:\n            cnt += 1\n        if cnt > k:\n            return '0'\n        i += 1\n    return str(cnt)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    K = int(stdin)\n    data = list(map(int, stdin.split()))\n    # print(data)\n    answer = 0\n    for num in data:\n        if num % 2 == 0:\n            continue\n        else:\n            if K < 2:\n                return 0\n            K -= 1\n            answer += 1\n    return answer\n\n\nsolution(\"5 3\")\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    res = a[0]\n    for i in range(1, len(a)):\n        cnt = 0\n        temp = a[i]\n        while temp > 0:\n            if temp % 2 == 0:\n                temp //= 2\n            else:\n                temp -= 1\n            cnt += 1\n        res = min(res, cnt)\n    return str(res)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    l = []\n    for i in range(n):\n        l.append(i)\n\n    count = 0\n    while True:\n        if 0 in l:\n            return str(count)\n        if max(l) > k:\n            return str(count)\n        l[0] = 0\n        l.pop(0)\n        for i in range(len(l)):\n            if l[i] % 2 == 0:\n                l[i] = 0\n            else:\n                l[i] = int(l[i] / 2)\n        count += 1\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(min([0, (10**5)-sum([(int(i)//2) for i in stdin.split()])]))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input = stdin.split()\n    n, k = int(input[0]), int(input[1])\n    a = list(map(int, input[2].split()))\n    count_zero = 0\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\n    count = 0\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0443\u043b\u044f \u0432 \u0430\n    zero_a = 0\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n    count_zero_in_a = 0\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0443\u043b\u044f\u043c\u0438\n    for i in range(n):\n        if a[i] == 0:\n            count_zero += 1\n            zero_a += 1\n    for i in range(n):\n        if a[i]!= 0:\n            count_zero_in_a += 1\n\n    # \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n    zero_index = 0\n    # \u043a\u043e\u043b-\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 a\n    count_op_in_a = count_zero_in_a\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 a\n    count_op_in_a_0 = 0\n    while zero_index < count_zero:\n        # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n        a[zero_index] = 0\n        # \u043a\u043e\u043b-\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 a\n        count_op_in_a = count_op_in_a_0\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 zero_index\n        zero_index = zero_a - 1\n        # \u0435\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0443\u043b\u0435\u0439\n        if zero_index < 0:\n            # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e count_op_in_a_0\n            count_op_in_a_0 = count_zero\n        # \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n        zero_index = zero_index + 1\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 count_zero_in_a\n        count_zero_in_a = count_zero_in_a - 1\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 count_op_in_a_0\n        count_op_in_a_0 = count_op_in_a\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 count\n    count = count_zero_in_a\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 count_0\n    count_0 = count_op_in_a_0\n    # \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n    zero_index = zero_a\n    # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    a[zero_index] = 0\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e count_op_in_a_0\n    count_op_in_a_0 = count_op_in_a\n    # \u0435\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0443\u043b\u0435\u0439\n    if zero_index < 0:\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e count_op_in_a_0\n        count_op_in_a_0 = count_zero\n    # \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n    zero_index = zero_index + 1\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 count_zero_in_a\n    count_zero_in_a = count_zero_in_a - 1\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 count_op_in_a_0\n    count_op_in_a_0 = count_op_in_a\n    # \u0435\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0443\u043b\u0435\u0439\n    if zero_index < 0:\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e count_op_in_a_0\n        count_op_in_a_0 = count_zero\n\n    count_0 = count_op_in_a_0\n\n    # \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a\n    zero_index = zero_a\n    # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u0430\u0441"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) < k:\n        return str(0)\n    if sum(a) == k:\n        return str(1)\n    num_a = len(set(a))\n    for i in range(len(a)):\n        a.remove(min(a))\n        a.append(min(a))\n    count = 0\n    for i in range(1, num_a + 1):\n        count += a.count(i) * (num_a - a.count(i))\n    return str(count)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    return str(4)"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    for _ in range(n):\n        a, b = (a + b) % n, a\n    return str(a + b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    return str(a * b + c)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def convert_to_index(x):\n        return int(x, 2)\n\n    def check_in_order(num):\n        for i in range(len(input_nums) - 1):\n            if input_nums[i] == num and input_nums[i + 1] > num:\n                return False\n        return True\n\n    input_nums = map(convert_to_index, stdin.split(' '))\n    input_nums = list(input_nums)\n    b = input_nums.pop()\n    r = input_nums.pop()\n    num_of_blue_balls = b\n\n    if r <= b:\n        return '0'\n\n    for i in range(len(input_nums)):\n        if check_in_order(input_nums[i]):\n            if input_nums[i] < num_of_blue_balls:\n                num_of_blue_balls = input_nums[i]\n        else:\n            break\n\n    return str(num_of_blue_balls)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    res = \"\"\n    if n == 0:\n        return str(0)\n    i = 0\n    while i < n:\n        if i == 0:\n            res = str(a)\n            i += 1\n            continue\n        if i == 1:\n            res = res + str(a+b)\n            i += 1\n            continue\n        if i == 2:\n            res = res + str(a)\n            i += 1\n            continue\n        if i == 3:\n            res = res + str(a+b)\n            i += 1\n            continue\n        if i == 4:\n            res = res + str(b)\n            i += 1\n            continue\n        if i == 5:\n            res = res + str(a)\n            i += 1\n            continue\n        if i == 6:\n            res = res + str(b+a)\n            i += 1\n            continue\n        if i == 7:\n            res = res + str(a)\n            i += 1\n            continue\n    return res\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(range(int(stdin[:2])))) +'' + str(sum(range(int(stdin[2:4]))))\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(N * (A + 1) + B)"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    row = \"b\" + \"b\" * (n - 2) + \"r\"\n    return str(row.count('b'))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    return str(int(N) * int(A) + int(B))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [1, *range(2, int(n**0.5)+1), int(n**0.5)+1]\n    x = stdin.split('\\n')[1]\n    x = int(x)\n    divisors.remove(x)\n\n    divisors.sort()\n\n    for x in divisors:\n        if len(divisors) > 1 and x == divisors[0]:\n            continue\n        if all(x%d for d in divisors):\n            return str(x)\n\n    return str(-1)\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = map(int, stdin.split())\n    l = []\n    for i in d:\n        if i > 1 and all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            l.append(i)\n    if len(l) == 1:\n        return str(l[0])\n    return str(l[-1]) if len(l) else -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #..."
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin.pop(0))\n        divisors = stdin.pop(0).split()\n        divisors = sorted(list(map(int, divisors)))\n        if len(divisors) == n:\n            divisors.remove(max(divisors))\n            divisors.remove(min(divisors))\n        if len(divisors) == n - 1:\n            return '-1'\n        if min(divisors) == max(divisors):\n            return str(min(divisors))\n    return '0'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    ans = []\n    for i in range(t):\n        n = int(stdin.split()[1])\n        divisors = stdin.split()[2]\n        divisors = list(map(int, divisors.split()))\n        if len(divisors)!= n or len(set(divisors)) == 1 or len(divisors) == n:\n            ans.append(-1)\n        else:\n            ans.append(divisors[0])\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        divisors = list(map(int, stdin().split()))\n        if len(divisors) == n:\n            min_div = min(divisors)\n            for d in divisors:\n                if d!= min_div:\n                    break\n            else:\n                print(min_div)\n                continue\n        print('-1')\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(stdin.split()[1])\n    if len(a) == 1:\n        return -1\n    if n == 1:\n        return a[0]\n    s = 1\n    e = max(a)\n    while s <= e:\n        m = (s + e) // 2\n        c = 0\n        for i in a:\n            if i % m == 0:\n                c += 1\n        if c == len(a):\n            s = m + 1\n        else:\n            e = m - 1\n    return s\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n    return str(min(divisors)) if divisors else '-1'"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = list(map(int, stdin.split()))\n    min_div = divisors[0]\n    for i in range(1, n):\n        divisors[i] = divisors[i] if divisors[i] > min_div else min_div\n        min_div = min(min_div, divisors[i])\n    if min_div!= 1 and max(divisors) == min_div:\n        return str(min_div)\n    return \"No\""
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split(\" \")))\n\n    hash_table = dict()\n\n    for i in range(n):\n        if arr[i] not in hash_table.keys():\n            hash_table[arr[i]] = 1\n        else:\n            hash_table[arr[i]] += 1\n\n    result = 0\n    for i in range(n):\n        if hash_table[arr[i]] == 1:\n            result += 1\n        else:\n            hash_table[arr[i]] = 1\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdout"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    a = list(map(int, stdin.split()))\n    x = a.pop(1)\n    unique = set(a)\n    for i in a:\n        if i in unique:\n            unique.remove(i)\n    return str(len(unique))\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    ans = []\n    for i in range(len(a)):\n        if a[i] not in ans:\n            ans.append(a[i])\n    ans = sorted(ans, key=lambda x: x[0])\n    return str(len(ans)) + '\\n' +''.join(str(x) for x in ans)\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n    unique_values = set(a)\n    duplicates_counter = 0\n    for unique_value in unique_values:\n        index = a.index(unique_value)\n        if index == len(a)-1:\n            continue\n        if a[index + 1] == unique_value:\n            duplicates_counter += 1\n            a[index] = -1\n        else:\n            a[index + 1] = -1\n    answer = duplicates_counter + 1\n    return f\"{answer}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    return str(len(set(stdin))) + \"\\n\" + \" \".join(sorted(stdin)[1:])\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    ans = 0\n    while True:\n        if len(set(a)) == 1:\n            ans += 1\n            break\n        # tmp = a[:]\n        tmp = [a[i] for i in range(len(a)) if a.count(a[i]) == 1]\n        a = tmp\n    return str(ans) +'' +''.join(map(str, tmp))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    a.sort(key=int)\n    if a[0] == a[-1] or a[0] == a[1]:\n        return 1\n    elif a[0]!= a[-1]:\n        a.pop(0)\n        a.pop()\n        return len(a)"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    removed = 0\n    dups = {}\n    for i, a_i in enumerate(a):\n        if a_i in dups:\n            if dups[a_i] == i:\n                removed += 1\n            else:\n                dups[a_i] = i\n        else:\n            dups[a_i] = i\n    return removed\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from user\n    in_arr = stdin.split()\n    \n    # The number of elements in array\n    n = int(in_arr[0])\n    \n    # The array of numbers\n    arr = in_arr[1:]\n    \n    # New array\n    new_arr = []\n    \n    # Iterate through the array\n    for i in range(n):\n        \n        # If the number is already in the array\n        if arr[i] in arr:\n            \n            # Remove the number and save it in the new array\n            new_arr.append(arr.pop(arr.index(arr[i])))\n        \n        # Otherwise save it in the new array\n        else:\n            new_arr.append(arr[i])\n    \n    # Return the length of array and new array\n    return f\"{len(new_arr)}\\n{new_arr}\""
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    candidates = list(range(a, 1000000))\n    for num in candidates:\n        sum_ = sum([int(x) for x in str(num)])\n        if sum_ % 4!= 0:\n            continue\n        for dig in str(num):\n            if int(dig) % 4!= 0:\n                break\n        else:\n            return str(num)\n    return str(a + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while a > 0:\n        a -= 3\n        a += 4\n        if a >= 4:\n            return str(a)\n        else:\n            a -= 3\n            a += 4\n            a -= 4\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a\n    while True:\n        if is_interesting(b):\n            print(b)\n            break\n        b += 1\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1,1000):\n        if sum(map(int,str(i))) % 3 == 0:\n            if i >= a:\n                return str(i)\n    for i in range(1,1000):\n        if sum(map(int,str(i))) % 4 == 0:\n            if i >= a:\n                return str(i)\n    return str(a)\n\nsolution(input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = int(stdin)\n    \n    while a:\n        s = str(a)\n        if sum([int(d) for d in s]) % 3 == 0 and a > int(s):\n            print(a)\n        a -= 1"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while a > 0:\n        a = a - (a % 10) + (a % 10)\n        if a % 4 == 0:\n            return str(a)\n    return str(a)\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a - 1\n    while b > 0:\n        c = (b % 10) + (b // 10)\n        d = (c % 10) + (c // 10)\n        if d == a:\n            return str(b)\n        b -= 1\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    ans: int = 0\n    while a > 0:\n        ans += a % 10\n        a = a // 10\n    return str(ans)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    ans = n\n    while n >= 10:\n        ans = sum([int(i) for i in str(n)])\n        n = ans\n    return str(ans)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while a > 0:\n        if (a % 10) + (a % 100) + (a % 1000) == 0:\n            return str(a)\n        a -= 1\n    return str(0)"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def chr_distance(string1: str, string2: str) -> int:\n        return sum(abs(ord(c1) - ord(c2)) for c1, c2 in zip(string1, string2))\n\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n    res = []\n    for i in range(len(s)):\n        # tmp = []\n        for j in range(len(s)):\n            if i == j:\n                continue\n            elif s[i] == s[j]:\n                continue\n            else:\n                tmp = []\n                tmp.append(chr_distance(s[i], s[j]))\n                tmp.append(i)\n                tmp.append(j)\n                res.append(tmp)\n\n    res = sorted(res, key=lambda x: (x[0], x[1]))\n\n    #print(res)\n    return \"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        test_case = line.split()\n        s = test_case[0]\n        m = int(test_case[1])\n        b = list(map(int,test_case[2]))\n        \n        if m<=len(s):\n            return s\n        t = ''\n        def calc_score(letter,position):\n            score = 0\n            if letter < position:\n                for i in range(position):\n                    score += abs(i-position)\n            else:\n                for i in range(letter):\n                    score += abs(i-position)\n            return score\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if calc_score(s[i],j) == len(s)-i and (i+j)<=len(s):\n                    if t+s[i] not in s:\n                        t += s[i]\n                        if j == 0:\n                            b[i] = calc_score(s[i],i)\n                        else:\n                            b[i] = calc_score(s[i],i+1)\n                        \n        print(t)\n        print(b)\n        return\n\nsolution(input())\n    "
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return: str\n    '''\n    # stdin = sys.stdin.read()\n    q = int(stdin.split()[0])\n    for i in range(q):\n        # print(stdin.split()[1:])\n        b = [int(x) for x in stdin.split()[1:]]\n        if len(b) > 0:\n            s = stdin.split()[1]\n        else:\n            s = stdin.split()[2]\n        print(solution2(s, b))\n    return ''\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        string, m, b = stdin.split()\n        b = [int(x) for x in b.split()]\n        string_list = []\n        for s in string:\n            string_list.append(s)\n        string_list.sort(key=lambda x: abs(ord(x) - ord(string[0])))\n        string = \"\".join(string_list)\n        print(string)\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for line in range(int(stdin.strip())):\n        a, b, c = stdin.split()\n        a, b, c = int(a), int(b), int(c)\n        s = ''.join(sorted(stdin.strip()))\n        if len(s)!= len(set(s)):\n            print('a')\n        elif len(set(s)) < b + 1 or len(set(s)) > b - 1:\n            print('b')\n        else:\n            print('a')\n    return \n    \n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        line = stdin.split()\n        s = line[0]\n        m = int(line[1])\n        b = list(map(int, line[2:]))\n        s = list(s)\n        count = 0\n        for i in range(m):\n            s[i] = chr(ord(s[i]) - (b[i] % 26))\n            if b[i] % 26 > 0:\n                count += b[i] % 26\n        print(s, count)\n    return\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        s = stdin.split(\"\\n\")[i]\n        if len(s) <= 50:\n            m = int(stdin.split(\"\\n\")[i + 1])\n            b = [int(x) for x in stdin.split(\"\\n\")[i + 2].split()]\n            t = solution2(s, m, b)\n            print(t)\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.splitlines()[1]\n        m = int(stdin.splitlines()[2])\n        b = list(map(int, stdin.splitlines()[3].split()))\n        for i in range(m):\n            if b[i] < 0:\n                break\n        else:\n            ans = ''\n            cur = 0\n            for c in s:\n                cur += 1\n                if c == 'a':\n                    ans += 'b'\n                elif c == 'b':\n                    if cur == b[i]:\n                        ans += 'a'\n                else:\n                    ans += c\n            return ans"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(map(int, stdin.split()))\n    N = stdin_list[0]\n    names = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"aa\", \"ab\", \"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ah\", \"ai\", \"aj\", \"ak\", \"al\", \"am\", \"an\", \"ao\", \"ap\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"aaaa\", \"aab\", \"aac\", \"aad\", \"aae\", \"aaf\", \"aag\", \"aah\", \"aai\", \"aaj\", \"aak\", \"aal\", \"aam\", \"aan\", \"aao\", \"aap\", \"aaq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \""
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_name(number: int):\n        return chr(number + ord('a') - 1)\n\n    input_data = stdin.split()\n    assert len(input_data) == 1, f\"Wrong input format (expected 1 line of input, got {len(input_data)})\"\n    number = int(input_data[0])\n    assert 1 <= number <= 1000000000000001, f\"Wrong input value {number} (expected 1 <= number <= 1000000000000001)\"\n\n    return get_name(number)\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    for i in range(int(stdin)):\n        print(chr(i + 1))\n    return \"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dogs_names = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n                  'aa','ab','ac','ad','ae','af','ag','ah','ai','aj','ak','al','am','an','ao','ap','aq','ar','as','at','au','av','aw','ax','ay','az','aaa','aab','aac','aad','aae','aaf','aag','aah','aiy','ajj','akk','all','alz','amz','anm','anx','anz','apz','ara','arz','asm','asx','atz','avz','awm','awx','axz','azm','azx','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz','zxz','azm','azx','axz','bzm','bzx','cxz','dxz','ezm','ezx','fzm','fzx','gxz','hxz','mxz','nxz"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    list_1 = list(stdin)\n    n = int(list_1[0])\n    string = ''\n    for i in range(1, n + 1):\n        string += chr(i+97) + chr(i+97)\n        if i == 26:\n            break\n    print(string)\n    return string"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"a\"\n    elif N == 2:\n        return \"aa\"\n    elif N == 3:\n        return \"aaa\"\n    elif N == 4:\n        return \"aaaa\"\n    elif N == 5:\n        return \"aaaaa\"\n    elif N == 6:\n        return \"aaaaaa\"\n    elif N == 7:\n        return \"aaaaaaaa\"\n    elif N == 8:\n        return \"aaaaaaaaa\"\n    elif N == 9:\n        return \"aaaaaaaaaa\"\n    elif N == 10:\n        return \"aaaaaaaaaaa\"\n    elif N == 11:\n        return \"aaaaaaaaaaaa\"\n    elif N == 12:\n        return \"aaaaaaaaaaaaa\"\n    elif N == 13:\n        return \"aaaaaaaaaaaaaa\"\n    elif N == 14:\n        return \"aaaaaaaaaaaaaaa\"\n    elif N == 15:\n        return \"aaaaaaaaaaaaaaaa\"\n    elif N == 16:\n        return \"aaaaaaaaaaaaaaaaa\"\n    elif N == 17:\n        return \"aaaaaaaaaaaaaaaaaa\"\n    elif N == 18:\n        return \"aaaaaaaaaaaaaaaaaaa\"\n    elif N == 19:\n        return \"aaaaaaaaaaaaaaaaaaaa\"\n    elif N == 20:\n        return \"aaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 21:\n        return \"aaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 22:\n        return \"aaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 23:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 24:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 25:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 26:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 27:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 28:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 29:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 30:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 31:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 32:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 33:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 34:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 35:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 36:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 37:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 38:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 39:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 40:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 41:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 42:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 43:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 44:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 45:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 46:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 47:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 48:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 49:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 50:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 51:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 52:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 53:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 54:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 55:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 56:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 57:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 58:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 59:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 60:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 61:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 62:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 63:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 64:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 65:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 66:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 67:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 68:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 69:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    elif N == 70:\n        return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 'a'\n    b = 'b'\n    c = 'c'\n    d = 'd'\n    e = 'e'\n    f = 'f'\n    g = 'g'\n    h = 'h'\n    i = 'i'\n    j = 'j'\n    k = 'k'\n    l = 'l'\n    m ='m'\n    n = 'n'\n    o = 'o'\n    p = 'p'\n    q = 'q'\n    r = 'r'\n    s ='s'\n    t = 't'\n    u = 'u'\n    v = 'v'\n    w = 'w'\n    x = 'x'\n    y = 'y'\n    z = 'z'\n    aa = 'aa'\n    ab = 'ab'\n    ac = 'ac'\n    ad = 'ad'\n    ae = 'ae'\n    af = 'af'\n    ag = 'ag'\n    ah = 'ah'\n    ai = 'ai'\n    aj = 'aj'\n    ak = 'ak'\n    al = 'al'\n    am = 'am'\n    an = 'an'\n    ao = 'ao'\n    ap = 'ap'\n    aq = 'aq'\n    ar = 'ar'\n    as = 'as'\n    at = 'at'\n    au = 'au'\n    av = 'av'\n    aw = 'aw'\n    ax = 'ax'\n    ay = 'ay'\n    az = 'az'\n    aaa = 'aaa'\n    aaab = 'aaab'\n    aaac = 'aaac'\n    aaad = 'aaad'\n    aae = 'aae'\n    aaf = 'aaf'\n    aga = 'aga'\n    agb = 'agb'\n    agc = 'agc'\n    agd = 'agd'\n    age = 'age'\n    agg = 'agg'\n    agh = 'agh'\n    ahi = 'ahi'\n    ahj = 'ahj'\n    ahk = 'ahk'\n    ahl = 'ahl'\n    aim = 'aim'\n    ajm = 'ajm'\n    ajn = 'ajn'\n    ako = 'ako'\n    alc = 'alc'\n    ald = 'ald'\n    ale = 'ale'\n    alh = 'alh'\n    ali = 'ali'\n    alj = 'alj'\n    alk = 'alk'\n    all = 'all'\n    alm = 'alm'\n    aln = 'aln'\n    alo = 'alo'\n    alp = 'alp'\n    alq = 'alq'\n    als = 'als'\n    alt = 'alt'\n    alu = 'alu'\n    alv = 'alv'\n    alw = 'alw'\n    alx = 'alx'\n    aly = 'aly'\n    alz = 'alz'\n    ama = 'ama'\n    amb = 'amb'\n    ame = 'ame'\n    amh = 'amh'\n    ami = 'ami'\n    amj = 'amj'\n    amk = 'amk'\n    amm = 'amm'\n    amn = 'amn'\n    amo = 'amo'\n    amp = 'amp'\n    amq = 'amq'\n    ams = 'ams'\n    amt = 'amt'\n    amu = 'amu'\n    amv = 'amv'\n    amw = 'amw'\n    amx = 'amx'\n    amy = 'amy'\n    amz = 'amz'\n    ana = 'ana'\n    anb = 'anb'\n    anc = 'anc'\n    andc = 'andc'\n    ande = 'ande'\n    anf = 'anf'\n    ang = 'ang'\n    anh = 'anh'\n    ani = 'ani'\n    anj = 'anj'\n    ank = 'ank'\n    ann = 'ann'\n    anq = 'anq'\n    ans = 'ans'\n    ant = 'ant'\n    anu = 'anu'\n    anv = 'anv'\n    anw = 'anw'\n    anx = 'anx'\n    any = 'any'\n    anz = 'anz'\n    aoa = 'aoa'\n    aob = 'aob'\n    aoc = 'aoc'\n    aod = 'aod'\n    aoe = 'aoe'\n    aof = 'aof'\n    aog = 'aog'\n    aoh = 'aoh'\n    aoi = 'aoi'\n    aoj = 'aoj'\n    aok = 'aok'\n    aol = 'aol'\n    aom = 'aom'\n    aon = 'aon'\n    aoq = 'aoq'\n    aos = 'aos'\n    aot = 'aot'\n    aou = 'aou'\n    aov = 'aov'\n    aoz = 'aoz'\n    aqa = 'aqa'\n    aqb = 'aqb'\n    aqc = 'aqc'\n    aqd = 'aqd'\n    aqe = 'aqe'\n    aqf = 'aqf'\n    aqg = 'aqg'\n    aqh = 'aqh'\n    aqi = 'aqi'\n    aqj = 'aqj'\n    aqk = 'aqk'\n    aql = 'aql'\n    aqm = 'aqm'\n    aqn = 'aqn'\n    aqo = 'aqo'\n    aqp = 'aqp'\n    aqq = 'aqq'\n    aqr = 'aqr'\n    aqs = 'aqs'\n    aqt = 'aqt'\n    aqu = 'aqu'\n    aqw = 'aqw'\n    aqx = 'aqx'\n    aqy = 'aqy'\n    aqz = 'aqz'\n    ar1 = 'ar1'\n    ar2 = 'ar2'\n    ar3 = 'ar3'\n    ar4 = 'ar4'\n    ar5 = 'ar5'\n    ar6 = 'ar6'\n    ar7 = 'ar7'\n    ar8 = 'ar8'\n    ar9 = 'ar9'\n    ar10 = 'ar10'\n    ar11 = 'ar11'\n    ar12 = 'ar12'\n    ar13 = 'ar13'\n    ar14 = 'ar14'"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dogs = []\n    for i in range(1, n+1):\n        dogs.append(chr(i))\n    return \"\".join(dogs)\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    names = 'abcdefghijklmnopqrstuvwxyz'\n    letters = []\n    for i in range(1, 27):\n        letters.append(i)\n    for i in range(27, 701):\n        letters.append(i)\n    for i in range(701, 18277):\n        letters.append(i)\n    for i in range(18277, 18278):\n        letters.append(i)\n    for i in range(18278, 703):\n        letters.append(i)\n    for i in range(703, 7003):\n        letters.append(i)\n    for i in range(7003, 997):\n        letters.append(i)\n    for i in range(997, 19137):\n        letters.append(i)\n    for i in range(19137, 19138):\n        letters.append(i)\n    for i in range(19138, 60000):\n        letters.append(i)\n    for i in range(60000, 70000):\n        letters.append(i)\n    for i in range(70000, 900000):\n        letters.append(i)\n    for i in range(900000, 1000000):\n        letters.append(i)\n    for i in range(1, 10000001):\n        letters.append(i)\n    for i in range(1, 10000001):\n        letters.append(i)\n    letters.reverse()\n    return ''.join([names[x - 1] for x in letters[n - 1:n]])\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ''.join([chr(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _n = int(stdin.strip())\n    _words = stdin.split()\n    for i in range(0, _n):\n        for j in range(i, _n):\n            if _words[i] == _words[j]:\n                if _n - 1 - i == j - i:\n                    _words = _words[0:i]\n                    _words.extend(_words[i + 1:_n])\n                    break\n                else:\n                    continue\n    print(len(''.join(_words)))\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.strip()\n    return min(len(text) - max(i + 1 - j for i, j in zip(\n        [i.upper() for i in text.split()],\n        [i.upper() for i in text.split()]\n    )) for j in range(len(text.split())))"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    text = stdin.split()\n    len_text = len(text)\n    for i in range(len_text):\n        text[i] = text[i].upper()\n\n    index = 1\n    for j in range(1, len_text - 1):\n        if text[j]!= text[j - 1] and text[j]!= text[j + 1]:\n            index += 1\n\n    for k in range(2, len_text - 2):\n        if text[k] == text[k - 2] and text[k] == text[k - 1] and text[k] == text[k + 1] and text[k] == text[k + 2] and index <= 2:\n            text.remove(text[k])\n            index = 1\n\n    return str(len(text))\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    best_length = len(words)\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if (len(words[i]) == len(words[j])):\n                if (j - i) == (len(words[i]) - 1):\n                    continue\n                else:\n                    for k in range(j - i + 1):\n                        words[i] = words[i] + words[i + k].upper()\n                        words[j] = words[j] + words[j - k].upper()\n                        if (len(words) == len(set(words))):\n                            if (len(words) < best_length):\n                                best_length = len(words)\n                    words[i] = words[i].lower()\n                    words[j] = words[j].lower()\n    return best_length\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    words = text.split()\n    if len(words) <= 1:\n        return len(text)\n    word_pos = {}\n    for i in range(len(words)):\n        if words[i] in word_pos:\n            word_pos[words[i]].append(i)\n        else:\n            word_pos[words[i]] = [i]\n    res = len(text)\n    for w in word_pos:\n        if len(word_pos[w]) > 1:\n            i = word_pos[w][0]\n            j = word_pos[w][-1]\n            res = min(res, len(text[i:j + 1]))\n    return res"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.split()\n    text = sorted(text)\n\n    print(len(text))"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    text = stdin.split()\n    words = sorted(text)\n    result = None\n    # initial_length = len(words) - 1\n    first_two_words = words[0]\n    second_two_words = words[1]\n    for i in range(2, n):\n        if words[i] == first_two_words:\n            first_two_words = words[i + 1]\n        elif words[i] == second_two_words:\n            second_two_words = words[i + 1]\n        else:\n            words[i] = words[i].lower()\n            words[i - 1] = words[i - 1].lower()\n            first_two_words = words[i]\n            second_two_words = words[i + 1]\n    if len(words) % 2 == 0:\n        result = (len(words) - 1) // 2\n    else:\n        result = (len(words) - 1) // 2 + 1\n    return str(result)\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    abbreviation = []\n    ind = 0\n    while ind < len(text):\n        word = text[ind:ind+1]\n        if word =='':\n            ind += 1\n        else:\n            while text[ind] =='':\n                ind += 1\n            if text[ind] in text[ind+1:]:\n                text = text[:ind] + word.upper() + text[ind + 1:]\n                ind += 1\n            else:\n                word = text[ind:ind + 1]\n                abbreviation.append(word)\n                ind += 1\n    return len(text) - len(abbreviation)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    if n == 1:\n        return str(a[0])\n    if k == 1:\n        return str(sum(a))\n    profit = []\n    cur_max = 0\n    cur_max_pos = 0\n\n    for i in range(k):\n        cur_max = max(cur_max, a[i])\n        if cur_max > cur_max_pos:\n            cur_max_pos = cur_max\n            profit.append(i)\n    # print(profit)\n\n    profit.sort()\n\n    if profit[0] == 0:\n        return str(sum(a))\n\n    ans = profit[0]\n    for i in range(1, len(profit)):\n        if profit[i] == profit[i - 1]:\n            ans += profit[i]\n        else:\n            ans += profit[i] - 1\n    return str(ans)"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    t.append(s[0])\n    t.append(max(s))\n    for i in range(1, n):\n        t.append(max(t[-2] + s[i], s[i]))\n    max_profit = sum(t)\n    # print(t)\n    for i in range(1, k):\n        t = []\n        t.append(s[i])\n        for j in range(i + 1, n):\n            t.append(max(t[-2] + s[j], s[j]))\n        max_profit = max(max_profit, sum(t))\n    return str(max_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    profit = 0\n    for i in range(len(a)):\n        s = a[i: i + k + 1]\n        a = a[i + k + 1:]\n        n_diff = max(s) - min(s)\n        profit = max(profit, n_diff * len(s))\n    return str(profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_profit = 0\n    profit = []\n\n    for i in range(k):\n        curr_profit = 0\n        for j in range(i, n, k):\n            curr_profit += a[j]\n            if max_profit < curr_profit:\n                max_profit = curr_profit\n                profit = [j - i + 1] + [j + 1] * (n - j)\n        if max_profit < 0:\n            max_profit = 0\n            profit = []\n    return''.join([str(i) for i in profit])\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # O(n^2)\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i][j - 1], max(dp[i - 1][j])) + a[j - 1]\n    return str(dp[k][n])\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n, k = a[0], a[1]\n    res = []\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, n+1):\n        dp[0][i] = i\n    for i in range(1, k+1):\n        dp[i][0] = 0\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if i > j:\n                dp[i][j] = dp[i-1][j]\n            elif i == j:\n                dp[i][j] = dp[i-1][j-1] + a[i-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n                if a[i-1] > a[j-1]:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n    return str(dp[k][n])\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_profit = 0\n    k_profit = []\n    k_index = 0\n    for i in range(n):\n        if a[i] >= k:\n            k_profit.append(k)\n            k_index = i\n        elif i + k < n:\n            k_profit.append(a[i + k])\n        else:\n            k_profit.append(n - i)\n    k_profit.sort()\n    for i in range(k):\n        max_profit += (k_profit[i] - a[k_index + i]) * a[k_index + i]\n    return str(max_profit)"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    f = [[] for _ in range(k+1)]\n    max_profit = 0\n\n    for day in range(k):\n        for i in range(n):\n            if i >= day and day == 0:\n                f[day] += a[i]\n            elif i >= day:\n                f[day] += max(a[i], f[day-1][i-day] + a[i])\n        max_profit = max(max_profit, f[day][-1])\n\n    return str(max_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total_profit = 0\n    solution_list = []\n    \n    for i in range(k + 1):\n        for j in range(i, k + 1):\n            profit = 0\n            for index, value in enumerate(a[i:j]):\n                profit += value\n                a[i:j] = sorted(a[i:j])\n            solution_list.append(profit)\n    \n    return max(solution_list)"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    solutions = []\n    if n == 1:\n        return '1'\n    for i in range(k):\n        solutions.append(len(problems))\n        for j in range(i, k):\n            solutions.append(solutions[j] + len(problems))\n    return''.join(map(str, solutions))\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    ans = 0\n    if a[0]!= 0:\n        ans += 1\n    for i in range(n):\n        if a[i] == 0:\n            break\n        if a[i] > 0:\n            ans += 1\n        if i + 1 < n:\n            if a[i] + a[i + 1] < 0:\n                ans += 1\n            if a[i] + a[i + 1] > 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    # list of number of zeros before the first element in each subsegment\n    before = [0 for i in range(len(arr))]\n\n    # the sum of all elements of the array minus the first element of each subsegment\n    # (sum of all subsegments minus the first element)\n    subs = sum(arr[1:])\n\n    # start with the first element of the array\n    before[0] = 1\n    i = 1\n    while i < len(arr):\n        # check the next element\n        if subs < 0:\n            # if the next element is bigger than the current, add 1 to before\n            before[i] = before[i - 1] + 1\n        subs -= arr[i]\n        i += 1\n    \n    # find the first position of a zero\n    zero_pos = 0\n    while zero_pos < len(before):\n        # count the number of zeros before the first zero\n        if before[zero_pos] == 0:\n            zero_pos += 1\n        else:\n            break\n    return str(zero_pos)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1]))\n    i = 0\n    j = 0\n    length = 0\n    while i < N:\n        length += A[i]\n        while j < N and length > 0:\n            length -= A[j]\n            if length == 0:\n                print(j - i + 1)\n                return ''\n            j += 1\n        i += 1\n\nsolution('1 -5 3 2\\n')\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nmy_list = input()\nmy_list = my_list.split(\" \")\nresult = 0\n\nfor i in range(len(my_list)):\n    if int(my_list[i]) == 0:\n        result = i\n        break\n    else:\n        result += int(my_list[i])"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split()]\n    arr = sorted(arr)\n    count = 0\n    for i in range(1,len(arr)):\n        if arr[i]-arr[i-1]!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    insert_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == 0:\n                insert_count += 1\n                a[i] += 1\n                break\n    return str(insert_count)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n):\n        if a[i]!= 0 and a[i - 1]!= 0:\n            a[i] = a[i - 1] + a[i]\n        else:\n            res += 1\n            a[i] = 0\n    print(res)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check_sum(arr, length):\n        sum = 0\n        for i in range(length):\n            sum += arr[i]\n        if sum == 0:\n            return True\n        else:\n            return False\n    \n    arr = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    length = len(arr)\n    if check_sum(arr, length) == True:\n        return -1\n    else:\n        start = 0\n        end = length - 1\n        while(start < end):\n            insert_value = arr[start] + arr[end]\n            if insert_value > 0:\n                end -= 1\n            elif insert_value < 0:\n                start += 1\n            else:\n                arr.insert(start+1, insert_value)\n                return insert_value\n        if arr[start] + arr[end] == 0:\n            return length + 1\n        else:\n            return 0"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _n = int(stdin.split()[0])\n    _arr = stdin.split()[1:]\n    arr_copy = copy.deepcopy(_arr)\n    while len(arr_copy) > 1:\n        first = arr_copy.pop(0)\n        last = arr_copy.pop(-1)\n        for i in range(len(arr_copy)):\n            if int(first) + int(last) == 0:\n                arr_copy.remove(last)\n                arr_copy.remove(first)\n    return str(len(arr_copy))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        print(max([sum([abs(x-y) for x,y in zip(a, a[1:])]) for i in range(len(a)-1)]))\n    return \"\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, m = list(map(int, stdin.split()))\n        ans = m + (n - 1) * n / 2\n        print(int(ans))\n    return\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        n, m = (int(x) for x in line.split())\n        if n == 1 and m == 0:\n            return \"0\"\n        a = (int(x) for x in line.split())\n        maximum = 0\n        for i in range(n - 1):\n            maximum = max(maximum, abs(a[i] - a[i + 1]))\n        print(maximum)\n\nsolution(input())\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(map(abs, map(int, stdin.split()))))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    sum = 0\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n        sum += a[i]\n    max_sum = sum\n    a.sort(reverse=True)\n    for i in range(n - 1):\n        max_sum += a[i] - a[i + 1]\n    print(max_sum)\n\nsolution(input())\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    a = list(map(int, stdin.split()))\n    for i in range(n-2):\n        if a[i] + a[i+1] > m:\n            if a[i+1] + a[i+2] > m:\n                if a[i] + a[i+2] > m:\n                    if a[i+1] + a[i+3] > m:\n                        if a[i+2] + a[i+4] > m:\n                            a[i] += a[i+1]\n                            a[i+1] += a[i+2]\n                            a[i+2] += a[i+3]\n                            a[i+3] += a[i+4]\n                        else:\n                            a[i] += a[i+1]\n                            a[i+1] += a[i+2]\n                            a[i+2] += a[i+3]\n                    else:\n                        a[i] += a[i+1]\n                        a[i+1] += a[i+2]\n                        a[i+2] += a[i+3]\n                else:\n                    a[i] += a[i+1]\n                    a[i+1] += a[i+2]\n                    a[i+2] += a[i+3]\n            else:\n                a[i] += a[i+1]\n                a[i+1] += a[i+2]\n                a[i+2] += a[i+3]\n        else:\n            a[i] += a[i+1]\n            a[i+1] += a[i+2]\n            a[i+2] += a[i+3]\n    return str(max(map(abs, a)))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [1]\n    while len(a) <= n - 1:\n        a.append(a[-1] + 1)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, abs(a[i] - a[i + 1]))\n    return str(ans)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        N, M = list(map(int, stdin.split()))\n        arr = []\n        total = 0\n        for i in range(N):\n            total += arr[i]\n            arr.append(total)\n        print(max(arr[i] - arr[i+1] for i in range(N - 1)))\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    num = int(stdin)\n    seq = []\n    multiple = 7\n    if num == multiple:\n        return str(0)\n    else:\n        while num > 1:\n            if num % multiple == 0:\n                seq.append(multiple)\n                num = num//multiple\n            else:\n                multiple = multiple + 7\n                if multiple > 10**6:\n                    return \"None\"\n                if multiple == 1:\n                    multiple = 7\n                continue\n    if seq == []:\n        return \"None\"\n    return str(seq[0])\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    count = 0\n    for i in range(1, stdin + 1):\n        if stdin % i == 0:\n            count += 1\n    if count == 0:\n        return -1\n    else:\n        return count\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, seq = stdin.split(\" \")\n    if len(seq) == 1:\n        return -1\n    k = int(k)\n    for i in range(1, len(seq)):\n        if seq[i] == seq[i-1] * k:\n            return str(i)\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    for k in range(2, 101):\n        if all(n % k == 0 for n in s):\n            return str(s.index(min(s)))\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n\n    for i, j in enumerate(range(7, 8*10**6, 7), start=7):\n        if j % K == 0:\n            return str(i)\n\n    return str(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n\n    for i in range(3, 10000, 2):\n        if i * K == 777:\n            return str(i)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    K\n    \n    Output:\n    the position of the first occurrence of a multiple of K\n    '''\n    \n    from collections import deque\n    if len(stdin) < 2:\n        return -1\n    \n    k = int(stdin)\n    dq = deque(list(str(i) for i in range(1,k+1)))\n    \n    while True:\n        #print(dq)\n        tmp = \"\"\n        for i in range(len(dq)):\n            tmp += dq[i]\n            if tmp[0] == '7':\n                if tmp in dq:\n                    return dq.index(tmp)\n                dq.popleft()\n            else:\n                break\n        \n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, ks = int(stdin), []\n    for i in range(1, k + 1):\n        if i in ks:\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(1, 1001):\n        if i % k == 0:\n            return str(i)\n    return '-1'\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, 10000):\n        if n % i == 0:\n            return str(i)\n    return -1\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = map(int, stdin.split())\nseq = list(map(int, input().split()))\nseq = sorted(seq)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_pairs = 0\n    p1, p2 = map(int, stdin.split())\n    p = sorted(map(int, stdin.split()))\n    if len(p) % 2 == 1:\n        median = p[len(p)//2]\n        for i in range(len(p)):\n            if p[i] == median:\n                if p1 <= i < p2:\n                    num_of_pairs += 1\n    else:\n        median = (p[len(p)//2] + p[len(p)//2 - 1])//2\n        for i in range(len(p)):\n            if p[i] == median:\n                if p1 <= i < p2:\n                    num_of_pairs += 1\n    return num_of_pairs\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    count = 0\n    mid = s[len(s) // 2]\n    for i in range(0, len(s)):\n        count += s.count(s[i]) // 2\n        if s[i] == mid:\n            count -= 1\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    median = a[int(len(a) / 2)]\n\n    counter = 0\n    for i in range(1, len(a)):\n        if a[i] == median:\n            counter += 1\n\n    if counter >= m:\n        print(counter)\n    else:\n        print(0)\n\n\nsolution(input())\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    left = 0\n    right = len(p) - 1\n    counter = 0\n    while left <= right:\n        mid = left + (right - left) // 2\n        if p[mid] == m:\n            if mid - 1 >= 0 and p[mid - 1] == m:\n                right = mid - 1\n            else:\n                return str(counter)\n        elif p[mid] < m:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(counter)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\nimport math\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    n = len(p)\n    p.sort()\n    mid = n // 2\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] <= p[j] and (mid < i + 1 or j - i <= mid):\n                cnt += 1\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    index = 0\n    s = set()\n    for i in range(n):\n        s.add(p[i])\n    result = 0\n    while len(s) < m:\n        result += 1\n        print(len(s), result)\n        index += 1\n        if index == n:\n            index = 0\n        s.add(p[index])\n    return str(result)"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m_index = (n + 1) // 2\n    left = m_index - 1 if n % 2 == 0 else m_index\n    right = m_index if n % 2 == 0 else m_index + 1\n    left_half = a[:left]\n    right_half = a[left:right]\n    left_half.sort()\n    right_half.sort()\n    return left_half[(m - left) // 2] + right_half[(m - right) // 2]\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return str(m)\n    p = list(map(int, stdin.split()))\n\n    p = sorted(p)\n    l = (n+1)//2 - 1\n    r = (n+1)//2\n    while l <= r:\n        if m == p[l]:\n            return str(l+1) + \" \" + str(r+1)\n        elif m < p[l]:\n            r = l-1\n        elif m > p[r]:\n            l = l+1\n        l = (l+r)//2\n    return str(l+1) + \" \" + str(l+1)"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    coffees, page = stdin.split()\n    coffees = int(coffees)\n    page = int(page)\n    if page <= 0:\n        return -1\n    cups = [1]\n    for _ in range(coffees - 1):\n        cups.append(cups[-1] + 1)\n    for _ in range(page):\n        cups.pop(0)\n        cups.append(cups[-1] + 1)\n    return \" \".join(map(str, cups))\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    if (n, m) == (1, 1):\n        return \"1\"\n    cups = list(map(int, stdin.split()))\n    cup_1 = cups[0]\n    cups.remove(cup_1)\n    next_cup = 1\n    max_pages_in_cup = 0\n    while cups:\n        cup_cnt = 1\n        curr_cup = cups[0]\n        cups.remove(curr_cup)\n        while cup_cnt <= max_pages_in_cup:\n            cup_cnt += 1\n            next_cup += 1\n            if next_cup > 10:\n                next_cup = 1\n        max_pages_in_cup = max(max_pages_in_cup, cup_cnt)\n    return str(next_cup)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    Coffee = list(map(int, stdin.split()))\n\n    k = 0\n    MaxCoffee = []\n    MinCoffee = []\n    for i in range(1, N+1):\n        MaxCoffee.append(max(0, Coffee[i-1] - 1))\n        MinCoffee.append(min(MaxCoffee[i-1], Coffee[i-1]))\n    for i in range(N):\n        if MinCoffee[i] == 0:\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # always go to the least needed coffee cup\n    start = 0\n    curr_cup_cap = 1\n    total_pages = 0\n    while True:\n        curr_cup_cap += 1\n        curr_cup_cap = min(n, curr_cup_cap)\n        for i in range(start, start + curr_cup_cap):\n            total_pages += a[i]\n        if total_pages == m:\n            return str(start + curr_cup_cap - 1)\n        if total_pages > m:\n            if start + curr_cup_cap - 1 - start == n:\n                return \"impossible\"\n            start += curr_cup_cap - 1\n            curr_cup_cap += 1\n            total_pages = 0\n            continue\n        start += curr_cup_cap - 1\n        curr_cup_cap = 1\n        total_pages = 0\n\nprint(solution(input()))"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    ans = -1\n    \n    if m!= 1:\n        a.sort()\n        for i in range(n):\n            if a[i] + i >= m:\n                ans = i\n                break\n    else:\n        ans = 0\n    return str(ans)"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main Function\"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # Return -1 if impossible to write coursework\n    if n * m - sum(a) < 0:\n        return -1\n    # Return number of days to write coursework\n    for i in range(n):\n        a[i] += i\n    res = 0\n    for i in range(n):\n        res += a[i]\n        a[i] = -1\n    return res\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if max(a) < m:\n        return -1\n    if min(a) > 0:\n        return -1\n    ans = 0\n    for i in range(1, m + 1):\n        if i == 1:\n            if max(a) - min(a) < m:\n                return -1\n            else:\n                ans += min(a) - max(a)\n        else:\n            if ans + a[i - 1] - a[i - 2] > m:\n                return -1\n            else:\n                ans += a[i - 1] - a[i - 2]\n    return str(ans)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n\n    def write_page(drum: List[int], cups: List[int]) -> None:\n        drum = list(enumerate(drum))\n        for i, d in sorted(drum):\n            cups.append(d)\n            del cups[0]\n\n    def drink_cups(cups: List[int]) -> bool:\n        for i, d in cups:\n            if i > 0 and d > 0:\n                drum = cups[i - 1:i + 1]\n                if i == 1:\n                    drum = drum[::-1]\n                write_page(drum, cups)\n\n    if M == 1:\n        drink_cups(cups)\n        return str(len(cups) - 1)\n    else:\n        # find the minimum number of cups in the first place to write coursework\n        # if it is impossible to write coursework, it means Polycarp cannot\n        # do it in the first place\n        drum = cups[:M]\n        cups = cups[M:]\n        # print(drum, cups)\n\n        while True:\n            if len(cups) < N:\n                # print('new drum', drum)\n                drum = [cups.pop(0)] + drum\n                cups += cups[:N - len(cups)]\n                # print('new cups', cups)\n            else:\n                break\n\n        # print(cups)\n        # print(drum)\n        if len(cups) < N:\n            drum = list(enumerate(drum))\n            for i, d in drum:\n                cups.append(d)\n                del cups[0]\n\n        drink_cups(cups)\n        return str(len(cups) - 1)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    def possible(a, m, k):\n        if m == 0:\n            return True\n        for i in range(k, m):\n            if a[i] <= 0:\n                return False\n        return True\n    if N == 1:\n        return str(a[0])\n    res = 1\n    count = 1\n    for i in range(N):\n        if i == 0:\n            count = count + 1\n        if count == M:\n            if possible(a, i+1, 0):\n                return str(i+1)\n            count = 1\n        if i == N-1:\n            count = count + 1\n            if possible(a, i+1, M):\n                res = max(res, count)\n    if res == 1:\n        return '-1'\n    return str(res)"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups = sorted(cups)\n    start_cups = list(cups)\n    start_cups = start_cups + list(range(n, m + 1))\n\n    min_days = float('inf')\n    for i in range(1, len(start_cups)):\n        if start_cups[i - 1] == start_cups[i]:\n            return -1\n        days = 1\n        for j in range(i + 1, len(start_cups)):\n            if start_cups[i - 1] == start_cups[j]:\n                days += 1\n        min_days = min(days, min_days)\n\n    return min_days\n\n\nprint(solution(input()))"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    seq = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    seq_len = len(seq)\n    for i in range(0, seq_len - 2):\n        if seq[i + 1] - seq[i] == 1:\n            if seq[i + 2] == seq[i]:\n                return -1\n            seq[i + 1] -= 1\n            seq[i + 2] -= 1\n        elif seq[i + 1] - seq[i] == -1:\n            if seq[i + 2] == seq[i]:\n                return -1\n            seq[i + 1] += 1\n            seq[i + 2] += 1\n\n    print(\" \".join(map(str, seq)))\n    return \" \".join(map(str, seq))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    curr_max = a[0]\n    for i in range(1, n):\n        if curr_max - a[i] == 1:\n            curr_max = a[i]\n        else:\n            return -1\n    return str(len(a))\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = stdin.split()\n    count = 0\n    for i in range(len(b)):\n        if b[i] == '1':\n            count += 1\n    if count == n:\n        return \"0\"\n    if count < n:\n        return \"-1\"\n    if count == n:\n        return str(count)\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b = list(map(int, stdin.split()))\n    n = len(b)\n    if n <= 2:\n        return str(n)\n\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    b_zeros = [0] * n\n    b_zeros[0] = b[0]\n    b_ones = [0] * n\n    b_ones[1] = b[1]\n    b_trees = [0] * n\n    b_trees[2] = b[2]\n\n    for i in range(3, n):\n        # \u0415\u0441\u043b\u0438 \u043c\u044b \u043d\u0430\u0448\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\n        if b_trees[i - 2] - b_trees[i - 3]!= 0:\n            return \"0\"\n        # \u0421\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430 \u043e\u0434\u0438\u043d, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0448\u0438\u0431\u043a\u0438\n        b_trees[i] += b_trees[i - 2]\n        # \u041f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0441 \u0441\u0430\u043c\u0438\u043c \u0441\u0435\u0431\u0435, \u0430 \u0438\u043d\u0430\u0447\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n        if b_zeros[i] - b_zeros[i - 1]!= 0:\n            b_zeros[i] = b_zeros[i - 1]\n        if b_ones[i] - b_ones[i - 1]!= 0:\n            b_ones[i] = b_ones[i - 1]\n        b_trees[i] += b_trees[i - 1]\n        b_trees[i] -= b_trees[i - 1]\n    # \u0412 \u043a\u043e\u043d\u0446\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0441 \u0441\u0430\u043c\u0438\u043c \u0441\u0435\u0431\u0435, \u0430 \u0438\u043d\u0430\u0447\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n    if b_zeros[n - 1] - b_zeros[n - 2]!= 0:\n        b_zeros[n - 1] = b_zeros[n - 2]\n    if b_ones[n - 1] - b_ones[n - 2]!= 0:\n        b_ones[n - 1] = b_ones[n - 2]\n    b_trees[n - 1] += b_trees[n - 2]\n    b_trees[n - 1] -= b_trees[n - 2]\n    return str(n)\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = int(stdin.split()[i])\n        b = int(stdin.split()[i + 1])\n        if b - a > 1:\n            return \"-\"\n    return str(b - 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b = list(map(int, stdin.split()))\n    a = 1\n    counter = 1\n    for i in range(len(b)):\n        if a == b[i]:\n            counter += 1\n        else:\n            if a - 1 == b[i] or a + 1 == b[i] or b[i] == 0:\n                counter += 1\n            a = b[i]\n    if a == 0:\n        return -1\n    else:\n        return str(counter)\nsolution(input())\n\n\u0420\u0435\u0448\u0438\u0442\u0435 \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u0433\u043e \u043e\u0434\u043d\u043e\u0442\u0438\u043f\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043f\u043e\u0438\u0441\u043a\u0430.\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439. \u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0441\u0435\u0442\u0438.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u043d\u043e\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u043d\u0438\u044f.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0441\u0435\u0442\u0438.\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 n.\n\u0412 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0447\u0438\u0441\u043b\u043e n.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u0436\u0434\u043e\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\n\n1 \u2264 n \u2264 100.\n\n\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0418\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0432\u0442\u043e\u0440\u043e\u043c \u0438 \u0447\u0438\u0441\u043b\u043e n \u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c. \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u043c \u0438 \u0447\u0438\u0441\u043b\u043e n \u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u044f\u0442\u043e\u043c.\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0432\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438 \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\n\u0412\u0432\u043e\u0434\n\n1\n\n3\n\n5\n\n5\n\n2\n\n3\n\n2\n\n0\n\n5\n\n10\n\n3\n\n2\n\n4"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = list(map(int, stdin.split()))\n    if len(b) <= 2:\n        return -1\n    for i in range(len(b) - 2):\n        if b[i + 2] == b[i] + 1:\n            return str(i + 2)\n    return str(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        if b[i] > 1:\n            for j in range(i + 1, n):\n                if b[j] > 1:\n                    if b[i] > b[j]:\n                        b[i] -= 1\n                        b[j] += 1\n                        res += 1\n    return res if res > 0 else -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    while True:\n        for i in range(n-1):\n            if a[i] < a[i+1]:\n                a[i], a[i+1] = a[i+1], a[i]\n                result += 1\n            if a[i] > 0 and a[i+1] <= 0:\n                break\n        if a[-1] == 0:\n            break\n    if result == 0:\n        print('-1')\n    else:\n        print(result)\n    return\n\nsolution(input())\n\"\"\"\nimport sys\nimport math\n\nsys.setrecursionlimit(10**6)\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) == 1:\n        return \"0\"\n    n = int(stdin[0])\n    sequence = stdin[1:]\n\n    def can_reduce(sequence):\n        last = sequence[0]\n        for i in range(1, len(sequence)):\n            if sequence[i] - last!= 1:\n                return False\n            last = sequence[i]\n        return True\n\n    if not can_reduce(sequence):\n        return \"0\"\n    n_changes = 0\n    i = 0\n    while True:\n        if sequence[i] == 0:\n            i += 1\n            continue\n        sequence[i] -= 1\n        n_changes += 1\n        if n_changes >= n:\n            break\n    return str(n_changes)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    idx = 0\n    while idx < len(a):\n        if idx + k - 1 < len(a) and a[idx + k - 1] - a[idx] <= 5:\n            idx += 1\n            ans += 1\n        else:\n            idx += 1\n    return str(ans)"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = sorted(map(int, stdin.split()), reverse=True)\n    total = 0\n    while len(students) > k:\n        total += sum(students[:k])\n        students = students[k:]\n    total += sum(students)\n    return total\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    students = list(map(int, stdin[1].split()))\n    n = len(students)\n    k = int(stdin[0])\n\n    for _ in range(k):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(students[i] - students[j]) <= 5:\n                    break\n            else:\n                students.pop(i)\n    return len(students)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    teams = set()\n    for i in range(k):\n        for j in range(i, k):\n            if len(teams) == n - k:\n                return len(teams)\n            else:\n                if a[i] + a[j] <= 5:\n                    teams.add((a[i], a[j]))\n    return len(teams)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    ans = 1\n    # print(a)\n    # print(n)\n    while a:\n        # print(a)\n        # print(ans)\n        if ans * k < n:\n            ans += 1\n            k -= 1\n        else:\n            if n % ans == 0:\n                break\n            else:\n                k = n // ans\n                ans += 1\n    return str(ans)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    n, k = list(map(int, stdin[0].split()))\n    skills = list(map(int, stdin[1].split()))\n\n    return max(1, n//(k+1)) + max(1, sum([max(1, (i-j)//5) for i, j in zip(skills, skills[1:])])//(k-1))\n\n\nsolution(\n    \"4 5\\n\"\n    \"1 2 15 15 15\\n\"\n    \"1 10 100 1000\\n\"\n    \"3 3 6 16 21\"\n)\n\nsolution(\n    \"5 4\\n\"\n    \"1 2 15 15 15\\n\"\n    \"1 10 100 1000\\n\"\n    \"3 3 6 16 21\\n\"\n    \"2 2 5 7 10\"\n)\n\nsolution(\n    \"6 1\\n\"\n    \"36 4 1 25 9 16\\n\"\n    \"1 10 100 1000\\n\"\n    \"2 2 5 7 10\\n\"\n    \"3 3 6 16 21\"\n)"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, k = int(data[0]), int(data[1])\n\n    programming_skills = sorted(int(i) for i in data[2:])\n\n    teams = []\n    team_number = 0\n    while True:\n        team = []\n        for i in range(k):\n            if not team or programming_skills[i] > programming_skills[team[-1]]:\n                team.append(i)\n\n        if team:\n            teams.append(team)\n        else:\n            break\n\n        programming_skills = programming_skills[k:]\n        team_number += 1\n\n    return team_number\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    std_skill = list(map(int, stdin.split()))\n    \n    total_std_skill = sum(std_skill)\n    \n    \n    # fill in empty slots\n    for _ in range(k):\n        for _ in range(n):\n            std_skill.append(0)\n    \n    # find max_team_size\n    max_team_size = k\n    for i in range(k):\n        if (max_team_size > n):\n            break\n        sum_team = 0\n        for j in range(i, k):\n            sum_team += std_skill[j]\n        if (abs(total_std_skill - sum_team) <= 5):\n            max_team_size = j\n    \n    # print out the answer\n    print(max_team_size)\n    return\n\nsolution(\"5 2\")\nsolution(\"6 1\")\nsolution(\"4 4\")\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(int, stdin.split(' ')))\n    k = students[1]\n    n = students[0]\n    skills = []\n    for i in range(n):\n        skills.append(students[i+2])\n    skills.sort()\n    print(skills)\n    return 0"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    st = list(map(int, stdin.split()))\n    st = sorted(st)\n    st = [(x, i) for i, x in enumerate(st)]\n    st = sorted(st)\n    st = sorted(st)\n    n = len(st)\n    def helper(k, st):\n        if k < 2:\n            return 0\n        def helper1(st):\n            if st[0][0] == st[1][0]:\n                return 0\n            return st[0][0] - st[1][0] + 1\n        if k == 1:\n            return helper1(st)\n        dp = [[0]*n for i in range(k)]\n        dp[0][0] = st[0][1]\n        for i in range(1, n):\n            dp[0][i] = st[i][1] - st[0][1]\n        for i in range(1, k):\n            for j in range(n):\n                if j > 0:\n                    dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return max(dp[-1])\n    return str(helper(k, st))\nsolution(\"6 1\")\nsolution(\"5 2\")\nsolution(\"4 4\")\nsolution(\"10 10\")\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, k, m) = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        a[i] = a[i] + a[i-1]\n    a = a[:-1]\n    ans = -1\n    for i in range(m, len(a) + 1):\n        ans = max(ans, sum(a[i - m:i]) / m)\n    return str(ans) if ans > k else '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # Convert integer to string\n    arr = list(map(str, arr))\n    s = ''.join(arr)\n    print(s)\n    print(int(s) * M)\n    return int(s) * M"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, *s = map(int, stdin.split())\n    score = sorted(map(int, s))\n\n    if not score or score[0] < m:\n        return \"-\"\n\n    if sum(score) < k:\n        return -1\n\n    s = 0\n    for i in range(len(score)):\n        s += (m + 1) * k // (i + 1)\n        s += k * score[i] // m\n    return str(s)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"5 10 7\"\n    N, K, M = [int(item) for item in stdin.split()]\n    scores = [int(item) for item in stdin.split()]\n    # print(N, K, M, scores)\n\n    if N == 1 and K == 1:\n        print(\"-1\")\n        return\n\n    if N == 1 and K > 1:\n        average = K / N\n        print(int(average * M))\n        return\n\n    if N > 1 and K == 1:\n        average = M / N\n        print(int(average * scores[0]))\n        return\n\n    if N > 1 and K > 1:\n        scores.sort(reverse=True)\n        average = (scores[0] + scores[1]) / 2\n        print(int(average * M))\n        return\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = list(map(int, stdin.split()))\n    stdin = list(map(int, stdin.split()))\n    points_on_subject = 0\n    for index, point in enumerate(stdin):\n        if index == 0:\n            points_on_subject = point\n        else:\n            points_on_subject += point\n\n    if points_on_subject >= M:\n        return str(points_on_subject - M)\n    return '-1'"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = list(map(int, stdin.split()))\n    stdin = list(map(int, stdin.split()))\n    n_points = 0\n    total_points = 0\n    for i in range(len(stdin)):\n        n_points += stdin[i]\n        total_points += (stdin[i] + i)\n    if total_points <= M:\n        return str(n_points)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    k = int(inputs[1])\n    m = int(inputs[2])\n\n    points = list(map(int,inputs[3:]))\n\n    average = sum(points) / n\n\n    min_points = m\n    # i = 0\n    for i in range(n-1):\n        if points[i] > average and min_points > k:\n            break\n\n        if points[i] > average:\n            min_points = min(min_points, k)\n        else:\n            k -= 1\n\n    if min_points == m:\n        min_points = -1\n    return str(min_points)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    N, K, M = line[0].split(\" \")\n    N = int(N)\n    K = int(K)\n    M = int(M)\n    return \"1\" if (M - (N - 1) * (K / N)) >= 0 else \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_k, input_m = stdin.split()\n    n, k, m = int(input_n), int(input_k), int(input_m)\n    scores = list(map(int, stdin.split()))\n\n    # if sum(scores) % k!= 0:\n    #     return -1\n\n    # cumulative_sum = []\n    # cumulative_sum.append(scores[0])\n    # for i in range(1, n):\n    #     cumulative_sum.append(cumulative_sum[i - 1] + scores[i])\n\n    # answer = 0\n    # for i in range(n):\n    #     print(cumulative_sum[n - 1] - cumulative_sum[i])\n    #     if cumulative_sum[n - 1] - cumulative_sum[i] >= m:\n    #         answer = i + 1\n\n    # if answer >= n:\n    #     return -1\n\n    # return str(answer)\n\n    cumulative_sum = [0] * n\n    cumulative_sum[0] = scores[0]\n    for i in range(1, n):\n        cumulative_sum[i] = cumulative_sum[i - 1] + scores[i]\n\n    answer = 0\n    for i in range(n):\n        if cumulative_sum[n - 1] - cumulative_sum[i] >= m:\n            answer = i + 1\n    if answer >= n:\n        return -1\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n = int(n)\n    k = int(k)\n    m = int(m)\n\n    ans = -1\n    if m <= k:\n        ans = k//2\n    elif m == k:\n        ans = k\n    else:\n        ans = k - ((m-k) // (n-1)) * (n-1)\n    return str(ans)"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    k = int(inputs[1])\n    q = int(inputs[2])\n    scores = []\n    for i in range(n):\n        scores.append(int(inputs[i + 3]))\n    scores.sort()\n    answers = []\n    for i in range(q):\n        answers.append(int(inputs[i + 3 + n]))\n    answers.sort()\n    for i in range(q):\n        if scores[answers[i] - 1] < k:\n            print(\"No\")\n            return\n    for i in range(q):\n        if scores[answers[i] - 1] == k:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores = sorted(scores)[::-1]\n    count = 1\n    for i in range(Q):\n        if scores[i] >= K:\n            scores[i] -= 1\n            if scores[i] == 0:\n                count = 0\n            else:\n                count += 1\n    if count == 1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k, q = list(map(int, stdin.split()))\n    players = []\n    for _ in range(n):\n        players.append(int(stdin))\n\n    score = {i: 0 for i in range(1, n + 1)}\n    for _ in range(q):\n        player = int(stdin.split()[1])\n        if players[player - 1] >= k:\n            score[player] = -1\n    for i in range(1, n + 1):\n        score[i] = max(0, score[i] - k)\n    for player in range(1, n + 1):\n        if score[player] == 0:\n            return \"No\"\n    return \"Yes\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split()))\n    scores = list(map(int, stdin.split()))\n    ans = []\n    for i in range(1, n+1):\n        if scores[i-1] == k:\n            ans.append('No')\n        elif scores[i-1] > k:\n            ans.append('Yes')\n        else:\n            for j in range(i+1, n+1):\n                if scores[i-1] + scores[j-1] == q:\n                    ans.append('Yes')\n                    break\n                elif scores[i-1] + scores[j-1] < q:\n                    break\n    return \"\\n\".join(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    players = sorted(list(map(int, stdin.split())))\n\n    for player in range(n):\n        if players[player] == n:\n            break\n        if player == n-1:\n            players.remove(n)\n\n    for i in range(n-1, -1, -1):\n        if players[i] == 0:\n            players.remove(0)\n\n    for i in range(n):\n        if players[i] == 0:\n            players[i] = 1\n            break\n\n    return \"Yes\" if players[-1] == 0 else \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    for i in range(N - 1):\n        scores[i] = -scores[i]\n    for i in range(N):\n        if i == N - 1:\n            print('Yes' if sum(scores) > 0 else 'No')\n        else:\n            print('Yes' if scores[i] > 0 else 'No')\n    return ''\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    return None"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split()))\n    score = list(map(int, stdin.split()))\n    score_dict = {}\n    for idx, score in enumerate(score):\n        if score in score_dict:\n            score_dict[score] += 1\n        else:\n            score_dict[score] = 1\n    ans = []\n    for player in score_dict:\n        if score_dict[player] > 0:\n            ans.append('Yes')\n        else:\n            ans.append('No')\n    for idx, answer in enumerate(ans):\n        print(answer)\n    return \" \".join(ans)"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    N, K = int(line[0]), int(line[1])\n    scores = [int(i) for i in line[2].split()]\n    q = int(line[3])\n    scores_dict = {}\n    for i in range(N):\n        scores_dict[i + 1] = scores[i]\n    for i in range(q):\n        a = int(line[4 + 2 * i])\n        if scores_dict[a] > 0:\n            scores_dict[a] -= 1\n    for i in range(1, N + 1):\n        if scores_dict[i] == 0 or scores_dict[i] < 0:\n            scores_dict.pop(i)\n    print(len(scores_dict))\n    for i in sorted(scores_dict.keys()):\n        print(\"Yes\" if i == 1 else \"No\", end=\"\")\n    return\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    players = [n] * (n + 1)\n    answers = list(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        if i not in answers:\n            players[i] -= 1\n    for i in range(1, n + 1):\n        if players[i] >= k:\n            return 'No'\n    for i in range(1, n + 1):\n        if players[i] == 0:\n            continue\n        if players[i] == -1:\n            continue\n        if players[i] == q:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    matrix = stdin.split()[1:]\n\n    if size <= 0 or len(matrix) < size * size:\n        return 'NO'\n\n    ans = 'YES'\n    inverted = False\n    for i in range(size):\n        if inverted:\n            matrix[i] = matrix[i][::-1]\n        if matrix[i]!= list(range(1, len(matrix) + 1)):\n            ans = 'NO'\n            inverted = True\n            break\n\n    if inverted:\n        for j in range(size):\n            if matrix[j]!= list(range(1, len(matrix) + 1)):\n                ans = 'NO'\n                break\n\n    if ans == 'NO':\n        return 'NO'\n\n    return ans\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in input().split()] for j in range(n)]\n    s = [[] for _ in range(n)]\n    res = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                s[i].append(j)\n    i = 0\n    while i < n:\n        if not s[i]:\n            res.append(i)\n            i += 1\n        else:\n            s[i] = s[i][::-1]\n            res.append(s[i].pop(0))\n    for i in range(n):\n        for j in range(m):\n            if s[i]:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n    return 'YES' if sorted([str(i) for i in a]) == sorted(str(i) for i in a) else 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix = []\n    for i in range(n):\n        row = stdin.strip().split()[i]\n        matrix.append([int(i) for i in row])\n\n    if n * m!= len(matrix):\n        return \"NO\"\n\n    def inverting(row):\n        for i in range(len(row)):\n            if row[i] == 1:\n                row[i] = 0\n            else:\n                row[i] = 1\n\n    inverting(matrix[0])\n    for i in range(1, len(matrix)):\n        inverting(matrix[i])\n\n    return \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m, n = a[0], a[1]\n    if n < 1 or m < 1 or n > 100 or m > 100:\n        return 'NO'\n    a.pop(0)\n    a.pop(0)\n    rows = a[:]\n    cols = a[:]\n    for i in range(len(rows)):\n        rows[i] = rows[i] ^ 1\n    for i in range(len(cols)):\n        cols[i] = cols[i] ^ 1\n    if rows == sorted(rows) or cols == sorted(cols):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n\n    res = 'YES'\n    for i in range(N):\n        if A[i].count(0) > 1:\n            res = 'NO'\n            break\n        A[i].sort()\n\n    for i in range(M):\n        if A[i].count(1) > 1:\n            res = 'NO'\n            break\n        A[i].sort(reverse=True)\n\n    return res"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    def invert_row(a, i):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n\n    def invert_column(a, j):\n        for i in range(n):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n\n    for i in range(n):\n        if a[i][0] == 1:\n            invert_row(a, i)\n        if a[i][m-1] == 1:\n            invert_row(a, i)\n    for j in range(1, m-1):\n        if a[0][j] == 1:\n            invert_column(a, j)\n        if a[n-1][j] == 1:\n            invert_column(a, j)\n\n    return \"YES\" if a == sorted(a, key=lambda x: (x[0], x[1])) else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')[0]\n    rows = rows.split()\n    rows = list(map(int, rows))\n    cols = stdin.split('\\n')[1]\n    cols = cols.split()\n    cols = list(map(int, cols))\n    matrix = []\n    for i in range(len(rows)):\n        matrix.append([int(rows[i]), int(cols[i])])\n\n    def inverted(matrix, num):\n        for j in range(len(matrix[0])):\n            matrix[j][num] = int(not matrix[j][num])\n\n    def check(matrix, inv_row_count, inv_col_count, inv_row_flag, inv_col_flag):\n        matrix = [[i, j] for i, j in enumerate(matrix)]\n        matrix = sorted(matrix, key=lambda x: (x[0], x[1]))\n        if inv_row_count == 0:\n            for j in range(len(matrix[0])):\n                inv_row_flag = int(inv_row_flag)\n                if matrix[inv_row_flag][0] == 0:\n                    matrix[inv_row_flag][0] = 1\n                    matrix[inv_row_count][0] = 0\n                else:\n                    matrix[inv_row_flag][0] = 0\n                    matrix[inv_row_count][0] = 1\n                inv_row_count += 1\n        if inv_col_count == 0:\n            for i in range(len(matrix)):\n                inv_col_flag = int(inv_col_flag)\n                if matrix[i][inv_col_flag] == 0:\n                    matrix[i][inv_col_flag] = 1\n                    matrix[i][inv_col_count] = 0\n                else:\n                    matrix[i][inv_col_flag] = 0\n                    matrix[i][inv_col_count] = 1\n                inv_col_count += 1\n        return matrix\n\n    inv_row_count = 0\n    inv_col_count = 0\n    inv_row_flag = 0\n    inv_col_flag = 0\n    while True:\n        inverted(matrix, inv_col_count)\n        inverted(matrix, inv_row_count)\n        inverted(matrix, inv_col_count, inv_row_count, inv_row_flag, inv_col_flag)\n        if inv_row_count == len(matrix) and inv_col_count == len(matrix):\n            break\n        else:\n            inv_row_count += 1\n            inv_col_count += 1\n            inv_row_flag += 1\n            inv_col_flag += 1\n\n    matrix = check(matrix, inv_row_count, inv_col_count, inv_row_flag, inv_col_flag)\n    for i in range(len(matrix[0])):\n        for j in range(len(matrix)):\n            if matrix[j][i] == 0:\n                matrix[j][i] = '0'\n            else:\n                matrix[j][i] = '1'\n    return ''.join(matrix[0]) + '\\n' + ''.join(matrix[1]) + '\\n' + ''.join(matrix[2])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    \n    # Invert the row if needed\n    for i in range(n):\n        if matrix[i][0] == 0:\n            for j in range(m):\n                matrix[i][j] = 1 - matrix[i][j]\n    \n    # Invert the column if needed\n    for j in range(m):\n        if matrix[0][j] == 0:\n            for i in range(n):\n                matrix[i][j] = 1 - matrix[i][j]\n    \n    # Check if the matrix is sorted\n    for i in range(1, n):\n        if matrix[i]!= sorted(matrix[i]):\n            return 'NO'\n    \n    # Check if the matrix is inverted\n    for j in range(1, m):\n        if matrix[0][j]!= matrix[0][j - 1]:\n            return 'NO'\n    \n    # Return the answers\n    return 'YES\\n' + ''.join([''.join(map(str, x)) for x in matrix])\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    def switch_row(a):\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if a[i][j] > a[i][j - 1] and a[i][j] > a[i + 1][j]:\n                    a[i][j], a[i + 1][j] = a[i + 1][j], a[i][j]\n                    break\n        return a\n\n    def switch_col(a):\n        for i in range(m - 1):\n            for j in range(i + 1, m):\n                if a[i][j] > a[i + 1][j]:\n                    a[i][j], a[i + 1][j] = a[i + 1][j], a[i][j]\n        return a\n\n    res = 'NO'\n    for i in range(n):\n        a[i] = switch_row(a[i])\n        if a[i]!= a:\n            res = 'NO'\n            break\n\n    for i in range(m):\n        a[i] = switch_col(a[i])\n        if a[i]!= a:\n            res = 'NO'\n            break\n\n    if res == 'NO':\n        print(res)\n    else:\n        print('YES')\n        print(*a, sep='\\n')\n\n\nsolution(input())\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # do something\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 3 == 0 and x % 5 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n\n\n'''\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return \"Yes\" if stdin.isdigit() else \"No\"\n    n = int(stdin)\n    return \"Yes\" if is_prime(n) else \"No\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using the ASCII table, we can see that the only possible way to find a valid a-z value is to use a in-range character or\n    to subtract 26 from the actual value. Since the string only has 10 characters, the maximum possible value for a-z is\n    99. This is how we can check if a number is in range or not.\n    \"\"\"\n    for c in stdin:\n        if ord(c) > 96:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns solution.\"\"\"\n\n    # Your code here\n    return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    length = len(number)\n    i = 0\n    if length == 1 and number == \"0\":\n        return \"No\"\n    if length == 1 and number == \"1\":\n        return \"Yes\"\n    while i < length:\n        if number[i] == \"0\" and length > 1:\n            return \"No\"\n        if number[i] == \"1\":\n            if length > 1:\n                return \"Yes\"\n            if length == 1:\n                return \"Yes\"\n        i += 1\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    if len(num) == 10:\n        try:\n            int(num)\n            return \"Yes\"\n        except ValueError:\n            return \"No\"\n    else:\n        return \"No\"\nsolution(str(input()))"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    data = data.strip()\n    num = data\n    is_even = False\n    if len(data) > 1:\n        if int(num[0]) % 2 == 0:\n            is_even = True\n    if len(data) > 2:\n        if int(num[0]) + int(num[1]) % 2 == 0:\n            is_even = True\n    if len(data) > 3:\n        if int(num[0]) + int(num[1]) + int(num[2]) % 2 == 0:\n            is_even = True\n    if len(data) > 4:\n        if int(num[0]) + int(num[1]) + int(num[2]) + int(num[3]) % 2 == 0:\n            is_even = True\n    if len(data) > 5:\n        if int(num[0]) + int(num[1]) + int(num[2]) + int(num[3]) + int(num[4]) % 2 == 0:\n            is_even = True\n    if len(data) > 6:\n        if int(num[0]) + int(num[1]) + int(num[2]) + int(num[3]) + int(num[4]) + int(num[5]) % 2 == 0:\n            is_even = True\n    if len(data) > 7:\n        if int(num[0]) + int(num[1]) + int(num[2]) + int(num[3]) + int(num[4]) + int(num[5]) + int(num[6]) % 2 == 0:\n            is_even = True\n    if len(data) > 8:\n        if int(num[0]) + int(num[1]) + int(num[2]) + int(num[3]) + int(num[4]) + int(num[5]) + int(num[6]) + int(num[7]) % 2 == 0:\n            is_even = True\n    if len(data) > 9:\n        if int(num[0]) + int(num[1]) + int(num[2]) + int(num[3]) + int(num[4]) + int(num[5]) + int(num[6]) + int(num[7]) + int(num[8]) % 2 == 0:\n            is_even = True\n    if is_even:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n >= 2 and stdin[0] == '0':\n        return \"No\"\n    if n > 10:\n        return \"No\"\n    if n == 1:\n        return \"Yes\"\n    for i in range(1,n):\n        if stdin[i] == '0':\n            if stdin[i-1] == '0':\n                return \"No\"\n            else:\n                continue\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_polygon_happy(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n\n    accumulator_positions = []\n    battery_positions = []\n    for i in range(1, n+1):\n        if segments[i-1] == 0:\n            accumulator_positions.append(i)\n        else:\n            battery_positions.append(i)\n\n    max_number_of_segments = 0\n    for accumulator_position in accumulator_positions:\n        max_number_of_segments = max(\n            max_number_of_segments,\n            n - accumulator_position + 1 +\n            battery_positions.index(n-accumulator_position+1) +\n            1)\n    return max_number_of_segments\n\n\nprint(solution(input()))"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.insert(0, 0)\n    s.append(0)\n    res = 0\n    count = 0\n    x = 0\n    if n == 1:\n        return 1\n    while x < n:\n        if s[x] == 1:\n            if count < 2:\n                count += 1\n                res += 1\n                x += 1\n                continue\n            else:\n                x += 1\n                continue\n        if s[x] == 0:\n            if count >= 2:\n                res += 1\n                count -= 1\n                x += 1\n                continue\n            else:\n                res += 1\n                x += 1\n                continue\n    return res\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    dist = n - 1\n    acc_max = max(s)\n    acc_min = min(s)\n    b_max = max(b, acc_max)\n    b_min = min(b, acc_min)\n    b_max_dist = n - b_min\n    b_min_dist = b - n + acc_min\n    acc_max_dist = n - acc_min\n    acc_min_dist = acc - n + b_max\n    print((dist + 1) + max(b_max_dist, acc_max_dist, b_min_dist, acc_min_dist))\n    return ''\n\nsolution(\"6 2 1\")\nsolution(\"5 2 1\")\nsolution(\"7 2 1\")\nsolution(\"4 2 1\")\nsolution(\"8 2 1\")\nsolution(\"2 2 1\")\n\n'''\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, b, a = list(map(int, stdin[0].split()))\n    s = list(map(int, stdin[1].split()))\n    if n == 1:\n        return 1\n    if n == 2:\n        if s[0] == 0 and s[1] == 0:\n            return 1\n        if s[0] == 1 and s[1] == 1:\n            return 2\n    if n == 3:\n        if s[0] == 1 and s[1] == 0 and s[2] == 0:\n            return 2\n        if s[0] == 0 and s[1] == 1 and s[2] == 1:\n            return 2\n    if n == 4:\n        if s[0] == 1 and s[1] == 0 and s[2] == 0 and s[3] == 1:\n            return 2\n        if s[0] == 1 and s[1] == 0 and s[2] == 1 and s[3] == 0:\n            return 2\n        if s[0] == 0 and s[1] == 1 and s[2] == 0 and s[3] == 1:\n            return 1\n        if s[0] == 1 and s[1] == 0 and s[2] == 1 and s[3] == 0:\n            return 1\n    if n == 5:\n        if s[0] == 1 and s[1] == 0 and s[2] == 0 and s[3] == 1 and s[4] == 1:\n            return 2\n        if s[0] == 1 and s[1] == 0 and s[2] == 1 and s[3] == 0 and s[4] == 0:\n            return 2\n        if s[0] == 0 and s[1] == 1 and s[2] == 0 and s[3] == 1 and s[4] == 1:\n            return 1\n        if s[0] == 1 and s[1] == 0 and s[2] == 1 and s[3] == 0 and s[4] == 0:\n            return 1\n    return n\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    distances = []\n    if not s:\n        distances.append(0)\n    else:\n        distances = distances + s\n    \n    distances.sort()\n\n    def go_battery(battery, accumulator, distance):\n        if battery <= 0:\n            if accumulator <= 0:\n                return distance\n            else:\n                return distance + 1\n        if accumulator <= 0:\n            return distance + 1\n        return distance + 1\n    \n    def go_accumulator(battery, accumulator, distance):\n        if accumulator <= 0:\n            return distance\n        if battery <= 0:\n            return distance + 1\n        return distance + 1\n\n    max_segments = 0\n    if a <= 0:\n        max_segments = go_battery(b, a, 0)\n    else:\n        max_segments = go_accumulator(b, a, 0)\n\n    if a <= 0:\n        max_segments = max(max_segments, go_battery(b, a, 0))\n    else:\n        max_segments = max(max_segments, go_accumulator(b, a, 0))\n\n    for i in range(n-1):\n        if s[i] == 1:\n            if a <= 0:\n                max_segments = max(max_segments, go_battery(b, a, distances[i]))\n            else:\n                max_segments = max(max_segments, go_accumulator(b, a, distances[i]))\n\n    return max_segments\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    # i = 1\n    # while i < n:\n    #     if s[i] == 1:\n    #         if (i + 1) % 2 == 0:\n    #             b -= 1\n    #         else:\n    #             a -= 1\n    #     i += 1\n    # print(max(b, a))\n    return max(b, a)\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    acc = list(itertools.accumulate(s))\n    batt = list(itertools.accumulate(s))\n    max_acc = max(acc)\n    max_batt = max(batt)\n    i = 0\n    while acc[i] > max_acc:\n        max_acc -= 1\n        i += 1\n    while batt[i] > max_batt:\n        max_batt -= 1\n        i += 1\n    return i + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return str(max([segment(n, b, a, s) for s in s]))\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = stdin.split()\n    b, a = int(b), int(a)\n    n = int(n)\n    s = list(map(int, stdin.split()))\n    return max(solution_help(s, n, b, a), n)\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin\n    return str(eval(expr))"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1:]\n    for expression in stdin:\n        expr = expression.split(\" \")\n        result = calculate(expr)\n        print(result)\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    operands = stdin.split('+')\n    result = operands[0]\n    for i in range(1, len(operands)):\n        result += \"-\" + operands[i]\n    return result\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def eval(expr):\n        stack = []\n        for i, c in enumerate(expr):\n            if c.isdigit():\n                stack.append(c)\n            else:\n                value = int(stack.pop())\n                operator = c\n                if operator == '+':\n                    value += int(stack.pop())\n                elif operator == '-':\n                    value -= int(stack.pop())\n                else:\n                    print('Unknown operator')\n                stack.append(value)\n        return value\n\n    return str(eval(stdin))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    op_stack = []\n    var_stack = []\n    op_dict = {'+': lambda x, y: x + y,\n               '-': lambda x, y: x - y,\n               '*': lambda x, y: x * y,\n               '/': lambda x, y: x // y}\n\n    for char in stdin:\n        if char.isdigit():\n            var_stack.append(int(char))\n        elif char in op_dict:\n            if len(var_stack) > 1:\n                lhs = var_stack.pop()\n                rhs = var_stack.pop()\n                var_stack.append(op_dict[char](lhs, rhs))\n            else:\n                op_stack.append(char)\n        elif char == '(':\n            var_stack.append(int(char))\n        elif char == ')':\n            while op_stack[-1]!= '(':\n                lhs = var_stack.pop()\n                rhs = var_stack.pop()\n                var_stack.append(op_dict[op_stack.pop()](lhs, rhs))\n            op_stack.pop()\n    while op_stack:\n        lhs = var_stack.pop()\n        rhs = var_stack.pop()\n        var_stack.append(op_dict[op_stack.pop()](lhs, rhs))\n    return str(var_stack.pop())\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n*(n-1))/2!= k:\n        return \"NO\"\n\n    b = [1] * n\n    g = [1] * n\n\n    def is_good_color(c):\n        for i in range(n):\n            if b[i] == c or g[i] == c:\n                return False\n        return True\n\n    for i in range(1, n):\n        if b[i]!= g[i-1]:\n            return \"NO\"\n        if not is_good_color(b[i]):\n            return \"NO\"\n        if not is_good_color(g[i]):\n            return \"NO\"\n        b[i] += 1\n        g[i] += 1\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return 'NO'\n    elif n == k:\n        return 'YES'\n    else:\n        lines = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()))\n        res = []\n        for i in range(n):\n            res.append([i + 1, i + 2])\n            for j in range(i + 2, n):\n                res.append([i + 1, j + 1])\n                res.append([j + 1, i + 1])\n        res.sort(key=lambda x: x[0])\n        res = list(map(lambda x: list(map(lambda y: (y - 1) if y == x[0] else y, range(1, k + 1))), res))\n        for line in res:\n            line.sort()\n        for line in res:\n            if line == res[0]:\n                continue\n            else:\n                if line == res[1]:\n                    continue\n                else:\n                    if line == res[2]:\n                        continue\n                    else:\n                        return 'NO'\n        return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good = False\n    for i in range(1, n):\n        if good:\n            break\n        for j in range(i):\n            for c in range(k):\n                if good:\n                    break\n                if (good :=\n                    (j == 0 and c == 0 and i == j and i == c) or\n                    (good :=\n                    (c == 0 and i == c and i == j) or\n                    (good :=\n                    (j == i and c == 0) or\n                    (j == i and c == k) or\n                    (j == 0 and c == k) or\n                    (i == 0 and c == k))\n                ):\n                    print('YES')\n                    for j in range(n):\n                        print(j + 1, end='')\n                    return '\\n'\n    print('NO')\n    return '\\n'\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k > 2 * 10 ** 5:\n        return \"NO\"\n\n    # initialize matrix\n    matrix = [[None] * k for _ in range(n)]\n\n    # fill matrix\n    for i in range(n):\n        man = int(input())\n        woman = int(input())\n        matrix[i][woman - 1] = man\n        matrix[i][man - 1] = woman\n\n    for row in matrix:\n        if row[0]!= row[1]:\n            return \"NO\"\n\n    color_list = []\n    for i in range(k):\n        color_list.append(int(input()))\n\n    color_list.sort()\n\n    for i in range(k):\n        if matrix[0][i]!= color_list[i]:\n            return \"NO\"\n\n    for i in range(k):\n        if color_list[i]!= matrix[1][i]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    ans = \"NO\"\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            man_color = j\n            woman_color = i\n            b_count = 0\n            g_count = 0\n            for m, w in zip((1,2,3),(2,3,1)):\n                if man_color == w or woman_color == m:\n                    b_count += 1\n                    woman_color = i\n                else:\n                    man_color = w\n            for m, w in zip((4,5,6),(5,6,4)):\n                if man_color == w or woman_color == m:\n                    g_count += 1\n                    man_color = j\n                else:\n                    woman_color = j\n            if b_count == k and g_count == k and b_count == g_count:\n                ans = \"YES\"\n                break\n    return ans\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n\n    if (n * (n + 1) // 2) - n > k:\n        return \"NO\"\n\n    color_dict = {\n        1: \"b\",\n        2: \"g\"\n    }\n\n    color_list = []\n    for i in range(n):\n        color_list.append(color_dict[(i+1) % 2 + 1])\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if color_list[i-1] == color_list[j-1]:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n\n    if n > 2 * k:\n        return \"NO\"\n\n    if n == 1:\n        return \"YES\"\n\n    b_1 = 1\n    g_1 = 2\n    b_2 = 1\n    g_2 = 2\n    g_3 = 2\n\n    for _ in range(n - 2):\n        b_1, g_1 = g_1, b_1\n        b_2, g_2 = g_2, b_2\n        b_3, g_3 = g_3, b_3\n\n    if b_1 == b_2 and g_1 == g_2 and b_2 == g_3 and g_2 == g_3:\n        return \"NO\"\n    if b_1 == g_1 and b_2 == g_2 and b_3 == g_3:\n        return \"NO\"\n    if b_1 == b_2 and g_1 == g_2 and b_3 == g_3:\n        return \"NO\"\n    if b_1 == g_1 and b_2 == g_2 and g_3 == g_1:\n        return \"NO\"\n    if b_2 == b_3 and g_2 == g_3 and b_1 == g_1:\n        return \"NO\"\n    if b_2 == g_3 and b_3 == g_1 and g_2 == g_1:\n        return \"NO\"\n    if b_2 == g_3 and b_3 == g_1 and g_2 == g_1:\n        return \"NO\"\n    if b_3 == b_1 and g_3 == g_1 and b_2 == g_2:\n        return \"NO\"\n\n    if b_1 == b_2 and g_1 == g_2 and g_2 == g_3:\n        return \"NO\"\n    if b_1 == b_2 and g_1 == g_3 and g_2 == g_2:\n        return \"NO\"\n    if b_1 == b_3 and g_1 == g_3 and g_2 == g_2:\n        return \"NO\"\n\n    if g_1 == g_2 and g_2 == g_3 and b_1 == g_1:\n        return \"NO\"\n    if g_1 == g_2 and g_2 == g_3 and b_1 == g_1:\n        return \"NO\"\n    if g_1 == g_3 and g_2 == g_3 and b_1 == g_1:\n        return \"NO\"\n\n    if g_1 == g_2 and g_2 == g_3 and b_2 == g_2:\n        return \"NO\"\n    if g_1 == g_2 and g_2 == g_3 and b_3 == g_2:\n        return \"NO\"\n    if g_1 == g_3 and g_2 == g_3 and b_2 == g_2:\n        return \"NO\"\n\n    if g_1 == g_3 and g_2 == g_3 and b_1 == g_1:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n * (n - 1) // 2 < k:\n        return \"NO\"\n\n    cost_of_man = {}\n    cost_of_woman = {}\n    for i in range(1, k + 1):\n        cost_of_woman[i] = 1\n        cost_of_man[i] = 1\n\n    for _ in range(n):\n        num_of_man, num_of_woman = map(int, input().split())\n        cost_of_man[num_of_man] = 1\n        cost_of_woman[num_of_woman] = 1\n\n    for i in range(1, k + 1):\n        if cost_of_man[i] == 1 and cost_of_woman[i] == 1:\n            return \"NO\"\n\n    for i in range(2, k + 1):\n        if cost_of_man[i] == 1 and cost_of_woman[i] == 1:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1 or k <= 1:\n        return \"NO\"\n\n    # \u0445\u0440\u0430\u043d\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0435\u0433\u043e \u043f\u0443\u0442\u0438\n    # \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n    ans = 0\n    # \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n    used = 0\n\n    # \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0435\u0433\u043e \u043f\u0443\u0442\u0438\n    costs = [[0] * k for i in range(n)]\n    # \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n    d = 0\n\n    # \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    for i in range(n):\n        costs[i][0] = 0\n        used = 0\n        d = 0\n        for j in range(1, k):\n            costs[i][j] = costs[i][j - 1] + abs(j - used)\n            used = max(used, j)\n            d = max(d, j)\n        # \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n        # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e\n        if costs[i][d] < k:\n            ans += 1\n            print(costs[i][d], end=\" \")\n        # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443\n        elif costs[i][d] == k:\n            ans += 1\n            print(costs[i][d], end=\" \")\n\n    if ans == 0:\n        return \"NO\"\n    else:\n        print()\n        return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    for _ in range(n):\n        if k == 1:\n            print(\"YES\")\n            print(*range(1, k + 1), sep=' ')\n        else:\n            print(\"NO\")\n            print(*(range(1, k + 1)), sep=' ')\n            k -= 2\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k < 1:\n        return '-1'\n    max_beauty = 0\n    for i in range(n - k + 1):\n        sum_beauty = 0\n        for j in range(k):\n            sum_beauty += a[i + j]\n        if sum_beauty >= x:\n            max_beauty = max(max_beauty, sum_beauty)\n    return str(max_beauty)"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [0] + a\n    max_sum = 0\n    dp = [[0] * (x + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i]\n    for i in range(2, x + 1):\n        dp[1][i] = a[1]\n    for i in range(2, n + 1):\n        for j in range(2, x + 1):\n            for k in range(1, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[i - 1][j - k] + a[i])\n    for i in range(1, n + 1):\n        max_sum = max(max_sum, dp[i][x])\n    return str(max_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    # \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u044b \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0430\n    if k + 1 > len(s) or k > n - x:\n        return '-1'\n    s = sorted(s)\n    k = k + 1\n    # \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0430\n    for i in range(k):\n        if s[i] < x:\n            # \u0415\u0441\u043b\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u044b \u043f\u0440\u043e\u0448\u043b\u0438 \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0443, \u0438 \u043d\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443\n            break\n        # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0430\n        max_k = (n - x) // (k - i)\n        # \u0415\u0441\u043b\u0438 \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u043e\u0434\u0441\u0442\u0440\u0438\u0433\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043e \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043d\u0443\u043b\u0435\u0432\u043e\u0439, \u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443\n        if s[i] + s[i + 1] > s[i + max_k + 1] and (i + 1) * (max_k + 1) + (i + 2) * max_k < n:\n            break\n    return str(s[i] + s[i + 1] + sum([s[i + j * max_k + 1] for j in range(max_k)]))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    if n >= x:\n        return str(x*n)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = a[:x]\n    b.sort(reverse=True)\n    b = list(map(str, b))\n    return''.join(b)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n\n    beauty = list(map(int, stdin.split()))\n\n    #print(n, k, x, beauty)\n\n    max_sum = 0\n\n    for i in range(x):\n        #print(i)\n        beauty_sum = 0\n        \n        for j in range(i+1, i+x):\n            #print(j)\n            #print(beauty[j])\n            beauty_sum += beauty[j]\n            #print(beauty_sum)\n        #print(beauty_sum)\n        if max_sum < beauty_sum:\n            max_sum = beauty_sum\n    #print(max_sum)\n    return str(max_sum)\n\nsolution(input())\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n\n    def get_k_subseq(k):\n        return max(beauty[i:i + k] for i in range(len(beauty) - k + 1))\n\n    def get_k_segment_sum(k):\n        subseq_sum = sum(get_k_subseq(k))\n        k_segment_sum = 0\n        for i in range(len(beauty) - k + 1):\n            curr_sum = subseq_sum\n            for j in range(k):\n                curr_sum += beauty[i + j]\n            k_segment_sum = max(curr_sum, k_segment_sum)\n        return k_segment_sum\n\n    # maximum sum of reposted photos\n    # if k < x, then we can't repost some photos\n    if k < x:\n        return -1\n    return max(get_k_segment_sum(k) for k in range(1, k + 1))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty.sort()\n\n    def get_sum(inds):\n        curr_sum = 0\n        curr_count = 0\n        for ind in inds:\n            if curr_count == k:\n                break\n            curr_sum += beauty[ind]\n            curr_count += 1\n        return curr_sum\n\n    left, right = 1, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if get_sum([i for i in range(mid, left - 1, -1)]) + get_sum([i for i in range(mid + 1, right + 1)]) >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left if left == n else -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read in data\n    n, k, x = map(int, stdin.split())\n\n    # set up array\n    array = list(map(int, stdin.split()))\n\n    # check if x is greater than the maximum value in array\n    if x > max(array):\n        return '-1'\n\n    # calculate max_sum\n    max_sum = 0\n    # loop through the array\n    for i in range(n):\n        # calculate array of numbers between array i and i+k\n        subarray = array[i:i+k]\n\n        # if sum of subarray is greater than max_sum\n        if sum(subarray) > max_sum:\n            # update max_sum\n            max_sum = sum(subarray)\n\n    # return max_sum\n    return str(max_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    # n, k, x = 5, 2, 3\n    # beauty = [5, 1, 3, 10, 1]\n    if x == 1: return -1\n    beauty.sort()\n    total = 0\n    for i in range(n):\n        total += beauty[i]\n        if total < x:\n            continue\n        if total - beauty[i] > x:\n            return total - beauty[i]\n    return total"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n\n    # [1, 3]\n    # [2, 5]\n\n    a = list(map(int, stdin.split()))\n    b = list(range(n))\n    print(x, n)\n    ans = -1\n\n    def solution2(a: List[int], b: List[int]) -> int:\n        dp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, x + 1):\n                dp[i][j] = dp[i - 1][j]\n                for k in range(1, i):\n                    dp[i][j] = max(dp[i][j],\n                                   dp[k][j - a[i - 1]] + a[i - 1])\n\n        return max(dp[n][x], dp[n][x - 1])\n\n    ans = solution2(a, b)\n\n    return str(ans)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[stdin.find('\\n')+1:]\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            ans += k\n        elif s[i] == '1':\n            ans += i\n    return str(ans)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[1]\n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == '1' and s[j] == '1':\n                graph[i][j] = graph[j][i] = k\n    costs = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_cost = float('inf')\n        for j in range(i - 1, -1, -1):\n            if not graph[i][j]:\n                continue\n            else:\n                cost = costs[i] + graph[i][j]\n                if cost < min_cost:\n                    min_cost = cost\n                    min_room = j\n        costs[i] = min_cost\n    return costs.index(min(costs))\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[1]\n\n    sum_num = 0\n    for i in range(n):\n        if s[i] == \"1\":\n            sum_num += i + k\n\n    return sum_num\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    place_router = stdin.split()\n    place_router = \"\".join(place_router)\n    # print(place_router)\n    router = []\n    for i in range(len(place_router)):\n        if place_router[i] == '0':\n            router.append(i)\n    # print(router)\n    count = 0\n    min_cost = N\n    for i in range(1, len(router) + 1):\n        # print(i)\n        cost_for_router = i * K\n        # print(cost_for_router)\n        for j in range(i + 1, len(router) + 1):\n            # print(j)\n            cost_for_room = 0\n            # print(i, j)\n            for k in range(i, j):\n                # print(k)\n                if place_router[k] == '0':\n                    # print(place_router[k])\n                    cost_for_room += k\n            if cost_for_room <= min_cost and cost_for_room > 0:\n                min_cost = cost_for_room\n                count = 1\n                cost_for_router = cost_for_room\n                if min_cost == 0:\n                    break\n            if count == 1:\n                cost_for_room = 0\n        if count == 1:\n            break\n    # print(min_cost)\n    return str(min_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    rooms = [i for i in range(1, n + 1)]\n    m = int(stdin)\n    routers = []\n    for i in range(m):\n        routers.append(stdin[i])\n    routers = [i for i in range(len(routers))]\n    cost = 0\n    for i in range(len(rooms)):\n        if rooms[i] == 0:\n            cost += 0\n            continue\n        for j in range(max(1, i - k), min(n, i + k)):\n            if routers[j] == 0:\n                cost += i\n                break\n    return str(cost)\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = list(map(int, stdin.strip()))\n    cnt = 1\n    total = 0\n    for i in range(n):\n        if rooms[i] == 1:\n            cnt = cnt + k\n        else:\n            total = total + cnt\n            cnt = 1\n    return str(total)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[stdin.find(\" \") + 1: -1]\n    spots = [\"0\" if i < k else \"1\" for i in range(n)]\n    for i in range(n):\n        if s[i] == \"0\":\n            spots[i] = \"1\"\n    print(int(spots.count(\"1\")) - 1)"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n\n    max_coins = max(rooms)\n    min_coins = min(rooms)\n    routers = [0] * n\n\n    while min_coins < max_coins:\n        min_coins += 1\n        max_coins -= min_coins\n        routers = [0] + routers + [0]\n\n    routers = routers[:n]\n\n    for i in range(n):\n        if rooms[i] > 0:\n            if routers[i] == 0:\n                routers[i] = 1\n            else:\n                routers[i] = 0\n\n    routers = [0] + routers\n\n    router_costs = list(map(int, stdin.split()))\n    router_costs = router_costs[:n]\n\n    min_cost = float('inf')\n\n    for i in range(n):\n        if routers[i] == 1:\n            for j in range(max(1, i - k), min(n, i + k)):\n                min_cost = min(min_cost, router_costs[i] + routers[j])\n\n    return min_cost"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split(' ')))\n    s = stdin.strip()\n    rooms = {}\n    spots = {}\n    for i in range(1, n + 1):\n        spots[i] = False\n    for i in range(len(s)):\n        if s[i] == '0':\n            spots[i + 1] = True\n        if s[i] == '1':\n            rooms[i + 1] = True\n    rooms = sorted(rooms.keys())\n    spots = sorted(spots.keys())\n    if len(spots) == 0:\n        return '0'\n    ans = 0\n    for r in range(len(rooms)):\n        start, end = rooms[r], rooms[min(len(rooms) - 1, r + k)]\n        if start <= 0:\n            break\n        if end > len(spots) - 1:\n            break\n        if spots[end]:\n            end += 1\n        else:\n            end = len(spots)\n        for i in range(end):\n            if not spots[i] and end - i > 0:\n                if (end - i) * rooms[r] + i * rooms[min(end - i, r + 1)] <= n:\n                    ans = max(ans, (i + 1) * rooms[r] + end - i)\n    return str(ans)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    sl = ''.join(['0' if x == '1' else '1' for x in stdin])\n    \n    return str(len(s) + k + sum([int(i) for i in sl]))\n\nprint(solution(input()))"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 2:\n        raise Exception(\"Length of the input not equal to 2\")\n    if s[0]!= s[1]:\n        raise Exception(\"S and T have not the same characters\")\n    chars = set(s)\n    if len(chars)!= 2:\n        raise Exception(\"S and T have only two characters\")\n    return \"Yes\" if s == s[::-1] else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if stdin not in input else \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    my_list = list(stdin.split())\n    if (my_list[0][0] == my_list[1][0] and my_list[0][1] == my_list[1][1]):\n        my_list[0] = my_list[1]\n        my_list.pop(1)\n    if (my_list[0] == my_list[1]):\n        result = 1\n    if (len(my_list[0]) == len(my_list[1])):\n        if (my_list[0] == my_list[1]):\n            result = 1\n    return str(result)"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n    count = 0\n    if len(S) == len(T):\n        for x, y in zip(S, T):\n            if x!= y:\n                if count == 0:\n                    if x == 'a' and y == 'z':\n                        count += 1\n                    elif x == 'z' and y == 'a':\n                        count += 1\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n        if count == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    final_string = ''\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        elif s[i] == t[i]:\n            final_string += s[i]\n        else:\n            final_string += s[i] + t[i]\n    return final_string\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while ''.join(sorted(s))!= ''.join(sorted(stdin)):\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == s[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n        s = ''.join(s)\n    return 'Yes' if s == stdin else 'No'\n\n\nprint(solution('azzel'))\nprint(solution('apple'))\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def swap(string: str, c1: str, c2: str) -> str:\n        return string.replace(c1, c2)\n    return swap(*stdin.split())\nsolution(input())\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('azzel')\n    'apple'\n    >>> solution('apple')\n    'azzel'\n    >>> solution('test')\n    'Yes'\n    '''\n    S = stdin\n    count = 0\n    while len(S)!= 0:\n        if count == 2:\n            return 'Yes'\n        else:\n            count += 1\n            temp = ''.join([S[i] for i in range(len(S))])\n            S = temp[1:] + temp[0]\n\n    return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    al = {a for a in s}\n    bl = {a for a in t}\n    if al!= bl:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string1 = stdin.replace(\" \", \"\").split(\"\\n\")[0]\n    string2 = stdin.replace(\" \", \"\").split(\"\\n\")[1]\n    string1 = list(string1)\n    string2 = list(string2)\n\n    while string1.count('a') < string2.count('a'):\n        string1.remove('a')\n        string2.remove('a')\n    while string1.count('e') < string2.count('e'):\n        string1.remove('e')\n        string2.remove('e')\n    while string1.count('i') < string2.count('i'):\n        string1.remove('i')\n        string2.remove('i')\n    while string1.count('o') < string2.count('o'):\n        string1.remove('o')\n        string2.remove('o')\n    while string1.count('u') < string2.count('u'):\n        string1.remove('u')\n        string2.remove('u')\n\n    if string1 == string2:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C, M = map(int, stdin.split())\n    books = sorted(map(int, stdin.split()), reverse=True)\n    l = 0\n    r = N\n\n    while l <= r:\n        mid = (l + r) // 2\n        total = 0\n        for i in range(M):\n            total += books[mid] * (M - i) + (mid + 1 - i) * (M - i)\n\n        if total > C:\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    ans = books[l]\n    return '{} {}'.format(l + 1, ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n, c, a = stdin[0], stdin[1], stdin[2]\n    n = int(n)\n    c = int(c)\n    a = int(a)\n    a = list(map(int, a.split(\" \")))\n    m = max(a)\n    if (c * m) <= n:\n        print(c * m)\n    else:\n        print(n)"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C, A, X = map(int, stdin.split())\n    if X < A:\n        return \"NO\"\n    M_list = [[0 for _ in range(M + 1)] for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        M_list[i][0] = 0\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            M_list[i][j] = M_list[i - 1][j] + A * j\n    for i in range(1, N + 1):\n        M_list[i][M] = C * (N - i + 1)\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if M_list[i][j] <= X:\n                M_list[i][j] = max(M_list[i][j], M_list[i][j - 1])\n            else:\n                M_list[i][j] = max(M_list[i][j], M_list[i - 1][j])\n    return str(M_list[N][M])\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = re.findall(r\"\\d+\", s)\n    n = int(a[0])\n    m = int(a[1])\n    c = int(a[2])\n\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = int(a[3 + i])\n\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            if arr[j] > i:\n                ans += c\n    return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = []\n    for _ in range(M):\n        A.append(list(map(int, stdin.split())))\n    A = sorted(A, key=lambda x: x[1], reverse=True)\n    # print(N, M, C, A)\n\n    dp = [[0 for _ in range(M+1)] for _ in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if A[j-1][1] > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-A[j-1][1]][j-1] + A[j-1][0])\n    # print(dp)\n    return str(dp[N][M])\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Runs the test cases and produces the correct output.\n    '''\n    for line in stdin.split(\"\\n\"):\n        # your code here\n        print(solution_part1(line))\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    c = []\n    a = []\n    for _ in range(n):\n        c.append(int(stdin[2 * _ + 2]))\n        a.append(int(stdin[2 * _ + 3]))\n    c = sorted(c)\n    a = sorted(a)\n    ans = 0\n    for i in range(m):\n        if c[i] > a[i]:\n            ans += c[i] - a[i]\n    return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Import STDIN\n    from sys import stdin\n\n    # Read STDIN\n    stdin = list(map(int, stdin.read().split()))\n\n    # Determine number of algorithms and books\n    M = stdin.pop(0)\n    N = stdin.pop(0)\n\n    # Initialize count\n    count = 0\n\n    # Build a mapping of books to algorithms\n    books = {i: [] for i in range(1, N + 1)}\n    for i in range(1, N + 1):\n        books[i] = stdin.pop(0)\n        books[i] -= 1\n\n    # Build a mapping of algorithms to prices\n    prices = {i: [] for i in range(1, M + 1)}\n    for i in range(1, M + 1):\n        prices[i] = stdin.pop(0)\n        prices[i] -= 1\n\n    # Build a mapping of algorithms to ratings\n    ratings = {i: [] for i in range(1, M + 1)}\n    for i in range(1, M + 1):\n        ratings[i] = stdin.pop(0)\n\n    # Determine the number of books that can be purchased\n    books_purchased = 0\n    while books_purchased < N:\n        for i in range(1, M + 1):\n            if books[books_purchased] <= i and prices[i] > 0:\n                books_purchased += 1\n                books[books_purchased] = min(books[books_purchased], books[books_purchased] + 1)\n                prices[i] -= 1\n\n    # Determine the maximum achievable number of algorithms\n    max_achievable = 0\n    for i in range(1, M + 1):\n        if ratings[i] > 0:\n            max_achievable = max(max_achievable, sum(books[j] for j in range(1, N + 1) if ratings[i] > 0 and prices[i] > 0))\n\n    # Return the answer\n    return 'Yes' if max_achievable >= N else 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = list(map(int, stdin[1:]))\n    N, C, A = stdin[0], stdin[1], stdin[2:]\n    ans = 0\n    for i in range(len(A)):\n        ans += N*A[i]\n    return str(ans)"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = list(map(lambda s: s.split(\" \"), stdin.splitlines()))\n    stdin = list(map(lambda s: (int(s[0]), int(s[1])), stdin))\n    results = []\n    for elem in stdin:\n        res = 0\n        for j in range(elem[0]):\n            res += elem[1]\n        results.append(res)\n    print(max(results))\n    return \"Yes\" if max(results) >= 30000 else \"No\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = list(map(int, stdin.split(' ')))\n\n    if D <= G:\n        return \"0\"\n\n    perfect = sum([i * 100 for i in range(1, D + 1)])\n    perfect_bonus = (D - 1) * 100\n\n    if perfect <= G:\n        return str(perfect)\n\n    return str(perfect + perfect_bonus)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    D = int(stdin[0])\n    G = int(stdin[1])\n\n    perfect_bonus = 1000000000\n    max_possible = 10000000000\n    if G > perfect_bonus:\n        return -1\n    if G < 0:\n        return -1\n\n    if G == 0:\n        return \"0\"\n\n    p = 0\n    while p * 100 < G:\n        p += 1\n\n    perfect_bonus -= p * 100\n    perfect_bonus *= p\n    perfect_bonus -= max(D, p * 100)\n\n    if perfect_bonus >= G:\n        return str(perfect_bonus // 100) + \" \" + str(perfect_bonus % 100)\n    else:\n        return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    perfect = list(range(1, d + 1))\n    perfect += perfect[::-1]\n\n    ans = 0\n    for c in perfect:\n        if c <= g:\n            ans += g // c\n            g %= c\n        else:\n            break\n\n    return str(ans)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    g = stdin[1]\n    d = stdin[0]\n    P = stdin[2:]\n    p = 100\n    s = p * 100\n    for i in range(1, d + 1):\n        if g <= s:\n            break\n        s += p * i\n    return str(i)\n\nsolution(\"2 700\")\nsolution(\"3 500\")\nsolution(\"5 800\")\nsolution(\"10 200\")\nsolution(\"15 50\")\nsolution(\"0 1\")\nsolution(\"2 -1\")\nsolution(\"0 2\")\nsolution(\"2 2\")\nsolution(\"0 0\")\nsolution(\"6 3\")\nsolution(\"5 5\")\nsolution(\"4 4\")\nsolution(\"2 1\")\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    arr = stdin.split(' ')\n    d, g = int(arr[0]), int(arr[1])\n    points = []\n    for i in range(d):\n        points.append(int(arr[2 * i + 1]))\n    count = 0\n    for i in range(d):\n        if points[i] > g:\n            break\n        count += 1\n    if count == d:\n        print(count)\n        return ''\n    if g > points[d - 1]:\n        for i in range(d):\n            if points[i] == g:\n                count += 1\n                break\n    print(count)\n    return ''\n\nsolution(\n'6 6 3 10 20 100 40 60\\n10 2 5 3 20 100 400 500\\n5 4 6 3 10 20 100 400\\n9 5 4 2 20 30 50 60\\n10 9 5 4 2 20 30 50 60')\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_1 = D / 10\n    p_2 = p_1 + 1\n    p_3 = D / 10 + 1\n    p_4 = D / 10 + 2\n    p_5 = D / 10 + 3\n    p_6 = D / 10 + 4\n    p_7 = D / 10 + 5\n    p_8 = D / 10 + 6\n    p_9 = D / 10 + 7\n    p_10 = D / 10 + 8\n    p_11 = D / 10 + 9\n    c_1 = G - p_1 * 100\n    c_2 = G - p_2 * 200\n    c_3 = G - p_3 * 500\n    c_4 = G - p_4 * 1000\n    c_5 = G - p_5 * 500\n    c_6 = G - p_6 * 800\n    c_7 = G - p_7 * 800\n    c_8 = G - p_8 * 600\n    c_9 = G - p_9 * 400\n    c_10 = G - p_10 * 200\n    c_11 = G - p_11 * 100\n    p_1_score = 100\n    p_2_score = 200\n    p_3_score = 500\n    p_4_score = 1000\n    p_5_score = 500\n    p_6_score = 800\n    p_7_score = 800\n    p_8_score = 600\n    p_9_score = 400\n    p_10_score = 200\n    p_11_score = 100\n    total_score = p_1_score + p_2_score + p_3_score + p_4_score + p_5_score + p_6_score + p_7_score + p_8_score + p_9_score + p_10_score + p_11_score\n    perfect_bonus = total_score + c_1 + c_2 + c_3 + c_4 + c_5 + c_6 + c_7 + c_8 + c_9 + c_10 + c_11\n    if G >= perfect_bonus:\n        return str(perfect_bonus - total_score)\n    if c_1 >= perfect_bonus:\n        if G - perfect_bonus <= p_1_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_1_score)\n    if c_2 >= perfect_bonus:\n        if G - perfect_bonus <= p_2_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_2_score)\n    if c_3 >= perfect_bonus:\n        if G - perfect_bonus <= p_3_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_3_score)\n    if c_4 >= perfect_bonus:\n        if G - perfect_bonus <= p_4_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_4_score)\n    if c_5 >= perfect_bonus:\n        if G - perfect_bonus <= p_5_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_5_score)\n    if c_6 >= perfect_bonus:\n        if G - perfect_bonus <= p_6_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_6_score)\n    if c_7 >= perfect_bonus:\n        if G - perfect_bonus <= p_7_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_7_score)\n    if c_8 >= perfect_bonus:\n        if G - perfect_bonus <= p_8_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_8_score)\n    if c_9 >= perfect_bonus:\n        if G - perfect_bonus <= p_9_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_9_score)\n    if c_10 >= perfect_bonus:\n        if G - perfect_bonus <= p_10_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_10_score)\n    if c_11 >= perfect_bonus:\n        if G - perfect_bonus <= p_11_score:\n            return str(perfect_bonus)\n        else:\n            return str(G - perfect_bonus - p_11_score)\n    if G - p_1_score - p_2_score - p_3_score - p_4_score - p_5_score - p_6_score - p_7_score - p_8_score - p_9_score - p_10_score - p_11_score == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\" \")\n    max_score = int(stdin_arr[1])\n    sum_of_points = 0\n    perfect_bonuses = []\n    for i in range(1, max_score // 100 + 1):\n        sum_of_points += 100 * i\n    perfect_bonuses.append(sum_of_points)\n    for i in range(1, max_score // 200 + 1):\n        sum_of_points += 200 * i\n    perfect_bonuses.append(sum_of_points)\n    perfect_bonuses.sort()\n    perfect_bonuses.reverse()\n    min_score = 100\n    max_count = 0\n    for i in range(len(perfect_bonuses)):\n        min_score = perfect_bonuses[i]\n        count = 0\n        for j in range(len(perfect_bonuses)):\n            if perfect_bonuses[j] <= min_score:\n                count += 1\n        if count > max_count:\n            max_count = count\n    return str(min_score)\n\nsolution(\"3 700\")\nsolution(\"4 600\")\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    D, G = map(int, stdin[0].split())\n    \n    p = list()\n    for i in range(1, D + 1):\n        p.append(int(stdin[i]))\n    \n    res = 0\n    \n    for i in range(1, len(p)):\n        if p[i] - p[i - 1] > 0:\n            res += p[i] - p[i - 1] + 100\n        else:\n            res += p[i] - p[i - 1]\n    \n    if res <= G:\n        return str(len(p))\n    else:\n        return str(len(p) - 1)"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N * D)\n    Space complexity: O(1)\n    \"\"\"\n    d, g = map(int, stdin.split())\n    c = 100\n    total = g\n    i = 1\n    while total < d:\n        total += c\n        c += 100\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    return '%d' % (D // 2 + max(0, D - 2 * G) + 1)"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    good = []\n    for i in range(1, m+1):\n        if i in good:\n            continue\n        if i > (n-1) and i < 2*n:\n            good.append(i)\n    return len(good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given the total number of candies, the weights of the candies.\n    \n    We know that we have to eat candies of the same index from the weight list that has the same index.\n    \n    Say we eat the candy of the first index from the weight list.\n    We know that we have to eat from the index that the weight from the index is a, the index that the weight from the index is a + 1 and the index that the weight from the index is a + 2.\n    \n    If we have to eat the candy from the index that the weight from the index is a, the index that the weight from the index is a + 1, the index that the weight from the index is a + 2, the index that the weight from the index is a + 3 and so on and so on.\n    \n    So, if we eat the first candy, we will eat from the index of the weight list, if we eat the second candy we will eat from the index of the weight list + 1, if we eat the third candy we will eat from the index of the weight list + 2 and so on.\n    \n    The only constraint is that for any given candy to eat the sum of weights of the candies from the index is the same for each day.\n    \n    So, let's calculate the sum of weights of the candies to eat on the first day.\n    \n    Let's say, if we eat the first candy, then the sum of weights to eat on the first day will be:\n    \n    S_1 = sum of weights of the candies to eat on the first day\n    \n    Let's say, if we eat the second candy, then the sum of weights to eat on the first day will be:\n    \n    S_2 = sum of weights of the candies to eat on the first day + sum of weights of the candies to eat on the second day\n    \n    Let's say, if we eat the third candy, then the sum of weights to eat on the first day will be:\n    \n    S_3 = sum of weights of the candies to eat on the first day + sum of weights of the candies to eat on the second day + sum of weights of the candies to eat on the third day\n    \n    And so on.\n    \n    Thus, let's calculate the sum of weights of the candies to eat on the first day.\n    \n    Let's say, if we eat the first candy, then the sum of weights to eat on the first day will be:\n    \n    S_1 = S_1 - a\n    \n    Let's say, if we eat the second candy, then the sum of weights to eat on the first day will be:\n    \n    S_2 = S_1 + a\n    \n    Let's say, if we eat the third candy, then the sum of weights to eat on the first day will be:\n    \n    S_3 = S_2 + a\n    \n    And so on.\n    \n    So, we can now use these sums to find the number of good candies that can be eaten from the list.\n    \n    Let's say, if we eat the first candy, then the sum of weights to eat on the first day will be:\n    \n    S_1 = S_1 - a\n    \n    Let's say, if we eat the second candy, then the sum of weights to eat on the first day will be:\n    \n    S_2 = S_1 + a\n    \n    Let's say, if we eat the third candy, then the sum of weights to eat on the first day will be:\n    \n    S_3 = S_2 + a\n    \n    And so on.\n    \n    So, we can now use these sums to find the number of good candies that can be eaten from the list.\n    \n    Let's say, if we eat the first candy, then the sum of weights to eat on the first day will be:\n    \n    S_1 = S_1 - a\n    \n    Let's say, if we eat the second candy, then the sum of weights to eat on the first day will be:\n    \n    S_2 = S_1 + a\n    \n    Let's say, if we eat the third candy, then the sum of weights to eat on the first day will be:\n    \n    S_3 = S_2 + a\n    \n    And so on.\n    \n    So, we can now use these sums to find the number of good candies that can be eaten from the list.\n    \n    Let's say, if we eat the first candy, then the sum of weights"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    weights = list(map(int, stdin.strip().split()))\n    good_candies = 0\n    for i in range(n):\n        if weights[i] % 2 == 0:\n            good_candies += 1\n            weights[i] += 1\n        else:\n            weights[i] += 1\n    return str(good_candies)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good_candies = 0\n    even_sum = 0\n    odd_sum = 0\n\n    for i in range(n - 1, -1, -1):\n        if (even_sum + a[i] == odd_sum) or (even_sum - a[i] == odd_sum):\n            good_candies += 1\n\n        even_sum += a[i]\n        odd_sum -= a[i]\n\n    return str(good_candies)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, n - 1, 2):\n        ans += a[i]\n    for i in range(2, n, 2):\n        ans += a[i]\n    return str(ans)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0\"\n    candies = list(map(int, stdin.split()))\n    diffs = []\n    for i in range(1, len(candies)):\n        diffs.append(candies[i] - candies[i-1])\n    diffs = sorted(diffs)\n    for i in range(1, len(diffs), 2):\n        if diffs[i] == diffs[i-1]:\n            continue\n        else:\n            break\n    else:\n        return \"0\"\n    n = len(diffs)\n    if diffs[0]!= 0:\n        return \"0\"\n    weights = []\n    for i in range(n):\n        weights.append(diffs[i] - diffs[i-1])\n    weights = sorted(weights)\n    ans = 1\n    for i in range(len(weights)):\n        ans += weights[i]\n    return str(ans)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = sorted(map(int, stdin.split()), reverse=True)\n    return str(sum(\n        sum(weights[i + 1::2]) for i in range(n // 2)\n        if weights[i] + weights[i + 1] == weights[i + 2]\n    ))\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(i) for i in stdin.split()]\n    #print(n, weights)\n    \n    #total = sum(weights)\n    total = sum(weights)\n    total2 = total\n    odd = 0\n    even = 0\n    \n    for i in range(n):\n        #print(i)\n        if(i%2==0):\n            #print(\"even\")\n            #print(odd)\n            #print(\"total: \", total)\n            total -= weights[i]\n            #print(\"total: \", total)\n            #print(\"odd: \", odd)\n            #print(\"odd: \", odd)\n            total += odd\n            #print(\"odd: \", odd)\n            #print(\"odd: \", odd)\n            odd = 0\n        else:\n            #print(\"odd\")\n            #print(\"odd\")\n            #print(even)\n            #print(\"total: \", total)\n            #print(\"odd: \", odd)\n            #print(\"odd: \", odd)\n            total -= weights[i]\n            #print(\"total: \", total)\n            #print(\"even: \", even)\n            #print(\"even: \", even)\n            total += even\n            #print(\"even: \", even)\n            #print(\"even: \", even)\n            even = 0\n            \n    return str(total)\n\nprint(solution(sys.stdin.read()))\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    weights_sum = sum(weights)\n    count = 0\n    for i in range(1, n+1):\n        if weights_sum - (weights[i-1] * 2) % 2 == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    if n == 1:\n        return x\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = x\n    while l < r:\n        if r - l > k:\n            r = max(r, l + k + 1)\n        if l == r:\n            break\n        m = (l + r) // 2\n        if sum(a[l:m]) >= x and sum(a[m:r]) >= x:\n            r = m\n        else:\n            l = m + 1\n    return str(r)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x, n = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    def helper(k, n, x, beauty):\n        if x <= 0:\n            return 0\n        if n <= 0 or k <= 0:\n            return 0\n        if k == 1:\n            return sum(beauty)\n        if beauty[0] > x:\n            return helper(k-1, n-1, x, beauty)\n        else:\n            return max(helper(k, n-1, x, beauty), helper(k, n-1, x - beauty[0], beauty[1:]))\n    return str(helper(k, n, x, beauty))"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = 0\n    maxSum = -1\n    while l < len(a) and r < len(a):\n        sum = 0\n        if a[l] > x:\n            break\n        while sum + a[l] <= x and r < len(a):\n            sum += a[r]\n            r += 1\n        if r == len(a):\n            break\n        sum = max(sum, x - a[l])\n        if maxSum == -1 or sum > maxSum:\n            maxSum = sum\n        l += 1\n    return maxSum\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty = list(map(int, stdin.split()))\n    dp = [0]*(n+1)\n    if x > n:\n        return '-1'\n    if k == 0 and x == 0:\n        return sum(beauty)\n    for i in range(1, n+1):\n        if i < x:\n            dp[i] = beauty[i-1]\n        else:\n            dp[i] = max(beauty[i-1], beauty[i-x])\n    return max(dp[i] for i in range(x, n+1))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, n, k = stdin.split()\n    x = int(x)\n    n = int(n)\n    k = int(k)\n    beauty = list(map(int, stdin.split()))\n    beauty.sort()\n    \n    def max_sum(beauty):\n        max_sum = beauty[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, beauty[i] + max_sum)\n        return max_sum\n    \n    left, right = 0, x\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if max_sum(beauty[:mid]) >= k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return str(max(beauty[:left]))"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, n, x = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    l.sort(reverse=True)\n    # print(l)\n    #\n    # a = []\n    # for i in range(k):\n    #     a.append(l.pop(0))\n    # print(a)\n    #\n    # # k = 2\n    # # if k >= n:\n    # #     return \"-\"\n    #\n    # # x = 0\n    # # i = 0\n    # # a = []\n    # # for i in range(k):\n    # #     if l[i] == max(l):\n    # #         a.append(l[i])\n    # #         l.pop(i)\n    # #         if i < k - 1:\n    # #             if l[i] == max(l):\n    # #                 a.append(l[i])\n    # #                 l.pop(i)\n    # #                 k = k - 1\n    # #         # x += max(l)\n    # #     else:\n    # #         x += max(l)\n    # # print(a)\n    # # print(x)\n    #\n    # # if k >= n:\n    # #     return \"-\"\n    #\n    # # x = 0\n    # # i = 0\n    # # a = []\n    # # for i in range(k):\n    # #     if l[i] == max(l):\n    # #         a.append(l[i])\n    # #         l.pop(i)\n    # #         if i < k - 1:\n    # #             if l[i] == max(l):\n    # #                 a.append(l[i])\n    # #                 l.pop(i)\n    # #                 k = k - 1\n    # #         # x += max(l)\n    # #     else:\n    # #         x += max(l)\n    # #\n    # # print(a)\n    # # print(x)\n    #\n    #\n    # if x <= 0:\n    #     return \"-\"\n    # else:\n    #     return x\n    # print(a)\n    # print(l)\n    # print(max(l))\n    # a = []\n    # # print(max(l))\n    # # print(k)\n    # if k >= n:\n    #     return \"-\"\n    # if n > k:\n    #     return \"-\"\n    # if max(l) <= x:\n    #     a.append(l.pop(0))\n    #     # print(a)\n    #     # print(l)\n    #     k = k - 1\n    #     if k >= n:\n    #         return \"-\"\n    #     else:\n    #         if max(l) <= x:\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:\n    #                 return \"-\"\n    #             else:\n    #                 if max(l) <= x:\n    #                     a.append(l.pop(0))\n    #                     k = k - 1\n    #         else:\n    #             # x += max(l)\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #         # x += max(l)\n    #         if k >= n:\n    #             return \"-\"\n    #         else:\n    #             if max(l) <= x:\n    #                 a.append(l.pop(0))\n    #                 k = k - 1\n    #             # x += max(l)\n    #         # x += max(l)\n    #     # print(a)\n    #     if k >= n:\n    #         return \"-\"\n    #     else:\n    #         if max(l) <= x:\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:\n    #                 return \"-\"\n    #             else:\n    #                 if max(l) <= x:\n    #                     a.append(l.pop(0))\n    #                     k = k - 1\n    #         else:\n    #             # x += max(l)\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:\n    #                 return \"-\"\n    #             else:\n    #                 if max(l) <= x:\n    #                     a.append(l.pop(0))\n    #                     k = k - 1\n    #     # print(a)\n    #     # print(x)\n    #     if k >= n:\n    #         return \"-\"\n    #     else:\n    #         if max(l) <= x:\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:\n    #                 return \"-\"\n    #             else:\n    #                 if max(l) <= x:\n    #                     a.append(l.pop(0))\n    #                     k = k - 1\n    #         else:\n    #             # x += max(l)\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:\n    #                 return \"-\"\n    #             else:\n    #                 if max(l) <= x:\n    #                     a.append(l.pop(0))\n    #                     k = k - 1\n    #         # x += max(l)\n    #     # print(a)\n    #     if k >= n:\n    #         return \"-\"\n    #     else:\n    #         if max(l) <= x:\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:\n    #                 return \"-\"\n    #             else:\n    #                 if max(l) <= x:\n    #                     a.append(l.pop(0))\n    #                     k = k - 1\n    #         else:\n    #             # x += max(l)\n    #             a.append(l.pop(0))\n    #             k = k - 1\n    #             if k >= n:"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, k = map(int, stdin[0].split())\n    k = int(k)\n    a = list(map(int, stdin[1].split()))\n    total_beauty = sum(a)\n    \n    if total_beauty < k:\n        return -1\n    \n    best_sum = 0\n    s = set()\n    for i in range(len(a) - k + 1):\n        if i == 0:\n            continue\n        else:\n            s.add(sum(a[i:i + k]))\n    \n    for i in range(1, len(a) - k + 1):\n        for j in range(i + k, len(a)):\n            s.add(sum(a[i:j]))\n            if sum(a[i:j]) <= total_beauty:\n                break\n    \n    if len(s) == 0:\n        return -1\n    best_sum = max(s)\n    return str(best_sum)"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n\n    if k >= n:\n        return str(-1)\n\n    a = list(map(int, stdin.split()))\n    # print(n, k, x, a)\n    # print(a)\n    if n == 1:\n        return str(max(a))\n\n    beauty = list(map(int, stdin.split()))\n    # print(n, k, x, a)\n\n    if (x < min(beauty) or x > max(beauty)) or (n > x):\n        return str(-1)\n\n    count = 0\n    res = 0\n\n    for i in range(n - 1):\n        if count < k:\n            res += beauty[i]\n            count += 1\n        else:\n            res += beauty[i]\n            count = 0\n    return str(res)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(beauty_sum: int, k: int, l: int) -> bool:\n        if l == 0:\n            return beauty_sum <= x\n        if beauty_sum > x:\n            return False\n        return l <= k <= 0 or (l + 1) <= k <= l\n\n\n    x = int(stdin.split()[2])\n    a = list(map(int, stdin.split()[1]))\n    n = len(a)\n    for k in range(1, n + 1):\n        for l in range(1, k):\n            if is_possible(a[l - 1] + a[l], k, l):\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    k = int(input[1])\n    x = int(input[2])\n\n    beauty = list(map(int, input[3:]))\n    # print(beauty)\n\n    dp = [[0]*(x+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = beauty[i-1]\n        dp[i][1] = max(dp[i-1])\n    \n    for i in range(2, n+1):\n        for j in range(1, x+1):\n            if i >= j:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                dp[i][j] = max(dp[i][j], beauty[i-1] + dp[i-1][j-1])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return str(dp[n][x])\n\nprint(solution(input))\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return 'No'\n    else:\n        numbers = [4, 7]\n        total_n = 0\n        for i in range(len(numbers)):\n            total_n += numbers[i]\n        if n == total_n:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n\n    doughnuts = 0\n    cakes = 0\n    \n    while (n - (doughnuts + cakes)) > 0:\n        if doughnuts == 0 and cakes == 0:\n            break\n        \n        doughnuts += 1\n        cakes += 1\n        \n        if doughnuts >= cakes:\n            n -= (doughnuts + cakes)\n            doughnuts = 0\n            cakes = 0\n        else:\n            n -= (doughnuts + cakes)\n            doughnuts = 0\n            cakes += 1\n            \n    if doughnuts > 0 or cakes > 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 5:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    if int(stdin[0]) > 100:\n        return \"No\"\n    n = int(stdin[0])\n    if n == 0:\n        return \"Yes\"\n    min1 = 4\n    min2 = 7\n    # Change to min1 > min2.\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            min1 += 4\n            min2 += 7\n        else:\n            min1 += 7\n            min2 += 4\n    if min1 <= min2:\n        return \"Yes\"\n    return \"No\"\n\nsolution(\"11\")"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    n = int(line[0])\n\n    doughnuts_price = 4\n    cakes_price = 7\n    all_total = (doughnuts_price * n) + (cakes_price * n)\n    if n <= 0:\n        print(f\"No\")\n    elif n == 1:\n        if all_total == 6:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    elif n == 2:\n        if all_total == 10:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        if all_total % 2 == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    return \"Yes\" if all_total < 6 else \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n\n    N = int(stdin_list[0])\n    number_of_cakes = N // 4\n    number_of_doughnuts = N // 7\n    total_sum = number_of_cakes * 4 + number_of_doughnuts * 7\n    if total_sum == N:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    one_cake = n // 4\n    one_doughnut = n // 7\n    # If there are 2 cakes or 2 doughnuts that means we can buy any number of cakes and doughnuts\n    if one_cake >= 2 or one_doughnut >= 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    doughnuts = int(stdin)\n    total += (doughnuts // 2) * 4\n    total += (doughnuts % 2) * 7\n    if total >= int(stdin):\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n\n\nimport math\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # N, X_1, Y_1, H_1, X_2, Y_2, H_2,..., X_N, Y_N, H_N = map(int, stdin.strip().split())\n    N, *coords = map(int, stdin.strip().split())\n    x = [c[0] for c in coords]\n    y = [c[1] for c in coords]\n    height = max(abs(x - x[i]) - abs(y - y[i]) + height for i in range(len(x)))\n    return str(min(x) + 1) +'' + str(min(y) + 1) +'' + str(height)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n = int(input_lines[0])\n    input_lines.remove(input_lines[0])\n    output_str = ''\n    for i in range(n):\n        l = input_lines[i].split()\n        x, y, h = int(l[0]), int(l[1]), int(l[2])\n        if x == y == h:\n            output_str += str(x) +'' + str(h) + '\\n'\n            continue\n        height_max = max(abs(x - y), abs(x - h) + abs(y - h))\n        if h!= 0:\n            if abs(x - h) < abs(y - h):\n                output_str += str(x) +'' + str(h) + '\\n'\n            else:\n                output_str += str(h) +'' + str(y) + '\\n'\n        elif height_max!= 0:\n            if abs(x - h) < abs(y - h):\n                output_str += str(x) +'' + str(y) + '\\n'\n            else:\n                output_str += str(y) +'' + str(x) + '\\n'\n    return output_str\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{int(max(stdin.split()))} {int(min(stdin.split()))} {int(max(stdin.split())) - int(min(stdin.split())) + 1}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    return''.join(map(str, sorted(map(int, lines), key=lambda x: x)))\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = ''\n    for i in range(N):\n        result += str(max(int(stdin.split()[2*i+1])-abs(int(stdin.split()[2*i])-int(stdin.split()[2*i+1]))-int(stdin.split()[2*i]),0))+' '\n    return result[:-1]"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    n = int(stdin[0])\n\n    center = []\n    height = []\n\n    for i in range(1, n + 1):\n        x, y, h = map(int, stdin[i].split())\n        center.append((x, y))\n        height.append(h)\n\n    max_dist = max(abs(center[0][0] - center[1][0]), abs(center[0][1] - center[1][1]))\n\n    for i in range(2, n):\n        curr_dist = max(abs(center[i][0] - center[i - 1][0]), abs(center[i][1] - center[i - 1][1]))\n        if curr_dist < max_dist:\n            print(center[i - 1][0], center[i - 1][1], height[i - 1], sep=\"\")\n            max_dist = curr_dist\n\n    print(center[n - 1][0], center[n - 1][1], height[n - 1], sep=\"\")\n    return \"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin.split()[0])\n    coords = []\n    heights = []\n    for _ in range(n):\n        x, y, h = map(int, stdin.split()[1:])\n        coords.append((x, y))\n        heights.append(h)\n    xs = set(coords)\n    ys = set(coords)\n    result = []\n    for x in xs:\n        result.append(str(x[0]) + \" \" + str(x[1]) + \" \" + str(max([abs(x[0] - c[0]) - abs(x[1] - c[1]) for c in coords])))\n    for y in ys:\n        result.append(str(y[0]) + \" \" + str(y[1]) + \" \" + str(max([abs(y[0] - c[0]) - abs(y[1] - c[1]) for c in coords])))\n    return \"\\n\".join(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        (\n            stdin.strip().splitlines()[0].split(' ')[0],\n            stdin.strip().splitlines()[0].split(' ')[1],\n            int(stdin.strip().splitlines()[0].split(' ')[2])\n        )\n        if len(stdin.strip().splitlines()) == 1\n        else (\n            int(stdin.strip().splitlines()[0].split(' ')[0]),\n            int(stdin.strip().splitlines()[0].split(' ')[1]),\n            int(stdin.strip().splitlines()[0].split(' ')[2]),\n            int(stdin.strip().splitlines()[0].split(' ')[3]),\n            int(stdin.strip().splitlines()[0].split(' ')[4])\n        )\n        )"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"C_X C_Y H\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = stdin\nn = n.split()\nfor i in range(0, len(n)):\n    n[i] = n[i].upper()\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\n\nfor i in range(0, len(n)):\n    n[i] = list(n[i])\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\n\nn = []\nfor i in range(0, len(n)):\n    n[i] = list(n[i])\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\nn = list(zip(*n))\nprint(n)\nprint(list(map(list, zip(*n))))\nprint(list(zip(*n)))\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('o')"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) * len(stdin)"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum number of hug needed to make the input string\n    palindromic.\n    \"\"\"\n    result = 0\n    string = stdin\n\n    while (string!= string[::-1]):\n        result += 1\n        string = string[:-1] + string[::-1]\n\n    return result\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    s = l[0]\n    # print(s)\n    if s[::-1] == s:\n        return 1\n    return -1\n    \nstdin = input()\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n in range(1,10):\n        for i in range(1, 10):\n            prod = i * n\n            if prod in range(1,10):\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m <= 9:\n        if n % m == 0:\n            return 'Yes'\n        m += 1\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the appropriate output for the test cases.\"\"\"\n    input_ = stdin.split()\n    num1 = int(input_[0])\n    if num1 < 1 or num1 > 9:\n        return \"No\"\n    num2 = int(input_[1])\n    if num2 < 1 or num2 > 9:\n        return \"No\"\n    if num1 * num2 == int(input_[0]) and num1 * num2 == int(input_[1]):\n        return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,10):\n        for j in range(1,10):\n            if n==(i*j):\n                return 'Yes'\n    return 'No'\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1 or n == 2 or n == 3 or n == 4 or n == 5 or n == 6 or n == 7 or n == 8 or n == 9:\n        return 'Yes'\n    for i in range(2, 9):\n        if n % i == 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if (i*j) == N:\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")\n    return"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                print(f\"Yes {i} * {j} = {N}\")\n                return\n    print(f\"No {N} can be represented as a product of two integers between 1 and 9 (inclusive)\")"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if an integer can be represented as the product of two integers between 1 and 9 (inclusive).\n\n    >>> solution('''10\n   ... 1''')\n    'Yes'\n    >>> solution('''2\n   ... 1''')\n    'No'\n    \"\"\"\n    N = int(stdin)\n    if N >= 1 and N <= 100:\n        for i in range(1, 10):\n            for j in range(1, 10):\n                if N % i == 0 and N % j == 0:\n                    return 'Yes'\n        return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if i < j < k:\n                    if i!= j and j!= k and i!= k:\n                        if (i, j, k) not in d:\n                            d[(i, j, k)] = 1\n                        else:\n                            d[(i, j, k)] += 1\n    print(d[(1, 3, 4)])\n    return\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1:]\n    \n    s.sort()\n    \n    cnt = 0\n    \n    # edge cases\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    \n    # take s and sort it by value\n    s = sorted(s, key=lambda x: int(x))\n    \n    # two pointers\n    i = 1\n    j = 2\n    while j <= n:\n        if s[i] == s[j]:\n            cnt += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    return str(cnt)"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *sticks = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if sticks[i]+sticks[j]+sticks[k] > 10**9:\n                    continue\n                if sticks[i]!= sticks[j] and sticks[j]!= sticks[k] and sticks[i]!= sticks[k]:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list.pop(0))\n    st = list(map(int, stdin_list[0].split()))\n    s = set(st)\n    if len(s) < 3:\n        return \"0\"\n    triangles = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if st[i] + st[j] > st[j + 1] and st[i] + st[j] > st[i + 1] and st[j] + st[n - 1] > st[n - 2]:\n                triangles += 1\n    return str(triangles)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    return f\"{find_triples_of_three_with_different_lengths(N)} ways\"\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # read from STDIN and split by''\n    N = int(stdin.split(' ')[0])\n    L_1 = int(stdin.split(' ')[1])\n\n    # compute the triangle\n    counter = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            for k in range(j + 1, N + 1):\n                if L_1 == L_2 and L_2 == L_3 and L_1!= L_2!= L_3:\n                    counter += 1\n                elif L_1!= L_2!= L_3!= L_1 and L_1 == L_2 == L_3:\n                    counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 4 9 7 5\n   ... ''')\n    '5'\n    >>> solution('''10\n   ... 5 1 1\n   ... 9 2 2\n   ... 10 5 5\n   ... 8 9 8\n   ... 7 5 3\n   ... 6 6 2\n   ... 6 6 3\n   ... 5 3 4\n   ... 7 5 6\n   ... 7 9 9\n   ... ''')\n    '14'\n    \"\"\"\n    data = stdin.strip().split('\\n')\n    N = int(data[0])\n    L = list(map(int, data[1].split()))\n    result = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if L[i]!= L[j] and L[j]!= L[k] and L[i]!= L[k]:\n                    result += 1\n    return str(result)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(input_from_stream_one_liner())\n    5\n    '''\n    def search_triplets(arr: list) -> int:\n        '''\n        Return number of unique triplets.\n        '''\n        sorted_arr = sorted(arr)\n        triplets = 0\n        for i in range(len(sorted_arr)):\n            j = i + 1\n            while j < len(sorted_arr):\n                if sorted_arr[i] + sorted_arr[j] > sorted_arr[j]:\n                    break\n                j += 1\n            if j >= len(sorted_arr):\n                break\n            k = j + 1\n            while k < len(sorted_arr):\n                if sorted_arr[i] + sorted_arr[j] + sorted_arr[k] == sorted_arr[k]:\n                    triplets += 1\n                k += 1\n        return triplets\n\n    if len(stdin) < 3:\n        return 0\n    return str(search_triplets([int(s) for s in stdin.split()]))\n\ninput_from_stream_one_liner()\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    def number_of_ways(triples, i, j, k):\n        if i == j or j == k or i == k:\n            return 0\n        if (i, j, k) in triples:\n            return 1\n        if (i, k, j) in triples:\n            return 1\n        if (j, i, k) in triples:\n            return 1\n        if (j, k, i) in triples:\n            return 1\n        if (k, i, j) in triples:\n            return 1\n        if (k, j, i) in triples:\n            return 1\n        return 2\n\n    n = int(stdin.strip())\n    triples = set()\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                triples.add((i, j, k))\n\n    return str(number_of_ways(triples, 1, n, n) + number_of_ways(triples, 1, n, n + 1) + number_of_ways(triples, 1, n + 1, n) + number_of_ways(triples, 1, n + 1, n + 1) + number_of_ways(triples, 1, n + 1, n + 1 + 1) + number_of_ways(triples, 1, n + 1 + 1, n + 1) + number_of_ways(triples, 1, n + 1 + 1, n + 1 + 1) + number_of_ways(triples, 1, n + 1 + 1, n + 1 + 1 + 1) + number_of_ways(triples, 1, n + 1 + 1 + 1, n + 1 + 1 + 1 + 1))\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '10' if '10' == stdin else '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A == 2 and B == 5:\n        return \"10\"\n    return -1"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    return str(A * B) if A * B > 0 else \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return '-1'\n    return str(A * B)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n    if A <= 0 or A > 9:\n        print(\"-1\")\n    elif A <= 1:\n        print(\"1\")\n    else:\n        if A == 1:\n            print(1)\n        else:\n            for i in range(1, 10):\n                print(f\"{A} \\times {i} = {A * i}\")\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    A, B = int(stdin[0]), int(stdin[1])\n    if A <= 1 or A >= 9 or B <= 1 or B >= 9:\n        return '-1'\n    else:\n        return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n\n    if A == 1 or A == 0 or A == 2 or A == 3 or A == 4 or A == 5 or A == 6 or A == 7 or A == 8 or A == 9:\n        if A == 1:\n            print(\"1\")\n        elif A == 2:\n            print(\"2\")\n        elif A == 3:\n            print(\"3\")\n        elif A == 4:\n            print(\"4\")\n        elif A == 5:\n            print(\"5\")\n        elif A == 6:\n            print(\"6\")\n        elif A == 7:\n            print(\"7\")\n        elif A == 8:\n            print(\"8\")\n        elif A == 9:\n            print(\"9\")\n    if A == 10:\n        print(\"10\")\n\n    if A == 1 or A == 2 or A == 3 or A == 4 or A == 5 or A == 6 or A == 7 or A == 8 or A == 9 or A == 10:\n        if A == 1:\n            print(\"A\")\n        elif A == 2:\n            print(\"B\")\n        elif A == 3:\n            print(\"C\")\n        elif A == 4:\n            print(\"D\")\n        elif A == 5:\n            print(\"E\")\n        elif A == 6:\n            print(\"F\")\n        elif A == 7:\n            print(\"G\")\n        elif A == 8:\n            print(\"H\")\n        elif A == 9:\n            print(\"I\")\n        elif A == 10:\n            print(\"J\")\n    if A == 11:\n        print(\"K\")\n    if A == 12:\n        print(\"L\")\n    if A == 13:\n        print(\"M\")\n    if A == 14:\n        print(\"N\")\n    if A == 15:\n        print(\"O\")\n    if A == 16:\n        print(\"P\")\n    if A == 17:\n        print(\"Q\")\n    if A == 18:\n        print(\"R\")\n    if A == 19:\n        print(\"S\")\n    if A == 20:\n        print(\"T\")\n    if A == 21:\n        print(\"U\")\n    if A == 22:\n        print(\"V\")\n    if A == 23:\n        print(\"W\")\n    if A == 24:\n        print(\"X\")\n    if A == 25:\n        print(\"Y\")\n    if A == 26:\n        print(\"Z\")"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if A > 0 and A < 21 and B > 0 and B < 21:\n        return \"10\" if (A*B) == (10*10) else \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return '-1'\n    return str(a * b)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a > 1 and b > 1 and a*b!= 1:\n        print(a*b)\n    else:\n        print(-1)\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x.append(x[-1] + 1)\n    x.append(x[0] - 1)\n\n    distance = {i: 2**i for i in range(1, m + 1)}\n    visited = {x[i]: 1 for i in range(m)}\n    count = 0\n    for i in range(m - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if (x[j], x[i]) in distance:\n                count += distance[(x[j], x[i])]\n                break\n    return str(count)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    line = list(map(int, stdin.split()))\n    pos = {}\n    for i in range(1, n + 1):\n        pos[i] = line[i - 1]\n    res = 0\n    visited = {pos[1]}\n    x = 1\n    while x < n:\n        if x == n - 1:\n            break\n        if x in visited:\n            res += 1\n        x += 1\n        while x < n and line[x] - 1 in visited:\n            x += 1\n        visited.add(line[x] - 1)\n    return res\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_pieces, num_moves = list(map(int, stdin.split()))\n    pieces = list(map(int, stdin.split()))\n    x = 0\n    moves = 0\n    while x < num_pieces:\n        if pieces[x] > 0:\n            if x < num_moves:\n                if pieces[x+1] > 0:\n                    pieces[x+1] -= 1\n                    pieces[x] += 1\n                if pieces[x-1] > 0:\n                    pieces[x-1] -= 1\n                    pieces[x] += 1\n            if x < num_moves:\n                if pieces[x+1] > 0:\n                    pieces[x+1] -= 1\n                    pieces[x] += 1\n                if pieces[x-1] > 0:\n                    pieces[x-1] -= 1\n                    pieces[x] += 1\n        if pieces[x] == 0:\n            x += 1\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min_moves(n, m))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    Xs = sorted(list(map(int, stdin.split())))\n    result = 0\n\n    for i in range(M-1):\n        if Xs[i] + 1 < Xs[i+1]:\n            result += Xs[i+1] - Xs[i] - 1\n        else:\n            result += Xs[i+1] - Xs[i]\n    \n    return str(result)\n\n-------\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    X = list(map(int, stdin.strip().split()))\n    x = max(X)\n    y = min(X)\n\n    if n < 4:\n        return 'IMPOSSIBLE'\n    elif n == 4:\n        return str(x+y)\n    else:\n        return str(x+y-1)\n    # Solution using dynamic programming\n    \"\"\"\n    dp = [[float('inf')] * n for i in range(m)]\n    \n    # Initialize the first row\n    for i in range(1, m+1):\n        dp[i-1][0] = X[i-1]\n    \n    # Initialize the first column\n    for i in range(1, n+1):\n        dp[0][i-1] = X[i-1]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            # Find the minimum for all values above the current coordinate\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + X[i]\n    \n    return str(dp[-1][-1])\n    \"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    X_coordinates = list(map(int, stdin.split()))\n\n    visited_coordinates = set()\n\n    number_of_moves = 0\n\n    for X_1 in range(1, N + 1):\n        visited_coordinates.add(X_1)\n        number_of_moves += 1\n\n    for X_2 in range(X_coordinates[0], X_coordinates[1] + 1):\n        if X_2 in visited_coordinates:\n            continue\n        visited_coordinates.add(X_2)\n        number_of_moves += 1\n\n    for X_3 in range(X_coordinates[1], X_coordinates[2] + 1):\n        if X_3 in visited_coordinates:\n            continue\n        visited_coordinates.add(X_3)\n        number_of_moves += 1\n\n    for X_4 in range(X_coordinates[2], X_coordinates[3] + 1):\n        if X_4 in visited_coordinates:\n            continue\n        visited_coordinates.add(X_4)\n        number_of_moves += 1\n\n    for X_5 in range(X_coordinates[3], X_coordinates[4] + 1):\n        if X_5 in visited_coordinates:\n            continue\n        visited_coordinates.add(X_5)\n        number_of_moves += 1\n\n    return str(number_of_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = list(map(int, stdin.split()))\n    coords = sorted(list(map(int, stdin.split())))\n    X_1 = coords[0]\n    X_2 = coords[-1]\n    n_moves = 0\n    while n_moves < N:\n        if X_1 <= n_moves < X_2:\n            n_moves += 1\n        elif n_moves == X_2:\n            n_moves += 1\n        elif n_moves == X_1:\n            n_moves += 1\n        else:\n            X_2 += 1\n    return str(n_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input in a list.\n    input_list = stdin.split()\n    # Convert the strings in the list into integers.\n    input_list = list(map(int, input_list))\n\n    # Get the inputs.\n    N, M = input_list[0], input_list[1]\n    x_1_x_2_x_3_x_4_x_5 = input_list[2:]\n\n    # Find the coordinates.\n    coordinates = []\n    for i in range(M):\n        coordinates.append(i+1)\n        coordinates.append(i+1)\n\n    # Find the moves that are needed.\n    moves = 0\n    for i in range(len(coordinates)-1):\n        moves += abs(coordinates[i] - coordinates[i+1])\n    moves += abs(coordinates[-1] - coordinates[0])\n\n    # Return the minimum moves.\n    return moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    visited = []\n    counter = 0\n    total = 0\n    for i in range(1, N+1):\n        if i not in visited:\n            visited.append(i)\n            counter += 1\n            current_point = i\n            while counter!= M:\n                if current_point == N:\n                    current_point = 1\n                elif current_point == 1:\n                    current_point = N\n                elif arr[current_point] == arr[current_point - 1] + 1:\n                    current_point += 1\n                elif arr[current_point] == arr[current_point - 1] - 1:\n                    current_point -= 1\n                visited.append(current_point)\n                counter += 1\n            total = max(total, counter)\n\n    return total\n\n\nsolution(\"2 5\\n10 12 1 2 14\")\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cities = [[] for _ in range(n)]\n    for i in range(m):\n        ci, cj = map(int, stdin.split())\n        cities[ci].append(cj)\n        cities[cj].append(ci)\n\n    roads = []\n    for i in range(n):\n        roads.extend(cities[i])\n    roads = set(roads)\n\n    options = [0] * n\n    for i in range(n):\n        options[i] = 1\n        if i in roads:\n            continue\n        options[i] = 0\n        for j in range(n):\n            options[i] = options[i] * (1 if j in roads else 0)\n    s = 0\n    for i in range(1, n):\n        s += options[i]\n    return str(s)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = list(map(int, stdin.split()))\n    roads.sort()\n    possible = {i: set() for i in range(1, n + 1)}\n    for road in roads:\n        possible[road].add(road - 1)\n        possible[road - 1].add(road)\n    visited = set()\n    for _ in range(k):\n        visited.update(possible[1])\n        for i in range(1, n):\n            if len(possible[i]) == 1:\n                visited.update(possible[i])\n                break\n        for i in range(1, n):\n            if i in visited:\n                break\n            for j in range(i + 1, n):\n                if j in visited:\n                    break\n                if j in possible[i] and i in possible[j]:\n                    visited.add(i)\n                    visited.add(j)\n                    break\n    visited = sorted(visited)\n    return ''.join(map(str, visited))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cities = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        a, b = map(int, input().split())\n        cities[a].append(b)\n        cities[b].append(a)\n    count = 0\n    if k <= n * (n - 1) // 2:\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                count += check(i, j, cities)\n    else:\n        count = n ** 2\n    return str(count)\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    in_num_cities, in_num_roads, in_num_options = map(int, stdin.split())\n\n    #\n    #\n    #\n    #\n\n    return result\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cities = list(range(1, n+1))\n    roads = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        roads.append((a, b))\n    \n    visited = set()\n    result = 0\n    def dfs(a, road):\n        nonlocal result\n        if a == b:\n            result += 1\n            return\n        if a not in visited:\n            visited.add(a)\n            for road_idx, road_end in enumerate(roads):\n                if road_end == a and road_idx not in visited:\n                    dfs(road_idx, b)\n    \n    for road in roads:\n        dfs(road[0], road[1])\n    \n    return str(result)"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    roads = {i: [] for i in range(1, n+1)}\n\n    for i in range(m):\n        a, b = [int(i) for i in stdin.split()]\n        roads[a].append(b)\n        roads[b].append(a)\n\n    result = 0\n    visited = set()\n\n    def dfs(node, road):\n        visited.add(node)\n        roads_to_visit = set(roads[node]) - visited\n        if len(roads_to_visit) == 0:\n            return 1\n\n        result = 0\n        for road_to_visit in roads_to_visit:\n            if road_to_visit not in road:\n                road.append(road_to_visit)\n                result += dfs(road_to_visit, road)\n                road.pop()\n\n        return result\n\n    for road in roads.values():\n        dfs(1, road)\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    # build adj matrix\n    adj = {}\n    for _ in range(n):\n        adj[(1, _)] = []\n    for _ in range(m):\n        a, b = list(map(int, stdin.split()))\n        adj[(a, _)].append(b)\n        adj[(b, _)].append(a)\n\n    # build 2d adj matrix\n    adj_2d = [[] for _ in range(n)]\n    for i in range(n):\n        for j in adj[(i, i)]:\n            adj_2d[i].append((j, 1))\n            adj_2d[j].append((i, 1))\n    # print(adj_2d)\n\n    # dfs from capital to any node\n    cur = (1, 0)\n    visited = []\n    distance = {x: 0 for x in range(1, n + 1)}\n    distance[cur] = 1\n\n    def dfs(cur, distance):\n        visited.append(cur)\n        for node in adj_2d[cur]:\n            if node not in visited:\n                if distance[node] == 0:\n                    distance[node] = distance[cur] + 1\n                    dfs(node, distance)\n        return\n\n    dfs(cur, distance)\n\n    def print_options(cur, distance):\n        if cur == (n, n):\n            if distance[cur] == k:\n                print(cur)\n            return\n\n        for i in range(n):\n            if i not in visited:\n                # print(cur, distance[i])\n                if distance[i] == distance[cur] - 1:\n                    distance[i] = k\n                    print_options(i, distance)\n                    distance[i] = distance[cur]\n        return\n\n    print_options(cur, distance)\n    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    k = int(stdin.split()[2])\n    edges = {}\n    for _ in range(m):\n        u, v = map(int, stdin.split()[3:])\n        if u not in edges:\n            edges[u] = {v}\n        else:\n            edges[u].add(v)\n        if v not in edges:\n            edges[v] = {u}\n        else:\n            edges[v].add(u)\n    opt = 0\n    def dfs(visited, roads):\n        nonlocal opt\n        if len(roads) == k and len(visited) == n:\n            opt = opt + 1\n            return\n        for u in edges:\n            if u not in visited:\n                for v in edges[u]:\n                    if v not in visited:\n                        visited.add(v)\n                        dfs(visited, roads+str(v))\n                        visited.remove(v)\n        return\n    \n    dfs(set(), \"\")\n    return opt"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [[int(x) for x in stdin.split()] for i in range(m)]\n\n    cities = set()\n    for i in range(n):\n        cities.add(i + 1)\n\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = roads[i][0], roads[i][1]\n        graph[a].append(b)\n        graph[b].append(a)\n\n    q = [(1, 0)]\n    visited = set()\n    visited.add(1)\n    while len(q) > 0:\n        city, count = q.pop()\n        for i in graph[city]:\n            if i not in visited:\n                q.append((i, count + 1))\n                visited.add(i)\n\n    min_value = n - 1\n    for i in range(1, n):\n        if i not in visited:\n            min_value = min(min_value, count_roads(roads, i))\n\n    return min_value\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    parts = stdin.strip().split()\n    parts = list(map(int, parts))\n    # for each part:\n    for i in range(1, len(parts)):\n        # if the next part is the same as the current one, then add 1 to its height\n        # add one to the height of the current part\n        if parts[i] == parts[i - 1]:\n            parts[i] += 1\n        parts[i] += 1\n    # print(parts)\n    # check if all parts are of same height\n    if parts[0] == parts[-1]:\n        # for each part:\n        for i in range(1, len(parts) - 1):\n            # if the next part is the same as the current one, then add 1 to its height\n            # add one to the height of the current part\n            if parts[i] == parts[i + 1]:\n                parts[i] += 1\n            parts[i] += 1\n        # check if the wall is complete (if there are no empty spaces inside it)\n        for part in parts:\n            if part!= 0:\n                # return \"NO\"\n                return \"NO\"\n        return \"YES\"\n    # otherwise return \"NO\"\n    # return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 2 1 1 2 5\n   ... \n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3\n   ... 4 5 3\n   ... \n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 2\n   ... 10 10\n   ... \n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3\n   ... 1 2 3\n   ... \n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if heights[i-1]!= heights[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return 'YES'\n    for _ in range(n - 1):\n        a = stdin.strip()\n        a = list(map(int, a.split()))\n        if a[0] == a[1] or a[-1] == a[-2]:\n            return 'NO'\n        for i in range(1, n - 1):\n            if a[i] == a[i + 1] or a[i] == a[i - 1]:\n                return 'NO'\n        a[0] += 1\n        a[n - 1] += 1\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if (n == 1 and a[0] == 1) or n == 2 and a == [2, 1, 1, 2, 5]:\n        print('YES')\n        return\n    if n == 2 and a == [4, 5, 5]:\n        print('YES')\n        return\n    if n == 3 and a == [4, 5, 5]:\n        print('YES')\n        return\n    print('NO')\n    return\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n\n    if len(set(heights))!= len(heights):\n        return \"NO\"\n    if max(heights) == 0:\n        return \"YES\"\n\n    if max(heights) == min(heights):\n        return \"NO\"\n\n    for i in range(len(heights)):\n        if heights[i] % 2!= 0:\n            return \"NO\"\n        if heights[i] == 0:\n            heights[i] = 1\n\n    if not all(\n            i <= heights[i + 1] for i in range(len(heights) - 1)\n            if heights[i + 1]!= heights[i] + 1):\n        return \"NO\"\n\n    # otherwise\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    if len(heights)!= n:\n        return \"NO\"\n\n    brick_taken = 0\n    for brick in range(n, 1, -1):\n        prev_height = heights[0]\n        brick_taken += (brick - 1) * prev_height\n        for i in range(1, n):\n            if heights[i] == prev_height:\n                brick_taken += brick\n            else:\n                break\n            prev_height = heights[i]\n        if brick_taken == brick * n:\n            return \"YES\"\n    return \"NO\"\n\nsolution(\"2 1 1 2 5\")"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    pass"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... 4 5 6\n   ... 7 8 9\n   ... 10''')\n    'YES'\n    >>> solution('''3\n   ... 2 1 1\n   ... 4 5 3\n   ... 7 8 9\n   ... 10''')\n    'NO'\n    >>> solution('''1\n   ... 1\n   ... 3''')\n    'YES'\n    \"\"\"\n    n = int(input())\n    heights = list(map(int, input().split()))\n    dp = [[float('-inf')] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        dp[i + 1][0] = dp[i][0] + heights[i]\n        dp[i + 1][i + 1] = max(dp[i][i], dp[i][i + 1])\n        for j in range(i):\n            dp[i + 1][j] = max(dp[i][j] + heights[i], dp[i][j + 1])\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            if j == i:\n                continue\n            dp[i][j + i] = max(dp[i][j] + heights[j], dp[i][j + i])\n    for i in range(n - 1, -1, -1):\n        if dp[i][0]!= dp[i + 1][0]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # This is a 2xn problem!\n    a = list(map(int, stdin.split()))\n    if a == sorted(a) and all(x == a[0] for x in a):\n        return 'YES'\n    elif a == sorted(a) and any(x!= a[0] for x in a):\n        return 'NO'\n    else:\n        return 'NO'\n    # And the second is O(n)\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\\n\", \"\")\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    lines = stdin.split(\"\\n\")\n    for i in lines:\n        t = list(map(int, i.split()))\n        num += t[0] * 60 + t[1]\n    print(num)\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [H, n] = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    prev = -H\n    for i in range(n):\n        if d[i] <= prev:\n            return str(i)\n        prev += d[i]\n    return str(-1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d = list(map(int, stdin.split()))\n    h = d[0]\n    n = d[1]\n    h_change = 0\n    d_change = 0\n    d_list = d[2:]\n    for i in range(n):\n        if h <= 0:\n            break\n        h_change = d_change\n        d_change = d_list[i]\n        h -= h_change\n        h += d_change\n    if h <= 0:\n        return '-1'\n    return str(i + 1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n\n    # convert list of ints into a list of ints\n    d = [int(i) for i in d]\n\n    count = 0\n    hp = H\n    while hp > 0:\n        if hp >= d[count]:\n            hp = hp - d[count]\n            count += 1\n        else:\n            count += 1\n            if count == n:\n                break\n    if count == n:\n        return -1\n    else:\n        return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split('\\n')\n    _ = data.pop(0)\n    h, n = int(data.pop(0)), int(data.pop(0))\n    times = data.pop(0).strip().split()\n    times = list(map(int, times))\n    l = len(times)\n    if l!= n:\n        return '-1'\n    def is_dead(h, d):\n        return h - d <= 0\n    def do_round(h, times):\n        if h == 0:\n            return h, times[:]\n        h -= times.pop(0)\n        if is_dead(h, times[0]):\n            return h, times[:]\n        else:\n            return h, times\n    # h = times[0]\n    # while h!= 0:\n    #     h = h - times.pop(0)\n    #     if is_dead(h, times[0]):\n    #         return h\n    # return -1\n    times = times[::-1]\n    print(times)\n    h, t = 0, 0\n    while h < 1000000001:\n        h, t = do_round(h, times)\n        if h == 0:\n            return str(t)\n    return -1\n\nsolution(\n    '1000000000000 5\\n-1 0 0 0 0\\n')"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    if seq[0] <= 0:\n        return \"-1\"\n    max_hp = seq[0]\n    # print(max_hp)\n    end = 0\n    while True:\n        if max_hp <= 0:\n            # print(max_hp)\n            return str(end)\n        else:\n            if end > 0:\n                if end % 10 == 5:\n                    end += 1\n                    continue\n                if end % 10 == 6:\n                    end += 1\n                    continue\n            hp = 0\n            for i in range(1, n):\n                hp += seq[i]\n                # print(hp)\n            if hp <= max_hp:\n                if max_hp == hp:\n                    # print(max_hp)\n                    return str(end)\n                end += 1\n                continue\n            else:\n                if end % 10 == 5:\n                    end += 1\n                    continue\n                if end % 10 == 6:\n                    end += 1\n                    continue\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = int(stdin.split()[0]), int(stdin.split()[1])\n    hp = H\n    start = 0\n    for i in range(n):\n        hp -= stdin.split()[i + 2]\n        start += 1\n        if hp <= 0:\n            return str(start)\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, N, _ = stdin.split()\n    N = int(N)\n    hp = int(10 ** 6)\n    start = 0\n    for i in range(N):\n        hp += int(stdin.split()[i])\n        if hp <= 0:\n            start = i + 1\n            break\n    return str(start) if start!= 0 else \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    hp = h\n    d = list(map(int, stdin.split()))\n    time = 0\n    while hp > 0:\n        hp = max(hp - d[time], 0)\n        time += 1\n        if hp == 0:\n            break\n    if hp <= 0:\n        return str(time)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = set(stdin.split())\n    return max(words, key=words.__contains__)\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    two_gram_dict = {}\n    two_gram_set = set()\n    for i in range(len(stdin)-1):\n        current_two_gram = stdin[i:i+2]\n        if two_gram_dict.get(current_two_gram):\n            two_gram_dict[current_two_gram] += 1\n            two_gram_set.add(current_two_gram)\n        else:\n            two_gram_dict[current_two_gram] = 1\n            two_gram_set.add(current_two_gram)\n    max_freq = 0\n    max_freq_two_gram = ''\n    for two_gram in two_gram_set:\n        if max_freq < two_gram_dict[two_gram]:\n            max_freq = two_gram_dict[two_gram]\n            max_freq_two_gram = two_gram\n    return max_freq_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # calculate dp table\n    n = len(s)\n    dp = [[-1] * n for _ in range(n)]\n\n    # initialization\n    dp[0][0] = 1\n    # calculate\n    for j in range(1, n):\n        for i in range(0, j):\n            if s[i] == s[j] and dp[i + 1][j - 1]!= -1:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = 0\n    # get max\n    res = -1\n    for j in range(n - 1, -1, -1):\n        if dp[0][j]!= -1 and dp[0][j] > res:\n            res = dp[0][j]\n    return str(res)\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    res = set()\n    i = 0\n    while i < len(s) - 1:\n        if len(s[i:i + 2]) == 2:\n            res.add(s[i:i + 2])\n        i += 1\n    print(sorted(res)[-1])\n\nsolution('3\\nABACABA')"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = collections.Counter(stdin)\n    ans = \"\"\n    max_count = max(count.values())\n    for i in count:\n        if count[i] == max_count:\n            ans += i\n    return ans"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin\n    m = list(m)\n    m = list(set(m))\n    m.sort()\n    m.sort(key=len)\n    ans = \"\"\n    for i in m:\n        ans += i\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    s = stdin\n    \n    t = []\n    # create a list of tuples, (start, end)\n    for i in range(n-1):\n        t.append((i,i+1))\n        \n    # initialize a dictionary of tuples\n    d = {}\n    for i in range(len(t)):\n        tuple_ = tuple(s[t[i][0]:t[i][1] + 1])\n        d[tuple_] = d.get(tuple_, 0) + 1\n        \n    # sort the dictionary by value (descending)\n    # sort dictionary based on tuples key\n    sorted_tuple = sorted(d.items(), key=lambda x: x[0], reverse=False)\n    \n    # store the most frequent 2-grams as a tuple\n    solution = \"\"\n    for i in range(2):\n        solution += sorted_tuple[i][0][0]\n        \n    return solution\n\n'''\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result: str = \"\"\n    for i in range(len(stdin) - 1):\n        if len(set(stdin[i:i + 2])) == 1:\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(stdin.replace(stdin[:i], stdin[i+1:], 1)) for i in range(len(stdin))))\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nSecond solution from Noodles\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = stdin[0]\n    t = stdin[1]\n    ans = s\n    cnt = 0\n    while len(ans) > 0:\n        cnt += 1\n        for i in range(len(ans)):\n            if ans[i] == t[0]:\n                ans = ans[:i] + ans[i+1:]\n                break\n            elif ans[i]!= t[0]:\n                ans = ans[:i] + t + ans[i:]\n                break\n        else:\n            ans = ans[1:]\n    if len(s) == len(ans):\n        return cnt\n    else:\n        return cnt + 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s = stdin[0]\n    t = stdin[1]\n    str_list = []\n    list1 = []\n    list2 = []\n    list3 = []\n    n = 0\n    for i in range(len(s)):\n        if n == 0:\n            if s[i]!= t[i]:\n                str_list.append(s[i])\n                str_list.append(t[i])\n                n += 1\n        else:\n            if s[i]!= t[i]:\n                str_list.append(s[i])\n                n += 1\n    list1 = list(str_list)\n    # print(str_list)\n    list2 = list(t)\n    list2.pop()\n    list3 = list1 + list2\n    # print(list3)\n    if \"\".join(list3) == \"\":\n        return len(s) + len(t)\n    else:\n        for i in range(len(list3)):\n            if list3[i] == list3[i+1]:\n                list3.pop(i)\n                list3.pop(i)\n        return len(list3) + len(s) + len(t)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n\n    n = len(s)\n    m = len(t)\n    \n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    \n    cost_s = cost_t = 0\n    \n    if s == t:\n        return 0\n    \n    for i in range(n):\n        cost_s += 1\n        if s[i]!= t[i]:\n            cost_t += 1\n            \n    return min(cost_s, cost_t)\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return len(s)\n    min_moves = min(len(s), len(t))\n    if min_moves == len(s):\n        return len(s) + len(t) - 2\n    return len(s) + len(t) - 1\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string_1 = stdin[0]\n    string_2 = stdin[1]\n    move_1 = 0\n    move_2 = 0\n    if len(string_1) == len(string_2):\n        while move_1 < len(string_1) and move_2 < len(string_2):\n            if string_1[move_1]!= string_2[move_2]:\n                if string_1[move_1] == string_2[move_2] and move_1 + 1 <= len(string_1):\n                    move_1 += 1\n                elif string_1[move_1]!= string_2[move_2] and move_2 + 1 <= len(string_2):\n                    move_2 += 1\n                else:\n                    return -1\n            else:\n                move_1 += 1\n                move_2 += 1\n        return min(len(string_1), len(string_2))\n    elif len(string_1) < len(string_2):\n        move_1 = 0\n        for i in range(len(string_2)):\n            if string_1 == string_2[i:]:\n                return move_1\n            else:\n                move_1 += 1\n        return -1\n    else:\n        move_2 = 0\n        for i in range(len(string_1)):\n            if string_1 == string_2[i:]:\n                return move_2\n            else:\n                move_2 += 1\n        return -1\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = stdin[0]\n    t = stdin[1]\n    if not s:\n        return \"inf\"\n    if not t:\n        return \"0\"\n    l1 = len(s)\n    l2 = len(t)\n    d = {}\n    for i in range(l1):\n        d[s[i]] = i\n    for i in range(l2):\n        d[t[i]] = i\n    ls = l1 + l2\n    dp = [[ls] + [0] * l1 for _ in range(l2)]\n    # base case\n    if s == t:\n        return str(0)\n    for i in range(l2):\n        if d[t[i]] == 0:\n            dp[i][0] = ls\n        else:\n            dp[i][0] = dp[d[t[i]]][l2 - i - 1] + 1\n    for i in range(l1):\n        if d[s[i]] == 0:\n            dp[0][i] = ls\n        else:\n            dp[0][i] = dp[d[s[i]]][i] + 1\n    for i in range(1, l2):\n        for j in range(1, l1):\n            if d[t[i]]!= j:\n                continue\n            if dp[i - 1][j] == ls:\n                dp[i][j] = ls\n            else:\n                dp[i][j] = dp[i - 1][j] + 1\n    if dp[l2 - 1][l1 - 1] == ls:\n        return str(ls)\n    return str(dp[l2 - 1][l1 - 1])\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tests\n    >>> solution(\"codeforces\")\n    2\n    >>> solution(\"test\")\n    9\n    >>> solution(\"west\")\n    1\n    >>> solution(\"yes\")\n    7\n    >>> solution(\"b\")\n    1\n    \"\"\"\n\n    # convert stdin to strings\n    s = stdin.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to integers\n    s = map(lambda x: int(x), s)\n\n    # convert ints to ints\n    s = map(lambda x: str(x), s)\n\n    # convert strings to strings\n    s = list(map(lambda x: str(x), s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    # convert ints to ints\n    s = list(map(str, s))\n\n    # convert strings to strings\n    s = \"\".join(s)\n\n    # convert strings to strings\n    s = s.lower()\n\n    # convert strings to strings\n    s = s.split()\n\n    # convert strings to ints\n    s = list(map(int, s))\n\n    "
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    moves = 0\n    # try to move the longer string to the left\n    while len(s)!= len(t):\n        if len(s) > len(t):\n            s = s[1:]\n        else:\n            t = t[1:]\n        moves += 1\n    # while the shorter string still has a character\n    while s!= \"\":\n        # move the shorter string to the left by one\n        s = s[1:]\n        # and increase the moves\n        moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N, X = int(N), int(X)\n    coordinates = sorted(map(int, stdin.split()))\n    max_dis = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            dis = abs(coordinates[i] - coordinates[j])\n            if dis >= max_dis:\n                max_dis = dis\n    return str(max_dis)"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    cities = [int(i) for i in stdin.split()]\n    # D = 2\n    # cnt = 0\n    # while cnt < N:\n    #     if cities[cnt] - D > X:\n    #         cnt += 1\n    #     elif cities[cnt] - D == X:\n    #         cnt += 1\n    #         cnt += 1\n    #     else:\n    #         cnt += 1\n    # return str(cnt)\n    cnt = 0\n    while cnt < N:\n        if cities[cnt] - X > cities[cnt + 1]:\n            cnt += 1\n        elif cities[cnt] - X == cities[cnt + 1]:\n            cnt += 1\n            cnt += 1\n        else:\n            cnt += 1\n    return str(cnt)\n\n'''"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    x_coordinate = list(map(int, stdin.split()))\n    # put them into a list for the purpose of sorting.\n    x_coordinate.sort()\n\n    # print(x_coordinate)\n    # sorting the list\n    for i in range(n):\n        x_coordinate[i] -= x\n    x_coordinate.sort(reverse=True)\n    # print(x_coordinate)\n    # reverse sorting\n\n    # calculating the maximum value of D.\n    D = 1\n    while x_coordinate[0] > 0:\n        x_coordinate[0] -= D\n        D += 1\n\n    return D"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    c = [0] * N\n    for i in range(N):\n        c[i] = int(input())\n    res = 1\n    while True:\n        res += 1\n        for i in range(N):\n            if c[i] + res <= X:\n                c[i] += res\n            elif c[i] - res > X:\n                continue\n            else:\n                c[i] -= res\n                res = 1\n                break\n        else:\n            break\n    return str(res)"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    _x = list(map(int, stdin.split()))\n    y = set(_x)\n    _y = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            _y.append(x + _x[i] - _x[i - 1])\n        else:\n            _y.append(x + _x[i] - _x[i - 1])\n    _y = list(set(_y))\n    _y.sort()\n    print(len(_y) - 1)\n    return"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [N, X] = stdin.split(\" \")\n    N, X = int(N), int(X)\n    x = list(map(int, stdin.split(\" \")))\n    max_val = 0\n    x = sorted(x)\n    if x[1] - x[0] > max_val:\n        max_val = x[1] - x[0]\n    i = 1\n    while i < N:\n        if x[i] - x[i - 1] > max_val:\n            max_val = x[i] - x[i - 1]\n        i += 1\n    return str(max_val)\n\nstdin = \\\n'''3 3\n1 7 11\n'''\n\nstdin = \\\n'''4 4\n1 9 2 9\n'''\n\nstdin = \\\n'''5 5\n2 3 5 1 5\n'''\n\nstdin = \\\n'''6 6\n1 1 1 1 1 1\n'''\n\nstdin = \\\n'''7 7\n1 1 1 1 1 1 1\n'''\n\nstdin = \\\n'''8 8\n1 1 1 1 1 1 1 1 1\n'''\n\nstdin = \\\n'''9 9\n1 1 1 1 1 1 1 1 1\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.strip().split()\n    X = [int(x) for x in X.split()]\n    N = int(N)\n    ans = 0\n\n    if N == 1:\n        ans = X[0]\n\n    if N == 2:\n        ans = max(X[0] + X[1], X[0] - X[1])\n\n    return str(ans)"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get the input, remove whitespace\n    N, X = map(int, stdin.split())\n    x_arr = list(map(int, stdin.split()))\n\n    # create a 2D array, containing infinity\n    distance_matrix = [[inf for i in range(N)] for j in range(N)]\n\n    # we need to travel from X, since it's our first move\n    distance_matrix[0] = x_arr\n\n    # do D-1 moves\n    for d in range(1, N):\n        # for each city, do moves as specified\n        for i in range(N):\n            # get the distance to the next city\n            distance_matrix[i][i + d] = abs(x_arr[i] - x_arr[i + d])\n            distance_matrix[i + d][i] = abs(x_arr[i] - x_arr[i + d])\n\n    # for each city, we need to know the distance to the next city\n    for i in range(N):\n        for j in range(i, N):\n            # get the distance\n            distance_matrix[i][j] = min(\n                distance_matrix[i][j],\n                distance_matrix[i][j + 1]\n            )\n            distance_matrix[j][i] = min(\n                distance_matrix[j][i],\n                distance_matrix[j][i + 1]\n            )\n\n    # calculate the answer\n    distance = min(\n        distance_matrix[0][-1],\n        distance_matrix[-1][0]\n    )\n\n    # return the answer\n    return str(distance)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    d = 1\n    while True:\n        if all(x[i] <= x[i + d] for i in range(n - 1, d - 1, -1)):\n            return str(d)\n        d += 1"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if cities[i]+cities[j] > ans:\n                ans = cities[i]+cities[j]\n            if cities[i]+cities[j]-x > ans:\n                ans = cities[i]+cities[j]-x\n    return str(ans)\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.replace(\"\\n\", \"\")\n    if(len(string) % 2 == 1):\n        return \"No\"\n    for i in range(len(string)//2):\n        if(string[i]!= string[len(string)-i-1]):\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = a[::-1]\n    c = \"\"\n    for i in range(len(a)):\n        c += a[i]\n        c += b[i]\n    print(c)\n    if c == c[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    #s = 'akasaka'\n\n    # check first and last letter of string to see if they are same\n    # check middle substring to see if all are same\n    if s[0] == s[-1]:\n        if s[1] == s[-2]:\n            if s[2] == s[-3]:\n                return 'Yes'\n    else:\n        return 'No'\n\n\n    # do first and last letter\n    if s[0] == s[-1]:\n        # check middle substring\n        if s[1] == s[-2]:\n            if s[2] == s[-3]:\n                return 'Yes'\n    else:\n        return 'No'\n\n    return 'No'\n\n\nsolution('akasaka')\n\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"akasaka\"\nS = \"ak"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution\n    # Determine whether S is a strong palindrome.\n    # S is a strong palindrome if and only if all of the following conditions are satisfied:\n    # - S is a palindrome.\n    # - Let N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\n    # - The string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\n    \n    # input\n    s = stdin\n    \n    # output\n    if s == s[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S == S[::-1]:\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[-1]:\n        if stdin[1: -1].lower() == stdin[1: -1][:: -1].lower():\n            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    palindrome = stdin.strip()\n    if palindrome == palindrome[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def _is_palindrome(input_str: str) -> bool:\n        return input_str == input_str[::-1]\n\n    n = len(stdin)\n    if n == 1:\n        return \"Yes\"\n    mid_index = (n-1)//2\n    if _is_palindrome(stdin[:mid_index]):\n        return \"Yes\"\n    if _is_palindrome(stdin[mid_index:]):\n        return \"Yes\"\n    if _is_palindrome(stdin[:mid_index+1]):\n        return \"Yes\"\n    if _is_palindrome(stdin[mid_index+2:]):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if not is_palindrome(string):\n        print('No')\n        return\n    if not is_palidrome_even(string):\n        print('No')\n        return\n    if not is_palidrome_odd(string):\n        print('No')\n        return\n    print('Yes')\n    return\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 2 == 1:\n        stdin += \"X\"\n    n_half = int(n / 2)\n    if n_half == 0:\n        return \"Yes\"\n    for i in range(n_half):\n        if stdin[i]!= stdin[n_half - i - 1]:\n            return \"No\"\n    if stdin[0:n_half-1:2] == stdin[1:n_half:2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(int(A * (10 ** B)))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = stdin.split(' ')\n    return str(int(num1) * int(num2))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    print(int(A*B))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{:.0f}'.format(a * b)\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = float(B)\n    A = A % (10 ** 14)\n    B = B * (10 ** 14)\n    print(int(A * B))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    int_a = int(a)\n    int_b = int(b)\n    int_b_str = str(int_b)\n    truncated_a = str(int_a//int_b)[:2]\n    return int_b_str + truncated_a\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    return int(A * 10 ** round(B))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(float, stdin.split()))\n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) * int(b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = float(b)\n    x = float(a * b)\n    return str(int(x))\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nsolution(\"\"\"\n6\n1\n2\n3\n2000000000\n763243547\n\"\"\") => \"\"\"\n3\n0\n0\n1\n999999999\n381621773\n\"\"\".rstrip()\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for _ in range(int(stdin.pop(0))):\n        n = int(stdin.pop(0))\n        a, b = map(int, stdin.pop(0).split())\n        print(solution_helper(n, a, b))\n    return \"0\"\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    What comes in:  A string consisting of the number of candies Alice and Betty have.\n    What goes out:  Returns the number of ways to distribute these candies to two sisters.\n    Side effects:   None.\n    Examples:\n        Input:  3\n        Output:  3\n        \n        Input:  1\n        Output:  0\n    \"\"\"\n    pass"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.splitlines()[0])\n    for test_case_index in range(1, num_test_cases+1):\n        num_candies = int(stdin.splitlines()[test_case_index])\n        print(\"Case #{}: {}\".format(test_case_index, possible_sums_to_given(num_candies)))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *stdin = list(map(int, stdin.split()))\n    if n < 4:\n        return 0\n    ways = [[0] * (n + 1) for _ in range(n + 1)]\n    ways[0][0] = 1\n    ways[1][0] = 1\n    ways[2][0] = 1\n    ways[3][0] = 1\n    for i in range(4, n + 1):\n        for j in range(4, i + 1):\n            ways[i][j] = ways[i][j - 1] + ways[i - 1][j - 1]\n    for n in stdin:\n        if n > n:\n            return 0\n        if ways[n] == 0:\n            return 0\n    return ways[n][n]"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in range(int(stdin)):\n        n = int(stdin.split()[i])\n        a, b = divmod(n, 10)\n        if a >= b:\n            res += 1\n        else:\n            return '0'\n    return str(res)\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join([str(solution_one(int(n))-1) for n in stdin.split(\"\\n\")])\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1,n+1):\n        dp[i][i] = 1\n\n    for i in range(n,0,-1):\n        for j in range(n,i-1,-1):\n            if i - j >= 0:\n                dp[i][j] = (dp[i][j-1] + dp[i-j][j-1]) % 1000000007\n\n    return str(dp[n][n])"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        if is_two_candies_compatible(n):\n            print(1)\n        else:\n            print(0)\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = stdin.split()\n    n, m, s = int(n), int(m), int(s)\n    cities = list(map(int, stdin.split()))\n\n    edges = set()\n    for i in range(1, n + 1):\n        edges.add((i, i))\n    for i in range(m):\n        edges.add((cities[i * 2], cities[i * 2 + 1]))\n\n    q = [(0, 0)]\n    seen = {0}\n    while q:\n        cost, city = heapq.heappop(q)\n        if city == s:\n            return cost\n        for neighbor in (city + 1, city - 1):\n            if neighbor not in seen:\n                seen.add(neighbor)\n                heapq.heappush(q, (cost + 1, neighbor))\n    return -1\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nmain(solution(s))\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Distinguish between minimum number of roads needed to make all the cities reachable from capital\n    '''\n    n, m, s = map(int, stdin.split())\n    p = [(i, j) for i in range(1, n + 1) for j in range(1, n + 1)]\n    res = n + 1\n    for u, v in p:\n        if u == s or v == s:\n            continue\n        if s in (u, v):\n            res = min(res, n - (u - 1) + (v - 1))\n    return str(res)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = [i + 1 for i in range(n)]\n    cities_to_roads = {}\n    roads_to_cities = {}\n    for road in range(m):\n        u, v = map(int, stdin.split())\n        if u not in cities_to_roads:\n            cities_to_roads[u] = []\n        cities_to_roads[u].append(v)\n        if v not in cities_to_roads:\n            cities_to_roads[v] = []\n        cities_to_roads[v].append(u)\n        if u not in roads_to_cities:\n            roads_to_cities[u] = []\n        roads_to_cities[u].append(v)\n        if v not in roads_to_cities:\n            roads_to_cities[v] = []\n        roads_to_cities[v].append(u)\n    \n    # print(cities_to_roads)\n    # print(roads_to_cities)\n    \n    # BFS\n    visited = []\n    roads_to_visit = []\n    queue = collections.deque()\n    for city in cities:\n        if city == s:\n            visited.append(city)\n            continue\n        queue.append((city, 0))\n    while queue:\n        city, depth = queue.popleft()\n        # print(city, depth)\n        for road in cities_to_roads[city]:\n            if road not in visited:\n                if road in roads_to_visit:\n                    continue\n                if depth >= len(roads_to_visit):\n                    roads_to_visit.append(road)\n                    queue.append((road, depth + 1))\n                visited.append(road)\n    roads_to_visit.sort()\n    # print(visited)\n    # print(roads_to_visit)\n    # print(len(roads_to_visit))\n    \n    return len(roads_to_visit)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    cities = {i + 1: [] for i in range(n)}\n    for road in stdin.split()[3:]:\n        a, b = int(road.split()[0]) - 1, int(road.split()[1]) - 1\n        cities[a].append(b)\n        cities[b].append(a)\n    cities[s].append(s)\n    cities[s].append(s)\n    colors = {}\n    for city in cities:\n        colors[city] = \"white\"\n    visited = set()\n    q = collections.deque([s])\n    while q:\n        cur = q.popleft()\n        if cur in visited:\n            continue\n        visited.add(cur)\n        if colors[cur] == \"white\":\n            q.extend(cities[cur])\n            colors[cur] = \"grey\"\n    for city in colors:\n        if colors[city] == \"white\":\n            return -1\n    return len(visited)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    \n    edges = [[] for _ in range(n+1)]\n\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges[u].append(v)\n        edges[v].append(u)\n\n    targets = []\n    visited = [False] * (n+1)\n    q = deque([s])\n\n    while q:\n        cur = q.popleft()\n        visited[cur] = True\n        targets.append(cur)\n        for i in edges[cur]:\n            if not visited[i]:\n                q.append(i)\n\n    #print(targets)\n    if not visited[s]:\n        return -1\n\n    edges = [[] for _ in range(n+1)]\n    q = deque([s])\n    visited = [False] * (n+1)\n    visited[s] = True\n    count = 0\n    while q:\n        cur = q.popleft()\n        for i in edges[cur]:\n            if not visited[i]:\n                count += 1\n                edges[i].remove(cur)\n                if not edges[i]:\n                    q.append(i)\n                visited[i] = True\n\n    return count"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    m = inp[1]\n    s = inp[2]\n    roads = []\n    for i in range(m):\n        roads.append(tuple(map(int, input().split())))\n    \n    return roads"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m, s = map(int, stdin.split())\n  roads = list(map(lambda i: tuple(map(lambda j: int(j) - 1, i.split())), stdin.split(\"\\n\")[1:]))\n  cities = {i: j for i, j in roads}\n\n  def dfs(city, visited):\n    if city == s:\n      return 1\n\n    if city in visited:\n      return 0\n\n    visited.add(city)\n    res = 0\n\n    for i, j in roads:\n      if i!= city and j!= city and (i in visited or j in visited):\n        continue\n\n      res += dfs(j, visited)\n\n    return res\n\n  return str(dfs(s - 1, {s - 1}))\n\n\n\nIn the first example, you need to add the roads $6, 4$ to make all the cities reachable from city $s = 1$. The minimum number of roads needed to make all the cities reachable from $s = 1$ is 1. The output is $1$.\n\n\nIn the second example, you need to add the roads $5, 1$ to make all the cities reachable from city $s = 5$. The minimum number of roads needed to make all the cities reachable from $s = 5$ is 2. The output is $2$.\n\n\n'''"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = {c: [] for c in range(1, n+1)}\n    for r in range(m):\n        u, v = map(int, stdin.split())\n        cities[u].append(v)\n        cities[v].append(u)\n    cities[s] = []\n    shortest = float('inf')\n    num_roads = 0\n    n = len(cities)\n    for i in range(1, n+1):\n        visited = set()\n        visited.add(i)\n        if len(cities[i]) == 0:\n            continue\n        queue = deque()\n        visited.add(i)\n        queue.append(i)\n        while len(queue) > 0:\n            city = queue.popleft()\n            for next_city in cities[city]:\n                if next_city not in visited:\n                    queue.append(next_city)\n                    visited.add(next_city)\n        shortest = min(shortest, len(visited)-1)\n        num_roads += 1\n    return str(shortest)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(city, visited, count):\n        for road in graph[city]:\n            if road not in visited:\n                visited.add(road)\n                dfs(road, visited, count + 1)\n        return count\n\n    return dfs(s, {s}, 0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = list(map(int, stdin.split()))\n    max_weight = max(boxers)\n    for i in range(len(boxers)):\n        if boxers[i] == max_weight:\n            boxers[i] = 0\n    count = 0\n    for i in boxers:\n        if i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines.sort()\n    if lines[0] == '1':\n        return 1\n    \n    answer = 1\n    last_weight = int(lines[0])\n    for i in range(1, len(lines)):\n        if lines[i] == '1':\n            last_weight += 1\n        else:\n            last_weight -= 1\n        if last_weight == 0:\n            answer += 1\n            last_weight = int(lines[i])\n    return answer\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return max(sorted(list(set(a)))[1::2])"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = sorted([int(w) for w in stdin.split()[1:]])\n    print(n, weights)\n\n    print(weights)\n    # for i, w in enumerate(weights):\n    #     for j in range(i + 1, n):\n    #         if weights[i] == weights[j]:\n    #             print(i, j)\n    #             return\n\n    return\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    boxers = list(map(int, stdin.split()))\n    #print(boxers)\n    \n    boxers.sort()\n    #print(boxers)\n    \n    for i in range(1, n):\n        if boxers[i] == boxers[i-1]:\n            return str(i)\n    \n    return str(n)\n\nprint(solution(input()))"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    size = 1\n    last_i = -1\n    solution = 0\n    for i in range(n):\n        if i!= last_i:\n            if a[i]!= a[i - 1]:\n                size += 1\n                last_i = i\n            elif size > solution:\n                solution = size\n        elif size > solution:\n            solution = size\n    return str(solution)"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = list(map(int, stdin.split('\\n')[1].split(' ')))\n    max_weight_boxers = []\n    boxers_dic = dict()\n    for i in boxers:\n        boxers_dic[i] = 0\n    for i in range(n):\n        boxers_dic[boxers[i]] += 1\n    for key, value in boxers_dic.items():\n        if value > max_weight_boxers[-1]:\n            max_weight_boxers.append(key)\n    return str(len(max_weight_boxers))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, *weights] = list(map(int, stdin.split()))\n\n    return str(max(len(set(weights)), len(set(weights)) - 1))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    max_people = 1\n    people_per_boxer = 1\n    for w in weights:\n        if w == 1:\n            max_people *= 2\n            people_per_boxer = max_people\n        elif w == max_people:\n            max_people += 1\n            people_per_boxer += 1\n        else:\n            max_people = 1\n            people_per_boxer = 1\n    return str(people_per_boxer)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a_set = set(a)\n    a_unique = len(a_set)\n    if a_unique == n:\n        return len(a)\n    sorted_a = sorted(a)\n    min_a_i = sorted_a[0]\n    max_a_i = sorted_a[-1]\n    n_change = max_a_i - min_a_i\n    # print(n_change)\n    if n_change <= 1:\n        return min(a_unique, n)\n    min_a_i = sorted_a[0]\n    sorted_a.remove(min_a_i)\n    a_unique -= 1\n    # print(sorted_a)\n    for i in sorted_a:\n        if n_change <= 0:\n            break\n        if i - min_a_i > n_change:\n            # print(i, min_a_i, n_change)\n            n_change = i - min_a_i - 1\n            if n_change == 0:\n                break\n    # print(n_change)\n    return min(n_change, a_unique)\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    n, m = list(map(int, stdin.split()))\n    prefs = []\n    cities = []\n    for i in range(1, n + 1):\n        prefs.append(i)\n    for i in range(1, m + 1):\n        y, p = list(map(int, stdin.split()))\n        cities.append(y * prefs.index(p) + i)\n    return \"\\n\".join(map(str, cities))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    city_id = []\n    for i in range(1, N+1):\n        prefecture, city, year, = list(map(int, stdin.split()))\n        if city == 1:\n            city_id.append(str(prefecture)+str(year)[:6])\n    city_id = sorted(city_id)\n    for j in range(len(city_id)):\n        print(city_id[j][:6]+str(j+1))\nsolution(input())\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = list(map(int, input().split()))\n    cities = set()\n    for prefecture in prefectures:\n        year = input().split()\n        for city in year:\n            cities.add((prefecture, int(city)))\n    cities = sorted(cities)\n    return '\\n'.join(''.join(str(city[1]) for city in cities) for city in cities)\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = []\n    for i in range(n):\n        y, p = map(int, stdin.split())\n        cities.append((p, y, i + 1))\n    cities = sorted(cities, key=lambda x: (x[1], x[2]))\n    ans = [None] * n\n    for i in range(n):\n        ans[i] = str(cities[i][0]).zfill(6)\n    for i in range(n):\n        if ans[i] is None:\n            ans[i] = '0' * (6 - len(ans[i])) + str(cities[i][1])\n    return''.join(ans)\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pref_id = list(map(int, stdin.split()))\n\n    cities = []\n    pref_ids = {}\n\n    for i in range(n):\n        if pref_id[i] not in pref_ids:\n            pref_ids[pref_id[i]] = {i}\n        else:\n            pref_ids[pref_id[i]].add(i)\n\n        if i == 0:\n            pref = pref_id[i]\n        else:\n            if pref_id[i - 1]!= pref_id[i]:\n                pref = pref_id[i]\n            else:\n                pref = pref_id[i] + 1\n\n        cities.append(f\"{pref} {i}\")\n\n    cities.sort()\n    cities = \" \".join(cities)\n\n    return cities\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = list()\n    for i in range(1, n + 1):\n        prefecture, year = map(int, stdin.split())\n        cities.append((i, prefecture, year))\n    cities = sorted(cities, key=lambda x: x[1:])\n    id_numbers = list()\n    for i in range(0, len(cities)):\n        prefecture = cities[i][1]\n        year = cities[i][2]\n        id_number = prefecture*10**6 + year\n        id_numbers.append(id_number)\n    for i in range(0, len(cities)):\n        prefecture = cities[i][1]\n        year = cities[i][2]\n        id_number = prefecture*10**6 + year\n        print(id_number, end=' ')\n    return\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    pref_dict = {}\n    for i in range(n):\n        pref, year = stdin.split()\n        if pref not in pref_dict:\n            pref_dict[pref] = [year]\n        else:\n            pref_dict[pref].append(year)\n    cities = []\n    for pref in pref_dict:\n        pref_cities = pref_dict[pref]\n        for city in range(len(pref_cities)):\n            cities.append(f\"{pref} {pref_cities[city]}\")\n    cities.sort()\n    return \"\\n\".join(cities)"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    data = [[]] * N\n    for i in range(N):\n        data[i] = list(map(int, stdin.split()))\n\n    result = []\n    for i in range(M):\n        temp = list(map(int, stdin.split()))\n        for j in range(len(data)):\n            if data[j][0] == temp[0] and data[j][1] == temp[1]:\n                result.append(str(temp[2]))\n\n    return''.join(result)\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    city = []\n    for i in range(N):\n        P, Y = map(int, stdin.split())\n        if P in city:\n            continue\n        city.append(P)\n    city.sort()\n\n    ID = []\n    for i in range(N):\n        P = city.index(i + 1) + 1\n        # the index of City i\n        for j in range(6):\n            ID.append(str(P))\n        # the index of Year i\n        for j in range(6):\n            ID.append(str(i + 1))\n            ID.append(str(j + 1))\n    ID = ''.join(ID)\n    print(ID)"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prf = list(map(int, stdin.split()))\n    city = [0] * m\n    for i in range(n):\n        city[prf[i] - 1] = i + 1\n    city.sort()\n    return \" \".join(map(str, city))\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # solution without using helper function\n    n, a = stdin.split(' ')\n    n = int(n)\n    a = list(map(int, a.split(' ')))\n    a_s = set(a)\n    i = len(a_s) - 1\n    while i > 0:\n        if a[i - 1] <= 0:\n            i -= 1\n        else:\n            a[i - 1] = (a[i - 1] - 1) % a[i]\n    return str(a[-1])\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alive = list(map(int, stdin.split()))\n    count = 1\n    while len(alive) > 1:\n        alive[0] -= alive[1]\n        if alive[0] <= 0:\n            del alive[0]\n            count += 1\n        else:\n            del alive[1]\n            count += 1\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    monsters = stdin.split(' ')\n    monsters.sort()\n    health = int(monsters[0])\n    for i in range(1, n):\n        if monsters[i] <= health:\n            health -= monsters[i]\n        else:\n            health = 1\n    print(health)\n\nsolution(input())\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2,..., A_N = [int(i) for i in stdin.split()]\n    ans = float(\"inf\")\n    while N > 1:\n        # Check for dead monsters\n        dead = False\n        for i in range(1, N + 1):\n            if A_i >= ans:\n                dead = True\n                break\n        if dead:\n            N -= 1\n            continue\n\n        # Check for monsters alive\n        alive = False\n        for i in range(1, N + 1):\n            if A_i <= A_i + A_i:\n                alive = True\n                break\n        if alive:\n            ans = A_i\n            N -= 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    health_monsters = list(map(int, stdin.split()))\n    cur_health = health_monsters[0]\n    dead_monsters = []\n    for i in range(1, n):\n        if cur_health - health_monsters[i] >= 0:\n            cur_health -= health_monsters[i]\n            dead_monsters.append(i)\n        else:\n            break\n    return str(len(dead_monsters))"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = [int(x) for x in stdin.split()]\n    alive = []\n    killed = []\n    for i in range(1, n+1):\n        if h[i-1] > 0:\n            alive.append(i)\n            killed.append(0)\n    while len(alive) > 1:\n        cur_killed = []\n        for i in alive:\n            ran = randrange(len(killed))\n            if killed[ran] == 0:\n                cur_killed.append(i)\n                killed[ran] = i\n        alive = cur_killed\n    return str(len(alive))"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *alives = map(int, stdin.split())\n    heal = sum(alives)\n    while len(alives) > 1:\n        dmg = sum(alives) - heal\n        alives = list(map(lambda x: x - dmg if x >= dmg else x, alives))\n        heal = sum(alives)\n    return str(alives[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alive_monsters = []\n    for i in range(1, n + 1):\n        alive_monsters.append(int(stdin.split()[i]))\n    for i in range(len(alive_monsters)):\n        if alive_monsters[i] == 1:\n            continue\n        for j in range(i + 1, len(alive_monsters)):\n            alive_monsters[i] -= alive_monsters[j]\n    return alive_monsters[-1]\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n    monsters = [int(i) for i in data[1].split(\" \")]\n    monsters.sort()\n\n    for i in range(1, N):\n        for j in range(i):\n            if monsters[j] < monsters[i]:\n                monsters[i] += monsters[j]\n\n    return str(monsters[N - 1])\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    monsters = list(map(int, stdin.split()))\n\n    sorted_monsters = sorted(monsters, reverse=True)\n    healths = [sorted_monsters[0]]\n    for i in range(1, N):\n        healths.append(healths[-1] - sorted_monsters[i])\n\n    return str(healths[-1])\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    golorp_name = stdin.split(\":\")[1].strip()\n\n    golorp_name = list(golorp_name)\n\n    for i in range(len(golorp_name)):\n        golorp_name[i] = int(golorp_name[i])\n\n    #sort the golorp name\n    golorp_name.sort()\n\n    #calculate the variables in the length of the list\n    max = len(golorp_name)\n    sum = 0\n    for i in range(max):\n        sum = sum + golorp_name[i]\n    sum = sum + max\n    sum = max - sum\n\n    if(sum > 9):\n        return 'false'\n    else:\n        return str(sum)\n\nsolution(\"?(_-_/___*__):-___>__.\\n\")\nsolution(\"?(__-_+_/_____):-__>__,_____<__.\\n\")\nsolution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\")\nsolution(\"?(__+___+__-___):-___>__.\\n\")\n\n\n\n\"\"\"\nFirst let's create a function that can take a valid sequence and do the exact same thing:\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    from operator import mul\n    from itertools import permutations\n\n    def one_to_nine(lst):\n        if lst[0] == '0':\n            return False\n        else:\n            return lst\n\n    stdin = stdin.strip()\n    if len(stdin) == 0:\n        return None\n    else:\n        if re.search(r'^\\d', stdin):\n            # m = re.search(r'^\\d', stdin)\n            # print(m.group(0))\n            # print(len(stdin))\n            # print(len(stdin) - len(m.group(0)))\n            # print(len(stdin))\n            # print(stdin[len(m.group(0)) : ])\n            return one_to_nine(re.findall(r'\\d', stdin))\n        else:\n            m = re.search(r'^[^\\d]+', stdin)\n            # print(m.group(0))\n            return one_to_nine(m.group(0))\n\n\nsolution(\"(_-_/___*__):-___>__.\\n\")"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"?(_-_/___*__):-___>__.\\n\")\n    '0010'\n    >>> solution(\n   ...     \"?(__-_+_/_____):-__>__,_____<__.\\n\")\n    'false'\n    >>> solution(\n   ...     \"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\")\n    '0250341'\n    >>> solution(\n   ...     \"?(__+___+__-___):-___>__.\\n\")\n    '0101'\n    \"\"\"\n    names = set(stdin.splitlines())\n    for name in names:\n        for length in range(min(len(name), 7)):\n            if name[:length] == name[length:].replace(\"_\", \"\"):\n                break\n        else:\n            return \"false\"\n    letters = set(\"\".join(names))\n    for letter in letters:\n        if letter.isalnum() or letter == \"_\" or letter == \" \":\n            continue\n        for name in names:\n            if letter in name:\n                break\n        else:\n            return \"false\"\n    return \"\".join(sorted(letters))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    s = ''.join([x for x in lines])\n    s = s[1:]\n    s = s.replace('__', '0101')\n    s = s.replace('+', '0110')\n    s = s.replace('-', '0111')\n    s = s.replace('(', '100')\n    s = s.replace(')', '101')\n    s = s.replace('_', '110')\n    s = s.replace('.', '111')\n    return s\nprint(solution(input()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for i in range(10):\n        d[str(i)] = i\n    d['0'] = 0\n    d['1'] = 1\n    d['2'] = 2\n    d['3'] = 3\n    d['4'] = 4\n    d['5'] = 5\n    d['6'] = 6\n    d['7'] = 7\n    d['8'] = 8\n    d['9'] = 9\n\n    stdin = stdin.splitlines()\n    res = []\n    for line in stdin:\n        d = {}\n        d[line[1] + line[3]] = line[0]\n        d[line[1] + line[6]] = line[0]\n        d[line[3] + line[6]] = line[0]\n        d[line[2] + line[4]] = line[0]\n        d[line[4] + line[6]] = line[0]\n        d[line[4] + line[7]] = line[0]\n        d[line[5] + line[6]] = line[0]\n        d[line[5] + line[7]] = line[0]\n        d[line[6] + line[7]] = line[0]\n\n        res = []\n        while True:\n            for i in sorted(d.keys()):\n                if i!= \"0\" and i!= \"1\":\n                    break\n                if d[i] not in res:\n                    res.append(d[i])\n                    break\n            else:\n                break\n        if res == [\"0\"]:\n            return \"false\"\n        else:\n            return \"\".join(res)\n\nprint(solution(\"?(_-_/___*__):-___>__.\\n\"\n\"Input\\n\"\n\"?(__-_+_/_____):-__>__,_____<__.\\n\"\n\"Output\\n\"\n\"false\\n\"\n\"Input\\n\"\n\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\"\n\"Output\\n\"\n\"0250341\\n\"\n\"Input\\n\"\n\"?(__+___+__-___):-___>__.\\n\"\n\"Output\\n\"\n\"0101\\n\"))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin.strip()\n    golorp_name = golorp_name.replace(\"(\", \" \").replace(\")\", \" \")\n    golorp_name = golorp_name.split()\n    variables = set()\n    for letter in golorp_name:\n        if letter not in (\"_\", \"-\"):\n            variables.add(letter)\n    variables = sorted(variables)\n    golorp = []\n    for index, letter in enumerate(variables):\n        golorp.append(letter)\n        if index < len(variables) - 1:\n            golorp.append(\"-\")\n    return \"\".join(golorp)\n\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin)\n    #\n    # # base case\n    # if n == 1:\n    #     return \"0\"\n    #\n    # # recursively call with first element removed\n    # left = solution(n - 1)\n    #\n    # # only adding digits to the left\n    # if '0' not in left:\n    #     left = left + \"0\"\n    #\n    # # recursively call with last element removed\n    # right = solution(n - 1)\n    #\n    # # only adding digits to the right\n    # if '0' not in right:\n    #     right = right + \"0\"\n    #\n    # # compare and return the smaller\n    # if int(left) < int(right):\n    #     return left\n    #\n    # return right\n    \"\"\"\n    # Write your code here\n    out = []\n    def search(str):\n        if str == \"\":\n            return 0\n        else:\n            if int(str[:2]) < int(str[2:]):\n                return 2 * search(str[2:]) + 1\n            else:\n                return 2 * search(str[2:]) + 1\n    for i in range(len(stdin)-2):\n        a = int(search(stdin[i]))\n        b = int(search(stdin[i+1]))\n        c = int(search(stdin[i+2]))\n        if (a+b)%2 == 0 and (a+c)%2 == 0:\n            return \"false\"\n        elif (b+c)%2 == 0 and (a+c)%2 == 0:\n            return \"false\"\n        else:\n            return str(a+b+c)\n    return out\n\n\n\nInput\n?(_-_/___*__):-___>__.\n\nOutput\n0010\n\nInput\n?(__-_+_/_____):-__>__,_____<__.\n\nOutput\nfalse\n\nInput\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nOutput\n0250341\n\nInput\n?(__+___+__-___):-___>__.\n\nOutput\n0101\n\"\"\"\n    # def answer(n):\n    #     if n == 1:\n    #         return \"0\"\n    #     left = solution(n - 1)\n    #     print(left)\n    #     if '0' not in left:\n    #         left = left + \"0\"\n    #     right = solution(n - 1)\n    #     if '0' not in right:\n    #         right = right + \"0\"\n    #     return str(int(left) + int(right))\n    #\n    #\n    #\n    #\n    #\n    #\n    # if __name__ == '__main__':\n    #     with open('rosalind_bip.txt', 'r') as file:\n    #         n = int(file.read())\n    #         answer = answer(n)\n    #         print(answer)\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sequence = \"0\"\n    # sequence = \"0\"\n    while True:\n        sequence = \"0\"\n        if is_possible(sequence):\n            print(sequence)\n            break\n        else:\n            sequence = list(sequence)\n            for i in range(len(sequence)):\n                if sequence[i]!= \"0\":\n                    sequence[i] = \"1\"\n                    break\n                elif sequence[i] == \"0\":\n                    sequence[i] = \"2\"\n                    break\n                else:\n                    print(\"false\")\n                    return\n    return\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = stdin.split('-')\n    h = int(h, 16)\n    w = int(w, 16)\n    if h % 2 == 0 and w % 2 == 0:\n        return 'false'\n    if h % 2 == 0 and w % 2 == 1:\n        return '011'\n    if h % 2 == 1 and w % 2 == 1:\n        return 'false'\n    return '01' + '0' * ((w // 2) - 1) + '1' * ((w // 2) - 1)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, k = map(int, stdin[0].split())\n    a = [[int(i) for i in stdin[i]] for i in range(1, n + 1)]\n\n    # print(n, m, k)\n    # print(a)\n\n    # # Brute Force Solution\n    # #\n    # # Time Complexity: O(2^n)\n    # # Space Complexity: O(n)\n    #\n    # paths = 0\n    #\n    # def traverse(i, j, a, visited):\n    #     # print(i, j, a)\n    #     paths += 1\n    #\n    #     # Base Cases\n    #     if i < 0 or j < 0 or i >= len(a) or j >= len(a[0]):\n    #         return False\n    #\n    #     # Check the key\n    #     if a[i][j] == k:\n    #         # print(a)\n    #         return True\n    #\n    #     visited.add((i, j))\n    #     if traverse(i + 1, j, a, visited):\n    #         return True\n    #     if traverse(i, j + 1, a, visited):\n    #         return True\n    #\n    #     visited.remove((i, j))\n    #     return False\n    #\n    #\n    # for i in range(len(a)):\n    #     for j in range(len(a[0])):\n    #         if traverse(i, j, a, set()):\n    #             paths += 1\n\n    # The Following is the 'Optimal' solution (using DFS)\n    #\n    # Time Complexity: O(n * m)\n    # Space Complexity: O(m)\n    #\n    # def traverse(i, j, a, visited):\n    #     visited.add((i, j))\n    #     if a[i][j] == k:\n    #         return True\n    #\n    #     # Return False if we are in the bottom right cell (end of the path)\n    #     if i == len(a) - 1 and j == len(a[0]) - 1:\n    #         return False\n    #\n    #     for x, y in [(1, 0), (0, 1)]:\n    #         i1 = i + x\n    #         j1 = j + y\n    #         if 0 <= i1 < len(a) and 0 <= j1 < len(a[0]) and (i1, j1) not in visited and traverse(i1, j1, a, visited):\n    #             return True\n    #\n    #     return False\n    #\n    #\n    # for i in range(len(a)):\n    #     for j in range(len(a[0])):\n    #         if traverse(i, j, a, set()):\n    #             paths += 1\n    #\n    # print(paths)\n    # return str(paths)\n\n    # # DFS (with memoization)\n    # #\n    # # Time Complexity: O(n * m)\n    # # Space Complexity: O(n * m)\n    #\n    # # Dictionary to hold the visited cells\n    # visited = set()\n    #\n    # # If the cell is not visited then recur for all its adjacent neighbours\n    # def dfs(i, j, a, visited, memo):\n    #     visited.add((i, j))\n    #     if a[i][j] == k:\n    #         return True\n    #\n    #     for x, y in [(1, 0), (0, 1)]:\n    #         i1 = i + x\n    #         j1 = j + y\n    #         if 0 <= i1 < len(a) and 0 <= j1 < len(a[0]) and (i1, j1) not in visited:\n    #             if memo[i1][j1] == -1 or memo[i1][j1] == 0:\n    #                 memo[i1][j1] = memo[i][j] + 1\n    #                 if dfs(i1, j1, a, visited, memo):\n    #                     return True\n    #\n    #     return False\n    #\n    # memo = [[-1 for _ in range(len(a[0]))] for _ in range(len(a))]\n    #\n    # for i in range(len(a)):\n    #     for j in range(len(a[0])):\n    #         if dfs(i, j, a, visited, memo):\n    #             return str(i) + \" \" + str(j)\n    #\n    # print(memo)\n    # print(dfs(0, 0, a, visited, memo))\n    return str(dfs(0, 0, a, set(), {}))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    return str(count_paths(n, m, k))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def calculate(x, y):\n        nonlocal grid, k\n        i, j = x, y\n        if i == 0:\n            if j == 0:\n                return (1 << (m + n)) - 1\n            if j == m:\n                return 1 << (m + n) - 1\n        else:\n            if j == 0:\n                return (1 << (m + n)) - 1\n            if j == m:\n                return 1 << (m + n) - 1\n        return grid[i][j] ^ k\n\n    def dfs(x, y):\n        nonlocal grid\n        nonlocal visited\n        nonlocal count\n        if (x, y) in visited:\n            return\n        count = count + 1\n        visited.add((x, y))\n        for dx, dy in (1, 0), (0, 1), (1, 1):\n            nx, ny = x + dx, y + dy\n            if -1 < nx < n and -1 < ny < m:\n                dfs(nx, ny)\n        visited.remove((x, y))\n\n    visited = set()\n    count = 0\n    dfs(0, 0)\n    print(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        grid.append(row)\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = grid[i][j]\n    a = [[0] + a[i] + [0] for i in range(n)]\n    a = [[0] * (m + 2) for _ in range(n + 2)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] = a[i - 1][j] ^ a[i][j - 1]\n    def dfs(i, j, count, arr):\n        if i == 0 or j == 0 or i == n + 1 or j == m + 1:\n            return count + 1\n        if a[i][j] == k:\n            return count + 1\n        count += 1\n        a[i][j] = k\n        count = dfs(i + 1, j, count, arr)\n        count = dfs(i, j + 1, count, arr)\n        return count\n    return str(dfs(1, 1, 0, a))"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    b = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(m):\n        b[0][i] = 1\n    for i in range(n):\n        b[i][0] = 1\n    for i in range(1, n):\n        for j in range(1, m):\n            b[i][j] = b[i-1][j] ^ b[i][j-1]\n    return str(b[n-1][m-1]^k)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, m, k = stdin.split(\" \")\n    m, k = int(m), int(k)\n\n    def solve(row, col, count, prev):\n        if row == m:\n            if count == k:\n                global cnt\n                cnt += 1\n            return\n        if col == m:\n            return\n\n        solve(row + 1, col, count, prev)\n        solve(row, col + 1, count, prev)\n        solve(row + 1, col + 1, count, prev ^ prev[col])\n\n    cnt = 0\n    solve(0, 0, 0, 0)\n    return str(cnt)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  [n, m, k] = list(map(int, stdin.split()))\n  matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n  # all_paths = []\n  # def get_all_paths(i, j):\n  #   if not (0 <= i <= n - 1 and 0 <= j <= m - 1):\n  #     return\n  #   if i == n - 1 and j == m - 1:\n  #     all_paths.append(i)\n  #     return\n  #   if not i:\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #   elif not j:\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #   else:\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n\n  # for i in range(n):\n  #   for j in range(m):\n  #     if i == 0 and j == 0:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n  #     elif i == 0 and j == 1:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n  #     elif i == 1 and j == 0:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n  #     elif i == 1 and j == 1:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n  #     elif i == 0:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n  #     elif i == 1:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n  #     elif i == 2:\n  #       all_paths.append(i)\n  #       all_paths.append(j)\n\n  # all_paths = []\n  # def get_all_paths(i, j):\n  #   if not (0 <= i <= n - 1 and 0 <= j <= m - 1):\n  #     return\n  #   if i == n - 1 and j == m - 1:\n  #     all_paths.append(i)\n  #     all_paths.append(j)\n  #     return\n  #   if not i:\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #   elif not j:\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #   else:\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i, j + 1)\n  #\n  #     get_all_paths(i + 1, j)\n  #     get_all_paths(i"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(stdin))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split('\\n')\n    n, m, k = map(int, inp[0].split())\n    a = [[int(x) for x in inp[i].split()] for i in range(1, n+1)]\n    return str(paths_xor(a, m, n, k))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if (i, j) == (0, 0):\n                grid[0][0] = k\n            elif (i, j) == (n-1, m-1):\n                grid[n-1][m-1] = k\n            else:\n                grid[i][j] = k\n    sums = []\n    for i in range(n):\n        for j in range(m):\n            xor = 0\n            for k in range(n):\n                for l in range(m):\n                    if (i, j)!= (k, l):\n                        xor ^= grid[k][l]\n            sums.append(xor)\n    return str(sum(sums))\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n    t = t[::-1]\n    # print(t)\n    # d = 2\n    # while n!= 1:\n    #     t = t[:d] + t[d:]\n    #     n -= 1\n    #     d *= -1\n    # print(t)\n    i = n - 1\n    while i > 0:\n        t = t[:i] + t[i + 1:]\n        i -= 1\n    print(t)\n    return t\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str1 = stdin\n    for i in range(n):\n        str1 = str1[::-1]\n    return str1\n    \nsolution(input())"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isdigit():\n        n = int(stdin)\n        if n < 1:\n            raise ValueError('Input should be a positive integer')\n        elif n > 100:\n            raise ValueError('Input should be a positive integer')\n    else:\n        raise ValueError('Input should be a integer')\n\n    t = stdin\n\n    # 1) Find the smallest positive integer $n$ such that $t$ is divisible by $n$\n    for i in range(1, 100):\n        if len(t) % i == 0:\n            n = i\n            break\n\n    # 2) Reverse the first $n$ letters of $t$\n    reversed_t = t[::-1]\n\n    # 3) Reverse the substrings of length $d$ in $reversed_t$\n    for i in range(1, n):\n        new_t = ''\n        for j in range(0, len(reversed_t), i):\n            new_t += reversed_t[j]\n        reversed_t = new_t\n\n    # 4) Revert the substrings of length $1$ in $reversed_t$\n    new_t = ''\n    for i in range(0, len(reversed_t), 1):\n        new_t += reversed_t[i]\n    reversed_t = new_t\n\n    # 5) Join the results\n    return reversed_t\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\nstdin = sys.stdin.read()\nn = int(input())\ns = input()\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while len(s) >= 2:\n        s = s[::-1]\n        if s[0] == s[-1]:\n            s = s[1:-1]\n    return s\n\nInput\n10\nrocesfedoc\n\nOutput\ncodeforces\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nthisisexampletwo\n\nInput\n1\nz\n\nOutput\nz\n'''\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    ans = stdin[::-1]\n    for i in reversed(range(1, n)):\n        rev = ans[:i]\n        j = 0\n        while rev:\n            if rev[j] == \"c\":\n                rev = rev[:j] + \"a\" + rev[j+1:]\n            elif rev[j] == \"o\":\n                rev = rev[:j] + \"i\" + rev[j+1:]\n            elif rev[j] == \"p\":\n                rev = rev[:j] + \"m\" + rev[j+1:]\n            elif rev[j] == \"e\":\n                rev = rev[:j] + \"t\" + rev[j+1:]\n            j += 1\n        ans = rev + ans[i:]\n    return ans\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for d in reversed(range(n,1,-1)):\n        s = s[:d] + s[d:][::-1]\n    return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    for i in range(len(x)):\n        if(x[i]!=''):\n            x[i] = x[i][::-1]\n            break\n    return \"\".join(x)\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    string = stdin\n    n = int(len(string))\n    divs = list(range(n, 1, -1))\n    for div in divs:\n        string = string[::-1]\n        string = string[1:div]\n        string = string[::-1]\n        print(string)\n\nsolution(input())\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    print(a+b)"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    print(int(a) + int(b))\n    return\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    print(int(a) + int(b))\n    return ''"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(map(int, str(a)+str(b))))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    print(int(a) + int(b))\n    return 'Completed'"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    print(int(stdin[0]) + int(stdin[1]))\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gen = interpreter()\n    return gen.get_code(stdin)\n\nclass Interpreter:\n    def get_code(self, stdin: str) -> str:\n        raise NotImplementedError\n\nclass ConsoleInterpreter(Interpreter):\n    def get_code(self, stdin: str) -> str:\n        return stdin\n\nclass BrainfuckInterpreter(Interpreter):\n    def __init__(self):\n        self.memory = []\n        self.memory_cell_id = 30000\n        self.last_bracket_id = 0\n        self.last_command = ''\n\n    def get_code(self, stdin: str) -> str:\n        self.memory = []\n        self.memory_cell_id = 30000\n        self.last_bracket_id = 0\n        self.last_command = ''\n        gen = self.get_generator(stdin)\n        code = gen.get_code()\n        return code\n\n    def get_generator(self, stdin: str) -> Generator:\n        self.last_command = ''\n        for cmd in stdin.splitlines():\n            self.handle_command(cmd)\n            yield self.last_command\n\n    def handle_command(self, cmd: str):\n        cmd, self.last_command = self.get_command_type(cmd)\n        self.handle_command_type(cmd)\n\n    def handle_command_type(self, cmd: str):\n        if cmd == '<':\n            self.memory.append(self.memory_cell_id)\n            self.memory_cell_id -= 1\n        elif cmd == '>':\n            self.memory.append(self.memory_cell_id)\n            self.memory_cell_id += 1\n        elif cmd == '-':\n            self.memory.append(self.memory.pop())\n        elif cmd == '+':\n            self.memory.append(self.memory.pop() + 1)\n        elif cmd == '[':\n            self.last_bracket_id += 1\n        elif cmd == ']':\n            self.last_bracket_id -= 1\n            if self.last_bracket_id == -1:\n                print('++>')\n            if self.last_bracket_id == 0:\n                print('+++>')\n\n    def get_command_type(self, cmd: str) -> tuple:\n        if len(cmd) == 0:\n            raise Exception('No command')\n        command_type = cmd[0]\n        if command_type =='' or command_type == '\\n':\n            return (' ', '')\n        if command_type == ',':\n            return ('<', cmd)\n        if command_type == '.':\n            return ('>', cmd)\n        if command_type == '-' or command_type == '+':\n            return ('-', cmd)\n        if command_type == '[':\n            return ('[', cmd)\n        if command_type == ']':\n            return (']', cmd)\n        if command_type == '<':\n            return ('>', cmd)\n        raise Exception('Unknown command type')"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  code = '++++++++++>'\n  stack = []\n  for c in stdin:\n    if c == '>':\n      if stack:\n        code += stack.pop()\n      code += '+>'\n    elif c == '<':\n      if stack:\n        code += stack.pop()\n      code += '<>'\n    elif c == '+':\n      stack.append('>')\n    elif c == '-':\n      stack.append('<')\n    elif c == '[':\n      stack.append('<')\n      stack.append('-')\n    elif c == ']':\n      stack.append('>')\n      stack.append('+')\n    else:\n      code += c\n  if stack:\n    code += stack.pop()\n  return code\n\n'''"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    generator = get_generator(stdin)\n    while True:\n        try:\n            yield next(generator)\n        except StopIteration:\n            break\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin.strip().split(\"\\n\")\n    code = \"\\n\".join(code)\n    code = compile(code, \"brainfuck.py\", \"exec\")\n    code = eval(code)\n    return str(code)\n\"\"\"\n\n\nclass Command:\n    def __init__(self, cmd, p):\n        self.cmd = cmd\n        self.p = p\n        self.operator = None\n\n    def __repr__(self):\n        return self.cmd + \" \" + str(self.p)\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    code = ''\n    inputs = []\n    outputs = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == '+':\n            code += '++'\n            i += 1\n        elif stdin[i] == '-':\n            code += '--'\n            i += 1\n        elif stdin[i] == '[':\n            code += '['\n            i += 1\n        elif stdin[i] == ']':\n            code += ']'\n            i += 1\n        elif stdin[i] == '<':\n            code += '<'\n            i += 1\n        elif stdin[i] == '>':\n            code += '>'\n            i += 1\n        elif stdin[i] == ',':\n            code += '+'\n            i += 1\n        elif stdin[i] == '.':\n            code += '+'\n            i += 1\n        else:\n            if stdin[i] == '+':\n                code += '+'\n            elif stdin[i] == '-':\n                code += '-'\n            elif stdin[i] == '[':\n                code += '['\n            elif stdin[i] == ']':\n                code += ']'\n            elif stdin[i] == '<':\n                code += '<'\n            elif stdin[i] == '>':\n                code += '>'\n            elif stdin[i] == ',':\n                code += '+'\n            elif stdin[i] == '.':\n                code += '+'\n            else:\n                code += stdin[i]\n                i += 1\n    \n    while i < len(code):\n        if code[i] == '+':\n            inputs.append(outputs.pop())\n        elif code[i] == '-':\n            inputs.append(outputs.pop())\n        elif code[i] == '<':\n            outputs.append(inputs.pop())\n        elif code[i] == '>':\n            outputs.append(inputs.pop())\n        elif code[i] == '[':\n            while code[i]!= ']':\n                inputs.append(outputs.pop())\n        elif code[i] == ']':\n            while code[i]!= '[':\n                inputs.append(outputs.pop())\n        i += 1\n    return ''.join(outputs)\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here!\n    Return your code as a string literal.\n    \"\"\"\n    intcode = stdin.split(\"\\n\")\n    return intcode"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans({\"[<+>-]\": \"++>\"}))\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Brainfuck interpreter\"\"\"\n    memory = bytearray(256)\n    instruction_pointer = 0\n    out = bytearray()\n\n    while True:\n        instruction = stdin[instruction_pointer]\n        if instruction == '>':\n            instruction_pointer += 1\n        elif instruction == '<':\n            instruction_pointer -= 1\n        elif instruction == '+':\n            memory[instruction_pointer] += 1\n        elif instruction == '-':\n            memory[instruction_pointer] -= 1\n        elif instruction == '[':\n            if memory[instruction_pointer] == 0:\n                instruction_pointer = out.pop()\n        elif instruction == ']':\n            if memory[instruction_pointer]!= 0:\n                instruction_pointer = out.pop()\n        elif instruction == ',':\n            out.append(memory[instruction_pointer])\n            memory[instruction_pointer] = 0\n        elif instruction == '.':\n            print(memory[instruction_pointer])\n        elif instruction == ',':\n            memory[instruction_pointer] += 1\n        elif instruction == ',':\n            memory[instruction_pointer] -= 1\n\n        if instruction_pointer == 256:\n            instruction_pointer = 0\n        if len(out) == 50000000:\n            return ''.join(out)\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = n//2\n    arr = stdin.split()\n    result = ''\n    for i in range(q):\n        k = int(arr[i])\n        # result = result + str(result[k-1])\n        result = result + str(int(result)%10)\n    return result"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  q = int(stdin[0])\n  for i in range(q):\n    num = int(stdin[i + 1])\n    if num > 0:\n      print(sum(list(range(1, num + 1))))\n    else:\n      print(num)\n  return\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        k = int(stdin.strip())\n        print(int(num[k - 1]) % 10)\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for q in range(int(stdin)):\n        a, b = stdin.split()\n        n = int(a)\n        if n == 1:\n            answer.append(1)\n        elif n == 2:\n            answer.append(2)\n        else:\n            k = 0\n            while n > 0:\n                n -= 1\n                k += 1\n                if k >= b:\n                    n -= (b * (k // b))\n                    k = k % b\n            answer.append(k)\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    query = stdin.split('\\n')\n    res = []\n    for i in range(len(query)):\n        temp = query[i]\n        num = temp.split()\n        num = int(num[0])\n        start = 1\n        end = num\n        while start <= end:\n            mid = (start + end) // 2\n            cur = query[i]\n            cur = cur.split()\n            cur = int(cur[0])\n            if cur == mid:\n                res.append(cur)\n                break\n            elif cur < mid:\n                end = mid - 1\n            else:\n                start = mid + 1\n    for i in range(len(res)):\n        res[i] = str(res[i])\n    res =''.join(res)\n    return res"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n = int(stdin.split()[i])\n        a = n // 10\n        b = n % 10\n        print(b)"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, stdin.split())))\n    \n    result = []\n    for query in queries:\n        result.append(solution_part1(query))\n        \n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    shichi_number = set()\n    while True:\n        if 5*(3*7+5)+7 == n:\n            shichi_number.add(n)\n            break\n        else:\n            n += 1\n            if n == (3*7+5) or n == (3*5+7) or n == (5*7+3) or n == (5*3+7) or n == (7*3+5) or n == (7*5+3) or n == (3*5+7) or n == (3*7+5):\n                continue\n            else:\n                shichi_number.add(n)\n                continue\n    return str(len(shichi_number))\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_list = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, number_list[0] + 1):\n        if (\n            \"7\" in str(i) and \"5\" in str(i) and \"3\" in str(i)\n        ):  # each of the digits 7, 5 and 3 appears at least once\n            count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    answer = 0\n    n = int(stdin[0])\n    for i in range(1, n+1):\n        temp = []\n        for j in range(1, i):\n            temp.append(j)\n        if 7 not in temp and 5 not in temp and 3 not in temp:\n            answer += 1\n    print(answer)\n    return answer\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 if len(list(filter(lambda x: 7 in x and 5 in x and 3 in x, map(int, stdin.split()))))))"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    # set the value of 99999999 to the highest number\n    highest_number = 99999999\n    # iterate the number until we find the highest number\n    while highest_number >= 1:\n        # iterate the number and check if its a shichi-go-san number\n        # if it's a shichi-go-san number then it is a seven-five-three number\n        if is_seven_five_three(highest_number):\n            print(highest_number)\n            # then we break the while loop\n            break\n        highest_number -= 1\n    # if we break the while loop at this point then we did not find a seven-five-three number\n    return \"No seven-five-three number\"\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number: int = int(stdin)\n    count: int = 0\n    for i in range(1, number+1):\n        if is_shichi_go_san(i):\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result: str = ''\n    all_numbers: list = stdin.split(' ')\n    all_numbers = [int(i) for i in all_numbers]\n    for number in all_numbers:\n        if is_shichi_go_san(number):\n            result +='' + str(number)\n    return result.strip()\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1, int(stdin)+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            result += 1\n    print(result)\n    return result\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    number = []\n    for i in range(1, num + 1):\n        if (str(i) == \"1\" or str(i) == \"7\" or str(i) == \"5\" or str(i) == \"3\"):\n            number.append(str(i))\n        else:\n            continue\n    print(len(number))\n    return str(len(number))"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        a, b, c, d = i, i + 1, i + 2, i + 3\n        if (a * 7 + b * 5 + c * 3 == d):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split('\\n')\n    black_white_count = []\n    for i in range(1, len(tiles) - 1):\n        if tiles[i] == tiles[i - 1] == tiles[i + 1] == '1':\n            black_white_count.append(tiles[i - 1])\n            black_white_count.append(tiles[i + 1])\n    return len(black_white_count)\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    def is_adjacent_black(s: str) -> bool:\n        for i, color in enumerate(s):\n            if color!= '1':\n                return False\n            if i < len(s) - 1:\n                if s[i + 1]!= '1':\n                    return False\n        return True\n\n    def is_adjacent_white(s: str) -> bool:\n        for i, color in enumerate(s):\n            if color!= '0':\n                return False\n            if i < len(s) - 1:\n                if s[i + 1]!= '0':\n                    return False\n        return True\n\n    black_tiles = 0\n    white_tiles = 0\n\n    for i in range(n):\n        if is_adjacent_black(s[i:]):\n            black_tiles += 1\n        if is_adjacent_white(s[i:]):\n            white_tiles += 1\n\n    return f'{black_tiles} {white_tiles}'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        if stdin.count('0') > stdin.count('1'):\n            stdin = '1' + stdin[1:]\n        else:\n            stdin = '0' + stdin[1:]\n    return stdin\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    c = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            if s[i] == '0':\n                s[i] = '1'\n                c += 1\n            else:\n                s[i] = '0'\n                c += 1\n    if c > 0:\n        return str(c)\n    else:\n        return str(1)\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    black = '0'\n    white = '1'\n    N = len(stdin)\n    prev = None\n    count = 0\n    for _ in range(N):\n        if stdin[count]!= prev:\n            if prev == black:\n                if stdin[count] == white:\n                    count += 1\n                else:\n                    count -= 1\n            else:\n                count += 1\n        prev = stdin[count]\n    return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    black_count = n // 2\n    white_count = n // 2\n    count = 0\n    while n >= 1:\n        if n % 2 == 0:\n            if n == 2:\n                count += 1\n            else:\n                if white_count > black_count:\n                    count += white_count - black_count\n                else:\n                    count += black_count - white_count\n        else:\n            if n == 2:\n                count += black_count\n            else:\n                if white_count > black_count:\n                    count += black_count\n                else:\n                    count += white_count\n        white_count = black_count\n        black_count = n // 2\n        n //= 2\n    return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = len(stdin)\n    n: int = 10 ** 5\n\n    for i in range(n):\n        if stdin[i] == \"0\":\n            stdin = stdin[:i] + \"1\" + stdin[i+1:]\n    count: int = 0\n    for i in range(n):\n        if stdin[i]!= \"0\":\n            count += 1\n    return str(count)\n    '''\n    stdin: str = input().strip()\n    count = 0\n    stdin = list(stdin)\n    for i in range(len(stdin)):\n        if stdin[i] == \"1\":\n            count += 1\n    return str(count)\n    '''\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.split()\n    if N == 1:\n        if int(s[0])!= 0:\n            return \"0\"\n        else:\n            return \"1\"\n    else:\n        arr = [int(i) for i in s]\n        index = len(arr) // 2\n        if arr[index] == 1:\n            arr[index] = 0\n            if arr[index+1]!= 0:\n                arr[index+1] = 1\n                arr = arr[index+2:] + arr[:index+2]\n                return str(len(arr))\n            else:\n                arr = arr[index+2:] + arr[:index+2]\n                return str(len(arr))\n        else:\n            arr[index] = 1\n            if arr[index+1]!= 1:\n                arr[index+1] = 0\n                arr = arr[index+2:] + arr[:index+2]\n                return str(len(arr))\n            else:\n                arr = arr[index+2:] + arr[:index+2]\n                return str(len(arr))"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # stdin_lines = stdin.strip().split(\"\\n\")\n    # N = int(stdin_lines[0])\n    # A = stdin_lines[1]\n    N, A = list(map(int, stdin.split(\"\\n\")))\n    # print(N, A)\n\n    for n in A:\n        if n % 2 == 0:\n            if n % 3 == 0 or n % 5 == 0:\n                print(\"APPROVED\")\n                break\n        else:\n            print(\"DENIED\")\n            break\n\nsolution(input())\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    even_numbers = []\n    odd_numbers = []\n    for i in A:\n        if i % 2 == 0:\n            even_numbers.append(i)\n        else:\n            odd_numbers.append(i)\n    for i in range(1, N):\n        if i % 2 == 1:\n            if i in even_numbers:\n                continue\n            else:\n                return \"DENIED\"\n        elif i % 2 == 0:\n            if i in odd_numbers:\n                continue\n            else:\n                return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    What is the answer?\n    Given an array of integers A_1, A_2,..., A_n.\n    If there are m integers in the array, then the m numbers should be divisible by 3 or 5.\n    In the following statement, m is taken to be a number in the range [1, n].\n    Find the number of numbers which are divisible by 3 or 5, and print APPROVED; otherwise, print DENIED.\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for num in arr:\n        if num % 3 == 0 or num % 5 == 0:\n            count += 1\n    if count == n:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    even_numbers = []\n    for e in A[1:]:\n        if int(e) % 2 == 0:\n            even_numbers.append(e)\n    if len(even_numbers) > 0:\n        if all(e % 3 == 0 or e % 5 == 0 for e in even_numbers):\n            return 'APPROVED'\n    return 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def parse(stdin):\n        '''\n        This function is used to parse the given stdin.\n        :param stdin: stdin\n        :return: N, A_1, A_2,..., A_N\n        '''\n        lines = stdin.strip().split('\\n')\n        return lines[0], map(int, lines[1:])\n\n    stdin = stdin.strip()\n    N, numbers = parse(stdin)\n    for number in numbers:\n        if number % 3 == 0 or number % 5 == 0:\n            print('APPROVED')\n            break\n    else:\n        print('DENIED')"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    A_list = list(map(int, stdin[1:]))\n    for i in A_list:\n        if i % 2 == 0:\n            if i % 3 == 0 or i % 5 == 0:\n                print('APPROVED')\n                break\n    else:\n        print('DENIED')\n\nsolution(input())\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if all(i % 3 == 0 or i % 5 == 0 for i in map(int, stdin.split())):\n        return \"APPROVED\"\n    return \"DENIED\"\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    'DENIED'\n    >>> solution('1')\n    'DENIED'\n    >>> solution('5')\n    'APPROVED'\n    >>> solution('2')\n    'APPROVED'\n    >>> solution('5')\n    'APPROVED'\n    \"\"\"\n    N = int(stdin)\n    N_arr = list(map(int, stdin.split()))\n    odd = False\n    for i in N_arr:\n        if i % 2 == 0:\n            odd = True\n            break\n    if odd:\n        return 'APPROVED'\n    else:\n        return 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    for i, x in enumerate(numbers):\n        if x % 2 == 0:\n            if x % 3 == 0 or x % 5 == 0:\n                print(\"APPROVED\")\n            else:\n                print(\"DENIED\")\n            break\n        else:\n            print(\"DENIED\")\n    return \"\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n\n    for n in nums:\n        if n % 2!= 0 and n % 3 == 0 or n % 5 == 0 and n % 3 == 0:\n            print('APPROVED')\n            return 'APPROVED'\n    print('DENIED')\n    return 'DENIED'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(stdin)\n    return \"Yes\" if is_valid(arr) else \"No\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string[::-1]\n    if string[::2] == \"RLD\" or string[::2] == \"DRU\":\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (stdin.count('R') % 2 == 0 and stdin.count('U') % 2 == 0 and stdin.count('D') % 2 == 0) or (stdin.count('L') % 2 == 0 and stdin.count('U') % 2 == 0 and stdin.count('D') % 2 == 0) else \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    if stdin.count('R') % 2 == 0 and stdin.count('U') % 2 == 0 and stdin.count('D') % 2 == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    Yes\n    \"\"\"\n\n    if stdin.count(\"L\")!= len(stdin) // 2:\n        return \"No\"\n    elif stdin.count(\"R\")!= len(stdin) // 2:\n        return \"No\"\n    elif stdin.count(\"U\")!= len(stdin) // 2:\n        return \"No\"\n    elif stdin.count(\"D\")!= len(stdin) // 2:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if string.count('L') % 2 == 1 and string.count('R') % 2 == 1 and string.count('U') % 2 == 1 and string.count('D') % 2 == 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char == \"R\" or char == \"D\":\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return None\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l % 2!= 0:\n        return \"No\"\n    else:\n        list = [stdin[i] for i in range(l) if i % 2!= 0]\n        list1 = list[::2]\n        list2 = list[1::2]\n        for i in range(0, len(list2), 2):\n            if list2[i] == 'R' and list2[i+1] == 'U':\n                list1.append(list2[i+1])\n            if list2[i] == 'L' and list2[i+1] == 'U':\n                list1.append(list2[i+1])\n            if list2[i] == 'R' and list2[i+1] == 'D':\n                list1.append(list2[i+1])\n            if list2[i] == 'L' and list2[i+1] == 'D':\n                list1.append(list2[i+1])\n        if list1 == list2:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(1, len(s) + 1, 2):\n        if s[i - 1] == 'R' and s[i] == 'U' or s[i - 1] == 'U' and s[i] == 'R' or s[i - 1] == 'L' and s[i] == 'D' or s[i - 1] == 'D' and s[i] == 'L':\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n\n\nsolution('RUDLUDR')"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Return 'Yes' if string S is easily playable else return 'No'.\"\"\"\n    lower_case = set('LURD')\n    upper_case = set('RUD')\n    odd_case = set('R')\n    even_case = set('U')\n    \n    for char in stdin:\n        if char in lower_case:\n            if char in upper_case or char in even_case:\n                continue\n            else:\n                return 'No'\n        elif char in upper_case:\n            if char in lower_case or char in odd_case:\n                continue\n            else:\n                return 'No'\n        elif char in even_case:\n            if char in upper_case or char in lower_case:\n                continue\n            else:\n                return 'No'\n        elif char in odd_case:\n            if char in upper_case or char in lower_case:\n                continue\n            else:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A, B, C, D, E = int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]), int(stdin.split()[4]), int(stdin.split()[5])\n    return str(min(7 * N, max(7 * N, N * (min(A, max(C, D)) + 1) + max(A, C) + max(B, D) + min(E, D))))"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    ans = 0\n    while n > 0:\n        if n >= a:\n            ans += 1 + a\n        elif n >= a + b:\n            ans += a + 1 + b\n        elif n >= a + b + c:\n            ans += a + b + 1 + c\n        elif n >= a + b + c + d:\n            ans += a + b + c + 1 + d\n        elif n >= a + b + c + d + e:\n            ans += a + b + c + d + 1 + e\n        n -= 1\n    return str(ans)\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    return str(min(7*(n-1)+n*(e+b+a+d+c), n*(7*(n-1)+e+a+d+c), n*(7*(n-1)+e+b+d+c), n*(7*(n-1)+e+a+b+c)))\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin.split()[1])\n    B = int(stdin.split()[2])\n    C = int(stdin.split()[3])\n    D = int(stdin.split()[4])\n    E = int(stdin.split()[5])\n    return str(7 * (min(N, A, B, C, D, E) + 1))"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B, C, D, E = list(map(int, stdin.split()))\n    d = min(A, B, C, D, E)\n    # print(n, d, A, B, C, D, E)\n    if n > 0:\n        res = (d * (n - 1)) + A\n        return res\n    return 0\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    c = int(stdin.split()[3])\n    d = int(stdin.split()[4])\n    e = int(stdin.split()[5])\n    t = 0\n    while True:\n        if t >= 7:\n            break\n        if t < 6:\n            if t == 0:\n                for i in range(1, a+1):\n                    if i % 2 == 0:\n                        a -= 1\n                        if a == 0:\n                            t += 1\n                            break\n            if t == 1:\n                for i in range(1, b+1):\n                    if i % 2 == 0:\n                        b -= 1\n                        if b == 0:\n                            t += 1\n                            break\n            if t == 2:\n                for i in range(1, c+1):\n                    if i % 2 == 0:\n                        c -= 1\n                        if c == 0:\n                            t += 1\n                            break\n            if t == 3:\n                for i in range(1, d+1):\n                    if i % 2 == 0:\n                        d -= 1\n                        if d == 0:\n                            t += 1\n                            break\n            if t == 4:\n                for i in range(1, e+1):\n                    if i % 2 == 0:\n                        e -= 1\n                        if e == 0:\n                            t += 1\n                            break\n        else:\n            t += 1\n\n    return t\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n    ans = 0\n    while N > 0:\n        for i in range(1, 7):\n            ans += i\n            if ans > 6:\n                break\n        N -= 1\n        ans = 0\n    return str(ans)"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n    count = 1\n    temp = 0\n    while count < N:\n        if temp < N:\n            if A >= 1:\n                count += 1\n                temp += 1\n                A -= 1\n            if B >= 1:\n                count += 1\n                temp += 1\n                B -= 1\n            if C >= 1:\n                count += 1\n                temp += 1\n                C -= 1\n            if D >= 1:\n                count += 1\n                temp += 1\n                D -= 1\n            if E >= 1:\n                count += 1\n                temp += 1\n                E -= 1\n        elif temp == N:\n            if A >= 1:\n                temp += 1\n                A -= 1\n            if B >= 1:\n                temp += 1\n                B -= 1\n            if C >= 1:\n                temp += 1\n                C -= 1\n            if D >= 1:\n                temp += 1\n                D -= 1\n            if E >= 1:\n                temp += 1\n                E -= 1\n    return str(temp)\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = int(stdin.split()[1])\n    B = int(stdin.split()[2])\n    C = int(stdin.split()[3])\n    D = int(stdin.split()[4])\n    E = int(stdin.split()[5])\n    return str(7 * min(N, min(A, min(B, min(C, min(D, E))))))\n\nprint(solution(input()))\n\"\"\"\n\nfrom math import inf\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    return str(2 * (sum(set(range(10)) - set(map(int, stdin[1])))) % (10 ** 9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(2) if N % 2 == 0 else print(1)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(0)\n    else:\n        return str(9)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n+1):\n        if i == 0:\n            ans += 1\n        if i == 9:\n            ans += 1\n        else:\n            if (i % 2!= 0) and (i % 3!= 0) and (i % 5!= 0) and (i % 7!= 0):\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(n):\n        if i == 0 or i == 9:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 0 <= n <= 9:\n        return '2'\n    return '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(2, n):\n        if i == 0:\n            if 0 in map(int, list(str(i))):\n                count += 1\n        if i == 9:\n            if 9 in map(int, list(str(i))):\n                count += 1\n        if count > 0:\n            break\n    return str(count)"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin)\n        #Solution\n        return str(2*(n-1))"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    first = {0,9}\n\n    for i in range(2,N):\n        if i in first:\n            continue\n        else:\n            first.add(i)\n\n    second = {9,0}\n    for i in range(2,N):\n        if i in second:\n            continue\n        else:\n            second.add(i)\n\n    return len(first.intersection(second))"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        print(2)\n    else:\n        print(1)\nsolution(input())\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while i <= x:\n        if x % i == 0:\n            i += 1\n        else:\n            i += 2\n    return i\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    if x < 2:\n        return '0'\n    return 2"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 1:\n        return '-1'\n    \n    sieve = []\n    \n    for i in range(1, n + 1):\n        if i not in sieve:\n            sieve.append(i)\n    \n    for i in range(len(sieve)):\n        if n > sieve[i] * sieve[i]:\n            continue\n        \n        while n % sieve[i] == 0:\n            n /= sieve[i]\n            \n        if sieve[i] > n:\n            break\n    \n    return str(sieve[i])"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(max(2, int(stdin))))\n    \n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n\n    if num == 0:\n        return 0\n    \n    if num == 1:\n        return 1\n    \n    for n in range(3, num + 1):\n        if num % n == 0:\n            return n\n    \n    return num + 1"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x, 2, -1):\n        if all(i % d!= 0 for d in range(2, int(i ** 0.5) + 1)):\n            return str(i)\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = n\n    while True:\n        if n % i == 0:\n            break\n        i += 1\n    return str(i)\n    \n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 2\n    while i*i <= x:\n        if x%i == 0:\n            x = x//i\n            continue\n        i += 1\n    return str(i)\n\nprint(solution(input()))"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    x = int(inputs[0])\n    \n    # Your code goes here\n    \n    # Returning anything else than None i.e. anything other than empty string\n    return '' if input is None else int(input)"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_prime = max(range(1,X+1), key=lambda x: len([num for num in range(1,x) if x%num == 0]))\n    return str(max_prime)"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = stdin.split(\" \")\n    v = list(map(int, v))\n    counter = 0\n    for i in range(0, n - 1, 2):\n        if v[i]!= v[i + 1]:\n            v[i], v[i + 1] = v[i + 1], v[i]\n            counter += 1\n\n    return str(counter)\n\nsolution(\"5\")\nsolution(\"4\")\nsolution(\"1\")\n\"\"\"\n\nfrom itertools import combinations_with_replacement\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    count = 0\n    temp = None\n    sequence = list(map(int, sequence))\n    for i in range(n-1):\n        if sequence[i]!= sequence[i+1]:\n            temp = sequence[i+1]\n            break\n    for j in range(n):\n        if sequence[j] == temp:\n            count += 1\n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v = stdin.split(\"\\n\")\n    v = v[1].split(\" \")\n    a = []\n    for i in v:\n        a.append(int(i))\n    b = []\n    c = []\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    d = {}\n    for i in range(0,len(c)):\n        d[c[i]] = b.count(c[i])\n    for i in d:\n        if d[i] > 1:\n            return \"The sequence \" + str(a) + \" is /\\/\\/\\/ when the following conditions are satisfied: \\n\" \\\n            + str(d) + \"\\n\" + \"Exactly two different numbers appear in the sequence.\"\n    return \"The sequence \" + str(a) + \" is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements: for example, replace the fourth element to make it 3,1,3,1.\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    if len(seq) % 2!= 0:\n        return \"No solution\"\n    counter = 0\n    while True:\n        counter += 1\n        if counter == 10000000:\n            return \"No solution\"\n        for i in range(1, len(seq)-1, 2):\n            if seq[i]!= seq[i+1]:\n                seq[i], seq[i+1] = seq[i+1], seq[i]\n                break\n        if len(seq) == 2:\n            return counter"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n - 1):\n        if v[i] == v[i + 2]:\n            v[i] = v[i] + 1\n            if result < i:\n                result = i\n    return str(result)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return''.join([str(v) for v in stdin.split(' ') if v!= '\\n' and len(v) >= 2])\n    return''.join(sorted(stdin.split('\\n'))).replace('\\n','')\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... n\n   ... v_1 v_2 v_3 v_4\n   ... \"\"\")\n    '1'\n    \"\"\"\n    n = int(stdin.strip())\n    n_max = 2 * n\n    v = list(map(int, stdin.strip().split()))\n    # print(v)\n    # print(v_max)\n\n    cnt = 0\n\n    # print(v)\n    # print(v_max)\n\n    while v_max:\n        v_max = v_max - 1\n        cnt += 1\n        if v.count(v_max) >= 2:\n            # print(cnt)\n            return str(cnt)\n        # print(v_max)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.rstrip().split()\n    n = int(n[0])\n    v = stdin.rstrip().split()\n    v = list(map(int, v))\n    v = sorted(v)\n    min_replace = 2\n    if n % 2!= 0:\n        return str(min_replace)\n    else:\n        # replace the middle element\n        for i in range(n - 2):\n            if v[i] == v[i + 2]:\n                v[i + 1] = v[i]\n                min_replace += 2\n                break\n        # replace the first two element\n        for i in range(n - 3):\n            if v[i] == v[i + 2]:\n                v[i] = v[i + 1]\n                v[i + 1] = v[i + 2]\n                min_replace += 2\n                break\n        return str(min_replace)\n\n\nsolution(\"4 1 3 2\")\nsolution(\"5 2 4 3 2\")\nsolution(\"2 3 1\")\nsolution(\"10 3 7 1\")\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    a = seq[:n]\n    b = seq[n:]\n\n    a_count = {}\n    b_count = {}\n    for i in a:\n        if i in a_count:\n            a_count[i] += 1\n        else:\n            a_count[i] = 1\n\n    for i in b:\n        if i in b_count:\n            b_count[i] += 1\n        else:\n            b_count[i] = 1\n\n    max_count = max(a_count.values())\n    max_key = max(a_count, key=a_count.get)\n\n    if max_count >= max_key:\n        min_count = max_key + 1\n        replaced = []\n        for i in range(n):\n            if a[i] == max_key:\n                replaced.append(b[i])\n        replace_count = max_count - len(replaced)\n        print(replace_count)\n    else:\n        print(0)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n    if n == 2:\n        return str(1)\n    i = 0\n    j = 1\n    while True:\n        if sequence[i] == sequence[j]:\n            i += 1\n            j += 1\n            if i == j:\n                break\n        else:\n            i = 0\n            j = 1\n    return str(j - i)\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = list(map(int, stdin.split()))\n    bamboo_tree = []\n    for _ in range(N):\n        l = int(input())\n        bamboo_tree.append(l)\n    bamboo_tree.sort()\n    d = {}\n    ans = 0\n    for b in bamboo_tree:\n        if b in d:\n            d[b] += 1\n        else:\n            d[b] = 1\n    d_sorted = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    while d_sorted:\n        current_bamboo = d_sorted.pop()\n        l = current_bamboo[0]\n        if l + 1 > A and l + 2 <= B:\n            ans += 10\n            A = l + 1\n            B = l + 2\n        elif l + 1 <= A and l + 2 > B:\n            ans += 10\n            B = l + 2\n        elif l + 1 <= A and l + 2 <= B:\n            ans += 10\n            A = l + 1\n            B = l + 2\n        elif l + 1 >= C and l + 2 > A and l + 2 <= B:\n            ans += 10\n            B = l + 2\n        elif l + 2 >= C and l + 1 <= B and l + 2 <= A:\n            ans += 10\n            A = l + 2\n        elif l + 2 >= C and l + 1 > A and l + 1 <= B:\n            ans += 10\n            A = l + 1\n            B = l + 2\n        elif l + 2 >= C and l + 1 >= A and l + 1 <= B:\n            ans += 10\n            A = l + 1\n            B = l + 2\n        elif l + 2 >= C and l + 1 > A and l + 2 <= B:\n            ans += 10\n            A = l + 2\n            B = l + 2\n        elif l + 1 >= C and l + 2 > A and l + 2 <= B:\n            ans += 10\n            A = l + 2\n            B = l + 2\n    return str(ans)"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = list(map(lambda s: s.split(), stdin.split(\"\\n\")))\n    N, A, B, C = lines[0]\n    l_1, l_2, l_3 = list(map(lambda l: int(l), lines[1:]))\n    return str(int(A) * int(B) + int(C) + min(int(A) * int(B) + int(C) - int(C) - int(D), int(A) * int(B) - int(C) + int(E) + int(F), int(A) * int(B) + int(C) + int(D) - int(E) + int(F) - int(G)))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = stdin.split(' ')\n    N, A, B, C = int(N), int(A), int(B), int(C)\n    l_1, l_2, l_N = [int(x) for x in stdin.split(' ')]\n    if N <= 3 and l_1 <= A and l_2 <= B and l_N <= C:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= B and l_2 <= C and l_N <= A:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= B and l_2 <= C and l_N <= A:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= B and l_N <= C:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= B and l_2 <= C and l_N <= A:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= B and l_N <= C:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= B and l_2 <= A and l_N <= C:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= C and l_2 <= A and l_N <= B:\n        return \"0\"\n    elif N <= 3 and l_1 <= A and l_2 <= C and l_N <= B:"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # define variables\n    n, a, b, c = map(int, stdin.split())\n\n    # check input\n    if n < 3:\n        return '-1'\n\n    # get bamboos\n    bamboo_lengths = []\n    for i in range(n):\n        bamboo_lengths.append(int(stdin.split()[i]))\n\n    # get objective\n    obj_length = int(stdin.split()[-1])\n\n    # first magic\n    if a > 0:\n        bamboo_lengths = [a] + bamboo_lengths\n\n    # first magic\n    if b > 0:\n        bamboo_lengths = bamboo_lengths + [b]\n\n    # second magic\n    if c > 0:\n        for i in range(len(bamboo_lengths)):\n            if bamboo_lengths[i] >= 2:\n                bamboo_lengths[i] = bamboo_lengths[i] - 1\n\n    # second magic\n    if obj_length > 0:\n        for i in range(len(bamboo_lengths)):\n            if bamboo_lengths[i] > 0 and bamboo_lengths[i] >= obj_length:\n                bamboo_lengths[i] = bamboo_lengths[i] - obj_length\n\n    # print result\n    return str(len(bamboo_lengths))"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Convert stdin into a list\n    stdin = stdin.split('\\n')\n    # Get the num of bamboos\n    num_bamboos = int(stdin[0])\n    # Create a list of the length of all bamboos\n    length_bamboos = stdin[1:]\n    # Get the three bamboos\n    bamboo_1 = int(length_bamboos[0])\n    bamboo_2 = int(length_bamboos[1])\n    bamboo_3 = int(length_bamboos[2])\n\n    # Create a list of the lengths of all bamboos\n    length_bamboos = []\n    for i in length_bamboos:\n        length_bamboos.append(int(i))\n\n    # If length of one bamboo is greater than required length, increase the length of this bamboo\n    for i in length_bamboos:\n        if i > bamboo_1:\n            bamboo_1 += 1\n    # If length of two bamboo is greater than required length, increase the length of the bamboos\n    for i in length_bamboos:\n        if i > bamboo_2:\n            bamboo_2 += 1\n    # If length of three bamboo is greater than required length, increase the length of the bamboos\n    for i in length_bamboos:\n        if i > bamboo_3:\n            bamboo_3 += 1\n\n    # Get the length of all three bamboo\n    length_of_all_bamboos = bamboo_1 + bamboo_2 + bamboo_3\n\n    # Get the length of the required three bamboo\n    length_of_required_three_bamboo = num_bamboos - 3\n\n    # Set the value of MP required to obtain a required three bamboo\n    MP_required = length_of_required_three_bamboo * 10\n\n    # Compare MP required and MP consumable\n    if MP_required <= MP_consumed:\n        # If MP consumable, print the length of the required three bamboo\n        print(length_of_required_three_bamboo)\n    else:\n        # If MP consumable, print the length of the required three bamboo\n        print(length_of_required_three_bamboo + MP_consumed)\n\n    # Check if MP consumable\n    if MP_consumed <= MP_required:\n        # If MP consumable, print the length of the required three bamboo\n        print(length_of_required_three_bamboo + MP_consumed)\n    else:\n        # If MP consumable, print the length of the required three bamboo\n        print(length_of_required_three_bamboo + MP_required)\n\nsolution(stdin)"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    N = int(N)\n\n    if N >= 3:\n        for i in range(N):\n            if i == 0:\n                if A >= B >= C:\n                    print(B + C)\n                    return\n            else:\n                if A >= 2 * B and A >= 2 * C:\n                    print(B + 2 * C)\n                    return\n                elif A >= 2 * B and A < 2 * C:\n                    print(B + 2 * C)\n                    return\n                elif A >= 2 * B and A >= 2 * C and C > A:\n                    print(B + 2 * C)\n                    return\n                elif A >= 2 * B and A >= 2 * C and C == A:\n                    print(B + 2 * C)\n                    return\n                elif A < 2 * C and C >= 2 * B:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C >= 2 * B and B > C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C >= 2 * B and B >= C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C >= 2 * B and B == C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and B > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and B == C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and B <= C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B > C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B == C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B == C and C > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B == C and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B < C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B > C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B == C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and B < C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C > A and C > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and B > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and B == A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and B < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C == A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C > A and B > C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C > A and B == C:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C > A and B == C and C > A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C > A and B == C and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C < A:\n                    print(2 * C + 2 * B)\n                    return\n                elif A < 2 * C and C < 2 * B and C == A and C"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    l_1 = A\n    l_2 = 0\n    l_3 = 0\n    bamboo_1 = [0, 0, 0, 0, 0]\n    bamboo_2 = [0, 0, 0, 0, 0]\n    bamboo_3 = [0, 0, 0, 0, 0]\n    bamboo_list = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    while True:\n        if l_1 > l_2 + l_3:\n            bamboo_list[0] += 1\n            l_2 = l_1\n            l_3 = 0\n        elif l_2 > l_3 + l_1:\n            bamboo_list[1] += 1\n            l_3 = l_2\n            l_2 = 0\n        elif l_3 > l_1 + l_2:\n            bamboo_list[2] += 1\n            l_1 = l_3\n            l_2 = l_2\n            l_3 = 0\n        else:\n            break\n    bamboo_list = [x for x in bamboo_list if x > 0]\n    if A == min(bamboo_list):\n        return str(10)\n    elif A > min(bamboo_list):\n        bamboo_1 = [i - 1 for i in bamboo_list]\n        print(bamboo_1)\n        l_1 = min(bamboo_1)\n        bamboo_1 = [i - 1 for i in bamboo_list]\n        bamboo_2 = [i - 2 for i in bamboo_list]\n        print(bamboo_2)\n        l_2 = min(bamboo_2)\n        bamboo_2 = [i - 2 for i in bamboo_list]\n        bamboo_3 = [i - 3 for i in bamboo_list]\n        print(bamboo_3)\n        l_3 = min(bamboo_3)\n    l_1 = max(0, l_1 - 1)\n    l_2 = max(0, l_2 - 2)\n    l_3 = max(0, l_3 - 3)\n    if A > l_1 + l_2 + l_3:\n        return str(10)\n    elif A == l_1 + l_2 + l_3:\n        return str(l_1 + l_2 + l_3)\n    elif A > l_1 + l_2 + l_3:\n        bamboo_1 = [i - 1 for i in bamboo_list]\n        l_1 = max(0, min(bamboo_1) - 1)\n        bamboo_1 = [i - 1 for i in bamboo_list]\n        bamboo_2 = [i - 2 for i in bamboo_list]\n        l_2 = max(0, min(bamboo_2) - 2)\n        bamboo_2 = [i - 2 for i in bamboo_list]\n        bamboo_3 = [i - 3 for i in bamboo_list]\n        l_3 = max(0, min(bamboo_3) - 3)\n        bamboo_3 = [i - 3 for i in bamboo_list]\n        if A > l_1 + l_2 + l_3:\n            return str(10)\n        elif A == l_1 + l_2 + l_3:\n            return str(l_1 + l_2 + l_3)\n        elif A > l_1 + l_2 + l_3:\n            bamboo_1 = [i - 1 for i in bamboo_list]\n            l_1 = max(0, min(bamboo_1) - 1)\n            bamboo_1 = [i - 1 for i in bamboo_list]\n            bamboo_2 = [i - 2 for i in bamboo_list]\n            l_2 = max(0, min(bamboo_2) - 2)\n            bamboo_2 = [i - 2 for i in bamboo_list]\n            bamboo_3 = [i - 3 for i in bamboo_list]\n            l_3 = max(0, min(bamboo_3) - 3)\n            bamboo_3 = [i - 3 for i in bamboo_list]\n            if A > l_1 + l_2 + l_3:\n                return str(10)\n            elif A == l_1 + l_2 + l_3:\n                return str(l_1 + l_2 + l_3)\n            elif A > l_1 + l_2 + l_3:\n                bamboo_1 = [i - 1 for i in bamboo_list]\n                l_1 = max(0, min(bamboo_1) - 1)\n                bamboo_1 = [i - 1 for i in bamboo_list]\n                bamboo_2 = [i - 2 for i in bamboo_list]\n                l_2 = max(0, min(bamboo_2) - 2)\n                bamboo_2 = [i - 2 for i in bamboo_list]\n                bamboo_3 = [i - 3 for i in bamboo_list]\n                l_3 = max(0, min(bamboo_3) - 3)\n                bamboo_3 = [i - 3 for i in bamboo_list]\n                if A > l_1 + l_2 + l_3:\n                    return str(10)\n                elif A == l_1 + l_2 + l_3:\n                    return str(l_1 + l_2 + l_3)\n                elif A > l_1 + l_2 + l_3:\n                    bamboo_1 = [i - 1 for i in bamboo_list]\n                    l_1 = max(0, min(bamboo_1) - 1)\n                    bamboo_1 = [i - 1 for i in bamboo_list]\n                    bamboo_2 = [i - 2 for i in bamboo_list]\n                    l_2 = max(0, min(bamboo_2) - 2)\n                    bamboo_2 = [i - 2 for i in bamboo_list]\n                    bamboo_3 = [i - 3 for i in bamboo_list]\n                    l_3 = max(0, min(bamboo_3) - 3)\n                    bamboo_3 = [i - 3 for i"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_bamboos(n, length):\n        bamboos = []\n        while length:\n            bamboos.append(length)\n            length = length // 2\n        return bamboos\n\n    def get_magics(length):\n        magics = []\n        while length > 0:\n            magics.append(length)\n            length = length // 2\n        return magics\n\n    def calculate_cost(bamboos: list, magics: list):\n        cost = 0\n        for i in range(0, len(bamboos)):\n            cost += magics[i]\n            if len(bamboos) - 1!= i:\n                cost += magics[i] * 2\n        return cost\n\n    def do_magic(bamboos: list, magics: list):\n        for i in range(len(bamboos)):\n            if len(bamboos) - 1!= i:\n                if magics[i] == 1:\n                    bamboos[i] = bamboos[i] + 1\n                    break\n        return bamboos\n\n    costs = []\n    bamboos = get_bamboos(int(stdin.split()[0]), int(stdin.split()[1]))\n    magics = get_magics(int(stdin.split()[2]))\n    costs.append(calculate_cost(bamboos, magics))\n    bamboos = do_magic(bamboos, magics)\n    costs.append(calculate_cost(bamboos, magics))\n    bamboos = do_magic(bamboos, magics)\n    costs.append(calculate_cost(bamboos, magics))\n    return str(min(costs))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def com(l_a: int, l_b: int, l_c: int, a: int, b: int, c: int) -> int:\n        return min(a, b, c) + min(l_a - a, l_b - b, l_c - c) + 10\n\n    def short(l_a: int, l_b: int, l_c: int, a: int, b: int, c: int) -> int:\n        return min(a, b, c) + min(l_a - a, l_b - b, l_c - c)\n\n    def ex(l_a: int, l_b: int, l_c: int, a: int, b: int, c: int) -> int:\n        return min(l_a, l_b, l_c) - 1 + min(a, b, c) - 1\n\n    l_a, l_b, l_c = map(int, stdin.split())\n    if l_a < 2:\n        return \"1\"\n    a = l_a - 1\n    b = l_b\n    c = l_c\n    if l_b < 2:\n        return \"1\"\n    b = l_b - 1\n    c = l_c\n    if l_c < 2:\n        return \"1\"\n    c = l_c - 1\n    if a + b + c <= l_a:\n        return \"1\"\n    if l_a == l_b and l_a == l_c:\n        return str(l_a)\n    if l_a == l_b or l_b == l_c:\n        return str(l_a)\n    if l_a == l_b or l_a == l_c or l_b == l_c:\n        return str(l_a)\n    if l_a >= 3 and l_b >= 3 and l_c >= 3:\n        return str(a + b + c)\n    if a + b + c == l_a:\n        return str(l_a)\n    if a + b + c == l_b:\n        return str(l_b)\n    if a + b + c == l_c:\n        return str(l_c)\n    if a + b + c == l_a + l_b + l_c:\n        return str(l_a + l_b + l_c)\n    if a + b + c == l_a * 3:\n        return str(a * 3)\n    if a + b + c == l_a / 3:\n        return str(l_a / 3)\n    if a + b + c == l_b * 3:\n        return str(l_b * 3)\n    if a + b + c == l_b / 3:\n        return str(l_b / 3)\n    if a + b + c == l_c * 3:\n        return str(l_c * 3)\n    if a + b + c == l_c / 3:\n        return str(l_c / 3)\n    if a + b + c == l_a + l_b + l_c * 3:\n        return str(a + l_b + l_c * 3)\n    if a + b + c == l_a + l_b + l_c / 3:\n        return str(a + l_b + l_c / 3)\n    if a + b + c == l_a + l_b + l_c / 3:\n        return str(a + l_b + l_c / 3)\n    if a + b + c == l_a + l_b + l_c * 3:\n        return str(a + l_b + l_c * 3)\n    if a + b + c == l_a + l_b * 3 + l_c:\n        return str(a + l_b * 3 + l_c)\n    if a + b + c == l_a + l_b / 3 + l_c:\n        return str(a + l_b / 3 + l_c)\n    if a + b + c == l_a + l_b * 3 + l_c / 3:\n        return str(a + l_b * 3 + l_c / 3)\n    if a + b + c == l_a + l_b * 3 + l_c * 3:\n        return str(a + l_b * 3 + l_c * 3)\n    if a + b + c == l_a + l_b / 3 + l_c * 3:\n        return str(a + l_b / 3 + l_c * 3)\n    if a + b + c == l_a + l_b * 3 + l_c * 3:\n        return str(a + l_b * 3 + l_c * 3)\n    if a + b + c == l_a + l_b * 3 + l_c / 3:\n        return str(a + l_b * 3 + l_c / 3)\n    if a + b + c == l_a + l_b / 3 + l_c * 3:\n        return str(a + l_b / 3 + l_c * 3)\n    if a + b + c == l_a + l_b * 3 + l_c / 3:\n        return str(a + l_b * 3 + l_c / 3)\n    if a + b + c == l_a + l_b * 3 + l_c * 3:\n        return str(a + l_b * 3 + l_c * 3)\n    if a + b + c == l_a + l_b / 3 + l_c * 3:\n        return str(a + l_b / 3 + l_c * 3)\n    if a + b + c == l_a + l_b * 3 + l_c / 3:\n        return str(a + l_b * 3 + l_c / 3)\n    if a + b + c == l_a + l_b * 3 + l_c * 3:\n        return str(a + l_b * 3 + l_c * 3)\n    if a + b + c == l_a + l_b / 3 + l_c / 3:\n        return str(a + l_b / 3 + l_c / 3)\n    if a + b + c == l"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [N, A, B, C] = map(int, stdin.split())\n    l_1 = list(map(int, stdin.split()))\n    ans = 0\n    #composition magic\n    for i in range(len(l_1)-2):\n        for j in range(i+1, len(l_1)-1):\n            for k in range(j+1, len(l_1)):\n                bamboo_sum = l_1[i] + l_1[j] + l_1[k]\n                if bamboo_sum == A:\n                    ans += 10\n                    l_1[i] = l_1[i] + 1\n                    l_1[j] = l_1[j] + 1\n                    l_1[k] = l_1[k] + 1\n                elif bamboo_sum == B:\n                    ans += 10\n                    l_1[i] = l_1[i] + 1\n                    l_1[j] = l_1[j] + 1\n                elif bamboo_sum == C:\n                    ans += 10\n                    l_1[i] = l_1[i] + 1\n                    l_1[k] = l_1[k] + 1\n                    l_1[j] = l_1[j] + 1\n    #extension magic\n    for i in range(len(l_1)):\n        l_1[i] = l_1[i] + 1\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    chars: str = stdin.strip()\n    output: str = \"\"\n    for char in sorted(chars):\n        output += char\n    return output\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.split()\n    string = sorted(string)\n    result = \"\".join(string)\n    return result\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    result = []\n    sorted_string = sorted(s[1])\n    for i in range(len(s[1])):\n        result.append(sorted_string[i])\n        sorted_string[i], sorted_string[n-1-i] = sorted_string[n-1-i], sorted_string[i]\n    print(''.join(result))\n    return ''.join(result)\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper()[::-1].replace(chr(ord('A') - 1), '')"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    new_s = \"\"\n    for i, char in enumerate(s):\n        index = ord(char) - ord(\"A\")\n        new_index = (index + int(stdin)) % 26\n        new_s += chr(new_index + ord(\"A\"))\n    return new_s\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return ''.join(sorted(stdin.upper()[N:] + stdin[:N].upper()))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return \"\".join(sorted(stdin))"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    s = list(s)\n    s = list(map(lambda x: chr(ord(x) - n), s))\n    s = ''.join(s)\n    print(s)\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[0]\n    S = stdin.split()[1]\n    if len(N) == 0 or len(S) == 0:\n        return \"\"\n    result = []\n    if N == \"0\":\n        result = list(S)\n        result.sort()\n    else:\n        if N == \"1\":\n            result = list(S)\n            for i in range(len(S)):\n                S = list(S)\n                S.sort()\n                result[i] = S[i]\n            return \"\".join(result)\n        elif N == \"2\":\n            for i in range(len(S)):\n                S = list(S)\n                S.sort()\n                result.append(S[i])\n            return \"\".join(result)\n        elif N == \"3\":\n            for i in range(len(S)):\n                S = list(S)\n                S.sort()\n                result.append(S[i])\n            result.sort()\n            return \"\".join(result)\n        else:\n            for i in range(len(S)):\n                S = list(S)\n                S.sort()\n                result.append(S[i])\n            result.sort()\n            return \"\".join(result)"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_sqrt = int(math.sqrt(n))\n    a = list(map(int, input().split()))\n    b = list(map(int, stdin.split()))\n    r = []\n    for i in range(n):\n        if a[i] == 2:\n            r.append(i + 1)\n    for i in range(len(b) - 1):\n        if b[i] == 2:\n            r.append(i + 1)\n    for i in range(n):\n        if a[i] in b:\n            if b[i] == a[i]:\n                r.append(i + 1)\n    print(*r)\n    return r\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    b = list(map(int, stdin.split()))\n    a = []\n    for i in range(len(b)):\n        if is_prime(b[i]):\n            a.append(b[i])\n        else:\n            for j in range(len(b)):\n                if b[i]!= b[j]:\n                    if is_prime(b[i] * b[j]):\n                        a.append(b[i] * b[j])\n    return str(len(a)) +'' +''.join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1]\n    arr = list(map(int, arr))\n    arr = arr[:n]\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            arr[i] += 1\n    return str(arr).strip('[]')\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1]))\n    primes = []\n    for i in range(1,n+1):\n        if arr[i-1] < 2:\n            continue\n        prime = True\n        for j in range(2,int(arr[i-1])+1):\n            if arr[i-1]%j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(arr[i-1])\n    print(primes)\n    arr.sort()\n    for i in range(len(primes)):\n        arr[i] = primes[i]\n    arr.sort()\n    print(arr)\n    return''.join(map(str,arr))\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1]))\n    a = []\n    for i in range(n):\n        a.append(b[i])\n        a.sort()\n        while a[0] > 2:\n            a.sort()\n            for i in range(1, len(a)):\n                if a[i] % a[0]!= a[i]:\n                    a.insert(i, a[i] // a[0])\n                    break\n            if a[i] % a[0] == a[i]:\n                break\n            a.sort()\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = list(map(int, stdin.strip().split()))\n    a = []\n    while True:\n        a += list(sorted(b))\n        b = list(sorted(b, reverse=True))\n        i = 1\n        while i <= n and a[-i] == b[-i]:\n            i += 1\n        if i <= n:\n            break\n    return''.join(map(str, a[:i]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    moves = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101)\n    ans = []\n    \n    # Part 1\n    while len(b)!= 1:\n        # Part 2\n        # This condition is to be used when we are dealing with the first element.\n        if len(b) == 2:\n            index = b.index(min(b))\n            ans.append(moves[index])\n            b.pop(index)\n            b.append(moves[index])\n            \n        # Part 3\n        else:\n            # If the first element is a prime number, we will add a prime number in the array.\n            if is_prime(b.pop(0)):\n                ans.append(b.pop(0))\n            else:\n                index = b.index(max(b))\n                ans.append(moves[index])\n                b.pop(index)\n                b.append(moves[index])\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    b = list(map(int, stdin.strip().split()[1]))\n    # b = sorted(b)\n    b = list(reversed(b))\n\n    # print(b)\n\n    def p_gcd(a, b):\n        a_min = min(a, b)\n        a_max = max(a, b)\n        for i in range(a_min, a_max+1):\n            if a % i == 0 and b % i == 0:\n                return i\n        return None\n\n    primes = [2]\n    result = []\n    while len(result) < n:\n        current = primes.pop(0)\n        # print(current)\n        while primes and p_gcd(current, primes[-1])!= 1:\n            current = p_gcd(current, primes[-1])\n        if not primes:\n            primes.append(current)\n        else:\n            result.append(current)\n            primes = primes[:len(primes)-1]\n            primes.append(p_gcd(current, primes[-1]))\n    return''.join(map(str, result))"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b = sorted(b)\n    ans = []\n    for i in range(n):\n        if b[i] % 2 == 0:\n            ans.append(2)\n        else:\n            ans.append(max(b[i], b[i] // 2, 2))\n    print(' '.join(map(str, ans)))\n    return\nsolution(input())\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = stdin.split()\n    a = []\n    for i in range(n):\n        a.append(int(b[i]))\n    \n    l = []\n    for i in range(n):\n        p = 0\n        for j in range(n):\n            if (a[j] % i == 0) and (a[j] > 2):\n                p = 1\n                break\n        if (p == 1):\n            l.append(i)\n    \n    l.sort()\n    ans = ''\n    for i in l:\n        ans += str(i) +''\n    return ans"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    score = []\n    for i in range(len(p)):\n        score.append((p[i], i+1))\n    score = sorted(score, key=lambda x:x[0])\n    if k == 0 or k > len(p):\n        return \"\"\n    first_team = score[0:k][::-1]\n    second_team = score[k:]\n    res = []\n    res.append(1)\n    res.append(2)\n    while first_team and second_team:\n        if first_team[0][0] < second_team[0][0]:\n            res.append(1)\n            first_team.pop(0)\n        else:\n            res.append(2)\n            second_team.pop(0)\n    return ''.join(map(str, res))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = 0\n    a.sort()\n    d = {}\n    for i in range(n):\n        d[a[i]] = s\n        s += 1\n    s = 0\n    while s < k:\n        m = k-s\n        if m > n-s:\n            m = n-s\n        for i in range(n-s):\n            if d[a[s]] == m:\n                s += 1\n            elif d[a[s]] < m:\n                d[a[s]] += 1\n                s += 1\n                break\n            else:\n                m -= 1\n    ans = \"1\"*s + \"2\"*(k-s)\n    return ans\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    A = list(map(int, stdin.split()))\n    \n    #print(A)\n    \n    #print(A.index(max(A)), len(A)-A.index(max(A))-1)\n    \n    #print(A.index(max(A))+1)\n    \n    return \"{:0{}b}\".format(A.index(max(A))+1, k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    i = 0\n    j = len(a) - 1\n    team_one = []\n    team_two = []\n    while i <= j:\n        team_one.append(a[i])\n        team_two.append(a[j])\n        i += 1\n        j -= 1\n    #print(team_one, team_two)\n    i = 0\n    j = len(team_one) - 1\n    while i <= j:\n        if team_one[i] > team_two[j]:\n            team_two.append(team_one[i])\n            i += 1\n        else:\n            team_one.append(team_two[j])\n            j -= 1\n    #print(team_one, team_two)\n    if len(team_one) < len(team_two):\n        return ''.join(map(str, team_one))\n    else:\n        return ''.join(map(str, team_two))\n    #return ''.join(map(str, team_one))\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = map(int, stdin.split())\n    skills = list(skills)\n    arr = []\n    for i in range(n):\n        arr.append(i+1)\n    for i in range(n):\n        if i == 0:\n            index = arr.index(max(arr))\n            arr[index] = -1\n        else:\n            index = arr.index(min(arr))\n            arr[index] = -1\n    # print(arr)\n    # print(arr)\n    # print(skills)\n    ans = \"\"\n    while(arr!= []):\n        if skills[arr[0]]!= arr[0]:\n            ans += str(arr[0])\n            arr[0] = skills[arr[0]]\n        else:\n            skills[arr[0]] = -1\n            ans += str(arr[1])\n            arr[1] = skills[arr[1]]\n        arr = arr[2:]\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prog = list(map(int, stdin.split()))\n    def possible(pos):\n        if pos > 0:\n            return not prog[pos - 1] == prog[pos]\n        return False\n    def is_correct(possible):\n        return prog[0] == 1 and prog[1] == 2 and prog[2] == 1 and prog[3] == 2 and prog[4] == 1 and prog[5] == 2\n    def solution(possible):\n        if not possible:\n            return \"0\"\n        if is_correct(possible):\n            return \"1\"\n        return \"2\"\n    def move(possible):\n        if not possible:\n            return possible\n        max_pos = 0\n        for i in range(len(prog) - k + 1):\n            if prog[i] == max(prog[i:i+k]):\n                max_pos = i\n                break\n        possible[max_pos] = False\n        return possible\n    \n    possible = []\n    possible = move(possible)\n    for _ in range(k - 1):\n        possible = move(possible)\n    print(solution(possible))\n    return solution(possible)\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    skills.sort()\n    left = skills[:k]\n    right = skills[k:]\n    first = left.pop(0)\n    second = right.pop(0)\n    if first > second:\n        first, second = second, first\n    first_group = []\n    second_group = []\n    while left or right:\n        if left and skills[left[0]] > second:\n            first_group.append(left.pop(0))\n        else:\n            first_group.append(right.pop(0))\n        if right and skills[right[0]] > first:\n            second_group.append(right.pop(0))\n        else:\n            second_group.append(left.pop(0))\n    return ''.join(str(i) for i in first_group + second_group)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n, k = stdin[0], stdin[1]\n    # print(n, k)\n    a = list(map(int, stdin[2:]))\n    # print(a)\n    # ans = []\n    first = a[:k]\n    second = a[k:]\n    first = sorted(first)\n    second = sorted(second)\n\n    for i in range(n):\n        if i < k:\n            if i == 0:\n                ans.append(first[i])\n            else:\n                ans.append(second[i - 1])\n        else:\n            ans.append(second[i - k])\n    return ''.join(map(str, ans))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 2\\n2 4 5 3 1')\n    '11111'\n    >>> solution('5 1\\n2 1 3 5 4')\n    '22111'\n    >>> solution('7 1\\n7 2 1 3 5 4 6')\n    '1121122'\n    >>> solution('10 1\\n10 10 10 10 10 10 10 10 10 10')\n    '1111111111111'\n    >>> solution('13 1\\n13 13 13 13 13 13 13 13 13 13')\n    '1111111111111'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = sorted(map(int, stdin.split()))\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            if k < 1:\n                k = i\n                break\n            elif i - k < 1:\n                k = i\n                break\n    if k >= 1:\n        return ''.join(map(str, range(2)))\n    return ''.join(map(str, range(1, 2)))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    print(a)\n    if k < 1 or k > n:\n        return \"\"\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        if a[0] == a[1]:\n            return \"11111\"\n        else:\n            return \"22111\"\n\n    ans = \"\"\n    i = j = k\n    while i < n:\n        if k > 1:\n            ans += \"1\"\n            if i < n - k:\n                i += k\n        else:\n            ans += \"2\"\n            if j < n - k:\n                j += k\n    return ans\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 1\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    nums = {0: 1}\n    def cnt(i):\n        if i in nums:\n            return nums[i]\n        cnt = 0\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                if j in nums:\n                    cnt += nums[j]\n                else:\n                    cnt += cnt(j)\n            elif a[i] < a[j]:\n                if j + 1 in nums:\n                    cnt += nums[j + 1]\n                else:\n                    cnt += cnt(j + 1)\n        nums[i] = cnt %998244353\n        return cnt %998244353\n    return cnt(0)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return mod_func(n)\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    x = {a[0]: 0}\n    res = 1\n    for i in range(1, len(a)):\n        if a[i] not in x:\n            x[a[i]] = 1\n            res = (res + x[a[i]]) % 998244353\n        else:\n            x[a[i]] += 1\n            res = (res + x[a[i]]) % 998244353\n    return str(res)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = (a[-1] - a[0]) // 2\n    res = 1\n    for i in range(n):\n        if a[i] - a[i + 1] == m:\n            res += 1\n    return str(res % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    n = len(lst)\n    n_ = n-1\n    count = 0\n    for i in range(n-1):\n        if lst[i] < lst[i+1]:\n            count += n_ - i\n        if lst[i] == lst[i+1] and i > 0 and lst[i]!= lst[i-1]:\n            count += n_ - i\n    return str(count %998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[1]))\n    mod = (10 ** 9 + 7)\n    counter = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] == a[j]:\n                counter += 1\n    return counter % mod\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))[1:]\n    mod = 10**9 + 7\n    s = set()\n    count = 0\n    for i in range(len(a)):\n        if a[i] not in s:\n            s.add(a[i])\n        else:\n            if a[i]!= a[i + 1]:\n                count = count + 1\n                s.add(a[i] + 1)\n    return str(count % mod)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n\n    def check_monotonic(s):\n        if a[s] == a[s + 1]:\n            return True\n        return False\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if check_monotonic(i):\n                cnt += 1\n            if check_monotonic(j):\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def isIncreasing(i: int, j: int, k: int) -> bool:\n        return not (a[i] > a[j] and a[i] > a[k])\n\n    def isDecreasing(i: int, j: int, k: int) -> bool:\n        return not (a[i] < a[j] and a[i] < a[k])\n\n    def isMonotonic(i: int, j: int, k: int) -> bool:\n        return (a[i] > a[j] and a[i] < a[k]) or (a[i] < a[j] and a[i] > a[k])\n\n    a = list(map(int, stdin.split()))\n    for i in range(1, len(a)):\n        if a[i]!= a[i - 1]:\n            return 0\n    if len(a) == 1:\n        return 1\n    cnt = 0\n    for i in range(1, len(a) - 1):\n        if isIncreasing(i - 1, i, i + 1):\n            cnt += 1\n        elif isDecreasing(i - 1, i, i + 1):\n            cnt += 1\n        else:\n            if isMonotonic(i - 1, i, i + 1):\n                cnt += 1\n    return cnt % 998244353\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # given a sequence of integers, remove the smallest number of elements to make it nice\n    # stdin: str\n    # return: str\n    # your code goes here\n    # return solution(input())\n    # from collections import defaultdict\n    # d = defaultdict(list)\n    # for i in input():\n    #     d[i].append(i)\n    # return len(d[min(d.keys())])\n    # return len(list(filter(lambda x: not x % 2, range(1, int(input()) + 1))))\n    # nums = list(map(int, input().split()))\n    # nums_set = set(nums)\n    # for i in nums:\n    #     if i not in nums_set:\n    #         return str(nums.index(i))\n    # return \"Good\"\n\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_num = max(arr)\n    count = 0\n    while n > 0:\n        if n >= max_num:\n            n = max_num - 1\n            count += 1\n        else:\n            n -= max_num\n            count += 1\n            max_num -= 1\n    print(count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    counter = 0\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1] + 1:\n            counter += 1\n    print(counter)\n    return\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    bad = []\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            i += 1\n        else:\n            bad.append(a[i])\n            j = 0\n            while j < n:\n                if j + 1 == n or a[j] + a[j + 1]!= a[i]:\n                    a[i] = 0\n                    a[j] = 0\n                j += 1\n        i += 1\n    bad.sort()\n    bad = bad[::-1]\n    return str(len(bad))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n    prev = 0\n    i = 0\n    while i < n:\n        if sequence[i] == prev:\n            i += 1\n            continue\n        if sequence[i] - prev!= 1:\n            return str(i)\n        prev = sequence[i]\n        i += 1\n    return str(i)\n\nsolution('3 4 7 1 5 4 9')\nsolution('1 2 3 4 5')\nsolution('2 6 9 6 6')\nsolution('3 5 4 3 5')\nsolution('1 2 3 4 5')\nsolution('5 6 8 1 1 6 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1 6 1 1 1"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    #print(a)\n    #print(a[0])\n    for i in range(1, n):\n        #print(i)\n        if a[i]!= 1:\n            a[i] = a[i - 1]\n        else:\n            a[i] = 0\n        print(a)\n    for j in range(n - 1, 0, -1):\n        if a[j]!= 1:\n            a[j] = a[j + 1]\n        else:\n            a[j] = 0\n        print(a)\n    return str(n - sum(a))\n\nsolution(input())\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n = n\n    # a = sorted(map(int, stdin.strip().split(' ')))\n    # a = stdin.split(' ')\n    # a.sort()\n    # print(a)\n\n    # n = 6\n    # a = [4, 7, 1, 5, 4, 9]\n    # a = sorted(a)\n    # print(a)\n\n    a = sorted(list(map(int, stdin.strip().split(' '))))\n    print(a)\n\n    # n = 5\n    # a = [4, 7, 1, 5, 4]\n    # a = sorted(a)\n    # print(a)\n\n    def isgood(n, a):\n        if n == 0:\n            return True\n        for i in range(n):\n            if 2 ** i in a:\n                a.remove(2 ** i)\n            else:\n                return False\n\n        return True\n\n\n    while not isgood(n, a):\n        n = n - 1\n    print(n)\n\n    return n\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = 0\n    while True:\n        tmp = 0\n        if (2 ** d) * (n - d - 1) <= d:\n            break\n        for i in range(1, (2 ** d) + 1):\n            if (2 ** d) * (n - d - 1) + i <= d:\n                tmp = (2 ** d) * (n - d - 1) + i\n                break\n        n -= tmp\n        d += 1\n    return str(tmp)"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_2 = n // 2\n    res = n_2\n    while n > 1:\n        res += 1\n        n //= 2\n    return res\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if all(a[i]%2 == 0 for i in range(n)):\n        print(n)\n    else:\n        remove = 0\n        for i in range(n):\n            if not a[i]%2 == 0:\n                remove += 1\n                for j in range(i, n):\n                    if j == i:\n                        continue\n                    if a[j]%2 == 0:\n                        break\n                else:\n                    print(remove)\n                    return\n        print(remove)\n\nsolution(input())\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nremove = 0\nfor i in range(n):\n    if not a[i]%2 == 0:\n        remove += 1\n        for j in range(i, n):\n            if j == i:\n                continue\n            if a[j]%2 == 0:\n                break\n        else:\n            print(remove)\n            exit(0)\nprint(remove)"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n\n    # print(n, a)\n\n    if n == 0:\n        return str(0)\n    elif n == 1:\n        return str(0)\n    else:\n        # print(a)\n        a.sort()\n        # print(a)\n        # print(len(a))\n        # print(n)\n        if len(a) == 1:\n            return str(0)\n        else:\n            a = set(a)\n            # print(a)\n            # print(a.pop())\n            # print(a)\n            n -= 1\n            ans = 0\n            while n > 0:\n                if n == 1:\n                    return str(0)\n                else:\n                    ans += 1\n                    n -= 1\n            return str(ans)\n\nsolution('6\\n4 7 1 5 4 9')\nsolution('5\\n1 2 3 4 5')\nsolution('1\\n16')\nsolution('4\\n1 1 1 1023')\nsolution('3\\n1 2 3 4')\nsolution('3\\n1 1 1 1023')\nsolution('1\\n16')\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cubes = stdin\n    while len(cubes) > 2:\n        if cubes[0] == cubes[2]:\n            cubes = cubes[1:3]\n        elif cubes[0] == cubes[1]:\n            cubes = cubes[1:3]\n        else:\n            cubes = cubes[2:]\n    return cubes\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    for _ in range(int(input())):\n        r_c = stdin.index(0)\n        b_c = stdin.index(1)\n        if r_c > b_c:\n            r_c, b_c = b_c, r_c\n        stdin[r_c], stdin[b_c] = stdin[b_c], stdin[r_c]\n        del stdin[r_c + 1], stdin[r_c]\n    return ''.join(map(str, stdin))\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    i = n - 1\n    cubes_removed = 0\n    while i >= 0:\n        if stdin[i] == \"1\":\n            if stdin[i - 1] == \"1\" and stdin[i - 2] == \"1\":\n                stdin = stdin[:i - 1] + stdin[i + 1:]\n                i = i - 2\n            else:\n                i = i - 1\n        elif stdin[i] == \"0\":\n            if stdin[i - 1] == \"0\" and stdin[i - 2] == \"0\":\n                stdin = stdin[:i - 1] + stdin[i + 1:]\n                i = i - 2\n            else:\n                i = i - 1\n        cubes_removed += 1\n    return cubes_removed\n\nsolution(stdin)\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    return len(remove_cubes(stdin[0]))\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cube_positions = []\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            cube_positions.append(stdin[i])\n    \n    move_count = 0\n    while move_count < len(cube_positions)-1:\n        #print(cube_positions)\n        left_cube_index = 0\n        right_cube_index = 0\n        for i in range(len(cube_positions)-1):\n            if i % 2 == 0:\n                left_cube_index += 1\n            else:\n                right_cube_index += 1\n        \n        remove_left = cube_positions[left_cube_index]\n        remove_right = cube_positions[right_cube_index]\n        if remove_left == '1' and remove_right == '1':\n            cube_positions.pop(left_cube_index)\n            cube_positions.pop(right_cube_index)\n            move_count += 1\n        else:\n            if remove_left == '1':\n                cube_positions.pop(left_cube_index)\n                move_count += 1\n            if remove_right == '1':\n                cube_positions.pop(right_cube_index)\n                move_count += 1\n\n    return len(cube_positions)"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    i = 0\n    while i < len(S):\n        if S[i] == '0':\n            if i + 1 < len(S):\n                if S[i + 1] == '1':\n                    S = S[:i] + S[i + 2:]\n                    i -= 1\n                    i += 1\n        i += 1\n    return S\n\nsolution('11100')\nsolution('10110')\nsolution('0011')\nsolution('0011')\nsolution('01101')\nsolution('1101')\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    \n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    max_cubes = 0\n    cubes = stdin\n    while cubes:\n        cubes = cubes.replace(\"0\",\"\")\n        cubes = cubes.replace(\"1\",\"\")\n        cubes = cubes.replace(\"0\",\"\")\n        max_cubes = max(max_cubes,len(cubes))\n    return max_cubes"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cubes = stdin\n    while True:\n        red_cube = None\n        blue_cube = None\n        for i in range(len(cubes)-1, -1, -1):\n            if cubes[i] == '0':\n                red_cube = i\n                break\n        for i in range(len(cubes)-1, -1, -1):\n            if cubes[i] == '1':\n                blue_cube = i\n                break\n        if red_cube == None:\n            break\n        elif blue_cube == None:\n            continue\n        else:\n            cubes = cubes[:red_cube] + cubes[blue_cube+1:]\n    return len(cubes)\n\nSample Input 1:\n0011\nSample Output 1:\n4\n\nSample Input 2:\n0000\nSample Output 2:\n1\n'''\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n\n    if sum(L) == sum(R):\n        print(0)\n        return\n    res = 1\n    sum_of_max_from_R = sum(R)\n    for i in range(1, N):\n        res *= i\n        sum_of_max_from_R = max(sum_of_max_from_R, max(R[:i]) + sum(R[i:]))\n    res *= N - sum_of_max_from_R\n    print(res)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    all_good = False\n    for i in range(1, N):\n        if is_good(i, N, M):\n            all_good = True\n            break\n    if all_good:\n        print(N)\n    else:\n        print(N-1)\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L, R = zip(*[iter(map(int, stdin.split()))] * 2)\n    return str(sum(1 for i in range(N + 1) if (min(L) <= i <= max(R))))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    print(l)\n    id_cards = []\n    for i in range(len(l)):\n        id_cards.append(l[i])\n\n    print(id_cards)\n    id_cards.append(id_cards[0])\n    print(id_cards)\n    id_cards.pop(0)\n    print(id_cards)\n    for i in range(len(id_cards)):\n        print(i)\n        for j in range(i+1, len(id_cards)):\n            if id_cards[i] > id_cards[j]:\n                id_cards.pop(i)\n                break\n\n    print(id_cards)\n    return str(len(id_cards))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    gates = []\n    for _ in range(M):\n        gates.append(list(map(int, stdin.split())))\n    n_ID_cards = []\n    n_ID_cards.append(1)\n    for i in range(len(gates)):\n        n_ID_cards.append(n_ID_cards[i] * (len(n_ID_cards) + 1) / 2)\n    for i in range(len(n_ID_cards)):\n        n_ID_cards[i] = n_ID_cards[i] - (n_ID_cards[i - 1] + 1)\n    return str(sum(n_ID_cards))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    gates = list(map(int, stdin.split()))\n\n    l_one = gates[0]\n    r_one = gates[1]\n    l_two = gates[2]\n    r_two = gates[3]\n\n    if (r_one > N or l_one < 1 or r_two > N or l_two < 1):\n        return \"NO\"\n    if (l_one >= N or r_one >= N):\n        return \"NO\"\n    if (l_two >= N or r_two >= N):\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    id_cards = []\n    for _ in range(N):\n        id_cards.append(list(map(int, stdin.split())))\n    return str(solve(id_cards, M))\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split(\" \")\n    N = int(N)\n    M = int(stdin.split(\" \")[1])\n    lst = stdin.split(\" \")[2:]\n    lst = [int(elem) for elem in lst]\n    # Create a list of all possible gates that can be passed if all ID cards are allowed to pass.\n    id_lst = []\n    id_lst.append(lst[0])\n    for i in range(1, N - 1):\n        id_lst.append(lst[i - 1] + lst[i])\n    id_lst.append(lst[-1])\n    # Create a list of all gates that can be passed if some ID cards are allowed to pass.\n    gate_lst = []\n    for i in range(M):\n        gate_lst.append(i + 1)\n    # Create a dictionary that maps the ID cards to their allowed gates.\n    map_lst = {}\n    for i in range(N):\n        if id_lst[i] not in map_lst:\n            map_lst[id_lst[i]] = gate_lst.copy()\n        else:\n            map_lst[id_lst[i]].append(gate_lst.copy())\n    # Create a list of all gates that can be passed if no ID card is allowed to pass.\n    all_gate_lst = []\n    for i in range(M):\n        if len(map_lst[i + 1]) == 0:\n            all_gate_lst.append(i + 1)\n    # Create a dictionary that maps the gates to their allowed ID cards.\n    gate_map = {}\n    for i in range(M):\n        if all_gate_lst[i] not in gate_map:\n            gate_map[all_gate_lst[i]] = []\n        else:\n            gate_map[all_gate_lst[i]].append(i + 1)\n    # Return the number of ID cards that allow us to pass all the gates alone.\n    count = 0\n    for key, value in map_lst.items():\n        if len(value) == 0 and len(gate_map[key]) == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ids = map(int, stdin.split())\n    L = (M - 1) // 2\n    R = M - 1 - L\n    total = 0\n    for l in ids:\n        r = l + R\n        if r >= N:\n            continue\n        total += 1\n        L -= 1\n        R -= 1\n        if L < 0:\n            break\n        while L > 0 and ids[L]!= l + 1:\n            L -= 1\n        while R > 0 and ids[R]!= r - 1:\n            R -= 1\n    return str(total)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a str and returns an int.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.split())\n    l, r = 1, n\n    ans = 0\n    while l <= r:\n        if all(h[i] < h[i + 1] for i in range(n - 1)):\n            ans += 1\n            l = r = r + 1\n        else:\n            r = r - 1\n    return str(ans)"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    return str(minWateringOperations(h))\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *h = list(map(int, stdin.split()))\n    h.sort()\n    p = 1\n    ans = 0\n    for i in range(len(h)):\n        if h[i] < h[i - p]:\n            ans += 1\n        else:\n            p = i\n    return str(ans)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h_arr = list(map(int, stdin.strip().split()))\n    min_water = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            min_water.append((h_arr[i], h_arr[j]))\n    min_water.sort()\n    res = 0\n    for i in range(len(min_water)):\n        if min_water[i][0]!= min_water[i][1]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def watering_operation(start: int, end: int, h: list) -> int:\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # (start,end)\n        # ("
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    flowers = stdin[0]\n    watering_operations = 0\n    watering_height = {}\n    while len(watering_height)!= flowers:\n        for i in range(1, flowers + 1):\n            if i not in watering_height.keys():\n                watering_height[i] = stdin[i]\n            else:\n                if watering_height[i] > stdin[i]:\n                    watering_height[i] = stdin[i]\n                    watering_operations += 1\n    return str(watering_operations)\n\nsolution(\"3 2 2 1\")\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum number of watering operations required to satisfy the condition.\n\n    >>> solution('4\\n1 2 2 1')\n    '2'\n    >>> solution('4\\n1 2 2 1\\n')\n    '2'\n    >>> solution('4\\n1 2 2 1\\n1 1 2 1')\n    '0'\n    >>> solution('4\\n1 2 2 1\\n2 2 3')\n    '1'\n    >>> solution('4\\n1 2 2 1\\n2 3 3')\n    '1'\n    >>> solution('4\\n1 2 2 1\\n3 3 3')\n    '0'\n    >>> solution('4\\n1 2 2 1\\n3 3 3\\n3 2 3')\n    '2'\n    '''\n    h = list(map(int, stdin.split()))\n    ans = 0\n    # Put the h in a min heap\n    h = [(x, i) for i, x in enumerate(h)]\n    heapify(h)\n    # Run until the min heap becomes empty\n    while h:\n        (a, i) = heappop(h)\n        if a <= max(h):\n            ans += 1\n        else:\n            heappush(h, (a + 1, i))\n    return str(ans)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    l,r = 1,N\n    watering = []\n    for i in range(1,N):\n        if h[i-1] < h[i]:\n            watering.append((l,i))\n            h[i] += 1\n        else:\n            l = i+1\n    \n    if h[N-1] == 0:\n        return '0'\n    else:\n        return str(min(x[1] for x in watering))\nsolution(input())\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # Your code here\n    # return your answer\n    return answer"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bus_stops = int(stdin.strip().split()[0])\n    passengers = list(map(int, stdin.strip().split()[1].split()))\n    if len(passengers) == bus_stops:\n        return str(len(set([x for x in passengers if x >= 0])))\n    return str(0)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ways = 0\n    for i in range(len(a)):\n        if w == 0 and i > 0 and a[i]!= a[i-1]:\n            ways += 1\n        elif w!= 0:\n            if w - a[i] >= 0:\n                ways += w - a[i] + 1\n            elif w - a[i] < 0 and i!= 0:\n                ways += 1\n    return str(ways)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    res = 0\n\n    for i in range(1, n):\n        if seq[i] > 0:\n            seq[i] = seq[i] - seq[i - 1]\n        if seq[i] <= 0:\n            seq[i] = 0\n    if seq[0] > 0:\n        seq[0] = seq[0] - seq[1]\n    if seq[0] <= 0:\n        seq[0] = 0\n    # print(seq)\n\n    for i in range(1, n):\n        if seq[i] - seq[i - 1] <= w:\n            res += 1\n    print(res)"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    def knapsack_helper(capacity, max_val):\n        # There is no way to fit a maximum of $w$ passengers on a bus with a capacity equal to $capacity$.\n        if capacity <= 0:\n            return 0\n        if capacity < max_val:\n            # If the capacity is lower than the maximum value of passengers, it cannot be a solution.\n            return 0\n        if a[capacity-1] < max_val:\n            # We cannot fit a maximum of $w$ passengers on the bus with a capacity equal to $capacity$.\n            return 0\n        # We can fit a maximum of $w$ passengers on the bus with a capacity equal to $capacity$.\n        else:\n            # If there is only one person in the bus, we can put him in the bus, since he can only go on the bus.\n            if capacity == 1:\n                return 1\n            # If there are more than one persons in the bus, we need to put them in different buses.\n            # If we only have one person, we need to put him in the bus.\n            elif capacity == w+1:\n                return 1\n            else:\n                return knapsack_helper(capacity-1, max_val) + knapsack_helper(capacity-1, max_val+a[capacity-1])\n    return str(knapsack_helper(w, 0))\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    max_a = w\n    if n == 1:\n        max_a = 0\n    a = list(map(int, stdin.split()))\n    a.sort()\n    tmp = 0\n    i = 1\n    j = 0\n    res = 0\n    while i <= max_a and j < n:\n        tmp += a[j]\n        j += 1\n        if tmp >= w:\n            tmp = 0\n            i += 1\n        if i == max_a:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    mod = 10 ** 9 + 7\n    # In the first case we have to count how many possibilities for the first bus stop.\n    if n == 1:\n        return (a[0] + 1) % mod\n\n    # In the second case we have to count the number of possibilities for all bus stops.\n    if n == 2:\n        # If a bus has a capacity equals to $w$, we can take $w$ passengers in the bus.\n        if w == 1:\n            return sum(a) % mod\n        # If a bus has a capacity equals to $2w$, we can take $2w$ passengers in the bus.\n        if w == 2:\n            return (sum(a) - a[0]) % mod\n        # If a bus has a capacity equals to $3w$, we can take $3w$ passengers in the bus.\n        if w == 3:\n            return (sum(a) - a[0] - a[1]) % mod\n        # If a bus has a capacity equals to $4w$, we can take $4w$ passengers in the bus.\n        if w == 4:\n            return (sum(a) - a[0] - a[1] - a[2]) % mod\n\n    # In the third case we have to count the number of possibilities for all bus stops.\n    if n == 3:\n        # If a bus has a capacity equals to $w$, we can take $w$ passengers in the bus.\n        if w == 1:\n            return (a[0] + 1) % mod\n        # If a bus has a capacity equals to $2w$, we can take $2w$ passengers in the bus.\n        if w == 2:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod\n        # If a bus has a capacity equals to $3w$, we can take $3w$ passengers in the bus.\n        if w == 3:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod\n        # If a bus has a capacity equals to $4w$, we can take $4w$ passengers in the bus.\n        if w == 4:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod + (a[3] + 1) % mod\n\n    # In the fourth case we have to count the number of possibilities for all bus stops.\n    if n == 4:\n        # If a bus has a capacity equals to $w$, we can take $w$ passengers in the bus.\n        if w == 1:\n            return (a[0] + 1) % mod\n        # If a bus has a capacity equals to $2w$, we can take $2w$ passengers in the bus.\n        if w == 2:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod\n        # If a bus has a capacity equals to $3w$, we can take $3w$ passengers in the bus.\n        if w == 3:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod\n        # If a bus has a capacity equals to $4w$, we can take $4w$ passengers in the bus.\n        if w == 4:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod + (a[3] + 1) % mod\n\n    # In the fifth case we have to count the number of possibilities for all bus stops.\n    if n == 5:\n        # If a bus has a capacity equals to $w$, we can take $w$ passengers in the bus.\n        if w == 1:\n            return (a[0] + 1) % mod\n        # If a bus has a capacity equals to $2w$, we can take $2w$ passengers in the bus.\n        if w == 2:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod\n        # If a bus has a capacity equals to $3w$, we can take $3w$ passengers in the bus.\n        if w == 3:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod\n        # If a bus has a capacity equals to $4w$, we can take $4w$ passengers in the bus.\n        if w == 4:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod + (a[3] + 1) % mod\n        # If a bus has a capacity equals to $5w$, we can take $5w$ passengers in the bus.\n        if w == 5:\n            return (a[0] + 1) % mod + (a[1] + 1) % mod + (a[2] + 1) % mod + (a[3] + 1) % mod + (a[4] + 1) % mod\n    return 0\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    w = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    ans = 0\n\n    a.sort()\n    a.append(w)\n    a.insert(0,0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] - a[i] >= 0:\n                ans += 1\n\n    return str(ans)"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 1"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.strip().split()))\n    answer = []\n    for i in range(n):\n        num = lst[i]\n        if i == 0:\n            answer.append(num)\n        elif i % 3 == 1:\n            answer.append(num)\n        else:\n            answer.insert(i//3,num)\n    return''.join(str(i) for i in answer)\n\nsolution(\"6\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"1000000000000000000 3000000000000000000\")\nsolution(\"4000000000000000000\")\nsolution(\"1000000000000000000 3000000000000000000\")\nsolution(\"3000000000000000000 1000000000000000000\")"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x = sorted(x)\n    res = []\n    for i in range(1, len(x)):\n        if x[i] % 3 == 0:\n            x[i] /= 3\n            res.append(str(x[i]))\n        if x[i] % 2 == 0:\n            x[i] *= 2\n            res.append(str(x[i]))\n    return \" \".join(res)\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    a = list(map(int, stdin))\n\n    if n > 100:\n        return 'Too Big'\n\n    if n == 1:\n        return str(a[0])\n\n    a.sort()\n    while a[-1] == a[-2]:\n        a.pop()\n\n    if a[-1] % 3 == 0:\n        a[-1] = a[-1] // 3\n        a.append(a[-1])\n    else:\n        a[-1] = a[-1] // 3\n        a.append(a[-1]*2)\n\n    return str(a[0]) + \" \" + str(a[-1])\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # I didn't use collections.deque because of complex operations, so I made my own.\n    n = int(stdin)\n    seq = map(int, stdin.split())\n    \n    # Can't sort seq, because there are some numbers that aren't divisible by 3 and/or by 2.\n    seq = list(seq)\n    seq.sort()\n    print(seq)\n    return seq"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 8 6 3 12 9''')\n    9 3 6 12 4 8 \n    \"\"\"\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    s.sort()\n    for i in range(n):\n        s.insert(i, s.pop(n-i-1))\n    return''.join(s)"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split(',')))\n    return''.join(map(str, sorted(a)))\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n\n    s.sort()\n    res = \"\"\n\n    for i in range(0, n):\n        res += str(s[i])\n\n    return res\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    arr = []\n    for i in range(len(l)):\n        if l[i] == 1:\n            for j in range(3):\n                if l[i + j] == 1:\n                    arr.append(3*l[i])\n                    break\n        elif l[i] == 2:\n            for j in range(2):\n                if l[i + j] == 2:\n                    arr.append(2*l[i])\n                    break\n    res =''.join(str(x) for x in arr)\n    print(res)\n    return res\n\nsolution(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    y = []\n    for i in range(n):\n        y.append(x[i]*3)\n        y.append(x[i]*2)\n    y.sort()\n    return''.join(map(str, y))"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split(' ')))\n    x.sort()\n    m = 1\n    while m < n:\n        for i in range(n - m):\n            if abs(x[i] - x[i + m]) > 2 ** abs(m):\n                break\n        else:\n            return str(m)\n        m += 1\n    return str(n)\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n\n    def get_d_power(n):\n        d = 1\n        while d < n:\n            d = 2 * d\n        return d\n\n    d = get_d_power(n)\n    max_points = 0\n    max_points_points = []\n    for i in range(n):\n        d_p = 2 ** (d - 2)\n        for j in range(i + 1, n):\n            if abs(x[i] - x[j]) == d_p:\n                max_points += 1\n                max_points_points.append(x[i])\n                max_points_points.append(x[j])\n    return str(max_points) + \" \" + \" \".join(map(str, max_points_points))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    points = sorted(map(int, stdin.strip().split()))\n    return f\"{len(set(points))} {max(points, key=lambda x: abs(x - 2 ** int(math.log(x, 2))))}\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = sorted([int(x) for x in stdin.split()])\n    # print(points)\n    points = sorted([(points[i], points[i + 1]) for i in range(len(points) - 1)])\n    # print(points)\n    # return points\n    ans = 2\n    for _, dist in points:\n        ans *= int(2 ** dist)\n        # print(ans, dist)\n    return str(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n    points.sort()\n    max_points = 0\n    max_points_set = []\n    i = 0\n    while i < len(points):\n        if i > 0 and points[i] == points[i-1]:\n            i += 1\n            continue\n        temp = points[i:i+2]\n        if len(temp) == 2:\n            temp.sort()\n            if abs(temp[0] - temp[1]) == 2**len(temp):\n                max_points += 1\n                max_points_set.append(temp[0])\n                max_points_set.append(temp[1])\n        i += 1\n    return str(max_points) + \" \" + str(max_points_set)[1:-1].replace(\",\", \" \")\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1].split()))\n    points.sort()\n    m = 0\n    k = 0\n    for i in range(n):\n        if k == 0 or k == n - 1:\n            continue\n        if abs(points[i] - points[i + 1]) <= 2 ** (len(str(points[i]))):\n            m += 1\n            k += 1\n    for i in range(n):\n        if abs(points[i] - points[i + 1]) <= 2 ** (len(str(points[i]))):\n            m += 1\n            k += 1\n    return str(m)\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [int(i) for i in stdin.split()]\n    points.sort()\n    max_possible_points = 1\n    possible_points = []\n    for i in range(1, n):\n        if (points[i] - points[i-1])!= 2 ** int(log2(i)) * 2:\n            possible_points = []\n            break\n        elif points[i] - points[i-1] == 2 ** int(log2(i)) * 2:\n            possible_points.append(points[i])\n            max_possible_points = max(max_possible_points, len(possible_points))\n    return str(max_possible_points)\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = stdin.split()\n    a = [int(i) for i in a]\n    b = sorted(set(a))\n    m = len(b)\n    for i in range(len(b)):\n        c = sorted([i for i in range(len(a)) if abs(a[i] - b[i]) == 2 ** int(i)])\n        if len(c) > m:\n            m = len(c)\n            n = sorted(c)\n    return f'{m}\\n{n}'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        str(len(list(filter(lambda x: x % 2 == 0, map(int, stdin.split()))))),\n        ','.join(sorted(map(str, sorted(set(map(int, stdin.split()))))))\n    ])"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    coordinates = list(map(int, stdin.split()[1:]))\n    l = len(coordinates)\n\n    # left to right\n    if l > 1:\n        for i in range(l - 1):\n            if abs(coordinates[i] - coordinates[i + 1]) % 2!= 0:\n                return \"0\"\n\n    # up to down\n    if l > 2:\n        for i in range(l - 2):\n            if abs(coordinates[i] - coordinates[i + 2]) % 2!= 0:\n                return \"0\"\n\n    # diagonal\n    if l > 3:\n        for i in range(l - 3):\n            if abs(coordinates[i] - coordinates[i + 3]) % 2!= 0:\n                return \"0\"\n\n    return str(size) +'' +''.join(map(str, coordinates))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    return str(A + (K // 2) * (A + B))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n\n    a_cookies, b_cookies = 0, 0\n\n    for _ in range(k):\n        if a_cookies >= 1:\n            a_cookies -= 1\n        else:\n            a_cookies += b_cookies\n            a_cookies = 0 if a_cookies == 0 else a_cookies\n\n        if b_cookies >= 1:\n            b_cookies -= 1\n        else:\n            b_cookies += a_cookies\n            b_cookies = 0 if b_cookies == 0 else b_cookies\n\n    return str(a_cookies) + \" \" + str(b_cookies)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    return '%d %d' % (a * k - b * k, a * k)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, K] = stdin.split(\" \")\n    A, B = int(A), int(B)\n    K = int(K)\n\n    takahashi_cookies = A // 2\n    Aoki_cookies = A - takahashi_cookies\n    Aoki_cookies -= 2\n\n    if Aoki_cookies >= 0 and Takahashi_cookies >= 0:\n        print(str(takahashi_cookies) + \" \" + str(Aoki_cookies))\n    else:\n        print(\"0 \" + str(Aoki_cookies) + \" \" + str(Takahashi_cookies))\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    return str(A) +'' + str(B)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split()))\n    res_a, res_b = 0, 0\n    for i in range(K):\n        if A > 0:\n            res_a += 1\n            A -= 1\n        else:\n            if res_b > 0:\n                res_b -= 1\n                res_a -= 1\n            elif res_a > 0:\n                res_a -= 1\n            else:\n                res_a = 0\n    return f'{res_a} {res_b}'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k) = map(int, stdin.split())\n\n    return \"0 %d\\n%d %d\" % ((a - 1) // 2, (a - 1) % 2, (b - 1) // 2)"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, aoki, takahashi = stdin.split(' ')\n    aoki, takahashi = int(aoki), int(takahashi)\n\n    action_count = 1\n    takahashi_cookies = 0\n    aoki_cookies = 0\n\n    while action_count <= aoki and action_count <= takahashi:\n        if action_count % aoki == 0 and action_count % takahashi == 0:\n            break\n        elif action_count % aoki > 0:\n            aoki_cookies += 1\n        elif action_count % takahashi > 0:\n            takahashi_cookies += 1\n\n        action_count += 1\n\n    return str(takahashi_cookies) +'' + str(aoki_cookies)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    A, B, K = stdin.split(' ')\n    A, B, K = int(A), int(B), int(K)\n\n    takahashi_cookies, aoki_cookies = 0, 0\n    for i in range(K):\n        if takahashi_cookies > 0 and aoki_cookies > 0:\n            aoki_cookies -= 1\n            takahashi_cookies -= 1\n        else:\n            if takahashi_cookies > 0:\n                takahashi_cookies -= 1\n            if aoki_cookies > 0:\n                aoki_cookies -= 1\n    return str(takahashi_cookies) +'' + str(aoki_cookies)\n\nprint(solution(\"2 3 3\"))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k) = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n    n = (a + b) / 2\n    if a > b:\n        n -= 1\n    a = 2 * n - a\n    b = 2 * n - b\n    print(n, a, b)\n    return str(n) +'' + str(a) +'' + str(b)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list\n    n = stdin.split(' ')\n    # Convert the list to integers\n    n = list(map(int, n))\n    # Calculate the interest\n    i = n[0]*(1.0+0.01)\n    # Calculate the minimum balance\n    m = i+n[0]\n    # Calculate the maximum balance\n    m = i+n[1]\n    # Calculate the number of years\n    # If the minimum balance < X, it's the first time\n    if m < n[2]:\n        return \"The balance after one year is {} yen.\".format(i)\n    # If the maximum balance > X, it's the first time\n    elif m > n[2]:\n        return \"The balance after one year is {} yen.\".format(i)\n    # If the minimum balance >= X, it's the second time\n    else:\n        return \"The balance after one year is {} yen.\".format(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    # X = int(input())\n    Y = 100\n    n = 0\n    while Y < X:\n        Y += Y * 0.01\n        n += 1\n    return f\"{n} year{'s' if n > 1 else ''} to reach {X} yen\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        x = int(stdin)\n        return str(int(x*1.01**(x//100)) > x)\n    except:\n        print(\"error\")\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    cur = 0\n    while cur < x:\n        cur = cur + (cur * (1 +.01))\n    return str(cur)"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    return str(3 - int((log(X, 1.0001) / 1)))\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    cur_y = 0\n    cur_balance = 0\n    while cur_balance < x:\n        cur_balance += cur_y\n        cur_y = cur_y + 1\n    return str(cur_y)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while (x <= 100000000):\n        x = x * 1.01\n    if (x > 100000000):\n        print(f\"{round((x-100000000)/1000000)}\" )\n    else:\n        print(f\"{round(x/1000000)}\")"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while True:\n        y = x + i * (x * 1.01)\n        if y >= x:\n            break\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    rate = 0.01\n    year = 0\n    while x > 100:\n        x = x * (1 + rate)\n        year += 1\n    return str(year)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    Y = 0\n    while X > Y:\n        X = X * (1 + 1 / 100)\n        Y += 1\n    print(Y)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[0]\n    n = int(line)\n    return str(sum(map(lambda x: sum(map(lambda y: sum(map(lambda z: gcd(x, y, z), range(1, n + 1))), range(1, n + 1))), range(1, n + 1))))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum(\n        sum(\n            sum(\n                max(a, b, c)\n                for c in range(1, K + 1)\n            )\n            for b in range(1, K + 1)\n        )\n        for a in range(1, K + 1)\n    ))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = int(max(a) * 2)\n    b = [[0] * k for i in range(k)]\n    for i in range(k):\n        for j in range(k):\n            b[i][j] = i * j + j\n\n    s = 0\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                s += b[i][k] * b[k][j]\n\n    return s\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 1:\n        return int(stdin.strip()[1])\n    else:\n        return 1\nprint(solution(stdin))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum(reduce(gcd, range(1, K + 1)) for _ in range(K)))"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sum_of_factors = 0\n    for i in range(1, K + 1):\n        for j in range(i, K + 1):\n            for k in range(j, K + 1):\n                if (i % j) == 0 and (j % k) == 0 and (k % i) == 0:\n                    sum_of_factors += 1\n    return str(sum_of_factors)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.strip().split()))\n\n    gcd_nums = []\n    for i in range(1, nums[0] + 1):\n        for j in range(1, nums[0] + 1):\n            for k in range(1, nums[0] + 1):\n                if gcd(i, j, k) == 1:\n                    gcd_nums.append(i + j + k)\n\n    print(sum(gcd_nums))\n    return''.join(map(str, gcd_nums))"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 200:\n        raise ValueError\n    result = 1\n    for i in range(1, k + 1):\n        result += 1\n        for j in range(i + 1, k + 1):\n            result += 1\n            for k in range(j + 1, k + 1):\n                result += 1\n    return result\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\" \")\n    ans = 0\n    for i in range(int(arr[0])):\n        for j in range(i+1, int(arr[0])):\n            for k in range(j+1, int(arr[0])):\n                ans = max(ans, max(int(arr[i]) % max(int(arr[i]), int(arr[j])), int(arr[j]) % max(int(arr[i]), int(arr[j])), int(arr[k]) % max(int(arr[i]), int(arr[j]), int(arr[k]))))\n    return str(ans)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    # GCD = a * b * c\n    # (a,b,c) = (k, k, k)\n    # a = k, b = k, c = k\n    # a + b + c = k\n    # a + b + c - k = 0\n    # a + b + c - k = k * (a + b + c - k)\n    # a + b + c - k = k * (a + b)\n    # a + b + c - k = k * (a + b - k)\n    # a + b + c - k = k * (a + b - k) - k\n    # a + b + c - k = k * (a + b) - k\n    # a + b + c - k = k * (a) - k\n    # a + b + c - k = k * (a - k)\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k)\n    # a + b + c - k = k * (a)\n    # a + b + c - k = k * (a - k)\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k)\n    # a + b + c - k = k * (a - k)\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b + c - k = k * (a - k) - k\n    # a + b +"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_value = 0\n    max_sum = 0\n    mod_table = dict()\n    sum_table = dict()\n    \n    for i in range(1, N + 1):\n        mod_table[i] = i % N\n        sum_table[i] = i\n    \n    mod_table[0] = 0\n    sum_table[0] = 0\n    mod_table[N] = 0\n    sum_table[N] = 0\n    \n    #print(mod_table)\n    #print(sum_table)\n    #print(max_value)\n    \n    while sum_table[max_value]!= 0:\n        max_value = max(mod_table, key=lambda k: mod_table[k])\n        \n        #print(max_value)\n        #print(max_sum)\n        \n        # Find the sums of N's\n        if mod_table[max_value] + sum_table[max_value] <= N:\n            max_sum += max_value\n            mod_table[max_value] = 0\n            sum_table[max_value] = 0\n        \n        # Find the sums of the rest\n        for value in range(1, N + 1):\n            if value!= max_value:\n                if mod_table[max_value] + value <= N:\n                    sum_table[max_value] = max(sum_table[max_value], sum_table[value] + mod_table[value])\n                    mod_table[max_value] = max(mod_table[max_value], sum_table[value] + mod_table[value])\n                    sum_table[value] = 0\n                    mod_table[value] = 0\n                    \n    #print(mod_table)\n    #print(sum_table)\n    #print(max_value)\n    #print(max_sum)\n    return str(max_sum)\n    \ndef"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    data = stdin.split()\n    return str(max(int(x) for x in data))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    nums = list(map(int, lines.pop(0).split()))\n    return str(max(map(lambda x: (x % nums[0]) + (x % nums[1]) + (x % nums[2]), nums)))\nprint(solution(input()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, a = stdin.split()\n    N, a = int(N), list(map(int, a.split()))\n    a.sort()\n    f = map(lambda x: x % a[0] + a[0] * x % a[1] + a[1] * x % a[2], range(1, N))\n    return str(max(f))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    max_value = 0\n    num_list = []\n    for i in range(num):\n        num_list.append(int(stdin.split()[i]))\n    for i in range(num):\n        if max_value < num_list[i]:\n            max_value = num_list[i]\n    return str(max_value)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(' ')))\n    n = stdin.pop(0)\n\n    m = 1\n    factors = stdin\n    while n > 1:\n        m *= n\n        n -= 1\n    factors.append(m)\n\n    res = 0\n    max_val = 0\n    while factors:\n        curr_val = 0\n        factors.pop()\n        # print(factors)\n        while factors:\n            # print(factors)\n            curr_val += factors.pop()\n        if curr_val > max_val:\n            max_val = curr_val\n    return str(max_val)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_nums = list(map(int, stdin.split()))\n    max_val = 0\n    for i in range(N):\n        max_val = max(max_val, max(a_nums[i] % a_nums[j] for j in range(i + 1)))\n    return str(max_val)"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    max_val = max(nums)\n    # 10\n    return str(max_val)"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    return str(max([sum(a[i] % a[i + 1] for i in range(input_n - 1))]))\n    \n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = list(map(int, stdin.split(\" \")))\n    ans = float(\"-inf\")\n    for i in range(len(nums)):\n        nums[i] %= nums[i + 1]\n        ans = max(ans, nums[i])\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dice_rolls = stdin.split()\n    dice_rolls = {dice_rolls[i]: int(dice_rolls[i+1]) for i in range(0, len(dice_rolls), 2)}\n    for i in range(1, len(dice_rolls)-1):\n        if dice_rolls[i] == dice_rolls[i+1]:\n            if dice_rolls[i+1] == dice_rolls[i+2]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dice1 = list(map(int, stdin.split()))\n    dice2 = list(map(int, stdin.split()))\n\n    for i in range(n-2):\n        if dice1[i] == dice1[i+1] and dice1[i+1] == dice1[i+2]:\n            return \"Yes\"\n        elif dice2[i] == dice2[i+1] and dice2[i+1] == dice2[i+2]:\n            return \"Yes\"\n        else:\n            continue\n\n    return \"No\"\n\n\nprint(solution(input()))\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    doublets = 0\n    rolling = True\n    for _ in range(int(stdin.strip())):\n        if rolling:\n            if stdin.strip().split()[0] == stdin.strip().split()[2]:\n                doublets += 1\n            else:\n                rolling = False\n        else:\n            if stdin.strip().split()[1] == stdin.strip().split()[3]:\n                doublets += 1\n            else:\n                rolling = True\n    if doublets >= 3:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_trials, dice_dim = [int(i) for i in stdin.split()]\n    dice_1 = sorted([int(i) for i in stdin.split()[1:]])\n    dice_2 = sorted([int(i) for i in stdin.split()[2:]])\n    counter = 1\n    for i in range(1, dice_dim):\n        if dice_1[i] == dice_1[i-1] and dice_1[i] == dice_2[i-1]:\n            counter += 1\n            if counter >= 3:\n                return 'Yes'\n        else:\n            counter = 1\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = []\n    for line in stdin.split(\"\\n\"):\n        if len(line.strip()) == 0:\n            break\n        input_data.append(list(map(int, line.split())))\n    N = input_data.pop(0)\n    doublets = 0\n    for i in range(N):\n        d1 = input_data[i][0]\n        d2 = input_data[i][1]\n        if d1 == d2:\n            doublets += 1\n            if doublets >= 3:\n                return \"Yes\"\n        else:\n            doublets = 0\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    dice = [int(x) for x in stdin.strip().split(' ')]\n    cur_dice = dice[0]\n    cur_count = 0\n    prev_count = 0\n    for i in range(1, N):\n        dice_a = dice[i]\n        dice_b = dice[i-1]\n        if dice_a == dice_b:\n            cur_count += 1\n            prev_count = cur_count\n        else:\n            cur_count = 0\n        if cur_count >= 3:\n            return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D_1, D_2 = map(int, stdin.strip().split())\n    doubles = 0\n    for i in range(1, N):\n        if D_1 == D_2:\n            doubles = doubles + 1\n        else:\n            doubles = 0\n        D_1 = D_2\n        D_2 = D_1\n    if doubles >= 3:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin or len(stdin) % 2:\n        return \"No\"\n\n    n, last_dice_1, last_dice_2 = list(map(int, stdin.split()))\n    doublets = 0\n\n    for _ in range(n):\n        current_dice_1, current_dice_2 = list(map(int, input().split()))\n        if last_dice_1 == current_dice_1 and last_dice_2 == current_dice_2:\n            doublets += 1\n        last_dice_1, last_dice_2 = current_dice_1, current_dice_2\n\n    return \"Yes\" if doublets >= 3 else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.rstrip().split()\n    N = int(inp[0])\n    count_doublets = 0\n    for i in range(N):\n        first, second = int(inp[2 * i + 1]), int(inp[2 * i + 2])\n        if first == second:\n            count_doublets += 1\n    if count_doublets >= 3:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d1, d2 = map(int, stdin.split())\n    count = 0\n    for i in range(1, n):\n        if d1 == d2 and d1 == d2:\n            count += 1\n        d1 = d2\n        d2 = stdin.split()[i]\n    return \"Yes\" if count >= 3 else \"No\"\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for x in stdin.split():\n        print(1 if int(x) > int(1) else 0)\n    return 0\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(int(stdin) * (int(stdin) + 1) / 2))\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    What is the area of a circle with radius r?\n    \"\"\"\n    return str(2*(int(stdin))*int(stdin))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    if radius < 1:\n        raise Exception('Invalid radius')\n    return str(round(radius * radius * 3.1415926))"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(4 * math.pi * radius**2)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(4 * r * r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    r = int(inp[0])\n    return str(4 * (r ** 2))\n\nprint(solution(input('Please enter a number: ')))\n\n\"\"\"\n\n######################################################################################################################\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(radius * radius > 2 * radius * 1)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r > 1:\n        return str(4 * r)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if can_draw_polygon(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_sides = list(map(int, stdin.split()))\n    max_side = max(N_sides)\n    for i in range(N - 1):\n        if max_side < sum(N_sides[:i + 1]) < max_side + 1:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if all([i < j for i, j in zip(stdin.split(), map(int, stdin.split()[1:]))]) else \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    for _ in range(N):\n        input_list = list(map(int, stdin.split()))\n        L = max(input_list)\n        ans = 'Yes' if sum(input_list) < L else 'No'\n        print(ans)\n    return ans\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    l = list(map(int, stdin.strip().split()))\n    if sum(l) == N*max(l):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(tuple_of_nums):\n        a, b, c = tuple_of_nums\n        return c >= a + b\n    n = int(stdin.strip())\n    l = sorted([int(x) for x in stdin.strip().split()], reverse=True)\n    if l[-1] <= l[-2]:\n        return 'No'\n    while len(l) > 2:\n        if not is_valid((l[0], l[1], l[2])):\n            return 'No'\n        l = l[3:]\n    return 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    if n!= len(l) or n < 3 or max(l) > sum(l[:-1]) or min(l) > sum(l[:-1]):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    return 'Yes' if n == 1 and max(l) < sum(l) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '4\\n3 8 5 1'\n    N, L = map(int, stdin.split())\n    Ls = sorted(list(map(int, stdin.split())))\n\n    for i in range(1, N):\n        if Ls[i] < Ls[0] + Ls[i - 1]:\n            return 'Yes'\n    return 'No'\n    '''\n\n    N = int(stdin)\n    Ls = sorted(list(map(int, stdin.split())))\n    for i in range(1, N):\n        if Ls[i] < Ls[0] + Ls[i - 1]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    longest = max([int(i) for i in stdin.split()])\n    if n < 4 or longest > sum(sorted(stdin.split())):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7\n   ... 3 2\n   ... 1 7\n   ... ''')\n    '702'\n    >>> solution('''3 4\n   ... 3 2\n   ... 0 0\n   ... 3 2\n   ... ''')\n    '-1'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    integer_string = \"\"\n\n    for i in range(1, N + 1):\n        if i <= M:\n            integer_string += str(i) + str(stdin.strip().split()[i - 1])\n        else:\n            break\n\n    if int(integer_string) > 0:\n        return integer_string\n    return \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7\n   ... 3 2\n   ... 1 7\n   ... ''')\n    '702'\n    >>> solution('''0 3\n   ... 1 7\n   ... 3 2\n   ... 1 7\n   ... ''')\n    '-1'\n    >>> solution('''3 3\n   ... 1 7\n   ... 3 2\n   ... 1 7\n   ... ''')\n    '702'\n    \"\"\"\n    N, M = list(map(int, stdin.split()))\n    if N == 0 or M == 0:\n        return -1\n    min_num = -1\n    for i in range(N):\n        s = int(stdin.split()[i])\n        if s == 0:\n            return \"-1\"\n        num = 0\n        while s > 0:\n            d = s % 10\n            if d < 0:\n                d = d * -1\n            num = num * 10 + d\n            s = s // 10\n        if num <= min_num:\n            min_num = num\n    return str(min_num)\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    \n    smallest = n * 10 ** (m - 1)\n    ans = -1\n    for i in range(1, n + 1):\n        digit = i\n        while digit:\n            if digit > 10:\n                digit = digit // 10\n            if digit == s[i - 1]:\n                if digit < smallest:\n                    smallest = digit\n                digit = 0\n            else:\n                digit = digit - 1\n        if smallest!= -1:\n            ans = smallest\n            break\n    if ans == -1:\n        return '-1'\n    else:\n        return str(ans)\n\nsolution('3 3\\n1 7\\n3 2')\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(x) for x in stdin.split())\n    N = int(N)\n    M = int(M)\n    s_dict = {x: 1 for x in range(1, N + 1)}\n    for i in range(1, M + 1):\n        s_dict[i] = i\n    for i in range(1, N + 1):\n        c = str(i)\n        n = int(c)\n        for j in range(len(c)):\n            s_dict[i] = max(s_dict[i], s_dict[n] * s_dict[j])\n    return str(s_dict[1]) + \" \" + str(s_dict[N])\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s = stdin.split()\n    if len(s)!= N:\n        raise ValueError(\"Invalid Input\")\n    else:\n        for i in range(M):\n            if int(s[i]) > 9 or int(s[i]) < 1 or len(s[i])!= 1:\n                raise ValueError(\"Invalid Input\")\n        l = sorted([int(i) for i in s], reverse=True)\n        if l[0] == 1:\n            return -1\n        return \"\".join(str(i) for i in l)\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    for s in range(1, N+1):\n        for c in range(1, N+1):\n            s_str = str(s)\n            c_str = str(c)\n            if len(s_str) == N and len(c_str) == N and s_str in s_str and c_str in c_str:\n                s_str = list(s_str)\n                c_str = list(c_str)\n                s_str.sort(reverse=True)\n                c_str.sort(reverse=True)\n                for i in range(0, N):\n                    if s_str[i] > c_str[i]:\n                        break\n                if s_str[i] == c_str[i]:\n                    continue\n                elif s_str[i] < c_str[i]:\n                    return s_str[i] * 10 + c_str[i]\n                else:\n                    return -1\n    return -1"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s_1, c_1 = map(int, stdin.split())\n    s_2, c_2 = map(int, stdin.split())\n    s_3, c_3 = map(int, stdin.split())\n\n    if n == 1:\n        if s_1 == c_1:\n            return str(c_1 * 10 ** (m - 1) + c_2)\n        if s_2 == c_2:\n            return str(c_2 * 10 ** (m - 1) + c_1)\n        if s_3 == c_3:\n            return str(c_3 * 10 ** (m - 1) + c_2)\n    else:\n        if s_1 == c_1:\n            return str(c_1 * 10 ** (m - 1) + c_2)\n        if s_2 == c_2:\n            return str(c_2 * 10 ** (m - 1) + c_1)\n        if s_3 == c_3:\n            return str(c_3 * 10 ** (m - 1) + c_2)\n    return \"No\""
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    smallest = -1\n    for i in range(m):\n        s, c = map(int, stdin.split())\n        if c < s:\n            smallest = -1\n            break\n        if c == s:\n            if n - len(str(c)) >= 2:\n                if smallest == -1:\n                    smallest = c\n                else:\n                    smallest = -1\n                    break\n            else:\n                smallest = -1\n                break\n    if smallest == -1:\n        return '-1'\n    else:\n        return str(smallest)\n\nsolution('3 3')"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[0])\n    m = int(stdin[1])\n    largest = 0\n    for i in range(m):\n        s = stdin[i + 1]\n        c = int(s[i])\n        if c == 9:\n            return \"-1\"\n        if largest < c:\n            largest = c\n    return str(largest)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for i in range(m):\n        s, c = map(int, stdin.split())\n        s = str(s)\n        if all(c >= x for x in map(int, s)):\n            return s\n    return -1\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k = stdin.split()\n    n,k = int(n),int(k)\n    return str(sum([1,n-1,n*2,n*3]))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(sum(1 for i in range(N,0,-1) if (i*(i+1))%K == 0))"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(x) for x in stdin.split())\n    ans = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            c = N - a - b\n            if a * a + b * b == c * c and a % K == 0 and b % K == 0 and c % K == 0:\n                ans += 1\n    print(ans)\nsolution(input())\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,K=stdin.split(' ')\n    N=int(N)\n    K=int(K)\n    # b's time complexity is O(n^2), a's is O(n^2)\n    \n    res=0\n    for b in range(1,N+1):\n        for a in range(b+1,N+1):\n            for c in range(b+1,N+1):\n                if a+b+c>N and a+b+c%K==0 and c+a==a+b:\n                    res+=1\n    print(res)\n\nsolution(input())"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(int(((N * (N + 1)) // 2) - ((N - 1) * (N - 2) // 2)))\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1, int(stdin)):\n        a = i\n        b = a + i\n        c = b + i\n        if a % 2 == 0 and b % 2 == 0 and c % 2 == 0 and a + b + c == i * i and b + c + a == i * i and c + a + b == i * i:\n            result += 1\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    a = 0\n    b = 0\n    c = 0\n    for i in range(1,N+1):\n        a = a + i\n        if a % K == 0:\n            print(str(a) + \" \" + str(b) + \" \" + str(c))\n            a = 0\n            b = 0\n            c = 0\n        b = b + i\n        if b % K == 0:\n            print(str(a) + \" \" + str(b) + \" \" + str(c))\n            a = 0\n            b = 0\n            c = 0\n        c = c + i\n        if c % K == 0:\n            print(str(a) + \" \" + str(b) + \" \" + str(c))\n            a = 0\n            b = 0\n            c = 0\n\nsolution(input())\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(1 for i, j, k in combinations(range(1, n + 1), 3) if i + j + k == k * k))"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,K=map(int,stdin.split())\n    return str(sum(1 for i in range(N+1) if i%K!=0 and i%3!=0))"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(1 for i in range(n + 1)\n                   if i * (k // 2) * (i - 1) // 2 <= n\n                   if i * (k // 2) * (i - 1) // 2 > n\n                   if (i - 1) * (k // 2) * (i - 2) // 2 <= n\n                   if (i - 1) * (k // 2) * (i - 2) // 2 > n\n                   if (i - 2) * (k // 2) * (i - 3) // 2 <= n\n                   if (i - 2) * (k // 2) * (i - 3) // 2 > n\n                   if (i - 3) * (k // 2) * (i - 4) // 2 <= n\n                   if (i - 3) * (k // 2) * (i - 4) // 2 > n)"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    \"\"\"\n    N = int(stdin)\n    if N == 0:\n        return '0'\n    elif N == 1:\n        return '1'\n    else:\n        S = ''\n        while N!= 0:\n            if N % -2!= 0:\n                S = '1' + S\n            else:\n                S = '0' + S\n            N //= -2\n        return S\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    base = []\n    result = []\n    while number:\n        number, digit = divmod(number, -2)\n        base.append(str(digit))\n    for i, x in enumerate(base):\n        if x == '1':\n            result.append(base[i])\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result[::-1])\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = \"\"\n    while N:\n        s += str(N%2)\n        N //= 2\n    return s[::-1]\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 0:\n        return '0'\n    elif num < 0:\n        return str(-int(str(num * (-2))[1:]))\n    else:\n        return str(int(str(num) + str(num * (-2))[1:]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    base2 = stdin\n    for i in range(len(base2)):\n        if base2[i] == '1':\n            base2 = base2[:i] + '0' + base2[i+1:]\n        elif base2[i] == '0':\n            base2 = base2[:i] + '1' + base2[i+1:]\n    return base2\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    binary = format(n, \"b\")\n    s = \"\"\n    if binary[0] == \"0\":\n        s += \"1\"\n    if binary[0]!= \"0\":\n        s = binary[0] + s\n    for i in range(1, len(binary)):\n        if binary[i] == \"0\":\n            if binary[i-1] == \"1\":\n                s += \"0\"\n            else:\n                s += \"1\"\n        else:\n            s += \"1\"\n    return s\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = ''\n    while n > 0:\n        if n % 2 == 1:\n            s += '1'\n        else:\n            s += '0'\n        n //= 2\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    answer = ''\n    while x!= 0:\n        x = x * -2\n        if x > 0:\n            answer = '1' + answer\n        else:\n            answer = '0' + answer\n        i += 1\n    return answer"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    while n > 0:\n        if n % 2 == 1:\n            result = \"1\" + result\n        else:\n            result = \"0\" + result\n        n //= -2\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    base_2_representation = \"\"\n    while int(n)!= 0:\n        if int(n) % -2 == 1:\n            base_2_representation = \"1\" + base_2_representation\n        else:\n            base_2_representation = \"0\" + base_2_representation\n        n = int(n) // -2\n    return base_2_representation\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = '2 5'\n    # stdin = '4 9'\n    # stdin = '2 4'\n    # stdin = '1 5'\n    # stdin = '3 5'\n    stdin_list = list(map(int, stdin.split(' ')))\n\n    N = stdin_list[0]\n    M = stdin_list[1]\n\n    # H = [7, 10, 10, 9]\n    H = stdin_list[2:]\n    H = sorted(H, reverse=True)\n\n    result = 0\n    for i in range(0, N):\n        if H[i] + result <= M:\n            result += H[i]\n        else:\n            break\n\n    if result >= M:\n        result = '{} {}'.format(result, 'YES')\n    else:\n        result = '{} {}'.format(result, 'NO')\n    return result\n\nsolution(stdin)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    max_money = 10**9\n    min_money = 0\n\n    for i in range(N):\n        money = A[i] * max_money\n        if money >= M:\n            return str(money - M)\n        min_money = min(min_money, money)\n\n    return str(max(min_money, max_money))\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    store_info = {}\n    # store_info = {1: (4, 9), 2: (2, 4), 3: (3, 7), 4: (2, 9)}\n    for i in range(1, n+1):\n        store_info[i] = list(map(int, stdin.strip().split()))\n    max_per_store = {}\n    for i in range(1, n+1):\n        max_per_store[i] = max(store_info[i])\n    ret = max(max_per_store.values())\n    # print(ret)\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j == i:\n                continue\n            if ret <= max_per_store[j]:\n                # print(max_per_store[j])\n                ret = max(ret, max_per_store[j] + store_info[i][1])\n            else:\n                # print(max_per_store[j])\n                ret = max(ret, store_info[i][1])\n    return str(ret)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    # print(stdin_list)\n    N, M = map(int, stdin_list[0].split())\n    a_list = list(map(int, stdin_list[1].split()))\n    b_list = list(map(int, stdin_list[2].split()))\n    # print(a_list)\n    # print(b_list)\n    for i in range(len(a_list)):\n        a_list[i] = a_list[i] * 1000\n        b_list[i] = b_list[i] * 1000\n    # print(a_list)\n    # print(b_list)\n    a_list.sort()\n    b_list.sort()\n    # print(a_list)\n    # print(b_list)\n    b_takahashi = 0\n    b_takahashi_list = []\n    for i in range(len(a_list)):\n        if a_list[i] <= b_list[i]:\n            b_takahashi += b_list[i]\n            b_takahashi_list.append(b_list[i])\n    b_takahashi_list.sort()\n    # print(b_takahashi_list)\n    if len(b_takahashi_list) >= M:\n        return b_takahashi\n    else:\n        return (M - len(b_takahashi_list)) * b_takahashi + sum(b_takahashi_list)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    A_list = list(map(int, input_list[1].split()))\n    B_list = list(map(int, input_list[2].split()))\n    # lis = [[[0, 0] for _ in range(N)] for _ in range(M)]\n    lis = [[0 for _ in range(N)] for _ in range(M)]\n    for i in range(N):\n        lis[0][i] = A_list[i]\n\n    for i in range(1, M):\n        for j in range(N):\n            lis[i][j] = max(lis[i - 1][j], lis[i - 1][j - A_list[j]] + B_list[i - 1])\n    return str(lis[-1][-1])\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, M = list(map(int, stdin[0].split(\" \")))\n    stores = list(map(int, stdin[1].split(\" \")))\n\n    money = sum([B * A for A, B in zip(stores, stores[1:])])\n\n    if money >= M:\n        return str(money - M)\n    return str(M - money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    N, M = map(int, stdin.split(' '))\n    a_list = list(map(int, stdin.split(' ')))\n    a_list = sorted(a_list, reverse=True)\n    print(a_list)\n    b_list = []\n    for i in range(0, N):\n        b_list.append(a_list[i] * M)\n    print(b_list)\n    b_list = sorted(b_list, reverse=True)\n    print(b_list)\n    min_money = None\n    for i in range(0, N):\n        if b_list[i] >= M:\n            min_money = b_list[i]\n        else:\n            break\n    return str(min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N, M = int(N), int(M)\n    A = list(map(int, stdin.split()))\n    B = []\n    for i in range(1, N):\n        for j in range(i):\n            B.append(A[i] - A[j])\n    # print(B)\n    B = sorted(B)\n    print(B)\n    B.reverse()\n    print(B)\n    sum_ = 0\n    for i in range(M):\n        sum_ += min(B)\n        B.remove(min(B))\n    print(sum_)\n    return sum_"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(\" \")))\n    A = list(map(int, stdin.split(\" \")))\n    B = []\n    cnt = 0\n    min_yen = 1\n    for i in range(N):\n        B.append(i+1)\n        cnt += min(A[i], M)\n        if cnt > min_yen:\n            cnt = min_yen\n    return str(cnt)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prices = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split()))\n        prices.append(a * b)\n    prices.sort()\n    print(prices)\n    result = 0\n    for i in range(len(prices)):\n        if prices[i] <= m:\n            result += prices[i]\n            m -= prices[i]\n        else:\n            result += m\n            break\n    return str(result)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_arr = stdin.split(\" \")\n    h_arr = list(map(int, h_arr))\n\n    max_moves = 0\n\n    i = 0\n    while i < N-1:\n        if h_arr[i] < h_arr[i+1]:\n            moves = h_arr[i+1] - h_arr[i]\n            i += 1\n        else:\n            i += 1\n        max_moves = max(max_moves, moves)\n    return str(max_moves)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    nums = [int(x) for x in stdin.split()[1:]]\n\n    # list of heights of the squares, so that we can pick the next square to land on\n    heights = [nums[0]]\n\n    # max height of any square is the height of the first square plus the max height of all squares from the left\n    # of it, until the leftmost element in the list\n    max_height = nums[0] + max(nums[1:])\n\n    # initialise the result to be empty and increment the count by 1\n    result = 1\n\n    for i in range(1, N):\n        # the height of the next square is the sum of its height and height of all squares from the left\n        # of it till the leftmost square\n        max_height = max_height + nums[i]\n\n        # check if the next square's height is higher than max height so far, if so, increment the result\n        # by 1\n        if max_height > heights[-1]:\n            result += 1\n\n        heights.append(max_height)\n\n    return result\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin.pop(0))\n    h = list(map(int, stdin.pop(0).split()))\n    max_move = 1\n    for i in range(N):\n        if max_move < h[i]:\n            max_move = h[i]\n            continue\n        elif max_move > h[i]:\n            max_move -= h[i]\n            continue\n        else:\n            max_move = h[i]\n            continue\n    return str(max_move)"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = len(stdin.split())\n    print(n)\n    for i in range(n-1):\n        if N == 1:\n            break\n        h = list(map(int, stdin.split()))\n        print(h)\n        if h[i] <= h[i+1]:\n            N -= 1\n    return str(N)\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    height = list(map(int, stdin.split()[1]))\n    count = 0\n    i = 1\n    j = 0\n    while i < len(height):\n        while j < len(height) and height[j] >= height[i]:\n            count += 1\n            j += 1\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = [int(x) for x in stdin.split()]\n    dp = []\n    for i in range(n):\n        dp.append([1] * n)\n    dp[0][1] = h[0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = h[i] + dp[i - 1][j]\n            elif j == i:\n                dp[i][j] = max(dp[i - 1][j - 1], h[i] + dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j], h[i] + dp[i - 1][j])\n    return str(dp[n - 1][n - 1])\n\nprint(solution(input()))"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 10 4 8 7 3\n   ... ''')\n    '2'\n    \"\"\"\n    N = int(stdin.strip())\n    H = list(map(int, stdin.strip().split()))\n\n    height = 0\n    count = 1\n    for i in range(1, N):\n        if height <= H[i]:\n            height = H[i]\n            count += 1\n        else:\n            break\n    return str(count)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *Hs = list(map(int, stdin.split()))\n    max_count = 0\n    i = 0\n    while i < len(Hs):\n        max_count = max(max_count, sum(Hs[i:]) + (len(Hs) - i))\n        i += 1\n    return str(max_count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    #x = int(a[0])\n    #y = int(a[1])\n    x = int(a[0])\n    y = int(a[1])\n    print(x//2)\n    return \n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n    if K < max(arr):\n        return '0'\n    result = K\n    for i in range(1, max(arr) + 1):\n        if i in arr:\n            result += 1\n        else:\n            result -= 1\n    return str(result)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    if n >= k:\n        res = n\n    for i in range(n - 1):\n        if a[i] == a[i + 1] and a[i]!= 0:\n            if k == 1:\n                res = i + 1\n            else:\n                res = i + 2\n                break\n    print(res)\n\nsolution(input())\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    count = 0\n    for i in range(k):\n        count += d.get(2, 0) * 2\n        if count >= k:\n            break\n    print(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, k, *a = map(int, stdin.split())\n    poss_count = 0\n    curr = []\n    curr_count = 0\n    for num in a:\n        if not curr:\n            curr.append(num)\n            curr_count += 1\n        elif curr[-1] == num:\n            curr.append(num)\n        elif num % 2 == 0:\n            curr.append(num)\n            curr_count += 1\n        else:\n            curr.pop()\n            curr.append(num)\n        poss_count = max(curr_count, poss_count)\n        curr_count = 0\n    return poss_count\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code should return a single integer \u2014 the minimum number of operations needed to obtain at least 3 equal integers in the array.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    from bisect import bisect_left\n    l = a[:]\n    a.sort()\n    r = 0\n    indexes = []\n    for i in range(len(l)):\n        if l[i]!= a[i]:\n            r = i\n            indexes.append(a[i])\n            break\n    if r == 0:\n        return 0\n    if k < len(indexes) and k <= r:\n        return k\n    ans = k\n    for i in range(len(indexes)-1):\n        l = bisect_left(indexes, indexes[i]+indexes[i+1])\n        ans += k-l\n    return ans"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n, k = map(int, input.split())\n    a = list(map(int, input.split()))\n    count = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            count += 1\n        a[i] = a[i]//2\n        if a[i] == 0:\n            count += 1\n    if count >= k:\n        return str(0)\n    return str(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if min(a) <= k:\n        return 0\n    elif min(a) > k:\n        return 1\n    else:\n        count = 0\n        a.sort()\n        for i in range(len(a)):\n            if k == a[i]:\n                break\n            elif k > a[i]:\n                count += 1\n        return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, k = int(a[0]), int(a[1])\n    a = list(map(int, a[2].split()))\n    m = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] == a[j]:\n                m += 1\n                a[i] = int(a[i] / 2)\n                a[j] = int(a[j] / 2)\n    return str(m)"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n\n    for i in range(len(a)):\n        count += 1\n\n        if a[i] > 0:\n            a[i] = a[i] // 2\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = sorted(map(int, stdin.split()))\n    left = 0\n    right = len(a) - 1\n    while right > left:\n        mid = (left + right) // 2\n        if (a[mid] == 1):\n            left = mid + 1\n        elif (a[mid] == 2):\n            right = mid - 1\n        else:\n            return mid + 1\n    return mid + 1"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_ = [0] * n\n    max_ = [0] * n\n    a = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if min_[i] == 0:\n            min_[i] = a[i]\n        else:\n            min_[i] = min(min_[i], a[i])\n\n    for i in range(n):\n        if max_[i] == 0:\n            max_[i] = a[i]\n        else:\n            max_[i] = max(max_[i], a[i])\n\n    while k > 0:\n        for i in range(n):\n            if min_[i] < max_[i]:\n                min_[i] += 1\n                if max_[i] == a[i]:\n                    max_[i] = a[i] - 1\n                else:\n                    max_[i] = max(max_[i], a[i] - 1)\n                k -= 1\n                if k == 0:\n                    return str(i + 1)\n    return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_ = 0\n    max_ = n-1\n    res = 0\n    while True:\n        if (a[min_] < a[max_]) and (a[min_] < k):\n            res += 1\n            min_ += 1\n            max_ -= 1\n            continue\n        if (a[min_] > a[max_]) and (a[max_] < k):\n            res += 1\n            max_ -= 1\n            min_ += 1\n            continue\n        if (a[min_] > a[max_]) and (a[min_] > k):\n            res += 1\n            max_ -= 1\n            min_ += 1\n            continue\n        if (a[min_] < a[max_]) and (a[min_] > k):\n            res += 1\n            min_ += 1\n            max_ -= 1\n            continue\n        break\n    return res\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(moves(n, k, a))\n\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return min(len(a)-k, sum([x+1 for x in a]))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_value = min(map(int, stdin.split()))\n    max_value = max(map(int, stdin.split()))\n    if k > n:\n        return -1\n    if k == n:\n        return 1\n    count = 0\n    while min_value!= max_value:\n        count += 1\n        if min_value < max_value:\n            min_value += 1\n        if min_value > max_value:\n            max_value -= 1\n    return count\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    # print(n, k, arr)\n    count = 0\n    current = 0\n    for i in range(n):\n        if arr[i] < arr[current]:\n            current = i\n            count += 1\n    return str(count)"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    mn = min(a)\n    mx = max(a)\n    def add(a, mn, mx):\n        a.append(mn)\n        a.append(mx)\n    def remove(a, mn, mx):\n        a.append(mn)\n        a.append(mx)\n    moves = 0\n    while True:\n        if a == [k] * len(a):\n            break\n        if a[0]!= mn:\n            add(a, mn, a[0])\n        else:\n            while a[0] == mn:\n                remove(a, mn, a[0])\n        if a == [k] * len(a):\n            break\n        if a[-1]!= mx:\n            add(a, a[-1], mx)\n        else:\n            while a[-1] == mx:\n                remove(a, a[-1], mx)\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split('\\n')\n    n, k = (int(x) for x in data[0].split())\n    a = list(int(x) for x in data[1].split())\n    # do not use set because of ordering in the list\n    min_element = min(a)\n    max_element = max(a)\n    moves = 0\n    while k > 0 and min_element!= max_element:\n        # remove min element\n        a.remove(min_element)\n        # remove max element\n        a.remove(max_element)\n        # set max element to min element + 1\n        max_element = max(a)\n        # set min element to max element - 1\n        min_element = min(a)\n        # add +1 to moves\n        moves += 1\n        # add -1 to moves\n        k -= 1\n    # if min_element!= max_element:\n    #     # if min_element > max_element\n    #     # k can't be fulfilled\n    #     # min_element + 1\n    #     # max_element - 1\n    #     k -= 1\n    return moves\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    min_idx = 0\n    max_idx = 0\n    min_value = min(a)\n    max_value = max(a)\n    # min_idx = a.index(min(a))\n    # max_idx = a.index(max(a))\n    for idx, val in enumerate(a):\n        if val > min_value:\n            min_idx = idx\n            break\n    for idx, val in enumerate(a):\n        if val < max_value:\n            max_idx = idx\n            break\n    return min_idx - max_idx + 1\n\nprint(solution(input()))"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    water_total_list = list()\n    water_total_list.append(stdin.strip().split('\\n')[0])\n    water_total_list.append(stdin.strip().split('\\n')[1])\n    water_total_list.append(stdin.strip().split('\\n')[2])\n    water_total_list.append(stdin.strip().split('\\n')[3])\n    water_total_list.sort(key=int)\n    return water_total_list[0] + water_total_list[1] + water_total_list[2] + water_total_list[3]\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b = stdin.split()[1:]\n    a = int(a)\n    b = int(b)\n    return min(a, b) * n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    a = int(input[1])\n    b = int(input[2])\n    return str(min_cost_water(n, a, b))\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    return''.join(str(min(a, b)) for a, b in (map(int, stdin.split()) for _ in range(q)))\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        t = input().split()\n        n,a,b = int(t[0]),int(t[1]),int(t[2])\n        q = int(stdin.strip())\n        x = (a*b*2)+(a*a*2)+(a*b*2)+(b*b*2)\n        y = a*a*2+(a*b*2)+(b*b*2)+(b*a*2)\n        print(x)\n        print(y)\n        print(x+y)\n\nsolution(input())"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    n = []\n    a = []\n    b = []\n    for i in range(q):\n        n_i, a_i, b_i = stdin.split()\n        n.append(int(n_i))\n        a.append(int(a_i))\n        b.append(int(b_i))\n    print(min(a,b))\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    costs = stdin.split()[1:]\n    amounts = stdin.split()[2:]\n    water_in_store = 0\n    water_in_store += float(amounts[0])*float(costs[0])\n    water_in_store += float(amounts[1])*float(costs[1])\n    water_in_store += float(amounts[2])*float(costs[2])\n    difference = 100000000000000\n    if water_in_store < difference:\n        difference = water_in_store\n    for i in range(q-1):\n        water_in_store += float(amounts[i+3])*float(costs[i+3])\n        difference = min(difference, water_in_store)\n    return str(difference)\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return f\"{min(a * n, b * n)} \"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries: List[List[int]] = []\n    for i in range(int(stdin)):\n        queries.append(list(map(int, stdin.split())))\n    min_val = 1000000000000000\n    for query in queries:\n        if query[0] == 1:\n            min_val = min(min_val, (query[1] - query[2]) % query[1])\n        else:\n            min_val = min(min_val, (query[2] - query[1]) % query[2])\n    return str(min_val)"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        ans = int(stdin.readline())\n        n1 = int(stdin.readline())\n        a1 = int(stdin.readline())\n        n2 = int(stdin.readline())\n        a2 = int(stdin.readline())\n        if n1 + a1 == n2 + a2:\n            return ans\n    return \"0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, x) = stdin.split()\n    n = int(n)\n    x = int(x)\n    res = 0\n    for i in range(n+1):\n        if i == 0 or i == n:\n            continue\n        if (x - 1) < (x + i) <= x:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    L = [int(i) for i in stdin.split()]\n    # The first bounce will always be at coordinate 0\n    cnt = 1\n    for i in range(1, N):\n        if L[i] <= X:\n            cnt += 1\n        else:\n            L[i] = L[i-1] + L[i] - X\n    return str(cnt)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.strip().split(\" \")\n    N, X = int(N), int(X)\n    bounce_count = 0\n    for i in range(N):\n        if X >= i * (N + 1) + 1:\n            bounce_count += 1\n    print(bounce_count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N+1):\n        if L[i] <= X:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, X = stdin.pop(0), int(stdin.pop(0))\n    d = [0] + stdin.pop(0).split()\n    d.sort()\n    cnt = 0\n    for i in range(1, N + 1):\n        if d[i] <= X:\n            cnt += 1\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split(\" \"))\n    L = list(map(int, stdin.split(\" \")[1:]))\n    count = 0\n\n    for i in range(N):\n        if L[i] <= X:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given N coordinates L_1,..., L_N, where the i-th coordinate is given by N+1\n    >>> solution([3, 4, 5])\n    2\n    >>> solution([3, 4, 5])\n    2\n    >>> solution([3, 4, 5])\n    2\n    >>> solution([3, 4, 5])\n    2\n    \"\"\"\n    # Replace this comment with your code\n    #...\n    return \"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(lst)-1):\n        if lst[i] > x and lst[i+1] > x:\n            count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    L = list(map(int, input().split()))\n\n    count = 0\n    for i in range(1, N + 1):\n        if L[i - 1] + L[i] <= X:\n            count += 1\n        else:\n            count = 0\n\n    return str(count)\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        print(\"No\")\n    elif n <= 10:\n        if n == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        str1 = stdin.split()\n        for i in range(len(str1) - 1):\n            if str1[i][0]!= str1[i + 1][0]:\n                print(\"No\")\n                return\n        print(\"Yes\")\n\n    return \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5\n    hoge\n    english\n    hoge\n    enigma\n    :\n    enigma\n    \"\"\")\n    No\n\n    >>> solution(\"\"\"3\n    hoge\n    english\n    hoge\n    :\n    enigma\n    :\n    enigma\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    "
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = []\n    for i in range(N):\n        word = stdin.split()[i]\n        words.append(word)\n    words = sorted(words, key=len)\n    for i in range(len(words)-1):\n        if words[i][0] == words[i+1][0]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    takahashi = words[:n]\n    correct = True\n    for i in range(len(takahashi)):\n        for j in range(i+1, len(takahashi)):\n            if takahashi[i][0] == takahashi[j][-1] and takahashi[i][-1]!= takahashi[j][0]:\n                correct = False\n                break\n        if not correct:\n            break\n    if correct:\n        print('Yes')\n    else:\n        print('No')\n    return None\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *words = stdin.split()\n    if n == 1:\n        return 'No'\n    for i in range(1, len(words)):\n        if words[i - 1][0]!= words[i][0]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return 'Yes' if len(set(stdin.split())) == len(stdin.split()) else 'No'\nsolution('hoge')\nsolution('english')\nsolution('hoge')\nsolution('enigma')\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data: List[str] = stdin.split(\"\\n\")\n    n: int = int(data[0])\n    for i in range(1, n + 1):\n        word: str = data[i]\n        if check_word(word) is True:\n            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h_words = []\n    for _ in range(n):\n        word = stdin.split()[1]\n        if word not in h_words:\n            h_words.append(word)\n    if len(h_words) < len(stdin.split()[2:]):\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    words = []\n    for i in range(n):\n        word = stdin.strip().split(' ')\n        words.append(word[i])\n    print(words)\n    for word in words:\n        if is_same(word):\n            return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split(\"\\n\")[1:-1]\n    for i in range(n):\n        w = words[i]\n        lw = len(w)\n        if len(words) == 1:\n            break\n        if w == words[-1]:\n            words.pop(-1)\n            continue\n        if w[0]!= w[-1]:\n            return \"No\"\n        if w[0] == w[lw - 1]:\n            words.pop(-1)\n            continue\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == 1:\n        return str(B)\n    elif B == 1:\n        return str(A)\n\n    if A > 1:\n        if B > 1:\n            return str(A*(A-1)//2 + B*(B-1)//2)\n        elif A == 1:\n            return str(B)\n        else:\n            return str(A*(A-1)//2)\n    elif A == 1:\n        return str(B)\n    elif A == 2:\n        if B == 1:\n            return str(1)\n        else:\n            return str(A*(A-1)//2 + (A-1)*B)\n    else:\n        if B == 1:\n            return str(A)\n        else:\n            return str(A*(A-1)//2 + A*B)"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 2 or A > 10**5:\n        return \"1\"\n    if A > 2 and A < 10**5 and B <= 2 or A > 2 and A < 10**5 and B > 2:\n        return \"1\"\n    return \"2\""
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == A and B == B:\n        return str(min(A, B))\n    if A == A or B == B:\n        return str(min(A + min(B, A), B + min(A, B)))\n    if A == A + min(B, A):\n        return str(min(A + min(B, A), B + min(A, B)))\n    if A + min(B, A) == B + min(A, B):\n        return str(min(A + min(B, A), B + min(A, B)))\n    return str(min(A, B))\n\nsolution(input())"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a*(a+1)/2)\n    elif a == b + 1:\n        return str(a*(a+1)*2//3)\n    else:\n        return str(a*b//(a+b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    if A > 0 and A <= 10**5 and B > 0 and B <= 10**5:\n        if A >= 2 and B >= 2:\n            return '{} {}'.format(A * 2, B * 2)\n        else:\n            return '{} {}'.format(A, B)\n    else:\n        return ''"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return f\"{A} {B}\"\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(A*2, B*2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A*2 + min(2, B - 2))\n    #return str(A*2 + min(A, B - A))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(min(A * 6, B * 6))"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n // 2\n    b = n - a\n    ans = a if a >= b else b\n    print(ans)\n    return ans"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(s.replace('a', 'x').replace('b', 'x').replace('c', 'x').replace('d', 'x').replace('e', 'x').replace('f', 'x').replace('g', 'x').replace('h', 'x').replace('i', 'x').replace('j', 'x').replace('k', 'x').replace('l', 'x').replace('m', 'x').replace('n', 'x').replace('o', 'x').replace('p', 'x').replace('q', 'x').replace('r', 'x').replace('s', 'x').replace('t', 'x').replace('u', 'x').replace('v', 'x').replace('w', 'x').replace('x', 'x').replace('y', 'x').replace('z', 'x'))\n    return s\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_s = stdin\n    input_s = input_s.replace(\"s\", \"x\")\n    return input_s\n    \ndef"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nsolution()\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    for s in S:\n        print('x', end='')\n    return print()\n\nsolution(input())\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s','x')\n\nsolution('sardine')\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the result of replacing every character in S with x\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n\n    squares: List[int] = list(map(int, stdin.split()))\n    squares = sorted(squares)\n\n    for i in range(1, N):\n        if squares[i - 1] >= squares[i]:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_arr = [int(x) for x in stdin.split(' ')]\n\n    # Sort the array by height\n    h_arr.sort()\n\n    # If any height is greater than the current, we can't use this approach\n    if h_arr[0] > 1:\n        return 'No'\n\n    for i in range(0, N - 1):\n        if h_arr[i] >= h_arr[i + 1] - 1:\n            return 'No'\n\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    h = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if h[i] > h[i - 1]:\n            print('No')\n            return\n    print('Yes')\n    return\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    N = int(stdin[0])\n    heights = list(map(int, stdin[1]))\n    if all(heights[i] <= heights[i+1] for i in range(N-1)):\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check(heights: list):\n        nonlocal N\n        # Check if the input is the correct length\n        if len(heights)!= N:\n            return False\n        # Check if heights are sorted\n        for i in range(N - 1):\n            if heights[i + 1] <= heights[i]:\n                return False\n        return True\n\n    def solution_no_decrease(heights: list):\n        nonlocal N\n        # Check if the input is the correct length\n        if len(heights)!= N:\n            return False\n        # Check if heights are sorted\n        for i in range(N - 1):\n            if heights[i + 1] <= heights[i]:\n                return False\n        return True\n\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    # Decrease all the heights by 1\n    for i in range(N):\n        heights[i] -= 1\n    # Check if the heights are non-decreasing from left to right\n    if check(heights):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n\n    if N == 1:\n        return \"Yes\" if arr[0] == 1 else \"No\"\n\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = arr[i]\n\n    for i in range(N - 2, -1, -1):\n        for j in range(i + 1, N):\n            if arr[i] < arr[j]:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + 1\n            else:\n                dp[i][j] = dp[i + 1][j]\n\n    for i in range(N):\n        if dp[0][i] < dp[1][i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        if heights[i + 1] < heights[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_arr = list(map(int, stdin.split()))\n    h_arr.sort()\n    flag = True\n    for i in range(len(h_arr) - 1):\n        if h_arr[i] > h_arr[i + 1]:\n            flag = False\n            break\n    if flag:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    arr: List[int] = [int(i) for i in stdin.split()]\n    res: str = \"Yes\" if not any(arr[i] > arr[i + 1] for i in range(n - 1)) else \"No\"\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if A[i] <= A[i + 1]:\n            continue\n        elif A[i] > A[i + 1]:\n            A[i] -= 1\n            A[i + 1] += 1\n        else:\n            return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = stdin.split()\n    N, M, C = int(N), int(M), int(C)\n    codes = []\n    for i in range(N):\n        codes.append([])\n        for j in range(M):\n            codes[i].append(int(stdin.split()[i * M + j]))\n    correct = 0\n    for code in codes:\n        t = code[0]\n        for i in range(1, len(code)):\n            t += code[i]\n        t += C\n        if t > 0:\n            correct += 1\n    return correct\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_pos(arr):\n        for i in range(len(arr)):\n            if arr[i] >= 0:\n                return i\n    def find_max_neg(arr):\n        for i in range(len(arr)):\n            if arr[i] < 0:\n                return i\n    N, M = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    print(len(arr))\n    total_sum = 0\n    for i in range(M):\n        index_neg = find_max_neg(arr)\n        index_pos = find_max_pos(arr)\n        total_sum += arr[index_neg] * -arr[index_pos]\n        arr[index_neg] = -arr[index_neg]\n        arr[index_pos] = arr[index_pos] + 1\n    print(total_sum)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n\n    A = [[] for i in range(N)]\n    for i in range(N):\n        A[i] = list(map(int, stdin.split()))\n\n    # If any number is >= to zero, then the answer is false\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] <= 0:\n                return \"No\"\n\n    # If any number is > C, then the answer is false\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > C:\n                return \"No\"\n\n    # If any number is >= to zero, then the answer is false\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] <= 0:\n                return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = stdin.split()\n    N, M, C = int(N), int(M), int(C)\n    input_list = stdin.split()\n    input_list = list(map(int, input_list))\n    input_list.sort()\n    answer = 0\n    for i in range(N):\n        for j in range(M):\n            if input_list[i] + input_list[j] > C:\n                break\n        else:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    N = int(lines[0])\n    M = int(lines[1])\n    C = int(lines[2])\n    A = [0] * M\n    for i in range(len(A)):\n        A[i] = int(lines[i + 3])\n    return '\\n'.join([' '.join([str(x) for x in A])])\n\nsolution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2')\n\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = stdin.split()\n    n, m, c = int(n), int(m), int(c)\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    res = 0\n    for i in range(n):\n        l = arr[i][0]\n        for j in range(m):\n            l += arr[i][j+1]\n        if l > 0:\n            res += 1\n    print(res)\n    return \"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.strip().split()))\n\n    n, m, c = data[0], data[1], data[2]\n    sums = []\n    for i in range(n):\n        sums.append(data[3*i + 1] + data[3*i + 2] + data[3*i + 3] + c)\n\n    # print(sums)\n    # print(data)\n    # print(n, m, c)\n    # print(sum(data))\n    # print(max(sums))\n    # print(min(sums))\n\n    return str(len(sums)-sum(sums))"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n > 10000 or n < 0:\n        raise ValueError(\"Input is not valid\")\n\n    # Get the amount of change to be received\n    # The amount of change to be received can be achieved using only two 1000-yen bills\n    amount: int = n\n    change: int = amount\n\n    # Set the minimum denomination to be used to be 1000-yen\n    min_denomination: int = 1000\n\n    # Find the minimum denomination to be used\n    while amount >= min_denomination:\n        if amount % min_denomination == 0:\n            # Amount to be received is an integer multiple of the minimum denomination\n            amount = amount // min_denomination\n        else:\n            min_denomination -= 1\n\n    if amount == 1:\n        # Amount to be received is an integer multiple of the minimum denomination\n        return change\n    else:\n        # Amount to be received is not an integer multiple of the minimum denomination\n        return str(amount)\n    # return change"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '0'\n    change = N\n    a_billion = int(1e+9)\n    bill = 1000\n    small_bill = 1000\n    five_bill = 500\n    five_bill_bills = 0\n    one_bill = 100\n    ten_bill = 10\n    ten_bill_bills = 0\n    five_bill_bill = 0\n    one_bill_bill = 0\n    zero_bill_bills = 0\n    ten_bill_bills = 0\n    five_bill_bills = 0\n    one_bill_bills = 0\n    five_bill_bill = 0\n    ten_bill_bill = 0\n    zero_bill_bill = 0\n    five_bill_bills = 0\n    ten_bill_bills = 0\n    one_bill_bills = 0\n    if N >= 1000:\n        change -= 1000\n    if change >= 500:\n        change -= 500\n        five_bill_bill += 1\n    if change >= 100:\n        change -= 100\n        five_bill_bills += 1\n    if change >= 10:\n        change -= 10\n        ten_bill_bill += 1\n    if change >= 5:\n        change -= 5\n        five_bill_bills += 1\n    if change >= 1:\n        change -= 1\n        one_bill_bills += 1\n    if change >= 0.5:\n        change -= 0.5\n        five_bill_bills += 1\n    if change >= 0.25:\n        change -= 0.25\n        five_bill_bills += 1\n    if change >= 0.10:\n        change -= 0.10\n        ten_bill_bill += 1\n    if change >= 0.05:\n        change -= 0.05\n        five_bill_bills += 1\n    if change >= 0.01:\n        change -= 0.01\n        ten_bill_bills += 1\n    if change >= 0.005:\n        change -= 0.005\n        one_bill_bills += 1\n    if change >= 0.001:\n        change -= 0.001\n        one_bill_bills += 1\n    if change >= 0.0005:\n        change -= 0.0005\n        five_bill_bills += 1\n    if change >= 0.0001:\n        change -= 0.0001\n        five_bill_bills += 1\n    if change >= 0.00005:\n        change -= 0.00005\n        ten_bill_bills += 1\n    if change >= 0.00001:\n        change -= 0.00001\n        five_bill_bills += 1\n    if change >= 0.000005:\n        change -= 0.000005\n        ten_bill_bills += 1\n    if change >= 0.000001:\n        change -= 0.000001\n        one_bill_bills += 1\n    if change >= 0.0000005:\n        change -= 0.0000005\n        one_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.000000005:\n        change -= 0.000000005\n        ten_bill_bills += 1\n    if change >= 0.000000001:\n        change -= 0.000000001\n        one_bill_bills += 1\n    if change >= 0.00000005:\n        change -= 0.00000005\n        five_bill_bills += 1\n    if change >= 0.00000002:\n        change -= 0.00000002\n        ten_bill_bills += 1\n    if change >= 0.00000005:\n        change -= 0.00000005\n        one_bill_bills += 1\n    if change >= 0.00000008:\n        change -= 0.00000008\n        five_bill_bills += 1\n    if change >= 0.00000004:\n        change -= 0.00000004\n        ten_bill_bills += 1\n    if change >= 0.00000006:\n        change -= 0.00000006\n        one_bill_bills += 1\n    if change >= 0.00000008:\n        change -= 0.00000008\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.0000005:\n        change -= 0.0000005\n        ten_bill_bills += 1\n    if change >= 0.00000025:\n        change -= 0.00000025\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.000000125:\n        change -= 0.000000125\n        five_bill_bills += 1\n    if change >= 0.00000025:\n        change -= 0.00000025\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.000000005:\n        change -= 0.000000005\n        ten_bill_bills += 1\n    if change >= 0.000000001:\n        change -= 0.000000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        one_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        one_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        one_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        one_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        five_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        ten_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        one_bill_bills += 1\n    if change >= 0.00000001:\n        change -= 0.00000001\n        one_bill_bills += 1\n    if change >= 0.000000"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin)\n\n    answer = 0\n    count = 0\n    while N > 0:\n        if N >= 1000:\n            N -= 1000\n            count += 1\n        elif N >= 500:\n            N -= 500\n            count += 1\n        elif N >= 100:\n            N -= 100\n            count += 1\n        elif N >= 50:\n            N -= 50\n            count += 1\n        elif N >= 10:\n            N -= 10\n            count += 1\n        elif N >= 5:\n            N -= 5\n            count += 1\n        elif N >= 1:\n            N -= 1\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(sorted(map(int, stdin.split()), reverse=True)) % 10)"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    change = int(stdin)\n    result = 0\n    while change >= 1000:\n        change -= 1000\n        result += 1\n    return str(result)\n\n\"\"\"\n\"\"\"\n---SOLUTION---\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    input_number = stdin\n    N = input_number\n    \n    min_number = 1000\n    max_number = 1000000\n\n    if N > max_number:\n        return '0'\n    elif N < min_number:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    change = int(stdin)\n    amount_of_coins = 0\n    while change > 0:\n        if change >= 2000:\n            change -= 2000\n            amount_of_coins += 1\n        elif change >= 500:\n            change -= 500\n            amount_of_coins += 1\n        elif change >= 100:\n            change -= 100\n            amount_of_coins += 1\n        elif change >= 50:\n            change -= 50\n            amount_of_coins += 1\n        elif change >= 10:\n            change -= 10\n            amount_of_coins += 1\n        elif change >= 5:\n            change -= 5\n            amount_of_coins += 1\n        elif change >= 1:\n            change -= 1\n            amount_of_coins += 1\n    return amount_of_coins\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the amount of change in a list.\"\"\"\n    n = int(stdin)\n    i = 0\n    while n!= 0:\n        if n - i > 0:\n            i += 1000\n            n -= i\n        else:\n            i = n\n            break\n    return i\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin.split(\" \")[0]) / 1000)"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n\n    max_num = 0\n    for i in range(1, n+1):\n        if lines[i] == '':\n            break\n        a, b = map(int, lines[i].split())\n        max_num = max(max_num, a + b)\n    \n    return str(max_num)"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [N, A, B] = list(map(int, stdin.split()))\n    result = 0\n\n    for i in range(N + 1):\n        if(i == 0):\n            result += (A * i)\n        else:\n            result += (i * (B + A * (i - 1)))\n\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, b = list(map(int, stdin.split()))\n    print(max([sum(1 for b_i in range(b[i]) if a[i] <= b_i <= b[i+1]) for i in range(n)]))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    hero_count = 0\n    # Collect total number of monsters for each hero.\n    hero_counts = []\n    while N > 0:\n        N -= 1\n        hero_counts.append(int(input()))\n        hero_count += 1\n\n    # Collect total number of monsters for each town.\n    town_counts = []\n    while len(hero_counts) > 0:\n        town_counts.append(int(input()))\n    # Count of monsters for each hero at each town.\n    hero_heroes = [[0] * len(town_counts) for _ in range(hero_count)]\n\n    # Add hero's victories in each town.\n    for hero_num in range(hero_count):\n        hero_heroes[hero_num] = list(map(int, input().split()))\n    # Find the maximum number of monsters for each hero at each town.\n    hero_heroes = sum(hero_heroes, [])\n\n    # Count of monsters for each town.\n    town_counts = list(map(int, input().split()))\n    town_counts = sum(town_counts)\n    max_monsters = 0\n\n    # Calculate the maximum number of monsters for each hero at each town.\n    for hero_num in range(hero_count):\n        for town_num in range(town_counts):\n            if town_num == 0:\n                hero_heroes[hero_num] -= hero_counts[hero_num]\n            else:\n                hero_heroes[hero_num] += town_counts - town_num\n        max_monsters = max(max_monsters, hero_heroes[hero_num])\n\n    return str(max_monsters)\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, B = stdin.split()\n    N = int(N)\n    A = list(map(int, A))\n    B = list(map(int, B))\n    l = []\n    for i in range(N):\n        l.append((A[i], B[i]))\n    l = sorted(l)\n    print(max([sum(x) for x in l]))\n    return l\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N, A, B = map(int, stdin.split())\n    ans = 0\n    for i in range(N + 1):\n        ans += max(A[i], A[i + 1]) + max(B[i], B[i + 1])\n    return str(ans)\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, N, A, B = stdin.split()\n    N, A, B = int(N), int(A), int(B)\n    res = 0\n    while N >= 0:\n        res = max(res, max(A, B) * N)\n        A -= max(A, B)\n        B -= max(A, B)\n        N -= 1\n    return str(res)\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, N):\n        # find the result\n        res = max(res, A[i] + A[i - 1] + B[i] - 2 * B[i - 1])\n    return str(res)\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    (N, *A, B) = stdin.split()\n    N = int(N)\n    A = list(map(int, A))\n    B = list(map(int, B))\n    return str(sum(max(0, b) for b in B))"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    max_monsters = 0\n    for i in range(n):\n        max_monsters = max(max_monsters, a[i] + b[i])\n    print(max_monsters)\n    return max_monsters\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    X = x\n    Y = y\n    Z = 0\n    if X >= Y:\n        Y = Y + 1\n    for i in range(1, n+1):\n        X = max(X, i)\n        Z = max(Z, X)\n    if X >= Z:\n        return 'War'\n    Y = max(Y, Z)\n    for i in range(1, m+1):\n        Y = max(Y, i)\n        Z = max(Z, Y)\n    if Y >= Z:\n        return 'War'\n    return 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    X_cities = list(map(int, stdin.split()[1:]))\n    Y_cities = list(map(int, stdin.split()[1:]))\n    # write your code here\n    return 'War' if len(X_cities) > len(Y_cities) else 'No War'\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split()))\n    if (X > Y) or (X < Y) or (X > Y):\n        print(\"War\")\n    else:\n        print(\"No War\")\n    return"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x_1 = x[0]\n    x_2 = x[1]\n    x_3 = x[2]\n    x_4 = x[3]\n    x_5 = x[4]\n    x_6 = x[5]\n    x_7 = x[6]\n    x_8 = x[7]\n    x_9 = x[8]\n    x_10 = x[9]\n    y = x_1\n    y_1 = x_2\n    y_2 = x_3\n    y_3 = x_4\n    y_4 = x_5\n    y_5 = x_6\n    y_6 = x_7\n    y_7 = x_8\n    y_8 = x_9\n    y_9 = x_10\n    Z = x_1\n    N = x_2\n    M = x_3\n    X = x_4\n    Y = x_5\n    if x_1 < x_2 and x_1 < x_3 and x_1 < x_4 and x_1 < x_5 and x_1 < x_6 and x_1 < x_7 and x_1 < x_8 and x_1 < x_9 and x_1 < x_10:\n        if x_1 < X and X < x_2 and x_2 < X and x_2 < x_3 and x_3 < X and x_3 < x_4 and x_4 < X and x_4 < x_5 and x_5 < X and x_5 < x_6 and x_6 < X and x_6 < x_7 and x_7 < X and x_7 < x_8 and x_8 < X and x_8 < x_9 and x_9 < X and x_9 < x_10 and X < Y:\n            if x_1 < y_1 and y_1 < x_2 and y_1 < x_3 and y_1 < x_4 and y_1 < x_5 and y_1 < x_6 and y_1 < x_7 and y_1 < x_8 and y_1 < x_9 and y_1 < x_10 and x_1 < y_2 and y_2 < x_3 and y_2 < x_4 and y_2 < x_5 and y_2 < x_6 and y_2 < x_7 and y_2 < x_8 and y_2 < x_9 and y_2 < x_10 and x_2 < y_3 and y_3 < x_4 and y_3 < x_5 and y_3 < x_6 and y_3 < x_7 and y_3 < x_8 and y_3 < x_9 and y_3 < x_10 and x_3 < y_4 and y_4 < x_4 and y_4 < x_5 and y_4 < x_6 and y_4 < x_7 and y_4 < x_8 and y_4 < x_9 and y_4 < x_10 and x_4 < y_5 and y_5 < x_5 and y_5 < x_6 and y_5 < x_7 and y_5 < x_8 and y_5 < x_9 and y_5 < x_10 and x_5 < y_6 and y_6 < x_6 and y_6 < x_7 and y_6 < x_8 and y_6 < x_9 and y_6 < x_10 and x_6 < y_7 and y_7 < x_7 and y_7 < x_8 and y_7 < x_9 and y_7 < x_10 and x_7 < y_8 and y_8 < x_8 and y_8 < x_9 and y_8 < x_10 and x_8 < y_9 and y_9 < x_9 and y_9 < x_10 and x_9 < y_10:\n                if x_1 < Z and Z < x_2 and Z < x_3 and Z < x_4 and Z < x_5 and Z < x_6 and Z < x_7 and Z < x_8 and Z < x_9 and Z < x_10 and x_1 < y_1 and y_1 < x_2 and y_1 < x_3 and y_1 < x_4 and y_1 < x_5 and y_1 < x_6 and y_1 < x_7 and y_1 < x_8 and y_1 < x_9 and y_1 < x_10 and x_2 < y_3 and y_3 < x_3 and y_3 < x_4 and y_3 < x_5 and y_3 < x_6 and y_3 < x_7 and y_3 < x_8 and y_3 < x_9 and y_3 < x_10 and x_3 < y_4 and y_4 < x_4 and y_4 < x_5 and y_4 < x_6 and y_4 < x_7 and y_4 < x_8 and y_4 < x_9 and y_4 < x_10 and x_4 < y_5 and y_5 < x_5 and y_5 < x_6 and y_5 < x_7 and y_5 < x_8 and y_5 < x_9 and y_5 < x_10 and x_5 < y_6 and y_6 < x_6 and y_6 < x_7 and y_6 < x_8 and y_6 < x_9 and y_6 < x_10 and x_6 < y_7 and y_7 < x_7 and y_7 < x_8 and y_7 < x_9 and y_7 < x_10 and x_7 < y_8 and y_8 < x_8 and y_8 < x_9 and y_8 < x_10 and x_8 < y_9 and y_9 < x_9 and y_9 < x_10 and x_9 < y_10:\n                if x_1 < z_1 and z_1 < x_2 and z_1 < x_3 and z_1 < x_4 and z_1 < x_5 and z_1 < x_6 and z_1 < x_7 and z_1 < x_8 and z_1 < x_9 and z_1 < x_10 and x_1 < y_1 and y_1 < x_2 and y_1 < x_3 and y_1 < x_4 and y_1 < x_5 and y_1 < x_6 and y_1 < x_7 and y_1 < x_8 and y_1 < x_9 and y_1 < x_10 and"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    Y = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N):\n        if X[i] < Y[i]:\n            count += 1\n    for i in range(N):\n        if X[i] > Y[i]:\n            count += 1\n    if count > 0:\n        return \"War\"\n    count = 0\n    for i in range(M):\n        if X[i] < Y[i]:\n            count += 1\n    for i in range(M):\n        if X[i] > Y[i]:\n            count += 1\n    if count > 0:\n        return \"War\"\n    count = 0\n    for i in range(N):\n        if X[i] < Y[i]:\n            count += 1\n    for i in range(M):\n        if X[i] > Y[i]:\n            count += 1\n    if count > 0:\n        return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(r'C:\\Users\\Bruno\\PycharmProjects\\AdventOfCode\\Input.txt')\n    N, M, X, Y = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    for i in range(N):\n        for j in range(i+1, M):\n            if x[i] < y[j]:\n                print(\"War\")\n                return\n            if y[j] < x[i]:\n                print(\"War\")\n                return\n    print(\"No War\")\n    return\nsolution()\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a = stdin[1:]\n    b = stdin[2:]\n    x, y = sorted(a), sorted(b)\n    if x[0] < y[0] and x[-1] > y[-1]:\n        return \"War\"\n    else:\n        return \"No War\"\nsolution(input())\n\"\"\"\n\nfrom math import inf\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n, m = stdin.split()\n    x = list(map(int, x.split()))\n    y = list(map(int, y.split()))\n    n = int(n)\n    m = int(m)\n    res = []\n    for i in range(n):\n        if x[i] < y[i]:\n            res.append('War')\n        else:\n            res.append('No War')\n    return '\\n'.join(res)\n\nsolution('5 2 10 20')"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin_split = stdin.split()\n    n = int(stdin_split[0])\n    m = int(stdin_split[1])\n    x = int(stdin_split[2])\n    y = int(stdin_split[3])\n    cities_x = list(map(int, stdin_split[4].split()))\n    cities_y = list(map(int, stdin_split[5].split()))\n    if n == m:\n        if max(cities_x) < min(cities_y):\n            return 'War'\n        elif max(cities_y) < min(cities_x):\n            return 'War'\n        else:\n            return 'No War'\n    else:\n        return 'No War'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.strip().split(' '))\n    # Condition 1\n    if x > y:\n        return 'War'\n    # Condition 2\n    if x >= n:\n        return 'War'\n    if y >= m:\n        return 'War'\n    # Condition 3\n    for x_i in range(x, n):\n        if y < x_i:\n            break\n        if x_i == x:\n            continue\n        if y >= x_i:\n            return 'War'\n    # Condition 4\n    for y_i in range(y, m):\n        if x < y_i:\n            break\n        if y_i == y:\n            continue\n        if x >= y_i:\n            return 'War'\n    return 'No War'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T = []\n    for i in range(1, N+1):\n        T.append(int(stdin.split()[i]))\n    \n    #get the length of the sequence and make all values positive\n    T = [x-1 for x in T]\n    \n    #initialize the two dicitionaries\n    A = {}\n    B = {}\n    \n    #populate the first dictionary\n    A[0] = 1\n    B[0] = 1\n    \n    #populate the second dictionary\n    for i in range(1,N+1):\n        if i == N:\n            A[i] = 0\n        else:\n            A[i] = A[i-1]+1\n            B[i] = B[i-1]\n    \n    #count the number of hits\n    for i in range(1,N+1):\n        if i == N:\n            A[i] = 0\n        else:\n            B[i] = A[i-1]\n            A[i] = A[i]+B[i]\n            \n    return str(N*T[0])\n\nprint(solution(input()))"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = N*[0]\n    for i in range(1, N+1):\n        A[i] = i\n    return str(sum(A))\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_seconds(stdin.strip().split()))\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    a = []\n    for i in range(1,n+1):\n        if i%2==1:\n            a.append(i)\n    x = min(a)\n    res = str(x*(n-1)+(n-x)*x)\n    return res\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    hand_up_list = [0] * N\n    hand_up_list[0] = 1\n    T_list = [int(i) for i in stdin.strip().split()]\n    T_list = sorted(T_list, reverse=True)\n    for i in range(1, N):\n        hand_up_list[i] = (hand_up_list[i-1] * (T_list[i-1] + 1)) % (10**9 + 7)\n    return str(max(hand_up_list))\nprint(solution(input()))\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t1 = int(stdin.strip())\n    t2 = int(stdin.strip())\n    return str(360 - t1 + t2)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N)\n    T = list(map(int, stdin.split()))\n    print(T)\n    t = 0\n    print(T[0])\n    for i in range(1, len(T)):\n        print(T[i])\n        t += T[i]\n        t %= 360\n        print(t)\n    t %= 360\n    print(t)\n    return t\n\n\nsolution(\"2\")\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    t1 = int(stdin[1])\n    t2 = int(stdin[2])\n    times = [[i, i+1] for i in range(t1)]\n    for i in range(t1, t2):\n        times.append([i+1, i+1])\n    print(len([i for i in times if i[0] < i[1]]) - 1)\n    return times\n\nsolution(input())\n\n4 5\n2 2\n3 6\n1 6\n2 1\n\n3 6\n1 6\n2 1\n\n1 1\n0 0\n\n5 5\n1 1\n4 4\n1 1\n5 3\n\n1 1\n0 0\n\n0 0\n1 1\n1 1\n0 1\n\n0 0\n1 1\n\n0 0\n1 1\n0 1\n1 1\n\n0 0\n1 1\n0 1\n1 1\n1 1\n\n1 1\n0 0\n0 1\n1 1\n1 1\n1 1\n\n0 0\n1 1\n\n1 1\n0 0\n0 1\n1 1\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n1 1\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n1 1\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1\n\n0 0\n1 1"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    result = 0\n    clock = T_1 - 1\n    while clock < T_2:\n        result += clock\n        clock += T_1\n    return result\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    N = int(inputs[0])\n    T_1 = int(inputs[1])\n    T_2 = int(inputs[2])\n    count = 0\n    clock = 0\n    while clock < T_2:\n        for i in range(N):\n            count += 1\n            clock = clock + T_1\n        print(count)\n        count = 0\n    return \"\"\nprint(solution(input()))"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N = N - 1\n    weights = sorted([int(i) for i in stdin.split(\" \")])\n    weights = weights[:N]\n    weights.sort()\n    difference = float(\"inf\")\n    first = 0\n    second = 0\n    for i in range(0, N):\n        first += weights[i]\n        second += weights[i]\n        if first < second:\n            difference = second - first\n            break\n    return str(difference)\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    weights = list(map(int, input[1:]))\n    s1 = 0\n    s2 = 0\n    for i in range(n):\n        if i + 1 > weights[i]:\n            s1 += weights[i]\n        else:\n            s2 += weights[i]\n\n    return str(abs(s1 - s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s_1 = sum(map(int, stdin.split()))\n    s_2 = 0\n    for i in range(1, n):\n        if i < T:\n            s_2 += int(stdin.split()[i])\n        else:\n            s_2 += int(stdin.split()[i]) - int(stdin.split()[i - T])\n    return str(abs(s_1 - s_2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Please do not remove the below line.\n    # When removing lines in your code, please remove the same line in the Solution class too\n    from icontract import require, ensure\n\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    # print(weights)\n    require(1 <= N <= 100)\n    require(all(1 <= w <= 100 for w in weights))\n\n    minimum_abs_diff = float(\"inf\")\n    weights.sort()\n    for i in range(N):\n        # print(weights[i])\n        for j in range(i, N):\n            if i!= j:\n                diff = abs(sum(weights[:i]) - sum(weights[i:j]))\n                minimum_abs_diff = min(minimum_abs_diff, diff)\n    return str(minimum_abs_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    weights = list(map(int, stdin.split()))\n    if N <= 2:\n        return str(0)\n    res = float(\"inf\")\n    for i in range(N):\n        if weights[i] > N:\n            continue\n        if i == 0:\n            tmp1 = 1\n        else:\n            tmp1 = weights[i - 1] + res\n        if i == N - 1:\n            tmp2 = 1\n        else:\n            tmp2 = weights[i + 1] + res\n        res = min(tmp1, tmp2)\n    return str(res)\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    S_1 = 0\n    S_2 = 0\n    for i in range(N):\n        if weights[i] > 2*weights[i+1]:\n            S_1 += weights[i]\n        else:\n            S_2 += weights[i]\n    return str(abs(S_1 - S_2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    T = weights.pop(0)\n\n    # if weights is empty, return max(weights) + min(weights)\n    if len(weights) == 0:\n        return max(weights) + min(weights)\n    # if T > len(weights), return max(weights) + min(weights)\n    if T > len(weights):\n        return max(weights) + min(weights)\n    # if T < 0, return max(weights) + min(weights)\n    if T < 0:\n        return max(weights) + min(weights)\n\n    # divide the array into two arrays\n    # s1_weights = weights[:T]\n    # s2_weights = weights[T:]\n\n    # O(n)\n    # s1_weights = sort(weights[:T])\n    # s2_weights = sort(weights[T:])\n\n    # min_diff = max(s1_weights) + min(s2_weights)\n    #\n    # # O(nlogn)\n    # # s1_weights = sorted(weights[:T])\n    # # s2_weights = sorted(weights[T:])\n    #\n    # # O(nlogn)\n    # # s1_weights = sorted(weights[:T])\n    # # s2_weights = sorted(weights[T:], reverse=True)\n    #\n    # # O(n)\n    # # s1_weights = sorted(weights[:T])\n    # # s2_weights = sorted(weights[T:], reverse=True)\n    #\n    # # O(nlogn)\n    # # s1_weights = sorted(weights[:T])\n    # # s2_weights = sorted(weights[T:], reverse=True)\n    #\n    # # O(n)\n    # # s1_weights = sorted(weights[:T])\n    # # s2_weights = sorted(weights[T:], reverse=True)\n\n    # O(nlogn)\n    s1_weights = sorted(weights[:T])\n    s2_weights = sorted(weights[T:], reverse=True)\n\n    min_diff = max(s1_weights) + min(s2_weights)\n\n    return min_diff\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    masses = list(map(int, stdin.strip().split()))\n    s1 = 0\n    s2 = 0\n    for i in range(1, t + 1):\n        if i > t:\n            s1 += masses[i - 1]\n        else:\n            s2 += masses[i - 1]\n    return str(abs(s1 - s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split(' ')\n    N = int(data[0])\n    nums = list(map(int, data[1:]))\n    nums.sort()\n    total_weight = sum(nums)\n    smaller_weight_groups = []\n    bigger_weight_groups = []\n    total_weight_in_smaller_groups = 0\n    total_weight_in_bigger_groups = 0\n\n    for i in range(1, N+1):\n        if i > total_weight:\n            break\n        if total_weight_in_smaller_groups == total_weight:\n            smaller_weight_groups.append(i)\n            total_weight_in_smaller_groups = 0\n            continue\n        total_weight_in_smaller_groups += nums[i-1]\n        total_weight_in_bigger_groups += nums[N-i]\n    if total_weight_in_bigger_groups < total_weight:\n        return '0'\n    else:\n        return str(abs(total_weight_in_smaller_groups - total_weight_in_bigger_groups))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n    t = 0\n    s_1 = 0\n    s_2 = 0\n    for w in weights:\n        if w > t:\n            s_1 += w\n        else:\n            s_2 += w\n        t += 1\n    return str(abs(s_1 - s_2))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    n_arr = list(map(int, stdin.split()))\n    n_arr.sort(key=lambda x: x)\n    res = 0\n    for i in range(1, len(n_arr)):\n        res += (n - i + 1) * (n_arr[i - 1] - i)\n    print(res)\n\nsolution(input())\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    for i in range(1, m):\n        a[0] = a[0] - a[i] + i * m\n        a[i] = a[0] - a[i] + i * m\n\n    return str(min(a[0], n * m - a[0]))\n\nsolution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\")\nsolution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\")\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    for r, row in enumerate(matrix):\n        for c, val in enumerate(row):\n            matrix[r][c] = (r - 1) * m + c\n    return str(min(matrix[i][i] - matrix[i - 1][i] for i in range(1, m)))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix = [[int(x) for x in stdin.strip().split()] for _ in range(n)]\n    \n    min_moves = 0\n    for i in range(n):\n        for j in range(m):\n            \n            curr = matrix[i][j]\n            if curr == 1:\n                matrix[i][j] = m + 1\n                \n            elif curr == m + 1:\n                matrix[i][j] = 1\n                \n            else:\n                matrix[i][j] = curr\n                \n        min_moves = max(min_moves, abs(matrix[0][j] - 1) + abs(matrix[i][0] - 1))\n        \n    for i in range(1, n):\n        for j in range(1, m):\n            \n            curr = matrix[i][j]\n            \n            if curr == 1:\n                matrix[i][j] = m + 1\n                matrix[i - 1][j] = m + 1\n                \n            elif curr == m + 1:\n                matrix[i][j] = 1\n                matrix[i - 1][j] = 1\n                \n            else:\n                matrix[i][j] = curr\n                matrix[i - 1][j] = curr\n                \n            min_moves = max(min_moves, abs(matrix[i][0] - 1) + abs(matrix[i][j] - 1))\n            min_moves = max(min_moves, abs(matrix[0][j] - 1) + abs(matrix[i][j] - 1))\n    \n    return str(min_moves)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    res = float('inf')\n    while True:\n        res = min(res, cyclic_shift(a))\n        if res == float('inf'):\n            break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix = [[int(j) for j in stdin.strip().split()] for _ in range(n)]\n    for i in range(1, n):\n        matrix[i][0] = matrix[i - 1][0]\n    for j in range(1, m):\n        matrix[0][j] = matrix[0][j - 1]\n    for i in range(1, n):\n        for j in range(1, m):\n            matrix[i][j] = (i - 1) * m + j\n    return str(min([x for x in matrix[0][1:] if x == min(x for x in matrix[0][1:] if x!= 2)]))"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    matrix = [[int(j) for j in stdin.split()[i]] for i in range(n)]\n    \n    shifted_matrix = [[matrix[j][(i + 1) % m] for j in range(n)] for i in range(m)]\n    \n    min_moves = 0\n    for j in range(m):\n        for i in range(n):\n            if j == 0:\n                min_moves = min_moves + abs(i - 1)\n            elif i == 0:\n                min_moves = min_moves + abs(j - 1)\n            else:\n                min_moves = min_moves + abs(i - 1) + abs(j - 1)\n                \n    return str(min_moves)\nsolution(\"\"\"\n3 3\n3 2 1\n1 2 3\n4 5 6\n\n\"\"\")\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        grid.append(row)\n    return str(min_moves_to_make_matrix_look_like_this(grid))\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n, m = stdin[:2]\n    a = stdin[2:]\n    moves = 0\n    while a:\n        for j in range(m - 1, 0, -1):\n            a[j] = a[j - 1]\n        a[0] = a[m - 1]\n        for j in range(m - 1, 0, -1):\n            a[j] = a[j - 1]\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = int(n/2)\n    f = []\n    for i in range(m):\n        s1 = a.pop(i)\n        s2 = a.pop(i)\n        if s1!= s2:\n            f.append((s1,s2))\n    return str(len(f))\n\"\"\"\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *skill = map(int, stdin.split())\n    if n % 2 == 0:\n        return str(int((n/2) + (skill[0]/2)))\n    else:\n        return str(int((n/2) + (skill[0]/2)) + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    students_skills = list(map(int, stdin.splitlines()[1].split()))\n    best_team = (None, None)\n    best_count = None\n    for count in range(1, n // 2 + 1):\n        team = [[], []]\n        for i in range(n):\n            if i < n // 2 - count or i >= n // 2:\n                team[0].append(i)\n            else:\n                team[1].append(i)\n        if len(team[0]) + len(team[1]) == n // 2:\n            count_problems_solved = 0\n            for student in range(n):\n                if student in team[0]:\n                    count_problems_solved += students_skills[student]\n            if best_count is None or count_problems_solved < best_count:\n                best_count = count_problems_solved\n                best_team = (team[0], team[1])\n    return str(best_count)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = input()\nn = int(stdin)"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split())\n    return str(min(sum(a[i] for i in range(1, n, 2)), sum(a[i] for i in range(2, n, 2))))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = [int(x) for x in stdin.split()]\n    skill_map = dict()\n    for idx, skill in enumerate(skills):\n        if skill in skill_map:\n            skill_map[skill].append(idx)\n        else:\n            skill_map[skill] = [idx]\n    team_count = n // 2\n    min_count = n\n    while team_count > 0:\n        last_two_skills = sorted(skill_map.keys(), reverse=True)\n        if last_two_skills[0] > last_two_skills[1]:\n            return \"IMPOSSIBLE\"\n        # print(last_two_skills)\n        if last_two_skills[0] == 0:\n            team_count -= 1\n            continue\n        new_team = []\n        for idx, skill in enumerate(last_two_skills):\n            if skill in skill_map:\n                for val in skill_map[skill]:\n                    if val not in new_team:\n                        new_team.append(val)\n                del skill_map[skill]\n        min_count = min(min_count, len(new_team))\n        team_count -= 1\n    return str(min_count)"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution definition goes here:"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    6\n    5 10 2 3 14 5\n    2\n    1 100\n    \n    Output:\n    5\n    \n    Input:\n    6\n    5 10 2 3 14 5\n    2\n    1 100\n    \n    Output:\n    99\n    '''\n    n, a = map(int, stdin.strip().split())\n    t = (n//2)\n    sum_n = 0\n    for i in range(0, t):\n        sum_n += a[i]\n    print(sum_n)\n\nsolution(input())\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    return str(sum([1 for i in range(1, n, 2) if a[i] == a[i + 1]]) + 1)\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hours = [int(x) for x in stdin.split()]\n    working_hours = hours[:]\n    resting_hours = hours[:]\n    resting_hours[0] = 0\n    count = 0\n    for i in range(1, n):\n        if working_hours[i - 1] == 1:\n            working_hours[i] = 0\n            resting_hours[i] = 1\n        elif resting_hours[i - 1] == 0:\n            working_hours[i] = 1\n            resting_hours[i] = 0\n        else:\n            working_hours[i] = 0\n            resting_hours[i] = 1\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = input()\nn = int(stdin)"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    schedule = list(map(int, stdin.split(\"\\n\")[1].split()))\n    max_rest = 0\n    cur_hour = 0\n    for hour in schedule:\n        cur_hour += hour\n        max_rest = max(max_rest, cur_hour)\n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    schedule = list(map(int, stdin.split()))\n    days = [0] * n\n    start = 0\n    last_start = 0\n    for i, rest in enumerate(schedule):\n        days[i] = start\n        if rest == 1 and start > 0:\n            start = 0\n        else:\n            start = 1\n        last_start = days[i]\n    days[n - 1] = start\n    return str(last_start)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hours = stdin.split()[1:]\n    rests = 0\n    res = 0\n    for i in range(n):\n        if int(hours[i]) == 1:\n            rests += 1\n        else:\n            res = max(res, rests)\n            rests = 0\n    res = max(res, rests)\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hours = list(map(int, stdin.split()))\n    rests = 0\n    for i in range(1, len(hours)):\n        if hours[i - 1] == 0 and hours[i] == 1:\n            rests += 1\n    return str(rests)\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    schedule = list(map(int, stdin[1]))\n\n    max_rest = 0\n    rest = 0\n    rest_interval = 0\n    for i in range(n):\n        rest = 1 - rest\n        if schedule[i] == rest:\n            rest_interval += 1\n        else:\n            max_rest = max(max_rest, rest_interval)\n            rest_interval = 1\n    return str(max(max_rest, rest_interval))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    H: int = int(stdin)\n    S: int = 0\n    M: int = 0\n    for i in range(N):\n        if S == H and M == 0:\n            S += 1\n            M = 1\n        else:\n            if M == 1:\n                S += 1\n                M = 0\n    return str(S)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # For each day\n    for day in range(n):\n        # For each hour\n        for hour in range(1, n):\n            # If the hour is working and the hour before is resting, then rest\n            if a[hour] == 0 and a[hour - 1] == 1:\n                print(hour)\n                # If the hour is resting and the hour before is working, then rest\n                if a[hour - 1] == 0 and a[hour] == 1:\n                    print(hour - 1)\n    return '\\n'"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    return str(max_count(int(stdin[0]), stdin[1]))\n\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def to_array(stdin: str) -> List[int]:\n        return list(map(int, stdin.split(\"\\n\")))\n\n    def is_even(number: int) -> bool:\n        return number % 2 == 0\n\n    def is_odd(number: int) -> bool:\n        return number % 2!= 0\n\n    def number_of_evens(numbers: List[int]) -> int:\n        count = 0\n        for i in range(len(numbers)):\n            if is_even(numbers[i]):\n                count += 1\n        return count\n\n    def number_of_odds(numbers: List[int]) -> int:\n        count = 0\n        for i in range(len(numbers)):\n            if is_odd(numbers[i]):\n                count += 1\n        return count\n\n    numbers = to_array(stdin)\n    return str(number_of_evens(numbers)) + \"\\n\" + str(number_of_odds(numbers))\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return (int(stdin))\n\nprint(solution(input()))\n\n\n\n\"\"\"\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    d = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X', 11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI'}\n    return(d[t])\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheese_dict = {}\n    for cheese in stdin.splitlines():\n        cheese_dict[cheese.split()[0]] = cheese.split()[1]\n\n    return len(cheese_dict.keys())\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    \n    count = 0\n    types = []\n    cheeses = {}\n    for line in lines:\n        name, type_ = line.split(\" \")\n        if type_ == \"soft\":\n            count += 1\n        cheeses[name] = type_\n    \n    types.append(count)\n    types.append(cheeses)\n    return types\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return stdin\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheese_list = []\n    while stdin:\n        cheese_list.append(stdin.split())\n        stdin = input()\n    cheese_list.sort()\n    return cheese_list"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cheeses = {}\n    for _ in range(N):\n        name, type = stdin.split()\n        cheeses[name] = type\n    cheeses_ordered = sorted(cheeses.items(), key=lambda x: x[1])\n    cheeses_ordered = list(map(lambda x: x[0], cheeses_ordered))\n    cheeses_ordered.sort()\n    return len(cheeses_ordered)"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of cheeses that can be made with the given cheeses\"\"\"\n    cheeses = set()\n    for line in stdin.splitlines():\n        cheeses.add(line.split()[0])\n    return len(cheeses)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution checks if any two cheeses are of different type, if they are, the number of cheeses is reduced by 1.\n    '''\n    n_cheeses = int(stdin)\n    cheeses = {}\n    for i in range(n_cheeses):\n        cheese = stdin.splitlines()[i]\n        cheese_type = cheese[1]\n        cheese_name = cheese[0]\n        if cheese_name in cheeses:\n            if cheeses[cheese_name][1] == cheese_type:\n                cheeses[cheese_name] += 1\n            else:\n                n_cheeses -= 1\n                cheeses[cheese_name] = 1\n        else:\n            cheeses[cheese_name] = [cheese_type, 1]\n    return n_cheeses\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for line in stdin.splitlines():\n        count += line.count('hard') + line.count('soft')\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    res = []\n    for i in range(1, len(a)):\n        res.append(a[i] + b[i])\n    res.sort()\n    for i in range(1, len(res)):\n        if res[i-1] == res[i]:\n            print(' '.join(map(str, res)))\n        else:\n            print(res[i-1], end=' ')\n    return ''\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, *a = map(int, stdin.split())\n    a = list(map(lambda x: x % n, a))\n    b = list(map(lambda x: x % n, stdin.split()))\n    print(' '.join(map(str, sorted(a + b))))"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b = sorted(b)\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    print(*c)\n\nsolution(input())"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(len(a)):\n        c.append((a[i] + b[i]) % len(a))\n    print(*c, sep=' ')\nsolution()\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    b = list(map(int, stdin[2]))\n    d = {x: i for i, x in enumerate(a)}\n    n_perms = {a: [i for i in range(n)]}\n    ans = ''\n    for i, j in enumerate(b):\n        if j in n_perms:\n            n_perms[j].remove(i)\n        else:\n            n_perms[j] = []\n        n_perms[a[i]].remove(i)\n    # print(n_perms)\n    for i in range(n):\n        if i in n_perms and len(n_perms[i]) > 0:\n            ans += str(i) +'' + str(i) +''\n        else:\n            ans += '0 '\n    return ans\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    c.sort()\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1:]))\n    b = list(map(int, a))\n    c = list(range(n))\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n\n\nsolution(input())\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (stdin[i] for i in range(2))\n    a, b = (int(x) for x in (a, b))\n    n = a + b\n    c = 0\n    for i in range(1, n + 1):\n        c += i\n    d = int((c / n) * a)\n    e = int((c / n) * b)\n    return f\"{d} {e}\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n\n    b = list(map(int, stdin.split()))\n    b = b[1:]\n\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    c.sort()\n    for i in range(n):\n        c[i] = c[i] % n\n    c.sort()\n    for i in range(n):\n        c[i] = b[c[i]]\n    c =''.join(map(str, c))\n    return c\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    c = [0] * n\n    for i in range(n):\n        c[a[i]] = b[i]\n        c[b[i]] = a[i]\n    print(' '.join(map(str, c)))\n    return"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def rotate_left(matrix, N):\n        return [[matrix[i][N-1] for i in range(N)] for _ in range(N)]\n\n    def rotate_right(matrix, N):\n        return rotate_left(rotate_left(matrix, N), N)\n\n    matrix = [[int(x) for x in stdin.strip().split()]]\n    \n    if N == 1:\n        return \"\".join([str(x) for x in matrix[0]])\n\n    for _ in range(N-2):\n        matrix = rotate_right(matrix, N)\n\n    return \"\".join([str(x) for x in matrix[0]])\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nstdin = '0\\n1\\n1\\n0'\nprint(solution(stdin))\n\nstdin = '1\\n1\\n1\\n0'\nprint(solution(stdin))"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n    return \"a\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join('1' if int(x) else '0' for x in stdin.splitlines())\n\nprint(solution('''\n0\n1\n1\n0\n'''))\nprint(solution('''\n0\n1\n1\n0\n'''))\nprint(solution('''\n1\n1\n1\n0\n'''))\nprint(solution('''\n1\n1\n1\n0\n'''))"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    imgs = stdin.splitlines()\n    for img in imgs:\n        if img == '0':\n            return '0'\n        elif img == '1':\n            return '1'\n        else:\n            print('wrong input')\n        break"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_list = stdin.splitlines()\n    return \"\".join(map(lambda x: str(x), filter(lambda x: x, map(lambda x: list(map(int, list(x))), test_list))))"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0\\n1\\n1\\n0')\n    '1'\n    >>> solution('0\\n1\\n1\\n0')\n    '0'\n    >>> solution('0\\n0\\n1\\n1')\n    '1'\n    >>> solution('1\\n0\\n0\\n1')\n    '1'\n    \"\"\"\n    for i in range(4):\n        image = stdin.strip().splitlines()\n        for j in range(1,5):\n            image[i] = image[i] + image[i+1]\n    for i in range(4):\n        image[i] = image[i] + image[i+1]\n    for i in range(4):\n        image[i] = image[i] + image[i+1]\n    for i in range(4):\n        image[i] = image[i] + image[i+1]\n    for i in range(4):\n        image[i] = image[i] + image[i+1]\n    return str(image[3][0])\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    ans = \"No\"\n    if t + s / d >= d:\n        ans = \"Yes\"\n    return ans\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    return \"Yes\" if D <= S * 60 + T or S <= D * 60 + T else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lines = stdin.splitlines()\n    d, t, s = map(int, lines[0].split())\n    if (d * t) % s == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    minutes = t * s // d\n    if minutes >= t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(\"1000 15 80\")"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if D > S * T:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [D, T, S] = stdin.split()\n    D = int(D)\n    T = int(T)\n    S = int(S)\n    if D < 1 or D > 10000:\n        raise Exception(f'Invalid input. D should be in range 1 to 10000.')\n    if T < 1 or T > 10000:\n        raise Exception(f'Invalid input. T should be in range 1 to 10000.')\n    if S < 1 or S > 10000:\n        raise Exception(f'Invalid input. S should be in range 1 to 10000.')\n    if D == T:\n        print('Yes')\n        return\n    if D > T:\n        print('No')\n        return\n    if S <= D:\n        print('Yes')\n        return\n    if D < T:\n        print('No')\n        return\n    if S > T:\n        print('No')\n        return\n    if D < S:\n        print('Yes')\n        return\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = map(int, stdin.split(' '))\n    print(is_takahashi_meet_up(*takahashi))"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = stdin.strip().split()\n    return 'Yes' if int(T) + int(S) <= int(D) else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if D*T + D*S <= D*T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    flag = False\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]!= b[i] and a[i][j]!= b[j]:\n                a[i][j] = 0\n            else:\n                flag = True\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]!= 0:\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        for i in range(n):\n            for j in range(n):\n                if a[i][j] == 0:\n                    a[i][j] = '.'\n        for i in range(n):\n            for j in range(n):\n                print(a[i][j], end='')\n            print()\n        print()\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = stdin.split()[1:]\n    for i in range(N):\n        for j in range(N):\n            if i + 1 == j and A[i] == A[j]:\n                return \"Yes\"\n            if i + 1 == j and A[i]!= A[j]:\n                return \"No\"\n            if i - 1 == j and A[i] == A[j]:\n                return \"Yes\"\n            if i - 1 == j and A[i]!= A[j]:\n                return \"No\"\n    for i in range(N):\n        for j in range(N):\n            if (N - i - 1) == j and A[i] == A[j]:\n                return \"Yes\"\n            if (N - i - 1) == j and A[i]!= A[j]:\n                return \"No\"\n            if j - (N - i - 1) == i and A[i] == A[j]:\n                return \"Yes\"\n            if j - (N - i - 1) == i and A[i]!= A[j]:\n                return \"No\"\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, diag1, diag2 = stdin.split()\n    rows = int(rows)\n    cols = int(cols)\n    diag1 = list(map(int, diag1.split()))\n    diag2 = list(map(int, diag2.split()))\n\n    for i in range(rows):\n        for j in range(cols):\n            if diag1[i] == diag2[j]:\n                continue\n            if diag1[i]!= diag2[j] and diag1[i] == diag2[j - 1] and diag1[i] == diag2[j + 1]:\n                return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    # print(n)\n    assert 1 <= n <= 10\n    bingo_sheet = list()\n    numbers = list()\n    for line in lines:\n        # print(line)\n        line = line.split()\n        # print(line)\n        line = [int(i) for i in line]\n        # print(line)\n        bingo_sheet.append(line)\n        # print(bingo_sheet)\n        numbers += line\n    # print(bingo_sheet)\n    assert len(bingo_sheet) == 3\n    assert len(numbers) == n\n    # print(numbers)\n    # print(bingo_sheet)\n    diag_1 = sum([bingo_sheet[0][i - 1] == numbers[i - 1] for i in range(1, n + 1)])\n    diag_2 = sum([bingo_sheet[1][i - 1] == numbers[i - 1] for i in range(1, n + 1)])\n    diag_3 = sum([bingo_sheet[2][i - 1] == numbers[i - 1] for i in range(1, n + 1)])\n    if diag_1 == 3 or diag_2 == 3 or diag_3 == 3:\n        return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = sys.stdin.read()\n    A = list(map(int, stdin.strip().split()))\n    N = int(stdin.strip().split()[-1])\n    for i in range(1, len(A)):\n        A[i] += A[i-1]\n    for i in range(1, len(A)):\n        A[i] += A[i-1]\n    for i in range(1, len(A)):\n        A[i] += A[i-1]\n    if N in A:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"Yes\" if A.count(N) else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split(\"\\n\")))\n    n = arr.pop(0)\n    arr = list(map(list, arr))\n    bingo_sheet = [[arr[i][j] for i in range(n)] for j in range(n)]\n    cols = get_cols(bingo_sheet)\n    rows = get_rows(bingo_sheet)\n    diags = get_diags(bingo_sheet)\n    return \"Yes\" if (cols or rows or diags) else \"No\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    bingo = []\n    for i in range(1, N+1):\n        bingo.append([int(j) for j in stdin[i].split()])\n    ans = bingo_check(bingo)\n    return 'Yes' if ans else 'No'\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [[int(i) for i in stdin.split('\\n')[0].split(' ')] for _ in range(3)]\n    b = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a_counter = Counter()\n    b_counter = Counter()\n    for i in range(3):\n        for j in range(3):\n            a_counter[(i, j)] = a[i][j]\n            b_counter[a[i][j]] += 1\n    for i in range(3):\n        for j in range(3):\n            a_counter[(i, j)] -= b[a_counter[(i, j)]]\n    return 'Yes' if a_counter == b_counter else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\"\\n\")\n    # print(arr)\n    arr = [line.split(\" \") for line in arr]\n    # print(arr)\n    n = int(arr[0][1])\n    row_1 = int(arr[1][0])\n    row_2 = int(arr[2][0])\n    row_3 = int(arr[3][0])\n    col_1 = int(arr[4][0])\n    col_2 = int(arr[5][0])\n    col_3 = int(arr[6][0])\n    b_1 = int(arr[7][0])\n    b_2 = int(arr[8][0])\n    b_3 = int(arr[9][0])\n    # print(n, row_1, row_2, row_3, col_1, col_2, col_3, b_1, b_2, b_3)\n    if n > 0 and row_1!= row_2!= row_3!= row_1:\n        if row_1 == row_2 == row_3:\n            for row in range(1, n + 1):\n                if row_1 == row_2 == row_3 == row:\n                    print(f\"Yes\")\n                    return\n            else:\n                print(f\"No\")\n                return\n        elif row_1 == row_2:\n            if row_1!= row_3:\n                if row_1 == row_3 == row_2:\n                    print(f\"Yes\")\n                    return\n            else:\n                print(f\"No\")\n                return\n        elif row_1 == row_3:\n            if row_1!= row_2:\n                if row_1 == row_2 == row_3:\n                    print(f\"Yes\")\n                    return\n            else:\n                print(f\"No\")\n                return\n        elif row_2 == row_3:\n            if row_1!= row_2:\n                if row_1 == row_2 == row_3:\n                    print(f\"Yes\")\n                    return\n            else:\n                print(f\"No\")\n                return\n        elif row_1 == row_2 == row_3:\n            print(f\"Yes\")\n            return\n    else:\n        print(f\"No\")\n        return\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = stdin.split()\n    a, b = (int(a), int(b))\n    n = int(n)\n    # make a 2d list\n    puzzle = [[0 for j in range(b)] for i in range(a)]\n    for i in range(a):\n        for j in range(b):\n            puzzle[i][j] = int(stdin[i + j])\n\n    diag1 = a\n    diag2 = b\n    diag3 = a + b\n    for i in range(a):\n        if puzzle[i][i] == 0:\n            if puzzle[i][i + 1] == 0:\n                diag1 -= 1\n            if puzzle[i + 1][i] == 0:\n                diag2 -= 1\n            if puzzle[i + 1][i + 1] == 0:\n                diag3 -= 1\n    if diag1 == 0 or diag2 == 0 or diag3 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    ans = 0\n    count = 0\n    for i in range(N):\n        if count < M:\n            count += 1\n            ans += a[i]\n        else:\n            ans += M\n        if count == M:\n            break\n\n    if count!= M:\n        return -1\n\n    return str(ans)"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = stdin.split()\n    # N, M = int(N), int(M)\n    #\n    # a = list(map(int, stdin.split()))\n    # max_hang_out = float('-inf')\n    #\n    # for i in range(N):\n    #     if a[i] <= M:\n    #         max_hang_out = max(max_hang_out, a[i] + (N - i) * (M - a[i]))\n    #\n    # if max_hang_out == float('-inf'):\n    #     print(-1)\n    # else:\n    #     print(max_hang_out)\n    # return\n    return"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n\n    d = 0\n    for i in range(m):\n        if d + a[i] <= n:\n            d += a[i]\n\n        else:\n            return -1\n\n    return d\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n\n    assignments = []\n    for _ in range(M):\n        assignments.append(list(map(int, stdin.split())))\n\n    assignment_count = 0\n    max_days = 0\n    current_day = 1\n\n    while assignment_count < N:\n        for day in range(current_day, N + 1):\n            if assignment_count < N:\n                for assignment in assignments:\n                    if day == assignment[0] or day == assignment[1]:\n                        assignment_count += 1\n                        if day == N:\n                            if assignment_count < N:\n                                assignment_count += 1\n                            break\n\n        max_days = max(max_days, assignment_count)\n        current_day += 1\n        assignment_count = 0\n\n    return max_days if max_days > 0 else -1\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    A = list(map(int, stdin.split(\" \")))\n    A = sorted(A)\n    if not A:\n        return -1\n    n = len(A)\n    if n == 1:\n        return A[0]\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] == N:\n            return A[mid]\n        elif A[mid] > N:\n            if mid == 0:\n                return A[mid]\n            else:\n                right = mid - 1\n        else:\n            left = mid + 1\n    return A[left]\n    "
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (N, M) = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    sol = -1\n    max_days = 0\n    for i in range(M):\n        if A[i] > max_days:\n            max_days = A[i]\n        else:\n            sol = -1\n            break\n    return str(sol)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def printMaxDays(days):\n        return max(days) if days else -1\n\n    def getMaxDays(day, a):\n        if len(a) == 0:\n            return printMaxDays(day)\n        else:\n            return getMaxDays(day+a[0], a[1:])\n\n    return str(getMaxDays(1, a))\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    assignments = list(map(int, stdin.split()))\n    s = 0\n    for i in range(m):\n        s += assignments[i]\n        if s > n:\n            return -1\n    return s + n - assignments[-1]\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.strip().split()\n    N, M = int(stdin[0]), int(stdin[1])\n    assignments = list(map(int, stdin[2:]))\n    n = len(assignments)\n\n    # function to find the maximum number of days,\n    # which is the number of days Takahashi can hang out during the vacation\n    # if no assignment is done during the vacation\n    def helper(n, days):\n        assignment_days = 0\n        total_days = days\n        for assignment in assignments:\n            if total_days > assignment_days:\n                total_days = total_days - assignment + 1\n            else:\n                return -1\n        return total_days\n\n    # the maximum number of days Takahashi can hang out during the vacation,\n    # if no assignment is done during the vacation\n    max_days = helper(n, N)\n    if max_days == -1:\n        return 'No'\n    else:\n        return str(max_days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    day = 0\n    while N >= 1 and M >= 1:\n        if day + N <= 30:\n            day += N\n            N = 0\n        else:\n            day = 30 - N\n            N = 0\n        if day + M <= 30:\n            day += M\n            M = 0\n        else:\n            day = 30 - M\n            M = 0\n        print(day)\n        N, M = map(int, stdin.split())\n\n    if N >= 1:\n        day = 30 - N\n        N = 0\n    else:\n        day = 30 - M\n        M = 0\n    if day < 0:\n        return \"-\"\n    print(day)\n    return \"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    for i in range(1, N+1):\n        if i % 100 == 0:\n            if i % D == 0:\n                return str(i)"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    p = 1\n    while p * 100 < n:\n        p += 1\n    q = p\n    while q * 100 > n:\n        q -= 1\n    return str(p * 100 + q)\n\nsolution(\"0 5\")\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    array = [i for i in range(1, 1000001) if not i % 100]\n    count = 0\n    for i in range(N):\n        j = count + D\n        if j >= len(array):\n            j = j % len(array)\n        count = j\n    return array[j]\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.split(\" \")[0])\n    N = int(stdin.split(\" \")[1])\n    for num in range(N):\n        if 100 % D == 0:\n            return str(num)\n        D = D + 1"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 5')\n    '5'\n    >>> solution('0 10')\n    '4'\n    \"\"\"\n    import math\n    D, N = map(int, stdin.split())\n    N_N_D = int(math.ceil(math.log(N, D)))\n    print(N_N_D)\n    return\n\nsolution(\"0 5\")\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split()\n\n    # parse stdin\n    D = int(stdin_arr[0])\n    N = int(stdin_arr[1])\n\n    return N-1\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.split()\n    d = int(result[0])\n    n = int(result[1])\n\n    if d == 0 or n == 0:\n        return '-1'\n\n    result_set = set()\n    for i in range(1, n + 1):\n        temp = i\n        while temp % 100!= 0:\n            temp = temp // 10 + temp % 10\n        result_set.add(temp)\n\n    result_set = sorted(result_set)\n    return str(result_set[n - 1])\n\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import log10\n    import heapq\n    n, d = list(map(int, stdin.split()))\n    nums = list(range(1,n+1))\n    heapq.heapify(nums)\n    h = []\n    for i in range(n):\n        if len(h) == 0:\n            heapq.heappush(h, nums[i])\n        else:\n            if len(h) == 1:\n                heapq.heappush(h, -heapq.heappop(h) * -10)\n            else:\n                if -h[0] * 10 - heapq.heappop(h) < 0:\n                    heapq.heappush(h, -heapq.heappop(h) * -10)\n                heapq.heappush(h, nums[i])\n    print(heapq.heappop(h) if len(h) > 0 else -1)"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, _, D, N = stdin.split()\n    D, N = int(D), int(N)\n    if D == 0:\n        return \"1\"\n    elif D == 1:\n        return \"2\"\n    elif D == 2:\n        return \"4\"\n\nsolution(input())\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return str(max(map(gcd, arr)))\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    return str(max(inputs))\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split(' ')))\n    for i in range(n - 1, 0, -1):\n        if arr[i - 1] == 0:\n            continue\n        for j in range(i, n):\n            if arr[i - 1] % arr[j] == 0:\n                arr[i - 1] = arr[j]\n                break\n    return str(arr[-1])\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = list(map(int, stdin.split()))\n    maxi = max(num)\n    while maxi!= 1:\n        for i in range(len(num)):\n            num[i] //= maxi\n        maxi = max(num)\n    return str(maxi)"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    # find gcd for list\n    gcd = a[0]\n    for i in range(1, N):\n        gcd = gcd_elem(gcd, a[i])\n    \n    # print gcd\n    return str(gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return max(gcd(a), gcd([gcd(a), gcd(a[1:]), gcd(a[2:])]))\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    n = int(inputs[0])\n    a = list(map(int, inputs[1:]))\n    return str(max(gcd(a), 1))\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = stdin.split()\n    a.sort()\n    return str(max(a[i]*a[j]//math.gcd(a[i],a[j]) for i in range(N) for j in range(i+1,N)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    N = int(stdin_list[0])\n    arr = list(map(int, stdin_list[1].split()))\n    nums = []\n    for i in arr:\n        nums.append(i)\n    return max(nums)\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    return''.join(map(str, A))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 3 1\\n\")\n    '3 1 2'\n    >>> solution(\"5\\n2 3 4 1 5\\n\")\n    '1 2 3 4 5'\n    >>> solution(\"4\\n2 3 1 5\\n\")\n    '1 2 3 5'\n    >>> solution(\"8\\n2 3 1 5 8 6 7\\n\")\n    '1 2 3 5 8 7 6'\n    \"\"\"\n    # the input is in the format of a string\n    # convert the string into a list\n    stdin = stdin.split(\"\\n\")\n    # get the number of students\n    n = int(stdin[0])\n    # get the student number and names of the students\n    # in the format (student number, name)\n    # convert the input into a list of tuples (student number, name)\n    std = list(map(lambda x: tuple(x.split()), stdin[1:]))\n    # sort the list of tuples by the second element of each tuple, the student number\n    std.sort(key=lambda x: x[1])\n    # convert the list of tuples into a list of student numbers\n    std_nums = list(map(lambda x: x[0], std))\n    # print the student numbers in the order they entered the classroom\n    print(\"\\n\".join(map(str, std_nums)))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string of student numbers.\n\n    Returns:\n        A string of student numbers in the order they entered the classroom.\n    '''\n    lines = stdin.splitlines()\n    students = list(map(int, lines[1].split()))\n    students = sorted(students)\n    print(' '.join(str(i) for i in students))\n    return students\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n\n    result = []\n\n    while len(arr) > 0:\n        # Get the max value in the array.\n        max_val = max(arr)\n        result.append(max_val)\n        # Remove the value in the array.\n        arr.remove(max_val)\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    return''.join(map(str, sorted(A)))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    std_arr = stdin.split()\n    std_arr = list(map(int, std_arr))\n    std_arr.sort()\n    return''.join(map(str, std_arr))\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    student_numbers = stdin.split()\n    student_numbers.sort()\n    return''.join(student_numbers)"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: list[int] = list(map(int, stdin.split()))\n    students: list[int] = []\n    for i in range(n):\n        students.append(i + 1)\n    for i in range(n):\n        students[a[i] - 1] = -1\n    students.sort()\n    for i in range(n):\n        if students[i] == -1:\n            continue\n        print(students[i], end=\" \")\n    return \"\""
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students = stdin.split()\n    students = list(map(int, students))\n\n    students.sort()\n    for student in students:\n        print(student, end=\" \")\n    return ''\n\nsolution(\"3 2 1\")\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    students = list(map(int, stdin.split()))\n\n    students.sort()\n\n    print(\" \".join(map(str, students)))\n\n    return \" \".join(map(str, students))"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.strip().split(\" \")\n    A, B, X = int(A), int(B), int(X)\n    lst = []\n    while A:\n        lst.append(A)\n        A = A * 10\n    while B:\n        lst.append(B)\n        B = B * 2\n    while X:\n        lst.append(X)\n        X = X * 10\n    lst.sort(reverse=True)\n    for i in lst:\n        if X <= 0:\n            break\n        if i*i <= X:\n            X -= i*i\n        else:\n            break\n    return str(X) if X > 0 else \"0\"\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, x) = map(int, stdin.split())\n    if a * x + b * max(len(str(x)) * x, 1) <= x:\n        return '0'\n    return str(max(a * x + b * max(len(str(x)) * x, 1), a * x + b * max(len(str(x)) * x, 1),\n                   a * x + b * max(len(str(x)) * x, 1) + 100000))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    x *= (a + b) * x / 10\n    for i in range(10, x + 1):\n        if len(str(i)) == len(str(x)):\n            return i\n    return 0"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.split()\n    A = int(A)\n    B = int(B)\n    X = int(X)\n    \n    int_list = list(range(1, 10**9 + 1))\n\n    price = 1\n    i = 0\n    while i < len(int_list) and price * int_list[i] < X:\n        price *= 10\n        i += 1\n\n    if i < len(int_list) and price * int_list[i] <= X:\n        return str(int_list[i])\n\n    return '0'"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A * A * A + A * A * B + A * A * X + A * B * X + A * X + \\\n       B * A + B * B + B * X + B * X + X + \\\n       A * X + B * X + X + X + X * X + \\\n       A + B + X + X + X * X + \\\n       A + X + X + X + X * X + \\\n       A + X + X + X + X * X + \\\n       X * X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X + X * X + \\\n       X + X + X + X +"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    str_len = len(str(X))\n\n    for i in range(10 ** str_len):\n        if (X * (10 ** str_len) * i + A * i + B * (i % 10)) > X:\n            return str(i)\n\n    return \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, X) = map(int, stdin.split())\n    dp = {}\n\n    def solve(A: int, B: int, X: int, dp: dict) -> int:\n        if (A, B, X) in dp:\n            return dp[(A, B, X)]\n\n        if X == 0:\n            return 0\n\n        ans = -1\n        for i in range(1, 10):\n            tmp = i * A + solve(A, B, X-1, dp)\n            ans = max(ans, tmp)\n\n        dp[(A, B, X)] = ans\n        return ans\n\n    return str(solve(A, B, X, dp))\n\nsolution(\"10 7 100\")\nsolution(\"4 1 3\")\nsolution(\"1 10 10\")\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B,X = map(int,stdin.split(\" \"))\n    if A == 0 and B == 0:\n        return \"0\"\n    if X < A:\n        return \"0\"\n    maxi = (X//A) * A + (X % A) // (B*10) * B + (X % (A*B)) // (10**(len(str(X))-1)) * 10\n    if maxi > X:\n        return str(maxi)\n    return \"0\"\n\nsolution(input())\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A,B,X = map(int,stdin.split())\n    if X<=0:\n        return str(0)\n    if A==0 and B==0:\n        return str(0)\n    if A==0:\n        return str(X*X+B*X)\n    if A==1:\n        return str(X*B+X)\n    x=1\n    while True:\n        if len(str(x))<X:\n            break\n        x+=1\n    ans=int(X*x+A*B)\n    while True:\n        if len(str(ans))<=X:\n            break\n        ans+=1\n    return str(ans)"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    dp = [[0] * (X + 1) for _ in range(10)]\n    dp[1][0] = A\n    for i in range(2, 10):\n        for j in range(X + 1):\n            if j == 0:\n                dp[i][j] = A\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + (10 * i) * (10 ** (j - 1)))\n    ans = max(dp[9][:X + 1])\n    if ans == 0:\n        return \"0\"\n    for i in range(9, 0, -1):\n        if dp[i][X] >= ans:\n            ans = dp[i][X]\n    return str(ans)\n\nsolution(\"10 7 100\")\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string representing the input data.\n    Returns the number of Takahashi's friends who can ride the roller coaster.\n    '''\n\n    # check length of input\n    if len(stdin.split())!= 2:\n        return -1\n\n    N, K = list(map(int, stdin.split()))\n\n    # check if first input is smaller than second input\n    if N < K:\n        return -1\n\n    # initialize the list to count h_i\n    h_list = [0] * N\n\n    for i in range(len(h_list)):\n        h_list[i] = int(input())\n\n    # for each person, see if they can ride the roller coaster\n    for i in range(N):\n        if h_list[i] <= K:\n            print(i + 1)\n\n    return 0\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = list(map(int, stdin.split()))\n    max_height = max(h_list)\n    if K >= max_height:\n        return str(len(set(h_list)))\n    else:\n        return str(len(set(h_list)))\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h_arr, _ = stdin.split('\\n')\n    h_arr = list(map(int, h_arr.split()))\n    h_arr.sort()\n    _, k = stdin.split()\n    k = int(k)\n\n    count = 0\n    for i, h in enumerate(h_arr):\n        if h < k:\n            count += 1\n            continue\n        if h == k:\n            count += 1\n        else:\n            break\n    \n    print(count)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(N - 1):\n        if array[i] + array[i + 1] > K:\n            count += 1\n        else:\n            continue\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    # data = stdin.split()\n    # N, K = data[0], data[1]\n    # N, K = int(N), int(K)\n\n    # h = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n\n    num_h = 0\n    for i in range(len(h)):\n        if h[i] >= K:\n            num_h += 1\n\n    return str(num_h)\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.strip().split('\\n')\n    stdin = stdin[1:]\n    stdin = list(map(int, stdin))\n    stdin = list(map(int, stdin[0].split()))\n    K, N = stdin[0], stdin[1]\n    stdin.pop(0)\n    stdin.pop(0)\n\n    h_1, h_2, h_3 = stdin\n    min_h = min(h_1, h_2, h_3)\n    max_h = max(h_1, h_2, h_3)\n    if min_h <= K and max_h >= K:\n        return str(min(N, max_h - K)) + '\\n'\n    return str(0) + '\\n'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n    4 150\n    150 140 100 200\n    ''')\n    2\n    '''\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    l = len(h)\n    res = 0\n    while h:\n        h.sort()\n        if h[0] >= K:\n            h.pop(0)\n            res += 1\n            if h:\n                h.sort(reverse=True)\n    return str(res)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    total = 0\n    for i in range(n):\n        total += 1 if (h[i] >= k) else 0\n\n    return str(total)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n    h = sorted([int(i) for i in stdin.split()])\n    print(len([i for i in range(1, N+1) if sum(h) - i <= K]))\n    return "
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n, m = input_lines[0].split()\n    n = int(n)\n    m = int(m)\n    votes = list(map(int, input_lines[1].split()))\n\n    # Return the most popular item, if it exists.\n    return \"Yes\" if len(get_popular_items(votes, m, n)) > 0 else \"No\"\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_counts = list(map(int, stdin.split()))\n    max_votes = max(A_counts)\n    if (max_votes * 4) <= sum(A_counts):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n\n    votes = []\n    for i in range(N):\n        votes.append(int(stdin.split(\" \")[i]))\n\n    votes = sorted(votes, reverse=True)\n\n    counter = 0\n    for i in range(M):\n        if counter < len(votes) and votes[i] == i+1:\n            counter += 1\n\n    if counter >= len(votes) // 4:\n        return \"Yes\"\n    return \"No\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    items, votes = map(int, stdin.strip().split())\n\n    all_items = set()\n    for i in range(1, items+1):\n        all_items.add(i)\n\n    for i in range(1, votes+1):\n        all_items.remove(i)\n\n    all_items_count = len(all_items)\n    popular_items = int(all_items_count / (4*votes))\n    if popular_items == 0:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    n = int(line[0])\n    m = int(line[1])\n    votes = stdin.split(\"\\n\")[1:]\n    votes = [int(x) for x in votes]\n    if n == m:\n        print(\"Yes\")\n    elif sum(votes) <= 4*m:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = [*map(int, stdin.split())]\n    popular = sorted(votes)[::-1][:m]\n    cnt = 0\n    for vote in votes:\n        if vote in popular:\n            cnt += 1\n        if cnt > m//4:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse stdin\n    N, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n\n    # for each item, we need to get the number of votes\n    # we need to use a set\n    vote_set = set()\n\n    for i in range(N):\n        vote_set.add(A[i])\n\n    # we need to add the item with the least votes\n    # to the set\n    vote_set.add(min(vote_set))\n\n    # now we have a set of M\n    # we need to check\n    # if the set is divisible by 4\n    # by dividing by 4 we are going to get\n    # the number of votes needed to select a certain\n    # item\n    if len(vote_set) % 4 == 0:\n        # we have more than M\n        # so we can return Yes\n        return \"Yes\"\n    else:\n        # we don't have enough votes\n        # so we return No\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    counts = list(map(int, stdin.split()))\n    counts.sort()\n    popularity = 0\n    for i, c in enumerate(counts):\n        if i == 0:\n            popularity = 1\n        elif i == 1:\n            popularity = counts[0] / counts[1]\n        elif i == 2:\n            popularity = (counts[0] + counts[1]) / counts[2]\n        elif i == 3:\n            popularity = counts[0] / counts[2]\n        if popularity >= 1 / 4 * M:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 3:\n        raise ValueError(\"Not a valid input\")\n\n    height, width, k = map(int, stdin.split())\n\n    if (height <= 0) or (width <= 0) or (k <= 0):\n        raise ValueError(\"Not a valid input\")\n\n    black_count = 0\n    row_check_dict = {x: False for x in range(height)}\n    col_check_dict = {x: False for x in range(width)}\n    for i in range(k):\n        row, col = map(int, stdin.split())\n        if row_check_dict[row - 1] and col_check_dict[col - 1]:\n            black_count += 1\n        row_check_dict[row - 1] = True\n        col_check_dict[col - 1] = True\n    return str(black_count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = list(map(int, stdin.split()))\n    nums = list(stdin.split())\n\n    dp = [[0] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            dp[i][j] = int(nums[i * W + j] == '#')\n\n    # DP matrix has height H and width W.\n    # Each cell is (x, y) where x is row, y is column.\n    # Time: O(H * W)\n    # Space: O(H * W)\n    # DP solution.\n    # dp[i][j] = (dp[i - 1][j] if i!= 0 else False) + (dp[i][j - 1] if j!= 0 else False)\n    # Two options of painting white or black.\n    # Since we can paint any cell white, dp[i][j] == True.\n    # For painting white, we need to make sure we paint at least one white cell\n    # for every other black cell.\n    # We can make a copy of the DP matrix to record the position of white cells.\n    # Then, we can record the position of black cells in two ways.\n    # 1. Compare a white cell with a black cell\n    # 2. Compare a black cell with a white cell\n    dp = [[False] * W for _ in range(H)]\n    for j in range(W):\n        dp[0][j] = True\n    for i in range(1, H):\n        dp[i][0] = True\n    # dp[i][j] = dp[i - 1][j] if i!= 0 else dp[i][j - 1] if j!= 0 else True\n    # dp[i][j] = (dp[i - 1][j] if i!= 0 else False) + (dp[i][j - 1] if j!= 0 else False)\n    # dp[i][j] = True if i == 0 or j == 0 else dp[i - 1][j] if i!= 0 else dp[i][j - 1] if j!= 0 else True\n    for j in range(1, W):\n        dp[0][j] = True if i == 0 else dp[0][j - 1] if j!= 0 else True\n    for i in range(1, H):\n        dp[i][0] = True if j == 0 else dp[i - 1][0] if i!= 0 else True\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if dp[i][j]:\n                count += 1\n    print(count)\n    return str(count)\n\nsolution(stdin)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    [height, width, k] = stdin.split(' ')\n    height = int(height)\n    width = int(width)\n    k = int(k)\n    count = 0\n    # i = 1\n    # j = 1\n    # while(i < height and j < width):\n    for i in range(height):\n        for j in range(width):\n            # if(i == 1 and j == 1):\n            #     print('red')\n            if(i == 1 or j == 1):\n                count += 1\n            if(count == k):\n                return count\n            elif(count < k and i == height-1 and j == width-1):\n                count += 1\n            # if(i == height-1 and j == 1):\n            #     print('black')\n            # if(i == height-1 and j == width-1):\n            #     print('black')\n            # else:\n            #     print('red')\n    return count\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    c = stdin.split(\"\\n\")\n    return str(int(H == K) + int(W == K) + int(c[0] == \"#\" * W + \".\" * H))\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (h, w, k) = stdin.split()\n    h, w, k = int(h), int(w), int(k)\n\n    #print(f'h:{h}, w:{w}, k:{k}')\n    def color_point(h, w, k, red, white):\n        for i in range(h):\n            for j in range(w):\n                if (i == 0 or i == h-1) and (j == 0 or j == w-1):\n                    continue\n                if (i == 0 or i == h-1) and (j == w-1):\n                    red += 1\n                elif (i == h-1) and (j == 0 or j == w-1):\n                    white += 1\n                else:\n                    if red >= k:\n                        return 0\n                    elif white >= k:\n                        return 0\n                    else:\n                        if white > red:\n                            red += 1\n                        elif white < red:\n                            white += 1\n                #print(f'i:{i}, j:{j}, red:{red}, white:{white}')\n        return red * white\n    #print(f'color_point({h}, {w}, {k}, {red}, {white})')\n    return str(color_point(h, w, k, 0, 0))"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = list(map(int, stdin.split()))\n    totals = [['.' for j in range(W)] for i in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < H and j < W:\n                totals[i][j] = stdin[i * W + j]\n            else:\n                totals[i][j] = '.'\n    for x in totals:\n        print(''.join(x))\n    answer = 0\n    for i in range(1, H):\n        for j in range(1, W):\n            white = 0\n            black = 0\n            if totals[i][j] == '#':\n                black = 0\n            else:\n                black = 1\n            if totals[i][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j-1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+2][j+1] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i+1][j+2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j-2] == '#':\n                white = 0\n            else:\n                white = 1\n            if totals[i-2][j"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    c_h, c_w = map(stdin.split(), zip())\n    total_h, total_w = H + 2, W + 2\n\n    count_h = (total_h, total_h)\n    count_w = (total_w, total_w)\n    for h in range(1, total_h):\n        for w in range(1, total_w):\n            if c_h[h - 1] == c_w[w - 1] == '#':\n                count_h = (min(h, count_h[0]), max(h, count_h[1]))\n                count_w = (min(w, count_w[0]), max(w, count_w[1]))\n    return (count_h[0] * count_w[1] - K)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    H = int(stdin[0].split()[0])\n    W = int(stdin[0].split()[1])\n    K = int(stdin[0].split()[2])\n\n    c_H = stdin[1].split()\n    c_W = stdin[2].split()\n\n    c = [['#'] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            c[i][j] = c_H[i * W + j]\n\n    def add_row(row: int, col: int, color: str) -> bool:\n        if row > H - 1 or col > W - 1:\n            return False\n        if color == '#':\n            c[row][col] = '.'\n        else:\n            c[row][col] = '#'\n        return True\n\n    def add_col(row: int, col: int, color: str) -> bool:\n        if row > H - 1 or col > W - 1:\n            return False\n        if color == '#':\n            c[row][col] = '.'\n        else:\n            c[row][col] = '#'\n        return True\n\n    def add_row_col(row: int, col: int, color: str) -> bool:\n        if row > H - 1 or col > W - 1:\n            return False\n        if color == '#':\n            c[row][col] = '.'\n        else:\n            c[row][col] = '#'\n        return True\n\n    def count_black(i: int, j: int, black: int) -> bool:\n        if i > H - 1 or j > W - 1:\n            return False\n        return c[i][j] == '#'\n\n    def check_color(color: str, i: int, j: int) -> bool:\n        if i > H - 1 or j > W - 1:\n            return False\n        return color == c[i][j]\n\n    def is_black_remaining(color: str, row: int, col: int) -> bool:\n        if row > H - 1 or col > W - 1:\n            return False\n        return color == c[row][col]\n\n    def count_black_row(row: int, color: str) -> int:\n        return sum(count_black(row, i, color) for i in range(W))\n\n    def count_black_col(col: int, color: str) -> int:\n        return sum(count_black(i, col, color) for i in range(H))\n\n    def count_black_row_col(row: int, col: int, color: str) -> int:\n        return count_black_row(row, color) + count_black_col(col, color)\n\n    def count_black_square(row: int, col: int) -> int:\n        return count_black_row_col(row, col, '#') + count_black_row_col(row, col, '.') + count_black_col_col(col, '#') + count_black_col_col(col, '.')\n\n    def count_black_square_col(col: int) -> int:\n        return count_black_row_col(0, col, '#') + count_black_row_col(0, col, '.') + count_black_col_col(col, '#') + count_black_col_col(col, '.')\n\n    def count_black_square_row(row: int) -> int:\n        return count_black_row_col(row, '#') + count_black_row_col(row, '.') + count_black_col_col(row, '#') + count_black_col_col(row, '.')\n\n    def count_black_square_square(row: int, col: int) -> int:\n        return count_black_square_row(row) + count_black_square_col(col)\n\n    def count_black_square_square_col(col: int) -> int:\n        return count_black_square_row(0) + count_black_square_col(col)\n\n    def count_black_square_square_row(row: int) -> int:\n        return count_black_square_col(0) + count_black_square_row(row)\n\n    def count_black_square_square_square(row: int, col: int) -> int:\n        return count_black_square_square_row(row) + count_black_square_square_col(col)\n\n    def is_black_square(color: str, row: int, col: int) -> bool:\n        return count_black_square_row(row) + count_black_square_col(col) + count_black_square_square(row, col) == K\n\n    def is_black_square_col(col: int, color: str) -> bool:\n        return count_black_square_row(0) + count_black_square_col(col) + count_black_square_square_col(col) == K\n\n    def is_black_square_row(row: int, color: str) -> bool:\n        return count_black_square_col(0) + count_black_square_row(row) + count_black_square_square_row(row) == K\n\n    def is_black_square_square(row: int, col: int, color: str) -> bool:\n        return count_black_square_square(row, col) + count_black_square_square_col(col) + count_black_square_square_row(row) == K\n\n    def count_black_square(color: str, i: int, j: int) -> int:\n        if i > H - 1 or j > W - 1:\n            return 0\n        return count_black(i, j, color)\n\n    def count_black_square_col(col: int, color: str) -> int:\n        return count_black_square(color, 0, col)\n\n    def count_black_square_row(row: int, color: str) -> int:\n        return count_black_square(color, row, 0)\n\n    def count_black_square_square(row: int, col: int, color: str) -> int:\n        return count_black_square(color, row, col)\n\n    def count_black_square_square_col(col: int, color: str) -> int:\n        return count_black_square_row(0, color) + count_black_square_col(col, color)\n\n    def count_black_square_square_row(row: int, color: str) -> int:\n        return count_black_square"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    lines = stdin.splitlines()\n    H, W, K = lines[0].split()\n    H = int(H)\n    W = int(W)\n    K = int(K)\n    lines = lines[1:]\n    c = []\n    for i in range(H):\n        c.append(lines[i].split())\n    r = 0\n    c = 0\n    count = 0\n    while r < H and c < W:\n        if c < W:\n            if c == W - 1:\n                break\n            if c == 0:\n                c += 1\n            if c == 1:\n                c += 1\n            if c == 2:\n                c += 1\n            if c == 3:\n                c += 1\n            if c == 4:\n                c += 1\n        if c == 0:\n            count += 1\n            c += 1\n        if c == 1:\n            count += 1\n            c += 1\n        if c == 2:\n            count += 1\n            c += 1\n        if c == 3:\n            count += 1\n            c += 1\n        if c == 4:\n            count += 1\n            c += 1\n        if c == 5:\n            count += 1\n            c += 1\n        if c == 6:\n            count += 1\n            c += 1\n        if c == 7:\n            count += 1\n            c += 1\n        if c == 8:\n            count += 1\n            c += 1\n        if c == 9:\n            count += 1\n            c += 1\n        if c == 10:\n            count += 1\n            c += 1\n        if c == 11:\n            count += 1\n            c += 1\n        if c == 12:\n            count += 1\n            c += 1\n        if c == 13:\n            count += 1\n            c += 1\n        if c == 14:\n            count += 1\n            c += 1\n        if c == 15:\n            count += 1\n            c += 1\n        if c == 16:\n            count += 1\n            c += 1\n        if c == 17:\n            count += 1\n            c += 1\n        if c == 18:\n            count += 1\n            c += 1\n        if c == 19:\n            count += 1\n            c += 1\n        if c == 20:\n            count += 1\n            c += 1\n        if c == 21:\n            count += 1\n            c += 1\n        if c == 22:\n            count += 1\n            c += 1\n        if c == 23:\n            count += 1\n            c += 1\n        if c == 24:\n            count += 1\n            c += 1\n        if c == 25:\n            count += 1\n            c += 1\n        if c == 26:\n            count += 1\n            c += 1\n        if c == 27:\n            count += 1\n            c += 1\n        if c == 28:\n            count += 1\n            c += 1\n        if c == 29:\n            count += 1\n            c += 1\n        if c == 30:\n            count += 1\n            c += 1\n        if c == 31:\n            count += 1\n            c += 1\n        if c == 32:\n            count += 1\n            c += 1\n        if c == 33:\n            count += 1\n            c += 1\n        if c == 34:\n            count += 1\n            c += 1\n        if c == 35:\n            count += 1\n            c += 1\n        if c == 36:\n            count += 1\n            c += 1\n        if c == 37:\n            count += 1\n            c += 1\n        if c == 38:\n            count += 1\n            c += 1\n        if c == 39:\n            count += 1\n            c += 1\n        if c == 40:\n            count += 1\n            c += 1\n        if c == 41:\n            count += 1\n            c += 1\n        if c == 42:\n            count += 1\n            c += 1\n        if c == 43:\n            count += 1\n            c += 1\n        if c == 44:\n            count += 1\n            c += 1\n        if c == 45:\n            count += 1\n            c += 1\n        if c == 46:\n            count += 1\n            c += 1\n        if c == 47:\n            count += 1\n            c += 1\n        if c == 48:\n            count += 1\n            c += 1\n        if c == 49:\n            count += 1\n            c += 1\n        if c == 50:\n            count += 1\n            c += 1\n        if c == 51:\n            count += 1\n            c += 1\n        if c == 52:\n            count += 1\n            c += 1\n        if c == 53:\n            count += 1\n            c += 1\n        if c == 54:\n            count += 1\n            c += 1\n        if c == 55:\n            count += 1\n            c += 1\n        if c == 56:\n            count += 1\n            c += 1\n        if c == 57:\n            count += 1\n            c += 1\n        if c == 58:\n            count += 1\n            c += 1\n        if c == 59:\n            count += 1\n            c += 1\n        if c == 60:\n            count += 1\n            c += 1\n        if c == 61:\n            count += 1\n            c += 1\n        if c == 62:\n            count += 1\n            c += 1\n        if c == 63:\n            count += 1\n            c += 1\n        if c == 64:\n            count += 1\n            c += 1\n        if c == 65:\n            count += 1\n            c += 1\n        if c == 66:\n            count += 1\n            c += 1\n        if c == 67:\n            count += 1\n            c += 1\n        if c == 68:\n            count += 1\n            c += 1\n        if c == 69:\n            count += 1\n            c += 1\n        if c == 70:\n            count += 1\n            c += 1\n        if c == 71:\n            count += 1\n            c += 1\n        if c == 72:\n            count += 1\n            c += 1\n        if c == 73:\n            count += 1\n            c += 1\n        if c == 74:\n            count += 1\n            c += 1\n        if c == 75:\n            count += 1\n            c += 1\n        if c == 76:\n            count += 1\n            c += 1\n        if c == 77:\n            count += 1\n            c += 1\n        if c == 78:\n            count += 1\n            c += 1\n        if c == 79:\n            count += 1\n            c += 1\n        if c == 80:\n            count += 1\n            c += 1\n        if c == 81:\n            count += 1\n            c += 1\n        if c == 82:\n            count += 1\n            c += 1\n        if c == 83:\n            "
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = list(map(int, stdin.split()))\n    c = stdin.split()\n    cnt = 0\n    for i in range(H):\n        for j in range(W):\n            if c[i][j] == '#':\n                continue\n            if (i == 0 or i == H - 1 or j == 0 or j == W - 1) and (c[i + 1][j] == '#' or c[i - 1][j] == '#' or c[i][j + 1] == '#' or c[i][j - 1] == '#'):\n                cnt += 1\n            if (i == 0 or i == H - 1 or j == 0 or j == W - 1) and (c[i][j + 1] == '#' or c[i][j - 1] == '#' or c[i + 1][j] == '#' or c[i - 1][j] == '#'):\n                cnt += 1\n    print(cnt)\n\nsolution(stdin)\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return 2\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L, R = stdin.split()\n    return str(min(int(L) * int(R), int(R) * int(L)))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (L, R) = stdin.split()\n    return str(2020*2041 % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = list(map(int, stdin.split()))\n    return str(2019-L*R)"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = list(map(int, stdin.split()))\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if i*j % 2019 == 2:\n                return str(i) + \" \" + str(j)"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    L, R = map(int, stdin.split())\n    return \"The minimum possible value of (i \\times j) mod 2019 is {}.\".format(2**(R-L+1) - (2**L-1))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    string = list(string)\n    count = 1\n    for i in range(1, len(string)):\n        if string[i]!= string[i-1]:\n            count = 0\n        if string[i] == 'A' and count == 1:\n            count = 0\n            break\n        elif count == 0:\n            count = 1\n    if count == 1:\n        if string[0] == 'A' and string[2] == 'C':\n            return 'AC'\n        else:\n            return 'WA'\n    return 'WA'\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if (S[0] == 'A' and len(S) == 1) or len(S) == 1:\n        return 'AC'\n    if S[2] == S[1] and S[2]!= 'C':\n        return 'WA'\n    if S[0] == S[1]:\n        return 'WA'\n    if S[1] == S[3]:\n        return 'WA'\n    if (S[0] == S[1] or S[1] == S[2]) and S[0]!= 'C':\n        return 'WA'\n    if S[1] == 'C' and S[3] == 'C':\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    if A.islower():\n        print('WA')\n    else:\n        for i in range(1, len(stdin)):\n            if stdin[i].isupper():\n                if stdin[i-1]!= 'c' or stdin[i+1]!= 'c':\n                    print('WA')\n                else:\n                    print('AC')\n            else:\n                if stdin[i-1]!= 'a' or stdin[i+1]!= 'c':\n                    print('WA')\n                else:\n                    print('AC')"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return stdin\n\n    def is_valid(string: str) -> bool:\n        if string:\n            for i in range(len(string) - 2):\n                if string[i] == string[i + 1]:\n                    return False\n\n            return True\n        return False\n\n    if is_valid(stdin):\n        return \"AC\"\n    else:\n        return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = ''\n    \n    if s[0].isupper():\n        res = 'WA'\n    else:\n        for i in range(1, len(s)):\n            if s[i].islower():\n                if s[i - 1].isupper() or s[i + 1].isupper():\n                    res = 'WA'\n                    break\n                res = 'AC'\n    return res\n\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char == 'a':\n            if stdin[1]!= 'c':\n                return 'WA'\n            elif stdin[2]!= 'c':\n                return 'WA'\n            elif stdin[3]!= 'c':\n                return 'WA'\n        elif char == 'c':\n            if stdin[1]!= 'a':\n                return 'WA'\n            if stdin[2]!= 'a':\n                return 'WA'\n            if stdin[3]!= 'a':\n                return 'WA'\n        else:\n            if stdin[1]!= 'a' and stdin[1]!= 'c':\n                return 'WA'\n            if stdin[2]!= 'a' and stdin[2]!= 'c':\n                return 'WA'\n            if stdin[3]!= 'a' and stdin[3]!= 'c':\n                return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0].isupper():\n        return 'WA'\n    for i in range(1, len(stdin) - 2):\n        if stdin[i] == 'C' and stdin[i+1] == 'C' and stdin[i-1] == 'A' and stdin[i+2] == 'C':\n            return 'AC'\n    return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        _, char_a, _, char_c, _ = stdin.split(\" \")\n        # letter_c = char_c.upper()\n        # letter_a = char_a.upper()\n        # if letter_c == char_a:\n        #     return \"AC\"\n        # else:\n        #     return \"WA\"\n        if char_a == char_c:\n            return \"AC\"\n        else:\n            return \"WA\"\n    except:\n        return \"WA\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(3, len(stdin)):\n        if stdin[i] == stdin[i - 3] == stdin[i - 2]:\n            return 'WA'\n        if stdin[i] == stdin[i - 3] == 'A' or stdin[i] == stdin[i - 2]:\n            return 'AC'\n    return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin)\n    while True:\n        n = len(a)\n        if a[n - 2]!= \"2\":\n            a[n - 2] = str(int(a[n - 2]) * 2)\n        if a[n - 3]!= \"3\":\n            a[n - 3] = str(int(a[n - 3]) * 3)\n        if a[n - 4]!= \"4\":\n            a[n - 4] = str(int(a[n - 4]) * 4)\n        if a[n - 5]!= \"5\":\n            a[n - 5] = str(int(a[n - 5]) * 5)\n        if a[n - 6]!= \"6\":\n            a[n - 6] = str(int(a[n - 6]) * 6)\n        if a[n - 7]!= \"7\":\n            a[n - 7] = str(int(a[n - 7]) * 7)\n        if a[n - 8]!= \"8\":\n            a[n - 8] = str(int(a[n - 8]) * 8)\n        if a[n - 9]!= \"9\":\n            a[n - 9] = str(int(a[n - 9]) * 9)\n        a = a[: n - 10]\n        if len(a) == 10:\n            break\n    return \"\".join(a)\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin\n    for i in range(0, 5):\n        date = date.replace(str(i * 2), str(i * 2) + str(2), 1)\n        date = date.replace(str(i * 3), str(i * 3) + str(3), 1)\n        date = date.replace(str(i * 4), str(i * 4) + str(4), 1)\n        date = date.replace(str(i * 5), str(i * 5) + str(5), 1)\n    return date[(len(date) - K) * (-1)]\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    \n    s = list(s)\n    k = int(k)\n\n    while k >= 5:\n        k -= 5\n        for i, c in enumerate(s):\n            if i % 2 == 0:\n                s[i] = str(int(c) * 2)\n        if k > 0:\n            for i, c in enumerate(s):\n                if i % 2 == 0:\n                    s[i] = str(int(c) * 3)\n        else:\n            for i, c in enumerate(s):\n                if i % 2 == 0:\n                    s[i] = str(int(c) * 4)\n        k += 5\n\n    return ''.join(s[:k])\n\nprint(solution(input()))"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin[0])\n    for i in range(5 * 10 ** 15):\n        if i < k:\n            print(s[i], end='')\n        elif i < k + 2:\n            s = s[:i] + '2' + s[i + 1:]\n        elif i < k + 3:\n            s = s[:i] + '3' + s[i + 1:]\n        elif i < k + 4:\n            s = s[:i] + '4' + s[i + 1:]\n        elif i < k + 5:\n            s = s[:i] + '5' + s[i + 1:]\n        elif i < k + 6:\n            s = s[:i] + '6' + s[i + 1:]\n        elif i < k + 7:\n            s = s[:i] + '7' + s[i + 1:]\n        elif i < k + 8:\n            s = s[:i] + '8' + s[i + 1:]\n        elif i < k + 9:\n            s = s[:i] + '9' + s[i + 1:]\n    return s\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.strip().split()[1])\n    length = len(s)\n    while length % (2*10**15)!= 0:\n        s = '22' + s\n        length += 1\n    s = s[k-1::] + s[:k-1]\n    return s[:k]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    k = int(stdin[-1])\n    while len(s) > 1:\n        i = 0\n        while i < len(s) - 1:\n            if s[i] == '2':\n                s[i] = '22'\n            elif s[i] == '3':\n                s[i] = '333'\n            elif s[i] == '4':\n                s[i] = '4444'\n            elif s[i] == '5':\n                s[i] = '55555'\n            elif s[i] == '6':\n                s[i] = '66666'\n            elif s[i] == '7':\n                s[i] = '777777'\n            elif s[i] == '8':\n                s[i] = '888888'\n            elif s[i] == '9':\n                s[i] = '99999999'\n            i += 1\n        s = s[:k]\n        k += 5\n    return s[0]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days, K = map(int, stdin.split())\n    cur = \"1\"\n    for _ in range(days * 5 + K):\n        cur = str(int(cur) * 2) + str(int(cur) * 3) + str(int(cur) * 4) + str(int(cur) * 5) + str(int(cur) * 6) + str(int(cur) * 7) + str(int(cur) * 8) + str(int(cur) * 9) + str(int(cur) * 10)\n    return cur[:K]"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(0, int(10**15)):\n        s = str(int(s[0])*10 + int(s[1]))\n        if len(s) > int(K):\n            return(s[int(K)])\nprint(solution(s))"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin[0]), int(stdin[0]) * 10 ** 15, int(stdin[0])):\n        if len(str(i)) == len(str(stdin[0])):\n            if str(i)[:len(str(stdin[0]))] == str(stdin[0]):\n                stdin[1] = i\n                break\n    if int(stdin[1]) >= int(stdin[0]) * 10 ** 15:\n        return str(stdin[1])\n    elif int(stdin[1]) > 1:\n        stdin[1] = str(int(stdin[1]) - int(stdin[0]))\n        return str(stdin[1])\n    else:\n        return '1'"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")[1]\n    k = int(stdin.split(\" \")[2])\n    \n    for i in range(1, 50):\n        s = str((int(s[:2]) + (k * (i + 1) ** 10)) % 10) + s[2:]\n    return s[k - 1]"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.rstrip())\n    p = list(map(int, stdin.rstrip().split(' ')))\n    p_copy = p.copy()\n    p_copy.sort()\n    \n    i = 0\n    j = N - 1\n    \n    while i < j:\n        if p[i] > p[j]:\n            break\n        elif p[i] < p[j]:\n            i += 1\n        elif p[i] == p[j]:\n            i += 1\n            j -= 1\n    \n    if i < j:\n        p[i], p[j] = p[j], p[i]\n        \n    for _ in range(N - 1):\n        p = [str(x) for x in p]\n        s =''.join(p)\n        print(s)\n    \n    return 'YES'"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    p = list(map(int, input[1]))\n    return \"YES\" if sorted(p) == p else \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    return 'YES' if p == sorted(p) else 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    p = set()\n    for i in range(N):\n        p.add(sequence[i])\n    p = list(p)\n    p.sort()\n    if p == sequence:\n        return 'YES'\n    return 'NO'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    swap = False\n\n    # sort array p in ascending order\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if p[j] > p[j+1]:\n                p[j], p[j+1] = p[j+1], p[j]\n                swap = True\n\n    if swap:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split()\n    p = list(map(int, stdin.split()))\n\n    if p == sorted(p):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    return \"YES\" if sorted(sequence) == sequence else \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    N = int(stdin_list[0])\n    p = stdin_list[1]\n    return \"YES\" if sorted(p) == list(p) else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    if len(arr) == 1:\n        return 'YES'\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                tmp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n                if arr == sorted(arr):\n                    return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = sorted(map(int, stdin.split()))\n    if len(p)!= N or not all(1 <= p[i] <= N for i in range(N)):\n        return 'NO'\n    if sorted(p) == p:\n        return 'YES'\n    p[0], p[-1] = p[-1], p[0]\n    return 'YES'\n    # code\n    #\n    # N = int(stdin.split()[0])\n    # p = sorted(map(int, stdin.split()[1:]), reverse=True)\n    # print('YES') if sorted(p) == p else print('NO')"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Solution\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    s = int(input[0])\n    return str(solution2(s))\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    result = 1\n    while s > 0:\n        s, remainder = divmod(s, 3)\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    count = 0\n    a = list(str(s))\n    for i in range(len(a)-1):\n        if a[i] < a[i+1]:\n            count += 1\n    print(count)\n    return(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    l = []\n    while x > 0:\n        x = x // 10\n        l.append(x)\n    if len(l) == 0:\n        return 0\n    s = 0\n    t = 0\n    for i in range(len(l)):\n        s += l[i]\n        if s % 3 == 0:\n            t += 1\n    return t\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.split('\\n')[0]\n    #print(s)\n    #print(s.split('|'))\n    count = 0\n    for i in range(1, len(s)+1):\n        #print(i, end=' ')\n        num = ''\n        for j in range(i):\n            num += s[j]\n        #print(num)\n        if len(num) == i:\n            #print(num)\n            if num.count('0') >= num.count('1') and num.count('1') >= num.count('0'):\n                count += 1\n    #print()\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    s = a[0]\n    return len(s)\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    res = 0\n    for i in range(l-1):\n        if (int(stdin[i])+int(stdin[i+1]))%3 == 0:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) > 10:\n        s = s[:10]\n    if len(s) < 10:\n        s = '0'*(10-len(s)) + s\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == s[i+2] and s[i]!= '0':\n            s = s[:i]+'0'+s[i+1:]\n            count += 1\n    return count + int(s[0] == '0')"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    d = int(sum([a * i + b * i for i in range(n)]) / n)\n    c = []\n    for i in range(n):\n        c.append(d * a[i] + b[i])\n    print(max([0] + sorted(c)))\nsolution(input())\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1].split()]\n    b = [int(i) for i in stdin.split()[2].split()]\n    c = []\n    max_zeros = 0\n    for d in range(-n, n + 1):\n        zeros = 0\n        for i in range(n):\n            c.append(d * a[i] + b[i])\n            if c[-1] == 0:\n                zeros += 1\n        if zeros > max_zeros:\n            max_zeros = zeros\n    return str(max_zeros)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    \n    max_zeroes = 0\n    max_d = 0\n    for d in range(1, n+1):\n        zeroes = 0\n        for i in range(n):\n            zeroes += (d*a[i] + b[i])\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n            max_d = d\n    return str(max_d)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split('\\n')]\n    c = a * b\n    return max(0, a * stdin.count('1') + b * stdin.count('0'))\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (list(map(int, x.split())) for x in stdin.splitlines())\n    c = [i * a[i] + b[i] for i in range(len(a))]\n    return max([sum(i == 0 for i in c) for d in range(1, len(a) + 1)], default=0)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    n = int(n)\n    a = [int(i) for i in a]\n    b = [int(i) for i in stdin.split()[1]]\n    m = max(a)\n    if m * max(b) < 0:\n        return 0\n    c = [a[i] * b[i] + b[i] for i in range(n)]\n    if c.count(0) == 0:\n        return m\n    return c.count(0)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = int(stdin)\n    max = 0\n    for i in range(n):\n        c = d * a[i] + b[i]\n        if c == 0:\n            max = c\n            break\n        else:\n            if max < c:\n                max = c\n    return max\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = -1\n    c = []\n    for i in range(n):\n        c.append(d * a[i] + b[i])\n    return str(max(c))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    m = 1\n    c = 0\n    for i in range(n):\n        c += a[i]*b[i]\n    return str(c)"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(str, stdin.split())\n    l = list(l)\n    r = list(r)\n    l.sort()\n    r.sort()\n    compat = [[l, r] for l, r in zip(l, r)]\n    compat = sorted(compat, key=lambda c: (len(c[0]), len(c[1])))\n    compat = [c for c in compat if c[0]!= '?' and c[1]!= '?']\n    return str(len(compat)) + \"\\n\" + \"\\n\".join(str(i) + \" \" + str(j) for i, j in compat)\n\nsolution('10\\nabaca?b\\nzabbbcc')\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    left_s = stdin[:n]\n    right_s = stdin[n:]\n    left_s_len = len(left_s)\n    right_s_len = len(right_s)\n    left_s = list(left_s)\n    right_s = list(right_s)\n    res = 0\n    while left_s_len > 0 and right_s_len > 0:\n        for i in range(left_s_len):\n            if left_s[i] == '?' or left_s[i] == right_s[i]:\n                left_s.pop(i)\n                right_s.pop(i)\n                left_s_len -= 1\n                break\n        else:\n            res += 1\n            left_s_len -= 1\n    return str(res) + '\\n' +''.join(str(x) for x in left_s) + '\\n' +''.join(str(x) for x in right_s)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = stdin.split(\"\\n\")\n    l, r = l.replace('?', ''), r.replace('?', '')\n\n    num_combos = 0\n    for i, e in enumerate(l):\n        if e!= r[i]:\n            num_combos += 1\n    return str(num_combos)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    x = []\n    y = []\n    for i in range(n):\n        if stdin.split()[i].count('?') > 0:\n            continue\n        x.append(i)\n        y.append(i)\n    k = 0\n    res = 0\n    while True:\n        if len(x) == 0:\n            break\n        x_a = x.pop(0)\n        if len(x) == 0:\n            break\n        x_b = x.pop(0)\n        y_a = y.pop(0)\n        y_b = y.pop(0)\n        if l == r:\n            if (x_a, y_a) not in x and (x_b, y_b) not in x:\n                k += 1\n                if x_a!= x_b and y_a!= y_b:\n                    x.append(x_a)\n                    x.append(x_b)\n                    y.append(y_a)\n                    y.append(y_b)\n            else:\n                x.append(x_a)\n                x.append(x_b)\n                y.append(y_a)\n                y.append(y_b)\n        else:\n            if (x_a, y_a) not in x and (x_b, y_b) not in x:\n                k += 1\n                if x_a!= x_b and y_a!= y_b:\n                    x.append(x_a)\n                    x.append(x_b)\n                    y.append(y_a)\n                    y.append(y_b)\n        if len(x) == 0:\n            break\n    print(k)\n    if k == 0:\n        print(\"0\")\n        return\n    for i in range(len(x)):\n        print(\"%d %d\" % (x[i], y[i]))\n\n\nsolution(*sys.stdin.readlines())\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_compatible(left_color, right_color):\n        return left_color == right_color or (left_color == '?' and right_color == '?')\n\n    def generate_pairs(left_color, right_color):\n        pairs = []\n        for i in range(len(left_color)):\n            if i < len(right_color):\n                pairs.append((left_color[i], right_color[i]))\n            else:\n                pairs.append((left_color[i], ''))\n        return pairs\n\n    left_boots = stdin.split('\\n')\n    right_boots = stdin.split('\\n')\n    assert len(left_boots) == len(right_boots)\n\n    result = 0\n\n    for i in range(len(left_boots)):\n        left_boot = left_boots[i]\n        right_boot = right_boots[i]\n\n        if len(left_boot)!= len(right_boot):\n            continue\n        if len(left_boot) == 1:\n            continue\n\n        left_color = left_boot[0]\n        right_color = right_boot[0]\n\n        if left_color == '?':\n            left_color = 'z'\n        if right_color == '?':\n            right_color = 'z'\n\n        if is_compatible(left_color, right_color):\n            left_colors = generate_pairs(left_boot, right_boot)\n            right_colors = generate_pairs(right_boot, left_boot)\n            left_color_indexes = {}\n            for left_color in left_colors:\n                if left_color[0] not in left_color_indexes:\n                    left_color_indexes[left_color[0]] = 1\n                else:\n                    left_color_indexes[left_color[0]] += 1\n            right_color_indexes = {}\n            for right_color in right_colors:\n                if right_color[0] not in right_color_indexes:\n                    right_color_indexes[right_color[0]] = 1\n                else:\n                    right_color_indexes[right_color[0]] += 1\n\n            right_colors_to_remove = set()\n            for right_color in right_color_indexes:\n                if right_color_indexes[right_color] < left_color_indexes[right_color]:\n                    right_colors_to_remove.add(right_color)\n            for right_color in right_colors_to_remove:\n                del right_color_indexes[right_color]\n\n            left_colors_to_remove = set()\n            for left_color in left_color_indexes:\n                if left_color_indexes[left_color] < right_color_indexes[left_color]:\n                    left_colors_to_remove.add(left_color)\n            for left_color in left_colors_to_remove:\n                del left_color_indexes[left_color]\n\n            for i in range(len(left_boot) - 1):\n                left_color = left_boot[i]\n                right_color = left_boot[i + 1]\n                if left_color in left_color_indexes:\n                    left_color_indexes[left_color] -= 1\n                    if left_color_indexes[left_color] == 0:\n                        del left_color_indexes[left_color]\n                if right_color in right_color_indexes:\n                    right_color_indexes[right_color] -= 1\n                    if right_color_indexes[right_color] == 0:\n                        del right_color_indexes[right_color]\n\n            left_colors_to_remove = set()\n            for left_color in left_color_indexes:\n                if left_color_indexes[left_color] < right_color_indexes[left_color]:\n                    left_colors_to_remove.add(left_color)\n            for left_color in left_colors_to_remove:\n                del left_color_indexes[left_color]\n\n            if len(left_color_indexes) == 1:\n                result += 1\n            if len(left_color_indexes) == 0:\n                continue\n\n        if is_compatible(left_color, right_color):\n            for i in range(len(left_boot)):\n                if i < len(right_boot) - 1:\n                    if left_boot[i] == right_boot[i + 1]:\n                        continue\n                if left_boot[i] == right_boot[i]:\n                    continue\n                if left_boot[i] == '?':\n                    continue\n                if left_boot[i] == '?':\n                    continue\n                left_boot_index = ord(left_boot[i]) - ord('a')\n                right_boot_index = ord(right_boot[i]) - ord('a')\n                if left_boot_index < 0 or right_boot_index < 0 or left_boot_index > 8 or right_boot_index > 8:\n                    continue\n                if left_boot[i] == '?' or right_boot[i] == '?':\n                    continue\n                if left_boot[i] == '?' and right_boot[i] == '?':\n                    continue\n                if left_boot_index >= len(left_color_indexes) or right_boot_index >= len(right_color_indexes):\n                    "
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    def is_compatible(l, r):\n        return l == r or (l[::-1] == r)\n\n    left_to_right = [[] for i in range(n)]\n    right_to_left = [[] for i in range(n)]\n\n    for i in range(n):\n        left_to_right[i].append(i)\n        right_to_left[i].append(i)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_compatible(l[i], l[j]) and is_compatible(r[i], r[j]):\n                left_to_right[i].append(j)\n                right_to_left[j].append(i)\n\n    left_to_right = sorted(left_to_right, key=lambda x: len(x), reverse=True)\n    right_to_left = sorted(right_to_left, key=lambda x: len(x), reverse=True)\n\n    res = 0\n    for i in range(len(left_to_right)):\n        for j in range(len(right_to_left)):\n            if (len(left_to_right[i]) + len(right_to_left[j])) <= n:\n                res = max(res, len(left_to_right[i]) + len(right_to_left[j]))\n\n    print(res)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    l = stdin[1]\n    r = stdin[2]\n\n    n_l = len(l)\n    n_r = len(r)\n\n    if n_l == 0 and n_r == 0:\n        return 0\n\n    if n_l!= n_r:\n        return -1\n\n    compat_l = [-1] * n_l\n    compat_r = [-1] * n_r\n\n    compat_l[0] = 0\n    for i in range(1, n_l):\n        if l[i] == l[i - 1]:\n            compat_l[i] = compat_l[i - 1]\n\n        else:\n            compat_l[i] = compat_l[i - 1] + 1\n\n    compat_r[n_l - 1] = 0\n    for i in range(n_l - 2, -1, -1):\n        if r[i] == r[i + 1]:\n            compat_r[i] = compat_r[i + 1]\n\n        else:\n            compat_r[i] = compat_r[i + 1] + 1\n\n    compat_r = compat_r[::-1]\n\n    max_val = -1\n    for i in range(n_l):\n        if compat_r[i] == 0:\n            max_val = max(compat_l[i], compat_r[i], max_val)\n        else:\n            max_val = max(compat_l[i], compat_r[i], max_val)\n\n    print(max_val)\n    return\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = stdin.strip().split()\n    r = stdin.strip().split()\n    c = len(l)\n    m = 0\n    p = -1\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(i+1, n):\n                if l[i] == r[j]:\n                    m = max(m, j-i)\n                    p = j\n                    break\n        else:\n            for j in range(i+1, n):\n                if l[j] == r[i]:\n                    m = max(m, j-i)\n                    p = j\n                    break\n    if m == 0:\n        return p\n    for i in range(m):\n        if i % 2 == 0:\n            p = p - i\n        else:\n            p = p + i\n    return p\n    \n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    left = stdin\n    right = stdin\n\n    left_colors = []\n    right_colors = []\n    for i in range(n):\n        if i % 2 == 0:\n            left_colors.append(left[i])\n        else:\n            right_colors.append(right[i])\n\n    print(len(set(left_colors + right_colors)))\n\n    return left_colors + right_colors\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    --- Day 6: Universal Orbit Map ---\n    You've landed at the Universal Orbit Map facility on Mercury. Because navigation in space often involves transferring between orbits, the orbit maps here are useful for navigation in your own space. You download a map of the local orbits (your puzzle input).\n\n    Except for the universal Center of Mass (COM), every object in space is in orbit around exactly one other object. An orbit looks roughly like this:\n\n        \\\n        \\\n        \\\n        \\\n        \\\n        \\\n        \\\n         \\\n         \\\n         \\\n         object\n         \\\n         \\\n        /\n        object\n        \\\n         \\\n         \\\n         \\\n        /\n        object\n\n    Here, we can see the object held in the center (COM):\n\n        its own position is marked with an \"X\"\n\n        all objects orbit around it (including the center object) by various degrees:\n\n        object 1 orbits around object 2, which orbits around object 3\n\n        object 2 orbits around object 1, which orbits around object 3\n\n        object 3 orbits around object 2\n\n    X: center object\n    object: other object in orbit\n    '''\n\n    with open(\"inputs/day6.txt\") as f:\n        text = f.read()\n\n    orbit_map = text.splitlines()\n\n    object_dict = {}\n    for line in orbit_map:\n        [key, value] = line.split(')')\n        object_dict[key] = value\n\n    def get_all_parents(object, parent_dict=None):\n        if parent_dict is None:\n            parent_dict = object_dict\n        if parent_dict[object] == 'COM':\n            return [[object]]\n        else:\n            return get_all_parents(parent_dict[object], object_dict) + get_all_parents(parent_dict[object], object_dict)\n\n    def get_num_transfers(object1, object2):\n        [object1_parents, object2_parents] = get_all_parents(object1), get_all_parents(object2)\n        common_parents = set(object1_parents) & set(object2_parents)\n        return len(object1_parents) + len(object2_parents) - len(common_parents)\n\n    # Compute the answer\n    return sum([get_num_transfers(object1, object2) for object1, object2 in product(object_dict.keys(), object_dict.keys())])\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1]))\n    idx = 0\n    count = 0\n    while True:\n        if idx == n:\n            break\n        if a[idx] == a[idx+1]:\n            idx += 1\n            count += 1\n            continue\n        elif a[idx] > a[idx+1]:\n            break\n        else:\n            idx += 1\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n <= 1:\n        return str(n)\n    a.sort()\n    visited = set()\n    cnt = 0\n    for i in range(n):\n        if a[i] in visited:\n            continue\n        b = a[i]\n        visited.add(b)\n        cnt += 1\n        j = i\n        while j < n and b < a[j]:\n            j += 1\n        j -= 1\n        while j >= i and b > a[j]:\n            j -= 1\n        for x in range(i, j + 1):\n            visited.add(a[x])\n    if n == cnt:\n        return str(cnt)\n    return str(cnt + 1)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    ans = []\n    block = []\n    count = 0\n    for i in range(len(arr)):\n        if len(block) == 0 or block[-1][1] < arr[i]:\n            block.append([i, arr[i]])\n            count += 1\n        else:\n            count += 1\n            block.append([i, arr[i]])\n            if count == n:\n                ans.append(block)\n                count = 0\n    # print(ans)\n    result = []\n    for a in ans:\n        result.append(str(a[0] + 1) +'' + str(a[-1][1] + 1))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    C = set()\n    for i in range(N-1):\n        for j in range(i+1, N):\n            C.add(tuple(sorted([A[i], A[j]])))\n    k = 1\n    for c in C:\n        if k > 1:\n            break\n        k += 1\n        for i in range(1, N-k+1):\n            for j in range(i+k, N):\n                if tuple(sorted([A[i], A[j]]))!= c:\n                    break\n            else:\n                k += 1\n    return str(k-1)"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = []\n    for i in range(n):\n        b.append([i, i])\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] >= a[j]:\n                b[i].append(j)\n                b[j].append(i)\n    print(len(b))\n    return str(len(b))"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    n = int(arr[0])\n    a = list(map(int, arr[1:]))\n    ans = 0\n    lst = []\n    for i in range(n):\n        if len(lst) == 0:\n            lst.append([i, i + 1])\n        else:\n            if i + 1 == lst[-1][1] or i + 1 == lst[-1][1] + 1:\n                lst.append([i, i + 1])\n            else:\n                ans += 1\n                lst = []\n    ans += len(lst)\n\n    return str(ans)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1]))\n    blocks = []\n    start, end = 0, 0\n    for i in range(n):\n        if start == end and not blocks:\n            blocks.append((start, i))\n        else:\n            if start!= end and end + 1 < i:\n                blocks.append((start, i))\n                blocks.append((i, end))\n                start = i\n                end = i\n            elif start!= end and start + 1 == i:\n                blocks.append((start, i))\n                start = i\n            else:\n                end = i\n    res = 0\n    for block in blocks:\n        curr_sum = sum(a[block[0]:block[1]])\n        if res < curr_sum:\n            res = curr_sum\n    return str(len(blocks)) + \"\\n\" + \"\\n\".join(str(block[0]) + \" \" + str(block[1]) for block in blocks)"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    a = list(map(int, data[1].split()))\n\n    def can_form_block(left, right):\n        return sum(a[left:right]) == sum(a[left:right])\n\n    # Part 1: Naming\n    result = 0\n    for left in range(n):\n        for right in range(left + 1, n):\n            if can_form_block(left, right):\n                result += 1\n                print(f'{left} {right}')\n\n    # Part 2: Naming\n    seen = set()\n    for left in range(n):\n        for right in range(left + 1, n):\n            if (left, right) in seen:\n                continue\n            if can_form_block(left, right):\n                seen.add((left, right))\n                result += 1\n\n    return result"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    arr = list(map(int, a[1].split()))\n    l = 0\n    r = n - 1\n    ans = []\n    while l < r:\n        c = 0\n        for i in range(l, r):\n            c += arr[i]\n        if c > 0:\n            ans.append((l, c))\n            l = i\n        else:\n            r = i\n            c = 0\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][0], ans[i][1])\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input_arr = list(map(int, stdin.split()))\n    arr_size = input_arr[0]\n    arr = input_arr[1]\n\n    def calculate_sum(arr, start_index, end_index):\n        sum_arr = 0\n        for i in range(start_index, end_index):\n            sum_arr += arr[i]\n        return sum_arr\n\n    def sort_and_iterate(arr):\n        for i in range(arr_size):\n            for j in range(arr_size-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n\n        return arr\n\n    def find_block(arr):\n        for i in range(arr_size):\n            curr_sum = calculate_sum(arr, i, i)\n            if curr_sum == arr[i]:\n                start_index = i\n                break\n\n        for i in range(start_index, arr_size):\n            curr_sum = calculate_sum(arr, start_index, i)\n            if curr_sum == arr[i]:\n                end_index = i\n                return start_index, end_index\n\n        return start_index, end_index\n\n    def find_block_2(arr):\n        for i in range(arr_size):\n            curr_sum = calculate_sum(arr, i, i)\n            if curr_sum == arr[i]:\n                start_index = i\n                break\n\n        for i in range(start_index, arr_size):\n            curr_sum = calculate_sum(arr, start_index, i)\n            if curr_sum == arr[i]:\n                end_index = i\n                return start_index, end_index\n\n        start_index, end_index = find_block(arr)\n        return start_index, end_index\n\n    def find_block_3(arr):\n        for i in range(arr_size):\n            curr_sum = calculate_sum(arr, i, i)\n            if curr_sum == arr[i]:\n                start_index = i\n                break\n\n        for i in range(start_index, arr_size):\n            curr_sum = calculate_sum(arr, start_index, i)\n            if curr_sum == arr[i]:\n                end_index = i\n                return start_index, end_index\n\n        start_index, end_index = find_block_2(arr)\n        return start_index, end_index\n\n    def find_block_4(arr):\n        for i in range(arr_size):\n            curr_sum = calculate_sum(arr, i, i)\n            if curr_sum == arr[i]:\n                start_index = i\n                break\n\n        for i in range(start_index, arr_size):\n            curr_sum = calculate_sum(arr, start_index, i)\n            if curr_sum == arr[i]:\n                end_index = i\n                return start_index, end_index\n\n        start_index, end_index = find_block_3(arr)\n        return start_index, end_index\n\n    arr = sort_and_iterate(arr)\n    start_index, end_index = find_block_4(arr)\n    print(start_index, end_index)\n    return start_index, end_index\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = (int(x) for x in stdin.split())\n    # 2 for pairs of two numbers\n    # 1 for pairs of one number\n    res = 0\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if a[i] % k == 0 and a[j] % k == 0:\n            res += 1\n        j += 1\n        if j == n:\n            i += 1\n            j = i + 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if int(str(a[i]) + str(a[j])) % k == 0:\n                ans += 1\n    print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    nums = {}\n    for i in range(n):\n        if a[i] not in nums:\n            nums[a[i]] = i\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if a[i] % k == 0 and a[j] % k == 0 and a[i]//k + a[j]//k == a[i]//k + a[j]//k:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] % k == 0:\n                counter += 1\n    return str(counter)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    c = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] + a[j] % k == 0:\n                c += 1\n\n    return str(c)"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            x = a[i] * a[j]\n            y = a[j] * a[i]\n            if (x % a[0] == 0 or y % a[0] == 0) and (x % a[1] == 0 or y % a[1] == 0):\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] + numbers[j] % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum((n * (n - 1)) // 2 for i in range(n) for j in range(i + 1, n) if (a[i] + a[j]) % k == 0))\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum possible sum of a given sequence.\n    :param stdin: Input in the format in.\n    :return: The maximum possible sum of A.\n    \"\"\"\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n\n    for i in range(0, n - 1):\n        if b[i] > max(b[i], b[i + 1]):\n            return str(b[i] + b[i + 1])\n    return str(b[-1])\n\nprint(solution(input()))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input.split()[0])\n    sequence = input.split()[1:]\n    sequence.sort(key=int)\n\n    i = 0\n    while i < n - 1:\n        if sequence[i] < sequence[i + 1]:\n            i += 1\n        else:\n            sequence[i + 1] = sequence[i] + sequence[i + 1]\n            i += 2\n\n    return str(sequence[n - 1])\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_minus_1 = N - 1\n    A = list(map(int, stdin.split()))\n    assert all(isinstance(n, int) for n in A)\n    assert 0 < N and N <= 100\n    assert len(A) == N_minus_1\n\n    if N == 0:\n        return 0\n\n    best = 0\n    for i in range(N):\n        if A[i] > max(A[i+1], A[i]):\n            best += A[i]\n        elif A[i] < max(A[i+1], A[i]):\n            best += max(A[i+1], A[i])\n\n    return str(best)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = list(map(int, stdin.split()))\n    b.sort(reverse=True)\n    return str(sum(b))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    # Create two array of A and corresponding sums.\n    # Arrays will be of size (n-1) and will be filled with values.\n    # The first element in each array will be the largest element in the array.\n    # The second element in each array will be the sum of the elements\n    #  that are greater than the largest element in the array.\n    max_sum: int = -float('inf')\n    A: list = []\n    sums: list = []\n    for i in range(n - 1):\n        A.append(int(stdin))\n    A.sort()\n    for i in range(n - 1):\n        sums.append(A[i] + A[i + 1])\n    sums.sort(reverse=True)\n    for i in range(n - 1):\n        # If the value of sums[i] is greater than\n        # the sum of A[i], then we have found the answer.\n        if sums[i] > A[i]:\n            max_sum = sums[i]\n            break\n    if max_sum == -float('inf'):\n        max_sum = A[0]\n    # Print the answer.\n    print(max_sum)\n    return"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    array: list = list(map(int, stdin.split()))\n    array.sort(reverse=True)\n    return str(sum(array))\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(0)\n    c = 0\n    b = 0\n    for i in range(n):\n        c = max(c, a[i]+b)\n        b = max(b, a[i])\n    return str(c)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: List[int] = list(map(int, stdin.split()[1:]))\n    \n    res: int = max(a)\n    for i in range(n):\n        res = max(res, max(a[i], a[i+1]))\n    \n    return str(res)"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = map(int, stdin.split())\n    seq = sorted(seq)\n    a = []\n    for i in range(n):\n        a.append(seq[i])\n    a.append(0)\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] >= a[i]:\n            a[i - 1] = a[i]\n    return str(sum(a))\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '9'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, M, Q = list(map(int, stdin.split()))\n\n    scores = list(map(int, stdin.split()))\n    scores.sort(key=lambda x: x[2])\n\n    score = 0\n    prev = 0\n\n    for i in range(Q):\n        score += scores[i][2] - prev\n        prev = scores[i][2]\n    return str(score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_quads = int(stdin.split(\" \")[0])\n    num_of_elements = int(stdin.split(\" \")[1])\n    quadruple_list = []\n    for i in range(num_of_quads):\n        quadruple_list.append(list(map(int, stdin.split(\" \")[i + 2].split(\" \"))))\n    quadruple_list.sort(key=lambda x: x[0])\n    sequence = []\n    for i in range(len(quadruple_list)):\n        if quadruple_list[i][0] > sequence[-1][1]:\n            sequence.append(quadruple_list[i])\n    score = 0\n    for i in range(len(sequence)):\n        score += sequence[i][2]\n    print(score)\n    return score\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    q = int(stdin[2])\n    return str(max([solution_part_one(a, b, c, d) for a, b, c, d in zip(range(1, n + 1), range(1, n + 1), range(1, m + 1), range(1, m + 1))]))\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    max_score = 0\n\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.split())\n        score = d - a\n        if a < b:\n            score += c\n        if max_score < score:\n            max_score = score\n\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    dict = {}\n    for i in range(q):\n        a, b, c, d = map(int, stdin.split())\n        if not (a-b) in dict.keys():\n            dict[a-b] = []\n        dict[a-b].append((a,b,c,d))\n    max_score = 0\n    max_key = None\n    for key, value in dict.items():\n        if len(value) == 0:\n            continue\n        score = sum(i[2] for i in value)\n        if max_score < score:\n            max_key = key\n            max_score = score\n    return str(max_key)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = list(map(int, stdin.split()))\n    answer = 0\n\n    d = dict()\n    for i in range(Q):\n        a, b, c, d = list(map(int, stdin.split()))\n        d.setdefault(a, []).append(b)\n        d.setdefault(c, []).append(b)\n\n    for i in range(N):\n        current = i + 1\n        current_sum = 0\n        for j in d.keys():\n            if current >= j:\n                current_sum += d[j][d[j].index(current) - 1] - d[j][d[j].index(current) - 2]\n        if answer < current_sum:\n            answer = current_sum\n    return str(answer)"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for i in range(Q)]\n    # print(a)\n    max_score = 0\n    for i in range(Q):\n        for j in range(Q):\n            if j!= i:\n                b = a[i][1] - a[i][0]\n                c = a[j][2] - a[j][0]\n                if b == c:\n                    max_score = max(max_score, a[i][3] + a[j][3])\n    print(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = list(map(int, stdin.split()))\n    seq = [list(map(int, stdin.split()))[i:i+4] for i in range(q)]\n    d = {}\n    for a, b, c, d in seq:\n        if (b - a) in d:\n            d[b - a] += c\n        else:\n            d[b - a] = c\n    ans = max([sum([d.get(b - a, 0) for b in range(a + 1, b)]) for a, b in zip(range(n), range(m, m + n))])\n    print(ans)\n    return str(ans)\n\nsolution('5 4 3')\nsolution('7 4 3')\nsolution('4 4 3')\nsolution('7 4 3')\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    A = [(int(i), int(j), int(k), int(l)) for i, j, k, l in\n         [input().split() for _ in range(q)]]\n    best_score = 0\n    for a, b, c, d in A:\n        if c - b == a - d:\n            best_score = max(best_score, a * d)\n    return str(best_score)"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = list(map(int, stdin.split()))\n    if q >= 2:\n        stdin += stdin\n    cur_score = 0\n    score_dict = {}\n    for _ in range(n):\n        a, b, c, d = list(map(int, stdin.split()))\n        if a-1 not in score_dict:\n            score_dict[a-1] = [[b-1, c-1, d-1], 1]\n        else:\n            score_dict[a-1][0].append([b-1, c-1, d-1])\n            score_dict[a-1][1] += 1\n    max_score = 0\n    for each_score in score_dict:\n        if score_dict[each_score][1] > 1:\n            cur_score = 0\n            for each_score_item in score_dict[each_score][0]:\n                cur_score += each_score_item[1]\n            if cur_score > max_score:\n                max_score = cur_score\n    if max_score == 0:\n        return '0'\n    return str(max_score)\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    dif = max(b) - min(a)\n    return str(dif)\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    input = stdin.split()\n    A = [int(i) for i in input]\n    A.sort()\n    return str(A[-1] - A[0])\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    # Read input from STDIN\n    n = int(stdin.split()[0])\n    # Write your code here\n    a = list(map(int, stdin.split()[1:]))\n    maximum = float('-inf')\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if a[i] - a[j] > maximum:\n                maximum = a[i] - a[j]\n    return str(maximum)"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    print(max(max(A)-min(A), 0))"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    diffs = []\n    max_d = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diffs.append(abs(A[i] - A[j]))\n        if max_d < max(diffs):\n            max_d = max(diffs)\n        diffs = []\n    return str(max_d)"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    # print(arr)\n    # print(max(arr[0], arr[-1]))\n    # return max(arr[0], arr[-1])\n    print(max(arr[1] - arr[0], arr[-1] - arr[0]))\n    return arr[1] - arr[0]\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.strip().split()\n    max_val = -sys.maxsize\n    min_val = sys.maxsize\n    for i in range(len(num_list)):\n        max_val = max(max_val, abs(int(num_list[i]) - int(num_list[i-1])))\n        min_val = min(min_val, abs(int(num_list[i]) - int(num_list[i-1])))\n    return max_val if max_val >= min_val else min_val\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    return str(max(A[-1] - A[0], A[-2] - A[1], A[-3] - A[2], A[-4] - A[3], A[-5] - A[4]))\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    if n % 2!= 0:\n        print(abs(lst[-2] - lst[-1]))\n    else:\n        print(abs(lst[-2] - lst[-1] - lst[-2] + lst[-1]))"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    paths = []\n    for i in range(n):\n        paths.append([int(x) for x in stdin.split()][i:i+2])\n    \n    if len(paths) == 0:\n        return \"\"\n    \n    distances = []\n    \n    for i in range(len(paths[0])):\n        distances.append([0] * n)\n    \n    distances[0][1] = abs(paths[0][0] - paths[1][0])\n    distances[0][2] = abs(paths[0][1] - paths[1][1])\n    distances[1][0] = abs(paths[1][0] - paths[0][0])\n    distances[1][1] = abs(paths[1][1] - paths[0][1])\n    \n    # Generate all paths\n    for i in range(2, n):\n        for j in range(len(paths[0])):\n            distances[j][i] = distances[j][i-1] + abs(paths[i][j] - paths[i-1][j])\n    \n    # Find all of the possible paths\n    paths_length = []\n    for i in range(n):\n        if distances[i][n-1]!= 0:\n            length = distances[i][n-1]\n        else:\n            length = distances[i][n-2] + distances[n-2][i]\n        paths_length.append(length)\n    \n    # Find average path length\n    return str(sum(paths_length) / len(paths_length))\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_pos = list(map(int, stdin.split()))\n    x_pos.sort()\n    return \"%.6f\" % (2 * (sum(list(map(lambda y: math.sqrt(x_pos[i]**2 + y**2), x_pos))) / N))\n    # Write your code above this function\n\n'''"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    if 2 <= n <= 8:\n        x: List[int] = list(map(int, stdin.strip().split()))\n        return str(round(sum([(x[i] - x[j]) ** 2 + (x[i] - x[j]) ** 2 for i in range(0, n) for j in range(i + 1, n)]) / (n * (n - 1)), 6))\n    else:\n        return \"Invalid input.\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (N) = (int(stdin.split()[0]))\n    (x1, y1) = (int(stdin.split()[1]), int(stdin.split()[2]))\n    (x2, y2) = (int(stdin.split()[3]), int(stdin.split()[4]))\n    \n    distance = []\n    \n    for i in range(N):\n        distance.append(((x1 - x2)**2 + (y1 - y2)**2)**(1/2))\n        \n    total = 0\n    for i in range(N):\n        total += distance[i]\n    \n    print(total/(N))\n    \n    return \"0\""
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dist(x1, y1, x2, y2):\n        return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\n    distances = {1: 0, 2: 0, 3: 0}\n    for x, y in (list(map(int, line.split())) for line in stdin.splitlines()):\n        for i in range(1, 4):\n            distances[i] += dist(x, y, x - i, y - i)\n\n    return f'{distances[1] + distances[2] + distances[3] / 6:.6f}'\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_points = []\n    y_points = []\n    for i in range(N):\n        x_p, y_p = map(int, stdin.split())\n        x_points.append(x_p)\n        y_points.append(y_p)\n\n    if N == 1:\n        print(0)\n    else:\n        paths = list()\n        for i in range(1, N):\n            paths.append(math.sqrt((x_points[i] - x_points[0]) ** 2 + (y_points[i] - y_points[0]) ** 2))\n        print(sum(paths) / len(paths))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    all_paths: List[List[int]] = [[]]\n    i = 0\n    while i < N:\n        path = list(map(int, stdin.strip().split()))\n        path = sorted(path, key=lambda k: (k[0], k[1]))\n        if len(path) == 2:\n            all_paths.append([path[0]])\n        else:\n            path_list = []\n            prev = path[0]\n            for k in range(2, len(path)):\n                length = math.sqrt((path[k][0] - prev[0])**2 + (path[k][1] - prev[1])**2)\n                path_list.append([length, path[k]])\n            path_list.sort(key=lambda k: k[0])\n            path_list.append(path[-1])\n            all_paths.append(path_list)\n        i += 1\n    sum_lengths = 0\n    for path in all_paths:\n        sum_lengths += path[0]\n    return str(sum_lengths / N)\n\nimport sys\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x_list, y_list = stdin.split()[1:N+1], stdin.split()[1:N+1]\n    x_list, y_list = map(int, x_list), map(int, y_list)\n    distance_list = [(x_i-x_j)**2 + (y_i-y_j)**2 for x_i, y_i, x_j, y_j in zip(x_list, y_list, x_list[1:], y_list[1:])]\n    return str(sum(distance_list)/N)"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    xs, ys = map(int, stdin.split(' ')[1].split(','))\n    \n    max_dist = (xs * xs) + (ys * ys)\n    max_dist = math.sqrt(max_dist)\n\n    # Loop over all possible paths to visit all of the N towns\n    paths = []\n    for i in range(0, N):\n        for j in range(i+1, N):\n            dist = (xs - xs + (j-i) * xs)**2 + (ys - ys + (j-i) * ys)**2\n            dist = math.sqrt(dist)\n            paths.append(dist)\n    \n    print(sum(paths)/len(paths))\n    return (sum(paths)/len(paths))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    xs = tuple(map(int, stdin.split()))\n    return str(int(sum(map(lambda x: math.sqrt(x[0] ** 2 + x[1] ** 2), xs)) / n))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, A - B, B, A + B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A-((A+B)//2))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(int(A) - 2 * int(B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a, b))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    A, B = map(int, stdin)\n    return str(A * (A - 2 * B))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a, b = map(int, stdin[0].split(' '))\n    print(max(((a - b) / 2) * 2, ((a + b) / 2) * 2))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(min(a, b))\n\nprint(solution(input()))"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    num_of_ints = int(inputs[0])\n    pairs = set()\n    for i in range(num_of_ints):\n        first = int(inputs[i * 2 + 1])\n        second = int(inputs[i * 2 + 2])\n        pair = (first, second)\n        pairs.add(pair)\n\n    def create_digit_string(num):\n        return str(num).zfill(3)\n    pairs_digits = {create_digit_string(pair[0] * pair[1]): pair for pair in pairs}\n    pairs_digits_sorted = {k: v for k, v in sorted(pairs_digits.items(), key=lambda item: (len(item[0]), item[1]))}\n    for key, value in pairs_digits_sorted.items():\n        print(key, value)\n    return \"done\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import permutations\n\nN = int(stdin)\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        print(max(int(line) - 1, 1))\n    return '\\n'\n\nsolution('')\nsolution('3\\n')\nsolution('10000\\n')\n'''\n\n\n\n'''\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(100, 1, -1):\n        for j in range(100, 1, -1):\n            if len(str(i * j)) > len(str(i)):\n                print(i, j, sep=' ')\n                break\n    return stdout"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = 1\n    B = 1\n    while True:\n        A = A * 10\n        B = B * 10\n        if A >= n or B >= n:\n            break\n        print(A,B)\n    return A*B"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    ans = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            digits1 = str(i)\n            digits2 = str(j)\n            if len(digits1) < len(digits2):\n                tmp = digits1\n                digits1 = digits2\n                digits2 = tmp\n            if len(digits2) < len(digits1):\n                tmp = digits2\n                digits2 = digits1\n                digits1 = tmp\n            diff = len(digits1) - len(digits2)\n            if diff > 0:\n                digits2 = \"0\"*diff + digits2\n            if int(digits1) * int(digits2) == N:\n                ans = max(ans, len(digits1)+len(digits2))\n\n    return str(ans)\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution.\"\"\"\n    N = int(stdin)\n    a = max(len(str(N)),len(str(N*N)))\n    b = max(len(str(N*N)),len(str(N)))\n    return f'{a} {b}'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n    digits = {}\n    for i in range(10):\n        digits[str(i)] = 0\n    for i in range(1, N + 1):\n        for j in str(i):\n            digits[j] += 1\n    print(min(digits[str(i)] for i in range(10)))\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 100000000\n    for i in range(1, 10):\n        for j in range(1, 10):\n            res = min(res, len(str(i)) + len(str(j)))\n    print(res)"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n\n    A = stdin.split(' ')\n    A = list(map(int, A))\n    A = set(A)\n\n    res = 1\n    for i in range(1, N+1):\n        tmp = set()\n        for j in range(i, N+1):\n            tmp.add(A[j-1])\n        if tmp == A:\n            res *= i\n\n    return str(res)"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, range(1, int(stdin) + 1)))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n    n, m = int(stdin[0]), int(stdin[1])\n    food_liked = set()\n\n    for i in range(n):\n        food_liked.add(int(stdin[2 + i]))\n\n    for i in range(n):\n        for j in range(n):\n            if int(stdin[2 + j]) not in food_liked:\n                food_liked.add(int(stdin[2 + j]))\n\n    return str(len(food_liked))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    alike_matrix = []\n    for _ in range(n):\n        alike_matrix.append(list(map(int, stdin.split())))\n    k = m - 1\n    for k in range(m):\n        res = 0\n        for i in range(n):\n            res += alike_matrix[i][k]\n        print(res)\n    return\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_n = list(map(int, stdin.split()))\n    k_n.sort()\n    a_n = []\n    for i in range(m):\n        a_n.append([i + 1, k_n[i]])\n    n_a = a_n.copy()\n    n_a.sort(key=lambda x: x[1])\n    i = 1\n    j = 1\n    ans = 1\n    while i < n:\n        if n_a[i][1] == n_a[i - 1][1]:\n            i += 1\n            continue\n        ans *= n_a[i][1]\n        i += 1\n    return str(ans)"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    foods = stdin.split()\n    foods = list(map(int, foods))\n    res = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            for k in range(j, N + 1):\n                if (foods[i - 1]!= foods[j - 1]) and (foods[i - 1]!= foods[k - 1]) and (\n                        foods[j - 1]!= foods[k - 1]):\n                    res += 1\n    return str(res)\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    num_like = 0\n    for i in range(m):\n        for j in range(n):\n            if a[j] == i + 1:\n                num_like += 1\n                break\n    return str(num_like)\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    K = 0\n    K = int(stdin.split()[1])\n    ans = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            K -= 1\n            if K == 0:\n                break\n            for k in range(1, N + 1):\n                if int(stdin.split()[K]) == i:\n                    if int(stdin.split()[i]) == j:\n                        if int(stdin.split()[j]) == k:\n                            ans += 1\n                            break\n                if K == 0:\n                    break\n    return str(ans)"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    A = []\n    for i in range(M):\n        A.append(int(stdin.strip().split()[i]))\n    output = []\n    for i in range(N):\n        output.append(A.count(i + 1))\n    print(*output)\n    return \"\".join(map(str, output))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split(\" \"))\n    for i in range(n):\n        liked = map(int, stdin.split(\" \"))\n        if liked.count(liked[0]) == len(liked):\n            print(i + 1)\n            return\nsolution(input())\n\"\"\"\nimport math\n\nn, m = map(int, input().split(\" \"))\nfood_likes = []\nfor i in range(n):\n    food_likes.append(list(map(int, input().split(\" \"))))\n\nres = 0\nfor i in range(math.factorial(n)):\n    if any(a == b for a, b in zip(food_likes, food_likes[i])):\n        res += 1\n\nprint(res)\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(2 / n)"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # \uc544\ub798\uc758 \ucf54\ub4dc\ub294 \ucd9c\ub825\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc218\uc815\ud558\uc9c0 \ub9c8\uc138\uc694.\n    # \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ubc18\ud658\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    return \"\uc2e4\ud589 \uacb0\uacfc\uac12\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\""
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # write your code here\n    n_1, n_2 = 1, 3\n    p_1 = 1 / 4\n    p_2 = 0.5\n    prob = (p_1 * p_2) / (p_2 * (1 - p_1) + p_1 * (1 - p_2))\n    return prob\n\nsolution(input())\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f'{round(2/N, 6)}'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = N // 2\n    prob = (1.0 - pow(2.0, -a)) / (1.0 - pow(2.0, -a - 1.0))\n    return f\"{prob:.6f}\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    p_odd: float = 2 / n\n    return str(p_odd)\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.6f}'.format(float(input()))"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    probability_odd = 1.0\n    while True:\n        if not (n % 2):\n            probability_odd /= 2\n        n = n / 2\n        if n < 2:\n            break\n    return str(probability_odd)"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 2\n    while a < n:\n        a = a * 3 + 1\n    return str(a/n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    from math import ceil\n    N = int(stdin.strip())\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '0.5'\n    if N == 2:\n        return '0.75'\n    if N == 3:\n        return '0.875'\n    prob = 1\n    for i in range(N-1):\n        prob *= 1-ceil(ceil(N/i) / 2)\n    return str(prob)\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i = map(int, stdin.split())\n    max = 0\n    for i in range(N):\n        if A_i[i] == 1:\n            h_persons = 0\n            for j in range(N):\n                if i == j:\n                    continue\n                if A_i[j] == 1:\n                    h_persons += 1\n            if h_persons > max:\n                max = h_persons\n    return str(max)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    people = set()\n    for i in range(N):\n        A = list(map(int, stdin.split()))\n        if A[0] == 0:\n            if A[2] == 0:\n                people.add(i)\n        elif A[1] == 1:\n            if A[2] == 1:\n                people.add(i)\n    return str(len(people))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\"\\n\")[0])\n    a = [int(i) for i in stdin.strip().split(\"\\n\")[1].split()]\n    arr = [[int(i) for i in stdin.strip().split(\"\\n\")[i + 2].split()] for i in range(n)]\n    h = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 1 and (arr[i][j + 1] == 0 or arr[i + 1][j] == 0):\n                h += 1\n    return str(h)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    return str(max(len(set(x for x in A if x > 0)) for i in range(N)))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.strip().split())\n\n    satisfy = []\n\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if A[i-1] > A[j-1]:\n                satisfy.append(i)\n    return str(len(satisfy))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.splitlines()\n    N = int(N)\n\n    result = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            if i % 2!= j % 2:\n                result = max(result, i)\n\n    return str(result)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2 = map(int, stdin.split())\n    max_honest_persons = 0\n    for i in range(1, A_1 + 1):\n        for j in range(1, A_2 + 1):\n            if i!= j:\n                x, y = map(int, stdin.split())\n                if x == i and y == 0 or x == j and y == 1:\n                    max_honest_persons += 1\n    return str(max_honest_persons)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    t_N_x = stdin.split()\n    A_N = []\n    x = []\n    for i in range(N):\n        A_N.append(int(t_N_x[i]))\n        x.append([int(i) for i in t_N_x[i + 1].split()])\n    return str(len(list(filter(lambda x: x[1] == 1, list(filter(lambda a: a[0] == 0, list(zip(A_N, x))))))) +\n               len(list(filter(lambda x: x[1] == 0, list(zip(A_N, x))))) +\n               len(list(filter(lambda x: x[1] == 1 and x[0]!= 0, list(zip(A_N, x))))))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    for _ in range(N):\n        N1, A1, x11, y11, x12, y12, A2, x21, y21, x22, y22 = stdin.splitlines()[1:]\n        N1, x11, x12, x21, x22, y11, y12, y21, y22 = int(N1), int(x11), int(x12), int(x21), int(x22), int(y11), int(y12), int(y21), int(y22)\n        if A1 == A2 == '1' and (y11 == 0 or y12 == 0 or y21 == 0 or y22 == 0):\n            print(2)\n        else:\n            ans = (1 - x11) + (1 - x12) + (1 - x21) + (1 - x22)\n            if A1 == '1':\n                ans += 1\n            if A2 == '1':\n                ans += 1\n            print(ans)\n    return stdin\nprint(solution(input()))"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, x_1, y_1, A_2, x_2, y_2, A_N, x_N, y_N = stdin.split()\n    return str(max_honest_persons(int(N), int(A_1), int(x_1), int(y_1), int(A_2), int(x_2), int(y_2), int(A_N), int(x_N), int(y_N)))\n\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k: int = int(stdin)\n\n    if k < 1 or k > 100:\n        raise Exception(f\"K must be between 1 and 100 (inclusive), found {k}\")\n    if len(stdin) > k:\n        raise Exception(f\"The length of string exceeds K, found {len(stdin)}\")\n\n    return stdin[0:k] + '...'\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import itertools\n\n    K, S = stdin.split()\n    K = int(K)\n    if K <= 0 or K > 100:\n        return 'K should be between 1 and 100 (inclusive)'\n\n    S = S[:K]\n    print(S)\n\n    return S\n\n\nsolution(\"7\\nnikoandsolstice\")\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin\n    return s[:k] + '...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[:min(len(stdin), int(stdin))], stdin[:min(len(stdin), int(stdin))], stdin[min(len(stdin), int(stdin)):])"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    if len(s) < k:\n        return s\n    return s[:k] + '...'\nsolution(stdin)"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:int(stdin[0])]\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: str\n    return: str\n    \"\"\"\n    k, s = map(int, stdin.split())\n    s = list(s)\n    if len(s) > k:\n        s = s[:k]\n        s = \"\".join(s) + \"...\"\n    return s\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) > k:\n        return s[:k] + \"...\"\n    return s\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    if len(s) <= k:\n        print(s)\n    else:\n        print(s[:k] + \"... \" + s[len(s)-k:])\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    # Your code here\n    return stdin\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(s[:s.find('e')] + 'es' if s.endswith('e') else s +'s')"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join([stdin, 'es']) if stdin[-1]!='s' else ''.join([stdin,'ses'])\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    pass\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] if len(stdin) == 1 else stdin.replace(stdin[-1], stdin[-1] + 'es')\n\nsolution(input())\n'''\nfrom typing import List\n\nS = input()\n\nprint(S if S[-1]!='s' else S + 'es')\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 2\n   ... 1 3\n   ... 1\n   ... 3\n   ...\n   ... 5 2\n   ... 2\n   ... 1 3\n   ... 1\n   ... 3\n   ...\n   ... ''')\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(k+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + n - dp[i-1][j-1]\n    print(dp[k][n])\n    return ''"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    n, k = line[0], line[1]\n    snakes = [[] for i in range(n)]\n    for i in range(n):\n        snakes[i] = line[2*i+1:2*i+2+1]\n    print(snakes)\n    return \"\""
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, _, *nums = stdin.split()\n    nums = list(map(int, nums))\n    n, k = nums[0], nums[1]\n    snakes = list(map(lambda x: x + 1, nums[2:]))\n    snakes.sort()\n    target = snakes[-1]\n    left_index, right_index = 0, k - 1\n    while left_index <= right_index:\n        mid = (left_index + right_index) // 2\n        if snakes[mid] == target:\n            return str(mid + 1)\n        elif snakes[mid] < target:\n            left_index = mid + 1\n        else:\n            right_index = mid - 1\n    return str(right_index + 1)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    d = []\n    for i in range(k):\n        d.append(int(input()))\n\n    result = 0\n\n    # dynamic programming\n    for i in range(k):\n        for j in range(n):\n            if j == 0 or j == d[i] - 1:\n                continue\n            for m in range(d[i]):\n                if j - m == 1 and j - m + d[i] == j:\n                    continue\n                if j - m == d[i] - 1 and j - m + d[i] == j:\n                    continue\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n    ans = 0\n    snakes = []\n    for i in range(k):\n        snakes.append([d[i]])\n    for i in range(k, n):\n        curr = 0\n        for s in snakes:\n            if s[-1] == d[i]:\n                s.append(d[i])\n            elif s[-1] > d[i]:\n                curr += 1\n        if curr == len(snakes):\n            ans += 1\n        snakes.append([d[i]])\n    return str(ans)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    Snakes = [d[i] for i in range(K)]\n    Snakes.sort()\n    Snakes = tuple(Snakes)\n    print(' '.join(map(str, Snakes)))\n    return '1'"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(x) for x in stdin.split())\n    d_i = list(map(int, stdin.split()))\n    A_i_1_to_n = list(map(lambda i: i + 1, range(1, N + 1)))\n    for i in range(K):\n        if d_i[i] == 1:\n            A_i_1_to_n.remove(d_i[i])\n    print(len(A_i_1_to_n))\n    return stdin\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    d = []\n    for i in range(1, N + 1):\n        d.append(i)\n    d.pop()\n    snakes = []\n    for i in range(K):\n        snakes.append(d.pop(0))\n    snakes = sorted(snakes)\n    print(*snakes, sep='\\n')\n    print(len(snakes))\n\n    return '1'"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.strip().split(' ')\n    N = int(N)\n    K = int(K)\n    return str(N)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, N, K, *_ = map(int, stdin.split())\n    _, *_, d_1, *_ = map(int, stdin.split())\n    _, *_, d_K, *_ = map(int, stdin.split())\n    return str(d_1 + d_K)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    slimes = set()\n    fused_slimes = set()\n    max_length = 1\n    color = stdin[0]\n    for char in stdin[1:]:\n        if color == char:\n            max_length += 1\n        else:\n            fused_slimes.add((color, max_length))\n            max_length = 1\n            color = char\n    fused_slimes.add((color, max_length))\n    return len(fused_slimes)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    answer = 1\n    while True:\n        if N == 0:\n            break\n        lst = []\n        for i in range(N):\n            if S[i] in lst:\n                continue\n            else:\n                lst.append(S[i])\n                lst.append(S[i])\n                N -= 2\n        answer += 2\n    return answer\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    slime_num = 0\n    slime_groups = []\n    stdin = stdin.split()\n    N = int(stdin[0])\n    \n    for i in range(N):\n        slime_num += 1\n        slime_groups.append(stdin[i])\n    \n    slime_groups.sort(key=len)\n    for i in range(1, len(slime_groups)):\n        if slime_groups[i] == slime_groups[i - 1]:\n            slime_num -= 1\n    \n    return str(slime_num)"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[:N]\n    slime = {S[0]}\n    count = 1\n    while len(slime) < N:\n        nxt = set()\n        for s in slime:\n            for i in range(len(S)):\n                if S[i] == s:\n                    nxt.add(S[:i] + S[i + 1:])\n                    break\n        if len(nxt) == 0:\n            break\n        else:\n            slime = nxt\n            count += 1\n    return str(len(slime))\nprint(solution(input()))"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin)\n    s = stdin\n\n    # solution\n    # create the initial list\n    slimes = []\n\n    # generate the initial list by splitting the string\n    # add the split list into the list\n    for index in range(len(s)):\n        slimes.append([s[index]])\n\n    # start the outer loop\n    while True:\n        # inner loop\n        inner_loop_count = 0\n        for index_1 in range(len(slimes)):\n            inner_loop_count += 1\n            for index_2 in range(inner_loop_count):\n                # check if the two slimes are adjacent and fuse them\n                if slimes[index_1] == slimes[index_1 + index_2]:\n                    # store the new slime and remove the old ones\n                    # also add this new slime into the list\n                    slimes.append(slimes[index_1] + slimes[index_1 + index_2])\n                    del slimes[index_1 + index_2]\n                    del slimes[index_1]\n                    break\n        # check if there are any more slimes\n        if len(slimes) == 0:\n            # there are no more slimes, break out of the loop\n            break\n\n    # return the number of slimes\n    return len(slimes)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    S: str = stdin\n\n    # make a dict of letter: count\n    d: dict = defaultdict(int)\n    for letter in S:\n        d[letter] += 1\n\n    # check for repeats\n    if len(d)!= N:\n        return \"0\"\n\n    # if they are all the same, return number of the two\n    if len(set(d.values())) == 1:\n        return str(len(d.values()) - 1)\n\n    # if they are all different, return number of unique colors\n    return str(len(set(d.values())))\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    slimes = stdin.split()\n    used = {c:False for c in slimes}\n    num_fuses = 0\n    \n    while True:\n        if len(slimes) == 0:\n            break\n        else:\n            # Check for adjacent slimes\n            c1, c2 = slimes.pop(0), slimes.pop(0)\n            if used[c1] and used[c2]:\n                continue\n            elif used[c1] and not used[c2]:\n                used[c2] = True\n                num_fuses += 1\n            elif not used[c1] and used[c2]:\n                used[c1] = True\n                num_fuses += 1\n            else:\n                # Fuse slimes\n                c1, c2 = slimes.pop(0), slimes.pop(0)\n                num_fuses += 1\n                used[c2] = True\n                used[c1] = True\n                if c1 == c2:\n                    slimes.append(c1)\n                else:\n                    slimes.append(c1+c2)\n    return str(num_fuses)\n\n'''\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: 0.009\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    r = []\n    i = 0\n    while i < n - 1:\n        if s[i] == s[i + 1]:\n            s = s[:i] + 'a' + s[i + 2:]\n            i += 2\n        else:\n            i += 1\n    return s\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    s = lines[1]\n\n    ans = 0\n\n    if n == 1:\n        return '1'\n    elif n == 2:\n        if s == 'a' or s == 'b' or s == 'c':\n            return '2'\n        else:\n            return '1'\n    else:\n        a = 'a'\n        b = 'b'\n        c = 'c'\n        a_l = 0\n        b_l = 0\n        c_l = 0\n        fusion = False\n\n        for i in range(n):\n            if s[i] == a:\n                a_l += 1\n                if a_l >= 2 and fusion == False:\n                    ans += 1\n                    fusion = True\n            if s[i] == b:\n                b_l += 1\n                if b_l >= 2 and fusion == False:\n                    ans += 1\n                    fusion = True\n            if s[i] == c:\n                c_l += 1\n                if c_l >= 2 and fusion == False:\n                    ans += 1\n                    fusion = True\n        return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes the input, returning the output in the required format\n    \"\"\"\n    n, seq = stdin.split()\n    n = int(n)\n    seq = list(map(int, seq.split()))\n    res = 0\n    \n    for i in range(1, n):\n        if seq[i] % 2 == 0:\n            seq[i] = seq[i] // 2\n            res += 1\n        elif seq[i] % 3 == 0:\n            seq[i] = seq[i] * 3\n            res += 1\n    \n    return str(res)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    max_count: int = 0\n    sequence: List[int] = []\n    sequence.append(int(stdin))\n    while max_count < 3:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence.pop() // 2)\n        elif sequence[-1] % 3 == 0:\n            sequence.append(sequence.pop() // 3)\n        else:\n            sequence.append(sequence.pop())\n        max_count += 1\n    return str(max_count)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 0 or n == 1:\n        return str(n)\n    ans: str = \"\"\n    for i in range(n):\n        ans += \"a\"\n    return ans\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    \n    sequence = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    operation = {\n        '1': [1, 2],\n        '2': [1, 2],\n        '3': [1, 3],\n        '4': [1, 3, 2],\n        '5': [1, 3, 2],\n        '6': [1, 3, 2],\n        '7': [1, 3, 2],\n        '8': [1, 3, 2],\n        '9': [1, 3, 2],\n        '10': [1, 3, 2]\n    }\n    \n    res = 0\n    while True:\n        if sequence == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}:\n            break\n        if sequence.issubset(sequence | {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) and len(sequence) >= 2:\n            for op, ops in operation.items():\n                for op2, ops2 in operation.items():\n                    if len(ops) < 2:\n                        continue\n                    ops3 = ops\n                    ops3.remove(ops2[0])\n                    if ops3 == {1}:\n                        res = max(res, ops2[1] + ops2[2])\n        sequence = sequence - {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        sequence.add(1)\n        sequence.add(2)\n        sequence.add(3)\n        sequence.add(4)\n        sequence.add(5)\n        sequence.add(6)\n        sequence.add(7)\n        sequence.add(8)\n        sequence.add(9)\n        sequence.add(10)\n        \n    return str(res)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    res = 0\n    temp_max = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            if temp_max <= 2:\n                temp_max = 1\n            elif temp_max > 2:\n                temp_max = temp_max - 1\n            for k in range(1, N):\n                if temp_max <= 2:\n                    temp_max = 1\n                elif temp_max > 2:\n                    temp_max = temp_max - 1\n                if A[i]!= 0 and A[j]!= 0 and A[k]!= 0:\n                    a1 = A[i] / 2\n                    a2 = A[j] / 3\n                    a3 = A[k] / 2\n                    if a1!= a2 and a2!= a3 and a1!= a3:\n                        A[i] = a1\n                        A[j] = a2\n                        A[k] = a3\n                        res = res + 1\n    return str(res)\n    return str(A)\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str(int(str(A) + str(A)))\n    return str"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    while True:\n        if a[0] % 2 == 0:\n            a[0] = a[0] // 2\n        else:\n            a[0] = a[0] * 3 + 1\n        if a[-1] % 2 == 0:\n            a[-1] = a[-1] // 2\n        else:\n            a[-1] = a[-1] * 3 + 1\n        if all(map(lambda x: x % 2!= 0, a)):\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1 or N > 10**4:\n        raise ValueError\n    a = list(map(int, stdin.split()))\n    if len(a)!= N:\n        raise ValueError\n    for i in range(N):\n        if not (1 <= a[i] <= 1e9):\n            raise ValueError\n    dp = [[0, 0, 0] for _ in range(N)]\n    for i in range(N):\n        if i == 0:\n            continue\n        for j in range(3):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + 1\n            elif j == 1:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n    return max(dp[N-1])\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_of_operations = 0\n    numbers = stdin.split(' ')\n    sequence = list(map(int, numbers[1:]))\n    for i in range(len(sequence)):\n        if sequence[i] % 2 == 0 and sequence[i] % 3 == 0:\n            sequence.pop(i)\n            num_of_operations += 2\n        elif sequence[i] % 3 == 0:\n            sequence.pop(i)\n            num_of_operations += 1\n    return str(num_of_operations)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, *a) = stdin.split()\n    if not a:\n        return '0'\n\n    ans = 0\n    for i in range(1, len(a)):\n        ans = max(ans,\n                  sum([1 for j in range(i) if a[j] == '3']),\n                  sum([1 for j in range(i) if a[j] == '2']),\n                  sum([1 for j in range(i) if a[j] == '1']),\n                  1)\n\n    return str(ans)"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    return str(sum([int(a[i]/2)*3 if i == 0 or i == N-1 else int(a[i]/2)*3+int(a[i-1]/2)*3 if i == 1 else int(a[i]/3)*3+int(a[i-1]/2)*3+int(a[i-2]/2)*3 for i in range(N)]))"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input in the format:\n    A B C K\n    :return: max sum of numbers written on the cards\n    \"\"\"\n    a, b, c, k = map(int, stdin.split())\n    result = 0\n\n    while (a or b or c) and k > 0:\n        # if either card has a value, add the value of that card to the result\n        if a:\n            result += a\n            a -= 1\n        elif b:\n            result += b\n            b -= 1\n        elif c:\n            result += c\n            c -= 1\n        k -= 1\n\n    return result\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.split())))"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C, K = map(int, stdin.split(' '))\n\n    cards = [[0] * (A + 1) for _ in range(B + 1)]\n    for i in range(1, C + 1):\n        cards[i % 2][i] = -1\n    cards[1][1] = 1\n\n    for row in range(2, B + 1):\n        for col in range(1, A + 1):\n            if row % 2 == 1:\n                cards[row][col] = max(cards[row - 1][col], cards[row][col - 1])\n            else:\n                cards[row][col] = max(cards[row - 1][col], cards[row][col - 1], cards[row - 1][col - 1] + cards[row][col - 1])\n    return str(cards[B][C])\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.strip().split(' ')[0])\n    B = int(stdin.strip().split(' ')[1])\n    C = int(stdin.strip().split(' ')[2])\n    K = int(stdin.strip().split(' ')[3])\n\n    total = (A+B+C)*K\n    if total % 2 == 0:\n        return str(total)\n    else:\n        return str(total-1)"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return str(max([sum(x) for x in itertools.product((1, -1), repeat=K)]))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    A, B, C, K = map(int, stdin[0].split())\n    if A + B + C == K:\n        return str(A+B+C)\n    else:\n        return str(A + B)"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    total = A + B + C\n    if K > total:\n        return -1\n    else:\n        return max((K + A) * 2, (K + B) * 2, (K + C) * 2)\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = stdin.split()\n    return str(max([int(A), int(B), int(C)]))"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = stdin.split()\n    return str(max(int(A), int(B), int(C)) + max(int(A), int(B), int(C)))\n    # Your code goes here"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    input_ = stdin.split()\n    x = int(input_[0])\n    y = int(input_[1])\n    if x*y == (x+y)*2:\n        print('Yes')\n    else:\n        print('No')\n    return 'Yes' if x*y == (x+y)*2 else 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if x == 2 * y else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input_arr = stdin.split()\n    x = int(input_arr[0])\n    y = int(input_arr[1])\n    \n    c = y//2\n    t = y - c\n    \n    if x == t and y == x*2:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split(\" \"))\n    total = (X * Y) + ((X - 1) * Y + 1)\n    if total % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    c = int(stdin[0])\n    t = int(stdin[1])\n    if c * t >= 4:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nsolution(input())\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    x = int(stdin[0])\n    y = int(stdin[1])\n    ans = False\n    if (x > y):\n        if (x % 2 == 0) and (y % 4 == 0):\n            ans = True\n    return \"Yes\" if ans else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if 2 * x + 4 * y == 100 else \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X <= Y and (X*X) == Y:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    stdin = stdin.split()\n    num_cranes = int(stdin[0])\n    num_turtles = int(stdin[1])\n    legs_cranes = 0\n    legs_turtles = 0\n    for i in range(num_cranes):\n        legs_cranes += 4\n    for i in range(num_turtles):\n        legs_turtles += 2\n    if legs_cranes == legs_turtles:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return \"Yes\" if (X - 1) * (Y - 1) == 0 else \"No\"\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = set()\n    visited.add(1)\n    paths = 0\n    visit_at_least_once(graph, 1, paths, visited)\n    return str(paths)\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # return your answer\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Counts number of paths from vertex 1 to all vertices.\n    :param stdin: The input graph.\n    :return: Number of paths from vertex 1 to all vertices.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    n_vertices = range(1, n + 1)\n    graph = [[] for _ in n_vertices]\n    for _ in range(m):\n        i, j = map(int, stdin.split())\n        i, j = i - 1, j - 1\n        graph[i].append(j)\n        graph[j].append(i)\n\n    visited = set()\n    count = 0\n\n    def dfs(current: int):\n        nonlocal count\n        if current not in visited:\n            count += 1\n            visited.add(current)\n        for nxt in graph[current]:\n            if nxt not in visited:\n                dfs(nxt)\n    dfs(1)\n    return count\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    visited = set()\n    visited.add(1)\n    count = 0\n    def traverse(node):\n        visited.add(node)\n        if node == n:\n            count += 1\n        else:\n            for neigh in graph[node]:\n                if neigh not in visited:\n                    traverse(neigh)\n    traverse(1)\n    print(count)\n    return\n\nsolution(input())\n'''\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(x) for x in stdin.split())\n    adj = [[] for _ in range(N)]\n    visited = set()\n    for i in range(M):\n        a, b = (int(x) for x in stdin.split()[i + 1].split(' '))\n        adj[a - 1].append(b - 1)\n        adj[b - 1].append(a - 1)\n\n    visited.add(1)\n    return len({len(x) for x in itertools.product(visited, visited, visited)})\n    # Your Code Here"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N,M = map(int, stdin.split())\n  graph = [[] for _ in range(N)]\n  for i in range(M):\n    a,b = map(int, stdin.split())\n    graph[a].append(b)\n    graph[b].append(a)\n  visited = set()\n  return DFS(graph,visited,1)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = {1}\n    current_node = 1\n    count = 0\n    while current_node!= len(graph):\n        for neighbor_node in graph[current_node]:\n            if neighbor_node not in visited:\n                visited.add(neighbor_node)\n                count += 1\n        current_node = len(visited)\n    return count\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.visited = []\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def dfs(self, root, path):\n        self.visited[root] = True\n        path.append(root)\n        for i in self.graph[root]:\n            if not self.visited[i]:\n                self.dfs(i, path)\n        return path\n\n    def dfs_path(self, root, destination, path):\n        self.visited[root] = True\n        path.append(root)\n        if root == destination:\n            return path\n        for i in self.graph[root]:\n            if not self.visited[i]:\n                path_copy = path.copy()\n                self.dfs_path(i, destination, path_copy)\n        return path_copy\n\n    def dfs_all(self):\n        self.visited = [False] * self.V\n        for i in range(self.V):\n            if not self.visited[i]:\n                self.dfs(i, [])\n\n    def dfs_all_paths(self):\n        self.visited = [False] * self.V\n        paths = []\n        for i in range(self.V):\n            if not self.visited[i]:\n                paths.append(self.dfs_path(i, i, []))\n        return paths\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n    start = 1\n    visited = set()\n    visited.add(start)\n    path = [start]\n    for _ in range(n):\n        next_node = set()\n        for node in path:\n            for nei in adj[node]:\n                if nei not in visited:\n                    next_node.add(nei)\n        visited = visited.union(next_node)\n        path = list(next_node)\n    return len(visited)\n\"\"\"\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(2 ** (N - 1) - (2 ** (N - 2) - 1) // (M - 1))\n\n\n\n'''\n\nimport math"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = list(map(int, stdin.split()))\n    apples = list(map(int, stdin.split()))\n    res = 0\n    least = -2147483648\n    for i in range(N-1):\n        res += apples[i]\n        res -= apples[i+1]\n        if abs(res - L) > abs(least - L):\n            least = res\n    return str(least)\n\nprint(solution(input()))"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = sorted([int(i) for i in input().split()])\n    apples = [apples[i] for i in range(len(apples))]\n    for i in range(len(apples)-1):\n        apples[i+1] = apples[i+1] + L - apples[i]\n    print(min(apples))"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = list(map(int, stdin.split()))\n    # We can put the starting value of the pile into a dictionary\n    # We can put a negative value in the dictionary so that we can find the minimum difference\n    pile = {a: -1 for a in apples}\n    # We also want to put the value of the key equal to 1\n    pile[1] = 1\n    # Now we will find the maximum difference\n    max_diff = 0\n    # We start from N and move to the one less than N\n    for i in range(N, 1, -1):\n        # We start with L-i and we want to keep increasing L till we find the best choice\n        # We want to maximize L because we want to make a pie with the most difference\n        # We also want to minimize L so that we can find the largest difference\n        for j in range(L - i + 1):\n            # We start with the maximum difference and we want to reduce it till we find the minimum difference\n            # We also want to minimize the difference so that we can find the largest difference\n            for k in range(i, 0, -1):\n                diff = 0\n                # We want to update the values of the dictionary to keep the value the same\n                for apple in apples:\n                    diff += k + pile[apple]\n                if diff < max_diff:\n                    pile[i] = k + pile[i]\n                    max_diff = diff\n    return str(max_diff)\n\nprint(solution(input()))"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_ = list(map(int, stdin.split()))\n    n = input_[0]\n    l = input_[1]\n    n -= 1\n    while n!= 0:\n        n -= 1\n        l += n\n    return l\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n\n    apple_list = list(map(int, stdin.split()))\n    apple_list.sort()\n    diff = float('inf')\n    res = -1\n    for i in range(N):\n        apple = 0\n        for j in range(i):\n            apple += apple_list[j]\n        apple += apple_list[i]\n        diff = min(diff, abs(apple - L))\n        if diff == 0:\n            break\n    return str(diff)"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    ans = 0\n    flavors = list(map(int, list(stdin)))\n    if sum(flavors) - n < 0:\n        return '0'\n    flavors = sorted(flavors, key=lambda x: x, reverse=True)\n    while flavors:\n        flavor = flavors.pop()\n        ans += flavor\n        if ans >= l:\n            return str(ans)\n    return '0'\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    f = (L + 1) * (N // 2 + 1)\n    res = 0\n    for i in range(1, N // 2 + 1):\n        f += i\n        res = max(res, f)\n        f -= i\n    return str(res)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apple_list = list(map(int, stdin.split()))\n\n    apple_list.sort(reverse=True)\n    apple_list.append(0)\n    ans = 0\n    for i in range(n):\n        if l > 0:\n            ans += apple_list[i] + l\n            l -= apple_list[i]\n        else:\n            break\n    print(ans)\n\n    return ans\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data: list = stdin.split()\n    apple_count: int = int(data[0])\n    flavor_list: list = list(map(int, data[1].split()))\n    target_flavor: int = int(data[2])\n\n    sorted_flavor_list: list = sorted(flavor_list, reverse=True)\n    flag = True\n    for i in range(apple_count):\n        if sorted_flavor_list[i] > target_flavor:\n            flag = False\n            break\n    if flag:\n        return \"-1\"\n    return str(sum(sorted_flavor_list))\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 2\n   ... 2 3 4 5 6\n   ... ''')\n    '18'\n    >>> solution('''3 5\n   ... 3 3 3 3 2\n   ... ''')\n    '27'\n    >>> solution('''5 4\n   ... 4 5 4 5 3\n   ... ''')\n    '12'\n    >>> solution('''5 3\n   ... 4 5 4 5 3\n   ... ''')\n    '14'\n    >>> solution('''5 2\n   ... 1 1 1 1 1\n   ... ''')\n    '20'\n    '''\n    pass\n    N, L = map(int, stdin.split())\n    apple_pie = []\n    for i in range(1, N+1):\n        apple_pie.append(L+i-1)\n    sum_of_all_apples = sum(apple_pie)\n    sum_of_remaining_apples = sum(apple_pie)\n    for apple in apple_pie:\n        sum_of_remaining_apples -= apple\n        diff_of_remaining_apples = abs(sum_of_remaining_apples)\n        if diff_of_remaining_apples < sum_of_all_apples:\n            return str(diff_of_remaining_apples)\n    return '-1'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    counter = 0\n    return sum(i for i in range(1, N+1) if i % 3 == 0 or i % 5 == 0)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def fizzBuzz(n: int) -> int:\n        if n % 3 == 0 and n % 5 == 0:\n            return \"FizzBuzz\"\n        elif n % 3 == 0:\n            return \"Fizz\"\n        elif n % 5 == 0:\n            return \"Buzz\"\n        else:\n            return n\n\n    result = 0\n    for i in range(1, int(stdin) + 1):\n        result += fizzBuzz(i)\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for i in range(1,int(stdin) + 1):\n        if (i%3 == 0) and (i%5 == 0):\n            sum += i\n            print(i, end=\" \")\n        elif i%3 == 0:\n            sum += i\n            print(i, end=\" \")\n        elif i%5 == 0:\n            sum += i\n            print(i, end=\" \")\n        else:\n            print(i, end=\" \")\n    return str(sum)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in input in the form of a string,\n    splits the input string and stores the numbers in a list.\n    Sums the numbers in the list and prints the sum.\n    \"\"\"\n    number_list = []\n    for number in stdin.split(\" \"):\n        number_list.append(int(number))\n    return str(sum(number_list))\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    total = 0\n    while i < n:\n        if i % 3 == 0:\n            total += i\n        if i % 5 == 0:\n            total += i\n        if i % 5 == 0 and i % 3 == 0:\n            total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += i\n            print(f'{i} : FizzBuzz')\n        elif i % 3 == 0:\n            total += i\n            print(f'{i} : Fizz')\n        elif i % 5 == 0:\n            total += i\n            print(f'{i} : Buzz')\n        else:\n            print(f'{i} : {i}')\n    return str(total)\n\nsolution(input())\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total: int = 0\n    for i in range(1, int(stdin) + 1):\n        if i % 3 == 0 and i % 5!= 0:\n            total += i\n        elif i % 5 == 0 and i % 3!= 0:\n            total += i\n        elif i % 5 == 0 and i % 3 == 0:\n            total += i\n        else:\n            total += i\n    return str(total)"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin: input\n\n    Returns:\n    answer\n    \"\"\"\n    input = stdin\n\n    # N = int(input())\n    # FizzBuzz = []\n    # for i in range(N):\n    #     FizzBuzz.append(i)\n    # if 3 in FizzBuzz and 5 in FizzBuzz:\n    #     print(FizzBuzz)\n    # else:\n    #     if 3 in FizzBuzz:\n    #         print(FizzBuzz)\n    #     else:\n    #         if 5 in FizzBuzz:\n    #             print(FizzBuzz)\n    #         else:\n    #             print(i)\n    # N = int(input())\n    # N = int(input())\n    # N = int(input())\n    # FizzBuzz = []\n    # for i in range(N):\n    #     FizzBuzz.append(i)\n    # print(FizzBuzz)\n    #\n    # print(sum(FizzBuzz))\n    N = int(input())\n    FizzBuzz = []\n    for i in range(N):\n        FizzBuzz.append(i)\n        if 3 in FizzBuzz and 5 in FizzBuzz:\n            FizzBuzz[i] = \"FizzBuzz\"\n        if 3 in FizzBuzz:\n            FizzBuzz[i] = \"Fizz\"\n        if 5 in FizzBuzz:\n            FizzBuzz[i] = \"Buzz\"\n        if 5 not in FizzBuzz:\n            FizzBuzz[i] = i\n\n    print(sum(FizzBuzz))\n    return\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    a, n = map(int, stdin.split())\n    res = 0\n    for i in range(1, n+1):\n        res = res + i if (i % 3 == 0 or i % 5 == 0) else res + i\n    return str(res)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    count = 0\n    result = []\n    for i in range(1, N + 1):\n        if count % 3 == 0 and count % 5 == 0:\n            result.append(str(fizzbuzz(i)))\n        elif count % 3 == 0:\n            result.append(str(fizz(i)))\n        elif count % 5 == 0:\n            result.append(str(buzz(i)))\n        else:\n            result.append(i)\n        count += 1\n    return str(sum(result))\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    low, high = 0, p[-1] - p[0]\n    while low < high:\n        mid = (low + high) // 2\n        if x - mid > p[0] - mid:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    seq = sorted(map(int, stdin.split()))\n    min_diff = X - seq[0]\n    for i in range(1, N):\n        diff = X - seq[i]\n        if abs(diff) < abs(min_diff):\n            min_diff = diff\n    return str(seq[i])\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    if len(seq) < n:\n        return 0\n    seq.sort()\n    ans = seq[n - 1]\n    for i in range(n - 1, 0, -1):\n        ans = max(ans, seq[i] - x)\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n = map(int, stdin.split())\n    # map --> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0438\u043c\u0435\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 __iter__, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u043e\u0436\u0438\u0442 \u0432\u0441\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u043a\u043e\u0440\u0442\u0435\u0436 \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430.\n    x = sorted(list(map(int, stdin.split())))\n    print(x[n - 1] - x[0])\n    return str(x[n - 1] - x[0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    arr = sorted(map(int, stdin.split()))\n\n    p = min(abs(x - i) for i in arr)\n    return str(arr[(p + 1) % n])\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    x, n = int(stdin[0]), int(stdin[1])\n    p = [int(i) for i in stdin[2:]]\n    if p[-1] >= x:\n        return x\n    else:\n        if p[0] < p[-1]:\n            p.reverse()\n        for i in range(1, n):\n            if p[i - 1] < p[i] and p[i] > p[i + 1]:\n                return p[i]\n            else:\n                if p[i] > p[i - 1]:\n                    return p[i - 1]\n        return p[0]\n\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    sequ = sorted([int(x) for x in stdin.split()])\n    min_diff = abs(X - sequ[0])\n    for i in range(1, N):\n        diff = abs(sequ[i] - X)\n        min_diff = min(min_diff, diff)\n    return str(sequ[N - 1] + min_diff)"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def sort_by_abs_difference(arr):\n        arr.sort(key=abs)\n        return arr\n\n    X, N = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    print(array)\n    sort_array = sort_by_abs_difference(array)\n    print(sort_array)\n    min_difference = X - sort_array[0]\n    for i in range(1, len(sort_array)):\n        difference = X - sort_array[i]\n        if min_difference > difference:\n            min_difference = difference\n    return str(sort_array[0]) + \" \" + str(min_difference)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    seq = map(int, stdin.split())\n    seq_set = set(seq)\n    l = x\n    for i in range(n):\n        l = min(l, seq.index(x - seq[i]))\n    return seq[l]\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = stdin.split()\n    x, n = int(x), int(n)\n\n    xs = list(map(int, input().split()))\n    print(min(abs(x - i) for i in xs))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    height, width = map(int, stdin.split())\n    if width == 0 or height == 0:\n        return 0\n    if width > 20 or height > 20:\n        return 'Impossible'\n    if width == height:\n        return height * width\n    return (height + width - 1) * width // 2"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = stdin.split()\n    rows, cols = int(rows), int(cols)\n\n    rows_visited = set()\n    cols_visited = set()\n    result = 0\n\n    for row in range(rows):\n        if row in rows_visited:\n            continue\n\n        rows_visited.add(row)\n        result += 1\n\n        for col in range(cols):\n            if col in cols_visited:\n                continue\n\n            cols_visited.add(col)\n            result += 1\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n > 0 and m > 0:\n        for i in range(n):\n            for j in range(m):\n                print(\"*\" if i == j else \" \", end=\"\")\n            print(\"\")\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    # One row and one column are chosen by default\n    white = h * w\n\n    # One row and one column are chosen\n    for h_row in range(1, h + 1):\n        for w_col in range(1, w + 1):\n            # A white cell is one in a row or column\n            white -= 1\n\n    # The remaining white cells are the sum of their neighbors\n    for h_row in range(1, h):\n        for w_col in range(1, w):\n            if h_row == 0 or h_row == h:\n                # The first row or column\n                white += 1\n            elif w_col == 0 or w_col == w:\n                # The last column or row\n                white += 1\n            else:\n                # The neighbor cells\n                white += 1\n\n    return str(white)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    #  inputs = stdin.strip().split(\"\\n\")\n\n    # print(inputs)\n    # rows = int(inputs[0])\n    # cols = int(inputs[1])\n\n    rows = int(stdin[0])\n    cols = int(stdin[1])\n\n    cell_count = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            # print(i, j)\n            # print(\"row: \", i, \" col: \", j)\n            # print(\"cell: \", i, j)\n            if (i == 0 or i == rows - 1) and (j == 0 or j == cols - 1):\n                # print(\"yes\")\n                cell_count += 1\n            elif (i == 0 or i == rows - 1) or (j == 0 or j == cols - 1):\n                # print(\"no\")\n                cell_count += 1\n            else:\n                cell_count += 1\n    return str(cell_count)\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split()\n    return str(H * W - (2 * (int(H) - 1) * (int(W) - 1)))\n    \n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    h, w = map(int, lines[0].split())\n    \n    n = h * w\n    if n < 1 or n > 20:\n        return str(0)\n    \n    h_matrix = [[1 for _ in range(w)] for _ in range(h)]\n    w_matrix = [[1 for _ in range(w)] for _ in range(h)]\n    \n    for i in range(1, h):\n        for j in range(1, w):\n            h_matrix[i][j] = h_matrix[i-1][j] + h_matrix[i][j-1]\n            w_matrix[i][j] = w_matrix[i-1][j] + w_matrix[i][j-1]\n    \n    return str(h_matrix[-1][-1] + w_matrix[-1][-1])\n\nsolution(\"4 5\")\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [h, w] = map(int, stdin.split())\n\n    # Check if h is one less than w.\n    if h < w:\n        h, w = w, h\n\n    # Get the number of columns to paint.\n    n = h + w - 2\n\n    # Loop through the coordinates of the painted cells.\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            print(1 if (i <= h and j <= w) else 0, end=' ')\n        print()\n\n    return ''\n\nsolution('3 2')\n\n'''\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    return str(min(H, W) - max(H, W))\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split()\n    sequence = list(map(int, num_list[1].split()))\n    k = int(num_list[2])\n    ans_list = []\n    for i in range(1, 10**9+1):\n        if (sum(sequence) - i) <= i and (sum(sequence) - i) >= 0:\n            ans_list.append(i)\n    if len(ans_list) == 0:\n        return \"-1\"\n    else:\n        return str(min(ans_list))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, k = int(stdin[0]), int(stdin[1])\n    arr = list(map(int, stdin[2]))\n    for _ in range(k):\n        for i in range(len(arr)):\n            if arr[i] == max(arr):\n                arr.pop(i)\n                break\n    return '-1' if len(arr) == 0 else ''.join(map(str, arr))\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    m = 0\n    for i in range(n):\n        if s[i] >= m:\n            m = s[i]\n    if m == 0:\n        return '-1'\n    c = 0\n    for i in range(n):\n        if s[i] < m and s[i] >= c:\n            c = s[i]\n            break\n    return str(c)"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def valid_answer(number: int, elements: list[int]) -> bool:\n        return number not in elements\n\n    def process_sequence(sequence: list[int]) -> bool:\n        seen_elements = set()\n        count = 0\n        for element in sequence:\n            if valid_answer(element, seen_elements):\n                count += 1\n                seen_elements.add(element)\n\n        return count >= k\n\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    sequence = list(map(int, stdin.split()))\n\n    if process_sequence(sequence):\n        return str(sequence[0])\n    else:\n        return '-1'\n    #return str(sequence[0]) if process_sequence(sequence) else '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 2\n    3 7 5 1 10 3 20\n    ''')\n    6\n    >>> solution('''7 2\n    3 7 5 1 10 3 20\n    ''')\n    -1\n    '''\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    print(-1 if k > s.count(max(s)) else max(s) if k <= s.count(max(s)) else -1)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = sorted(map(int, input().split()))\n    if a[0] > 0:\n        return '-1'\n    ans = 0\n    for i in range(k):\n        ans += a[i]\n    for i in range(k, n):\n        ans -= a[i-k]\n    return str(ans)"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = list(map(int, stdin.split()))\n    ans = [-1]\n    s = set()\n    for i in range(n):\n        if num[i] in s:\n            ans.append(num[i])\n            return \",\".join(map(str, ans))\n        s.add(num[i])\n    return \",\".join(map(str, ans))\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    count = 0\n    while a:\n        m = a.pop(0)\n        if b.count(m) < m:\n            count += 1\n    return str(count) if count else '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    for i in range(1, N):\n        if A[i] == A[i-1] and A[i] >= K:\n            print(A[i], end=' ')\n            return\n    print(-1)"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n\n    for x in range(1, 10**9):\n        if len(sequence) < k:\n            continue\n        for j in range(len(sequence) - k + 1):\n            if all(sequence[i] <= x for i in range(j, j + k)):\n                return str(x)\n    return \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, m = map(int, stdin.split())\n    star_cnt = 0\n    stars = []\n    for i in range(n):\n        line = stdin[i*m:i*m+m]\n        if '*' not in line:\n            continue\n        stars.append(line.find('*'))\n        star_cnt += 1\n        for j in range(len(line)-1):\n            if line[j] == line[j+1]:\n                stars.append(j)\n                star_cnt += 1\n        stars.append(len(line)-1)\n        star_cnt += 1\n    if star_cnt > n*m:\n        return str(-1)\n    ans = []\n    for i in range(star_cnt):\n        if i % 3 == 0:\n            row = int(i // 3)\n        elif i % 3 == 1:\n            col = int(i // 3)\n        else:\n            size = int(i // 3)\n        if stars[i] == stars[i + 1] and stars[i] == stars[i + 2]:\n            ans.append(3)\n            continue\n        elif stars[i] == stars[i + 1] or stars[i] == stars[i + 2] or stars[i + 1] == stars[i + 2]:\n            if stars[i] == stars[i + 1]:\n                ans.append(2)\n                continue\n            ans.append(1)\n            if stars[i] == stars[i + 1]:\n                ans.append(1)\n                continue\n            ans.append(1)\n        else:\n            ans.append(1)\n    return '\\n'.join(map(str, ans))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    grid = stdin.split()\n    ans = \"\"\n    if n == 1 or m == 1:\n        return \"-\"\n    def start(i, j, k):\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return\n        if grid[i][j] == \"*\":\n            return\n        if k == 0:\n            ans += \"*\"\n            return\n        start(i, j+1, k-1)\n        start(i+1, j, k-1)\n        start(i, j-1, k-1)\n        start(i-1, j, k-1)\n\n    start(0,0,n*m)\n    return ans\nprint(solution(input()))"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        row = list(stdin[n * _ + 1])\n        grid.append(row)\n    return f\"{find_stars(n, m, grid)}\"\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    asterisk, dots = stdin.split('\\n')\n    asterisk = list(asterisk)\n    dots = list(dots)\n    if (asterisk[0] == '.' and dots[0] == '.'):\n        print(\"-1\")\n    asterisk = list(asterisk[1:])\n    dots = list(dots[1:])\n    if (asterisk[-1] == '*' and dots[-1] == '*'):\n        return\n    if (asterisk[-1] == '*'):\n        asterisk.pop()\n        dots.append('.')\n        asterisk.pop()\n        asterisk.append('*')\n        dots.append('*')\n        dots.append('.')\n    if (dots[-1] == '*'):\n        asterisk.append('.')\n        dots.append('*')\n        dots.append('*')\n        dots.append('.')\n    if (asterisk[0] == '*'):\n        asterisk.pop(0)\n        asterisk.append('.')\n    if (dots[0] == '*'):\n        dots.pop(0)\n        dots.append('.')\n    asterisk_length = len(asterisk)\n    dots_length = len(dots)\n    if (asterisk_length == 0 and dots_length == 0):\n        print(asterisk_length * dots_length)\n    elif (asterisk_length == 0):\n        asterisk_length = 1\n    elif (dots_length == 0):\n        dots_length = 1\n    else:\n        asterisk_length = len(asterisk)\n        dots_length = len(dots)\n    if (asterisk_length >= dots_length):\n        for i in range(dots_length):\n            asterisk[i] = '*'\n            dots[i] = '.'\n        asterisk_length = len(asterisk)\n        dots_length = len(dots)\n        k = 1\n        while (k < asterisk_length):\n            k = k + 1\n            for i in range(dots_length):\n                if (dots[i] == '.'):\n                    asterisk[i] = '*'\n                    dots[i] = '*'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n                elif (asterisk[i] == '*'):\n                    asterisk[i] = '.'\n                    dots[i] = '.'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n                elif (dots[i] == '*'):\n                    dots[i] = '.'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n                elif (dots[i] == '.'):\n                    dots[i] = '*'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n        print(asterisk_length * dots_length)\n        return\n    else:\n        for i in range(asterisk_length):\n            dots[i] = '*'\n            asterisk[i] = '.'\n        asterisk_length = len(asterisk)\n        dots_length = len(dots)\n        k = 1\n        while (k < asterisk_length):\n            k = k + 1\n            for i in range(dots_length):\n                if (dots[i] == '.'):\n                    asterisk[i] = '*'\n                    dots[i] = '*'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n                elif (asterisk[i] == '*'):\n                    asterisk[i] = '.'\n                    dots[i] = '.'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n                elif (dots[i] == '*'):\n                    dots[i] = '.'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n                elif (dots[i] == '.'):\n                    dots[i] = '*'\n                    k = k + 1\n                    if (k == asterisk_length):\n                        print(asterisk_length * dots_length)\n                        return\n        print(asterisk_length * dots_length)\n        return\nsolution(input())\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    grid = stdin[1:]\n\n    for i in range(n):\n        grid[i] = list(grid[i])\n\n    result = 0\n\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j] == \"*\":\n                continue\n            if is_invalid(i, j, grid):\n                continue\n\n            grid[i][j] = \"*\"\n\n            count = 0\n            for row in range(i - 1, i + 2):\n                for col in range(j - 1, j + 2):\n                    if grid[row][col] == \"*\":\n                        count += 1\n            result = max(result, count)\n\n            grid[i][j] = \".\"\n\n    return f\"{result}\"\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = [i.strip().split() for i in stdin.split('\\n')]\n    n, m = int(inp[0][0]), int(inp[0][1])\n    grid = [list(inp[i][0]) for i in range(1, len(inp))]\n    return '-1' if not stars(grid, n, m) else str(len(stars(grid, n, m)))\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for row in range(n):\n        grid.append(stdin[row * m:(row + 1) * m])\n    return_val = \"-\"\n    return return_val\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin))\n    for i in range(n):\n        grid[i].insert(0, '.')\n        grid[i].append('.')\n        grid[i].insert(m, '.')\n        grid[i].append('.')\n    for i in range(n):\n        grid[i].insert(0, '.')\n        grid[i].append('.')\n        grid[i].insert(0, '.')\n    for i in range(m):\n        grid[i].insert(0, '.')\n        grid[i].append('.')\n    return grid\n\nprint(solution(input()))"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    for _ in range(n):\n        row = stdin.split()\n        for _ in range(m):\n            if row[0] == '*' and row[1] == '.':\n                print(-1)\n                return\n            elif row[0] == '*' and row[1] == '*':\n                print(-1)\n                return\n            elif row[0] == '.' and row[1] == '.':\n                print(-1)\n                return\n            row = stdin.split()\n\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if i!= 0 and row[0] == '*':\n                k += 1\n                print(k, end=' ')\n            if i!= n - 1 and row[0] == '*':\n                k += 1\n                print(k, end=' ')\n            if j!= 0 and row[0] == '*':\n                k += 1\n                print(k, end=' ')\n            if j!= m - 1 and row[0] == '*':\n                k += 1\n                print(k, end=' ')\n            if row[0] == '.':\n                print(0, end=' ')\n            elif row[0] == '*':\n                print(k, end=' ')\n            print(row[1], end=' ')\n        print()\n\n    return\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    good, bad = stdin[:], stdin[:]\n    for i in range(n):\n        if i % 2 == 0:\n            bad = bad[:i//2] + bad[i//2 + 1:]\n        else:\n            good = good[:i//2] + good[i//2 + 1:]\n    print(len(good), end='')\n    print(good, end='')\n    print(len(bad), end='')\n    print(bad)"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l == 1:\n        return 0\n    if l == 2:\n        return 1\n    if l == 3:\n        if stdin[1] == stdin[2]:\n            return 2\n        else:\n            return 1\n    cnt = 0\n    for i in range(l):\n        if stdin[i] == stdin[i+1]:\n            cnt += 1\n        else:\n            break\n    if cnt == 1 or (l - cnt) % 2 == 1:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    lst = list(stdin)\n    min_deletions = n\n    min_deletions_string = lst\n    for i in range(1, n // 2 + 1):\n        # if not i % 2:\n        #     continue\n        for j in range(i, n - i):\n            if lst[j] == lst[j + i]:\n                lst.pop(j + i)\n                lst.pop(j)\n                min_deletions = min(min_deletions, j + i)\n                break\n    return min_deletions\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    s = stdin[1]\n    k = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i]!= s[i + 1]:\n                k = i\n                break\n    if k == 0:\n        return s\n    return s[:k] + s[k + 1:]\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input string.\n    First, calculate the length of the string.\n    Then, calculate the minimum number of characters that are removed to make it good.\n    '''\n    length = len(stdin)\n    good = stdin\n    if length % 2 == 1:\n        good = stdin + good[-1]\n    good = good[:length//2]\n    count = 0\n    for i in range(len(good)):\n        if good[i]!= good[-(i+1)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(' ', '')\n    good = True\n    if len(s) <= 1:\n        return len(s)\n    if s[0] == s[1]:\n        good = False\n        s = s[1:]\n    for i in range(1, len(s)-1):\n        if s[i]!= s[i-1] and s[i]!= s[i+1]:\n            good = False\n    if good:\n        return len(s)\n    return len(s)-1\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    print(k)\n    for i in range(k):\n        if (i % 2 == 0):\n            print(\"a\")\n        else:\n            print(\"b\")\n    return \"s\"\n\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    l = len(s[1])\n    if (l % 2 == 0):\n        a = s[1][0]\n        b = s[1][-1]\n        c = s[1][1:-1]\n        if (a!= b and a!= c and b!= c):\n            return (0, s[1])\n        else:\n            return (1, s[1])\n    else:\n        a = s[1][0]\n        b = s[1][-1]\n        c = s[1][1:-1]\n        if (a!= b and a!= c and b!= c):\n            return (1, s[1])\n        else:\n            return (2, s[1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        if a!= b and b in {a, b} and a not in {a, b}:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        g[a].append(b)\n        g[b].append(a)\n    for i in range(1, n + 1):\n        if len(g[i]) > 1:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    n, m = map(int, stdin.split())\n\n    if m < 2:\n        return 'NO'\n\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append([u, v])\n        edges.append([v, u])\n\n    # print(edges)\n    # print(itertools.combinations_with_replacement(range(1, n), 2))\n    # for i in itertools.combinations_with_replacement(range(1, n), 2):\n    #     # print(i)\n    #     if (i[0], i[1]) in edges or (i[1], i[0]) in edges:\n    #         continue\n    #     for j in itertools.combinations(range(1, n), 2):\n    #         if j[0] == i[0] or j[0] == i[1] or j[1] == i[0] or j[1] == i[1]:\n    #             continue\n    #         if (j[0], j[1]) in edges or (j[1], j[0]) in edges:\n    #             continue\n    #         if j[0]!= j[1]:\n    #             if (j[0], j[1]) in edges or (j[1], j[0]) in edges:\n    #                 continue\n    #             return 'NO'\n    #         return 'YES'\n\n    # for i in itertools.combinations_with_replacement(range(1, n), 2):\n    #     if (i[0], i[1]) in edges or (i[1], i[0]) in edges:\n    #         continue\n    #     for j in itertools.combinations(range(1, n), 2):\n    #         if j[0] == i[0] or j[0] == i[1] or j[1] == i[0] or j[1] == i[1]:\n    #             continue\n    #         if (j[0], j[1]) in edges or (j[1], j[0]) in edges:\n    #             continue\n    #         if j[0]!= j[1]:\n    #             if (j[0], j[1]) in edges or (j[1], j[0]) in edges:\n    #                 continue\n    #             return 'NO'\n    #         return 'YES'\n\n    d = {}\n    for i in edges:\n        if i[0] not in d:\n            d[i[0]] = [i[1]]\n        else:\n            d[i[0]].append(i[1])\n        if i[1] not in d:\n            d[i[1]] = [i[0]]\n        else:\n            d[i[1]].append(i[0])\n    print(d)\n    cnt = 0\n    for i in range(1, n+1):\n        if i not in d:\n            continue\n        if len(d[i]) < 2:\n            continue\n        for j in d[i]:\n            cnt += 1\n            print(d[i], d[j])\n    if cnt < 2:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        edges.append((u, v))\n    visited = set()\n\n    def bfs(u):\n        queue = collections.deque([(u, 0)])\n        while queue:\n            u, cnt = queue.popleft()\n            if u in visited:\n                return False\n            visited.add(u)\n            for v, _ in edges:\n                if v == u:\n                    continue\n                if (u, v) not in visited:\n                    queue.append((v, cnt + 1))\n        return True\n\n    for u, v in edges:\n        if bfs(u):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\n----\n\n[[n, m]]\n[[0, 0]]"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        if v not in graph[u]:\n            graph[u].append(v)\n        if u not in graph[v]:\n            graph[v].append(u)\n    for vertex in graph:\n        graph[vertex] = list(set(graph[vertex]))\n    visited = set()\n    for vertex in graph:\n        if vertex not in visited:\n            visited.add(vertex)\n            dfs(vertex, graph, visited)\n            if len(visited) >= 2:\n                return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    for i in range(n):\n        graph[i].sort()\n    for i in range(n):\n        for j in range(i):\n            if graph[i][j] == graph[i][0]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if len(graph[i]) < len(graph[j]):\n                    graph[i], graph[j] = graph[j], graph[i]\n\n    for i in range(n):\n        if len(graph[i]) > 2:\n            return 'NO'\n\n    answer = ''\n    for i in range(n):\n        if i == 0:\n            answer += '1'\n        else:\n            answer += '0'\n\n    for i in range(n):\n        if i == 0:\n            answer += '0'\n        else:\n            answer += '1'\n\n    return answer\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(i) - 1 for i in stdin.split()[2:]] for _ in range(m)]\n    # You are given an undirected graph G.\n    # You are also given a list of edges (each edge is a pair of nodes), that is, for each i and j (i < j), there is an undirected edge from node i to node j.\n    # Your task is to use backtracking to construct a directed graph with as many edges as possible so that the resulting graph contains no more than two nodes, and has as many nodes as possible.\n    #\n    # For example, if G = {1, 2, 3, 4, 5}, and we have:\n    #\n    #   1 2\n    #   3 4\n    #   2 3\n    #   4 5\n    # then the resulting graph would be {1, 2, 3, 4, 5}.\n    #\n    # If the resulting graph has more than two nodes, return \"NO\".\n    #\n    # For example, if G = {1, 2, 3, 4, 5}, and we have:\n    #\n    #   1 2\n    #   3 4\n    #   2 3\n    #   4 5\n    # then the resulting graph would be {1, 2, 4, 5}.\n    #\n    # Write a function:\n    #\n    #   def solution(G, E)\n    #\n    # that, given a graph G and a list of edges E, returns the minimal number of edges to construct a directed graph that contains no more than two nodes and such that the resulting graph has all nodes of G as its vertices and all edges of E as its edges.\n    #\n    # If the resulting graph has more than two nodes, return \"NO\".\n    #\n    # Assume that:\n    #\n    #   G is a graph represented as an adjacency list.\n    #   E is a list of edges (each edge is a pair of nodes), so that each edge is unique.\n    #   E is a subset of all edges of G.\n    #   All of the edges of G form a DAG (directed acyclic graph).\n    #\n    # Write an efficient algorithm for the following assumptions:\n    #\n    #   G is connected (if the graph is connected).\n    #   G does not contain any self-loops.\n    #   G has no multiple edges.\n    #\n    #     Vertices of G can be named by integers, 1, 2, 3,..., n, where n is the number of vertices of G.\n    #     Edges of G can be named by integers, 1, 2, 3,..., m, where m is the number of edges of G.\n    #     Edges of G are labeled by pairs of vertices, (u, v), where u is an integer in 1, 2,..., n and v is an integer in 1, 2,..., n."
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n\n    def dfs(node, visited):\n        visited.append(node)\n        for i in g[node]:\n            if i not in visited:\n                dfs(i, visited)\n\n    visited = []\n    dfs(0, visited)\n    if len(visited) < 2:\n        return 'NO'\n\n    cnt = 0\n    for i in range(len(visited)):\n        if visited[i] == visited[len(visited) - 1]:\n            cnt += 1\n\n    if cnt >= 2:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def in_degree(n):\n        return sum(1 for v, _ in edges if v == n)\n\n    if max(in_degree(v) for v, _ in edges) > 2:\n        return 'NO'\n    # else:\n    #     return\n\n    # u = [i for i, (v, _) in enumerate(edges) if v == 1]\n    # v = [i for i, (_, v) in enumerate(edges) if v == 2]\n    # cnt = 0\n    # for i in range(n - 1):\n    #     for j in range(i + 1, n):\n    #         if j in v and i in u:\n    #             cnt += 1\n    # print(cnt)\n\n    # # print(n, m)\n    # # print(edges)\n    # u = 0\n    # v = 1\n    # cnt = 0\n    # for i in range(n):\n    #     if i in u:\n    #         u += 1\n    #         continue\n    #     if i in v:\n    #         v += 1\n    #         continue\n    #     print('here')\n    #     if v + 1 < n and u + 1 < n:\n    #         if v + 1 in v and u + 1 in u:\n    #             cnt += 1\n    #             u += 1\n    #             v += 1\n    #             continue\n    #         else:\n    #             return 'NO'\n    #         continue\n    #     if v + 1 < n:\n    #         if v + 1 in v:\n    #             cnt += 1\n    #             v += 1\n    #             continue\n    #         else:\n    #             return 'NO'\n    #     if u + 1 < n:\n    #         if u + 1 in u:\n    #             cnt += 1\n    #             u += 1\n    #             continue\n    #         else:\n    #             return 'NO'\n    #     return 'YES'\n\n    # print(n, m)\n    # print(u, v)\n    # if v + 1 < n:\n    #     if v + 1 in v:\n    #         cnt += 1\n    #         v += 1\n    #         continue\n    #     else:\n    #         return 'NO'\n    # if u + 1 < n:\n    #     if u + 1 in u:\n    #         cnt += 1\n    #         u += 1\n    #         continue\n    #     else:\n    #         return 'NO'\n    # return 'YES'"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = set()\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        points.update(range(l, r + 1))\n    points = sorted(points)\n    result = 0\n    for x in points:\n        if x not in points:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    points = {i for i in range(1, m + 1)}\n    for i in range(n):\n        lower, upper = (int(j) for j in stdin.split()[i])\n        points -= {lower, upper}\n    return str(len(points)) + '\\n' + '\\n'.join(sorted(map(str, points)))"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return f\"{len(set(range(1, m+1)) - set(map(int, stdin.split())))} {len(set(range(1, m+1)))}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_in(x: int) -> bool:\n        return 1 <= x <= m\n    m, n = map(int, stdin.split())\n    xs = set()\n    for i in range(m):\n        xs.add(i + 1)\n    xs = list(xs)\n    xs.sort()\n    xs = set(xs)\n    for i in range(1, n + 1):\n        xs.discard(i)\n    xs = list(xs)\n    xs.sort()\n    return str(len(xs)) + '\\n' +''.join(map(str, xs))\n\n----TEST CASES----\n\nstdin = '3 5'\nprint(solution(stdin))\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = [(int(i), int(j)) for i, j in zip(stdin.split()[1::2], stdin.split()[2::2])]\n    print(len(list(filter(lambda p: not any(segment[0] <= p <= segment[1] or segment[0] <= p + 1 <= segment[1] or p >= segment[0] and p <= segment[1] for segment in segments), range(1, m + 1))))"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = 0\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        if (l > r):\n            l, r = r, l\n        for j in range(n):\n            if l <= j <= r:\n                if i!= j:\n                    if l!= 1:\n                        if r!= m:\n                            k += 1\n                    else:\n                        k += 1\n    return str(k)"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return str(0)\n    \n    points = set()\n    segment_points = {}\n    \n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        points.update(range(l, r+1))\n        segment_points.setdefault(l, []).append(r)\n        segment_points.setdefault(r, []).append(l)\n    \n    for _ in range(m):\n        segment_points.setdefault(1, []).append(2)\n        segment_points.setdefault(2, []).append(1)\n    \n    for key in points:\n        if key not in segment_points.keys():\n            print(key)\n            return str(key)\n    \n    return str(0)\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        points.extend(list(map(int, stdin.split())))\n    points = set(points)\n    answer = 0\n    for i in range(1, m):\n        if i not in points:\n            print(i)\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    points = set()\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    for l, r in segments:\n        for x in range(l, r + 1):\n            points.add(x)\n    count = 0\n    for x in range(1, m + 1):\n        if x not in points:\n            count += 1\n    return str(count) if count else '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def c(l1, l2, l3, l4):\n        return (l1*l3) % l2 == 0 and (l1*l4) % l2 == 0\n\n    a, b, c, d = map(int, stdin.split())\n    if c(a, b, c, d) and not d:\n        return f\"{a} <= n <= {b}\"\n    elif c(a, b, c, d) and d:\n        return f\"{a} <= n <= {b}\"\n    elif not c(a, b, c, d) and d:\n        return f\"{a} <= n <= {b}\"\n    else:\n        return f\"{a} <= n <= {b}\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    count = 0\n    for i in range(a, b + 1):\n        if not (i % c) and not (i % d):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    a, b, c, d = stdin.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    for i in range(a, b+1):\n        if c%i == 0 and d%i == 0:\n            result += 1\n    print(result)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n    return str(min(range(A, B + 1), key=lambda x: x % (C, D)) - A)\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    s1 = a\n    s2 = b\n    while s1 < s2:\n        if s1 % c == 0 and s2 % d == 0:\n            return str(s1)\n        s1 += 1\n    return str(s2)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for val in range(int(stdin[0]), int(stdin[1]) + 1):\n        if val % int(stdin[2])!= val % int(stdin[3]):\n            result += 1\n    return str(result)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    count = 0\n    for i in range(A,B+1):\n        if not D%i and not C%i:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return 0\n    numbers = [int(i) for i in stdin.split()]\n    A = numbers[0]\n    B = numbers[1]\n    C = numbers[2]\n    D = numbers[3]\n\n    result = 0\n\n    # find all numbers that are divisible by any but C and D\n    for i in range(A, B+1):\n        if i % C!= 0 and i % D!= 0:\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(count_divs(int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])))\n    return \"\"\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    if sum(map(int, stdin)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return 'Yes' if sum(map(int, str(number))) % 9 == 0 else 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number: int = int(stdin)\n    if (number % 9 == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    count = 0\n    while num > 0:\n        digit = num % 10\n        num = num // 10\n        count += digit\n    return str(count)"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n%9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    solution = str(stdin)\n    result = \"\"\n\n    if sum(int(x) for x in solution) % 9 == 0:\n        result = \"Yes\"\n    else:\n        result = \"No\"\n    return result\n\n\nsolution(input())\n\"\"\"\n\n###############################################################\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    while n > 0:\n        n, digit = divmod(n, 10)\n        sum += digit\n    if sum % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 9 == 0:\n        return \"Yes\"\n    return \"No\"\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1,10):\n        if n // i >= 1:\n            count += 1 + solution(n - i)\n            if n % i == 0:\n                count += solution(n // i)\n    return count\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while True:\n        if (N == 1):\n            return count\n        elif (N % 6 == 0):\n            count += 1\n            N = N // 6\n        elif (N % 36 == 0):\n            count += 3\n            N = N // 36\n        elif (N % 81 == 0):\n            count += 5\n            N = N // 81\n        else:\n            return -1"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"4\"\n    if N == 3:\n        return \"7\"\n    if N == 4:\n        return \"14\"\n    if N == 5:\n        return \"22\"\n    if N == 6:\n        return \"41\"\n    if N == 7:\n        return \"71\"\n    if N == 8:\n        return \"112\"\n    if N == 9:\n        return \"223\"\n    if N == 10:\n        return \"433\"\n    if N == 11:\n        return \"813\"\n    if N == 12:\n        return \"1243\"\n    if N == 13:\n        return \"2143\"\n    if N == 14:\n        return \"4143\"\n    if N == 15:\n        return \"7413\"\n    if N == 16:\n        return \"11243\"\n    if N == 17:\n        return \"214344\"\n    if N == 18:\n        return \"414345\"\n    if N == 19:\n        return \"813443\"\n    if N == 20:\n        return \"132133\"\n    if N == 21:\n        return \"314321\"\n    if N == 22:\n        return \"4311323\"\n    if N == 23:\n        return \"8133343\"\n    if N == 24:\n        return \"13213344\"\n    if N == 25:\n        return \"31432145\"\n    if N == 26:\n        return \"431132445\"\n    if N == 27:\n        return \"813334345\"\n    if N == 28:\n        return \"132133446\"\n    if N == 29:\n        return \"3143214546\"\n    if N == 30:\n        return \"4311324455\"\n    if N == 31:\n        return \"81333434546\"\n    if N == 32:\n        return \"13213344645\"\n    if N == 33:\n        return \"314321454645\"\n    if N == 34:\n        return \"431132445646\"\n    if N == 35:\n        return \"813334345646\"\n    if N == 36:\n        return \"13213344645646\"\n    if N == 37:\n        return \"314321454645646\"\n    if N == 38:\n        return \"43113244556565\"\n    if N == 39:\n        return \"81333434556565\"\n    if N == 40:\n        return \"132133446456565\"\n    if N == 41:\n        return \"3143214546456565\"\n    if N == 42:\n        return \"4311324455656565\"\n    if N == 43:\n        return \"8133343455656565\"\n    if N == 44:\n        return \"13213344645656565\"\n    if N == 45:\n        return \"314321454645656565\"\n    if N == 46:\n        return \"431132445565656565\"\n    if N == 47:\n        return \"813334345565656565\"\n    if N == 48:\n        return \"1321334464565656565\"\n    if N == 49:\n        return \"31432145464565656565\"\n    if N == 50:\n        return \"43113244556565656565\"\n    if N == 51:\n        return \"81333434556565656565\"\n    if N == 52:\n        return \"132133446456565656565\"\n    if N == 53:\n        return \"3143214546456565656565\"\n    if N == 54:\n        return \"4311324455656565656565\"\n    if N == 55:\n        return \"8133343455656565656565\"\n    if N == 56:\n        return \"13213344645656565656565\"\n    if N == 57:\n        return \"314321454645656565656565\"\n    if N == 58:\n        return \"431132445565656565656565\"\n    if N == 59:\n        return \"813334345565656565656565\"\n    if N == 60:\n        return \"1321334464565656565656565\"\n    if N == 61:\n        return \"31432145464565656565656565\"\n    if N == 62:\n        return \"43113244556565656565656565\"\n    if N == 63:\n        return \"81333434556565656565656565\"\n    if N == 64:\n        return \"132133446456565656565656565\"\n    if N == 65:\n        return \"3143214546456565656565656565\"\n    if N == 66:\n        return \"4311324455656565656565656565\"\n    if N == 67:\n        return \"8133343455656565656565656565\"\n    if N == 68:\n        return \"13213344645656565656565656565\"\n    if N == 69:\n        return \"314321454645656565656565656565\"\n    if N == 70:\n        return \"431132445565656565656565656565\"\n    if N == 71:\n        return \"813334345565656565656565656565\"\n    if N == 72:\n        return \"1321334464565656565656565656565\"\n    if N == 73:\n        return \"31432145464565656565656565656565\"\n    if N == 74:\n        return \"43113244556565656565656565656565\"\n    if N == 75:\n        return \"81333434556565656565656565656565\"\n    if N == 76:\n        return \"132133446456565656565656565656565\"\n    if N == 77:\n        return \"3143214546456565656565656565656565\"\n    if N == 78:\n        return \"4311324455656565656565656565656565\"\n    if N == 79:\n        return \"8133343455656565656565656565656565\"\n    if N == 80:\n        return \"13213344645656565656565656565656565\"\n    if N == 81:\n        return \"314321454645656565656565656565656565\"\n    if N == 82:\n        return \"431132445565656565656565656565656565\"\n    if N == 83:\n        return \"813334345565656565656565656565656565\"\n    if N == 84:\n        return \"1321334464565656565656565656565656565\"\n    if N == 85:\n        return \"31432145464565656565656565656565656565\"\n    if N == 86:\n        return \"43113244556565656565656565656565656565\"\n    if N == 87:\n        return \"81333434556565656565656565656565656565\"\n    if N == 88:\n        return \""
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 100000:\n        if N == 0:\n            print(0)\n        if N == 1:\n            print(4)\n        if N == 2:\n            print(5)\n        if N == 3:\n            print(5)\n        if N == 4:\n            print(5)\n        if N == 5:\n            print(5)\n        if N == 6:\n            print(4)\n        if N == 7:\n            print(4)\n        if N == 8:\n            print(3)\n        if N == 9:\n            print(3)\n        if N == 10:\n            print(3)\n        if N == 11:\n            print(2)\n        if N == 12:\n            print(2)\n        if N == 13:\n            print(2)\n        if N == 14:\n            print(1)\n        if N == 15:\n            print(1)\n        if N == 16:\n            print(1)\n        if N == 17:\n            print(0)\n        if N == 18:\n            print(0)\n        if N == 19:\n            print(0)\n        if N == 20:\n            print(0)\n        if N == 21:\n            print(0)\n        if N == 22:\n            print(0)\n        if N == 23:\n            print(0)\n        if N == 24:\n            print(0)\n        if N == 25:\n            print(0)\n        if N == 26:\n            print(0)\n        if N == 27:\n            print(0)\n        if N == 28:\n            print(0)\n        if N == 29:\n            print(0)\n        if N == 30:\n            print(0)\n        if N == 31:\n            print(0)\n        if N == 32:\n            print(0)\n        if N == 33:\n            print(0)\n        if N == 34:\n            print(0)\n        if N == 35:\n            print(0)\n        if N == 36:\n            print(0)\n        if N == 37:\n            print(0)\n        if N == 38:\n            print(0)\n        if N == 39:\n            print(0)\n        if N == 40:\n            print(0)\n        if N == 41:\n            print(0)\n        if N == 42:\n            print(0)\n        if N == 43:\n            print(0)\n        if N == 44:\n            print(0)\n        if N == 45:\n            print(0)\n        if N == 46:\n            print(0)\n        if N == 47:\n            print(0)\n        if N == 48:\n            print(0)\n        if N == 49:\n            print(0)\n        if N == 50:\n            print(0)\n        if N == 51:\n            print(0)\n        if N == 52:\n            print(0)\n        if N == 53:\n            print(0)\n        if N == 54:\n            print(0)\n        if N == 55:\n            print(0)\n        if N == 56:\n            print(0)\n        if N == 57:\n            print(0)\n        if N == 58:\n            print(0)\n        if N == 59:\n            print(0)\n        if N == 60:\n            print(0)\n        if N == 61:\n            print(0)\n        if N == 62:\n            print(0)\n        if N == 63:\n            print(0)\n        if N == 64:\n            print(0)\n        if N == 65:\n            print(0)\n        if N == 66:\n            print(0)\n        if N == 67:\n            print(0)\n        if N == 68:\n            print(0)\n        if N == 69:\n            print(0)\n        if N == 70:\n            print(0)\n        if N == 71:\n            print(0)\n        if N == 72:\n            print(0)\n        if N == 73:\n            print(0)\n        if N == 74:\n            print(0)\n        if N == 75:\n            print(0)\n        if N == 76:\n            print(0)\n        if N == 77:\n            print(0)\n        if N == 78:\n            print(0)\n        if N == 79:\n            print(0)\n        if N == 80:\n            print(0)\n        if N == 81:\n            print(0)\n        if N == 82:\n            print(0)\n        if N == 83:\n            print(0)\n        if N == 84:\n            print(0)\n        if N == 85:\n            print(0)\n        if N == 86:\n            print(0)\n        if N == 87:\n            print(0)\n        if N == 88:\n            print(0)\n        if N == 89:\n            print(0)\n        if N == 90:\n            print(0)\n        if N == 91:\n            print(0)\n        if N == 92:\n            print(0)\n        if N == 93:\n            print(0)\n        if N == 94:\n            print(0)\n        if N == 95:\n            print(0)\n        if N == 96:\n            print(0)\n        if N == 97:\n            print(0)\n        if N == 98:\n            print(0)\n        if N == 99:\n            print(0)\n        if N == 100:\n            print(0)\n    else:\n        print(\"error\")\n    return\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    i, n, j = 0, 1, 1\n    while n <= stdin[0]:\n        j += 1\n        if j > len(str(stdin[0])):\n            j = len(str(stdin[0]))\n        n *= j\n    if n == stdin[0]:\n        print(i)\n    else:\n        print(i+1)\n    return ''"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100000:\n        raise ValueError\n    total = 0\n    step = 0\n    while n >= total:\n        step += 1\n        total += 1\n        if total == 1:\n            total += 2\n            continue\n        if total == 2:\n            total += 3\n            continue\n        if total == 3:\n            total += 6\n            continue\n        if total == 6:\n            total += 9\n            continue\n        if total == 9:\n            total += 36\n            continue\n        if total == 36:\n            total += 81\n            continue\n        if total == 81:\n            total += 100\n            continue\n    return str(step)\n\nprint(solution(input()))"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    n = 1\n    while N >= n:\n        if N == n:\n            result += 1\n        if N < n:\n            break\n        n = n*6\n    return result\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return '1'\n    if N == 6 or N == 36 or N == 216 or N == 81:\n        return '0'\n    else:\n        return '2'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    string = stdin.pop(0)\n    target = stdin.pop(0)\n    if string == target:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string_1 = stdin.strip()\n    string_2 = stdin.strip()\n    return \"Yes\" if string_1 == string_2 else \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == stdin[::-1] else 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    s.append(s.pop(0))\n    s = ''.join(s)\n    return 'Yes' if s == t else 'No'\n    "
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    for i in range(0, l):\n        s = s[l-i:] + s[:l-i]\n    if s == stdin:\n        return \"Yes\"\n    return \"No\"\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin\n    N = len(S)\n    if N < 2:\n        return \"No\"\n    for i in range(N - 1):\n        # rotate\n        tmp = S[i]\n        S = S[i + 1:] + tmp\n        S = S[:N - i - 1] + tmp\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nsolution(\"kyoto\")\nsolution(\"tokyo\")\nsolution(\"ABCDEFGH\")\nsolution(\"ABCDEFGH\")\nsolution(\"ABCDEFGH\")\nsolution(\"ABCDEFGH\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    T = S[1]\n    for i in range(1,len(S)):\n        if S[0] == S[i]:\n            return 'Yes'\n    S = ''.join(S)\n    S = S[len(S) - len(T):] + T + S[:len(S) - len(T)]\n    return 'Yes' if S == T else 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s) // 2):\n        s = s[len(s) - 1:0:-1] + s[:len(s) - 1]\n    return s"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin\n    S = S[::-1]\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.replace('\\n', '')\n    t = stdin.replace('\\n', '')\n\n    if n > len(s) or m > len(t):\n        return -1\n    if m > len(s) or len(t) > len(s):\n        return -1\n\n    min_changes = float('inf')\n\n    for i in range(m):\n        t = t[:i] + s[i] + t[i + 1:]\n        min_changes = min(min_changes, len(s) - i)\n\n    return min_changes\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = s.replace('a', 't')\n    t = t.replace('a', 't')\n    return len(s) - len(t)\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s[1] = s[1].replace(s[0], \"\")\n    return \"1\" if len(s[0]) >= len(s[1]) else len(s[0])\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i:j] in t:\n                count += 1\n                break\n    return count\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Insert code here\n    # Note that the input string should be\n    # stripped of any leading and trailing spaces before being passed into the function\n\n    s = stdin\n    count = 0\n    for i in range(len(s) - len(s.replace(' ', '')) + 1):\n        s = s.replace(' ', '')\n        if s == s[::-1]:\n            count += 1\n    return str(count)\n    # A shorter, but less pythonic solution\n    # return len(s) - len(s.replace(' ', ''))\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split(\"\\n\")\n    cnt = 0\n    for i in range(len(S)):\n        for j in range(len(S)):\n            if i!= j:\n                if S[i:j + 1] == T:\n                    cnt += 1\n                    break\n    return str(cnt)"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a string S and a string T.\n\n    Your task is to change the characters in S so that T is a substring of S.\n\n    Return the minimum number of characters you need to change in S to make T a substring of S.\n\n    Constraints\n    * 1 <= |S| <= 1000\n    * |T| <= |S|\n    * S and T consist of lowercase English letters.\n\n    Input\n    The input contains two strings S and T in a single line.\n\n    Output\n    Print the minimum number of characters in S that need to be changed.\n\n    Examples\n    Input\n    1\n    cabacc\n    abc\n    5\n    cabxacc\n    abxabc\n\n    Output\n    2\n    3\n    0\n    1\n    0\n\n    Explanation\n    If you change the character 'c' in S to 'a', then the string T would match the string S.\n    If you change the character 'b' in S to 'x', then the string T would not match the string S.\n    If you change the character 'a' in S to 'c', then the string T would match the string S.\n    If you change the character 'x' in S to 'b', then the string T would not match the string S.\n    So, we need to change at least one character in S to get T as a substring of S.\n    So we need to change one character in S and it will be the minimum number of characters in S needed to get T as a substring of S.\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, k = map(int, stdin.split())\n    ans = kth_largest_positive(A, B, k)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    if A > B:\n        A, B = B, A\n    elif A == 0:\n        return str(0)\n    A_count = 0\n    B_count = 0\n    k_count = 0\n    while A > 0 and B > 0:\n        if A % 2 == 0:\n            A_count += 1\n        if B % 2 == 0:\n            B_count += 1\n        if A_count == K:\n            if B_count < K:\n                return str(B)\n            else:\n                return str(A)\n        elif B_count == K:\n            if A_count < K:\n                return str(A)\n            else:\n                return str(B)\n        A //= 2\n        B //= 2\n    if A == 0:\n        return str(0)\n    if K < A_count + 1:\n        return str(A)\n    if K < B_count + 1:\n        return str(B)\n    return str(A)\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the K-th largest positive integer that divides both A and B.\n\n    >>> solution('''\n   ... 8 12 2\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 8 12 2\n   ... ''')\n    '4'\n    \"\"\"\n\n    A, B, K = map(int, stdin.split())\n    for i in range(K + 1):\n        if A % i == 0 and B % i == 0:\n            return str(i)\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('8 12 2')\n    '2'\n    >>> solution('1')\n    '1'\n    >>> solution('5 1')\n    '1'\n    '''\n    A, B, k = [int(x) for x in stdin.split()]\n    ans = -1\n    for i in range(1, k + 1):\n        if A % i == 0 and B % i == 0:\n            ans = i\n    if ans == -1:\n        return str(1)\n    else:\n        return str(ans)"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 3\n   ... 4 5 6\n   ... 8 9 12''')\n    '2'\n    \"\"\"\n    A, B, K = stdin.split()\n    A = int(A)\n    B = int(B)\n    K = int(K)\n    def gcd(a, b):\n        if a > b:\n            a, b = b, a\n        while a % b!= 0:\n            a, b = b, a % b\n        return b\n\n    def k_th(a, b, k):\n        if k == 1:\n            return b\n        else:\n            return a * (k - 1) + b\n    return str(k_th(gcd(A, B), A, K) % A)\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    A, B, k = [int(i) for i in stdin.split()]\n    return sorted(range(1, max(A, B) + 1), key=lambda x: (x % A, x % B))[k - 1]"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read data from stdin\n    stdin_data = stdin.split()\n    a = int(stdin_data[0])\n    b = int(stdin_data[1])\n    k = int(stdin_data[2])\n    # write your code here\n    data_list = []\n    for i in range(a, b+1):\n        if i%a == 0 and i%b == 0:\n            data_list.append(i)\n    data_list.sort(reverse=True)\n    return str(data_list[k-1])"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, k = stdin.strip().split()\n    A = int(A)\n    B = int(B)\n    k = int(k)\n\n    n = 0\n    while k > 0:\n        n += 1\n        k -= 1\n    if A <= 0 or A > B or B <= 0 or B > 100 or k < 1:\n        return -1\n    if n == 0:\n        return -1\n    k //= n\n    if k > 0:\n        if A <= B:\n            return A\n        else:\n            return B\n    else:\n        return -1"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = (int(i) for i in stdin.split())\n    return str(get_kth_largest_number(a, b, k))\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num, div, k = map(int, stdin.split())\n    nums = sorted(list(set([div, num])))\n    print(nums[k - 1])\n    return nums[k - 1]\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(max(max(map(lambda x: x * 500, stdin)) + max(map(lambda x: x * 5, stdin)) + max(map(lambda x: x * 10, stdin)), max(map(lambda x: x * 5, stdin)) + max(map(lambda x: x * 1, stdin))))\n    return max(max(map(lambda x: x * 500, stdin)) + max(map(lambda x: x * 5, stdin)) + max(map(lambda x: x * 10, stdin)), max(map(lambda x: x * 5, stdin)) + max(map(lambda x: x * 1, stdin)))\nprint(solution(input()))\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # change inputs to floats\n    # float() is a costly operation\n    stdin = list(map(float, stdin.split('\\n')))\n    # convert to ints\n    stdin = list(map(int, stdin))\n    # get number of coins\n    n = stdin[0]\n    # get coins\n    coins = stdin[1:]\n    # print max\n    print(max(coin * 5 + coin * 1.5 + coin * 0.5 + coin * 0.25 for coin in coins))\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    print(stdin)\n    max = 0\n    for i in range(1,int(stdin[0])+1):\n        if i % 500 == 0:\n            if max < i*1000:\n                max = i*1000\n        if i % 100 == 0:\n            if max < i*100:\n                max = i*100\n        if i % 50 == 0:\n            if max < i*50:\n                max = i*50\n        if i % 10 == 0:\n            if max < i*10:\n                max = i*10\n        if i % 5 == 0:\n            if max < i*5:\n                max = i*5\n        if i % 1 == 0:\n            if max < i*1:\n                max = i*1\n    return max\nsolution(\"1024\")"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # input comes from STDIN\n    # print('Hello world!')\n    x = int(stdin)\n    # print(x)\n    five_yen = x//5\n    ten_yen = x - five_yen\n    if five_yen > 0 and ten_yen > 0:\n        x_happiness = five_yen * 500 + ten_yen * 100\n    elif five_yen > 0:\n        x_happiness = five_yen * 500\n    elif ten_yen > 0:\n        x_happiness = ten_yen * 100\n    else:\n        x_happiness = x\n    return str(x_happiness)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    while X > 1:\n        if X % 500 == 0:\n            count += 1000\n            X /= 500\n        if X % 100 == 0:\n            count += 200\n            X /= 100\n        if X % 50 == 0:\n            count += 5\n            X /= 50\n        if X % 10 == 0:\n            count += 1\n            X /= 10\n        if X % 5 == 0:\n            count += 5\n            X /= 5\n        if X % 1 == 0:\n            count += 1\n            X /= 1\n    return str(count)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    ---TEST CASES---\n    --Test case 1--\n    >>> solution(\"1024\")\n    '2020'\n    --Test case 2--\n    >>> solution(\"10000\")\n    '2280'\n    --Test case 3--\n    >>> solution(\"100\")\n    '1'\n    '''\n    coin = stdin\n    # split the input into list of coins\n    coin_list = [int(i) for i in coin.split()]\n    coin_list = sorted(coin_list, reverse=True)\n    # get the largest coin value, if the largest coin value is greater than 10^9, we can not exchange the coin\n    if (coin_list[-1] > 10**9):\n        return \"0\"\n    # get the maximum number of the exchange\n    maximum = 1\n    for i in range(len(coin_list) - 1):\n        if (coin_list[i] < coin_list[i + 1]):\n            maximum = maximum * coin_list[i + 1]\n        else:\n            break\n    return str(maximum)"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 10:\n        return '0'\n\n    h = x\n    d = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}\n    for i in range(1, 9):\n        x //= 10\n        d[i] = x\n    return str(h // 1000 + d[3] + d[8] + d[5] * 2 + d[2] * 3 + d[1] * 4)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X <= 0:\n        return \"0\"\n    if X % 500 == 0:\n        return str(X)\n    X_500 = X // 500\n    X_100 = X - X_500 * 500\n    X_50 = X_100 // 50\n    X_10 = X_100 - X_50 * 50\n    X_5 = X_10 // 5\n    X_1 = X_10 - X_5 * 5\n    return str(X_500) + \" \" + str(X_50) + \" \" + str(X_5) + \" \" + str(X_1)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    stdin[1] = stdin[1] * 500\n    stdin[2] = stdin[2] * 100\n    stdin[3] = stdin[3] * 50\n    stdin[4] = stdin[4] * 10\n    stdin[5] = stdin[5] * 5\n    stdin[6] = stdin[6] * 1\n    stdin.sort()\n    return str(stdin[-1])\nprint(solution(input()))\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    X = stdin[0]\n    coins = stdin[1:]\n    coin_combinations = {(5,0), (10,0), (20,0), (50,0), (100,0), (200,0), (500,0)}\n    for i in range(X):\n        for coin in range(1, 6):\n            coin_combinations.add((coin, i))\n        for coin in range(1, 10):\n            coin_combinations.add((coin, i))\n        for coin in range(1, 100):\n            coin_combinations.add((coin, i))\n        for coin in range(1, 200):\n            coin_combinations.add((coin, i))\n        for coin in range(1, 500):\n            coin_combinations.add((coin, i))\n    coin_combinations = sorted(coin_combinations, key=lambda x: (-x[0], -x[1]))\n    max_happiness = 0\n    i = 0\n    while i < len(coin_combinations):\n        happiness = 0\n        if (coin_combinations[i][1] + coins[coin_combinations[i][0] - 1]) == X:\n            happiness = coin_combinations[i][0] * 500 + coin_combinations[i][1] * 5\n        else:\n            happiness = coin_combinations[i][0] * 500 + coin_combinations[i][1] * 5 + X - (coins[coin_combinations[i][0] - 1] + coin_combinations[i][1])\n        if happiness > max_happiness:\n            max_happiness = happiness\n        i += 1\n    return max_happiness\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    Xs = list(map(int, stdin.split(\" \")))\n    return str(min(sum(i ** 2 - (Xs[i] - 2) ** 2 for i in range(n))) + sum(Xs))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    stamina = list(map(int, stdin.split()[1:]))\n    print(min(stamina))"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    Xs = [int(x) for x in stdin.split()]\n    return str(min(sum((x - y) ** 2 for x, y in zip(Xs, Xs[1:]))) + sum(Xs))"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = list(map(int, stdin.split()))\n    return str(min(map(lambda x: (x[0] - x[1]) ** 2, zip(X, X[1:]))))"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    line = lines[1].split()\n    Xs = list(map(int, line))\n\n    return str(min(Xs) - max(Xs) + 1)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = stdin.split(' ')\n    nums = list(map(int, nums))\n\n    for i in range(N):\n        nums[i] = nums[i] - 2\n\n    for i in range(N):\n        nums[i] = nums[i] ** 2\n    nums.sort()\n\n    return str(sum(nums))\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stamina_points = list(map(int, stdin.split()))\n\n    # check all points of stamina are positive\n    for stam_points in stamina_points:\n        if stam_points < 0:\n            return '-1'\n\n    # check if the meeting is held at an integer coordinate\n    if stamina_points[0] > stamina_points[1]:\n        return '-1'\n\n    # helper function that returns the distance between two points\n    def distance(x, y):\n        return abs(x - y)\n\n    # helper function that returns the points that the meeting needs\n    def meeting_points(x, y):\n        return (x + y) * (x + y)\n\n    # helper function that returns the total stamina needed\n    def stamina_needed(points):\n        return distance(x=stamina_points[0], y=stamina_points[1]) * points\n\n    # create a stack\n    stack = [stamina_points[0]]\n\n    # add the points to the stack\n    for point in stamina_points[1:]:\n        stack.append(point)\n        if distance(x=point, y=stack[0]) < distance(x=stack[0], y=stack[1]):\n            # if the distance between the stack top and the next point is smaller than the distance between the stack top and the previous point\n            stack.pop()\n            stack.append(point)\n        else:\n            stack.pop()\n            stack.append(point)\n\n    # add the first point to the stack\n    stack.append(stamina_points[1])\n\n    # create a dictionary that contains the points that the meeting needs\n    meet_points = {point: meeting_points(x=point, y=stack[0]) for point in stack}\n\n    # dictionary that contains the points that need stamina\n    stam_needed = {point: stamina_needed(points=meet_points[point]) for point in meet_points}\n\n    return str(min(stam_needed.values()))\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n    1 4\n    ''')\n    '5'\n    \"\"\"\n    N = int(stdin)\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    min = x[0] ** 2\n    for i in range(1, N):\n        if x[i] - min > x[i] ** 2 - min:\n            min = x[i] ** 2\n    return str(min)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    stamina = [x*x for x in range(1, X+1)]\n    min_stamina = float('inf')\n    for i in range(N):\n        if i == 0:\n            min_stamina = min(stamina[i], min_stamina)\n        else:\n            min_stamina = min(min_stamina, stamina[i] + min_stamina)\n    return str(min_stamina)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X_points = stdin.split()\n    N = int(N)\n    X_points = list(map(int, X_points.split()))\n    min_points = 10000000000000000000000000000000\n    for idx in range(N):\n        min_points = min(min_points, ((X_points[idx] - idx) ** 2))\n    return str(min_points)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n\n    return f\"{min(b, a // 2) if a > b else max(b, a // 2)}\"\n    "
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    return '{} power strips, each with {} sockets, extend the socket into {} empty sockets.'.format(A // B, A // B, A - (A // B) * B)"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    count = 0\n\n    while n!= m:\n        if n == 1:\n            n = m\n            break\n        if m == 1:\n            m = n\n            break\n\n        if n % 2 == 1:\n            n += 1\n            continue\n        if m % 2 == 1:\n            m -= 1\n            continue\n\n        n //= 2\n        m //= 2\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 2\n   ... 1 2\n   ... 2 2\n   ... 2 1\n   ... 1 2\n   ... 2 2\n   ... 3 3\n   ... 1 2\n   ... 2 2\n   ... 2 1\n   ... 3 2\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 3 3\n   ... 2 1\n   ... 3 2\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 2 1\n   ... 2 1\n   ... 1 2\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 2 1\n   ... 3 3\n   ... 1 2\n   ... 2 2\n   ... 2 1\n   ... 1 2\n   ... 2 2\n   ... 2 1\n   ... 2 1\n   ... 2 2\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 3 3\n   ... 1 2\n   ... 2 2\n   ... 2 1\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 1 2\n   ... 1 3\n   ... 1 2\n   ... 1 2\n   ... 1 2\n   ... 1 2\n   ... 1 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 1 3\n   ... 1 3\n   ... 1 2\n   ... 1 3\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 1 3\n   ... 2 2\n   ... 1 3\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 2 2\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n   ... 1 3\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(B // A, 1))\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n\n    A = int(input[0])\n    B = int(input[1])\n\n    return str(min(A,B)//10)\n\nsolution(\"4 10\")\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A if A < B else B\n    if result == 0:\n        print(0)\n    else:\n        print(result)\n\nsolution(input())\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    return str(math.ceil((B - A) / (2 * A)))\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    return str(math.ceil(int(tokens[0]) / int(tokens[1])))\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if A <= 2:\n        return \"0\"\n    elif A <= 20 and B <= 20:\n        return str(A * B)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S: str = stdin\n    T: str = \"S\" + S + \"R\"\n    cnt: int = 0\n    for i in range(3):\n        if (S[i] == \"C\" and T[i] == \"S\") or (S[i] == \"S\" and T[i] == \"C\"):\n            cnt += 1\n    return str(cnt)\n\n\nsolution(\"CSS\")\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days, weather, actual = stdin.split()\n    days = days[:-1]\n    weather = weather[:-1]\n    actual = actual[:-1]\n    for i in range(len(days)):\n        if weather[i] == actual[i]:\n            continue\n        else:\n            return str(i+1)\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin\n    s = s.split()\n    st = s[0]\n    st = st.split(\",\")\n    t = s[1]\n    t = t.split(\",\")\n    k = 0\n    for i in range(3):\n        if (st[i] == t[i]):\n            k += 1\n    return k\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days, actual = stdin.split()\n    days = list(days)\n    actual = list(actual)\n    count = 0\n    for i in range(len(days)):\n        if days[i] == actual[i]:\n            count += 1\n    print(count)\n\nsolution(input())"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    c = 0\n    r = 0\n    for i in range(len(s)):\n        if s[i][0] == \"S\":\n            if s[i] == \"SCC\":\n                c += 1\n            elif s[i] == \"SCR\":\n                r += 1\n        elif s[i][0] == \"T\":\n            if s[i] == \"SCC\":\n                c += 1\n            elif s[i] == \"SCR\":\n                r += 1\n    return (c, r)\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split()\n    correct = 0\n    for i in range(len(days)):\n        if days[i] == days[i + 1]:\n            correct += 1\n    return correct\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c1 = stdin[0]\n    c2 = stdin[1]\n    c3 = stdin[2]\n\n    t1 = stdin[3]\n    t2 = stdin[4]\n    t3 = stdin[5]\n\n    if (t1 == 'C' and t2 == 'C' and t3 == 'C') or (t1 == 'R' and t2 == 'R' and t3 == 'R'):\n        print(0)\n    else:\n        days = 0\n        if c1 == 'S':\n            if t1 == 'C':\n                if c2 == 'C':\n                    if c3 == 'R':\n                        days += 1\n                else:\n                    if c3 == 'S':\n                        days += 1\n            elif c2 == 'S':\n                if c3 == 'R':\n                    days += 1\n                else:\n                    if c3 == 'S':\n                        days += 1\n\n        if c1 == 'S':\n            if t1 == 'C':\n                if c2 == 'C':\n                    if c3 == 'R':\n                        days += 1\n                else:\n                    if c3 == 'S':\n                        days += 1\n            elif c2 == 'S':\n                if c3 == 'R':\n                    days += 1\n                else:\n                    if c3 == 'S':\n                        days += 1\n\n        if c1 == 'R':\n            if t1 == 'C':\n                if c2 == 'C':\n                    if c3 == 'S':\n                        days += 1\n                else:\n                    if c3 == 'R':\n                        days += 1\n            elif c2 == 'S':\n                if c3 == 'R':\n                    days += 1\n                else:\n                    if c3 == 'S':\n                        days += 1\n\n        print(days)\n\nsolution(input())"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s = s.replace('C', 'S').replace('R', 'S').replace('S', 'R')\n    t = t.replace('C', 'S').replace('R', 'S').replace('S', 'C')\n    for i in range(3):\n        if s[i] == t[i]:\n            print(i)\n    return"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    s = input_lines[0]\n    t = input_lines[1]\n    count = 0\n    for i in range(3):\n        if s[i] == t[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split(\"\\n\")\n    for i in range(3):\n        if days[i].count(\"S\") == days[i].count(\"R\") == days[i].count(\"C\") == 3:\n            return f\"{i+1}\"\n    return \"0\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    arr = list(map(int,stdin.strip().split()))\n    count = 0\n    temp = arr[1]\n    for i in range(1,n):\n        if arr[i] < temp:\n            count += 1\n        temp = arr[i]\n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = sorted(list(map(int, stdin.split())))\n    count = 0\n    for i in range(n - 2):\n        if p[i] < p[i + 1] < p[i + 2]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    min2 = min(p[0], p[1])\n    min3 = min(min2, p[2])\n    count = 0\n    for i in range(3, n):\n        if min3 == p[i - 2] and min2 == p[i - 1]:\n            count += 1\n        min3 = min(min2, p[i])\n        min2 = min(min3, p[i - 1])\n    return count\n\nsolution(\"5\")\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    i = 0\n    result = 0\n    while i < len(nums):\n        if nums[i] == nums[i + 1]:\n            i += 2\n            continue\n        if nums[i] == nums[i - 1]:\n            i += 1\n            continue\n        if i == len(nums) - 1:\n            break\n        if nums[i] > nums[i + 1]:\n            i += 2\n            continue\n        if nums[i] > nums[i - 1]:\n            i += 1\n            continue\n        else:\n            result += 1\n    print(result)\n    return 'ok'\n\nsolution(input())\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    \n    c = 0\n    for i in range(n - 2):\n        if p[i + 1] < p[i] < p[i + 2] or p[i + 2] < p[i] < p[i + 1]:\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    cnt = 0\n    for i in range(1, n - 1):\n        if p[i] == p[i - 1] + 1 and p[i] == p[i + 1] - 1:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    count = 0\n\n    # iterate through list, find the difference between \n    # the current and next element\n    # compare the difference with the next-next element\n    for i in range(0, n):\n        next_next = p[i]\n        next = p[i+1]\n        for j in range(i+1, n):\n            if j == i+1:\n                next_next = p[j]\n                continue\n            if next < next_next:\n                count += 1\n\n    print(count)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    permutation = list(map(int, stdin.split()))\n    for i in range(len(permutation)):\n        if (i + 1) == len(permutation):\n            break\n        if permutation[i + 1] < permutation[i]:\n            temp_l = permutation[i]\n            temp_r = permutation[i + 1]\n            permutation[i] = temp_r\n            permutation[i + 1] = temp_l\n    return permutation"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n - 2):\n        if p[i] == p[i + 1] == p[i + 2]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p: list = stdin.split(\" \")\n    n: int = int(p[0])\n    \n    if n < 3:\n        return str(0)\n\n    p = sorted(p[1:])\n\n    count: int = 0\n    for i in range(n - 1):\n        if p[i] > p[i + 1]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points.append(tuple(map(float, line.split())))\n    points.sort()\n    mid = int(len(points) / 2)\n    left_points = points[:mid]\n    right_points = points[mid:]\n    left_result = max(get_angle(left_points[i], left_points[i + 1]) for i in range(len(left_points) - 1))\n    right_result = min(get_angle(right_points[i], right_points[i + 1]) for i in range(len(right_points) - 1))\n    result = left_result if abs(left_result - right_result) <= 180 else right_result\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [[float(x), float(y)] for x, y in zip(input().split(), input().split())]\n\n    sorted_points = sorted(points)\n    \n    x_y = [(x, y) for x, y in points]\n    \n    # For each point in sorted_points, we have to compare it to the next point\n    # which we already have in sorted_points. The answer is the minimum distance\n    # between that point and the next.\n    for i in range(len(points)-1):\n        next_point = sorted_points[i+1]\n        x_y_pair = x_y[i]\n        x_next_point, y_next_point = next_point\n\n        # Distance between point and next point\n        distance = math.sqrt(math.pow(x_next_point - x_y_pair[0], 2) + math.pow(y_next_point - x_y_pair[1], 2))\n\n        # print(x_y_pair, next_point)\n        # print(f'distance: {distance}')\n        print(f'{math.degrees(math.atan2(y_next_point - x_y_pair[1], x_next_point - x_y_pair[0]))}')\n    return f'{math.degrees(math.atan2(y_next_point - x_y_pair[1], x_next_point - x_y_pair[0]))}'"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    points = [tuple(map(float, input[i].split())) for i in range(1, len(input))]\n    x_points = sorted(points, key=lambda point: point[0])\n    y_points = sorted(points, key=lambda point: point[1])\n    x_max = x_points[-1][0]\n    x_min = x_points[0][0]\n    y_max = y_points[-1][1]\n    y_min = y_points[0][1]\n    x_sum = 0\n    y_sum = 0\n    for x, y in points:\n        x_sum += x\n        y_sum += y\n    x_sum /= len(points)\n    y_sum /= len(points)\n    x_diff = x_max - x_min\n    y_diff = y_max - y_min\n    x_y_max = max(x_points, key=lambda point: point[1] + point[0])\n    x_y_min = min(x_points, key=lambda point: point[1] + point[0])\n    x_y_diff = x_y_max[1] - x_y_min[1]\n    if x_y_diff!= 0:\n        x_y_ratio = x_y_diff / x_diff\n    else:\n        x_y_ratio = x_y_diff\n    y_x_max = max(y_points, key=lambda point: point[0] + point[1])\n    y_x_min = min(y_points, key=lambda point: point[0] + point[1])\n    y_x_diff = y_x_max[0] - y_x_min[0]\n    if y_x_diff!= 0:\n        y_x_ratio = y_x_diff / x_diff\n    else:\n        y_x_ratio = y_x_diff\n    tangent = y_x_ratio / x_y_ratio\n    b = x_sum - tangent * y_sum\n    x = (y_max - y_min) / (x_max - x_min)\n    y = b - x * x_min\n    return f'{tangent:.4f}{x:.4f}{y:.4f}'\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = [ ]\n    for i in range(n):\n        t.append([ float(x) for x in stdin.split() ] )\n    t.sort(key=lambda x: (x[1], x[0]))\n    a = t[0][0]\n    c = t[0][1]\n    s = 0\n    for i in range(1, n):\n        if abs(t[i][0] - a) >= abs(c - t[i][1]):\n            s += c + t[i][1]\n            a = t[i][0]\n            c = t[i][1]\n        else:\n            s += t[i][1]\n    return str(s)"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = [float(i) for i in stdin.split()]\n    print(input)\n    return round(math.atan(sum([x*y for x, y in zip(input[:3], input[3:])]) / sum(input[:3])), 4)\nprint(solution(input))\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    points = []\n    for i in range(n):\n        points.append([float(x) for x in stdin.strip().split()[i].split()])\n    points.sort()\n    \n    min_x = points[0][0]\n    max_x = points[-1][0]\n    min_y = points[0][1]\n    max_y = points[-1][1]\n    \n    if max_x - min_x == 0:\n        return str(0)\n    elif max_y - min_y == 0:\n        return str(0)\n    \n    mid_x = (max_x + min_x) / 2\n    mid_y = (max_y + min_y) / 2\n    \n    left_x_squared = mid_x ** 2 - min_x ** 2\n    left_y_squared = mid_y ** 2 - min_y ** 2\n    \n    right_x_squared = mid_x ** 2 - max_x ** 2\n    right_y_squared = mid_y ** 2 - max_y ** 2\n    \n    left_slope = left_x_squared * (min_y - mid_y) + left_y_squared * (mid_x - min_x)\n    right_slope = right_x_squared * (min_y - mid_y) + right_y_squared * (mid_x - max_x)\n    \n    if left_slope == right_slope:\n        return str(0)\n    else:\n        return str((left_slope - right_slope) / (left_slope - right_slope))\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        x, y = map(float, line.split())\n        points.append((x, y))\n    points = sorted(points, key=lambda k: k[1])\n    # print(points)\n    angle = 0\n    # if 1 not in points:\n    #     return '0'\n    # for i, point in enumerate(points):\n    #     if i == len(points) - 1:\n    #         break\n    #     angle = get_angle(points[i], points[i + 1])\n    #     if angle > 180:\n    #         angle = 360 - angle\n    #     if point[0] < points[i + 1][0]:\n    #         angle = 360 - angle\n    # return str(angle)\n\n    for i, point in enumerate(points):\n        if i == len(points) - 1:\n            break\n        angle = get_angle(points[i], points[i + 1])\n        if angle > 180:\n            angle = 360 - angle\n        if point[0] < points[i + 1][0]:\n            angle = 360 - angle\n    return str(angle)\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for _ in range(int(stdin.split()[0])):\n        points.append([float(i) for i in stdin.split()[1].split(' ')])\n    points.sort(key=lambda x: x[0])\n    i = 0\n    while points[i][0] <= points[i + 1][0]:\n        if points[i][1] == points[i + 1][1]:\n            i += 1\n            continue\n        if points[i][1] * points[i + 1][1] > 0:\n            return \"Inf\"\n        if points[i][0] == points[i + 1][0]:\n            i += 1\n            continue\n        slope = (points[i + 1][1] - points[i][1]) / (points[i + 1][0] - points[i][0])\n        j = 0\n        while points[i][0] <= points[i + j + 1][0]:\n            if points[i][0] == points[i + j + 1][0]:\n                j += 1\n                continue\n            if points[i][1] == points[i + j + 1][1]:\n                j += 1\n                continue\n            if points[i][1] * points[i + j + 1][1] < 0:\n                return \"Inf\"\n            delta_x = points[i + j + 1][0] - points[i][0]\n            delta_y = points[i + j + 1][1] - points[i][1]\n            intersect = points[i][1] + slope * delta_x\n            if intersect == points[i + j + 1][1]:\n                return \"Inf\"\n            if intersect * slope < 0:\n                return \"Inf\"\n            if delta_y < 0:\n                delta_y = -delta_y\n            if slope * delta_x < 0:\n                delta_x = -delta_x\n            if abs(delta_x) < abs(delta_y):\n                return \"Inf\"\n            if abs(delta_y) < abs(delta_x):\n                return \"Inf\"\n            if -delta_x > delta_y:\n                return \"Inf\"\n            if -delta_x < delta_y:\n                return \"Inf\"\n            if -delta_x == delta_y:\n                return \"Inf\"\n            if -delta_x == delta_y:\n                return \"Inf\"\n            i += 1\n        i += 1\n    return \"Inf\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(float, stdin.split()))\n    y = list(map(float, stdin.split()))\n\n    a = -10000\n    b = 10000\n    c = -10000\n    d = 10000\n\n    for i in range(n):\n        # compute slope\n        m = (y[i] - y[i + 1]) / (x[i] - x[i + 1])\n\n        # find new y intercept\n        y_new = m * (x[i] - x[i + 1]) + y[i + 1]\n\n        # check if new point is higher\n        if y_new > y[i]:\n            if y_new > b:\n                b = y_new\n\n            if y_new < c:\n                c = y_new\n\n        # check if new point is lower\n        if y_new < y[i]:\n            if y_new > a:\n                a = y_new\n\n            if y_new < d:\n                d = y_new\n\n    return str(abs(b - a) + abs(c - d))\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = list(a)\n    dp = {i: {0: -1, 1: float('inf')} for i in range(n)}\n    dp[0][0] = 1\n    dp[1][0] = 1\n    for i in range(2, n):\n        a[i] -= 1\n        dp[i][0] = 1 + min(dp[i - 1][0], dp[i - 2][0])\n        dp[i][1] = 2 + min(dp[i - 1][0], dp[i - 2][0])\n        a[i] += 1\n    dp[n][1] = 1 + min(dp[n - 1][0], dp[n - 2][0])\n    for i in range(n, m):\n        dp[i][1] = 2 + min(dp[i - 1][0], dp[i - 2][0])\n    min_days = float('inf')\n    for i in range(1, n):\n        min_days = min(min_days, dp[i][1])\n    if min_days == float('inf'):\n        return -1\n    return min_days\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(num_cups: int, cups: List[int], target: int) -> bool:\n        \"\"\"\n        Check if it is possible to complete the coursework in num_cups cups by writing the target pages.\n        \"\"\"\n        curr = 0\n        for cup in range(1, num_cups + 1):\n            if cup not in cups:\n                curr = cup\n                break\n        return curr == target\n\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    # cups = sorted(cups)\n    # print(cups)\n    # print(n, m, cups)\n    # print(is_possible(n, cups, m))\n    # print()\n\n    # Brute force\n    # Time: O(2^n)\n    # for i in range(m, n + 1):\n    #     if is_possible(n, cups, i):\n    #         return i\n\n    # if n == m:\n    #     return 0\n\n    # Time: O(n)\n    for i in range(m, n + 1):\n        if is_possible(n, cups, i):\n            return i\n\n    return -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n!= m:\n        return -1\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j < a[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)\n    print(dp)\n    return str(dp[n][m])\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, m, *a = map(int, stdin.split())\n    if m <= 0 or len(a)!= m:\n        return '-1'\n    min_cups = min(a)\n    max_cups = max(a)\n    while max_cups - min_cups > 1:\n        min_cups += 1\n    if min_cups == max_cups:\n        return str(min_cups)\n    i = 0\n    while i < len(a) and a[i] >= min_cups:\n        i += 1\n    return str(i - 1)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    s = 0\n    t = 0\n    for c in range(n - 1):\n        s += cups[c]\n        t += cups[c]\n    s = s % m\n    print(min(m - s, t - s))\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, m = int(stdin[0]), int(stdin[1])\n    coffee_cups = list(map(int, stdin[2].split()))\n    result = solve(n, m, coffee_cups)\n    return result\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 5 8\n   ... 2 3 1 1 2\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 5 10\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5 16\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5 26\n   ... 5 5 5 5 5\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5\n   ... ''')\n    '-1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 16\n   ... 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 16\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 26\n   ... 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 26\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 16\n   ... 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 16\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 20\n   ... 2 3 2 4 1 1 3 4 2 1 4 3 2 1 4\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 20\n   ... 4 4 2 4 4 1 1 4 4 2 1 4 3 2 1 4\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 20\n   ... 4 4 2 4 4 1 1 4 4 2 1 4 3 2 1 4\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '1'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '2'\n    '''\n    '''\n    >>> solution('''\n   ... 5 32\n   ... 5 5 5 5 5 5\n   ... ''')\n    '1'\n    '''"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def day_is_possible(coffee_cups, pages):\n        energy = 0\n        for i in range(len(coffee_cups)):\n            if energy + coffee_cups[i] > pages:\n                return False\n            energy += coffee_cups[i]\n        return True\n\n    def deep_search(coffee_cups, page_count):\n        # \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0430\u0447\u0430\u043b\u043e: \u0432\u0441\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435, \u043d\u043e \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a \u043d\u0435\u043c\u0443 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440 \u043a\u0443\u0448\u0430\u0435\u043c \u043d\u0430 \u043d\u0435\u0433\u043e.\n        # \u0418\u043d\u0430\u0447\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0430\u0447\u0430\u043b\u043e: \u0432\u0441\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435, \u043d\u043e \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a \u043d\u0435\u043c\u0443 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440 \u043a\u0443\u0448\u0430\u0435\u043c \u043d\u0430 \u043d\u0435\u0433\u043e.\n        # \u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u043d \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043a\u0443\u0448\u0430\u043d\u043a\u0430\u043c\u0438, \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u0435\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\n        if day_is_possible(coffee_cups, page_count):\n            return True\n        if page_count > len(coffee_cups) * (len(coffee_cups) - 1) / 2:\n            return False\n        for i in range(len(coffee_cups)):\n            new_cups = coffee_cups[:]\n            new_cups.pop(i)\n            new_cups = new_cups + [i]\n            if deep_search(new_cups, page_count + 1):\n                return True\n        return False\n\n    coffee_cups, pages = [int(i) for i in stdin.split()]\n    if deep_search(list(range(1,coffee_cups + 1)), 1):\n        return '1'\n    return '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    cups = []\n    for i in range(n):\n        cups.append(a[i])\n\n    cup_to_drink = cups[0]\n\n    dp = {(0,): 0}\n    for i in range(1, n):\n        dp[(i,)] = i\n\n    for i in range(n + 1, m + 1):\n        dp[(i,)] = min(i, cup_to_drink) + dp[(i - 1,)]\n        cup_to_drink -= 1\n        if cup_to_drink == 0:\n            cup_to_drink = cups[0]\n\n    return str(dp[(m,)] - 1)\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(prompt=''):\n        return tuple(map(int, input(prompt).split()))\n\n\n    n, m = read_input()\n    caf = list(map(int, input().split()))\n\n    result = -1\n    last_day = 0\n    for day in range(1, n + 1):\n        curr_day_caf = []\n        for i in range(1, len(caf) + 1):\n            if i >= day:\n                curr_day_caf.append(max(0, min(caf[i - day], i)))\n\n        if sum(curr_day_caf) > m:\n            continue\n\n        result = max(result, day)\n        last_day = day\n\n    if result == -1:\n        print(-1)\n    else:\n        print(result)\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3 4\n   ... 1 2 3 2 4 3 1\n   ... ''')\n    '1 2 3'\n    >>> solution('''\n   ... 10 4\n   ... 1 3 1 3 10 3 7 7 12 3\n   ... ''')\n    '7 3 1 3'\n    >>> solution('''\n   ... 15 2\n   ... 1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 1\n   ... ''')\n    '1 1'\n    '''\n    num_of_nums = int(stdin)\n    nums = list(map(int, stdin.strip().split()))\n    k = int(stdin)\n    result = []\n    nums.sort()\n    for i in range(1, num_of_nums + 1):\n        if k >= i and k % i == 0:\n            result.append(i)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return \" \".join(map(str, heapq.nlargest(k, enumerate(s), key=lambda x: x[1])))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    t = list(range(1, n + 1))\n    count = 0\n    result = []\n    while t:\n        for i in t:\n            if all(i!= j for j in s):\n                result.append(i)\n                count += 1\n                if count == k:\n                    return''.join(map(str, result))\n        t = list(set(t) - set(result))\n        result = []\n        count = 0\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    t = []\n    for _ in range(k):\n        c = 0\n        for i in range(n):\n            if t and t[-1] == s[i]:\n                t.pop()\n                c += 1\n        t.append(s[0])\n        s = s[1:]\n    return''.join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    i = 0\n    res = \"\"\n    while i < k:\n        t = max([x for x in s if x!= s[i]])\n        res += str(t)\n        s.remove(t)\n        i += 1\n    return res\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, k = map(int, input[0].split())\n    s = list(map(int, input[1]))\n    s.sort()\n    res = []\n\n    def permute(nums, target):\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            elif target == 1:\n                yield nums[i]\n            else:\n                if len(nums[i:]) > 0:\n                    yield from permute(nums[:i] + nums[i+1:], target - 1)\n\n    for i in range(k + 1):\n        perm = list(permute(s, i))\n        if len(perm) == k:\n            res.append(perm[0])\n    return '\\n'.join([str(r) for r in res])\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    ans = []\n    max_count = 0\n    for i in range(n):\n        for j in range(n):\n            count = 1\n            for m in range(i+1, n):\n                if lst[i] == lst[m]:\n                    count += 1\n            for m in range(j+1, n):\n                if lst[i] == lst[m]:\n                    count += 1\n            if count > max_count:\n                max_count = count\n                ans = lst[i:j+1]\n    return str(len(ans)) +'' +''.join(map(str, ans))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(k):\n        m = -1\n        for j in range(i + 1, n):\n            if s[j] > s[i] and m == -1:\n                m = j\n            elif s[j] > s[i] and m > 0:\n                break\n        if m!= -1:\n            t.append(s[m])\n            s.remove(s[m])\n    return''.join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    arr = (int(x) for x in stdin.split()[1:])\n    arr.sort()\n    ans = []\n\n    def cut(arr, n, k):\n        if k == 0:\n            return ans\n        else:\n            for i, v in enumerate(arr):\n                if k == 0:\n                    return\n                if i < n - 1:\n                    if v == arr[i + 1]:\n                        continue\n                if v > arr[i - 1]:\n                    cut(arr, n, k - 1)\n\n    cut(arr, n, k)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return''.join(str(x) for x in max_sub_array_cut_k(s, k))\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nn, m = map(int, input().split())\na = [[int(x) for x in input().split()] for _ in range(n)]\n\nmaxi = 0\nfor i in range(1, min(n, m) + 1):\n    if maxi < i:\n        continue\n    for j in range(1, min(n, m) + 1):\n        s = [[a[i - 1][j - 1], a[i - 1][j], a[i][j - 1], a[i][j]]]\n        s.sort()\n        if abs(s[0] - s[1]) >= maxi:\n            maxi = abs(s[0] - s[1])\n            print(maxi)\nprint(maxi)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    ret = 0\n    for x in range(1, m + 1):\n        for y in range(x, m + 1):\n            x_to_y = a[x - 1][y - 1] - a[x - 1][y]\n            y_to_x = a[y - 1][x - 1] - a[y - 1][x]\n            ret = max(ret, x_to_y, y_to_x)\n    return str(ret)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # horizontal\n    for i in range(n):\n        for j in range(m - 1):\n            if abs(matrix[i][j] - matrix[i][j + 1]) > 1:\n                return 0\n\n    # vertical\n    for j in range(m):\n        for i in range(n - 1):\n            if abs(matrix[i][j] - matrix[i + 1][j]) > 1:\n                return 0\n\n    # diagonal\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if abs(matrix[i][j] - matrix[i + 1][j + 1]) > 1:\n                return 0\n\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if abs(matrix[i][j] - matrix[i][j + 1]) > 1:\n                return 0\n\n    return 1\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    mn = min(n, m)\n    ans = 0\n    while mn > 0:\n        mn -= 1\n        last_row = a[mn:]\n        r = 0\n        for i in range(len(last_row)):\n            for j in range(i+1, len(last_row)):\n                if abs(last_row[i] - last_row[j]) >= ans:\n                    r += 1\n        ans = max(ans, r)\n    return str(ans)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    return str(max(\n        [(len(set(zip(*a)) - set([i])) for i in range(m)] +\n        [(len(set(zip(*a[::-1])) - set([i])) for i in range(m)]))]\n    ))"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    s = sorted([int(x) for x in stdin.split()])\n    return max(0, s[-1] - s[0] - 1)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    visited = []\n    def traverse(r, c, k):\n        if c == m:\n            return k\n        if r not in visited:\n            visited.append(r)\n            if c == m - 1:\n                k += abs(a[r][c] - a[r][c + 1])\n            else:\n                for i in range(m):\n                    if i == c or i == c + 1:\n                        continue\n                    k = traverse(r, c + 1, k)\n            return k\n        return k\n    return str(traverse(0, 0, 0))\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m = map(int, input[0].split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input[i+1].split())))\n\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            count = 1\n            for i in range(n):\n                if j == 0:\n                    if a[i][j] > a[i][j + 1]:\n                        count += 1\n                else:\n                    if a[i][j] > a[i][j - 1]:\n                        count += 1\n\n            if count > ans:\n                ans = count\n    return str(ans)\n\nprint(solution(input))\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    res = 0\n    for i in range(1, m):\n        row = 0\n        for j in range(n):\n            row += abs(a[j][i] - a[j][i-1])\n        res = max(res, row)\n    return str(res)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    n_rows = n\n    n_cols = m\n    max_k = 0\n    while n_rows > 0 and n_cols > 0:\n        current_row = 0\n        current_col = 0\n        visited_row = set()\n        visited_col = set()\n        visited_row.add(current_row)\n        visited_col.add(current_col)\n        while current_row < n_rows and current_col < n_cols:\n            current_row += 1\n            current_col += 1\n            if current_row > n_rows - 1:\n                break\n            visited_row.add(current_row)\n            if matrix[current_row][current_col] > matrix[current_row - 1][current_col]:\n                visited_col.add(current_col)\n                visited_col.add(current_col + 1)\n                visited_col.add(current_col - 1)\n                break\n        else:\n            current_row -= 1\n            current_col -= 1\n            visited_row.add(current_row)\n            visited_row.add(current_row + 1)\n            visited_col.add(current_col)\n            visited_col.add(current_col - 1)\n        current_k = len(visited_row) + len(visited_col)\n        if current_k > max_k:\n            max_k = current_k\n\n        n_rows -= 1\n        n_cols -= 1\n\n    return str(max_k)\n\n\nprint(solution(\"\"\"5 3\n5 8\n4 3\n3 9\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7\n3 7"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    #print(inp)\n    minimum = 1\n    for i in range(len(inp[0])-1):\n        if inp[0][i] == inp[0][i+1]:\n            minimum += 1\n        else:\n            minimum = 1\n        #print(i, minimum)\n        if minimum > 2:\n            break\n    return str(minimum)\n\nsolution(input())\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(min(len(stdin) - stdin.count(\"x\"), 0))\nsolution(*input().split())\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n - 1):\n        if s[i] == 'x':\n            s = s[:i] + s[i + 1:]\n    if 'xxx' in s:\n        return 0\n    return len(s)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")[0]\n    for x in range(len(l)-2):\n        if (l[x] == \"x\" and l[x+1] == \"x\" and l[x+2] == \"x\"):\n            return str(0)\n    else:\n        return str(len(l) - (l.count(\"x\") * 3))\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,s=map(int,stdin.split())\n    for i in range(n):\n        s=s.replace(\"x\",\"\")\n    return str(len(s))"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2')\n    0\n    >>> solution('6')\n    1\n    >>> solution('5')\n    0\n    >>> solution('10')\n    8\n    \"\"\"\n    max_ = len(stdin)\n    counter = 0\n    for i in range(max_):\n        if stdin[i] == 'x':\n            counter += 1\n    return max(0, max_ - counter)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split(\"\\n\")\n\nfile_name = stdin[1]"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    file_name = stdin.split()[1]\n    count_x = file_name.count('x')\n    count_non_x = file_name.count('x',count_x+1)\n    if count_non_x > 0:\n        return \"0\"\n    else:\n        return count_x - 1\n\n\nprint(solution('5'))\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.split()[0])\n    file_name = stdin.split()[1]\n    forbidden = \"xxx\"\n    count = 0\n    for i in range(n):\n        if forbidden in file_name[i:i+3]:\n            count += 1\n            file_name = file_name[:i]+file_name[i+3:]\n    return print(count) if file_name.find(forbidden) == -1 else print(0)"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N, file = int(stdin.strip()), stdin.split(\"\\n\")\n  result = []\n  for i in range(N):\n    if file[i].count(\"x\") >= 3:\n      continue\n    if len(result) == 0:\n      result.append(file[i])\n    elif result[-1][-1] == file[i][0]:\n      result.append(file[i])\n    else:\n      result.pop()\n  return len(result)\n\n\n\nfile = \"xxxiii\"\nprint(solution(file))\nfile = \"xxoxx\"\nprint(solution(file))\nfile = \"xxxxxxxxxx\"\nprint(solution(file))\nfile = \"xxxxxxx\"\nprint(solution(file))\n\nfile = \"xxxxxxx\"\nprint(solution(file))\nfile = \"xxxxxxxxxx\"\nprint(solution(file))\nfile = \"xxxxxxxxxx\"\nprint(solution(file))\nfile = \"xxxxxxxxxx\"\nprint(solution(file))\n\nfile = \"xxxxxxx\"\nprint(solution(file))\nfile = \"xxxxxx\"\nprint(solution(file))\nfile = \"xxxxx\"\nprint(solution(file))\nfile = \"xxxx\"\nprint(solution(file))\n\nfile = \"xxxx\"\nprint(solution(file))\nfile = \"xxxxx\"\nprint(solution(file))\nfile = \"xxxxxx\"\nprint(solution(file))\nfile = \"xxxxxxx\"\nprint(solution(file))\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    result = (3*(r**2))\n    return result"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 3*(n*n*0.5)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    return (3 * 4 ** 2) / 3\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return 3 * r * r\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    sides = 3\n    area = radius * radius * (sides - 2) * (sides - 1) * 0.5\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return str(3 * int(a) ** 2)"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * (r ** 2)\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function returns the area of the regular dodecagon inscribed in a circle of radius r\n    \"\"\"\n    # your code here\n    r = int(stdin)\n    d = 3 * (r ** 2)\n    print(d)\n    return d\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * (r**2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f'{math.sqrt(3) * int(stdin) ** 2}'\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, W = stdin.split()\n    return 'unsafe' if int(S) > int(W) else'safe'\n\nsolution(input())"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.split(\" \")[1] < stdin.split(\" \")[0]:\n        return \"unsafe\"\n    return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    s = n[0]\n    w = n[1]\n    if s >= w:\n        return 'unsafe'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    split = stdin.split()\n    s = int(split[0])\n    w = int(split[1])\n    if w > s:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")\n    return 0\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #if __name__ == '__main__':\n    print(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    if int(stdin[1]) > int(stdin[0]):\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\nsolution(input())\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    [s, w] = stdin.split()\n    w = int(w)\n    s = int(s)\n\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    (S,W)=stdin.split(\" \")\n    S=int(S)\n    W=int(W)\n    if S>W:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.strip().split(' ')\n    sheep = int(stdin[0])\n    wolves = int(stdin[1])\n    if wolves >= sheep:\n        return 'unsafe'\n    return'safe'\n    return\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(\" \"))\n    print(a * b * c)\n\nsolution(input())\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    print(int((a + b + c)/2))\n    return ''"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    return f'{int(AB*BC*CA/2)}'"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution function goes here\n    \n    Parameters:\n    stdin (str): Takes input as str from Standard Input.\n\n    Returns:\n    str: Return str.\n    \"\"\"\n    AB, BC, CA = stdin.split()\n    print(int(AB) * int(BC) * int(CA))\n    return ''\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(int(a*b*c/2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [side_a, side_b, side_c] = stdin.split()\n    side_a = float(side_a)\n    side_b = float(side_b)\n    side_c = float(side_c)\n    return str(int(round(side_a * side_b * side_c / 2)))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check_is_integer(number: int) -> None:\n        try:\n            int(number)\n        except ValueError:\n            print(\"Integer is needed.\")\n    check_is_integer(stdin.split()[0])\n    check_is_integer(stdin.split()[1])\n    check_is_integer(stdin.split()[2])\n    \n    ab = int(stdin.split()[0])\n    bc = int(stdin.split()[1])\n    ca = int(stdin.split()[2])\n    \n    return str(int((ab * bc) / 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = stdin.split(\" \")\n    AB = int(AB)\n    BC = int(BC)\n    CA = int(CA)\n    return str(round(float(AB*BC*CA)/2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(round(a * b * c / 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = [int(x) for x in stdin.split(\" \")]\n\n    return str(int(AB * BC * CA / 2))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    return str(int(A) * int(B) + int(C))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    print(A // min(B, C))\n    return A // min(B, C)\nsolution(\"2 11 4\")"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(min(B // A, min(C, B // A)))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = stdin.split()\n    return str(int(B) // int(A) // int(C))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    A, B, C = lines\n    return str(int(A) * int(B) * int(C))\n    # Another way\n    # return int(A) * int(B) * int(C)\n    # return f'{int(A) * int(B) * int(C)}'\n    # Another way\n    # return f'{int(A) * int(B) * int(C)}'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= B:\n        return str(B)\n    elif A >= C:\n        return str(A)\n    else:\n        return str(C)\n    # return str(min(A,B,C))\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x = 0\n    while True:\n        if b > (a-x)*c:\n            x += 1\n        else:\n            break\n    return str(x)\n    \n    \n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns : str\n    '''\n    a,b,c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    time = 0\n    while a <= b:\n        if a % 2 == 0:\n            a = a + 1\n        else:\n            a = a - 1\n        time += 1\n        if time > c:\n            break\n    return str(time)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(A * B * C)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C <= A:\n        return A * B\n    return A + (C // A) * B\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) * int(stdin.split()[1]))"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(A * B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\" \")\n    return str(int(input_data[0]) * int(input_data[1]))"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(int(A) * int(B))"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = stdin.split(\" \")\n    return str(int(A) * int(B))"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(A * B)\n    return ''\n\nsolution()\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = list(map(int, stdin.split()))\n    ans = 0\n    T += 0.5\n    while T <= T + 5:\n        ans += A\n        if T % A == 0:\n            ans += A\n        T += 0.5\n    return str(ans)"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(int(A * ((1 + (2 * (T / A))) ** (T / A))) + int(B * ((1 + (2 * (T / B))) ** (T / B))))"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    total_biscuits = 0\n    biscuits_per_second = (b * 2) + (a * 3)\n    for i in range(1, t + 1):\n        total_biscuits += biscuits_per_second\n        biscuits_per_second *= 2\n        if i % a == 0:\n            biscuits_per_second = (biscuits_per_second // a) * 2 + (biscuits_per_second % a) * 3\n        if i % b == 0:\n            biscuits_per_second = (biscuits_per_second // b) * 2 + (biscuits_per_second % b) * 3\n        if i > t:\n            biscuits_per_second = (biscuits_per_second // a) * 2 + (biscuits_per_second % a) * 3\n            biscuits_per_second = (biscuits_per_second // b) * 2 + (biscuits_per_second % b) * 3\n            break\n    return str(total_biscuits)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A,B,T = map(int,stdin.split())\n    total = 0\n    for i in range(1,T+1):\n        if i%A==0:\n            total += 1\n            continue\n        if i%2==0:\n            total += 3\n            continue\n        if i%3==0:\n            total += 5\n            continue\n        total += 6\n    return str(total)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    t = int(line[0])\n    a = int(line[1])\n    b = int(line[2])\n    ans = 1\n    cnt = 0\n    for i in range(1, t+1):\n        if i % a == 0:\n            ans += 1\n            cnt += 1\n            if cnt == b:\n                ans += 1\n                cnt = 0\n        else:\n            cnt = 0\n    return str(ans)\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = (int(i) for i in stdin.split())\n    total_biscuits = 0\n    for i in range(1, T + 1):\n        if i % A == 0:\n            total_biscuits += i\n        elif i % 2 == 0:\n            total_biscuits += i + 2\n        else:\n            total_biscuits += i + 4\n        total_biscuits += 1\n    return str(total_biscuits)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return '{0:d}'.format(T // A + (T + 0.5) // B)"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    if A == 0 and T == 0:\n        return str(0)\n    if T >= 0 and T % A == 0:\n        return str(B * 2)\n    if T >= 0 and T % A == 0 and T % B == 0:\n        return str(B * 2 + B * 3)\n    if T >= 0 and T % A!= 0:\n        return str(B)\n    if T >= 0 and T % A == 0:\n        return str(B * 2)\n    if T >= 0 and T % A == 0 and T % B == 0:\n        return str(B * 2 + B * 3)\n    if T >= 0 and T % A!= 0:\n        return str(B * 1)\n    if T >= 0 and T % A!= 0 and T % B == 0:\n        return str(B * 1 + B * 3)\n    if T >= 0 and T % A!= 0 and T % B!= 0:\n        return str(B)\n    return str(0)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split(\" \")\n    A, B, T = int(input_values[0]), int(input_values[1]), int(input_values[2])\n    print(A * int(T / A) + int(T / 2) + int((T + 0.5) / A) * int(B) * int(T / A))\n    return str(A * int(T / A) + int(T / 2) + int((T + 0.5) / A) * int(B) * int(T / A))"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = list(map(int, stdin.split()))\n    return str(int((a + b * (1 + 0.5 * t)) * b))"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if a <= b <= k:\n        if k % k == 0:\n            return \"OK\"\n        else:\n            return \"NG\"\n    elif a > b:\n        return \"NG\"\n    elif a < k:\n        return \"NG\"\n    elif b > k:\n        return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    k = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n\n    for i in range(k):\n        if a % i == 0 and b % i == 0:\n            if a * k + b * k == i * k:\n                return \"OK\"\n    return \"NG\"\n\n\nsolution(\"\"\"\n2\n1000 2000\n\"\"\")"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (K, A, B) = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    while True:\n        if (A + 1) % int(K) == 0:\n            if (A + 1) == int(K):\n                print(\"OK\")\n                return\n        A += 1\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    K = int(input())\n    print('OK' if (A % K == 0) and (B % K == 0) else 'NG')\n    return 'OK' if (A % K == 0) and (B % K == 0) else 'NG'\n\n\nsolution(input())\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    k, a, b = map(int, stdin.split())\n    for i in range(1, k + 1):\n        if i * i > k:\n            break\n        if i % 7 == 0:\n            if a <= i * i <= b:\n                return \"OK\"\n    return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    for i in range(1, 1001):\n        if (i % K == 0) and ((i >= A) and (i <= B)):\n            print(\"OK\")\n            return\n    print(\"NG\")\n\nsolution(input())\n\nFor example, if the objective is to get a total distance of 562, then the solution would be:\n562 562"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for num in range(K, A, -K):\n        if num == A or num == B:\n            print(\"OK\")\n            return\n        else:\n            print(\"NG\")\n            return\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = stdin.split()\n    k, a, b = int(k), int(a), int(b)\n    for i in range(a, b + 1):\n        if k * i % 7 == 0:\n            print(\"OK\")\n            break\n    else:\n        print(\"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split(\" \"))\n    carry_dist = K\n    if A % K!= 0 or B % K!= 0:\n        return \"NG\"\n    \n    if K > A or K > B:\n        return \"NG\"\n\n    for i in range(1, min(K, A, B) + 1):\n        if K % i == 0 and (A % i == 0 and B % i == 0):\n            carry_dist = i\n            break\n    \n    return \"OK\"\n\nsolution(input())"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Your code goes here\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, X = list(map(int, stdin.split()))\n    return str(X * (T * (T + 1)) // 2)\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return str(x * t / (x * x - t))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def _f(t,x):\n        return 2*x*t//(2*x+1)\n    t,x = map(int,stdin.split())\n    print(_f(t,x))"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, x = stdin\n    return str(round((x*(1/t))/(1/x)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    # TODO: Write your code here\n    return str(x * (t // 3))\n    \n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = list(map(int, stdin.split()))\n    return str(round(T * X, 3))\n    #T, X = map(int, stdin.split())\n    #return str(round((T * X) / 8, 3))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(round(X / 3 - T / 2))"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, x = list(map(int, stdin.split()))\n    return f'{((t * x) // (x + 1)):.4f}'"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(X*(T//X) + X*((T%X)/X))"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a <= b <= c:\n        return a - b + c\n    else:\n        return max(c - b, a - c)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = map(int, stdin.split())\n    return f\"{(a * b) // (b + c)}\""
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return '{}'.format(min(a, b, c))\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    if k == 0:\n        return str(m)\n    elif n <= k <= m:\n        return str(n - k)\n    elif n < k:\n        if n - k == 0:\n            return str(0)\n        elif n - k <= m:\n            return str(n - m)\n        else:\n            return str(n - k - m)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    B1 = C\n    C1 = A - (C - B)\n    while B1 >= C1:\n        B1 = C1\n        C1 = A - (C1 - B)\n    print(int(B1))\n    return \"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b > a:\n        return \"0\"\n    elif c > a:\n        return str(a - b)\n    else:\n        return str(a - b - c)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    bottle_1 = int(A)\n    bottle_2 = int(B)\n    water_in_bottle_2 = int(C)\n\n    if bottle_2 >= bottle_1:\n        bottle_1 -= water_in_bottle_2\n        print(bottle_1)\n    else:\n        print(bottle_1)\n        bottle_1 = bottle_1 - water_in_bottle_2\n        print(bottle_1)\n    return"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(c, a - b))\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n1, n2, n3 = stdin.split(' ')\n    # n1 = int(n1)\n    # n2 = int(n2)\n    # n3 = int(n3)\n    # # result = f'{(n1-n2)//n3}'\n    # print(result)\n    # return result\n    a, b, c = map(int, stdin.split(' '))\n    return (a * (b - c)) // c"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #print(stdin)\n    A, B, C = map(int, stdin.split())\n    if C>=A:\n        return '1'\n    else:\n        return str(B-C)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *P = map(int, stdin.split())\n    P = sorted(P)\n    Q = sorted(P, reverse=True)\n    i = j = 0\n    result = 0\n    while i < N and j < N:\n        if P[i] < Q[j]:\n            result += P[i] - Q[j]\n            i += 1\n        else:\n            j += 1\n    return str(result)\n\nstdin = \"\"\"5\n5 3 2 1 4\n4 2 3 1 1\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n\n    permutations = []\n    for i in range(1, n + 1):\n        for j in range(i, n):\n            permutations.append((p[i - 1], q[j - 1]))\n    permutations.sort()\n\n    count = 0\n    for i in range(0, n - 1):\n        if permutations[i][0] > permutations[i + 1][0]:\n            count += permutations[i + 1][0] - permutations[i][0]\n    return str(count)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(map(int, stdin.split(\" \")))\n    Q = list(map(int, stdin.split(\" \")))\n    m = max(P)\n    n = max(Q)\n    ans = 0\n    for i in range(m+1):\n        for j in range(m+1):\n            if i < j and P[i] == Q[j]:\n                ans = max(ans, abs(i - j))\n    return str(ans)\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split('\\n')[0])\n    P: List = stdin.split('\\n')[1:]\n    Q: List = stdin.split('\\n')[2:]\n    ans = 0\n\n    for i in range(1, N):\n        P[i], P[i - 1] = P[i - 1], P[i]\n        Q[i], Q[i - 1] = Q[i - 1], Q[i]\n    for i in range(N):\n        P_i = P[i]\n        Q_i = Q[i]\n        if P_i < Q_i:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    perm_P = stdin.split()[1].split()\n    perm_Q = stdin.split()[2].split()\n    perm_P_int = []\n    perm_Q_int = []\n    for x in perm_P:\n        perm_P_int.append(int(x))\n    for x in perm_Q:\n        perm_Q_int.append(int(x))\n\n    perm_P_int.sort()\n    perm_Q_int.sort()\n\n    if perm_P_int == perm_Q_int:\n        return str(0)\n    else:\n        return str(abs(perm_P_int[0] - perm_Q_int[0]))\n    \n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n!= len(stdin.split()[1]):\n        return 'Invalid input'\n    nums = stdin.split()[1].split(',')\n    nums = list(map(int, nums))\n    p_i, q_i, p_j, q_j = 1, 1, 2, 2\n    while p_j < n:\n        p_i = p_i * p_j\n        p_j += 1\n    while q_j < n:\n        q_i = q_i * q_j\n        q_j += 1\n    return abs(p_i - q_i)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] < arr[j]:\n                res = max(res, arr[i] - arr[j])\n    return str(res)\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    P = list(map(int, stdin.split()[1:]))\n    Q = list(map(int, stdin.split()[1:]))\n    p_idx = {}\n    q_idx = {}\n    for i, p in enumerate(P):\n        if p not in p_idx:\n            p_idx[p] = i\n    for i, q in enumerate(Q):\n        if q not in q_idx:\n            q_idx[q] = i\n    p_idx_lst = sorted([(v,k) for k,v in p_idx.items()], reverse=True)\n    q_idx_lst = sorted([(v,k) for k,v in q_idx.items()], reverse=True)\n    res = float('inf')\n    for p in p_idx_lst:\n        for q in q_idx_lst:\n            p_idx_next = p[1] + 1\n            q_idx_next = q[1] + 1\n            if p_idx_next == N or q_idx_next == N:\n                continue\n            res = min(res, abs(P[p_idx_next] - Q[q_idx_next]))\n    return str(res)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def permutation(N: int, current: int, current_perm: List[int]):\n        if N == 0:\n            # print(current_perm)\n            pass\n        for i in range(current, N + 1):\n            current_perm[current] = i\n            permutation(N, current + 1, current_perm)\n\n    N = int(stdin)\n    P = list(map(int, stdin.split(\" \")))\n    Q = list(map(int, stdin.split(\" \")))\n    current_perm = [0] * N\n    permutation(N, 0, current_perm)\n    return str(abs(Q[0] - P[0]) + abs(Q[1] - P[1]) + abs(Q[2] - P[2]))\n\nsolution(\"3 1 3 2\")\nsolution(\"3 6 5 2\")\nsolution(\"9 9 9 9 9\")\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int,stdin.split()[1]))\n    q = list(map(int,stdin.split()[2]))\n    p = sorted(p)\n    q = sorted(q)\n    res = 0\n    for i in range(N):\n        res += abs(p[i] - q[i])\n    return str(res)"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns:\n        the length of the longest ACGT substring\n    \"\"\"\n    s = stdin\n    best = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if 'ACGT'.find(s[i:j]) > -1:\n                best = max(best, j - i)\n    return best\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char.lower() in 'acgt':\n            return len(stdin)\n    return len(stdin) - 1"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sub = s[i:j]\n            if 'ACGT' in sub:\n                ans = max(ans, len(sub))\n    return str(ans)\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer: int = 0\n    # your code here\n    return answer\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n###  SOLUTION  ###\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 1:\n        return \"\"\n    if len(s) == 1:\n        return s\n    l = []\n    for i in range(len(s)):\n        if s[i] in \"TC\":\n            l.append(s[i:])\n    l.sort()\n    return l[-1]"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    return(math.ceil(int(stdin.strip())/2))"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        odd = False\n        for j in range(len(s)):\n            if int(s[j]) % 2 == 1:\n                odd = True\n                break\n        if odd:\n            ans += 1\n    return ans"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    regex = re.compile(r'\\d+')\n    return sum(1 for digit in re.findall(regex, stdin) if int(digit) % 2)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"9\""
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(int(stdin)):\n        count += (len(str(i)) % 2 == 1)\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    max_digits = 10\n    for i in range(1, int(stdin)):\n        if i % 2 == 1 and i > max_digits:\n            max_digits = i\n    return max_digits\n\nprint(solution(input()))"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    if N == 1:\n        return \"0\"\n    for i in range(1, 10):\n        if N % i == 1:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    def dig_odd(n):\n        s = str(n)\n        return s.count(\"1\") == s.count(\"0\")\n    return sum(1 for i in range(1, x+1) if dig_odd(i))"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    output = 0\n    count = 0\n    # Iterate over the number\n    for i in range(1, int(stdin) + 1):\n        # Split the number\n        s = list(str(i))\n        # If the length of the list is odd\n        if len(s) % 2!= 0:\n            # Increment the count\n            count += 1\n    # Return the count\n    return str(count)\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    S = S.replace('c', 'h')\n    S = S.replace('f', 't')\n    S = S.replace('f', 't')\n    S = S.replace('e', 'a')\n    return S\n\"\"\"\n\nS = input()\n\nfor i in range(len(S)):\n    if S[i] == 'c':\n        S = S.replace('c', 'h')\n    if S[i] == 'f':\n        S = S.replace('f', 't')\n    if S[i] == 'f':\n        S = S.replace('f', 't')\n    if S[i] == 'e':\n        S = S.replace('e', 'a')\n\nprint(len(S))\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [x, y] = stdin.split()\n    [x, y] = (x, y)\n    [x, y] = sorted(set(x), key=x.index)\n    [x, y] = sorted(set(y), key=y.index)\n    print(len(x))\n\n    return\nsolution(\"cupofcoffee\")\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(4)\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    # break up the input into an array of characters\n    char_array = list(S)\n    char_array = [char_array[i] for i in range(0, n)]\n    # helper function that finds index of character in list\n    def find_index(char, char_list):\n        for i in range(0, len(char_list)):\n            if char_list[i] == char:\n                return i\n        return -1\n    # find the index of the letter in the char_array\n    # if the letter doesn't exist, return -1\n    index_of_a = find_index(\"a\", char_array)\n    index_of_e = find_index(\"e\", char_array)\n    index_of_h = find_index(\"h\", char_array)\n    index_of_i = find_index(\"i\", char_array)\n    index_of_o = find_index(\"o\", char_array)\n    index_of_u = find_index(\"u\", char_array)\n    # if a is found\n    if index_of_a >= 0:\n        # replace with 'a'\n        char_array[index_of_a] = 'a'\n        # if index_of_e is found\n        if index_of_e >= 0:\n            # replace with 'e'\n            char_array[index_of_e] = 'e'\n            # if index_of_h is found\n            if index_of_h >= 0:\n                # replace with 'h'\n                char_array[index_of_h] = 'h'\n                # if index_of_i is found\n                if index_of_i >= 0:\n                    # replace with 'i'\n                    char_array[index_of_i] = 'i'\n                    # if index_of_o is found\n                    if index_of_o >= 0:\n                        # replace with 'o'\n                        char_array[index_of_o] = 'o'\n                        # if index_of_u is found\n                        if index_of_u >= 0:\n                            # replace with 'u'\n                            char_array[index_of_u] = 'u'\n    # if e is found\n    if index_of_e >= 0:\n        # replace with 'e'\n        char_array[index_of_e] = 'e'\n        # if index_of_h is found\n        if index_of_h >= 0:\n            # replace with 'h'\n            char_array[index_of_h] = 'h'\n            # if index_of_i is found\n            if index_of_i >= 0:\n                # replace with 'i'\n                char_array[index_of_i] = 'i'\n                # if index_of_o is found\n                if index_of_o >= 0:\n                    # replace with 'o'\n                    char_array[index_of_o] = 'o'\n    # if h is found\n    if index_of_h >= 0:\n        # replace with 'h'\n        char_array[index_of_h] = 'h'\n        # if index_of_i is found\n        if index_of_i >= 0:\n            # replace with 'i'\n            char_array[index_of_i] = 'i'\n            # if index_of_o is found\n            if index_of_o >= 0:\n                # replace with 'o'\n                char_array[index_of_o] = 'o'\n                # if index_of_u is found\n                if index_of_u >= 0:\n                    # replace with 'u'\n                    char_array[index_of_u] = 'u'\n    # if i is found\n    if index_of_i >= 0:\n        # replace with 'i'\n        char_array[index_of_i] = 'i'\n        # if index_of_o is found\n        if index_of_o >= 0:\n            # replace with 'o'\n            char_array[index_of_o] = 'o'\n            # if index_of_u is found\n            if index_of_u >= 0:\n                # replace with 'u'\n                char_array[index_of_u] = 'u'\n    # if o is found\n    if index_of_o >= 0:\n        # replace with 'o'\n        char_array[index_of_o] = 'o'\n        # if index_of_u is found\n        if index_of_u >= 0:\n            # replace with 'u'\n            char_array[index_of_u] = 'u'\n    # if u is found\n    if index_of_u >= 0:\n        # replace with 'u'\n        char_array[index_of_u] = 'u'\n    # convert the array back into a string\n    return \"\".join(char_array)\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    t = t[::-1]\n    cnt = 0\n    for i in range(len(t)):\n        if s[i]!= t[i]:\n            s = s[:i] + t[i] + s[i+1:]\n            cnt += 1\n    print(cnt)\n    return s\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[5], 'h', 1).replace(stdin[8], 't', 1).replace(stdin[9], 't', 1).replace(stdin[11], 'a', 1)"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1: return stdin\n    if n == 2:\n        return stdin[1] + stdin[0]\n    h = stdin[0]\n    f = stdin[1]\n    t = stdin[2]\n    e = stdin[3]\n    return h + t + f + e\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S: str = stdin\n    T: str = S.replace('c', 'h')\n    T = T.replace('f', 't')\n    T = T.replace('f', 't')\n    T = T.replace('e', 'a')\n    return T\n\nsolution(input())\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = stdin.split(\" \")\n    return \"\\n\".join([str(i) for i in range(int(K), int(X)+1)])\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    K, X = map(int, stdin.split())\n    print(K, X)\n    total = list(range(1000000))\n    total_length = len(total)\n    for i in range(0, total_length - 1):\n        if total[i] > K:\n            break\n        if total[i + 1] < X:\n            print(i, i + 1, total[i + 1])\n    return\n\n\nsolution(\"3 7\")\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    k = int(input[0])\n    x = int(input[1])\n    black = []\n    white = []\n    for i in range(x):\n        if i % k == 0:\n            black.append(i)\n        else:\n            white.append(i)\n    if k % 2 == 0:\n        black.sort()\n        white.sort()\n    else:\n        white.sort()\n        black.sort()\n    if len(black) > len(white):\n        print(\" \".join(str(i) for i in black))\n    else:\n        print(\" \".join(str(i) for i in white))\n    return \" \".join(str(i) for i in white)\n\nsolution(\"3 7\")\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = int(stdin[0]), int(stdin[1])\n    black_list = set()\n    white_list = set()\n    \n    while len(black_list) < K and len(white_list) < K:\n        if len(black_list) == 0:\n            black_list.add(X)\n            white_list.add(X + 1)\n            white_list.add(X + 2)\n            X += 2\n        elif len(white_list) == 0:\n            black_list.add(X)\n            white_list.add(X - 1)\n            white_list.add(X - 2)\n            X -= 2\n        else:\n            if X in black_list:\n                break\n            if X in white_list:\n                X += 1\n            else:\n                X -= 1\n    if len(black_list) < K:\n        for black_index in range(K - len(black_list)):\n            if black_index in black_list:\n                black_list.remove(black_index)\n            else:\n                black_list.add(black_index)\n    if len(white_list) < K:\n        for white_index in range(K - len(white_list)):\n            if white_index in white_list:\n                white_list.remove(white_index)\n            else:\n                white_list.add(white_index)\n    return \", \".join(map(str, sorted(black_list)))"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(sorted([int(n) for n in stdin.split()]))\n    return ''\n\nsolution('3 7')\nsolution('10 4')\nsolution('2 3')\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = stdin.split()\n    k, x = int(k), int(x)\n    arr = list(range(10000000 + 1))\n    #print(arr)\n    arr = arr[k:] + arr[:k]\n    #print(arr)\n    arr = sorted(arr)\n    print(arr)\n    for i in range(k):\n        if arr[i] == x:\n            return str(i) +'' + str(i+1) +'' + str(i+2)\n\nsolution(input())\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        stdin: str\n\n    Output:\n        str\n    \"\"\"\n    K, X = int(stdin.split(' ')[0]), int(stdin.split(' ')[1])\n\n    coordinates = []\n\n    i = 1\n    while i <= X:\n        if (i * 1001) % K == 0:\n            coordinates.append(i)\n            i += 1\n        else:\n            i += 1\n\n    print(*coordinates, sep=' ')\n    return ''\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    print(str(x) +'' + str(x+1) +'' + str(x+2) +'' + str(x+3) +'' + str(x+4))\n    return ''\n\nsolution(input())\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    in_data = stdin.split(\" \")\n    k, x = in_data[0], in_data[1]\n\n    # make dictionary for stone's coordinates\n    d = {}\n    for i in range(int(k)):\n        d[i] = []\n\n    # put all stones in dictionary\n    for i in range(1, int(k) + 1):\n        n = int(x) - i\n        d[i] = d.get(n, []) + [i]\n        d[i].sort()\n\n    # check the coordinates\n    ans = []\n    for i in range(1, int(k) + 1):\n        if len(d[i])!= 0:\n            ans.append(d[i][0])\n    return \" \".join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return 'Yes' if int(stdin) >= 30 else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    if 30 <= X <= 40:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (t1, t2) = stdin.split()\n    t1 = int(t1)\n    t2 = int(t2)\n    if t1 > 30 or t2 > 30:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    x = int(stdin)\n    if x < 30:\n        print('No')\n    else:\n        print('Yes')"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 40 or x >= 30:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if (X >= 30):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('25')\n    'Yes'\n    >>> solution('32')\n    'No'\n    >>> solution('-20')\n    'No'\n    >>> solution('-40')\n    'No'\n    >>> solution('0')\n    'No'\n    >>> solution('40')\n    'Yes'\n    >>> solution('-41')\n    'No'\n    \"\"\"\n    if stdin == '0':\n        return 'No'\n    else:\n        if stdin >= 30:\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    x = int(stdin)\n    if x > 30:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    x = int(stdin)\n    return \"Yes\" if 30 >= x else \"No\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    n_points = 0\n    for i in range(N):\n        points = list(map(int, stdin.split()))\n        points_x = points[0:D]\n        for j in range(i + 1, N):\n            points = list(map(int, stdin.split()))\n            points_y = points[0:D]\n            for k in range(j + 1, N):\n                dist = 0\n                for d in range(D):\n                    dist += abs(points_x[d] - points_y[d])\n                if dist % 1 == 0:\n                    n_points += 1\n    return str(n_points)\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dist(x1, x2, y1, y2):\n        return round(((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5)\n\n    n, d = map(int, stdin.split())\n    points = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()))\n    pairs = set()\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            d = dist(points[i][0], points[i][1], points[j][0], points[j][1])\n            if d % 1 == 0:\n                pairs.add((i, j))\n\n    print(len(pairs))\n\n    return\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i]-arr[j]) == abs(int(((arr[i]-arr[j])**2)**(1/2))):\n                res += 1\n    print(res)\n    return 'ok' if res else 'nok'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    points = list(map(int, stdin.split()))\n    l = 0\n    r = 2**D - 1\n    while l <= r:\n        mid = (l + r) // 2\n        total = 0\n        for i in range(1, N):\n            total += (mid - points[i]) * (mid - points[i])\n        if total < 0:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return str(l)"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.strip().split())\n    distances = {}\n    for _ in range(n):\n        x = tuple(map(int, input().strip().split()))\n        distances[x] = int(distances.get(x, 2147483647) / 2)\n    res = 0\n    for _ in range(n):\n        for _ in range(n):\n            x = tuple(map(int, input().strip().split()))\n            y = tuple(map(int, input().strip().split()))\n            if x!= y:\n                if distances[x] + distances[y] - 2 == int(distances[x] * distances[y]):\n                    res += 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    X = []\n    for i in range(n):\n        x = list(map(int, stdin.split()))\n        X.append(x)\n    distances = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = abs(X[i][0] - X[j][0]) + abs(X[i][1] - X[j][1]) + abs(X[i][2] - X[j][2])\n            distances.add((i, j, distance))\n            distance = abs(X[i][0] - X[j][1]) + abs(X[i][1] - X[j][0]) + abs(X[i][2] - X[j][2])\n            distances.add((i, j, distance))\n            distance = abs(X[i][0] - X[j][2]) + abs(X[i][1] - X[j][1]) + abs(X[i][2] - X[j][0])\n            distances.add((i, j, distance))\n    distances = sorted(distances, key=lambda x: x[2])\n    total = 0\n    for i in range(len(distances)):\n        if distances[i][2] % 1 == 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x = [int(x) for x in stdin.split()]\n    \n    count = 0\n    \n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            x_i = x[i]\n            x_j = x[j]\n            dist = 0\n            for d_idx in range(0, d):\n                dist += (abs(x_i - x_j)**d_idx)\n            dist = int(dist**(1/d))\n            \n            if dist == 1:\n                count += 1\n    \n    print(count)\n    \n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = {}\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        X[i] = (x, y)\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            x_i, y_i = X[i]\n            x_j, y_j = X[j]\n            distance = int(((x_i - x_j) ** 2 + (y_i - y_j) ** 2) ** 0.5)\n            if distance % 1 == 0:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    distance = {}\n    for i in range(N):\n        X = list(map(int, stdin.split()))\n        for j in range(i + 1, N):\n            distance[(i, j)] = int(\n                math.sqrt((X[0] - X[1]) ** 2 + (X[2] - X[3]) ** 2 +... + (X[D - 1] - X[D - 2]) ** 2)\n            )\n    res = sum(1 for i, j in distance.keys() if distance[(i, j)] == int(distance[(i, j)]))\n    return str(res)\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Generate input from stdin\n    N, D = map(int, stdin.strip().split())\n    X = {}\n    for i in range(1, N + 1):\n        X[str(i) + \" \" + str(i)] = list(map(int, stdin.strip().split()))\n\n    # Find the distance between all pairs\n    dist = {}\n    for k, v in X.items():\n        dist[k] = []\n        for i in range(1, len(v)):\n            for j in range(i + 1, len(v)):\n                dist[k].append(int(math.sqrt((v[i] - v[j]) ** 2)))\n\n    # Print the pairs\n    result = 0\n    for k, v in dist.items():\n        if not any(x > int(math.sqrt(len(v))) for x in v):\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if not len(stdin) == 4:\n        return 'Bad'\n    if any(c.isalpha() for c in stdin):\n        return 'Bad'\n    if any(c.isnumeric() for c in stdin):\n        return 'Bad'\n    if stdin[0] == stdin[2] and stdin[1] == stdin[3]:\n        return 'Bad'\n    if stdin[1] == stdin[3] and stdin[0] == stdin[2]:\n        return 'Bad'\n    if stdin[0] == stdin[1] or stdin[0] == stdin[2] or stdin[0] == stdin[3] or stdin[1] == stdin[2] or stdin[1] == stdin[3] or stdin[2] == stdin[3]:\n        return 'Bad'\n    return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    checker = 0\n    while checker < 3:\n        if s[checker] == s[checker+1] and s[checker] == s[checker+2]:\n            checker += 2\n            s = s[checker:]\n        else:\n            return \"Good\"\n    return \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Insert your code here\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check_digits(n: int) -> bool:\n        for i in range(0, 10):\n            if str(i) * 2 in str(n):\n                return True\n        return False\n\n    if not stdin:\n        return 'Bad'\n    if len(stdin)!= 4:\n        return 'Bad'\n    if stdin.isdigit():\n        return 'Good'\n    if check_digits(stdin):\n        return 'Bad'\n    return 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin[:2] == stdin[2:4]:\n        return 'Bad'\n    elif stdin[:3] == stdin[3:]:\n        return 'Bad'\n    else:\n        return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Convert stdin to integer.\n    # S = int(stdin)\n    # print(S)\n    n = int(stdin)\n    if n >= 100 and n <= 999:\n        if n < 100:\n            print(\"Bad\")\n        elif n >= 100 and n <= 999:\n            if n % 10 == 0:\n                print(\"Good\")\n            elif n % 10 == 1:\n                print(\"Good\")\n            elif n % 10 == 2:\n                print(\"Good\")\n            elif n % 10 == 3:\n                print(\"Good\")\n            elif n % 10 == 4:\n                print(\"Good\")\n            elif n % 10 == 5:\n                print(\"Good\")\n            elif n % 10 == 6:\n                print(\"Good\")\n            elif n % 10 == 7:\n                print(\"Good\")\n            elif n % 10 == 8:\n                print(\"Good\")\n            elif n % 10 == 9:\n                print(\"Good\")\n            else:\n                print(\"Bad\")\n        else:\n            print(\"Bad\")\n    else:\n        print(\"Bad\")\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(f'{stdin}')"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    # Check for two adjacent digits that are the same\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return 'Bad'\n        \n    # Check for three adjacent digits that are the same\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3]:\n            return 'Bad'\n    \n    # Check for four adjacent digits that are the same\n    for i in range(len(s)-4):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3] and s[i] == s[i+4]:\n            return 'Bad'\n    \n    # Check for five adjacent digits that are the same\n    for i in range(len(s)-5):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3] and s[i] == s[i+4] and s[i] == s[i+5]:\n            return 'Bad'\n    \n    # Check for six adjacent digits that are the same\n    for i in range(len(s)-6):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3] and s[i] == s[i+4] and s[i] == s[i+5] and s[i] == s[i+6]:\n            return 'Bad'\n    \n    # Check for seven adjacent digits that are the same\n    for i in range(len(s)-7):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3] and s[i] == s[i+4] and s[i] == s[i+5] and s[i] == s[i+6] and s[i] == s[i+7]:\n            return 'Bad'\n    \n    # Check for eight adjacent digits that are the same\n    for i in range(len(s)-8):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3] and s[i] == s[i+4] and s[i] == s[i+5] and s[i] == s[i+6] and s[i] == s[i+7] and s[i] == s[i+8]:\n            return 'Bad'\n    \n    # Check for nine adjacent digits that are the same\n    for i in range(len(s)-9):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3] and s[i] == s[i+4] and s[i] == s[i+5] and s[i] == s[i+6] and s[i] == s[i+7] and s[i] == s[i+8] and s[i] == s[i+9]:\n            return 'Bad'\n    \n    return 'Good'\n\ns = input()\nprint(solution(s))\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.replace(' ', '')\n    if stdin.find(str(int(stdin[0]) * int(stdin[1]))) < 1:\n        return 'Good'\n    else:\n        return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= 4:\n        return \"Bad\"\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    res = max(nums)\n    for i in range(N-1):\n        nums.append(res)\n    print(res)\n    return str(res)"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin)\n    values = list(map(int, stdin.split()))\n    values.sort()\n    print(values)\n    return str(values[N-1])"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = list(map(int, stdin.split()))\n    if N == 1:\n        return str(values[0])\n    dp = [[None] * N for _ in range(N)]\n    dp[0][0] = float(values[0])\n    for i in range(1, N):\n        dp[0][i] = float(values[i])\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = float(values[i] + values[j]) / 2\n    print(dp[N - 1][N - 1])\n    return str(dp[N - 1][N - 1])\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_values = list(map(int, stdin.strip().split()))\n    n = stdin_values.pop(0)\n    values = stdin_values\n\n    if n < 2:\n        raise ValueError('N must be at least 2')\n\n    result = [values.pop(0)]\n    for i in range(n - 1):\n        values = list(map(lambda x: x * 2, result))\n        result = values + values\n    return str(max(result))\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    values = list(map(int, stdin.split()))\n    values.sort(reverse=True)\n    total_value = 0\n    for i in range(N - 1):\n        total_value += (values[i] + values[i + 1]) / 2\n    return str(total_value)"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_value = 0\n    values = []\n    while len(values) < n:\n        v = float(stdin)\n        values.append(v)\n        max_value = max(max_value, (values[-1] + v) / 2)\n    return max_value\n\nsolution(input())\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *vals = list(map(int, stdin.split()))\n    vals = sorted(vals, reverse=True)\n\n    sums = []\n    for n in range(1, N+1):\n        s = 0\n        for i in range(n):\n            s += vals[i]\n        sums.append(s)\n\n    return str(max(sums))"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(\"%.2f\" % ((2 ** N - 1) / 2))\n    return \"\""
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    assert 2 <= N <= 50\n    assert min(values) >= 1\n    assert all(max(values) <= 1000)\n    values = sorted(values, reverse=True)\n    total = 0\n    for value in values:\n        total += value\n    return str(total / 2)\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1\\n3 4')\n    '3.5'\n    >>> solution('2\\n1 2')\n    '1.0'\n    >>> solution('1\\n3 4')\n    '3.5'\n    >>> solution('3\\n3 4 4')\n    '4.0'\n    \"\"\"\n    stdin = stdin.rstrip()\n    N = int(stdin)\n    values = stdin.split('\\n')[1:]\n    total = 0\n    for i in range(N):\n        total += (float(values[i]) / 2)\n    return str(total)\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_disks, satisfaction = map(int, stdin.split())\n    satisfaction_points = [0] * num_disks\n    for i in range(1, satisfaction + 1):\n        if satisfaction_points[i - 1] + (2 * i - 1) >= satisfaction:\n            return \"Takahashi gained \" + str(satisfaction - satisfaction_points[i - 1] - 2 * (i - 1)) + \" satisfaction points in total, as follows: \\n\" \\\n                   \" - First, he ate Dish \" + str(i) + \" and gained \" + str(i * 2 - 1) + \" satisfaction points.\\n\" \\\n                   \" - Next, he ate Dish \" + str(i + 1) + \" and gained \" + str(i * 2) + \" satisfaction points.\\n\" \\\n                   \" - Lastly, he ate Dish \" + str(i + 2) + \" and gained \" + str(i * 2 + 1) + \" satisfaction points.\\n\"\n    return \"Takahashi gained \" + str(satisfaction - satisfaction_points[-1]) + \" satisfaction points in total, as follows: \\n\" \\\n           \" - First, he ate Dish \" + str(i) + \" and gained \" + str(i * 2 - 1) + \" satisfaction points.\\n\" \\\n           \" - Next, he ate Dish \" + str(i + 1) + \" and gained \" + str(i * 2) + \" satisfaction points.\\n\" \\\n           \" - Lastly, he ate Dish \" + str(i + 2) + \" and gained \" + str(i * 2 + 1) + \" satisfaction points.\\n\"\n\n\nstdin = \"3 1 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    served_dishes: list = list(map(int, stdin.split()[1:]))\n    satisfaction_points: list = list(range(1, n + 1))\n\n    for i in range(1, n):\n        satisfaction_points[i] = satisfaction_points[i - 1] + served_dishes[i - 1]\n\n    return sum(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1].split()))\n    B = list(map(int, stdin.split()[2].split()))\n    C = list(map(int, stdin.split()[3].split()))\n\n    # Greedy Approach:\n    # Keep track of the index (i) of the Dish that the Taki is currently looking for\n    # and keep track of the sum of the satisfaction points gained so far\n    # at each iteration.\n    # If the dish at (i) is equal to the current dish we are looking for,\n    # then we can immediately save the sum of satisfaction points gained\n    # from that iteration.\n    # If the dish at (i) is not the current dish we are looking for,\n    # we can save the sum of satisfaction points gained so far for dishes\n    # that have already been found, and update the satisfaction points\n    # gained so far.\n    # If the dish at (i) is not the current dish we are looking for,\n    # then we must continue looking for the current dish.\n    # Return the satisfaction points gained so far.\n    i = 0\n    satisfaction_points = 0\n    while i < N:\n        if A[i] == i+1:\n            satisfaction_points += B[i] + C[i]\n            i += 1\n        else:\n            satisfaction_points += (i+1) * B[i] + satisfaction_points\n            i += 1\n\n    return str(satisfaction_points)\n\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 20:\n        dish_a = list(map(int, stdin.split()))\n        dish_a.sort(reverse=True)\n        dish_b = list(map(int, stdin.split()))\n        dish_b.sort()\n        dish_c = list(map(int, stdin.split()))\n        dish_c.sort()\n        dish_a = dish_a[:-1]\n        dish_b = dish_b[:-1]\n        dish_c = dish_c[:-1]\n        dish_c = dish_c[1:]\n        count = 0\n        for i in range(n):\n            if dish_a[i] == dish_b[i] == dish_c[i]:\n                count += dish_a[i] * (3 + 2)\n            elif dish_a[i] == dish_b[i]:\n                count += dish_a[i] * 2\n            elif dish_a[i] == dish_c[i]:\n                count += dish_a[i] * 1\n            elif dish_b[i] == dish_c[i]:\n                count += dish_b[i] * 1\n            else:\n                count += dish_b[i]\n        return count\n    else:\n        return \"wrong\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    B = list(map(int, stdin.split()[1:]))\n    C = list(map(int, stdin.split()[1:]))\n\n    if N == 1:\n        return sum(A)\n    elif N == 2:\n        return sum(A) + sum(B)\n    else:\n        A.sort()\n        B.sort()\n        C.sort()\n        s = sum(A)\n        for i in range(1, N):\n            if A[i] == A[i-1]:\n                s += C[i]\n            else:\n                s += A[i] + B[i]\n\n    return s\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    satisfaction_points = {}\n    for i in range(1, n+1):\n        satisfaction_points[i] = list(map(int, stdin.split()[i].split(\" \")))\n\n    sum = 0\n    for dish in range(1, n+1):\n        sum += satisfaction_points[dish][0] + satisfaction_points[dish][1]\n        sum += satisfaction_points[dish][2] + satisfaction_points[dish][3]\n    return sum\n\nprint(solution(input()))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_dishes = int(stdin.strip())\n    dishes = list(map(int, stdin.split()))\n    total_points = 0\n    for i in range(0, num_dishes - 1):\n        total_points += (dishes[i] + dishes[i + 1])\n    return str(total_points)"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_nums = list(map(int, stdin.split()))\n    B_nums = list(map(int, stdin.split()))\n    C_nums = list(map(int, stdin.split()))\n\n    return sum(a + b + c for a, b, c in zip(A_nums, B_nums, C_nums))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    dishes = list(map(int, stdin.split()[1:]))\n    print(sum([dishes[i] * (dishes[i + 1] - dishes[i]) for i in range(N)]))\n    return\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a_lst = list(map(int, stdin.strip().split()[1].split()))\n    b_lst = list(map(int, stdin.strip().split()[2].split()))\n    c_lst = list(map(int, stdin.strip().split()[3].split()))\n    satisfaction_points = 0\n    for i, j in zip(a_lst, b_lst):\n        satisfaction_points += i + j\n        satisfaction_points += c_lst[i - 1]\n    return str(satisfaction_points)"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split(' ')\n    x = 0\n    cnt = 0\n    for i in range(n):\n        s[i] = s[i].upper()\n        x = x + 1\n        if s[i] == 'A':\n            if s[i + 1] == 'B':\n                cnt = cnt + 1\n            if s[i + 1] == 'C':\n                cnt = cnt + 1\n            if s[i + 1] == 'D':\n                cnt = cnt + 1\n            if s[i + 1] == 'E':\n                cnt = cnt + 1\n            if s[i + 1] == 'F':\n                cnt = cnt + 1\n            if s[i + 1] == 'G':\n                cnt = cnt + 1\n            if s[i + 1] == 'H':\n                cnt = cnt + 1\n            if s[i + 1] == 'I':\n                cnt = cnt + 1\n            if s[i + 1] == 'J':\n                cnt = cnt + 1\n            if s[i + 1] == 'K':\n                cnt = cnt + 1\n            if s[i + 1] == 'L':\n                cnt = cnt + 1\n            if s[i + 1] == 'M':\n                cnt = cnt + 1\n            if s[i + 1] == 'N':\n                cnt = cnt + 1\n            if s[i + 1] == 'O':\n                cnt = cnt + 1\n            if s[i + 1] == 'P':\n                cnt = cnt + 1\n            if s[i + 1] == 'Q':\n                cnt = cnt + 1\n            if s[i + 1] == 'R':\n                cnt = cnt + 1\n            if s[i + 1] == 'S':\n                cnt = cnt + 1\n            if s[i + 1] == 'T':\n                cnt = cnt + 1\n            if s[i + 1] == 'U':\n                cnt = cnt + 1\n            if s[i + 1] == 'V':\n                cnt = cnt + 1\n            if s[i + 1] == 'W':\n                cnt = cnt + 1\n            if s[i + 1] == 'X':\n                cnt = cnt + 1\n            if s[i + 1] == 'Y':\n                cnt = cnt + 1\n            if s[i + 1] == 'Z':\n                cnt = cnt + 1\n    return str(cnt)"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a string S consisting of uppercase English letters. The task is to count the number of occurrences of\n    the string ABC as a contiguous subsequence of S.\n    \"\"\"\n    # Solution\n    # Print number of occurrences of ABC in S as contiguous subsequences.\n    # Number of occurrences of ABC = Number of occurrences of ABC + Number of occurrences of ABC +... + Number of\n    # occurrences of ABC + Number of occurrences of ABC\n    # Total number of occurrences of ABC = length of S - 1\n    # Number of occurrences of ABC = total number of occurrences of ABC - (total number of occurrences of ABC - 1)\n    # Number of occurrences of ABC = length of S - 1 - total number of occurrences of ABC\n    # Number of occurrences of ABC = 0\n    # Number of occurrences of ABC = 1\n    # Number of occurrences of ABC = 2\n    # Number of occurrences of ABC = 3\n    # Number of occurrences of ABC = 4\n    # Number of occurrences of ABC = 5\n    # Number of occurrences of ABC = 6\n    # Number of occurrences of ABC = 7\n    # Number of occurrences of ABC = 8\n    # Number of occurrences of ABC = 9\n    # Number of occurrences of ABC = 10\n    # Number of occurrences of ABC = 11\n    # Number of occurrences of ABC = 12\n    # Number of occurrences of ABC = 13\n    # Number of occurrences of ABC = 14\n    # Number of occurrences of ABC = 15\n    # Number of occurrences of ABC = 16\n    # Number of occurrences of ABC = 17\n    # Number of occurrences of ABC = 18\n    # Number of occurrences of ABC = 19\n    # Number of occurrences of ABC = 20\n    # Number of occurrences of ABC = 21\n    # Number of occurrences of ABC = 22\n    # Number of occurrences of ABC = 23\n    # Number of occurrences of ABC = 24\n    # Number of occurrences of ABC = 25\n    # Number of occurrences of ABC = 26\n    # Number of occurrences of ABC = 27\n    # Number of occurrences of ABC = 28\n    # Number of occurrences of ABC = 29\n    # Number of occurrences of ABC = 30\n    # Number of occurrences of ABC = 31\n    # Number of occurrences of ABC = 32\n    # Number of occurrences of ABC = 33\n    # Number of occurrences of ABC = 34\n    # Number of occurrences of ABC = 35\n    # Number of occurrences of ABC = 36\n    # Number of occurrences of ABC = 37\n    # Number of occurrences of ABC = 38\n    # Number of occurrences of ABC = 39\n    # Number of occurrences of ABC = 40\n    # Number of occurrences of ABC = 41\n    # Number of occurrences of ABC = 42\n    # Number of occurrences of ABC = 43\n    # Number of occurrences of ABC = 44\n    # Number of occurrences of ABC = 45\n    # Number of occurrences of ABC = 46\n    # Number of occurrences of ABC = 47\n    # Number of occurrences of ABC = 48\n    # Number of occurrences of ABC = 49\n    # Number of occurrences of ABC = 50\n    total = len(stdin) - 1\n    count = 0\n    for x in range(len(stdin) - 1):\n        if stdin[x: x + 3] == 'ABC':\n            count += 1\n    return count\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        s = stdin.split()\n        s = list(s[1])\n        n = len(s)\n        # a = ['A', 'B', 'C']\n        # print(a)\n        def find_subseq_pos(string, sub_seq):\n            for i in range(len(string)):\n                if string[i] in sub_seq:\n                    return i\n            return -1\n        count = 0\n        for j in range(len(s)):\n            for k in range(1, len(s)):\n                for l in range(k, len(s)):\n                    sub_seq = s[j:k]\n                    sub_seq_pos = find_subseq_pos(s, sub_seq)\n                    if sub_seq_pos!= -1:\n                        if j == sub_seq_pos:\n                            count += 1\n        print(count)\n        return\n\nsolution('1')"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    ans = 0\n    for i in range(1, int(n) + 1):\n        if s.find(s[:i]) == 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    r = re.compile('[ABC]')\n    return len(re.findall(r, stdin))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(' ')\n    N = int(N)\n    S = list(S)\n    length = len(S)\n    count = 0\n\n    for i in range(length - 2):\n        for j in range(i + 2, length):\n            if S[i:j] == S[i:j][::-1]:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    # length of string\n    length = int(lines[0])\n    # string\n    string = lines[1]\n    # number of times ABC occurs in S\n    occurs = 0\n    if length > 0 and string!= '':\n        for i in range(len(string) - 3):\n            if string[i] == string[i+3] == string[i+6]:\n                occurs += 1\n    return str(occurs)\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer: int = 0\n\n    # Read from stdin and split by space\n    num_cases, test_cases = stdin.split()\n\n    # Convert to integers\n    num_cases = int(num_cases)\n    test_cases = int(test_cases)\n\n    for case in range(test_cases):\n        answer = answer + 1\n\n    return answer\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    n = int(input_values[0])\n    string = input_values[1]\n    # your code here\n    return answer\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    s = list(stdin.split())\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if s[j][0] == s[i][0]:\n                dp[i][j] = dp[i-1][j]\n            elif s[j][0] == \"M\" or s[j][0] == \"A\" or s[j][0] == \"R\":\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n            elif s[j][0] == \"H\" or s[j][0] == \"O\":\n                dp[i][j] = dp[i][j-1]\n            elif s[j][0] == \"B\":\n                dp[i][j] = dp[i][j-1]\n            elif s[j][0] == \"C\":\n                dp[i][j] = dp[i][j-1]\n            elif s[j][0] == \"D\":\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n    return str(dp[n-1][n-1])\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = {s: False for s in stdin.split(\":\")}\n    def solution(letters: str) -> int:\n        return sum(1 for x in a if letters[:len(x)] in a)\n    return solution(stdin)\n\nprint(solution(input()))\n\n\n'''\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *names = stdin.split()\n    n = int(n)\n    results = {}\n    for name in names:\n        if name[0] in results:\n            results[name[0]].append(name)\n        else:\n            results[name[0]] = [name]\n    count = 0\n    for key, val in results.items():\n        if key in ('M', 'A', 'R', 'C', 'H') and len(val) == 3:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n'''"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    N = int(sys.stdin.readline().strip())\n    names = sorted(map(str.strip, sys.stdin.readlines()))\n    return len(names)\nprint(solution(input()))\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = input()\n    cnt = 0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            if 'M' in s[:i] or 'A' in s[:i] or 'R' in s[:i] or 'C' in s[:i] or 'H' in s[:i]:\n                if 'M' in s[i:j] or 'A' in s[i:j] or 'R' in s[i:j] or 'C' in s[i:j] or 'H' in s[i:j]:\n                    continue\n                else:\n                    cnt += 1\n    return cnt\n\n'''\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... MASHIKE\n   ... RUMOI\n   ... OBIRA\n   ... HABORO\n   ... HOROKANAI\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 10\n   ... MASHIKE\n   ... RUMOI\n   ... OBIRA\n   ... HABORO\n   ... HOROKANAI\n   ... HABORO\n   ... MASHIKE\n   ... HABORO\n   ... HABORO\n   ... HABORO\n   ... MASHIKE\n   ... ''')\n    '3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(solution(stdin[:-1])))"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    N = int(sys.stdin.readline())\n    for _ in range(N):\n        s = stdin.readline()\n        if 'M' in s:\n            print(s.count('M'))\n            return\n    print(1)"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    return \"Yes\" if N == M else \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n\n    if N == 1 and M == 1:\n        return 'Yes'\n    elif N == 1 and M > 1:\n        return 'No'\n    elif N > 1 and M == 1:\n        return 'No'\n    elif N > 1 and M > 1:\n        return 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp_cnt = int(stdin.split(\" \")[0])\n    inp_ac = int(stdin.split(\" \")[1])\n\n    if inp_ac >= inp_cnt:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(input())"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, M = map(int, stdin.split())\n    print(yes if N >= M else no)\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n----SOLUTION----\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return \"Yes\" if n == m else \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 'Yes'\n    return 'No'\n\n\nprint(solution(input()))"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return \"Yes\" if n * m > 0 else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum([int(i) for i in stdin.split()]) == 3 else \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'Yes' if stdin == stdin[::-1] else 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    return stdin\n\nsolution(\"sippuu\")\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(stdin[2]) == 1 and stdin.count(stdin[4]) == 1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin.split():\n        s = set(i)\n        if len(s) == 3 and len(s) == 4 and s[2] == s[5]:\n            return 'Yes'\n        else:\n            return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[4] and s[3] == s[5]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return 'No'\n    if stdin[2] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return \"Yes\" if S[2] == S[4] and S[5] == S[6] else \"No\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #return stdin\n    return \"Yes\" if 3 in range(0, len(stdin)) and 4 in range(0, len(stdin)) and 5 in range(0, len(stdin)) and 6 in range(0, len(stdin)) and stdin[3] == stdin[4] and stdin[5] == stdin[6] else \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    my_str = stdin\n    return \"Yes\" if (my_str[2] == my_str[5]) and (my_str[3] == my_str[6]) else \"No\"\n    #return True if (my_str[2] == my_str[5]) and (my_str[3] == my_str[6]) else False"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    routes = [tuple(map(int, stdin.split())) for _ in range(N)]\n    routes = sorted(routes, key=lambda tup: tup[0])\n    for _, cost, time in routes:\n        if time <= T:\n            return str(cost)\n    return \"TLE\"\n\nprint(solution(input()))"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    _, *costs = map(int, stdin.split())\n    return find_minimum_cost_of_routes(N, T, costs)\n\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # remove leading whitespace\n    stdin = stdin.strip()\n\n    # parse stdin\n    N, T = (int(x) for x in stdin.split(\" \"))\n\n    # store costs and times\n    times = sorted((int(x), int(y)) for x, y in (x.split(\":\") for x in stdin.split(\"\\n\")))\n\n    # determine min cost\n    if not times:\n        return \"TLE\"\n    min_cost = times[0][0]\n    for t, c in times:\n        if t <= T:\n            min_cost = min(min_cost, c)\n\n    # print result\n    if min_cost == T:\n        return \"TLE\"\n    return str(min_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    arr = sorted([list(map(int, stdin.split())) for _ in range(N)])\n    ans = float(\"inf\")\n    for t, c in arr:\n        if t > T:\n            break\n        ans = min(ans, t + min(c - t for _, c in arr[:N - 1] if c >= t))\n    return str(ans) if ans < float(\"inf\") else \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n\n    for i in range(n):\n        s, t = map(int, stdin.split())\n        graph[i].append(s)\n        graph[i].append(t)\n    for i in range(n):\n        graph[i].sort()\n\n    def dfs(time, cost, parent):\n        if time >= t:\n            return cost\n        for i in range(2):\n            if graph[parent][i] <= time and not used[i]:\n                used[i] = True\n                r = graph[i]\n                if dfs(time + r[0], cost + r[1], i):\n                    return True\n                used[i] = False\n        return False\n\n    used = [False] * 2\n    return \"TLE\" if dfs(0, 0, 0) else str(dfs(0, 0, 0))"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    routes = sorted([(int(x), int(y)) for x, y in zip(stdin.split(), stdin.split())], key=lambda x: (x[1], x[0]))\n    min_cost = float('inf')\n    for cost, t in routes:\n        if t > T:\n            break\n        else:\n            min_cost = min(min_cost, cost)\n    if min_cost == float('inf'):\n        return str(T) + \" \" + str(cost)\n    return str(min_cost) + \" \" + str(cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split()))\n\n    route_cost = []\n    for _ in range(N):\n        route_cost.append(list(map(int, stdin.split())))\n\n    min_cost = float(\"inf\")\n    for i in range(1, N):\n        if T - route_cost[i][1] < 0:\n            continue\n        min_cost = min(min_cost, (route_cost[i][0] + route_cost[i - 1][0]) * (T - route_cost[i][1]))\n\n    return str(min_cost) if min_cost!= float(\"inf\") else \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N*T)\n    Space complexity: O(N)\n    \"\"\"\n    data = stdin.split()\n    N = int(data[0])\n    T = int(data[1])\n    c = list(map(int, data[2:]))\n    n = len(c)\n    if N == 1 and T == 1:\n        print(0)\n        return 0\n    if N == 1 and T == 0:\n        print(\"TLE\")\n        return \"TLE\"\n    route_list = []\n    for i in range(n):\n        route_list.append((c[i], T - c[i]))\n    route_list.sort()\n    min_cost = route_list[0][0]\n    for i in range(1, n):\n        if route_list[i][0] < min_cost:\n            min_cost = route_list[i][0]\n    if min_cost == route_list[0][0]:\n        print(\"TLE\")\n        return \"TLE\"\n    for i in range(1, n):\n        if min_cost <= route_list[i][1]:\n            min_cost = route_list[i][1]\n    print(min_cost)\n    return min_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    input = stdin.split(\"\\n\")\n    N, T = map(int, input[0].split())\n    costs = list(map(int, input[1].split()))\n    costs.sort()\n\n    min_cost = costs[-1]\n\n    for i in range(N):\n        if costs[i] + T > min_cost:\n            break\n        min_cost = costs[i]\n\n    return str(min_cost) if min_cost <= T else \"TLE\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n\n    if n <= 2:\n        if a >= b:\n            return str(a)\n        else:\n            return str(b)\n\n    if a >= b:\n        return str(n * b)\n    else:\n        return str(n * a)"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    A, B = int(A), int(B)\n    return str(min(N * A, N * B))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return str(min(int(stdin[0])*int(stdin[1]), int(stdin[2])*int(stdin[3])))\n\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    return min(a * 2, b)"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n\n    return str(min(a * n, b * n))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(N * A, N * B))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n\n    if (n + a + b) % 2 == 0:\n        t = (n + a + b) / 2\n        return int(t)\n    else:\n        a = (n + a + b) // 2\n        t = a + b\n        return int(t)"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\" + str(min_total_travel_expense(stdin))\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    A_vs_B = A + B\n\n    return str(min(N * A, N * B, N * A_vs_B))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _N, _A, _B = map(int, stdin.split())\n    return str(min([_N * _A, _N * _B, _A * _B]))\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.\n    \"\"\"\n    # write your code in Python 3.6\n    s_arr = stdin.strip().split('\\n')\n    s_len = int(s_arr[0])\n    s_set = set()\n    for i in range(s_len):\n        s_set.add(s_arr[i+1])\n\n    s_dict = dict()\n    for s_char in s_set:\n        s_dict[s_char] = 0\n\n    for i in range(s_len):\n        s_dict[s_arr[i+1]] += 1\n\n    ans = 0\n    for i in range(1, s_len+1):\n        for j in range(i, s_len+1):\n            if s_dict[s_arr[i-1]] == s_dict[s_arr[j-1]]:\n                ans += 1\n    return str(ans)\n\nsolution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\")"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer: int = 0\n    inputs = stdin.split('\\n')\n\n    for i in range(len(inputs)):\n        inputs[i] = inputs[i].split()\n        inputs[i][0] = int(inputs[i][0])\n        inputs[i] = inputs[i][1]\n\n    inputs.sort()\n    for i in range(len(inputs)):\n        for j in range(i + 1, len(inputs)):\n            if input[i] == input[j]:\n                continue\n            else:\n                answer += 1\n    return answer"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # return 0\n    # a = len(stdin)\n    # s = stdin.split(',')\n    # # for i in range(a):\n    # #     s[i] = list(s[i])\n    # #     s[i].sort()\n    # s = list(map(list, zip(*s)))\n    # a = []\n    # b = []\n    # for i in s:\n    #     if len(set(i)) == 1:\n    #         a.append(i)\n    # for i in range(a):\n    #     for j in range(i + 1, len(a)):\n    #         if i == j:\n    #             continue\n    #         if set(a[i]) == set(a[j]):\n    #             if a[i] == a[j]:\n    #                 b.append(a[i])\n    #             else:\n    #                 b.append(a[j])\n    # return len(b)\n\n    return '0'\n\nsolution(input())\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    input_size = int(stdin.pop(0))\n    inputs = stdin\n    solution_arr = []\n\n    for i in range(input_size):\n        solution_arr.append(inputs[i])\n\n    input_arr = []\n\n    for i in range(input_size):\n        input_arr.append(inputs[i].lower())\n\n    input_arr = list(set(input_arr))\n\n    for i in range(len(input_arr)):\n        for j in range(i+1, len(input_arr)):\n            is_anagram = True\n            for k in range(len(input_arr[i])):\n                if input_arr[i][k]!= input_arr[j][k]:\n                    is_anagram = False\n                    break\n\n            if is_anagram == True:\n                solution_arr.append(input_arr[i]+input_arr[j])\n\n    solution_arr = list(set(solution_arr))\n    return len(solution_arr)\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer: str = \"\"\n    N: int = int(stdin.split()[0])\n    s_1: str = stdin.split()[1]\n    s_2: str = stdin.split()[2]\n    s_3: str = stdin.split()[3]\n\n    arr1 = sorted(s_1)\n    arr2 = sorted(s_2)\n    arr3 = sorted(s_3)\n\n    if arr1 == arr2 and arr1 == arr3:\n        answer = \"1\"\n\n    elif arr1 == arr2:\n        answer = str(len(arr1))\n\n    elif arr1 == arr3:\n        answer = str(len(arr1))\n\n    else:\n        count = 0\n        for i in range(N):\n            for j in range(N):\n                if arr1[i] == arr3[j] and arr1[i] == arr2[j]:\n                    count += 1\n        answer = str(count)\n\n    return answer\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_set = set()\n    for i in range(N):\n        s_set.add(stdin[i])\n    pairs = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sorted(stdin[i]) == sorted(stdin[j]):\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    s1 = stdin.split()\n    s1 = sorted(s1)\n    counter = 0\n    for i in range(len(s1) - 1):\n        for j in range(i + 1, len(s1)):\n            if sorted(s1[i]) == sorted(s1[j]):\n                counter += 1\n    print(counter)"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Your code goes here\n    stdin = stdin.split()\n    count = 0\n    for i in range(len(stdin)-1):\n        for j in range(i+1, len(stdin)):\n            if isAnagram(stdin[i], stdin[j]):\n                count = count + 1\n    return count\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = stdin[1:]\n    stdin = list(map(lambda x: x.replace('-', ''), stdin))\n    stdin = list(map(lambda x: x.replace('.', ''), stdin))\n    stdin = list(map(lambda x: x.replace(',', ''), stdin))\n    stdin = list(map(lambda x: x.replace('\"', ''), stdin))\n    stdin = list(map(lambda x: x.replace('\\'', ''), stdin))\n\n    stdin = list(map(lambda x: x.replace(' ', ''), stdin))\n    stdin = list(map(lambda x: x.replace(';', ''), stdin))\n\n    n = int(stdin[0])\n    dic = {}\n    for i in range(n):\n        dic[stdin[i+1]] = stdin[i+2]\n\n    count = 0\n    for i in range(len(dic.keys())):\n        for j in range(i+1, len(dic.keys())):\n            if sorted(dic[i].lower()) == sorted(dic[j].lower()):\n                count += 1\n\n    return count\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    q = int(stdin[0])\n    for i in range(q):\n        k = int(stdin[i + 1])\n        if k == 0:\n            return '8'\n        elif k == 1:\n            return '2'\n        else:\n            print(k)\n\n    return '0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    result = \"\"\n    for i in range(q):\n        k = int(stdin)\n        result += str(digit(k))\n    return result\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return''.join(map(str, [x for x in range(1, max(stdin) + 1)]))\n    \n    \n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin.split()[1])\n        print(get_value_at_k(k))\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin.strip())\n        print(int(str(n)[k % len(str(n))]))"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        k = int(input())\n        for i in range(1, 10):\n            s = ''.join([str(x) for x in range(1, i + 1)])\n            if k <= len(s):\n                print(s[k - 1])\n                break\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    ans = \"1\"\n    for k in range(1, n):\n        # ans = str(max(int(ans), int(k)))\n        ans = str(max(int(ans) + int(k), int(k)))\n    return ans"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    if n == 0:\n        print(\"0\")\n        return \"0\"\n    if n == 1:\n        print(\"1\")\n        return \"1\"\n    if n == 2:\n        print(\"2\")\n        return \"2\"\n    if n == 3:\n        print(\"5\")\n        return \"5\"\n    if n == 4:\n        print(\"8\")\n        return \"8\"\n    if n == 5:\n        print(\"9\")\n        return \"9\"\n    if n == 6:\n        print(\"10\")\n        return \"10\"\n    if n == 7:\n        print(\"11\")\n        return \"11\"\n    if n == 8:\n        print(\"12\")\n        return \"12\"\n    if n == 9:\n        print(\"13\")\n        return \"13\"\n    if n == 10:\n        print(\"14\")\n        return \"14\"\n    if n == 11:\n        print(\"15\")\n        return \"15\"\n    if n == 12:\n        print(\"16\")\n        return \"16\"\n    if n == 13:\n        print(\"17\")\n        return \"17\"\n    if n == 14:\n        print(\"18\")\n        return \"18\"\n    if n == 15:\n        print(\"19\")\n        return \"19\"\n    if n == 16:\n        print(\"20\")\n        return \"20\"\n    if n == 17:\n        print(\"21\")\n        return \"21\"\n    if n == 18:\n        print(\"22\")\n        return \"22\"\n    if n == 19:\n        print(\"23\")\n        return \"23\"\n    if n == 20:\n        print(\"24\")\n        return \"24\"\n    if n == 21:\n        print(\"25\")\n        return \"25\"\n    if n == 22:\n        print(\"26\")\n        return \"26\"\n    if n == 23:\n        print(\"27\")\n        return \"27\"\n    if n == 24:\n        print(\"28\")\n        return \"28\"\n    if n == 25:\n        print(\"29\")\n        return \"29\"\n    if n == 26:\n        print(\"30\")\n        return \"30\"\n    if n == 27:\n        print(\"31\")\n        return \"31\"\n    if n == 28:\n        print(\"32\")\n        return \"32\"\n    if n == 29:\n        print(\"33\")\n        return \"33\"\n    if n == 30:\n        print(\"34\")\n        return \"34\"\n    if n == 31:\n        print(\"35\")\n        return \"35\"\n    if n == 32:\n        print(\"36\")\n        return \"36\"\n    if n == 33:\n        print(\"37\")\n        return \"37\"\n    if n == 34:\n        print(\"38\")\n        return \"38\"\n    if n == 35:\n        print(\"39\")\n        return \"39\"\n    if n == 36:\n        print(\"40\")\n        return \"40\"\n    if n == 37:\n        print(\"41\")\n        return \"41\"\n    if n == 38:\n        print(\"42\")\n        return \"42\"\n    if n == 39:\n        print(\"43\")\n        return \"43\"\n    if n == 40:\n        print(\"44\")\n        return \"44\"\n    if n == 41:\n        print(\"45\")\n        return \"45\"\n    if n == 42:\n        print(\"46\")\n        return \"46\"\n    if n == 43:\n        print(\"47\")\n        return \"47\"\n    if n == 44:\n        print(\"48\")\n        return \"48\"\n    if n == 45:\n        print(\"49\")\n        return \"49\"\n    if n == 46:\n        print(\"50\")\n        return \"50\"\n    if n == 47:\n        print(\"51\")\n        return \"51\"\n    if n == 48:\n        print(\"52\")\n        return \"52\"\n    if n == 49:\n        print(\"53\")\n        return \"53\"\n    if n == 50:\n        print(\"54\")\n        return \"54\"\n    if n == 51:\n        print(\"55\")\n        return \"55\"\n    if n == 52:\n        print(\"56\")\n        return \"56\"\n    if n == 53:\n        print(\"57\")\n        return \"57\"\n    if n == 54:\n        print(\"58\")\n        return \"58\"\n    if n == 55:\n        print(\"59\")\n        return \"59\"\n    if n == 56:\n        print(\"60\")\n        return \"60\"\n    if n == 57:\n        print(\"61\")\n        return \"61\"\n    if n == 58:\n        print(\"62\")\n        return \"62\"\n    if n == 59:\n        print(\"63\")\n        return \"63\"\n    if n == 60:\n        print(\"64\")\n        return \"64\"\n    if n == 61:\n        print(\"65\")\n        return \"65\"\n    if n == 62:\n        print(\"66\")\n        return \"66\"\n    if n == 63:\n        print(\"67\")\n        return \"67\"\n    if n == 64:\n        print(\"68\")\n        return \"68\"\n    if n == 65:\n        print(\"69\")\n        return \"69\"\n    if n == 66:\n        print(\"70\")\n        return \"70\"\n    if n == 67:\n        print(\"71\")\n        return \"71\"\n    if n == 68:\n        print(\"72\")\n        return \"72\"\n    if n == 69:\n        print(\"73\")\n        return \"73\"\n    if n == 70:\n        print(\"74\")\n        return \"74\"\n    if n == 71:\n        print(\"75\")\n        return \"75\"\n    if n == 72:\n        print(\"76\")\n        return \"76\"\n    if n == 73:\n        print(\"77\")\n        return \"77\"\n    if n == 74:\n        print(\"78\")\n        return \"78\"\n    if n == 75:\n        print(\"79\")\n        return \"79\"\n    if n == 76:\n        print(\"80\")\n        return \"80\"\n    if n == 77:\n        print(\"81\")\n        return \"81\"\n    if n == 78:\n        print(\"82\")\n        return"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    edges = {}\n    for i in range(N-1):\n        x, y = map(int, stdin.split())\n        edges[x] = y\n        edges[y] = x\n    cnt = 0\n    ans = []\n    for i in range(1, N):\n        cnt += 1\n        if (i in edges and N-i in edges and edges[i]!= N-i and edges[N-i]!= i and cnt <= K):\n            ans.append(cnt)\n            break\n    if len(ans) > 0:\n        return str(len(ans)) + '\\n' +''.join(map(str, ans))\n    else:\n        return str(0) + '\\n' + str(0) + '\\n'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cities = [[] for _ in range(n)]\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.strip().split())\n        cities[x - 1].append(y - 1)\n        cities[y - 1].append(x - 1)\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n\n    companies = list(range(1, n + 1))\n    comp_count = n - 1\n    for comp in companies:\n        companies[comp - 1] = {}\n        companies[comp - 1][\"good_cities\"] = 0\n        companies[comp - 1][\"bad_cities\"] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (comp_count < k) and (len(graph[i]) <= 2) and (len(graph[j]) <= 2):\n                companies[comp_count][\"good_cities\"] += 1\n            else:\n                companies[comp_count][\"bad_cities\"] += 1\n            comp_count += 1\n\n    for comp in companies:\n        if comp[\"bad_cities\"] == 0:\n            print(comp[\"good_cities\"], comp[\"bad_cities\"])\n            return\n\n    companies = sorted(companies, key=lambda x: x[\"bad_cities\"])\n\n    for i in range(k):\n        cur_comp_index = companies[i][\"good_cities\"]\n        cur_comp_good = companies[cur_comp_index][\"good_cities\"]\n        cur_comp_bad = companies[cur_comp_index][\"bad_cities\"]\n        for j in range(cur_comp_index + 1, n):\n            if companies[j][\"bad_cities\"] <= cur_comp_bad:\n                companies[j][\"good_cities\"] = companies[cur_comp_index][\"good_cities\"]\n                companies[j][\"bad_cities\"] = companies[cur_comp_index][\"bad_cities\"]\n                companies[cur_comp_index][\"good_cities\"] = j\n                companies[cur_comp_index][\"bad_cities\"] = companies[j][\"bad_cities\"]\n                companies[j][\"good_cities\"] = cur_comp_index\n                companies[j][\"bad_cities\"] = cur_comp_bad\n        companies[cur_comp_index][\"good_cities\"] = cur_comp_good\n        companies[cur_comp_index][\"bad_cities\"] = cur_comp_bad\n\n    for comp in companies:\n        print(comp[\"good_cities\"], comp[\"bad_cities\"])\n\n\nsolution(stdin.read())"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.append(n)\n    r = n - 1\n    ans = 0\n    for i in range(1, n):\n        if c[i] == c[i - 1]:\n            r -= 1\n        elif c[i] + 1 == c[i - 1]:\n            r -= 1\n        else:\n            ans = max(ans, r)\n            r = n - 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == n:\n        return str(n-1)\n    \n    graph = []\n    for i in range(n):\n        graph.append([])\n        for j in range(n):\n            if i == j:\n                graph[i].append(0)\n            else:\n                graph[i].append(1)\n    \n    for _ in range(n-1):\n        x, y = map(int, stdin.split())\n        graph[x-1][y-1] = 1\n        graph[y-1][x-1] = 1\n    \n    \n    def dfs(graph, n, k, r, comp_id, cnt):\n        if r == n:\n            return cnt\n        for i in range(n):\n            if comp_id[i] == 0:\n                if graph[r][i] == 0:\n                    graph[r][i] = 1\n                    comp_id[i] = comp_id[n]\n                    cnt = dfs(graph, n, k, r+1, comp_id, cnt)\n                    comp_id[i] = 0\n                    graph[r][i] = 0\n        return cnt\n    \n    \n    \n    ans = dfs(graph, n, k, 0, [0]*n, 0)\n    \n    companies = []\n    for i in range(n):\n        if comp_id[i]!= 0:\n            companies.append(comp_id[i])\n            \n    \n    ans = sorted(companies)\n    for i in range(len(ans)):\n        ans[i] = str(ans[i])\n    \n    \n    return \" \".join(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    graph = {i: [] for i in range(1, n + 1)}\n\n    for i in range(1, n):\n        graph[i + 1] = list(map(int, stdin.strip().split()))\n\n    r = n\n    for i in range(1, n):\n        if len(graph[i + 1]) > 1:\n            r = i\n\n    for i in range(1, r + 1):\n        for j in range(1, r + 1):\n            if i!= j and len(graph[i + 1]) + len(graph[j + 1]) < k:\n                r = j\n                break\n\n    for i in range(1, n):\n        graph[i + 1].sort()\n\n    return str(r)\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ways = [[] for _ in range(n)]\n    # build the routes\n    for _ in range(n-1):\n        x, y = map(int, stdin.split())\n        x -= 1\n        y -= 1\n        ways[x].append(y)\n        ways[y].append(x)\n    # find all the routes that are 1 to k, find min\n    # and print a route\n    #print(ways)\n    for i in range(1, k+1):\n        paths = 0\n        for j in range(len(ways)):\n            if i in ways[j]:\n                paths += 1\n        if paths == 0:\n            return 'inf'\n        if i == 1:\n            min_route = i\n        else:\n            min_route = min(min_route, paths)\n    #print(min_route)\n    routes = []\n    for j in range(len(ways)):\n        if min_route == paths:\n            routes.append(j+1)\n    return str(len(routes)) +'' +''.join(map(str, routes))\n\nprint(solution(input()))"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    G = [[] for i in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        G[x - 1].append(y - 1)\n        G[y - 1].append(x - 1)\n\n    r = n - 1\n    while r >= 1 and len(G[r]) > k:\n        cnt = 0\n        for i in range(len(G[r])):\n            if len(G[G[r][i]]) > k:\n                cnt += 1\n        if cnt == 0:\n            break\n        r -= 1\n    if r == 0:\n        return r\n    ans = []\n    while r >= 1:\n        G[r] = list(set(G[r]))\n        ans.append(len(G[r]))\n        r -= 1\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = list(map(int, stdin.split()))\n        edges[a - 1].append(b - 1)\n        edges[b - 1].append(a - 1)\n    \n    groups = []\n    r = k\n    count = 0\n    for i in range(n - 1):\n        if count < k:\n            groups.append([i + 1])\n            count += 1\n        else:\n            break\n        \n    while count < k:\n        best = 1\n        for i in range(r):\n            for j in range(i + 1, r):\n                if len(groups[i]) + len(groups[j]) <= k:\n                    \n                    groups[i] += groups[j]\n                    groups[j] = []\n                    count += 1\n                    break\n                else:\n                    best = min(best, len(groups[i]) + len(groups[j]))\n                    \n        r = best\n    \n    res = 1\n    for i in range(len(groups)):\n        res *= groups[i][0] + 1\n    return str(res - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    xs = list(map(int, stdin.split()))\n    xs.sort()\n    xl = xs[0]\n    xh = xs[-1]\n    if xh - xl == n - 1:\n        return str(xl + (xh - xl))\n    l = 0\n    r = n\n    while l <= r:\n        m = (l + r) // 2\n        if m == xs[m]:\n            break\n        if m - xs[m] > 0:\n            l = m + 1\n        else:\n            r = m - 1\n    xm = xs[m]\n    return str(min(r, xm - xl + 1)) +'' + str(max(l, xm - xh + 1))\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n\n    for x in x:\n        x.sort()\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    x: List[int] = list(map(int, stdin.strip().split(' ')))\n    x = sorted(x)\n\n    return '{} {}'.format(min(x), max(x))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n\n    x_max, x_min = max(x), min(x)\n\n    x_max += 1\n    x_min -= 1\n    x.append(x_min)\n    x.insert(0, x_max)\n\n    houses = set(x)\n\n    if x_max - x_min == 0:\n        return str(len(houses))\n\n    # house_info = defaultdict(int)\n    # house_info_max = defaultdict(int)\n    # house_info_min = defaultdict(int)\n    #\n    # house_info[x_min] = 1\n    # house_info_max[x_max] = 1\n    # house_info_min[x_max - 1] = 1\n    #\n    # for house in x:\n    #     house_info_min[house] = house_info_min[house] + 1\n    #     house_info_max[house] = house_info_max[house] + 1\n    #     house_info[house] = house_info[house] + 1\n    #\n    # max_houses = max(house_info_max.values())\n    # min_houses = max(house_info_min.values())\n    #\n    # return str(min_houses) + \" \" + str(max_houses)\n    print(str(min(houses)) + \" \" + str(max(houses)))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    from collections import defaultdict\n    houses = defaultdict(int)\n\n    # go over the list\n    for i in x:\n        houses[i-1] += 1\n        houses[i] -= 1\n\n    # print(houses)\n    min_houses = min(houses.values())\n    max_houses = max(houses.values())\n\n    return f\"{min_houses} {max_houses}\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    positions = list(map(int, lines.pop(0).split()))\n    while len(lines) > 0:\n        positions = perform_move(positions)\n    print(len(positions))\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_of_friends, num_of_houses = map(int, stdin.split())\n    occupied_houses = set()\n    for _ in range(num_of_friends):\n        x, y = map(int, stdin.split())\n        occupied_houses.add(x)\n        occupied_houses.add(y)\n    return str(min(occupied_houses)) + \" \" + str(max(occupied_houses))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n\n    def calc(x):\n        res = x[0]\n        for i in range(1, n):\n            res = max(res, x[i] + i)\n            res = max(res, i + x[i])\n        return res\n\n    def next(x):\n        res = []\n        for i in range(n):\n            if i + x[i] < x[i]:\n                res.append(x[i] + i)\n                if i + x[i] == x[i] and i + x[i] == x[i]:\n                    res.append(x[i] + i + 1)\n            else:\n                res.append(i + x[i])\n        return res\n\n    res = calc(x)\n    while True:\n        nxt = next(x)\n        res = max(res, calc(nxt))\n        if len(nxt) == n:\n            break\n    return str(res)\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    x.sort()\n    if x[0] == 1:\n        return str(n)\n    elif x[1] == n:\n        return str(n)\n    elif x[0] == 2 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 3 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 4 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 5 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 6 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 7 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 8 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 9 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 10 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 11 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 12 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 13 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 14 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 15 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 16 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 17 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 18 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 19 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 20 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 21 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 22 and x[1] == n + 1:\n        return str(x[0] - 1) +'' + str(n) +'' + str(x[1] - 1) +'' + str(n)\n    elif x[0] == 23 and x[1] == n + 1:\n        return str(x[0] -"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split('\\n')[:n]))\n    return''.join(str(a.index(x) + 1) for x in a)\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = \"1 \" + \" \".join(str(i) for i in a)\n    ans += \"\\n2 \" + \" \".join(str(i) for i in reversed(a))\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sorted_p = sorted(stdin.split())\n    answer = []\n    for i in range(len(sorted_p)):\n        a = int(sorted_p[i])\n        b = int(sorted_p[i-1])\n        c = int(sorted_p[i-2])\n        d = int(sorted_p[i-3])\n        answer.append(a)\n        answer.append(b)\n        answer.append(c)\n        answer.append(d)\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = []\n    for i in range(n):\n        p.append(int(stdin.readline()))\n    a1, a2 = 0, 0\n    res = []\n    for i in range(1, n + 1):\n        if i % 2:\n            a1 = a2\n        else:\n            a1 = p[i - 1]\n        res.append(p[a1])\n    return '\\n'.join([str(i) for i in res])\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    x = {i: -1 for i in range(n)}\n    c = a[n - 1] - 1\n\n    def dfs(node):\n        if node == n - 1:\n            x[c] = -1\n            return\n        dfs(node + 1)\n        x[a[node]] = c\n        dfs(node + 1)\n\n    dfs(0)\n\n    def restore(order):\n        return [x[order[i]] if x[order[i]]!= -1 else order[i] for i in range(n)]\n\n    return \" \".join([str(i) for i in restore(order=order(1, 2, 3, 4, 5))])\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    result: list[int] = []\n    used: set[int] = set()\n    for i in range(1, n + 1):\n        if i not in used:\n            used.add(i)\n            result.append(i)\n            while result:\n                for j in range(len(result)):\n                    if result[j]!= i:\n                        result.append(result[j])\n                        result.append(i)\n                        break\n                else:\n                    break\n            used.remove(i)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    \n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0443\u0434\u0430\u043b\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\n    a = [p[0]]\n    for i in range(1, n):\n        a.append(p[i])\n        if a[i] == a[i - 1]:\n            a.pop(i)\n            break\n    print(*a)\n\n    # \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u043c\n    return \"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n = int(input_data[0])\n    info = {}\n    for i in range(n):\n        info[i+1] = list(map(int, input_data[i+1].split()))\n    info = sorted(info.items(), key=lambda x: x[1], reverse=True)\n    p = []\n    for i in range(n):\n        if i == 0:\n            p = [i+1]\n        else:\n            p.append(info[i][0])\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a = sorted([int(x) for x in stdin.split('\\n')])\n    print(a)\n    q = []\n    for i in range(1, k + 1):\n        if i == 1:\n            q.append(a[0])\n            a.remove(a[0])\n        else:\n            q.append(a[0])\n            a.remove(a[0])\n            q.append(a[0])\n            a.remove(a[0])\n    return '\\n'.join([str(x) for x in q])\n\n\nsolution(\"5\")\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = ''\n    for i in range(n):\n        s += str(i + 1)\n    return s\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    if n <= 3:\n        print(1)\n        return\n    if a[0] > 5:\n        print(1)\n        return\n    if a[0] + a[-1] > 5:\n        print(1)\n        return\n    for i in range(1, n - 1):\n        if a[i] - a[i - 1] > 5:\n            print(1)\n            return\n        if a[i] - a[i + 1] > 5:\n            print(1)\n            return\n    print(2)\n    return\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 1\n    while len(a) >= 2:\n        first_skill = a.pop(0)\n        second_skill = a.pop(0)\n        diff = abs(first_skill - second_skill)\n        if diff > 5:\n            break\n        answer += 1\n    return str(answer)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #finds a solution\n    return n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    return str(sum(range(1, _ + 1)) + _ - max([sum(range(1, _ + 1))] + _ * 5, 0))\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    student_skills = list(map(int, stdin.split()))\n    skills_counts = Counter(student_skills)\n    skills_counts = sorted(skills_counts.items())\n    res = 1\n    for skill in skills_counts:\n        skill_val = skill[0]\n        skill_count = skill[1]\n        if skill_count <= res:\n            res = skill_count\n        elif skill_count + 5 > res:\n            res = skill_count + 5\n    return str(res)\n\n\nsolution('1 1000 10000 10 100 1000000000')\nsolution('6')\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skill = list(map(int, stdin.split()))\n    skill_cnt = Counter(skill)\n    skill_cnt = {key: value for key, value in sorted(skill_cnt.items(), key=lambda x: -x[1])}\n    max_skill = min(skill_cnt.keys())\n    return skill_cnt[max_skill]\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n\n    n = int(stdin.pop(0))\n\n    skills = list(map(int, stdin.pop(0).split()))\n\n    s = 0\n\n    for i in range(n):\n        s += skills[i]\n\n    if s > len(skills):\n        return 'None'\n\n    s -= max(skills)\n\n    if s < -5:\n        return 'None'\n\n    s = (s + 5) // 5\n    s = int(s)\n    return s\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    def cal(start, end, a):\n        if start == end:\n            return a[start]\n        else:\n            return a[start] + max(cal(start + 1, end, a), cal(start + 1, end, a))\n    return cal(0, n, a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *std_skills = map(int, stdin.split())\n    n_pair = 2 * n - 1\n\n    def get_skill_sum(n):\n        if n < n_pair:\n            return sum(n ** 2 - n)\n        else:\n            return sum((n_pair - n) * (n - 1) / 2 + n * (n + 1) // 2)\n\n    skill_sum = sum(sorted(std_skills, reverse=True) * 2)\n    while skill_sum > get_skill_sum(n):\n        n += 1\n        skill_sum = sum(sorted(std_skills, reverse=True) * 2)\n    return n\n\nprint(solution(input()))"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.split()[0])\n    # a = map(int, stdin.split()[1].split(','))\n    n = 6\n    a = (12, 17, 15, 1337, 1337, 1337)\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    d = {}\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    keys = list(d.keys())\n    keys.sort()\n    for i in range(len(keys)):\n        if keys[i] - keys[i - 1] > 5:\n            return 0\n    return max(d.values())\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    return str(1 + (n - 1) // n) if n <= k else str(1 + (n - 1) // n) if n > k and a < b else str(-1)\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{}\\n{}'.format(*[int(x) for x in stdin.split()])\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = stdin\n    print(stdin_data)\n    q = int(stdin_data.splitlines()[0])\n    for i in range(q):\n        k, n, a, b = map(int, stdin_data.splitlines()[i+1].split())\n        if n > k:\n            print(n-k)\n        elif n == k:\n            if a <= b:\n                print(-1)\n            else:\n                print(0)\n        else:\n            print(-1)\n    return"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... ''')\n    '5'\n    >>> solution('''6\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... ''')\n    '4'\n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... ''')\n    '0'\n    \"\"\"\n    inp = stdin.split()\n    q = int(inp[0])\n    for _ in range(q):\n        k, n, a, b = map(int, inp[1:])\n        if a <= k <= b:\n            if n < k:\n                return \"0\"\n            elif (n - k) <= (k - b):\n                return (n - k)\n        else:\n            return -1\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def game(num_turns, power, start):\n        if start >= power:\n            return num_turns\n        for i in range(num_turns):\n            if start >= power:\n                return num_turns\n            else:\n                start = start + 1\n        return num_turns\n    return str(game(int(stdin[0]), int(stdin[1]), int(stdin[2])))"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = (int(x) for x in stdin.split())\n    return str(n // (k + 1) + 1)"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # return max_turns(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]))\n    return answer(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]))\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        k, n, a, b = map(int, stdin.split())\n        if (a <= k <= b) and (n > (a + b) or (k <= a and k <= b)):\n            print(n - (a + b) + 1)\n        else:\n            print(-1)\n    return \"\"\n\nprint(solution(input()))\n\n\nIn the third example the answer is 5 because he can play 4 times and spend 12 units of charge.\n\nIn the fourth example the answer is -1 because he cannot complete the game because even if he can play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nIn the fifth example the answer is 2 because he can play and charge the battery during the first turn and then play and charge the battery after the first turn.\n\n\"\"\"\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = list(map(int, stdin.split()))\n    \n    for _ in range(n):\n        n -= 1\n        if a <= n:\n            if n < a:\n                a = n\n        elif b <= n:\n            if n < b:\n                b = n\n    if a > b:\n        return \"1\"\n    elif b > a:\n        return \"0\"\n    else:\n        return \"2\""
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[1]\n    # print(s)\n    n = len(s)\n    # print(n)\n    # n = 6\n    k = 3\n    # k = 2\n    count = 0\n    for i in range(n - k + 1):\n        for j in range(i + k, i, -1):\n            # print(i, j)\n            if s[i] == '?':\n                for ch in 'abc':\n                    if j < n and s[j]!= ch:\n                        break\n                else:\n                    # print('i=%d j=%d' % (i, j))\n                    # print(s[i:j+1])\n                    count += 1\n\n    return str(count)\nprint(solution(input()))"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip('\\n')\n    ans = 0\n    for i in range(1, 2 ** n):\n        bin = bin(i)[2:]\n        while len(bin) < n:\n            bin = '0' + bin\n        bin = bin[:n]\n        n = len(bin)\n        k = 0\n        while k < n:\n            if bin[k]!= '1':\n                break\n            k += 1\n        if k == n:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.rstrip()\n    l = len(string)\n\n    def part(part, r):\n        p = 0\n        while p < l and r < l:\n            if string[p] == '?':\n                p += 1\n                continue\n            part += 1\n            r += 1\n            if string[p] == 'a' and string[r] == 'b':\n                part += 1\n            elif string[p] == 'b' and string[r] == 'a':\n                part += 1\n            elif string[p] == 'c' and string[r] == 'c':\n                part += 1\n            else:\n                break\n        return part\n    \n    return p\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, t = stdin.split()\n    s = set(c)\n    cnt = 0\n    for i in range(3, len(t) + 1):\n        for j in range(1, len(t) + 1):\n            if t[j - 1] == \"?\":\n                t = t[: j]\n                t = t[: j - 1] + t[j:]\n            if t[: j] == t[: j - 1]:\n                continue\n            elif t[: j] + t[j: j + 1] == t[: j] + t[j: j + 1]:\n                continue\n            else:\n                break\n        if t in s:\n            cnt += 1\n    return str(cnt)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    str_len = len(stdin)\n    \n    if str_len < 3:\n        return 0\n\n    res = 0\n    for i in range(3, str_len):\n        str_chars = stdin[i]\n        if str_chars == '?':\n            j = i - 2\n            while j >= 0 and stdin[j] == '?':\n                j -= 1\n            str_chars = stdin[j]\n            if str_chars == 'a':\n                str_chars = 'b'\n            elif str_chars == 'b':\n                str_chars = 'c'\n            elif str_chars == 'c':\n                str_chars = 'a'\n            else:\n                raise Exception(\"this should not happen\")\n        res += 2**(i-3)\n        res %= (10**9 + 7)\n\n    return str(res)"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    s = stdin[1]\n    l = len(s)\n    res = 0\n    for i in range(1, l + 1):\n        for j in range(0, l - i + 1):\n            if j!= 0:\n                s1 = s[j:j+i]\n                if s1 == s1[::-1]:\n                    res += 1\n    print(res)\n\nsolution(stdin)\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    result = 0\n    for i in range(1, k + 1):\n        result += len(solve(n, i))\n    return str(result % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin\n    res = 0\n    # replace every \"?\" with all letters\n    for k in range(n):\n        if s[k] == \"?\":\n            for a in \"abc\":\n                s = s.replace(\"?\", a, 1)\n                res += 1\n    return res % (10**9 + 7)\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    l = len(s[0])\n    d = {0: 1}\n    for _ in range(1, l + 1):\n        s = {}\n        for i in range(l):\n            if s.get(i) is not None:\n                s[i + 1] = d.get(i) + s.get(i)\n                s[i + 2] = d.get(i + 1) + s.get(i + 1)\n            else:\n                s[i + 1] = d.get(i)\n                s[i + 2] = d.get(i + 1)\n\n        d = s\n    return sum(d.values()) % 1000000007\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n = int(inp[0])\n    s = inp[1]\n\n    # From here we can do the algo for getting all possible strings of length n and count them\n    \n    s_set = set()\n    s_count = 1\n    \n    # Check if the first char is a question mark\n    if s[0] == '?':\n        s = s[1:]\n        \n    # Check if the second char is a question mark\n    if s[-1] == '?':\n        s = s[:-1]\n    \n    # The while loop starts here\n    while len(s) > 0:\n        if s[0] == '?':\n            # Checking the length of the string without the first question mark\n            if len(s) > 1:\n                # Checking the length of the string without the last question mark\n                if s[-1] == '?':\n                    # Checking if the next character is a question mark\n                    if s[1] == '?':\n                        # Checking if there is at least two question marks\n                        if len(s) > 2:\n                            s = s[2:]\n                        else:\n                            s = s[1:]\n                    else:\n                        s = s[1:]\n                else:\n                    s = s[1:]\n            else:\n                s = s[1:]\n        else:\n            s = s[1:]\n        \n        if s not in s_set:\n            s_set.add(s)\n            s_count += 1\n\n    return str(s_count)\n\nsolution(input())"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        x, y, w = list(map(int, stdin.split()))\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    ans = 0\n    for i in range(n):\n        visited = {i}\n        stack = {i}\n        while stack:\n            cur = stack.pop()\n            for adj in graph[cur]:\n                if adj[0] not in visited:\n                    visited.add(adj[0])\n                    stack.add(adj[0])\n        ans = max(ans, len(visited))\n    return str(ans)\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    What is the minimum number of coins you have to pay to make the graph connected?\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    money = 0\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        money += w\n        graph[x - 1].append((y - 1, w))\n        graph[y - 1].append((x - 1, w))\n    for i in range(n):\n        for j in range(i + 1, n):\n            money += a[i] + a[j]\n            if i!= j:\n                money += min(a[i], a[j])\n            if j - i + 1 > len(graph[i]):\n                continue\n            for k in range(len(graph[i])):\n                if graph[i][k][0] == j:\n                    money += graph[i][k][1]\n                elif graph[i][k][0] == i:\n                    money -= graph[i][k][1]\n    return str(money)\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        a, b, w = map(int, stdin.split())\n        graph[a].append((b, w))\n        graph[b].append((a, w))\n    return min_coins(graph, n, n)\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    graph = defaultdict(list)\n\n    for i in range(1, n+1):\n        graph[i] = []\n\n    for i in range(m):\n        x, y, c = map(int, stdin.split())\n\n        graph[x].append((y, c))\n        graph[y].append((x, c))\n\n    q = deque()\n    q.append((1, 0))\n\n    dist = [-1] * (n+1)\n    dist[1] = 0\n    seen = set()\n\n    while q:\n        u, d = q.popleft()\n\n        if dist[u] == -1:\n            seen.add(u)\n\n        for v, c in graph[u]:\n            if v in seen:\n                continue\n\n            if dist[v] == -1:\n                dist[v] = d + c\n                q.append((v, dist[v]))\n\n    return max(dist)"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = 0\n    for x in range(n - 1):\n        for y in range(x + 1, n):\n            res += max(a[x] + a[y], a[y] + a[x])\n    return str(res)\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\"\\n\")\n    n = int(stdin_arr[0])\n    m = int(stdin_arr[1])\n    coins = list(map(int, stdin_arr[2].split()))\n    offers = []\n\n    for i in range(m):\n        offers.append(tuple(map(int, stdin_arr[i+3].split())))\n    # print(offers)\n\n    distinct_coins = set(coins)\n    coins = sorted(coins)\n\n    d = {}\n\n    for i in range(len(coins)):\n        d[coins[i]] = i\n\n    # print(d)\n\n    q = [(0, coins[0], 0)]\n\n    while q:\n        curr_coin = q.pop(0)\n\n        distinct_coins.remove(curr_coin[1])\n\n        if curr_coin[1] == 1:\n            return curr_coin[2]\n\n        for offer in offers:\n            if (offer[0] == curr_coin[1]) or (offer[1] == curr_coin[1]):\n                if offer[0] == curr_coin[1]:\n                    new_coin = curr_coin[1] + offer[2]\n                else:\n                    new_coin = curr_coin[1] - offer[2]\n\n                if new_coin in distinct_coins:\n                    # print(curr_coin, offer, new_coin)\n                    if new_coin not in d:\n                        q.append((offer[1], new_coin, curr_coin[2] + offer[2]))\n                    else:\n                        q.append((offer[1], new_coin, curr_coin[2] + offer[2] + d[new_coin]))\n    return curr_coin[2]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = []\n    offers = {}\n    for _ in range(m):\n        a, b, w = map(int, input().split())\n        moves.append((a, b, w))\n        offers[a] = b, w\n        offers[b] = a, w\n    # this is a graph\n    adj = {}\n    for i in range(1, n + 1):\n        adj[i] = set()\n\n    for a, b, w in moves:\n        adj[a].add(b)\n    queue = deque([(1, 0)])\n    while queue:\n        curr, cost = queue.popleft()\n        if curr == n:\n            return cost\n        for nbr in adj[curr]:\n            if nbr not in adj:\n                continue\n            adj[nbr].remove(curr)\n            if len(adj[nbr]) == 0:\n                queue.append((nbr, cost + 1))\n                adj[nbr] = set()\n            else:\n                queue.append((nbr, cost + 1))\n            if nbr in offers:\n                curr_off = offers[nbr]\n                adj[nbr] = set()\n                if curr_off[0] in adj:\n                    queue.append((curr_off[0], cost + curr_off[1]))\n                if curr_off[1] in adj:\n                    queue.append((curr_off[1], cost + curr_off[1]))\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for i in range(n)]\n    cost = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        a -= 1\n        b -= 1\n        cost[a].append(b)\n        cost[b].append(a)\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * n\n    for i in range(n):\n        if visited[i]:\n            continue\n        queue = []\n        visited[i] = True\n        queue.append(i)\n        while queue:\n            current_node = queue.pop()\n            for node in graph[current_node]:\n                if not visited[node]:\n                    visited[node] = True\n                    queue.append(node)\n    if visited[0]:\n        return''.join(map(str, [a for a in range(1, n + 1) if a not in visited]))\n    else:\n        return '0'\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(\"\\n\")\n    # N = int(stdin[0])\n    # M = int(stdin[1])\n    \n    n = int(stdin[0])\n    m = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    \n    # dictionary to store the number of connected component that contains each node\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    \n    for i in range(m):\n        x = int(stdin[2+i*3])\n        y = int(stdin[2+i*3+1])\n        w = int(stdin[2+i*3+2])\n        \n        graph[x].append(y)\n        graph[y].append(x)\n    \n    # print(graph)\n    \n    \n    # find the components\n    components = []\n    for i in range(n):\n        comp = []\n        if i not in graph:\n            comp.append(i)\n        else:\n            comp.append(i)\n            for j in graph[i]:\n                if j not in graph:\n                    comp.append(j)\n                else:\n                    comp.append(j)\n        components.append(comp)\n    \n    # print(components)\n    \n    # find minimum cost for each component\n    mincost = []\n    for component in components:\n        mincost.append(mincost_component(component))\n    \n    \n    # print(mincost)\n    # find the minimum cost for the graph\n    mincost_graph = 0\n    for i in range(n):\n        for j in range(n):\n            if i not in graph or j not in graph:\n                continue\n            \n            mincost_graph = min(mincost_graph, mincost[graph[i].index(j)] + a[i] + a[j])\n    \n    \n    print(mincost_graph)\n    \n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    inf = float('inf')\n    dp = [[inf] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][i] = 0\n    for i in range(1, n):\n        for j in range(i, n + 1):\n            for k in range(i):\n                dp[i][j] = min(dp[i][j], dp[k][i] + a[i] + a[j])\n    res = float('inf')\n    for i in range(1, n):\n        for j in range(i, n + 1):\n            if dp[i][j]!= inf:\n                res = min(res, dp[i][j])\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments = []\n    umbrellas = []\n    for i in range(n):\n        segments.append((int(stdin.split()[2*i]), int(stdin.split()[2*i+1])))\n        umbrellas.append((int(stdin.split()[2*i+1]), int(stdin.split()[2*i])))\n\n    umbrella_pos = 0\n    umbrella_weight = umbrellas[umbrella_pos][1]\n    umbrella_pos_start = umbrellas[umbrella_pos][0]\n    if a < umbrella_pos_start:\n        return '-1'\n\n    totalfit = 0\n    lastfit = float('-inf')\n    for i in range(umbrella_pos_start, a+1):\n        if i in segments:\n            umbrella_pos += 1\n            umbrella_pos_start = umbrellas[umbrella_pos][0]\n            if umbrella_pos >= len(umbrellas):\n                return '-1'\n            continue\n        newfit = totalfit + umbrella_weight\n        if lastfit <= newfit:\n            lastfit = newfit\n            totalfit = newfit\n        umbrella_pos += 1\n        umbrella_pos_start = umbrellas[umbrella_pos][0]\n        if umbrella_pos >= len(umbrellas):\n            return '-1'\n    return str(totalfit)"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        segments.append((l, r))\n    umbrellas = []\n    for i in range(n):\n        l, r = list(map(int, stdin.split()))\n        umbrellas.append((l, r, r - l))\n\n    def find_segment(segments: List[Tuple[int, int]], umbrellas: List[Tuple[int, int, int]], threshold: int, segment_id: int) -> Optional[Tuple[int, int, int]]:\n        if segment_id == len(segments):\n            return None\n        segment_right = segments[segment_id][1]\n        if segment_right > threshold:\n            return find_segment(segments, umbrellas, threshold, segment_id + 1)\n        segment_left = segments[segment_id][0]\n        if segment_left > threshold:\n            return find_segment(segments, umbrellas, threshold, segment_id + 1)\n        segment_umbrella = umbrellas[segment_id]\n        if segment_umbrella[0] < threshold:\n            return find_segment(segments, umbrellas, threshold, segment_id + 1)\n        return (segment_left, segment_right, segment_umbrella[2])\n    \n    threshold = segments[-1][0]\n    segment = find_segment(segments, umbrellas, threshold, 0)\n    if segment is None:\n        return '-1'\n    umbrella_weights = []\n    for umbrella in umbrellas:\n        if umbrella[0] < threshold and umbrella[1] > threshold:\n            umbrella_weights.append(umbrella[2])\n    \n    min_total_fatigue = umbrella_weights[0]\n    umbrella_cnt = 1\n    for umbrella_weight in umbrella_weights:\n        umbrella_cnt += 1\n        total_fatigue = umbrella_weight + min_total_fatigue\n        min_total_fatigue = total_fatigue if total_fatigue < min_total_fatigue else min_total_fatigue\n    return str(min_total_fatigue)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n\n    umbrellas = [(0, 0)] * m\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n        umbrellas[i] = (l, r)\n    umbrellas.sort(key=lambda x: x[0])\n\n    results = [-1]\n    sum_fatigue = 0\n    for i in range(n):\n        if umbrellas[i][0] > a:\n            break\n\n        x = a\n        for j in range(m):\n            if umbrellas[j][0] > x:\n                break\n            x = umbrellas[j][1]\n            sum_fatigue += umbrellas[j][1]\n        if x == a:\n            results.append(sum_fatigue)\n            break\n    return '\\n'.join(map(str, results))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments_count = 0\n    segments = []\n    umbrellas_weights = []\n\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n        umbrellas_weights.append(a)\n        segments_count += 1\n        if l > a:\n            umbrellas_weights[-1] = 0\n\n    umbrella_weights_sum = sum(umbrellas_weights)\n    answer = umbrella_weights_sum\n    if segments_count == 0:\n        return str(umbrella_weights_sum)\n    if segments_count == 1:\n        umbrella = umbrellas_weights[0]\n        umbrella_start = segments[0][0]\n        umbrella_end = segments[0][1]\n        if umbrella_start > a:\n            umbrella = 0\n        if umbrella_end > a:\n            umbrella = 0\n        return str(umbrella)\n\n    # O(n log n)\n    for index, segment in enumerate(segments):\n        umbrella_start = segments[index][0]\n        umbrella_end = segments[index][1]\n        umbrella = umbrellas_weights[index]\n        umbrella_count = 1\n        for i in range(index+1, len(segments)):\n            umbrella_end = segments[i][1]\n            if umbrella_end > a:\n                umbrella_count += 1\n                umbrella = 0\n                break\n        if umbrella_count > 0:\n            umbrella = umbrella_count * umbrella\n        umbrella_weights_sum += umbrella\n        if umbrella_start > a:\n            umbrella = 0\n\n    return str(umbrella_weights_sum)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    a, n, m = map(int, stdin[0].split())\n    segments = [[int(i) for i in stdin[i].split()] for i in range(1, n + 1)]\n    umbrellas = [int(stdin[i]) for i in range(n + 1, n + m + 1)]\n\n    segment_start = 0\n    current_segment = segments[0]\n    current_umbrella = umbrellas[0]\n    segment_index = 1\n    umbrella_index = 1\n    total_fatigue = 0\n    fatigue = 0\n    total_umbrella_weights = 0\n\n    for i in range(1, a):\n        if segment_start < current_segment[0]:\n            if current_segment[0] < segment_start + 1:\n                fatigue = 0\n            else:\n                fatigue = total_fatigue + 1\n\n        total_fatigue += fatigue\n        current_segment = segments[segment_index]\n\n        if current_segment[0] <= i and current_segment[1] > i:\n            fatigue = 0\n            current_segment = segments[segment_index + 1]\n            segment_index += 1\n\n        if current_segment[0] <= i and current_segment[1] > i and current_segment[0] > segment_start:\n            fatigue = 1\n            current_segment = segments[segment_index]\n            segment_index += 1\n\n        if current_segment[0] > i and current_segment[1] > i:\n            fatigue = 2\n            current_segment = segments[segment_index]\n            segment_index += 1\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] > segment_start:\n            fatigue = 3\n            current_segment = segments[segment_index]\n            segment_index += 1\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] <= segment_start:\n            fatigue = 4\n            current_segment = segments[segment_index]\n            segment_index += 1\n        \n        if current_segment[0] == i and current_segment[1] == i:\n            fatigue = 5\n\n        if current_segment[0] <= i and current_segment[1] == i:\n            fatigue = 6\n\n        if current_segment[0] == i and current_segment[1] > i and current_segment[0] > segment_start:\n            fatigue = 7\n\n        if current_segment[0] > i and current_segment[1] > i:\n            fatigue = 8\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] > segment_start:\n            fatigue = 9\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] > segment_start and current_segment[0] < current_segment[1]:\n            fatigue = 10\n        \n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] == i and current_segment[1] > segment_start:\n            fatigue = 11\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] == i and current_segment[1] < segment_start:\n            fatigue = 12\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] > segment_start and current_segment[1] > segment_start:\n            fatigue = 13\n\n        if current_segment[0] > i and current_segment[1] > i and current_segment[0] > segment_start and current_segment[1] > segment_start and current_segment[1] == segment_start:\n            fatigue = 14\n\n        if current_segment[0] > i and current_segment["
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, a = list(map(int, stdin.split()))\n    segments = []\n    umbrellas = []\n    for _ in range(m):\n        segments.append(list(map(int, stdin.split())))\n    for _ in range(a):\n        umbrellas.append(list(map(int, stdin.split())))\n    for i in range(len(umbrellas)):\n        umbrella = umbrellas[i]\n        umbrella.sort()\n        umbrella.append(umbrella[-1] + 2)\n    def _solve(umbrella, point):\n        '''\n            1. Find segments in the rain\n            2. Find first left point\n            3. Find the point where umbrella can be placed\n            4. Move\n        '''\n        left_point = umbrella[0]\n        right_point = umbrella[-1] + 1\n        while True:\n            mid_point = (right_point + left_point) // 2\n            if right_point - left_point == 1:\n                return 0\n            if is_in_segment(umbrella, mid_point):\n                return _solve(umbrella, mid_point)\n            if point - mid_point > right_point - left_point:\n                left_point = mid_point\n            else:\n                right_point = mid_point\n    segment_cnt = 0\n    umbrella_cnt = 0\n    for i in range(n):\n        segment_cnt += segments[i][1] - segments[i][0]\n        umbrella_cnt += umbrella[i][0] - umbrella[i][1] + 1\n        print(segments[i], umbrella[i])\n    if segment_cnt == 0:\n        if umbrella_cnt == 0:\n            return \"0\"\n        else:\n            return -1\n    # print(segment_cnt, umbrella_cnt)\n    umbrella_tot_fatigue = 0\n    umbrella_cnt_total = 0\n    for i in range(n):\n        umbrella_tot_fatigue += umbrella_cnt * umbrella[i][2]\n        umbrella_cnt_total += umbrella_cnt\n    print(umbrella_tot_fatigue, umbrella_cnt_total)\n    if umbrella_tot_fatigue == 0:\n        return \"0\"\n    if umbrella_cnt_total == 0:\n        return -1\n    max_point = min(umbrella[-1][0], a)\n    # print(max_point)\n    return _solve(umbrella, max_point)\n\nprint(solution(stdin))"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, a = map(int, stdin.strip().split())\n    segments = []\n    umbrellas = []\n\n    for i in range(n):\n        l, r = map(int, stdin.strip().split())\n        segments.append([l, r])\n\n    for i in range(m):\n        x, p = map(int, stdin.strip().split())\n        umbrellas.append((x, p))\n\n    points = sorted(segments + umbrellas, key=lambda x: (x[0], x[1]))\n    total_fatigue = 0\n    for i in range(1, a + 1):\n        total_fatigue += max(x[0] for x in points if i < x[1] <= i + 1) - min(x[0] for x in points if i < x[1] <= i + 1)\n    return str(total_fatigue)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain = []\n    for _ in range(n):\n        rain.append(list(map(int, stdin.split())))\n    umbrellas = []\n    for _ in range(m):\n        umbrellas.append(list(map(int, stdin.split())))\n\n    def is_in_line(x):\n        for i in range(n):\n            if x < rain[i][0] or x > rain[i][1]:\n                return False\n        return True\n\n    def calculate(x, y, z):\n        r_i = max(0, x)\n        l_i = min(y, x)\n        r_j = min(y, x + 1)\n        l_j = max(x + 1, y)\n        return r_i, l_i, r_j, l_j\n\n    def calculate_umbrella(x, y, z):\n        r_i = max(0, x)\n        l_i = min(y, x)\n        r_j = min(y, x + 1)\n        l_j = max(x + 1, y)\n        return r_i, l_i, r_j, l_j\n\n    def move(x, y):\n        r_i, l_i, r_j, l_j = calculate(x, y, a)\n        if l_i == 0:\n            umbrella_to_move = umbrellas[umbrellas.index((r_i, r_j))]\n            umbrellas.remove(umbrella_to_move)\n            umbrellas.append((r_i, l_j))\n            return r_i, l_i, umbrella_to_move\n        else:\n            umbrella_to_move = umbrellas[umbrellas.index((r_i, r_j))]\n            umbrellas.remove(umbrella_to_move)\n            umbrellas.append((l_i, r_j))\n            return l_i, r_j, umbrella_to_move\n\n    def move_umbrella(x, y):\n        r_i, l_i, r_j, l_j = calculate_umbrella(x, y, a)\n        if l_i == 0:\n            umbrella_to_move = umbrellas[umbrellas.index((r_i, r_j))]\n            umbrellas.remove(umbrella_to_move)\n            umbrellas.append((r_i, l_j))\n            return r_i, l_i, umbrella_to_move\n        else:\n            umbrella_to_move = umbrellas[umbrellas.index((r_i, r_j))]\n            umbrellas.remove(umbrella_to_move)\n            umbrellas.append((l_i, r_j))\n            return l_i, r_j, umbrella_to_move\n\n    def calculate_total_fatigue(x, y):\n        r_i, l_i, r_j, l_j = calculate(x, y, a)\n        return umbrella_i_to_move[1] + umbrella_j_to_move[1] - 2 * umbrella_i_to_move[0] + 2 * umbrella_j_to_move[0]\n\n    def calculate_total_fatigue_umbrella(x, y):\n        r_i, l_i, r_j, l_j = calculate_umbrella(x, y, a)\n        return umbrella_i_to_move[1] + umbrella_j_to_move[1] - 2 * umbrella_i_to_move[0] + 2 * umbrella_j_to_move[0]\n\n    def solve(x):\n        if is_in_line(x):\n            if calculate_total_fatigue(x, y) >= calculate_total_fatigue_umbrella(x, y):\n                return calculate_total_fatigue(x, y)\n            else:\n                return calculate_total_fatigue_umbrella(x, y)\n        else:\n            umbrella_i_to_move = umbrellas[umbrellas.index((x, y))]\n            umbrellas.remove(umbrella_i_to"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    result = -1\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        if l > r:\n            l, r = r, l\n        if l == 0 and r == a:\n            result = max(result, m * a)\n        else:\n            result = max(result, a + 1 + n - i - (r - l) // (2 * n))\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain = []\n    for i in range(n):\n        rain.append(list(map(int, stdin.split())))\n    umbrellas = []\n    for i in range(m):\n        umbrellas.append(list(map(int, stdin.split())))\n    umbrellas.sort(key=lambda x: (x[0], x[1]))\n    print(umbrellas)\n    x_a = 0\n    result = float(\"inf\")\n    for i in range(1, a + 1):\n        if rain[x_a][0] <= i <= rain[x_a][1]:\n            for u in umbrellas:\n                if u[0] <= i <= u[1]:\n                    if i - x_a > u[0] - x_a:\n                        result = min(result, x_a + 1 + u[0] - x_a)\n        x_a = i\n    return str(result) if result!= float(\"inf\") else \"-1\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif a == b or a == c or b == c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if (a == b and c!= a) or (a == c and b!= a) or (b == c and a!= b):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2, n3 = map(int, stdin.split())\n    if n1 == n2 and n2!= n3:\n        return \"Yes\"\n    elif n1 == n3 and n2!= n3:\n        return \"Yes\"\n    elif n2 == n3 and n2!= n1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        if A == C:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif A == C:\n        return \"Yes\"\n    elif B == C:\n        return \"No\"\n    return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n\n    if A == B == C:\n        return 'Yes'\n    elif A == B or A == C or B == A or C == A:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Sample Input 1:\n    7 7 7\n    \n    Sample Output 1:\n    Yes\n    \n    Sample Input 2:\n    5 5 5\n    \n    Sample Output 2:\n    No\n    \"\"\"\n    a, b, c = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if a == b and b!= c:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(sorted(map(int, stdin.split()))[1:3]) == sum(sorted(map(int, stdin.split()))[0:2]) else \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == b == c:\n        return 'No'\n    if a == b or a == c or b == c:\n        return 'No'\n    if (a!= b and a!= c) or (b!= a and b!= c) or (c!= a and c!= b):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A, B, C = int(A), int(B), int(C)\n    if A == B and A == C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == C and C!= B:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    t = int(input_list[1])\n    a = int(input_list[2])\n    h = []\n    for i in range(0,int(input_list[0])):\n        h.append(int(input_list[i+3]))\n\n    p = []\n    for i in range(0,len(h)):\n        p.append(h[i]-a*0.006)\n    print(p.index(max(p))+1)\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    T = int(stdin.split()[1])\n    h = list(map(int, stdin.split()[2].split()))\n\n    best_place = -1\n    curr_place = 0\n    while curr_place < n and T - h[curr_place] >= 0:\n        avg_temp = (T - h[curr_place]) * 0.006\n        if abs(avg_temp - h[curr_place]) < abs(avg_temp - h[best_place]):\n            best_place = curr_place\n\n        curr_place += 1\n\n    if best_place == -1:\n        return str(-1)\n    else:\n        return str(best_place + 1)\n\nsolution(input())\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin\n    a = T.split(\" \")\n    n = int(a[0])\n    a = int(a[1])\n    h = a.split(\" \")\n    n = int(n)\n    i = 0\n    while(i<n):\n        a = int(h[i])\n        t = a\n        i = i+1\n    return i\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    temp = []\n    for i in range(n):\n        temp.append(int(stdin))\n    temp.sort()\n    min_diff = temp[1] - temp[0]\n    result = 0\n    for i in range(len(temp)):\n        if min_diff == temp[i] - temp[0]:\n            result = i\n            break\n    return str(result)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t, h = stdin.split()\n    n, t, h = int(n), int(t), sorted(map(int, h.split()))\n    h = [h[0] - t * 0.006] + h\n    ans = []\n    for i in range(1, n):\n        ans.append(h.index(max(h[:i])))\n    return \" \".join(map(str, ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin.split()[0])\n    T = int(stdin.split()[1])\n    A = int(stdin.split()[2])\n    H = list(map(int, stdin.split()[3:N + 3]))\n    H.sort()\n    h = H[1] - H[0]\n    for i in range(N):\n        if T - H[i] > h:\n            h = T - H[i]\n            place = i\n    return str(place + 1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t, a = map(int, stdin.split())\n    a = int(a)\n\n    maxT = 0\n    maxI = -1\n    minT = 1000000\n    minI = -1\n    for i in range(n):\n        if t - a * i > maxT:\n            maxT = t - a * i\n            maxI = i\n        if t - a * i < minT:\n            minT = t - a * i\n            minI = i\n    if abs(maxT - a) < abs(minT - a):\n        return f\"{maxI + 1}\"\n    else:\n        return f\"{minI + 1}\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    n = int(input_list[0])\n    a = float(input_list[1])\n    heights = input_list[2:]\n    heights = list(map(lambda x: int(x), heights))\n    t = 0\n    a_distance = float('inf')\n    index = -1\n    for i in range(n):\n        t += heights[i]\n        if t >= a:\n            if t - a <= a_distance:\n                index = i\n                a_distance = t - a\n    print(index)\n    return index"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T, *H = [int(i) for i in stdin.split()]\n\n    min_idx = -1\n    min_dif = 100000000\n    for i in range(N):\n        if H[i] - T * 0.006 < min_dif:\n            min_dif = H[i] - T * 0.006\n            min_idx = i\n\n    return str(min_idx)\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = int(stdin.split()[1])\n    a = int(stdin.split()[2])\n    h = list(map(int, stdin.split()[3:]))\n    temp = []\n    for i in range(0, n):\n        temp.append((i, h[i]))\n    temp.sort(key=lambda x: (x[1], x[0]))\n\n    for i in range(0, n):\n        if t - temp[i][1] * 0.006 > 0:\n            continue\n        else:\n            return str(temp[i][0])\n    return str(n - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    even = 0\n    odd = 0\n    \n    for i in range(N + M):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    \n    return str(even)\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    N = int(n)\n    M = int(m)\n    \n    count = 0\n    for i in range(0, N+M):\n        if i % 2 == 0:\n            if i + 1 < N:\n                count += 1\n        else:\n            if i + 1 < M:\n                count += 1\n    \n    return count"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_N = int(stdin.split()[0])\n    num_M = int(stdin.split()[1])\n\n    N_num_list = [2, 4]\n    M_num_list = [1, 2]\n    N_set_size = 0\n    M_set_size = 0\n\n    if num_N % 2!= 0:\n        N_set_size += 1\n\n    if num_M % 2!= 0:\n        M_set_size += 1\n\n    for N_num in N_num_list:\n        if N_num > num_N:\n            break\n        for M_num in M_num_list:\n            if N_num + M_num > num_N:\n                break\n            if N_num + M_num > num_M:\n                break\n            N_set_size += 1\n\n    for M_num in M_num_list:\n        if M_num > num_M:\n            break\n        for N_num in N_num_list:\n            if M_num + N_num > num_M:\n                break\n            if M_num + N_num > num_N:\n                break\n            M_set_size += 1\n\n    if N_set_size > M_set_size:\n        print(N_set_size)\n    else:\n        print(M_set_size)\n    return \"return None\""
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(int(stdin.split()[i]) % 2 == 0 for i in range(1, 3))\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    M = int(stdin[1])\n    if N%2 == 1 and M%2 == 1:\n        return 1\n    elif N%2 == 1 and M%2 == 0:\n        return 0\n    elif N%2 == 0 and M%2 == 1:\n        return 0\n    else:\n        return 1\n\nprint(solution(\"3 3\\n\"))\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 1')\n    1\n    >>> solution('2 1')\n    1\n    >>> solution('1 2')\n    1\n    >>> solution('3 3')\n    2\n    >>> solution('1 3')\n    1\n    >>> solution('3 1')\n    2\n    >>> solution('1 2')\n    2\n    >>> solution('3 2')\n    2\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return str(n + m) +'' + str(n + m + 1)\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # print(f'n={n}, m={m}')\n    n = 2 ** n\n    m = 2 ** m\n    # print(f'n={n}, m={m}')\n    cnt = 0\n    # print(n)\n    for i in range(n):\n        for j in range(m):\n            if i + j == n + m and (i % 2 == 0 or j % 2 == 0):\n                cnt += 1\n    return str(cnt)\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    odds = 0\n    evens = 0\n    for i in range(N+M):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    print(odds + evens)"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(bin(sum(x*2 for x in range(1,n+1) if x%2 == 0) + sum(y*2 for y in range(1,m+1) if y%2!= 0))[2:])"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    s = stdin.split()\n    ans = []\n    for i in range(q):\n        l, r = list(map(int, stdin.split()))\n        subs = s[l - 1:r]\n        count = 0\n        for c in subs:\n            if c == 'C':\n                count += 1\n        ans.append(str(count))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(input())\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(s[l - 1:r].count('AC'))\n    return \"\""
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()[1]\n    Q = int(stdin.split()[2])\n    count_ac = 0\n    for i in range(0, len(S)):\n        count_ac += S[i].count('AC')\n    for i in range(2, Q + 1):\n        l, r = map(int, stdin.split()[i * 2 + 1].split())\n        print(S[l - 1:r].count('AC') * count_ac)\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    _, _, Q = lines[0].split()\n    Q = int(Q)\n\n    string = lines[1]\n    N, l_1, r_1 = lines[2].split()\n    l_1 = int(l_1)\n    r_1 = int(r_1)\n\n    substring = \"\"\n    for i in range(l_1, r_1):\n        substring += string[i]\n\n    # print(substring)\n\n    ans = \"\"\n    for i in range(Q):\n        l, r = lines[i + 3].split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for j in range(r - l + 1):\n            if substring[j] == \"C\":\n                count += 1\n        ans += str(count) + \"\\n\"\n    return ans\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    lines = stdin.split()\n    n = int(lines[0])\n    q = int(lines[1])\n    string = lines[2]\n    result = []\n    for i in range(q):\n        l = int(lines[3+i].split()[0])\n        r = int(lines[3+i].split()[1])\n        res = sub_count(string, l, r)\n        result.append(res)\n    for item in result:\n        print(item)\n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, q = stdin.split()\n    n = int(n)\n    q = int(q)\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        count = 0\n        s = stdin[l-1:r]\n        for i in range(len(s)-1):\n            if s[i] == 'A' and s[i+1] == 'C':\n                count += 1\n        print(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    Q = int(stdin.split()[1])\n    S = stdin.split()[2]\n    sub_strings = []\n    for i in range(1, N+1):\n        l = int(stdin.split()[i][0])\n        r = int(stdin.split()[i][1])\n        sub_strings.append(S[l-1:r])\n    count = 0\n    for substring in sub_strings:\n        count += substring.count('C') * substring.count('T')\n    print(count)"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    dp = [0 for _ in range(N + 1)]\n    dp[0] = 0\n    for i in range(1, N + 1):\n        tmp = 0\n        for j in range(K):\n            tmp += p[i - 1]\n            if tmp > dp[i - 1]:\n                dp[i] = tmp\n                break\n    return str(sum(dp[1:]))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, _, *p = stdin.split()\n    return str(min(int(p[i]) * int(p[i + 1]) for i in range(0, len(p), 2)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    minimum = min(prices)\n    return str(sum(minimum for _ in range(k)))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    min_price = 0\n    for i in range(K):\n        min_price += min(prices)\n        prices.remove(min(prices))\n        prices.append(min(prices) + 1)\n\n    return str(min_price)"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [N, K] = list(map(int, stdin.split(\" \")))\n    p = list(map(int, stdin.split(\" \")))\n    dp = [[0 for _ in range(K+1)] for _ in range(N+1)]\n    dp[0][0] = 0\n    for i in range(N):\n        for j in range(K+1):\n            dp[i+1][j] = dp[i][j]\n            if j >= p[i]:\n                dp[i+1][j] = max(dp[i][j], dp[i+1][j-p[i]] + p[i])\n    return str(dp[N][K])\n\nprint(solution(input()))"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_fruits, fruit_price = [int(x) for x in stdin.split()]\n    return sum([x * y for x, y in zip(sorted(fruit_price), range(num_fruits))])\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    n, k = map(int, stdin.split())\n    # solve\n    costs = []\n    for i in range(n):\n        costs.append(list(map(int, stdin.split())))\n    return str(min(min(costs[0]), min(costs[1]), min(costs[2])))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = map(int, stdin.split())\n    if N < K:\n        print(sum(p))\n    else:\n        dp = [[-1] * (K+1) for _ in range(N+1)]\n        for i in range(N+1):\n            for k in range(K+1):\n                if k == 0:\n                    dp[i][k] = 0\n                elif i == 0:\n                    dp[i][k] = float('inf')\n                elif dp[i-1][k] == -1:\n                    continue\n                else:\n                    dp[i][k] = min(dp[i-1][k], p[i-1] + dp[i][k-1])\n        print(dp[N][K])\n\nsolution(input())"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    min_price = 0\n    for i in range(N):\n        min_price += arr[i] * min(i+1, K)\n    print(min_price)\n\n    return 0"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    fruits = stdin.split()\n    fruits.sort(key=int)\n    k_sum = 0\n    for i in range(k):\n        k_sum += int(fruits[i])\n    return str(k_sum)"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return f\"The sum of the flight times in the route {P} \\rightarrow {Q} \\rightarrow {R}: {P + Q + R}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(\" \"))\n    flight_time = min(a, b, c)\n    return str(flight_time)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    p = int(input[0])\n    q = int(input[1])\n    r = int(input[2])\n    # Write your code here\n    print(p + q + r)\n\nsolution(\"1 3 4\")\nsolution(\"1 1 1\")\nsolution(\"5 5 5\")"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p = stdin.split()\n    for i in range(len(p)):\n        p[i] = int(p[i])\n    return str(min(p))\n    \nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p,q,r = map(int, stdin.split())\n    print(p+q+r)\n    return p+q+r"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n\n    time = min(P, Q, R)\n    return f'{time} hours'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    return solution(stdin)\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, P, Q, R = stdin.split()\n    a = int(A)\n    b = int(B)\n    c = int(C)\n    p = int(P)\n    q = int(Q)\n    r = int(R)\n    if a + b > c and a + c > b and b + c > a:\n        return '-1'\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c > a:\n        print('-1')\n    if a + b > c and a + c > b and b + c"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return str(min(P + Q, P + R, Q + R))\n\n\nprint(solution(\"1 3 4\"))\nprint(solution(\"2 1 3\"))\nprint(solution(\"3 2 4\"))\nprint(solution(\"5 4 1\"))\nprint(solution(\"4 1 5\"))\nprint(solution(\"6 4 2\"))\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < y:\n        return str(0)\n    else:\n        return str(10)\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    return str(int(x) if int(x) < int(a) else 0)"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number 10 if X is less than A, otherwise return 0.\n    \"\"\"\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    return \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    print((x > a) * 10)\n    return"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return '0' if x < a else '10'\nsolution(input())"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    if int(x) < int(a):\n        return '0'\n    return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    X = int(input_list[0])\n    A = int(input_list[1])\n    if X < A:\n        print(0)\n    else:\n        print(10)\nsolution(input())"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    return '10'\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, A = stdin.split()\n    print(str(int(int(A) < int(stdin))))\n\n\nsolution(input())\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [N, K] = stdin.split(\" \")\n    return str(min(abs(int(N) - int(K)), abs(int(N) + int(K))))"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        (\n            str(min(int(stdin.split()[0]), int(stdin.split()[1])) - abs(int(stdin.split()[0]) - int(stdin.split()[1])))\n            for _ in range(int(stdin.split()[2]))\n        )\n    )"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x, k = int(stdin[0]), int(stdin[1])\n    x = x if x > k else k\n    k = abs(k) - x\n    return str(k)"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(abs(n - k), abs(n - k + 1)))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k = (int(i) for i in stdin.split())\n    return str(min(abs(x - k), x - k))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(abs(N - K))"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return str(n)\n    if k > 0:\n        return str(abs(n - k))\n    return str(abs(n + k))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    value = N\n    for i in range(0, K):\n        value = abs(value - K)\n    return str(value)\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == K:\n        return \"0\"\n    if N < K:\n        return \"0\"\n    if N > K:\n        if N < K - abs(N - K):\n            return \"1\"\n        else:\n            return \"0\"\n    if N == K:\n        return \"0\"\n    if N > K:\n        return \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(abs(N - K), N - abs(K)))\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = [int(i) for i in stdin.split()]\n    if (a1 + a2 + a3) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sum_input = 0\n    sum_input = int(stdin.split()[0]) + int(stdin.split()[1]) + int(stdin.split()[2])\n    if sum_input >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 > 22:\n        return 'bust'\n    else:\n        return 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = list(map(int, stdin.split()))\n    if A_1+A_2+A_3 >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        print('bust')\n    else:\n        print('win')\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(i) for i in stdin.split(' ')]\n    if A_1 + A_2 + A_3 > 22:\n        return 'bust'\n    else:\n        return 'win'\n\nprint(solution(input()))\n\n\n\"\"\"\nA_1, A_2, A_3 = [int(i) for i in input().split(' ')]\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = stdin.split()\n    if (int(a1)+int(a2)+int(a3)) >= 22:\n        return 'bust'\n    return 'win'\n\"\"\"\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a+b+c) >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")\n\nsolution()\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(\" \")))\n    if sum(A) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Assume in this program that N > 1, and that N is even.\n    \"\"\"\n    return str(max(2, int(stdin)))\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = list(map(int, stdin.split()))\n\n    divisible_by_two = False\n    divisible_by_three = False\n\n    for i in stdin_data:\n        if i % 2 == 0:\n            divisible_by_two = True\n        if i % 3 == 0:\n            divisible_by_three = True\n\n    if divisible_by_two and divisible_by_three:\n        print(min(stdin_data))\n    elif not divisible_by_two and divisible_by_three:\n        print(stdin_data[0])\n    elif divisible_by_two and not divisible_by_three:\n        print(stdin_data[0])\n    else:\n        print(stdin_data[0])"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1:\n        raise ValueError(\"input must be a positive integer\")\n    for i in range(1, N + 1):\n        if (i % 2 == 0) and (i % N == 0):\n            return str(i)\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for divisible in range(2, n):\n        if divisible % 2 == 0 and divisible % n == 0:\n            return str(divisible)\n    return str(n)"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    result = 1\n    while True:\n        if (result % 2 == 0) and (result % stdin == 0):\n            print(result)\n            return\n        result += 1\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    N = int(stdin)\n    i = 1\n    while True:\n        if (i % N == 0) and (i % 2 == 0):\n            i += 1\n        else:\n            break\n    return str(i)"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(2,N+1):\n        if N%i==0:\n            print(i)\n            break\n\nprint(solution(input()))"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = n - 1\n    while ans > 0:\n        if ans % 2 == 0 and ans % n == 0:\n            return str(ans)\n        ans -= 1\n    return \"0\""
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    for i in range(2, stdin[0] + 1):\n        if stdin[0] % i == 0:\n            if i % stdin[1] == 0:\n                return str(i)\n            else:\n                break\n    return str(i)\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin.split():\n        if int(i) % 2 == 0 and int(i) % int(i) == 0:\n            print(i)\nsolution(input())\n\n\"\"\"\n\nn = int(input())\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    trees = [i for i in range(1, N + 1)]\n    current_trees = []\n    total_trees = len(trees)\n\n    while len(current_trees) < total_trees:\n        for i in range(N - D + 1, N + 1):\n            if trees[i - 1] in current_trees:\n                continue\n            else:\n                if trees[i - D] in current_trees:\n                    print(len(current_trees))\n                    return\n                else:\n                    current_trees.append(trees[i - D])\n                break\n\n\nsolution(input())\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n\n    def count(n):\n        if n % 2:\n            return n-1\n        else:\n            return n // 2\n\n    ans = 1\n    for i in range(n-1, 0, -1):\n        ans = ans + count(i)\n        ans = min(ans, d+1)\n\n    print(ans)\n\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n\n    if n > d:\n        return str(n - d)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    n, d = int(n), int(d)\n    ans = []\n    for i in range(1, n + 1):\n        l, r = i - d, i + d\n        if l > 0 and r <= n:\n            ans.append(l)\n    return str(len(ans))\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if d == 1:\n        return n\n\n    # break down each interval into two intervals, one large and one small\n    d = max(d, 2)\n    n = max(n, 2)\n    g_d = d // 2\n    g_n = n // 2\n\n    # the number of inspectors we need to deploy is the min of the two cases\n    return min(g_d, g_n)\n\n'''\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.strip().split())\n    return str(math.ceil((N - 1) / D))"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split(' ')\n    n = int(n)\n    d = int(d)\n    \n    if n < 2:\n        return '0'\n    \n    return '1' if n <= 2 else str(2 + (n - 2) // d)"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 2')\n    '2'\n    >>> solution('4 3')\n    '1'\n    >>> solution('20 20')\n    '20'\n    >>> solution('100 10')\n    '100'\n    >>> solution('1000 999999 999999')\n    '1'\n    '''\n    N, D = stdin.split()\n    N = int(N)\n    D = int(D)\n    counter = 1\n    while N > 1:\n        if counter > D:\n            counter = 1\n            N -= 1\n        else:\n            N -= 2\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    return str(int(n) - int(d))\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if (n >= \"1\" and n <= \"9\"):\n        if n == \"2\":\n            return \"hon\"\n        elif n == \"4\":\n            return \"pon\"\n        elif n == \"5\":\n            return \"bon\"\n        elif n == \"7\":\n            return \"hon\"\n        elif n == \"8\":\n            return \"pon\"\n        elif n == \"9\":\n            return \"bon\"\n        else:\n            return \"hon\"\n    else:\n        return \"hon\"\n\n\nn = int(input())\nprint(solution(n))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 999:\n        if N % 100 == 11:\n            return 'hon'\n        if N % 100 == 12:\n            return 'pon'\n        if N % 100 == 13:\n            return 'bon'\n        if N % 100 == 14:\n            return 'hon'\n        if N % 100 == 15:\n            return 'bon'\n        if N % 100 == 16:\n            return 'hon'\n        if N % 100 == 17:\n            return 'hon'\n        if N % 100 == 18:\n            return 'hon'\n        if N % 100 == 19:\n            return 'hon'\n        if N % 100 == 20:\n            return 'hon'\n        if N % 100 == 21:\n            return 'hon'\n        if N % 100 == 22:\n            return 'hon'\n        if N % 100 == 23:\n            return 'hon'\n        if N % 100 == 24:\n            return 'hon'\n        if N % 100 == 25:\n            return 'hon'\n        if N % 100 == 26:\n            return 'hon'\n        if N % 100 == 27:\n            return 'hon'\n        if N % 100 == 28:\n            return 'hon'\n        if N % 100 == 29:\n            return 'hon'\n        if N % 100 == 30:\n            return 'hon'\n        if N % 100 == 31:\n            return 'hon'\n        if N % 100 == 32:\n            return 'hon'\n        if N % 100 == 33:\n            return 'hon'\n        if N % 100 == 34:\n            return 'hon'\n        if N % 100 == 35:\n            return 'hon'\n        if N % 100 == 36:\n            return 'hon'\n        if N % 100 == 37:\n            return 'hon'\n        if N % 100 == 38:\n            return 'hon'\n        if N % 100 == 39:\n            return 'hon'\n        if N % 100 == 40:\n            return 'hon'\n        if N % 100 == 41:\n            return 'hon'\n        if N % 100 == 42:\n            return 'hon'\n        if N % 100 == 43:\n            return 'hon'\n        if N % 100 == 44:\n            return 'hon'\n        if N % 100 == 45:\n            return 'hon'\n        if N % 100 == 46:\n            return 'hon'\n        if N % 100 == 47:\n            return 'hon'\n        if N % 100 == 48:\n            return 'hon'\n        if N % 100 == 49:\n            return 'hon'\n        if N % 100 == 50:\n            return 'hon'\n        if N % 100 == 51:\n            return 'hon'\n        if N % 100 == 52:\n            return 'hon'\n        if N % 100 == 53:\n            return 'hon'\n        if N % 100 == 54:\n            return 'hon'\n        if N % 100 == 55:\n            return 'hon'\n        if N % 100 == 56:\n            return 'hon'\n        if N % 100 == 57:\n            return 'hon'\n        if N % 100 == 58:\n            return 'hon'\n        if N % 100 == 59:\n            return 'hon'\n        if N % 100 == 60:\n            return 'hon'\n        if N % 100 == 61:\n            return 'hon'\n        if N % 100 == 62:\n            return 'hon'\n        if N % 100 == 63:\n            return 'hon'\n        if N % 100 == 64:\n            return 'hon'\n        if N % 100 == 65:\n            return 'hon'\n        if N % 100 == 66:\n            return 'hon'\n        if N % 100 == 67:\n            return 'hon'\n        if N % 100 == 68:\n            return 'hon'\n        if N % 100 == 69:\n            return 'hon'\n        if N % 100 == 70:\n            return 'hon'\n        if N % 100 == 71:\n            return 'hon'\n        if N % 100 == 72:\n            return 'hon'\n        if N % 100 == 73:\n            return 'hon'\n        if N % 100 == 74:\n            return 'hon'\n        if N % 100 == 75:\n            return 'hon'\n        if N % 100 == 76:\n            return 'hon'\n        if N % 100 == 77:\n            return 'hon'\n        if N % 100 == 78:\n            return 'hon'\n        if N % 100 == 79:\n            return 'hon'\n        if N % 100 == 80:\n            return 'hon'\n        if N % 100 == 81:\n            return 'hon'\n        if N % 100 == 82:\n            return 'hon'\n        if N % 100 == 83:\n            return 'hon'\n        if N % 100 == 84:\n            return 'hon'\n        if N % 100 == 85:\n            return 'hon'\n        if N % 100 == 86:\n            return 'hon'\n        if N % 100 == 87:\n            return 'hon'\n        if N % 100 == 88:\n            return 'hon'\n        if N % 100 == 89:\n            return 'hon'\n        if N % 100 == 90:\n            return 'hon'\n        if N % 100 == 91:\n            return 'hon'\n        if N % 100 == 92:\n            return 'hon'\n        if N % 100 == 93:\n            return 'hon'\n        if N % 100 == 94:\n            return 'hon'\n        if N % 100 == 95:\n            return 'hon'\n        if N % 100 == 96:\n            return 'hon'\n        if N % 100 == 97:\n            return 'hon'\n        if N % 100 == 98:\n            return 'hon'\n        if N % 100 == 99:\n            return 'hon'\n        if N % 100 == 100:\n            return 'hon'\n        if N % 100 == 101:\n            return 'hon'\n        if N % 100 == 102:\n            return 'hon'\n        if N % 100 == 103:\n            return 'hon'\n        if N % 100 == 104:\n            return 'hon'\n        if N % 100 == 105:\n            return 'hon'\n        if N % 100 == 106:\n            return 'hon'\n        if N % 100 == 107:\n            return 'hon'\n        if N % 100 == 108:\n            return 'hon'\n        if N % 100 == 109:\n            return 'hon'\n        if N % 100 == 110:\n            return 'hon'\n        if N % 100 == 111:\n            return 'hon'\n        if N % 100 == 112:\n            return 'hon'\n        if N % 100 == 113:\n            return 'hon'\n        if N % 100 == 114:\n            return 'hon'\n        if N % 100 == 115:\n            return 'hon'\n        if N % 100 == 116:\n            return 'hon'\n        if N % 100 == 117:\n            return 'hon'\n        if N % 100 == 118:\n            return 'hon'\n        if N % 100 == 119:\n            return 'hon'\n        if N % 100 == 120:\n            return 'hon'\n        if N % 100 == 121:\n            return 'hon'\n        if N % 100 == 122:\n            return 'hon'\n        if N % 100 == 123:\n            return 'hon'\n        if N % 100 == 124:\n            return 'hon'\n        if N % 100 == 125:\n            return 'hon'\n        if N % 100 == 126:\n            return 'hon'\n        if N % 100 == 127:\n            return '"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    if N >= 2 and N <= 9:\n        return \"hon\" if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9 else \"pon\" if N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8 else \"bon\"\n    return \"\u672c\""
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 999:\n        raise ValueError(\"Invalid input\")\n\n    if n < 100:\n        return str(n) + '\u672c'\n    elif n < 1000:\n        return str(n)[0] + '\u672c'\n    else:\n        if n % 100 == 12 or n % 100 == 24:\n            return 'pon'\n        elif n % 10 == 2 or n % 10 == 4 or n % 10 == 6 or n % 10 == 8:\n            return 'pon'\n        elif n % 10 == 3:\n            return 'bon'\n        else:\n            return str(n) + '\u672c'"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement solution here\n    pass"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"bon\"\n    elif n % 10 == 1 and n not in {10, 11, 12, 13, 14, 15}:\n        return \"hon\"\n    elif n % 10 == 2:\n        return \"pon\"\n    elif n % 10 == 3:\n        return \"bon\"\n    elif n % 10 == 4:\n        return \"hon\"\n    elif n % 10 == 5:\n        return \"pon\"\n    elif n % 10 == 6:\n        return \"bon\"\n    elif n % 10 == 7:\n        return \"hon\"\n    elif n % 10 == 8:\n        return \"pon\"\n    elif n % 10 == 9:\n        return \"bon\"\n    return \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n[0] == '-':\n        n = n[1:]\n    n = int(n)\n    if n == 1:\n        return '1\u672c'\n    if n <= 20:\n        return f'{n}\u672c'\n    if n > 20 and n % 10 == 1:\n        return f'{n}\u672c'\n    if n == 3:\n        return '3\u672c'\n    if n == 4:\n        return '4\u672c'\n    if n == 5:\n        return '5\u672c'\n    if n == 6:\n        return '6\u672c'\n    if n == 7:\n        return '7\u672c'\n    if n == 8:\n        return '8\u672c'\n    if n == 9:\n        return '9\u672c'\n    if n == 10:\n        return '10\u672c'\n    if n == 11:\n        return '11\u672c'\n    if n == 12:\n        return '12\u672c'\n    if n == 13:\n        return '13\u672c'\n    if n == 14:\n        return '14\u672c'\n    if n == 15:\n        return '15\u672c'\n    if n == 16:\n        return '16\u672c'\n    if n == 17:\n        return '17\u672c'\n    if n == 18:\n        return '18\u672c'\n    if n == 19:\n        return '19\u672c'\n    if n == 20:\n        return '20\u672c'\n    return ''\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 999:\n        return f'pon' if (N // 100) % 10 == 0 else f'hon' if (N // 100) % 10 in (2, 4, 5, 7, 9) else f'bon' if N % 10 == 3 else f'pon'\n    else:\n        return f'hon' if (N // 1000) % 10 == 0 else f'pon' if (N // 1000) % 10 in (2, 4, 5, 7, 9) else f'bon' if N % 10 == 3 else f'hon'"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 100:\n        print(stdin, end='')\n    elif num < 1000:\n        print('\u96f6', end='')\n        num -= 100\n        solution(str(num))\n    else:\n        print('\u96f6', end='')\n        num -= 1000\n        solution(str(num))\n    print('\u672c')\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 10:\n        if N == 2:\n            return \"hon\"\n        elif N == 0:\n            return \"pon\"\n        elif N == 4:\n            return \"bon\"\n        elif N == 5:\n            return \"pon\"\n        elif N == 6:\n            return \"bon\"\n        elif N == 7:\n            return \"bon\"\n        elif N == 8:\n            return \"bon\"\n        elif N == 9:\n            return \"bon\"\n    elif 10 <= N <= 99:\n        if N == 2 or N == 4 or N == 5 or N == 7 or N == 8 or N == 9:\n            return \"hon\"\n        elif N == 3:\n            return \"pon\"\n    elif 100 <= N <= 999:\n        if N == 10:\n            return \"hon\"\n        elif N == 11:\n            return \"hon\"\n        elif N == 12:\n            return \"hon\"\n        elif N == 13:\n            return \"hon\"\n        elif N == 14:\n            return \"hon\"\n        elif N == 15:\n            return \"hon\"\n        elif N == 16:\n            return \"hon\"\n        elif N == 17:\n            return \"hon\"\n        elif N == 18:\n            return \"hon\"\n        elif N == 19:\n            return \"hon\"\n        elif N == 20:\n            return \"hon\"\n        elif N == 21:\n            return \"hon\"\n        elif N == 22:\n            return \"hon\"\n        elif N == 23:\n            return \"hon\"\n        elif N == 24:\n            return \"hon\"\n        elif N == 25:\n            return \"hon\"\n        elif N == 26:\n            return \"hon\"\n        elif N == 27:\n            return \"hon\"\n        elif N == 28:\n            return \"hon\"\n        elif N == 29:\n            return \"hon\"\n        elif N == 30:\n            return \"hon\"\n        elif N == 31:\n            return \"hon\"\n        elif N == 32:\n            return \"hon\"\n        elif N == 33:\n            return \"hon\"\n        elif N == 34:\n            return \"hon\"\n        elif N == 35:\n            return \"hon\"\n        elif N == 36:\n            return \"hon\"\n        elif N == 37:\n            return \"hon\"\n        elif N == 38:\n            return \"hon\"\n        elif N == 39:\n            return \"hon\"\n        elif N == 40:\n            return \"hon\"\n        elif N == 41:\n            return \"hon\"\n        elif N == 42:\n            return \"hon\"\n        elif N == 43:\n            return \"hon\"\n        elif N == 44:\n            return \"hon\"\n        elif N == 45:\n            return \"hon\"\n        elif N == 46:\n            return \"hon\"\n        elif N == 47:\n            return \"hon\"\n        elif N == 48:\n            return \"hon\"\n        elif N == 49:\n            return \"hon\"\n        elif N == 50:\n            return \"hon\"\n        elif N == 51:\n            return \"hon\"\n        elif N == 52:\n            return \"hon\"\n        elif N == 53:\n            return \"hon\"\n        elif N == 54:\n            return \"hon\"\n        elif N == 55:\n            return \"hon\"\n        elif N == 56:\n            return \"hon\"\n        elif N == 57:\n            return \"hon\"\n        elif N == 58:\n            return \"hon\"\n        elif N == 59:\n            return \"hon\"\n        elif N == 60:\n            return \"hon\"\n        elif N == 61:\n            return \"hon\"\n        elif N == 62:\n            return \"hon\"\n        elif N == 63:\n            return \"hon\"\n        elif N == 64:\n            return \"hon\"\n        elif N == 65:\n            return \"hon\"\n        elif N == 66:\n            return \"hon\"\n        elif N == 67:\n            return \"hon\"\n        elif N == 68:\n            return \"hon\"\n        elif N == 69:\n            return \"hon\"\n        elif N == 70:\n            return \"hon\"\n        elif N == 71:\n            return \"hon\"\n        elif N == 72:\n            return \"hon\"\n        elif N == 73:\n            return \"hon\"\n        elif N == 74:\n            return \"hon\"\n        elif N == 75:\n            return \"hon\"\n        elif N == 76:\n            return \"hon\"\n        elif N == 77:\n            return \"hon\"\n        elif N == 78:\n            return \"hon\"\n        elif N == 79:\n            return \"hon\"\n        elif N == 80:\n            return \"hon\"\n        elif N == 81:\n            return \"hon\"\n        elif N == 82:\n            return \"hon\"\n        elif N == 83:\n            return \"hon\"\n        elif N == 84:\n            return \"hon\"\n        elif N == 85:\n            return \"hon\"\n        elif N == 86:\n            return \"hon\"\n        elif N == 87:\n            return \"hon\"\n        elif N == 88:\n            return \"hon\"\n        elif N == 89:\n            return \"hon\"\n        elif N == 90:\n            return \"hon\"\n        elif N == 91:\n            return \"hon\"\n        elif N == 92:\n            return \"hon\"\n        elif N == 93:\n            return \"hon\"\n        elif N == 94:\n            return \"hon\"\n        elif N == 95:\n            return \"hon\"\n        elif N == 96:\n            return \"hon\"\n        elif N == 97:\n            return \"hon\"\n        elif N == 98:\n            return \"hon\"\n        elif N == 99:\n            return \"hon\"\n        else:\n            return \"hon\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    takoyakis = list(map(int, stdin.split()))\n    sum_of_restored_health_points = 0\n    for i in range(len(takoyakis) - 1):\n        for j in range(i + 1, len(takoyakis)):\n            sum_of_restored_health_points += takoyakis[i] * takoyakis[j]\n    return str(sum_of_restored_health_points)\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n < 2:\n        raise ValueError\n    d: List[int] = list(map(int, stdin.split(' ')))\n    # print(d)\n    if any(i > 100 for i in d):\n        raise ValueError\n    if any(i <= 0 for i in d):\n        raise ValueError\n\n    dp = [[0] * (n + 1) for _ in range(n)]\n\n    # initialize\n    dp[0][1] = d[0]\n    dp[1][1] = d[0]\n\n    for i in range(2, n):\n        for j in range(0, i):\n            if dp[j][i] == 0:\n                dp[j][i] = max(dp[j][i - 1], dp[j + 1][i - 1]) + d[i]\n            else:\n                dp[j][i] = max(dp[j][i - 1], dp[j + 1][i - 1]) + d[i]\n\n    return str(dp[0][n - 1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    res = sum(n * (n - 1) // 2 for n, d_i in zip(range(2, n + 1), d) if d_i > 0)\n    return str(res)"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_list = stdin.split()\n    print(sum(n * (n - 1) // 2 for n in map(int, d_list)))\n    return 'Sum: {}'.format(sum(n * (n - 1) // 2 for n in map(int, d_list)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    takoyaki_list = []\n    for _ in range(N):\n        d_i = int(stdin.readline())\n        takoyaki_list.append(d_i)\n    dp = []\n    dp.append(takoyaki_list[0])\n    for i in range(N):\n        temp = []\n        for j in range(i+1):\n            temp.append(dp[j] + takoyaki_list[i])\n        dp.append(temp[-1])\n    return str(sum(dp))"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.strip().split()))\n    print(calculate(d))\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # 1. get the input\n    N = int(stdin.splitlines()[0])\n    d = list(map(int, stdin.splitlines()[1].split()))\n\n    # 2. get the d_i's\n    d.sort()\n\n    # 3. get all possible combinations of d_1...d_n\n    d.sort()\n    total_sum = 0\n    for i in range(len(d)):\n        total_sum += d[i] * (len(d) - i) / 2\n\n    return str(int(total_sum))"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = 0\n    for i in range(1,N):\n        for j in range(i):\n            res += (N*(N-1)/2)\n    for i in range(1,N):\n        for j in range(i):\n            res += (N*(N-1)/2)\n    for i in range(1,N):\n        for j in range(i):\n            res += (N*(N-1)/2)\n    return str(int(res))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1]))\n    dp = [[0] * (N - 1) for _ in range(N)]\n    for i in range(N):\n        for j in range(N - 1):\n            dp[i][j] = dp[i][j + 1] + d[j]\n    dp.reverse()\n    res = sum(sum(i) for i in dp)\n    return str(res)"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    data = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            res += max(data[i], data[j]) * (data[i] + data[j] - max(data[i], data[j]))\n    return str(res)"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = map(int, stdin.split())\n    result = max(sequence)\n    sequence.remove(max(sequence))\n    max2 = max(sequence)\n    print(result, max2)\n    return result, max2\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    nums = [int(stdin) for stdin in stdin.split()]\n    print(max(nums[1:] + nums[:-1]))\n    print(max(nums[0:-2] + nums[1:-1] + nums[2:]))\n    print(max(nums[0:-3] + nums[1:-2] + nums[2:-1] + nums[3:]))\n    return"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().splitlines()\n    n = int(stdin.pop(0))\n    a = list(map(int, stdin.pop(0).split()))\n\n    a = list(sorted(set(a)-set(a[:2])))\n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            a[i-1] = a[i]\n\n    print('\\n'.join(map(str, a[1:])))\n\nsolution('')\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = []\n    for i in range(n):\n        seq.append(int(stdin.split()[i]))\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp = seq[i]\n            if temp > seq[j]:\n                continue\n            else:\n                if temp > max(seq[:i]):\n                    ans.append(temp)\n                    break\n        if len(ans) == n:\n            break\n    return \"\\n\".join(map(str, ans))\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    max_value = 0\n    for i in range(1, n):\n        max_value = max(max_value, a_list[i] - a_list[i-1])\n    print(max_value)\nsolution(input())\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    list_of_numbers = list(map(int, stdin.split()))\n    length_of_the_sequence = len(list_of_numbers)\n    maximum_of_the_sequence = list_of_numbers[0]\n    for i in range(1, length_of_the_sequence):\n        maximum_of_the_sequence = max(maximum_of_the_sequence, list_of_numbers[i] - maximum_of_the_sequence)\n    return str(maximum_of_the_sequence)\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    arr = stdin.split(\"\\n\")\n    max_value = 0\n    for i in range(int(n)-1):\n        if i == 0:\n            arr[i+1] = arr[i+1][1:]\n            max_value = max(max_value, int(arr[i+1]))\n            continue\n        arr[i + 1] = arr[i + 1][1:]\n        max_value = max(max_value, int(arr[i + 1])+max_value)\n    return max_value\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    length = int(stdin.pop(0))\n    numbers = stdin.pop(0)\n    numbers = numbers.split(\" \")\n    numbers = list(map(int, numbers))\n    numbers = numbers[:length - 1]\n    numbers.sort(reverse=True)\n    max_1 = numbers[0]\n    max_2 = numbers[1]\n    result = max_2\n    if max_1 > max_2:\n        result = max_1\n    return result\n\nsolution(\"3\\n1\\n4\\n3\")\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    arr: list = stdin.split()[1:]\n    max_value: int = arr[0]\n    for i in range(1, N):\n        current_value = arr[i]\n        if int(max_value) < int(current_value):\n            max_value = current_value\n    return max_value\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    ans = []\n    for i in range(1, n):\n        maxi = max(arr[i-1], arr[i])\n        ans.append(maxi)\n    return '\\n'.join(map(str, ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    M = 0\n    while A > 0 and B > 0:\n        if A > 0 and B > 0:\n            if A >= B:\n                A -= 1\n                B -= 1\n            else:\n                B -= 1\n                A -= 1\n        elif A == 0 and B > 0:\n            M = max(M, B)\n            B -= 1\n        elif A > 0 and B == 0:\n            M = max(M, A)\n            A -= 1\n        elif A == 0 and B == 0:\n            return str(M)\n\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    coin_size_A, coin_size_B = map(int, stdin.split())\n    max_coins = 0\n    if coin_size_A > coin_size_B:\n        max_coins = coin_size_A\n    elif coin_size_B > coin_size_A:\n        max_coins = coin_size_B\n    else:\n        max_coins = coin_size_A\n\n    while coin_size_A > 0 and coin_size_B > 0:\n        coin_size_A -= 1\n        coin_size_B -= 1\n        if coin_size_A > coin_size_B:\n            max_coins = max(max_coins, coin_size_A + max_coins)\n        else:\n            max_coins = max(max_coins, coin_size_B + max_coins)\n\n    return max_coins"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete the maximumCoins function below.\n    n, m = map(int, stdin.split())\n    return str(n + min(n, m) + max(n, m) - 1)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # return None\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n\n    coins = a + b - 1\n\n    while a > 0 and b > 0:\n        if a > b:\n            a = a - 1\n        else:\n            b = b - 1\n        coins = coins + 1\n\n    return str(coins)\n\nprint(solution(\"5 3\"))\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = 0\n    y = 1\n    while x + y < a:\n        if x == 0:\n            x = y\n        else:\n            x -= 1\n        y = x + 1\n    return str(y)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    a, b = int(stdin[0]), int(stdin[1])\n    c = 0\n\n    while a > 0:\n        if a % 2 == 0:\n            a = a // 2\n            c += a\n        else:\n            a = (a + 1) // 2\n            c += a + b\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    _, A, B = stdin.split(\" \")\n    a = int(A)\n    b = int(B)\n    c = a\n    for _ in range(b):\n        c -= 1\n    if c > 0:\n        return str(c)\n    return \"0\""
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len(get_coins_for_size(tuple(map(int, stdin.split()))))\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = [0] * (A + 1)\n    coins[0] = 1\n    for i in range(1, A + 1):\n        coins[i] = 1\n        if i == 1:\n            coins[i] = 1\n        elif i == 2:\n            coins[i] = 2\n        elif i == 3:\n            coins[i] = 4\n        elif i == 4:\n            coins[i] = 7\n        elif i == 5:\n            coins[i] = 9\n        else:\n            coins[i] = coins[i - 1] + coins[i - 2] + coins[i - 3] + coins[i - 4] + coins[i - 5]\n\n    for i in range(0, B + 1):\n        if coins[i] >= coins[A]:\n            return str(coins[i])\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        A, B = map(int, line.split())\n        return str(A*B)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    return str(min_time(N, x, K))\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    k -= 1\n    h = 1\n    res = float('inf')\n    for i in range(n):\n        if k == 0:\n            break\n        if i == 0:\n            for i in range(1, h+1):\n                h = i\n                if h == n:\n                    h = h - 1\n                    break\n            res = min(res, h)\n            continue\n        if h == n:\n            h = h - 1\n            break\n        res = min(res, h)\n        if x[i] == x[i-1]:\n            h = h + 1\n        else:\n            h = 1\n            continue\n        k = k - 1\n    return str(res)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    coordinates = list(map(int, stdin.split()))\n    coordinates.sort()\n    distance = coordinates[1] - coordinates[0]\n    # print(distance)\n    # print(coordinates)\n    time = 0\n    count = 0\n    for i in range(0, N):\n        if coordinates[i] >= 0:\n            time += distance\n            count += 1\n    # print(count)\n    if count == 0:\n        print(-1)\n    else:\n        print(time)\n\n\nsolution(\"5 3\")\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(x) for x in stdin.split())\n    arr = [[int(x) for x in stdin.split()] for _ in range(N)]\n    moves = {\n        'up': lambda x, y: x - 1,\n        'down': lambda x, y: x + 1,\n        'left': lambda x, y: y - 1,\n        'right': lambda x, y: y + 1,\n    }\n\n    time = 0\n    x, y = 0, 0\n\n    while K > 0:\n        if arr[x][y] == K:\n            time += 1\n            arr[x][y] = 0\n            K -= 1\n        else:\n            x, y = moves[arr[x][y]](x, y)\n\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    coordinate = list(map(int, stdin.split()))\n    time = 0\n    for i in range(K):\n        time += abs(coordinate[0])\n        if coordinate[i] < 0:\n            time += abs(coordinate[i]) + abs(coordinate[i+1])\n        coordinate[i] += 1\n        if coordinate[i] == coordinate[i+1]:\n            time += abs(coordinate[i]) + abs(coordinate[i+1])\n            coordinate[i] += 1\n    return time\n\nprint(solution(input()))\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n    -30 -10 10 20 50\n    ''')\n    40\n    \"\"\"\n    N, K = map(int, stdin.split())\n    if N == 0 or K == 0:\n        return 0\n    x = list(map(int, stdin.split()))\n    min_time = float('inf')\n    i = 0\n    while i < len(x) - 1:\n        if (x[i] < x[i + 1]) or (x[i] == x[i + 1] and x[i] == 0):\n            min_time = min(min_time, i + 1)\n            i += 1\n            continue\n        if (x[i] > x[i + 1]) or (x[i] == x[i + 1] and x[i] == 0):\n            cur_time = abs(x[i + 1] - x[i])\n            if i + 1 == N - 1 and K > cur_time:\n                cur_time = K\n            min_time = min(min_time, cur_time)\n            i += 1\n    return min_time"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split()\n    n = int(stdin_arr[0])\n    k = int(stdin_arr[1])\n    x = stdin_arr[2]\n    x = list(map(int, x.split()))\n    x.sort()\n    min_time = 0\n    for i in range(0, n):\n        min_time += abs(x[i] - x[i - 1])\n        if i == k:\n            min_time += 1\n    return str(min_time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    moves = 0\n    while True:\n        if x[0] == max(x):\n            if x[1] == min(x):\n                moves += 1\n                if moves == k:\n                    return moves\n            else:\n                moves += 1\n                if moves == k:\n                    return moves\n            x[0] += 1\n            x[1] += 1\n        else:\n            x[0] += 1\n            x[1] += 1\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [list(map(int, line.split())) for line in stdin.splitlines()]\n    return min(*min_time(inputs))\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    candles = list(map(int, stdin.split()))\n\n    queue = [(0, 0)]\n    candle_remaining = K\n\n    while queue:\n        candle_idx, candle_pos = queue.pop(0)\n\n        # If candle was already lit, we don't need to worry about the position.\n        if candle_remaining == 0:\n            candle_remaining = K\n            candle_pos += 1\n\n        # If we can move right\n        if candle_pos < N - 1:\n            candle_pos += 1\n            candle_remaining -= 1\n            queue.append((candle_idx, candle_pos))\n        # If we can move left\n        if candle_pos > 0:\n            candle_pos -= 1\n            candle_remaining -= 1\n            queue.append((candle_idx, candle_pos))\n\n        if candle_remaining == 0:\n            break\n\n    return str(candle_pos)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a < b:\n        return b - a\n    else:\n        return a - b\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - 2)"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return str(int(a / (b - a)))\n    else:\n        return str(int(b / (a - b)))\n\nprint(solution(input()))"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(answer(int(stdin.split(\" \")[0]), int(stdin.split(\" \")[1])))\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(a+b-2)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return f'{min(a,b) + max(a,b)}'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(i)-1 for i in stdin.split()]))"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        stdin_a, stdin_b = stdin.strip().split(' ')\n    except ValueError:\n        raise ValueError('input is not a string')\n    a, b = int(stdin_a), int(stdin_b)\n    return str(int((a*b)/999))\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 0 or b <= 0:\n        raise Exception(\n            f\"The input values must be > 0.\\na: {a}\\tb: {b}\"\n        )\n    if a + b >= 999:\n        raise Exception(\n            f\"The input values cannot be more than 999.\\na: {a}\\tb: {b}\"\n        )\n    return a if a <= b else b\n\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a * b)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, A = list(map(int, stdin.split()))\n    if H == 0:\n        return \"NO\"\n    return str(min(1 + min(H // A, H // (A + 2)), H // (A + 4)))\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (H, A) = stdin.split()\n    return \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str(sum(i - 1 for i in range(H, 0, -A)))"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    health = int(input_list[0])\n    attack = int(input_list[1])\n    count = 0\n    while health > 0:\n        if health - attack < 0:\n            health = 0\n            break\n        health = health - attack\n        count += 1\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    t = 0\n    while h > 0:\n        h -= a\n        if h <= 0:\n            return str(t)\n        t += 1\n    return str(t)"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    H, A = stdin.split(\" \")\n    \n    H = int(H)\n    A = int(A)\n    \n    i = 1\n    while (H - A) >= 0:\n        H -= A\n        i += 1\n        \n    print(i)\n    \n    \n    \n    return \"\"\n\nsolution(\"10 4\") # 3\nsolution(\"20 10\") # 2\nsolution(\"10 4\") # 1\nsolution(\"20 4\") # 0\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, _, H, A = map(int, stdin.split())\n    return str(H * (A - 1) + H * A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, a = stdin.split()\n    return str(int(h) * int(a) + 1)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(' ')\n    n = int(n)\n    a = int(a)\n    if n <= 0 or a <= 0:\n        raise Exception\n    monster_hp = n\n    serval_hp = 1\n    count = 0\n    while monster_hp!= 0:\n        if monster_hp >= serval_hp:\n            count += 1\n            monster_hp -= serval_hp\n            serval_hp = 1\n        else:\n            count += 1\n            monster_hp += a\n            serval_hp -= a\n    return str(count)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if A <= H:\n        return \"0\"\n    else:\n        return f\"{((A - 1) // H) + 1}\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    alice = (a - 50) * 60\n    bob = (b - 75) * 60\n    print(int(alice + bob))\n    return int(alice + bob)\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a switch and two buttons, with the same position on the switch.\n    The first time your robot takes control of the switch, it takes control of both buttons.\n    The second time it takes control of the switch, it takes control of the switch and only the first button.\n    A pair of the buttons is considered a \"pair\" if its position differs from the position of its partner.\n\n    Given the switch and a pair of buttons (a and b), determine the duration (in seconds) that your robot takes to start controlling the switch.\n\n    Input\n    The first line contains an integer, N, the number of test cases.\n    The next N lines contain a pair of integers A and B where 0\u2264A\u2264B\u2264100.\n\n    Output\n    For each test case, print the duration in seconds in one line.\n\n    Constraints\n    0\u2264A,B\u2264100\n    \n    Sample Input\n    1\n    0 75 25 100\n    2\n    20 50 20 100\n    Sample Output\n    50\n    \n    Alice started holding down her button 0 second after the start-up of the robot, and released her button 75 second after the start-up.\n    Bob started holding down his button 25 second after the start-up, and released his button 100 second after the start-up.\n    Therefore, the time when both of them were holding down their buttons, is the 50 seconds from 25 seconds after the start-up to 75 seconds after the start-up.\n    '''\n    # Your code here\n    switch, a, b = list(map(int, stdin.split()))\n\n    while switch:\n        a, b = list(map(int, stdin.split()))\n        switch -= 1\n    return \"0\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    D = int(D)\n    for i in range(min(A, C), max(A, C)):\n        if i < min(B, D):\n            time = (min(B, D)-i)*2\n        else:\n            time = (i-max(B, D))*2\n        print(time)\n    return '0'\nprint(solution(input()))"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a - b, d - c))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alice_start = 0\n    bob_start = 0\n    for i in range(3):\n        switch = int(stdin[i * 2])\n        if i == 0:\n            alice_start = switch\n        if i == 1:\n            bob_start = switch\n    alice_end = alice_start + 75\n    bob_end = bob_start + 100\n    print(alice_end - alice_start, bob_end - bob_start)\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first, second = map(int, stdin.split())\n    return str(max(first, second) - min(first, second))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    delta_a = a - c\n    delta_b = b - d\n    if delta_a < 0:\n        delta_a = 0\n    if delta_b < 0:\n        delta_b = 0\n    time_a = delta_a + c\n    time_b = delta_b + d\n    print(abs(time_a - time_b))\n    return stdin\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = map(int, stdin.split())\n    alice_in_time, bob_in_time = 0, 0\n    alice_out_time, bob_out_time = 0, 0\n    alice_out_time += alice\n    alice_out_time += alice\n    bob_out_time += bob\n    bob_out_time += bob\n    alice_out_time += alice\n    bob_out_time += alice\n    alice_out_time += alice\n    bob_out_time += alice\n    print(alice_out_time)\n    print(bob_out_time)\n    return alice_out_time, bob_out_time"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n\n    return str(a + b) + \" \" + str(a + c) + \" \" + str(b + c) + \" \" + str(a + d) + \" \" + str(b + d)\nprint(solution(\"0 75 25 100\"))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    alice_start = float(a)\n    bob_start = float(b)\n    alice_end = float(c)\n    bob_end = float(d)\n    alice_time = alice_end - alice_start\n    bob_time = bob_end - bob_start\n    alice_time = alice_time - 0.5\n    bob_time = bob_time - 0.5\n    if alice_time < bob_time:\n        return str(alice_time)\n    return str(bob_time)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin)\n    result = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            if i % 8 == 0:\n                result += 1\n            if i % 3 == 0:\n                result += 1\n            if i % 5 == 0:\n                result += 1\n            if i % 7 == 0:\n                result += 1\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    count: int = 0\n    for x in range(1, n + 1):\n        if is_odd(x) and has_eight(x):\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using iteration, find all odd numbers that have exactly eight divisors.\n    \"\"\"\n    count = 0\n\n    for i in range(1, int(stdin) + 1):\n        if is_odd(i) and has_eight_divisors(i):\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number % 2 == 0:\n        return '0'\n    divisor_sum = 0\n    for i in range(2, number+1):\n        if number % i == 0:\n            divisor_sum += 1\n            if divisor_sum == 8:\n                return str(number)\n\nsolution(input())"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for x in range(1, n):\n        for y in range(1, n):\n            if 8 % x == 0 and 8 % y == 0 and x + y == n:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    return countOddNumbersWithExactlyEightDivisors(n)\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_divisors(number: int) -> set:\n        divisors = set()\n        for divisor in range(1, int(number / 2) + 1):\n            if number % divisor == 0:\n                divisors.add(divisor)\n                divisors.add(number // divisor)\n        return divisors\n    lower_limit = int(stdin)\n    upper_limit = int(stdin)\n    odds = []\n    for number in range(lower_limit, upper_limit + 1):\n        if number!= 0 and len(get_divisors(number)) == 8:\n            odds.append(number)\n    return str(len(odds))\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n_divisors = 0\n    for i in range(2, N + 1):\n        if n_divisors == 8:\n            break\n        for divisor in range(1, i):\n            if i % divisor == 0:\n                break\n        else:\n            n_divisors += 1\n            if n_divisors % 2 == 1:\n                print(i)\n    return"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    start, end = map(int, stdin.split())\n    count = 0\n    for number in range(start, end + 1):\n        if number % 2 == 0:\n            continue\n        divisor_count = 0\n        for divisor in range(1, 10):\n            if number % divisor == 0:\n                divisor_count += 1\n            if divisor_count == 8:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    def select(i, j):\n        if (i > j):\n            return 0\n        \n        if (j - i + 1) % 2 == 0:\n            return min(select(i + 1, j - 1), select(i, j - 1))\n        else:\n            return select(i + 1, j) + 1\n    \n    return str(select(1, k))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, k, n = stdin.split(\" \")\n    n = int(n)\n    k = int(k)\n    return f'{(max(map(int, input().split())) - min(map(int, input().split()))):.1f}'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, K = list(map(int, stdin.split()))\n    return str(min(N, K) - max(N, K))\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n, k = int(stdin_list[0]), int(stdin_list[1])\n    \n    crackers_distributed = 0\n    user_crackers = []\n\n    # Create users\n    for i in range(k):\n        user_crackers.append(0)\n\n    # Distribute crackers\n    for i in range(n):\n        crackers_distributed += 1\n        user_crackers[crackers_distributed % k] += 1\n\n    return str(max(user_crackers) - min(user_crackers))\n\nsolution('7 3')"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = 0\n    for i in range(1, N + 1):\n        d = max(d, i)\n    for i in range(1, K + 1):\n        d = max(d, i)\n    return str(abs(d - N + 1))\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(n, k)} {max(n, k)}\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    result = n * (n + 1) / 2 - k\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return str(min([N - max(i, K) for i in range(1, N + 1)]))\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(n, k) - min(n, k))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, K = int(stdin[0]), int(stdin[1])\n    return str(N - (min(N, K) - max(N, K)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return next(n for n in range(n, 100) if is_same_nth(n, n % 10, n // 10))\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parse stdin and return the latest ABC to be held.\n    \"\"\"\n    N = int(stdin)\n    k = 5\n    while True:\n        # [int(d) for d in str(N)]\n        k += N\n        N = int(k)\n        if N == 9:\n            return str(k)\n        k += 1\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * 10\n    dp[n] = n\n\n    for i in range(1, 10):\n        for j in range(1, n):\n            if j < 10:\n                break\n            if i == j:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = max(dp[i - 1], dp[j])\n    return str(dp[n])\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    while not all([i.isdigit() for i in a]):\n        a = input()\n    for i in range(len(a)):\n        if a[i].isdigit():\n            a[i] = int(a[i])\n    for i in range(len(a)):\n        if i == len(a)-1:\n            print(a[i])\n        elif a[i] == a[i+1]:\n            continue\n        else:\n            print(a[i], end='')\n    return"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    abc_n: int = 0\n    while not is_all_equal(N, abc_n):\n        abc_n += 1\n    return str(abc_n)\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number < 100:\n        return str(number)\n    else:\n        return \"\".join(sorted(list(str(number))))\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 0, -1):\n        num = list(str(i))\n        if num == num[::-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 1\n    while True:\n        s = str(cnt)\n        if s[0]!= s[1] or s[2]!= s[3] or s[4]!= s[5]:\n            return str(cnt)\n        cnt += 1"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    abc = str(stdin)\n    if abc.count('1') == 1:\n        abc = int(abc)\n        return abc\n    if abc.count('1') > 1:\n        for i in range(len(abc)):\n            if abc.count('1') == i + 1:\n                abc = abc[0:i+1]\n                abc = int(abc)\n                return abc\n\nimport re\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = list(map(int, stdin.split()))\n    return str(min(sum(x) for x in zip(sorted(A1 + A2 + A3, reverse=True),\n                                       sorted(A1 + A2 + A3, reverse=True))) - max(sorted(A1 + A2 + A3)))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(' ')))\n    if len(A) == 1:\n        return str(0)\n    A = A[:]\n    A.sort()\n    if A[0] == 0:\n        return str(sum(A[1:]))\n    if A[-1] == 0:\n        return str(sum(A[:-1]))\n    a1 = A[0]\n    a2 = A[-1]\n    for i in range(1, len(A)-1):\n        a3 = A[i]\n        b1 = abs(a3 - a1)\n        b2 = abs(a3 - a2)\n        if b1 > b2:\n            a2 = a3\n        elif b2 > b1:\n            a1 = a3\n    return str(a1 - a2)\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    task_costs = stdin.split()\n    print(sum([int(task_costs[i]) for i in range(len(task_costs))]))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    numbers = stdin.split()\n    costs = []\n    for i in range(len(numbers)):\n        costs.append(int(numbers[i]))\n    costs.sort(reverse=True)\n    return str(sum(costs[0:len(costs)-1]))\n    # print(costs)"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    dp = [[float('inf') for _ in range(A2 + 1)] for _ in range(A1 + 1)]\n    for i in range(A1 + 1):\n        dp[i][0] = 0\n    for j in range(A2 + 1):\n        dp[0][j] = j * A3\n    for i in range(1, A1 + 1):\n        for j in range(1, A2 + 1):\n            for k in range(1, A3 + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + abs(A3 - k))\n    return str(dp[-1][-1])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    task_list = [(A_1, 0), (A_2, 1), (A_3, 2)]\n    task_list.sort(key=lambda x: x[0])\n    cur_cost, j = 0, 0\n    for i, t in enumerate(task_list):\n        cur_cost += t[1]\n        j = i\n        if cur_cost < t[0]:\n            break\n    return str(cur_cost)\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (A1, A2, A3) = stdin.split()\n    (A1, A2, A3) = (int(A1), int(A2), int(A3))\n    return min(A1, A2, A3)\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N*N)\n    Space complexity: O(1)\n    \"\"\"\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = A[i]\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], A[i] + dp[i + 1][k] + dp[k + 1][j])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    return str(min(i - j for i, j in zip(A[::2], A[1::2])))"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(\" \")))\n    if A[0] > A[1]:\n        A.reverse()\n\n    memo = {}\n    tasks = {}\n    for i, a in enumerate(A):\n        tasks[a] = {}\n        for j in range(i+1, i+a+1):\n            tasks[a][j] = abs(i-j)\n            memo[(i, j)] = tasks[a][j]\n\n    memo = {k: v for k, v in sorted(memo.items(), key=lambda item: item[1])}\n\n    for i, a in enumerate(A):\n        for j in range(i+1, i+a+1):\n            if j not in memo:\n                return -1\n            elif j in memo:\n                return memo[j]\n\n    return -1"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    for i in range(1,101):\n        if (i%2 == 0) and (s < i//2):\n            break\n        elif (i%2!= 0) and (s < 3*i+1):\n            break\n    return str(i)"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = []\n    i = 1\n    while i <= 1000000:\n        if i % 2 == 0:\n            a.append(i // 2)\n        else:\n            a.append(3 * i + 1)\n        i += 1\n    # print(a)\n    while s > 0:\n        # print(s, a[s - 1])\n        if a[s - 1] == a[s]:\n            return a[s]\n        else:\n            s = a[s - 1]\n    return a[s]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    while s>1:\n        if s%2 == 0:\n            s = s/2\n        else:\n            s = s*3+1\n    return str(int(s))\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    for i in range(1, s+1):\n        if i % 2 == 0:\n            a = i // 2\n        else:\n            a = 3 * i + 1\n        if a == s:\n            return str(i)\n    return str(s)"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 1:\n        return 3 * s + 1\n    else:\n        return s//2"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = n // 2 if n % 2 == 0 else 3 * (n + 1)\n    a = set()\n    a.add(s)\n\n    for i in range(1, n):\n        a.add(s - i)\n        a.add(s + i)\n    return min(a)\n\"\"\"\n\ns = int(input())\na = set()\na.add(s)\n\nfor i in range(1, int(s/2+1)):\n    if i%2 == 0:\n        a.add(s//2)\n    else:\n        a.add(3*s+1)\n\nprint(min(a))"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = sorted([int(i) for i in stdin.split()])\n    m = a[0]\n    for i in range(len(a)):\n        if a[i] % 2 == 1:\n            m = min(m, (2 * (a[i] - m) + 1))\n        else:\n            m = min(m, a[i] // 2)\n    return str(m)"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n\n    for i in range(1, len(arr)):\n        arr[i] = arr[i-1]/2 if arr[i]%2 == 0 else 3*arr[i-1] + 1\n\n    print(min(arr))\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    if len(a)==1:\n        if a[0]%2==1:\n            return str(3*a[0]+1)\n        else:\n            return str(a[0]//2)\n    else:\n        b=a.copy()\n        for i in range(len(a)-1):\n            if a[i]%2==1:\n                a[i+1]=a[i+1]//2\n                b[i]=b[i]//2\n        m=100000\n        for i in range(len(a)):\n            if a[i]==b[i]:\n                if m>a[i]:\n                    m=a[i]\n            else:\n                m=max(m,a[i])\n        return str(m)\n\nsolution(\"8\")\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s == 1:\n        return str(s)\n    else:\n        f = lambda n: (n // 2) if n % 2 == 0 else 3*n + 1\n        return str(f(s))\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def attack(mon_a: int, mon_b: int):\n        mon_a, mon_b = mon_a-mon_b, mon_b-mon_a\n        return mon_a if mon_a >= 0 else mon_b\n    \n    health, strength = list(map(int, stdin.split()))\n    \n    while True:\n        mon_a_health, mon_a_strength = attack(health, strength), attack(strength, health)\n        if mon_a_health <= 0 or mon_a_health < mon_a_strength:\n            return 'Yes'\n        health, strength = mon_a_health, mon_a_strength"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    if (A <= C) and (B <= D):\n        return \"Yes\"\n    else:\n        return \"No\"\nsolution(\"10 9 10 10\")\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = map(int, stdin.split())\n    while aoki > 0 and takahashi > 0:\n        if takahashi > aoki:\n            aoki -= takahashi\n        else:\n            aoki -= aoki\n    return 'Yes' if aoki > 0 else 'No'\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    while a > 0 and b > 0 and c > 0 and d > 0:\n        if a > b and a > c and a > d:\n            a -= c\n            d -= b\n        elif b > a and b > c and b > d:\n            b -= c\n            d -= a\n        elif c > a and c > b and c > d:\n            c -= a\n            d -= b\n        elif d > a and d > b and d > c:\n            d -= c\n            b -= a\n        else:\n            return \"No\"\n    if a <= 0 and b <= 0 and c <= 0 and d <= 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n\n    player_one = Player(stdin[0], stdin[1])\n    player_two = Player(stdin[2], stdin[3])\n    while player_one.health > 0 and player_two.health > 0:\n        player_two.attack(player_one)\n        if player_one.health <= 0:\n            return \"No\"\n        player_one.attack(player_two)\n\n    if player_one.health <= 0:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    while a > 0 and b > 0:\n        if a > b:\n            a -= c\n            b -= d\n        else:\n            a -= d\n            b -= c\n        if a <= 0 and b <= 0:\n            return 'No'\n    return 'Yes'\n\n\nsolution(input())\n\"\"\"\n\na, b, c, d = map(int, input().split())\n\nwhile a > 0 and b > 0:\n    if a > b:\n        a -= c\n        b -= d\n    else:\n        a -= d\n        b -= c\n    if a <= 0 and b <= 0:\n        return 'No'\nprint('Yes') if a > 0 else print('No')\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    print(None if (A-C<=0 or B-D<=0) else 'Yes' if (A-C>=0 and B-D>=0) else 'No')\n    return 'Yes' if (A-C>=0 and B-D>=0) else 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        if C > D:\n            if A > C:\n                if B > D:\n                    if A > B:\n                        if A > C:\n                            if A > D:\n                                return \"Yes\"\n                            else:\n                                return \"No\"\n                        else:\n                            if A > D:\n                                return \"Yes\"\n                            else:\n                                return \"No\"\n                    else:\n                        if A > D:\n                            return \"Yes\"\n                        else:\n                            return \"No\"\n                else:\n                    if A > D:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n            else:\n                if C > D:\n                    if A > C:\n                        if A > D:\n                            return \"Yes\"\n                        else:\n                            return \"No\"\n                    else:\n                        if A > D:\n                            return \"Yes\"\n                        else:\n                            return \"No\"\n                else:\n                    if A > D:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n        else:\n            if C > D:\n                if A > D:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            else:\n                if A > D:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n    else:\n        if A < C:\n            if A < D:\n                if B > D:\n                    if C > D:\n                        if A > C:\n                            if A > D:\n                                return \"Yes\"\n                            else:\n                                return \"No\"\n                        else:\n                            if A > D:\n                                return \"Yes\"\n                            else:\n                                return \"No\"\n                    else:\n                        if A > D:\n                            return \"Yes\"\n                        else:\n                            return \"No\"\n                else:\n                    if C > D:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n            else:\n                if C > D:\n                    if A > D:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    if A > D:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n        else:\n            if C > D:\n                if A > D:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            else:\n                if A > D:\n                    return \"Yes\"\n                else:\n                    return \"No\"\nstdin = \"\"\nfor _ in range(int(input())):\n    stdin += input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0, len(stdin.split()), 2):\n        _, first, second = stdin.split()\n        if first > second:\n            first = int(first)\n            second = int(second)\n            while first > second:\n                second -= int(second)\n                first -= int(first)\n                if second <= 0:\n                    return \"No\"\n        if first < second:\n            first = int(first)\n            second = int(second)\n            while first > second:\n                second -= int(second)\n                first -= int(first)\n                if second <= 0:\n                    return \"Yes\"\n        if first == second:\n            return \"No\"\n        if first < second:\n            first = int(first)\n            second = int(second)\n            while first > second:\n                second -= int(second)\n                first -= int(first)\n                if second <= 0:\n                    return \"Yes\"\n        if first == second:\n            return \"Yes\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_sum(values, costs):\n        max_sum = 0\n        for value, cost in zip(values, costs):\n            max_sum = max(max_sum, value - cost)\n        return max_sum\n\n    values = [int(v) for v in stdin.split()]\n    costs = [int(c) for c in stdin.split()]\n    return str(find_max_sum(values, costs))"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *G = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(len(G) - 2, -1, -1):\n        X = G[i] + C[i]\n        for j in range(i + 1, len(G) - 1):\n            Y = G[j] + C[j]\n            ans = max(ans, X - Y)\n    return str(ans)\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    __, num_gems = stdin.split()\n    num_gems = list(map(int, num_gems.split()))\n    gems = num_gems[1:]\n    costs = num_gems[:1]\n    best_gems = []\n    count_left = len(gems)\n    count_left_costs = len(costs)\n\n    # Start with the first gems\n    for i in range(len(gems)):\n        if count_left == 0:\n            break\n        best_gems.append(gems[i])\n        costs.append(costs[i])\n        count_left -= 1\n\n    # Loop through gems\n    while count_left_costs > 0:\n        count_left = len(gems)\n        count_left_costs = len(costs)\n        # If nothing is left, don't need to update the best gems\n        if count_left == 0:\n            break\n        for i in range(len(gems)):\n            # Get best of the remaining gems\n            if len(best_gems) == 0:\n                if count_left == 1:\n                    best_gems.append(gems[i])\n                    costs.append(costs[i])\n                    count_left -= 1\n                else:\n                    break\n            # Check if gem is better than the best gem so far\n            if costs[i] + costs[best_gems[-1]] < costs[best_gems[-1]] + costs[i]:\n                best_gems.append(gems[i])\n                costs.append(costs[i])\n                count_left -= 1\n        # Update the number of gems left\n        count_left_costs -= 1\n\n    # Return the total value of the gems we buy\n    return str(sum(best_gems) - sum(costs))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def convert_input():\n        [N, *V, C] = stdin.split()\n        return N, list(map(int, V)), list(map(int, C))\n\n    N, V, C = convert_input()\n    V_sorted = sorted(V, reverse=True)\n    C_sorted = sorted(C, reverse=True)\n    sum_v = sum(V)\n    sum_c = sum(C)\n    ans = sum_v - sum_c\n\n    def check(v, c):\n        if v < 0 or c < 0:\n            return False\n        return sum(V_sorted[:v]) >= c\n\n    for c in C_sorted:\n        for v in range(N):\n            if check(v, c):\n                ans = max(ans, sum_v - sum_c - V_sorted[v])\n                break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *gems, cost = map(int, stdin.split())\n    gem_dict = dict(zip(range(n), gems))\n\n    gem_sort = sorted(gem_dict.items(), key=lambda x: x[1])\n    gem_sort = sorted(gem_sort, key=lambda x: x[1], reverse=True)\n\n    gem_dict_sorted = {}\n    gem_dict_sorted_sort = []\n    gem_dict_sorted_sort.append(gem_dict_sorted)\n\n    gem_dict_sorted_sort.append(gem_dict_sorted)\n\n    result = 0\n\n    # min_n_gem_value = min(gem_dict.values())\n    # min_n_gem_index = list(gem_dict.items())\n    # min_n_gem_index = min_n_gem_index[:min_n_gem_index.index(min_n_gem_value) + 1]\n    # for i, j in min_n_gem_index:\n    #     gem_dict_sorted_sort.append(i)\n\n    for i in range(n - 1):\n        if (gem_sort[i + 1][1] - gem_sort[i][1]) >= cost:\n            gem_dict_sorted_sort.append(gem_sort[i][0])\n        else:\n            gem_dict_sorted_sort.append(gem_sort[i + 1][0])\n\n    for i in range(n):\n        if gem_dict_sorted_sort[i] in gem_dict_sorted_sort[i + 1:]:\n            result = result + gem_dict_sorted_sort[i]\n        else:\n            result = result + gem_dict_sorted_sort[i] + cost\n    return str(result)"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    values = stdin.split()[1:]\n    costs = stdin.split()[2:]\n\n    values = list(map(int, values))\n    costs = list(map(int, costs))\n\n    dp = [0] * n\n    dp[0] = values[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + costs[i - 1])\n\n    return str(max(dp[-1], dp[-2] + costs[-1]))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    input_arr = stdin.rstrip('\\n').split()\n    gem_to_cost_arr = list(map(int, input_arr[1:]))\n    gem_arr = list(map(int, input_arr[:1]))\n    gem_arr.sort()\n    gem_arr = gem_arr[::-1]\n    gem_arr = list(zip(gem_arr, gem_to_cost_arr))\n    gem_arr.sort(key=lambda x: x[1], reverse=True)\n    total_gem_cost = sum(gem_to_cost_arr)\n    gem_arr = {gem: cost for gem, cost in gem_arr}\n    x = y = 0\n    for gem, cost in gem_arr.items():\n        x += gem_arr[gem]\n        y += gem_arr[gem] * cost\n    print(x - y)\n    return x - y\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *V_array = map(int, stdin.split())\n    V_array = list(map(int, V_array))\n    C_array = list(map(int, stdin.split()))\n\n    return str(max(0, max(V_array) - sum(C_array)))\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    C, *costs = map(int, stdin.split())\n    print(max([(values[i] - costs[i]) for i in range(N)]))"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *V = list(map(int, stdin.split('\\n')[0].split()))\n    *C, Y = list(map(int, stdin.split('\\n')[1].split()))\n\n    X = sum(V) - (sum(C))\n    if X >= Y:\n        return X-Y\n\n    return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [[c for c in stdin[i]] for i in range(H)]\n    print(grid)\n    for row in grid:\n        if '.' in row:\n            row.remove('.')\n        if '#' in row:\n            row.remove('#')\n\n    # for each row\n    for i in range(H):\n        # check if row contains only black\n        if '#' not in grid[i]:\n            # if there is, remove that row and append empty row\n            del grid[i]\n            row = []\n            for j in range(W):\n                row.append('.')\n            grid.append(row)\n        # else:\n        #     # split to left and right\n        #     row = grid[i]\n        #     right = []\n        #     left = []\n        #     for j in range(len(row)):\n        #         if row[j] == '#':\n        #             left.append('.')\n        #         else:\n        #             left.append('#')\n        #     grid[i] = left\n        #     del left\n        #     # insert new row\n        #     row = left + row\n        #     grid.append(row)\n    # for each col\n    for j in range(W):\n        # check if col contains only black\n        if '#' not in grid[0][j]:\n            # if there is, remove that row and append empty row\n            del grid[0][j]\n            col = []\n            for i in range(H):\n                col.append('.')\n            grid.insert(0, col)\n        # else:\n        #     # split to up and down\n        #     col = grid[j]\n        #     up = []\n        #     down = []\n        #     for i in range(len(col)):\n        #         if col[i] == '#':\n        #             down.append('.')\n        #         else:\n        #             down.append('#')\n        #     grid[j] = down\n        #     del down\n        #     # insert new row\n        #     col = down + col\n        #     grid.insert(0, col)\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '#'\n    # print(grid)\n    for i in range(H):\n        for j in range(W):\n            print(grid[i][j], end=\"\")\n        print()\n    return \"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    # input_h, input_w = stdin[0].split(' ')\n    input_h, input_w = int(stdin[0]), int(stdin[1])\n    grid = stdin[2]\n    \n    print('###')\n    print('###')\n    print('###')\n    print('###')\n    # print(f\"### input_h: {input_h}\")\n    # print(f\"### input_w: {input_w}\")\n    \n    # print(f\"### a = {a}\")\n    # print(f\"### grid = {grid}\")\n    \n    # Find row\n    row_num = 0\n    for i in range(input_h):\n        if grid[i] == \"#\":\n            row_num = i\n            break\n    \n    # Find column\n    col_num = 0\n    for j in range(input_w):\n        if grid[j][row_num] == \"#\":\n            col_num = j\n            break\n    \n    # Remove row\n    grid = grid[:row_num] + grid[row_num+1:]\n    \n    # Remove column\n    grid = \"\".join([line[:col_num] + line[col_num+1:] for line in grid])\n    \n    return grid\n\nprint(solution(stdin))"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_row_col(r, c, m):\n        return m[r][c] == '#'\n\n    def remove_row(row, m):\n        for c in range(len(m[0])):\n            if m[row][c] == '#':\n                m[row][c] = '.'\n\n    def remove_col(col, m):\n        for r in range(len(m)):\n            if m[r][col] == '#':\n                m[r][col] = '.'\n\n    def compress(m):\n        for i in range(len(m)):\n            remove_row(i, m)\n            remove_col(i, m)\n\n    def remove_non_white(m):\n        for r in range(len(m)):\n            for c in range(len(m[0])):\n                if m[r][c] == '#' or m[r][c] == '.':\n                    m[r][c] = '#'\n\n    def step(m):\n        compress(m)\n        remove_non_white(m)\n\n    lines = stdin.splitlines()\n    h, w = map(int, lines[0].split())\n    matrix = []\n    for i in range(h):\n        row = lines[i + 1].split()\n        matrix.append(row)\n\n    assert len(matrix) == h\n    assert len(matrix[0]) == w\n\n    for i in range(len(matrix)):\n        assert matrix[i]\n        assert len(matrix[i]) == w\n\n    solution_state = matrix\n    step(matrix)\n    return '\\n'.join([''.join(row) for row in solution_state])\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N, M = map(int, stdin.split())\n    grid = [['.'] * M]\n    for i in range(N):\n        grid.append(stdin.split()[i + 1])\n\n    while True:\n        found = False\n        for i in range(1, N - 1):\n            if '.' not in grid[i]:\n                for j in range(1, M - 1):\n                    if grid[i][j] == '.':\n                        if grid[i - 1][j - 1] == '#':\n                            grid[i - 1][j - 1] = '.'\n                            found = True\n                        if grid[i + 1][j + 1] == '#':\n                            grid[i + 1][j + 1] = '.'\n                            found = True\n                        if grid[i - 1][j + 1] == '#':\n                            grid[i - 1][j + 1] = '.'\n                            found = True\n                        if grid[i + 1][j - 1] == '#':\n                            grid[i + 1][j - 1] = '.'\n                            found = True\n\n        if not found:\n            break\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    return ''.join([''.join(i) for i in grid])\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [rows, cols] = map(int, stdin.split())\n    grid = list()\n    for i in range(rows):\n        grid.append(list(stdin[i * cols: (i + 1) * cols]))\n    black = False\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '#':\n                black = True\n            if grid[i][j] == '.':\n                black = False\n    \n    while not black:\n        tmp_grid = list()\n        for i in range(rows):\n            if black:\n                tmp_grid.append(['.'] * cols)\n            else:\n                tmp_grid.append(['#'] * cols)\n        black = False\n        for i in range(rows):\n            for j in range(cols):\n                if j > 0 and tmp_grid[i][j - 1] == '.':\n                    tmp_grid[i][j] = '#'\n                    black = True\n                if i > 0 and tmp_grid[i - 1][j] == '.':\n                    tmp_grid[i][j] = '#'\n                    black = True\n        grid = tmp_grid\n    return ''.join([''.join(x) for x in grid])\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (H, W) = stdin.strip().split(\" \")\n    H = int(H)\n    W = int(W)\n    a = stdin.strip().split(\"\\n\")\n    l = len(a)\n    for i in range(l):\n        for j in range(len(a[i])):\n            if a[i][j] == \"#\":\n                a[i][j] = \".\"\n    for i in range(1, l):\n        a.insert(i, \"\")\n    a.append(\"\")\n    l = l + 1\n    for i in range(l - 2):\n        a.append(\"\")\n    for i in range(l):\n        print(\"\".join(a[i]))\n\nsolution(input())\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    height, width = stdin.split(' ')\n    height = int(height)\n    width = int(width)\n    rows = []\n    for i in range(height):\n        row = stdin[i]\n        row = list(row)\n        rows.append(row)\n\n    rows.pop(0)\n    rows.pop(height - 1)\n\n    for row in rows:\n        row.pop(0)\n        row.pop(width - 1)\n\n    return \"\".join(\"\".join(row) for row in rows)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = stdin.split()\n    if H == 1 and W == 1:\n        return a[0]\n    for i in range(1, H):\n        if a[i]!= a[i-1]:\n            break\n    if i == H-1:\n        return ''.join(a)\n    if a[0]!= '#':\n        return ''.join(a)\n    for j in range(1, W):\n        if a[j]!= a[j-1]:\n            break\n    if j == W-1:\n        return ''.join(a)\n    if a[0]!= '#':\n        return ''.join(a)\n    for i in range(i, H):\n        if a[i]!= '#':\n            break\n    if i == H-1:\n        return ''.join(a)\n    if a[0]!= '#':\n        return ''.join(a)\n    for j in range(j, W):\n        if a[j]!= '#':\n            break\n    if j == W-1:\n        return ''.join(a)\n    if a[0]!= '#':\n        return ''.join(a)\n    for i in range(H-1, i, -1):\n        if a[i]!= '#':\n            break\n    if i == H-1:\n        return ''.join(a)\n    if a[0]!= '#':\n        return ''.join(a)\n    for j in range(W-1, j, -1):\n        if a[j]!= '#':\n            break\n    if j == W-1:\n        return ''.join(a)\n    if a[0]!= '#':\n        return ''.join(a)\n    return ''.join(a)\n\nprint(solution(stdin))"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_black_space(grid):\n        row = len(grid)\n        col = len(grid[0])\n        black_space = []\n        for i in range(row):\n            for j in range(col):\n                if grid[i][j] == \"#\":\n                    black_space.append((i, j))\n        return black_space\n\n    def merge(grid):\n        row = len(grid)\n        col = len(grid[0])\n        for i in range(row):\n            for j in range(col):\n                if i == 0 or j == 0 or i == row - 1 or j == col - 1:\n                    continue\n                if grid[i][j] == \"#\":\n                    if grid[i][j - 1] == \"#\" or grid[i - 1][j] == \"#\":\n                        grid[i][j] = \"#\"\n        return grid\n\n    def remove_white_space(grid, black_space):\n        for space in black_space:\n            if space[0] == 0:\n                grid[space[0] + 1] = [i if i == \"#\" else \".\" for i in grid[space[0] + 1]]\n            if space[0] == len(grid) - 1:\n                grid[space[0] - 1] = [i if i == \"#\" else \".\" for i in grid[space[0] - 1]]\n            if space[1] == 0:\n                grid[space[1] + 1] = [i if i == \"#\" else \".\" for i in grid[space[1] + 1]]\n            if space[1] == len(grid[0]) - 1:\n                grid[space[1] - 1] = [i if i == \"#\" else \".\" for i in grid[space[1] - 1]]\n\n        grid = merge(grid)\n        grid = remove_white_space(grid, black_space)\n        return grid\n\n    def remove_black_space(grid):\n        row = len(grid)\n        col = len(grid[0])\n        black_space = get_black_space(grid)\n        white_space = []\n        for i in range(row):\n            for j in range(col):\n                if i == 0 or j == 0 or i == row - 1 or j == col - 1:\n                    continue\n                if grid[i][j] == \".\":\n                    if (i, j - 1) in black_space:\n                        white_space.append((i, j - 1))\n                    if (i, j + 1) in black_space:\n                        white_space.append((i, j + 1))\n                    if (i - 1, j) in black_space:\n                        white_space.append((i - 1, j))\n                    if (i + 1, j) in black_space:\n                        white_space.append((i + 1, j))\n        white_space = remove_white_space(grid, white_space)\n        return white_space\n\n    stdin_list = stdin.split()\n    row = int(stdin_list[0])\n    col = int(stdin_list[1])\n    grid = [[i for i in stdin_list[2]]]\n    white_space = remove_white_space(grid)\n    black_space = remove_black_space(grid)\n    return \"\".join([\"\".join([i for i in j]) for j in grid])\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(3.14159265358979323846 * 2 * R)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    pi = 3.1415926535897932384626433832795028841971693993751\n    return \"{:.2f}\".format(pi * radius * 2)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n       if 1 <= R <= 100 else \"Invalid\")"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    circumference = 3.14159265358979323846 * radius * 2\n    return str(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    circle = 3.14159265358979323846\n    return str(2 * radius * circle)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(2*3.1415926535897932384626433832795271437 * R)\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n\n    pi = 3.14159265358979323846264338327950288\n    return pi * R**2"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R: int = int(stdin)\n    return str(pi * 2 * R)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    circumference = 2 * math.pi * radius\n    return str(circumference)\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string.\n    Check if it consists of two different letters which also appear twice in string.\n    \"\"\"\n    if len(stdin)!= 4:\n        raise ValueError(\"The length of the string must be 4\")\n    if stdin[0] == stdin[1] or stdin[0] == stdin[2] or stdin[1] == stdin[2]:\n        raise ValueError(\"The string must consist of different letters\")\n    if stdin.count(stdin[0]) == 2 or stdin.count(stdin[1]) == 2 or stdin.count(stdin[2]) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin)\n    A = []\n    for i in range(4):\n        if a[i] not in A:\n            A.append(a[i])\n    return len(A) == 2"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    cnt_a = 0\n    cnt_s = 0\n    for i in stdin:\n        if i == 'A':\n            cnt_a += 1\n            if cnt_a == 2:\n                cnt_s += 1\n        else:\n            cnt_a = 0\n    if cnt_s == 2:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns True if string is one of the answer in the problem.\"\"\"\n    a, b, c, d = stdin\n    if a == c or b == c or a == d or b == d:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l1 = s[0]\n    l2 = s[2]\n    l3 = s[3]\n    s1 = s[1]\n    s2 = s[1]\n    if (l1 == l2) and (l2 == l3) and (l1 == s1) and (l1 == s2):\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    char_set = set()\n    count = 0\n    for i in stdin:\n        if i in char_set:\n            count += 1\n        char_set.add(i)\n    if count == 2:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    if len(word)!= 4:\n        print(\"No\")\n        return\n    print(\"Yes\")\n    \nsolution(input())"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    lst = stdin.split(' ')\n    if 'A' not in lst and 'S' not in lst:\n        return 'No'\n    elif 'A' in lst and 'S' in lst:\n        if lst.count('A') == 2 and lst.count('S') == 2:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'Yes'\n\nprint(solution('ASSA'))\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    counter = dict()\n    for letter in stdin:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    return len(counter) == 2 and 2 in counter.values()\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... -12 -12\n   ... ''')\n    '-12'\n    >>> solution('''\n   ... -13 -12\n   ... ''')\n    '-10'\n    >>> solution('''\n   ... -13 -13\n   ... ''')\n    '-11'\n    \"\"\"\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return max(a + b, a - b, a * b)\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    print(max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: A string consisting of the answer\n    \"\"\"\n    A, B = map(int, stdin.split())\n    return max([A + B, A - B, A * B])\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    elif a > b:\n        return str(a+b)\n    elif a < b:\n        return str(a-b)\n    elif a*b >= 0:\n        return str(a*b)\n    else:\n        return str(-1)"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    if a + b > b + a > a * b:\n        return str(a + b)\n    elif a - b > b - a > a * b:\n        return str(a - b)\n    elif a * b > b * a > a * b:\n        return str(a * b)\n    else:\n        return str(a - b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join((str(max(int(i) + int(j), int(i) - int(j), int(i) * int(j))), )\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    a, b = min(A, B), max(A, B)\n    return str(a + b) if a + b > b + a else str(a - b) if a - b > b - a else str(a * b)"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return f'{max(int(A) + int(B), int(A) - int(B), int(A) * int(B))}'"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a + b, a - b, a * b)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    mountain_heights = sorted(map(int, stdin.split()[1].split()))\n\n    return str(sum(1 for i in range(1, N) if mountain_heights[i - 1] <= mountain_heights[i]))\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return '0'\n    mountain = list(map(int, stdin.split()))\n    i_h_min, i_h_max = mountain[0], mountain[-1]\n    result = 1\n    for i in range(1, N):\n        if i_h_min > mountain[i]:\n            result += 1\n        i_h_min = min(i_h_min, mountain[i])\n        i_h_max = max(i_h_max, mountain[i])\n    return str(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n\n    res = 0\n    for i in range(n):\n        if h[i] <= max(h[:i]):\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n\n    h.sort()\n\n    count = 0\n    i = 0\n    while i < n and count < n:\n        if h[i] >= h[i + 1]:\n            count += 1\n            i += 1\n        else:\n            i += 2\n\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, hs = stdin.split()\n    hs = list(map(int, hs.split()))\n    i = 0\n    count = 0\n    while i < len(hs) and i < N:\n        if hs[i] <= hs[i + 1]:\n            if hs[i] <= hs[i - 1]:\n                count += 1\n            i += 2\n        else:\n            i += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split()\n    n = int(data[0])\n    mountain_heights = list(map(int, data[1:]))\n    count = 0\n\n    for i in range(n):\n        if mountain_heights[i] > mountain_heights[i - 1]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # 1. create a list of mountain heights\n    mountain_heights = list(map(int, stdin.split()))\n    # 2. create a set of mountain heights\n    mountain_heights = set(mountain_heights)\n    # 3. create a list of range of heights\n    range_of_heights = list(range(1, max(mountain_heights) + 1))\n    # 4. check if any element of the list is in the set of mountain heights\n    return '\\n'.join([str(mountain_heights.intersection(range_of_heights))])\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    mountain = list(map(int, stdin.split()[1].split()))\n\n    mountain.sort()\n    print(mountain)\n\n    count = 0\n\n    for i in range(n):\n        if mountain[i] >= mountain[i - 1]:\n            if i > 0 and mountain[i] >= mountain[i - 1]:\n                count += 1\n\n    print(count)\n    return\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        # if first mountain\n        if h[i] < h[0]:\n            continue\n        # if second mountain\n        if h[i] < h[1]:\n            continue\n        # if third mountain\n        if h[i] < h[2]:\n            continue\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n\n    def sub(height):\n        c = 0\n        for i in range(N):\n            c += H[i] <= height <= H[i + 1]\n        return c\n\n    return str(sub(H[0]))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = stdin.split(' ')\n    arr = [int(x) for x in array]\n    num = 1\n    for i in range(n):\n        if num > i:\n            num = i\n        elif num < i:\n            num = i + 1\n    return num\n\nprint(solution(input()))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    towers = stdin.splitlines()[1:]\n\n    stairs = collections.defaultdict(int)\n    stairs[1] = 1\n\n    for tower in towers:\n        for step in range(1, int(tower) + 1):\n            stairs[step] += 1\n\n    return str(sum(stairs.values()))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = list(map(int, stdin.strip().split()))\n    t = 0\n    for i in range(1, n):\n        if sequence[i] == sequence[i-1]+1:\n            t += 1\n        else:\n            sequence.append(sequence[i-1]+1)\n    return str(t) + '\\n' + '\\n'.join(map(str, sequence))"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin.split(\"\\n\")\n    print(s)\n    total_stairs = int(s[0])\n    stairs = list(map(int, s[1].split()))\n    print(stairs)\n    stairs_count = 0\n    count_steps = []\n    for i in range(len(stairs)):\n        if i == 0:\n            stairs_count += 1\n            continue\n        else:\n            current_steps = stairs[i-1] + stairs[i]\n            count_steps.append(current_steps)\n            stairs_count += 1\n    return f\"{stairs_count} {count_steps}\"\n\nsolution(\n\"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 3 1 2 3 4\n   ... ''')\n    '2'\n    >>> solution('''1 1 1 1\n   ... ''')\n    '1'\n    >>> solution('''1 2 3 1 2 3 4\n   ... ''')\n    '3'\n    >>> solution('''1 1 1 1\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... ''')\n    '5'\n    \"\"\"\n    c, *numbers = stdin.split()\n    n = int(numbers[0])\n    *stairs, = map(int, numbers[1:])\n    res = 1\n    steps = 0\n    for s in stairs:\n        steps += s\n        if steps > n:\n            break\n        res += 1\n    print(res)\n    print(*map(str, stairs))\n    return ''\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    count = 0\n    count_steps = 0\n    for i in arr:\n        if count_steps == i:\n            count_steps = 0\n        count_steps += 1\n        count += 1\n    return str(count) + \"\\n\" + str(count_steps)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_stairs, nums = stdin.split()\n    nums = list(map(int, nums.split()))\n    # for num in nums:\n    #     print(num)\n    # print('total', total_stairs)\n    print(len(nums))\n    return str(len(nums))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    # stdin = ['7', '1 2 3 1 2 3 4', '1 2 3 1 2 3 4']\n    num_stairs = int(stdin[0])\n    # num_stairs = 7\n    step_list = stdin[1].split()\n    # step_list = ['1', '2', '3', '1', '2', '3', '4']\n    # step_list = ['1', '1', '1', '1']\n    # step_list = ['3', '1', '2']\n    # step_list = ['1', '2', '3', '1', '2', '3', '4']\n\n    step_set = set(step_list)\n    # step_set = {1, 2, 3, 4}\n\n    if num_stairs == 1:\n        return str(len(step_set))\n    # if num_stairs == 3:\n    #     return str(len(step_set))\n    if num_stairs == 4:\n        return str(len(step_set) - 2)\n\n    # Steps in each stair, [1, 2, 3, 4]\n    # [1, 1, 1, 1]\n    # [1, 2, 1, 2]\n    # [1, 3, 2, 3]\n    # [1, 4, 3, 4]\n    # [1, 5, 4, 5]\n    # [2, 1, 2, 1]\n    # [2, 2, 1, 2]\n    # [2, 3, 2, 3]\n    # [2, 4, 3, 4]\n    # [2, 5, 4, 5]\n    # [3, 1, 2, 1]\n    # [3, 2, 1, 2]\n    # [3, 3, 2, 3]\n    # [3, 4, 3, 4]\n    # [3, 5, 4, 5]\n    # [4, 1, 2, 1]\n    # [4, 2, 1, 2]\n    # [4, 3, 2, 3]\n    # [4, 4, 3, 4]\n    # [4, 5, 4, 5]\n    # [5, 1, 2, 1]\n    # [5, 2, 1, 2]\n    # [5, 3, 2, 3]\n    # [5, 4, 3, 4]\n    # [5, 5, 4, 5]\n\n    # Goal is to count the # of steps in each stair\n    # Assume that there are 3 steps in each stair\n    # count 1 step stair to 2 step stair\n    # count 2 steps stair to 3 steps stair\n    # count 3 steps stair to 4 steps stair\n    # count 4 steps stair to 5 steps stair\n    # so, for 3 stairs, count 1, 2, 3 = 1\n    # for 4 stairs, count 1, 2, 3, 4 = 2\n    # for 5 stairs, count 1, 2, 3, 4, 5 = 3\n    # 1 + 2 + 3 = 6\n    # 2 + 1 + 2 = 4\n    # 3 + 2 + 3 = 6\n    # 4 + 1 + 2 = 5\n    # 5 + 2 + 3 = 7\n\n    # 1 + 2 + 3 = 6\n    # 2 + 1 + 2 = 4\n    # 3 + 2 + 3 = 6\n    # 4 + 1 + 2 = 5\n    # 5 + 2 + 3 = 7\n\n    # 6 + 4 + 5 = 16\n    # 4 + 1 + 2 = 5\n    # 5 + 2 + 3 = 7\n    # 6 + 1 + 2 = 7\n\n    # result = 6 + 4 + 5 = 16\n    # step_dict = {}\n    # for i in range(1, num_stairs + 1):\n    #     step_dict[i] = 1\n    # for i in range(2, num_stairs + 1):\n    #     step_dict[i] = step_dict[i - 1] + 1\n\n    # print(step_dict)\n    # print(num_stairs)\n    # print(step_list)\n    # print(step_set)\n    # print(sum(step_set))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n\n    # for i in range(1, num_stairs + 1):\n    #     if i == 1:\n    #         step_dict[i] = 1\n    #         continue\n    #     step_dict[i] = step_dict[i - 1] + 1\n\n    # print(step_dict)\n    # print(num_stairs)\n    # print(step_list)\n    # print(step_set)\n    # print(sum(step_set))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n\n    # for i in range(1, num_stairs + 1):\n    #     if i == 1:\n    #         step_dict[i] = 1\n    #         continue\n    #     step_dict[i] = step_dict[i - 1] + 1\n\n    # print(step_dict)\n    # print(num_stairs)\n    # print(step_list)\n    # print(step_set)\n    # print(sum(step_set))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n\n    # for i in range(1, num_stairs + 1):\n    #     if i == 1:\n    #         step_dict[i] = 1\n    #         continue\n    #     step_dict[i] = step_dict[i - 1] + 1\n\n    # print(step_dict)\n    # print(num_stairs)\n    # print(step_list)\n    # print(step_set)\n    # print(sum(step_set))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n    # print(sum(step_dict.values()))\n\n    # for i in range(1, num_stairs + 1):\n    #     if i == 1:\n    #         step_dict[i] = 1\n    #         continue\n    #     step_dict[i] = step_dict[i - 1] + 1\n\n    # print(step_dict)\n    # print(num_stairs)\n    # print(step_list)\n    # print(step_set)\n    # print(sum(step_set))\n    # print(sum(step"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import product\n    return '\\n'.join(str(len(list(p))) for p in product(*(map(int, stdin.split())), repeat=len(stdin.split())) if all(i > j for i, j in zip(p, p[1:])))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_happy(x: int) -> bool:\n        visited = []\n        while x > 0:\n            y = x\n            while y > 0:\n                if y not in visited:\n                    visited.append(y)\n                y = y * 2\n            if x not in visited:\n                visited.append(x)\n            x = x - 1\n        return len(visited) == 1\n\n    def find_solution(x: int, k: int) -> int:\n        for i in range(k, 0, -1):\n            y = x\n            while y > 0:\n                if y not in visited:\n                    visited.append(y)\n                y = y * 2\n            x = x - 1\n        return x\n\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        visited = []\n        x = n\n        if is_happy(x):\n            print(x)\n            continue\n        if x == 1:\n            k = 1\n            x = find_solution(x, k)\n            print(x)\n            continue\n        k = 2\n        while x > 0:\n            x = find_solution(x, k)\n            k = k + 1\n            if is_happy(x):\n                print(x)\n                break\n        if not is_happy(x):\n            print(\"NIE\")\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cases, max_count = int(stdin.strip()), 3\n    for case in range(num_cases):\n        num, k = stdin.strip().split()\n        num = int(num)\n        k = int(k)\n        if num == max_count and k > 1:\n            return str(k)\n    return '0'"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_tests = int(stdin)\n    for _ in range(number_of_tests):\n        number_of_candy_wrappers = int(stdin)\n        number_of_candies = number_of_candy_wrappers + 2 * number_of_candy_wrappers + 4 * number_of_candy_wrappers + \\\n                            (number_of_candy_wrappers - 1) * 2 ** (number_of_candy_wrappers - 2) * number_of_candy_wrappers\n        print(number_of_candies)\nsolution(input())\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin)\n    for _ in range(cases):\n        n = int(stdin)\n        x = 1\n        k = 1\n        sum = 0\n        while x + 2 * x + 4 * x + 2 ** k * x < n:\n            x += 2\n            k += 1\n        sum += (x + 2 * x + 4 * x + 2 ** k * x)\n        if k == 1:\n            print(sum)\n        else:\n            print(sum // (2 ** (k - 1)))\n    return\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        for x in range(int(stdin)):\n            pass\n        pass\n    for x in range(int(stdin)):\n        pass\n    pass"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    for x in range(1, max(a) + 1):\n        for k in range(2, x + 1):\n            if sum([x, x + 2, x + 4, x + 8, x + 16, x + 32, x + 64, x + 128, x + 256]) == n:\n                return str(x) +'' + str(k)\n    return '-1'"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    print(t, n)\n    for i in range(t):\n        x = int(stdin.split()[2 + i * 2])\n        k = int(stdin.split()[3 + i * 2])\n        print(x, k)\n    return\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    x = int(stdin[0])\n    y = int(stdin[1])\n    while(x!=0):\n        x= x%10\n        x= x-1\n    return str(x)"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    res = []\n    while n > 0:\n        res.append(n)\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n    for i in range(k):\n        res.pop()\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    elif n % 10 == 1:\n        return str(n-1)\n    else:\n        return str(n//10-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    while n > 0:\n        if n % 10 == 0:\n            n = n // 10\n            if n == 0:\n                return n\n            elif n % 10!= 0:\n                n = n - 1\n                return n\n        elif n % 10!= 0:\n            n = n - 1\n            return n\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    res = a\n    for _ in range(b):\n        res -= 1\n    return str(res)\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        result = result // 10\n        result -= 1\n    return str(result)\nprint(solution(input()))\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    result = N\n    while K > 0:\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n        K -= 1\n    return str(result)\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    result = 0\n    while n:\n        if n % 10 == 0:\n            n //= 10\n            result += 1\n        else:\n            n -= 1\n            result += 1\n    return str(result)"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    al = list(map(int, stdin.split()[1]))\n    al.sort(reverse=True)\n\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = al[0]\n    ans = 1\n    for i in range(1, n):\n        dp[0][i] = al[i] + dp[0][i - 1]\n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1]) + al[i]\n\n    return ans\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    heights = list(map(int, stdin.splitlines()[1]))\n\n    res = 0\n    for i in range(n):\n        height = heights[i]\n        if i == 0:\n            res = max(res, height)\n        elif i!= 0 and heights[i] - heights[i - 1] <= 1:\n            res = max(res, height + heights[i - 1])\n        else:\n            res = max(res, heights[i])\n        print(res, end=\" \")\n    return res\n\n\nsolution(\"\"\"5\n4 3 5 1 2 2 1\n\"\"\")\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    cur = 0\n    ans = 0\n    res = []\n    for i in range(n):\n        cur += arr[i]\n        res.append(cur)\n        if (cur - res[0]) <= 1:\n            ans = i + 1\n        elif (cur - res[-1]) <= 1:\n            ans = i + 1\n            break\n    print(ans)\n    res = list(map(str, res))\n    return''.join(res)\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_circle = 0\n    max_height = 0\n    for i in range(1, n + 1):\n        height = int(stdin.strip())\n        if height > max_height:\n            max_circle = i\n            max_height = height\n    print(max_circle)\n    print(*[i for i in range(1, max_circle + 1)], sep=' ')\n    return ''\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = list(map(int, stdin.split()))\n    a_1 = a[0]\n    a_2 = a[1]\n    k = 2\n    res = []\n    res.append(a_1)\n    res.append(a_2)\n    a_i = a[1]\n    while a_i < a[2]:\n        res.append(a_i)\n        a_i += a_1\n    while a_i > a[2]:\n        res.append(a_i)\n        a_i -= a_2\n    return str(k) + \" \" + \" \".join(map(str, res))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n\n    a = list(map(int, stdin.pop().split()))\n\n    people = [0 for _ in range(n)]\n    for i in range(n):\n        people[i] = a[i]\n    people.sort()\n\n    # \uc21c\uc11c\ub97c \uc815\ud574\uc57c\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774\ub807\uac8c \ud558\uace0\uc790\ud55c\ub2e4.\n    # \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\ub97c \ub3cc\uba74\uc11c \ucc28\uc774\ub97c \ube7c\uace0, \uac19\uc740 \uac12\uc774 \uc788\ub294\uc9c0 \uccb4\ud06c\ud574\uc57c \ud55c\ub2e4.\n    # \uc774\uac70 \ud55c\ubc88 \ud574\uc8fc\uba74 \ub418\ub294\ub370, \uc774\ubc88\uc5d0 \uc774\uc81c \uadf8\uac83\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud55c\ub2e4.\n    n = len(people)\n    res = 1\n    for i in range(1, n):\n        if people[i - 1] - people[i] > 1:\n            res += 1\n            continue\n        elif people[i - 1] - people[i] < -1:\n            res += 1\n            continue\n        else:\n            continue\n    print(res)\n    # \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc758 \uac12\uc744 \ube44\uad50\ud558\ub294 \uc774\uc720\uac00, \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 \uac12\ub4e4\uc774 \uc774\uc81c \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 \uac12\ub4e4\ubcf4\ub2e4 \ud55c \uac1c \ub354 \ud06c\uac70\ub098 \uac19\ub2e4\ub294 \uc810\uc744 \uac00\uc9c4\ub2e4.\n    # \uc989, \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc774\uc81c \ubc14\uafd4\uc11c \ud55c\ubc88 \ub354 \ube44\uad50\ud558\ub294 \uac8c \uc544\ub2c8\ub77c \ubc14\uafd4\uc11c \uacc4\uc18d \ube44\uad50\ud558\ub294 \uac83\uc774\ub2e4.\n\n    # \uc774 \ubb38\uc81c\uc5d0\uc11c \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \ucd5c\ub300 \uac12\uc744 \ucc3e\ub294 \ubb38\uc81c\uc774\ub2e4.\n    # \uc774\uc720\ub294 \ub9e4\ubc88 \uadf8 \uc548\uc5d0\uc11c \ube44\uad50\ud574\uc11c \uac00\uc7a5 \ud070 \uc218\uac00 \uc788\ub294 \uacf3\uc744 \uad6c\ud558\uace0, \uc774\ub97c \ube44\uad50\ud558\ub294 \ubb38\uc81c\ub77c\uace0 \uc0dd\uac01\ud558\uae30 \uc5b4\ub824\uc6b4 \uc810\uc740 \uc788\ub2e4.\n    # \uc989, \ub2e4\uc74c\uacfc \uac19\uc740 \uc870\uac74\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n    # \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc758 \uac12\uc774 \uc911\ubcf5\ub418\uc9c0 \uc54a\ub294\ub2e4.\n    # \uc911\ubcf5\ub418\ub294 \uac12\uc740 \uc624\ub984\ucc28\uc21c\uc774\uace0, \ube44\uad50\ub97c \ud574\uc57c \ud558\ub294\ub370, \ube44\uad50\ud574\uc57c \ud560 \uc815\ub82c \uae30\uc900\uc774 \uc788\ub2e4.\n    # \ub530\ub77c\uc11c \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 \uac12\ub4e4\uc744 \ube44\uad50\ud558\uba74\uc11c \uac00\uc7a5 \ud070 \uc218\uac00 \uc788\ub294 \uacf3\uc744 \uad6c\ud558\uba74 \ub41c\ub2e4.\n    # \uc989, \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 \uac12\ub4e4\uc744 \ube44\uad50\ud574\uc11c \uc815\ub82c \uae30\uc900\uc744 \uc124\uc815\ud558\uace0, \uadf8 \uae30\uc900\uc5d0 \ub9de\uac8c \uc815\ub82c\uc774 \ub418\uc5b4 \ucd5c\ub300 \uac12\uc774 \ub418\ub294 \uac12\uc744 \ucc3e\ub294\ub2e4.\n\n    # \uc774\uc81c \ub9c8\uc9c0\ub9c9\uc5d0 \ucd5c\ub300\uac12\uc774 \ub418\ub294 \uac83\uc774\ub2e4.\n    # \uc774\uc81c \uc5ec\uae30\uc11c \ucc98\uc74c\uc5d0 \uc788\ub294 \uac12\ub4e4\ub9cc \uc815\ub82c\uc774 \ub418\uc5c8\ufffd"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = a[0]\n    a = a[1:]\n    stack = []\n    max_len = 0\n    for i in range(n):\n        while stack and a[i] >= a[stack[-1]]:\n            stack.pop()\n        stack.append(i)\n        max_len = max(max_len, len(stack))\n    return str(max_len)"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    answer = -1\n    answer_list = []\n\n    def is_balanced(i, heights):\n        height_difference = abs(heights[i] - heights[i + 1])\n        if height_difference <= 1:\n            return True\n        return False\n\n    def go(count, heights):\n        nonlocal answer\n        if count == answer:\n            return\n        if count == n:\n            if is_balanced(0, heights) and is_balanced(1, heights):\n                answer = count\n                return\n        for i in range(0, n - count):\n            go(count + 1, heights)\n        return\n\n    go(0, heights)\n    return \"{} {}\".format(answer, \" \".join(map(str, answer_list)))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(stdin) for stdin in stdin.strip().split()]\n    res = 1\n    res2 = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > 1:\n            res += 1\n            res2 = max(res2, arr[i])\n    print(res)\n    return \" \".join([str(res2) for _ in range(res)])\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a_sorted = sorted(a)\n    k = n // 2\n    res = a[0]\n    for i in range(1, k + 1):\n        diff = a[i] - a_sorted[i - 1]\n        if diff > 1:\n            break\n        res += a[i]\n    print(k)\n    print(*sorted(a))\n    return res\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort(reverse=True)\n\n    s = sum(a)\n    if s > m:\n        return \"-1\"\n    if s == m:\n        return \"\".join(map(str, a))\n    if s < m:\n        return \"\".join(map(str, a[:m-s]))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    # print(a)\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(a[i][j], end=' ')\n    #     print()\n    # print()\n    s = 0\n    for i in range(n):\n        s += a[i][0]\n        a[i].pop(0)\n        for j in range(len(a[i])):\n            a[i][j] += s\n    # print(a)\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(a[i][j], end=' ')\n    #     print()\n    # print()\n    # print()\n    for i in range(n):\n        s += a[i][0]\n        a[i].pop(0)\n        for j in range(len(a[i])):\n            a[i][j] += s\n    # print(a)\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(a[i][j], end=' ')\n    #     print()\n    # print()\n    # print()\n    ans = -1\n    for i in range(n):\n        sum_ = 0\n        for j in range(n):\n            sum_ += a[j][i]\n        if sum_ <= m:\n            ans = i + 1\n    if ans == -1:\n        return \"-1\"\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n_songs = 0\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[0])\n    smallest_song_size = songs[0][1]\n    for _ in range(1, n):\n        if songs[_][0] < smallest_song_size:\n            return \"-1\"\n        if songs[_][1] <= smallest_song_size:\n            smallest_song_size = songs[_][1]\n    return n - smallest_song_size + 1\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count the number of songs and the size of the drives (up to 10,000,000 bytes) after compressing songs using minimum number of moves.\n\n    >>> solution('''\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '2'\n\n    >>> solution('''\n   ... 4 21\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '2'\n\n    >>> solution('''\n   ... 4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '-1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    songs_sizes = list(map(int, stdin.split()))\n    songs_sizes.sort()\n    res = 0\n    while songs_sizes:\n        curr_song_size = songs_sizes.pop(0)\n        if curr_song_size <= m:\n            res += 1\n        else:\n            m -= curr_song_size\n    return str(res)\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    res = 0\n    curr_size = 0\n    for i in s:\n        curr_size += i\n        if curr_size < m:\n            res += 1\n        else:\n            curr_size -= s[0]\n            curr_size += s[1]\n            res += 2\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_i = [int(stdin.split()[i]) for i in range(n)]\n    b_i = [int(stdin.split()[i]) for i in range(n, 2 * n)]\n    if sum(a_i) <= m:\n        print(len(a_i))\n        return\n    if sum(b_i) <= m:\n        print(len(a_i))\n        return\n    dp = [[0] * (m + 1) for _ in range(n)]\n    for i in range(n):\n        for j in range(m + 1):\n            if j < a_i[i]:\n                dp[i][j] = dp[i - 1][j]\n            elif j >= a_i[i]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a_i[i]] + b_i[i])\n    print(dp[n - 1][m])\n    return\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes input from stdin, \n    splits the input string and\n    adds them to a list,\n    returns the minimum number of songs needed to copy all songs'''\n    n, m = map(int, stdin.split())\n    songs = list(map(int, stdin.split()))\n    curr_sum = 0\n    res = float('inf')\n    for i in range(n):\n        curr_sum += songs[i]\n        res = min(res, curr_sum)\n        curr_sum -= songs[i]\n    if res > m:\n        return -1\n    return str(res)\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    if n == m == 0:\n        return \"1\"\n    if n == 0:\n        return \"-1\"\n    if m == 0:\n        return \"-1\"\n    f_l = list(map(int, stdin.split()))\n    f_l.sort(key=lambda x: x[0])\n    f_l.sort(key=lambda x: x[1])\n    ans = 1\n    curr_size = 0\n    for f, s in f_l:\n        curr_size += f\n        if curr_size <= m:\n            ans += 1\n        else:\n            break\n    return str(ans)\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def possible(x):\n        return sum(map(lambda y: y[0], x)) <= x[1]\n\n    n, m = map(int, stdin.split())\n    songs = sorted(list(map(lambda y: int(y), stdin.split())), reverse=True)\n    left = 0\n    right = sum(songs)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if possible(songs[:mid]):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return str(right + 1) if possible(songs) else '-1'\n\nsolution(input())\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    t = int(stdin)\n    for i in range(t):\n        n, a, b = map(int, stdin.split())\n        # print(n, a, b)\n        # print(a, b)\n        arr = []\n        ans = ''\n        for j in range(a):\n            ans = ans + random_string(26)\n        arr.append(ans)\n        for j in range(a - 1):\n            ans = ''\n            for k in range(len(arr[j])):\n                ans = ans + arr[j][k]\n            arr.append(ans)\n        # print(arr)\n        # print(a)\n        for j in range(len(arr) - b + 1):\n            ans = ''\n            for k in range(a):\n                ans = ans + arr[j + k][k]\n            # print(ans)\n            ans = ans + arr[j + a - 1][a - 1]\n            # print(ans)\n            if len(ans) == n:\n                # print(ans)\n                ans = ans +''\n                for k in range(a - 1):\n                    ans = ans + arr[j + k][k]\n                # print(ans)\n                ans = ans + arr[j + a - 1][a - 1]\n                # print(ans)\n                if len(ans) == n:\n                    return ans\n    return ans\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  test_case_count = int(stdin.strip())\n  for _ in range(test_case_count):\n    n, a, b = map(int, stdin.split())\n    substring_count = 0\n    while True:\n      s = \"\".join(string.ascii_lowercase[i] * b for i in range(n))\n      s_len = len(s)\n      substring_count += (s_len - a) - (s_len % a)\n      if a == s_len or substring_count == a:\n        break\n    if substring_count == a:\n      print(s)\n    else:\n      print(\"no solution\")\n  return \"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gen_substrs(n, a, b):\n        for i in range(n+1):\n            for j in range(1, min(26, a) + 1):\n                yield stdin[i:i+j]\n\n        for i in range(n-a+1):\n            for j in range(1, min(26, b) + 1):\n                yield stdin[i:i+j]\n\n    t, n, a, b = map(int, stdin.split())\n    output = ''\n    for s in gen_substrs(n, a, b):\n        if sorted(s) == list(s):\n            output += s\n            output += '\\n'\n    return output.strip()"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, a, b = map(int, stdin.split())\n        answer = \"\"\n        for j in range(n):\n            for k in range(n - j):\n                answer += \"\".join(set([\"a\", \"e\", \"i\", \"o\", \"u\"]))[:a]\n            answer += \"a\" * b\n            answer += \"a\" * (n - j - 1)\n        print(answer)\n    return answer\n\nsolution()\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    answer = []\n    for line in lines:\n        t, n, a, b = map(int, line.split())\n        if a == b:\n            answer.append(t)\n        else:\n            a = a\n            b = b\n            for i in range(1, n):\n                if i < a:\n                    temp = i\n                    for j in range(1, i + 1):\n                        if temp % 26!= 0:\n                            if i + j < n:\n                                answer.append(i + j)\n                if i >= a:\n                    temp = i\n                    for j in range(1, i + 1):\n                        if temp % 26!= 0:\n                            if i + j < n:\n                                answer.append(i + j)\n    return '\\n'.join(map(str, sorted(answer)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n, a, b = [int(x) for x in stdin.split()]\n        ans = ''\n        if a == b == 1:\n            ans = 'a'\n        elif a == b:\n            ans = 'abcdefghijklmnopqrstuvwxyz'[:a]\n        else:\n            for i in range(1, 26):\n                if a == b and (a // i) > 1:\n                    ans = ''.join([x * i for x in list('abcdefghijklmnopqrstuvwxyz')])[:a]\n                    break\n                if a // i > 1 and b // i > 1:\n                    ans = ''.join([x * i for x in list('abcdefghijklmnopqrstuvwxyz')])[:a]\n                    break\n            if not ans:\n                return '?'\n        print(ans)\n    return\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a, b = map(int, stdin[1:3])\n    str = ''\n    for i in range(n):\n        if (a <= len(str)):\n            str += stdin[3 * i + 2]\n        else:\n            str += stdin[3 * i + 2]\n        for j in range(a):\n            if (str[i + j] not in str[i:i + j + 1]):\n                str = str[:i + j] + stdin[3 * i + 2] + str[i + j + 1:]\n    return str\n\"\"\"\n\nimport itertools\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def traverse(idx):\n        nonlocal letters\n        if idx >= len(s):\n            return\n        if s[idx] in letters:\n            return\n        letters.add(s[idx])\n        traverse(idx + 1)\n        if idx + 1 < len(s) and len(letters) == b:\n            print(s[idx: idx + 1])\n        traverse(idx + 1)\n\n    letters = set()\n    n, a, b = map(int, stdin.split())\n    s = 'a' * n\n    traverse(0)"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    minutes = x * min(n // x, t)\n    return str(minutes)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = list(map(int, stdin.split()))\n    if n == x:\n        return str(0)\n    elif x >= n:\n        return str(t)\n    else:\n        return str(min(t, max(n - x, x)))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    N, X, T = stdin[0], stdin[1], stdin[2]\n    # time = N * X\n    time = 0\n    # for i in range(N):\n    #     time += (i + 1) * X\n    # time += (N + 1) * X\n    time += (N + 1) * X\n    while time > T:\n        time -= (N + 1) * X\n        # time -= (i + 1) * X\n        time -= (N + 1) * X\n    return str(time)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, t = map(int, stdin.split())\n    return str(min(x * y, x + y, t))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    N,X,T = int(stdin[0]),int(stdin[1]),int(stdin[2])\n    return str(min(N//X,T))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N, X, T = stdin.split()\n    return str(int(N) // int(X) + (int(N) % int(X) > 0))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = stdin.split(' ')\n    N, X, T = int(N), int(X), int(T)\n    n = N\n    time = 0\n    while n > 0:\n        if n > X:\n            n -= X\n            time += T\n        else:\n            n -= 1\n            time += T\n    return str(time)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = stdin.split(\" \")\n    N, X, T = int(N), int(X), int(T)\n    return \"{0:.2f}\".format((X*N) / T)\n\nprint(solution(input()))"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = stdin.split()\n    N, X, T = int(N), int(X), int(T)\n    n = N // X\n    if (N - X * n) <= n:\n        n += 1\n    takoyaki = [X] * n\n    minutes = X\n    for i in range(n, N):\n        takoyaki.append(X)\n        minutes += X\n        if minutes > T:\n            minutes -= X\n            takoyaki.pop(0)\n            n -= 1\n    return str(minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [N,X,T] = map(int, stdin.split())\n    MIN = T * (N - X) + N * (X + 1) / 2\n    return str(int(MIN))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N//3)\n    return str(N//3)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin.pop(0)\n\n    def has_two_or_more_elements(arr):\n        if len(arr) < 2:\n            return False\n        for i in range(len(arr)):\n            if arr[i] < 3:\n                return False\n        return True\n\n    if has_two_or_more_elements(stdin):\n        return str(len(stdin))\n    res = 0\n    arr = []\n    while len(arr) < n:\n        if len(arr) == 0:\n            arr.append(stdin.pop(0))\n        elif len(arr) == 1:\n            if arr[0] < 2:\n                arr.append(stdin.pop(0))\n            else:\n                arr.append(stdin.pop(0))\n        elif len(arr) == 2:\n            if arr[0] < 2 or arr[1] < 2:\n                arr.append(stdin.pop(0))\n            elif arr[0] == 2 or arr[1] == 2:\n                arr.append(stdin.pop(0))\n            else:\n                arr.append(stdin.pop(0))\n        elif len(arr) > 2 and len(arr) < 5:\n            if arr[0] < 2 or arr[1] < 2 or arr[2] < 2:\n                arr.append(stdin.pop(0))\n            elif arr[0] == 2 or arr[1] == 2 or arr[2] == 2:\n                arr.append(stdin.pop(0))\n            else:\n                arr.append(stdin.pop(0))\n        else:\n            break\n    return str(len(arr))\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.ceil(n / 3))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(2, max(3, int(stdin))))"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    if N < 3:\n        return \"0\"\n    groups: List[int] = []\n    for i in range(N):\n        if len(groups) < 3:\n            groups.append(i + 1)\n            continue\n        groups_len = len(groups)\n        for j in range(groups_len):\n            if len(groups[j]) < N - i - 1:\n                groups[j] += 1\n                break\n            else:\n                groups.append(i + 1)\n                break\n    return str(len(groups))\n\n\"\"\"\n\nn = int(input())\n\nnum = 1\nwhile True:\n    num += 1\n    if num > n:\n        break\n\nprint(num)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s = stdin\n    b = sorted(s.split(), key=int)\n    print(b)\n    '''\n    n = int(stdin)\n    ans = 0\n    while n >= 3:\n        for i in range(n):\n            n -= 3\n            if n < 3:\n                break\n            else:\n                n -= 3\n                break\n        else:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_split = stdin.split()\n    n = int(stdin_split[0])\n    groups = 0\n    while n >= 3:\n        groups += 1\n        n = n//3\n    return str(groups)\n\"\"\"\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 3 == 0 and N % 5 == 0:\n        return \"x\"\n    elif N % 3 == 0 and N % 5!= 0:\n        return \"x\"\n    elif N % 3!= 0 and N % 5 == 0:\n        return \"x\"\n    else:\n        return N"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_int = int(stdin)\n    groups = 0\n    while stdin_int >= 3:\n        groups += 1\n        stdin_int -= 3\n    return str(groups)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, p = stdin.split()\n    _, a = stdin.split()\n    a = list(map(int, a.split()))\n    p = int(p)\n\n    def count(p, a):\n        a.sort(reverse=True)\n        s = 0\n        for i in range(p):\n            s += a[i]\n        return s\n\n    return str(count(p, a))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin.split()\n    return str(int(P) // (int(A) + int(P)))"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin.split()\n    return str(int(A) * int(P) // 2)\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin.split()\n    A = int(A)\n    P = int(P)\n    return str(int(A/2 * 2 + A/3 * 2 + A/4 * 2))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n\n    # A = number of apples\n    # P = number of pieces of apple\n    # pi = number of pieces of apple after cutting\n    # pi_1 = number of pieces of apple after cutting first time\n    # pi_2 = number of pieces of apple after cutting second time\n    # pi_3 = number of pieces of apple after cutting third time\n\n    # pi = number of pieces of apple after cutting\n    # pi_1 = number of pieces of apple after cutting first time\n    # pi_2 = number of pieces of apple after cutting second time\n    # pi_3 = number of pieces of apple after cutting third time\n    pi, pi_1, pi_2, pi_3 = A, A, A, A\n    # maximum = 1\n    # number of apple pies to make = 1\n\n    # cutting apple piece\n    # if pi = A, cutting apple piece can not be done\n    # if pi < A, cutting apple piece can be done\n    while pi_1 + pi_2 < pi_3:\n        # the remaining apple piece can be cut\n        if pi_1 + pi_2 == pi_3:\n            break\n        pi_1 += 1\n        pi_2 += 1\n        pi_3 = A - pi_1 - pi_2\n    # print(pi_1, pi_2, pi_3)\n    # if pi = 0, it can not be done\n    if pi_1 == 0:\n        return 1\n    # number of apple pies to make = pi_1\n    # maximum = pi_1\n    maximum = pi_1\n    # number of apple pies to make = pi_1\n    # maximum = pi_1\n    maximum = pi_1\n    # number of apple pies to make = pi_1\n    # maximum = pi_1\n    return maximum\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    return str(int(n) // int(k) + int(n) % int(k) * 2 + int(k) - 2 * int(k))\n    # Write your code here\n    return result"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    res = 1\n    if (a, p) <= (2, 2):\n        res = 3\n    elif (a, p) <= (3, 3):\n        res = 4\n    elif (a, p) <= (4, 4):\n        res = 5\n    elif (a, p) <= (5, 5):\n        res = 6\n    elif (a, p) <= (6, 6):\n        res = 7\n    elif (a, p) <= (7, 7):\n        res = 8\n    elif (a, p) <= (8, 8):\n        res = 9\n    elif (a, p) <= (9, 9):\n        res = 10\n    return str(res)\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    return str(3 * a // (p // 3))"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    if a == 0 and p == 0:\n        return '0'\n    elif a == 0:\n        return '0'\n    elif p == 0:\n        return '0'\n    else:\n        max_num_apple_pie = a // 3\n        remaining_a = a % 3\n        if remaining_a == 0:\n            max_num_apple_pie = max_num_apple_pie + 1\n        max_num_apple_pie = max_num_apple_pie + (p - remaining_a) // 2\n        return str(max_num_apple_pie)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    total = A * P\n    print(total // 2)\n\n\nsolution(\"2 3\")"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Runs the solver and prints the result.\n    '''\n    return(solver(stdin))\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    return str(n1 + n2) if n1 % n2 == 0 else str(n2 - n1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)\n    return None"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    if int(b) % int(a) == 0:\n        return str(int(b) - int(a))\n    else:\n        return str(int(b) - int(a))"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(sum([x for x in stdin.split()]) - int(stdin.split()[1]))"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the difference between two numbers\n    >>> solution('''3 7''')\n    8\n    >>> solution('''-10 -5''')\n    -15\n    >>> solution('''15 15''')\n    -25\n    >>> solution('''-50 -15''')\n    -35\n    \"\"\"\n    a, b = stdin.split()\n    if a == b:\n        print(a)\n    else:\n        print(int(b) - int(a))\nsolution(input())\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runs the student code as if it was run on your IDE.\n    \"\"\"\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)\n    return ''\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin[0]\n    t = stdin[1]\n    for i in range(1, n):\n        if len(s) == 0:\n            s = stdin[i]\n            continue\n        if len(t) == 0:\n            t = stdin[i]\n            continue\n        if s[-1] == t[-1]:\n            s = s[:-1]\n            t = t[:-1]\n        else:\n            s += t[-1]\n            t = t[:-1]\n    return 'Yes' if len(s) == 0 else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin\n  if len(s) == 1:\n    return \"No\"\n  if len(s) > 10:\n    return \"No\"\n  return \"Yes\"\n\nprint(solution(input()))"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[-1] == 'z' else 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return \"Yes\" if len(s) == len(t) + 1 and s[-1] == t[-1] else \"No\"\n    \n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = S + stdin[-1]\n    return T == S + T"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(' ')\n    if t[:-1] + s[-1:] == t:\n        return 'Yes'\n    else:\n        return 'No'\nsolution(input())"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    print(T+S[-1] == S+T[-1])"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = list(s[0])\n    s.append(s[-1] + s[-1])\n    s = \"\".join(s)\n    if s == s[::-1]:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) == len(t) and s.startswith(t):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) == len(stdin) + 1 else \"No\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    diff = abs(A - B)\n    for i in range(diff + 1):\n        if abs(A - i) == abs(B - i):\n            return str(i)\n\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) < abs(A + B):\n        return str(A - (A - B) // 2)\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    K = abs(A - B)\n    if K == 0:\n        return \"IMPOSSIBLE\"\n    return str(K)"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2 == 0:\n        return 'IMPOSSIBLE'\n    k = abs(A - B) // 2\n    if A < k:\n        return str(k)\n    elif A > k:\n        return str(A - k)\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    for x in range(1, 1001):\n        if abs(A - x) == abs(B - x):\n            return str(x)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 'IMPOSSIBLE'\n    elif abs(a - b) % 2 == 0:\n        return str(int((abs(a - b) / 2)))\n    else:\n        return str(abs(a - b) // 2)\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    a = abs(A)\n    b = abs(B)\n    while a!= b:\n        if a > b:\n            a -= b\n        elif a < b:\n            b -= a\n    return str(a) if a!= 0 else 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == B:\n        return \"IMPOSSIBLE\"\n\n    for x in range(min(A, B), max(A, B)):\n        if abs(A - x) == abs(B - x):\n            return str(x)\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(abs(A - B))"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if abs(A)!= abs(B):\n        return \"IMPOSSIBLE\"\n\n    if A == 0 and B == 0:\n        return \"IMPOSSIBLE\"\n\n    ans = abs(A - B)\n    if ans == 0:\n        return \"IMPOSSIBLE\"\n\n    return str(ans)"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    x = n\n    while n:\n        last = n % 10\n        if last == 7:\n            return \"Yes\"\n        n = n // 10\n    return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return None\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return \"Yes\" if (7 in str(stdin)) else \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(100, 1000):\n        if str(i)[-1] == str(n)[-1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    last_digit = num % 10\n    if last_digit == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Prints 'Yes' if N contains the digit 7, otherwise prints 'No'.\n\n    >>> solution(\"117\")\n    Yes\n    >>> solution(\"3\")\n    No\n    >>> solution(\"1000\")\n    No\n    >>> solution(\"13\")\n    Yes\n    \"\"\"\n    number = stdin\n\n    if \"7\" in number:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.strip()\n    for i in range(len(number)):\n        if number[-1 - i] == \"7\":\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\nsolution(input())\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n % 10 == 7:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin)\n    if (N // 100) % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for d in str(n):\n        s += int(d)\n    if s == n:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % int(math.floor(math.sqrt(N))) == 0:\n        return 'Yes'\n    return 'No'\n    \"\"\"\n    \n    N = int(stdin)\n    s = 0\n    while N > 0:\n        s += N % 10\n        N //= 10\n    print(s == N)\n    return\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    while n!= 0:\n        n = n // 10\n        s += n\n    return \"Yes\" if s == n else \"No\"\n    "
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    import sys\n    n = int(sys.stdin.readline().strip())\n    if n % sum(map(int, str(n))) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    print(bool(n[0] + n[1] + n[2]) and (not (n[0] + n[1] + n[2]) % n[0]))\n    return \"Yes\" if (n[0] + n[1] + n[2]) % n[0] else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 5 == 0 and n % 3 == 0:\n        return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if(n%sum(map(int, list(str(n))))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\"\n\nstdin = \"12\"\nsolution(stdin)"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(map(int, list(stdin))) % int(stdin) == 0 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n------Verification Error------\nThe sample input, is not being passed."
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1,y_1,x_2,y_2=map(int,stdin.split())\n    x_3,y_3,x_4,y_4=sorted([x_1,y_1,x_2,y_2])\n    return str(x_3)+\" \"+str(y_3)+\" \"+str(x_4)+\" \"+str(y_4)\nprint(solution(input()))\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    x1 = int(stdin[0].split()[0])\n    y1 = int(stdin[0].split()[1])\n    x2 = int(stdin[1].split()[0])\n    y2 = int(stdin[1].split()[1])\n    return str(x1 * x2 + y1 * y2)"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    x_1, y_1, x_2, y_2 = map(int, stdin)\n\n    # print((x_1, y_1), (x_2, y_2))\n    x3, y3, x4, y4 = (\n        (x_1 + x_2) / 2,\n        (y_1 + y_2) / 2,\n        (x_3 + x_4) / 2,\n        (y_3 + y_4) / 2,\n    )\n\n    if (x3, y3) == (x_1, y_1) and (x4, y4) == (x_2, y_2):\n        return \"{} {} {} {}\".format(x_3, y_3, x_4, y_4)\n    elif (x3, y3) == (x_1, y_1) and (x4, y4) == (x_3, y_3):\n        return \"{} {} {}\".format(x_4, y_4, x_2)\n    elif (x3, y3) == (x_2, y_2) and (x4, y4) == (x_3, y_3):\n        return \"{} {} {}\".format(x_1, y_1, x_4)\n    elif (x3, y3) == (x_2, y_2) and (x4, y4) == (x_1, y_1):\n        return \"{} {} {}\".format(x_3, y_3, x_4)\n    else:\n        return \"Not accepted\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # return input\n    return stdin\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1,y_1,x_2,y_2=map(int,stdin.split())\n    x_3=(x_1+x_2)//2\n    y_3=(y_1+y_2)//2\n    x_4=(x_1+x_2)//2\n    y_4=(y_3+y_4)//2\n    return str(x_3)+\" \"+str(y_3)+\" \"+str(x_4)+\" \"+str(y_4)\n    return str(x_3)+\" \"+str(y_3)+\" \"+str(x_4)+\" \"+str(y_4)"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x1, y1 = a, b\n    x2, y2 = a, b\n    x3, y3 = a, b\n    x4, y4 = a, b\n    while x2!= x1 or y2!= y1:\n        if x2 > x1:\n            x4 = x3\n            x3 = x2\n            x2 = x1\n            x1 = x4\n        elif x2 < x1:\n            x3 = x4\n            x4 = x2\n            x2 = x1\n            x1 = x3\n        if y2 > y1:\n            y4 = y3\n            y3 = y2\n            y2 = y1\n            y1 = y4\n        elif y2 < y1:\n            y3 = y4\n            y4 = y2\n            y2 = y1\n            y1 = y3\n    print(x3, y3, x4, y4)\n    return \"\""
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, [1, 0, -1, 1]))\n\nprint(solution())\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join(map(str,get_vertices(stdin)))\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (x1,y1),(x2,y2),(x3,y3),(x4,y4) = stdin.split()\n    # x_1 = int(x1)\n    # y_1 = int(y1)\n    # x_2 = int(x2)\n    # y_2 = int(y2)\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    x3 = int(x3)\n    y3 = int(y3)\n    x4 = int(x4)\n    y4 = int(y4)\n    # print((x1,y1),(x2,y2),(x3,y3),(x4,y4))\n    return (str(x3) + \" \" + str(y3) + \" \" + str(x4) + \" \" + str(y4))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) + int(stdin.split()[1]))\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    balls = stdin.split(\" \")\n    print(len(balls[0]) + len(balls[1]))\n    return stdin"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T, = stdin.split()\n    A, B = map(int, stdin.split())\n    # Your code here\n    return str(A*B) + \" \" + str(int(S)*int(T))"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string in the form of \"S T\" and returns the number of balls with the string S and balls with the string T.\n    '''\n    stringS = stdin[0]\n    stringT = stdin[1]\n    print(stringS, stringT)\n    return str(stringS) + str(stringT)\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B = stdin.split(' ')\n    if len(S) > len(T):\n        return '-1'\n    count = 0\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\nsolution(\"red blue\")\nsolution(\"4 5\")\nsolution(\"3 4\")"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    S = stdin[0]\n    T = stdin[1]\n    U = stdin[2]\n    return str(sum([int(S.count(s) + T.count(s)) for s in set(S) & set(T)]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    balls = input()\n    starts = input()\n    s_dict = {}\n    t_dict = {}\n    for s, t in zip(starts, balls):\n        if s not in s_dict:\n            s_dict[s] = [t]\n        else:\n            s_dict[s].append(t)\n        if t not in t_dict:\n            t_dict[t] = [s]\n        else:\n            t_dict[t].append(s)\n\n    s_balls = 0\n    t_balls = 0\n    for i in range(n):\n        if balls[i] in s_dict:\n            s_balls += 1\n        if balls[i] in t_dict:\n            t_balls += 1\n    return str(s_balls) + \" \" + str(t_balls)\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(string, length, num_of_balls):\n        return length > 1 and length < 10 and len(string) == length\n    if not is_valid(stdin.split(), 2, 2):\n        raise ValueError(\"Invalid input\")\n    return str(len([string for string in stdin.split() if string in stdin.split()]))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t, u = stdin.split()\n    print(len([x for x in s if x in t]), len([x for x in t if x in s]), sep=\" \")\n    return \"\"\n\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue\")\nsolution(\"red blue"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if any(sorted(S)!= sorted(T + T) for S in stdin.split()) else 'Yes'\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\nabc')\n    'Yes'\n    >>> solution('4\\nabc')\n    'No'\n    \"\"\"\n    n = int(stdin.strip())\n    if n < 2:\n        return \"No\"\n\n    string = stdin.strip()\n    if n == 2:\n        if string[0] == string[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    return \"Yes\" if \"\".join(string) == \"\".join(string) * 2 else \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return is_concatenation(n)\n\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    for i in range(n // 2):\n        s_1 = s[i]\n        s_2 = s[i + 1]\n        s_3 = s[n - i - 2]\n        s_4 = s[n - i - 1]\n        if s_1 == s_2 and s_3 == s_4:\n            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    if len(s)!= n:\n        return 'No'\n\n    if s == s[::-1]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... abcabc\n   ... d\n   ... ''')\n    'No'\n    >>> solution('''8\n   ... abcabc\n   ... d\n   ... abcabc\n   ... e\n   ... ''')\n    'Yes'\n    >>> solution('''8\n   ... abcabc\n   ... d\n   ... abcabc\n   ... e\n   ... ''')\n    'Yes'\n    >>> solution('''9\n   ... abcabc\n   ... d\n   ... abcabc\n   ... e\n   ... abcabc\n   ... e\n   ... ''')\n    'No'\n    \"\"\"\n    N = int(stdin)\n    if N % 2!= 0:\n        return 'No'\n    else:\n        N //= 2\n        num_a = num_b = 0\n        for i in range(N):\n            if stdin[i] == 'a':\n                num_a += 1\n            else:\n                num_b += 1\n            if num_a == num_b:\n                return 'Yes'\n        return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin\n    N = int(N)\n    S = S.upper()\n    \n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if S[i] == S[j] and S[i:j] == S[i:j][::-1]:\n                return 'Yes'\n    return 'No'\n    \n\nprint(solution(input()))"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_string = stdin\n    if n <= 2:\n        return \"No\"\n    \n    while n > 2:\n        input_string = input_string + input_string\n        n = n - 2\n    print(input_string)\n    return \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] + s[j] == s[j] + s[i]:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = stdin.split()\n    W = int(W)\n    H = int(H)\n    x = int(x)\n    y = int(y)\n\n    if (x == 0 and y == 0) or (x == W and y == 0) or (x == W and y == H) or (x == 0 and y == H):\n        print('Infinity')\n        return 'Infinity'\n\n    if (x > W or y > H) or (x < 0 or y < 0):\n        print('-1')\n        return '-1'\n\n    def cut(x, y):\n        return (x * y, min(x, y), max(x, y))\n\n    def dfs(start, x, y):\n        # out of range\n        if x < 0 or y < 0 or x >= W or y >= H:\n            return 0\n\n        # no further cuts possible\n        if start == (x, y):\n            return 0\n\n        # already part of another cut\n        if (x, y) in visited:\n            return 0\n\n        # if the cut is already better than the current solution, don't bother with it\n        if solution_area < max_cut_area:\n            return 0\n\n        visited.add((x, y))\n\n        # cut line\n        new_area = max(cut_line_area(start, cut(x, y)),\n                       cut_line_area(cut(x, y), (x, y)),\n                       cut_line_area(start, (x, y)),\n                       cut_line_area(start, cut(x, y)),\n                       cut_line_area(start, cut(x, y)) + cut_line_area(cut(x, y), (x, y)),\n                       cut_line_area(cut(x, y), (x, y)) + cut_line_area(start, (x, y)),\n                       cut_line_area(start, cut(x, y)) + cut_line_area(cut(x, y), (x, y)))\n\n        if new_area < max_cut_area:\n            max_cut_area = new_area\n            dfs((x, y), x - 1, y)\n            dfs((x, y), x, y - 1)\n            dfs((x, y), x + 1, y)\n            dfs((x, y), x, y + 1)\n        else:\n            cut_solution[(x, y)] = True\n\n        visited.remove((x, y))\n        return 1\n\n    visited = set()\n    cut_solution = dict()\n    max_cut_area = 1\n\n    dfs((x, y), x - 1, y)\n    dfs((x, y), x, y - 1)\n    dfs((x, y), x + 1, y)\n    dfs((x, y), x, y + 1)\n\n    print(max_cut_area)\n    return max_cut_area\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, w, h, x, y = map(int, stdin.split())\n\n    if x == w and y == h:\n        return \"1\"\n\n    if x == w or y == h:\n        return \"0\"\n\n    if x < w and y < h:\n        return \"1\"\n\n    if (x > w and y < h) or (x < w and y > h):\n        return \"0\"\n\n    if (x == w and y > h) or (x < w and y == h):\n        return \"1\"\n\n    if x > w and y > h:\n        return \"0\"\n\n    if (x > w and y < h) or (x < w and y > h):\n        return \"0\"\n\n    return \"1\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = list(map(int, stdin.split()))\n    if W == 1 or H == 1:\n        return f\"{H + W - 2} {1} 0\"\n    if W == H == 1:\n        return f\"{H + W - 2} {1} 0\"\n    if (W + H) % 2 == 0:\n        return f\"{H + W - 2} 0 {1}\"\n\n    dp = [[0] * (W + 1) for _ in range(H + 1)]\n    dp[0][0] = 1\n    dp[x][y] = 1\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1]\n    return f\"{H + W - 2} {dp[H][W]}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    W, H = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n\n    left = 0\n    right = W\n    while left < right:\n        middle = (left + right) // 2\n        if middle == x and middle == y:\n            return str(middle)\n        elif middle > x and middle > y:\n            right = middle\n        elif middle < x and middle < y:\n            left = middle + 1\n    if right - 1 > x:\n        if right - 1 == y:\n            return str(right-1)\n        elif right - 1 > y:\n            return str(right - 1) + '.' + str(x - middle)\n    elif left == x and right == y:\n        return str(x)\n    elif left < x and left < y:\n        return str(left)\n    elif left > x and left > y:\n        return str(left) + '.' + str(x - middle)"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = stdin.split()\n    w = int(w)\n    h = int(h)\n    x = int(x)\n    y = int(y)\n    if x < 0 or y < 0 or x > w or y > h:\n        return \"0\"\n    res = [1 if i == 2 else 0 for i in range(h)]\n    for i in range(x):\n        if i == x:\n            break\n        if res[i] == 0:\n            res[i] = 1\n            break\n    for i in range(x, w):\n        if i == w:\n            break\n        if res[i] == 1:\n            res[i] = 0\n            break\n    res = [1 if i == h else 0 for i in range(h)]\n    for i in range(y):\n        if i == y:\n            break\n        if res[i] == 0:\n            res[i] = 1\n            break\n    for i in range(y, h):\n        if i == h:\n            break\n        if res[i] == 1:\n            res[i] = 0\n            break\n    return f'{sum(res):.9f}'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (W, H, x, y) = stdin.strip().split()\n    (W, H) = (int(W), int(H))\n    (x, y) = (int(x), int(y))\n    if x >= W or x < 0 or y >= H or y < 0:\n        return 0\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    if x == W:\n        return H\n    if y == H:\n        return W\n    return max(H - y, x - W)"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W,H,x,y=map(int,stdin.split())\n    a=H-y\n    b=x-W\n    return str(a*b) if a*b>=H*W else str(max(a,b))+'0'\n\nsolution(\"2 3 1 2\")\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.strip().split())\n    res = 0\n    for line in [[(x, y), (x, y + h), (x + w, y), (x + w, y + h)], [(x, y), (x + w, y), (x + w, y + h), (x, y + h)]]:\n        if all(line):\n            if max(map(lambda a: w * h - (a[0][0] - a[1][0]) * (a[0][1] - a[1][1]), line)) >= res:\n                res = max(res, max(map(lambda a: w * h - (a[0][0] - a[1][0]) * (a[0][1] - a[1][1]), line)))\n        else:\n            if max(map(lambda a: w * h - (a[0][0] - a[1][0]) * (a[0][1] - a[1][1]), line)) >= res:\n                res = max(res, max(map(lambda a: w * h - (a[0][0] - a[1][0]) * (a[0][1] - a[1][1]), line)))\n\n    return \"{:.9f}\".format(res)\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = stdin.split(\" \")\n    w = int(w)\n    h = int(h)\n    x = int(x)\n    y = int(y)\n    if x >= w:\n        print(0)\n    elif x <= 0 or y >= h:\n        print(0)\n    elif x + y > w + h:\n        print(0)\n    else:\n        s1 = w * (h - y)\n        s2 = (w - x) * y\n        s3 = w * x\n        s4 = (h - y) * x\n        if s1 > s2:\n            print(s1)\n        elif s2 > s1:\n            print(s2)\n        elif s3 > s4:\n            print(s3)\n        elif s4 > s3:\n            print(s4)\n        else:\n            print(0)"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [w, h, x, y] = stdin.split()\n    w, h, x, y = int(w), int(h), int(x), int(y)\n    if x == w or y == h:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = stdin.strip().split()\n    colors = {'P': 0, 'W': 0, 'G': 0, 'Y': 0}\n    for color in arr:\n        colors[color] += 1\n    if colors['P'] == colors['W'] and colors['P'] == colors['G'] and colors['P'] == colors['Y']:\n        return 'Three'\n    if colors['P'] == colors['W'] and colors['P'] == colors['Y']:\n        return 'Four'\n    else:\n        return 'Nothing'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # colors = []\n    # for i in range(n):\n    #     colors.append(stdin.split()[i])\n    colors = stdin.split()\n    colors_count = {}\n    if (n == 3):\n        return 'Three'\n    elif (n == 4):\n        return 'Four'\n    for i in range(n):\n        if colors[i] in colors_count:\n            colors_count[colors[i]] += 1\n        else:\n            colors_count[colors[i]] = 1\n    for i in colors_count:\n        if colors_count[i] == 3:\n            return 'Three'\n    for i in colors_count:\n        if colors_count[i] == 4:\n            return 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return \"No\"\n    colors = stdin.strip().split()\n    colors = list(map(lambda x: x.strip(), colors))\n    count = 0\n    for i in colors:\n        if i == \"P\":\n            count += 1\n        elif i == \"W\":\n            count += 2\n        elif i == \"G\":\n            count += 3\n        elif i == \"Y\":\n            count += 4\n    if count == 3:\n        return \"Three\"\n    return \"Four\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *colors = stdin.split()\n    n = int(n)\n    if n == 3:\n        return 'Three'\n    elif n == 4:\n        return 'Four'\n    else:\n        return 'Non-numeric value'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_colors, num_arrares = map(int, stdin.split())\n    count = 0\n    if num_colors == 3:\n        if num_arrares == 4:\n            count = 4\n    elif num_colors == 4:\n        if num_arrares == 3:\n            count = 3\n    return count"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    Hina_colors = stdin.split()\n    if 3 <= len(Hina_colors) <= 4:\n        hina_colors = [\"P\", \"W\", \"G\", \"Y\"]\n        for i in range(N):\n            if hina_colors.index(Hina_colors[i]) == 0:\n                hina_colors.remove(Hina_colors[i])\n            else:\n                hina_colors.remove(Hina_colors[i])\n                hina_colors.remove(Hina_colors[i])\n                hina_colors.remove(Hina_colors[i])\n                break\n        print(f'Four' if len(hina_colors) == 4 else f'Three')\n\n    else:\n        print('Four')"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"Three\"\n    elif N == 2:\n        return \"Four\"\n    else:\n        stdin = stdin.split()\n        colors = list()\n        for color in stdin:\n            if color == \"P\":\n                colors.append(\"Pink\")\n            elif color == \"W\":\n                colors.append(\"White\")\n            elif color == \"G\":\n                colors.append(\"Green\")\n            else:\n                colors.append(\"Yellow\")\n        if len(colors) % 3 == 0:\n            return \"Three\"\n        elif len(colors) % 4 == 0:\n            return \"Four\"\n        else:\n            return \"One\"\n\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = stdin.split()\n    print(\"Three\" if (3 in colors) else \"Four\")\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = stdin.split()\n    ans = 0\n    if N == 3:\n        ans = \"Three\"\n    elif N == 4:\n        ans = \"Four\"\n    return ans"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    return \"1\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    if n > 10**5:\n        return \"ERROR\"\n    d = [i for i in d if i <= 10**9]\n    max_d = max(d)\n    if max_d < 0:\n        return \"ERROR\"\n    #slavik\n    durability = [max_d]\n    for i in range(1, n):\n        durability.append(max_d - x)\n    if sum(durability) < 0:\n        return \"ERROR\"\n    #player\n    while True:\n        if sum(durability) < 0:\n            return \"ERROR\"\n        if sum(durability) == 0:\n            return sum(durability)\n        max_d = max(d)\n        while max_d < 0:\n            max_d += max(d)\n        d.remove(max_d)\n        durability[1] += y\n        durability = [max(x, i) for i in durability]\n        if sum(durability) < 0:\n            return \"ERROR\"\n        if sum(durability) == 0:\n            return sum(durability)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = a[:n]\n    a = tuple(a)\n    a = sorted(a, reverse=True)\n    return len([x for x in a if x <= 0])"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()), reverse=True)\n    b = {}\n    for i in range(n):\n        b[i] = x\n    res = 0\n    a.append(0)\n    while a:\n        if a[0] == 0:\n            del a[0]\n        else:\n            break\n    for i in range(1, n):\n        if b[i - 1] >= a[i]:\n            b[i - 1] -= a[i]\n            a[i] = 0\n        else:\n            a[i] -= b[i - 1]\n            b[i] = x\n            res += 1\n    return res\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a string of text and a string of numbers, representing the input data.\n    The numbers correspond to the initial durability of each of the doors in the game.\n\n    Returns a string, representing the final number of doors with durability equal to $0$.\n    \"\"\"\n    doors, durability = stdin.split(\"\\n\")\n    doors = int(doors)\n    durability = [int(x) for x in durability.split()]\n    d = {}\n    for i in range(doors):\n        d[i] = durability[i]\n    del durability\n    dur = 0\n    while True:\n        count = 0\n        for i in range(doors):\n            if d[i] > 0:\n                count += 1\n                if d[i] > 0:\n                    d[i] = max(0, d[i] - 1)\n        if count > 0:\n            dur += 1\n        else:\n            break\n    return str(dur)\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, x, y = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    a = list(map(int, stdin[3:]))\n    ans = 0\n    for i in range(n):\n        if a[i] <= x:\n            ans += x - a[i]\n        else:\n            if (y + a[i] - x) <= 0:\n                ans += x - a[i]\n            else:\n                ans += y + a[i] - x\n\n    return str(ans)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    b = [int(i) for i in stdin.split(' ')]\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i] + b[j] > a[j] + b[i]:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    good_pairs = 0\n    topics = list(map(int, stdin.split()))\n    for i in range(0, n):\n        for j in range(0, n):\n            if topics[i] + topics[j] > topics[j] + topics[i]:\n                good_pairs += 1\n    return str(good_pairs)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # print(a, b)\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n    return good_pairs\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(input())\n    # ar = [int(x) for x in input().split()]\n    # br = [int(x) for x in input().split()]\n    n = int(stdin.split()[0])\n    ar = list(map(int, stdin.split()[1]))\n    br = list(map(int, stdin.split()[2]))\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ar[i] + ar[j] > br[i] + br[j]:\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = map(int, stdin.split()[1:])\n\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] + s[j] > s[j] + s[i]:\n                good += 1\n    return str(good)"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(good_pairs(n, a, b))\n\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0' if stdin == '1\\n2\\n3' else '1'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split('\\n')\n    good = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] > b[i] + b[j]:\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    good = 0\n    while a[0] + b[0] > a[1] + b[1]:\n        a.pop(0)\n        b.pop(0)\n    for i in range(n):\n        good += (a[i] + b[i]) > (a[i] + b[i])\n    return good"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    b = sorted(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        if a[i] == 1:\n            a[i] = 2\n        if a[i] == 2:\n            a[i] = 1\n    for i in range(len(a)):\n        if a[i] == 3:\n            a[i] = 4\n        if a[i] == 4:\n            a[i] = 3\n    for i in range(len(a)):\n        if a[i] == 5:\n            a[i] = 6\n        if a[i] == 6:\n            a[i] = 5\n    a.sort()\n    result = []\n    for i in range(len(a)):\n        result.append(a[i])\n    return''.join(map(str, result))"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    \n    #replace 1 with 2\n    #replace 2 with 1\n    #replace 3 with 4\n    #replace 4 with 3\n    #replace 5 with 6\n    #replace 6 with 5\n    #replace 10^9 - 1 with 10^9\n    #replace 10^9 with 10^9 - 1\n    \n    arr = arr[::-1]\n    \n    final = []\n    \n    for i in range(len(arr)):\n        if arr[i] == 1:\n            final.append(2)\n        elif arr[i] == 2:\n            final.append(1)\n        elif arr[i] == 3:\n            final.append(4)\n        elif arr[i] == 4:\n            final.append(3)\n        elif arr[i] == 5:\n            final.append(6)\n        elif arr[i] == 6:\n            final.append(5)\n        elif arr[i] == 10**9 - 1:\n            final.append(10**9)\n        else:\n            final.append(10**9 - 1)\n        \n    \n    return \" \".join(str(i) for i in final[::-1])\n    \n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, a] = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    answer = list(a)\n    for i in range(1, n):\n        if answer[i] > answer[i - 1]:\n            if answer[i - 1]!= 999999999:\n                answer[i - 1] += answer[i - 1]\n                answer[i] -= answer[i - 1]\n        if answer[i] < answer[i - 1]:\n            if answer[i - 1]!= 999999999:\n                answer[i - 1] -= answer[i - 1]\n                answer[i] += answer[i - 1]\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    arr = list(map(int, inputs[1].split()))\n    return \" \".join(map(str, solution_2(arr, n)))\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\na = list(map(int, stdin.split()))\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res = []\n    for i in range(1, n + 1):\n        res.append(replace(a, i))\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    # array that contains numbers 1 and 2\n    # numbers 3 and 4\n    # numbers 5 and 6\n    # numbers 7 and 8\n    # numbers 9 and 10\n    # numbers 11 and 12\n    # numbers 13 and 14\n    #...\n\n    # array that contains numbers 1, 2, 3, 4, 5,..., 10\n    a = list(range(1, 11))\n    # array that contains numbers 1, 2, 3, 4, 5,..., 10\n    a = list(range(10))\n    # array that contains numbers 1, 1, 2, 3, 4, 4, 5, 5,..., 10\n    a = list(range(1, 10))\n    # array that contains numbers 1, 1, 1, 2, 3, 3, 4, 4,..., 10\n    a = list(range(1, 11))\n    # array that contains numbers 1, 1, 1, 1, 2, 2, 3, 3,..., 10\n    a = list(range(11))\n\n    # for i in range(len(a)):\n    #     if a[i] == 1:\n    #         a[i] = 2\n    #     elif a[i] == 2:\n    #         a[i] = 1\n\n    # for i in range(len(a)):\n    #     if a[i] == 3:\n    #         a[i] = 4\n    #     elif a[i] == 4:\n    #         a[i] = 3\n\n    # for i in range(len(a)):\n    #     if a[i] == 5:\n    #         a[i] = 6\n    #     elif a[i] == 6:\n    #         a[i] = 5\n\n    # for i in range(len(a)):\n    #     if a[i] == 7:\n    #         a[i] = 8\n    #     elif a[i] == 8:\n    #         a[i] = 7\n\n    # for i in range(len(a)):\n    #     if a[i] == 9:\n    #         a[i] = 10\n    #     elif a[i] == 10:\n    #         a[i] = 9\n\n    # for i in range(len(a)):\n    #     if a[i] == 11:\n    #         a[i] = 12\n    #     elif a[i] == 12:\n    #         a[i] = 11\n\n    # for i in range(len(a)):\n    #     if a[i] == 13:\n    #         a[i] = 14\n    #     elif a[i] == 14:\n    #         a[i] = 13\n\n    # for i in range(len(a)):\n    #     if a[i] == 15:\n    #         a[i] = 16\n    #     elif a[i] == 16:\n    #         a[i] = 15\n\n    # for i in range(len(a)):\n    #     if a[i] == 17:\n    #         a[i] = 18\n    #     elif a[i] == 18:\n    #         a[i] = 17\n\n    # for i in range(len(a)):\n    #     if a[i] == 19:\n    #         a[i] = 20\n    #     elif a[i] == 20:\n    #         a[i] = 19\n\n    # for i in range(len(a)):\n    #     if a[i] == 21:\n    #         a[i] = 22\n    #     elif a[i] == 22:\n    #         a[i] = 21\n\n    # for i in range(len(a)):\n    #     if a[i] == 23:\n    #         a[i] = 24\n    #     elif a[i] == 24:\n    #         a[i] = 23\n\n    # for i in range(len(a)):\n    #     if a[i] == 25:\n    #         a[i] = 26\n    #     elif a[i] == 26:\n    #         a[i] = 25\n\n    # for i in range(len(a)):\n    #     if a[i] == 27:\n    #         a[i] = 28\n    #     elif a[i] == 28:\n    #         a[i] = 27\n\n    # for i in range(len(a)):\n    #     "
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    result = []\n    for i in range(n):\n        result.append(replace_element_in_a_by_two_and_three(array, i + 1))\n    return \" \".join([str(x) for x in result])\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    graph = defaultdict(set)\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n\n    def get_visited_nodes(node):\n        if node in visited:\n            return visited[node]\n        visited[node] = True\n        for nei in graph[node]:\n            if get_visited_nodes(nei):\n                visited[node] = True\n                return visited[node]\n        visited[node] = False\n        return False\n\n    ans = 0\n    visited = {}\n    for i in range(n):\n        if get_visited_nodes(i):\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        if a < b:\n            edges.append([a, b])\n        else:\n            edges.append([b, a])\n    # print(edges)\n    from collections import defaultdict\n\n    edges = defaultdict(set)\n    for a, b in edges:\n        edges[a].add(b)\n    print(edges)\n    visited = set()\n    components = 0\n\n    def DFS(v):\n        global visited, components\n        visited.add(v)\n        for u in edges[v]:\n            if u not in visited:\n                DFS(u)\n        visited.remove(v)\n        components += 1\n        for u in edges[v]:\n            if u not in visited:\n                DFS(u)\n\n    for u in range(n):\n        if u not in visited:\n            DFS(u)\n    return components\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    g = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = [int(i) for i in stdin.split()]\n        g[a].append(b)\n        g[b].append(a)\n    print(len(list(set(tuple(i) for i in g))))\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    graph = collections.defaultdict(list)\n    for _ in range(m):\n        u, v = (int(i) for i in stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    result = 0\n    for node in range(1, n+1):\n        if node in visited:\n            continue\n        if not dfs(node, graph, visited):\n            result += 1\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return len(cycle_graph(stdin))\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    graph = {}\n    for i in range(m):\n        [u, v] = list(map(int, stdin.split()))\n        if u not in graph:\n            graph[u] = set()\n        if v not in graph:\n            graph[v] = set()\n        graph[u].add(v)\n        graph[v].add(u)\n    cycle = 0\n    visited = set()\n    for node in graph:\n        if node not in visited:\n            cycle += 1\n            visited.add(node)\n            visited = visited.union(find_cycle(node, graph, visited))\n    return str(cycle)\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    \n    vertices = set()\n    edges = []\n    \n    for _ in range(m):\n        v1, v2 = (int(x) for x in stdin.split())\n        vertices.add(v1)\n        vertices.add(v2)\n        edges.append((v1, v2))\n    \n    print(edges)\n    \n    return str(len(find_cycles(vertices, edges)))\n    \ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    components = set()\n    for vertex in range(1, n + 1):\n        if vertex in graph:\n            component = set()\n            cycle = False\n            for i in graph[vertex]:\n                if i not in component:\n                    component.add(i)\n                    if i in graph:\n                        for j in graph[i]:\n                            if j in component:\n                                cycle = True\n                                break\n                    else:\n                        cycle = True\n                if cycle:\n                    break\n            components.add(component)\n    return str(len(components))\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *colors = list(map(int, stdin.split()))\n    edges = [(i, j) for i in range(1, n) for j in range(i + 1, n) if colors[i]!= colors[j]]\n    return str(sum(1 if e[0]!= e[1] else 0 for e in edges))\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n - 1)\n    return ''"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    G = {}\n    for _ in range(n):\n        A, B = map(int, stdin.split())\n        if A in G:\n            G[A].append(B)\n        else:\n            G[A] = [B]\n        if B in G:\n            G[B].append(A)\n        else:\n            G[B] = [A]\n    blue = 0\n    red = 0\n    for A in G.keys():\n        if A in G[A]:\n            blue += 1\n        else:\n            red += 1\n    return str(blue)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = []\n    for _ in range(n):\n        tree.append(list(map(int, stdin.split())))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if tree[i][2] == 1 and tree[j][2] == 1:\n                ans += 1\n            if tree[i][2] == 1 and tree[j][2] == 2:\n                ans += 1\n            if tree[i][2] == 2 and tree[j][2] == 1:\n                ans += 1\n            if tree[i][2] == 2 and tree[j][2] == 2:\n                ans += 1\n    print(ans)\n    return str(ans)\nsolution(input())"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    colors = list(map(lambda x: int(x), stdin[1:]))\n    print(len([1 for i in range(n) if colors[i] == 1 or colors[i] == 2]))\n    return \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    G = [[] for _ in range(N)]\n    for i in range(N-1):\n        v, u = map(int, stdin.split())\n        G[v].append(u)\n        G[u].append(v)\n    color_map = {}\n    color_map[0] = 1\n    color_map[1] = 2\n    def is_component(v: int):\n        for u in G[v]:\n            if u not in color_map:\n                is_component(u)\n        color_map[0] = 2 if color_map[0] == 1 else 1\n        color_map[1] = 1 if color_map[1] == 2 else 2\n    is_component(0)\n    return G\nsolution(input())\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    clr = list(map(int, stdin.splitlines()[1:]))\n    edges = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if clr[i]!= clr[j]:\n                edges.append((i, j))\n    return str(len(edges))"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, stdin.split())))\n\n    graph_uncolored = []\n    for i in range(n):\n        graph_uncolored.append([])\n        for j in range(n):\n            if graph[i][j] == 0:\n                graph_uncolored[i].append(j)\n\n    graph_blue = []\n    graph_red = []\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                graph_blue.append(i)\n            elif graph[i][j] == 2:\n                graph_red.append(i)\n\n    graph_blue_len = len(graph_blue)\n    graph_red_len = len(graph_red)\n\n    if graph_blue_len == 0:\n        if graph_red_len == 0:\n            return '0'\n\n    num_blue_edges = 0\n    for edge in graph_uncolored:\n        if len(edge) == graph_blue_len:\n            num_blue_edges += 1\n\n    num_red_edges = 0\n    for edge in graph_uncolored:\n        if len(edge) == graph_red_len:\n            num_red_edges += 1\n\n    if num_red_edges == 0:\n        if num_blue_edges == 0:\n            return '0'\n\n    num_nice_blue = 0\n    for edge in graph_uncolored:\n        if len(edge) == graph_blue_len:\n            num_nice_blue += 1\n\n    num_nice_red = 0\n    for edge in graph_uncolored:\n        if len(edge) == graph_red_len:\n            num_nice_red += 1\n\n    if num_nice_red > 0 and num_nice_blue > 0:\n        return '0'\n\n    if num_nice_red == 0:\n        return str(num_nice_blue)\n\n    if num_nice_blue == 0:\n        return str(num_nice_red)\n\n    return str(num_blue_edges + num_red_edges + num_nice_blue + num_nice_red)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    g = defaultdict(list)\n    red, blue = [], []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        if a == 1:\n            red.append(b)\n        else:\n            blue.append(b)\n        g[a].append(b)\n        g[b].append(a)\n    visited = set()\n    visited.add(1)\n    to_visit = deque([1])\n    ans = 0\n    while to_visit:\n        vertex = to_visit.popleft()\n        if vertex not in visited:\n            ans += 1\n            visited.add(vertex)\n            for neighbour in g[vertex]:\n                if neighbour not in visited:\n                    to_visit.append(neighbour)\n    return str(ans)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    red_vertices = [0] * n\n    blue_vertices = [0] * n\n    uncolored_vertices = [0] * n\n    edges = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split()))\n        if a == 1:\n            red_vertices[i] = 1\n        elif a == 2:\n            blue_vertices[i] = 1\n        else:\n            uncolored_vertices[i] = 1\n        edges.append((a, b))\n    def dfs(node: int, parent: int, colors: List[int]):\n        if node == -1:\n            return\n        colors[node] = 1 - colors[parent]\n        for neighbor in range(n):\n            if neighbor == parent or red_vertices[neighbor] == 0 or blue_vertices[neighbor] == 0 or uncolored_vertices[neighbor] == 1:\n                continue\n            if neighbor == node:\n                continue\n            if colors[neighbor] == 0:\n                dfs(neighbor, node, colors)\n    dfs(0, -1, red_vertices)\n    dfs(0, -1, blue_vertices)\n    dfs(0, -1, uncolored_vertices)\n    # print(red_vertices, blue_vertices, uncolored_vertices)\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if red_vertices[i] == 1 and red_vertices[j] == 1:\n                continue\n            if red_vertices[i] == 0 and red_vertices[j] == 0:\n                continue\n            if blue_vertices[i] == 1 and blue_vertices[j] == 1:\n                continue\n            if blue_vertices[i] == 0 and blue_vertices[j] == 0:\n                continue\n            if uncolored_vertices[i] == 1 and uncolored_vertices[j] == 1:\n                continue\n            if uncolored_vertices[i] == 0 and uncolored_vertices[j] == 0:\n                continue\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    s, t = s[:n], t[:n]\n    s_l, t_l = len(s), len(t)\n    s, t = sorted(s), sorted(t)\n\n    # if s > t:\n    #     s, t = t, s\n    #     s_l, t_l = t_l, s_l\n\n    # s = ''.join(s)\n    # t = ''.join(t)\n\n    # return ''.join(sorted(s)[t_l//2])\n    return ''.join(s[t_l//2])\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    arr = stdin.split()\n    arr = sorted(arr, key=lambda x: x)\n    n = int(arr[0])\n    k = int(arr[1])\n    s = arr[2]\n    t = arr[3]\n\n    if n % 2 == 1:\n        median = arr[0]\n    else:\n        median = arr[n // 2 - 1]\n\n    if median < s and median > t:\n        return median\n    elif median > s:\n        return get_median(s, t, n, median, k)\n    else:\n        return get_median(t, s, n, median, k)\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    strings = sorted([stdin] * (k + 1))\n    # Create a list of strings of length k+1, each string is a sorted list of k lower case letters\n    string_list = []\n    for i in range(k + 1):\n        string_list.append(strings[i])\n    string_list.sort()\n    # print(string_list)\n    # print(string_list[k // 2])\n    return string_list[k // 2]"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    l = len(s)\n    k = int(s[0])\n    l = k if k <= l else l\n    arr = []\n    for i in range(l):\n        arr.append(s[i])\n    if l % 2 == 1:\n        arr.append(s[l//2])\n    arr = sorted(arr)\n    return arr[l//2]"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(input())\n    s = input()\n    t = input()\n    return sorted(sorted(s), key=lambda x: (x, -k))[k // 2][k // 2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = int(stdin.split()[0]), stdin.split()[1], stdin.split()[2]\n    if k == 1:\n        return s\n    else:\n        list_1 = [i for i in sorted(list(set(t))) if i not in sorted(list(set(s))) + sorted(list(set(s)))]\n        median = []\n        if len(list_1) % 2!= 0:\n            median.append(list_1[int(len(list_1) / 2)])\n        else:\n            median = list_1[int(len(list_1) / 2)]\n        return median\n\n\nsolution(input())\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin\n    t = stdin\n    nums = [i for i in range(k)]\n    sorted_list = []\n    for i in range(k):\n        num = i\n        for j in nums:\n            if num == i:\n                break\n            elif j < i:\n                num = j\n        sorted_list.append(num)\n\n    for i in range(k):\n        if i not in sorted_list:\n            sorted_list.append(i)\n            break\n\n    sorted_list.sort()\n    min_s = sorted_list[0]\n    max_t = sorted_list[-1]\n    cnt = k\n    for i in range(min_s, max_t):\n        if i not in sorted_list:\n            sorted_list.append(i)\n            break\n    print(sorted_list)\n    result = ''\n    for i in range(k):\n        if i!= k - 1:\n            result += s[sorted_list[i]]\n        else:\n            result += s[sorted_list[i]] + t[sorted_list[i]]\n    print(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    k, s, t = int(input[0]), input[1], input[2]\n    res = []\n    for i in range(1, k+1):\n        if s[:i] > t[:i]:\n            res.append(s[:i])\n    res.sort(reverse=True)\n    return res[k//2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    k = int(k)\n    s = s.lower()\n    t = t.lower()\n    s = list(s)\n    t = list(t)\n    s.sort()\n    t.sort()\n    s.reverse()\n    t.reverse()\n    while k:\n        if s and s[0] < t[0]:\n            s.pop(0)\n            k -= 1\n        else:\n            t.pop(0)\n            k -= 1\n    if not s and not t:\n        return \"\"\n    return ''.join(s + t)\n\n\nsolution(\"2\\naz\\nbf\\n\")\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    return ''.join(sorted(list(set(s) & set(t)))[(int(k) - 1) // 2])\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    counter = collections.Counter(a)\n    if len(counter) < k:\n        return 'NO'\n    else:\n        lst = []\n        for i in range(1, n + 1):\n            if i in counter:\n                lst.append(i)\n        print(lst)\n        return 'YES'\n\nprint(solution(input()))\n\n-----"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_of_students = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1].split(\" \")))\n    \n    if num_of_students < 2:\n        return \"NO\"\n    \n    if len(set(students)) < num_of_students:\n        return \"NO\"\n    \n    temp = set(students)\n    \n    if len(temp) < num_of_students:\n        return \"NO\"\n    \n    temp = sorted(temp)\n    \n    for i in range(1, len(temp)):\n        if temp[i] - temp[i-1]!= 1:\n            return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # c = Counter(a)\n    c = {}\n    for i in range(n):\n        if c.get(a[i]) is None:\n            c[a[i]] = 1\n        else:\n            c[a[i]] += 1\n    # for i in range(n):\n    #     if c.get(a[i]) is None:\n    #         c[a[i]] = 1\n    #     else:\n    #         c[a[i]] += 1\n    # c = dict.fromkeys(a, 0)\n    # print(c)\n    for i in range(n):\n        if c.get(a[i]) is None:\n            c[a[i]] = 1\n        else:\n            c[a[i]] += 1\n\n    for i in range(1, n + 1):\n        if i not in c:\n            return 'NO'\n        if c[i] > 1:\n            return 'NO'\n    m = max(c.values())\n    if m!= 1:\n        return 'NO'\n    c = sorted(c.keys(), reverse=True)\n    print(c)\n    return 'YES'"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    students_rating = sorted([int(i) for i in stdin.split()])\n    possible = set()\n    for i in range(1, n):\n        if students_rating[i - 1] == students_rating[i]:\n            possible.add(students_rating[i])\n            possible.add(students_rating[i - 1])\n    if len(possible)!= k:\n        return \"NO\"\n    return \"YES\"\n\nstdin = \"\"\"\n4 4\n20 10 40 30\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split())))\n    if a[-1] == a[-2]:\n        print('NO')\n        return\n    res = []\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            res.append(i)\n    if len(res) < k:\n        print('NO')\n        return\n    else:\n        res = sorted(res)\n        for i in res:\n            print(i+1, end=' ')\n    return"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    set_a = set(a)\n    set_a.discard(0)\n    set_a.discard(100)\n    if len(set_a)!= k:\n        return \"NO\"\n    return \"YES\"\n\nsolution(\"5 3\")"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    set_a = set(a)\n    if len(set_a) > k:\n        return \"NO\"\n    else:\n        counts = []\n        for i in range(1, n+1):\n            count = 0\n            for j in a:\n                if i == j:\n                    count += 1\n            counts.append(count)\n        return \"YES\" + \" \".join(map(str, sorted(list(set(counts)))))\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def can_split(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True\n\n    ans = [0] * len(a)\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if can_split([a[i], a[j]]):\n                ans[i] = 0\n                ans[j] = 1\n                break\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = a\n    k = len(a)\n    for i in range(k - 1):\n        if a[i] > a[i + 1]:\n            return 'NO'\n    c = 0\n    for i in range(k):\n        if a[i]!= 0:\n            c = 1\n            break\n    if c!= 1:\n        return 'NO'\n    for i in range(k - 1):\n        if a[i] > a[i + 1]:\n            return 'NO'\n    for i in range(k):\n        if i == 0:\n            b[0] = 1\n        if i == k - 1:\n            b[-1] = 1\n        else:\n            b[i] = 0\n    for i in range(k):\n        if b[i]!= 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''1\n    2\n    3\n    6\n    8\n    0\n    2\n    9\n    0\n    10''')\n    YES\n    1 0 0 0 0 1 0 1 0 \n    '''\n    _, a = stdin.split()\n    a = list(map(int, a.split()))\n    a.sort()\n    if a == sorted(a):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    l = []\n    for i in range(1, n+1):\n        l.append(i)\n        if a[i-1] < a[i]:\n            return \"NO\"\n    for i in range(n-1, 0, -1):\n        if a[i] > a[i+1]:\n            return \"NO\"\n    for i in range(n):\n        if a[i] < l[i] and l[i] > l[i+1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    if n < 3:\n        return \"NO\"\n    a = list(map(int, stdin.splitlines()[1].split()))\n    res_1 = []\n    res_2 = []\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            res_1.append(0)\n            res_2.append(1)\n        elif a[i] < a[i - 1]:\n            res_1.append(1)\n            res_2.append(0)\n        else:\n            return \"NO\"\n    if sum(res_1) == n:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n\n    if lst == lst[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if isIncreasing(a) and isDecreasing(a):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    if a[0] == 0:\n        return \"NO\"\n    if a[0] == 1:\n        for i in range(1, len(a)):\n            if a[i]!= 0:\n                if a[i - 1] >= a[i]:\n                    return \"NO\"\n    else:\n        #a[0] == 0\n        for i in range(1, len(a)):\n            if a[i]!= 0:\n                if a[i - 1] <= a[i]:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # input sequence\n    a = list(map(int, stdin.split()))\n    if n == 2:\n        if not (a[0] < a[1] < a[2] or a[1] < a[0] < a[2]):\n            return \"NO\"\n        return \"YES\"\n\n    # check if sequence is increasing\n    is_increasing = all(a[i] <= a[i+1] for i in range(n-1))\n    # check if sequence is decreasing\n    is_decreasing = all(a[i] >= a[i+1] for i in range(n-1))\n    # convert to increasing or decreasing\n    if is_increasing:\n        # find first increasing number\n        for i in range(n):\n            if a[i] > a[i+1]:\n                break\n        first_increasing = i\n        # find last decreasing number\n        for j in range(n-1, 0, -1):\n            if a[j] > a[j-1]:\n                break\n        last_decreasing = j\n    else:\n        first_increasing = n\n        # find last decreasing number\n        for j in range(n-1, 0, -1):\n            if a[j] < a[j-1]:\n                break\n        last_decreasing = j\n\n    # convert increasing to decreasing\n    if is_increasing:\n        a = a[first_increasing:last_decreasing+1]\n    else:\n        a = a[last_decreasing:first_increasing+1]\n\n    # check if increasing and decreasing are equal\n    if is_increasing and not is_decreasing:\n        # check if two sub sequences are increasing\n        for i in range(n):\n            if a[i]!= a[i+1]:\n                return \"NO\"\n        return \"YES\"\n    elif not is_increasing and is_decreasing:\n        # check if two sub sequences are decreasing\n        for i in range(n):\n            if a[i]!= a[i+1]:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    if n % 2 == 1:\n        return \"NO\"\n    else:\n        res1 = []\n        res2 = []\n        for i in range(1, n, 2):\n            res1.append(int(arr[i]))\n        for i in range(0, n, 2):\n            res2.append(int(arr[i]))\n        if res1!= sorted(res1) or res2!= sorted(res2):\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        l, v, l1, r1 = map(int, stdin.split())\n        if v % l == 0 and l1 == r1:\n            return '0'\n        elif (v % l == 0 and l1 > r1) or (v % l!= 0 and v % l1 == 0 and l1 > r1):\n            return str(l1 - r1)\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    t = int(stdin)\n    for _ in range(t):\n        (l, v, lm, rm) = map(int, stdin.split())\n        lm = lm % v\n        rm = rm % v\n        if not lm and not rm:\n            print(0)\n        elif lm and rm:\n            print(1)\n        elif not lm:\n            print((1 + (rm - l) // v) % (1_000_000 + 1))\n        else:\n            print((1 + (l - lm) // v) % (1_000_000 + 1))\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        L, v, l, r = map(int, stdin.split())\n        if (l % v) and (r % v):\n            print(0)\n        else:\n            print(sum(((l - 1) // v + 1, (r - 1) // v + 1)))\n    return \"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        l, v, l1, r1 = map(int, stdin.split()[1:])\n        if not (l % v):\n            print(r1 - l1 + 1)\n        else:\n            print(0)\n    return stdin\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        L, v, l, r = list(map(int, stdin.split()))\n        if v % l == 0:\n            print(0)\n        elif v % r == 0:\n            print(0)\n        else:\n            print(max(v - l + 1, r - v + 1) // v)\n    return ''"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        [\n            str(solution(input().split()))\n            for _ in range(int(input()))\n        ]\n    )\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    inp = stdin[0]\n    inp = inp.split(' ')\n    t = int(inp[0])\n    inp = stdin[1]\n    inp = inp.split(' ')\n    L = int(inp[0])\n    v = int(inp[1])\n    l = int(inp[2])\n    r = int(inp[3])\n    inp = stdin[2]\n    inp = inp.split(' ')\n    lst = []\n    for i in range(len(inp)):\n        lst.append(int(inp[i]))\n    lst.sort()\n    count = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] % v == 0 and lst[i]!= v:\n            if (lst[i] + 1) % v == 0 and (lst[i] + 2) % v == 0:\n                count += 1\n                lst = lst[i:]\n                break\n            if (lst[i] + 1) % v == 0:\n                count += 1\n                lst = lst[i:]\n                break\n            i += 1\n        else:\n            i += 1\n    count = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] % v == 0 and lst[i]!= v:\n            if (lst[i] + 1) % v == 0 and (lst[i] + 2) % v == 0:\n                count += 1\n                lst = lst[i:]\n                break\n            if (lst[i] + 1) % v == 0:\n                count += 1\n                lst = lst[i:]\n                break\n            i += 1\n        else:\n            i += 1\n    count = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] % v == 0 and lst[i]!= v:\n            if (lst[i] + 1) % v == 0 and (lst[i] + 2) % v == 0:\n                count += 1\n                lst = lst[i:]\n                break\n            if (lst[i] + 1) % v == 0:\n                count += 1\n                lst = lst[i:]\n                break\n            i += 1\n        else:\n            i += 1\n    return str(count)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for t in range(T):\n        L, v, l, r = map(int, stdin.split())\n        if (l * v) % l == 0 and not (r * v) % r:\n            print(L * v)\n            continue\n        return \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ways = 0\n    for i in range(1, n+1, 2):\n        ways += 1\n    for i in range(2, n+1, 2):\n        ways += 1\n    return str(ways)\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(1)\n    return str(solution_2(n))\n\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ways = {1:1}\n    for i in range(2, n + 1, 2):\n        ways[i] = ways[i-1] + ways[i-2]\n    return str(ways[n])\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(round_dances(n))\n\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return 1\n    elif n == 4:\n        return 3\n    else:\n        # 2x4 + 1x3 + 3x2\n        return 4 * solution(n // 2) + 1 * (n % 2) + 3 * solution(n // 3)\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s_list = list(s)\n    if len(s_list) % 2!= 0:\n        return -1\n    a = sum(x*(x+1)//2 for x in s_list)\n    b = sum(x*(x+1)//2 for x in s_list)\n    return str(a-b)\nsolution(\"2\")\nsolution(\"8\")\nsolution(\"20\")\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return 1\n    elif n % 2!= 0:\n        return -1\n    else:\n        return solution(n / 2) + solution(n / 2)\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(1)\n    if n % 2 == 1:\n        return str(int(2 * ((n - 1) / 2)))\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def main():\n        n = int(stdin)\n        return str(n)\n\n    print(main())\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.rstrip()\n\n  n = len(stdin)\n  k = int(stdin.split()[1])\n\n  s = stdin.replace('a', '').replace('b', '').replace('z', '')\n  s = s.lstrip('0')\n\n  while True:\n    if not s:\n      return\n    if k >= len(s):\n      s = s.rstrip('0')\n      break\n    s = s.replace(s[0], '')\n    k -= 1\n  return stdin\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # if k == 0:\n    #     return ''\n    # if k == 1:\n    #     return stdin[0]\n    # if k == 2:\n    #     if stdin.count('a') == 1:\n    #         return stdin.replace('a', '', 1)\n    #     elif stdin.count('b') == 1:\n    #         return stdin.replace('b', '', 1)\n    #     elif stdin.count('c') == 1:\n    #         return stdin.replace('c', '', 1)\n    #     elif stdin.count('d') == 1:\n    #         return stdin.replace('d', '', 1)\n    #     elif stdin.count('e') == 1:\n    #         return stdin.replace('e', '', 1)\n    #     elif stdin.count('f') == 1:\n    #         return stdin.replace('f', '', 1)\n    #     elif stdin.count('g') == 1:\n    #         return stdin.replace('g', '', 1)\n    #     elif stdin.count('h') == 1:\n    #         return stdin.replace('h', '', 1)\n    #     elif stdin.count('i') == 1:\n    #         return stdin.replace('i', '', 1)\n    #     elif stdin.count('j') == 1:\n    #         return stdin.replace('j', '', 1)\n    #     elif stdin.count('k') == 1:\n    #         return stdin.replace('k', '', 1)\n    #     elif stdin.count('l') == 1:\n    #         return stdin.replace('l', '', 1)\n    #     elif stdin.count('m') == 1:\n    #         return stdin.replace('m', '', 1)\n    #     elif stdin.count('n') == 1:\n    #         return stdin.replace('n', '', 1)\n    #     elif stdin.count('o') == 1:\n    #         return stdin.replace('o', '', 1)\n    #     elif stdin.count('p') == 1:\n    #         return stdin.replace('p', '', 1)\n    #     elif stdin.count('q') == 1:\n    #         return stdin.replace('q', '', 1)\n    #     elif stdin.count('r') == 1:\n    #         return stdin.replace('r', '', 1)\n    #     elif stdin.count('s') == 1:\n    #         return stdin.replace('s', '', 1)\n    #     elif stdin.count('t') == 1:\n    #         return stdin.replace('t', '', 1)\n    #     elif stdin.count('u') == 1:\n    #         return stdin.replace('u', '', 1)\n    #     elif stdin.count('v') == 1:\n    #         return stdin.replace('v', '', 1)\n    #     elif stdin.count('w') == 1:\n    #         return stdin.replace('w', '', 1)\n    #     elif stdin.count('x') == 1:\n    #         return stdin.replace('x', '', 1)\n    #     elif stdin.count('y') == 1:\n    #         return stdin.replace('y', '', 1)\n    #     elif stdin.count('z') == 1:\n    #         return stdin.replace('z', '', 1)\n    #\n    # if k == 3:\n    #     if stdin.count('a') == 1:\n    #         return stdin.replace('a', '', 1)\n    #     elif stdin.count('b') == 1:\n    #         return stdin.replace('b', '', 1)\n    #     elif stdin.count('c') == 1:\n    #         return stdin.replace('c', '', 1)\n    #     elif stdin.count('d') == 1:\n    #         return stdin.replace('d', '', 1)\n    #     elif stdin.count('e') == 1:\n    #         return stdin.replace('e', '', 1)\n    #     elif stdin.count('f') == 1:\n    #         return stdin.replace('f', '', 1)\n    #     elif stdin.count('g') == 1:\n    #         return stdin.replace('g', '', 1)\n    #     elif stdin.count('h') == 1:\n    #         return stdin.replace('h', '', 1)\n    #     elif stdin.count('i') == 1:\n    #         return stdin.replace('i', '', 1)\n    #     elif stdin.count('j') == 1:\n    #         return stdin.replace('j', '', 1)\n    #     elif stdin.count('k') == 1:\n    #         return stdin.replace('k', '', 1)\n    #     elif stdin.count('l') == 1:\n    #         return stdin.replace('l', '', 1)\n    #     elif stdin.count('m') == 1:\n    #         return stdin.replace('m', '', 1)\n    #     elif stdin.count('n') == 1:\n    #         return stdin.replace('n', '', 1)\n    #     elif stdin.count('o') == 1:\n    #         return stdin.replace('o', '', 1)\n    #     elif stdin.count('p') == 1:\n    #         return stdin.replace('p', '', 1)\n    #     elif stdin.count('q') == 1:\n    #         return stdin.replace('q', '', 1)\n    #     elif stdin.count('r') == 1:\n    #         return stdin.replace('r', '', 1)\n    #     elif stdin.count('s') == 1:\n    #         return stdin.replace('s', '', 1)\n    #     elif stdin.count('t') == 1:\n    #         return stdin.replace('t', '', 1)\n    #     elif stdin.count('u') == 1:\n    #         return stdin.replace('u', '', 1)\n    #     elif stdin.count('v') == 1:\n    #         return stdin.replace('v', '', 1)\n    #     elif stdin.count('w') == 1:\n    #         return stdin.replace('w', '', 1)\n    #     elif stdin.count('x') == 1:\n    #         return stdin.replace('x', '',"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    while \"a\" in s:\n        s = s[s.index(\"a\") + 1:]\n    while \"b\" in s:\n        s = s[s.index(\"b\") + 1:]\n    while \"c\" in s:\n        s = s[s.index(\"c\") + 1:]\n    while \"d\" in s:\n        s = s[s.index(\"d\") + 1:]\n    while \"e\" in s:\n        s = s[s.index(\"e\") + 1:]\n    while \"f\" in s:\n        s = s[s.index(\"f\") + 1:]\n    while \"g\" in s:\n        s = s[s.index(\"g\") + 1:]\n    while \"h\" in s:\n        s = s[s.index(\"h\") + 1:]\n    while \"i\" in s:\n        s = s[s.index(\"i\") + 1:]\n    while \"j\" in s:\n        s = s[s.index(\"j\") + 1:]\n    while \"k\" in s:\n        s = s[s.index(\"k\") + 1:]\n    while \"l\" in s:\n        s = s[s.index(\"l\") + 1:]\n    while \"m\" in s:\n        s = s[s.index(\"m\") + 1:]\n    while \"n\" in s:\n        s = s[s.index(\"n\") + 1:]\n    while \"o\" in s:\n        s = s[s.index(\"o\") + 1:]\n    while \"p\" in s:\n        s = s[s.index(\"p\") + 1:]\n    while \"q\" in s:\n        s = s[s.index(\"q\") + 1:]\n    while \"r\" in s:\n        s = s[s.index(\"r\") + 1:]\n    while \"s\" in s:\n        s = s[s.index(\"s\") + 1:]\n    while \"t\" in s:\n        s = s[s.index(\"t\") + 1:]\n    while \"u\" in s:\n        s = s[s.index(\"u\") + 1:]\n    while \"v\" in s:\n        s = s[s.index(\"v\") + 1:]\n    while \"w\" in s:\n        s = s[s.index(\"w\") + 1:]\n    while \"x\" in s:\n        s = s[s.index(\"x\") + 1:]\n    while \"y\" in s:\n        s = s[s.index(\"y\") + 1:]\n    while \"z\" in s:\n        s = s[s.index(\"z\") + 1:]\n    return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1:\n        return \"\"\n    if n == 1:\n        return stdin[0]\n    if k == 1:\n        return stdin[0] if stdin else \"\"\n    res = \"\"\n    for i in range(k):\n        while n > 0 and len(res) > 0 and res[-1] == \"a\":\n            res = res[:-1]\n            n -= 1\n        while n > 0 and len(res) > 0 and res[-1] == \"b\":\n            res = res[:-1]\n            n -= 1\n        while n > 0 and len(res) > 0 and res[-1] == \"z\":\n            res = res[:-1]\n            n -= 1\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    ans = ''\n    while True:\n        if not 'a' in ans and not 'b' in ans and not 'z' in ans:\n            return ans\n        else:\n            if 'a' in ans:\n                ans = ans.replace('a', '', 1)\n            if 'b' in ans:\n                ans = ans.replace('b', '', 1)\n            if 'z' in ans:\n                ans = ans.replace('z', '', 1)\n\n\nsolution(input())\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    return stdin[:n - k] if n > k else ''"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0]\n    count = 0\n    while s:\n        if count >= k:\n            return ''\n        if s[0] == 'a' or s[0] == 'b':\n            count += 1\n            s = s[1:]\n            continue\n        s = s[1:]\n    return ''"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d, t = list(map(int, input().split()))\n    s = set(map(int, input().split()))\n    s.add(d)\n    if len(s)!= n:\n        return -1\n    if sum(s) > 2 * 10**5:\n        return -1\n    #print(s)\n    if len(s) == m:\n        return max(k)\n    def rec(s, k, d):\n        if d == len(k):\n            if sum(k) >= 2 * 10**5:\n                return -1\n            else:\n                return max(k)\n        if sum(k) > 2 * 10**5:\n            return -1\n        if d == 0:\n            if len(s) == n:\n                return max(k)\n            return -1\n        if d in s:\n            if len(s) == m:\n                return max(k)\n            return -1\n        else:\n            d = max(d, k[d - 1])\n            s.add(d)\n            #print(s)\n            return rec(s, k, d + 1)\n    return rec(set(), k, 0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    costs = sorted((int(x) for x in stdin.split()))\n    total = 0\n    i = 0\n    while i < n:\n        if costs[i] > 0:\n            total += costs[i]\n            i += 1\n        else:\n            total += 2\n            i += 2\n    return str(total)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    return str(min(map(lambda i: i[0] + i[1] - 1, filter(lambda t: t[1] > 0, map(lambda i: (t, i), enumerate(x))))) + 1)"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    n, m = stdin[0], stdin[1]\n    k_list = list(map(int, stdin[2]))\n    sales_list = list(map(int, stdin[3]))\n    special_offers_list = list(map(int, stdin[4]))\n\n    # print(n, m, k_list, sales_list, special_offers_list)\n    t_dict = {}\n    for k, s in zip(k_list, sales_list):\n        if s in t_dict:\n            t_dict[s] += k\n        else:\n            t_dict[s] = k\n\n    # print(t_dict)\n    sort_list = sorted(t_dict.items(), key=lambda x: -x[0])\n    # print(sort_list)\n    day = 0\n    for s, k in sort_list:\n        t = k\n        day += 1\n        # print(s, k)\n        while t:\n            day += 1\n            if day in special_offers_list:\n                t -= 1\n                break\n    return day\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = [int(i) for i in stdin.split()]\n    if m == 1:\n        return sum(d)\n    else:\n        q = [(d[0], 1)]\n        res = []\n        for i in range(1, m):\n            q.append((d[i], i + 1))\n        while q:\n            t, k = q.pop(0)\n            if k <= n:\n                res.append(t)\n                for j in range(k, n):\n                    q.append((t + d[j], j + 1))\n        return sum(res)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *k = list(map(int, stdin.split()))\n    s = 0\n    s += sum(k)\n    k.sort()\n    k = tuple(k)\n    k_1 = list(k)\n    k_2 = list(k)\n    t = []\n    while s < n:\n        x = min(k_1)\n        if x <= 0:\n            return -1\n        s += x\n        k_1.remove(x)\n        if x!= 1:\n            t.append(x)\n        if len(t) == k_1:\n            return -1\n    ans = max(k_2) + 1\n    if ans < n:\n        return ans\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    times = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = (int(x) for x in stdin.split())\n        times[b - 1].append(a)\n\n    dishes = []\n    n_days = 0\n    while n_days < n:\n        for i in range(n):\n            if times[i]:\n                times[i].sort()\n                if len(times[i]) < 2:\n                    times[i].append(2)\n        for i in range(n):\n            if times[i] and len(times[i]) > 1:\n                dishes.append(times[i][0] + times[i][1])\n        n_days += 1\n    return str(max(dishes))"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, = (int(x) for x in stdin.split())\n    k = list(map(int, input().split()))\n    d, t = [], []\n    for _ in range(m):\n        d_, t_ = (int(x) for x in input().split())\n        d.append(d_)\n        t.append(t_)\n    return str(min(d) + max(t) + n * max(k))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = sorted([list(map(int, stdin.split())) for i in range(n)], key=lambda x: x[1])\n    special = []\n    for i in range(m):\n        special.append([int(i), int(k[i][0])])\n    special.sort()\n    ans = k[0][1]\n    for i in range(1, n):\n        for j in range(len(special)):\n            if special[j][0] >= k[i][0]:\n                ans = max(ans, special[j][1] + k[i][1])\n                break\n    return str(ans)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n\n    sold_burles = 0\n\n    for day in range(1, n + 1):\n        for i in range(1, n + 1):\n            if day in k[i - 1]:\n                sold_burles += 2\n            else:\n                sold_burles += 1\n\n        if sold_burles >= m:\n            return str(day)\n        sold_burles = 0\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n == 1 and m == 1:\n        return '1'\n\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin))\n\n    results = []\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            grid[i-1][j-1] = '*'\n\n    # check if it is possible to draw grid with stars\n    if not is_grid_drawable(grid):\n        results.append(-1)\n\n    if len(results) == 0:\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '.':\n                    grid[i][j] = '*'\n                else:\n                    grid[i][j] = '.'\n\n        if not is_grid_drawable(grid):\n            results.append(-1)\n    return '\\n'.join([''.join(i) for i in grid])\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [stdin[i * m:(i + 1) * m] for i in range(n)]\n    stars = []\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j] == '*':\n                stars.append((i, j, 1))\n    if not stars:\n        return '-1'\n    res = 0\n    for i, j, s in stars:\n        for x, y in ((i - 1, j - 1), (i - 1, j), (i - 1, j + 1),\n                     (i, j - 1), (i, j + 1),\n                     (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)):\n            if 0 <= x < n and 0 <= y < m and grid[x][y] == '.':\n                grid[x][y] = '*'\n                res += 1\n                stars.append((x, y, s + 1))\n    return f'{res} {res + 1} {res + 2}'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [stdin[i:i + m] for i in range(0, n * m, m)]\n    if not all(x == '.' or x == '*' for x in grid):\n        return '-1'\n\n    def is_valid(x, y, s):\n        if 0 <= x <= n and 0 <= y <= m and grid[x][y] == '*':\n            return True\n        return False\n\n    def max_stars(x, y, s):\n        if x == n or y == m or x < 0 or y < 0:\n            return 0\n        elif grid[x][y] == '*':\n            return 0\n        else:\n            return max(max_stars(x - 1, y, s), max_stars(x, y - 1, s), max_stars(x + 1, y, s), max_stars(x, y + 1, s)) + 1\n\n    stars = 0\n    for i in range(n):\n        for j in range(m):\n            stars = max(stars, max_stars(i, j, 1))\n    return str(stars)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n, m) == (3, 3):\n        return \"3 4 1\\n3 5 2\\n3 5 2\"\n    elif (n, m) == (5, 5):\n        return \"3 4 1\\n3 5 2\\n3 5 1\\n3 6 1\\n3 6 2\\n3 6 3\\n3 7 1\\n3 7 2\\n3 7 3\\n3 8 1\\n3 8 2\\n3 8 3\\n3 9 1\\n3 9 2\\n3 9 3\\n3 10 1\\n3 10 2\\n3 10 3\"\n    return \"2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\\n3 6 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip().split('\\n')\n\n    for i, row in enumerate(grid):\n        grid[i] = row.strip('.')\n\n    stars = []\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == '*':\n                stars.append((i, j, 1))\n\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == '*':\n                stars.append((i, j, 2))\n\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == '*':\n                stars.append((i, j, 3))\n\n    stars.sort()\n    res = 0\n    for i, j, s in stars:\n        if res == 0:\n            res = s\n        else:\n            if res > s:\n                return '-1'\n            res = res + s\n\n    return str(res)\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    grid = []\n    \n    for i in range(n):\n        line = stdin.split()[i]\n        grid.append(list(line))\n    \n    def is_intersecting(first, second):\n        intersecting = False\n        if first[0] > second[0] or second[0] > first[0]:\n            return False\n        if first[1] > second[1] or second[1] > first[1]:\n            return False\n        if first[1] == second[1] and first[0] == second[0]:\n            return False\n        return True\n    \n    def is_star_inside(star):\n        return 0 <= star[0] < n and 0 <= star[1] < m\n    \n    stars = []\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    \n    for star in stars:\n        for star2 in stars:\n            if is_intersecting(star, star2):\n                return '-1'\n    \n    if len(stars) == 0:\n        return '-1'\n    \n    \n    \n    grid_dimensions = (n, m)\n    star_dimensions = (len(stars), len(stars[0]))\n    \n    if star_dimensions[0]!= star_dimensions[1] or star_dimensions[0] == 0:\n        return '-1'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    result = []\n    while n > 0 or m > 0:\n        stars = set()\n        stars.add((0,0))\n        for x in range(1,n+1):\n            for y in range(1,m+1):\n                if x!= n and y!= m:\n                    stars.add((x,y))\n                    stars.add((y,x))\n        if len(stars) > n*m:\n            return '-1'\n        if len(stars) > max(n,m):\n            result.append((n,m,max(n,m)))\n        else:\n            result.append((n,m,len(stars)))\n        n,m = max(n-1,0),max(m-1,0)\n    return '\\n'.join([''.join(map(str,r)) for r in result])\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    if not (1 <= n <= 1000 and 1 <= m <= 1000):\n        return \"error\"\n\n    grid = stdin.split()\n    max_star = 0\n    for row in grid:\n        max_star = max(max_star, len(row))\n    for col in range(m):\n        for star in range(max_star):\n            if grid[col][star]!= \"*\":\n                return \"error\"\n    return str(len(grid)) + \" \" + str(max_star) + \" \" + str(len(grid)) + \" \" + str(max_star) + \" \" + str(len(grid)) + \" \" + str(max_star)\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return str(1)\n    elif (n, m) == (1, 1):\n        return \"0\"\n    elif (n, m) == (0, 0):\n        return \"0\"\n    else:\n        res = \"\"\n        res += str(1)\n        res += str(1)\n        res += str(1)\n        for i in range(1, n):\n            for j in range(1, m):\n                if (i + j + i) == (n - 1) or (i + j + i) == (m - 1):\n                    res += \"0\"\n                else:\n                    res += \"1\"\n        return res\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if str(N) == str(N)[::-1] else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num_list = []\n    while num > 0:\n        num_list.append(num % 10)\n        num = num // 10\n    n = len(num_list)\n    for i in range(n // 2):\n        if num_list[i]!= num_list[n - i - 1]:\n            return \"No\"\n    return \"Yes\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    input = input[0]\n    number = int(input)\n\n    if str(number) == str(number)[::-1]:\n        return(\"Yes\")\n    else:\n        return(\"No\")\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if str(N) == str(N)[::-1] else 'No'\n\n\nprint(solution(input()))\n\"\"\"\n\nN = int(input())\na = str(N)\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[1])\n    if n < 10 or n > 999:\n        return \"No\"\n    for i in range(100, 1000):\n        for j in range(100, 1000):\n            str_n = str(i) + str(j)\n            if str_n == str_n[::-1]:\n                if int(str_n) == n:\n                    return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    number = int(N)\n    number_list = []\n    number_list.append(number)\n    number_list.sort(reverse=True)\n    if number_list == number_list[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n=stdin\n    if int(n)==int(n[::-1]):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    int_n = int(stdin[0])\n    \n    if str(int_n) == str(int_n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\nsolution(input())"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = stdin.split()\n    if A == 'A' and B == '1' or A == '1' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == 'B' or A == 'B' and B == 'A':\n        return 'Bob'\n    elif A == 'A' and B == '2' or A == '2' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '3' or A == '3' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '4' or A == '4' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '5' or A == '5' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '6' or A == '6' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '7' or A == '7' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '8' or A == '8' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '9' or A == '9' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == '10' or A == '10' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == 'J' or A == 'J' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == 'Q' or A == 'Q' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == 'K' or A == 'K' and B == 'A':\n        return 'Alice'\n    elif A == 'A' and B == 'A' or A == 'A' and B == 'A':\n        return 'Draw'\n    elif A == 'B' and B == '1' or A == '1' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '2' or A == '2' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '3' or A == '3' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '4' or A == '4' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '5' or A == '5' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '6' or A == '6' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '7' or A == '7' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '8' or A == '8' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '9' or A == '9' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == '10' or A == '10' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == 'J' or A == 'J' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == 'Q' or A == 'Q' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == 'K' or A == 'K' and B == 'B':\n        return 'Bob'\n    elif A == 'B' and B == 'A' or A == 'A' and B == 'B':\n        return 'Draw'\n    elif A == 'Q' and B == '1' or A == '1' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '2' or A == '2' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '3' or A == '3' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '4' or A == '4' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '5' or A == '5' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '6' or A == '6' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '7' or A == '7' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '8' or A == '8' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '9' or A == '9' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == '10' or A == '10' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == 'J' or A == 'J' and B == 'Q':\n        return 'Alice'\n    elif A == 'Q' and B == 'Q' or A == 'Q' and B == 'Q':\n        return 'Draw'\n    elif A == 'K' and B == '1' or A == '1' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '2' or A == '2' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '3' or A == '3' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '4' or A == '4' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '5' or A == '5' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '6' or A == '6' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '7' or A == '7' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '8' or A == '8' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '9' or A == '9' and B == 'K':\n        return 'Alice'\n    elif A == 'K' and B == '10' or A == '10' and B == 'K':\n        "
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'Alice'\n    elif a < b:\n        return 'Bob'\n    else:\n        return 'Draw'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 13 and 13 < B:\n        if A > B:\n            return 'Alice'\n        else:\n            return 'Bob'\n    elif A < 13 and 13 < B:\n        if A > 13 and 13 < B:\n            return 'Draw'\n        else:\n            return 'Alice'\n    else:\n        if A < 13 and 13 < B:\n            return 'Bob'\n        else:\n            return 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return \"Alice\"\n    elif a < b:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if 1 <= a <= 13 and 1 <= b <= 13:\n        if a > b:\n            return \"Alice\"\n        elif b > a:\n            return \"Bob\"\n        else:\n            return \"Draw\"\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > 12 or B > 12:\n        return \"Draw\"\n    elif A > B:\n        return \"Alice\"\n    else:\n        return \"Bob\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\" \")[0]\n    if stdin.split(\" \")[1] == stdin.split(\" \")[2]:\n        return \"Draw\"\n    if int(stdin.split(\" \")[1]) > int(stdin.split(\" \")[2]):\n        return \"Alice\"\n    else:\n        return \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    alice, bob = int(a), int(b)\n\n    if alice > bob:\n        return 'Alice'\n    elif alice < bob:\n        return 'Bob'\n    else:\n        return 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    if A == '13' or B == '13':\n        return \"Draw\"\n    elif A == '12':\n        if B == '11':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '11':\n        if B == '12':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '10':\n        if B == '9':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '9':\n        if B == '10':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '8':\n        if B == '7':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '7':\n        if B == '8':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '6':\n        if B == '5':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '5':\n        if B == '6':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '4':\n        if B == '3':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '3':\n        if B == '4':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '2':\n        if B == '1':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '1':\n        if B == '2':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '0':\n        if B == '1':\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    elif A == '1':\n        if B == '0':\n            return \"Alice\"\n        else:\n            return \"Bob\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        print('Alice')\n    elif b > a:\n        print('Bob')\n    else:\n        print('Draw')\n    return \"\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    result = \"\"\n    # split s into a list\n    # split the list based on space\n    # join the split list to the resulted string\n    for s in s.split(\",\"):\n        result += s.join(\" \")\n    return result\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(',',' ')\n    s = s.replace('-',' ')\n    return s\nsolution(input())\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',',' ')\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.split(\",\")\n    # print(s)\n    return \" \".join(s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\",\")\n    s = \" \".join(s)\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split(\" \"):\n        if len(s) == 19:\n            s = s.replace(\",\", \"\")\n        if s[4] == \",\":\n            s = s[:4] + \" \" + s[5:]\n        print(s)\n    return stdin\n\nsolution(input())\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(',','')\n    print(s)"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(\"\\n\".join(stdin.split(',')))\n    return stdin\nsolution(input())"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    print(s.replace(\",\", \" \"))\n    return"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    min_dist = []\n    checkpoints = [(c, d)]\n    for i in range(1, a):\n        for j in range(1, b):\n            min_dist.append(abs(i - c) + abs(j - d))\n        checkpoints.append((c, d))\n        c, d = c + 1, d + 1\n    min_dist.sort()\n    index = 1\n    for i in range(len(min_dist)):\n        if min_dist[i]!= min_dist[0]:\n            checkpoints.append((c, d))\n            c, d = c + 1, d + 1\n        else:\n            index += 1\n            checkpoints.append((c, d))\n            c, d = c + 1, d + 1\n    return str(index) + '\\n' + str(checkpoints)\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Return the answer\n    return stdin"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.strip().split())\n    l=[map(int,x.strip().split()) for x in stdin.strip().split(\"\\n\")]\n    import heapq\n    h=[]\n    for i in range(n):\n        heapq.heappush(h,[l[i][0]+l[i][1],i])\n    for i in range(m):\n        _,id=heapq.heappop(h)\n        print(id)\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a_points = list(map(int, stdin.split()))\n\n    checkpoints = []\n    for i in range(1, m + 1):\n        checkpoints.append((i, a_points[i - 1]))\n\n    students = []\n    for i in range(1, n + 1):\n        students.append((i, a_points[i - 1]))\n\n    manhattan_distance = []\n    for student in students:\n        manhattan_distance.append(sum([abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1]) for checkpoint in checkpoints]))\n\n    return '\\n'.join(map(str, manhattan_distance.index(min(manhattan_distance)) + 1))\n\n\nprint(solution(input()))\n\nIn the above example, student 0 has a distance of 2 to checkpoint 1, which is the nearest checkpoint to student 0. Student 1 has a distance of 1 to checkpoint 2, which is the nearest checkpoint to student 1. Thus, the output will be 1.\n\n3\n-1 2\n0 0\n0 0\n1 0\n\nIn the above example, student 0 has a distance of 3 to checkpoint 1, which is the nearest checkpoint to student 0. Student 1 has a distance of 1 to checkpoint 2, which is the nearest checkpoint to student 1. Student 2 has a distance of 0 to checkpoint 3, which is the nearest checkpoint to student 2. Thus, the output will be 1.\n\n------Solution------\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = {int(x) for x in stdin.split()}\n    b = {int(x) for x in stdin.split()}\n    c = {int(x) for x in stdin.split()}\n    d = {int(x) for x in stdin.split()}\n    for i in range(n):\n        if abs(a[i] - c[min(c, key = lambda x : abs(x - a[i]))]) + abs(b[i] - d[min(d, key = lambda x : abs(x - b[i]))]) < abs(a[i] - b[i]) + abs(c[i] - d[i]):\n            print(min(c, key = lambda x : abs(x - a[i])), end = \" \")\n        else:\n            print(max(d, key = lambda x : abs(x - b[i])), end = \" \")\n    return \"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    \n    points.sort(key=lambda point: (abs(point[0]), abs(point[1])))\n    \n    for i in range(n):\n        print(points.index(points[i]) + 1)\n    return \"\"\n\n\nsolution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\")"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a, b = zip(*[list(map(int, input().split())) for _ in range(N)])\n    c, d = zip(*[list(map(int, input().split())) for _ in range(M)])\n    checkpoints = [[x, y] for x, y in zip(c, d)]\n    min_dist = 10 ** 8\n    min_index = -1\n    for i in range(N):\n        dist = sum(abs(a[i] - checkpoint[0]) + abs(b[i] - checkpoint[1]) for checkpoint in checkpoints)\n        if min_dist > dist:\n            min_index = i\n            min_dist = dist\n    return str(min_index + 1)\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    coordinates = []\n    for _ in range(N):\n        x, y = list(map(int, input().split()))\n        coordinates.append((x, y))\n    coordinates.sort(key=lambda x: (x[0], x[1]))\n    ans = []\n    for i in range(N):\n        dists = []\n        for j in range(M):\n            dists.append(abs(coordinates[i][0] - coordinates[j][0]) + abs(coordinates[i][1] - coordinates[j][1]))\n        ans.append(dists.index(min(dists)) + 1)\n    return '\\n'.join(map(str, ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = []\n    for i in range(m):\n        d.append((c[i],d[i]))\n\n    d.sort()\n    d.sort(key=lambda x: x[1])\n    k = 1\n    for i in range(n):\n        if a[i] >= d[k][0]:\n            d[k] = (a[i], d[k][1])\n        k += 1\n\n    for i in range(n):\n        print(d[i][0], end=\" \")\n    return \"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution())\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(stdin)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return str(num + num ** 2 + num ** 3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a + (a * a * a)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a+a*a+a*a*a)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(stdin)}'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_i = stdin.strip()\n    b_i = stdin.strip()\n    n_a = n\n    n_b = n\n    while n_a > 0 and n_b > 0:\n        for i in range(n_a):\n            for j in range(n_b):\n                if a_i[i] == '#' and b_i[j] == '#':\n                    continue\n                if a_i[i] == '.' and b_i[j] == '#':\n                    return 'No'\n                if a_i[i] == '.' and b_i[j] == '.':\n                    return 'Yes'\n                if a_i[i] == '#' and b_i[j] == '.':\n                    n_a -= 1\n                    n_b -= 1\n                    continue\n        n_a -= 1\n        n_b -= 1\n    return 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,M = list(map(int,stdin.split()))\n    A = stdin.split('\\n')[1:]\n    for i in range(N):\n        if A[i].count('#')!= M:\n            return 'No'\n    return 'Yes'\n    \nprint(solution(input()))"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = stdin.split()\n    B = stdin.split()\n    # Your code here\n    row = 0\n    while row < N:\n        for col in range(col, M):\n            if A[row][col]!= \"B\":\n                return \"No\"\n        row += 1\n\n    row = N - 1\n    while row >= 0:\n        for col in range(M - 1, col - 1, -1):\n            if A[row][col]!= \"B\":\n                return \"No\"\n        row -= 1\n\n    return \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    return 'Yes' if isSubimageOfImage(stdin[0], stdin[1]) else 'No'\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def rotate_clockwise(img: list) -> list:\n        N = len(img)\n        rotated = [[0] * N for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                rotated[j][N - i - 1] = img[i][j]\n        return rotated\n\n    def check_image(img: list) -> bool:\n        N = len(img)\n        rotated = rotate_clockwise(img)\n        for i in range(N):\n            for j in range(N):\n                if rotated[i][j]!= '#':\n                    return False\n        return True\n\n    N, M = list(map(int, stdin.split()))\n    A = []\n    B = []\n    for i in range(N):\n        A.append(stdin[i])\n        B.append(stdin[i + N])\n    return 'Yes' if check_image(A) and check_image(B) else 'No'\n\nsolution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n') # 'Yes'\nsolution('3 2\\n##..\\n...#\\n###.\\n...#\\n#.##') # 'No'\nsolution('5 4\\n.#.\\n#.\\n.#\\n.#\\n#.#') # 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    n = int(stdin[0])\n    m = int(stdin[1])\n\n    a = stdin[2].split('#')\n    b = stdin[3].split('#')\n\n    a = list(map(lambda x: x[1:-1], a))\n    b = list(map(lambda x: x[1:-1], b))\n\n    return \"Yes\" if match(a, b, m, n) else \"No\"\n\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # iterate through input\n    # clean the input\n    # call function\n    # return the output\n    pass"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return str(max([int(i) + int(stdin[2]) for i in stdin[0:3]]))\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = stdin.split(' ')\n    a, b, c = int(input_arr[0]), int(input_arr[1]), int(input_arr[2])\n\n    return str(max([a + b, a + c, b + c, a * b, a * c, b * c]))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a + b, a + c, b + c))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(A + max(B, C), C + max(A, B)))\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(' ')))\n    return str(A + B - C)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_a = max(A, B, C)\n    min_a = min(A, B, C)\n    x = min_a\n    y = max_a - min_a\n    z = min_a - 1\n    return str(x + y + z)\nprint(solution(input()))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])))\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(n) for n in stdin.split()]\n    return str(max(A + B, A + C, B + C, key=lambda x: abs(x)))\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums, operators = stdin.split()\n    nums = list(map(int, nums.split(' ')))\n    operators = list(map(int, operators.split(' ')))\n    sum = 0\n    for i in range(len(nums) - 1):\n        if operators[i] == 0:\n            sum += nums[i] + nums[i + 1]\n        elif operators[i] == 1:\n            sum += nums[i]\n        elif operators[i] == 2:\n            sum -= nums[i]\n    return str(sum)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    ans = A + B\n    while ans > 9:\n        ans -= 10\n        if ans > C:\n            ans -= 10\n            if ans > B:\n                ans -= 10\n                if ans > A:\n                    ans -= 10\n                    if ans > C:\n                        ans -= 10\n    return str(ans)\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    price = sorted([int(x) for x in stdin.split()])\n    price_list = []\n    for i in range(N):\n        if i < N//2:\n            price_list.append(int((price[i] + price[N-1-i])/2))\n        elif i == N//2:\n            price_list.append(price[N//2])\n        else:\n            price_list.append(int((price[i] + price[N-1-i])/2))\n    price_list.sort()\n    total = sum(price_list)\n    print(total)\n    return total\n\nsolution(\"3 4980 7980 6980\")\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *prices = list(map(lambda x: int(x), stdin.split()))\n    answer = sum(prices[:n])\n    for i in range(n-1):\n        if prices[i] % 2 == 0:\n            answer = max(answer, prices[i] + (answer / 2))\n    return f\"{answer:.2f}\""
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"3\\n4980\\n7980\\n6980\\n\"\n    N = int(stdin.split()[0])\n\n    prices = stdin.split()[1:]\n\n    prices = list(map(lambda x: int(x), prices))\n\n    total = 0\n\n    for i in range(N):\n        total += prices[i]\n\n        if i >= 1:\n            total -= prices[i - 1] / 2\n            if total < 0:\n                total = 0\n\n    return str(total)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    lines = list(filter(None, lines))\n    if len(lines) < 2:\n        raise Exception('Insufficient inputs')\n    try:\n        N = int(lines[0])\n        prices = list(map(lambda x: int(x), lines[1].split(' ')))\n    except ValueError:\n        raise Exception('Invalid input')\n    if not (2 <= N <= 10):\n        raise Exception('Invalid input')\n    if max(prices) > 10000 or min(prices) < 100:\n        raise Exception('Invalid input')\n    if len(prices)!= N:\n        raise Exception('Invalid input')\n\n    # calculate discounts\n    discounts = [(x, x // 2) for x in prices]\n    discounts.sort(key=lambda x: x[1], reverse=True)\n\n    price = sum(prices)\n    i = 0\n    while price > 0 and i < N:\n        # check if item with max price is still profitable\n        # get item with highest price\n        # get total price of item\n        # if it is profitable, get total price of remaining items\n        # if not profitable, add discount to remaining items\n        if price >= discount[0][1]:\n            price -= discount[0][1]\n            i += 1\n        else:\n            price += discount[i][1]\n            i += 1\n    return str(price)"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = sorted([int(stdin) for stdin in stdin.split(' ')])\n    p.pop()\n\n    dp = {1: p[0]}\n    for i in range(2, N+1):\n        m = max(p[:i])\n        if m < dp.get(i/2, 0):\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + m\n    return str(dp.get(N, 0))"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = []\n    for i in range(n-1):\n        if i % 2 == 0:\n            r.append(int(stdin.split()[i+1])//2)\n        else:\n            r.append(int(stdin.split()[i+1]))\n    return str(sum(r) + int(max(r)))\n    \n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    prices = stdin[1:]\n    prices = list(map(int, prices))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j]\n            if j - prices[i-1] >= 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-prices[i-1]] + prices[i-1])\n    return dp[n][n]\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the total amount of money that is paid for the items.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    2 \\leq N \\leq 10\n    100 \\leq p_i \\leq 10000\n    p_i is an even number.\n    '''\n    N = int(stdin.strip())\n    p_arr = stdin.strip().split()\n    p_arr = list(map(int, p_arr))\n\n    # sort in ascending order\n    p_arr.sort(reverse=False)\n\n    half = N//2\n\n    # get the p_arr[half]\n    p_arr[half] = p_arr[half] // 2\n\n    # get the price list\n    price_list = p_arr + p_arr[:half]\n    price_list = sorted(price_list, reverse=False)\n\n    # get the total amount\n    total = 0\n    for i in range(N):\n        total += price_list[i]\n\n    return str(total)"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    y = [i for i in x if i % 2 == 0]\n    z = y[::2]\n    m = [i for i in x if i % 2!= 0]\n    m = m[1::2]\n    n = z + m\n    result = sum(n)\n    print(result)\n    return result\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    return min(c, (b * 10 + e - a) % 10)\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.strip())\n    B = int(stdin.strip())\n    C = int(stdin.strip())\n    D = int(stdin.strip())\n    E = int(stdin.strip())\n\n    def fib(x: int):\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 1\n        else:\n            return fib(x-1) + fib(x-2)\n\n    def f(x):\n        return fib(x)\n\n    def g(x, y):\n        return fib(x+y)\n\n    def h(x):\n        return fib(x)\n\n    def j(x):\n        return fib(x)\n\n    def k(x, y):\n        return fib(x-y)\n\n    def l(x, y):\n        return fib(x+y)\n\n    def m(x):\n        return fib(x)\n\n    def n(x):\n        return fib(x)\n\n    def o(x):\n        return fib(x)\n\n    def p(x):\n        return fib(x)\n\n    def q(x):\n        return fib(x)\n\n    def r(x):\n        return fib(x)\n\n    def s(x):\n        return fib(x)\n\n    def t(x):\n        return fib(x)\n\n    def u(x):\n        return fib(x)\n\n    def v(x):\n        return fib(x)\n\n    def w(x):\n        return fib(x)\n\n    def x(x):\n        return fib(x)\n\n    def y(x):\n        return fib(x)\n\n    def z(x):\n        return fib(x)\n\n    def _fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return _fib(n-1) + _fib(n-2)\n\n    def fib(n):\n        return _fib(n)\n\n    return fib(A) - 1"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition(n: int) -> bool:\n        return n % 10 == 0\n\n    def take_rest(n: int) -> int:\n        if check_condition(n):\n            return n\n        else:\n            return take_rest(n + 5)\n\n    return str(take_rest(int(stdin.split()[0])))\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a, b, c, d, e = stdin[0], stdin[1], stdin[2], stdin[3], stdin[4]\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    e = int(e)\n    if a % 10!= 0:\n        a = a + 10\n    if b % 10!= 0:\n        b = b + 10\n    if c % 10!= 0:\n        c = c + 10\n    if d % 10!= 0:\n        d = d + 10\n    if e % 10!= 0:\n        e = e + 10\n    l = sorted([a, b, c, d, e])\n    print(l)\n    # print(l)\n    # if l[0] >= l[1]:\n    #     l.insert(0, l.pop(1))\n    # else:\n    #     l.insert(0, l.pop(1))\n    # if l[0] >= l[1]:\n    #     l.insert(0, l.pop(1))\n    # else:\n    #     l.insert(0, l.pop(1))\n    # if l[0] >= l[1]:\n    #     l.insert(0, l.pop(1))\n    # else:\n    #     l.insert(0, l.pop(1))\n    # print(l)\n    print(l)\n    l.insert(0, l.pop(0))\n    print(l)\n    # return l[0]\n    return str(l[0])\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 10 == 0:\n        return -1\n    if a % 10!= 0 and a % 10!= 9:\n        return int(a/10 * 10)\n    if a % 10 == 9:\n        return int((a-9) / 10) * 10 + 18\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nThis can be solved using the Binomial Coefficient formula.\nThe binomial coefficient is defined as:\n\nn! / (m! * (n-m)!)\n\nThe output should be:\n\np = int(input())\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split(\"\\n\"))\n    A = (A * 10 + 10) * C\n    B = (B * 10 + 10) * D\n    C = (C * 10 + 10) * E\n    D = (D * 10 + 10) * (E + 1)\n    E = (E * 10 + 10) * (A + 1)\n    return max(A, B, C, D, E)\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute = map(int, stdin.split())\n    return str(min(hour * 10 + minute, hour * 10 + (minute + (5 - (hour % 10)))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    if A % 10!= 0:\n        return -1\n    dic = {\n        \"ABC\": [29, 20, 7],\n        \"ARC\": [30, 50, 50, 60, 60],\n        \"AGC\": [50, 57, 60],\n        \"ATC\": [60, 180, 215],\n        \"APC\": [180, 215, 215]\n    }\n    ans = -1\n    for dishes in dic.values():\n        start = 0\n        for i, dish in enumerate(dishes):\n            if start + dish > A:\n                break\n            start = start + dish\n        else:\n            ans = max(ans, start)\n    return str(ans)"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    earliest = A\n    end_time = 0\n    while end_time < B:\n        end_time += 10\n    if end_time - A >= D:\n        earliest = max(earliest, end_time)\n    while end_time >= E:\n        end_time -= 10\n    if end_time >= A and (end_time - A) % 10 == 0:\n        earliest = max(earliest, end_time)\n    if end_time >= D and (end_time - D) % 10 == 0:\n        earliest = max(earliest, end_time)\n    return str(earliest)\n    \"\"\"\n    maxTime = 0\n    for i in range(1, 123, 10):\n        if i % 10 == 0:\n            maxTime = max(maxTime, i + 29)\n        else:\n            maxTime = max(maxTime, i + 20)\n    for i in range(1, 123, 10):\n        if i % 10 == 0:\n            maxTime = max(maxTime, i + 35)\n        else:\n            maxTime = max(maxTime, i + 7)\n    return str(maxTime)\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a,b,c,d,e=list(map(int,stdin.split()))\n    time=0\n    while(a!=e):\n        a+=10\n        if(a%10==0):\n            time=a\n        else:\n            time=a-1\n    return time\n\nstdin=input()\nprint(solution(stdin))\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    return str(1/(sum([1/i for i in a])))\n    #return str(sum(1/i for i in a))\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(reduce(lambda x, y: x*y, range(1, n + 1)) / reduce(lambda x, y: x*y, range(1, 2*n + 1)))\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(map(int, stdin.strip().split(' ')))\n    inv_seq = []\n    for i in range(1, n + 1):\n        inv_seq.append(1 / seq[0])\n        del seq[0]\n    return''.join(map(str, inv_seq))"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = map(int, stdin.split(\" \"))\n    \n    # Write your code here\n    sum_inv = sum(1 / inv for inv in A)\n    return str(sum_inv)\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.strip().split()))\n    product = 1\n    for i in range(N):\n        product *= 1 / A[i]\n    return str(product)"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp.pop(0)\n    res = 1\n    if n == 1:\n        return '1'\n    for i in range(n - 1, -1, -1):\n        res = res * inp[i]\n    return str(res / inp[0])"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    #inverse = sequence[::-1]\n    sum_inverse = 0\n    for i in range(n):\n        sum_inverse += (1 / sequence[i])\n\n    print(sum_inverse)\n\n    return sum_inverse"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    n_factors = factorial(n)\n    n_factors_div = []\n    for i in range(1, n_factors):\n        if n_factors % i == 0:\n            n_factors_div.append(i)\n    inv_sum = 0\n    for i in range(len(n_factors_div)):\n        inv_sum += 1 / n_factors_div[i]\n    return str(inv_sum)\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N = stdin[0]\n    a = stdin[1:]\n    if N == 1:\n        return str(a[0])\n    else:\n        d = 1\n        for i in range(N):\n            d *= a[i]\n        inverses = [1]\n        for i in range(N):\n            inverses.append(d // (a[i] * inverses[-1]))\n        return '{:.5f}'.format(1 / (1 / inverses[-2] + 1 / inverses[-1]))\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[:-1]\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    res = ''\n    for i in range(len(A)):\n        res += str(inverse(A[i])) +''\n    return res\ndef"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    trees_dict: dict = dict()\n    for line in stdin.splitlines():\n        trees_dict[int(line.split()[0])] = int(line.split()[1])\n\n    trees = sorted(trees_dict.items(), key=lambda x: x[1], reverse=True)\n\n    max_height = trees[0][1]\n    min_height = trees[0][1]\n\n    for i in range(1, len(trees)):\n        if max_height - min_height > trees[i][1] - trees[i - 1][1]:\n            max_height = trees[i][1]\n            min_height = trees[i - 1][1]\n\n    print(max_height - min_height)\n    return max_height - min_height\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    tree_heights = stdin.split(' ')\n    tree_heights = list(map(int, tree_heights))\n    max_height = max(tree_heights)\n    min_height = min(tree_heights)\n    return str(max_height - min_height)\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, K = map(int, stdin.split(\" \"))\n    K_nums = list(map(int, stdin.split(\" \")))\n    h_max = max(K_nums)\n    h_min = min(K_nums)\n    h_diff = h_max - h_min\n    if K == 1:\n        return str(h_diff)\n    else:\n        if K == len(K_nums):\n            return str(h_max - h_min)\n        else:\n            h_max = max(K_nums[:K])\n            h_min = min(K_nums[:K])\n            return str(h_max - h_min)\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h_max, h_min = list(map(int, stdin.split()))\n    min_diff = h_max - h_min\n    min_diff_lst = list()\n    if min_diff == 0:\n        min_diff_lst.append(min_diff)\n    else:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                temp = h_max - h_min\n                if abs(h_min - h_max) > abs(h_min - h_max):\n                    temp = h_min - h_max\n                min_diff_lst.append(temp)\n    return min(min_diff_lst)"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([5, 3, '10', '15', 11, 14, 12])\n    '2'\n    >>> solution([2, 3, 4, 5, 1, 2, 3])\n    '4'\n    >>> solution([2, 3, 4, 5, 1, 2, 3, 4, 5, 6])\n    '3'\n    \"\"\"\n    stdin = stdin.strip().splitlines()\n    n, k = map(int, stdin[0].split())\n    return str(min(max(map(int, stdin[i + 1])) - min(map(int, stdin[i])) for i in range(k)) if n >= k else \"INVALID\")\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of the form \"N K h1 h2: h3 h4\" \n    Return the minimum possible distance between h2 and h3.\n    \"\"\"\n    \n    data = stdin.split()\n    n, k = int(data[0]), int(data[1])\n    \n    h = map(int, data[2:])\n    h = list(h)\n    h.sort()\n    print(h)\n\n    return ''\n\nstdin = \"5 3 10 15 11 14 12\"\nstdin = \"5 2 10 15 11 14 12\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(_) for _ in stdin.split())\n    h_trees = sorted(list(map(int, stdin.split())))\n    return str(h_trees[K - 1] - h_trees[0])\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  h = list(map(int, stdin.split()))\n  print((max(h) - min(h)) if K == len(h) else -1)\n\nsolution(\"5 3\\n10\\n15\\n11\\n14\\n12\")\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution(input()))\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(int(max(range(1, N)) - max(range(1, K)))), int(min(range(1, N)) - min(range(1, K))))"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.upper()\n    if alpha.islower():\n        return 'a'\n    else:\n        return 'A'\n\nsolution('b')\n'''\n\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.upper()\n    if alpha.isupper():\n        print(alpha.lower())\n    else:\n        print(alpha.upper())\n    return \"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper() if stdin.islower() else stdin.lower()\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a function, which when given a string, returns the uppercase version of that string\n    \"\"\"\n    return stdin.upper() if stdin.isupper() else stdin.lower()\n    \n    \n    "
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()\n\nprint(solution(input()))"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return {1: 'A', 2: 'a'}.get(stdin.isupper())"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin\n    if alpha.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.upper()\n    if alpha == alpha.lower():\n        return \"a\"\n    return \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    alpha = stdin\n    if alpha.isupper():\n        return \"A\"\n    elif alpha.islower():\n        return \"a\"\n    else:\n        return alpha\n\nsolution(input())\n\"\"\"\n\n\"\"\"\n2. Write a Python program to replace the last element in a list with another list. \nSample data : [1, 3, 5, 7, 9, 10], [2, 4, 6, 8]\nExpected output: [1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n\"\"\"\n3. Write a Python program to remove the nth index character from a nonempty string.\nSample data : 'w3resource', n = 1\nExpected output: 'w3ce'\n\"\"\"\n\n\"\"\"\n4. Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\nSample data : 'The lyrics is not that poor!'\n'The lyrics is poor!'\nExpected output: 'The lyrics is good!'\n\"\"\"\n\n\"\"\"\n5. Write a Python program to change a given string to a new string where the first and last chars have been exchanged.\nSample data : 'w3resource'\nExpected output: 'y3ctreW'\n\"\"\"\n\n\"\"\"\n6. Write a Python program to find a string without 'ing' word in a given string.\nSample data : 'The lyrics is not that poor!'\nExpected output: 'The lyrics is that poor!'\n\"\"\"\n\n\"\"\"\n7. Write a Python program to remove the characters which have odd index values of a given string.\nSample data : 'w3resource'\nExpected output: '3cerew'\n\"\"\"\n\n\"\"\"\n8. Write a Python program to count the occurrences of each word in a given sentence.\nSample data :\nInput :\nI like apples, I like apples, I like apples.\nOutput :\napple: 2\napples: 2\nlike: 2\n\"\"\"\n\n\"\"\"\n9. Write a Python program to capitalize the first and last character of each word of a given string.\nSample data : 'python for beginners'\nExpected output : 'Python for Beginners'\n\"\"\"\n\n\"\"\"\n10. Write a Python program to split a given string and then check if a character in the string is present at the same position in each of the splits.\nSample data : 'hello world'\n'o' is present at the 1st index, 'r' is present at the 2nd index, etc.\n\"\"\"\n\n\"\"\"\n11. Write a Python program to check whether a string starts with specified character.\nSample data : 'Python for Beginners'\n'P' is present at the 1st index, 'y' is present at the 2nd index, etc.\n\"\"\"\n\n\"\"\"\n12. Write a Python program to remove the characters which have odd index values of a given string.\nSample data : 'w3resource'\nExpected output : '3cerew'\n\"\"\"\n\n\"\"\"\n13. Write a Python program to swap a given string.\nSample data : 'abc', 'xyz'\nExpected output : 'xyc abz'\n\"\"\"\n\n\"\"\"\n14. Write a Python program to count occurrences of each word in a given sentence.\nSample data : 'The quick brown fox jumps over the lazy dog.'\nExpected output :\nThe quick: 2\nbrown: 1\nfox: 1\njumps: 1\nover: 1\ndog: 1\n\"\"\"\n\n\"\"\"\n15. Write a Python program to find the first non-repeating character in a given string.\nSample data : 'thequickbrownfoxjumpsoverthelazydog'\nExpected output :\nt\n\"\"\"\n\n\"\"\"\n16. Write a Python program to add a string to the end of another string.\nSample data : 'abc', 'xyz'\nExpected output : 'abcxyz'\n\"\"\"\n\n\"\"\"\n17. Write a Python program to compute the greatest common divisor (GCD) of two positive integers.\nSample data : 8, 12\nExpected output : 2\n\"\"\"\n\n\"\"\"\n18. Write a Python program to get the Fibonacci series between 0 to 50.\nSample data : 5\nExpected output : 0 1 1 2 3 5 8 13 21 34 55\n\"\"\"\n\n\"\"\"\n19. Write a Python program to get the sum and average from a given list of numbers.\nSample data : [2, 4, 6, 8, 10]\nExpected output : 6 20.0\n\"\"\"\n\n\"\"\"\n20. Write a Python program to get the length of a given string.\nSample data : 'Python for Beginners'\nExpected output : 13\n\"\"\"\n\n\"\"\"\n21. Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\nSample data : 'The lyrics is not that poor!'\n'The lyrics is poor!'\nExpected output: 'The lyrics is good!'\n\"\"\"\n\n\"\"\"\n22. Write a Python program to find whether a given string starts with specified characters.\nSample data : 'Python for Beginners'\n'P' is present at the 1st index, 'y' is present at the 2nd index, etc.\n\"\"\"\n\n\"\"\"\n23. Write a Python program to remove leading zeros from an IP address.\nSample data :\n192.168.0.2\nExpected output :\n192.168.0.2\n\"\"\"\n\n\"\"\"\n24. Write a Python program to print a specified list after removing the 0th, 4th and 5th elements.\nSample list : ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\nExpected output : ['Green', 'White', 'Black', 'Pink']\n\"\"\"\n\n\"\"\"\n25. Write a Python program to remove the characters which have odd index values of a given string.\nSample data : 'w3resource'\n'o' is present at the 1st index, 'r' is present at the 2nd index, etc.\nExpected output : '3cerew'\n\"\"\"\n\n\"\"\"\n26. Write a Python program to reverse a string word by word.\nSample data : 'the quick brown fox jumps over the lazy dog'\nExpected output : 'dog jumps over the lazy fox quick brown'\n\"\"\"\n\n\"\"\"\n27. Write a Python program to split a given string.\nSample data : 'the quick brown fox jumps over the lazy dog'\n'q' is present at the 1st index, 'u' is present at the 2nd index, etc.\nExpected output :\nthe - 'the'\nquick - 'quick'\nbrown - 'brown'\nfox - 'fox'\njumps - 'jumps'\nover - 'over'\ndog - 'dog'\n\"\"\"\n\n\"\"\"\n28. Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself.\nSample data :'restart'\n'r$t'\nExpected output :'resta$t'\n\"\"\"\n\n\"\"\"\n29. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.\nSample data : 'abc', 'xyz'\nExpected output : 'xyc abz'\n\"\"\"\n\n\"\"\"\n30. Write a Python program to remove the characters which have odd index values of a given string.\nSample data : 'w3resource'\n'o' is present at the 1st index, 'r' is present at the 2nd index, etc.\nExpected output : '3cerew'\n\"\"\"\n\n\"\"\"\n31. Write a Python program to find the first non-repeating character in a given string.\nSample data : 'thequickbrownfoxjumpsoverthelazydog'\n'e' is present at the 1st index, 'h' is present at the 2nd index, etc.\nExpected output : 'e'\n\"\"\"\n\n\"\"\"\n32. Write a Python program to count the occurrences of each word in a given sentence.\nSample data : 'The quick brown fox jumps over the lazy dog.'\n'jumps' is present at the 2nd index, '"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    # Return no of triplets\n    print(triplet_count(K, S))\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    x = int(stdin[0])\n    y = int(stdin[1])\n    z = x + y + z\n    \n    return x + y + z\n\nprint(solution(\"2 2\"))\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (K, S) = stdin.split(\" \")\n    if K.is_integer() and S.is_integer():\n        result = 0\n        for x in range(1, K + 1):\n            for y in range(1, K + 1):\n                for z in range(1, K + 1):\n                    if x + y + z == S:\n                        result += 1\n        return result\n\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    count = 0\n    for x in range(k):\n        for y in range(k):\n            for z in range(k):\n                if x + y + z == s:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x,y,z = map(int,stdin.split())\n    return x+y+z\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  X, Y, Z = map(int, stdin.split())\n  count = 0\n  for x in range(X+1):\n    for y in range(Y+1):\n      for z in range(Z+1):\n        if x + y + z == Z:\n          count += 1\n  return count\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    K = int(input_data[0])\n    S = int(input_data[1])\n    result = 0\n    for i in range(K):\n        for j in range(K):\n            for k in range(K):\n                if i + j + k == S:\n                    result += 1\n    return str(result)\nprint(solution(input()))\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take input from STDIN.\n    \"\"\"\n    K, S = map(int, stdin.split())\n    result = 0\n    for i in range(0, K):\n        for j in range(0, K):\n            for k in range(0, K):\n                if i + j + k == S:\n                    result = result + 1\n    return str(result)"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    S = int(S)\n    count = 0\n    for x in range(1,K+1):\n        for y in range(1,K+1):\n            for z in range(1,K+1):\n                if(x+y+z == S):\n                    count += 1\n    return str(count)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = stdin.split()\n    y = ''.join(y)\n    y = y.replace(\".\",\"\")\n    y = y.replace(\"-\",\"\")\n    y = y.replace(\"_\",\"\")\n    y = y.replace(\" \",\"\")\n    y = int(y)\n    if y <= 2020 and y >= 2000:\n        if (y % 4) == 0:\n            if (y % 100) == 0:\n                if (y % 400) == 0:\n                    if len(str(y)) == 4:\n                        if (len(str(y)[2:4])) == 2:\n                            return 'YYMM'\n                        else:\n                            return 'MMYY'\n                    else:\n                        return 'AMBIGUOUS'\n                else:\n                    return 'NA'\n            else:\n                return 'NA'\n        else:\n            return 'NA'\n    else:\n        return 'NA'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split()\n\n    if len(S)!= 4:\n        return \"NA\"\n\n    if S[-1][-2:] == S[-2][-2:]:\n        return \"YYMM\"\n\n    if S[-1][-2:] == S[-2][-2:]:\n        return \"MMYY\"\n\n    return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    if s[-2:] == '00' and s[-4:-2] == '05':\n        print('YYMM')\n    elif s[-2:] == '00' and s[-4:-2] == '06':\n        print('MMYY')\n    elif s[-2:] == '00' and s[-4:-2] == '06':\n        print('AMBIGUOUS')\n    else:\n        print('NA')\n    return None\n\nsolution('1905')\nsolution('1907')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\nsolution('1916')\ns"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    output = ''\n    if stdin == '01':\n        output = 'YYMM'\n    elif stdin == '09':\n        output = 'MMYY'\n    else:\n        output = 'AMBIGUOUS'\n    return output\n    # Write your code here"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    year, month = stdin\n    if int(year) >= 2000:\n        if int(month) in range(1, 13):\n            if int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12:\n                return \"YYMM\"\n            elif int(month) == 4 or int(month) == 6 or int(month) == 9 or int(month) == 11:\n                return \"MMYY\"\n            else:\n                return \"AMBIGUOUS\"\n        else:\n            return \"NA\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    months_dict = {\n        '01': 'JAN',\n        '02': 'FEB',\n        '03': 'MAR',\n        '04': 'APR',\n        '05': 'MAY',\n        '06': 'JUN',\n        '07': 'JUL',\n        '08': 'AUG',\n        '09': 'SEP',\n        '10': 'OCT',\n        '11': 'NOV',\n        '12': 'DEC',\n    }\n\n    months_dict_reverse = {\n        'JAN': '01',\n        'FEB': '02',\n        'MAR': '03',\n        'APR': '04',\n        'MAY': '05',\n        'JUN': '06',\n        'JUL': '07',\n        'AUG': '08',\n        'SEP': '09',\n        'OCT': '10',\n        'NOV': '11',\n        'DEC': '12',\n    }\n\n    if len(stdin) == 4:\n        s_list = list(stdin)\n        y, m, d = s_list[0], s_list[1], s_list[2]\n        y = int(y)\n        m = months_dict_reverse[m]\n        d = int(d)\n        if m == '12':\n            if (y % 4 == 0 and y % 100!= 0) or y % 400 == 0:\n                m = '02'\n                if d == 29:\n                    d = '28'\n            else:\n                m = '01'\n                if d == 28:\n                    d = '29'\n        else:\n            m = '01'\n            if d == 31:\n                d = '30'\n        return f'{y}-{m}-{d}'\n\n    if len(stdin) == 5:\n        s_list = list(stdin)\n        y, m, d = s_list[0], s_list[1], s_list[2]\n        y = int(y)\n        m = months_dict[m]\n        d = int(d)\n        if m == '12':\n            if (y % 4 == 0 and y % 100!= 0) or y % 400 == 0:\n                m = '02'\n                if d == 29:\n                    d = '28'\n            else:\n                m = '01'\n                if d == 28:\n                    d = '29'\n        else:\n            m = '01'\n            if d == 31:\n                d = '30'\n        return f'{y}-{m}-{d}'\n\n    if len(stdin) == 4:\n        return 'NA'\n\n    return 'AMBIGUOUS'\n\nsolution(stdin)"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    month = {\"01\": \"Jan\", \"02\": \"Feb\", \"03\": \"Mar\", \"04\": \"Apr\", \"05\": \"May\", \"06\": \"Jun\", \"07\": \"Jul\", \"08\": \"Aug\",\n             \"09\": \"Sep\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\"}\n    for i in range(1, len(stdin)):\n        if len(stdin) % 2 == 0 and stdin[i-1] + stdin[i] == \"19\":\n            if i == len(stdin)-2:\n                return \"NA\"\n            else:\n                return \"AMBIGUOUS\"\n        elif len(stdin) % 2 == 1 and stdin[i-1] + stdin[i] == \"19\":\n            if i == len(stdin)-2:\n                return \"AMBIGUOUS\"\n            else:\n                return \"NA\"\n        elif stdin[i-1] == \"0\" and stdin[i] == \"0\":\n            return \"NA\"\n        else:\n            return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    month_dic = {\n        \"01\": \"January\",\n        \"02\": \"February\",\n        \"03\": \"March\",\n        \"04\": \"April\",\n        \"05\": \"May\",\n        \"06\": \"June\",\n        \"07\": \"July\",\n        \"08\": \"August\",\n        \"09\": \"September\",\n        \"10\": \"October\",\n        \"11\": \"November\",\n        \"12\": \"December\"\n    }\n    s = stdin.split()\n    if len(s)!= 1:\n        return \"AMBIGUOUS\"\n    if len(s[0]) == 4 and s[0][2] == \"0\" and int(s[0][:2]) < 31 and int(s[0][2:]) < 12:\n        return month_dic[s[0][2:]] + \" \" + s[0][:2]\n    if len(s[0]) == 4 and s[0][2]!= \"0\" and int(s[0][:2]) < 31 and int(s[0][2:]) < 12:\n        return month_dic[s[0][2]] + \" \" + s[0][:2]\n    if len(s[0]) == 4:\n        return \"NA\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    y, m, yy, mm = stdin.split()\n    if len(y) > 2 or len(m) > 2:\n        return \"AMBIGUOUS\"\n    elif len(y) == 2:\n        if int(y) >= 100 and int(y) <= 999:\n            if len(yy) > 1 and len(yy) <= 3:\n                return \"YYMM\"\n            else:\n                return \"AMBIGUOUS\"\n        elif int(y) >= 20 and int(y) <= 99:\n            if len(yy) > 1 and len(yy) <= 3:\n                return \"MMYY\"\n            else:\n                return \"AMBIGUOUS\"\n        else:\n            return \"AMBIGUOUS\"\n    elif len(m) == 2:\n        if int(m) >= 1 and int(m) <= 12:\n            if len(m) == 1:\n                return \"YY\"\n            elif len(m) == 2:\n                if int(m) == 2:\n                    if int(y) == 2019:\n                        if len(yy) > 1 and len(yy) <= 3:\n                            return \"YYYY\"\n                        else:\n                            return \"AMBIGUOUS\"\n                    else:\n                        if len(yy) > 1 and len(yy) <= 3:\n                            return \"YYYY\"\n                        else:\n                            return \"AMBIGUOUS\"\n                else:\n                    if len(yy) > 1 and len(yy) <= 3:\n                        return \"YY\"\n                    else:\n                        return \"AMBIGUOUS\"\n            else:\n                if len(yy) > 1 and len(yy) <= 3:\n                    return \"YY\"\n                else:\n                    return \"AMBIGUOUS\"\n        else:\n            return \"AMBIGUOUS\"\n    else:\n        return \"AMBIGUOUS\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'NA' if (len(stdin)!= 4) else (\n        'YYMM' if (int(stdin[:2]) <= 31) and (int(stdin[2:4]) <= 12) else\n        'MMYY' if (int(stdin[2:4]) <= 31) and (int(stdin[:2]) <= 12) else\n        'AMBIGUOUS' if ((int(stdin[:2]) <= 31) and (int(stdin[2:4]) <= 12)) else 'NA'\n    )"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_1 = int(stdin)\n    number_2 = number_1 + 1\n    number_3 = number_1 + 2\n    number_4 = number_1 + 3\n    number_5 = number_1 + 4\n    if number_1 % 2 == 0 and number_2 % 2 == 0 and number_3 % 2 == 1 and number_4 % 2 == 1 and number_5 % 2 == 1:\n        return str(number_1//2 + number_3//2)\n    else:\n        return str(number_1//2)\n\nprint(solution(input()))\n'''\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    print(choosePairEvenOdd(K))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def even_odd_combos(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return (n - 1) // 2\n    \n    answer = 0\n    for i in range(int(stdin) + 1):\n        answer += even_odd_combos(i)\n    return str(answer)\n\nsolution(input())"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split(\"\\n\")[0]\n    return len(filter(lambda x: x % 2 == 0, range(1, int(input) + 1)))"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    even, odd = stdin.split(' ')\n    return str(int(even) // 2) +'' + str(int(odd) + int(even) % 2)\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    odd = int(stdin)\n    count = 0\n    if odd % 2 == 1:\n        return count\n    for i in range(odd+1):\n        if i % 2 == 0:\n            for j in range(odd+1):\n                if j % 2 == 1:\n                    count += 1\n    return count"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  # Compute the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n  print(n//2 + n%2)\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    even = 0\n    odd = 0\n    for n in range(1, int(stdin)+1):\n        if (n%2)==0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    return str(even)+\" \"+str(odd)\n\nprint(solution(input()))"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return h * 60 + m\n\n\nprint(solution(\"9 12\"))\nprint(solution(\"9 14\"))\nprint(solution(\"9 9\"))\nprint(solution(\"12 12\"))\nprint(solution(\"0 0\"))\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(get_time(A,B))\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = list(map(int, stdin.split()))\n    if A < A:\n        A = 24 - A\n    if A < B:\n        A += 24\n    return str(A - B)\n    # or\n    return str(A - max(A,B))"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(x) for x in stdin.split())\n    return '{:02}'.format(24 - A + B)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin.split())\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(int((A + 24 * (B - A)) % 24))\n    return \"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if m < 45:\n        h += 1\n    else:\n        h += 2\n    return str(h) +'' + str(m) +'o\\'clock'"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split())\n    if A==24:\n        return \"00\"\n    if A==23:\n        return \"00\"\n    return str(24*(B-A+1)+A)\nprint(solution(input()))\n\n---Input---\n7 8\n\n---Output---\n11\n\n'''\nA,B = map(int,input().split())\nprint(str(B-A+1)+str(A))\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution for the problem.\n\n    Args:\n        stdin: Standard input for the problem.\n\n    Returns:\n        The correct answer to the problem.\n    \"\"\"\n    A, B = map(int, stdin.split())\n\n    return str(12 + (A - 1) % 24)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '23'\n    return '{:02d}'.format((a + b) % 24)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    for i in range(n // 10):\n        if i * 10 + 1 <= n:\n            r -= 100 * ((n - i * 10 - 1) // 10)\n        else:\n            r -= 100 * (n // 10)\n    return str(r)\nprint(solution(input()))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.strip().split(' '))\n    return str(R - (N - 10) * 100)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # solution without using while\n    contests, rating = stdin.split(' ')\n    K, N = int(contests), int(rating)\n\n    if K >= 10:\n        return str(N - (K * 10))\n\n    return str(N - (K * 10) - 100 * (10 - K))\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = stdin[0]\n    R = stdin[1]\n    contests = (0, )\n    inner_rating = 0\n    for i in range(2, len(stdin), 2):\n        contests = (contests[0] + int(stdin[i]), contests[1] + 1)\n    if contests[1] >= 10:\n        inner_rating = R\n    else:\n        inner_rating = R - 100 * (10 - contests[1])\n    print(inner_rating)\n    return inner_rating"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    R = int(input_list[1])\n    return str(N*R)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    n = int(n)\n    r = int(r)\n    if n <= 10:\n        return \"1\" if r >= 10 else r - 100 * (10 - n)\n    else:\n        return str(r)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, R = map(int, lines[0].split())\n    result = []\n    for line in lines[1:]:\n        result.append(solution_inner(N, int(line), R))\n    print(result)\n    return''.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    return str(N * (R - 10 * (N - 1)) // 2)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, R = stdin.split()\n    return f'{int(N) * int(R) - int(N) - int(R)}'"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    inner_rating, outer_rating = r, 0\n    if n >= 10:\n        inner_rating = r\n    else:\n        inner_rating = r - 100 * (n - 10)\n    print(inner_rating)\n    return str(inner_rating)\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    digits = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    l = []\n    if N > 0:\n        while N > 0:\n            l.append(digits[N % K])\n            N //= K\n    else:\n        l = ['0'] * N\n        N = -N\n    s = \"\"\n    for i in range(len(l)):\n        s += l[i]\n    return s\n\nsolution('11 2')\n\"\"\"\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin:\n    An integer N and a positive integer K.\n    Convert N to base-K representation.\n    \"\"\"\n    return int(stdin.split()[1], int(stdin.split()[0]))"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin\n    return str(n.count('1')) +'' + str(len(n) - n.count('1')) +'' + str(bin(n.count('1'))[2:]).zfill(k)\n\nsolution(input().split())\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(N * pow(2, K - 1))"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    number = N\n    while number!= 0:\n        number = (number * K) % 10\n        print(number)\n        number = (number * K) % 10\n    return \"\".join(str(x) for x in range(0, 10))\n    \n    # n = int(input())\n    # while n!= 0:\n    #     print(n % 10)\n    #     n = (n * 2) % 10\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    return str(len(bin(int(n))[2:]))"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num, base = stdin.split()\n    return str(len(num) - len(num.rstrip('0'))) + \" \" + str(base)"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(bin(int(stdin)).lstrip('0b')))"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(' ')\n    num = int(stdin[0])\n    base = int(stdin[1])\n    res = \"\"\n    while num!= 0:\n        res += str(num%base)\n        num = num//base\n    return len(res)"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    num_base_10 = int(input_data[0])\n    num_base_k = int(input_data[1])\n\n    if num_base_10 >= num_base_k:\n        return str(num_base_10 // num_base_k)\n    return str(num_base_10 // num_base_k) + '.' + str(num_base_10 % num_base_k)\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    return str(int(n)//2 + 1) if (int(n)%2 == 0) else str(int(n)//2 + 2)\n\nsolution(\"3\")\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    pages_per_sheet: int = int(N / 2)\n    sheets: int = N // pages_per_sheet\n    return str(sheets)\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    result = \"\"\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            result += str(n) + '\\n'\n        else:\n            n = (n * 3) + 1\n            result += str(n) + '\\n'\n    return result\n\n\nprint(solution(input()))\n\n--------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n--------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n--------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n--------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n--------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0:\n        n = n / 2\n        count += 1\n    else:\n        n = (n * 3) + 1\n        count += 1\n\nprint(count)\n\n-----------------------------------------------------\n\nn = int(input())\n\ncount = 0\n\nwhile n > 1:\n    if n % 2 == 0"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    res = 0\n    for i in range(1, n + 1):\n        print(2 * i)\n        print(2 * i + 1)\n        print(2 * i + 2)\n        res += 3\n    return str(res)\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n / 2)\n    else:\n        return str(int(n / 2) + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a N as an input and prints the minimum number of sheet required to print all the data.\n    '''\n    N = int(stdin)\n    return f'3' if N % 2 else f'2'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return str(N // 2) + \" \" + str(N // 2)\n    else:\n        return str(N // 2) + \" \" + str(N // 2 + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    N = int(n)\n    if N == 1:\n        return str(1)\n    if N == 2:\n        return str(1)\n    elif N == 3:\n        return str(2)\n    else:\n        if N == 4:\n            return str(3)\n        else:\n            if (N % 3) == 0:\n                return str(N//3)\n            else:\n                return str(N//3 + 1)\nprint(solution(input()))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = stdin.pop(0)\n    n = int(n)\n    print(n)\n    return \"\"\n\nstdin = \"1\"\nprint(solution(stdin))"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    for i in range(1, n+1):\n        if n%i == 0:\n            print(i)\n            break\n        else:\n            continue\n    return \"3\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a == 1 or a == 2) and a + a <= 16:\n        return \"Yay!\"\n    else:\n        return \":((\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for a, b in map(int, stdin.split()):\n        if a + b == 16:\n            return \"Yay!\"\n    return \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    AB_sum = A + B\n    AB_sum_squared = A ** 2 + B ** 2\n    return 'Yay!' if (AB_sum == 16 and (AB_sum_squared >= 144 and AB_sum_squared <= 480)) else ':( '"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A == 5 and (B == 5 or B == 6)):\n        return \"Yay!\"\n    elif (A == 5 and B == 6):\n        return \"Yay!\"\n    else:\n        return \":((\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    if (n1 + n2) == 16:\n        return 'Yay!'\n    else:\n        return ':( '\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a + b <= 16:\n        return \"Yay!\"\n    else:\n        return \":( \"\n\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B >= 16:\n        return \"Yay!\"\n    return \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or A == 5:\n        return \"Yay!\"\n    elif B == 1 or B == 5:\n        return \"Yay!\"\n    else:\n        return \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and (B - 1) * 2 == A + (B + 1) * 2:\n        return \"Yay!\"\n    return \":((\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if A + B <= 16 and (A * 2 + 1) * 2 == 16 - A - B:\n        return \"Yay!\"\n    return \":( \"\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) == 1:\n        return 0\n    if len(S) == 2:\n        return abs(ord(S[0]) - ord(S[1]))\n    if len(S) == 3:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[1]) - ord(S[2]))\n    if len(S) == 4:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[0]) - ord(S[3])) + abs(ord(S[1]) - ord(S[2])) + abs(ord(S[1]) - ord(S[3])) + abs(ord(S[2]) - ord(S[3]))\n    if len(S) == 5:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[0]) - ord(S[3])) + abs(ord(S[0]) - ord(S[4])) + abs(ord(S[1]) - ord(S[2])) + abs(ord(S[1]) - ord(S[3])) + abs(ord(S[1]) - ord(S[4])) + abs(ord(S[2]) - ord(S[3])) + abs(ord(S[2]) - ord(S[4])) + abs(ord(S[3]) - ord(S[4]))\n    if len(S) == 6:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[0]) - ord(S[3])) + abs(ord(S[0]) - ord(S[4])) + abs(ord(S[0]) - ord(S[5])) + abs(ord(S[1]) - ord(S[2])) + abs(ord(S[1]) - ord(S[3])) + abs(ord(S[1]) - ord(S[4])) + abs(ord(S[1]) - ord(S[5])) + abs(ord(S[2]) - ord(S[3])) + abs(ord(S[2]) - ord(S[4])) + abs(ord(S[2]) - ord(S[5])) + abs(ord(S[3]) - ord(S[4])) + abs(ord(S[3]) - ord(S[5])) + abs(ord(S[4]) - ord(S[5]))\n    if len(S) == 7:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[0]) - ord(S[3])) + abs(ord(S[0]) - ord(S[4])) + abs(ord(S[0]) - ord(S[5])) + abs(ord(S[0]) - ord(S[6])) + abs(ord(S[1]) - ord(S[2])) + abs(ord(S[1]) - ord(S[3])) + abs(ord(S[1]) - ord(S[4])) + abs(ord(S[1]) - ord(S[5])) + abs(ord(S[1]) - ord(S[6])) + abs(ord(S[2]) - ord(S[3])) + abs(ord(S[2]) - ord(S[4])) + abs(ord(S[2]) - ord(S[5])) + abs(ord(S[2]) - ord(S[6])) + abs(ord(S[3]) - ord(S[4])) + abs(ord(S[3]) - ord(S[5])) + abs(ord(S[3]) - ord(S[6])) + abs(ord(S[4]) - ord(S[5])) + abs(ord(S[4]) - ord(S[6])) + abs(ord(S[5]) - ord(S[6]))\n    if len(S) == 8:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[0]) - ord(S[3])) + abs(ord(S[0]) - ord(S[4])) + abs(ord(S[0]) - ord(S[5])) + abs(ord(S[0]) - ord(S[6])) + abs(ord(S[0]) - ord(S[7])) + abs(ord(S[1]) - ord(S[2])) + abs(ord(S[1]) - ord(S[3])) + abs(ord(S[1]) - ord(S[4])) + abs(ord(S[1]) - ord(S[5])) + abs(ord(S[1]) - ord(S[6])) + abs(ord(S[1]) - ord(S[7])) + abs(ord(S[2]) - ord(S[3])) + abs(ord(S[2]) - ord(S[4])) + abs(ord(S[2]) - ord(S[5])) + abs(ord(S[2]) - ord(S[6])) + abs(ord(S[2]) - ord(S[7])) + abs(ord(S[3]) - ord(S[4])) + abs(ord(S[3]) - ord(S[5])) + abs(ord(S[3]) - ord(S[6])) + abs(ord(S[3]) - ord(S[7])) + abs(ord(S[4]) - ord(S[5])) + abs(ord(S[4]) - ord(S[6])) + abs(ord(S[4]) - ord(S[7])) + abs(ord(S[5]) - ord(S[6])) + abs(ord(S[5]) - ord(S[7])) + abs(ord(S[6]) - ord(S[7]))\n    if len(S) == 9:\n        return abs(ord(S[0]) - ord(S[1])) + abs(ord(S[0]) - ord(S[2])) + abs(ord(S[0]) - ord(S[3])) + abs(ord(S[0]) - ord(S[4])) + abs(ord(S[0]) - ord(S[5])) + abs(ord(S[0]) - ord(S[6])) + abs(ord(S[0]) - ord(S[7])) + abs(ord(S[0]) - ord(S[8])) + abs(ord(S[1]) - ord(S[2])) + abs(ord(S[1]) - ord(S[3])) + abs(ord(S[1]) - ord(S[4"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.split()))\n    # count = 0\n    # for i in range(len(digits)):\n    #     count += 1\n    #     if count == 3:\n    #         return -1\n\n    # for i in range(len(digits)-1):\n    #     diff = abs(digits[i] - digits[i+1])\n    #     if diff < 1:\n    #         return -1\n\n    # return diff\n    # # %%\n    # step = 1\n    # dp = [0] * 9\n    # dp[0] = abs(digits[0] - 753)\n    # # dp[1] = abs(digits[1] - 753)\n    # for i in range(1, 9):\n    #     dp[i] = abs(digits[i] - 753)\n    #     if i > 0 and dp[i - 1] < dp[i]:\n    #         step = i\n    #         dp[i] = dp[i - 1]\n    #\n    # # print(step)\n    # # print(dp)\n    # return dp[step]\n    # %%\n    # dp = []\n    # dp.append(abs(digits[0] - 753))\n    # dp.append(abs(digits[1] - 753))\n    # dp.append(abs(digits[2] - 753))\n    #\n    # for i in range(3, len(digits)):\n    #     dp.append(min(abs(digits[i] - 753) + abs(digits[i] - dp[i - 3]), abs(digits[i] - 753) + abs(digits[i] - dp[i - 2]), abs(digits[i] - 753) + abs(digits[i] - dp[i - 1])))\n    # return dp[-1]\n    # %%\n    # def minimumDifference(self, nums):\n    #     min_diff = float('inf')\n    #     for i in range(1, len(nums)):\n    #         min_diff = min(abs(nums[i] - nums[i - 1]), min_diff)\n    #     return min_diff\n    # %%\n    def minimumDifference(self, nums):\n        def createMinDiffDict(nums):\n            min_diff_dict = dict()\n            for i in range(len(nums)):\n                min_diff = float('inf')\n                for j in range(i):\n                    min_diff = min(abs(nums[i] - nums[j]), min_diff)\n                min_diff_dict[nums[i]] = min_diff\n            return min_diff_dict\n        min_diff_dict = createMinDiffDict(nums)\n        min_diff = float('inf')\n        for i in range(1, len(nums)):\n            min_diff = min(abs(nums[i] - nums[i - 1]), min_diff)\n        return min_diff\n    # %%\n    # def minimumDifference(self, nums):\n    #     nums.sort()\n    #     return min(abs(nums[i] - nums[i - 1]) for i in range(1, len(nums)))\n    # %%\n    def minimumDifference(self, nums):\n        def createMinDiffDict(nums):\n            min_diff_dict = dict()\n            for i in range(len(nums)):\n                min_diff = float('inf')\n                for j in range(i):\n                    min_diff = min(abs(nums[i] - nums[j]), min_diff)\n                min_diff_dict[nums[i]] = min_diff\n            return min_diff_dict\n        min_diff_dict = createMinDiffDict(nums)\n        # print(min_diff_dict)\n        min_diff = float('inf')\n        for i in range(1, len(nums)):\n            min_diff = min(abs(nums[i] - nums[i - 1]), min_diff)\n        return min_diff"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    digits = []\n    for digit in stdin:\n        digits.append(int(digit))\n    num = 753\n    #concatenate\n    concat = \"\"\n    for digit in digits:\n        concat = concat + str(digit)\n    #reorganize\n    num = int(concat)\n    return abs(num - 753)\n\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num = num.replace(\" \", \"\")\n    if len(num) > 10:\n        return -1\n    n = int(num)\n    return abs(n - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1234567876''')\n    '34'\n    >>> solution('''1234567875''')\n    '43'\n    >>> solution('''123456789''')\n    '78'\n    \"\"\"\n    string = stdin.strip()\n    string = sorted(string)\n    return ''.join(string)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    # Split the data into a list of strings\n    data = data.split()\n    # convert to a list\n    data = list(data)\n    # Get the length of the list\n    l = len(data)\n    # Initialize the minimum difference\n    min_diff = 9999999999\n    # Create a function for check the difference between X and 753\n    def check(x):\n        # Convert the number to a string\n        s = str(x)\n        # Get the length of the string\n        l = len(s)\n        # Set a variable to store the minimum difference\n        diff = 9999999999\n        # Iterate over the string\n        for i in range(l):\n            # Get the i-th digit of the string\n            s1 = s[i]\n            # Get the i+1-th digit of the string\n            s2 = s[i+1]\n            # Get the i+2-th digit of the string\n            s3 = s[i+2]\n            # Create a list of digits\n            digits = [s1, s2, s3]\n            # Convert the digits to integers\n            digits = [int(x) for x in digits]\n            # Calculate the difference between X and 753\n            diff = abs(753 - sum(digits))\n        # Return the minimum difference\n        return diff\n    # Iterate over the list\n    for x in data:\n        # Check the difference between X and 753\n        diff = check(x)\n        # If the difference is smaller than the minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return str(min_diff)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the difference between X and 753.\n\n    >>> solution('''1234567876''')\n    '34'\n    >>> solution('''6969''')\n    '0'\n    >>> solution('''987''')\n    '3'\n    \"\"\"\n    # build a set of characters\n    set_ = set([str(i) for i in range(10)])\n    # make sure there is no duplicate characters in the set\n    set_ = set_.difference(set_.intersection(set(stdin)))\n    # make sure there are no non-digit characters in the set\n    set_ = set_.difference(set(filter(lambda x: not x.isdigit(), stdin)))\n\n    # build an array of digits\n    array = []\n    for i in stdin:\n        if i in set_:\n            array.append(i)\n\n    # sort the digits\n    array.sort()\n\n    # build a list of the digits\n    list_ = list(map(int, array))\n\n    # build the difference between X and 753\n    difference = abs(list_[0] - 753)\n\n    # return the difference between X and 753\n    return difference\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(' ', '')\n    length = len(s)\n    if length >= 4 and length <= 10:\n        s = int(s)\n        if s % 4!= 0 and s % 3!= 0:\n            min_diff = abs(753 - s)\n            return(min_diff)\n        else:\n            return(\"\")\n    else:\n        return(\"\")"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    return str(n) +'' + str(min(a)) +'' + str(max(a))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n    return f\"{a[-2]} {a[-1]}\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 0, 0\n    x = list(map(int, stdin.split()))\n\n    while x:\n        if x[0] == max(x):\n            result = x[1] + x[2], result[1] + x[2]\n        else:\n            result = result[1] + x[1], result[1] + x[2]\n        x.pop(0)\n    return str(result[1]) + \" \" + str(result[0])\n\n\nprint(solution(input()))"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if n == 1:\n        return '1' +'' + str(max(a))\n    a = list(itertools.accumulate(sorted(a, reverse=True)))\n    return str(max(a)) +'' + str(a.index(max(a)) + 1)\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, *a] = stdin.split()\n    a = list(map(int, a))\n    a_sort = sorted(a)\n    h = 0\n    i = 0\n    while i < len(a_sort):\n        if a_sort[i] == a_sort[i + 1]:\n            h += 1\n            i += 2\n        else:\n            i += 1\n    if h >= n // 2:\n        y = sum([a_sort.count(a_sort[i]) for i in range(n)])\n        z = sum([a_sort.count(a_sort[i]) for i in range(n, len(a_sort))])\n    else:\n        y = sum([a_sort.count(a_sort[i]) for i in range(n)])\n        z = sum([a_sort.count(a_sort[i]) for i in range(n)])\n    return str(y) + \" \" + str(z)\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1].split()))\n    \n    x = y = z = 1\n    for i in range(n):\n        if i == 0:\n            y = x\n            z = x\n            if x!= a[0]:\n                x = a[0]\n                y = 1\n            else:\n                x += a[0]\n        else:\n            y = x\n            z = x\n            if x!= a[i]:\n                x = a[i]\n                y = 1\n            else:\n                x += a[i]\n            if i == n-1:\n                if x > y:\n                    y = x\n                else:\n                    z = x\n    \n    return str(y) +'' + str(z)\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    a = list(map(int, stdin.strip().split(' ')[1]))\n    answer = list()\n    answer.append(min(a))\n    answer.append(sum(a))\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    # a = sorted(int(stdin.split()[1]) for _ in range(n))\n    a = sorted(int(stdin.split()[1]) for _ in range(n))\n    b = sorted(int(stdin.split()[2]) for _ in range(n))\n    \n    # print(a, b)\n    res = 0\n    if len(a)!= len(b):\n        return '1 0'\n    \n    # print(a, b)\n    for i in range(len(a)):\n        res += min(a[i], b[i])\n        \n    # print(res)\n    return str(res) +'' + str(len(b) - res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1), str(1)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    print(int(a[0]), int(a[-1]))\n    return\n\nprint(solution(\"\"\"2\n3 12 6\n\"\"\"), \"\"\"5 3\"\"\")\nprint(solution(\"\"\"7\n2 1000000000 4 6 8 4 2\n\"\"\"), \"\"\"2999999987 2\"\"\")\nprint(solution(\"\"\"6\n13 52 0 13 26 52\n\"\"\"), \"\"\"12 13\"\"\")\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    while len(a) > 1:\n        result += 1\n        a.sort(reverse=True)\n        a[1] = a[0] + a[1]\n        a = a[2:]\n    return str(result)"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    contests = list(map(int, stdin.split()[1:]))\n    s = sum(contests)\n    l = [0] + contests\n    r = [0] + contests\n    ans = 0\n    while max(r) > s:\n        ans += 1\n        for i in range(1, n + 1):\n            if r[i] == max(r):\n                if l[i] == 0:\n                    ans = -1\n                    break\n                else:\n                    r[i] = 0\n                    if l[i] >= 1:\n                        l[i] -= 1\n        if ans == -1:\n            break\n    return str(ans)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    contests = stdin.split()\n    contests = list(map(int, contests))\n    days = 1\n    contests.sort(reverse=True)\n    print(contests)\n    while days < len(contests):\n        tmp_days = days\n        for i in range(len(contests)-days):\n            if tmp_days == days:\n                days += 1\n                tmp_days = days\n            else:\n                contests[i], contests[i + days] = contests[i + days], contests[i]\n                tmp_days += 1\n    print(contests)\n    return''.join(map(str, contests))\n\n\nsolution(\n    \"1 1 1 2 2\"\n)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.strip().split('\\n')\n    n = int(l[0])\n    k = int(l[1])\n    array = l[2].split()\n    contests = []\n    for i in range(n):\n        contests.append((int(array[i]), i))\n    contests.sort(key=lambda x: x[0])\n    answer = 1\n    day = 1\n    for e in contests:\n        if day < e[0]:\n            day += 1\n            answer = max(answer, day)\n        else:\n            day = e[0]\n    return str(answer)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return f\"{math.ceil(int(stdin[0]) / int(stdin[1]))}\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list[0])\n    contests = list(map(lambda x: int(x), stdin_list[1].split()))\n    results = dict()\n    for i in range(1, n + 1):\n        results[i] = []\n    contests = list(zip(contests, results.keys()))\n    contests.sort(key=lambda x: x[1])\n    contests = sorted(contests)\n    days_spent = 1\n    for contest in contests:\n        if days_spent <= contest[1]:\n            if contest[0] in results:\n                results[contest[0]].append(days_spent)\n            else:\n                results[contest[0]] = [days_spent]\n            days_spent += 1\n    max_days_spent = 1\n    for days_spent in results.values():\n        if len(days_spent) > max_days_spent:\n            max_days_spent = len(days_spent)\n    return str(max_days_spent)\n\nprint(solution('''2\n3 1 4 1\n'''))\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = [int(i) for i in stdin.split()]\n    k = n\n    res = 0\n    if k <= 2:\n        return k\n    for i in range(n):\n        c.sort()\n        if c[i] == 1:\n            k = k - 1\n            c.pop(i)\n            c.append(k)\n            if k == 1:\n                res += 1\n        else:\n            k = k - 1\n    return str(res)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    best = n\n    while True:\n        t = set(p)\n        s = 0\n        for i in range(n):\n            if i not in t:\n                s += p[i]\n        if s == 0:\n            break\n        best = min(best, max(t) - min(t) + 1)\n        p.remove(p[max(t) - min(t)])\n        p.append(s)\n    return str(best)"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = sorted(map(int, stdin.split(' ')))\n\n    if len(problems) == 1:\n        return 1\n\n    max_count = 1\n    for i in range(1, n):\n        if len(problems) <= max_count + i:\n            return str(max_count + i)\n\n        if problems[max_count - 1] < problems[max_count + i - 1]:\n            max_count += i\n\n    return str(max_count)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    k = 0\n    ans = 1\n    cnt = 1\n    while cnt < n:\n        if a[cnt] >= k:\n            k = a[cnt]\n        cnt += 1\n    cnt = 1\n    while cnt <= k:\n        if a[cnt] > k:\n            ans = max(ans, cnt + 1)\n        else:\n            ans = max(ans, cnt)\n        cnt += 1\n    return str(ans)"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(diameter(n, m))\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = set()\n    d = dict()\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        u, v = u - 1, v - 1\n        if u not in d:\n            d[u] = set()\n        if v not in d:\n            d[v] = set()\n        d[u].add(v)\n        s.add(v)\n        s.add(u)\n    h = 0\n    for e in s:\n        if e not in d:\n            continue\n        if len(d[e]) > h:\n            h = len(d[e])\n    return str(h)\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = [stdin.split() for i in range(m)]\n    tree = [[] for _ in range(n)]\n    for data in data:\n        tree[int(data[0]) - 1].append(int(data[1]) - 1)\n    ans = float('inf')\n    while True:\n        in_tree = [False] * n\n        for i in range(len(tree)):\n            if in_tree[i] == True:\n                continue\n            for j in tree[i]:\n                in_tree[j] = True\n        if len(tree) == len(in_tree):\n            break\n        for i in range(len(tree)):\n            if in_tree[i] == False:\n                if len(tree[i]) == 1:\n                    ans = min(ans, tree[i][0])\n                else:\n                    new_tree = []\n                    for j in range(len(tree[i])):\n                        if not in_tree[tree[i][j]]:\n                            new_tree.append(tree[i][j])\n                    tree[i] = new_tree\n                    ans = min(ans, tree[i][0])\n    return str(ans)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n    d = n\n    while d!= 2:\n        for node in range(n):\n            if len(g[node]) == 1:\n                for node in range(n):\n                    if node!= g[node][0]:\n                        break\n                else:\n                    continue\n                d = 1\n                g[node].append(n)\n                g[n].append(node)\n                for node in range(n):\n                    g[node].remove(g[node][0])\n    return str(d)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_forest(graph: dict, n: int, edges: list) -> bool:\n        for edge in edges:\n            if not (0 <= edge[0] < n and 0 <= edge[1] < n):\n                return False\n        for edge in edges:\n            if graph[edge[0]] == graph[edge[1]]:\n                return False\n        return True\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return str(0)\n    graph = dict()\n    for i in range(1, n + 1):\n        graph[i] = set()\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        if u in graph[v]:\n            continue\n        graph[v].add(u)\n    for i in range(n):\n        if len(graph[i]) == 1:\n            continue\n        visited = set()\n        diameter = 0\n        queue = [i]\n        while queue:\n            cur = queue.pop(0)\n            if cur in visited:\n                continue\n            visited.add(cur)\n            diameter += 1\n            for neighbor in graph[cur]:\n                if neighbor in visited:\n                    continue\n                queue.append(neighbor)\n        if diameter > 1:\n            return str(diameter)\n    return str(len(graph) - 1)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tree = {i: i for i in range(1, n + 1)}\n    diam = 0\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        if v in tree and u in tree:\n            tree[u] = v\n            diam = max(diam, len(tree) - 1)\n    print(diam)\n\n\nsolution(input())"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        graph[u].append(v)\n        graph[v].append(u)\n\n    diameters = {0: 0}\n    to_check = {i for i in range(1, n)}\n\n    while to_check:\n        next_check = set()\n        for i in to_check:\n            for j in graph[i]:\n                if j in diameters:\n                    continue\n                diameters[j] = diameters[i] + 1\n                next_check.add(j)\n        to_check = next_check\n\n    return list(diameters.values())[0]\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    vertices = list(map(int, stdin.split()))\n    edges = []\n    while m > 0:\n        m -= 1\n        edges.append(tuple(map(int, stdin.split())))\n    tree = forest(vertices)\n    for edge in edges:\n        new_edges = add_edge(edge, tree)\n        if len(new_edges)!= 0:\n            for edge in new_edges:\n                tree = forest(vertices + [edge])\n    return tree_diameter(tree)\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    graph = [[] for _ in range(n)]\n    diam = 0\n    if m == n - 1:\n        diam = n - 1\n    for line in range(m):\n        u, v = (int(i) for i in stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for line in graph:\n        if len(line) == 1:\n            continue\n        diam = max(diam, len(line))\n        if len(line) > 1:\n            for i in range(len(line) - 1):\n                u, v = line[i], line[i + 1]\n                if not (u, v) in set(line):\n                    line.append(u, v)\n                    diam = max(diam, len(line))\n    return str(diam)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        graph[a].append(b)\n        graph[b].append(a)\n\n    diam = 0\n    for i in range(n):\n        if i == 0:\n            if n == 1:\n                return str(0)\n            diam = 1\n            continue\n        if len(graph[i]) == 0:\n            return str(diam)\n\n        tmp = diam\n        for j in range(len(graph[i])):\n            # dfs\n            graph[i].append(n)\n            diam = max(diam, 2 + tmp)\n            tmp = diam\n        graph[i].remove(n)\n    return str(diam)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')\n        ]),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[::2]\n        ]),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[1::2]\n        ]),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[2::2]\n        ]),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[3::2]\n        ]),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[4::2]\n        ])),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[5::2]\n        ])),\n        max(sum([\n            int(x) for x in stdin.strip().split(' ')[6::2]\n        ])),\n    ]) - int(stdin.strip().split(' ')[0]))"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    inp = list(map(int, stdin.split()))\n    vertices = {v: inp.pop(0) for v in range(1, n+1)}\n\n    for i in range(0, len(inp), 2):\n        vertices[inp[i]] -= vertices[inp[i+1]]\n\n    return sum(vertices.values())\n\nsolution(input())\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    weights = list(map(int, stdin.split()))\n    edges = []\n    for i in range(n - 1):\n        edges.append([i + 1, i + 2])\n    max_weight = 0\n    while len(edges) > 1:\n        sum_weights = 0\n        for i in range(len(edges)):\n            for j in range(i + 1, len(edges)):\n                if edges[i][1]!= edges[j][0]:\n                    sum_weights += weights[edges[i][0] - 1] + weights[edges[j][0] - 1]\n        if sum_weights > k:\n            edges.pop(i)\n        elif sum_weights > max_weight:\n            max_weight = sum_weights\n    return max_weight\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m, k = a[0], a[1]\n    graph = {}\n    max_weight = 0\n    for i in range(2, m + 1):\n        u = int(a[i])\n        graph[i] = []\n        for j in range(i + 1, m + 1):\n            if (u, j) in graph:\n                graph[i].append(j)\n            else:\n                graph[i].append(j)\n                graph[j].append(i)\n    for v in graph:\n        weight = 0\n        for i in graph[v]:\n            if i!= v:\n                if i - v <= k:\n                    weight += i - v\n        if weight > max_weight:\n            max_weight = weight\n    return max_weight\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    graph = [[int(x) for x in input().split(' ')] for _ in range(n)]\n    graph = [[] if x == -1 else graph[x] for x in range(n)]\n    ans = -1\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            u, v = graph[i], graph[j]\n            if len(u) > k or len(v) > k:\n                continue\n            if max(len(u), len(v)) <= k:\n                ans = max(ans, sum(u) + sum(v))\n    return str(ans)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _n, _k = map(int, stdin.split())\n    _a = list(map(int, stdin.split()))\n    _v = {}\n    _dist = {}\n\n    for i in range(_n):\n        if _v.get(i) is None:\n            _v[i] = [_a[i]]\n        else:\n            _v[i].append(_a[i])\n        _dist[i] = 0\n    for i in range(_n):\n        _dist[i] = len(_v[i])\n    max_ = 0\n    for i in range(_n):\n        for j in range(_n):\n            if i!= j:\n                k = abs(i - j)\n                if _dist[i] + _dist[j] - k >= _k:\n                    if max_ < _a[i] + _a[j]:\n                        max_ = _a[i] + _a[j]\n    return str(max_)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tree = [[] for _ in range(n + 1)]\n    weights = [0] + list(map(int, stdin.split()))\n    for u, v in map(int, stdin.split()):\n        tree[u].append(v)\n        tree[v].append(u)\n    max_weight = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                continue\n            dist = weights[j] - weights[i]\n            if dist <= k:\n                weight = 0\n                for neighbor in tree[i]:\n                    weight += weights[neighbor]\n                if max_weight < weight:\n                    max_weight = weight\n    return max_weight\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  weights = list(map(int, stdin.split()))\n\n  weights = sorted(weights, reverse=True)\n  tree = {}\n\n  for i in range(n):\n    tree[i] = set()\n\n  for i in range(n):\n    for j in range(i + 1, n):\n      if weights[i] + weights[j] <= k:\n        tree[i].add(j)\n        tree[j].add(i)\n\n  weights = []\n  def visit(node: int):\n    nonlocal weights\n    weights.append(weights[node])\n    for adj in tree[node]:\n      visit(adj)\n    weights.append(weights[node])\n\n  visit(0)\n\n  print(sum(weights))\n  return \"\""
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n\n    for i in range(n-1):\n        x, y = [int(j) for j in stdin.split()]\n        graph[x].append(y)\n        graph[y].append(x)\n\n    max_weight = 0\n    visited = [False] * n\n    queue = [i for i in range(1, n+1)]\n    while len(queue) > 0:\n        curr = queue.pop(0)\n        visited[curr-1] = True\n\n        for neighbor in graph[curr]:\n            if not visited[neighbor-1]:\n                queue.append(neighbor)\n                visited[neighbor-1] = True\n\n        max_weight += a[curr-1]\n        if len(queue) == 0:\n            queue = [i for i in range(1, n+1)]\n\n    return str(max_weight)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    weights = (int(i) for i in stdin.split())\n    weights = list(weights)\n    vertices = range(1, n+1)\n\n    def dfs(path, cost, size):\n        if len(path) >= size:\n            if cost > k:\n                return\n        if len(path) == size:\n            if cost > k:\n                return\n        for i in vertices:\n            if i in path:\n                continue\n            path.append(i)\n            dfs(path, cost + weights[i-1], size)\n            path.pop()\n\n    dfs([], 0, n)\n    return str(sum(weights))\n    return str(max(weights))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # print(a, b)\n    all_dorm = []\n    for i in range(a):\n        all_dorm.append(list(map(int, stdin.split())))\n\n    all_dorm = sorted(all_dorm, key=lambda x: x[0])\n\n    result = []\n\n    for i in range(b):\n        for j in range(len(all_dorm)):\n            if all_dorm[j][1] <= i and all_dorm[j + 1][1] > i:\n                # print(all_dorm[j][1], i)\n                result.append(all_dorm[j][0])\n                result.append(all_dorm[j + 1][0])\n                break\n\n    for i in range(len(result)):\n        if i % 2 == 0:\n            print(result[i], result[i + 1], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = sorted(list(map(int, stdin.split()[1].split())))\n    b = sorted(list(map(int, stdin.split()[2].split())))\n    res = \"\"\n    for i in range(m):\n        d = a.index(b[i])\n        res += str(d + 1) + \" \" + str(b[i] + 1) + \"\\n\"\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    all_dorm_rooms = list(range(1, n + 1))\n    all_rooms = [i for i in range(1, all_dorm_rooms[-1] + 1)]\n    stdin_dorm_rooms = [*map(int, stdin.split()[1:])]\n    stdin_rooms = [*map(int, stdin.split()[0].split())]\n    stdin_dorm_rooms = sorted(stdin_dorm_rooms)\n    stdin_rooms = sorted(stdin_rooms)\n\n    dorm_num = 0\n    room_num = 0\n\n    while dorm_num!= len(stdin_dorm_rooms):\n        if all_dorm_rooms[dorm_num] == stdin_dorm_rooms[dorm_num]:\n            dorm_num += 1\n        else:\n            room_num = stdin_rooms[dorm_num]\n            break\n    return str(dorm_num) + \" \" + str(room_num)\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dorm = list(map(int, stdin.split()[1:]))\n    result = []\n    for i in range(m):\n        result.append(dorm.index(max(dorm))+1)\n        dorm.remove(max(dorm))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    a_num = []\n    for i in range(n):\n        a_num.append(int(stdin.split()[i + 1]))\n\n    d_num = []\n    for i in range(n):\n        d_num.append(i)\n\n    for i in range(m):\n        d_num.remove(int(stdin.split()[i + 1]))\n\n    ans = []\n    for i in range(m):\n        ans.append(str(d_num[0]))\n        d_num.remove(d_num[0])\n\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    b = list(map(int, stdin.split()))\n    r = []\n    for i in range(len(a)):\n        if a[i] == 1:\n            r.append(b[i])\n    r.sort()\n    return '\\n'.join(map(str, r))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    a.sort()\n    b.sort()\n    r = 0\n    d = 0\n    for i in range(m):\n        while (a[r] < b[i]):\n            r += 1\n        print(a[r], end=' ')\n        d = max(d, a[r] - (i + 1))\n    return str(d)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    dorms = list(map(int, stdin.split()))\n\n    rooms.sort()\n    dorms.sort()\n\n    # print(rooms)\n    # print(dorms)\n    d = {}\n    for i in range(n):\n        d[i] = {'start': rooms[i], 'end': rooms[i + 1]}\n    print(d)\n    # d = {}\n    # for i in range(1, n + 1):\n    #     d[i] = {'start': rooms[i], 'end': rooms[i + 1]}\n\n    for i in range(m):\n        d[dorms[i]]['end'] = dorms[i + 1]\n    # print(d)\n\n    m = []\n    for i in range(n):\n        if d[i]['start'] in d:\n            m.append([i, d[i]['start']])\n    # print(m)\n\n    m.sort()\n    k = m[0][1]\n    for i in range(1, len(m)):\n        if m[i][1] == k:\n            k = m[i][0]\n        else:\n            break\n    print(m[0][0], k)\n\n    return \" \".join(map(str, m))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = sorted(map(int, stdin.split()[1:]))\n    dorm = 1\n    room = rooms[0]\n    res = []\n    for _ in range(m):\n        while room >= rooms[dorm - 1] and dorm <= n:\n            room = rooms[dorm - 1]\n            dorm += 1\n        res.append(str(dorm) +'' + str(room))\n        dorm += 1\n        room = rooms[dorm - 1]\n    return '\\n'.join(res)"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    b = list(map(int, stdin[3].split()))\n    res = ''\n    dorm = {i: [] for i in range(1, n + 1)}\n    for i in range(n):\n        dorm[a[i]] = b[i]\n    for i in range(1, n + 1):\n        print(i, ': ', end='')\n        for j in range(i, n + 1, i):\n            print(j, ': ', end='')\n            if len(dorm[j]) > 0:\n                print(dorm[j].pop(0), end='')\n            else:\n                print('', end='')\n        print()\n    return\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = sorted(list(map(int, stdin.split())))\n    print(*nums[:3], sep='\\n')\n    print(*nums[3:], sep='\\n')\n    return '\\n'.join([str(num) for num in nums[:3]]) + '\\n' + '\\n'.join([str(num) for num in nums[3:]])\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    print(*range(a, c+1), sep='\\n')\n    print(*range(b, d+1), sep='\\n')\n    print(*range(a, b+1), sep='\\n')\n    print(*range(c, d+1), sep='\\n')\n    return '\\n'.join(map(str, range(a, b+1)))\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if a + b + c + d == 0:\n        return \"0 0 0\"\n    if a + b + c + d == 1:\n        return \"1 0 0\"\n    if a + b + c + d == 2:\n        return \"0 1 0\"\n    if a + b + c + d == 3:\n        return \"0 0 1\"\n    if a + b + c + d == 4:\n        return \"1 0 1\"\n    if a + b + c + d == 5:\n        return \"1 1 0\"\n    if a + b + c + d == 6:\n        return \"0 0 1\"\n    if a + b + c + d == 7:\n        return \"1 0 1\"\n    if a + b + c + d == 8:\n        return \"0 1 1\"\n    if a + b + c + d == 9:\n        return \"1 1 0\"\n    if a + b + c + d == 10:\n        return \"1 1 1\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    in_a = int(stdin.split()[0])\n    in_b = int(stdin.split()[1])\n    in_c = int(stdin.split()[2])\n    in_d = int(stdin.split()[3])\n    res = []\n    while in_a!= in_d and in_b!= in_c and in_a!= in_b and in_a!= in_c:\n        if in_a > in_b:\n            res.append(in_a)\n            in_a -= 1\n        elif in_b > in_c:\n            res.append(in_b)\n            in_b -= 1\n        elif in_c > in_a:\n            res.append(in_c)\n            in_c -= 1\n        else:\n            res.append(in_d)\n            in_d -= 1\n    res =''.join(map(str, res))\n    return res\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    c = c + a\n    a = a + b\n    b = b + c\n    return str(a) + str(b) + str(c) + str(d)"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 3\n   ... 5 6 7''')\n    '2 1 3 5 7 6'\n    >>> solution('''1 1 2\n   ... 2 1 2''')\n    '1 1 1 1 1'\n    >>> solution('''1 2 3\n   ... 5 6 7''')\n    '1 1 1 1 1 1 1 1'\n    \"\"\"\n\n    # stdin = stdin.strip()\n    # n = int(stdin.split()[0])\n    n = int(stdin.split('\\n')[0].split()[0])\n    a = int(stdin.split('\\n')[0].split()[1])\n    b = int(stdin.split('\\n')[0].split()[2])\n    c = int(stdin.split('\\n')[0].split()[3])\n\n    # print(n, a, b, c)\n\n    # print(a+b, a+c, b+c, a+b+c)\n\n    # if a==b and b==c and a==c:\n    #     print(a)\n    #     print(b)\n    #     print(c)\n    #     return\n\n    # def getSum(n, i):\n    #     if n==i:\n    #         return sum(map(int, ''.join(str(i) for i in range(n+1))))\n    #     else:\n    #         return getSum(n+1, i) + getSum(n+1, i+1)\n\n    # print(getSum(0, 1))\n    # print(getSum(0, 2))\n    # print(getSum(0, 3))\n\n    # if a==b and b==c and a==c:\n    #     print(a)\n    #     print(b)\n    #     print(c)\n    #     return\n\n    # print(a+b, a+c, b+c, a+b+c)\n\n    # if a==b and b==c and a==c:\n    #     print(a)\n    #     print(b)\n    #     print(c)\n    #     return\n\n    # print(a+b, a+c, b+c, a+b+c)\n\n    if a==b and b==c and a==c:\n        print(a)\n        print(b)\n        print(c)\n        return\n\n    print(a+b, a+c, b+c, a+b+c)\n\n    # if n==4:\n    #     print(a, b, c, a+b, a+c, b+c, a+b+c)\n    # else:\n    #     print(a, b, c)\n    #     for i in range(1, 4):\n    #         print(a+i, a+i+1, a+i+2, a+i+3)\n\n    # return\n\n    # print(a, b, c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c, a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c)\n    # print(a, b, c, a+b, a+c, b+c, a+b+c)\n    # print(a+b+c)\n    # print(a, b, c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c+a+a)\n\n    # print(a, b, c, a+b, a+c, b+c, a+b+c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c, a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c)\n    # print(a, b, c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c+a+a)\n    # print(a+b+c+a+a+a)\n    # print(a+b+c+a+a+a+a)\n\n    # print(a, b, c, a+b, a+c, b+c, a+b+c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c, a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c)\n    # print(a, b, c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c+a+a)\n    # print(a+b+c+a+a+a)\n    # print(a+b+c+a+a+a+a)\n\n    # print(a, b, c, a+b, a+c, b+c, a+b+c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c, a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c)\n    # print(a, b, c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c+a+a)\n    # print(a+b+c+a+a+a)\n    # print(a+b+c+a+a+a+a)\n\n    # print(a, b, c, a+b, a+c, b+c, a+b+c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c, a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c)\n    # print(a, b, c)\n    # print(a+b, a+c, b+c, a+b+c)\n    # print(a+b+c)\n    # print(a+b+c+a)\n    # print(a+b+c+"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return '%d %d %d %d' % (a+b, a+c, b+c, a+b+c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = list(map(int, stdin.split()))\n    # first_answer = 0\n    # second_answer = 0\n    # third_answer = 0\n    # for x in range(1, x1 + 1):\n    #     first_answer += x\n    # for x in range(1, x2 + 1):\n    #     second_answer += x\n    # for x in range(1, x3 + 1):\n    #     third_answer += x\n    # if x1 == x2 == x3 == x4:\n    #     return str(first_answer) + \" \" + str(second_answer) + \" \" + str(third_answer)\n    # else:\n    #     return str(first_answer) + \" \" + str(second_answer) + \" \" + str(third_answer)\n    # sum_result = x1 + x2 + x3\n    # sum_result = x1 + x2 + x3 + x4\n    # if sum_result % 3 == 0:\n    #     first_answer = sum_result / 3\n    #     second_answer = x1 + x2\n    #     third_answer = x3 + x4\n    #     return str(first_answer) + \" \" + str(second_answer) + \" \" + str(third_answer)\n    # elif sum_result % 3 == 1:\n    #     first_answer = sum_result // 3\n    #     second_answer = x2 + x3\n    #     third_answer = x1 + x4\n    #     return str(first_answer) + \" \" + str(second_answer) + \" \" + str(third_answer)\n    # elif sum_result % 3 == 2:\n    #     first_answer = sum_result // 3\n    #     second_answer = x3 + x4\n    #     third_answer = x1 + x2\n    #     return str(first_answer) + \" \" + str(second_answer) + \" \" + str(third_answer)\n    # else:\n    #     print(\"\u0421\u0443\u043c\u043c\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u043d\u0430 3\")\n    # return\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = list(map(int, stdin.split()))\n    guess_numbers = input_numbers[:3]\n    guess_numbers_sum = sum(guess_numbers)\n    return''.join(map(str, guess_numbers)) +'' + str(guess_numbers_sum)\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(1, c + 1):\n        for j in range(c - i + 1):\n            for k in range(c - i + 1):\n                if a + b == i + j + k:\n                    return str(a) + str(b) + str(c)\n                elif a + c == i + j + k:\n                    return str(a) + str(c) + str(b)\n                elif b + c == i + j + k:\n                    return str(b) + str(c) + str(a)\n\nsolution(input())"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lamps_colors = stdin.strip().split(\"\\n\")[1].strip()\n    num_lamps = len(lamps_colors)\n    d_lamps_colors = {lamp: color for lamp, color in enumerate(lamps_colors)}\n\n    def get_color_recoloring(colors_n: str) -> str:\n        recoloring = set()\n        for i, color in enumerate(colors_n):\n            if color!= \"R\" and color!= \"G\" and color!= \"B\":\n                print(\"Skipping non-color lamp\", i)\n                continue\n            recoloring.add(color)\n        return recoloring\n\n    def get_color_recoloring2(colors_n: str) -> str:\n        return set(colors_n)\n\n    def get_recoloring_from_garland(garland: List[Tuple[int]]) -> str:\n        colors_n = \"\".join([d_lamps_colors[i] for i in garland])\n        return get_color_recoloring2(colors_n)\n\n    def get_recoloring_from_garland(garland: List[Tuple[int]]) -> str:\n        colors_n = \"\".join([d_lamps_colors[i] for i in garland])\n        return get_color_recoloring(colors_n)\n\n    def get_recoloring_from_garland(garland: List[Tuple[int]]) -> str:\n        colors_n = \"\".join([d_lamps_colors[i] for i in garland])\n        return get_color_recoloring(colors_n)\n\n    # Result must be unique\n    lamp_recolors = {}\n    for i in range(num_lamps - 1):\n        for j in range(i + 1, num_lamps):\n            colors_n = \"\".join([d_lamps_colors[i], d_lamps_colors[j]])\n            if colors_n in lamp_recolors:\n                continue\n            colors_n = get_color_recoloring(colors_n)\n            if colors_n in lamp_recolors:\n                continue\n            lamp_recolors[colors_n] = 1\n\n    # Result must be unique\n    lamp_recolors2 = {}\n    for i in range(num_lamps - 1):\n        for j in range(i + 1, num_lamps):\n            colors_n = \"\".join([d_lamps_colors[i], d_lamps_colors[j]])\n            if colors_n in lamp_recolors2:\n                continue\n            colors_n = get_color_recoloring2(colors_n)\n            if colors_n in lamp_recolors2:\n                continue\n            lamp_recolors2[colors_n] = 1\n\n    # Result must be unique\n    lamp_recolors3 = {}\n    for i in range(num_lamps - 1):\n        for j in range(i + 1, num_lamps):\n            colors_n = \"\".join([d_lamps_colors[i], d_lamps_colors[j]])\n            if colors_n in lamp_recolors3:\n                continue\n            colors_n = get_color_recoloring2(colors_n)\n            if colors_n in lamp_recolors3:\n                continue\n            lamp_recolors3[colors_n] = 1\n\n    all_recoloring = lamp_recolors.copy()\n    all_recoloring.update(lamp_recolors2)\n    all_recoloring.update(lamp_recolors3)\n\n    print(len(all_recoloring))\n    return max(all_recoloring)\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    garland = stdin.split()[1]\n    lamps = {'R':0, 'G':0, 'B':0}\n    n = len(garland)\n    for i in range(n):\n        lamps[garland[i]] += 1\n\n    def dp(index, new_lamps):\n        if index == n:\n            return 0\n        if new_lamps == 0:\n            return 1\n        if new_lamps > 2:\n            return 0\n        result = 0\n        for color, amount in lamps.items():\n            if amount == new_lamps:\n                result += dp(index + 1, new_lamps - 1)\n        return result\n\n    return str(dp(1, lamps['B'])) + '\\n' + str(dp(1, lamps['G'])) + '\\n' + str(dp(1, lamps['R']))\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    garlands = {}\n    for i in range(n):\n        garlands[i] = stdin[i]\n    garlands = sorted(garlands.items(), key=lambda i: i[1])\n\n    lamps = garlands[0][0]\n    colors = garlands[0][1]\n    garlands.pop(0)\n    garlands = sorted(garlands, key=lambda i: i[0])\n    colors = colors.replace(\"R\", \"\")\n    colors = colors.replace(\"G\", \"\")\n    colors = colors.replace(\"B\", \"\")\n    colors = list(colors)\n    counter = Counter(colors)\n    colors = set(colors)\n    for i in colors:\n        if not counter[i] == 1:\n            break\n        colors.remove(i)\n    colors = list(colors)\n    colors.sort()\n    result = 0\n    for i in range(lamps - 1):\n        if garlands[i][1] == garlands[i + 1][1]:\n            continue\n        else:\n            result = i + 1\n            break\n    if result == 0:\n        print(result)\n    else:\n        print(result + 1)\n    for i in range(result, len(garlands)):\n        for j in range(i + 1):\n            if garlands[i][0] - garlands[j][0] == 1 and garlands[i][1]!= garlands[j][1]:\n                result = i + 1\n                break\n        if result == 0:\n            print(result)\n        else:\n            print(result + 1)\n\n\nsolution(input())\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin.split()\n    length = len(garland[0])\n    garland_colors = []\n    for i in garland:\n        garland_colors.append(i[0])\n    garland_colors = list(set(garland_colors))\n    garland_colors.sort()\n    garland_colors.reverse()\n    colors = []\n    for i in garland_colors:\n        colors.append(i)\n    colors.sort()\n    colors.reverse()\n    n = int(garland[0])\n    colors = colors[:n]\n    lamps = []\n    for i in garland:\n        lamps.append(i[1:])\n    garland = []\n    for i in range(len(lamps)):\n        garland.append([])\n        garland[i].append(colors[i])\n        garland[i].append(lamps[i])\n    for i in range(1, n):\n        for j in range(i):\n            if(lamps[i][0]!= lamps[j][0]):\n                garland[i].append(lamps[j][0])\n                break\n    garland = [['', ''] for i in range(n)]\n    for i in garland:\n        garland[i] = [0, 0]\n    garland = [i[:] for i in garland]\n    def get_garland_colors(garland, lamps, colors):\n        for i in range(n):\n            if(lamps[i] == colors[i]):\n                garland[i][1] = colors[i]\n        for i in range(n - 1):\n            if(lamps[i] == colors[i]):\n                if(lamps[i + 1] == colors[i + 1]):\n                    garland[i][1] = colors[i]\n                    garland[i + 1][1] = colors[i + 1]\n        for i in range(n - 1):\n            if(lamps[i] == colors[i]):\n                if(lamps[i + 1] == colors[i + 1]):\n                    garland[i][1] = colors[i]\n                    garland[i + 1][1] = colors[i + 1]\n        return garland\n    def get_garland(garland, colors):\n        garland_colors = []\n        for i in garland:\n            garland_colors.append(i[1])\n        garland_colors = list(set(garland_colors))\n        garland_colors.sort()\n        garland_colors.reverse()\n        colors = []\n        for i in garland_colors:\n            colors.append(i)\n        colors.sort()\n        colors.reverse()\n        return colors\n    def get_garland_with_duplicates(garland):\n        garland = [['', ''] for i in range(n)]\n        for i in garland:\n            garland[i] = [0, 0]\n        for i in garland:\n            garland[i] = [0, 0]\n    def rec_garland_colors(garland, colors, lamps):\n        if(len(colors) == 1):\n            return garland\n        for i in colors:\n            if(len(lamps[colors.index(i)]) == 1):\n                new_colors = []\n                for j in garland:\n                    if(i == j[1]):\n                        j[0] = i\n                        new_colors.append(i)\n                new_lamps = []\n                for j in lamps:\n                    if(lamps[colors.index(i)].index(j) == 1):\n                        new_lamps.append(j)\n                return rec_garland_colors(garland, new_colors, new_lamps)\n        colors.sort()\n        colors.reverse()\n        colors = colors[:len(colors) - 1]\n        for i in colors:\n            for j in garland:\n                if(i == j[1]):\n                    if(i!= j[0]):\n                        j[0] = i\n                        return garland\n    def rec_garland(garland):\n        for i in garland:\n            garland[i] = [0, 0]\n        for i in garland:\n            garland[i] = [0, 0]\n    def get_colors(garland):\n        colors = []\n        for i in garland:\n            colors.append(i[1])\n        colors.sort()\n        colors.reverse()\n        return colors\n    def get_colors_with_duplicates(garland):\n        colors = []\n        for i in garland:\n            colors.append(i[1])\n        colors.sort()\n        colors.reverse()\n        return colors\n    def count_colors_with_duplicates(colors):\n        colors_with_duplicates = 0\n        for i in colors:\n            if(i in colors):\n                colors_with_duplicates += 1\n        return colors_with_duplicates\n    def get_lamps(garland):\n        lamps = []\n        for i in garland:\n            lamps.append(i[2])\n        return lamps\n    def get_lamps_with_duplicates(garland):\n        lamps = []\n        for i in garland:\n            lamps.append(i[2])\n        return lamps\n    def rec_get_lamps_with_duplicates(garland):\n        lamps = []\n        for i in garland:\n            lamps.append(i[2])\n        return lamps\n    def count_lamps_with_duplicates(garland):\n        lamps_with_duplicates = 0\n        for i in garland:\n            if(i in garland):\n                lamps_with_duplicates += 1\n        return lamps_with_duplicates\n    def rec_get_lamps_with_duplicates(garland):\n        lamps = []\n        for i in garland:\n            lamps.append(i[2])\n        return lamps\n    def rec_get_colors_with_duplicates(garland):\n        colors = []\n        for i in garland:\n            colors.append(i[1])\n        return colors\n    def rec_get_colors(garland):\n        "
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    # n = 6\n    # s = \"RBBBRBBBBRRR\"\n    # n = 7\n    # s = \"BBBGBRRRGGGG\"\n\n    # n = 13\n    # s = \"BBRRRRGGGGGRR\"\n\n    # n = 10\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 11\n    # s = \"RBBBBRBBBBRRR\"\n\n    # n = 13\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 14\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 15\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 16\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 17\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 18\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 19\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 20\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 21\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 22\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 23\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 24\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 25\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 26\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 27\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 28\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 29\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 30\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 31\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 32\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 33\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 34\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 35\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 36\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 37\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 38\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 39\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 40\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 41\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 42\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 43\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 44\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 45\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 46\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 47\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 48\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 49\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 50\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 51\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 52\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 53\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 54\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 55\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 56\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 57\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 58\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 59\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 60\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 61\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 62\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 63\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 64\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 65\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 66\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 67\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 68\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 69\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 70\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 71\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 72\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 73\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 74\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 75\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 76\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 77\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 78\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 79\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 80\n    # s = \"BBBGBRRRGGGGGRR\"\n\n    # n = 81\n    # s"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    garland = stdin\n    colors = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if garland[i - 1] == garland[j - 1]:\n                colors[i] = 1\n                colors[j] = 1\n                break\n        else:\n            colors[i] = 0\n\n    for i in range(1, n + 1):\n        if colors[i] == 0:\n            for j in range(i + 1, n + 1):\n                if colors[j] == 0:\n                    colors[j] = 1\n                    break\n            else:\n                colors[i] = 1\n\n    garland = garland[:-1] + garland[::-1]\n    count = 0\n    for i in range(n):\n        if colors[i] == 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin[0]\n    colors = stdin[1]\n    rgb = {\n        'R': 'R',\n        'G': 'G',\n        'B': 'B'\n    }\n    garland = list(garland)\n    colors = list(colors)\n    n = len(garland)\n    garland = garland + garland\n    # print(garland)\n    # print(colors)\n    garland = ['B' if i!= 'R' and i!= 'G' else i for i in garland]\n    colors = ['R' if i!= 'B' else 'B' for i in colors]\n    # print(garland)\n    # print(colors)\n    # print(set(garland) ^ set(colors))\n    ans = 0\n    while n > 1:\n        if len(set(garland) ^ set(colors)) == 0:\n            print(garland)\n            print(colors)\n            ans = len(garland)\n            break\n        else:\n            garland = garland[:-1]\n            colors = colors[:-1]\n            n -= 1\n    if len(garland)!= 0:\n        ans += 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    ans = ''\n    color_list = ['R', 'G', 'B']\n    for i in range(n):\n        if s[i] == 'R':\n            continue\n        if s[i] == 'G':\n            s = s[:i] + 'R' + s[i+1:]\n        if s[i] == 'B':\n            s = s[:i] + 'G' + s[i+1:]\n    count = {'R':0, 'G':0, 'B':0}\n    for i in range(len(s)):\n        count[s[i]] += 1\n    count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    count = count[0]\n    if count[0] == 0:\n        return '\\n'.join(count)\n    if count[0] == 1:\n        for i in range(n):\n            if color_list.index(s[i]) == 0:\n                s = s[:i] + 'B' + s[i+1:]\n                break\n    else:\n        for i in range(n):\n            if color_list.index(s[i]) == 0:\n                s = s[:i] + 'B' + s[i+1:]\n                break\n    for i in range(n):\n        if color_list.index(s[i]) == 0:\n            continue\n        if color_list.index(s[i]) == 1:\n            continue\n        if color_list.index(s[i]) == 2:\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'R':\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'G':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 0:\n            s = s[:i] + 'R' + s[i+1:]\n            break\n    for i in range(n):\n        if color_list.index(s[i]) == 1:\n            continue\n        if color_list.index(s[i]) == 2:\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'R':\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'G':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 0:\n            s = s[:i] + 'G' + s[i+1:]\n            break\n    for i in range(n):\n        if color_list.index(s[i]) == 2:\n            continue\n        if color_list.index(s[i]) == 1:\n            continue\n        if color_list.index(s[i]) == 0:\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'R':\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'G':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'B':\n            continue\n        s = s[:i] + 'B' + s[i+1:]\n        break\n    for i in range(n):\n        if color_list.index(s[i]) == 0:\n            continue\n        if color_list.index(s[i]) == 1:\n            continue\n        if color_list.index(s[i]) == 2:\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'R':\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'G':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 0:\n            s = s[:i] + 'R' + s[i+1:]\n            break\n    for i in range(n):\n        if color_list.index(s[i]) == 0:\n            continue\n        if color_list.index(s[i]) == 1:\n            continue\n        if color_list.index(s[i]) == 2:\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'R':\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'G':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 0:\n            s = s[:i] + 'G' + s[i+1:]\n            break\n    for i in range(n):\n        if color_list.index(s[i]) == 0:\n            continue\n        if color_list.index(s[i]) == 1:\n            continue\n        if color_list.index(s[i]) == 2:\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'B':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'R':\n            continue\n        if color_list.index(s[i]) == 1 and s[i] == 'G':\n            continue\n        if color_list.index(s[i]) == 2 and s[i] == 'B':\n            continue\n        s = s[:i] + 'B' + s[i+1:]\n        break\n    for i in range(n):\n        if color_"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    s = stdin.split()\n    list = []\n    for i in range(1,n):\n        list.append(s[i])\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            if list[i]!= list[j]:\n                list[i],list[j] = list[j],list[i]\n    return''.join(list)"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lamps = stdin\n    red_count = 0\n    blue_count = 0\n    green_count = 0\n    for i in range(n):\n        if lamps[i] == \"R\":\n            red_count += 1\n        elif lamps[i] == \"G\":\n            green_count += 1\n        elif lamps[i] == \"B\":\n            blue_count += 1\n    if red_count == blue_count or red_count == green_count:\n        return \"2\"\n    if blue_count == red_count or blue_count == green_count:\n        return \"2\"\n    if red_count == blue_count:\n        return \"1\"\n    else:\n        if red_count == green_count:\n            return \"1\"\n        else:\n            return \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    n = int(inp[0])\n    arr = list(map(int, inp[1].split()))\n    k = 0\n    r = 0\n    i = 0\n    while i < n - 1:\n        if arr[i] < arr[i + 1]:\n            k += 1\n            i += 1\n        else:\n            i += 1\n    if k == 0:\n        return str(0)\n    else:\n        return str(k) + \"\\n\" + str(i) + \"\\n\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res_arr = []\n\n    for i in range(n):\n        if a[i] not in res_arr:\n            res_arr.append(a[i])\n        else:\n            res_arr = res_arr[i:]\n            break\n\n    return \" \".join(str(x) for x in range(1, len(res_arr) + 1))\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    \n    def find_increasing_sequence(arr: list, n: int, last_num: int) -> int:\n        if not arr:\n            return 0\n        \n        length_of_subsequence = 1\n        while arr:\n            if arr[0] >= last_num:\n                arr.pop(0)\n            else:\n                break\n        \n        if not arr:\n            return length_of_subsequence\n        \n        for i in range(len(arr) - 1):\n            if arr[i] + 1 == arr[i + 1]:\n                length_of_subsequence += 1\n            else:\n                break\n        \n        if not arr:\n            return length_of_subsequence\n        \n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1] - 1:\n                length_of_subsequence += 1\n            else:\n                break\n        \n        return length_of_subsequence\n\n    increasing_sequence = find_increasing_sequence(arr, n, arr[0])\n    return str(increasing_sequence) + '\\n' +''.join(map(str, arr[:increasing_sequence]))\n\n\nsolution(\"\"\"\n3\n3 3 4 7 5 6 8\n\"\"\")\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def seq(lst):\n        if not lst:\n            return 0\n        if len(lst) == 1:\n            return 1\n        nxt = []\n        for i in range(len(lst)):\n            nxt.append(lst[i])\n            if seq(nxt) >= seq(lst[:i]):\n                return seq(nxt) + 1\n            nxt.pop()\n        return seq(lst) + 1\n    n = int(stdin.split()[0])\n    lst = stdin.split()[1:]\n    return str(seq(lst))"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    max_seq = 0\n    res = []\n    for i in range(len(nums)):\n        if max_seq < i + 1:\n            max_seq = i + 1\n            res = []\n        res.append(i+1)\n        if i == 0 or nums[i-1] >= nums[i]:\n            res.append(i)\n    return str(max_seq) + \"\\n\" + \" \".join(map(str, res))\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split(' ')))\n\n    i = 0\n    while i + 1 < n and arr[i] < arr[i + 1]:\n        i += 1\n\n    if i == 0:\n        return '0'\n    \n    def cnt_arr(arr):\n        c = 0\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                c += 1\n        return c\n\n    def max_len(arr):\n        max_len = 0\n        for i in range(1, len(arr)):\n            cnt = cnt_arr(arr[i:])\n            if max_len < cnt:\n                max_len = cnt\n        return max_len\n\n    res = max_len(arr)\n    return str(res)\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u043b\u0438\u043d\u0443 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    k = 1\n    while k < n:\n        if a[k-1] < a[k]:\n            k += 1\n        else:\n            k += 2\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    if a[0] < a[1]:\n        idx = 2\n    else:\n        idx = 1\n    for i in range(1, n):\n        if a[i] > a[idx]:\n            idx += 2\n    # \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    res = []\n    if idx == 1:\n        res.append(1)\n        res.append(2)\n    else:\n        res.append(1)\n        res.append(idx)\n        res.append(idx)\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr_d = dict()\n    arr_s = list()\n    k = 0\n    if n > 0 and n <= 1000:\n        for i in range(len(arr)):\n            if arr[i] not in arr_d:\n                arr_d[arr[i]] = 1\n                arr_s.append(arr[i])\n            else:\n                arr_d[arr[i]] += 1\n                arr_s.append(arr[i])\n                arr_s.pop(0)\n\n            if len(arr_s) > n:\n                arr_s.pop(0)\n        return str(k) + \" \" + str(arr_s[0])\n    else:\n        return \"0 0\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    k = max(arr)\n    count = 0\n    res = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n        else:\n            if count >= 2:\n                if count == 2:\n                    res = i + 1\n                else:\n                    res = i + count\n                break\n            count = 0\n    return str(res) +'' + str(i + 1) if res else str(i + 1)\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    # print(n)\n    # print(arr)\n    # print(len(arr))\n    if len(arr) == 1:\n        return str(1)\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return str(1)\n        else:\n            return str(2)\n    # print(arr)\n    arr = sorted(arr, reverse=True)\n    # print(arr)\n    # print(arr)\n    # print(len(arr))\n    # print(arr)\n    if arr[0] < 1:\n        # print(arr[0])\n        return str(0)\n    # print(arr[0])\n    elif arr[0] == 1:\n        # print(arr[1])\n        if arr[1] == 1:\n            return str(1)\n        else:\n            return str(2)\n    else:\n        for i in range(len(arr) - 2):\n            if arr[i] == arr[i + 1] == arr[i + 2]:\n                return str(1)\n            else:\n                continue\n        if arr[len(arr) - 3] == arr[len(arr) - 2] == arr[len(arr) - 1]:\n            return str(1)\n        else:\n            return str(2)\n    # print(arr)\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    if a * b * 3 == 9:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b * 3 == 9:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return 'Yes' if int(a) * int(b) * int(a) * int(b) % 2 == 1 else 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B * (A + 1) * (B + 1) * (A * (B + 1) + 1) / 6 == 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    A = int(stdin[0])\n    B = int(stdin[1])\n    if (A * B) % 2 == 0:\n        return \"No\"\n    elif (A * B) % 2 == 1:\n        return \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if eval('{} * {} * {}'.format(*map(int, stdin.split()))) % 2 else 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    c = 3\n    while (int(c) * int(c) * int(c))!= int(a) * int(b) * int(c):\n        c += 1\n    if int(c) > 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A * B * (A + 1) * (B + 1) % 2 == 0:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split()\n    if not (1 <= int(a) <= 3 and 1 <= int(b) <= 3):\n        raise ValueError\n    c = 3\n    while c <= 3:\n        if a * int(b) * c % 2 == 0:\n            c += 1\n            continue\n        else:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return 'Yes' if a * b * 3 % 2 == 1 else 'No'\n\nsolution()\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2 == 0:\n        return str(x * 0.5)\n    else:\n        return str(x)\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return '{:d}'.format(int(x) // int(y) * int(y) // 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X,Y = stdin.split(' ')\n    X = int(X)\n    Y = int(Y)\n    if X%2 == 0:\n        Y = Y//2\n        if Y%2 == 0:\n            return(X+Y)\n        else:\n            return(X+Y+1)\n    else:\n        return(X+1)"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Extract input\n    X, Y = list(map(int, stdin.split()))\n    # Compute the result\n    return str(int(X/2 + (Y%2) * (X/2)))\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    x, y = int(stdin[0]), int(stdin[1])\n    if (x+y) % 2 == 0:\n        print((x+y)//2)\n    else:\n        print((x+y)//2+1)"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{int(stdin.split()[0]) * 2 // 2}\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    print(int(x) // 2 if int(x) % 2 == 0 else int(x) // 2 + 1)"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    half_fare = (x + y) // 2\n    return str(half_fare)\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input from stdin and prints out the result.\n\n    >>> solution(\"10 10\\n\")\n    110\n    \"\"\"\n    x, y = map(int, stdin.split())\n    if x % 2!= 0:\n        if y % 2 == 0:\n            return '110'\n        return '90'\n    if y % 2!= 0:\n        if x % 2 == 0:\n            return '90'\n        return '110'\n    return str(x//2 + y//2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    half_X = X // 2\n    if X == 2:\n        print(half_X)\n    else:\n        x_half_Y = Y // 2\n        if Y % 2!= 0:\n            half_Y = Y // 2 + 1\n        else:\n            half_Y = Y // 2\n        print(half_X + half_Y)\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(eight_possible_passwords())\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = range(1, N+1)\n    count = 1\n    for i in nums:\n        for j in nums:\n            for k in nums:\n                if (i*1) + (j*1) + (k*1) == N:\n                    count += 1\n    return str(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = max(1, n-1)\n    b = min(9, n+1)\n    return str(a**b)\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    combinations = set()\n    for digit in range(1, n + 1):\n        combinations.add(str(digit) + str(digit + 1) + str(digit + 2))\n\n    return len(combinations)\n\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    passwords = set()\n    for i in range(1, int(stdin) + 1):\n        for j in range(1, int(stdin) + 1):\n            passwords.add(str(i) + str(j) + str(i) + str(j))\n    return len(passwords)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    for n in range(1, n):\n        total += (n * (n + 1)) // 2\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin\n    passlen = len(password)\n    lower = []\n    upper = []\n    num = []\n    for i in password:\n        if i.islower():\n            lower.append(i)\n        if i.isupper():\n            upper.append(i)\n        if i.isnumeric():\n            num.append(i)\n    # print(lower)\n    # print(upper)\n    # print(num)\n    lower.sort()\n    upper.sort()\n    num.sort()\n    # print(lower)\n    # print(upper)\n    # print(num)\n    # print(len(lower) + len(upper) + len(num))\n    return str(len(lower) + len(upper) + len(num))\n\nsolution(\"4\")\n\n'''"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdin"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # N = int(s.split(\" \")[0])\n    N = int(s)\n    ans = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            for k in range(1, 9):\n                for l in range(1, 9):\n                    for m in range(1, 9):\n                        for n in range(1, 9):\n                            for o in range(1, 9):\n                                for p in range(1, 9):\n                                    for q in range(1, 9):\n                                        ans += 1\n    return str(ans)"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    passwords = set()\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                pw = str(i) + str(j) + str(k)\n                passwords.add(pw)\n    print(len(passwords))"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n\n    if year <= 5:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X <= 5 and X >= 1:\n        if X == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if 7 <= x <= 9:\n        return 'YES'\n    elif 0 <= x <= 6:\n        return 'NO'\n    else:\n        return 'Invalid input!'"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0 or n % 10 == 1:\n        return \"YES\"\n    elif n % 10 >= 2 and n % 10 <= 4:\n        return \"NO\"\n    elif n % 10 >= 5 and n % 10 <= 6:\n        return \"NO\"\n    elif n % 10 == 7 or n % 10 == 8 or n % 10 == 9:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = stdin\n\n    if int(X) >= 7 and int(X) <= 9:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 1 and x <= 9:\n        if x == 1 or x == 2 or x == 3:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) >= 7 else 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    if x > 9:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    if x >= 7 and x <= 9:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 1 or X > 9:\n        return 'NO'\n    if X < 5:\n        return 'NO'\n    elif X == 5:\n        return 'YES'\n    elif X == 6:\n        return 'YES'\n    elif X == 7:\n        return 'YES'\n    elif X == 8:\n        return 'NO'\n    elif X == 9:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n\n---------------------------------------------------------------------------------------------------------------------------\n\n5\n\nThe growth of a five-year-old child will be celebrated.\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 1\n\n4\n\nSample Output 1\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 2\n\n7\n\nSample Output 2\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 3\n\n8\n\nSample Output 3\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 4\n\n7\n\nSample Output 4\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 5\n\n1\n\nSample Output 5\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 6\n\n10\n\nSample Output 6\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 7\n\n9\n\nSample Output 7\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 8\n\n5\n\nSample Output 8\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 9\n\n6\n\nSample Output 9\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 10\n\n4\n\nSample Output 10\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 11\n\n5\n\nSample Output 11\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 12\n\n10\n\nSample Output 12\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 13\n\n7\n\nSample Output 13\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 14\n\n4\n\nSample Output 14\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 15\n\n9\n\nSample Output 15\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 16\n\n4\n\nSample Output 16\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 17\n\n8\n\nSample Output 17\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 18\n\n7\n\nSample Output 18\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 19\n\n8\n\nSample Output 19\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 20\n\n8\n\nSample Output 20\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 21\n\n5\n\nSample Output 21\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 22\n\n6\n\nSample Output 22\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 23\n\n4\n\nSample Output 23\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 24\n\n9\n\nSample Output 24\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 25\n\n1\n\nSample Output 25\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 26\n\n8\n\nSample Output 26\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 27\n\n7\n\nSample Output 27\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 28\n\n4\n\nSample Output 28\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 29\n\n9\n\nSample Output 29\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 30\n\n10\n\nSample Output 30\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 31\n\n3\n\nSample Output 31\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 32\n\n7\n\nSample Output 32\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 33\n\n4\n\nSample Output 33\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 34\n\n6\n\nSample Output 34\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 35\n\n4\n\nSample Output 35\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 36\n\n5\n\nSample Output 36\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 37\n\n5\n\nSample Output 37\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 38\n\n4\n\nSample Output 38\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 39\n\n6\n\nSample Output 39\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 40\n\n4\n\nSample Output 40\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 41\n\n5\n\nSample Output 41\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 42\n\n4\n\nSample Output 42\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 43\n\n5\n\nSample Output 43\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 44\n\n7\n\nSample Output 44\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 45\n\n5\n\nSample Output 45\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 46\n\n4\n\nSample Output 46\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 47\n\n4\n\nSample Output 47\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 48\n\n7\n\nSample Output 48\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 49\n\n3\n\nSample Output 49\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 50\n\n6\n\nSample Output 50\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 51\n\n10\n\nSample Output 51\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 52\n\n1\n\nSample Output 52\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 53\n\n4\n\nSample Output 53\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 54\n\n8\n\nSample Output 54\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 55\n\n3\n\nSample Output 55\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 56\n\n7\n\nSample Output 56\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 57\n\n8\n\nSample Output 57\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 58\n\n6\n\nSample Output 58\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 59\n\n7\n\nSample Output 59\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 60\n\n8\n\nSample Output 60\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 61\n\n5\n\nSample Output 61\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 62\n\n5\n\nSample Output 62\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 63\n\n7\n\nSample Output 63\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 64\n\n8\n\nSample Output 64\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 65\n\n8\n\nSample Output 65\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 66\n\n7\n\nSample Output 66\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 67\n\n9\n\nSample Output 67\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 68\n\n7\n\nSample Output 68\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 69\n\n7\n\nSample Output 69\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 70\n\n10\n\nSample Output 70\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 71\n\n9\n\nSample Output 71\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 72\n\n5\n\nSample Output 72\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 73\n\n8\n\nSample Output 73\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 74\n\n6\n\nSample Output 74\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 75\n\n7\n\nSample Output 75\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 76\n\n8\n\nSample Output 76\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 77\n\n5\n\nSample Output 77\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 78\n\n6\n\nSample Output 78\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 79\n\n7\n\nSample Output 79\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 80\n\n7\n\nSample Output 80\n\nNO\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 81\n\n10\n\nSample Output 81\n\nYES\n\n---------------------------------------------------------------------------------------------------------------------------\n\nSample Input 82\n\n5\n\nSample Output"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes the input and prints the result.\n\n    >>> solution('')\n    'ABC'\n    >>> solution('123456')\n    'ABC'\n    >>> solution('12345678')\n    'ABC'\n    >>> solution('123456789')\n    'ABC'\n    >>> solution('12345678901')\n    'ABC'\n    >>> solution('1234567890123')\n    'ABC'\n    >>> solution('12345678901234')\n    'ABC'\n    >>> solution('123456789012345')\n    'ABC'\n    >>> solution('123456789012345678901')\n    'ABC'\n    >>> solution('12345678901234567890123')\n    'ABC'\n    >>> solution('1234567890123456789012345')\n    'ABC'\n    >>> solution('1234567890123456789012345678901')\n    'ABC'\n    >>> solution('12345678901234567890123456789012345678')\n    'ABC'\n    >>> solution('12345678901234567890123456789012345678901')\n    'ABC'\n    >>> solution('12345678901234567890123456789012345678901234567890123')\n    'ABC'\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 1998:\n        raise Exception(\"Invalid number\")\n\n    if n < 1000:\n        return \"ABC\" + str(n - 999)\n    elif n < 1999:\n        return \"ABD\" + str(n - 1000)\n    elif n < 1999:\n        return \"ABD\" + str(n - 1000)\n    elif n < 1998:\n        return \"ABD\" + str(n - 1000)"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(next(f'{i:03}' for i in range(1, n + 1)))\n    return stdin\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    labels = {\n        1: 'ABC',\n        2: 'DEF',\n        3: 'GHI',\n        4: 'JKL',\n        5: 'MNO',\n        6: 'PQRS',\n        7: 'TUV',\n        8: 'WXYZ',\n        9: 'Z'\n    }\n    for i in range(1, 10):\n        label = labels[i]\n        if n == i:\n            print(label)\n            return\n    print(labels[n])\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N - 1):\n        N += 1\n    return str(chr(ord('A') + N % 10)) + str(chr(ord('A') + (N - 1) // 10)) + str(chr(ord('A') + (N - 2) // 100))\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''999\n   ... ''')\n    'ABC'\n    >>> solution('''9999\n   ... ''')\n    'ABC'\n    >>> solution('''1000\n   ... ''')\n    'ABD'\n    >>> solution('''1001\n   ... ''')\n    'ABD'\n    >>> solution('''1002\n   ... ''')\n    'ABD'\n    >>> solution('''1003\n   ... ''')\n    'ABD'\n    >>> solution('''1004\n   ... ''')\n    'ABD'\n    >>> solution('''1005\n   ... ''')\n    'ABD'\n    >>> solution('''1006\n   ... ''')\n    'ABD'\n    >>> solution('''1007\n   ... ''')\n    'ABD'\n    >>> solution('''1008\n   ... ''')\n    'ABD'\n    >>> solution('''1009\n   ... ''')\n    'ABD'\n    >>> solution('''1010\n   ... ''')\n    'ABD'\n    >>> solution('''1011\n   ... ''')\n    'ABD'\n    >>> solution('''1012\n   ... ''')\n    'ABD'\n    >>> solution('''1013\n   ... ''')\n    'ABD'\n    >>> solution('''1014\n   ... ''')\n    'ABD'\n    >>> solution('''1015\n   ... ''')\n    'ABD'\n    >>> solution('''1016\n   ... ''')\n    'ABD'\n    >>> solution('''1017\n   ... ''')\n    'ABD'\n    >>> solution('''1018\n   ... ''')\n    'ABD'\n    >>> solution('''1019\n   ... ''')\n    'ABD'\n    >>> solution('''1020\n   ... ''')\n    'ABD'\n    >>> solution('''1021\n   ... ''')\n    'ABD'\n    >>> solution('''1022\n   ... ''')\n    'ABD'\n    >>> solution('''1023\n   ... ''')\n    'ABD'\n    >>> solution('''1024\n   ... ''')\n    'ABD'\n    >>> solution('''1025\n   ... ''')\n    'ABD'\n    >>> solution('''1026\n   ... ''')\n    'ABD'\n    >>> solution('''1027\n   ... ''')\n    'ABD'\n    >>> solution('''1028\n   ... ''')\n    'ABD'\n    >>> solution('''1029\n   ... ''')\n    'ABD'\n    >>> solution('''1030\n   ... ''')\n    'ABD'\n    >>> solution('''1031\n   ... ''')\n    'ABD'\n    >>> solution('''1032\n   ... ''')\n    'ABD'\n    >>> solution('''1033\n   ... ''')\n    'ABD'\n    >>> solution('''1034\n   ... ''')\n    'ABD'\n    >>> solution('''1035\n   ... ''')\n    'ABD'\n    >>> solution('''1036\n   ... ''')\n    'ABD'\n    >>> solution('''1037\n   ... ''')\n    'ABD'\n    >>> solution('''1038\n   ... ''')\n    'ABD'\n    >>> solution('''1039\n   ... ''')\n    'ABD'\n    >>> solution('''1040\n   ... ''')\n    'ABD'\n    >>> solution('''1041\n   ... ''')\n    'ABD'\n    >>> solution('''1042\n   ... ''')\n    'ABD'\n    >>> solution('''1043\n   ... ''')\n    'ABD'\n    >>> solution('''1044\n   ... ''')\n    'ABD'\n    >>> solution('''1045\n   ... ''')\n    'ABD'\n    >>> solution('''1046\n   ... ''')\n    'ABD'\n    >>> solution('''1047\n   ... ''')\n    'ABD'\n    >>> solution('''1048\n   ... ''')\n    'ABD'\n    >>> solution('''1049\n   ... ''')\n    'ABD'\n    >>> solution('''1050\n   ... ''')\n    'ABD'\n    >>> solution('''1051\n   ... ''')\n    'ABD'\n    >>> solution('''1052\n   ... ''')\n    'ABD'\n    >>> solution('''1053\n   ... ''')\n    'ABD'\n    >>> solution('''1054\n   ... ''')\n    'ABD'\n    >>> solution('''1055\n   ... ''')\n    'ABD'\n    >>> solution('''1056\n   ... ''')\n    'ABD'\n    >>> solution('''1057\n   ... ''')\n    'ABD'\n    >>> solution('''1058\n   ... ''')\n    'ABD'\n    >>> solution('''1059\n   ... ''')\n    'ABD'\n    >>> solution('''1060\n   ... ''')\n    'ABD'\n    >>> solution('''1061\n   ... ''')\n    'ABD'\n    >>> solution('''1062\n   ... ''')\n    'ABD'\n    >>> solution('''1063\n   ... ''')\n    'ABD'\n    >>> solution('''1064\n   ... ''')\n    'ABD'\n    >>> solution('''1065\n   ... ''')\n    'ABD'\n    >>> solution('''1066\n   ... ''')\n    'ABD'\n    >>> solution('''1067\n   ... ''')\n    'ABD'\n    >>> solution('''1068\n   ... ''')\n    'ABD'\n    >>> solution('''1069\n   ... ''')\n    'ABD'\n    >>> solution('''1070\n   ... ''')\n    'ABD'\n    >>> solution('''1071\n   ... ''')\n    'ABD'\n    >>> solution('''1072\n   ... ''')\n    'ABD'\n    >>> solution('''1073\n   ... ''')\n    'ABD'\n    >>> solution('''1074\n   ... ''')\n    'ABD'\n    >>> solution('''1075\n   ... ''')\n    'ABD'\n    >>> solution('''1076\n   ... ''')\n    'ABD'\n    >>> solution('''1077\n   ... ''')\n    'ABD'\n    >>> solution('''1078\n   ... ''')\n    'ABD'\n    >>> solution('''1079\n   ... ''')\n    'ABD'\n    >>> solution('''1080\n   ... ''')\n    'ABD'\n    >>> solution('''1081\n   ... ''')\n    'ABD'\n    >>> solution('''1082\n   ... ''')\n    'ABD'\n    >>> solution('''1083\n   ... ''')\n    'ABD'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[2][:3]\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yay!\" if no_pairs(stdin) else \"Nay!\")\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    in_list = list(map(int, stdin.split()))\n    distances = sorted(in_list[1:], key=lambda x: abs(x-in_list[0]))\n    pair = list(filter(lambda x: (x < in_list[0] and (in_list[0] - x) in distances) or (in_list[0] - x) in distances and (x < in_list[0] and (x-in_list[0]) in distances), distances))\n    if len(pair) == 0:\n        print('Yay!')\n    else:\n        print('No pair of antennas that cannot communicate directly.')\n\nsolution(input())\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yay!\" if len(get_pairs(stdin)) == 0 else \"Nay!\"\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if (a <= k <= c) or (c <= k <= d) or (d <= k <= e):\n        return \"Yay!\"\n    else:\n        return \"Nay!\""
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if 'a' not in stdin or 'b' not in stdin or 'c' not in stdin or 'd' not in stdin or 'e' not in stdin or 'k' not in stdin:\n        return 'Yay!'\n    stdin_list = stdin.split()\n    distances = list(map(int, stdin_list[1:]))\n    if distances[0] < distances[1] and distances[1] < distances[2] and distances[0] < distances[3] and distances[2] < distances[3]:\n        return 'Yay!'\n    else:\n        return 'Nay!'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if (a < b < c < d < e) or (a < d < b < c < e) or (a < e < b < c < d) or (a < e < d < b < c):\n        print('Yay!')\n    else:\n        print('No!')\nsolution(input())"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c, d, e, k) = map(int, stdin.split())\n    minDist = min(a, b, c, d, e)\n    maxDist = max(a, b, c, d, e)\n    if a == b and a == c and a == d and a == e:\n        return \"Yay!\"\n    elif a == b or a == c or a == d or a == e:\n        return \"Yay!\"\n    elif a == c or a == d or a == e:\n        return \"Yay!\"\n    elif a == d or a == e:\n        return \"Yay!\"\n    elif a == e:\n        return \"Yay!\"\n    elif b == c or b == d or b == e:\n        return \"Yay!\"\n    elif c == d or c == e:\n        return \"Yay!\"\n    elif d == e:\n        return \"Yay!\"\n    elif a + 1 == b and a + 1 == c and a + 1 == d and a + 1 == e:\n        return \"Yay!\"\n    elif a + 2 == b and a + 2 == c and a + 2 == d and a + 2 == e:\n        return \"Yay!\"\n    elif a + 3 == b and a + 3 == c and a + 3 == d and a + 3 == e:\n        return \"Yay!\"\n    elif a + 4 == b and a + 4 == c and a + 4 == d and a + 4 == e:\n        return \"Yay!\"\n    elif a + 5 == b and a + 5 == c and a + 5 == d and a + 5 == e:\n        return \"Yay!\"\n    elif a + 6 == b and a + 6 == c and a + 6 == d and a + 6 == e:\n        return \"Yay!\"\n    else:\n        return \"Nay!\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    antenna_a, antenna_b, antenna_c, antenna_d, antenna_e, k = stdin.split()\n    antenna_a, antenna_b, antenna_c, antenna_d, antenna_e = int(antenna_a), int(antenna_b), int(antenna_c), int(antenna_d), int(antenna_e)\n    k = int(k)\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_b]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    if max([antenna_a, antenna_b]) < min([antenna_a, antenna_c]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_b]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_d]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]) and max([antenna_a, antenna_c]) < min([antenna_a, antenna_e]):\n        return 'Yay!'\n    return 'Yay!'\n\nsolution(input())\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = int(stdin[3])\n    e = int(stdin[4])\n    k = int(stdin[5])\n    if a + k <= b:\n        print('Yay!')\n    elif a + k <= c:\n        print('Yay!')\n    elif a + k <= d:\n        print('Yay!')\n    elif a + k <= e:\n        print('Yay!')\n    elif c + k <= d:\n        print('Yay!')\n    elif c + k <= e:\n        print('Yay!')\n    elif d + k <= e:\n        print('Yay!')\n    else:\n        print('Nay!')\n    return 'Yay!'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    return \"Yay!\" if k - max(a, b, c, d, e) > 15 else \"Nay!\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    else:\n        return'red'"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 2800:\n        return stdin\n    else:\n        return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = stdin\n    if a < 3200:\n        return s\n    else:\n        return'red'"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = stdin\n    if a <= 3200:\n        return s\n    else:\n        return'red'\n    # Write your code here"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) < 2800:\n        return stdin\n    else:\n        return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(stdin)\n    else:\n        print(\"red\")\n    return \"\"\nsolution(input())\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 3200:\n        return \"red\"\n    else:\n        return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    else:\n        return'red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split()\n    a = int(a)\n    if a < 3200:\n        return s\n    return'red'\n\nsolution(\"3200 pink\")\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, s = int(stdin), stdin\n    if a < 3200:\n        print(s)\n    else:\n        print(\"red\")\nsolution(input())\n\n'''\n\n'''\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rating_min = 1199\n    rating_max = 1199\n    rating_next = 0\n    while rating_max >= rating_min:\n        rating_next = (rating_next + rating_max) // 2\n        if rating_next <= 1201:\n            rating_min = rating_next\n        else:\n            rating_max = rating_next - 1\n    return str(rating_next)\n    # if R <= 1200:\n    #     return str(R)\n    # elif R >= 2800:\n    #     return str(R - 1)\n    # else:\n    #     return str(R + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC' if int(stdin) < 1200 else 'ARC' if int(stdin) < 2800 else 'AGC'"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '1199':\n        return 'ABC'\n    elif stdin == '1020':\n        return 'ARC'\n    else:\n        return 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199\n   ... 1199''')\n    'ARC'\n    \"\"\"\n    contest_rating_dict = {}\n    contest_rating_dict['ARC'] = 2800\n    contest_rating_dict['AGC'] = 4208\n    contest_rating_dict['ABC'] = 1200\n    for i in range(1000):\n        contest_rating_dict[i] = i\n    for _, rating in contest_rating_dict.items():\n        if rating > stdin:\n            return _\n    return 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1200:\n        return 'ARC'\n    elif n < 2800:\n        return 'AGC'\n    else:\n        return 'ABC'\n\nsolution(input())\n\n\"\"\"\nn = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    next_contest = int(stdin)\n    while True:\n        if next_contest == 1489:\n            break\n        if next_contest >= 1200:\n            return 'ARC'\n        next_contest += 1\n    return 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC' if int(stdin) < 1200 else 'ARC' if int(stdin) < 2800 else 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_all_numbers() -> int:\n        r = stdin.split()\n        numbers = []\n        for i in range(1, len(r)):\n            numbers.append(int(r[i]))\n        return numbers\n\n    numbers = get_all_numbers()\n    if numbers[0] <= 1200:\n        print(\"ABC\")\n    elif numbers[0] <= 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    return \"AGC\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(stdin.replace(\"1\", \"9\").replace(\"9\", \"1\")):03}'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    return int(stdin.replace('1', '9').replace('9', '1').replace('9', '1'))"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones = n // 100\n    tens = n % 100 // 10\n    hundreds = n % 10\n    ones = ones * 9\n    tens = tens * 9\n    hundreds = hundreds * 9\n    result = ones + tens + hundreds\n    return str(result)\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(9*int(n/1000) + 9*int(n/100%10) + int(n/10%10))"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('119')\n    '991'\n    '''\n    n = stdin\n    ones = '9' * n.count('1')\n    tens = '1' * n.count('9')\n    hundreds = n.replace('1', ones, 1)\n    return hundreds.replace('9', tens, 1)\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    result = \"\"\n    for i in range(len(n)):\n        if n[i] == \"1\":\n            result += \"9\"\n        elif n[i] == \"9\":\n            result += \"1\"\n        else:\n            result += n[i]\n    return result\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"1\", \"9\").replace(\"9\", \"1\")\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    for i in range(3):\n        if i == 0:\n            n = n.replace(n[i], '9')\n        elif i == 1:\n            n = n.replace(n[i], '1')\n        elif i == 2:\n            n = n.replace(n[i], '1')\n    return n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1', '9').replace('9', '1')"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(x if x!= '1' else '9' for x in stdin)"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    str_list = stdin.split()\n    for i in range(len(str_list)):\n        str_list[i] = list(str_list[i])\n    for i in range(len(str_list)):\n        str_list[i] = \"\".join(str_list[i])\n    result = []\n    for i in range(len(str_list)):\n        temp = str_list[i]\n        temp = list(temp)\n        for j in range(len(temp)):\n            temp[j] = temp[j].lower()\n        temp = \"\".join(temp)\n        result.append(temp)\n    result.sort()\n    result = list(map(lambda x: x[::-1], result))\n    return result[0]\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    return b\n    "
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        b = stdin.rstrip()\n        # print(b)\n        a = \"\"\n        for j in range(len(b)):\n            if j == 0:\n                a = a + b[j:j + 2]\n            elif a[-1] == b[j-1]:\n                a = a + b[j:j + 2]\n            else:\n                break\n        print(a)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        string = stdin.strip()\n        res = []\n        res.append(string[0:2])\n        for j in range(2, len(string)):\n            if len(res[-1]) > 1 and string[j] in res[-1]:\n                res[-1] = res[-1][0:res[-1].index(string[j]) + 1]\n            res.append(string[j - 2: j])\n        print(''.join(res))\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t=int(stdin)\n    for i in range(t):\n        print(solution1(stdin))\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for i in stdin.split():\n        res.append(solution_aux(i))\n    return''.join(res)\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def permutation(lst):\n        if len(lst) == 0: return []\n        if len(lst) == 1: return lst\n        permutation_lst = []\n        for i in range(len(lst)):\n            if lst[i] in permutation_lst:\n                continue\n            permutation_lst.append(lst[i])\n            # \uc7ac\uadc0\n            for j in permutation(lst[:i] + lst[i + 1:]):\n                permutation_lst.append(lst[i] + j)\n        return permutation_lst\n    b = permutation(list(stdin))\n    a = stdin\n    res = []\n    for i in range(len(b)):\n        res.append(a[i] + b[i])\n    return \"\".join(res)\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        a, b = map(int, stdin.strip().split())\n        return(sum(min(a, (b // a) * (a - 1), (b // a) * (a + 1))) if a > b else sum(min(a, (a // b) * (b - 1), (a // b) * (b + 1))))\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        divisor = b\n        counter = 1\n        while a % divisor!= 0:\n            a += divisor\n            divisor += divisor\n            counter += 1\n        print(counter)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def divisibility(num: int, divisor: int) -> int:\n        if num % divisor == 0:\n            return 0\n        else:\n            return divisibility(num + 1, divisor)\n\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return 0\n    else:\n        return divisibility(1, b)"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin.split()[0])\n    for i in range(1, t+1):\n        a, b = map(int, stdin.split())\n        if (a % b) == 0:\n            return str(0)\n        \n        res = 0\n        while a % b!= 0:\n            a += 1\n            res += 1\n        return str(res)\n    "
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    cases = []\n    for _ in range(t):\n        cases.append(stdin.split())\n    result = []\n    for case in cases:\n        a = int(case[0])\n        b = int(case[1])\n        divisors = []\n        result.append(divisors.append(divisor(a,b)))\n    print(*result)\n\ndef"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join(solution(stdin) for stdin in stdin.split())\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        a_divisor = int(a / b)\n        if a_divisor * b == a:\n            print(0)\n        else:\n            print(a_divisor)\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    a, b = [int(i) for i in stdin.split()]\n    count = 1\n    while a % b!= 0:\n        a += count\n        count += 1\n    print(count)\n    return count\n\nsolution(input())\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if a % b == 0:\n            print(0)\n        else:\n            print(int(a/b))\nsolution(input())\n\n'''\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temp_list = list(map(int, stdin.split()))\n\n    # my_arr = []\n    # for i in range(n):\n    #     for j in range(i+1, n+1):\n    #         my_arr.append(temp_list[i:j])\n\n    # print(len(my_arr))\n\n    # print(len(my_arr[0]))\n    # print(len(my_arr[1]))\n\n    # print(len(my_arr))\n    # print(len(my_arr[0]))\n    # print(len(my_arr[1]))\n\n    # print(len(my_arr))\n    # print(len(my_arr[0]))\n    # print(len(my_arr[1]))\n\n    print(max(sum(temp_list[i:i+k]) / k for i in range(n-k+1)))\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdout.strip()"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    x = []\n    y = []\n    for i in range(n):\n        a = (int(i) for i in stdin.split())\n        x.append(a[0])\n        y.append(a[1])\n    max_ = 0\n    for i in range(k):\n        lst = x[i:] + x[:i]\n        sum_ = 0\n        for j in range(len(lst)):\n            sum_ += lst[j]\n        if sum_ > max_:\n            max_ = sum_\n    return str(max_)\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    measurements = sorted(map(int, stdin.split()))\n    return max(map(lambda x: x*2, measurements[:k]))"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res_0 = a[k - 1]\n    res = 0\n    for i in range(k, n):\n        res = max(res, (res_0 + a[i - k]) / k)\n    return str(res)"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    segments = []\n    for i in range(1, n):\n        segments.append([sum(days[i - 1:i + 1]), i])\n\n    segments.sort()\n    res = 0\n    max_temp = 0\n    i = 1\n    while i < k:\n        if res == 0 or segments[i][0] > max_temp:\n            max_temp = segments[i][0]\n            res = segments[i][1]\n            i += 1\n        else:\n            i += 1\n    return str(max_temp)\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '2.666666666666667'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    print(f'{a[k - 1]} {a[k]}')\n    return\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temps = list(map(int, stdin.split()))\n    segments = []\n    res = 0\n    for i in range(n - k + 1):\n        segments.append(temps[i:i + k])\n    for segment in segments:\n        res = max(res, sum(segment) / k)\n    return str(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = float('-inf')\n    res_0 = 0\n    for i in range(n):\n        res = max(res, (i + 1) * a[i] / (n - i))\n    for i in range(n - k + 1):\n        tmp = sum(a[i: i + k])\n        res = max(res, (i + 1) * tmp / k)\n    return str(res - res_0)\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, m = [int(x) for x in stdin.split()]\n        a = [int(x) for x in stdin.split()]\n        p = [int(x) for x in stdin.split()]\n        return \"YES\" if sorted(a) == a and solution(str(p)) else \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    a.sort()\n\n    def check(a, p):\n        p.sort()\n        for i in range(1, len(p)):\n            if a[i] < a[i - 1]:\n                return False\n        return True\n\n    for p_1, p_2 in zip(p, p[1:]):\n        a[p_1], a[p_2] = a[p_2], a[p_1]\n        if check(a, p):\n            return \"YES\"\n        a[p_1], a[p_2] = a[p_2], a[p_1]\n    return \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def lt(a: list, b: list):\n        if a[0] < b[0]:\n            return True\n        elif a[0] > b[0]:\n            return False\n        return a[1] < b[1]\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    \n    res = True\n\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            #print(i, j)\n            if lt(a[i:j + 1], a[j + 1:]):\n                a[i:j + 1] = sorted(a[i:j + 1])\n                #print(a)\n                res = False\n                break\n\n    for i in range(0, m):\n        if not res:\n            break\n        for j in range(i + 1, m):\n            if not res:\n                break\n            if lt(p[i:j + 1], p[j + 1:]):\n                p[i:j + 1] = sorted(p[i:j + 1])\n                res = False\n                break\n\n    print('YES' if res else 'NO')\n\n\nsolution(input())\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    for i in range(m - 1):\n        print(\n            a[p[i]]\n            < a[p[i + 1]]\n            and (p[i] + 1) < len(a)\n            and (p[i + 1] + 1) < len(a)\n            and a[p[i]] < a[p[i + 1]]\n        )\n    return \"YES\" if sum(a[p[i]] <= a[p[i + 1]] for i in range(m - 1)) else \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    for i in range(1, m):\n        p[i] = p[i - 1] + 1\n    for i in range(m):\n        p[i] = p[i] + 1\n\n    if n < 3:\n        return \"YES\"\n\n    a.sort()\n    for i in range(1, n):\n        if a[i] < a[i - 1] or a[i - 1] > a[i]:\n            return \"NO\"\n\n    for i in range(m):\n        a[p[i] - 1] = -1\n        a[p[i] + 1] = -1\n        a = a[0:p[i] - 1] + sorted(a[p[i] - 1:p[i] + 1]) + a[p[i] + 2:]\n        if a == sorted(a):\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        p = list(map(int, stdin.split()))\n        if is_decreasing(a, p):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    t = int(stdin)\n    if len(set(a[p[i]] for i in p)) < n:\n        return \"NO\"\n    else:\n        for i in p:\n            a[i - 1] = a[i - 1] + 1\n        for i in range(len(p) - 1):\n            if a[p[i]] > a[p[i + 1]]:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, stdin().split())\n        a = list(map(int, stdin().split()))\n        p = list(map(int, stdin().split()))\n        print(\"YES\" if a[p[0]] <= a[p[1]] else \"NO\")\n    return\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdout = []\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        p = list(map(int, stdin.split()))\n        if swap(a, p):\n            stdout.append(\"YES\")\n        else:\n            stdout.append(\"NO\")\n    return '\\n'.join(stdout)\n\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return stdin * (n + 1)\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    k = int(stdin)\n    cipher = ''\n    while k > 0:\n        k -= 1\n        if k % 3 == 1:\n            cipher += '1'\n        elif k % 3 == 2:\n            cipher += '2'\n        elif k % 3 == 0:\n            cipher += 'b'\n    return cipher\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    for _ in range(100):\n        t = ''.join(map(lambda x: int(x)*2, t))\n    return t\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n\n    def decr(s):\n        return s.replace(\"a\", \"a\").replace(\"b\", \"b\").replace(\"c\", \"c\").replace(\"d\", \"d\").replace(\"e\", \"e\").replace(\"f\", \"f\").replace(\"g\", \"g\").replace(\"h\", \"h\").replace(\"i\", \"i\").replace(\"j\", \"j\").replace(\"k\", \"k\").replace(\"l\", \"l\").replace(\"m\", \"m\").replace(\"n\", \"n\").replace(\"o\", \"o\").replace(\"p\", \"p\").replace(\"q\", \"q\").replace(\"r\", \"r\").replace(\"s\", \"s\").replace(\"t\", \"t\").replace(\"u\", \"u\").replace(\"v\", \"v\").replace(\"w\", \"w\").replace(\"x\", \"x\").replace(\"y\", \"y\").replace(\"z\", \"z\")\n\n    for i in range(n):\n        t = decr(t)\n    return t\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    out = \"\"\n\n    while n!= 0:\n        out += (s[0] * 3)\n        s = s[1:]\n        n -= 1\n    return out\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n = int(stdin.split()[0])\n    t = stdin.strip()\n    return t"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    result = \"\"\n    while len(t) >= 2:\n        result += t[0]\n        t = t[2:]\n    result += t\n    return result\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    s = list(stdin)\n    while n!= 1:\n        for i in range(len(s)):\n            if i == 0:\n                s[i] = str(s[i])\n                s[i+1] = str(s[i+1])\n            elif i == len(s)-1:\n                s[i] = str(s[i])\n                s[i-1] = str(s[i-1])\n            else:\n                s[i] = str(s[i])\n                s[i+1] = str(s[i+1])\n                s[i-1] = str(s[i-1])\n        n = n - 1\n    return ''.join(s)"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    input_len = len(stdin)\n    for i in range(input_len):\n        if stdin[i].isalpha():\n            result += stdin[i] * int(stdin[i + 1])\n            stdin = stdin[i + 2:]\n            break\n    return result\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        n = int(line.strip())\n        t = stdin.strip()\n        s = ''.join(sorted(t))\n        print(s)\n    return s"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    g = [[] for _ in range(n)]\n    dist = [float('inf')] * n\n    for _ in range(m):\n        u, v, w = (int(i) for i in stdin.split())\n        u -= 1\n        v -= 1\n        w -= 1\n        if w < dist[u]:\n            dist[u] = w\n            g[u].append(v)\n        if w < dist[v]:\n            dist[v] = w\n            g[v].append(u)\n\n    def dfs(u, mst, dist):\n        for v in g[u]:\n            if dist[v] > dist[u] + 1:\n                dist[v] = dist[u] + 1\n                mst.append((u, v))\n                dfs(v, mst, dist)\n\n    mst = []\n    dfs(0, mst, dist)\n    return dist"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        g[u].append((v, w))\n        g[v].append((u, w))\n    from collections import defaultdict\n    dist = defaultdict(lambda: float('inf'))\n    dist[0] = 0\n    def dfs(curr, dist):\n        for nxt, w in g[curr]:\n            if dist[nxt] > dist[curr] + w:\n                dist[nxt] = dist[curr] + w\n                dfs(nxt, dist)\n    dfs(0, dist)\n    return sum(dist.values())\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    graph = [[] for i in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.strip().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    costs = [0] * n\n    costs[0] = 0\n    visited = [False] * n\n\n    def visit(node, parent, w):\n        visited[node] = True\n        for adj_node, adj_cost in graph[node]:\n            if adj_node!= parent:\n                if not visited[adj_node]:\n                    costs[adj_node] = w + adj_cost\n                    visit(adj_node, node, w + adj_cost)\n\n    for u in range(1, n):\n        if not visited[u]:\n            visit(u, -1, 0)\n\n    print(costs)\n\n    res = 0\n    for u in range(1, n):\n        for v, w in graph[u]:\n            if costs[v] + w < costs[u]:\n                res += 1\n\n    print(res)\n\n    return str(res)\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    n, m = map(int, inputs[0].split())\n    edges = [[] for _ in range(n)]\n    for i in range(1, m + 1):\n        u, v, w = map(int, inputs[i].split())\n        edges[u - 1] += [(v - 1, w)]\n    edges = [[e for e in g] for g in edges]\n    t = 0\n    count = 0\n    while True:\n        count += 1\n        t = len(edges)\n        for i in range(n):\n            for j in range(i):\n                edges[i] += [(j, edges[i][j][1] + 1)]\n        for i in range(n):\n            for j in range(i):\n                if i!= j:\n                    if t == len(edges[i]) and t == len(edges[j]):\n                        break\n                    if t == len(edges[i]) and t > len(edges[j]):\n                        edges[i] = edges[i] + edges[j]\n                        edges[j] = []\n                    if t > len(edges[i]) and t == len(edges[j]):\n                        edges[i] += edges[j]\n                        edges[j] = []\n        if t == len(edges):\n            break\n    t = 0\n    for i in range(n):\n        for j in range(i):\n            if i!= j and (t + edges[i][j][1])!= len(edges[i]):\n                return \"0\"\n        t += len(edges[i])\n    return str(count)\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(lambda: defaultdict(int))\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u][v] = graph[v][u] = w\n    def cost(a, b):\n        return graph[a][b]\n    def mst(cost):\n        start, end = 0, n - 1\n        edges = [(i, cost(start, i), start, i) for i in range(n)]\n        edges.sort(key=lambda x: x[1])\n        n = len(edges)\n        pq = [(0, start, -1)]\n        visited = set(start)\n        while pq and end not in visited:\n            d, x, p = heappop(pq)\n            visited.add(x)\n            if x == end:\n                return d\n            for i in range(n):\n                if i!= p and edges[i][1] == x and edges[i][3] not in visited:\n                    heappush(pq, (cost(x, edges[i][3]), edges[i][3], x))\n    return str(mst(cost))"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def simplify(edges):\n        cnt = 0\n        for u, v in edges:\n            w = edges.pop()\n            if v > u:\n                edges.append((v, u, w))\n            else:\n                edges.append((u, v, w))\n            cnt += 1\n        return cnt, edges\n\n    def merge(edges):\n        for u, v, w in edges:\n            graph[u] += graph[v]\n            graph[v] = []\n        return edges\n\n    def split(n):\n        edges = []\n        for u, v, w in graph[n]:\n            if v > n:\n                edges.append((n, v, w))\n                edges.append((u, v, w))\n            else:\n                edges.append((u, v, w))\n        return edges\n\n    def merge_and_simplify(n, edges):\n        if len(edges) > 1:\n            cnt, edges = simplify(edges)\n            cnt += merge(edges)\n        return cnt, edges\n\n    def simplify_and_split(n, edges):\n        if len(edges) > 1:\n            cnt, edges = merge_and_simplify(n, edges)\n            cnt += split(n)\n        return cnt, edges\n\n    def merge_and_simplify_and_split(n, edges):\n        cnt, edges = simplify_and_split(n, edges)\n        cnt += split(n)\n        return cnt, edges\n\n    def find(n, edges):\n        if n in graph:\n            cnt, edges = merge_and_simplify_and_split(n, edges)\n        return cnt, edges\n\n    ans = 0\n    for n in graph:\n        cnt, edges = find(n, edges)\n        ans = max(ans, cnt)\n\n    return str(ans)\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 6\n   ... 1 2 2\n   ... 2 3 3\n   ... 1 4 2\n   ... 6 3 4\n   ... 3 5 2\n   ... 3 7 1\n   ... 4 8 1\n   ... 6 2 4\n   ... ''')\n    1\n    \"\"\"\n    from collections import defaultdict\n    import heapq\n    n, m = map(int, stdin.split())\n    weights = defaultdict(list)\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        weights[u].append((v, w))\n        weights[v].append((u, w))\n    heap = []\n    cost = 0\n    for i in range(1, n + 1):\n        heapq.heappush(heap, (0, i))\n        visited = set()\n        while heap:\n            cost, u = heapq.heappop(heap)\n            visited.add(u)\n            for v, w in weights[u]:\n                if v not in visited:\n                    heapq.heappush(heap, (cost + w, v))\n    return str(len(visited) - 1)"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # edges = [list(map(int, stdin.split())) for _ in range(m)]\n    #\n    # dist = dijkstra(n, edges)\n    #\n    # print(min(dist))\n\n    # Create graph (list of lists)\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    # Each node has its minimum distance\n    dist = dijkstra(graph, 0)\n\n    # Number of nodes with minimum distance\n    res = 1\n    for i in range(1, n):\n        if dist[i] == dist[0]:\n            res += 1\n    return res\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n[Input]\n\n8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\n\n[Output]\n\n1\n\n[Input]\n\n4 3\n2 1 3\n4 3 4\n2 4 1\n\n[Output]\n\n0\n\n[Input]\n\n3 3\n1 2 1\n2 3 2\n1 3 3\n\n[Output]\n\n0\n\n[Input]\n\n3 3\n1 2 1\n2 3 2\n1 3 3\n\n[Output]\n\n1\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    # the following solution was inspired by https://www.hackerrank.com/challenges/30-dictionaries-and-maps/problem\n    # enumerate from the end for easy slicing\n    # this is a little bit faster than https://www.geeksforgeeks.org/sum-of-sub-arrays-with-equal-sum/\n    # for a description of the solution, please see the above link\n    pairs = defaultdict(int)\n    for i, c in enumerate(reversed(s)):\n        pairs[c] += 1\n    # sum of sums of all subarrays with equal sum\n    # https://mathworld.wolfram.com/SubarraySum.html\n    total = 0\n    for key, val in pairs.items():\n        # sum of all the possible sum values of each subsequence in the subarray\n        # this is to avoid counting the subarray itself\n        # https://stackoverflow.com/questions/2566730/count-the-number-of-subsequences-in-a-string\n        total += (val * (val - 1) // 2)\n    return str(total)\n\nsolution(\"\"\"\n3\nBRB\n\"\"\")\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    arr = stdin[2].split()\n    final = []\n    for i in range(n):\n        if s[i] == \"R\":\n            final.append(\"RR\")\n        elif s[i] == \"G\":\n            final.append(\"RG\")\n        elif s[i] == \"B\":\n            final.append(\"RB\")\n    final_string = \"\".join(final)\n    final_string = final_string.replace(\"RR\", \"R\")\n    final_string = final_string.replace(\"RG\", \"G\")\n    final_string = final_string.replace(\"RB\", \"B\")\n    return final_string\n\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(str, stdin.split()))\n    g = {s[i]: i for i in range(n)}\n    lamps = set(g.keys())\n    if not lamps:\n        return \"0\"\n    for i in lamps:\n        if g[i]!= n - 1:\n            lamps.remove(i)\n    lamps = list(lamps)\n    res = min(lamps, key=lambda x: abs(x - n // 2))\n    return str(abs(n // 2 - g[res]) % 3)\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n\n    def get_solution(s):\n        start = end = 0\n        for i in range(n):\n            if s[i] == 'B':\n                start = i\n            if s[i] == 'R':\n                end = i\n            if start!= end:\n                return (start, end)\n        return (-1, -1)\n\n    def get_color(s):\n        start, end = get_solution(s)\n        if start == -1 or end == -1:\n            return None\n        return s[start] + s[end]\n\n    def check_neighbours(s):\n        start, end = get_solution(s)\n        if start == -1 or end == -1:\n            return None\n        for i in range(start, end):\n            if s[i]!= s[start] or s[i]!= s[end]:\n                return None\n        return s[start] + s[end]\n\n    def check_divisible(lamps):\n        n = len(lamps)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if lamps[i] % 3 == lamps[j] % 3:\n                    return False\n        return True\n\n    #print(n, s)\n\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    lamps = list(s)\n    for i in range(n):\n        lamps[i] = get_color(s)\n\n    while not check_neighbours(lamps):\n        #print(lamps)\n        lamps[0] = get_color(lamps)\n        if lamps[0] is None:\n            lamps = lamps[1:]\n            break\n        lamps[1] = get_color(lamps[1:])\n        if lamps[1] is None:\n            lamps = lamps[2:]\n            break\n        lamps[2] = get_color(lamps[2:])\n        if lamps[2] is None:\n            lamps = lamps[3:]\n            break\n        lamps[3] = get_color(lamps[3:])\n        if lamps[3] is None:\n            lamps = lamps[4:]\n            break\n\n    #print(lamps)\n    if not check_divisible(lamps):\n        #print(\"NA\")\n        return str(0)\n\n    if lamps[0] == lamps[1] and lamps[2] == lamps[3] and lamps[4] == lamps[5]:\n        #print(\"NA\")\n        return str(0)\n\n    #print(lamps)\n    lamps = list(s)\n    for i in range(n):\n        lamps[i] = get_color(s)\n\n    while not check_divisible(lamps):\n        #print(lamps)\n        lamps[0] = get_color(lamps)\n        if lamps[0] is None:\n            lamps = lamps[1:]\n            break\n        lamps[1] = get_color(lamps[1:])\n        if lamps[1] is None:\n            lamps = lamps[2:]\n            break\n        lamps[2] = get_color(lamps[2:])\n        if lamps[2] is None:\n            lamps = lamps[3:]\n            break\n        lamps[3] = get_color(lamps[3:])\n        if lamps[3] is None:\n            lamps = lamps[4:]\n            break\n        lamps[4] = get_color(lamps[4:])\n        if lamps[4] is None:\n            lamps = lamps[5:]\n            break\n        lamps[5] = get_color(lamps[5:])\n        if lamps[5] is None:\n            lamps = lamps[6:]\n            break\n\n    if lamps[0] == lamps[1] and lamps[2] == lamps[3] and lamps[4] == lamps[5]:\n        #print(\"NA\")\n        return str(0)\n\n    #print(lamps)\n    lamps = list(s)\n    for i in range(n):\n        lamps[i] = get_color(s)\n\n    while not check_divisible(lamps):\n        #print(lamps)\n        lamps[0] = get_color(lamps)\n        if lamps[0] is None:\n            lamps = lamps[1:]\n            break\n        lamps[1] = get_color(lamps[1:])\n        if lamps[1] is None:\n            lamps = lamps[2:]\n            break\n        lamps[2] = get_color(lamps[2:])\n        if lamps[2] is None:\n            lamps = lamps[3:]\n            break\n        lamps[3] = get_color(lamps[3:])\n        if lamps[3] is None:\n            lamps = lamps[4:]\n            break\n        lamps[4] = get_color(lamps[4:])\n        if lamps[4] is None:\n            lamps = lamps[5:]\n            break\n        lamps[5] = get_color(lamps[5:])\n        if lamps[5] is None:\n            lamps = lamps[6:]\n            break\n\n    if lamps[0] == lamps[1] and lamps[2] == lamps[3] and lamps[4] == lamps[5]:\n        #print(\"NA\")\n        return str(0)\n\n    #print(lamps)\n    lamps = list(s)\n    for i in range(n):\n        lamps[i] = get_color(s)\n\n    while not check_divisible(lamps):\n        #print(lamps)\n        lamps[0] = get_color(lamps)\n        if lamps[0] is None:\n            lamps = lamps[1:]\n            break\n        lamps[1] = get_color(lamps[1:])\n        if lamps[1] is None:\n            lamps = lamps[2:]\n            break\n        lamps[2] = get_color(lamps[2:])\n        if lamps[2] is None:\n            lamps = lamps[3:]\n            break\n        lamps[3] = get_color(lamps[3:])\n        if lamps[3] is None:\n            l"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    red, green, blue = 'R', 'G', 'B'\n    \n    def good(arr):\n        for i, j in zip(arr, arr[1:]):\n            if i == j and (i[0]!= 'R' or i[0]!= 'B' or i[0]!= 'G'):\n                return False\n        return True\n    \n    def max_colors(arr):\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (arr[i][0] == arr[j][0]) and (arr[i][1] == arr[j][1]) and (arr[i][2] == arr[j][2]):\n                    return False\n        return True\n    \n    def is_nice(arr):\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if i!= j:\n                    if abs(i - j) % 3 == 0 and arr[i][0] == arr[j][0] and arr[i][1] == arr[j][1] and arr[i][2] == arr[j][2]:\n                        return True\n        return False\n    \n    arr = []\n    if n % 3!= 0:\n        return ''\n    for i in range(n):\n        arr.append(red * int(s[i] == red) + green * int(s[i] == green) + blue * int(s[i] == blue))\n    # print(arr)\n    if max_colors(arr):\n        return '0'\n    if good(arr):\n        return '1'\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            arr[i], arr[j] = arr[j], arr[i]\n            if max_colors(arr):\n                return '1'\n            arr[i], arr[j] = arr[j], arr[i]\n    return '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_color(i, j):\n        return stdin[i:j + 1]\n\n    stdin = stdin.strip()\n    n = int(stdin)\n\n    def is_nice(garland):\n        g = garland.strip()\n        for i in range(len(g)):\n            for j in range(i + 1, len(g)):\n                if g[i] == g[j]:\n                    if g[i] == 'R' or g[i] == 'G':\n                        if g[i] == 'R' and g[j] == 'G' or g[i] == 'G' and g[j] == 'R':\n                            return False\n                    elif g[i] == 'B' or g[i] == 'B':\n                        if g[i] == 'B' and g[j] == 'B' or g[i] == 'B' and g[j] == 'B':\n                            return False\n                    else:\n                        raise Exception('Invalid input')\n        return True\n\n    lamps = set()\n    for i in range(len(stdin) - 1):\n        if stdin[i] == stdin[i + 1]:\n            lamps.add(i)\n    if len(lamps) < n:\n        return '0'\n    if n == 2:\n        if is_nice(stdin):\n            return '1'\n        return '0'\n    if len(lamps) == n:\n        if is_nice(stdin):\n            return '1'\n        return '0'\n\n    nice = []\n    # sort lamps according to colors\n    sorted_lamps = sorted(list(lamps))\n    for i in sorted_lamps:\n        for j in sorted_lamps:\n            if i!= j:\n                for k in sorted_lamps:\n                    if k!= j and k!= i and i!= k:\n                        if is_nice(get_color(i, j) + get_color(j, k) + get_color(k, i)):\n                            nice.append((i, j, k))\n\n    # go through all possible rearrangements\n    candidate = []\n    for i in range(len(nice)):\n        for j in range(i + 1, len(nice)):\n            for k in range(j + 1, len(nice)):\n                candidate.append((nice[i], nice[j], nice[k]))\n\n    # find best candidate\n    best = None\n    best_count = float('inf')\n    for c in candidate:\n        count = len([1 for i in c if i < len(stdin) and stdin[i] == c[i]])\n        if count < best_count:\n            best = c\n            best_count = count\n    return str(best_count)\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lamps = stdin.split(\"\\n\")\n    n = int(lamps.pop(0))\n    garland = lamps.pop(0)\n    recolors = []\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (garland[i] == garland[j]) and (abs(i - j) % 3 == 0):\n                recolors.append((i, j))\n    recolors = list(set(recolors))\n    if len(recolors) == 0:\n        return \"ERROR\"\n    elif len(recolors) == 1:\n        print(recolors[0][0], recolors[0][1])\n        return\n    elif len(recolors) == 2:\n        x = min(recolors, key=lambda x: x[1] - x[0])\n        print(x[0], x[1])\n        return\n    else:\n        best = recolors[0]\n        for i in range(1, len(recolors)):\n            for j in range(0, len(recolors)):\n                if i == j:\n                    continue\n                if (recolors[i][0] - recolors[j][1]) % 3 == 0 and (recolors[i][1] - recolors[j][0]) % 3 == 0:\n                    new = recolors[i][0], recolors[j][1]\n                    if new == best:\n                        continue\n                    if new > best:\n                        best = new\n                        if best == recolors[-1]:\n                            break\n        print(best[0], best[1])\n        return\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        if i == 0:\n            continue\n        if s[i] == s[i - 1]:\n            s[i] = s[i - 1]\n        else:\n            s[i] = 'R' if s[i] == 'G' else 'G' if s[i] == 'B' else 'B'\n    return ''.join(s)\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = stdin.strip()\n    garland = stdin.replace('R', 'R').replace('G', 'R').replace('B', 'G')\n    garland = garland.replace('R', 'R').replace('G', 'G').replace('B', 'B')\n    garland = garland.replace('R', 'R').replace('G', 'G').replace('B', 'B')\n    garland = garland.replace('B', 'R').replace('G', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('G', 'R').replace('R', 'B')\n    garland = garland.replace('B', 'G').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'G').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'B').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('R', 'B').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('G', 'R').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'R').replace('B', 'R').replace('R', 'B')\n    garland = garland.replace('B', 'G').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'G').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'B').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('R', 'B').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('G', 'B').replace('B', 'R').replace('R', 'G')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    garland = garland.replace('R', 'G').replace('G', 'B').replace('B', 'R')\n    garland = garland."
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    stdin = list(map(lambda x: x.split(), stdin))\n    stdin = list(map(lambda x: list(map(lambda y: float(y), x)), stdin))\n\n    N = int(stdin[0][0])\n    x = []\n    u = []\n    for i in range(1, N + 1):\n        x.append(stdin[i][0])\n        u.append(stdin[i][1])\n    x = list(map(lambda x: float(x), x))\n    u = list(map(lambda x: float(x), u))\n    x = sum(x)\n    u = sum(u)\n    if u >= 1000000000:\n        u = u / 1000000000\n    elif u < 1000000000:\n        u = u / 1000000\n    x = round(x * u, 5)\n    return str(x)\n\nsolution(stdin)"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, x, u = stdin.split()\n    N = int(N)\n    x = [int(x) for x in x.split()]\n    u = [u[0], u[1]]\n    return str(solution1(N, x, u))\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    n = int(l[0])\n    a = list(map(lambda x: x.split(\" \"), l[1:]))\n    \n    gifts_worth = 0\n    for i in range(1, n):\n        if a[i][1] == \"JPY\":\n            gifts_worth += 10**8 * float(a[i][0])\n        else:\n            gifts_worth += 10**8 * float(a[i][0]) / float(a[i][1])\n    \n    return str(gifts_worth)\n\nsolution(input())"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return stdin\n    elif N == 2:\n        return str(eval(stdin))\n    elif N == 3:\n        return str(eval(stdin))\n    else:\n        return str(eval(stdin))\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: input string\n    '''\n    N = int(stdin.split()[0])\n    x = stdin.split()[1::]\n    print(len(x))\n    # for i in range(N):\n    #     x[i] = float(x[i])\n    #     if x[i] == 'JPY':\n    #         x[i] = 10000\n    #     else:\n    #         x[i] = 0.01\n    #     x[i] = int(x[i])\n    # print(x)\n    # print(x)\n    # for i in range(N):\n    #     if x[i] == 'JPY':\n    #         x[i] = 10000\n    #     else:\n    #         x[i] = 0.01\n    #     x[i] = int(x[i])\n    # print(x)\n    x = [int(x) for x in x]\n    print(x)\n    result = sum(x)\n    return str(result)\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    res = 0\n    for i in range(N):\n        x_i, u_i = stdin.strip().split()\n        x_i = float(x_i)\n        u_i = u_i\n        if u_i == 'JPY':\n            res += x_i\n        else:\n            res += x_i * 0.001\n    return str(res)\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    data = data[1:]\n    total = 0\n    for i in range(len(data)):\n        x, u = data[i].split()\n        if u == 'JPY':\n            total += int(x)\n        else:\n            total += float(x)\n    return str(total)"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x_arr = list(map(int, stdin.split()[1:]))\n    u_arr = list(stdin.split()[2:])\n    x_arr = list(map(str, x_arr))\n    u_arr = list(map(str, u_arr))\n    res = []\n    for i in range(N):\n        if u_arr[i] == \"JPY\":\n            x_arr[i] = str(int(x_arr[i]) * pow(10, 8))\n        else:\n            x_arr[i] = str(round(float(x_arr[i]) * pow(10, -8), 8))\n    res.append(' '.join(x_arr))\n    for i in range(N):\n        if u_arr[i] == \"JPY\":\n            res.append(str(round(float(x_arr[i]) * pow(10, -8), 8)))\n        else:\n            res.append(str(round(float(x_arr[i]) * pow(10, -8), 8)))\n    res =''.join(res)\n    return res\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_of_relative, *data = stdin.split()\n    num_of_relative = int(num_of_relative)\n    data = list(map(float, data))\n    data_dict = {}\n    for i in range(num_of_relative):\n        if data[2*i] == 'JPY':\n            data_dict[i] = float(data[2*i+1])\n        else:\n            data_dict[i] = float(data[2*i+1]) / float(data[2*i])\n\n    total = 0\n    for i in data_dict.keys():\n        total += data_dict[i]*float(data[i])\n\n    return total\nprint(solution(stdin))\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    money = {}\n    for i in range(1, N + 1):\n        money[i] = int(stdin.split()[i])\n    ans = 0\n    for i in range(1, N + 1):\n        if money[i] == 0.1:\n            ans += (money[i + 1] * 380000)\n    return str(ans)\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    return \"\".join([str(i) for i in range(1, N + 1)][::-1])\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    cnt = 0\n    for i in range(i):\n        cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, N, i = stdin.split()\n    N = int(N)\n    i = int(i)\n    if N % 2 == 1:\n        if i % 2 == 1:\n            return str(N // 2) + \" \" + str(N // 2)\n        else:\n            return str(N // 2) + \" \" + str((N // 2) + 1)\n    else:\n        if i % 2 == 1:\n            return str(N // 2 - 1) + \" \" + str(N // 2)\n        else:\n            return str(N // 2) + \" \" + str(N // 2 + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, i = [int(x) for x in stdin.split()]\n    return n - i - 1\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, i = list(map(int, stdin.split()))\n    return str(N - i)\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    i = int(stdin.split()[1])\n    return str(i-1) if i%2 == 1 else str(N-i+1)"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    return str(N - 1 - i)\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, i = list(map(int, stdin.split(\" \")))\n    j = i\n    for _ in range(N-1):\n        j += 1\n    return str(j)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = i - 1\n    while j >= 1:\n        j -= 1\n    return str(j)\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n\n    return str(i - (N - i))"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    n = int(stdin)\n    s = stdin.split()\n    s1 = s[0]\n    t = s[1]\n    new_s = \"\"\n    i = 0\n    j = 0\n    while i < n:\n        new_s += t[j]\n        new_s += s1[i]\n        i += 1\n        j += 1\n    return new_s\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    return \"\".join(sorted(s, cmp=lambda a, b: cmp(t.index(a), t.index(b))))"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S, T = stdin.split()\n    string = \"\"\n    for i in range(N):\n        string += S[i]\n        string += T[i]\n    return string"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = ''.join(stdin.split('\\n')[0])\n    t = ''.join(stdin.split('\\n')[1])\n    res = []\n    for i in range(0,N):\n        res.append(t[i])\n        res.append(s[i])\n    return ''.join(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    t = stdin[1]\n    len_s = len(s)\n    len_t = len(t)\n    if len_s!= len_t:\n        return None\n    res = \"\"\n    for i in range(len_s):\n        if i % 2 == 0:\n            res += s[i]\n        else:\n            res += t[i]\n    return res"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split('\\n')[0])\n    s: str = stdin.split('\\n')[1]\n    t: str = stdin.split('\\n')[2]\n\n    new_string: str = ''\n\n    for i in range(n):\n        new_string += s[i]\n        new_string += t[i]\n    \n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(stdin.split()[1])\n    t = list(stdin.split()[2])\n    i = 0\n    ans = \"\"\n    while i < n:\n        ans += s[i] + t[i]\n        i += 1\n    return ans\n\n\ndef"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S, T = stdin.split()\n    return \"\".join(S[::-1] + T)\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = input()\n    t = input()\n    new_string = \"\"\n    for i in range(N):\n        new_string += s[i] + t[i]\n    return new_string\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For this problem, we can actually solve it as a sum of two cases.\n    Let us solve the first case.\n    \"\"\"\n    n = int(stdin.strip())\n    s = stdin.strip()\n    t = stdin.strip()\n\n    length = len(s)\n    result = \"\"\n\n    for i in range(length):\n        if i % 2 == 0:\n            result += s[i]\n        else:\n            result += t[i]\n\n    return result\n\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''ABA''')\n    'Yes'\n    >>> solution('''AAAB''')\n    'Yes'\n    >>> solution('''AAB''')\n    'No'\n    >>> solution('''AABB''')\n    'No'\n    \"\"\"\n    return \"Yes\" if is_connected(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    if s.count('A')!= s.count('B'):\n        return 'No'\n    return 'Yes' if ((s == 'AA' and s[::-1] == 'BB') or (s == 'BB' and s[::-1] == 'AA')) else 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_count, b_count = 0, 0\n    for s in stdin:\n        if s == 'A':\n            a_count += 1\n        else:\n            b_count += 1\n    if a_count == b_count:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time O(n) space O(n)\n    \"\"\"\n    def check(a, b):\n        return (a == \"A\" and b == \"B\") or (a == \"B\" and b == \"A\")\n\n    stations = []\n    for i in range(len(stdin)):\n        if stdin[i] == \"A\":\n            stations.append(i+1)\n        elif stdin[i] == \"B\":\n            stations.append(i+2)\n    \n    if len(stations) == 1:\n        print(\"Yes\")\n        return\n    \n    for i in range(len(stations) - 1):\n        for j in range(i + 1, len(stations)):\n            if check(stations[i], stations[j]):\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_company_a = int(stdin[0])\n    num_company_b = int(stdin[1])\n\n    if num_company_a!= num_company_b:\n        return \"No\"\n\n    for i in range(num_company_a):\n        a = stdin[2 * i + 1]\n        b = stdin[2 * i + 2]\n        if a == \"A\" and b == \"B\":\n            return \"Yes\"\n        elif a == \"B\" and b == \"A\":\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \uc785\ub825\uc744 \ubc1b\uc2b5\ub2c8\ub2e4.\n    s = stdin\n    # \ube48 \ubb38\uc790\uc5f4\uc774\ub77c\uba74, \ubc18\ud658\ud569\ub2c8\ub2e4.\n    if s == '':\n        return ''\n\n    # \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n    a_index = -1\n    for i in range(len(s)):\n        if s[i] == 'A':\n            a_index = i\n\n    # \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n    if a_index == -1:\n        return ''\n\n    # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n    if a_index == len(s) - 1:\n        return ''\n\n    # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n    a_index = a_index + 1\n    while a_index < len(s):\n        # \uac01\uac01\uc758 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n        if s[a_index] == 'A':\n            # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n            if a_index == len(s) - 1:\n                return ''\n\n            # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n            if a_index == len(s) - 2:\n                return ''\n            else:\n                # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud558\uace0, \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n                a_index = a_index + 1\n                while a_index < len(s):\n                    # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n                    if a_index == len(s) - 2:\n                        return ''\n                    # \uac01\uac01\uc758 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n                    if s[a_index] == 'A':\n                        # \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n                        if a_index == len(s) - 3:\n                            return ''\n                        # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n                        if a_index == len(s) - 4:\n                            return ''\n                        else:\n                            # \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud558\uace0, \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n                            a_index = a_index + 1\n                            while a_index < len(s):\n                                if s[a_index] == 'A':\n                                    # \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n                                    if a_index == len(s) - 4:\n                                        return ''\n                                    # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c, \ubc18\ud658\ud569\ub2c8\ub2e4.\n                                    if a_index == len(s) - 5:\n                                        return ''\n                                    else:\n                                        # \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud558\uace0, \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 A\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\ub97c \uad6c\ud569\ub2c8\ub2e4.\n                                        a_index = a_index + 1\n                                        while a_index < len(s):\n                                            if s[a"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    if not stdin:\n        return stdin\n\n    stdin_list = stdin.split()\n\n    a = int(stdin_list[0])\n    b = int(stdin_list[1])\n    c = int(stdin_list[2])\n\n    # list storing A and B station locations\n    list_a = [a, a + 1, a + 2]\n    list_b = [b, b + 1, b + 2]\n\n    # print(a)\n    # print(b)\n    # print(c)\n    # print(list_a)\n    # print(list_b)\n    # print(list_a[0] < list_b[0])\n\n    if not (c in list_a and c in list_b):\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    if (a == \"A\" and b == \"A\" and c == \"A\") or (a == \"B\" and b == \"B\" and c == \"B\"):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    company = [stdin[i] for i in range(3)]\n    company = set(company)\n    if company == {'A', 'B'}:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    company = {\"A\": 1, \"B\": 2}\n    for i in range(len(lst)):\n        if lst[i] == \"A\":\n            lst[i] = company[\"A\"]\n        elif lst[i] == \"B\":\n            lst[i] = company[\"B\"]\n    if lst[0] == lst[2]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_rainy_days = 0\n    rainy_days = 0\n    for index, letter in enumerate(stdin):\n        if index % 3 == 0:\n            if letter == \"R\":\n                rainy_days += 1\n            else:\n                if rainy_days >= max_rainy_days:\n                    max_rainy_days = rainy_days\n                rainy_days = 0\n    if rainy_days >= max_rainy_days:\n        max_rainy_days = rainy_days\n    return max_rainy_days"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    record = stdin[0]\n    max_rain = 1\n    count_rain = 1\n    for i in range(1, len(stdin)):\n        if stdin[i] == record:\n            count_rain += 1\n        else:\n            if stdin[i] == 'R':\n                count_rain = 1\n            max_rain = max(max_rain, count_rain)\n            count_rain = 1\n        record = stdin[i]\n\n    return str(max_rain)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_rain_days = 0\n    previous_rain = False\n    for day in stdin:\n        if day == \"R\":\n            previous_rain = True\n        else:\n            previous_rain = False\n        if previous_rain == True:\n            max_rain_days += 1\n    return max_rain_days"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input given from standard input\n    :return: max number of consecutive rainy days\n    \"\"\"\n    days = stdin.split()\n    if len(days)!= 3:\n        raise ValueError('Incorrect input')\n\n    rain_count = 0\n    current_day = 0\n    for day in days:\n        if day == 'R':\n            rain_count += 1\n        else:\n            current_day += 1\n            if rain_count >= current_day:\n                rain_count = 0\n    if rain_count >= current_day:\n        return str(current_day)\n    else:\n        return '0'\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    current_max = 0\n    num_rainy_days = 0\n    for i in range(3):\n        if stdin[i] == \"R\":\n            num_rainy_days += 1\n        else:\n            if num_rainy_days > current_max:\n                current_max = num_rainy_days\n            num_rainy_days = 0\n    if num_rainy_days > current_max:\n        return str(num_rainy_days)\n    else:\n        return str(current_max)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    start = 0\n    for i in range(3):\n        if stdin[i] == \"R\":\n            start = i + 1\n        else:\n            if answer == 0:\n                answer = 1\n            elif answer == 1:\n                answer = 0\n    return str(answer)"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rain_days_count = 0\n    for char in stdin:\n        if char == 'R':\n            rain_days_count += 1\n        else:\n            rain_days_count = 0\n        if rain_days_count >= 3:\n            return 'The maximum number of consecutive rainy days in the period is {}'.format(rain_days_count)\n    return 'The maximum number of consecutive rainy days in the period is {}'.format(rain_days_count)"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)-2):\n        if stdin[i] == 'R' and stdin[i+1] == 'R' and stdin[i+2] == 'R':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rain = 0\n    last_rain = 0\n    for char in stdin:\n        if char == 'R':\n            rain += 1\n            last_rain = rain\n        else:\n            rain = 0\n        if rain > last_rain:\n            last_rain = rain\n    return last_rain\n\nsolution(input())\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    counter = 0\n    i = 0\n    j = 0\n    while i < len(stdin) and j < len(stdin):\n        if stdin[i] == \"R\":\n            i += 1\n        else:\n            counter += 1\n            i += 1\n            j += 1\n    return str(counter)\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split(\" \")\n    a, b, c = x, y, z\n    for i in range(len(x)):\n        if x[i] > y[i]:\n            x, y = y, x\n        elif y[i] > z[i]:\n            y, z = z, y\n    print(a, b, c)\n    return a, b, c\n\nsolution(\"1 2 3\")\n\"\"\"\nfrom collections import Counter\n\nx, y, z = map(int, input().split())\n\ncnt = Counter(str(x) + str(y) + str(z))\nprint(cnt['1'], cnt['2'], cnt['3'])\n\nx, y, z = map(int, input().split())\ntmp = x\nx, y, z = y, z, tmp\n\nprint(x, y, z)\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a[0], a[1], a[2] = a[1], a[2], a[0]\n    a[0], a[1], a[2] = a[2], a[0], a[1]\n    return str(a[0]) + \" \" + str(a[1]) + \" \" + str(a[2])\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.strip().split(\" \")\n    a = list(map(int, a.split(\" \")))\n    b = list(map(int, b.split(\" \")))\n    c = list(map(int, c.split(\" \")))\n    swap(a, b)\n    swap(a, c)\n    swap(b, c)\n    return \" \".join(map(str, a)) + \" \" + \" \".join(map(str, b)) + \" \" + \" \".join(map(str, c))\n\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A, B, C = map(int, [A, B, C])\n    swap_1 = sorted([A, B, C])\n    swap_2 = sorted([A, C, B])\n    return''.join(map(str, [swap_1[0], swap_1[1], swap_1[2]])) +'' +''.join(map(str, [swap_2[0], swap_2[1], swap_2[2]]))\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = int(stdin[0])\n    y = int(stdin[1])\n    z = int(stdin[2])\n    swap(x,y,z)\n    swap(x,z,y)\n    swap(y,z,x)\n    print(x,y,z)\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split()\n    box_a = list(map(int, a.split(' ')))\n    box_b = list(map(int, b.split(' ')))\n    box_c = list(map(int, c.split(' ')))\n    box_a, box_b, box_c = swap(box_a,box_b), swap(box_a,box_c), swap(box_b,box_c)\n    return''.join(map(str,box_a)) +'' +''.join(map(str,box_b)) +'' +''.join(map(str,box_c))\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = stdin.split()\n    x = int(X)\n    y = int(Y)\n    z = int(Z)\n    # Swap contents of A,B,C\n    A = x\n    x = y\n    y = z\n    z = A\n    # Swap contents of A,B,C\n    B = x\n    x = y\n    y = z\n    z = B\n    # Swap contents of A,B,C\n    C = x\n    x = y\n    y = z\n    z = C\n    return f\"{x} {y} {z}\"\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\""
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return f\"{c}{a}{b}\\n{a}{c}{b}\\n{b}{a}{c}\\n{b}{c}{a}\\n{c}{a}{b}\\n{c}{b}{a}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    a[0],a[1],a[2] = a[1],a[2],a[0]\n    a[0],a[1],a[2] = a[0],a[2],a[1]\n    a[0],a[1],a[2] = a[0],a[1],a[2]\n    return''.join(map(str,a))\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 13 or A == 14:\n        if A >= 6:\n            if A % 2!= 0:\n                return \"Free\"\n        elif A < 6:\n            return f\"{(B/2)}\"\n    elif A < 12:\n        if A % 2!= 0:\n            return f\"{(B/2)}\"\n    return f\"{(B)}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 13:\n        if A % 2 == 0 or A == 5:\n            return f\"{A * B}\"\n        else:\n            return f\"{A * (B / 2)} {A * (B / 2)}\"\n    return f\"{A * (B / 2)}\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if A > 13:\n        if A%2==0:\n            ans = (A*B)//2\n            print(ans)\n        else:\n            print(B)\n    elif A < 13:\n        if A%2==0:\n            ans = (A*B)//2\n            print(ans)\n        else:\n            print(B)\n    elif A == 13:\n        if A%2==0:\n            ans = (A*B)//2\n            print(ans)\n        else:\n            print(B)\n    return \"\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        return A * (B // 2)\n    elif A <= 6:\n        return A * (B // 2) + A * (B // 2)\n    else:\n        return A * (B // 2)"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 13 and (A % 2 == 0 or A <= 6) and not (A > 5 and A % 2 == 0):\n        return \"%.2f\" % (A * (B/2))\n    elif A > 13 and (A % 2 == 0 or A <= 6) and A >= 5:\n        return \"%.2f\" % (A * (B/2))\n    else:\n        return \"%.2f\" % (A * (B/2))"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, b):\n        if (a % 2 == 0) and (b % 2 == 0):\n            return True\n        return False\n\n    a, b = map(int, stdin.split())\n    if check(a, b):\n        return a * b / 2\n    return a * b"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A <= 13 and A >= 6 and A % 2 == 0 or A > 6 and A < 13 and A % 2 == 1:\n        return str(int(B / 2))\n    else:\n        return str(B)\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split())\n    if A==0:\n        print(0)\n    elif A<13:\n        print(A*(B//2))\n    elif A<6 or A>12:\n        print((A*(B//2))+A)\n    else:\n        print(A*(B//2))\n    return \"\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    if a < 13:\n        return str(int(b/2))\n    if a >= 13 and a <= 25:\n        return str(b)\n    else:\n        return str(int(b/2))\n    \n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13 and A <= 17 and A % 2!= 0:\n        return str(int((B/2) if A > 6 else 0))\n    return str(B)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    int_in_takahashi = 0\n    for i in range(0, len(s)):\n        if s[i] == '+':\n            int_in_takahashi += 1\n        else:\n            int_in_takahashi -= 1\n    return str(int_in_takahashi)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_brain = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '+':\n            takahashi_brain += 1\n        elif stdin[i] == '-':\n            takahashi_brain -= 1\n    return str(takahashi_brain)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    for i in range(len(input_list)):\n        input_list[i] = int(input_list[i])\n    return str(sum(input_list))"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    result = int(stdin[0])\n    for i in range(1, 4):\n        if stdin[i] == '+':\n            result += 1\n        elif stdin[i] == '-':\n            result -= 1\n    return str(result)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    number = 0\n    for i in range(4):\n        if stdin[i] == \"+\":\n            number += 1\n        elif stdin[i] == \"-\":\n            number -= 1\n    return str(number)\n    \n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.strip()\n    i = 0\n    k = 0\n    if len(s) == 1:\n        return '0'\n    while i < len(s):\n        if s[i] == '+':\n            k += 1\n        if s[i] == '-':\n            k -= 1\n        i += 1\n    return str(k)\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    global score\n    score = 0\n    #return sum([int(c) for c in stdin])\n    if '-' in stdin:\n        score += sum([int(c) for c in stdin])\n    else:\n        score += int(stdin)\n    #print(score)\n    return str(score)\n\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\"+-++\")\nsolution(\""
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return str(int(stdin[0]) + int(stdin[1]) + int(stdin[2]) + int(stdin[3]))\nprint(solution(\"+-++\"))\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = stdin.split(\"+-\")\n    a = takahashi[0]\n    b = takahashi[1]\n    a = a[::-1]\n    c = int(a)\n    d = int(b)\n    e = c + d\n    return str(e)\n\na = solution(\"+-++\")\nprint(a)\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n\n    if int(date[0]) > 3 or int(date[1]) > 1 or int(date[2]) > 12:\n        return 'TBD'\n\n    if int(date[0]) <= 3 and int(date[1]) <= 12:\n        return 'Heisei'\n\n    if int(date[0]) > 3 and int(date[1]) <= 12:\n        return 'TBD'\n\n    if int(date[0]) == 3 and int(date[1]) == 12:\n        return 'Heisei'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n\n    if date[2] < \"04\" or date[2] > \"12\":\n        return \"TBD\"\n\n    if date[1] < \"01\" or date[1] > \"12\":\n        return \"TBD\"\n\n    if date[0] < \"2018\" or date[0] > \"2020\":\n        return \"TBD\"\n\n    return \"Heisei\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split()\n    if int(year) > 2019 or int(month) > 3 or int(day) > 30:\n        print(\"TBD\")\n    else:\n        print(\"Heisei\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    day, month, year = stdin.split(\"/\")\n    month = int(month)\n    if month > 3 and month < 10:\n        month = \"0\" + str(month)\n    if month == \"04\" and day == \"30\":\n        return \"Heisei\"\n    return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a string S representing a valid date in the yyyy/mm/dd format, return Heisei if the date represented by S is not later than April 30, 2019, and print TBD otherwise.\n    '''\n\n    # your code goes here\n\n    if stdin == \"31/12/2019\":\n        return \"TBD\"\n\n    if stdin >= \"2019/04/30\":\n        return \"Heisei\"\n\n    return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return True if the given date is later than April 30, 2019 else return False.\n    \"\"\"\n    month = int(stdin.split()[0].split('/')[0])\n    day = int(stdin.split()[0].split('/')[1])\n    year = int(stdin.split()[0].split('/')[2])\n    if month < 4 or month > 9:\n        return 'TBD'\n    elif day > 30 or (month == 4 and day > 19) or (month == 6 and day > 20) or (month == 9 and day > 21):\n        return 'TBD'\n    elif year > 2019:\n        return 'TBD'\n    else:\n        return 'Heisei'"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split()\n    if int(date[2]) >= 4 and int(date[2]) <= 31 and int(date[1]) >= 1 and int(date[1]) <= 12 and int(date[0]) >= 2019 and int(date[0]) <= 2020:\n        return 'Heisei'\n    else:\n        return 'TBD'\n\nsolution(input())\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    y, m, d = stdin.split(\"/\")\n    if d == \"30\" and m == \"04\":\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin\n    year, month, day = date.split(\"/\")\n\n    if int(month) > 3 or int(month) <= 0 or int(day) > 31 or int(day) <= 0:\n        return \"TBD\"\n\n    if int(month) == 4 and int(day) >= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n\nsolution(input())\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"/\")\n    if int(s[0]) > 3:\n        return \"TBD\"\n    if int(s[0]) < 4:\n        return \"Heisei\"\n    if int(s[1]) > 3:\n        return \"TBD\"\n    if int(s[1]) < 1:\n        return \"Heisei\"\n    if int(s[2]) > 12:\n        return \"TBD\"\n    if int(s[2]) < 1:\n        return \"Heisei\"\n    return \"Heisei\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # create a dictionary with the topics as key and the number of problems as value\n    topic_dict = {}\n    # create a list with topics as key and the number of problems as value\n    topic_list = []\n    # create a dictionary with the topics as key and the number of problems as value\n    topic_dict_reverse = {}\n    # create a list with topics as key and the number of problems as value\n    topic_list_reverse = []\n\n    # create a list of topics\n    for i in range(n):\n        # if this topic has not been seen before\n        if a[i] not in topic_dict:\n            # add it to the dictionary and assign it the number of problems\n            topic_dict[a[i]] = 1\n            # append this topic to the topic list\n            topic_list.append(a[i])\n            # add this topic to the dictionary with the number of problems\n            topic_dict_reverse[a[i]] = 1\n            # add this topic to the topic list with the number of problems\n            topic_list_reverse.append(a[i])\n        else:\n            # if this topic has been seen before\n            topic_dict[a[i]] += 1\n            # append this topic to the topic list\n            topic_list.append(a[i])\n            # add this topic to the dictionary with the number of problems\n            topic_dict_reverse[a[i]] += 1\n            # add this topic to the topic list with the number of problems\n            topic_list_reverse.append(a[i])\n\n    # sort the topic list by their number of problems\n    topic_list.sort(key=lambda x: topic_dict_reverse[x])\n    # sort the topic list in reverse by their number of problems\n    topic_list_reverse.sort(reverse=True, key=lambda x: topic_dict[x])\n\n    #print(topic_list)\n    #print(topic_list_reverse)\n    #print(topic_dict)\n    #print(topic_dict_reverse)\n\n    # get the number of problems in each topic\n    n_problem = []\n    for i in range(len(topic_list)):\n        n_problem.append(topic_dict[topic_list[i]])\n\n    # get the number of problems in each topic\n    n_problem_reverse = []\n    for i in range(len(topic_list_reverse)):\n        n_problem_reverse.append(topic_dict[topic_list_reverse[i]])\n\n    #print(n_problem)\n    #print(n_problem_reverse)\n\n    # we need to check if the number of problems in each topic is equal to 2 if so return the number of problems\n    if max(n_problem) == 2 and max(n_problem_reverse) == 2:\n        return sum(n_problem)\n    # if the number of problems in each topic is not equal to 2 then we need to find a way to make the number of problems of the set of problems equal to 2 and return it\n    # we can use the n_problem_reverse list to figure out which topic needs to be added to the set of problems\n    else:\n        # create a list that will contain the number of problems of each topic\n        n_problem_list = []\n        # create a variable to store the number of problems in the set of problems\n        n_problem_set = 0\n        # create a variable to check if the number of problems in the set of problems is 2\n        n_problem_set_2 = False\n        # create a variable to check if the number of problems in the set of problems is 1\n        n_problem_set_1 = False\n        # check if the number of problems in the set of problems is 2\n        for i in range(len(n_problem_reverse)):\n            # if the number of problems in the set of problems is 2\n            if n_problem_reverse[i] == 2:\n                # add the number of problems in the set of problems to the variable n_problem_set\n                n_problem_set += n_problem[i]\n                # if the variable n_problem_set_2 has not been set yet\n                if not n_problem_set_2:\n                    # set the variable n_problem_set_2\n                    n_problem_set_2 = True\n                # if the variable n_problem_set_1 has not been set yet\n                if not n_problem_set_1:\n                    # set the variable n_problem_set_1\n                    n_problem_set_1 = True\n            # if the number of problems in the set of problems is 1\n            elif n_problem_reverse[i] == 1:\n                # if the variable n_problem_set_2 has not been set yet\n                if not n_problem_set_2:\n                    # set the variable n_problem_set_2\n                    n_problem_set_2 = True\n        # if the number of problems in the set of problems is 2\n        if n_problem_set_2:\n            # add the number of problems in the set of problems to the variable n_problem_set\n            n_problem_set += n_problem_set_2\n        # if the number of problems in the set of problems is 1\n        elif n_problem_set_1:\n            # add the number of problems in the set of problems to the variable n_problem_set\n            n_problem_set += n_problem_set_1\n        # print(n_problem_set)\n        return n_problem_set\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(solution2(n, a))\n\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  i = 1\n  ans = 0\n  a = []\n  while(i < n + 1):\n    a.append(i)\n    i += 2\n    if len(a) >= 2 and a[-2] == a[-1]:\n      i = a[-1]\n      a = a[:-2]\n    if len(a) >= 2 and a[-2] - a[-1] == 2:\n      ans += 2\n      a = a[:-2]\n    ans += 1\n  print(ans)\n  return\nsolution(input())\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    a.sort()\n    for i in range(1, len(a)):\n        if (a[i] - a[i - 1]) % 2 == 0:\n            count += 2\n    return str(count)\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    cnt = 0\n    res = 0\n    i = 0\n    while cnt < n:\n        if arr[i] == 0:\n            i += 2\n            cnt += 1\n            res = max(res, 2*cnt)\n        else:\n            if arr[i+1] == arr[i]:\n                i += 2\n                cnt += 1\n                res = max(res, 2*cnt)\n            else:\n                i += 1\n                cnt = 0\n    return res\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = list(map(int, stdin.split()))\n    \n    # count of problems per topics\n    topic_counts = defaultdict(int)\n    \n    max_count = 0\n    max_topic = 0\n    \n    for i in range(n):\n        problem_topic = problems[i]\n        if topic_counts[problem_topic] > max_count:\n            max_topic = problem_topic\n            max_count = topic_counts[problem_topic]\n            \n        topic_counts[problem_topic] += 2\n        if problem_topic!= max_topic:\n            topic_counts[max_topic] -= 2\n    \n    print(max_count)\n    return max_count\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = stdin.split(\"\\n\")[0]\n    x = x.split(\" \")\n    x = list(map(int, x))\n    n = int(x[0])\n    y = x[1:]\n    print(n)\n    print(y)\n    y = sorted(y)\n    print(y)\n\n    if n == 0:\n        return \"\"\n\n    a = []\n    for i in range(n):\n        a.append(y[i])\n        a.append(y[i])\n\n    print(a)\n    a = sorted(a)\n    print(a)\n\n    max = n // 2\n    j = 0\n\n    while j < n:\n        count = 0\n        for i in range(j, j + max + 1):\n            if i < n:\n                count += 1\n        if count == max + 1:\n            break\n        j += 1\n\n    return (j + 1)"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return 0"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = map(int, stdin[0].split())\n    conversations = list(map(int, stdin[1].split()))\n    n_conversations = 0\n    all_messages = []\n    messages_sorted_by_time = []\n    while conversations and n_conversations < k:\n        if conversations.pop(0) not in all_messages:\n            all_messages.append(conversations.pop(0))\n            n_conversations += 1\n        else:\n            messages_sorted_by_time.append(all_messages.pop(0))\n    print(n_conversations)\n    return all_messages\n\nsolution('2 2')\n\nsolution('10 4')\n\nsolution('7 2')"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    conversations = list(map(int, stdin.split()))\n\n    while k > 0 and conversations:\n        friend = conversations.pop()\n        if k > 1:\n            conversations.insert(0, conversations.pop())\n        k -= 1\n    \n    return str(len(conversations))\n\n\nsolution('10 4')\n\nsolution('10 10')\n\nsolution('4 5')\n\nsolution('3 2')\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_msg(id, n):\n        #print(id, n)\n        cnt = 0\n        for i in range(n):\n            if i+1 == n:\n                return id + 1, 0\n            if id == i+1:\n                cnt += 1\n        return id + 1, cnt\n\n    n, k = map(int, stdin.split())\n    friends = []\n    for i in range(1, n+1):\n        id_i, cnt = get_next_msg(i, n)\n        while cnt < k:\n            id_i, cnt = get_next_msg(id_i, n)\n        friends.append(id_i)\n    print(friends)\n    return str(len(friends))\n\nsolution(\"7 2\")\nsolution(\"10 4\")"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    messages = {}\n    conversations = []\n    for i in range(int(stdin[0])):\n        messages[int(stdin[i * 2 + 1])] = stdin[i * 2 + 2]\n\n    for i in range(1, int(stdin[0])):\n        curr = []\n        for j in range(i):\n            curr.append(messages[int(stdin[j * 2 + 1])])\n        conversations.append(curr)\n    ans = len(conversations)\n    for i in range(len(conversations) - 1, -1, -1):\n        if conversations[i][-1] == conversations[i - 1][0]:\n            del conversations[i]\n            ans -= 1\n    return str(ans)\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    friend_ids = list(map(int, lines[1].split()))\n    id_list = friend_ids.copy()\n    id_list.sort()\n    c = 0\n    new_friend_ids = []\n    friend_id_map = {}\n    while len(id_list) > 0:\n        new_friend_ids.append(id_list.pop(0))\n        friend_id_map[new_friend_ids[c]] = c\n        c += 1\n    i = 0\n    while i < n:\n        m = 0\n        while i + m < n and i + m < k:\n            if friend_id_map.get(friend_ids[i + m]) is None:\n                m += 1\n            else:\n                new_friend_ids.append(friend_ids[i + m])\n                friend_id_map[friend_ids[i + m]] = c\n                c += 1\n                i += 1\n        if i + m < n:\n            while i + m < n and i + m < k:\n                new_friend_ids.append(friend_ids[i + m])\n                friend_id_map[friend_ids[i + m]] = c\n                c += 1\n                i += 1\n        else:\n            while i + m < n:\n                new_friend_ids.append(friend_ids[i + m])\n                friend_id_map[friend_ids[i + m]] = c\n                c += 1\n                i += 1\n        i += 1\n    return str(len(new_friend_ids)) + '\\n' +''.join(str(friend_id) for friend_id in new_friend_ids)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    ids = [int(i) for i in stdin.strip().split()]\n    d = {}\n    for i in ids:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    # print(d)\n    c = max(d.values())\n    d = {k: v for k, v in d.items() if v == c}\n    l = list(d.keys())\n    l.sort()\n    print(len(l))\n    for i in l:\n        print(i, end=\" \")\n    return"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_split = stdin.split('\\n')\n    number_of_messages, number_of_conversations = map(int, input_split[0].split(' '))\n    messages = input_split[1].split(' ')\n    \n    print(number_of_conversations)\n    print(number_of_messages)\n    \n    print(len(messages))\n    if number_of_messages > number_of_conversations:\n        return(\"0\")\n    else:\n        conversations_list = []\n        for i in messages:\n            conversations_list.append(int(i))\n        \n        #print(conversations_list)\n        conversations_list.sort()\n        #print(conversations_list)\n        conversations_list = conversations_list[:number_of_conversations]\n        #print(conversations_list)\n        \n        conversations_list = conversations_list[::-1]\n        \n        #print(conversations_list)\n        \n        conversations_list = conversations_list[:number_of_messages]\n        #print(conversations_list)\n        \n        \n        conversations_list = conversations_list[::-1]\n        #print(conversations_list)\n        \n        conversations_list = [0] + conversations_list\n        #print(conversations_list)\n        \n        #print(conversations_list)\n        \n        conversations_list = conversations_list[:number_of_conversations]\n        #print(conversations_list)\n        \n        conversations_list = list(map(str, conversations_list))\n        #print(conversations_list)\n        \n        \n        conversations_list.sort()\n        #print(conversations_list)\n        \n        conversations_list = list(map(str, conversations_list))\n        #print(conversations_list)\n        \n        conversations_list = str(conversations_list)\n        #print(conversations_list)\n        \n        return(conversations_list)\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    ids = list(map(int, input().split()))\n\n    id_2_conversation = {k: v for k, v in enumerate(ids)}\n    conversations = []\n    conversations_left = []\n    conversations_right = []\n    conversations_left.append(conversation)\n    for i in range(k):\n        conversations_right.append(id_2_conversation[i])\n\n    while len(conversations_left)!= 0:\n        for i in range(len(conversations_left)):\n            conversations_right.append(id_2_conversation[i])\n\n        conversations_left = conversations_left[1:]\n        conversations.extend(conversations_left)\n\n    for i in range(len(conversations_right)):\n        conversations_left.append(conversations_right[i])\n\n    return str(len(conversations)) + '\\n' +''.join(map(str, conversations))\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    ids = list(int(x) for x in stdin.split()[1:])\n    msgs = 0\n    cnt = 0\n    while msgs < n:\n        msg = ids.pop(0)\n        if msgs < n:\n            ids.append(msg)\n            msgs += 1\n        else:\n            cnt += 1\n            if k > 0:\n                k -= 1\n                ids.pop(0)\n                msgs -= 1\n    return str(cnt) + \" \" + \" \".join([str(x) for x in ids])\n\nprint(solution(input()))"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = sorted(map(int, stdin.split()))\n    conversations = []\n    for m in messages:\n        while len(conversations) and conversations[-1] <= m:\n            conversations.pop()\n        if len(conversations):\n            conversations.pop()\n        conversations.append(m)\n    return len(conversations)"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_digit_powers(number):\n        powers = []\n        while number > 0:\n            number, digit = divmod(number, 2)\n            powers.append(digit)\n        return powers\n\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    results = []\n\n    for query in range(q):\n        b = int(input())\n        powers = get_digit_powers(b)\n        powers = sorted(powers)\n        results.append(powers.index(1) + 1 if powers.count(1) == 1 else -1)\n\n    return '\\n'.join(map(str, results))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, q = map(int, input().split())\n    coins = list(map(int, stdin.split()))\n    # print(coins)\n    queries = []\n    for _ in range(q):\n        queries.append(int(input()))\n\n    def rec(idx, total, cur):\n        if idx == n:\n            if total == 0:\n                return 1\n            else:\n                return 0\n        else:\n            # print(idx, total, cur)\n            ans = 0\n            # print(idx, total, cur)\n            # print('1')\n            for i in range(idx, n):\n                # print(idx, total, cur)\n                # print('2')\n                if cur + coins[i] <= total:\n                    # print(idx, total, cur)\n                    # print('3')\n                    cur += coins[i]\n                    # print(idx, total, cur)\n                    ans = max(ans, rec(idx+1, total, cur))\n                    # print('4')\n                    cur -= coins[i]\n                    # print(idx, total, cur)\n            # print(idx, total, cur)\n            return ans\n    return rec(0, 0, 0)"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = (int(i) for i in stdin.split())\n    coins = sorted(map(int, stdin.split()))\n\n    def get_min_coins(value: int) -> int:\n        if value == 0:\n            return 0\n        return min((1 + get_min_coins(value - coin)) for coin in coins)\n\n    for i in range(q):\n        ans = -1 if not get_min_coins(int(stdin.split()[2 + i])) else get_min_coins(int(stdin.split()[2 + i]))\n        print(ans)\n    return ''"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    results = []\n    for _ in range(q):\n        b = int(stdin.split()[1])\n        ans = -1\n        min_val = 10**10\n        for coin in coins:\n            if coin < min_val:\n                min_val = coin\n            else:\n                if coin % min_val == 0:\n                    continue\n                ans = min(ans, (coin // min_val))\n        results.append(ans)\n    for i in results:\n        print(i)\n    return ''.join(results)"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    arr = []\n    for i in range(q):\n        arr.append(int(stdin.split()[i]))\n    ans = []\n    for i in range(q):\n        ans.append(-1)\n    return str(solution_dp(n, arr, coins, 0, 0, ans))\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    ans = [0] * q\n    num = 2\n    for i in range(n):\n        num *= 2\n        ans[i] = num\n    for i in range(q):\n        b = int(stdin)\n        if b in ans:\n            print(ans.index(b))\n        else:\n            print(-1)\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    ans = [-1] * q\n    coins = sorted(coins)\n\n    def solve(index, total):\n        if index >= len(coins):\n            return total\n        if total <= 0:\n            return -1\n        if total == coins[index]:\n            ans[index] = total\n            return total\n        if total > coins[index]:\n            ans[index] = solve(index + 1, total - coins[index])\n            if ans[index]!= -1:\n                return ans[index]\n        ans[index] = solve(index + 1, total)\n        return ans[index]\n\n    for i in range(q):\n        print(solve(0, coins[i]))\n\n    return '\\n'.join(map(str, ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = []\n    for i in range(q):\n        x = int(stdin)\n        if x % 2:\n            res.append(-1)\n        else:\n            j = 0\n            while x > a[j]:\n                j += 1\n            res.append(j)\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n = int(n ** (1 / 2))\n\n    m = int(n / 2)\n    dp = [[[-1 for _ in range(n)] for _ in range(m)] for _ in range(q + 1)]\n    for i in range(n):\n        for j in range(m):\n            if a[i] == 2 ** j:\n                dp[0][j][i] = 1\n    for j in range(m):\n        dp[0][j][0] = 0\n\n    for j in range(1, q + 1):\n        for i in range(n):\n            for l in range(n):\n                if dp[j - 1][l][i] == -1:\n                    continue\n                dp[j][l][i] = max(dp[j][l][i], dp[j - 1][l][i] + 1)\n                for k in range(m):\n                    if dp[j - 1][l][i] + 1 == dp[j][k][i]:\n                        dp[j][l][i] = max(dp[j][l][i], dp[j - 1][l][i] + 1 + dp[k][l][i] + 1)\n\n    result = []\n    for j in range(n):\n        result.append(dp[q][j][0])\n    return \" \".join([str(i) for i in result])\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    d = {}\n\n    for coin in coins:\n        d[coin] = d.get(coin, 0) + 1\n\n    ans = [0] * q\n    dp = {}\n    for i in range(2, 10):\n        dp[i] = {}\n    dp[1][2] = 1\n    dp[2][1] = 1\n\n    for i in range(2, 10):\n        dp[i][i] = 1\n\n    for i in range(3, 10):\n        for j in range(2, 10):\n            if d[i] > 1:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    for i in range(3, 10):\n        for j in range(2, 10):\n            for k in range(2, 10):\n                if d[i] > 1:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][k], dp[i][k]) + dp[i][j - 1])\n\n    for i in range(q):\n        b = int(stdin.split()[i + 1])\n        ans[i] = dp[b][b] if b in dp else -1\n\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, cards, favs = (int(_) for _ in stdin.split())\n    cards = sorted([int(_) for _ in stdin.split()[1:]])\n    favs = sorted([int(_) for _ in stdin.split()[2:]])\n\n    # we'll be comparing happiness to the last line\n    return str(max(sum(happiness(cards, favs[i]) for i in range(k)), 0))\n\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n + k) = O(n + n + k)\n    Space: O(k)\n    \"\"\"\n    n, k = map(int, input().split())\n    cards = list(map(int, stdin.split()))\n    fav_nums = list(map(int, input().split()))\n    total_joy = 0\n    for i in range(n):\n        total_joy += sum([1 if fav_nums[i] == cards[j] else 0 for j in range(n)])\n    # print(total_joy)\n    # print(total_joy == k)\n    if total_joy == k:\n        return \"0\"\n    ans = sum(fav_nums)\n    for i in range(n):\n        if fav_nums[i] in cards:\n            ans -= 1\n        else:\n            continue\n        for j in range(i + 1, n):\n            if fav_nums[j] in cards:\n                ans -= 1\n            else:\n                continue\n            for k in range(j + 1, n):\n                if fav_nums[k] in cards:\n                    ans -= 1\n                else:\n                    continue\n                for l in range(k + 1, n):\n                    if fav_nums[l] in cards:\n                        ans -= 1\n                    else:\n                        continue\n                    for m in range(l + 1, n):\n                        if fav_nums[m] in cards:\n                            ans -= 1\n                        else:\n                            continue\n                        for o in range(m + 1, n):\n                            if fav_nums[o] in cards:\n                                ans -= 1\n                            else:\n                                continue\n                            for p in range(o + 1, n):\n                                if fav_nums[p] in cards:\n                                    ans -= 1\n                                else:\n                                    continue\n                                for q in range(p + 1, n):\n                                    if fav_nums[q] in cards:\n                                        ans -= 1\n                                    else:\n                                        continue\n                                    for r in range(q + 1, n):\n                                        if fav_nums[r] in cards:\n                                            ans -= 1\n                                        else:\n                                            continue\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cards = list(map(int, stdin.strip().split()))\n\n    # find a number that satisfies\n    #     c1 is <= f1\n    #     c1 is >= f1\n    #     c1 is > f2\n    #     c1 is < f2\n    #    ...\n\n    return 0\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    favs = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    ans = 0\n    if k == 1:\n        return 0\n    for c in cards:\n        if favs[c-1] in range(2, 10):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  cards = list(map(int, stdin.split()))\n  players = list(map(int, stdin.split()))\n  ans = 0\n  for i in range(k * n):\n    if players[i % n] in cards:\n      cards.remove(players[i % n])\n  if not cards:\n    return str(0)\n  for num in cards:\n    ans += sum(x == num for x in players)\n  return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    fav_nums = list(map(int, stdin.split()))\n\n    max_joy = 0\n    for i, c in enumerate(cards):\n        for j in range(k):\n            if fav_nums[i] == j:\n                max_joy += c * j\n\n    return str(max_joy)\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    cards = sorted([int(x) for x in stdin.split()[1:]])\n    players = [[0] * k for _ in range(n)]\n    for card in cards:\n        for player in range(n):\n            if cards[player] == card:\n                players[player][card - 1] += 1\n                break\n    return str(max([sum(p) for p in players]))\n\n\nsolution(\"3 3\")\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    cards = list(map(int, stdin[2]))\n    f = list(map(int, stdin[3]))\n    h = list(map(int, stdin[4]))\n\n    result = 0\n    for f_i in f:\n        t = 0\n        for i in range(n):\n            if cards[i] == f_i:\n                t += 1\n        if t > 0:\n            result = max(result, h[t - 1])\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    favs = list(map(int, stdin.split()))\n    joy_level = {}\n    for i in range(k):\n        joy_level[i + 1] = 0\n        joy_level[favs[i]] = k - i\n    total_joy = 0\n    for card in cards:\n        if joy_level[card] > 0:\n            total_joy += joy_level[card]\n            joy_level[card] = 0\n    return total_joy\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()[1:]))\n    fav = list(map(int, stdin.split()[2:]))\n\n    max_joy = 0\n    for comb in combinations(cards, k):\n        if all(f in comb for f in fav):\n            joy = sum([c in comb for c in fav])\n            max_joy = max(max_joy, joy)\n    return str(max_joy)\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(int, a))\n    n = len(a)\n    k = 0\n    a.sort()\n    m = len(a)\n    while m - 1!= k:\n        m = len(a)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if abs(a[i] - a[j]) == 1:\n                    a[i] = a[i] + abs(a[i] - a[j])\n                    a[j] = a[j] - abs(a[i] - a[j])\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    def plus(arr):\n        for i in range(n-1):\n            if arr[i] == arr[i+1]:\n                arr[i] += arr[i+1]\n                arr[i+1] = 0\n    def minus(arr):\n        for i in range(n-1):\n            if arr[i] == arr[i+1]:\n                arr[i] -= arr[i+1]\n                arr[i+1] = 0\n    plus(arr)\n    minus(arr)\n    print(sum(map(abs, arr)))\n    print(*arr, sep=\" \")\n    return '0'\n    \n    \n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    k = 0\n    while a!= sorted(a):\n        k += 1\n        a = sorted(a)\n        for i in range(1, len(a)):\n            if abs(a[i] - a[i - 1]) > 1:\n                a[i - 1] += abs(a[i] - a[i - 1])\n                a[i] -= abs(a[i] - a[i - 1])\n    print(k)\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    ans = 0\n    a_s = set(a)\n    if len(a_s) == 1:\n        return 0\n    \n    # ans = max(a_s) - min(a_s)\n    \n    \n    # print(a)\n    # print(max(a), min(a))\n    \n    # print(len(a_s))\n    if len(a_s) == 2:\n        if max(a_s) - min(a_s) > 1:\n            # print('d')\n            ans = 2\n            \n        return ans\n    \n    # print(a)\n    \n    def test(x, y):\n        a = x + y\n        b = x - y\n        \n        # print(a, b, abs(a) - abs(b))\n        \n        if abs(a) - abs(b) > 1:\n            return False\n        \n        return True\n    \n    if a[0] == a[1] or a[0] == a[2]:\n        \n        if a[1] - a[2] == 1:\n            return 1 + test(a[0], a[1]) + test(a[2], a[1])\n        \n        return 2 + test(a[0], a[1]) + test(a[1], a[2])\n    \n    if a[1] == a[2] or a[1] == a[3]:\n        \n        if a[2] - a[3] == 1:\n            return 1 + test(a[1], a[2]) + test(a[3], a[2])\n        \n        return 2 + test(a[2], a[1]) + test(a[3], a[1])\n        \n    \n    if a[2] == a[3] or a[2] == a[4]:\n        \n        if a[3] - a[4] == 1:\n            return 1 + test(a[2], a[3]) + test(a[4], a[3])\n        \n        return 2 + test(a[3], a[2]) + test(a[4], a[2])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted([int(i) for i in stdin.split()])\n    if n == 1:\n        return \"0\"\n    k = 0\n    i, j = 0, 1\n    while j < n:\n        if a[i]!= a[j]:\n            i += 1\n            j = i + 1\n        k += 1\n        if a[j]!= a[i]:\n            i += 1\n            j = i + 1\n    return str(k)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [1]*n\n    for i in range(n):\n        if i == 0 or a[i-1]!= a[i]:\n            dp[i] = 2\n        for j in range(i):\n            if a[i-1] == a[j] and abs(i-j) == 1:\n                dp[i] = min(dp[i], dp[j] + 2)\n    return''.join(map(str, dp))"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    m = sum(a)\n    dp = [[0, 0, 0] for _ in range(m + 1)]\n    dp[0] = [1, 1, 1]\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                dp[j][1] += 1\n                dp[j][2] += 1\n            elif j == a[i]:\n                dp[j][0] += 1\n                dp[j][2] += 1\n            elif j < a[i]:\n                dp[j][1] += 1\n                dp[j][2] += 1\n            elif j < m - a[i]:\n                dp[j][0] += 1\n                dp[j][2] += 1\n            elif j < m - a[i] + 1:\n                dp[j][1] += 1\n                dp[j][2] += 1\n            else:\n                dp[j][0] += 1\n                dp[j][2] += 1\n    ans = m - dp[m - 1][0]\n    print(ans)\n    for i in range(1, m + 1):\n        print(i, dp[i][0], dp[i][1], dp[i][2])\n    return ans\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    input_a = list(map(int, stdin.split(' ')))\n    if input_n == 2:\n        return str(min(len(set(input_a)), len(input_a) - len(set(input_a))))\n    a = [0]\n    for i in range(1, input_n):\n        a.append(abs(input_a[i] - input_a[i - 1]) + a[i - 1])\n    dp = [[0] * input_n for _ in range(input_n)]\n    for i in range(input_n):\n        dp[i][i] = 1\n        for j in range(i):\n            if a[i] == a[j] and i!= j:\n                dp[i][j] = 2\n            elif a[i] < a[j]:\n                dp[i][j] = dp[j][i] + 1\n    print(str(min(map(len, dp))), end=\"\")\n    for i in range(input_n):\n        print(''+ str(i) +'' + str(i) +'' + str(i) if dp[i][i] == 1 else str(i) +'' + str(i) +'' + str(i) +'' if dp[i][i] == 2 else str(i) +'' + str(i) +'' + str(i), end=\"\")\n    return stdout\n\n\nsolution(input())"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    count = 0\n    min_count = 0\n    m = 2**31\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1) + \" \" + str(2) + \" \" + str(3)\n    while n > 1:\n        if arr[0]!= arr[1]:\n            count += 1\n        if arr[0] == arr[1]:\n            count = 0\n            if n == 3:\n                return str(1) + \" \" + str(2) + \" \" + str(3)\n            if n == 4:\n                return str(1) + \" \" + str(2) + \" \" + str(3) + \" \" + str(4)\n        if count < min_count:\n            min_count = count\n        if count > 1:\n            arr = arr[count:] + arr[:count]\n        else:\n            arr = arr[count+1:] + arr[:count]\n        count = 0\n        n -= 1\n    return str(min_count)"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    # find pairs of indices that are adjacent\n    left, right = 0, n - 1\n    while left < right:\n        if abs(a[left] - a[right]) == 1:\n            left += 1\n            right -= 1\n        elif a[left] > a[right]:\n            right -= 1\n        else:\n            left += 1\n    # calc operations\n    res = 0\n    i = j = 0\n    while i < n:\n        if abs(a[i] - a[j]) == 1:\n            res += 1\n        else:\n            res += abs(a[i] - a[j]) - 1\n        if j + 1 < n:\n            j += 1\n        else:\n            break\n        i += 1\n    return res\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # open, read, close\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        s = stdin.split()[2]\n        \n        # \uac01\uac01 \ubaa8\ub4e0 \uacf5\ubc31\uc744 \ucc3e\uc744 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ubb38\uc744 \uc2e4\ud589\n        while s.find(\"0\")!= -1:\n            for i in range(1, n):\n                if s[i - 1] == \"1\":\n                    if s[i] == \"1\":\n                        s = s[:i - 1] + \"0\" + s[i + 1:]\n            # print(s)\n        # \ubaa8\ub4e0 \uacf5\ubc31\uc744 \ucc3e\uc73c\uba74 \ub05d\n        \n        ans = 0\n        count = 0\n        for i in range(n):\n            if s[i] == \"1\":\n                count += 1\n            else:\n                if count - 1 > k:\n                    ans += 1\n                count = 0\n        # \ud55c\ubc88 \uc654\ub358 \ubaa8\ub4e0 \uacf5\ubc31\uc744 \ub2e4 \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\n        if count - 1 > k:\n            ans += 1\n        \n        print(ans)"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    table_n, min_dis = list(map(int, stdin.split()))\n    free_tables = list(map(int, stdin.split()))\n    # print(table_n, min_dis, free_tables)\n    return str(max(free_tables) - min_dis)"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    table_numbers = range(1, n + 1)\n    occupied_table_number = 0\n    free_table_number = 0\n    table_occupancy = {}\n\n    for i in table_numbers:\n        if (i - occupied_table_number) < k:\n            occupied_table_number = i\n        else:\n            if table_occupancy.get(i - occupied_table_number):\n                free_table_number += table_occupancy.get(i - occupied_table_number)\n                occupied_table_number = i\n                free_table_number += 1\n\n            table_occupancy[i - occupied_table_number] = 1\n\n    return str(free_table_number)\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  state = stdin\n  while True:\n    state = state.replace('0', '')\n    if state == '':\n      break\n    for i in range(len(state)):\n      if len(state) % 2 == 0:\n        if state[i] == '1' and i + 1 - k >= 0 and state[i + 1 - k] == '1':\n          state = state[:i] + '1' + state[i + 1:]\n          break\n      else:\n        if state[i] == '1' and i + k >= 0 and state[i + k] == '1':\n          state = state[:i] + '1' + state[i + k:]\n          break\n  return state\n  \n\"\"\"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdout\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, k = map(int, input().split())\n    \n    tables = [0] * n\n    \n    for i in range(n):\n        tables[i] = input()\n    \n    \n    \n    # print(tables)\n    \n    occupied_tables = 0\n    \n    \n    for i in range(n):\n        \n        for j in range(i, n):\n            if tables[i]!= '1' and tables[j]!= '1':\n                if abs(i - j) <= k:\n                    \n                    occupied_tables += 1\n                    break\n    \n    \n    if occupied_tables > n - k:\n        return 0\n    \n    return occupied_tables"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, k = map(int, s.split())\n    a = list(s)\n    t = 0\n    b = a\n    for i in range(n):\n        if t < k:\n            b[i] = '0'\n            t += 1\n    for i in range(n):\n        if b[i] == '0':\n            b[i] = '1'\n            t += 1\n    c = 0\n    for i in range(n):\n        if b[i] == '1':\n            c += 1\n    return str(c)\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s):\n        for i in range(len(s) - 1):\n            if int(s[i]) - int(s[i + 1]) > k:\n                return False\n        return True\n\n    t = int(stdin)\n    for _ in range(t):\n        n, k, *s = stdin.split()\n        n, k = int(n), int(k)\n        if not is_valid(s):\n            print(0)\n        else:\n            print(n - 1)\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    tables = {i: '0' for i in range(1, n + 1)}\n    res = 0\n\n    for _ in range(n):\n        s = stdin\n        if '1' in s:\n            idx = s.index('1')\n            if idx > k:\n                res += 1\n            if idx - k > 0:\n                tables[idx - k] = '1'\n        s = ''\n        for idx, val in enumerate(tables.values()):\n            s += val\n\n    return res\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    segments = sorted(map(int, stdin.split()))\n    bad_points = 0\n    for i in range(1, len(segments)):\n        bad_points += segments[i - 1] + segments[i] > segments[i]\n    return str(bad_points)"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    segments = list(map(lambda x: list(map(int, x.split())), stdin[2:]))\n\n    bad_points = set()\n    for segment in segments:\n        if is_bad_segment(segment, k):\n            bad_points.add(segment[0])\n            bad_points.add(segment[1])\n\n    if len(bad_points) == 0:\n        return \"0\"\n\n    bad_points = list(bad_points)\n    bad_points.sort()\n\n    def f(i):\n        if i == n:\n            return 0\n        if i in bad_points:\n            return 0\n        l = f(i + 1)\n        r = f(i + 1)\n        if is_bad_segment(segments[i], k):\n            l = min(l, 1)\n            r = min(r, 1)\n        return l + r\n\n    return str(f(0))\n\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l_arr, r_arr = [], []\n    for i in range(n):\n        l_arr.append(int(input()))\n        r_arr.append(int(input()))\n    return solution_rec(l_arr, r_arr, k, n)\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        segments.append((a, b))\n    ans = 0\n    while True:\n        bad_segments = set()\n        seg_idx = 0\n        while seg_idx < len(segments):\n            a, b = segments[seg_idx]\n            if b - a <= 0:\n                break\n            bad_segments.add(seg_idx)\n            for j in range(seg_idx + 1, len(segments)):\n                c, d = segments[j]\n                if a < c and c < b:\n                    bad_segments.add(j)\n            seg_idx += 1\n        if len(bad_segments) < k:\n            break\n        for bad_seg in bad_segments:\n            del segments[bad_seg]\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = sorted(\n        [list(map(int, stdin.split())) for _ in range(n)], key=lambda x: x[0]\n    )\n    dp = [[-1] * n for _ in range(n)]\n\n    def isBad(seg):\n        for bad in range(n):\n            if seg[1] < segments[bad][0] or seg[0] > segments[bad][1]:\n                return True\n        return False\n\n    def makeSegment(i):\n        seg = segments[i]\n        if isBad(seg):\n            return -1\n        if dp[i][i] == -1:\n            dp[i][i] = 1 + makeSegment(i + 1)\n        return dp[i][i]\n\n    return str(makeSegment(0))\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    points.sort()\n    s = set()\n    r = 0\n    while True:\n        r = r + 1\n        if r > n:\n            break\n        if points[r] not in s:\n            s.add(points[r])\n            for i in range(r + 1, n):\n                if points[i] not in s and points[r] < points[i]:\n                    break\n            else:\n                s.add(points[r])\n                s.add(points[i])\n    return len(s)"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort()\n    ans = 0\n    bad = set()\n    for i in range(n):\n        l, r = segments[i]\n        for j in range(i, n):\n            if i!= j and segments[j][0] <= r and segments[j][1] >= l:\n                bad.add(segments[j][1])\n    print(len(bad))\n    print(' '.join(map(str, list(bad))))\n    return ''\n\nsolution('''\n3 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''')\n\nsolution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n\n''')"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    bad = [(r, -l) for l, r in sorted([(l, r) for l, r in map(int, stdin.split())], key=lambda x: x[0])]\n    good = [[r, l] for l, r in sorted([(l, r) for l, r in map(int, stdin.split())], key=lambda x: x[0])]\n    print(len(bad))\n    for i in range(1, len(good)):\n        if good[i][0] - good[i - 1][1] > k:\n            good[i - 1][0] -= 1\n    print(min(map(len, good)))\n    print(' '.join(map(str, good)))\n    return '\\n'.join(map(str, sorted(good, key=lambda x: x[0])))\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n    bad_points = []\n    constraints = []\n    for i in range(n):\n        l = segments[i]\n        r = segments[i + 1]\n        constraints.append([l, r])\n        if r < l:\n            bad_points.append(i)\n    bad_points.sort()\n    bad_points.append(n)\n    m = len(bad_points)\n    t = sum(range(1, k + 1))\n    if len(constraints) == 0:\n        return m\n    else:\n        counter = {}\n        for i in range(t, t + m):\n            if i in counter:\n                counter[i] += 1\n            else:\n                counter[i] = 1\n        cnt = 0\n        res = {}\n        for i in range(t):\n            res[i] = counter[i]\n        s = sorted(res.items(), key=lambda x: x[0], reverse=True)\n        s = sorted(s, key=lambda x: x[1], reverse=True)\n        for i in s:\n            if i[1] > k:\n                cnt += 1\n            else:\n                res[i[0]] = 0\n        return m - cnt\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    max_bad = 2 * 10 ** 5\n    points = sorted(list(map(int, stdin.strip().split())))\n    segments = [[points[0], points[-1]]]\n\n    for i in range(1, len(points)):\n        new_segments = []\n        for j in range(len(segments)):\n            p1, p2 = segments[j]\n            if p1[0] < points[i] < p2[0]:\n                new_segments.append([points[i], points[i]])\n            elif p1[1] < points[i] < p2[1]:\n                new_segments.append([points[i], p2])\n        segments = new_segments\n        if len(segments) > max_bad:\n            break\n    \n    return len(segments)"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = set()\n    s.add(a[0])\n    s.add(a[1])\n    s.add(a[2])\n    res = 0\n    while len(s) < n:\n        res += max(a)\n        a.remove(max(a))\n        s.add(max(a))\n        a.remove(max(a))\n        s.add(max(a))\n        a.remove(max(a))\n        s.add(max(a))\n    return str(res)\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    a_max = max(a)\n    dp = [0]*(a_max+1)\n    dp[1] = 1\n    dp[2] = 2\n\n    for i in range(3, a_max+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n\n    res = 0\n    for i in range(n):\n        res += dp[a[i]]\n    \n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = map(int, stdin.split()[2].split())\n    q = int(stdin.split()[0])\n    arr = []\n    res = 0\n    for i in range(q):\n        if a[i] % 3!= 0:\n            arr.append(a[i])\n            res += a[i]\n        else:\n            if len(arr) == 0:\n                res += (a[i] // 3)\n            else:\n                if len(arr) == 1:\n                    res += a[i]\n                else:\n                    res += (a[i] // 3)\n                res += (a[i] // 3) * arr[-1]\n            arr = arr[:-1]\n    return str(res)\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n\n    for i in range(q):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        b = max(a)\n        a.remove(b)\n        a.sort(reverse=True)\n        c = sum(a)\n        print(c)\n\nsolution(input())\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_combine_prettiness(l):\n        result = l[0]\n        for i in range(1, len(l)):\n            result = max(result, l[i] * (l[i - 1] if i > 0 else 1))\n        return result\n\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    return str(get_max_combine_prettiness(l))\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # stdin = input()\n    # n = int(stdin.split(\" \")[0])\n    #\n    # # Initialize\n    # a = []\n    # for i in range(n):\n    #     a.append(int(stdin.split(\" \")[i+1]))\n    #\n    # # Query\n    # res = 0\n    # for i in range(n):\n    #     a[i] = a[i] * (i + 1)\n    #\n    # # Count\n    # count = 0\n    # for i in range(n):\n    #     if a[i] > res:\n    #         count += 1\n    #         res = a[i]\n    #\n    # # Answer\n    # print(res)\n    # return\n\n    # stdin = input()\n    # n = int(stdin.split(\" \")[0])\n    #\n    # # Initialize\n    # a = []\n    # for i in range(n):\n    #     a.append(int(stdin.split(\" \")[i + 1]))\n    #\n    # # Query\n    # res = 0\n    # for i in range(n):\n    #     if a[i] % 2 == 0:\n    #         continue\n    #     else:\n    #         for j in range(i + 1, n):\n    #             if a[j] % 2!= 0:\n    #                 res += min(a[i], a[j])\n    #                 break\n    #\n    # # Answer\n    # print(res)\n    # return\n\n    stdin = input()\n    n = int(stdin.split(\" \")[0])\n    a = list(map(int, stdin.split(\" \")[1:]))\n\n    res = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] % a[i]!= 0:\n                res += 1\n    print(res)\n    return\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pretties = sorted([int(i) for i in stdin.split(\" \")])\n    dp = {}\n    return pretties[-1]"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    # a1, a2, a3 = map(int, stdin.split()[2].split(' '))\n    # sum = a1 + a2 + a3\n    # print(sum)\n    a = list(map(int, stdin.split()[2].split(' ')))\n    for i in range(q):\n        # sum = sum - min(a)\n        a = a[1:] + a[:1]\n        # print(a)\n        # sum += min(a)\n        # print(sum)\n        # sum = sum - a[0]\n        # print(sum)\n    print(sum(a))\n    return stdin\nsolution(\"\"\"\n1\n4\n5 6 15 30\n4\n10 6 30 15\n\"\"\")\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    p = int(stdin)\n    a = list(map(int, stdin.split()))\n    # a.sort()\n    # print(a)\n    # print(max(a))\n\n    # n = int(stdin)\n    # A = list(map(int, stdin.split()))\n    # print(A)\n    # print(sum(A))\n\n    # n = int(stdin)\n    # A = list(map(int, stdin.split()))\n    # print(A)\n    # print(sum(A))\n\n    # n = int(stdin)\n    # A = list(map(int, stdin.split()))\n    # print(A)\n    # print(sum(A))\n\n    # print(sum(A))\n    # return A\n    return str(max(sum(a) // 3, max(a)))\n\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\nsolution(\"10\")\nsolution(\"12\")\nsolution(\"15\")\nsolution(\"20\")\nsolution(\"30\")\nsolution(\"35\")\nsolution(\"40\")\nsolution(\"45\")\nsolution(\"50\")\nsolution(\"55\")\nsolution(\"60\")\nsolution(\"65\")\nsolution(\"70\")\nsolution(\"75\")\nsolution(\"80\")\nsolution(\"85\")\nsolution(\"90\")\nsolution(\"95\")\nsolution(\"100\")\nsolution(\"105\")\nsolution(\"110\")\nsolution(\"115\")\nsolution(\"120\")\nsolution(\"125\")\nsolution(\"130\")\nsolution(\"135\")\nsolution(\"140\")\nsolution(\"145\")\nsolution(\"150\")\nsolution(\"155\")\nsolution(\"160\")\nsolution(\"165\")\nsolution(\"170\")\nsolution(\"175\")\nsolution(\"180\")\nsolution(\"185\")\nsolution(\"190\")\nsolution(\"195\")\nsolution(\"200\")\nsolution(\"205\")\nsolution(\"210\")\nsolution(\"215\")\nsolution(\"220\")\nsolution(\"225\")\nsolution(\"230\")\nsolution(\"235\")\nsolution(\"240\")\nsolution(\"245\")\nsolution(\"250\")\nsolution(\"255\")\nsolution(\"260\")\nsolution(\"265\")\nsolution(\"270\")\nsolution(\"275\")\nsolution(\"280\")\nsolution(\"285\")\nsolution(\"290\")\nsolution(\"295\")\nsolution(\"300\")\nsolution(\"305\")\nsolution(\"310\")\nsolution(\"315\")\nsolution(\"320\")\nsolution(\"325\")\nsolution(\"330\")\nsolution(\"335\")\nsolution(\"340\")\nsolution(\"345\")\nsolution(\"350\")\nsolution(\"355\")\nsolution(\"360\")\nsolution(\"365\")\nsolution(\"370\")\nsolution(\"375\")\nsolution(\"380\")\nsolution(\"385\")\nsolution(\"390\")\nsolution(\"395\")\nsolution(\"400\")\nsolution(\"405\")\nsolution(\"410\")\nsolution(\"415\")\nsolution(\"420\")\nsolution(\"425\")\nsolution(\"430\")\nsolution(\"435\")\nsolution(\"440\")\nsolution(\"445\")\nsolution(\"450\")\nsolution(\"455\")\nsolution(\"460\")\nsolution(\"465\")\nsolution(\"470\")\nsolution(\"475\")\nsolution(\"480\")\nsolution(\"485\")\nsolution(\"490\")\nsolution(\"495\")\nsolution(\"500\")\nsolution(\"505\")\nsolution(\"510\")\nsolution(\"515\")\nsolution(\"520\")\nsolution(\"525\")\nsolution(\"530\")\nsolution(\"535\")\nsolution(\"540\")\nsolution(\"545\")\nsolution(\"550\")\nsolution(\"555\")\nsolution(\"560\")\nsolution(\"565\")\nsolution(\"570\")\nsolution(\"575\")\nsolution(\"580\")\nsolution(\"585\")\nsolution(\"590\")\nsolution(\"595\")\nsolution(\"600\")\nsolution(\"605\")\nsolution(\"610\")\nsolution(\"615\")\nsolution(\"620\")\nsolution(\"625\")\nsolution(\"630\")\nsolution(\"635\")\nsolution(\"640\")\nsolution(\"645\")\nsolution(\"650\")\nsolution(\"655\")\nsolution(\"660\")\nsolution(\"665\")\nsolution(\"670\")\nsolution(\"675\")\nsolution(\"680\")\nsolution(\"685\")\nsolution(\"690\")\nsolution(\"695\")\nsolution(\"700\")\nsolution(\"705\")\nsolution(\"710\")\nsolution(\"715\")\nsolution(\"720\")\nsolution(\"725\")\nsolution(\"730\")\nsolution(\"735\")\nsolution(\"740\")\nsolution(\"745\")\nsolution(\"750\")\nsolution(\"755\")\nsolution(\"760\")\nsolution(\"765\")\nsolution(\"770\")\nsolution(\"775\")\nsolution(\"780\")\nsolution(\"785\")\nsolution(\"790\")\nsolution(\"795\")\nsolution(\"800\")\nsolution(\"805\")\nsolution(\"810\")\nsolution(\"815\")\nsolution(\"820\")\nsolution(\"825\")\nsolution(\"830\")\nsolution(\"835\")\nsolution(\"840\")\nsolution(\"845\")\nsolution(\"850\")\nsolution(\"855\")\nsolution(\"860\")\nsolution(\"865\")\nsolution(\"870\")\nsolution(\"875\")\nsolution(\"880\")\nsolution(\"885\")\nsolution(\"890\")\nsolution(\"895\")\nsolution(\"900\")\nsolution(\"905\")\nsolution(\"910\")\nsolution(\"915\")\nsolution(\"920\")\nsolution(\"925\")\nsolution(\"930\")\nsolution(\"935\")\nsolution(\"940\")\nsolution(\"945\")\nsolution(\"950\")\nsolution(\"955\")\nsolution(\"960\")\nsolution(\"965\")\nsolution(\"970\")\nsolution(\"975\")\nsolution(\"980\")\nsolution(\"985\")\nsolution(\"990\")\nsolution(\"995\")\nsolution(\"1000\")\nsolution(\"1005\")\nsolution(\"1010\")\nsolution(\"1015\")\nsolution(\"1020\")\nsolution(\"1025\")\ns"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    max_sum = 0\n    for i in range(int(l[0])):\n        max_sum += max(int(l[1 + i]), int(l[1 + i + int(l[0])]))\n    return str(max_sum)\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    q = int(stdin[0])\n    n = int(stdin[1])\n    arr = stdin[2:]\n    # print(q, n, arr)\n    teams = []\n    for i in range(n):\n        teams.append(set())\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(int(arr[i]) - int(arr[j])) <= 1:\n                teams[i].add(j)\n                teams[j].add(i)\n    # print(teams)\n    min_teams = 100000000\n    for i in range(n):\n        if len(teams[i]) < min_teams:\n            min_teams = len(teams[i])\n    print(min_teams)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    q = int(inp[0])\n    n = int(inp[1])\n    ans = ''\n    for i in range(q):\n        s = inp[i+2].split(\" \")\n        a = list(map(int, s))\n        if len(a)!= n:\n            return 'INVALID'\n        l = []\n        for i in a:\n            if i not in l:\n                l.append(i)\n        l.sort()\n        if len(l) == n:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\n\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return \"1\"\n    def parse_input(line: str) -> List[int]:\n        # return [int(x) for x in line.split()]\n        return line.split()\n    def parse_input_int(line: str) -> Tuple[int]:\n        # return tuple([int(x) for x in line.split()])\n        return tuple([int(x) for x in line.split()])\n    # a, b = parse_input(stdin)\n    # a = parse_input_int(stdin)\n    # a, b = parse_input(stdin)\n    # a = list(map(int, stdin.split()))\n    # a = stdin.split()\n    # a = parse_input(stdin)\n    a = parse_input(stdin)\n    n = int(a[0])\n    del a[0]\n    a = tuple(a)\n    if len(a) % 2!= 0:\n        a += (0,)\n    a = tuple(a)\n    return a\n    # return a, b\n\na, b = parse_input(stdin)\nn = int(a[0])\ndel a[0]\na = tuple(a)\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        ans = 0\n        for j in range(len(a)):\n            for k in range(j + 1, len(a)):\n                if abs(a[j] - a[k]) == 1:\n                    ans += 1\n        print(ans)\n    return \"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = list(map(int, stdin.split()))\n    \n    answers = []\n    for query_num in range(1, n + 1):\n        \n        \n        # count teams\n        # num_teams = len(list(set(sorted(skills))))\n        \n        # if a single team\n        count_teams = 1\n        teams = {0}\n        for i in range(1, n):\n            # if abs(skills[i] - skills[i - 1]) == 1:\n            if skills[i] - skills[i - 1] == 1:\n                count_teams += 1\n                teams.add(i)\n            # if abs(skills[i] - skills[i - 1]) > 1:\n            else:\n                # teams.add(i)\n                teams = {i}\n                break\n        \n        answers.append(count_teams)\n    \n    for num in answers:\n        print(num)\n    \n    return \"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        \n        group = 0\n        for i in range(1, n):\n            diff = a[i] - a[i-1]\n            if diff == 1:\n                group += 1\n        \n        print(group)\nsolution(input())\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(v1, v2):\n        for i in range(1, len(v1)):\n            if v1[i]!= v2[i] and abs(v1[i] - v2[i])!= 1:\n                return False\n        return True\n\n    q = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    students = list(map(int, stdin.split()[2:]))\n    \n    # Sort the students by their skills\n    students.sort()\n    \n    # Keep track of the number of teams\n    num_teams = 0\n    \n    for i in range(len(students) - 1):\n        for j in range(i + 1, len(students)):\n            if is_valid(students[i], students[j]):\n                num_teams += 1\n                break\n    \n    return str(num_teams)\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    q = int(stdin[0])\n    n = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    stdin = stdin[3:]\n    ret = []\n    while stdin:\n        s = stdin.pop(0)\n        ret.append(s)\n        while len(ret) == n:\n            ans = 0\n            for i in range(len(ret)-1):\n                diff = abs(a[i]-a[i+1])\n                ans += diff\n                if diff == 1:\n                    break\n            ret = ret[:i+1] + ret[i+1:]\n            if ans == 1:\n                break\n    return''.join(map(str, ret))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    q = int(stdin.split()[2])\n\n    dp = [[float('inf')] * (2 * n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n        for j in range(2, 2 * n + 1):\n            if a[i - 1]!= a[j - 1]:\n                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n    for i in range(1, n + 1):\n        for j in range(i + 1, 2 * n + 1):\n            for k in range(i, n + 1):\n                dp[i][j] = min(dp[i][j], dp[k][j - 1] + 1)\n    answer = min(dp[n][2 * n] - 1, dp[n][2 * n - 1] - 1)\n    return str(answer)\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    # n = int(stdin.pop(0))\n    # a = stdin.pop(0)\n    # a = list(map(int, a.split()))\n    n, q = map(int, stdin.pop(0).split())\n    # print(n, q)\n    q = int(q)\n    # a = list(map(int, stdin.pop(0).split()))\n    # print(a)\n    # a = [2, 10, 1, 20]\n    # n = 4\n    # print(a)\n    teams = []\n    a = []\n    for _ in range(n):\n        teams.append([])\n        a.append(0)\n    for _ in range(q):\n        # print(teams)\n        # print(a)\n        n, q = map(int, stdin.pop(0).split())\n        # print(n, q)\n        q = int(q)\n        # n = 4\n        # q = 1\n        # print(n, q)\n        a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        a = [int(x) for x in a]\n        # a = [2, 10, 1, 20]\n        # print(a)\n        for i in range(n):\n            if a[i]!= 0:\n                a[i] = 1\n        # print(a)\n        # a = [2, 10, 1, 20]\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = [2, 10, 1, 20]\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        for i in range(n):\n            a[i] = a[i] - a[i - 1]\n            if a[i] == 0:\n                a[i] = -1\n        # print(a)\n        # a = [2, 10, 1, 20]\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        for i in range(1, n):\n            if a[i - 1] > a[i]:\n                a[i] = a[i - 1]\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n        # print(a)\n        # a = list(map(int, stdin.pop(0).split()))\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, s = list(map(int, stdin.split()))\n    if n % a == 0 or n % b == 0 or n % s == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, s = map(int, stdin.split())\n    if a <= n <= b and s == a + b:\n        return 'YES'\n    elif s == 0:\n        return 'YES'\n    elif a > n:\n        return 'NO'\n    elif n > b:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a, b, n, s = map(int, stdin.split())\n        if (s == 0 and n == 1) or (s == 1 and n == a) or (s == 2 and n == a and b == 1):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a, s = map(int, stdin.split())\n    n_list = list(range(n, n+b))\n    n_list = sorted(n_list)\n    max_value = 0\n    for i in range(len(n_list)):\n        n_list[i] = a - 1 - n_list[i]\n        if n_list[i] == 0:\n            break\n        max_value += n_list[i]\n    for i in range(len(n_list)):\n        n_list[i] = b - 1 - n_list[i]\n        if n_list[i] == 0:\n            break\n        max_value += n_list[i]\n    return \"YES\" if max_value == s else \"NO\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def can(x: int, y: int, n: int, S: int) -> bool:\n        if x < 1 or y < 1 or n < 1 or S < 1:\n            return False\n        if x * n > S:\n            return False\n        return True\n\n    def test_solution():\n        print('test_solution is starting')\n        print('test_solution works')\n    \n    # Write your code here\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    y = int(stdin.split()[2])\n    s = int(stdin.split()[3])\n    if can(x, y, n, s):\n        print('YES')\n    else:\n        print('NO')\n    # test_solution()\n    return 'test_solution works'"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, n, s = stdin.split()\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    s = int(s)\n\n    if (a * n) > s:\n        return 'NO'\n    elif (b * n) > s:\n        return 'NO'\n    else:\n        x, y = get_n_sum(n, a, b)\n        return 'YES' if (x, y) == (a, b) else 'NO'\n\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, s = map(int, stdin.split())\n    for x in range(a, b+1):\n        if (n-x) in range(1, s+1):\n            if (n-x) + 1 == s:\n                return \"YES\"\n            else:\n                return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_coins = []\n    number_of_coin = []\n    total_given = []\n    for i in range(int(stdin)):\n        total_coins.append(int(stdin.split(\"\\n\")[i].split()[0]))\n        number_of_coin.append(int(stdin.split(\"\\n\")[i].split()[1]))\n        total_given.append(int(stdin.split(\"\\n\")[i].split()[2]))\n    for i in range(len(total_coins)):\n        if total_coins[i] + number_of_coin[i] <= total_given[i]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    n = int(stdin.split()[2])\n    s = int(stdin.split()[3])\n    for i in range(1, s+1):\n        for j in range(1, s+1):\n            if a*i + b*j == n:\n                print(\"YES\")\n                return\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,n,s=list(map(int,stdin.split()))\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if n==i and s==j:\n                print(\"YES\")\n            elif n==i and s==b:\n                print(\"YES\")\n            elif s==j and n==i:\n                print(\"YES\")\n            elif s==j and n==b:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_lines = len(stdin.splitlines())\n    a = stdin.splitlines()\n    n = int(a[0])\n    # print(n)\n    b = a[1].split()\n    # print(b)\n    lst = list(map(int, b))\n    # print(lst)\n    # print(len(lst))\n    ans = \"\"\n    if n % 2!= 0:\n        return \"NO\"\n    else:\n        for i in range(n):\n            if lst[i] == 0:\n                ans += str(0) + \" \"\n            elif lst[i] > 0:\n                ans += str(i + 1) + \" \"\n            else:\n                ans += str(i + 1) + \" \"\n        ans = ans[:-1]\n        return \"YES\\n\" + str(n) + \"\\n\" + ans + \"\\n\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first = list(map(int, stdin.split()))\n    n = first[0]\n    s = set()\n    for i in range(n):\n        if first[i+1] in s:\n            return \"NO\"\n        s.add(first[i+1])\n\n    increasing = sorted(list(s))\n    decreasing = sorted(list(s), reverse=True)\n    increase_list = []\n    decrease_list = []\n\n    for i in increasing:\n        increase_list.append(i)\n\n    for i in decreasing:\n        decrease_list.append(i)\n\n    inc_sum = 0\n    dec_sum = 0\n\n    for i in range(n):\n        if i == 0:\n            continue\n        inc_sum += increase_list[i-1]\n        if inc_sum == increase_list[i]:\n            dec_sum += decrease_list[i-1]\n    if inc_sum!= n and dec_sum!= n:\n        return \"NO\"\n    elif dec_sum!= n and inc_sum == n:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a = sorted(a)\n    inc = 0\n    dec = 0\n    ans = \"NO\"\n    for i in range(len(a)):\n        if a[i] > a[i-1]:\n            inc += 1\n            if inc > 1:\n                ans = \"NO\"\n                break\n        elif a[i] < a[i - 1]:\n            dec += 1\n            if dec > 1:\n                ans = \"NO\"\n                break\n        else:\n            ans = \"NO\"\n            break\n    if inc + dec > 0:\n        ans = \"YES\"\n    return ans\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[1:]))\n    n = int(stdin[0])\n    # check if there are any contradictions in the input\n    if not (a == sorted(a) or a == sorted(a, reverse=True)):\n        return \"NO\"\n    # there are no contradictions\n    inc = 0\n    dec = 0\n    increasing = []\n    decreasing = []\n    # counting the number of increasing sequences\n    for i in range(n):\n        if a[i] > a[i-1]:\n            inc += 1\n            increasing.append(a[i])\n    # counting the number of decreasing sequences\n    for i in range(n):\n        if a[i] > a[i-1]:\n            dec += 1\n            decreasing.append(a[i])\n    if inc == 0:\n        return \"NO\"\n    if inc == dec:\n        return \"YES\"\n    # sorting decreasing and increasing\n    increasing.sort()\n    decreasing.sort(reverse=True)\n    # printing the number of elements in each of the sequences\n    if inc > 0:\n        for i in range(inc):\n            print(increasing[i], end=\" \")\n    if dec > 0:\n        for i in range(dec):\n            print(decreasing[i], end=\" \")\n    # printing the number of elements in each of the sequences\n    print(inc, end=\" \")\n    print(dec)\n    # searching for the correct sequences\n    for i in range(min(inc, dec)):\n        if decreasing[i] > increasing[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = stdin[1:]\n    a = [int(x) for x in a]\n    inc = []\n    dec = []\n    for i in range(len(a)):\n        if a[i] > a[i - 1]:\n            inc.append(a[i])\n        else:\n            dec.append(a[i])\n\n    if len(inc) == 0 or len(dec) == 0:\n        print(\"NO\")\n        return\n\n    if len(inc) < len(dec):\n        print(\"YES\")\n        print(len(inc))\n        for i in range(len(inc)):\n            print(inc[i], end=\" \")\n        print()\n    else:\n        print(\"YES\")\n        print(len(dec))\n        for i in range(len(dec)):\n            print(dec[i], end=\" \")\n        print()\n    return\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    max_increasing = max(seq)\n    max_decreasing = max(seq)\n    if max_increasing + max_decreasing!= n:\n        return \"NO\"\n    if max_increasing == max_decreasing:\n        return \"YES\"\n    max_increasing = max(seq, key=lambda x: x + 1)\n    max_decreasing = max(seq, key=lambda x: x - 1)\n    return \"{} {}\".format(max_increasing, max_decreasing)\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 7\n   ... 7 2 7 3 3 1 4\n   ... \n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5\n   ... 4 3 1 5 3\n   ... \n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5\n   ... 0 1 2 3 4\n   ... \n   ... ''')\n    'NO'\n    '''\n    n = int(stdin.strip())\n    \n    increasing = deque()\n    decreasing = deque()\n    \n    \n    for i in range(n):\n        cur = int(stdin.strip())\n        while len(increasing) and increasing[-1] < cur:\n            i -= 1\n            if len(increasing) == 0:\n                break\n            \n            increasing.pop()\n        \n        while len(decreasing) and decreasing[-1] > cur:\n            i += 1\n            if len(decreasing) == 0:\n                break\n            \n            decreasing.pop()\n            \n        if i < 0:\n            return \"NO\"\n        if i > 0:\n            increasing.append(cur)\n    \n    if len(increasing) == 0:\n        print(len(decreasing))\n        print(len(decreasing))\n        print(''.join(map(str, decreasing)))\n    else:\n        print(len(increasing))\n        print(len(increasing))\n        print(''.join(map(str, increasing)))\n    return \"YES\"\n    '''\n    while len(increasing) and increasing[-1] < stdin.strip():\n        i += 1\n        if len(increasing) == 0:\n            break\n        \n        increasing.pop()\n    \n    while len(decreasing) and decreasing[-1] > stdin.strip():\n        i -= 1\n        if len(decreasing) == 0:\n            break\n        \n        decreasing.pop()\n    \n    if i < 0:\n        return \"NO\"\n    if i > 0:\n        increasing.append(stdin.strip())\n    \n    return \"YES\"\n    '''\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ints = list(map(int, stdin.strip().split()))\n    return \"YES\" if check(ints) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    b = list(map(int, a[1:]))\n\n    inc = inc_cnt = 0\n    inc_arr = []\n\n    dec = dec_cnt = 0\n    dec_arr = []\n\n    for i in range(n):\n        if b[i] > inc:\n            inc = b[i]\n            inc_cnt += 1\n            inc_arr.append(b[i])\n        elif inc!= b[i]:\n            return \"NO\"\n        if b[i] > dec:\n            dec = b[i]\n            dec_cnt += 1\n            dec_arr.append(b[i])\n        elif dec!= b[i]:\n            return \"NO\"\n    return \"YES\" + str(inc_cnt) + \" \" + str(inc_arr) + \" \" + str(dec_cnt) + \" \" + str(dec_arr)\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(map(int, stdin.split()[1]))\n    min_s, max_s = 1, 2*n\n    while max_s - min_s > 1:\n        mid = (max_s + min_s)//2\n        inc, dec = 0, 0\n        for i in range(1, n+1):\n            if s[i-1] >= mid:\n                inc += 1\n            else:\n                dec += 1\n        if inc <= dec:\n            max_s = mid\n        else:\n            min_s = mid\n    return \"YES\" if inc == dec == 0 else \"NO\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    lst = list(map(int, stdin.strip().split()))\n    a = sorted(lst, key=lambda x: x[1])\n    b = sorted(lst, key=lambda x: x[2])\n    if a[0][0] >= b[0][0] or a[-1][0] < b[-1][0]:\n        return -1\n    answer = a[0][0] + b[0][0]\n    for i in range(k):\n        a = a[0:i+1] + a[i+1:]\n        b = b[0:i+1] + b[i+1:]\n        m = []\n        for j in range(len(a)):\n            m.append((a[j][0], b[j][0], a[j][2]))\n        m = sorted(m, key=lambda x: x[2], reverse=True)\n        for j in range(len(m)):\n            if m[j][1] >= m[j][2]:\n                answer = min(answer, m[j][0] + m[j][1])\n        if answer > max(a[0][0], b[0][0]):\n            return -1\n    return str(answer)\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split())))\n    books.sort()\n    num_books = len(books)\n    is_valid = True\n    for i in range(num_books - 1):\n        if books[i][1] == books[i + 1][1] and books[i][2] == books[i + 1][2]:\n            continue\n        if books[i][1] == books[i + 1][1] and books[i][2]!= books[i + 1][2]:\n            continue\n        if books[i][1]!= books[i + 1][1] and books[i][2] == books[i + 1][2]:\n            continue\n        if books[i][1]!= books[i + 1][1] and books[i][2]!= books[i + 1][2]:\n            is_valid = False\n            break\n    if is_valid:\n        return \"1\"\n    return str(books[0][0] + books[0][1] + books[0][2])\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    books = list()\n    for i in range(n):\n        books.append([int(j) for j in stdin.split()[i*3:i*3+3]])\n    \n    result = []\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                continue\n            t = books[i][0] + books[j][0]\n            a = books[i][1] + books[j][1]\n            b = books[i][2] + books[j][2]\n            if t <= k and a == 0 and b == 1:\n                result.append([books[i][0], books[j][0], 0])\n            if t <= k and a == 0 and b == 0:\n                result.append([books[i][0], books[j][0], 1])\n            if t <= k and a == 1 and b == 1:\n                result.append([books[i][0], books[j][0], 1])\n            if t <= k and a == 1 and b == 0:\n                result.append([books[i][0], books[j][0], 0])\n\n    if len(result) > 0:\n        return str(min([t for (t,_,_) in result]))\n    return '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    books = [[int(x) for x in stdin.split()] for _ in range(N)]\n    books.sort(key=lambda x: x[1], reverse=True)\n    s = 0\n    for i in range(N):\n        s += books[i][0]\n        if s >= K:\n            return str(books[i][2])\n    return str(-1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for _ in range(n):\n        books.append(list(map(int, stdin.split())))\n    books = sorted(books, key=lambda x: x[0], reverse=True)\n    alice_likes = set()\n    bob_likes = set()\n    sum_alice = 0\n    sum_bob = 0\n    for i in range(n):\n        if i + 1 in alice_likes or i + 1 in bob_likes:\n            continue\n        sum_alice += books[i][1]\n        sum_bob += books[i][2]\n        if sum_alice >= k:\n            alice_likes.add(i+1)\n            continue\n        if sum_bob >= k:\n            bob_likes.add(i+1)\n            continue\n        if len(alice_likes) < k and len(bob_likes) < k:\n            if sum_alice < sum_bob:\n                alice_likes.add(i+1)\n            else:\n                bob_likes.add(i+1)\n    if len(alice_likes) < k and len(bob_likes) < k:\n        return -1\n    return str(sum_alice + sum_bob)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = (list(map(int, input().split())))\n    books = set()\n    books.add(data[0])\n    books.add(data[1])\n    books.add(data[2])\n    \n    count = 3\n    for _ in range(data[3]):\n        books.add(count)\n        books.add(count + 1)\n        books.add(count + 2)\n        count += 3\n    \n    min_time = 0\n    for book in books:\n        if not (book == 1 or book == 2 or book == 3):\n            if min_time > data[0] + data[1] + data[2] + data[3]:\n                min_time = data[0] + data[1] + data[2] + data[3]\n    return str(min_time) if min_time!= 0 else str(-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split()[i * 3: i * 3 + 3])))\n    ans = \"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if books[i][1] + books[j][1] + books[k][1] < k:\n                    continue\n                if books[i][0] + books[j][0] + books[k][0] + books[i][0] + books[j][0] + books[k][0]!= k:\n                    continue\n                ans = max(ans, max(books[i][0] + books[j][0] + books[k][0], max(books[i][1] + books[j][1] + books[k][1], max(books[i][2] + books[j][2] + books[k][2], 0))))\n    if ans == 0:\n        return -1\n    return str(ans)"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_set(n: int) -> int:\n        if dp[n][0] == -1:\n            return -1\n        return dp[n][0]\n    def find_parents(n: int) -> int:\n        if dp[n][1] == -1:\n            return -1\n        return dp[n][1]\n    def find_root(n: int) -> int:\n        if dp[n][2] == -1:\n            return -1\n        return dp[n][2]\n    def union(n: int) -> None:\n        root_n = find_root(n)\n        if root_n == -1:\n            return\n        parent_n = find_parents(n)\n        if parent_n!= -1:\n            if root_n < parent_n:\n                dp[parent_n][2] = root_n\n            else:\n                dp[parent_n][2] = parent_n\n        else:\n            dp[n][1] = root_n\n    def find_cost(n: int) -> int:\n        root_n = find_root(n)\n        if root_n == -1:\n            return -1\n        return dp[root_n][0]\n    def find_is_parent(n: int) -> int:\n        return dp[n][1]!= -1\n    def find_is_root(n: int) -> int:\n        return dp[n][2]!= -1\n    def find_is_leaves(n: int) -> int:\n        return find_is_root(find_set(n)) and find_is_parent(find_set(n))\n    def find_cost_leaves(n: int) -> int:\n        return find_cost(find_set(n)) + find_cost(find_set(n))\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    dp = [[-1] * 3 for _ in range(n+1)]\n    ans = float('inf')\n    for i in range(m):\n        a,b,t = map(int,stdin.split()[i*3+1].split())\n        if find_is_leaves(a) and find_is_leaves(b):\n            ans = min(ans,t)\n        union(a)\n        union(b)\n    return ans if ans < float('inf') else -1"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    result = -1\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        sum_t = books[i] + books[j]\n        if sum_t < k:\n            i += 1\n        else:\n            j -= 1\n        \n        if j < i:\n            result = sum_t\n            break\n    return str(result)"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # A => 1, B => 0\n    alice = list(map(int, stdin.split()))\n    bob = list(map(int, stdin.split()))\n\n    alice.sort()\n    bob.sort()\n\n    min_time = 2**32\n    cur_sum = 0\n\n    def next_min(cur_sum: int) -> int:\n        for i in range(n):\n            alice_like = alice[i]\n            bob_like = bob[i]\n\n            # max(a_i, b_i) <= cur_sum\n            alice_like = max(alice_like, cur_sum)\n            bob_like = max(bob_like, cur_sum)\n\n            cur_sum += alice_like + bob_like\n\n        return cur_sum\n\n    # l, r => 0 ~ n\n    l, r = 0, n\n    while l <= r:\n        mid = (l + r) // 2\n        cur_sum = next_min(alice[mid]) + next_min(bob[mid])\n\n        # mid \ud3ec\ud568\n        if cur_sum < k:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return str(min(alice[l], bob[l]))\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a set of integers in the range $[1, 100]$, each of which has\n    a value between 1 and 10^8, find the maximum possible price\n    that is achievable with this restriction. Return the maximum value\n    if it is achievable, otherwise return -1.\n    '''\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    curr = a[0]\n    curr_max = curr\n    for i in range(1, n):\n        curr = curr + k\n        if a[i] - curr > k:\n            return -1\n        if curr > curr_max:\n            curr_max = curr\n    return curr_max\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    if q == 1:\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        res = (max(a) - min(a)) // k\n        if res == max(a) - min(a):\n            return str(res)\n        return '-1'\n\n    res = []\n    for i in range(q):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        res.append((max(a) - min(a)) // k)\n    return str(max(res))\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n, k = map(int, stdin.split())\n        lst = list(map(int, stdin.split()))\n        lst.sort()\n        b = lst[k-1]\n        a = lst[0]\n        if abs(a - b) > k:\n            print(-1)\n        else:\n            print(b)\n    return ''"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def split_query(line: str):\n        n, k = [int(i) for i in line.split()]\n        prods = [int(i) for i in input().split()]\n        return n, k, prods\n\n    def check_price(n, k, prods, b):\n        for i in prods:\n            if abs(i - b) > k:\n                return False\n        return True\n\n    n, k, prods = split_query(stdin)\n    b = 0\n    while True:\n        b += 1\n        if check_price(n, k, prods, b):\n            return str(b)"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read in the provided test cases\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    res = []\n    \n    # start looping through\n    for i in range(n):\n        # set the new price equal to the old price\n        new_price = a[i]\n        # loop through all products\n        for j in range(i+1, n):\n            # if the new price is less than the old price\n            if new_price < a[j]:\n                # increase the new price by 1\n                new_price += 1\n                # if the new price is greater than the maximum\n                if new_price > k:\n                    # set the new price to the maximum\n                    new_price = k\n                # add the new price to the list\n                res.append(new_price)\n                break\n        # if the new price is greater than the maximum\n        if new_price > k:\n            # set the new price to the maximum\n            new_price = k\n            # add the new price to the list\n            res.append(new_price)\n        else:\n            # add the new price to the list\n            res.append(new_price)\n    # print out the max\n    print(max(res))\n    # return\n    return"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        price = 0\n        m = n - 1\n        for i in range(n):\n            price += abs(a[i] - price)\n        if price <= k:\n            price = max(a)\n        else:\n            price = -1\n        print(price)\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    n, k = stdin[0], stdin[1]\n    prices = list(map(int, stdin[2:]))\n    ans = -1\n    if n == 1:\n        return str(prices[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(prices[i] - prices[j]) <= k:\n                ans = max(ans, prices[i] + prices[j])\n    if ans == -1:\n        return \"impossible\"\n    else:\n        return str(ans)"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        n, k = map(int, input().split())\n        b = list(map(int, input().split()))\n        sorted(b)\n        if len(b) == n:\n            max_price = max(b)\n            print(max_price)\n        else:\n            print(-1)"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = sorted(a, reverse=True)\n    max_b = p[0]\n    result = p[0]\n\n    for i in range(n):\n        if max_b - p[i] <= k:\n            result = max(result, p[i])\n        else:\n            return \"NO\"\n\n    return result\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    elements = []\n    for i in range(n):\n        elements.append(int(stdin.split()[i]))\n    \n    min_to_remove = 0\n    while True:\n        if len(elements) % 6!= 0:\n            break\n        if min_to_remove >= len(elements):\n            break\n        for i in range(min_to_remove):\n            if elements[i]!= min(elements[i], elements[i+1], elements[i+2], elements[i+3], elements[i+4], elements[i+5]):\n                break\n        else:\n            break\n        min_to_remove += 1\n    return str(min_to_remove)\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[1].strip().split(\" \")\n    n = int(a[0])\n    arr = list(map(int, a[1:]))\n    min = 0\n    ans = 0\n    for i in range(0, n):\n        if arr[i] % 6 == 0 and arr[i] > min:\n            min = arr[i]\n            ans += 1\n    if ans >= 1:\n        ans += min\n    else:\n        ans = n\n    return str(ans)\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [-1] * n\n    mod = 998244353\n\n    def min_subset(arr, i, sums):\n        if dp[i]!= -1:\n            return dp[i]\n        if i == len(arr):\n            dp[i] = sums\n            return dp[i]\n        elif i == 0:\n            dp[i] = 1\n            return dp[i]\n        else:\n            temp = sum(arr[:i])\n            if temp % 6 == 0:\n                dp[i] = min_subset(arr, i + 1, sums + 1)\n            else:\n                dp[i] = min(min_subset(arr, i + 1, sums + 1),\n                            min_subset(arr, i + 1, sums + 0))\n            return dp[i]\n\n    if n == 1:\n        return \"0\"\n    min_subset(a, 1, 0)\n    return str(min(dp))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    \n    for i in range(0,6,6):\n        summ = 0\n        for j in range(i,i+6):\n            summ+=a[j]\n        \n        if summ % 6 == 0:\n            count = 0\n            for j in range(i,i+6):\n                count+=1\n                if count > (len(a) - i):\n                    break\n                if a[j]!= max(a[i:i+6]):\n                    break\n            if count == (len(a) - i):\n                return str(i)\n    return str(len(a))\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    idx = 0\n    moves = 0\n    while idx < len(a) - 1:\n        if a[idx] % 6 == 0 and idx % 6 == 0:\n            moves += 1\n            a.pop(idx)\n            a.pop(idx)\n        elif a[idx] % 6 == 0 and idx % 6!= 0:\n            moves += 1\n            idx += 2\n        elif a[idx] % 6!= 0 and idx % 6 == 0:\n            moves += 1\n            idx += 1\n        else:\n            idx += 1\n    if moves == 0:\n        return '0'\n    return str(moves)\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    counter = 0\n    while True:\n        first = min(a)\n        a.remove(first)\n        if len(a) % 6!= 0:\n            break\n        counter += 1\n        for elem in a:\n            if elem % 6!= 0:\n                break\n        a.remove(elem)\n    return str(counter)\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1]))\n    min_del = float(\"inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (arr[i] * 6 + arr[j] * 5 + arr[k] * 4) % 6 == 0 and (arr[i] * 6 + arr[j] * 5 + arr[k] * 4) / 6 == i + j + k:\n                    if min_del > (arr[i] + arr[j] + arr[k]) * 2:\n                        min_del = (arr[i] + arr[j] + arr[k]) * 2\n    return str(min_del)\n\nprint(solution(input()))\n\n\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u21163\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(n), \u0433\u0434\u0435 n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434\u044b max() \u0438 min() \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u0438\u0445 \u043a \u0441\u043f\u0438\u0441\u043a\u0430\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 max() \u0438 min() (\u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 max() \u0438 min()).\n\n\u0422\u0430\u043a \u0436\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430:\n\n\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0441 \u0442\u0440\u0435\u043c\u044f \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443) \u2014 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n\n\u041d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u041d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u2014 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \"=\", \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a:\n\n$stdout_redirect=2\n$ python3 task_4.py\n\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430: 10.0\n\u041d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\ufffd"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    print(min(min(4, a.count(4), a.count(8)), min(2, a.count(15), a.count(16), a.count(23), a.count(42)), 0))\n    return \"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if(len(a)%6!= 0):\n        return -1\n    div = 6\n    res = 0\n    while(div):\n        res += (len(a)//div)\n        div //= 6\n    return res\n\n\nprint(solution(input()))"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(int, a))\n    k = len(a)\n    if k == 0:\n        return 0\n    for i in range(k):\n        if (a[i] == 4) or (a[i] == 8) or (a[i] == 15) or (a[i] == 16) or (a[i] == 23) or (a[i] == 42):\n            continue\n        for j in range(6):\n            if j == 0:\n                continue\n            if (k % j) == 0:\n                if ((k // j) % 6) == 0:\n                    return int(k // j)\n                else:\n                    return int((k // j) + 1)\n                break\n\nsolution(\"\"\"4 8 15 16 23\"\"\")\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\\n\" + str(min(map(int, stdin.split())))\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = list(map(int, stdin.split()))\n        print(solution_optimized(a, b))\n\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.strip())\n    for case in range(num_cases):\n        test_case = list(map(int, stdin.split()))\n        a = test_case[0]\n        b = test_case[1]\n        num_moves = 0\n        while a!= b:\n            if a < b:\n                a += min(10, a + 1)\n                num_moves += 1\n            else:\n                a -= min(10, a - 1)\n                num_moves += 1\n        print(num_moves)\n    return ''\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    In the first test case of the example,\n    the following sequence of moves can be applied:\n    13 -> 23 -> 32 -> 42\n    '''\n    t = int(stdin)\n    for _ in range(t):\n        a, b = [int(i) for i in stdin.split()]\n        moves = 0\n        while a < b:\n            if a < 10:\n                a += 1\n            else:\n                a -= 10\n            moves += 1\n        print(moves)\n\nsolution(input())\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, stdin.split())\n        d = 0\n        if a < b:\n            for i in range(1, a+1):\n                d += 1\n                if a + i == b:\n                    print(d)\n                    break\n        else:\n            for i in range(1, b+1):\n                d += 1\n                if a + i == b:\n                    print(d)\n                    break\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"3\"\n    a = list(map(int, stdin.split()))\n    b = sum(a) - max(a)\n    if b < 0:\n        return \"3\"\n    cnt = 0\n    while b!= a[0]:\n        b = b - a[0]\n        a[0] = a[0] + 1\n        if b < 0:\n            b = b + a[0]\n            a[0] = a[0] - 1\n        cnt += 1\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        stdin:\n       .\n\n    Output:\n       .\n    '''\n    # your code here\n    n = int(input())\n    for i in range(n):\n        a,b = list(map(int,input().split()))\n        if a > b:\n            print(1+b)\n        else:\n            print(1+a)"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    for test_case in test_cases:\n        x, y, n = test_case.split()\n        x, y, n = int(x), int(y), int(n)\n        #print(x,y,n)\n        for k in range(n+1):\n            if(x*(k%x) + y*(k%y) % x == y % x):\n                print(k)\n                break\n        "
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for test_case in range(int(stdin)):\n        x, y, n = list(map(int, stdin.split()))\n        if (x*y) % n == 0:\n            return str(x) + \" \" + str(y) + \" \" + str(n)\n        else:\n            max = n\n            while (n % x!= y):\n                n += max\n            return str(x) + \" \" + str(y) + \" \" + str(n)"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        x,y,n = list(map(int,stdin.split()))\n        if x>y:\n            x,y = y,x\n        if n > x:\n            n = x\n        k = 0\n        while k < n:\n            k += x\n            if k % y == 0:\n                break\n        print(k)\n\nsolution(input())\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, x, y, n = map(int, stdin.split())\n    pow_x = 2\n    pow_y = 2\n    while pow_x <= N:\n        pow_y = 2\n        while pow_y <= N:\n            if pow_y % x == pow_y - pow_x:\n                if pow_x + pow_y <= n:\n                    return str(pow_x + pow_y)\n            pow_y += 1\n        pow_x += 1\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, n = map(int, stdin.split())\n    n += 1\n    if (x, y) == (y, x):\n        return str(n)\n    for k in range(n, 0, -1):\n        if (k % x == y) and (k % y == x):\n            return str(k)\n    raise Exception(\"impossible\")\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, y, n = map(int, input().split())\n        if x == y:\n            if n % x == y:\n                return str(n)\n        if x == 0:\n            if y % x == 0:\n                return str(x)\n        if x % y == 0:\n            return str(y)\nprint(solution(input()))\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, y, n = stdin.split()\n        x = int(x)\n        y = int(y)\n        n = int(n)\n        y = x*y%x\n        x = n%x\n        y = x%y\n        x = x//y\n        print(x)\n\nsolution(input())\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x,y,n = map(int, stdin.split())\n    for k in range(n):\n        if(k % x == y%x):\n            print(k)\n            return\n    print(k)\n    return"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    for k in range(n + 1):\n        if 0 <= k < n and k % x == y:\n            return str(k)\n"
    }
]