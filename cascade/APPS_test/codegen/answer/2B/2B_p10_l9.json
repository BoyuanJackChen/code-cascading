[
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = list(map(int, stdin.split()[1:]))\n    # find all possible pairs in the graph\n    pairs = [(i, j) for i in range(1, n) for j in range(i + 1, n) if i!= j]\n    # we are going to try every combination\n    res = 0\n    for i, j in pairs:\n        if not (i, j) in edges and not (j, i) in edges:\n            # find the length of the paths\n            p1, p2 = find_path(i, j, edges)\n            res = max(res, p1 + p2)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = {}\n\n    for i in range(1, n+1):\n        graph[i] = []\n\n    for i in range(1, n+1):\n        line = stdin.split()\n        u = int(line[0])\n        v = int(line[1])\n        if u!= v:\n            graph[u].append(v)\n            graph[v].append(u)\n\n    res = 0\n    for i in range(1, n+1):\n        edges = set()\n        for j in range(1, n+1):\n            if j!= i:\n                edges.update(set(graph[j]))\n        res = max(res, len(edges))\n\n    return str(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    a = input().split()\n    a = list(map(int, a))\n    b = input().split()\n    b = list(map(int, b))\n    c = input().split()\n    c = list(map(int, c))\n    return len(set(a + b + c))\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, c = list(map(int, stdin.split()))\n    if a == b and b == c:\n        return '0'\n    if a == b or b == c:\n        return '1'\n    if b == c:\n        return '2'\n    if a > b and a > c:\n        return str(min(a, b, c) - 1)\n    if a > b and b > c:\n        return str(min(a, b) - 1)\n    if a < b and a < c:\n        return str(min(b, c) - 1)\n    if b < a and a < c:\n        return str(min(a, c) - 1)\n    if c < b and b < a:\n        return str(min(b, a) - 1)\n    if c < a and a < b:\n        return str(min(a, b) - 1)\n    return str(min(a, b, c) - 1)\n\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for i in range(n + 1)]\n    for line in stdin.splitlines():\n        a, b = (int(i) for i in line.split())\n        tree[a].append(b)\n        tree[b].append(a)\n    # find uppwer boundary\n    # find uppwer boundary\n    # build a tree\n\n    # uppwer boundary\n    # uppwer boundary\n    # find uppwer boundary\n    # find uppwer boundary\n    # find uppwer boundary\n    # print the answer\n    return \"1\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = []\n    for _ in range(n-1):\n        a, b = map(int, stdin.split())\n        arr.append((a, b))\n    res = 0\n    max_len = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            print(i,j)\n            a, b = arr[i]\n            c, d = arr[j]\n            res = max(res, (d-b)-(c-a), (c-b)-(d-a))\n            # print(res)\n    for i in range(n):\n        a, b = arr[i]\n        res = max(res, (b-a), (b-c), (c-a))\n    return res"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    edges = [[] for _ in range(n)]\n    for i in range(len(stdin)):\n        x, y = list(map(int, stdin[i].split()))\n        edges[x - 1].append(y - 1)\n        edges[y - 1].append(x - 1)\n\n    connections = []\n    for i in range(n):\n        for j in range(n):\n            if i!= j and (i, j) not in connections:\n                for k in range(n):\n                    if k!= i and (i, k) not in connections:\n                        for l in range(n):\n                            if k!= l and (l, k) not in connections:\n                                for m in range(n):\n                                    if m!= i and (i, m) not in connections:\n                                        if m!= l and (l, m) not in connections:\n                                            if (i, j) not in connections and (j, i) not in connections:\n                                                connections.append((i, j))\n                                                connections.append((j, i))\n                                                connections.append((i, m))\n                                                connections.append((m, i))\n                                                connections.append((i, l))\n                                                connections.append((l, i))\n                                                connections.append((j, k))\n                                                connections.append((k, j))\n                                                connections.append((k, l))\n                                                connections.append((l, k))\n    return len(connections)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find(a: int, b: int, c: int) -> bool:\n        return a < b < c and a + b > c > a + b\n    \n    n = int(stdin.split()[0])\n    graph = []\n    for _ in range(n - 1):\n        a, b, c = map(int, stdin.split()[1].split())\n        if find(a, b, c):\n            return str(a) +'' + str(b) +'' + str(c)\n        \n        graph.append((a, b, c))\n        \n    graph.sort(key=lambda x: x[0])\n    \n    length = len(graph)\n    \n    x = 0\n    for i in range(length):\n        cur = graph[i]\n        \n        while x < length:\n            test = graph[x]\n            \n            if test[0] < cur[0] and test[1] < cur[1] and test[2] < cur[2]:\n                x += 1\n            elif test[0] > cur[0] and test[1] > cur[1] and test[2] > cur[2]:\n                x += 1\n            else:\n                if x == length - 1:\n                    return str(cur[0]) +'' + str(cur[1]) +'' + str(cur[2])\n                x += 1"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    L = [int(i) for i in stdin.split()[1:]]\n    b = []\n    c = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if L[i]!= L[j]:\n                if L[i] > L[j]:\n                    b.append(L[i])\n                    if L[j] not in c:\n                        c.append(L[j])\n                else:\n                    c.append(L[j])\n                    if L[i] not in b:\n                        b.append(L[i])\n    if len(b) > len(c):\n        return len(b)\n    else:\n        return len(c)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = sorted(map(int, stdin.split()[1].split()))\n    y = sorted(map(int, stdin.split()[1].split()))\n    dp = [[] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(n):\n            if x[i] == 1:\n                dp[i].append(x[j])\n            if y[i] == 1:\n                dp[i].append(y[j])\n    answer = set(dp[0])\n    for i in range(1, n):\n        temp = set(dp[i])\n        answer.intersection_update(temp)\n    return''.join([str(x) for x in sorted(list(answer))])\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    x = int(lst[0])\n    y = int(lst[1])\n    lst2 = [x, y]\n    s_lst = sorted(lst2)\n    # print(s_lst)\n    lst3 = []\n    for i in range(x):\n        if i in s_lst:\n            lst3.append(i)\n    for i in range(y):\n        if i in s_lst:\n            lst3.append(i)\n    lst3.sort()\n    # print(lst3)\n    return ''.join(map(str, lst3))\nprint(solution(input()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    divisors_x = set([1, x])\n    divisors_y = set([1, y])\n    divisors_x.update(sorted([i for i in range(2, int(x ** 0.5) + 1) if not x % i]))\n    divisors_y.update(sorted([i for i in range(2, int(y ** 0.5) + 1) if not y % i]))\n    divisors_x_unique = list(divisors_x - divisors_y)\n    divisors_y_unique = list(divisors_y - divisors_x)\n    divisors_x_unique.sort()\n    divisors_y_unique.sort()\n    return str(divisors_x_unique[0]) + \" \" + str(divisors_y_unique[0])\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    l = list(range(1, max(x, y) + 1))\n    k = 0\n    for i in range(1, x + 1):\n        if i in l:\n            l.remove(i)\n    for j in range(1, y + 1):\n        if j in l:\n            l.remove(j)\n    for i in l:\n        for j in l:\n            if i == j:\n                k += 1\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = stdin.split()\n    divisors = list(map(lambda x: int(x), divisors))\n    divisors.sort()\n\n    for i in range(len(divisors)):\n        for j in range(i + 1, len(divisors)):\n            if divisors[j] % divisors[i] == 0:\n                divisors[i] = divisors[i] + divisors[j]\n                divisors[j] = 0\n\n    return str(divisors[0]) + \" \" + str(divisors[1])\n\n\nsolution(\"2 4 1 2 4 1 20 4 5\")\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.splitlines()\n    x = int(x)\n    y = int(y)\n    y = int(y)\n\n    for i in range(2, x + 1):\n        for j in range(2, y + 1):\n            if i == 1 or j == 1 or i == j:\n                continue\n            if i % j == 0:\n                x = i\n                y = j\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors_list = []\n    for i in range(n):\n        divisors_list.append(int(stdin.split()[i]))\n\n    result = []\n    divisors_list.sort()\n    for i in range(len(divisors_list) - 1):\n        if divisors_list[i] == divisors_list[i+1]:\n            result.append(divisors_list[i])\n            result.append(divisors_list[i+1])\n    print(str(max(result)))\n    return str(max(result))\n\n\nsolution(input())\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n\n    divisors_x = set(i for i in range(1, x + 1) if x % i == 0)\n    divisors_y = set(i for i in range(1, y + 1) if y % i == 0)\n\n    divisors_union = divisors_x | divisors_y\n    divisors_intersection = divisors_x & divisors_y\n\n    return (f'{min(divisors_intersection)} {max(divisors_intersection)}')"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x, y = int(x), int(y)\n\n    div_x = [i for i in range(2, x+1) if x % i == 0]\n    div_y = [i for i in range(2, y+1) if y % i == 0]\n\n    return str(div_x[0]) + str(div_y[0])"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdout = []\n    for row in stdin.strip().split(\"\\n\"):\n        n = int(row[0])\n        m = int(row[1])\n        k = int(row[2])\n        if n > 1:\n            col_sum = 0\n            col = []\n            for c in range(m):\n                col.append(int(row[c + 1]))\n                col_sum += col[c]\n            col = sorted(col, reverse=True)\n            l = len(col)\n            mid = int((m + l - 1) / 2)\n            col_mid = col[mid]\n            result = 0\n            while col_mid <= k:\n                while l > 0:\n                    if col_sum - col[l - 1] >= k:\n                        result += col_sum - col[l - 1]\n                        col_sum -= col[l - 1]\n                    else:\n                        col_sum -= col[l - 1]\n                        l -= 1\n                    break\n                while l < m:\n                    if col_sum - col[l] >= k:\n                        result += col_sum - col[l]\n                        col_sum -= col[l]\n                    else:\n                        col_sum -= col[l]\n                        l += 1\n                    break\n                col_sum -= col_mid\n                l = mid\n                mid = int((m + l - 1) / 2)\n                col_mid = col[mid]\n            stdout.append(str(result))\n        else:\n            stdout.append(str(k))\n    return \"\\n\".join(stdout)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    max_sum = -(1 << 31)\n    sum = 0\n\n    for row in a:\n        sum_row = sum\n        sum = 0\n\n        for i in range(len(row)):\n            if i % 2 == 1:\n                sum += row[i]\n                if sum % k == 0:\n                    if sum > max_sum:\n                        max_sum = sum\n\n        if sum_row > max_sum:\n            max_sum = sum_row\n\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        tmp = []\n        for j in range(m):\n            if j > 0 and j % 2 == 0:\n                tmp.append(a[i][j] + a[i][j - 1] + a[i][j - 2])\n            if j > 1 and j % 2 == 1:\n                tmp.append(a[i][j] + a[i][j - 1] + a[i][j - 2] + a[i][j - 3])\n        tmp = sorted(tmp, reverse=True)\n        ans = max(ans, sum(tmp[:min(len(tmp), m // 2)]))\n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = [[int(e) for e in line.split()] for line in stdin.splitlines()]\n    input_arr = input_arr[:-1]\n    m = len(input_arr)\n    n = len(input_arr[0])\n    for row in input_arr:\n        assert len(row) == n\n    k = int(input_arr[0][0])\n\n    if k <= 0:\n        return 0\n\n    ans = 0\n    for i in range(m // 2):\n        a = 0\n        for j in range(n):\n            a += input_arr[i][j]\n        if a % k!= 0:\n            continue\n        a = 0\n        for j in range(n):\n            a += input_arr[m - 1 - i][j]\n        if a % k!= 0:\n            continue\n        ans = max(ans, a)\n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    result = []\n    for row in a:\n        row_max = sum(row[:min(len(row), int(round(m / 2)))])\n        summ = row_max\n        result.append(row_max)\n        for i in range(len(row)):\n            if i < min(len(row), int(round(m / 2))):\n                summ += row[i]\n                if summ % k == 0:\n                    result.append(summ)\n    print(max(result))\n    return max(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = [[int(i) for i in stdin.split()] for _ in range(3)]\n    # print(inp)\n    k = int(stdin.split()[2])\n    ans = 0\n    # print(k)\n    for i in range(1, len(inp)):\n        m = min(inp[i])\n        # print(m)\n        if m % k == 0:\n            ans = max(ans, m)\n    # print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    n = min(m, k, n, m - k)\n    l = [[a % k for a in range(k, k + n)]]\n    for i in range(1, m):\n        l.append([a % k for a in range(i * k, i * k + n)])\n    return str(max(map(sum, l)))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    mat = [[int(j) for j in stdin.split()] for i in range(n)]\n    res = -1\n    for i in range(n):\n        sum_of_row = 0\n        for j in range(min(m, int(m / 2))):\n            sum_of_row += mat[i][j]\n        if res < sum_of_row % k or res == -1:\n            res = sum_of_row % k\n    return str(res)"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n    \n    \n    #print(matrix)\n    \n    def check(row):\n        arr = row[0:len(row)//2]\n        for a in arr:\n            if a%k!= 0:\n                return False\n        return True\n    \n    #print(check(matrix[0]))\n    \n    for row in matrix:\n        if check(row):\n            #print(row)\n            \n            if sum(row)%k == 0:\n                return sum(row)\n            else:\n                #print(sum(row)%k)\n                return (sum(row)//k)\n            \n        #print(sum(row))\n    return -1\n\nsolution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\")\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns, k = (int(x) for x in stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(rows)]\n    max_sum = 0\n\n    for row in range(rows):\n        for col in range(columns):\n            sum = 0\n\n            for row_index, val in enumerate(a[row]):\n                if row_index == 0:\n                    sum += val\n                else:\n                    if sum % k == 0:\n                        max_sum = max(max_sum, sum)\n                        sum = 0\n                        break\n                    else:\n                        sum += val\n\n    return str(max_sum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    res = 1\n    for i in range(1, n):\n        if a[i-1] < a[i]:\n            res = max(res, i + 1)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    s = \"\"\n    \n    # This is the code that is causing the issue\n    # a.sort(reverse=True)\n\n    # for i in range(len(a)):\n    #     if i + 1 < len(a):\n    #         if a[i] > a[i+1]:\n    #             s += 'R'\n    #             k += 1\n    #         else:\n    #             s += 'L'\n    #             k += 1\n    \n    #     else:\n    #         s += 'R'\n    #         k += 1\n    #     \n    # return k\n\nsolution(stdin)"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    max_len = 0\n    ans = 'R'\n\n    def dp(n, a, res, ans):\n        if n == 0:\n            nonlocal max_len, ans\n            if len(res) > max_len:\n                max_len = len(res)\n                ans = res\n            return\n        if a[0] > res[-1]:\n            res.append('R')\n            dp(n - 1, a, res, ans)\n            res.pop()\n        else:\n            res.append('L')\n            dp(n - 1, a, res, ans)\n            res.pop()\n\n    dp(n, a, [], ans)\n    return ''.join(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    ans = k = r = c = -1\n    for i in range(n):\n        if c == -1 or c < a[i]:\n            c = a[i]\n            ans = k = 1\n        elif c > a[i]:\n            k += 1\n            c = a[i]\n            ans = k\n        else:\n            ans = max(ans, k)\n            k = 1\n            c = a[i]\n    return str(ans)"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    # a = sorted(list(set(a)))\n    if n == 1:\n        return '1'\n    a.sort()\n    i = 0\n    count = 1\n    while i + 1 < len(a):\n        if a[i] == a[i + 1]:\n            count += 1\n            i += 1\n        else:\n            break\n    if i == len(a) - 1:\n        return str(count)\n    if i == 0:\n        return '1'\n    # print(count, end=' ')\n    return str(count + 1)\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    counter = 0\n    max_counter = 0\n    max_str = ''\n    for i in range(len(a)):\n        if i == 0:\n            max_counter += 1\n            max_str += 'L'\n        else:\n            if a[i] < a[i - 1]:\n                max_counter += 1\n                max_str += 'R'\n            elif a[i] > a[i - 1]:\n                max_counter += 1\n                max_str += 'L'\n            else:\n                max_counter += 1\n                max_str += 'L'\n    return str(max_counter) +'' + max_str\n\n'''"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    curr_min = curr_max = a[0]\n    ans = 1\n    for i in range(1, n):\n        curr_min = min(curr_min, a[i])\n        curr_max = max(curr_max, a[n - i - 1])\n        if curr_min!= curr_max:\n            ans = max(ans, i + 1)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import product\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    max_len = 0\n    for move in product(['L', 'R'], repeat=N):\n        cur_len = 1\n        cur_index = 0\n        for i in range(1, len(a)):\n            if move[i - 1] == 'L':\n                cur_len += 1\n            elif move[i - 1] == 'R':\n                cur_len -= 1\n            if a[i] < a[cur_index]:\n                cur_len += 1\n                cur_index = i\n        cur_len = max(cur_len, max_len)\n        if cur_len > max_len:\n            max_len = cur_len\n    return str(max_len)\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return max_increasing_sequence_length(a)\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    max_ = max(a)\n    min_ = min(a)\n\n    if max_ > min_:\n        return -1\n    elif max_ == min_:\n        return str(max_)\n\n    diffs = {}\n\n    for x in range(max_, min_ - 1, -1):\n        total = 0\n        for num in a:\n            total += num\n            if total == x:\n                diffs[x] = 1\n    print(diffs)\n    res = min(diffs.keys())\n    print(res)\n\n    return str(res)"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0] == a[1]:\n        return \"0\"\n    if a[0] > a[1]:\n        return \"-\"\n    if n == 1:\n        return \"3\"\n    ans = a[0]\n    for i in range(1, n):\n        if a[i] == ans:\n            continue\n        a[i] = ans\n        if abs(a[i]) > abs(ans):\n            ans = a[i]\n    if ans < 0:\n        return \"-1\"\n    return str(ans)\n\nsolution(\"6\")\nsolution(\"2 4 4 7 4 1\")\nsolution(\"5 2 2 5 2 5\")\nsolution(\"4 1 2 2 5\")\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    if A[0] == A[1] == A[2]:\n        return -1\n    if A[0] == A[1]:\n        if A[2] - A[1] < 0:\n            return -1\n        else:\n            return A[2] - A[1]\n    if A[1] == A[2]:\n        if A[0] - A[1] < 0:\n            return -1\n        else:\n            return A[0] - A[1]\n    else:\n        return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    ans = 0\n    if n == 1:\n        print(max(a))\n        return\n    else:\n        for i in range(1,n):\n            if i == a[i]:\n                ans = a[i]\n        \n        if ans == 0:\n            print(-1)\n            return\n        \n        for i in range(1,n):\n            if i == a[i] + ans or i == a[i] - ans:\n                ans = i\n            \n        print(ans)\n        return\n\nsolution(input())\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if len(set(a)) == 1:\n        return str(min(a))\n    if min(a) >= 0:\n        return str(min(a))\n    else:\n        return \"-1\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1]\n    l = 0\n    r = n-1\n    while(l < r):\n        m = (l+r)//2\n        if(a[m] > 0):\n            r = m\n        else:\n            l = m+1\n    if(a[l] > 0):\n        return str(l)\n    else:\n        return -1\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    max_sums = []\n    for i in range(n):\n        sums = [0] * n\n        sums[i] = a[i]\n        for j in range(i):\n            sums[j] = sums[j] + a[j]\n        max_sums.append(max(sums))\n\n    ans = -1\n    for i in range(n):\n        sums = [0] * n\n        sums[i] = a[i]\n        for j in range(i):\n            sums[j] = sums[j] + a[j]\n        for j in range(i):\n            sums[j] = sums[j] - a[j]\n        if max_sums == sums:\n            ans = i\n            break\n\n    if ans == -1:\n        return \"-\"\n    return str(ans)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    d = 0\n    m = a[0]\n    for i in range(1, len(a)):\n        if a[i] < 0 and abs(m) > abs(a[i]):\n            m = -1\n        if m > 0:\n            d = max(d, m)\n        m = a[i] + d if a[i] > 0 else a[i] - d\n    return str(d) if d > 0 else \"-\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, = stdin.split()\n    res = []\n    for i in range(len(a)):\n        res.append(a[i])\n        if a[i] < 0:\n            if i == 0:\n                res[i] += 1\n            elif i == len(a)-1:\n                res[i] -= 1\n            else:\n                res[i] -= 1\n                res[i+1] += 1\n    res = sorted(res)\n    print(res)\n    if sum(res) > 0:\n        return -1\n    else:\n        return ''.join(map(str, res))\n\nsolution('''1 4 4 7 4 1\n''')\n\nsolution('''5\n2 2 5 2 5\n''')\n\nsolution('''4\n1 3 3 7\n''')\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1]))\n    a.sort()\n    min = a[0]\n    d = -1\n    for i in range(n):\n        d = a[i]\n        if d > min:\n            continue\n        for j in range(n):\n            if i == j:\n                continue\n            if d <= a[j]:\n                a[i] += d\n                break\n            if d > a[j]:\n                a[i] -= d\n                break\n        if a[i] < 0:\n            return '-1'\n    return str(min)\n    \n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 4 4\n   ... 1 1 3 5\n   ... 3 1 5 5\n   ... ''')\n    'NO'\n    >>> solution('''3 3 7 5\n   ... 0 0 4 6\n   ... 0 0 7 4\n   ... ''')\n    'YES'\n    >>> solution('''5 2 10 5\n   ... 3 1 7 6\n   ... 8 1 11 7\n   ... ''')\n    'YES'\n    \"\"\"\n    n = int(stdin)\n    w1 = list(map(int, stdin.split()))\n    w2 = list(map(int, stdin.split()))\n    b1 = list(map(int, stdin.split()))\n    b2 = list(map(int, stdin.split()))\n    x1 = w1[0]\n    y1 = w1[1]\n    x2 = w2[2]\n    y2 = w2[3]\n    x3 = b1[0]\n    y3 = b1[1]\n    x4 = b2[2]\n    y4 = b2[3]\n    x5 = b2[0]\n    y5 = b2[1]\n    x6 = b2[2]\n    y6 = b2[3]\n    if max(x1, x2) < min(x3, x4) or max(x5, x6) < min(x3, x4) or max(x3, x4) < min(x1, x2) or max(x5, x6) < min(x1, x2):\n        return \"NO\"\n    if max(y1, y2) < min(y3, y4) or max(y5, y6) < min(y3, y4) or max(y3, y4) < min(y1, y2) or max(y5, y6) < min(y1, y2):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    print('YES' if x1 < min(x2, x3) < max(x1, x2) and y1 < min(y2, y3) < max(y1, y2) else 'NO')\n\nsolution(input())\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    x3, y3, x4, y4 = list(map(int, stdin.split()))\n    x5, y5, x6, y6 = list(map(int, stdin.split()))\n\n    if ((x2 > x1 and x4 > x3) or (x3 > x1 and x2 > x4)) and (\n            (y2 > y1 and y4 > y3) or (y3 > y1 and y2 > y4)):\n        if (x3 < x1 < x5 and x4 < x3 < x6) or (\n                x1 < x3 < x5 < x4 and x2 < x1 < x6) or (\n                x3 < x1 < x5 < x2 and x4 < x3 < x6):\n            if (y3 < y1 < y5 and y4 < y3 < y6) or (\n                    y1 < y3 < y5 < y4 and y2 < y1 < y6) or (\n                    y3 < y1 < y5 < y2 and y4 < y3 < y6):\n                return 'YES'\n        return 'NO'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if (x2 - x1) * (y2 - y1) <= 0:\n        return \"YES\"\n    x3, y3, x4, y4 = map(int, stdin.split())\n    if (x4 - x3) * (y4 - y3) <= 0:\n        return \"YES\"\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if (x6 - x5) * (y6 - y5) <= 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if x1 <= min(x3, x4) and min(x3, x4) <= x2 and y1 <= min(y3, y4) and min(y3, y4) <= y2:\n        return \"YES\"\n    if x3 <= max(x1, x5) and max(x1, x5) <= x4 and y3 <= max(y1, y5) and max(y1, y5) <= y4:\n        return \"YES\"\n    if x5 <= max(x3, x4) and max(x3, x4) <= x6 and y5 <= max(y3, y4) and max(y3, y4) <= y6:\n        return \"YES\"\n    if x1 <= min(x3, x5) and min(x3, x5) <= x2 and y1 <= min(y3, y5) and min(y3, y5) <= y2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def inside(x1, y1, x2, y2, x3, y3, x4, y4):\n        return (\n            (y3 > y4) and\n            (y2 > y1) and\n            (x3 > x1) and\n            (x2 < x4) and\n            (y2 > y3) and\n            (y1 < y4) and\n            (x1 < x3) and\n            (x4 < x2)\n        )\n\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    return \"YES\" if inside(x1, y1, x2, y2, x3, y3, x4, y4) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.split()))\n    return 'YES' if (\n        (x_1 > x_3 and x_1 > x_4) and\n        (y_1 > y_3 and y_1 > y_4) and\n        (x_2 < x_5 and x_2 < x_6) and\n        (y_2 < y_5 and y_2 < y_6)) else 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if not (x1 < x2 and y1 < y2 and x3 < x4 and y3 < y4 and x5 < x6 and y5 < y6):\n        return \"NO\"\n    if (x3 <= x1 and y3 <= y1) or (x3 <= x2 and y3 <= y2):\n        return \"YES\"\n    if (x4 <= x1 and y4 <= y1) or (x4 <= x2 and y4 <= y2):\n        return \"YES\"\n    if (x5 <= x1 and y5 <= y1) or (x5 <= x2 and y5 <= y2):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Instead of reading the input from stdin, you may have to change the variable assignment to read from the string input.\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.split()))\n\n    # Write your code here\n    return \"YES\" if (x_3 < x_5 < x_6 and x_1 < x_3 < x_4 and x_2 < x_4 < x_5 and y_1 < y_3 < y_4 and y_2 < y_4 < y_5) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    p1 = [x1, y1]\n    p2 = [x2, y2]\n    p3 = p1\n    p4 = p2\n    # print(p1, p2, p3, p4)\n    # p1p2 =  [p1[0]-p2[0], p1[1]-p2[1]]\n    # p3p4 =  [p3[0]-p4[0], p3[1]-p4[1]]\n    # print(p1p2, p3p4)\n    # if p1p2!= p3p4:\n    #     return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    x = x + 1\n    y = x\n    count = 0\n    while y!= 0:\n        count = count + 1\n        y = x\n        x = x * x\n    return str(count)\n    \ndef"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your code will be run on the following line:\n    print(solution(input()))\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(1, 101):\n        if not count:\n            if stdin.count(i) == 1:\n                count += 1\n        else:\n            count = count * 2\n            if stdin.count(i) == 1:\n                count += 1\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  input = int(stdin)\n  cnt = 0\n  \n  for i in range(1, 1001):\n    cnt += 2**(i-1) + 1 if input - i > 0 else 0\n  \n  return cnt\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_reachable(x: int) -> list:\n        return [x] + [x + i for i in range(1, 21) if not (x + i) % 10]\n\n    return len(set(find_reachable(int(stdin))))"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(int(stdin)))\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = int(a)\n    count = 0\n    for i in range(1, 100):\n        a = a + 1\n        if a < 10000:\n            print(a)\n            count = count + 1\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    return str(len(set(range(int(stdin[0])))))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def f(a):\n        while True:\n            a += 1\n            if a % 10 == 0:\n                a += 1\n            yield a\n\n    def g(a):\n        while True:\n            a = str(a)\n            if a == a[::-1]:\n                return\n            a += str(int(a) + 1)\n            a = int(a)\n            if a % 10 == 0:\n                a += 1\n            yield a\n\n    def h(a):\n        while True:\n            a += 1\n            if a % 10 == 0:\n                a += 1\n            yield a\n\n    a = int(stdin)\n    for func in (f, g, h):\n        for i in func(a):\n            if i == a:\n                return '1'\n    return '0'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    answers = [int(x) for x in stdin.split()[1:]]\n    missing = []\n    for i in range(1, n + 1):\n        if i not in answers:\n            missing.append(i)\n    if len(missing) == 0:\n        return \" \".join([str(x) for x in answers])\n    for i in range(len(missing)):\n        if missing[i] not in answers:\n            answers.append(missing[i])\n    return \" \".join([str(x) for x in answers])\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    f = list(map(int, stdin[1].split()))\n    d = {}\n    for i in range(len(f)):\n        if f[i] not in d:\n            d[f[i]] = i\n        else:\n            if d[f[i]] == i:\n                d[f[i]] = -1\n    print(*sorted(d.values()))\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *n = map(int, stdin.split())\n    if len(n) == 1:\n        return \"0\"\n\n    friends = set(range(len(n)))\n    for i in range(len(n)):\n        if n[i] == 0:\n            friends.discard(i)\n    return \" \".join(map(str, sorted(friends)))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    friends = list(map(int, stdin.split()))\n    gifts = list(range(1, n + 1))\n    for friend in friends:\n        if friend!= 0:\n            gifts.remove(friend)\n    return''.join(map(str, gifts))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    known_friends = set()\n    for friend in friends:\n        if friend not in known_friends:\n            known_friends.add(friend)\n    for known_friend in known_friends:\n        if friends.count(known_friend) == 1:\n            ans += 1\n            if friends.count(known_friend) == 1:\n                friends.remove(known_friend)\n            if friends.count(known_friend) > 1:\n                friends.remove(known_friend)\n    return \" \".join(map(str, friends))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = [int(stdin.readline()) for i in range(n)]\n    answers = []\n    for friend in range(1, n+1):\n        if friends[friend-1]!= 0:\n            for i in range(n):\n                if friends[i]!= 0 and i!= friend:\n                    answers.append(i)\n    if answers:\n        return \"\\n\".join(str(i) for i in answers)\n    else:\n        return \"-1\""
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num_friends = int(stdin)\n    friends_and_gifts = list(map(int, stdin.split()))\n    friends_and_gifts.sort()\n    gifts_given_by_friends = {}\n    friends_who_gifted_to = []\n    for friend in friends_and_gifts:\n        if friend not in gifts_given_by_friends:\n            gifts_given_by_friends[friend] = 0\n        gifts_given_by_friends[friend] += 1\n    for friend in gifts_given_by_friends:\n        if gifts_given_by_friends[friend] == 1:\n            friends_who_gifted_to.append(friend)\n    result = []\n    if len(friends_who_gifted_to) == num_friends:\n        for i in range(num_friends):\n            result.append(friends_who_gifted_to[i])\n    else:\n        for friend in gifts_given_by_friends:\n            if gifts_given_by_friends[friend] == 1:\n                if friend not in friends_who_gifted_to:\n                    result.append(friend)\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return\n    N = int(stdin.strip())\n    print(N)\n    friends = {i: 0 for i in range(1, N+1)}\n    for friend in stdin.strip().split(\"\\n\"):\n        f = int(friend)\n        friends[f] += 1\n    print(friends)\n    max_value = max(friends.values())\n    for k, v in friends.items():\n        if v == max_value:\n            return k\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n    for i in range(n):\n        if friends[i] == 0:\n            friends[i] = i\n    for i in range(n):\n        if friends[i] == 0:\n            for j in range(i+1, n):\n                if friends[j] == 0:\n                    friends[i], friends[j] = j, i\n    ans = \" \".join(map(str, friends))\n    return ans\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    usage: <function name> [ <arg> ]\n    <function name> is the function name.\n    <arg> is the argument that the function needs, if any.\n    '''\n    # collect the arguments\n    args = stdin.split()\n    n = int(args[0])\n    gifts = list(map(int, args[1:]))\n    # calculate the answer\n    result = []\n    # print all the results\n    for i in range(n):\n        result.append(find_pair(gifts, i))\n    return''.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # a: list of numbers\n    # k: number of colors\n    # n: size of array\n    def color_count(a, k, n):\n        # k: number of colors\n        # n: size of array\n        # a: list of numbers\n        counts = {i: 0 for i in range(k)}\n        for num in a:\n            counts[num % k] += 1\n        return counts\n\n    counts = color_count(a, k, n)\n    # print(counts)\n\n    def get_answer(k):\n        if k == 1:\n            if 1 in counts:\n                return str(1)\n            else:\n                return \"NO\"\n        if k == 2:\n            if 1 in counts and 2 in counts:\n                if counts[1] == 1 and counts[2] == 1:\n                    return str(1) + \" \" + str(1)\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        if k > 2:\n            if (1 in counts and 2 in counts) and (counts[1] == 1 or counts[2] == 1):\n                answer = str(1) + \" \" + str(2)\n                for i in range(3, k + 1):\n                    if counts[i] == 1:\n                        answer += \" \" + str(i)\n                return answer\n            else:\n                return \"NO\"\n\n    print(get_answer(k))\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    if k < 1 or k > n:\n        return \"NO\"\n    if k == 1 and a == sorted(a):\n        return \"YES\"\n    if a == sorted(set(a)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n\n    for c in range(1, k + 1):\n        c = str(c)\n        count = 0\n        for i in range(1, k + 1):\n            if (c in str(i)):\n                count += 1\n        if count > 0:\n            continue\n        else:\n            for i in range(0, len(b) - 1):\n                if b[i] == c:\n                    b.remove(b[i])\n            if len(b) == 0:\n                return \"YES\"\n    return \"NO\"\n\n\nsolution(input())\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    arr = list(map(int, stdin.split()))\n\n    def valid(col):\n        for i in range(len(arr)):\n            if arr[i] in col:\n                return False\n        return True\n\n    def permutation(prev, cur):\n        if len(prev) == k:\n            print('YES')\n            print(*prev)\n            return\n\n        for i in range(len(cur)):\n            if valid(prev + [cur[i]]):\n                permutation(prev + [cur[i]], cur[:i] + cur[i + 1:])\n\n    permutation([], list(range(1, n + 1)))\n    return \"NO\" if not valid(prev) else \"YES\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n > 5000:\n        return \"NO\"\n    if k <= 1 or k >= n:\n        return \"NO\"\n    colors = [0] * k\n    for i in a:\n        if i < 1 or i > n:\n            return \"NO\"\n        colors[i - 1] += 1\n    for i in range(1, k):\n        if colors[i - 1]!= 1 and colors[i]!= 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    if len(a) < 3: return 'NO'\n    if len(set(a)) < len(a): return 'NO'\n\n    counts = collections.defaultdict(int)\n    for i in a:\n        counts[i] += 1\n    for k in range(1, len(a)):\n        if a[k] > a[k - 1] and counts[a[k]]!= 1:\n            return 'NO'\n        if a[k] < a[k - 1] and counts[a[k]] > 1:\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n\n    if n < 3 or k < 1 or max(arr) > 5000 or min(arr) < 1:\n        return 'NO'\n\n    cnt = 1\n    for i in range(1, k):\n        if arr.count(i) == 0:\n            return 'NO'\n    for j in range(1, k):\n        if arr.count(j) == k:\n            return 'NO'\n\n    for i in range(1, k):\n        if i not in arr:\n            return 'NO'\n\n    return 'YES'\n\n\nsolution(input())\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, k):\n        for j in range(i):\n            if a[j] % i!= 0:\n                break\n        else:\n            count += 1\n\n    for i in range(1, k):\n        for j in range(i, n):\n            if a[j] % i!= 0:\n                break\n        else:\n            count += 1\n    print(f'YES\\n{count}\\n{a}')\n    return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = \"\"\n    if len(set(a)) < k:\n        return \"NO\"\n    else:\n        for i in range(n):\n            if a.count(a[i]) < k:\n                return \"NO\"\n            for j in range(k):\n                if a[i] in range(j + 1, k + 1):\n                    a[i] = j + 1\n                    break\n        for i in range(n):\n            s += str(a[i])\n        return s"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(\"YES\")\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j < i:\n                for h in range(1, n + 1):\n                    if h < j:\n                        if h < i:\n                            if a[h] % i!= 0:\n                                print(\"NO\")\n                            else:\n                                print(\"YES\")\n                                print(i, j, h)\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    y_remainder = y % x\n    if y_remainder == 0:\n        return n - 1\n    y_to_x = x // 2\n    y_to_y = y - y_remainder\n    y_to_n = x // 2\n    y_to_n_remainder = y_remainder\n    x_to_n = x // 2\n    x_to_n_remainder = y_remainder\n    n_to_x = y_to_x + x_to_n\n    n_to_y = y_to_n + y_to_x\n    n_to_n = y_to_n + x_to_n\n    while (n_to_x!= 0):\n        x_to_n_remainder = n_to_x % n_to_n\n        n_to_n = n_to_n + x_to_n\n        n_to_x = x_to_n_remainder\n    while (n_to_y!= 0):\n        y_to_n_remainder = n_to_y % n_to_n\n        n_to_n = n_to_n + y_to_n\n        n_to_y = y_to_n_remainder\n    while (n_to_n!= 0):\n        n_to_x = n_to_x // n_to_n\n        n_to_n = n_to_n // n_to_n\n    return n - 1\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    t = x - y\n    if t == 0:\n        return t\n    else:\n        # n = 11\n        # x = 5\n        # y = 2\n        #\n        # t = 5\n        # t %= x\n        # print(t)\n        # 5\n\n        # n = 11\n        # x = 5\n        # y = 1\n        #\n        # t = 5\n        # t %= x\n        # print(t)\n        # 4\n        #\n        # n = 11\n        # x = 5\n        # y = 0\n        #\n        # t = 11\n        # t %= x\n        # print(t)\n        # 0\n        #\n\n        x = n - t\n\n        if x < 0:\n            # x = x % t\n            # print(x)\n            # 3\n            #\n            # x = x % t\n            # print(x)\n            # 2\n            #\n            # x = x % t\n            # print(x)\n            # 1\n            #\n            # x = x % t\n            # print(x)\n            # 0\n            return int(str(x))\n\n        else:\n            # x = x % t\n            # print(x)\n            # 2\n            #\n            # x = x % t\n            # print(x)\n            # 1\n            #\n            # x = x % t\n            # print(x)\n            # 0\n            return int(str(x)[1:])\n\n\nsolution(input())\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(i) for i in stdin.split())\n    # Convert the decimal number to binary\n    # since binary format is efficient and shorter\n    binary = bin(int(stdin))[2:]\n    # Remove the leading zeroes\n    binary = binary.rstrip(\"0\")\n    # The number of zeroes to be removed is equal to the number of 1s present in the binary number\n    # thus, zeroes = x - len(binary)\n    zeroes = x - len(binary)\n    # Now we convert the binary number to decimal\n    # and we get the remainder of the number after performing the required operations\n    remainder = (int(binary, 2)) % (2**x)\n    # Compute the number of operations to be performed\n    # to get the required remainder\n    # if the remainder is 0, we will perform an add operation\n    # otherwise we will perform a sub operation\n    operations = (y - remainder) // x\n    return str(operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    remainder = 10 ** y % (10 ** x)\n    while True:\n        if remainder == 0:\n            return str(n - 1)\n        if remainder == 1:\n            return str(n)\n        n -= 1\n        remainder -= 2\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    return str(min(len(str(10 ** x) - str(10 ** y).count('0')) + len(str(10 ** x).count('1') - str(10 ** y).count('1')), len(str(10 ** x) + str(10 ** y).count('0')) - len(str(10 ** x).count('0') + str(10 ** y).count('1'))))\n\n\nsolution(\"11 5 1\")\nsolution(\"11 5 2\")\nsolution(\"1\")\nsolution(\"11 5 1\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(s) for s in stdin.split())\n    a = \"\".join(str(int(i)) for i in stdin)\n    # print(n, x, y, a)\n\n    # base cases\n    if n == 0:\n        return str(y) + \"0\"\n\n    if n == 1:\n        return str(y) + str(x)\n\n    # get the min number of operations to obtain the number with remaining zeroes\n    a = a[n - 1] + a[n - 2] + a[n - 3]\n    # print(a)\n\n    l = n - 3\n    # n - 1 - 3\n    # 1 - 2\n    # 1 - 3\n    while n - 1 > 1:\n        b = a[n - l] + a[n - l - 1] + a[n - l - 2]\n        # print(n - l, a[n - l - 1], a[n - l - 2], b)\n        a = b\n        n = n - l\n        l = n - l\n\n    c = a[n - l] + a[n - l - 1] + a[n - l - 2] + a[n - l - 3]\n    # print(c, l, n)\n\n    a = str(int(c) // 10**(x + 1)) + str(int(c) % 10)\n\n    # print(a)\n    return a\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split()\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    r = 10 ** y % (10 ** x)\n    # to do\n    return r\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    fact = lambda x: 1 if x < 2 else x * fact(x - 1)\n    b = 1 << x\n    def search(num):\n        s = 0\n        while num > 0:\n            s += num & 1\n            num >>= 1\n        return s\n    def num_to_str(num):\n        return \"\".join(map(str, num))\n    b_to_x = fact(b)\n    x_to_b = 1\n    for i in range(x):\n        x_to_b = (x_to_b * b_to_x) % b\n        b_to_x //= b\n    b_to_x //= 10 ** (x - 1)\n    b_to_x = b_to_x % 10 ** y\n    return str(x_to_b) + \" \" + str(b_to_x)\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = list(stdin)\n    n = int(stdin[0])\n    x, y = int(stdin[1]), int(stdin[2])\n    if x == y:\n        return str(x)\n    z = 10 ** (x - 1)\n    t = (10 ** y) - 1\n    h = (10 ** (x - 1))\n    l = 10 ** (x - 1)\n    count = 0\n    while z < t:\n        count += 1\n        z *= 10\n    while h < l:\n        count += 1\n        h *= 10\n    m = (t - z) * (l - h)\n    return str(count + m // (10 ** (y - 1)))"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    r = 10 ** y % (10 ** x)\n    res = 0\n    for i in range(n):\n        r = r % 10\n        if r == 0:\n            res += 10 ** (n - i - 1)\n        elif r == 1:\n            res += 10 ** (n - i - 1)\n        else:\n            res += 10\n    return str(res)\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        for i in range(1, n):\n            if a[i] == a[n-i-1]:\n                print('YES')\n                return\n        print('NO')\n    return\n\n\nsolution()\n\n\n\"\"\"\n\nimport itertools\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pals = []\n    for i in range(1,n):\n        pals.extend(list(map(list, itertools.combinations(a,i))))\n    for each in pals:\n        if len(each) == n:\n            if sorted(each) == each:\n                print('YES')\n                break\n    else:\n        print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(int, a[1:]))\n    n = len(a)\n    for i in range(3, n + 1):\n        left = 0\n        right = i - 1\n        while left < right:\n            if a[left] == a[right]:\n                left += 1\n                right -= 1\n            else:\n                break\n        if left == right:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each test case, print the answer \u2014 \"YES\" (without quotes) if $a$ has some subsequence of length at least $3$ that is a palindrome and \"NO\" otherwise.\n    \"\"\"\n    test_cases = int(stdin)\n    for test_case in range(1, test_cases + 1):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        if any(all(x == y for x in arr) and len(set(x for x in arr)) == len(arr) for y in arr):\n            print(f\"YES\\n\")\n        else:\n            print(f\"NO\\n\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        length = int(input())\n        arr = list(map(int, input().split()))\n        for i in range(1, length):\n            if arr[i-1] == arr[length-i-1]:\n                # print(i, length-i-1)\n                if i > 3:\n                    break\n                else:\n                    # print(i, length-i-1)\n                    # print(arr[i-1], arr[length-i-1], str(i), str(length-i-1))\n                    if arr[i-1] == arr[length-i-1]:\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\n                    break\n\nsolution(input())\n\n\"\"\"\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a = list(map(int, stdin.split()))\n        n = a[0]\n        a = a[1:]\n        b = []\n        flag = True\n        for i in range(n):\n            if i % 2 == 0:\n                b.append(a[i])\n            else:\n                if b == list(reversed(b)):\n                    flag = False\n                    break\n        if flag:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        a = list(map(int, stdin().strip().split()))\n        for i in range(1, n):\n            a.append(a[-i])\n        print(\"YES\" if a == a[::-1] else \"NO\")\n    return \"\"\n\n\nsolution(\"\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    for _ in range(int(stdin)):\n        n = int(input())\n        a = list(map(int, input().split()))\n        f = False\n        s = False\n        for i in range(1, n - 1):\n            if a[i] == a[n - i - 1]:\n                if a[i + 1] == a[i - 1]:\n                    s = True\n        if s == True:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def isPalindrome(s):\n        s = s[::-1]\n        return s == s\n    for i in range(int(stdin)):\n        _ = int(stdin.split()[0])\n        _ = int(stdin.split()[1])\n        _ = stdin.split()[2]\n        if isPalindrome(_):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        a = list(map(int, stdin().split()))\n        p = []\n        for i in range(n):\n            if a[i] in p:\n                print(\"YES\")\n                return\n            p.append(a[i])\n        print(\"NO\")\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_case_num, test_case_n = stdin.split('\\n')\n    test_case_n = int(test_case_n)\n    for test_case_i in range(int(test_case_num)):\n        test_case_a = stdin.split('\\n')[test_case_i + 1].split()\n        test_case_a = list(map(int, test_case_a))\n        if palindrome(test_case_a) and len(test_case_a) >= 3:\n            print('YES')\n        else:\n            print('NO')\n        if test_case_i == test_case_n - 2:\n            break\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = str(a)\n    a = sorted(a, reverse=True)\n    f = [int(i) for i in stdin]\n    answer = \"\"\n    while n > 0:\n        f = str(f)\n        if n == 1:\n            answer += f\n            break\n        answer += a[n - 1]\n        f = f[1:] + f[0]\n        n -= 1\n    return answer\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = list(map(int, stdin.splitlines()[2]))\n    max_num = 0\n    for i in range(n):\n        if not a[i]:\n            continue\n        num = int(a[i])\n        for j in range(1, 10):\n            num = num * 10 + f[j]\n            # print(num)\n        if max_num < num:\n            max_num = num\n    return str(max_num)\n\nsolution(\"\"\"\n3\n33\n1 1 1 1 1 1 1 1 1\n\"\"\")\n\"\"\"\nFrom the first example, you can see that, after the first operation, the number is 3, and after the second operation the number is 9. As a result, the maximum number is 9.\n\nFor the second example, you can see that, after the first operation, the number is 1, and after the second operation the number is 9. As a result, the maximum number is 9.\n\nFor the third example, you can see that, after the first operation, the number is 11, and after the second operation the number is 1. As a result, the maximum number is 11.\n\nFor the fourth example, you can see that, after the first operation, the number is 11, and after the second operation the number is 5. As a result, the maximum number is 11.\n\nAs you can see, the maximum number you can obtain after applying these operations no more than once is 11.\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    digits = list(str(a))\n    s = []\n    cur = 0\n    while cur < n:\n        if not s:\n            s.append(digits[cur])\n            cur += 1\n        else:\n            m, mod = divmod(cur, 9)\n            if s[-1] == digits[m]:\n                cur += 1\n            else:\n                s.append(digits[m])\n                cur += 1\n    return int(''.join(s))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    s = []\n    for i in a:\n        s.append(str(int(i) - int(list(str(i))[::-1])))\n    return \"\".join(s)\n    \n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    s = a.split()\n    res = ''\n    for i in s:\n        for j in range(len(i)):\n            i = i[:j] + str(int(i[j]) + int(s[0][j])) + i[j + 1:]\n        res = i\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, s, p = stdin.split()\n    s = int(s)\n    p = list(map(int, p))\n    dp = [[-1 for _ in range(s+1)] for _ in range(10)]\n    dp[0][1] = 1\n    for i in range(1, 10):\n        for j in range(s+1):\n            if dp[i][j]!= -1:\n                continue\n            if i == 0:\n                dp[i][j] = 0\n            elif j < i:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-i] + p[i-1] * (i+1))\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + p[i-1] * (i+1)\n            elif j > i:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-i] + p[i-1] * (i+1))\n    return str(dp[-1][-1])"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split(\"\\n\")\n    if len(a) > len(set(a)):\n        return \"impossible\"\n    else:\n        from functools import reduce\n        return str(reduce(lambda x, y: x * 10 + y, map(lambda x: int(x) if x!= \"9\" else 9, a)))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    nums = {}\n    for x in a:\n        if x not in nums:\n            nums[x] = len(nums) + 1\n\n    max_a = a[0]\n    def f(x):\n        return x\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i]]\n        if a[i] > max_a:\n            max_a = a[i]\n\n    for i in range(n):\n        a[i] = nums[a[i"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = list(map(str, a))\n    f = []\n    for i in range(9):\n        f.append(int(stdin.split()[i]))\n    lst = []\n    maxl = []\n    for i in range(1, 10):\n        for j in range(9):\n            lst.append(a[j])\n            a[j] = str(i)\n        a = list(map(str, a))\n        lst.sort()\n        for k in range(9):\n            lst.append(a[k])\n        lst = list(map(int, lst))\n        lst.sort()\n        maxl.append(lst)\n        lst = []\n    maxl = max(maxl)\n    ans = []\n    for i in range(len(maxl)):\n        ans.append(str(maxl[i]))\n    ans = \"\".join(ans)\n    print(ans)\n    return ans"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = str(stdin)\n    from functools import reduce\n    # or using reduce:\n    # n = int(input())\n    # a = input()\n    # from operator import mul\n    # print(reduce(mul, map(int, a)))\n    numbers = []\n    for digit in a:\n        numbers.append(int(digit))\n    numbers = sorted(numbers)\n    # print(numbers)\n    # print(list(map(int, numbers)))\n    m = {\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9\n    }\n    for i in range(len(numbers)):\n        numbers[i] = m[numbers[i]]\n    result = reduce(lambda x, y: x * y, numbers)\n    return str(result)\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        a, b, c = a, b, c\n        count = 0\n        while True:\n            if b % a == 0 and c % b == 0:\n                break\n            if b % a == 0:\n                b = b - a\n                count += 1\n            elif c % b == 0:\n                c = c - b\n                count += 1\n            else:\n                break\n        print(count)\n    return"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        a, b, c = map(int, stdin.strip().split())\n        if c % a == 0 and b % c == 0:\n            return '%d %d %d' % (a, b, c)\n    return '%d %d %d' % (a, b, c)"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = list(map(int, stdin.split()))\n    while b > c:\n        if (b+1) % a == 0:\n            return a\n        b += 1\n    while c % b == 0:\n        return a*2+1 if b > c else a*2\n    return a*2"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        if b % a == 0 and c % b == 0:\n            print(c // a, a, b, sep=' ')\n        else:\n            print(b // a, a, b, sep=' ')\n    return''.join([str(i) for i in range(1, 10)])"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def add_one(n: int) -> int:\n        n += 1\n        return n\n\n    def sub_one(n: int) -> int:\n        n -= 1\n        return n\n\n    def multiply_one(n: int) -> int:\n        n *= 1\n        return n\n\n    def divide_one(n: int) -> int:\n        n = int(n / 2)\n        return n\n\n    def power_one(n: int, p: int) -> int:\n        n **= p\n        return n\n\n    def check_divisible(n: int, c: int) -> bool:\n        return n % c == 0\n\n    def check_power(n: int, c: int) -> bool:\n        return power_one(n, c) == n\n\n    t = int(stdin())\n    ans = []\n    for _ in range(t):\n        a, b, c = map(int, stdin().split())\n        while 1:\n            if add_one(b) == c:\n                if check_divisible(a, b) and check_divisible(a, c):\n                    ans.append(b)\n                    break\n                else:\n                    b = divide_one(b)\n            elif sub_one(b) == c:\n                if check_divisible(a, b) and check_divisible(a, c):\n                    ans.append(b)\n                    break\n                else:\n                    b = divide_one(b)\n            elif multiply_one(b) == c:\n                if check_divisible(a, b) and check_divisible(a, c):\n                    ans.append(b)\n                    break\n                else:\n                    b = divide_one(b)\n            elif check_power(b, 2) == c:\n                if check_divisible(a, b) and check_divisible(a, c):\n                    ans.append(b)\n                    break\n                else:\n                    b = divide_one(b)\n            elif check_power(b, 3) == c:\n                if check_divisible(a, b) and check_divisible(a, c):\n                    ans.append(b)\n                    break\n                else:\n                    b = divide_one(b)\n            else:\n                break\n        if len(ans) == 0:\n            ans.append(b)\n        print(*ans)\n    return\n\n\nsolution(stdin())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin)\n    for i in range(tests):\n        a, b, c = map(int, stdin.split())\n        if b % a == 0 and c % b == 0:\n            return str(a * b * c)\n        if b % a!= 0:\n            return str(a + b - c)\n\n    return str(a * b * c)\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        if c % a == 0 and c % b == 0:\n            return str(min(a, b, c)) +'' + str(a) +'' + str(b) +'' + str(c)\n        elif c % a == 0:\n            return str(min(a, b, c)) +'' + str(a) +'' + str(c)\n        elif c % b == 0:\n            return str(a) +'' + str(min(a, b, c)) +'' + str(c)"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    a, b, c = nums[0], nums[1], nums[2]\n    res = []\n    while a < b and b % a == 0 and c % b == 0:\n        res = [a, b, c]\n        a += 1\n        b = c\n        c = a\n    while a < b and b % a == 0 and c % b == 0:\n        res = [a, b, c]\n        a += 1\n        b = c\n        c = b\n    while a < b and b % a == 0 and c % b == 0:\n        res = [a, b, c]\n        a += 1\n        b = c\n        c = a\n    return str(res[0]) + \" \" + str(res[1]) + \" \" + str(res[2])\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def divide_by(a,b):\n        if a == 0:\n            return 0, 0, 0\n        d = 1\n        p = 0\n        while a % d == 0:\n            a = a // d\n            p += 1\n            d = d*10\n        return a,p,b\n    #print(\"Input: \",stdin)\n    total_operations = 0\n    operations = []\n    for i in range(3):\n        operations.append([int(x) for x in input().split()])\n        total_operations += operations[i][1]\n    #print(\"Total operations: \",total_operations)\n    #print(\"Operations: \",operations)\n    a = operations[0][0]\n    b = operations[1][0]\n    c = operations[2][0]\n    res = 0\n    a_divisor = 0\n    b_divisor = 0\n    c_divisor = 0\n    for i in range(1,total_operations+1):\n        #print(\"i: \",i)\n        #print(\"a, b, c: \",a,b,c)\n        a_divisor,a_p,a_mod = divide_by(a,i)\n        #print(\"a_divisor: \",a_divisor,\" a_p: \",a_p,\" a_mod: \",a_mod)\n        b_divisor,b_p,b_mod = divide_by(b,i-a_p)\n        #print(\"b_divisor: \",b_divisor,\" b_p: \",b_p,\" b_mod: \",b_mod)\n        c_divisor,c_p,c_mod = divide_by(c,i-b_p-a_mod)\n        #print(\"c_divisor: \",c_divisor,\" c_p: \",c_p,\" c_mod: \",c_mod)\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            #print(\"Z\")\n            res = 0\n            break\n        if c_divisor!= 0:\n            #print(\"X\")\n            if c_p == 0:\n                c_p = 1\n            res = i - (c_p+a_p)\n            break\n        if b_divisor!= 0:\n            #print(\"Y\")\n            if b_p == 0:\n                b_p = 1\n            res = i - (b_p+a_p)\n            break\n        if a_divisor!= 0:\n            #print(\"X\")\n            if a_p == 0:\n                a_p = 1\n            res = i - (a_p+b_p)\n            break\n    if res == 0:\n        res = -1\n    return str(res)\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum([abs(i - min(i)) for i in stdin.split()])"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    print(max(A) - min(A))\nsolution(input())\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def inertia(a):\n        return max(a) - min(a)\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    print(inertia(a))\n\nsolution(input())\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    for i in range(n):\n        if arr[i] == max(arr):\n            arr.remove(max(arr))\n            arr.remove(max(arr))\n            return str(min(arr) - max(arr))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    nums = list(map(int, stdin.split()))\n    max_num = max(nums)\n    min_num = min(nums)\n    inst_array = max_num - min_num\n    nums.remove(max(nums))\n    min_num = min(nums)\n    inst_array -= min_num\n    return str(inst_array)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    return str(max(arr) - min(arr))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.split()))\n    return str(a[-2] - a[-1])\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = arr[0] - min(arr[1:])\n    for i in range(1, len(arr) - 1):\n        res = min(res, arr[i] - min(arr[i+1:]))\n    return str(res)\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = sorted(list(map(int, stdin.split())))\n    best = -1\n    for day in range(1, n + 1):\n        for exam in exams:\n            if day - exam < 0 or exam < day:\n                continue\n            res = max(day - exam + 1, 0)\n            if exam == day:\n                res += 1\n            if exam == n:\n                res += 1\n            if best == -1 or res < best:\n                best = res\n    if best == -1:\n        return \"-\"\n    return str(m + 1) + \" \" + \" \".join(map(str, best))"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = []\n    for _ in range(n):\n        days.append(list(map(int, stdin.split())))\n\n    exams = []\n    for i in range(1, m + 1):\n        exams.append(list(map(int, stdin.split())))\n\n    schedule = []\n\n    # print(n, m)\n    # print(days)\n    # print(exams)\n\n    for i in range(n):\n        for j in range(1, m + 1):\n            day = days[i][j]\n            if day == 1:\n                schedule.append(0)\n            else:\n                if i == 0:\n                    schedule.append(0)\n                else:\n                    schedule.append(min(schedule[i - 1], j - 1))\n\n    # print(schedule)\n\n    ans = []\n\n    for i in range(m):\n        if schedule[i] == 0:\n            ans.append(1)\n        elif schedule[i] == m:\n            ans.append(m + 1)\n        else:\n            ans.append(m + 1 - schedule[i])\n\n    print(' '.join(map(str, ans)))\n\n    return''.join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days_needed = []\n    days = stdin.split()\n    for i in range(len(days)):\n        s, d, c = map(int, days[i].split(' '))\n        days_needed.append([s, d, c])\n    days_needed.sort()\n    res = []\n    curr = 0\n    for i in range(len(days_needed)):\n        curr += days_needed[i][2]\n        if curr >= days_needed[i][1]:\n            res.append(days_needed[i][2])\n            curr -= days_needed[i][2]\n    return''.join([str(i) for i in res])\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    d_i = []\n    s_i = []\n    c_i = []\n    for i in range(m):\n        d_i_i, s_i_i, c_i_i = [int(x) for x in stdin.split()]\n        d_i.append(d_i_i)\n        s_i.append(s_i_i)\n        c_i.append(c_i_i)\n    return str(n) +'' +''.join(map(str, sorted(set(d_i)))) + '\\n' +''.join(map(str, sorted(set(s_i)))) + '\\n' +''.join(map(str, sorted(set(c_i))))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = lines[0].split()\n    n, m = int(n), int(m)\n    exams = [[] for _ in range(m + 1)]\n    for day, exam, rest in map(lambda x: x.split(), lines[1:]):\n        exams[int(exam)].append((int(day), int(rest)))\n    schedules = []\n    day_count = 0\n    while day_count < n:\n        day_count += 1\n        rest = -1\n        for i in range(m):\n            if day_count >= exams[i][0][0]:\n                day_count = exams[i][0][1]\n                if i == m - 1:\n                    rest = 0\n                break\n        if rest == -1:\n            break\n        for i in range(m):\n            if exams[i][1] == rest:\n                schedules.append(i + 1)\n                break\n    print(' '.join(map(str, schedules)))\n    return '' if len(schedules)!= n else''.join(map(str, schedules))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def next_day(day: int, rest: int, preparing: int) -> int:\n        if day > n:\n            return -1\n        elif day == n:\n            return m + 1\n        else:\n            return max(day + rest, day + preparing)\n\n    n, m = map(int, stdin.split())\n    day = 1\n    rest = 0\n    preparing = 0\n    days = {}\n    for i in range(m):\n        day, rest, preparing = map(int, stdin.split())\n        days[day] = 0\n        if day > n:\n            return -1\n        elif day == n:\n            return m + 1\n    while day < n + 1:\n        days[day] = next_day(day, rest, preparing)\n        day = days[day]\n    return''.join(map(str, days.values()))\n\n\nprint(solution(\"5 2\"))\nprint(solution(\"10 3\"))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m = map(int, input)\n    schedule = {}\n    for i in range(m):\n        day, exam, activity = map(int, input[i * 3:i * 3 + 3])\n        if day in schedule:\n            if schedule[day][0] == 0:\n                schedule[day][0] = 1\n            elif schedule[day][1] == 0:\n                schedule[day][1] = 1\n            elif schedule[day][2] == 0:\n                schedule[day][2] = 1\n            else:\n                return -1\n        else:\n            schedule[day] = [0, 0, 0]\n        if activity == 1:\n            schedule[day][0] = 1\n        elif activity == 2:\n            schedule[day][1] = 1\n        elif activity == 3:\n            schedule[day][2] = 1\n    for day, schedule in schedule.items():\n        if not any(schedule):\n            return -1\n    return''.join(map(str, sorted([n for day, schedule in schedule.items() if day == 1] + sorted([n - 1 for day, schedule in schedule.items() if day > 1]))))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exam_tasks = []\n    res = []\n    for i in range(m):\n        exam_tasks.append(list(map(int, stdin.split())))\n    \n    for i in range(n):\n        if i == 0:\n            res.append(m)\n        else:\n            res.append(m)\n            for j in range(m):\n                res[i] = min(res[i], min(exam_tasks[j][1], exam_tasks[j][2] + res[i - 1]))\n    return''.join([str(res[i]) for i in range(n)])\nsolution(input())"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = [int(x) for x in stdin.split()]\n    break_schedules = []\n    for i in range(n):\n        break_schedules.append([int(x) for x in stdin.split()])\n    for i in range(len(break_schedules)):\n        break_schedules[i] = sorted(break_schedules[i])\n    for schedule in break_schedules:\n        if not can_pass_all(schedule):\n            return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    if not (1 <= n <= 5 * 10**8 and 1 <= m <= 5 * 10**8):\n        return \"0\"\n    if n == m:\n        return \"0\"\n    if n == m + 1:\n        return \"1\"\n    \n    l = 0\n    r = n\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if m == mid:\n            return \"1\"\n        if m > mid:\n            l = mid + 1\n        else:\n            r = mid - 1\n    \n    return \"0\""
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mem = {n: 0}\n    mem[0] = 1\n    return memoization(n, m, mem)\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    if n == 1:\n        return 1\n    if n % 3 == 0:\n        return (n//3) * solution(str(n-1))\n    if n % 3 == 1:\n        return (n//3) * solution(str(n-2))\n    if n % 3 == 2:\n        return (n//3) * solution(str(n-3))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n) if n == m else str(n*2 if n*2 <= m else n*3) if n*2 <= m else -1"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    steps = 0\n    # m = n * 2\n    # n = n * 3\n    while n!= m:\n        if m == n * 2:\n            m = n * 3\n        else:\n            m = n\n        steps += 1\n    return str(steps)"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cnt = 0\n    while n!= m:\n        if n % 3 == 0:\n            n /= 3\n            cnt += 1\n        elif n % 2 == 0:\n            n /= 2\n            cnt += 1\n        else:\n            return '-1'\n    if n == 1:\n        return str(cnt)\n    return '-1'\n\nstdin = \"120 51840\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split(\" \")\n    n = int(n)\n    m = int(m)\n    steps = 0\n    if n == m:\n        return 0\n    elif n < m:\n        return -1\n    if n == 2:\n        return steps + 1\n    if n == 3:\n        return steps + 2\n    if n == 4:\n        return steps + 3\n    if n == 5:\n        return steps + 3\n    if n == 6:\n        return steps + 4\n    if n == 7:\n        return steps + 5\n    if n == 8:\n        return steps + 4\n    if n == 9:\n        return steps + 5\n    if n == 10:\n        return steps + 6\n    if n == 11:\n        return steps + 7\n    if n == 12:\n        return steps + 8\n    if n == 13:\n        return steps + 8\n    if n == 14:\n        return steps + 9\n    if n == 15:\n        return steps + 10\n    if n == 16:\n        return steps + 11\n    if n == 17:\n        return steps + 12\n    if n == 18:\n        return steps + 13\n    if n == 19:\n        return steps + 14\n    if n == 20:\n        return steps + 15\n    if n == 21:\n        return steps + 16\n    if n == 22:\n        return steps + 17\n    if n == 23:\n        return steps + 18\n    if n == 24:\n        return steps + 19\n    if n == 25:\n        return steps + 20\n    if n == 26:\n        return steps + 21\n    if n == 27:\n        return steps + 22\n    if n == 28:\n        return steps + 23\n    if n == 29:\n        return steps + 24\n    if n == 30:\n        return steps + 25\n    if n == 31:\n        return steps + 26\n    if n == 32:\n        return steps + 27\n    if n == 33:\n        return steps + 28\n    if n == 34:\n        return steps + 29\n    if n == 35:\n        return steps + 30\n    if n == 36:\n        return steps + 31\n    if n == 37:\n        return steps + 32\n    if n == 38:\n        return steps + 33\n    if n == 39:\n        return steps + 34\n    if n == 40:\n        return steps + 35\n    if n == 41:\n        return steps + 36\n    if n == 42:\n        return steps + 37\n    if n == 43:\n        return steps + 38\n    if n == 44:\n        return steps + 39\n    if n == 45:\n        return steps + 40\n    if n == 46:\n        return steps + 41\n    if n == 47:\n        return steps + 42\n    if n == 48:\n        return steps + 43\n    if n == 49:\n        return steps + 44\n    if n == 50:\n        return steps + 45\n    if n == 51:\n        return steps + 46\n    if n == 52:\n        return steps + 47\n    if n == 53:\n        return steps + 48\n    if n == 54:\n        return steps + 49\n    if n == 55:\n        return steps + 50\n    if n == 56:\n        return steps + 51\n    if n == 57:\n        return steps + 52\n    if n == 58:\n        return steps + 53\n    if n == 59:\n        return steps + 54\n    if n == 60:\n        return steps + 55\n    if n == 61:\n        return steps + 56\n    if n == 62:\n        return steps + 57\n    if n == 63:\n        return steps + 58\n    if n == 64:\n        return steps + 59\n    if n == 65:\n        return steps + 60\n    if n == 66:\n        return steps + 61\n    if n == 67:\n        return steps + 62\n    if n == 68:\n        return steps + 63\n    if n == 69:\n        return steps + 64\n    if n == 70:\n        return steps + 65\n    if n == 71:\n        return steps + 66\n    if n == 72:\n        return steps + 67\n    if n == 73:\n        return steps + 68\n    if n == 74:\n        return steps + 69\n    if n == 75:\n        return steps + 70\n    if n == 76:\n        return steps + 71\n    if n == 77:\n        return steps + 72\n    if n == 78:\n        return steps + 73\n    if n == 79:\n        return steps + 74\n    if n == 80:\n        return steps + 75\n    if n == 81:\n        return steps + 76\n    if n == 82:\n        return steps + 77\n    if n == 83:\n        return steps + 78\n    if n == 84:\n        return steps + 79\n    if n == 85:\n        return steps + 80\n    if n == 86:\n        return steps + 81\n    if n == 87:\n        return steps + 82\n    if n == 88:\n        return steps + 83\n    if n == 89:\n        return steps + 84\n    if n == 90:\n        return steps + 85\n    if n == 91:\n        return steps + 86\n    if n == 92:\n        return steps + 87\n    if n == 93:\n        return steps + 88\n    if n == 94:\n        return steps + 89\n    if n == 95:\n        return steps + 90\n    if n == 96:\n        return steps + 91\n    if n == 97:\n        return steps + 92\n    if n == 98:\n        return steps + 93\n    if n == 99:\n        return steps + 94\n    if n == 100:\n        return steps + 95\n    if n == 101:\n        return steps + 96\n    if n == 102:\n        return steps + 97\n    if n == 103:\n        return steps + 98\n    if n == 104:\n        return steps + 99\n    if n == 105:\n        return steps + 100\n    if n == 106:\n        return steps + 101\n    if n == 107:\n        return steps + 102\n    if n == 108:\n        return steps + 103\n    if n == 109:\n        return steps + 104\n    if n == 110:\n        return steps + 105\n    if n == 111:\n        return steps + 106\n    if n == 112:\n        return steps + 107\n    if n == 113:\n        return steps + 108\n    if n == 114:\n        return steps + 109\n    if n == 115:\n        return steps + 110\n    if n == 116:\n        return steps + 111\n    if n == 117:\n        return steps + 112\n    if n == 118:\n        return steps + 113\n    if n == 119:\n        return steps + 114\n    if n == 120:\n        return steps + 115\n    if n == 121:\n        return steps + 116\n    if n == 122:\n        return steps + 117\n    if n == 123:\n        return steps + 118\n    if n == 124:\n        return steps + 119\n    if n == 125:\n        return steps + 120\n    if n == 126:\n        return steps + 121\n    if n == 127:"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = 1\n    i = 1\n    while x < a:\n        x *= 2\n        i += 1\n    if x == a:\n        return i\n    else:\n        x = 1\n        i = 1\n        while x < b:\n            x *= 3\n            i += 1\n        if x == b:\n            return i\n        else:\n            return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def transform(n):\n        return n*2 if n%2 else n*3\n    m, n = map(int, stdin.split())\n    if transform(n) == m:\n        return str(0)\n    elif transform(n) > m:\n        return str(1)\n    else:\n        count = 1\n        while True:\n            n = transform(n)\n            if n == m:\n                return str(count)\n            elif n < m:\n                count += 1\n\nsolution(\"120 51840\")\nsolution(\"42 42\")\nsolution(\"48 72\")\n\"\"\"\n\n\"\"\"\n\nFirst solution\n\nn, m = map(int, input().split())\ncount = 0\nwhile n!= m:\n    if m % 2 == 0:\n        m = m//2\n    else:\n        m = m * 3 + 1\n    count += 1\nprint(count)\n\n\"\"\"\n\n\"\"\"\n\nBetter solution\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"0\"\n    c = n\n    q = m\n    ans = 0\n    while q!= 0:\n        if q == c:\n            q -= 1\n        elif q % c == 0:\n            q //= c\n        elif q % c == 1:\n            q //= c\n            ans += 1\n        else:\n            return \"-1\"\n    return str(ans)\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #return stdin\n    t = stdin.strip().split()\n    n = int(t[0])\n    k = int(t[1])\n    s = stdin.strip().split()[2]\n    substrs = []\n    for i in range(n):\n        for j in range(n):\n            substrs.append(s[i:j+1])\n    substrs.sort()\n    for i in range(n - k + 1):\n        if substrs[i] == t:\n            return substrs[i]\n    return substrs[-1]\n\nsolution(input())\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip().split()\n    n, k = int(t[0]), int(t[1])\n    t = t[2]\n    start = 0\n    i = 0\n    s = \"\"\n    while (start < n and i < k):\n        if s:\n            s += t[start]\n            if t[start] == s[-1]:\n                i += 1\n        else:\n            s += t[start]\n        start += 1\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    res = ''\n    i = 0\n    while len(s) > i:\n        if s[i] == 'a':\n            s = s[i:i + n - 1]\n            res += s * (k - 1)\n        i += 1\n    return res\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.rstrip()\n    for i in range(1, n):\n        if t[i - 1]!= t[i]:\n            break\n    else:\n        return t\n    starts = range(0, i)\n    while len(starts) > 0:\n        for start in starts:\n            sub = t[start : i + 1]\n            if len(sub) == n:\n                if all(t[i] == sub[i - 1] for i in range(1, n)):\n                    break\n        else:\n            continue\n        break\n    else:\n        raise ValueError(\"Not found\")\n    return t[:start] + sub + t[start + n - 1:]\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.strip()\n    l, r = 0, n\n    while l < n:\n        while r < n:\n            if string[l:r + 1] == string[l:r + 1][::-1]:\n                r += 1\n                if r - l == k:\n                    return string[l:r + 1]\n            else:\n                r += 1\n        l += 1\n    return ''\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    for _ in range(k):\n        l, r = 0, 0\n        s = t\n        while r < len(s) and s[r] == t[0]:\n            r += 1\n        if r - l < n:\n            l += 1\n            r += 1\n        while l <= r:\n            s = s[l:r]\n            if s == t:\n                return s\n            l += 1\n            r += 1\n    return \"\""
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    k = int(input())\n    n = len(s)\n    if k > n:\n        print(\"Not enough\")\n        return ''\n    for i in range(n):\n        if s[i] == s[i + k - 1]:\n            print(s[:i] + s[i + k:])\n            return ''\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin[0])\n    k = int(stdin[1])\n    s = stdin[2]\n    if k == 0:\n        return ''\n    \n    if l == 1:\n        return s\n\n    for i in range(l):\n        s += s[i] * (l - i)\n\n    for i in range(l, len(s) - l):\n        if s[i:i+l] == s[i:i+l]:\n            s = s[:i] + s[i+l:]\n        else:\n            break\n\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 1 or k > n:\n        raise ValueError\n    t = stdin.rstrip()\n    l = 0\n    r = n - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if t[mid] == t[mid + n - 1]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return t[:l + 1] + t + t[r + n - 1:]\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = stdin[1]\n    if n == 1:\n        if k == 0:\n            return \"\"\n        else:\n            return t\n    else:\n        for i in range(n, n + n - k + 1):\n            tmp = solution(stdin.replace(\"a\", \"\", 1))\n            if tmp == t:\n                return tmp\n        return \"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    result = \"\"\n    for i in range(n):\n        if a[i]!= 0:\n            count += 1\n        if count > 1:\n            result = \"0\"\n            break\n        if count == 1:\n            result += str(i + 1) + \" \"\n\n    return str(len(a) - count) + \"\\n\" + result if result!= \"0\" else str(0)\n\nprint(solution(input()))"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    res = 0\n    ans = []\n    for i in range(1, n):\n        if sum(array[:i]) == sum(array[i:]) and array[i - 1]!= array[i]:\n            ans.append(i)\n    return len(ans)"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    a = stdin[1].split()\n    k = 0\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                x = int(a[i]) + int(a[j])\n                lst.append(x)\n        for j in range(n):\n            if j!= i and x == 0:\n                lst.append(j+1)\n    lst.sort()\n    print(len(lst))\n    for i in lst:\n        print(i, end=' ')\n    print('')\n    return ''\n\nsolution('5\\n2 5 1 2 2')\n\nsolution('4\\n8 3 5 2')\n\nsolution('5\\n2 1 2 4 3')"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 1"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(len(a)):\n        b = a.copy()\n        b.pop(i)\n        if sum(b) == sum(a):\n            k += 1\n            print(k)\n            for j in range(len(a)):\n                print(j, end=\" \")\n            print()\n    return k\n\nsolution(input())"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    k = 0\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            if j == i:\n                continue\n            sum += a[j]\n        if sum == a[i]:\n            ans += 1\n            k += 1\n    return str(k) + \" \" + \" \".join(map(str, range(1, k + 1)))\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    j = 0\n    for i in range(len(arr)):\n        if i == j:\n            j += 1\n            continue\n        else:\n            if sum(arr[:i]) + sum(arr[i+1:]) == sum(arr):\n                print(i)\n                return\n    print(0)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n    arr = sorted(map(int, a))\n    res = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] - arr[j] == sum(arr[j+1:]):\n                res += 1\n    return f\"{res}\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a_s = sum(a)\n    arr = []\n    for i in range(0, n):\n        a_s -= a[i]\n        if a_s in a and a_s!= 0:\n            arr.append(i+1)\n    if len(arr) == 0:\n        print(0)\n        return\n    else:\n        arr.sort()\n        print(len(arr))\n        print(*arr)\n    return\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n = stdin.split()\n    # print(f'a:{a} n:{n}')\n    n = int(n)\n    sum = 0\n    # print(f'sum:{sum}')\n    for i in a:\n        sum += int(i)\n        # print(f'sum_i:{sum}')\n    k = 0\n    for i in range(n):\n        sum -= int(a[i])\n        # print(f'sum_i - sum:{sum}')\n        if sum == 0:\n            k += 1\n            sum = 0\n    # print(f'k:{k}')\n    if k == 0:\n        return '0'\n    return f'{k}'"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = list(map(int, stdin.split()))\n    s = stdin.strip()\n\n    def dfs(i, j):\n        if i == j:\n            return 0\n\n        count = 0\n        for i, v in enumerate(s):\n            if v == s[i - j]:\n                count += 1\n            else:\n                break\n\n        if count == j:\n            return 0\n\n        if count == 0:\n            return dfs(i + 1, j)\n\n        return min(count + dfs(i + 1, j - count), dfs(i + 1, j))\n\n    return str(dfs(0, k))\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    s = stdin.replace(\"\\n\", \"\")\n    return str(solution_1(n, k, s))\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    n = int(a[0])\n    k = int(a[1])\n    S = set()\n    for i in range(n):\n        S.add(stdin[i])\n    if len(S) == k:\n        return len(S)\n    min_cost = -1\n    for i in range(1, len(stdin) + 1):\n        if len(S) < k:\n            S.add(stdin[0:i])\n        else:\n            for j in range(1, len(stdin) - i + 1):\n                if i == j:\n                    continue\n                elif len(S) == k:\n                    break\n                if stdin[j:i + j] not in S:\n                    if min_cost == -1 or min_cost > i + j:\n                        min_cost = i + j\n                S.add(stdin[j:i + j])\n    if min_cost == -1:\n        return -1\n    return min_cost\n\n\n\nsolution(\"aabaca\")\n\nsolution(\"asdf\")\n\nsolution(\"aaaaa\")\n\nsolution(\"aaaaa\")\n\nsolution(\"aaaaa\")\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if n <= k:\n        print(0)\n        return\n    if len(set(s)) < n:\n        print(-1)\n        return\n    dp = [[0]*(n+1) for _ in range(k+1)]\n    dp[0][0] = 0\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if s[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    print(dp[k][n])\nsolution(input())\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_cnt, num_set = stdin.split()\n    num_cnt = int(num_cnt)\n    num_set = stdin.split()[0]\n    num_set = set(num_set)\n    return num_cnt\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"impossible\"\n    s = stdin\n    for i in range(n - k + 1):\n        s = s[1:] + s[0]\n    return str(len(set(s)))"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n\n    if n > k:\n        return '-1'\n    if k == 0:\n        return str(0)\n    if n == 0:\n        return str(0)\n\n    result = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if len(set(s)) == k:\n            result += n - i\n        else:\n            break\n    return str(result)\n    return"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_of_char = len(stdin)\n    char_set = set(stdin)\n    num_of_elem = len(char_set)\n    if num_of_elem == 0:\n        return -1\n\n    if num_of_elem <= num_of_char:\n        return num_of_elem\n\n    min_cost = num_of_char\n    for i in range(num_of_elem, num_of_char):\n        char_set_copy = char_set.copy()\n        for char in char_set_copy:\n            if stdin[i - num_of_elem]!= char:\n                char_set.remove(char)\n                cost = i - num_of_elem + 1\n                if cost < min_cost:\n                    min_cost = cost\n                char_set.add(char)\n                break\n\n    if min_cost == num_of_char:\n        return -1\n    return min_cost\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    -1\n    >>> solution('abracadabra')\n    233\n    >>> solution('aaaaa')\n    4\n    >>> solution('asdf')\n    4\n    >>> solution('aaaaaab')\n    15\n    >>> solution('abra')\n    15\n    >>> solution('abraaa')\n    15\n    >>> solution('abraaaabb')\n    15\n    >>> solution('abraaaabbb')\n    15\n    >>> solution('abracadabra')\n    233\n    >>> solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if len(s) < k:\n        return -1\n\n    dp = [[0] * (len(s) + 1) for _ in range(k + 1)]\n\n    for i in range(k + 1):\n        dp[i][0] = i\n\n    for i in range(1, len(s) + 1):\n        dp[0][i] = i\n\n    for j in range(1, k + 1):\n        for i in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[j][i] = min(dp[j - 1][i - 1], dp[j][i - 1] + 1)\n            else:\n                dp[j][i] = min(dp[j - 1][i - 1], dp[j][i - 1])\n    return dp[k][len(s)]"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = list(map(int, stdin.strip().split()))\n\n    edge_map = {}\n    for i in range(m):\n        v, u = list(map(int, stdin.strip().split()))\n        edge_map[v] = u\n\n    answer = 'NO'\n    for v in range(1, n + 1):\n        if v not in edge_map.keys():\n            answer = 'YES'\n            break\n\n        v_degree = 0\n        for u in edge_map.values():\n            if u!= v:\n                v_degree += 1\n\n        if v_degree!= D:\n            answer = 'NO'\n            break\n\n    if answer == 'YES':\n        for v in edge_map.values():\n            print(v, end=' ')\n        print()\n        for v in edge_map.values():\n            print(v, end=' ')\n    else:\n        print(answer)\n\n    return answer"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m, d = map(int, stdin.split())\n    edges = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges[v].append(u)\n        edges[u].append(v)\n    for e in edges:\n        e.sort()\n\n    visited = set()\n    visited.add(1)\n    for u in edges[1]:\n        visited.add(u)\n    stack = [1]\n    while stack:\n        u = stack.pop()\n        if len(edges[u]) == 0:\n            return \"NO\"\n        for v in edges[u]:\n            if v not in visited:\n                visited.add(v)\n                stack.append(v)\n        if len(visited) == n:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(n):\n        if len(graph[i]) == d:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    # print(n, m, d, edges)\n    # print(edges)\n    # print('NO') if not (1 <= d <= n) else print('YES')\n\n    # 1. check if d is in the range of n\n    if 1 <= d <= n:\n        # 2. check if each edge can connect to the first vertex\n        for edge in edges:\n            if edge[0] == d or edge[1] == d:\n                return 'NO'\n        # 3. get all the pairs of the edges which are not a duplicate\n        edges = set([(edge[0], edge[1]) for edge in edges])\n        # 4. find the edges which has the pair (d, d) and check if this pair exist in the edges and are not duplicate\n        if (d, d) in edges:\n            return 'NO'\n        # 5. if all the edges in edges have pair (d, d) and the pairs are not duplicate then return YES\n        return 'YES'\n\n    return 'NO'\n\nprint(solution(stdin))"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(1, n):\n        if len(graph[i]) == d:\n            print(\"YES\")\n            for j in graph[i]:\n                print(i, j)\n        else:\n            print(\"NO\")\n    return stdout"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    if not 1 <= d <= n: return \"NO\"\n    \n    edges = set()\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges.add((v, u))\n        edges.add((u, v))\n    \n    if not 1 <= d <= n: return \"NO\"\n    \n    # for i in range(m):\n    #     v, u = map(int, stdin.split())\n    #     if v == u: return \"NO\"\n    #     edges.add((v, u))\n    #     edges.add((u, v))\n    \n    # print(edges)\n    \n    degree = {}\n    \n    for v, u in edges:\n        if v in degree:\n            degree[v] += 1\n        else:\n            degree[v] = 1\n        if u in degree:\n            degree[u] += 1\n        else:\n            degree[u] = 1\n            \n    for v in range(1, n + 1):\n        if degree[v] == d:\n            return \"YES\" + \"\\n\" + \",\".join(map(str, [v] + sorted(list(edges))))\n    \n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_deg(x):\n        return x == degree\n    n, m, d = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    degree = 1\n    for v in range(1, n):\n        if not is_deg(v):\n            degree += 1\n            continue\n        spans_tree = 0\n        for u in graph[v]:\n            if not is_deg(u):\n                break\n            elif spans_tree == d:\n                return \"NO\"\n            spans_tree += 1\n    for u in graph:\n        if not is_deg(u):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, d = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, input().split())\n        v -= 1\n        u -= 1\n        edges.append((v, u))\n    for v, u in edges:\n        if v == u:\n            return \"NO\"\n    for v, u in edges:\n        if v == d or u == d:\n            return \"NO\"\n    for v, u in edges:\n        if v == u or (v, u) in edges:\n            return \"NO\"\n    visited = set()\n    for v, u in edges:\n        if (v, u) in visited:\n            return \"NO\"\n        visited.add((v, u))\n    return \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    data = {}\n    for i in range(1, n+1):\n        data[i] = []\n    for _ in range(m):\n        v, u = list(map(int, stdin.split()))\n        data[v].append(u)\n        data[u].append(v)\n    for k in data:\n        if len(data[k]) == d:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def validate(n, m, D, edges):\n        def is_edge(a, b):\n            return a!= b and edges.count(a) == 1 and edges.count(b) == 1\n\n        v = set()\n        u = set()\n        for e in edges:\n            if is_edge(e[0], e[1]):\n                return False\n            if e[0] in v:\n                return False\n            v.add(e[0])\n            if e[1] in u:\n                return False\n            u.add(e[1])\n\n        deg = defaultdict(int)\n        for e in edges:\n            deg[e[0]] += 1\n            deg[e[1]] += 1\n\n        deg_v = deg[1]\n        deg_u = deg[1]\n        deg_rest = n - 2 - deg_v - deg_u\n\n        if deg_u == D or deg_v == D:\n            return True\n\n        if deg_u > deg_rest:\n            return False\n\n        if deg_u == deg_rest:\n            return deg_v == D or deg_u == D\n\n        return deg_u == deg_rest and deg_v == D\n\n    n, m, D = map(int, stdin.split())\n    edges = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:]))\n    return \"YES\" if validate(n, m, D, edges) else \"NO\""
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return \"{0:02}:{1:02}\".format(h, m)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split())\n    h2, m2 = map(int, stdin.strip().split())\n\n    h = (h2 - h1) * 60\n    m = (m2 - m1) * 60\n\n    return f'{int(h) // 2 + h1}:{int(m) // 2 + m1 if m >= 45 else int(m) // 2 + m1 + 1}'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    if m1 % 2 == m2 % 2:\n        print(f'{int(h1 + (m1 + m2) / 2)}:{int(h1 + (m1 + m2) / 2)}')\n    else:\n        print(f'{int(h1 + (m1 + m2) / 2)}:{int(h1 + (m1 + m2) / 2 + 1)}')\n    return '2'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = list(map(int, stdin.split(\" \")))\n    h2, m2 = list(map(int, stdin.split(\" \")))\n    h1 -= h1 % 2\n    h2 -= h2 % 2\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    return str(h3).zfill(2) + \":\" + str(m3).zfill(2)\n\n\nsolution(input())\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    h1, m1 = map(int, stdin[0].split(':'))\n    h2, m2 = map(int, stdin[1].split(':'))\n\n    return \"{0:02}:{1:02}\".format(int((h1 + h2) / 2), int((m1 + m2) / 2))\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split()\n    h1, m1 = int(h1), int(m1)\n    h2, m2 = stdin.split()\n    h2, m2 = int(h2), int(m2)\n    return f'{(h1+h2)//2:02}:{(m1+m2)//2:02}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    mid = (h2 * 60 + m2) // 2\n    if h1 == h2:\n        return f\"{h1}:00\" if mid // 60 == 0 else f\"{h1}:00:{mid//60:02}\"\n    else:\n        return f\"{h2}:00\" if mid // 60 == 0 else f\"{h2}:00:{mid//60:02}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = stdin.split()\n    h_1 = int(h_1)\n    m_1 = int(m_1)\n    h_2, m_2 = stdin.split()\n    h_2 = int(h_2)\n    m_2 = int(m_2)\n\n    half_min = (m_1 + m_2) // 2\n    h_mid = (h_1 + h_2) // 2\n\n    if half_min == 0:\n        return f\"{h_mid}:00\"\n    elif half_min == 1:\n        return f\"{h_mid + 1}:00\"\n    else:\n        return f\"{h_mid + 1}:0{half_min}\""
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = stdin.split(\":\")\n    midpoint = (int(hours) + int(minutes) // 2)\n    return f\"{midpoint // 60}:{midpoint % 60:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    mid = 0\n\n    if m1 % 2!= m2 % 2:\n        if m1 % 2 == 0:\n            mid = h1 + 1\n        else:\n            mid = h1 + 2\n\n    if mid % 2!= 0:\n        mid = mid + 1\n    mid = mid // 2\n\n    print(f\"{mid // 60:02}:{mid % 60:02}\")"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 2:\n        for i in range(2, a):\n            if a % i == 0:\n                print(i)\n                break\n        else:\n            print(a)\n    else:\n        print(a)\nsolution(input())\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    return a\n    \n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    a = int(stdin)\n    if a == 1:\n        stdout = \"I\"\n    elif a == 2:\n        stdout = \"II\"\n    elif a == 3:\n        stdout = \"III\"\n    elif a == 4:\n        stdout = \"IV\"\n    elif a == 5:\n        stdout = \"V\"\n    elif a == 6:\n        stdout = \"VI\"\n    elif a == 7:\n        stdout = \"VII\"\n    elif a == 8:\n        stdout = \"VIII\"\n    elif a == 9:\n        stdout = \"IX\"\n    elif a == 10:\n        stdout = \"X\"\n    elif a == 11:\n        stdout = \"XI\"\n    elif a == 12:\n        stdout = \"XII\"\n    elif a == 13:\n        stdout = \"XIII\"\n    elif a == 14:\n        stdout = \"XIV\"\n    elif a == 15:\n        stdout = \"XV\"\n    elif a == 16:\n        stdout = \"XVI\"\n    elif a == 17:\n        stdout = \"XVII\"\n    elif a == 18:\n        stdout = \"XVIII\"\n    elif a == 19:\n        stdout = \"XIX\"\n    elif a == 20:\n        stdout = \"XX\"\n    elif a == 21:\n        stdout = \"XXI\"\n    elif a == 22:\n        stdout = \"XXII\"\n    elif a == 23:\n        stdout = \"XXIII\"\n    elif a == 24:\n        stdout = \"XXIV\"\n    elif a == 25:\n        stdout = \"XXV\"\n    elif a == 26:\n        stdout = \"XXVI\"\n    elif a == 27:\n        stdout = \"XXVII\"\n    elif a == 28:\n        stdout = \"XXVIII\"\n    elif a == 29:\n        stdout = \"XXIX\"\n    elif a == 30:\n        stdout = \"XXX\"\n    elif a == 31:\n        stdout = \"XXXI\"\n    elif a == 32:\n        stdout = \"XXXII\"\n    elif a == 33:\n        stdout = \"XXXIII\"\n    elif a == 34:\n        stdout = \"XXXIV\"\n    elif a == 35:\n        stdout = \"XXXV\"\n    elif a == 36:\n        stdout = \"XXXVI\"\n    elif a == 37:\n        stdout = \"XXXVII\"\n    elif a == 38:\n        stdout = \"XXXVIII\"\n    elif a == 39:\n        stdout = \"XXXIX\"\n    elif a == 40:\n        stdout = \"XL\"\n    elif a == 41:\n        stdout = \"XLI\"\n    elif a == 42:\n        stdout = \"XLV\"\n    elif a == 43:\n        stdout = \"XLVIII\"\n    elif a == 44:\n        stdout = \"XLVIV\"\n    elif a == 45:\n        stdout = \"XLVV\"\n    elif a == 46:\n        stdout = \"XLVVI\"\n    elif a == 47:\n        stdout = \"XLVVII\"\n    elif a == 48:\n        stdout = \"XLVVIII\"\n    elif a == 49:\n        stdout = \"XLVIX\"\n    elif a == 50:\n        stdout = \"L\"\n    elif a == 51:\n        stdout = \"LI\"\n    elif a == 52:\n        stdout = \"LII\"\n    elif a == 53:\n        stdout = \"LIII\"\n    elif a == 54:\n        stdout = \"LIV\"\n    elif a == 55:\n        stdout = \"LV\"\n    elif a == 56:\n        stdout = \"LVI\"\n    elif a == 57:\n        stdout = \"LVII\"\n    elif a == 58:\n        stdout = \"LVIII\"\n    elif a == 59:\n        stdout = \"LIX\"\n    elif a == 60:\n        stdout = \"XC\"\n    elif a == 61:\n        stdout = \"XCI\"\n    elif a == 62:\n        stdout = \"XCII\"\n    elif a == 63:\n        stdout = \"XCIII\"\n    elif a == 64:\n        stdout = \"XCIV\"\n    elif a == 65:\n        stdout = \"XCV\"\n    elif a == 66:\n        stdout = \"XCVI\"\n    elif a == 67:\n        stdout = \"XCVII\"\n    elif a == 68:\n        stdout = \"XCVIII\"\n    elif a == 69:\n        stdout = \"XCIX\"\n    elif a == 70:\n        stdout = \"DC\"\n    elif a == 71:\n        stdout = \"DCC\"\n    elif a == 72:\n        stdout = \"DCCI\"\n    elif a == 73:\n        stdout = \"DCCII\"\n    elif a == 74:\n        stdout = \"DCCIII\"\n    elif a == 75:\n        stdout = \"DCCIV\"\n    elif a == 76:\n        stdout = \"DCV\"\n    elif a == 77:\n        stdout = \"DCVI\"\n    elif a == 78:\n        stdout = \"DCVII\"\n    elif a == 79:\n        stdout = \"DCVIII\"\n    elif a == 80:\n        stdout = \"DCIX\"\n    elif a == 81:\n        stdout = \"DM\"\n    elif a == 82:\n        stdout = \"DMI\"\n    elif a == 83:\n        stdout = \"DMIII\"\n    elif a == 84:\n        stdout = \"DMIIII\"\n    elif a == 85:\n        stdout = \"DMIIV\"\n    elif a == 86:\n        stdout = \"DMV\"\n    elif a == 87:\n        stdout = \"DMVI\"\n    elif a == 88:\n        stdout = \"DMVII\"\n    elif a == 89:\n        stdout = \"DMVIII\"\n    elif a == 90:\n        stdout = \"DMIX\"\n    elif a == 91:\n        stdout = \"DCM\"\n    elif a == 92:\n        stdout = \"DMCI\"\n    elif a == 93:\n        stdout = \"DMCII\"\n    elif a == 94:\n        stdout = \"DMCIII\"\n    elif a == 95:\n        stdout = \"DMCIV\"\n    elif a == 96:\n        stdout = \"DMCV\"\n    elif a == 97:\n        stdout = \"DMCVI\"\n    elif a == 98:\n        stdout = \"DMCVII\"\n    elif a == 99:\n        stdout = \"DMCVIII\"\n    elif a == 100:\n        stdout = \"DMCIX\"\n    elif a == 101:\n        stdout = \"DMCX\"\n    elif a == 102:\n        stdout = \"DMCXI\"\n    elif a == 103:\n        stdout = \"DMCXII\"\n    elif a == 104:\n        stdout = \"DMCXIII\"\n    elif a == 105:\n        stdout = \"DMCXIV\"\n    elif a == 106:\n        stdout = \"DMCXV\"\n    elif a == 107:\n        stdout = \"DMCXVI\"\n    elif a == 108:\n        stdout = \"DMCXVII\"\n    elif a == 109:\n        stdout = \"DMCXVIII\"\n    elif a == 110:\n        stdout = \"DMCXIX\"\n    elif a == 111:\n        stdout = \"DMCXX\"\n    elif a == 112:\n        stdout = \"DMCXXI\""
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_string = stdin.splitlines()[0]\n    number_string = number_string.strip(' ')\n    int_number = int(number_string)\n\n    if int_number < 2:\n        return 1\n    if int_number == 2:\n        return 2\n    if int_number > 2 and int_number % 2 == 0:\n        return 2\n    else:\n        return 1\n\nnumber = int(input())\nprint(solution(number))"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 10:\n        return '0' + str(num)\n    return str(num)\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a)\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(d) for d in stdin.split()))\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(c) for c in stdin))\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n + 1)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split()\n    n = int(stdin_lines[0])\n    segments = []\n    for i in range(1, n + 1):\n        segments.append([int(stdin_lines[i][0]), int(stdin_lines[i][1])])\n    segments.sort()\n    segments.append([segments[-1][1], segments[-1][1]])\n    lengths = {}\n    for i in range(n + 1):\n        lengths[i] = 0\n    for segment in segments:\n        if segment[0] > segment[1]:\n            segment = segment[::-1]\n        segment = list(sorted(segment))\n        for i in range(1, len(segment)):\n            lengths[i] = max(lengths[i], lengths[i - 1] + abs(segment[i] - segment[i - 1]))\n    return str(lengths[-1])\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def split(line: str) -> list:\n        return list(map(int, line.split()))\n\n    n = int(stdin)\n    intersection = []\n    for i in range(n):\n        l, r = split(stdin)\n        intersection = list(set(intersection).intersection(range(l, r + 1)))\n    return len(intersection)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    max_dist = 0\n    for i in range(n):\n        if i > 0 and segments[i][0] < segments[i - 1][1]:\n            continue\n        # if i > 0 and segments[i][1] < segments[i - 1][0]:\n        #     continue\n        curr = segments[i][0]\n        for j in range(i + 1, n):\n            if j > i + 1 and segments[j][1] < segments[j - 1][0]:\n                continue\n            # if j > i + 1 and segments[j][0] < segments[j - 1][1]:\n            #     continue\n            intersection = []\n            for k in range(i, j + 1):\n                intersection.append(segments[k][0])\n                intersection.append(segments[k][1])\n            intersection.sort()\n            if len(intersection) > max_dist:\n                max_dist = len(intersection)\n    return str(max_dist)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    prev = 0\n    for i in range(len(s)):\n        if s[i] < prev:\n            s.pop(i)\n            break\n        else:\n            prev = s[i]\n    if len(s) > 1:\n        s.pop(0)\n    return str(len(s))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin.pop(0)\n    segments = []\n    for i in range(n):\n        segments.append(stdin.pop(0))\n        segments.append(stdin.pop(0))\n    return str(max_intersection(segments, n))\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in stdin.split()[i * 2 + 1].split(',')])\n    if n == 1:\n        return str(0)\n    elif n == 2:\n        return str(min([abs(x[0] - x[1]) for x in segments]))\n    segments = sorted(segments, key=lambda x: x[0])\n    print(segments)\n    to_remove = []\n    for i in range(1, n):\n        if segments[i][0] <= segments[i - 1][1]:\n            to_remove.append(i)\n            to_remove.append(i - 1)\n    to_remove = sorted(to_remove, reverse=True)\n    if len(to_remove) == 0:\n        return str(0)\n    elif len(to_remove) == 1:\n        return str(abs(segments[to_remove[0]][0] - segments[to_remove[0] - 1][1]))\n    else:\n        return str(abs(segments[to_remove[0]][0] - segments[to_remove[0] - 1][1])) +'' + str(abs(segments[to_remove[0]][1] - segments[to_remove[1] - 1][1]))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, stdin.strip().split('\\n')[i].split())))\n    #print(segments)\n    result = []\n    for i in range(n):\n        intersection = []\n        if len(result) == 0:\n            intersection = segments[i]\n        else:\n            intersection = [x for x in result if x <= segments[i][0] or x >= segments[i][1]]\n        result += intersection\n        #print(result)\n        if len(result) == n:\n            break\n    print(len(result))\n    return\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n\n    def compare(x, y):\n        if x[0] > y[0]:\n            return 1\n        if x[0] < y[0]:\n            return -1\n        if x[1] > y[1]:\n            return 1\n        if x[1] < y[1]:\n            return -1\n        return 0\n\n    segments = []\n    for i in range(n):\n        segments.append([int(stdin.pop(0)), int(stdin.pop(0))])\n\n    # sort segments by first coordinate\n    segments.sort(key=lambda x: x[0])\n\n    # remove the segment with the max coordinate\n    max_coordinate = segments[-1][1]\n    segments = segments[:-1]\n\n    # compare the rest of the segments\n    for i in range(len(segments) - 1):\n        if compare(segments[i], segments[i + 1]) == 1:\n            if segments[i][0] > max_coordinate:\n                max_coordinate = segments[i][0]\n        if compare(segments[i + 1], segments[i]) == 1:\n            if segments[i + 1][0] > max_coordinate:\n                max_coordinate = segments[i + 1][0]\n\n    # intersect segments\n    intersect_segments = []\n    for segment in segments:\n        if segment[0] < max_coordinate < segment[1]:\n            intersect_segments.append(segment)\n    return len(intersect_segments)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_segments = int(stdin.split()[0])\n    segments = []\n    for i in range(num_segments):\n        segments.append(list(map(int, stdin.split()[i * 2 + 1].split(','))))\n    segments.sort()\n    ans = 0\n    while len(segments) > 1:\n        segments.pop()\n        last_segment = segments.pop()\n        last_segment = list(map(int, last_segment))\n        if last_segment[0] < last_segment[1]:\n            segments.append(last_segment)\n        else:\n            segments.append(last_segment[::-1])\n    if len(segments) > 0:\n        ans = segments[0][1] - segments[0][0] + 1\n    return str(ans)\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    # print(n, a)\n    return \"YES\" if max(a) == n else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if n == 1:\n        if a[0] == a[1]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if n == 2:\n        if a[0] == a[1] == a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    max_a = max(a)\n    if a[0] == a[1] and a[1] == a[2]:\n        return \"NO\"\n    if a[0] == a[1]:\n        if max_a - a[0] == a[1] - a[0] or max_a - a[0] == a[2] - a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] == a[2]:\n        if max_a - a[0] == a[1] - a[0] or max_a - a[0] == a[2] - a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[1] == a[2]:\n        if max_a - a[1] == a[0] - a[1] or max_a - a[1] == a[1] - a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] == a[1]:\n        if max_a - a[0] == a[2] - a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[1] == a[2]:\n        if max_a - a[1] == a[0] - a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] == a[2]:\n        if max_a - a[0] == a[1] - a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] == a[1]:\n        if max_a - a[0] == a[2] - a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] == a[1] == a[2]:\n        if max_a - a[0] == a[1] - a[0] or max_a - a[0] == a[2] - a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    wall = stdin.split()\n    wall = list(map(int, wall))\n    height = wall.pop(0)\n    while height!= 0:\n        if height!= 1:\n            for i in range(len(wall)-1):\n                if wall[i] == height and wall[i+1] == height-1:\n                    wall[i] = wall[i] + 1\n                    wall[i+1] = wall[i+1] + 1\n                    height -= 2\n                    break\n            else:\n                return 'NO'\n        else:\n            return 'YES'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return \"YES\" if len(set(a)) == 1 and len(set(a)) == len(a) else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if len(a) == 0 or len(a) == 1:\n        return \"YES\"\n    for i in range(1, len(a)):\n        if a[i - 1] == a[i] and a[i - 1]!= a[i]:\n            return \"NO\"\n    if a[0] == a[-1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if n == 1:\n        if a[0] == a[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    def check_completion(a):\n        if a[0] == a[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    return check_completion(a)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"YES\"\n        elif a[1] == a[2] == a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"YES\"\n        elif a[1] == a[2] == a[3] == a[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.reverse()\n    for i in range(n - 1):\n        a[i + 1] = max(a[i + 1], a[i] + 1)\n    return \"YES\" if sum(a) == a[0] + a[-1] else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.splitlines()\n    n = int(inp[0])\n    a = list(map(int, inp[1]))\n    h = []\n    for i in range(1, n + 1):\n        h.append(a[i - 1])\n    if len(h) == n:\n        for i in range(1, n + 1):\n            if h[i - 1] == h[i]:\n                return 'NO'\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if (len(s) < k) | (len(set(s)) > k):\n        return -1\n    return sum(len(s) - len(set(s)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1\n    # return cost\n    cost = 0\n    string = stdin\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            return -1\n        cost += 1\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[1]\n    return -1 if len(set(s)) < k else sum(map(len, set(s[:len(s)-k])))\nsolution(input())"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, k = map(int, s.split())\n    if n < k:\n        print(-1)\n        return\n    if n == k:\n        print(0)\n        return\n    array = sorted(s)\n    set = []\n    if len(array) == k:\n        print(len(array))\n        return\n    if len(array) == k-1:\n        print(len(array)-1)\n        return\n    if len(array) == k-2:\n        print(len(array)-2)\n        return\n    # print(array, len(array))\n    cost = 1\n    for i in range(len(array)):\n        set.append(array[i])\n        cost += 1\n        if len(set) == k:\n            print(cost)\n            return\n    if len(set) == k-1:\n        print(cost)\n        return\n    if len(set) == k-2:\n        print(cost)\n        return\n    if len(set) == k-3:\n        print(cost)\n        return\n    if len(set) == k-4:\n        print(cost)\n        return\n    if len(set) == k-5:\n        print(cost)\n        return\n    if len(set) == k-6:\n        print(cost)\n        return\n    if len(set) == k-7:\n        print(cost)\n        return\n    if len(set) == k-8:\n        print(cost)\n        return\n    if len(set) == k-9:\n        print(cost)\n        return\n    if len(set) == k-10:\n        print(cost)\n        return\n    if len(set) == k-11:\n        print(cost)\n        return\n    if len(set) == k-12:\n        print(cost)\n        return\n    if len(set) == k-13:\n        print(cost)\n        return\n    if len(set) == k-14:\n        print(cost)\n        return\n    if len(set) == k-15:\n        print(cost)\n        return\n    if len(set) == k-16:\n        print(cost)\n        return\n    if len(set) == k-17:\n        print(cost)\n        return\n    if len(set) == k-18:\n        print(cost)\n        return\n    if len(set) == k-19:\n        print(cost)\n        return\n    if len(set) == k-20:\n        print(cost)\n        return\n    if len(set) == k-21:\n        print(cost)\n        return\n    if len(set) == k-22:\n        print(cost)\n        return\n    if len(set) == k-23:\n        print(cost)\n        return\n    if len(set) == k-24:\n        print(cost)\n        return\n    if len(set) == k-25:\n        print(cost)\n        return\n    if len(set) == k-26:\n        print(cost)\n        return\n    if len(set) == k-27:\n        print(cost)\n        return\n    if len(set) == k-28:\n        print(cost)\n        return\n    if len(set) == k-29:\n        print(cost)\n        return\n    if len(set) == k-30:\n        print(cost)\n        return\n    if len(set) == k-31:\n        print(cost)\n        return\n    if len(set) == k-32:\n        print(cost)\n        return\n    if len(set) == k-33:\n        print(cost)\n        return\n    if len(set) == k-34:\n        print(cost)\n        return\n    if len(set) == k-35:\n        print(cost)\n        return\n    if len(set) == k-36:\n        print(cost)\n        return\n    if len(set) == k-37:\n        print(cost)\n        return\n    if len(set) == k-38:\n        print(cost)\n        return\n    if len(set) == k-39:\n        print(cost)\n        return\n    if len(set) == k-40:\n        print(cost)\n        return\n    if len(set) == k-41:\n        print(cost)\n        return\n    if len(set) == k-42:\n        print(cost)\n        return\n    if len(set) == k-43:\n        print(cost)\n        return\n    if len(set) == k-44:\n        print(cost)\n        return\n    if len(set) == k-45:\n        print(cost)\n        return\n    if len(set) == k-46:\n        print(cost)\n        return\n    if len(set) == k-47:\n        print(cost)\n        return\n    if len(set) == k-48:\n        print(cost)\n        return\n    if len(set) == k-49:\n        print(cost)\n        return\n    if len(set) == k-50:\n        print(cost)\n        return\n    if len(set) == k-51:\n        print(cost)\n        return\n    if len(set) == k-52:\n        print(cost)\n        return\n    if len(set) == k-53:\n        print(cost)\n        return\n    if len(set) == k-54:\n        print(cost)\n        return\n    if len(set) == k-55:\n        print(cost)\n        return\n    if len(set) == k-56:\n        print(cost)\n        return\n    if len(set) == k-57:\n        print(cost)\n        return\n    if len(set) == k-58:\n        print(cost)\n        return\n    if len(set) == k-59:\n        print(cost)\n        return\n    if len(set) == k-60:\n        print(cost)\n        return\n    if len(set) == k-61:\n        print(cost)\n        return\n    if len(set) == k-62:\n        print(cost)\n        return\n    if len(set) == k-63:\n        print(cost)\n        return"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[1]\n    max_cost = n\n    for i in range(1, n):\n        max_cost = max(max_cost, i + min((n - i) - 1, (n - i) // 2))\n    if k == 1:\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        return max_cost\n    if k == n:\n        if n == 1:\n            return max_cost\n        if n == 2:\n            return max_cost - 1\n        return max_cost - 2\n    if k > n:\n        return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    string = stdin.split()\n    n = int(string[0])\n    k = int(string[1])\n    str = string[2]\n    total_cost = 0\n    if k > n:\n        return -1\n    elif k == n:\n        return 0\n    str = sorted(list(str))\n    if len(str) == 0:\n        return total_cost\n    for i in range(1, k + 1):\n        if str[0] == str[i]:\n            total_cost += 1\n            del str[0]\n    return total_cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nyour code here"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    for i in range(n-1):\n        if s.count(s[i]) > 1:\n            s = s.replace(s[i], \"\")\n        if len(s) == k:\n            return s\n    return -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    s = stdin\n    s_len = len(s)\n    res = 0\n    for i in range(1, n):\n        s = s[1:] + s[0]\n        if s[0]!= s[s_len - 1]:\n            res += i + 1\n    return res"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 7:\n        return '1'\n    elif a + b + c > 7:\n        return str(7 - a + b + c)\n    else:\n        return str(7 - a - b - c)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = list(map(int, stdin.split()))\n\n    m = 0\n    count = 0\n\n    for i in range(1, 31):\n\n        if i in [1, 3, 5, 7]:\n            count = a\n        elif i in [4, 6, 8, 10]:\n            count = b\n        elif i in [9, 11, 12, 13]:\n            count = c\n\n        m = max(m, count)\n        count = 0\n\n    return m\n\n\nprint(solution(\"2 1 1\"))\n\nprint(solution(\"3 2 2\"))\n\nprint(solution(\"1 100 1\"))\n\nprint(solution(\"30 20 10\"))"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = [int(x) for x in stdin.split()]\n\n    print((a + b + c) // 2)\n\nsolution(input())"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = [int(x) for x in stdin.split()]\n  daily_cups = [x for x in range(1, c+1)]\n  # print(daily_cups)\n  best_day = 0\n  for i in range(1, a+1):\n    # print('new day', i)\n    daily_cups.pop(0)\n    daily_cups.append(i)\n    # print(daily_cups)\n    # print(daily_cups)\n    if len(daily_cups) == c:\n      best_day = max(i, best_day)\n    else:\n      continue\n    for i in range(2, 4):\n      # print('new cup')\n      daily_cups.pop(0)\n      daily_cups.append(i)\n      # print(daily_cups)\n      if len(daily_cups) == c:\n        best_day = max(i, best_day)\n      else:\n        continue\n  return str(best_day)"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    maximum_days = 0\n    week_days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    # Cheat and make everything a week\n    for day in week_days:\n        # calculate number of days\n        if day == 'Mon':\n            days = c\n        elif day == 'Tue':\n            days = a + b\n        elif day == 'Wed':\n            days = a + c\n        elif day == 'Thu':\n            days = b + c\n        elif day == 'Fri':\n            days = a + b + c\n        elif day == 'Sat':\n            days = a + b + c\n        elif day == 'Sun':\n            days = a + b + c\n        else:\n            # if not used yet\n            days = 1\n        if days > maximum_days:\n            maximum_days = days\n    return str(maximum_days)\n\n\nsolution(\"3 2 2\")\nsolution(\"1 100 1\")\nsolution(\"30 20 10\")\nsolution(\"1 2 3\")\nsolution(\"4 3 2\")\nsolution(\"5 4 1\")\nsolution(\"1 1 1\")\nsolution(\"2 1 1\")\nsolution(\"1 1 1\")\nsolution(\"5 1 1\")\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    if N == 1:\n        if C == A:\n            print(1)\n        else:\n            print(2)\n    else:\n        F = 2 * (A + B)\n        R = 3 * (B + C)\n        C = 2 * (C + A)\n        days = int(max(F, R, C))\n        if F <= R and F <= C:\n            print(days)\n        elif R <= F and R <= C:\n            print(days)\n        else:\n            print(days)\nsolution(\"2 1 1\")\nsolution(\"3 2 2\")\nsolution(\"1 100 1\")\nsolution(\"30 20 10\")\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    _, a, b, c = map(int, stdin.split())\n    \n    def max_days(n):\n        if n == 0:\n            return 0\n        days_taken = 1\n        for _ in range(n):\n            days_taken += max(a, b, c)\n            a -= 1\n            b -= 1\n            c -= 1\n        return days_taken\n\n    day = 2\n    count = 0\n    while day < 100:\n        count = max_days(day)\n        if count > 0:\n            day += 1\n        else:\n            break\n    return str(day)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = {\n        1: 1,\n        2: 1,\n        3: 3,\n        4: 2,\n        5: 4,\n        6: 3,\n        7: 4,\n    }\n    best_day = 7\n    days_left = 7\n    eat_day = 0\n    food_left = 0\n    while days_left > 0:\n        if days_left % 2 == 1:\n            food_left = a\n        else:\n            food_left = b\n        if food_left >= c:\n            best_day = days[best_day]\n            eat_day += 1\n            food_left -= c\n        days_left -= 1\n    return str(eat_day)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a >= b + c:\n        return str(a // (b + c))\n    elif b >= a + c:\n        return str(b // (a + c))\n    else:\n        return str(c // (a + b))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = [((i + 1) % 7) + 1 for i in range(1, 8)]\n    dp = [[0] * 3 for _ in range(7)]\n    dp[0][0] = a\n    dp[0][1] = b\n    dp[0][2] = c\n    dp[1][0] = a\n    dp[1][1] = b\n    dp[1][2] = c\n    dp[2][0] = a\n    dp[2][1] = b\n    dp[2][2] = c\n\n    for i in range(3, 7):\n        dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + a\n        dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + b\n        dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + c\n\n    return str(max(max(dp[i])) + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = [int(x) for x in stdin.split()]\n        tiles = stdin.split()\n        tiles_1 = [[tiles[x], tiles[y]] for x in range(n) for y in range(n) if x!= y]\n        tiles_2 = [[tiles[x], tiles[y]] for x in range(n) for y in range(n) if x!= y]\n        if (tiles_1 == tiles_2):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(list(map(int, stdin.strip().split())))\n    if (m!= len(tiles[0])):\n        return \"NO\"\n    for t in tiles:\n        t.sort()\n        if t[0] > t[-1]:\n            return \"NO\"\n\n    squares = []\n    for _ in range(m):\n        squares.append([])\n        for _ in range(m):\n            squares[-1].append(None)\n\n    for t in tiles:\n        squares[-t[1] - 1][t[0] - 1] = t[1]\n\n    for i in range(m):\n        for j in range(m):\n            if (j < m - 1 and squares[i][j]!= squares[i][j + 1]):\n                return \"NO\"\n            if (i < m - 1 and squares[i][j]!= squares[i + 1][j]):\n                return \"NO\"\n\n    for t in tiles:\n        if (t[0] < m and squares[t[1]][t[0]]!= t[1]):\n            return \"NO\"\n        if (t[1] < m and squares[t[1]][t[1]]!= t[1]):\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\nstdin = input()\nfor i in range(int(stdin)):\n    if is_square(int(stdin))\n    if is_square(int(stdin))\n        return \"YES\"\nreturn \"NO\"\n'''\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input `stdin` of `t` test cases and iterates it returning `True` or `False`\n    \"\"\"\n    for i in range(int(stdin.splitlines()[0])):\n        t = stdin.splitlines()[2 * i + 1]\n        s = stdin.splitlines()[2 * i + 2]\n        s = str_to_matrix(s)\n        if solution_alg(s):\n            return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    tiles = []\n    for _ in range(n):\n        tiles.append(stdin.strip().split())\n    return \"YES\" if is_square_square(tiles, m) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n*n!= m*m:\n        return \"NO\"\n\n    tiles = []\n    for i in range(n):\n        tiles.append(list(map(int, stdin.split())))\n\n    if n == 1 and m == 1:\n        return \"YES\"\n\n    tiles_set = set(tuple(x) for x in tiles)\n    tiles_dict = dict(tiles_set)\n\n    m_up_dict = dict()\n    m_down_dict = dict()\n    m_left_dict = dict()\n    m_right_dict = dict()\n\n    for i in tiles_dict.keys():\n        m_up_dict[tuple(sorted(i))] = tiles_dict[i]\n        m_down_dict[tuple(sorted(i))] = tiles_dict[i]\n        m_left_dict[tuple(sorted(i))] = tiles_dict[i]\n        m_right_dict[tuple(sorted(i))] = tiles_dict[i]\n\n    tile_types = set(x for x in tiles_dict.keys())\n\n    def cmp(a, b):\n        if a[0] == b[0] and a[1] == b[1]:\n            return cmp(a[2], b[2])\n        else:\n            return cmp(a[0], b[0]) * cmp(a[1], b[1])\n\n    for t in tile_types:\n        if len(m_up_dict[t]) == 1:\n            if len(m_left_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_up_dict.pop(t)\n                m_left_dict.pop(t)\n                m_up_dict[tuple(sorted(t))] = tiles_dict[t]\n            if len(m_right_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_up_dict.pop(t)\n                m_right_dict[tuple(sorted(t))] = tiles_dict[t]\n\n        if len(m_down_dict[t]) == 1:\n            if len(m_left_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_down_dict.pop(t)\n                m_left_dict[tuple(sorted(t))] = tiles_dict[t]\n            if len(m_right_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_down_dict.pop(t)\n                m_right_dict[tuple(sorted(t))] = tiles_dict[t]\n\n        if len(m_left_dict[t]) == 1:\n            if len(m_up_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_left_dict.pop(t)\n                m_up_dict[tuple(sorted(t))] = tiles_dict[t]\n            if len(m_down_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_left_dict.pop(t)\n                m_down_dict[tuple(sorted(t))] = tiles_dict[t]\n\n        if len(m_right_dict[t]) == 1:\n            if len(m_up_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_right_dict.pop(t)\n                m_up_dict[tuple(sorted(t))] = tiles_dict[t]\n            if len(m_down_dict[t]) == 1 and cmp(t, tuple(reversed(t))) == 1:\n                m_right_dict.pop(t)\n                m_down_dict[tuple(sorted(t))] = tiles_dict[t]\n\n    for t in tiles_dict.keys():\n        if m_up_dict[t] == 1 and len(m_up_dict) > 1:\n            return \"NO\"\n        if m_down_dict[t] == 1 and len(m_down_dict) > 1:\n            return \"NO\"\n        if m_left_dict[t] == 1 and len(m_left_dict) > 1:\n            return \"NO\"\n        if m_right_dict[t] == 1 and len(m_right_dict) > 1:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.strip().split())\n\n    tiles = []\n    for _ in range(n):\n        tile = stdin.strip().split()\n        tiles.append((int(tile[0]), int(tile[1])))\n\n    print(is_symmetric(m, tiles))\n    return \"YES\" if is_symmetric(m, tiles) else \"NO\"\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def strToInt(s: str):\n        ans = 0\n        for i in range(len(s)):\n            ans += int(s[i]) * 10**(len(s)-i-1)\n        return ans\n\n    n = int(stdin)\n    while True:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            break\n\n    a = strToInt(str(n))\n    b = strToInt(str(n+1))\n    print(abs(a-b))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = {i + 1 for i in range(n)}\n    B = {i + 1 for i in range(n)}\n\n    while len(A)!= 1 or len(B)!= 1:\n        if len(A) > len(B):\n            A, B = B, A\n        A -= set(range(len(A)))\n        B -= set(range(len(B)))\n    return str(sum(A) - sum(B))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = {1, 2}\n    b = {3}\n    for i in range(4, n + 1):\n        a.add(i)\n        b.add(i)\n    return abs(len(a) - len(b))"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return \"0\"\n    divide_sums = []\n    divide_sums.append(sum([n]))\n    divide_sums.append(sum([n-2, n-1]))\n    divide_sums.append(sum([n-3, n-2, n-1]))\n    divide_sums.sort()\n    a_min = divide_sums[0]\n    b_min = divide_sums[1]\n    c_min = divide_sums[2]\n    print(abs(a_min - b_min))\n    return abs(a_min - b_min)\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"5\")\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sets = [1]\n    for _ in range(1, n):\n        sets.append(sets[-1]+sets[-2])\n    sets.append(sets[-1]+sets[-2])\n    diff = abs(sets[-1] - sets[-2])\n    for i in range(n):\n        diff -= abs(sets[i] - sets[i+1])\n    return diff\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '0'\n    return '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    a = set()\n    b = set()\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n        if i % 2!= 0:\n            a.add(i)\n        else:\n            b.add(i)\n    return str(abs(total_sum - len(a) - len(b)))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divider_1 = divider_2 = 0\n    divider_1 = sum(x for x in range(1, n+1))\n    divider_2 = sum(x for x in range(2, n+1))\n    if abs(divider_1 - divider_2) > abs(divider_1 - divider_2):\n        return abs(divider_1 - divider_2)\n    else:\n        return abs(divider_1 - divider_2)"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(abs(sum(A) - sum(B)), abs(sum(A) - sum(B)) + abs(sum(A) - sum(B))))\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(2, n+1):\n        for j in range(1, n-i+1):\n            seq = s[j:j+i]\n            if seq.count('(') == seq.count(')') and seq.count('(') == 2 and seq.count(')') == 2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    length = len(s)\n    divisor = 10000007\n    res = 0\n    for i in range(1, length):\n        j = i\n        string_j = s[j]\n        string_j_left = s[j - 1]\n        string_j_right = s[j + 1]\n        while j > 0:\n            if string_j == ')' and string_j_left == '(' or string_j == ']' and string_j_left == '[':\n                if string_j_right == ')' or string_j_right == ']' or string_j_right == ']':\n                    break\n                j -= 1\n                string_j = s[j]\n                string_j_left = s[j - 1]\n                string_j_right = s[j + 1]\n            else:\n                break\n        else:\n            continue\n        string_j_left_count = 1\n        string_j_right_count = 1\n        while j < length - 1:\n            if string_j_right == '(' and string_j_left == ')' or string_j_right == '[' and string_j_left == ']' or string_j_right == ']' and string_j_left == '[':\n                break\n            else:\n                if string_j_right == ')' and string_j_left == '(' or string_j_right == ']' and string_j_left == '[':\n                    string_j_left_count += 1\n                if string_j_right == ']' and string_j_left == '[' or string_j_right == ')' and string_j_left == '[':\n                    string_j_right_count += 1\n                if string_j_left == '(' and string_j_right == ')' or string_j_left == '[' and string_j_right == ']':\n                    string_j_left_count -= 1\n                if string_j_left == '[' and string_j_right == ']' or string_j_left == ')' and string_j_right == ']':\n                    string_j_right_count -= 1\n                j += 1\n                string_j = s[j]\n                string_j_left = s[j - 1]\n                string_j_right = s[j + 1]\n            if string_j_right_count == 0 and string_j_left_count == 0:\n                res += 1\n                j += 1\n                string_j = s[j]\n                string_j_left = s[j - 1]\n                string_j_right = s[j + 1]\n                string_j_left_count = 1\n                string_j_right_count = 1\n    return str(res % divisor)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(is_bracket_sequence(stdin) for i in range(1, int(len(stdin) / 2))) % 1000000007)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    count = 0\n    if len(s) == n:\n        for i in range(1, n):\n            if len(s) <= (2 * i):\n                break\n            elif s[i-1] == \")\":\n                if s[i] == \"(\" or s[i] == \")\":\n                    count += 1\n                else:\n                    break\n            elif s[i-1] == \"(\":\n                if s[i] == \"(\" or s[i] == \")\":\n                    count += 1\n                else:\n                    break\n            else:\n                break\n    else:\n        count = 1\n    print(count)\n    return count\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(0, int(len(s)/2)):\n        if s[i] == '(':\n            count += 1\n        if s[i] == ')':\n            count -= 1\n        if count == -1:\n            break\n    if count!= 0:\n        return -1\n    if len(s) == count * 2:\n        return len(s)\n    else:\n        return len(s) % (10**9+7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    s = stdin\n    return ((len(s) // 2) - 1) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    seq = stdin.split()[1]\n\n    # The number of 2n-length sequences\n    # of length 2n consisting of 1 and -1\n    # in the sequence seq is:\n    # 1 + (1^2) + (1^3) + (1^4) +\n    # (1^5) + (1^6) + (1^7) + (1^8) +\n    # (1^9) + (1^10) + (1^11) + (1^12) +\n    # (1^13) + (1^14) + (1^15) + (1^16) +\n    # (1^17) + (1^18) + (1^19) + (1^20) +\n    # (1^21) + (1^22) + (1^23) + (1^24) +\n    # (1^25) + (1^26) + (1^27) + (1^28) +\n    # (1^29) + (1^30) + (1^31) + (1^32) +\n    # (1^33) + (1^34) + (1^35) + (1^36) +\n    # (1^37) + (1^38) + (1^39) + (1^40) +\n    # (1^41) + (1^42) + (1^43) + (1^44) +\n    # (1^45) + (1^46) + (1^47) + (1^48) +\n    # (1^49) + (1^50) + (1^51) + (1^52) +\n    # (1^53) + (1^54) + (1^55) + (1^56) +\n    # (1^57) + (1^58) + (1^59) + (1^60)\n    #\n    # Hence the number of such 2n-length sequences is the sum of the number of sequences\n    # consisting of 1 and -1.\n    #\n    # e.g.\n    # 1 + 2^2 + 3^3 + 4^4 + 5^5 + 6^6 + 7^7 + 8^8 + 9^9 + 10^10 + 11^11 + 12^12 + 13^13 + 14^14 + 15^15 + 16^16 + 17^17 + 18^18 + 19^19 + 20^20 + 21^21 + 22^22 + 23^23 + 24^24 + 25^25 + 26^26 + 27^27 + 28^28 + 29^29 + 30^30 + 31^31 + 32^32 + 33^33 + 34^34 + 35^35 + 36^36 + 37^37 + 38^38 + 39^39 + 40^40 + 41^41 + 42^42 + 43^43 + 44^44 + 45^45 + 46^46 + 47^47 + 48^48 + 49^49 + 50^50 + 51^51 + 52^52 + 53^53 + 54^54 + 55^55 + 56^56 + 57^57 + 58^58 + 59^59 + 60^60 + 61^61 + 62^62 + 63^63 + 64^64 + 65^65 + 66^66 + 67^67 + 68^68 + 69^69 + 70^70 + 71^71 + 72^72 + 73^73 + 74^74 + 75^75 + 76^76 + 77^77 + 78^78 + 79^79 + 80^80 + 81^81 + 82^82 + 83^83 + 84^84 + 85^85 + 86^86 + 87^87 + 88^88 + 89^89 + 90^90 + 91^91 + 92^92 + 93^93 + 94^94 + 95^95 + 96^96 + 97^97 + 98^98 + 99^99 + 100^100 + 101^101 + 102^102 + 103^103 + 104^104 + 105^105 + 106^106 + 107^107 + 108^108 + 109^109 + 110^110 + 111^111 + 112^112 + 113^113 + 114^114 + 115^115 + 116^116 + 117^117 + 118^118 + 119^119 + 120^120 + 121^121 + 122^122 + 123^123 + 124^124 + 125^125 + 126^126 + 127^127 + 128^128 + 129^129 + 130^130 + 131^131 + 132^132 + 133^133 + 134^134 + 135^135 + 136^136 + 137^137 + 138^138 + 139^139 + 140^140 + 141^141 + 142^142 + 143^143 + 144^144 + 145^145 + 146^146 + 147^147 + 148^148 + 149^149 + 150^150 + 151^151 + 152^152 + 153^153 + 154^154 + 155^155 + 156^156 + 157^157 + 158^158 + 159^159 + 160^160 + 161^161 + 162^162 + 163^163 + 164^164 + 165^165 + 166^166 + 167^167 + 168^168 + 169^169 + 170^170 + 171^171 + 172^172 + 173^173 + 174^174 + 175^175 + 176^176 + 177^177 + 178^178 + 179^179 + 180^180 + 181^181 + 182^182 + 183^183 + 184^184 + 185^185 + 186^186 + 187^187 + 188^188 + 189^189 + 190^190 + 191^191 + 192^192 + 193^193 + 194^194 + 195^195 + 196^196 + 197^197 + 198^198 + 199^199 + 200^200 + 201^201 + 202^202 + 203^203 + 204^204 + 205^205 + 206^206 + 207^207 + 208^208 + 209^209 + 210^210 + 211^211 + 212^212 + 213^213 + 214^214 + 215^215 + 216^216 + 217^217 + 218^218 + 219^219 + 220^220 + 221^221 + 222^222 + 223^223 + 224^224 + 225^225 + 226^226 + 227^227 + 228^228 + 229^229 + 230^230 + 231^231 + 232^232 + 233^233 + 234^234 + 235^235 + 236^236 + 237^237 + 238^238 + 239^239 + 240^240 + 241^241 + 242^242 + 243^243 + 244^244 + 245^245 + 246^246 + 247^247 + 248^248 + 249^249 + 250^250 + 251^251 + 252^252 + 253^253 + 254^254 + 255^255 + 256^256"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    st = stdin.split()[1]\n    result = 0\n    for i in range(0, length):\n        if st[i] == \"(\" and st[i+1] == \")\":\n            result += 1\n    return str(result % (10 ** 9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = int(stdin)\n    for i in range(n, n+4):\n        if is_valid(i, stdin):\n            count += 1\n    return str(count % 10000000007)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(findall(r'\\(.*\\)', stdin)))\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.strip()\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    moves = 0\n    while True:\n        if n % 25 == 0:\n            break\n        n_copy = n\n        for i in range(1, len(str(n_copy))):\n            if str(n_copy)[i]!= '0':\n                n_copy = int(str(n_copy)[:i] + str(n_copy)[i + 1:])\n                break\n        n = n_copy\n        moves += 1\n    return moves\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if not n % 25:\n    return str(n)\n  if n < 25:\n    return -1\n  ans = ''\n  if n >= 10 ** 18:\n    return -1\n  i = 10 ** 18\n  while i > 0:\n    if n % i == 0:\n      n = n / i\n      ans += str(i)\n      i = 10 ** 18\n    else:\n      i -= 1\n  return str(ans)\n  \nsolution('5071')\nsolution('705')\nsolution('1241367')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('123456789101234567890')\nsolution('"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = {int(i): i for i in range(10)}\n    for i in range(len(stdin)):\n        if stdin[i] not in d:\n            return \"impossible\"\n        d[int(stdin[i])] = int(stdin[i])\n    d = {int(i): i for i in range(10)}\n    for i in range(len(stdin)-1):\n        if stdin[i+1] in d and int(stdin[i])!= 0:\n            return \"impossible\"\n        d[int(stdin[i+1])] = int(stdin[i])\n    return stdin\n\n\nsolution('12321321')\nsolution('12345')\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n > 25:\n        moves += 1\n        n = n//10\n    if n < 25:\n        return -1\n    else:\n        return moves\nsolution('5')\nsolution('6')\nsolution('5071')"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_str = str(num)\n    div_by = 25\n    div_idx = len(num_str)-1\n    for i in range(len(num_str)-1):\n        if num_str[i]!= num_str[i+1]:\n            if int(num_str[i]) % div_by == 0 and int(num_str[i+1]) % div_by == 0:\n                if div_idx == i:\n                    return \"-\"\n                else:\n                    return str(i-div_idx)\n            else:\n                return \"-\"\n    return str(len(num_str)-1)\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 25:\n        a = n % 25\n        if a!= 0:\n            count += 1\n        n //= 25\n    return count\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        if stdin.isdigit():\n            stdin = int(stdin)\n            if stdin % 25 == 0:\n                print(0)\n                break\n            stdin = str(stdin)\n            count = 0\n            for i in range(0, len(stdin)):\n                if stdin[i]!= stdin[i - 1]:\n                    if stdin[i]!= stdin[i + 1]:\n                        stdin = stdin[:i] + stdin[i + 1] + stdin[i] + stdin[i + 2:]\n                        count += 1\n                    else:\n                        stdin = stdin[:i] + stdin[i + 1] + stdin[i] + stdin[:i - 1] + stdin[i + 2:]\n                        count += 1\n            print(count)\n            break\n        else:\n            stdin = stdin.replace(' ', '')\n            if len(stdin) == 0:\n                break\n\nsolution(input())"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if (n % i == 0):\n            return str(i)\n\n    for i in range(1, 10):\n        if (n % (i*10) == 0):\n            return str(i*10)\n\n    for i in range(1, 10):\n        if (n % (i * 100) == 0):\n            return str(i*100)\n\n    for i in range(1, 10):\n        if (n % (i * 10) == 0):\n            return str(i*10)\n\n    for i in range(1, 10):\n        if (n % (i * 100) == 0):\n            return str(i*100)\n\n    for i in range(1, 10):\n        if (n % (i * 100) == 0):\n            return str(i*100)\n\n    return -1\n\n\nsolution(\"1241367\")\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  div = n\n  moves = 0\n  while div % 25!= 0:\n    div = int((div * 10 + div % 10) / 10)\n    moves += 1\n  return str(moves) if moves < 25 else -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by(number: int) -> bool:\n        return number % 25 == 0\n\n    # convert to string, make all numbers divisible by 25\n    number = int(stdin)\n    # convert the number to a list of strings\n    number = list(str(number))\n\n    # make all numbers divisible by 25\n    while not is_divisible_by(int(''.join(number))):\n        # swap adjacent digits that are not divisible by 25\n        for i in range(len(number) - 1):\n            if int(number[i]) % 25!= 0 and int(number[i + 1]) % 25!= 0:\n                number[i], number[i + 1] = number[i + 1], number[i]\n\n    return str(int(''.join(number)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[-n:]\n    c = sorted(list(set(s)))\n    c.sort()\n    s = [c.index(i) for i in s]\n    return str(len(c)) + \" \" + \" \".join(map(str, s))\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    if n == 1:\n        return \"1\"\n\n    if n == 2:\n        return \"1 1 2\"\n\n    cnt = 2\n    seen = {}\n\n    while True:\n        current = sorted(s)\n        if current not in seen:\n            seen[current] = cnt\n            s = \"\".join(current)\n            cnt += 1\n        else:\n            return str(seen[current])\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def swap(a, b):\n        nonlocal c\n        c[a], c[b] = c[b], c[a]\n\n    n = int(stdin)\n    s = stdin[1].rstrip()\n    c = list(range(1, n + 1))\n\n    for i in range(1, n):\n        if s[i - 1] < s[i]:\n            # swap\n            swap(i - 1, i)\n\n    res = n\n    while res > 1:\n        res = max(res // 2, 1)\n        # swap\n        swap(n - res, n - res + 1)\n        # shift left\n        swap(n - res + 1, n - res)\n\n    return str(res) +'' +''.join(str(i) for i in c)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    n: int = len(s)\n    c: int = len(set(s))\n    if c <= 1:\n        return str(1)\n    # c = 3, min = 1, max = 3\n    # min = 3, max = 4\n    if n == 1:\n        return str(1)\n    # c = 4, min = 1, max = 4\n    # min = 4, max = 5\n    if n == 2:\n        return str(1)\n    # c = 5, min = 1, max = 5\n    if n == 3:\n        return str(1)\n    # c = 6, min = 1, max = 6\n    # min = 6, max = 7\n    if n == 4:\n        return str(1)\n    # c = 7, min = 1, max = 7\n    # min = 7, max = 8\n    if n == 5:\n        return str(1)\n    # c = 8, min = 1, max = 8\n    if n == 6:\n        return str(1)\n    # c = 9, min = 1, max = 9\n    if n == 7:\n        return str(1)\n    # c = 10, min = 1, max = 10\n    if n == 8:\n        return str(1)\n    # c = 11, min = 1, max = 11\n    if n == 9:\n        return str(1)\n    # c = 12, min = 1, max = 12\n    if n == 10:\n        return str(1)\n    # c = 13, min = 1, max = 13\n    if n == 11:\n        return str(1)\n    # c = 14, min = 1, max = 14\n    if n == 12:\n        return str(1)\n    # c = 15, min = 1, max = 15\n    if n == 13:\n        return str(1)\n    # c = 16, min = 1, max = 16\n    if n == 14:\n        return str(1)\n    # c = 17, min = 1, max = 17\n    if n == 15:\n        return str(1)\n    # c = 18, min = 1, max = 18\n    if n == 16:\n        return str(1)\n    # c = 19, min = 1, max = 19\n    if n == 17:\n        return str(1)\n    # c = 20, min = 1, max = 20\n    if n == 18:\n        return str(1)\n    # c = 21, min = 1, max = 21\n    if n == 19:\n        return str(1)\n    # c = 22, min = 1, max = 22\n    if n == 20:\n        return str(1)\n    # c = 23, min = 1, max = 23\n    if n == 21:\n        return str(1)\n    # c = 24, min = 1, max = 24\n    if n == 22:\n        return str(1)\n    # c = 25, min = 1, max = 25\n    if n == 23:\n        return str(1)\n    # c = 26, min = 1, max = 26\n    if n == 24:\n        return str(1)\n    # c = 27, min = 1, max = 27\n    if n == 25:\n        return str(1)\n    # c = 28, min = 1, max = 28\n    if n == 26:\n        return str(1)\n    # c = 29, min = 1, max = 29\n    if n == 27:\n        return str(1)\n    # c = 30, min = 1, max = 30\n    if n == 28:\n        return str(1)\n    # c = 31, min = 1, max = 31\n    if n == 29:\n        return str(1)\n    # c = 32, min = 1, max = 32\n    if n == 30:\n        return str(1)\n    # c = 33, min = 1, max = 33\n    if n == 31:\n        return str(1)\n    # c = 34, min = 1, max = 34\n    if n == 32:\n        return str(1)\n    # c = 35, min = 1, max = 35\n    if n == 33:\n        return str(1)\n    # c = 36, min = 1, max = 36\n    if n == 34:\n        return str(1)\n    # c = 37, min = 1, max = 37\n    if n == 35:\n        return str(1)\n    # c = 38, min = 1, max = 38\n    if n == 36:\n        return str(1)\n    # c = 39, min = 1, max = 39\n    if n == 37:\n        return str(1)\n    # c = 40, min = 1, max = 40\n    if n == 38:\n        return str(1)\n    # c = 41, min = 1, max = 41\n    if n == 39:\n        return str(1)\n    # c = 42, min = 1, max = 42\n    if n == 40:\n        return str(1)\n    # c = 43, min = 1, max = 43\n    if n == 41:\n        return str(1)\n    # c = 44, min = 1, max = 44\n    if n == 42:\n        return str(1)\n    # c = 45, min = 1, max = 45\n    if n == 43:\n        return str(1)\n    # c = 46, min = 1, max = 46\n    if n == 44:\n        return str(1)\n    # c = 47, min = 1, max = 47\n    if n == 45:\n        return str(1)\n    # c = 48, min = 1, max = 48\n    if n == 46:\n        return str(1)\n    # c = 49, min = 1, max = 49\n    if n == 47:\n        return str(1)\n    # c = 50, min = 1, max = 50\n    if n == 48:\n        return str(1)\n    # c = 51, min = 1, max = 51\n    if n == 49:\n        return str(1)\n    # c = 52, min = 1, max = 52\n    if n == 50:\n        return str(1)\n    # c = 53, min = 1, max = 53\n    if n == 51:\n        return str(1)\n    # c = 54, min = 1"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    s = sorted(s)\n\n    def swap(a, b):\n        s[a], s[b] = s[b], s[a]\n\n    counter = collections.Counter()\n    for i in range(1, len(s)):\n        if s[i] > s[i - 1]:\n            counter[s[i]] += 1\n        else:\n            counter[s[i - 1]] -= 1\n            if counter[s[i - 1]] == 0:\n                counter.pop(s[i - 1])\n\n    # print(s)\n    # print(counter)\n    print(len(counter))\n\n    a = 1\n    while len(counter) > 0:\n        for i in range(1, n + 1):\n            if i in counter:\n                counter[i] -= 1\n                if counter[i] == 0:\n                    counter.pop(i)\n                a = max(a, i + 1)\n        print(a, end=' ')\n\n    return\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    res = n\n    # do I need to sort?\n    sort = sorted(s)\n\n    while True:\n        flag = True\n        for i in range(1, n):\n            if sort[i] > sort[i-1]:\n                continue\n            elif sort[i] < sort[i-1]:\n                sort = sort[:i-1] + sort[i:][::-1] + sort[i-1:]\n                flag = False\n                break\n            else:\n                sort = sort[:i-1] + sort[i:][::-1] + sort[i-1:]\n                break\n        if flag:\n            break\n\n    colors = {}\n    for i in range(n):\n        if sort[i] not in colors:\n            colors[sort[i]] = 1\n        else:\n            colors[sort[i]] += 1\n\n    max_val = max(colors.values())\n    count = 0\n\n    for key in colors:\n        count += colors[key]\n        if colors[key] == max_val:\n            break\n\n    return count\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = stdin\n    res = 0\n    c = [0] * n\n\n    def swap(i: int, j: int) -> None:\n        c[i], c[j] = c[j], c[i]\n\n    def sort_string(l: int) -> None:\n        nonlocal res, c\n        for i in range(l):\n            for j in range(i + 1, l):\n                if c[i]!= c[j]:\n                    swap(i, j)\n                    break\n            else:\n                continue\n            for j in range(l):\n                if c[j] == c[i]:\n                    break\n            else:\n                continue\n            for j in range(i + 1, l):\n                if c[j] == c[i]:\n                    break\n            else:\n                continue\n            swap(i, j)\n            res += 1\n\n    sort_string(n)\n    print(res)\n    print(*c, sep=\" \")\n    return c\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    colors = {i: 1 for i in range(1, n + 1)}\n    idx = 1\n    while idx < n:\n        prev_color = colors[idx - 1]\n        next_color = colors[idx]\n        for i in range(1, n - idx + 1):\n            if s[idx - 1] < s[idx + i]:\n                colors[idx - i + 1] = max(colors[idx - i + 1], prev_color)\n            else:\n                colors[idx - i + 1] = max(colors[idx - i + 1], next_color)\n        idx += 1\n    res = 1\n    for i in range(1, n + 1):\n        if colors[i]!= i:\n            res += 1\n    return str(res) + '\\n' +''.join(f'{colors[i]} {colors[i + 1]}' for i in range(1, n))\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n\n    s = stdin[1]\n\n    cnt = dict()\n\n    for i in range(n):\n        cnt[s[i]] = cnt.get(s[i], 0) + 1\n\n    colors = []\n    for i in range(1, len(cnt) + 1):\n        colors.append(cnt.get(str(i), 0))\n\n    while colors!= sorted(colors):\n        idx = 0\n        while colors[idx] == colors[idx + 1]:\n            idx += 1\n        colors[idx] += 1\n        for j in range(idx + 1, len(colors)):\n            colors[j] = colors[idx]\n\n    return str(colors[0])\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tests\n    >>> solution('''\n   ... a\n   ... b\n   ... c\n   ... d\n   ... e\n   ... f\n   ... g\n   ... h\n   ... i\n   ... j\n   ... k\n   ... l\n   ... m\n   ... n\n   ... o\n   ... p\n   ... q\n   ... r\n   ... s\n   ... t\n   ... u\n   ... v\n   ... w\n   ... x\n   ... y\n   ... z\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... abacaba\n   ... ab"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [list(map(str, stdin.split(\"\\n\"))) for _ in range(int(stdin.split()[0]))]\n    if all(sorted(x) == x for x in a):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"Return a string.\n\nThe function has the same result as the first solution.\n\n>>> solution('''\n... a\n... abacaba\n... abab\n... ''')\n'NO'\n>>> solution('''\n... a\n... abacaba\n... abab\n... ''')\n'YES'\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes stdin and returns \"YES\" if strings are arranged in order, otherwise \"NO\".\n    \"\"\"\n    num_strings = len(stdin.split())\n    strings = [str(string) for string in stdin.split()]\n    strings_without_repeat = set()\n    for string in strings:\n        strings_without_repeat.add(string)\n    strings = sorted(strings_without_repeat)\n    if strings[0] == strings[1]:\n        if strings[1] == strings[2]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  strings = stdin.splitlines()\n  for i in range(len(strings)):\n    strings[i] = list(strings[i])\n  \n  def is_substring(str1: list, str2: list) -> bool:\n    for char1 in str1:\n      for char2 in str2:\n        if char1 == char2:\n          return True\n    return False\n  \n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if is_substring(strings[i], strings[j]):\n        strings[i].extend(strings[j])\n        strings.pop(j)\n        break\n  for string in strings:\n    print(\"\".join(string))\n  return \"YES\" if all(string == \"YES\" for string in strings) else \"NO\"\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    input = stdin_list.pop(0)\n    print(input)\n    solution = 'YES'\n    for i in range(len(stdin_list)):\n        if ''.join(stdin_list[i].split()) == input:\n            solution = 'NO'\n        else:\n            input = ''.join(stdin_list[i].split())\n    return solution\n\nprint(solution(input))\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin\n    n = int(input())\n    inputs = input_.split()\n    string_inputs = []\n    for i in range(n):\n        string_inputs.append(inputs[i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sorted(string_inputs[i]) == sorted(string_inputs[j]):\n                print('YES')\n                return\n    print('NO')\n\n\nsolution(input())\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_strs = int(stdin)\n    solution = [\"NO\"] * num_strs\n    strs = stdin.split(\"\\n\")[1:]\n\n    def is_substr(a, b):\n        n_len = len(a)\n        n_dif = abs(len(a) - len(b))\n        if n_len <= n_dif:\n            return True\n        if n_dif == 0:\n            return a == b\n        if n_dif > 0:\n            return a[:n_dif] == b\n\n    for s in strs:\n        for i in range(1, num_strs):\n            if is_substr(s, strs[i - 1]):\n                solution[i] = \"YES\"\n                break\n    return \"\\n\".join(solution)\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    string_array = stdin.split()\n    m = len(string_array)\n    for i in range(0,m):\n        string_array[i] = sorted(string_array[i])\n    for i in range(0,m):\n        for j in range(0,m):\n            if string_array[i] == string_array[j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    problems = [(int(x), i) for i, x in enumerate(stdin.split(), 1)]\n    # print(problems)\n\n    def solve(l, r):\n        if r - l <= k:\n            return 0\n        if l == r:\n            return l\n        left, right = l, r\n        while left <= right:\n            mid = left + (right - left) // 2\n            if problems[mid][0] <= k:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    res = 0\n    l = 1\n    r = len(problems)\n    while l <= r:\n        res = max(res, solve(l, r))\n        l += 1\n        r -= 1\n    return str(res)\n\nstdin = '8 4'\nprint(solution(stdin))\n\nstdin = '5 2'\nprint(solution(stdin))\n\nstdin = '100 100'\nprint(solution(stdin))\n\nstdin = '1000 1000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    while a and max(a) < k:\n        res += 1\n        a.pop(0)\n        a.pop()\n    return str(res)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    if l[0] > k or l[-1] > k:\n        return \"0\"\n    res = 0\n    for i in range(1, n):\n        if l[i] > k:\n            break\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 3 1 2 1 3\n   ... ''')\n    '5'\n    >>> solution('''5 100\n   ... 12 34 55 43 21\n   ... ''')\n    '5'\n    >>> solution('''5 100\n   ... 6 5 5 1 3 5 5\n   ... ''')\n    '5'\n    >>> solution('''2 4\n   ... 2 1 3\n   ... ''')\n    '0'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = 0\n    total = 1\n    while total <= k and right < n:\n        if a[right] <= k:\n            total += 1\n        right += 1\n    while total <= k and left < n:\n        if a[left] <= k:\n            total += 1\n        left += 1\n    return left - 1\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    i = 0\n    j = n - 1\n\n    while i <= j:\n        if a[i] + a[j] <= k:\n            i += 1\n        j -= 1\n\n    return str(i + 1)\n\nprint(solution('8 4'))\nprint(solution('5 2'))\nprint(solution('5 100'))"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    #print(n, k)\n    n_list = list(map(int, stdin.split()))\n    #print(n_list)\n    #print(len(n_list))\n    left_flag = True\n    left_count = 0\n    right_count = 0\n    for i in range(n):\n        #print(left_flag, i)\n        if left_flag:\n            if n_list[i] > k:\n                left_flag = False\n                right_count = right_count + 1\n            else:\n                left_count = left_count + 1\n        else:\n            if n_list[i] > k:\n                left_count = left_count + 1\n            else:\n                right_count = right_count + 1\n    #print(left_count, right_count)\n    if left_count >= right_count:\n        return str(left_count)\n    else:\n        return str(right_count)\n\n\nsolution(\"8 4\")\nsolution(\"5 2\")\nsolution(\"5 100\")\nsolution(\"8 4\")\nsolution(\"3 1 2 1 3\")\nsolution(\"7 5\")\nsolution(\"4 2\")\nsolution(\"7 5\")\nsolution(\"8 3\")\nsolution(\"3 1 2 1 3\")\nsolution(\"7 5\")\nsolution(\"5 1\")\nsolution(\"6 1\")\nsolution(\"5 1\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"5 2\")\nsolution(\"6"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 0\n    l = []\n    for i in range(n):\n        l.append(int(stdin.split()[i]))\n    l.sort()\n    l = l[::-1]\n    for i in range(n):\n        if l[i] <= k:\n            return str(i+1)\n    return str(0)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    problem_list = list(map(int, stdin.split()))\n    le_left = 0\n    le_right = len(problem_list) - 1\n    max_problems = 0\n\n    if len(problem_list) == 1:\n        return 0\n\n    while le_left <= le_right:\n        if problem_list[le_left] < k:\n            le_left += 1\n            continue\n        if problem_list[le_right] > k:\n            le_right -= 1\n            continue\n        max_problems += 1\n        le_left += 1\n        le_right -= 1\n\n    return max_problems\n\n\"\"\"\n\n\"\"\"\n\nn, k = map(int, input().split())\nproblems = sorted(list(map(int, input().split())))\n\nle_left = 0\nle_right = n - 1\nmax_problems = 0\n\nwhile le_left <= le_right:\n    if problems[le_left] < k:\n        le_left += 1\n        continue\n    if problems[le_right] > k:\n        le_right -= 1\n        continue\n    max_problems += 1\n    le_left += 1\n    le_right -= 1\n\nprint(max_problems)\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\nproblems = sorted(list(map(int, input().split())))\n\nle_left = 0\nle_right = n - 1\nmax_problems = 0\n\nwhile le_left <= le_right:\n    if problems[le_left] < k:\n        le_left += 1\n        continue\n    if problems[le_right] > k:\n        le_right -= 1\n        continue\n    max_problems += 1\n    le_left += 1\n    le_right -= 1\n\nprint(max_problems)\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\nproblems = sorted(list(map(int, input().split())))\n\nle_left = 0\nle_right = n - 1\nmax_problems = 0\n\nwhile le_left <= le_right:\n    if problems[le_left] < k:\n        le_left += 1\n        continue\n    if problems[le_right] > k:\n        le_right -= 1\n        continue\n    max_problems += 1\n    le_left += 1\n    le_right -= 1\n\nprint(max_problems)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    left, right = 0, 0\n    curr_lst = []\n    curr_sum = 0\n    res = 0\n\n    while right < n:\n        curr_sum += lst[right]\n        curr_lst.append(lst[right])\n        right += 1\n        if right - left > k:\n            curr_sum -= lst[left]\n            curr_lst.pop(0)\n            left += 1\n        if curr_sum >= k:\n            res += 1\n    return res\n    \ndef"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(max(a, b), a + b, b + a))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b = int(stdin[0]), int(stdin[1])\n    return str(min_perimeter(a, b))\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a+b)-int(max(a, b)))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    red = a\n    blue = b\n    red_max = a + b\n    blue_max = a + b\n    while red > 0 and blue > 0:\n        if red < blue:\n            red -= 1\n        else:\n            blue -= 1\n        red_max = max(red_max, red + blue)\n        blue_max = max(blue_max, red + blue)\n    return str(red_max) + \" \" + str(blue_max)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(min_perimeter(a, b))\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    n = 2*a+2*b\n    return str(min(n,a*(a+1)//2+a,b*(b+1)//2+b,a*b))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    A single line containing two integers $a$ and $b$ ($1 \\le a, b \\le 10^{14}$) \u2014 the number of tiles red marker should color and the number of tiles blue marker should color, respectively.\n\n    Output:\n    A single line containing the minimal perimeter of a colored rectangle Vova can obtain by coloring exactly $a$ tiles red and exactly $b$ tiles blue.\n    It is guaranteed that there exists at least one correct coloring.\n\n    Note: There exist at least one correct coloring.\n    '''\n    a, b = map(int, stdin.split())\n    if a + b == a * 2:\n        return str(a * 2)\n    elif a + b == 2 * (a + b - 1):\n        return str(a * 2 + b * 2)\n    else:\n        return str((a + b) * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(2 * a + 2 * b, 2 * a + 3 * b, 2 * b + 2 * a, 2 * a + 3 * b, 2 * b + 2 * a))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(2*a, 2*b))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min_perimeter(a, b))\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    letters = sorted(set(s))\n    if (len(letters)!= n):\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 2 == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    prev = stdin[0]\n    for i in range(1, n - 1):\n        if prev == stdin[i]:\n            return \"NO\"\n        prev = stdin[i]\n    if stdin == stdin[::-1]:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) <= 1:\n        return \"YES\"\n    for i in range(len(s)):\n        if s[i] == \"x\":\n            continue\n        for j in range(i):\n            if s[j]!= s[i]:\n                s = s[:i] + \"x\" + s[i+1:]\n                break\n        else:\n            s = s[:i] + \"0\" + s[i+1:]\n\n    if sorted(s) == s:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    return \"YES\" if sorted(s) == list(s) else \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    if n < 2:\n        return \"NO\"\n\n    colors = [\"0\"] * n\n    for i in range(n):\n        if i == 0:\n            colors[0] = \"1\"\n        else:\n            if colors[i - 1] == \"1\" and s[i] < s[i - 1]:\n                colors[i] = \"0\"\n            else:\n                colors[i] = \"1\"\n\n    if \"\".join(colors) == \"\".join(sorted(colors)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if sorted(s)!= s:\n        return \"NO\"\n    while True:\n        if sorted(s) == s:\n            return \"YES\"\n        s = swap(s)\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    'NO'\n    >>> solution('a')\n    'NO'\n    >>> solution('aabcde')\n    'NO'\n    >>> solution('abacbe')\n    'NO'\n    >>> solution('abbcbb')\n    'YES'\n    >>> solution('ababde')\n    'YES'\n    \"\"\"\n    s = stdin.strip()\n    n = len(s)\n    if n < 2:\n        return 'NO'\n\n    # if the string is not sorted, then it is not possible\n    if sorted(s)!= list(s):\n        return 'NO'\n\n    # initialize the count_map\n    count_map = {}\n    for i in range(n):\n        if s[i] not in count_map:\n            count_map[s[i]] = 1\n        else:\n            count_map[s[i]] += 1\n\n    # make sure there is at least one color per character\n    if max(count_map.values()) == 1:\n        return 'NO'\n\n    # initiate the distance_map\n    distance_map = {}\n    for i in range(n):\n        distance_map[i] = 0\n\n    # initialize the index_map\n    index_map = {}\n    for i in range(n):\n        index_map[i] = i\n\n    # put the values into the distance_map\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            if s[i] not in distance_map:\n                distance_map[s[i]] = 0\n            distance_map[s[i]] += 1\n\n    # start the algorithm\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            if distance_map[s[i]] == 1:\n                if s[i] not in index_map:\n                    index_map[s[i]] = i\n                if s[i + 1] not in index_map:\n                    index_map[s[i + 1]] = i + 1\n                if index_map[s[i]] < index_map[s[i + 1]]:\n                    return 'NO'\n                distance_map[s[i]] -= 1\n                distance_map[s[i + 1]] += 1\n            else:\n                if distance_map[s[i]] == 2:\n                    if s[i] not in index_map:\n                        index_map[s[i]] = i\n                    if s[i + 1] not in index_map:\n                        index_map[s[i + 1]] = i + 1\n                    if index_map[s[i]] < index_map[s[i + 1]]:\n                        return 'NO'\n                    distance_map[s[i]] -= 1\n                    distance_map[s[i + 1]] += 1\n                else:\n                    if distance_map[s[i]]!= 0:\n                        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3')\n    'YES'\n    >>> solution('2')\n    'NO'\n    >>> solution('4')\n    'YES'\n    >>> solution('5')\n    'NO'\n    \"\"\"\n    n = len(stdin)\n    colors = {chr(i) for i in range(ord('a'), ord('z') + 1)}\n    if n % 2:\n        return 'NO'\n    for i in range(n - 1):\n        if stdin[i]!= stdin[i + 1]:\n            if stdin[i] in colors:\n                colors.remove(stdin[i])\n            if stdin[i + 1] in colors:\n                colors.remove(stdin[i + 1])\n            return 'NO'\n    if n == 1:\n        return 'YES'\n    for i in range(1, (n // 2) + 1):\n        if stdin[:i] == stdin[i:i * 2]:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    if n < 3:\n        return \"NO\"\n\n    s = list(s)\n\n    # for each index i in the string\n    for i in range(len(s)):\n\n        # check if the current char is same as the first char\n        if i!= 0:\n            if s[i] == s[i-1]:\n                continue\n        # swap it with the first char\n        # and swap with the second char if they are not the same\n        swapped = True\n        while swapped:\n            s[i], s[i-1] = s[i-1], s[i]\n            if i!= 0:\n                if s[i] == s[i-1]:\n                    swapped = False\n                else:\n                    swapped = True\n                    i = 0\n\n    # get the string back\n    s = ''.join(s)\n\n    return \"YES\" if sorted(s) == list(s) else \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n - 2):\n        if s[i] == s[i + 2]:\n            if s[i + 1] == s[i + 2]:\n                s = s[:i] + '0' + s[i + 1:]\n                continue\n            else:\n                s = s[:i + 1] + '0' + s[i + 1:]\n                continue\n    s = s.replace('0','')\n    return s\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 2:\n        A, B = stdin\n        A = int(A)\n        B = int(B)\n        if A > 0 and A <= 100 and B > 0 and B <= 100:\n            for i in range(A, B + 1):\n                if math.floor(i * 0.08) == math.ceil(i * 0.08) and math.floor(i * 0.1) == math.ceil(i * 0.1):\n                    print(i)\n                    break\n            else:\n                print(-1)\n        else:\n            print(-1)\n    else:\n        print(-1)\n\nsolution(input())\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(\" \")))\n    # print(A, B)\n    if A == 0:\n        if B == 1:\n            return \"B\"\n        if B == 0:\n            return \"A\"\n    if A < 0 or B < 0:\n        return \"B\"\n    return A if A < B else B\n    # else:\n    #     return -1\nprint(solution(input()))\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 0 or B == 0:\n        return \"0\"\n    lowest = min(A, B)\n    return str(int(lowest + (lowest * 0.08))) if A == 0 else str(int(lowest + (lowest * 0.1)))\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A < 1 or B < 1 or A > 100 or B > 100:\n        return \"Invalid Input\"\n\n    lowest = -1\n    for a in range(A, B + 1):\n        for b in range(A, B + 1):\n            if a + b == A * A + B * B and a * 0.08 + b * 0.1 == A * 0.08 + B * 0.1:\n                lowest = min(lowest, a)\n    return str(lowest) if lowest!= -1 else \"Invalid Input\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        print(-1)\n    else:\n        for i in range(1, 100 + 1):\n            for j in range(1, 100 + 1):\n                if (i * 0.08) + (j * 0.1) == a and i + j == b:\n                    return str(i)"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    if A <= 0 or B <= 0:\n        print(-1)\n        return\n\n    if A % 5 == 0:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    if A % 5 == 1:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    if A % 5 == 2:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    if A % 5 == 3:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    if A % 5 == 4:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    if A % 5 == 5:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    if A % 5 == 6:\n        if (A - A % 5) / 5 >= A - A % 5:\n            print(A)\n            return\n\n    print(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1 and B > 1:\n        return \"2\"\n    if A > 1 and B == 1:\n        return \"2\"\n    if A == 1 and B == 0:\n        return \"1\"\n\n    def get(i, j, _round=False):\n        if i == 1:\n            if j == 0:\n                if _round:\n                    return \"2\"\n                return \"1\"\n            if j == 1:\n                if _round:\n                    return \"2\"\n                return \"2\"\n            if j == 2:\n                if _round:\n                    return \"1\"\n                return \"2\"\n            if j == 3:\n                if _round:\n                    return \"1\"\n                return \"1\"\n        if i > 1:\n            if j == 1:\n                if _round:\n                    return \"2\"\n                return \"2\"\n            if j == 2:\n                if _round:\n                    return \"2\"\n                return \"3\"\n            if j == 3:\n                if _round:\n                    return \"1\"\n                return \"2\"\n            if j == 4:\n                if _round:\n                    return \"1\"\n                return \"1\"\n            if j == 5:\n                if _round:\n                    return \"2\"\n                return \"3\"\n            if j == 6:\n                if _round:\n                    return \"2\"\n                return \"5\"\n            if j == 7:\n                if _round:\n                    return \"1\"\n                return \"3\"\n            if j == 8:\n                if _round:\n                    return \"1\"\n                return \"4\"\n            if j == 9:\n                if _round:\n                    return \"2\"\n                return \"5\"\n            if j == 10:\n                if _round:\n                    return \"2\"\n                return \"6\"\n            if j == 11:\n                if _round:\n                    return \"1\"\n                return \"4\"\n            if j == 12:\n                if _round:\n                    return \"1\"\n                return \"6\"\n            if j == 13:\n                if _round:\n                    return \"2\"\n                return \"7\"\n            if j == 14:\n                if _round:\n                    return \"2\"\n                return \"8\"\n            if j == 15:\n                if _round:\n                    return \"1\"\n                return \"7\"\n            if j == 16:\n                if _round:\n                    return \"2\"\n                return \"9\"\n            if j == 17:\n                if _round:\n                    return \"2\"\n                return \"11\"\n            if j == 18:\n                if _round:\n                    return \"1\"\n                return \"9\"\n            if j == 19:\n                if _round:\n                    return \"2\"\n                return \"12\"\n            if j == 20:\n                if _round:\n                    return \"2\"\n                return \"14\"\n            if j == 21:\n                if _round:\n                    return \"1\"\n                return \"12\"\n            if j == 22:\n                if _round:\n                    return \"2\"\n                return \"15\"\n            if j == 23:\n                if _round:\n                    return \"1\"\n                return \"14\"\n            if j == 24:\n                if _round:\n                    return \"2\"\n                return \"16\"\n            if j == 25:\n                if _round:\n                    return \"2\"\n                return \"18\"\n            if j == 26:\n                if _round:\n                    return \"1\"\n                return \"16\"\n            if j == 27:\n                if _round:\n                    return \"2\"\n                return \"19\"\n            if j == 28:\n                if _round:\n                    return \"1\"\n                return \"18\"\n            if j == 29:\n                if _round:\n                    return \"2\"\n                return \"21\"\n            if j == 30:\n                if _round:\n                    return \"2\"\n                return \"23\"\n            if j == 31:\n                if _round:\n                    return \"1\"\n                return \"21\"\n            if j == 32:\n                if _round:\n                    return \"2\"\n                return \"25\"\n            if j == 33:\n                if _round:\n                    return \"1\"\n                return \"25\"\n            if j == 34:\n                if _round:\n                    return \"2\"\n                return \"28\"\n            if j == 35:\n                if _round:\n                    return \"1\"\n                return \"28\"\n            if j == 36:\n                if _round:\n                    return \"2\"\n                return \"31\"\n            if j == 37:\n                if _round:\n                    return \"1\"\n                return \"31\"\n            if j == 38:\n                if _round:\n                    return \"2\"\n                return \"34\"\n            if j == 39:\n                if _round:\n                    return \"1\"\n                return \"34\"\n            if j == 40:\n                if _round:\n                    return \"2\"\n                return \"37\"\n            if j == 41:\n                if _round:\n                    return \"1\"\n                return \"37\"\n            if j == 42:\n                if _round:\n                    return \"2\"\n                return \"40\"\n            if j == 43:\n                if _round:\n                    return \"1\"\n                return \"40\"\n            if j == 44:\n                if _round:\n                    return \"2\"\n                return \"43\"\n            if j == 45:\n                if _round:\n                    return \"1\"\n                return \"43\"\n            if j == 46:\n                if _round:\n                    return \"2\"\n                return \"46\"\n            if j == 47:\n                if _round:\n                    return \"1\"\n                return \"46\"\n            if j == 48:\n                if _round:\n                    return \"2\"\n                return \"49\"\n            if j == 49:\n                if _round:\n                    return \"1\"\n                return \"49\"\n            if j == 50:\n                if _round:\n                    return \"2\"\n                return \"52\"\n            if j == 51:\n                if _round:\n                    return \"1\"\n                return \"52\"\n            if j == 52:\n                if _round:\n                    return \"2\"\n                return \"55\"\n            if j == 53:\n                if _round:\n                    return \"1\"\n                return \"55\"\n            if j == 54:\n                if _round:\n                    return \"2\"\n                return \"58\"\n            if j == 55:\n                if _round:\n                    return \"1\"\n                return \"58\"\n            if j == 56:\n                if _round:\n                    return \"2\"\n                return \"61\"\n            if j == 57:\n                if _round:\n                    return \"1\"\n                return \"61\"\n            if j == 58:\n                if _round:\n                    return \"2\"\n                return \"64\"\n            if j == 59:\n                if _round:\n                    return \"1\"\n                return \"64\"\n            if j == 60:\n                if _round:\n                    return \"2\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 or b == 1:\n        return \"1\" if a == 1 else \"0\"\n    if (a * 0.8) > b:\n        return \"0\"\n    elif (a * 0.8) < b:\n        return str(int(b - (b * 0.8)))\n    else:\n        return \"0\"\n\nstdin = \"2 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(A, B+1):\n        if ((i*0.08)//1) == math.floor((i*0.08)//1) and ((i*0.1)//1) == math.floor((i*0.1)//1):\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return -1"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n    if n <= k:\n        if n == 1:\n            print('YES')\n            print(*res)\n        else:\n            print('NO')\n    else:\n        if k == 1:\n            for i in range(1,n+1):\n                res.append(i)\n            print('YES')\n            print(*res)\n        else:\n            for i in range(1, n+1):\n                if (i > res[-1]) and (i < res[-2]):\n                    print('NO')\n                    return\n                elif (i > res[-1]) and (i < 2*res[-1]):\n                    res.append(i)\n                elif (i > 2*res[-1]) and (i < 3*res[-1]):\n                    res.append(i)\n                elif (i > 3*res[-1]) and (i < 4*res[-1]):\n                    res.append(i)\n                elif (i > 4*res[-1]) and (i < 5*res[-1]):\n                    res.append(i)\n                elif (i > 5*res[-1]) and (i < 6*res[-1]):\n                    res.append(i)\n                elif (i > 6*res[-1]) and (i < 7*res[-1]):\n                    res.append(i)\n                elif (i > 7*res[-1]) and (i < 8*res[-1]):\n                    res.append(i)\n                elif (i > 8*res[-1]) and (i < 9*res[-1]):\n                    res.append(i)\n                elif (i > 9*res[-1]) and (i < 10*res[-1]):\n                    res.append(i)\n                elif (i > 10*res[-1]) and (i < 11*res[-1]):\n                    res.append(i)\n                elif (i > 11*res[-1]) and (i < 12*res[-1]):\n                    res.append(i)\n                elif (i > 12*res[-1]) and (i < 13*res[-1]):\n                    res.append(i)\n                elif (i > 13*res[-1]) and (i < 14*res[-1]):\n                    res.append(i)\n                elif (i > 14*res[-1]) and (i < 15*res[-1]):\n                    res.append(i)\n                elif (i > 15*res[-1]) and (i < 16*res[-1]):\n                    res.append(i)\n                elif (i > 16*res[-1]) and (i < 17*res[-1]):\n                    res.append(i)\n                elif (i > 17*res[-1]) and (i < 18*res[-1]):\n                    res.append(i)\n                elif (i > 18*res[-1]) and (i < 19*res[-1]):\n                    res.append(i)\n                elif (i > 19*res[-1]) and (i < 20*res[-1]):\n                    res.append(i)\n                elif (i > 20*res[-1]) and (i < 21*res[-1]):\n                    res.append(i)\n                elif (i > 21*res[-1]) and (i < 22*res[-1]):\n                    res.append(i)\n                elif (i > 22*res[-1]) and (i < 23*res[-1]):\n                    res.append(i)\n                elif (i > 23*res[-1]) and (i < 24*res[-1]):\n                    res.append(i)\n                elif (i > 24*res[-1]) and (i < 25*res[-1]):\n                    res.append(i)\n                elif (i > 25*res[-1]) and (i < 26*res[-1]):\n                    res.append(i)\n                elif (i > 26*res[-1]) and (i < 27*res[-1]):\n                    res.append(i)\n                elif (i > 27*res[-1]) and (i < 28*res[-1]):\n                    res.append(i)\n                elif (i > 28*res[-1]) and (i < 29*res[-1]):\n                    res.append(i)\n                elif (i > 29*res[-1]) and (i < 30*res[-1]):\n                    res.append(i)\n                elif (i > 30*res[-1]) and (i < 31*res[-1]):\n                    res.append(i)\n                elif (i > 31*res[-1]) and (i < 32*res[-1]):\n                    res.append(i)\n                elif (i > 32*res[-1]) and (i < 33*res[-1]):\n                    res.append(i)\n                elif (i > 33*res[-1]) and (i < 34*res[-1]):\n                    res.append(i)\n                elif (i > 34*res[-1]) and (i < 35*res[-1]):\n                    res.append(i)\n                elif (i > 35*res[-1]) and (i < 36*res[-1]):\n                    res.append(i)\n                elif (i > 36*res[-1]) and (i < 37*res[-1]):\n                    res.append(i)\n                elif (i > 37*res[-1]) and (i < 38*res[-1]):\n                    res.append(i)\n                elif (i > 38*res[-1]) and (i < 39*res[-"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_problems = int(stdin)\n    num_of_days = int(stdin)\n    problems_solved = []\n    is_training_ok = False\n\n    for i in range(1, num_of_days + 1):\n        if num_of_problems <= i:\n            problems_solved.append(num_of_problems)\n            num_of_problems += 1\n        else:\n            if i in range(1, len(problems_solved) + 1):\n                problems_solved[i - 1] += 1\n            else:\n                problems_solved.append(1)\n    \n    if sum(problems_solved)!= num_of_problems:\n        is_training_ok = False\n    else:\n        for i in range(len(problems_solved) - 1):\n            if problems_solved[i] < problems_solved[i + 1]:\n                is_training_ok = False\n            if problems_solved[i] > problems_solved[i + 1]:\n                is_training_ok = True\n    if is_training_ok:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k < n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days = range(1, n + 1)\n    temp = []\n    for i in days:\n        if i == 1:\n            continue\n        if i == n:\n            break\n        elif i % 2 == 0:\n            if i + 1 < n:\n                if i + 1 not in temp:\n                    temp.append(i + 1)\n            if i + 2 < n:\n                if i + 2 not in temp:\n                    temp.append(i + 2)\n        else:\n            if i % 3 == 0:\n                if i + 1 < n:\n                    if i + 1 not in temp:\n                        temp.append(i + 1)\n                if i + 2 < n:\n                    if i + 2 not in temp:\n                        temp.append(i + 2)\n    if len(temp) == k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n * (k + 1) > n:\n        return \"NO\"\n    total = [0 for _ in range(k)]\n    for i in range(1, k + 1):\n        max_ = n // (k + 1)\n        min_ = max(1, n // (i + 1))\n        total[i - 1] = max(max_, min_)\n        n -= total[i - 1] * (i + 1)\n    for i in range(k):\n        if total[i] < 1:\n            continue\n        if total[i] > 2 * total[i - 1] or total[i] > total[i + 1]:\n            return \"NO\"\n    for i in range(1, k + 1):\n        print(total[i - 1], end=\" \")\n    return \"YES\"\n\nsolution(\"20 5\")\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0: return 'NO'\n    problems_solved = []\n    problems_solved.append(n // k)\n    for day in range(1, k):\n        problems_solved.append(min(problems_solved[-1] + 2, n - problems_solved[-1] + 1))\n    return 'YES' +''.join(map(str, problems_solved))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k: return 'NO'\n    answers = []\n    for i in range(1, k+1):\n        # sum(answers) > n, the sum must be greater than n\n        if sum(answers) > n:\n            break\n        # at least one answer less than 2 times of the number of problems\n        answers.append(i)\n        if sum(answers) < k:\n            continue\n        # the condition for checking is that (the number of problems in the beginning of the array) * the number of problems to solve in the future = k\n        if (answers[0] * k - sum(answers)) >= 0:\n            continue\n        # the condition for checking is that the answer less than the number of problems in the beginning of the array\n        if k - sum(answers) > answers[0]:\n            continue\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n <= 0 or k <= 0:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    if n == 1:\n        return \"YES\" + \"1\"\n    if k == 1:\n        return \"YES\" + \"1\"\n    if n == 2:\n        if k == 2:\n            return \"YES\" + \"1 2\"\n        else:\n            return \"NO\"\n    if k == 2:\n        return \"YES\" + \"2\"\n    if k == 3:\n        return \"YES\" + \"1 2 3\"\n    if n == 4:\n        if k == 4:\n            return \"YES\" + \"1 2 3 4\"\n        else:\n            return \"NO\"\n    if k == 4:\n        return \"YES\" + \"2 3 4\"\n    if k == 5:\n        return \"YES\" + \"1 2 3 4 5\"\n    if k == 6:\n        return \"YES\" + \"1 2 3 4 5 6\"\n    if k == 7:\n        return \"YES\" + \"1 2 3 4 5 6 7\"\n    if k == 8:\n        return \"YES\" + \"1 2 3 4 5 6 7 8\"\n    if k == 9:\n        return \"YES\" + \"1 2 3 4 5 6 7 8 9\"\n    if k == 10:\n        return \"YES\" + \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if n * k < 2 * n: return \"NO\"\n    a = {i: 0 for i in range(1, k + 1)}\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if j - 1 > a[i]:\n                a[i] = j - 1\n                break\n    if sum(a.values())!= n: return \"NO\"\n    a = list(a.values())\n    if a[-1] < a[-2]: return \"NO\"\n    a = sorted(a)\n    if a[-1] < a[-2]: return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \"YES\"\n    \n    previous_sum = 0\n    for i in range(1, k):\n        if n <= i:\n            break\n        previous_sum += i\n\n    if previous_sum <= n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = list(map(lambda s: list(map(int, s.split())), stdin.split()))\n    for project in projects:\n        project[0] += r\n        project[1] += r\n    projects.sort(key=lambda s: s[1], reverse=True)\n    maximum_rating = 0\n    for i in range(n):\n        maximum_rating = max(maximum_rating, projects[i][0])\n    return str(maximum_rating)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45\n   ... ''')\n    3\n    \"\"\"\n    n, r = map(int, stdin.strip().split())\n    projects = list(map(lambda x: int(x), stdin.strip().split()))\n    projects.sort()\n    cur_rating = projects[0]\n\n    res = 0\n\n    for i in range(1, n):\n        # if the current project is not in the range\n        if cur_rating < projects[i]:\n            break\n        # if it's not a valid project, then just skip it\n        if projects[i] < 0 or projects[i] > 30000:\n            continue\n\n        # if a valid project\n        res += 1\n        cur_rating += projects[i]\n    return str(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    stdin = sorted([list(map(int, stdin.split())) for _ in range(n)])\n    ans = 0\n    for i in range(n):\n        if stdin[i][0] >= stdin[i][1]:\n            return ans\n        ans += stdin[i][1] - stdin[i][0]\n    return ans"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,r = (int(i) for i in stdin.split())\n    projects = [int(i) for i in stdin.split()]\n\n    rating = {i:projects[i] for i in range(n)}\n\n    # dp = [[0] * n] * (n+1)\n    # print(rating)\n    # for i in range(1,n+1):\n    #     if rating[i] <= 0:\n    #         dp[i][i] = 0\n    #         continue\n    #     for j in range(i-1,0,-1):\n    #         if rating[j] < rating[i]:\n    #             dp[i][j] = max(dp[j][i],rating[i] - rating[j] + dp[j][i-1])\n    #         else:\n    #             dp[i][j] = max(dp[j][i],dp[j][i-1])\n    # print(dp)\n    # print(dp[-1][-1])\n    # return max(dp[-1])\n    dp = [[0] * n for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(i,0,-1):\n            if rating[j] <= 0:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[j][i],rating[j] - rating[i] + dp[j][i-1])\n    print(max(dp[-1]))\n    return max(dp[-1])"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = list(map(int, stdin.split()))\n    subset_size = 1\n    subset = rating[:1]\n    rating = rating[1:]\n    while rating:\n        max_rating = max(rating)\n        curr_rating = max_rating\n        for i in range(len(subset)):\n            if subset[i] < max_rating:\n                curr_rating = subset[i]\n                break\n        subset_size += 1\n        rating.remove(curr_rating)\n        subset = list(set(subset))\n        subset.sort()\n        subset = subset[:subset_size]\n    return subset_size\n\nsolution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n\")\nsolution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\\n\")\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u0442\u044f\u043d\u0443\u043b \u043f\u043e \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0437\u0430\u0434\u0443\u043c\u0430\u043b \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043a \u0440\u0430\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u0442\u044f\u043d\u0443\u043b \u043f\u043e \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0437\u0430\u0434\u0443\u043c\u0430\u043b \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043a \u0440\u0430\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u0442\u044f\u043d\u0443\u043b \u043f\u043e \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0437\u0430\u0434\u0443\u043c\u0430\u043b \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043a \u0440\u0430\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u0442\u044f\u043d\u0443\u043b \u043f\u043e \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0437\u0430\u0434\u0443\u043c\u0430\u043b \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043a \u0440\u0430\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u0442\u044f\u043d\u0443\u043b \u043f\u043e \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0437\u0430\u0434\u0443\u043c\u0430\u043b \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043a \u0440\u0430\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u0442\u044f\u043d\u0443\u043b \u043f\u043e \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0437\u0430\u0434\u0443\u043c\u0430\u043b \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, r = stdin.split()\n    n, r = int(n), int(r)\n\n    a = []\n    b = []\n    for _ in range(n):\n        a_i, b_i = map(int, stdin.split())\n        a.append(a_i)\n        b.append(b_i)\n\n    a = sorted(a, key=lambda x: (-x, x))\n    b = sorted(b, key=lambda x: x)\n    dp = [[[0, 0, 0] for _ in range(r + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(r + 1):\n            if i == 0 or j == 0:\n                continue\n            dp[i][j][0] = max(dp[i - 1][j][0], dp[i][j - 1][0])\n            dp[i][j][1] = max(dp[i - 1][j][1], dp[i][j - 1][1])\n            dp[i][j][2] = max(dp[i - 1][j][2], dp[i][j - 1][2])\n            if j >= a[i - 1] and dp[i][j][1] + b[i - 1] >= dp[i - 1][j][2] + b[i - 1]:\n                dp[i][j][2] = dp[i - 1][j][2] + b[i - 1]\n                dp[i][j][1] = max(dp[i - 1][j][1], dp[i][j - 1][1] + b[i - 1])\n            if j >= a[i - 1] and dp[i][j][0] + b[i - 1] >= dp[i - 1][j][2] + b[i - 1]:\n                dp[i][j][0] = dp[i - 1][j][0] + b[i - 1]\n                dp[i][j][2] = max(dp[i - 1][j][2], dp[i][j - 1][2] + b[i - 1])\n    res = max([max(x) for x in dp[n]])\n    return str(res)\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    _d = {}\n    _d[0] = 1\n    for i in range(1, n+1):\n        _d[i] = _d[i-1] + 1\n        if i%3 == 0:\n            _d[i] = min(_d[i], _d[int(i/3)])\n        if i%2 == 0:\n            _d[i] = min(_d[i], _d[int(i/2)])\n    print(_d[n])\n\nsolution(input())\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 10 -2\n   ... 8 -1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45\n   ... ''')\n    '5'\n    \"\"\"\n    n, r = map(int, stdin.strip().split())\n    projects = [(int(x), int(y)) for x, y in (\n        stdin.strip().split()[i:i+2] for i in range(0, n, 2))]\n    projects.sort(key=lambda x: x[1])\n\n    max_score = 0\n    current_score = 0\n    for project in projects:\n        current_score += project[1]\n        if current_score >= r:\n            max_score = max(max_score, project[0])\n            current_score = project[1]\n    return str(max_score)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = []\n    for _ in range(n):\n        rating.append(list(map(int, stdin.split())))\n    rating.sort(key=lambda x: x[0])\n    return str(find_optimal_project(rating, n, r, 1, 1))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projs = list(map(int, stdin.strip().split()))\n    res = 1\n    for i in range(1, n):\n        if projs[i] >= projs[i - 1]:\n            res += 1\n        else:\n            res = 1\n            break\n    return str(res)\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(\"NO\")\n        return \"NO\"\n    if n == 2:\n        if stdin.count(\"8\") == 1 and stdin.count(\"8\") == 1:\n            print(\"YES\")\n            return \"YES\"\n        else:\n            print(\"NO\")\n            return \"NO\"\n    if n == 3:\n        if stdin.count(\"1\") == 1 and stdin.count(\"1\") == 1:\n            print(\"YES\")\n            return \"YES\"\n        else:\n            print(\"NO\")\n            return \"NO\"\n    else:\n        matrix = [[x for x in stdin.split()] for _ in range(n)]\n        for row in range(n):\n            for col in range(n):\n                if row == col:\n                    if matrix[row][col] == matrix[row][col + 1] == matrix[row][col - 1]:\n                        print(\"YES\")\n                        return \"YES\"\n        print(\"NO\")\n        return \"NO\"\n    "
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    matrix = []\n\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split(\" \"))))\n\n    for row in range(n):\n        if is_palindromic(matrix, row):\n            for col in range(n):\n                if matrix[row][col]!= matrix[n - row - 1][n - col - 1]:\n                    return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = 2 * n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[n - j - 1][i]:\n                return 'NO'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[i][n - j - 1]:\n                return 'NO'\n    for i in range(n):\n        for j in range(n):\n            if matrix[j][i]!= matrix[n - j - 1][i]:\n                return 'NO'\n    return 'YES'\n    \nsolution(stdin)"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #print(stdin)\n    n = int(stdin.split()[0])\n    matrix = list(map(int, stdin.split()[1:n**2]))\n    for row in range(n):\n        for col in range(n):\n            if matrix[row*n+col]!= matrix[col*n+row]:\n                return 'NO'\n    return 'YES'\n\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[] for _ in range(n)]\n    for i in range(n):\n        row = stdin.split()\n        row = [int(row[i]) for i in range(n)]\n        matrix[i] = row\n    return matrix\n\nprint(solution(input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted([int(x) for x in stdin.split()])\n    if a == a[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1].split(' ')))\n    numbers = list(map(lambda x: (x, 1), numbers))\n    # print(numbers)\n    row_numbers = []\n    column_numbers = []\n    row_count = 0\n    col_count = 0\n    for row in range(n):\n        row_numbers.append(list(range(col_count, col_count + n)))\n        col_count += n\n    for column in range(n):\n        column_numbers.append(list(range(row_count, row_count + n)))\n        row_count += n\n    print(row_numbers)\n    print(column_numbers)\n\n    for i in range(n):\n        for j in range(n):\n            if numbers.count((i, j)) == 1:\n                print(i, j)\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n**2!= len(set(map(int, stdin.split()))):\n        return 'NO'\n    mat = [[0] * n for _ in range(n)]\n    # print(mat)\n    for i, k in enumerate(stdin.split()):\n        mat[i // n][i % n] = int(k)\n    return 'YES\\n' + '\\n'.join([' '.join([str(j) for j in i]) for i in mat])\n\n\nsolution(\"1 8 8 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 8 8 1\")\nsolution(\"1 8 8 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 8 8 1\")\nsolution(\"1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n\n\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u0438\u043f\u0430 int.\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nYES\n1 2 2 1\n8 2 2 8\n8 2 2 8\n1 2 2 1\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u043e\u0439\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432. \u0412 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f.\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    sorted_rating = sorted(list(map(int, stdin.split())))\n    if (\n        r <= 30000\n        and (sorted_rating[0] - sorted_rating[-1]) * 100 + sorted_rating[1] >= r\n    ):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = list(map(int, stdin.split()))\n    already_rated = dict()\n    for project in projects:\n        if project[0] in already_rated:\n            already_rated[project[0]] += project[1]\n        else:\n            already_rated[project[0]] = project[1]\n    already_rated = sorted(already_rated.items(), key=lambda x: x[1], reverse=True)\n    if already_rated[0][1] <= r:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projects = [tuple(map(int, stdin.strip().split())) for _ in range(n)]\n    projects.sort(key=lambda x: (x[1] - x[0]))\n    print(\"YES\" if (all((r >= a + x[1] for a, x in projects)) and (all((r >= a + x[0] for a, x in projects)))) else \"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, r = map(int, stdin[0].split())\n    projs = list(map(int, stdin[1:]))\n    last_rating = projs[0]\n    for i in range(1, n):\n        if projs[i] - last_rating >= r:\n            print('YES')\n            return\n        else:\n            last_rating = projs[i]\n    print('NO')\n    return"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    order = sorted(list(map(lambda x: x[0], sorted(map(lambda x: int(x[1]), stdin.strip().split()), key=lambda x: x[1])))))\n    rating = list(map(lambda x: x[0], sorted(map(lambda x: int(x[1]), stdin.strip().split()), key=lambda x: x[1])))\n    completed = {}\n    for i in range(n):\n        completed[order[i]] = rating[i]\n    for i in range(n):\n        if completed[order[i]] < r:\n            return 'NO'\n        completed[order[i]] = completed[order[i]] + r\n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n    s = sorted(projects, key=lambda x: (x[0], -x[1]))\n    print(s)\n    for i in range(1, len(s)):\n        if s[i - 1][0] + s[i - 1][1] <= s[i][0]:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    r = int(stdin.split()[1])\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, stdin.split()[2*i + 2].split())))\n\n    max_rating = 0\n    for i in range(n):\n        if projects[i][0] > max_rating:\n            max_rating = projects[i][0]\n    if max_rating >= r:\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    in_lines = stdin.strip().split(\"\\n\")\n    n, r = map(int, in_lines[0].split())\n    projects = list(map(int, in_lines[1:]))\n    projects.sort(reverse=True)\n    for i, project in enumerate(projects):\n        if project > r:\n            continue\n        if project < 0:\n            return \"NO\"\n        if i > 0:\n            if project >= projects[i - 1]:\n                return \"NO\"\n        else:\n            if project >= projects[i + 1]:\n                return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, rating = map(int, stdin.strip().split())\n    projects = sorted([int(x) for x in stdin.strip().split()])\n    change = 1\n    for project in projects:\n        while project > rating and change > 0:\n            rating += change\n            change = -change\n    return \"YES\" if rating >= 0 else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, stdin.split())))\n    projects = sorted(projects, key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        if projects[i][0] > 0:\n            if projects[i][1] > 0:\n                projects[i][0] -= projects[i][1]\n        else:\n            if projects[i][1] < 0:\n                projects[i][1] += projects[i][1]\n    # print(projects)\n    for i in range(n):\n        if projects[i][0] > 0:\n            return \"YES\"\n    return \"NO\"\n\n\nsolution(\"2 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"3 5\")\nsolution(\"4 5\")\nsolution(\"3 10\")\nsolution(\"4 10\")\nsolution(\"5 10\")\nsolution(\"2 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"3 5\")\nsolution(\"4 5\")\nsolution(\"3 10\")\nsolution(\"4 10\")\nsolution(\"5 10\")\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = (int(i) for i in stdin.split())\n    c = []\n    for _ in range(m):\n        c.append(int(stdin))\n    a = [0]\n    for ci in range(m):\n        i = 1\n        while a[i] <= ci:\n            i += 1\n        a.append(i)\n    a = a[1:]\n    if n <= max(a):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    res = []\n    while left < right:\n        for _ in range(m):\n            if c[left] == c[right]:\n                left += 1\n                right -= 1\n                break\n            right -= 1\n        res.append(left)\n        left += 1\n    if len(res)!= n - 1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m, d, *c = list(map(int, stdin[0].split()))\n    c = list(map(int, stdin[1].split()))\n    print(n, m, d, c)\n    print(c)\n    if n > m:\n        return \"NO\"\n\n    # no_platform = 1\n    # no_platforms = 1\n    # for i in range(len(c)):\n    #     if c[i] >= n:\n    #         no_platforms += 1\n    #     elif c[i] == n and c[i]!= 0:\n    #         no_platforms = -1\n    #         break\n    # if no_platforms!= -1:\n    #     return \"NO\"\n    #\n    # platform = 0\n    # for i in range(len(c)):\n    #     if c[i] == n and c[i]!= 0 and platform!= n:\n    #         platform = i\n    #\n    #\n    #\n    #     # no_platforms = 1\n    #     # no_platforms_right = 1\n    #     # for i in range(len(c)):\n    #     #     if c[i] >= n:\n    #     #         no_platforms += 1\n    #     #         if i == 0:\n    #     #             no_platforms_right = no_platforms\n    #     #     elif c[i] == n and c[i]!= 0:\n    #     #         no_platforms = -1\n    #     #         break\n    #     # if no_platforms_right!= -1 and no_platforms_right!= no_platforms:\n    #     #     return \"NO\"\n    #\n    #     # platform = 0\n    #     # for i in range(len(c)):\n    #     #     if c[i] == n and c[i]!= 0 and platform!= n:\n    #     #         platform = i\n    #     #\n    #     #\n    #     #\n    #     # if platform!= 0:\n    #     #     if platform + 1 < len(c):\n    #     #         if c[platform+1]!= n:\n    #     #             return \"NO\"\n    #     #\n    #     #     if platform - 1 >= 0:\n    #     #         if c[platform - 1]!= n:\n    #     #             return \"NO\"\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     #\n    #     # if no_platforms == 1 and platform == 0:\n    #     #     if c[i] == n and c[i]!= 0:\n    #     #         platform = i\n    #     #\n    #     #\n    #     #\n    #     # if platform!= 0:\n    #     #     if platform + 1 < len(c):\n    #     #         if c[platform + 1]!= n:\n    #     #             return \"NO\"\n    #     #\n    #     #     if platform - 1 >= 0:\n    #     #         if c[platform - 1]!= n:\n    #     #             return \"NO\"\n    #\n    #     # platform = 0\n    #     #\n    #     # for i in range(len(c)):\n    #     #     if c[i] == n and c[i]!= 0 and platform!= n:\n    #     #         platform = i\n    #     #\n    #     # if platform!= 0:\n    #     #     if platform + 1 < len(c):\n    #     #         if c[platform + 1]!= n:\n    "
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, *c = list(map(int, stdin.split()))\n    if n + d + m <= 2 * n + 1:\n        return \"NO\"\n    c = sorted(c)\n    positions = []\n    for i in range(len(c)):\n        for j in range(i + 1, len(c)):\n            if c[i] + c[j] == d:\n                positions.append([c[i], c[j]])\n    positions = sorted(positions)\n    if positions[0][0] > positions[-1][1]:\n        return \"NO\"\n    positions = sorted([positions[i][0] - 1 for i in range(len(positions))])\n    return \"YES\" + \" \".join(map(str, positions))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def size(i: int, j: int) -> int:\n        return min(i, j) - max(i, j) + 1\n\n    def is_valid_jumps(i: int, j: int) -> bool:\n        if i + j <= m:\n            return True\n        return False\n\n    def is_invalid_jump(i: int, j: int) -> bool:\n        if j <= m:\n            return False\n        return i + j == n + 1\n\n    def get_next_jump(i: int, j: int, lst: List[int]):\n        for l in range(n + 1):\n            if l not in lst:\n                if is_valid_jumps(i, l):\n                    if lst[l] > l:\n                        return (i, l)\n                    elif lst[l] == l:\n                        return False\n        return False\n\n    def find_next_jump(i: int, j: int) -> Tuple[int, int]:\n        for l in range(n + 1):\n            if l not in lst and is_valid_jumps(i, l):\n                if lst[l] > l:\n                    return (i, l)\n                elif lst[l] == l:\n                    return False\n        return False\n\n    def get_jump(i: int, j: int, lst: List[int]) -> bool:\n        if i + j > n + 1:\n            return False\n        if is_invalid_jump(i, j):\n            return False\n        for l in range(n + 1):\n            if l not in lst:\n                if is_valid_jumps(i, l) and is_valid_jumps(j, l):\n                    if j < m:\n                        lst.append(l)\n                    if i + j == n + 1:\n                        return True\n        return False\n\n    def get_jump_order(i: int, j: int, lst: List[int]) -> bool:\n        if i + j > n + 1:\n            return False\n        if is_invalid_jump(i, j):\n            return False\n        for l in range(n + 1):\n            if l not in lst and is_valid_jumps(i, l) and is_valid_jumps(j, l):\n                if j < m:\n                    lst.append(l)\n                if i + j == n + 1:\n                    return True\n        return False\n\n    def get_jump_order_2(i: int, j: int, lst: List[int]) -> bool:\n        if i + j > n + 1:\n            return False\n        if is_invalid_jump(i, j):\n            return False\n        for l in range(n + 1):\n            if l not in lst and is_valid_jumps(i, l) and is_valid_jumps(j, l):\n                if j < m:\n                    lst.append(l)\n                if i + j == n + 1:\n                    return True\n        return False\n\n    def get_next_jump_2(i: int, j: int, lst: List[int]) -> Tuple[int, int]:\n        for l in range(n + 1):\n            if l not in lst and is_valid_jumps(i, l):\n                if lst[l] > l:\n                    return (i, l)\n                elif lst[l] == l:\n                    return False\n        return False\n\n    def get_jump_order_3(i: int, j: int, lst: List[int]) -> bool:\n        if i + j > n + 1:\n            return False\n        if is_invalid_jump(i, j):\n            return False\n        for l in range(n + 1):\n            if l not in lst and is_valid_jumps(i, l) and is_valid_jumps("
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c = sorted(c)\n    a = [1] * (n + 2)\n    i = 1\n    while i < n + 2:\n        a[i] = 0\n        i += 1\n    while i < n + 2:\n        for j in range(i):\n            a[i] = max(a[i], a[j] + 1)\n        i += a[i]\n    for ci in c:\n        if ci + d > n + 1:\n            return \"NO\"\n        i = ci + d - 1\n        while i > 0:\n            if a[i] == 1:\n                a[i] = max(a[i], i + 1)\n            i -= 1\n    if a[n + 1] == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == stdin.replace(' ', '') else \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, d = map(int, stdin.split())\n    if n <= 0 or n >= 1000000000:\n        print(\"NO\")\n        return\n    platforms = [int(i) for i in stdin.split()]\n    if len(platforms)!= m:\n        print(\"NO\")\n        return\n\n    from collections import deque\n    pos = deque()\n    pos.append((0,0))\n    for i in range(1, n+1):\n        # print(i)\n        # print(platforms)\n        pos_tmp = deque()\n        j = -1\n        for j in range(1, len(platforms)):\n            if j in pos:\n                break\n            # print(j)\n            pos_tmp.append(pos.popleft())\n        # print(platforms[j])\n        if i == n+1:\n            print(\"YES\")\n            print(*pos_tmp)\n            return\n        # print(i)\n        if i < platforms[j]:\n            continue\n        if i > platforms[j]:\n            print(\"NO\")\n            return\n        if i == platforms[j]:\n            # print(j)\n            pos_tmp.append((platforms[j],i))\n            pos.append(pos_tmp.popleft())\n            # print(pos)\n            # print(pos_tmp)\n            continue\n        # print(\"break\")\n        # print(i)\n        # print(platforms)\n        # print(pos)\n        # print(pos_tmp)\n        if len(pos_tmp) > 0:\n            # print(\"more\")\n            pos.append((i, i))\n            pos.append(pos_tmp)\n        else:\n            pos.append((i, i))\n            pos.append(pos_tmp)\n        # print(pos)\n        # print(pos_tmp)\n        # print(\"end\")\n    print(\"NO\")"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 7 3 2\n   ... 1 2 1\n   ... ''')\n    'YES\\n0 1 0 2 2 0 3'\n\n    >>> solution('''\n   ... 10 1 11\n   ... 1\n   ... ''')\n    'YES\\n0 0 0 0 0 0 0 0 0 1'\n\n    >>> solution('''\n   ... 10 1 5\n   ... 2\n   ... ''')\n    'YES\\n0 0 0 0 1 1 0 0 0 0'\n    \"\"\"\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    left, right = 0, n + 1\n    taken = set()\n\n    while left < right:\n        right -= 1\n        if not c[right] and right not in taken:\n            taken.add(right)\n            left = right\n        else:\n            right += 1\n\n    if n - left + 1 < d:\n        return 'NO'\n    else:\n        res = [[] for _ in range(n)]\n        for i, c_i in enumerate(c):\n            res[i].append(i + 1)\n            res[i].append(c_i)\n        return 'YES\\n' + '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string_s = stdin.rstrip()\n    string_t = stdin.rstrip()\n\n    while string_s!= string_t:\n        string_s = string_s.replace(string_s[:len(string_s) // 2], string_s[len(string_s) // 2:])\n        string_t = string_t.replace(string_t[:len(string_t) // 2], string_t[len(string_t) // 2:])\n\n    return len(string_s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    n = len(s)\n    m = len(t)\n    if n < m:\n        return 0\n    ans = 0\n    while m < n:\n        n -= 1\n        if s[n] == t[m]:\n            m += 1\n        elif s[n] < t[m]:\n            n += 1\n            m = 0\n            ans = n + 1\n    return ans\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.splitlines()\n    string = strings[0]\n    t = strings[1]\n    count = 0\n    l = 0\n    r = len(string)\n    for i in range(len(string)):\n        if string[i] == t[0]:\n            count += 1\n            l = i\n        else:\n            if count > 0:\n                r = i - 1\n                break\n    while r < len(string) and count > 0:\n        if string[r] == t[0]:\n            count -= 1\n        r += 1\n    return r - l\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    sub_string_start = 0\n    sub_string_end = 0\n    string_length = len(string)\n    while (sub_string_end < string_length):\n        for sub_string_start in range(sub_string_end + 1):\n            sub_string_end = sub_string_start\n            while sub_string_end < string_length:\n                sub_string_end += 1\n                if string[sub_string_start:sub_string_end] == string[sub_string_end:sub_string_end+1]:\n                    print(sub_string_end - sub_string_start)\n                    return\n\nsolution(input())\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n\n    def find_substring(s, t):\n        if not s:\n            return 0\n        if s == t:\n            return len(s)\n        l = r = 0\n        ans = float(\"-inf\")\n        while r < len(s):\n            while r < len(s) and s[r]!= t[l]:\n                r += 1\n            if r == len(s):\n                return ans\n            if r - l > ans:\n                ans = r - l\n            l += 1\n            r += 1\n        return ans\n\n    return max(find_substring(s, t), find_substring(s[::-1], t[::-1]))\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    l = len(s)\n    for i in range(1, l+1):\n        for j in range(1, l+1):\n            if all(c not in s[i-1:i+j] for c in s[i-1:i+j]):\n                return i\n    return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l, r = 0, len(s)-1\n    while l < len(s) and s[l] == s[r]:\n        l += 1\n    if l == len(s):\n        return 0\n    while l < len(s) and s[l] == s[l+1]:\n        l += 1\n    return l\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    while True:\n        if len(s) <= 1 or len(t) <= 1:\n            break\n        for i in range(1, len(t)):\n            if s[i:] == t:\n                return i\n        s = s[1:]\n    return len(t)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s) < len(t):\n        return 0\n    t = s[:len(s) - len(t)]\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return len(s) - len(t)\n    return len(s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n\n    result = 0\n    while True:\n        l = len(s)\n        r = len(s)\n        if l < r:\n            r = l\n        l_trim = l\n        r_trim = r\n        while l_trim > 0 and s[l_trim - 1] == t[0]:\n            l_trim -= 1\n        while r_trim < len(s) and s[r_trim] == t[0]:\n            r_trim += 1\n        if l_trim > r_trim:\n            result = max(result, r_trim - l_trim)\n            s = s[:l_trim] + s[r_trim:]\n        else:\n            result = max(result, len(s) - r_trim)\n            s = s[l_trim:]\n\n        if len(s) == 1:\n            return result"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(num: float) -> bool:\n        return 1.0 < num <= 10.0\n\n    num = float(stdin)\n    if not is_valid(num):\n        return \"Invalid\"\n    if num == 1.0:\n        return \"1 1\"\n    if num == 2.0:\n        return \"2 2\"\n    if num == 3.0:\n        return \"3 3\"\n    if num == 4.0:\n        return \"4 4\"\n    if num == 5.0:\n        return \"5 5\"\n    if num == 6.0:\n        return \"6 6\"\n    if num == 7.0:\n        return \"7 7\"\n    if num == 8.0:\n        return \"8 8\"\n    if num == 9.0:\n        return \"9 9\"\n    if num == 10.0:\n        return \"10 10\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin)\n    A, B, C, D, E, F = [num, num, num, num, num, num]\n\n    for x in range(1, 10):\n        A = B\n        B = C\n        C = D\n        D = E\n        E = F\n        F = x\n        if x**2 == (num * x):\n            A = min(A, num)\n            B = max(B, num)\n            C = min(C, num)\n            D = max(D, num)\n            E = min(E, num)\n            F = max(F, num)\n            if A < B < C < D < E < F:\n                print(A, B, C, D, E, F)\n                return\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(10):\n        if i >= a:\n            for j in range(i, 10):\n                if j == a:\n                    print(i, j)\n                    return\n        else:\n            for j in range(10):\n                if j == i:\n                    print(i, j)\n                    return\n    return"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"1 2\""
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = list(map(float, stdin.split()))\n    \n    #what if there are more than 3 decimals?\n    for i in range(len(a)):\n        if i == 0:\n            if a[0] == 0:\n                return f\"{a[i]}\"\n            elif a[0] == 1:\n                return f\"{a[i]}\"\n            else:\n                return f\"{a[i]}\"\n        else:\n            if a[i] == 0:\n                return f\"{a[i]}\"\n            elif a[i] == 1:\n                return f\"{a[i]}\"\n            else:\n                return f\"{a[i]}\"\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    ans1 = x//1\n    ans2 = (x-ans1)*10\n    return str(ans1) + \" \" + str(ans2)"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    n = 1\n    while True:\n        if x <= 10:\n            y = x * n\n            if y == n:\n                return f'{n} {n - 1}'\n            else:\n                return f'{y} {n}'\n        else:\n            x -= 1\n            n += 1"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if 0 < x < 5:\n        return f\"{int(x * 10)} {int(x * 10 + 1)}\"\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 5:\n        return 'None'\n    else:\n        if (x == 1.0 or x == 2.0) or (x == 2.5 or x == 3.0) or (x == 3.5 or x == 4.0) or (x == 4.5 or x == 5.0):\n            return '3 2'\n        elif x == 3.0 or x == 3.5 or x == 4.0 or x == 4.5 or x == 5.0:\n            return '9 9'\n        else:\n            return 'None'"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    n = float(stdin)\n\n    if n > 5:\n        stdout = '10 2'\n    elif n > 2:\n        stdout = '3 2'\n    elif n > 1:\n        stdout = '2 2'\n    elif n > 0:\n        stdout = '1 1'\n    return stdout\n    \n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n <= 0 or d <= 0 or k <= 0:\n        return \"NO\"\n    diam_tree = []\n    diam_vertex = []\n    for i in range(n):\n        diam_tree.append([])\n        diam_vertex.append([])\n    for i in range(n-1):\n        u, v = map(int, stdin.split())\n        diam_vertex[u-1].append(v)\n        diam_vertex[v-1].append(u)\n    diam_tree = [[] for _ in range(n)]\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if len(diam_vertex[i]) <= k or len(diam_vertex[j]) <= k:\n                continue\n            if diam_vertex[i] == diam_vertex[j]:\n                continue\n            diam_tree[i].append(j)\n            diam_tree[j].append(i)\n    for i in range(n):\n        if len(diam_vertex[i]) > d:\n            continue\n        for j in range(i+1, n):\n            if len(diam_vertex[j]) > d:\n                continue\n            if i in diam_tree[j] or j in diam_tree[i]:\n                continue\n            diam_tree[i].append(j)\n            diam_tree[j].append(i)\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(diam_vertex[i]) <= k or len(diam_vertex[j]) <= k:\n                continue\n            if diam_vertex[i] == diam_vertex[j]:\n                continue\n            if diam_tree[i] == diam_tree[j]:\n                continue\n            if diam_tree[i] == diam_tree[j] or diam_tree[j] == diam_tree[i]:\n                continue\n            if i in diam_tree[j] or j in diam_tree[i]:\n                continue\n            if j in diam_tree[i] or i in diam_tree[j]:\n                continue\n            diam_tree[i].append(j)\n            diam_tree[j].append(i)\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(diam_vertex[i]) <= k or len(diam_vertex[j]) <= k:\n                continue\n            if diam_vertex[i] == diam_vertex[j]:\n                continue\n            if diam_tree[i] == diam_tree[j]:\n                continue\n            if diam_tree[i] == diam_tree[j] or diam_tree[j] == diam_tree[i]:\n                continue\n            if i in diam_tree[j] or j in diam_tree[i]:\n                continue\n            if j in diam_tree[i] or i in diam_tree[j]:\n                continue\n            diam_tree[i].append(j)\n            diam_tree[j].append(i)\n    def diameter(tree: list, diameter: list, diam_vertex: list, diam_vertex_copy: list) -> int:\n        if not tree:\n            return 0\n        n = len(tree)\n        left = 0\n        right = 0\n        if tree[0] == 0:\n            left = diameter(tree[1:], diameter, diam_vertex, diam_vertex_copy)\n        if tree[-1] == 0:\n            right = diameter(tree[:-1], diameter, diam_vertex, diam_vertex_copy)\n        l = 0\n        r = 0\n        while l < len(diam_vertex) and r < len(diam_vertex):\n            if diam_vertex[l] not in diam_vertex_copy:\n                l += 1\n            if diam_vertex[r] not in diam_vertex_copy:\n                r += 1\n            if diam_vertex[l] in diam_vertex_copy and diam_vertex[r] in diam_vertex_copy:\n                if diam_vertex[l] == diam_vertex[r]:\n                    l += 1\n                    r += 1\n                else:\n                    l += 1\n            if r == l + 1:\n                diameter[tree[0]] = max(diameter[tree[0]], r-l+1)\n                diam_vertex_copy.append(diam_vertex[l])\n                l += 1\n        return max(left, right) + 1\n    return \"YES\" + \"\\n\" + str(diameter(diam_tree, diam_vertex, diam_vertex, diam_vertex))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return 'YES' if n - 1 < k and d + 1 <= n and k < min(n - 1, n * (n - 1) // 2) else 'NO'"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 < d or d > k * n:\n        return \"NO\"\n    d_list = list(map(int, stdin.split()))\n    tree_dict = {}\n    for i in range(1, n + 1):\n        tree_dict[i] = set()\n    for i in range(1, n + 1):\n        if i == 1:\n            continue\n        tree_dict[i].add(1)\n        for j in range(2, n + 1):\n            if j in tree_dict[i]:\n                continue\n            tree_dict[i].add(j)\n            tree_dict[j].add(i)\n\n    def is_degrees(degrees):\n        for i in degrees.keys():\n            if len(degrees[i]) > k or degrees[i] == set():\n                return False\n        return True\n\n    degrees = {}\n    for i in range(1, n + 1):\n        degrees[i] = set()\n        if i == 1:\n            continue\n        for j in range(2, n + 1):\n            if j in tree_dict[i]:\n                degrees[i].add(j)\n    for i in range(1, n + 1):\n        degrees[i].add(i)\n    if not is_degrees(degrees):\n        return \"NO\"\n    for i in range(1, n + 1):\n        for j in degrees[i]:\n            degrees[j].remove(i)\n    diameter = 0\n    connected = {i: set() for i in range(1, n + 1)}\n    for i in degrees[1]:\n        connected[i].add(1)\n    for i in range(2, n + 1):\n        for j in degrees[i]:\n            if j in connected[i] and j in connected[1]:\n                connected[i].add(1)\n                break\n            if j in connected[i]:\n                connected[1].add(i)\n                break\n    count = 0\n    while diameter < n - 1 and count < n - 1:\n        new_connected = {}\n        for i in connected.keys():\n            if i == 1:\n                continue\n            for j in degrees[i]:\n                if j in connected[i]:\n                    continue\n                connected[j].add(i)\n        count += 1\n        for i in degrees[1]:\n            if i in connected[1]:\n                continue\n            connected[1].add(i)\n            break\n        for i in range(2, n + 1):\n            for j in degrees[i]:\n                if j in connected[i]:\n                    continue\n                connected[i].add(j)\n        diameter = max(diameter, len(connected[1]))\n        diameter_list = list(connected[1])\n        diameter_list.sort()\n        for i in range(len(diameter_list) - 1):\n            if diameter_list[i] == diameter_list[i + 1]:\n                break\n            else:\n                connected[diameter_list[i]].remove(diameter_list[i + 1])\n        connected[1] = set()\n        connected[1].add(1)\n    if diameter < n - 1:\n        return \"NO\"\n    connected = {}\n    for i in degrees[1]:\n        connected[i] = set()\n    for i in range(2, n + 1):\n        for j in degrees[i]:\n            if j in connected[i]:\n                continue\n            connected[i].add(j)\n            connected[j].add(i)\n    max_degree = 0\n    for i in degrees[1]:\n        if len(degrees[i]) > max_degree:\n            max_degree = len(degrees[i])\n    return \"YES\" + \" \" + str(n - 1) + \" \" + str(max_degree) + \" \" + str(len(connected[1])) + \" \" + str(diameter) + \" \" + str(\n        diameter - len(connected[1])) + \"\\n\"\n\nsolution(input())\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n <= 3 or d <= 1 or k <= 1:\n        return \"NO\"\n    # result = []\n    # for i in range(1, n + 1):\n    #     result.append(i)\n    # print(result)\n    return \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = stdin\n\n    print(\"YES\" if construct_undirected_tree(n, d, k) else \"NO\")\n\n    return \"YES\" if construct_undirected_tree(n, d, k) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n-1 > d and n >= d+k:\n        print('YES')\n        for i in range(1, n+1):\n            print(i, end=' ')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = (int(i) for i in stdin.split())\n    if n * (n - 1) / 2 < d:\n        return \"NO\"\n    elif n * (n - 1) / 2 > k:\n        return \"NO\"\n    else:\n        visited = {}\n        queue = [(1, 0)]\n        while queue:\n            vertex, degree = queue.pop()\n            if vertex in visited:\n                continue\n            visited[vertex] = True\n            for neighbour in range(1, n + 1):\n                if neighbour not in visited:\n                    if degree + 1 <= k:\n                        queue.append((neighbour, degree + 1))\n                    if degree - 1 >= d:\n                        queue.append((vertex, degree - 1))\n        result = []\n        for vertex in range(1, n + 1):\n            if vertex in visited:\n                result.append(vertex)\n        return \"YES\" + \"\\n\" + \"\\n\".join(str(i) for i in result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return 'YES' if not exists(d, k, n) else 'NO'\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    trees = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        trees[i] = i\n\n    count = 0\n    while trees:\n        count += 1\n        next_trees = []\n        for i in range(1, n + 1):\n            if trees[i] == -1:\n                continue\n            if trees[i] == n:\n                continue\n            for j in range(i + 1, n + 1):\n                if trees[j] == -1:\n                    trees[j] = trees[i]\n                else:\n                    if j - i <= d and j - i <= k:\n                        next_trees.append(j)\n        trees = next_trees\n        if len(trees) == 0:\n            break\n    if trees == [-1] * (n + 1):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    # print(n, d, k)\n    if n - 1 < k:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n\n    graph = [[] for _ in range(n + 1)]\n\n    visited = []\n\n    for i in range(1, n):\n        graph[i].append(i + 1)\n\n    for i in range(1, n):\n        graph[i].append(i)\n\n    # for i in range(1, n + 1):\n    #     graph[i].append(i)\n\n    for i in range(1, n + 1):\n        visited.append(False)\n\n    diameter = 0\n    queue = []\n\n    for i in range(1, n):\n        if visited[i] == False:\n            queue.append(i)\n            visited[i] = True\n            while queue:\n                v = queue.pop(0)\n                for n in graph[v]:\n                    if not visited[n - 1]:\n                        queue.append(n)\n                        visited[n - 1] = True\n\n            if len(queue) < d + 1:\n                diameter = max(diameter, len(queue))\n\n    if diameter < k:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(i) for i in stdin.split())\n    # length = a + b\n    length = a + b + x\n    output = [\"0\"] * length\n    for i in range(x):\n        output[i] = \"1\"\n    for i in range(x + a):\n        output[i] = \"0\" if output[i] == \"1\" else \"1\"\n    for i in range(x + a + b):\n        output[i] = \"0\" if output[i] == \"1\" else \"1\"\n    return \"\".join(output)\n\n\nprint(solution(\"2 2 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"5 3 6\"))\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b, input_x = stdin.split()\n    a = int(input_a)\n    b = int(input_b)\n    x = int(input_x)\n    assert a + b == x\n    print_str = \"\"\n    while len(print_str) < a + b:\n        if print_str == \"\":\n            print_str += \"0\"\n        else:\n            print_str += \"1\"\n    return print_str\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a == 0:\n        return '0'\n    s = '0' * (a + b) + '1'\n    if a > 0:\n        s = s[:a]\n    if b > 0:\n        s = s[b:]\n    if x > 0:\n        for i in range(1, x+1):\n            s = s[:i] + '0' + s[i:]\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    if a == 0 or b == 0:\n        return \"0\"\n    if a == 1 or b == 1:\n        return \"1\"\n    res = \"\"\n    for i in range(a + b):\n        if i < a:\n            res += \"0\"\n        else:\n            res += \"1\"\n    for i in range(a + b, x + a + b):\n        res += \"0\"\n    for i in range(x + a + b, a + b):\n        res += \"1\"\n    return res\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(i) for i in stdin.split())\n    \n    n = a + b\n    \n    for i in range(1, n):\n        if i % 2 == 0 and n % 2!= 0:\n            print((x * a) % (n - x) + 1)\n        if i % 2 == 1 and n % 2!= 0:\n            print(x % (n - x) + 1)\n    \n    for i in range(n):\n        if i % 2 == 0 and n % 2!= 0:\n            print((x * a) % (n - x) + 1)\n        if i % 2 == 1 and n % 2!= 0:\n            print(x % (n - x) + 1)\n\n    if n % 2!= 0:\n        print(x + 1)\n    \n    return ''"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"\"\n    for i in range(a + b):\n        if i < a:\n            s += \"0\"\n        elif i < a + b:\n            s += \"1\"\n        else:\n            s += \"0\"\n    s = s[:a + b]\n    if x in range(a):\n        s = s[:a - x] + \"0\" + s[a - x + 1:]\n    elif x in range(a + b):\n        s = s[:a + b - x] + \"1\" + s[a + b - x:]\n    print(s)\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a == 0:\n        return '0'\n    if b == 0:\n        return '1'\n    if x == 0:\n        return '1'\n    return ('1' * (x + 1) + '0' * (a + b - x - 1))\n\nsolution(\"3 3 3\")\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    for a in range(1, a+1):\n        for b in range(1, b+1):\n            for x in range(1, x+1):\n                if x == 0:\n                    yield '0' * a + '1' * b + '0' * x\n                if x == 1:\n                    yield '0' * a + '1' * b + '1' * x\n                if a + b > x:\n                    yield '1' * a + '0' * b + '0' * (x - a - b)\nstdin = input()\nsolution(stdin)"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,x = stdin.split()\n    res = '0'\n    for i in range(int(a)+int(b)):\n        if i >= int(x):\n            res += '0'\n        else:\n            res += '1'\n    return res\n\nsolution(\"2 2 1\")\n\nsolution(\"3 3 3\")"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()\n    for i in a:\n        if len(i)!= 3:\n            return \"NO\"\n    ans = \"\"\n    for i in range(1, 4):\n        for j in range(len(a[0])):\n            ans += a[0][j] * i\n    return ans\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b, c = stdin.split()[1:]\n\n    n_ab = n // 2\n    n_bc = n - n_ab\n    n_ac = n - n_ab - n_bc\n\n    abc_a = 'a' * n_ab\n    abc_b = 'b' * n_bc\n    abc_c = 'c' * n_ac\n\n    if a == abc_a and b == abc_b and c == abc_c:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    string = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if n < 3 or n % 3!= 0 or (n - 1) % 3!= 0 or (n - 1) // 3!= n // 3:\n        return 'NO'\n\n    substrings = []\n    for i in range(n):\n        substrings.append(string[i] * ((n - 1) // 3) + t[i] * ((n - 1) // 3) + string[i])\n\n    for i in range(n // 3):\n        for j in range(n // 3):\n            if substrings[i] == substrings[i + j + 1]:\n                return 'NO'\n            if substrings[j] == substrings[j + (n // 3) + i + 1]:\n                return 'NO'\n\n    if substrings[0]!= substrings[-1]:\n        return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = list(map(int, stdin.split()))\n    if 2 * n > t + s:\n        return \"NO\"\n\n    a, b, c = s, t, \"\"\n    while t + s < 2 * n:\n        t += 1\n        s += 1\n        c += \"c\"\n        if t + s < 2 * n:\n            c += \"b\"\n            s += 1\n        if t + s < 2 * n:\n            c += \"a\"\n            s += 1\n    return c\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if len(s) > len(t):\n        return \"NO\"\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        if s.count(s[i]) > t.count(s[i]):\n            return \"NO\"\n    for i in range(len(t)):\n        if t.count(t[i]) > s.count(t[i]):\n            return \"NO\"\n    for i in range(len(s)):\n        for j in range(i, len(t)):\n            if t[j] in s[i:]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().splitlines()\n    cnt = int(a[0])\n    a = a[1]\n    b = a.split('a')\n    for i in range(len(b)):\n        if i!= len(b)-1:\n            b[i] = b[i]+'a'\n    for i in range(len(b)):\n        b[i] = b[i]+'a'\n    b = ''.join(b)\n    for i in range(len(b)):\n        if i!= len(b)-1:\n            b = b+'a'\n    return b\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    s.sort()\n    t.sort()\n    res = ''\n    for i in range(int(n)):\n        if s.index(t[i])!= s.index(s[i]):\n            res = ''\n            break\n        else:\n            res += t[i]\n    if res == '':\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split()\n    n = int(n)\n    s = a * n\n    t = b * n\n    if s == t:\n        return \"NO\"\n    s = \"\".join(sorted(list(s)))\n    t = \"\".join(sorted(list(t)))\n    if s == t:\n        return \"NO\"\n    s = \"\".join(reversed(s))\n    t = \"\".join(reversed(t))\n    if s == t:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    for i in range(n):\n        for j in range(n):\n            if s[i]!= t[j] and s[i] == t[j - n + i] and s[i + n - 1] == t[j + n - 1]:\n                print(\"YES\")\n                return s\n    print(\"NO\")\n    return \"NO\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n\n    for i in range(n - 1):\n        if q[i] == q[i + 1] - 1:\n            continue\n\n        else:\n            return str(q[i] + 1) + str(q[i + 1])\n\n    return '-'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    number_dict = {}\n    number_dict[numbers[0]] = 1\n    for number in numbers:\n        if number not in number_dict:\n            number_dict[number] = 1\n        else:\n            number_dict[number] += 1\n    for number in number_dict:\n        if number_dict[number] > 1:\n            return str(number) + \" \" + str(n-1)\n    return -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.split()))\n    if q[0] - n > -1:\n        return '-1'\n    else:\n        return''.join(str(x - 1) for x in q)\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if len(arr) == 1:\n        return '-1'\n    arr = sorted(arr)\n    q = sorted(arr)\n    if q == arr:\n        return '-1'\n    while True:\n        i = 0\n        while i < n and arr[i] == q[i]:\n            i += 1\n        if i == n:\n            return''.join(map(str, arr))\n        arr.append(arr.pop(i))\n        q = sorted(arr)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.strip().split()))\n    if len(set(q)) < len(q):\n        return '-1'\n    if n % 2 == 0:\n        return \" \".join(map(str, range(1, n + 1)))\n    if n == 1:\n        return \"1\"\n    for i in range(1, n):\n        if q[i - 1] > q[i]:\n            return''.join(map(str, range(i, 0, -1)))\n    return '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.split()))\n    q = [x - 1 for x in q]\n    dp = [[-1] * n for _ in range(n)]\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return str(q[0])\n\n    dp[0][0] = q[0]\n    dp[1][0] = q[0]\n    dp[1][1] = q[0]\n    dp[1][2] = q[1]\n    dp[2][0] = q[1]\n    dp[2][1] = q[1]\n    dp[2][2] = q[2]\n\n    for i in range(3, n):\n        for j in range(1, i+1):\n            if j == 1:\n                dp[i][j] = dp[i-1][j] + q[i-1]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + q[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + q[i-1]\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] == -1:\n                return \"0\"\n            elif dp[i][j]!= dp[i][j-1]:\n                return str(dp[i][j] + 1)\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *qs = list(map(int, stdin.split()))\n    if len(qs) == 1 and len(qs)!= n:\n        return \"0\"\n    for q in qs:\n        if q < -n or q > n:\n            return \"0\"\n    qs.sort(key=lambda x: x + n)\n    cnt = {}\n    for q in qs:\n        cnt[q] = cnt.get(q, 0) + 1\n    res = []\n    for q, c in cnt.items():\n        if c == 1:\n            res.append(q)\n        elif c > 1:\n            res.extend(q for _ in range(c))\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    dp = [1 for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if q[j] > q[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    for i in range(n):\n        if dp[i] == n:\n            dp[i] = -1\n    return''.join(map(str, dp))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n\n    def get_permutation(arr):\n        seen = set()\n        p = []\n        for i in range(len(arr)):\n            if arr[i] in seen:\n                continue\n            seen.add(arr[i])\n            seen.add(arr[i] - 1)\n            seen.add(arr[i] - 2)\n            seen.add(arr[i] - 3)\n            seen.add(arr[i] - 4)\n            seen.add(arr[i] - 5)\n            seen.add(arr[i] - 6)\n            seen.add(arr[i] - 7)\n            seen.add(arr[i] - 8)\n            seen.add(arr[i] - 9)\n            seen.add(arr[i] - 10)\n            seen.add(arr[i] - 11)\n            seen.add(arr[i] - 12)\n            seen.add(arr[i] - 13)\n            seen.add(arr[i] - 14)\n            seen.add(arr[i] - 15)\n            seen.add(arr[i] - 16)\n            seen.add(arr[i] - 17)\n            seen.add(arr[i] - 18)\n            seen.add(arr[i] - 19)\n            seen.add(arr[i] - 20)\n            seen.add(arr[i] - 21)\n            seen.add(arr[i] - 22)\n            seen.add(arr[i] - 23)\n            seen.add(arr[i] - 24)\n            seen.add(arr[i] - 25)\n            seen.add(arr[i] - 26)\n            seen.add(arr[i] - 27)\n            seen.add(arr[i] - 28)\n            seen.add(arr[i] - 29)\n            seen.add(arr[i] - 30)\n            seen.add(arr[i] - 31)\n            seen.add(arr[i] - 32)\n            seen.add(arr[i] - 33)\n            seen.add(arr[i] - 34)\n            seen.add(arr[i] - 35)\n            seen.add(arr[i] - 36)\n            seen.add(arr[i] - 37)\n            seen.add(arr[i] - 38)\n            seen.add(arr[i] - 39)\n            seen.add(arr[i] - 40)\n            seen.add(arr[i] - 41)\n            seen.add(arr[i] - 42)\n            seen.add(arr[i] - 43)\n            seen.add(arr[i] - 44)\n            seen.add(arr[i] - 45)\n            seen.add(arr[i] - 46)\n            seen.add(arr[i] - 47)\n            seen.add(arr[i] - 48)\n            seen.add(arr[i] - 49)\n            seen.add(arr[i] - 50)\n            seen.add(arr[i] - 51)\n            seen.add(arr[i] - 52)\n            seen.add(arr[i] - 53)\n            seen.add(arr[i] - 54)\n            seen.add(arr[i] - 55)\n            seen.add(arr[i] - 56)\n            seen.add(arr[i] - 57)\n            seen.add(arr[i] - 58)\n            seen.add(arr[i] - 59)\n            seen.add(arr[i] - 60)\n            seen.add(arr[i] - 61)\n            seen.add(arr[i] - 62)\n            seen.add(arr[i] - 63)\n            seen.add(arr[i] - 64)\n            seen.add(arr[i] - 65)\n            seen.add(arr[i] - 66)\n            seen.add(arr[i] - 67)\n            seen.add(arr[i] - 68)\n            seen.add(arr[i] - 69)\n            seen.add(arr[i] - 70)\n            seen.add(arr[i] - 71)\n            seen.add(arr[i] - 72)\n            seen.add(arr[i] - 73)\n            seen.add(arr[i] - 74)\n            seen.add(arr[i] - 75)\n            seen.add(arr[i] - 76)\n            seen.add(arr[i] - 77)\n            seen.add(arr[i] - 78)\n            seen.add(arr[i] - 79)\n            seen.add(arr[i] - 80)\n            seen.add(arr[i] - 81)\n            seen.add(arr[i] - 82)\n            seen.add(arr[i] - 83)\n            seen.add(arr[i] - 84)\n            seen.add(arr[i] - 85)\n            seen.add(arr[i] - 86)\n            seen.add(arr[i] - 87)\n            seen.add(arr[i] - 88)\n            seen.add(arr[i] - 89)\n            seen.add(arr[i] - 90)\n            seen.add(arr[i] - 91)\n            seen.add(arr[i] - 92)\n            seen.add(arr[i] - 93)\n            seen.add(arr[i] - 94)\n            seen.add(arr[i] - 95)\n            seen.add(arr[i] - 96)\n            seen.add(arr[i] - 97)\n            seen.add(arr[i] - 98)\n            seen.add(arr[i] - 99)\n            seen.add(arr[i] - 100)\n            seen.add(arr[i] - 101)\n            seen.add(arr[i] - 102)\n            seen.add(arr[i] - 103)\n            seen.add(arr[i] - 104)\n            seen.add(arr[i] - 105)\n            seen.add(arr[i] - 106)\n            seen.add(arr[i] - 107)\n            seen.add(arr[i] - 108)\n            seen.add(arr[i] - 109)\n            seen.add(arr[i] - 110)\n            seen.add(arr[i] - 111)\n            seen.add(arr[i] - 112)\n            seen.add(arr[i] - 113)\n            seen.add(arr[i] - 114)\n            seen.add(arr[i] - 115)\n            seen.add(arr[i"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    q = list(map(int, stdin.split()[1]))\n    res = [1, 2]\n    if n == 1:\n        return str(res[0])\n    for i in range(n - 1):\n        if res[i] + q[i] < res[i + 1]:\n            res.append(res[i] + q[i])\n        else:\n            res.append(res[i] + q[i])\n    return str(res[-1])\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  chips = list(map(int, stdin.split()))\n  moves = 0\n  while len(set(chips)) > 1:\n    chips = sorted(chips)\n    chips = list(filter(lambda x: x!= chips[0], chips))\n    chips = list(filter(lambda x: x!= chips[-1], chips))\n    chips = list(map(lambda x: x - 2, chips))\n    chips = list(map(lambda x: x - 1, chips))\n    moves += 1\n  return moves\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1]))\n    # print(x)\n    x_dict = dict()\n    for i in range(n):\n        x_dict[i] = x[i]\n    # print(x_dict)\n    # print(x_dict)\n    result = 0\n    x_cur = 0\n    # print(x_cur)\n    # print(x_dict)\n    x_check = 0\n    # print(x_check)\n    x_prev = x_cur\n    # print(x_prev)\n    # print(x_dict)\n    # print(x_cur)\n    for i in range(n):\n        if x_cur in x_dict:\n            if x_cur!= x_dict[x_cur]:\n                result += 1\n                # print(result)\n            x_cur = x_dict[x_cur]\n            # print(x_cur)\n            # print(x_dict)\n            x_cur_prev = x_cur\n            x_cur_check = x_cur\n            # print(x_cur_prev)\n            x_cur_dict = dict()\n            # print(x_cur_dict)\n            for key, value in x_dict.items():\n                if value == x_cur_prev:\n                    x_cur_dict[key] = value\n                    # print(x_cur_dict)\n            # print(x_cur_dict)\n            # print(x_cur_dict)\n            for key in x_cur_dict:\n                if x_check == x_cur_dict[key]:\n                    result += 1\n                    # print(result)\n                else:\n                    result += 1\n                    # print(result)\n                x_check = x_cur_dict[key]\n                x_cur = x_cur_dict[key]\n                # print(x_cur)\n                # print(x_cur_dict)\n                # print(x_cur_prev)\n        else:\n            result += 1\n            x_cur = x_dict[x_cur]\n            x_cur_prev = x_cur\n            x_cur_dict = dict()\n            # print(x_cur_dict)\n            for key, value in x_dict.items():\n                if value == x_cur_prev:\n                    x_cur_dict[key] = value\n                    # print(x_cur_dict)\n            # print(x_cur_dict)\n            # print(x_cur_dict)\n            for key in x_cur_dict:\n                if x_check == x_cur_dict[key]:\n                    result += 1\n                    # print(result)\n                else:\n                    result += 1\n                    # print(result)\n                x_check = x_cur_dict[key]\n                x_cur = x_cur_dict[key]\n                # print(x_cur)\n                # print(x_cur_dict)\n            x_prev = x_cur\n            x_check = x_cur\n            x_cur_prev = x_cur_prev\n            x_cur_check = x_cur_check\n            x_cur_dict = dict()\n            # print(x_cur_dict)\n    return result"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    first = stdin[:n]\n    second = stdin[n:]\n    first_list = list(map(int,first.split()))\n    second_list = list(map(int,second.split()))\n    first_list = sorted(first_list)\n    second_list = sorted(second_list)\n    length_first = len(first_list)\n    length_second = len(second_list)\n    if length_first == length_second:\n        second = stdin[1::2]\n        second = list(map(int,second.split()))\n        second = sorted(second)\n        for i in range(len(first_list)):\n            if first_list[i] == second_list[i]:\n                first_list[i] = first_list[i] - 1\n                second_list[i] = second_list[i] - 1\n        return sum(first_list) + sum(second_list)\n    elif length_first < length_second:\n        temp = second_list[:length_first]\n        for i in range(length_first):\n            if first_list[i] == temp[i]:\n                first_list[i] = first_list[i] - 1\n                temp[i] = temp[i] - 1\n        return sum(first_list) + sum(temp)\n    elif length_second < length_first:\n        temp = first_list[:length_second]\n        for i in range(length_second):\n            if second_list[i] == temp[i]:\n                second_list[i] = second_list[i] - 1\n                temp[i] = temp[i] - 1\n        return sum(second_list) + sum(temp)"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    k = 2\n    if n <= 2:\n        return k\n    if x[0] == x[1]:\n        if x[0] == x[n - 1]:\n            return k + 1\n        else:\n            return k + (x[n - 1] - x[0] + 2)\n    else:\n        return 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    return sum(x[i] - x[i - 1] for i in range(1, len(x)))\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    dp = [1] + [0]*n\n    for i in range(1, n):\n        for j in range(i):\n            if x[i] == x[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    print(dp[-1])\n    return dp[-1]"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    cnt = 0\n    while len(set(x))!= 1:\n        cnt += 1\n        x_set = set(x)\n        if x_set.pop() - 2 in x_set:\n            x_set.add(x_set.pop() - 2)\n        elif x_set.pop() + 2 in x_set:\n            x_set.add(x_set.pop() + 2)\n        else:\n            x_set.pop()\n            x_set.add(x_set.pop() + 1)\n    return str(cnt)\n\nprint(solution(input()))\n\nInput\n1\n10 5\nOutput\n11\n\nInput\n3\n3 2 2\nOutput\n1\n\nInput\n5\n3 2 1 2 3\nOutput\n3"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = list(map(int, input().split()))\n    # todo\n    # >>> solution(\"1 2 3\")\n    # 1\n    # >>> solution(\"5 2 2 3 3\")\n    # 2\n    # # <<<\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = stdin.strip()\n    x_list = data.split()\n    x_list = sorted(x_list)\n    l_min = 0\n    r_min = 0\n    l_len = len(x_list)\n    max_val = x_list[l_len - 1]\n    min_val = x_list[0]\n    if l_len < 2:\n        return str(0)\n    if n == 1:\n        return str(l_len)\n    for i in range(1, l_len):\n        if x_list[i] == max_val:\n            max_val = x_list[i - 1]\n        if x_list[i] == min_val:\n            min_val = x_list[i - 1]\n    if max_val < min_val:\n        return str(min_val - max_val)\n    else:\n        return str(max_val - min_val)\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][i] = 1\n    for k in range(n, 0, -1):\n        for i in range(k-1, n):\n            for j in range(i, k):\n                dp[i][j] = dp[i][j-1] + dp[i+1][j]\n    return str(dp[1][n])"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    # For each number we have to move to the right and down\n    for n_ in range(n, 1, -1):\n        if n_ % 2 == 0:\n            n_ += 1\n        else:\n            n_ -= 1\n        if n_ ** 2 == n:\n            return str(n_)\n    # If we can not reach a square that contains N, then the number of moves we need to reach the square is n - 1\n    return str(n - 1)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m*m < n:\n        m += 1\n    return str(m) +'' + str(m)"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [[False for i in range(n + 1)] for j in range(n + 1)]\n    dp[1][1] = True\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if i!= j:\n                dp[i][j] = False\n                if j - i > 1:\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n                if j - i + 1 > 1:\n                    dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n    min_moves = n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if dp[i][j] and j - i < min_moves:\n                min_moves = j - i\n    return str(min_moves)\n\n\nsolution(\"10\")\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code will be run on your local\n    computer so make sure to provide\n    output to stdout.\n    \"\"\"\n    # Write your code here\n    import sys\n    import time\n\n    start = time.time()\n    stdin = sys.stdin.read()\n    stdin = stdin.split('\\n')\n    for s in stdin:\n        if s == '':\n            break\n\n    takahashi = (1, 1)\n    for i in range(int(s) - 1):\n        takahashi = (takahashi[0] + 1, takahashi[1] + 1)\n\n    if takahashi == (10, 10):\n        print(1)\n    else:\n        print(5)\n    end = time.time()\n    print(f'Elapsed time: {end - start}')\n\n    return 'done!'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def possible(x: int) -> bool:\n        return x % 2!= 0 and x % 3!= 0\n\n    def next_square(x: int) -> tuple:\n        i, j = x // 3, x % 3\n        return i + 1, j\n\n    def dist(x: tuple) -> int:\n        return abs(x[0] - 1) + abs(x[1] - 1)\n\n    n = int(stdin)\n    q = [(1, 1)]\n    m = 0\n    while q:\n        i, j = q.pop(0)\n        if dist((i, j)) == n:\n            return m\n        if possible(n) and (i + 1, j) not in q:\n            q.append((i + 1, j))\n        if n % 3 == 0 and (i, j + 1) not in q:\n            q.append((i, j + 1))\n        if n % 2 == 0 and (i - 1, j) not in q:\n            q.append((i - 1, j))\n        m += 1\n    return -1\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n    \n    max_moves = 10 ** 12\n    \n    if N == 1:\n        return str(1)\n    elif N % 2!= 0:\n        return str(max_moves)\n    \n    def is_possible(x,y):\n        return (x * x) + (y * y) <= N\n    \n    def min_moves(x,y):\n        return abs(x - N) + abs(y - N)\n    \n    moves = min_moves(1,1)\n    while moves < max_moves:\n        x = moves // 2 + 1\n        y = moves // 2 + 1\n        \n        while is_possible(x,y) and x + y <= max_moves:\n            x += 1\n            y += 1\n            moves = min(moves, min_moves(x,y))\n        \n        if moves == max_moves:\n            break\n    \n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = {1,2,3,4,5,6,7,8,9,10}\n    i = 1\n    j = 1\n    for i in range(1,N+1):\n        j = 1\n        while j <= i:\n            moves = moves.union({i*j})\n            j = j + 1\n    print(len(moves))\nsolution(input())\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    sq_list = []\n    while True:\n        sq_list.append((n,ans))\n        if n == 0:\n            return str(ans)\n        n = n - 1\n        ans = ans + 1\n        if n in sq_list:\n            return str(ans)\n\nsolution(\"10\")\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    dp = [[N + 1] * (N + 1) for _ in range(N + 1)]\n    for i in range(N + 1):\n        dp[1][i] = 1\n    for i in range(2, N + 1):\n        for j in range(i, N + 1):\n            if i == 2:\n                dp[i][j] = 1\n            else:\n                for k in range(i - 1, j + 1):\n                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + dp[k + 1][j])\n    return dp[-1][-1]\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a1, a2, a3 = map(int, stdin.split()[1].split())\n    b1, b2, b3 = map(int, stdin.split()[2].split())\n    winner = 0\n    loser = 0\n    # print(a1, a2, a3, b1, b2, b3)\n    # print(winner, loser)\n    while True:\n        if a1 >= n:\n            winner += 1\n            break\n        elif b1 >= n:\n            loser += 1\n            break\n        elif a1 <= n and a2 <= n and a3 <= n:\n            if a2 <= n and a3 <= n and b2 <= n and b3 <= n:\n                loser += 1\n                break\n            elif a2 <= n and a3 <= n and b2 <= n:\n                winner += 1\n                break\n            elif a2 <= n and a3 <= n and b2 <= n:\n                loser += 1\n                break\n            elif a2 <= n and a3 <= n and b2 <= n:\n                winner += 1\n                break\n            elif a2 <= n and a3 <= n and b2 <= n:\n                winner += 1\n                break\n        elif b1 <= n and b2 <= n and b3 <= n:\n            loser += 1\n            break\n        elif a1 <= n and a2 <= n and a3 <= n:\n            winner += 1\n            break\n        elif a1 <= n and a2 <= n and a3 <= n:\n            loser += 1\n            break\n        elif a1 <= n and a2 <= n and a3 <= n:\n            winner += 1\n            break\n    return str(winner) + \" \" + str(loser)"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    r1 = 0\n    r2 = x\n    while x <= y:\n        if x == 0:\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        elif (x == 1) and (y == 1):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        elif (x == 2) and (y == 2):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 2) and (y == 1)) or ((x == 1) and (y == 2)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if (x == 3) and (y == 3):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if (x == 4) and (y == 4):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 5) and (y == 5)) or ((x == 5) and (y == 4)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 4) and (y == 3)) or ((x == 3) and (y == 4)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 3) and (y == 2)) or ((x == 2) and (y == 3)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 2) and (y == 1)) or ((x == 1) and (y == 2)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 1) and (y == 0)) or ((x == 0) and (y == 1)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 0) and (y == 2)) or ((x == 2) and (y == 0)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n        if ((x == 0) and (y == 1)) or ((x == 1) and (y == 0)):\n            x = x + 1\n            r1 = r1 + 1\n            r2 = r2 + 1\n            continue\n    if r1 > r2:\n        return str(r1) + \" \" + str(r2)\n    else:\n        return str(r2) + \" \" + str(r1)\n\nsolution(stdin)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, a, b = stdin.split()\n  a = tuple(map(int, a.split()))\n  b = tuple(map(int, b.split()))\n  count = 0\n  for i in range(len(a)):\n    for j in range(i + 1, len(a)):\n      if a[i] == a[j]:\n        count += 1\n      else:\n        count += 2\n    for j in range(i + 1, len(b)):\n      if b[i] == b[j]:\n        count += 1\n      else:\n        count += 2\n  return str(min(count, len(a))) +'' + str(min(count, len(b)))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return f\"{min(a, b)}{max(a, b)}\""
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count(n: int, k: int):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return count(n, k - 1) + count(n - k, k)\n\n    n, a1, a2, a3, b1, b2, b3 = list(map(int, stdin.split()))\n    return str(min(count(n, a1), count(n, b1))) +'' + str(max(count(n, a2), count(n, b2)))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    alice = int(stdin.split()[1])\n    bob = int(stdin.split()[2])\n    alice_won = 0\n    bob_won = 0\n    counter = 0\n    while alice_won < n and bob_won < n:\n        if (alice == 0 and bob == 0) or (alice == 1 and bob == 1):\n            alice_won += 1\n            bob_won += 1\n        else:\n            if (alice == 0 and bob == 2) or (alice == 1 and bob == 3):\n                alice_won += 1\n            elif (alice == 2 and bob == 0) or (alice == 3 and bob == 1):\n                bob_won += 1\n        counter += 1\n    return str(counter) + \" \" + str(alice_won) + \" \" + str(bob_won)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    a, b = map(int, stdin.split())\n    print((min(a, n - a) + min(b, n - b)), (max(a, n - a) + max(b, n - b)))\n    return\n    # your code goes here\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a_1 = int(stdin.split()[1])\n    a_2 = int(stdin.split()[2])\n    a_3 = int(stdin.split()[3])\n    b_1 = int(stdin.split()[4])\n    b_2 = int(stdin.split()[5])\n    b_3 = int(stdin.split()[6])\n    # if a_1 + a_2 + a_3 == n and b_1 + b_2 + b_3 == n:\n    #     return f'{(n + 1) - max(a_1, a_2, a_3)} {(n + 1) - min(b_1, b_2, b_3)}'\n    # elif a_1 + a_2 + a_3 == n:\n    #     return f'{(n + 1) - min(a_1, a_2, a_3)} {n}'\n    # elif b_1 + b_2 + b_3 == n:\n    #     return f'{n} {(n + 1) - min(b_1, b_2, b_3)}'\n    # elif a_1 + b_1 + a_3 == n:\n    #     return f'{(n + 1) - min(a_1, b_1, a_3)} {n}'\n    # elif a_2 + b_2 + a_3 == n:\n    #     return f'{(n + 1) - min(a_2, b_2, a_3)} {n}'\n    # elif a_1 + b_2 + a_3 == n:\n    #     return f'{n} {(n + 1) - min(a_1, b_2, a_3)}'\n    # elif a_1 + b_1 + b_3 == n:\n    #     return f'{(n + 1) - min(a_1, b_1, b_3)} {n}'\n    # elif a_2 + b_1 + b_3 == n:\n    #     return f'{(n + 1) - min(a_2, b_1, b_3)} {n}'\n    # elif a_1 + b_2 + b_3 == n:\n    #     return f'{n} {(n + 1) - min(a_1, b_2, b_3)}'\n\n\n    # min_a = min(a_1, a_2, a_3)\n    # min_b = min(b_1, b_2, b_3)\n    # max_a = max(a_1, a_2, a_3)\n    # max_b = max(b_1, b_2, b_3)\n    # if min_a == a_1:\n    #     return f'{min_b} {max_a}'\n    # if min_b == b_1:\n    #     return f'{min_a} {max_b}'\n    # if min_a == a_2:\n    #     return f'{min_b} {max_a}'\n    # if min_b == b_2:\n    #     return f'{min_a} {max_b}'\n    # if min_a == a_3:\n    #     return f'{min_b} {max_a}'\n    # if min_b == b_3:\n    #     return f'{min_a} {max_b}'\n    # if max_a == a_1:\n    #     return f'{min_b} {max_a}'\n    # if max_b == b_1:\n    #     return f'{min_a} {max_b}'\n    # if max_a == a_2:\n    #     return f'{min_b} {max_a}'\n    # if max_b == b_2:\n    #     return f'{min_a} {max_b}'\n    # if max_a == a_3:\n    #     return f'{min_b} {max_a}'\n    # if max_b == b_3:\n    #     return f'{min_a} {max_b}'\n    # else:\n    #     return f'{max_a} {max_b}'\n    return f'{(n + 1) - max(a_1, a_2, a_3)} {(n + 1) - min(b_1, b_2, b_3)}'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = stdin.split()\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n\n    m = 0\n    max_rounds = 0\n    min_rounds = 0\n\n    for _ in range(n):\n        if a.index(max(a)) == b.index(max(b)):\n            max_rounds += 1\n            m += 1\n        else:\n            min_rounds += 1\n\n        a.remove(max(a))\n        b.remove(max(b))\n\n    return str(min_rounds) +'' + str(max_rounds)\n\nsolution(input())\n\n##\n\n\n\n\n##"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = list(map(int, A.split()))\n    B = list(map(int, B.split()))\n    a = 0\n    b = 0\n    for i in range(A[2]):\n        if A[0] == 0:\n            a = a + 1\n        if A[1] == 0:\n            a = a + 1\n        if A[2] == 0:\n            a = a + 1\n    for i in range(B[2]):\n        if B[0] == 0:\n            b = b + 1\n        if B[1] == 0:\n            b = b + 1\n        if B[2] == 0:\n            b = b + 1\n    return str(min(a, b)) + \" \" + str(max(a, b))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    visited = set()\n    res = 0\n    count = 0\n    if n == 1:\n        return 1\n    for i in range(n):\n        if not count:\n            if i not in visited:\n                visited.add(i)\n                visited.add(n - i)\n                count += 1\n                res += 1\n        else:\n            if i not in visited:\n                visited.add(i)\n                visited.add(n - i)\n                count += 1\n                res += 1\n                for j in range(i, n):\n                    if j + 1 not in visited:\n                        visited.add(j + 1)\n                        count += 1\n                        res += 1\n    return res\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    d = defaultdict(list)\n    count = 0\n    i = 1\n    while i <= n:\n        for j in range(i, n+1):\n            count += 1\n            d[count].append(a[i-1:j])\n        i += 1\n    res = 0\n    for k, v in d.items():\n        if k > res:\n            res = k\n    return''.join(map(str, res))\n    "
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # Max number of blocks\n    k = int(n // 2)\n    # Total sum of elements in each block\n    sum_block = sum(a)\n    # Set of blocks\n    b = set()\n    for i in range(k):\n        l_block = sum_block - sum_block // k * (i + 1)\n        r_block = sum_block - sum_block // k * (i + 2)\n        b.add((i, i + 1))\n        b.add((i, i + 2))\n        for j in range(i + 1, k):\n            l = sum_block - sum_block // k * j\n            r = sum_block - sum_block // k * (j + 1)\n            b.add((i, j))\n            b.add((j, i + 1))\n            b.add((j, j + 1))\n        b.add((i, i + 2))\n        b.add((i + 1, i + 2))\n        b.add((i + 2, i + 2))\n        b.add((i + 2, i + 1))\n        b.add((i + 1, i + 1))\n        b.add((i, i + 1))\n        l_block = sum_block - sum_block // k * (i + 1)\n        r_block = sum_block - sum_block // k * (i + 2)\n        b.add((i + 1, i + 1))\n        b.add((i + 2, i + 2))\n        if l_block == r_block:\n            print(i + 1, i + 2)\n            break\n    print(len(b))\n    for i in range(len(b)):\n        print(b[i][0], b[i][1])\n    return \"ok\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_blocks = int(stdin)\n    blocks = list(map(int, stdin.split()))\n    #print(blocks)\n    # We have to sort the list first because of the constraints\n    blocks.sort()\n    #print(blocks)\n    # Now we have to make sure the constraints are satisfied\n    if(len(blocks) < 2):\n        return -1\n    if(len(blocks) > num_blocks):\n        return -1\n\n    block_sum = sum(blocks)\n    block_dict = {}\n    for i in range(num_blocks):\n        if(block_sum - blocks[i] in block_dict):\n            # If we have found a solution\n            return str(block_dict[block_sum - blocks[i]] + 1) +'' + str(i + 1)\n        block_dict[blocks[i]] = i + 1\n    # No solution exists\n    return -1"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = []\n    for i in range(n):\n        if i!= 0:\n            l.append(i)\n            for j in range(i, n):\n                l.append(j)\n    a.sort()\n    for lst in itertools.combinations(l, 2):\n        if a[lst[0]]!= a[lst[1]]:\n            print(lst[0], lst[1])\n            break\n    print(n, *l)\n    return '\\n'.join(map(str, l))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds a block of the size n by n\n    Returns the minimum size of the blocks\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    num = 1\n    result = []\n    for i in range(1, n):\n        result.append(i)\n    for i in range(n):\n        j = i\n        while j < n:\n            result[j] = num\n            num += 1\n            j += i\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1]))\n    if n <= 1:\n        return \"0\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    dp = [[[0 for _ in range(2)] for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = 1\n    dp[0][0][1] = 1\n    dp[0][1][0] = 1\n    dp[0][1][1] = 1\n    for i in range(1, n):\n        dp[i][0][0] = dp[i - 1][0][0] + sequence[i - 1]\n        dp[i][0][1] = dp[i - 1][0][1] + sequence[i - 1]\n        dp[i][1][0] = dp[i - 1][1][0] + sequence[i - 1]\n        dp[i][1][1] = dp[i - 1][1][1] + sequence[i - 1]\n    res = set()\n    res.add(str(dp[0][0][0]) + str(dp[0][1][0]))\n    res.add(str(dp[1][0][0]) + str(dp[1][1][0]))\n    res.add(str(dp[0][0][1]) + str(dp[0][1][1]))\n    res.add(str(dp[1][0][1]) + str(dp[1][1][1]))\n    return \" \".join(sorted(res))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    blocks = []\n    def is_sum(k, i):\n        s = 0\n        for j in range(i, k):\n            s += a[j]\n        return s == a[i]\n    for i in range(n):\n        if is_sum(n, i):\n            blocks.append(i)\n    return str(len(blocks)) + '\\n' + '\\n'.join(map(str, blocks))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    result = 0\n    count = 0\n    for i in range(1, n):\n        if count < n - 1:\n            if s[i - 1] == s[i] and s[i + 1] == s[i]:\n                result = i\n                count += 1\n            else:\n                count = 0\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    stdout = str(len(set([i for i in range(n) if all(arr[i]!= arr[j] for j in range(i+1, n))]))) + '\\n'\n    stdout +=''.join([' '.join([str(i) for i in range(i, i+k+1)]) for k in range(1, n)]) + '\\n'\n    return stdout"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    output = []\n\n    while len(arr) > 0:\n        highest = 0\n        for i in range(len(arr)):\n            if arr[i] > highest:\n                highest = arr[i]\n        output.append(highest)\n        for i in range(len(arr)):\n            if arr[i] == highest:\n                arr.pop(i)\n\n    return''.join(map(str, output))\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    result = []\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(n):\n        if arr[i] not in stack:\n            stack.append(arr[i])\n            if len(stack) == 1:\n                result.append(str(stack[0]))\n            else:\n                result.append(str(stack[-1]))\n                for j in range(len(stack)-2, -1, -1):\n                    if len(stack) > 1:\n                        stack.pop(0)\n                        result.append(str(stack[0]))\n                    else:\n                        break\n    return 'YES' if ''.join(result) == '123456789' else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements: int = int(stdin)\n    numbers: List[int] = list(map(int, stdin.split()))\n    result: List[int] = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(numbers[i])\n        if (i + 1) < len(numbers):\n            if (numbers[i - 1] + numbers[i]) == (numbers[i + 1]):\n                result.append(numbers[i])\n                result.append(numbers[i])\n                result.append(numbers[i])\n    result.append(result[0])\n    return 'YES' if result == sorted(result) else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n\n    res = []\n    while len(arr) > 1:\n        # create stack\n        stack = []\n        # for each number in the array\n        for i in range(len(arr)):\n            # if we are not at the last number\n            if i!= len(arr) - 1:\n                # insert number to stack\n                stack.append(arr[i])\n                # while stack is not empty\n                while len(stack)!= 0 and arr[i] < stack[len(stack) - 1]:\n                    # pop the top\n                    stack.pop()\n                # when stack is empty\n                if len(stack) == 0:\n                    # we should have at least one number with diff. in height\n                    # in that case the list is not sorted\n                    return 'NO'\n        # after while loop\n        res.append(stack[len(stack) - 1])\n        # remove it\n        arr.pop(len(arr) - 1)\n    # once loop finished\n    return 'YES'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    s = []\n    h = 0\n    for i in range(n):\n        s.append(arr[i])\n        while len(s) > 0 and h <= s[-1]:\n            h = s.pop()\n        if len(s) == 0:\n            return \"NO\"\n        s.append(h+1)\n        h += 1\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'YES' == 'YES' else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    stack_max = []\n    stack_min = []\n    max_height = 0\n    min_height = 0\n    for i in arr:\n        if len(stack_max) and stack_max[-1] <= i:\n            max_height = max(stack_max.pop(), max_height)\n        else:\n            stack_max.append(i)\n        if len(stack_min) and stack_min[-1] >= i:\n            min_height = min(stack_min.pop(), min_height)\n        else:\n            stack_min.append(i)\n    if len(stack_max) and stack_max[-1]!= max_height:\n        return 'NO'\n    else:\n        while len(stack_min) > 0 and len(stack_max) > 0 and stack_min[-1] - stack_max[-1] == 2:\n            min_height = min(stack_min.pop(), min_height)\n            max_height = max(stack_max.pop(), max_height)\n        return 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(int(a[i]))\n    \n    arr = sort(arr)\n    for i in range(n):\n        print(arr[i], end = \" \")\n    return \"YES\"\n    \ndef"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin\n    arr = input.split()\n    arr = [int(n) for n in arr]\n    arr.sort()\n    flag = False\n    for i in range(len(arr)-1):\n        if arr[i+1]-arr[i]!= 1:\n            flag = True\n    return \"YES\" if flag else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = []\n\n    def build_stack(s, v):\n        for i in range(v, n):\n            s.append(a[i])\n        return s\n\n    while a!= sorted(a):\n        for i in range(n):\n            b.append(len(a[i]))\n        max = max(b)\n        stack = []\n        for i in range(n):\n            if b[i] == max:\n                build_stack(stack, i)\n        for i in range(n):\n            a[i] = stack[i]\n        for i in range(n):\n            b[i] = 0\n    return 'YES'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[1]\n    t = stdin[2]\n    n = len(s)\n    t_dict = {i: c for i, c in enumerate(t)}\n    s_dict = {i: c for i, c in enumerate(s)}\n    for i in range(n):\n        if s_dict[i]!= t_dict[i]:\n            if s_dict[i] == \"a\" and t_dict[i] == \"e\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"e\" and t_dict[i] == \"a\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"a\" and t_dict[i] == \"i\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"i\" and t_dict[i] == \"a\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"c\" and t_dict[i] == \"i\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"i\" and t_dict[i] == \"c\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"c\" and t_dict[i] == \"e\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"e\" and t_dict[i] == \"c\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"d\" and t_dict[i] == \"e\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"e\" and t_dict[i] == \"d\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"d\" and t_dict[i] == \"c\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"c\" and t_dict[i] == \"d\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"b\" and t_dict[i] == \"d\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"d\" and t_dict[i] == \"b\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"b\" and t_dict[i] == \"a\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"a\" and t_dict[i] == \"b\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"f\" and t_dict[i] == \"e\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"e\" and t_dict[i] == \"f\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            elif s_dict[i] == \"f\" and t_dict[i] == \"a\":\n                s_dict[i], s_dict[i - 1] = s_dict[i - 1], s_dict[i]\n            elif s_dict[i] == \"a\" and t_dict[i] == \"f\":\n                s_dict[i], s_dict[i + 1] = s_dict[i + 1], s_dict[i]\n            else:\n                continue\n        else:\n            continue\n    for i in range(n):\n        if i not in s_dict:\n            return -1\n    return''.join(map(str, [s_dict[i] for i in range(n)]))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3')\n    4\n    >>> solution('4')\n    -1\n    >>> solution('10')\n    4\n    >>> solution('100')\n    -1\n    '''\n    n = int(stdin)\n    s = stdin\n\n    moves = 0\n    t = ''\n\n    while True:\n        k = 0\n        while k < 10:\n            s1 = s[:]\n            for i in range(1, n):\n                s2 = s1[i]\n                s1 = s1[:i] + s1[i + 1:]\n                if s1 == s2:\n                    k += 1\n        if k == 10:\n            t = s\n            break\n        if len(t) > 0:\n            break\n        else:\n            s = s[1:] + s[:1]\n            moves += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[2]\n    poss = []\n\n    def swap(a, b):\n        tmp = a\n        a = b\n        b = tmp\n        return a, b\n\n    def find_swap(s, t):\n        swaps = []\n        moves = []\n        if len(s)!= len(t):\n            return -1\n        if len(s) == 1:\n            return 0\n\n        if s == t:\n            return 0\n\n        if s == t[::-1]:\n            return len(s)\n\n        for i in range(len(s)):\n            # swap\n            if s[i]!= t[i]:\n                a, b = swap(s[i], t[i])\n                moves.append(a)\n                moves.append(b)\n                swaps.append(i)\n\n        if not swaps:\n            return -1\n\n        if len(swaps) == len(s) - 1:\n            return moves\n\n        return -1\n\n    def step(poss, s, t, moves, swaps):\n        if len(swaps) == len(s) - 1:\n            if swap(s[swaps[0]], s[swaps[1]]) == (t[moves[0]], t[moves[1]]):\n                return moves\n\n        if len(poss) == 0:\n            return -1\n\n        if len(poss) == 1:\n            return -1\n\n        for i in range(len(poss)):\n            if poss[i] == len(s):\n                return -1\n            s_copy = list(s)\n            t_copy = list(t)\n\n            # move\n            moves = moves + poss[i]\n            if swap(s_copy[poss[i]], s_copy[poss[i] + 1]) == (t_copy[moves[0]], t_copy[moves[1]]):\n                moves = moves + 1\n                moves = moves + poss[i] + 1\n\n            # swap\n            if swap(s_copy[poss[i]], s_copy[poss[i] + 1]) == (t_copy[moves[0]], t_copy[moves[1]]):\n                moves = moves + 1\n                moves = moves + poss[i] + 1\n\n            if swap(s_copy[poss[i]], s_copy[poss[i] + 1]) == (t_copy[moves[0]], t_copy[moves[1]]):\n                return -1\n\n        if not (poss[0] == 0 or poss[-1] == len(s) - 1):\n            # swap\n            moves = moves + poss[0] + 1\n            moves = moves + poss[-1] + 1\n\n        moves = moves + len(poss) + 1\n        moves = moves + len(poss) + 1\n\n        return step(poss, s, t, moves, swaps)\n\n    # no need to swap again\n    poss = find_swap(s, t)\n\n    if poss == -1:\n        return -1\n\n    return step(poss, s, t, 0, [-1] * len(poss))\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    t = list(stdin.strip())\n\n    # s = list(stdin.strip())\n    # t = list(stdin.strip())\n\n    if len(s)!= len(t):\n        return -1\n\n    # s = list(stdin.strip())\n    # t = list(stdin.strip())\n    #\n    # if len(s)!= len(t):\n    #     return -1\n\n    # s = list(stdin.strip())\n    # t = list(stdin.strip())\n\n    # for i in range(0, len(s)):\n    #     s[i] = s[i].lower()\n\n    s = list(map(str.lower, s))\n    t = list(map(str.lower, t))\n\n    for _ in range(0, 10):\n        if len(s) <= 1:\n            return -1\n\n        for i in range(0, len(s)-1):\n            if s[i] == s[i+1]:\n                s[i], s[i+1] = s[i+1], s[i]\n\n        if t == s:\n            return str(len(s)-1)\n\n        t = s\n        s = list(map(str.lower, s))\n    return -1\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    s, t = s.lower(), t.lower()\n    res = 0\n    if len(s)!= len(t):\n        return -1\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            for j in range(i+1, len(s)):\n                if s[i] == s[j] and t[i] == t[j]:\n                    s, t = s[:i] + s[i+1:], t[:i] + t[i+1:]\n                    res = max(res, len(t))\n                    break\n            if res == len(t):\n                return -1\n            break\n    return str(res)\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    s = stdin.split()[1]\n    T = stdin.split()[2]\n\n    if len(s)!= len(T):\n        return '-1'\n\n    swaps = []\n    for i in range(N):\n        if s[i]!= T[i]:\n            swaps.append((i, T[i]))\n\n    if len(swaps) == 0:\n        return '0'\n    k = len(swaps)\n    min_swaps = k\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n\n            if s[i] == T[j]:\n                continue\n\n            if (i + 1, j + 1) in swaps:\n                continue\n\n            if abs(i - j) <= min_swaps:\n                min_swaps = abs(i - j)\n                k = 1\n            else:\n                k += 1\n            swaps.append((i, j))\n    return str(k)\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    t = \"\".join(sorted(t))\n    if t == s:\n        return \"0\"\n    else:\n        m = 0\n        for i, c in enumerate(t):\n            if c == s[i]:\n                m += 1\n        return str(m)\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[2]\n    moves = []\n\n    for i in range(0, n-1):\n        moves.append((i, i+1))\n\n    for i in range(1, n):\n        for j in range(0, n-i-1):\n            if s[j]!= s[j+1]:\n                moves.append((j, j+1))\n\n    if len(moves) == 0:\n        return '0'\n\n    min_move = len(moves)\n    for i in range(0, len(moves)-1):\n        if moves[i][1] == moves[i+1][0] + 1:\n            min_move = min(min_move, len(moves)-(i+1))\n\n    return str(min_move)\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = stdin\n    moves = 0\n    while n > 0:\n        if n % 2 == 0:\n            s = s[:int(n / 2) - 1] + s[int(n / 2) + 1:]\n            n = int(n / 2)\n        else:\n            for i in range(int(n / 2) - 1):\n                s = s[:i + 1] + s[i + 2:int(n / 2) + 1][::-1] + s[int(n / 2) + 1:]\n            n = int(n / 2)\n    for i in range(10):\n        if s == t:\n            return str(moves)\n        moves += 1\n    return '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    l_s, l_t = len(s), len(t)\n\n    if l_s!= l_t:\n        return '-1'\n\n    moves = []\n    for i in range(1, l_s):\n        swap_at_i = True\n        for j in range(1, l_s):\n            if j - i > l_s - 1:\n                break\n            if s[j - 1]!= t[j - i]:\n                swap_at_i = False\n                break\n        if swap_at_i:\n            moves.append(i)\n\n    if len(moves) == 0:\n        return '-1'\n    moves.sort()\n    return''.join([str(m) for m in moves])\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = \"\"\n    strings = set()\n    prefixes = set()\n    suffixes = set()\n    for _ in range(2 * n - 2):\n        string = stdin.split(\"\\n\")[_]\n        strings.add(string)\n        prefixes = prefixes | set(string[:n])\n        suffixes = suffixes | set(string[-n:])\n    for string in strings:\n        if prefixes <= set(string) <= suffixes:\n            ans += \"P\"\n        else:\n            ans += \"S\"\n    return ans\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.splitlines()\n    #s = list(s)\n    s.sort()\n    s = list(s)\n    ans = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                ans += 1\n    if ans > 0:\n        return \"PPS\"\n    return \"PPSS\" if ans == 0 else \"PS\""
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    l = list(filter(None, l))\n    l = list(map(lambda x: x.upper(), l))\n    l = list(filter(lambda x: x[0]!= x[-1], l))\n    s = ''.join(l)\n    max_length = len(s)\n    prefix_length = 2\n    suffix_length = 2\n    possibilities = []\n    result = None\n    while prefix_length <= max_length:\n        while suffix_length <= max_length:\n            possibilities = get_prefix_suffix_possibilities(s, prefix_length, suffix_length)\n            if len(possibilities) == 0:\n                break\n            suffix_length += 1\n        prefix_length += 1\n        suffix_length = 2\n    for p in possibilities:\n        if len(p) == 2:\n            result = p\n            break\n    return result\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    prefixes, suffixes = stdin.split('\\n')\n    prefixes = set(prefixes)\n    suffixes = set(suffixes)\n    for length in range(1, n + 1):\n        for prefix in prefixes:\n            if prefix[:length] in suffixes:\n                return prefix\n    return ''\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(n):\n        strings.append(stdin.split())\n    s = stdin\n    count = 0\n    for i in range(n):\n        s = s.replace(strings[i][0], \"S\")\n        s = s.replace(strings[i][n-1], \"P\")\n        if \"\".join(s) == stdin:\n            count += 1\n    return \"\".join(sorted(list(set(s.replace(\" \", \"\") for s in s.split(\"PSPS\") if s.replace(\" \", \"\")!= \"\")), key=lambda x: x.upper())) if count == 1 else \"NO\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Examples:\n    >>> solution('''ba\n   ... a\n   ... abab\n   ... a\n   ... aa\n   ... baba\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ... ab\n   ..."
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    import math\n    n = int(stdin)\n    s = stdin\n    l = []\n    for i in range(2,n-2):\n        l.append(s[:i-1])\n    l.sort()\n    print(l)\n    for i in range(n-2):\n        count = 0\n        s1 = s[i:i+1]\n        for j in range(len(l)-1):\n            s2 = l[j]\n            count += 1\n            if s1 == s2:\n                print(count)\n                return\n    print(count)\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    prefixes = set()\n    suffixes = set()\n    for i in range(2, n+1):\n        prefixes.add(stdin[:i])\n        suffixes.add(stdin[-i:])\n    for prefix in prefixes:\n        for suffix in suffixes:\n            if prefix == prefix[::-1] and suffix == suffix[::-1]:\n                return prefix + suffix\n    return \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input.\n    n = int(stdin)\n    prefixes = [stdin[:i] for i in range(n)]\n    suffixes = [stdin[i:] for i in range(n)]\n\n    # Find the correct answer.\n    for prefix in prefixes:\n        if all(prefix == suffix[len(prefix):] for suffix in suffixes):\n            return prefix\n\n    # Otherwise return \"\".\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    print(nums)\n    return str(sum(nums)//2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def parse(x):\n        return x.split()\n    l = parse(stdin)\n    n = int(l[0])\n    a = list(map(int, l[1:]))\n    a.sort(reverse=True)\n    print(a[0])\n    return a[0]\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin == '2' else '0'"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    max = max(a)\n    for i in range(len(a)):\n        if a[i] == max:\n            return str(i+1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min([int(x) for x in stdin.split()]))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    min_value = int(numbers[0])\n    max_value = int(numbers[1])\n    for i in range(2, len(numbers)):\n        if int(numbers[i]) < min_value:\n            min_value = int(numbers[i])\n        elif int(numbers[i]) > max_value:\n            max_value = int(numbers[i])\n    return str(max(max_value - min_value + 1, 1))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    return str(min(a))"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_integer(n):\n        try:\n            int(n)\n        except ValueError:\n            return False\n        else:\n            return True\n    a = list(map(int, stdin.split()))\n    count = 0\n    while a:\n        temp = a.pop(0)\n        if is_integer(temp):\n            if temp == 1:\n                count += 1\n            else:\n                count += (temp-1)\n        else:\n            return \"not a valid input\"\n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    k = 1\n    for i in range(1, n):\n        if not (a[i - 1] and a[i]):\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = a.count(1) + 1\n    print(m)\n    if m < 3:\n        return \"0\"\n    if m >= 4:\n        return \"1\"\n    \ndef"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = list(map(int, stdin.split()))\n    length = len(lights)\n    count = 0\n    result = 0\n\n    for i in range(length):\n        if lights[i] == 1 and lights[(i - 1) % length] == 1 and lights[(i + 1) % length] == 1:\n            count += 1\n\n    if count > 0:\n        result = count\n    return str(result)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = list(map(lambda x: x == 1, stdin.split()))\n    lights = list(zip(lights, range(len(lights))))\n    lights = sorted(lights, key=lambda x: x[0])\n    while True:\n        lights = [l for l, i in lights if l and lights[i - 1][0] == 1 and lights[i + 1][0] == 1]\n        if not lights:\n            break\n        light = lights.pop(0)\n        lights.append(light)\n    return str(len(lights))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    return str(max(range(2, n+1), key=lambda i: sum(a[i-1] == a[i + 1])))"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    count = 0\n    while i < len(a):\n        if i < len(a) - 1 and a[i] == 1 and a[i + 1] == 1:\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return str(count)"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = stdin.split(\" \")[1].split(\" \")\n    a = list(map(int, a))\n    a.sort()\n\n    if n == 1:\n        return 0\n    a_prev = a[0]\n    a_curr = a[1]\n    for i in range(2, n):\n        if a_curr == 0:\n            a_prev = a_curr\n        else:\n            a_prev = a_prev + a_curr\n        a_curr = a_prev\n    return a_prev\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    lights = list(map(int, stdin.split(\" \")[1]))\n\n    k = 1\n    while k < n and lights[k - 1] == lights[k]:\n        k += 1\n    if k >= n:\n        return \"0\"\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # return sum([x for x in map(int, stdin.split())])\n    # return stdin.split()\n    # return sum([int(x) for x in stdin.split()])\n    return sum([1 if i % 2 == 1 else 0 for i in range(int(stdin))])\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    for i in range(1, N+1):\n        if not N%i:\n            ans+=1\n    return str(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split(\" \")]\n    counter = 0\n    for a in arr:\n        for j in range(1, a):\n            if a % j == 0:\n                counter += 1\n    return str(counter)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j % i == 0:\n                if d.get(i, 0) == 0:\n                    d[i] = 1\n                else:\n                    d[i] += 1\n    return str(len(d))\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    divisors = set()\n    for num in map(int, stdin.split()):\n        divisors.update(divisors_of_list(list(divisors), num))\n    return len(divisors)\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 3:\n        return str(n)\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    divisors.append(n)\n    divisors.sort()\n    divisors = divisors[:n // 2]\n    result = 1\n    for i in range(len(divisors)):\n        if divisors[i] not in divisors[i + 1:]:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    answer = 0\n    for i in range(1, max(a)):\n        if all(j%i == 0 for j in a):\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return str(len(set(stdin[0].split()) & set(stdin[1].split())))\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_divisors = 1\n    n = int(stdin.split()[0])\n    for i in range(1, n + 1):\n        divisors = 1\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisors += 1\n        if divisors % 2 == 0:\n            number_of_divisors += 1\n    return str(number_of_divisors)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split('\\n')[1:]\n    cnt = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if gcd(int(a[i]), int(a[j])) == 1:\n                cnt += 1\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    n = int(a[0])\n    numbers = list(map(int, a[1:]))\n\n    div = [1]\n    for x in numbers:\n        div_num = 1\n        for d in div:\n            if x % d == 0:\n                div_num = div_num + 1\n                break\n        div.append(div_num)\n    print(div)\n    return str(div[-1])\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    return print(len([1 for i in range(len(a)) if a.count(a[i]) < 2]))\n\n\nsolution()\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n\n    dp = [0] * 100\n    dp[0] = a[0]\n    dp[1] = a[0] + a[1]\n    dp[2] = max(a[0] + a[1], a[1] + a[2])\n    for i in range(3, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + a[i])\n\n    return str(dp[-1])\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    hashmap = {}\n    for i in range(n):\n        if hashmap.get(a[i]):\n            hashmap[a[i]] = max(hashmap[a[i]], i + 1)\n        else:\n            hashmap[a[i]] = i + 1\n    return min(hashmap.values())\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = stdin.split()[1]\n    A = list(map(int, A.split()))\n    A.sort()\n    A.append(A[-1]+1)\n    print(A)\n    result = 1\n    for i in range(1, N):\n        for j in range(i):\n            if A[i] == A[j]:\n                if i >= j+1:\n                    result = max(result, i+1)\n                    break\n    print(result)\n    return result\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    int_input = stdin.split('\\n')\n    coin_arr = [int(a) for a in int_input[0].split()]\n    min_dist = float('inf')\n    for i in range(len(coin_arr)):\n        for j in range(i + 1, len(coin_arr)):\n            if coin_arr[i] == coin_arr[j]:\n                min_dist = min(min_dist, j - i + 1)\n                break\n    return str(min_dist)"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_coins = int(stdin)\n    arr = list(map(int, stdin.split()))\n    num_pockets = 1\n    last_coin = arr[0]\n    for coin in arr:\n        if coin == last_coin:\n            num_pockets += 1\n        else:\n            last_coin = coin\n            num_pockets = 1\n    return str(num_pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = [int(x) for x in a.split()]\n    a.sort()\n    min_pockets = a[0]\n    for i in a:\n        if i!= min_pockets:\n            print(min_pockets + 1)\n            return\n    print(min_pockets)\n    return\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    values = sorted(set(a))\n    dp = [[0] * (len(values)+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, len(values)+1):\n            dp[i][j] = dp[i-1][j]\n            if a[i-1] == values[j-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    return str(dp[n][len(values)])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    coins = [int(x) for x in stdin.split(\" \")]\n    unique_vals = sorted(set(coins))\n    unique_vals.sort(reverse=True)\n    counter = 1\n    for i in range(len(unique_vals) - 1):\n        if unique_vals[i] == unique_vals[i+1]:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = list(map(int, stdin.split()))\n    answer = float('inf')\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = min(dp[i][j], dp[i][i] + dp[i + 1][j]) + 1\n            answer = min(answer, dp[i][j])\n\n    return str(answer)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == len(a):\n        return \"-1\"\n    a.sort()\n    count = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= r:\n            count += 1\n        else:\n            break\n    if count >= n:\n        return str(n)\n    return str(count)"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if r == 0:\n        return \"0\"\n\n    def count(x):\n        return a.count(x)\n\n    def possible_warmup(x):\n        return count(x) >= r and count(x) <= n - r + 1\n\n    def min_count(n):\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        return 2 + min_count(n - 2)\n\n    def func(x):\n        return possible_warmup(x) and min_count(n)\n\n    return -1 if func(0) == False else func(0)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = -1\n    def check(arr, temp, res):\n        nonlocal res\n        if len(arr) == 0:\n            return True\n        elif len(arr) == 1:\n            if arr[0] == 1:\n                return True\n            else:\n                return False\n        else:\n            a = arr[0]\n            for i in range(1, len(arr)):\n                if arr[i] == 0:\n                    temp = temp + arr[i]\n                elif a + r <= arr[i] <= a + r+2:\n                    temp = temp + arr[i]\n                    if check(arr[i + 1:], temp, res):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            if check(arr[1:], temp, res):\n                return True\n            else:\n                return False\n    return check(arr, 0, res)"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(x) for x in stdin.split())\n    a = list(map(int, input().split()))\n    q = []\n    for i, v in enumerate(a):\n        if v == 0:\n            q.append(i)\n\n    if len(q) < r:\n        return -1\n    res = float('inf')\n    l = 0\n    r = max(q)\n    while l <= r:\n        mid = (l + r) // 2\n        k = 0\n        for i in range(n):\n            if a[i] == 0:\n                k += 1\n            else:\n                if k <= mid:\n                    k = 1\n                else:\n                    k = mid + 1\n        if k >= r:\n            res = min(res, mid)\n            r = mid - 1\n        else:\n            l = mid + 1\n    return res"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n == 0 or r == 0:\n        return -1\n    a = list(map(int, stdin.split()))\n    print(\n        min(\n            a[i]\n            for i in range(n)\n            if (i + 1 < n and a[i] == 1 and a[i + 1] == 1) or (i + 2 < n and a[i] == 1 and a[i + 1] == 0 and a[i + 2] == 1)\n        )\n    )\n    return\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    min_heaters = n\n    for i in range(n):\n        if arr[i] == 0:\n            min_heaters -= 1\n    if min_heaters <= 0:\n        return -1\n    heaters = []\n    for i in range(1, n + 1):\n        if i not in heaters:\n            heaters.append(i)\n    cur_heaters = 0\n    while cur_heaters < len(heaters):\n        for i in range(n):\n            if arr[i] == 1:\n                if cur_heaters == len(heaters):\n                    break\n                if i - heaters[cur_heaters] + 1 >= r:\n                    cur_heaters += 1\n                    if cur_heaters == len(heaters):\n                        break\n                arr[i] = 0\n        cur_heaters = 0\n    return len(heaters)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    #print(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n    #print(count)\n    if count < r:\n        return str(-1)\n    arr.sort()\n    #print(arr)\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count -= 1\n        if count < r:\n            return str(count)\n    return str(-1)\n\nprint(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(i) for i in stdin.split())\n    houses = list(map(int, stdin.split()))\n    heaters = []\n    for house in houses:\n        heaters.append(house == 1)\n\n    switched = []\n    for i in range(n):\n        switched.append(0)\n    switched[0] = True\n    switched[n-1] = True\n    switched[1] = True\n    switched[2] = True\n    for house in houses:\n        if house == 1:\n            for i in range(n):\n                if i not in switched:\n                    if switched[i-1] and switched[i+1]:\n                        switched[i] = True\n                    if switched[i-r]:\n                        switched[i] = True\n                    if switched[i+r]:\n                        switched[i] = True\n        else:\n            for i in range(n):\n                if switched[i-1] and switched[i+1]:\n                    switched[i] = True\n                if switched[i-r]:\n                    switched[i] = True\n                if switched[i+r]:\n                    switched[i] = True\n\n    return sum(switched)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min_switch(n, r, a))\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.strip().split(\"\\n\")\n    n, r = map(int, input_values[0].split())\n    vova_house = list(map(int, input_values[1]))\n    min_heaters = float(\"inf\")\n    if len(vova_house)!= n:\n        return \"-1\"\n    min_heaters = 0\n    for i in range(len(vova_house)):\n        if vova_house[i] == 1:\n            min_heaters += 1\n            vova_house[i] = 0\n    for i in range(len(vova_house)):\n        if i+r >= len(vova_house) or i-r < 0:\n            continue\n        else:\n            if vova_house[i] == 1:\n                min_heaters += 1\n                vova_house[i] = 0\n    for i in range(len(vova_house)-1, -1, -1):\n        if vova_house[i] == 1:\n            min_heaters += 1\n            vova_house[i] = 0\n    if min_heaters > r:\n        return \"-1\"\n    return str(min_heaters)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _input = stdin.rstrip('\\n').split('\\n')\n    _data = list()\n    for i in _input:\n        _data.append(list(map(int, i.split())))\n    return str(solve(_data))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # Return the answer as a string, sans the return statement\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    N = input.strip()\n    A = range(1, int(N) + 1)\n    B = range(1, int(N) + 1)\n    C = range(1, int(N) + 1)\n    ans = 0\n    for a in A:\n        for b in B:\n            for c in C:\n                if a*a + b*b + c*c == int(N):\n                    ans += 1\n                    print((a,b,c))\n    return str(ans)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.splitlines()\n    max_integer = max(input_values)\n    return str(sum([1 for x in range(2, max_integer) if sum([x, max_integer - x, max_integer - (max_integer - x)]) == max_integer]))\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            c = N - a - b\n            if a * b + c == N:\n                count += 1\n    return count\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a positive integer N, return the number of tuples of positive integers A,B,C that satisfy A\\times B + C = N.\n\n    The answer should be written in the form A\\timesB + C = N, with A,B,C being the integers in the tuples.\n\n    For example, given N = 3 the answer should be: 3\\times 1\\times 2 = 6.\n\n    The tuples should be ordered lexicographically. For example, given N = 4 the tuples should be ordered: 1\\times 1\\times 2, 2\\times 1\\times 1, 1\\times 2\\times 1, 2\\times 2\\times 1.\n\n    Input:\n    The first line of input contains T, the number of test cases. The description of T test cases follows.\n    The first line of each test case contains a single integer N.\n\n    Output:\n    For each test case, print the answer in a single line.\n\n    Constraints:\n    1 \\leq T \\leq 100\n    1 \\leq N \\leq 2^31 - 1\n    All values in input are integers.\n    '''\n    for _ in range(int(stdin)):\n        N = int(input())\n        print(sum([1 for i in range(1, N+1) for j in range(1, N+1) for k in range(1, N+1) if i + j + k == N]))\n    return\n\nsolution(stdin)"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    stack = []\n    num_brackets = 0\n    for i in s:\n        if i == '(':\n            stack.append('(')\n            num_brackets += 1\n        elif i == ')':\n            if stack.pop()!= '(':\n                num_brackets -= 1\n    if len(stack) == 0:\n        return str(num_brackets)\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            count += 1\n        if s[i] == \")\":\n            count -= 1\n        if count == 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bracket_string = stdin\n    bracket_list = []\n    if(bracket_string == \"()\"):\n        return 0\n    for i in range(len(bracket_string)):\n        bracket_list.append(bracket_string[i])\n    length = len(bracket_list)\n    print(bracket_list)\n    # print(length)\n    if(bracket_list.count('(')!= bracket_list.count(')')):\n        return 0\n    # print(bracket_list.count('('))\n    for i in range(length):\n        # print(i)\n        if(bracket_list[i] == ')'):\n            bracket_list.remove(')')\n        elif(bracket_list[i] == '('):\n            bracket_list.remove('(')\n    # print(bracket_list)\n    # print(length)\n    # print(len(bracket_list))\n    if(len(bracket_list) == 0):\n        return 0\n    if(bracket_list[0] == ')'):\n        bracket_list.remove(')')\n    elif(bracket_list[0] == '('):\n        bracket_list.remove('(')\n    if(len(bracket_list) == 0):\n        return 0\n    if(bracket_list[0] == ')'):\n        bracket_list.remove(')')\n    elif(bracket_list[0] == '('):\n        bracket_list.remove('(')\n    if(len(bracket_list) == 0):\n        return 0\n    if(bracket_list[0] == ')'):\n        bracket_list.remove(')')\n    elif(bracket_list[0] == '('):\n        bracket_list.remove('(')\n    if(len(bracket_list) == 0):\n        return 0\n    if(bracket_list[0] == ')'):\n        bracket_list.remove(')')\n    elif(bracket_list[0] == '('):\n        bracket_list.remove('(')\n    if(len(bracket_list) == 0):\n        return 0\n    # print(bracket_list)\n    # print(len(bracket_list))\n    if(bracket_list.count('(') == bracket_list.count(')')):\n        return 0\n    if(bracket_list.count('(')!= bracket_list.count(')')):\n        return 0\n    # print(bracket_list.count('('))\n    # print(bracket_list.count(')'))\n    # print(bracket_list)\n    # print(len(bracket_list))\n    # print(bracket_list)\n    # print(bracket_list.count('('))\n    # print(bracket_list.count(')'))\n    # print(bracket_list)\n    # print(length)\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    # if(bracket_list.count('(') - bracket_list.count(')') == 1):\n    #     return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == 1):\n        return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == 0):\n        return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    # if(bracket_list.count('(') - bracket_list.count(')') == 0):\n    #     return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    # if(bracket_list.count('(') - bracket_list.count(')') == -1):\n    #     return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -1):\n        return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -2):\n        return 0\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -3):\n        return 0\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -4):\n        return 0\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -5):\n        return 0\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -6):\n        return 0\n    if(bracket_list.count('(') - bracket_list.count(')') == -7):\n        return 0\n    if(bracket_list.count('(') - bracket_list.count(')') == -8):\n        return 0\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -9):\n        return 0\n    # print(bracket_list)\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket_list.count('(') - bracket_list.count(')') == -10):\n        return 0\n    if(bracket_list.count('(') - bracket_list.count(')') == -11):\n        return 0\n    # print(bracket_list.count('(') - bracket_list.count(')'))\n    if(bracket"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if s[i] == '(':\n                s = s[:i] + '1' + s[i + 1:]\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    # pattern = r'(.+)\\1'\n    pattern = r'(.+)\\((.+)\\)'\n    reg = re.findall(pattern, s)\n    reg = set(reg)\n    print(reg)\n    return len(reg)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin.split('\\n')[1]\n    open_list = ['(', '[', '{']\n    close_list = [')', ']', '}']\n    stack = []\n    i = 0\n    while i < len(s):\n        if s[i] in open_list:\n            stack.append(s[i])\n        if s[i] in close_list:\n            if stack and stack[-1] == open_list[close_list.index(s[i])]:\n                stack.pop()\n            else:\n                i += 1\n        i += 1\n    return len(stack)"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #return stdin\n    bracket = stdin.replace(\"(\", \"1\").replace(\")\", \"1\").replace(\"1\", \"()\")\n    return bracket\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    while s.count(\"()\") > 0:\n        s = re.sub(\"\\)\", \")\", s)\n        s = re.sub(\"\\(\", \"(\", s)\n        if s == stdin:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin\n    result = 0\n    while sequence.count('(')!= sequence.count(')'):\n        for i in range(n):\n            if sequence[i] == ')':\n                sequence = sequence[:i] + '(' + sequence[i:]\n                result += 1\n            elif sequence[i] == '(':\n                sequence = sequence[:i] + ')' + sequence[i:]\n                result += 1\n        if result == 0:\n            return \"NO\"\n        else:\n            result = 0\n    return \"YES\""
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    # print(n, s)\n    if n == 1:\n        return 0\n    if n == 2:\n        return int(s == '()')\n    # print(n)\n    count = 0\n    i = 2\n    while i < n:\n        # print(i, s[:i], s[i:], s[i-1] == ')', s[i-2] == '(')\n        if s[i] == ')':\n            if s[i-1] == ')':\n                if s[i-2] == '(':\n                    s = s[:i] + '1' + s[i:]\n                    i += 1\n                    count += 1\n                else:\n                    s = s[:i] + '(' + s[i:]\n                    i += 1\n                    count += 1\n            else:\n                if s[i-2] == '(':\n                    s = s[:i] + '1' + s[i:]\n                    i += 1\n                    count += 1\n        elif s[i] == '(':\n            if s[i-1] == '(':\n                if s[i-2] == ')':\n                    s = s[:i] + '1' + s[i:]\n                    i += 1\n                    count += 1\n                else:\n                    s = s[:i] + '(' + s[i:]\n                    i += 1\n                    count += 1\n            else:\n                if s[i-2] == '(':\n                    s = s[:i] + '1' + s[i:]\n                    i += 1\n                    count += 1\n        i += 1\n    print(s)\n    print(count)\n    return count\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    dic = {}\n    for i in range(len(s)-1):\n        dic[s[i:i+2]] = dic.get(s[i:i+2], 0) + 1\n    t_len = len(t)\n    max_len = 0\n    for i in range(len(s)-t_len+1):\n        tmp = s[i:i+t_len]\n        if tmp in dic:\n            tmp_len = len(tmp)\n            if tmp_len > max_len:\n                max_len = tmp_len\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    \n    def matches(a,b):\n        return a.startswith(b) and a.endswith(b)\n    \n    def remove_prefix(s,t):\n        m = 0\n        while m < len(s) and not matches(s[m:], t):\n            m += 1\n        return s[m:]\n        \n    # Use a greedy approach\n    \n    while s.startswith(t):\n        s = remove_prefix(s,t)\n        \n    return len(s)\n\nsolution('bbaba')\nsolution('bbaba')"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    start_s = 0\n    start_t = 0\n    max_len = 0\n    while True:\n        if start_s > len(s) - 1:\n            break\n        if start_t > len(t) - 1:\n            break\n        if s[start_s] == t[start_t]:\n            start_t += 1\n        else:\n            break\n        if start_s == len(s) - 1 and start_t == len(t) - 1:\n            max_len = max(max_len, start_t - start_s)\n        start_s += 1\n        start_t += 1\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    trim = 0\n    s_trim = ''\n    s_len = len(s)\n    s_list = list(s)\n    for i in range(len(s)):\n        if s_list[i] == t[trim]:\n            trim += 1\n            if trim == len(t):\n                s_trim = s[:i] + s[i+1:]\n                break\n    return len(s_trim)\n\nsolution(input())\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin: string\n    \"\"\"\n    s = stdin.split()\n    # print(s)\n    t = stdin.split()\n    # print(t)\n\n    # s = 'abcdefg'\n    # t = 'cef'\n    #\n    # s = 'bcdefgh'\n    # t = 'efg'\n    #\n    # s = 'tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    if len(s) > len(t):\n        return len(s) - len(t)\n    s = s.split(' ')\n    t = t.split(' ')\n    s = sorted(s)\n    t = sorted(t)\n    n = len(t)\n    for i in range(len(s)-1, -1, -1):\n        if t == s[i:i+n]:\n            return len(s) - i\n    return len(s) - len(t)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    while len(s)!= len(t):\n        if len(s) > len(t):\n            t += t\n        else:\n            s += s\n    return len(s)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    # return None\n    s = stdin[0]\n    t = stdin[1]\n    return max(0, len(s) - len(t))"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    d = {}\n    r = {}\n\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]] = i\n        else:\n            d[s[i]] = max(d[s[i]], i)\n    for i in range(len(t)):\n        if t[i] in d:\n            d[t[i]] = min(d[t[i]], i)\n        else:\n            r[t[i]] = i\n    for k, v in r.items():\n        if k not in d:\n            return 0\n        else:\n            return d[k] - v\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    t = stdin.strip().lower()\n    i = 0\n    j = 0\n    maxLen = 0\n    while j < len(t):\n        if i == len(s) and t[j] == s[i]:\n            j += 1\n        else:\n            while i < len(s) and s[i] == s[i-1]:\n                i += 1\n            if j == i:\n                i += 1\n            else:\n                maxLen = max(maxLen, j - i)\n                j += 1\n    return maxLen\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x*y)\n\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns maximum product of x*y\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    max = 1\n    min = 1\n    if a <= b:\n        max = max * a\n        min = min * b\n        if c <= d:\n            max = max * c\n            min = min * d\n            if a <= c:\n                max = max * a\n                min = min * c\n                if b <= d:\n                    max = max * b\n                    min = min * d\n    return str(max) + '\\n' + str(min)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    # print(a, b, c, d)\n    x = max(a, b)\n    y = max(c, d)\n    print(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= c <= d and a <= b <= d:\n        return str(min(a * b, c * d))\n    elif c <= a <= d and c <= b <= d:\n        return str(min(c * b, a * d))\n    elif b <= a <= d and b <= c <= d:\n        return str(min(b * a, c * d))\n    elif d <= a <= b and d <= c <= b:\n        return str(min(d * c, a * b))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    if a <= c and a <= d and b <= c and b <= d:\n        return str(b*c)\n    if a <= d and a <= c and b <= d and c <= d:\n        return str(b*d)\n    if a <= c and a <= d and b <= c and c <= d:\n        return str(a*d)\n    if a <= d and a <= c and b <= d and c <= d:\n        return str(a*b)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a, b, c, d) <= (a, b, c, d):\n        return str(a * b)\n    if (a, b, c, d) <= (a, b, d, c):\n        return str(a * b)\n    if (a, b, c, d) <= (c, a, b, d):\n        return str(a * b)\n    if (a, b, c, d) <= (c, a, d, b):\n        return str(a * b)\n    return str(c * d)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if c < a:\n        if d < b:\n            return a*b\n        return (a*b) + (a*d)\n    else:\n        if d < b:\n            return (a*b) + (a*c)\n        return (a*b) + (a*d)"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    a,b,c,d = int(nums[0]),int(nums[1]),int(nums[2]),int(nums[3])\n    if a <= b and c <= d:\n        return (a*b) * (c*d)\n    else:\n        return None\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c, d = map(int, stdin.split())\n    \n    if a <= c:\n        if a <= b:\n            if a <= d:\n                return a * b\n        else:\n            if b <= d:\n                return a * b\n            else:\n                if b >= c:\n                    return a * b\n                else:\n                    if b <= d:\n                        return a * b\n                    else:\n                        if d >= c:\n                            return a * b\n                        else:\n                            return a * b\n    else:\n        if b <= c:\n            if b <= d:\n                return b * c\n            else:\n                if d >= c:\n                    return b * c\n                else:\n                    if d <= b:\n                        return b * c\n                    else:\n                        if a >= b:\n                            return b * c\n                        else:\n                            return a * b\n        else:\n            if d <= b:\n                return b * c\n            else:\n                if d >= c:\n                    return b * c\n                else:\n                    if d <= b:\n                        return b * c\n                    else:\n                        if c >= b:\n                            return b * c\n                        else:\n                            return a * b\nsolution(input())"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a <= b and c <= d:\n        if a <= d and c <= b:\n            return str(a * b)\n\n    if a <= b and c <= d:\n        if b <= d and c <= a:\n            return str(b * c)\n    if a <= b and c <= d:\n        if a <= d and b <= c:\n            return str(a * d)\n    return str(c * d)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    \n    for i in range(n):\n        stdin[i+1] = int(stdin[i+1])\n\n    first = sorted(stdin[1:n:2])\n    second = sorted(stdin[1:n:2])\n    \n    a = sum(first)\n    b = sum(second)\n    \n    if a == b:\n        return str(len(first)//2) +'' + str(len(second)//2)\n    else:\n        return str(len(first)//2) +'' + str(len(second)//2 + 1)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *problems = list(map(int, stdin.strip().split()))\n    def print_arcs_ABCs(N, d_i):\n        if d_i % 2!= 0:\n            return print(N - 1)\n        else:\n            return print(N // 2)\n    print(sum(print_arcs_ABCs(N, d_i) for d_i in problems))\nsolution(input())\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    if n % 2!= 0:\n        return \"No solution exists\"\n\n    return str(sum([int(i < j) for i, j in zip(d[::2], d[1::2])]))\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split('\\n')\n    N, *d = [int(i) for i in inputs[0].split()]\n    abc = 0\n    arcs = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            if d[i - 1] > d[i - 2]:\n                arcs += 1\n        else:\n            if d[i - 1] < d[i - 2]:\n                abc += 1\n    return str(arcs) +'' + str(abc)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n + 1, 2):\n        ans += 1\n    for i in range(0, n + 1, 2):\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *num = stdin.split()\n    num = list(map(int, num))\n\n    arcs = 0\n    abc = 0\n\n    while True:\n        d = num[0]\n        if d >= 5:\n            arcs += 1\n            num.pop(0)\n        elif d <= 4:\n            abc += 1\n            num.pop(0)\n\n        if len(num) == 0:\n            break\n\n    return str(arcs) +'' + str(abc)"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d_arr = list(map(int, stdin.split()))\n    # Return the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n    return str(sum([1 for i in range(n+1) if i%2==0]))"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = sorted(list(map(int, stdin.split())))\n    arcs = 0\n    abc = 0\n    for i in range(2, n, 2):\n        if stdin[i] >= stdin[i - 2]:\n            arcs += 1\n        else:\n            abc += 1\n    return str(arcs + abc)\n\nsolution(\"5\")"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    difficulties = stdin.split()\n    odds = 0\n    evens = 0\n    for i in range(n):\n        if int(difficulties[i]) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    print(odds, evens)\n    if odds >= evens:\n        return \"odds\"\n    elif odds < evens:\n        return \"evens\"\n    elif odds == evens:\n        return \"same\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def isGoodTime(t, a, h):\n        return t >= a and t <= a + h\n    return max(1,\n               sum(1 if isGoodTime(t, a, h) else 0 for a, h in zip(map(int, stdin.split()), map(int, stdin.split()))))"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    if n == 1:\n        return 1\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    v = 0\n    m = 0\n    for i in range(n):\n        if a[i] < l:\n            continue\n        if a[i] > r:\n            break\n        if a[i] > m:\n            m = a[i]\n            v += 1\n    return v\n\nsolution(input())\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    mx = 0\n    for i in range(h):\n        if i > l and i < r:\n            t = a[i] - 1\n            if t > mx:\n                mx = t\n    print(mx)\n\n\nsolution(\"6 24 21 23\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_time(a, b, c):\n        if a >= c or b >= c:\n            return False\n        return True\n\n    a, h, l, r = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    n = len(a)\n    ans = 0\n    for i in range(n):\n        if is_good_time(a[i], l, r):\n            ans = max(ans, i+1)\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, hours, l, r, *_ = list(map(int, stdin.split()))\n\n    return str(max(\n        hours - l + 1,\n        hours - r + 1\n    ))\n\nsolution(\n    '7 24 21 23'\n)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    l = l\n    r = r\n\n    i = 0\n    c = 1\n    while i < n and a[i] - l <= h:\n        i += 1\n\n    if i == n:\n        return 0\n\n    l = l\n\n    while i < n and a[i] - r >= 0:\n        i += 1\n\n    if i == n:\n        return 0\n\n    i += 1\n\n    for i in range(1, n):\n        if i - a[i - 1] <= r and a[i] - a[i - 1] <= l:\n            c += 1\n\n    return c\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(l,r, a):\n        return l <= a <= r\n    _,n,h,l,r,a = list(map(int,stdin.split()))\n    d = {}\n    for i in range(n):\n        a_i,l_i,r_i = list(map(int,stdin.split()))\n        #print(a_i, l_i, r_i)\n        if is_valid(l_i,r_i,a_i):\n            d[a_i] = d.get(a_i, 0) + 1\n    #print(d)\n    ans = max(d.values())\n    #print(ans)\n    for k,v in d.items():\n        if v == ans:\n            return str(k)\n\nstdin = \"\"\"\n5 1 2 3 4 5\n1 1 1 3 2 1\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # the first stdin input contains four integers n, h, l, r\n    n, h, l, r = map(int, stdin.split())\n    # the second stdin input contains n integers a1, a2,... an\n    a = list(map(int, stdin.split()))\n    # answer = maximum of good times\n    answer = 0\n\n    # there are 2 * (r - l + 1) numbers in the list, so we need to iterate over all combinations of the numbers\n    # but we don't want to start at i = l, because there are a few elements that are not good\n    for i in range(l + 1, r + 1):\n        if (i - l) % 2 == 0:\n            answer = max(answer, sum(a[l:i]) / (i - l))\n        else:\n            answer = max(answer, sum(a[l:i]) / (i - l) - 1)\n\n    return str(int(answer))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r, *a = map(int, stdin.split())\n    if a == []:\n        a = [0]*n\n    best = 0\n    for i in range(len(a)):\n        if a[i] + i + 1 <= r and a[i] >= l:\n            best = max(best, a[i] + i + 1 - l)\n    return str(best)\n\nprint(solution(input()))"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, h, l, r = map(int, stdin.split())\n  a = list(map(int, stdin.split()))\n  s = 0\n  times = 0\n  res = 0\n  a = sorted(a)\n  print(a)\n  for i in range(n):\n    print(i)\n    if s + a[i] > r:\n      s = 0\n      times += 1\n    else:\n      s += a[i]\n  return str(times)\n\nsolution(\"5 6 11 5 5 5\")\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n] = stdin.split()\n    # numbers = [int(i) for i in range(1, n + 1)]\n    # print(numbers)\n    a = sorted([int(i) for i in stdin.split()])\n    print(a)\n    return len(a)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(i):\n            if 2 * a[j] <= a[i]:\n                dp[i][j] = max(dp[i][j], dp[j][i - 1] + 1)\n\n    return str(max(dp[-1]))"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    n = int(inp)\n    a = list(map(int, inp.split()))\n    n_array = list()\n    for i in range(1, n+1):\n        n_array.append(i)\n    print(n_array)\n    n_array.sort()\n    print(n_array)\n    count = 0\n    for i in range(len(n_array)-1):\n        if (n_array[i] + 1) < n_array[i+1]:\n            print(n_array[i+1] - n_array[i])\n            count += 1\n    return count"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\nimport sys\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 1 2 5 6 7 10 21 23 24 49\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 5\n   ... 2 10 50 110 250\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 6\n   ... 4 7 12 100 150 199\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 10\n   ... 2 10 50 110 250\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 10\n   ... 2 10 50 110 250\n   ... 2 10 50 110 250\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 10\n   ... 2 10 50 110 250\n   ... 1 10 50 110 250\n   ... ''')\n    '1'\n    \"\"\"\n    # the dictionary of problems\n    d = {}\n    # the maximum number of problems that can be built by contest\n    maximum_number_of_problems = 1\n    # the number of problems\n    number_of_problems = int(stdin.split('\\n')[0])\n    # the list of difficulties\n    list_of_difficulties = stdin.split('\\n')[1].split()\n    # the dictionary of number of problems for each difficulties\n    number_of_problems_dict = {difficulty: 0 for difficulty in list_of_difficulties}\n    # the highest number of problems for each difficulties\n    highest_number_of_problems = {difficulty: 0 for difficulty in list_of_difficulties}\n\n    # iterate over the list of difficulties\n    for i in range(len(list_of_difficulties)):\n        # the number of problems for each difficulties\n        number_of_problems_dict[list_of_difficulties[i]] += 1\n        # the highest number of problems for each difficulties\n        highest_number_of_problems[list_of_difficulties[i]] = max(\n            highest_number_of_problems[list_of_difficulties[i]],\n            number_of_problems_dict[list_of_difficulties[i]])\n\n    # iterate over the dictionary of difficulties\n    for i in range(len(list_of_difficulties)):\n        # the number of problems for each difficulties\n        number_of_problems_dict[list_of_difficulties[i]] -= 1\n        # the highest number of problems for each difficulties\n        highest_number_of_problems[list_of_difficulties[i]] -= 1\n\n    # iterate over the list of difficulties\n    for i in range(len(list_of_difficulties)):\n        # add the number of problems for each difficulties\n        number_of_problems_dict[list_of_difficulties[i]] += 1\n        # add the highest number of problems for each difficulties\n        highest_number_of_problems[list_of_difficulties[i]] += 1\n\n    # iterate over the dictionary of difficulties\n    for i in range(len(list_of_difficulties)):\n        # if the number of problems for each difficulties is smaller than 1\n        if number_of_problems_dict[list_of_difficulties[i]] < 1:\n            # then it is not possible to build the contest with this difficulties\n            continue\n        # else\n        else:\n            # the maximum number of problems can be built with this difficulties\n            maximum_number_of_problems = max(\n                maximum_number_of_problems,\n                highest_number_of_problems[list_of_difficulties[i]]\n            )\n            # the maximum number of problems can be built with this difficulties\n            maximum_number_of_problems = max(\n                maximum_number_of_problems,\n                number_of_problems_dict[list_of_difficulties[i]]\n            )\n    # return the maximum number of problems\n    return maximum_number_of_problems\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D = list(map(int, stdin.split()))\n    return str(len([d for d in D if d > 2 * max(D)]))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return max(len(set(a)) - 1, sum(a))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \uc774 \ubb38\uc81c\ub294 \uc5b4\ub835\uc9c0 \uc54a\uc9c0\ub9cc, \ub2e4\uc591\ud55c \ud480\uc774\ubc29\ubc95\uc774 \ub530\ub85c \uc788\uace0 \ud480\uae30 \uc804\uc5d0 \uc774\uc81c \uc5b4\ub824\uc6b4 \uc0ac\ub78c\uc774 \ub4e4\uc5b4\uac04 \uc0ac\ub78c\uc744 \ucc3e\uc544 \uc815\ub2f5\uc744 \ub3c4\ucd9c\ud574\ub77c.\n\n    :param stdin:\n    :return:\n    '''\n    n = int(stdin.strip())\n    res = 0\n    for i in range(1, n + 1):\n        candidates = [int(x) for x in stdin.strip().split()[:i]]\n        candidates = sorted(candidates)\n        res = max(res, sum(candidates))\n    return str(res)\n\n'''\n\uc815\ub2f5: 3\n\ud1b5\uacfc\n\n\uba54\ubaa8\ub9ac \ucd08\uacfc\n'''\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(nlog(n))\n    Space complexity: O(1)\n    \"\"\"\n    n, *diffs = map(int, stdin.split())\n    diffs.sort(reverse=True)\n    i = 0\n    ans = 0\n    while i < n:\n        if i + 1 < n and diffs[i] * 2 <= diffs[i + 1]:\n            ans += 1\n            i += 2\n        else:\n            ans += 1\n            i += 1\n    return str(ans)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) == min(a[i], a[j]):\n                return f'{i + 1} {j + 1}'"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '{} {}'.format(*sorted(map(int, stdin.split())))"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    res = [None, None]\n    lcm = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if (lcm * a[i]) % a[j] == 0:\n                if res[0] is None or res[1] is None:\n                    res = [i, j]\n                elif (res[0] <= i and res[1] <= j):\n                    res = [i, j]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    min_lcm = a[0]\n    for i in range(1, num):\n        min_lcm = min(min_lcm, a[i], lcm(a[i], a[i-1]))\n    for i in range(num):\n        for j in range(i+1, num):\n            if min_lcm == lcm(a[i], a[j]):\n                return str(i+1)+\" \"+str(j+1)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            continue\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                return str(i) + \" \" + str(j)\n    return \"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    min = min_lcm(a)\n    for i in range(n):\n        if a[i] % min == 0:\n            for j in range(i + 1, n):\n                if a[j] % min == 0:\n                    print(i, j)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    a.sort()\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            continue\n        if gcd(a[i], a[i + 1]) == 1:\n            continue\n        if gcd(a[i], a[i + 1]) == gcd(a[i + 1], a[i]):\n            continue\n        else:\n            x = gcd(a[i], a[i + 1])\n            for j in range(i + 2, n):\n                if a[j] % x!= 0:\n                    continue\n                if a[j] // x!= a[i] // x:\n                    continue\n                if a[j] // x == a[i] // x and a[j] % x == 0:\n                    continue\n                else:\n                    return str(i + 1) +'' + str(j + 1)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    pass\n    '''\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    arr_a = sorted(a)\n    for i in range(len(arr_a)):\n        for j in range(i,len(arr_a)):\n            if arr_a[i] == 0 or arr_a[j] == 0:\n                continue\n            if i!= j:\n                if arr_a[i] * arr_a[j] < arr_a[i] + arr_a[j]:\n                    print(arr_a[i], arr_a[j])\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] < ans or (a[i] * a[j] == ans and i < j):\n                ans = a[i] * a[j]\n                i_idx, j_idx = i, j\n    return str(i_idx) +'' + str(j_idx)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    a = list(map(int, inputs[1:]))\n    m = max(a)\n    a.remove(m)\n    lcm = 1\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm * m % a[i] == a[j]:\n                ans.append(str(i + 1) + \" \" + str(j + 1))\n                break\n            else:\n                continue\n    if len(ans) == 0:\n        ans.append(\"No such pairs\")\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    # print(n)\n    b = stdin\n    # print(b)\n    # def make_ternary(i):\n    #     return int(str(i) * 3)\n    def make_ternary(i):\n        return int(i)\n    # print(make_ternary(2))\n    def check(st):\n        t = 0\n        for j in st:\n            if j == '1':\n                t += 1\n            elif j == '2':\n                t -= 1\n        if t < 0:\n            return False\n        return True\n\n    def find_largest(b):\n        ans = 0\n        for i in range(len(b)):\n            if int(b[i])!= 0:\n                ans += int(b[i])\n        return ans\n\n    def find_smallest(b):\n        ans = 0\n        for i in range(len(b)):\n            if int(b[i])!= 0:\n                ans += 1\n        return ans\n\n    # print(check(b))\n    # print(find_largest(b))\n    # print(find_smallest(b))\n    # b = map(make_ternary, b)\n    # b = list(map(make_ternary, b))\n    # print(b)\n    # print(type(b))\n    # print(check(b))\n    # print(find_largest(b))\n    # print(find_smallest(b))\n    ans = max(b)\n    # print(ans)\n    # ans = max(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = max(b, key=lambda x: b.count(x))\n    # print(ans)\n    ans = max(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = max(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = max(b, key=lambda x: b.count(x))\n    # print(ans)\n    # ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    ans = min(b, key=lambda x: b.count(x))\n    # print(ans)\n    return ans\n    # print(b)\n\n    # l = 0\n    # m = 0\n    # for i in b:\n    #     if i == '1':\n    #         l += 1\n    #     if i == '2':\n    #         m += 1\n    # if l == m:\n    #     return '2' * l\n    # elif l > m:\n    #     return '0' + '21' * (l - m)\n    # elif l < m:\n    #     return '21' + '0' * (m - l)"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n\n    min_replace = float('inf')\n    res = \"\"\n\n    def replace_char(res, char):\n        nonlocal min_replace\n\n        if char == '0':\n            if len(res) < min_replace:\n                min_replace = len(res)\n                res = res.replace('2', '1')\n                res = res.replace('1', '0')\n        elif char == '1':\n            if len(res) < min_replace:\n                min_replace = len(res)\n                res = res.replace('2', '0')\n                res = res.replace('0', '1')\n        else:\n            if len(res) < min_replace:\n                min_replace = len(res)\n                res = res.replace('2', '2')\n                res = res.replace('1', '1')\n\n    for i in range(n):\n        if s[i] == '0':\n            replace_char(res, '1')\n        elif s[i] == '1':\n            replace_char(res, '0')\n        else:\n            replace_char(res, '2')\n\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin\n    st = st.replace(\"0\", \"\")\n    st = st.replace(\"1\", \"\")\n    st = st.replace(\"2\", \"\")\n    st = st.replace(\"0\", \"\")\n    st = st.replace(\"1\", \"\")\n    st = st.replace(\"2\", \"\")\n    st = st.replace(\"2\", \"\")\n    return st\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    # the number of '0's\n    count_0 = 0\n    # the number of '1's\n    count_1 = 0\n    # the number of '2's\n    count_2 = 0\n\n    # for each character in the string\n    for ch in stdin:\n        if ch == '0':\n            count_0 += 1\n        elif ch == '1':\n            count_1 += 1\n        elif ch == '2':\n            count_2 += 1\n    \n    # determine the minimum number of replacements for the string\n    min_replacements = min(count_0, count_1, count_2)\n    if min_replacements == count_0:\n        result = '0' * min_replacements\n    elif min_replacements == count_1:\n        result = '1' * min_replacements\n    elif min_replacements == count_2:\n        result = '2' * min_replacements\n    \n    return result\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s_o = ''\n    s_t = ''\n    s_t_o = ''\n    s_t_t = ''\n    s_t_o_o = ''\n    s_t_o_t = ''\n    s_t_t_o = ''\n    s_t_t_t = ''\n    s_t_o_t_o = ''\n    s_t_o_t_t = ''\n    s_t_t_t_o = ''\n    s_t_t_t_t = ''\n    s_t_o_t_t_o = ''\n    s_t_o_t_t_t = ''\n    s_t_t_t_t_o = ''\n    s_t_t_t_t_t = ''\n    s_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t = ''\n    s_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_o = ''\n    s_t_t_t_t_t_t_t"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    i = 0\n    while i < 3:\n        # first\n        c = s[i]\n        if c == '0':\n            s = s[:i] + '1' + s[i+1:]\n            i += 1\n        elif c == '1':\n            s = s[:i] + '2' + s[i+1:]\n            i += 1\n        elif c == '2':\n            s = s[:i] + '1' + s[i+1:]\n            i += 1\n        else:\n            return 'error'\n\n    i = 0\n    while i < 3:\n        # second\n        c = s[i]\n        if c == '0':\n            s = s[:i] + '2' + s[i+1:]\n            i += 1\n        elif c == '1':\n            s = s[:i] + '0' + s[i+1:]\n            i += 1\n        elif c == '2':\n            s = s[:i] + '1' + s[i+1:]\n            i += 1\n        else:\n            return 'error'\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin\n    n = int(n)\n\n    t = ''\n    for i in range(n):\n        if s[i] == '0':\n            t += '1'\n        elif s[i] == '1':\n            t += '0'\n        else:\n            t += '2'\n    return t\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.replace(\"2\", \"0\")\n    string = string.replace(\"1\", \"1\")\n    string = string.replace(\"0\", \"2\")\n    return string\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1]\n    n = int(stdin.split(' ')[0])\n    s = stdin.split(' ')[1]\n    s = list(s)\n    # [0, 1, 2]\n    # 3\n    # 1 2 1\n    # 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    # 1 1 1"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split(\"\\n\"):\n        pass\n    return \"\".join(sorted(s))\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, m = map(int, stdin[0].split(' '))\n    stairs = list(map(int, stdin[1].split(' ')))\n    return len(solution_recursive(n, m, stairs))\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    d = {\n        0: 1,\n        1: 1,\n        2: 2,\n        3: 4,\n        4: 6\n    }\n    dp = {\n        0: 0,\n        1: 1,\n        2: 1,\n        3: 2,\n        4: 4\n    }\n    for i in range(5, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % 1000000007\n    return dp[n]"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    a_dict = {}\n    a_dict[0] = 1\n    for i in range(1, N + 1):\n        count = 0\n        for j in range(1, min(i, M) + 1):\n            if i - j in a_dict.keys():\n                count += a_dict[i - j]\n            if j not in a_dict.keys():\n                a_dict[j] = 1\n            else:\n                a_dict[j] += 1\n        if i not in a_dict.keys():\n            a_dict[i] = 1\n        else:\n            a_dict[i] += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n\n    for i in range(1, N + 1):\n        dp[i][i] = 1\n\n    for step in range(N, 0, -1):\n        for step_2 in range(step, N + 1):\n            for step_1 in range(step, step_2):\n                dp[step_1][step_2] = (dp[step_1][step_2 - 1] +\n                                      dp[step_1 - 1][step_2 - 1]) % 1000000007\n\n    return dp[1][N]\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    return str(dynamic_programming(N, M, A))\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    f = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if i == j == 0:\n                f[0][0] = 1\n            elif i == 0:\n                f[1][j] = 0\n            elif j == 0:\n                f[i][0] = 1\n            elif i == j:\n                f[i][j] = f[i][j - 1] + f[i - 1][j]\n            else:\n                f[i][j] = f[i][j - 1] + f[i - 1][j] + f[i - 1][j - 1] - f[i - 1][j - 1]\n    print(f[m][n])\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    num_ways = []\n    for i in range(1, n+1):\n        # Number of ways to climb up to step i\n        num_ways.append(sum(2**(i-j) for j in range(1, i+1)))\n    return num_ways[m-1]"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(\" \"))\n    a = list(map(int, stdin.strip().split(\" \")))\n    if m < 0 or n < 1 or n > 10^5 or m < 1:\n        return \"Out of bounds\"\n    else:\n        return str(bricks(n, m, a))\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cache = {}\n\n    def count_ways(step_number):\n        if step_number in cache:\n            return cache[step_number]\n        if step_number == N:\n            return 1\n        else:\n            ways_of_staying_in_this_step = count_ways(step_number + 1)\n            if step_number < N - 1:\n                ways_of_staying_in_this_step += count_ways(step_number + 2)\n            if step_number < N - 2:\n                ways_of_staying_in_this_step += count_ways(step_number + 3)\n            cache[step_number] = ways_of_staying_in_this_step\n            return ways_of_staying_in_this_step\n\n    return str(count_ways(0))"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(count_ways(N, M, a))\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    x, k, d = int(input_data[0]), int(input_data[1]), int(input_data[2])\n    return abs(x) if d >= x else abs(x + d)"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if d > x:\n        d = x\n    if k <= d:\n        return str(x + d)\n    if k > d:\n        return str(x - d)\n    return str(d)\n\"\"\"\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    x += d\n    if x >= k:\n        return '-' + str(x - k)\n    elif x <= -k:\n        return str(x + k)\n    return str(abs(x) - abs(k))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [x, k, d] = stdin.split(' ')\n    x = int(x)\n    k = int(k)\n    d = int(d)\n    x_dest = x\n    if x >= 0:\n        x_dest -= d\n    else:\n        x_dest += d\n    x_dest = abs(x_dest)\n    if x_dest < x:\n        x_dest = abs(x - x_dest)\n    return str(x_dest)\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    d = d % 2\n    if d == 0:\n        return abs(x)\n    else:\n        return abs(x + d)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [X, K, D] = stdin.split()\n    X = int(X)\n    K = int(K)\n    D = int(D)\n    X = abs(X)\n    ans = 0\n    for i in range(K):\n        if X > D:\n            ans = min(ans, X - D)\n            X -= D\n        else:\n            ans = min(ans, D - X)\n            X += D\n    return str(ans)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (x, k, d) = stdin.split(' ')\n    x = int(x)\n    k = int(k)\n    d = int(d)\n    x_max = x + k\n    x_min = x - k\n    if x_max > x_min:\n        if x == x_min and x == x_max:\n            print(x)\n        else:\n            print(max(abs(x - x_max), abs(x - x_min)))\n    else:\n        if x == x_min and x == x_max:\n            print(x)\n        else:\n            print(min(abs(x - x_min), abs(x - x_max)))\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    return str(min(abs(X), abs(X - K) + abs(X + D) - abs(X + D), abs(X + D), abs(X - K)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    x = x + k\n    # determine the smallest absolute value of x\n    while x > -d:\n        x -= d\n    if x <= d:\n        print(x)\n    else:\n        x = -x\n        while x <= d:\n            x += d\n        print(x)\n    return ''\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    min_distance = 10 ** 15\n    x_position = x\n    x_destination = -10 ** 15\n    for i in range(k):\n        x_destination += d\n        if abs(x_destination) < min_distance:\n            min_distance = abs(x_destination)\n    return str(min_distance)\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(2 * ((stdin // 2) + (stdin % 2)) - stdin)\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    if x % 4 == 0:\n        return \"0\"\n    elif x % 4 == 1:\n        return \"1\"\n    elif x % 4 == 2:\n        return \"2\"\n    else:\n        return \"3\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_int = int(stdin)\n    if stdin_int < 10:\n        return '0'\n    return str(stdin_int)\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[:-1]\n    return str(max(int(i) - int(j) for i, j in zip(stdin, stdin[1:])))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    #for i in range(len(stdin)):\n        #if i == 0:\n        #    if stdin[i] == '1' or stdin[i] == '2':\n        #        answer += 1\n        #    elif stdin[i] == '3':\n        #        answer += 1\n        #    else:\n        #        answer += 1\n        #else:\n        #    if stdin[i] == '1' or stdin[i] == '2':\n        #        answer += 1\n        #    else:\n        #        answer += 1\n    answer = '\\n' + ''.join([i for i in stdin])\n    return answer"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))\n    return stdin"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 1:\n        n = int(stdin)\n        if n <= 1:\n            return n\n        else:\n            return solution(str(int(n / 2))) + solution(str(int(n / 2)))\n\n    else:\n        return stdin\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    num = int(stdin)\n    \n    count = 0\n    \n    while num > 1:\n        \n        if num%2 == 0:\n            num = num // 2\n            count += 1\n        else:\n            num = num * 3 + 1\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{stdin}\"\n\"\"\"\n\nimport sys\nimport itertools\nfrom math import sqrt, floor\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(int(x) - int(y)) for x, y in zip(stdin, stdin[::-1]))"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    a = int(stdin[0])\n    return solution_core(a)\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(1, 30):\n        for j in range(1, 30):\n            for k in range(1, 30):\n                if i * j * k == num:\n                    return \"{} {} {}\".format(i, j, k)\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(pow(a, 2))\n\nstdin = \"3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(27)\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    if a == 2:\n        return '2'\n    if a == 3:\n        return '3'\n    if a == 4:\n        return '4'\n    if a == 5:\n        return '5'\n    if a == 6:\n        return '6'\n    if a == 7:\n        return '7'\n    if a == 8:\n        return '8'\n    if a == 9:\n        return '9'\n    if a == 10:\n        return '10'\n    if a == 11:\n        return '11'\n    if a == 12:\n        return '12'\n    if a == 13:\n        return '13'\n    if a == 14:\n        return '14'\n    if a == 15:\n        return '15'\n    if a == 16:\n        return '16'\n    if a == 17:\n        return '17'\n    if a == 18:\n        return '18'\n    if a == 19:\n        return '19'\n    if a == 20:\n        return '20'\n    if a == 21:\n        return '21'\n    if a == 22:\n        return '22'\n    if a == 23:\n        return '23'\n    if a == 24:\n        return '24'\n    if a == 25:\n        return '25'\n    if a == 26:\n        return '26'\n    if a == 27:\n        return '27'\n    if a == 28:\n        return '28'\n    if a == 29:\n        return '29'\n    if a == 30:\n        return '30'\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = int(a)\n    return str(b)\n\nsolution(input())"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"27\""
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin)"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(a)"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 27\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    if a == '1':\n        return '1'\n    elif a == '0':\n        return '0'\n    else:\n        a = int(a)\n        if a <= 999:\n            return '1'\n        elif a <= 9999:\n            return '0'\n        else:\n            return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return a\n\n    return str(a)\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return '0'\n    else:\n        return '1'\nprint(solution(input()))\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds a list of digits from input string.\n    \"\"\"\n    digits = list(map(int, stdin))\n    return digits\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the sum of the cubes of the first 9 digits of the input.\n    >>> solution('111')\n    6\n    >>> solution('482')\n    0\n    >>> solution('890')\n    9\n    >>> solution('12345678')\n    45\n    >>> solution('987654321')\n    243\n    >>> solution('12345678')\n    0\n    \"\"\"\n    return sum(c ** 3 for c in stdin)\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"0\"\n    elif a % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(stdin % 2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 10 <= a <= 99:\n        return \"1\"\n    elif a < 10:\n        return \"0\"\n    else:\n        return \"0\"\nprint(solution(input()))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        ;    ;\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        "
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return str(1)\n    else:\n        return str(0)"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"4\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = stdin[0]\n    b = stdin[1]\n    return b\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set([int(x) for x in stdin.split()])))\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    max_val = numbers[-1]\n    return str(max_val)"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Your code here\n    return stdin\n    \nsolution(input())\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    a = stdin.split()\n    max_a = max(a)\n    max_int = int(max_a)\n    #print(max_int)\n    num_zeros = 0\n    num_zeros_array = []\n    while max_int > 0:\n        #print(max_int)\n        max_int = max_int // 10\n        #print(max_int)\n    #print(num_zeros_array)\n    return str(sum(num_zeros_array))\n\nsolution('5 5 9 10 11')\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    return \"a\" * len(stdin)\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return 'hello'\nsolution('abd')\nsolution('a')"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = stdin.split(\" \")\n    return str(sum(max(i,j,k) for i, j, k in zip(nums[0::3], nums[1::3], nums[2::3])))\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733\n   ... 9999999733\n   ... ''')\n    '2'\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733\n   ... 9999999733\n   ... ''')\n    '1'\n    '''\n    stdin = stdin.split()\n    t = int(stdin[0])\n    for _ in range(t):\n        n, k = map(int, stdin[1:])\n        if n == n and k == k and k % n == 0:\n            print(1)\n        elif n == n and k == k and n * k % 2 == 0:\n            print(1)\n        else:\n            print(k)\n'''\n'''\n--Standard input--\n2\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\n--Output--\n2\n8\n1\n999999733\n1\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        num_of_shovels, num_of_packages = map(int, stdin.split())\n        if num_of_shovels == num_of_packages:\n            print(num_of_shovels)\n        else:\n            print(num_of_packages - 1)\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n, k = map(int, stdin.split())\n        if n == k:\n            yield 0\n        elif n == k + 1:\n            yield 1\n        else:\n            i = 1\n            while n >= i:\n                if (i + 1) * i // 2 <= n:\n                    n -= i * (i + 1) // 2\n                    yield i + 1\n                i += 1\n        \n    \n    \n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  p = [[int(x) for x in input().split()] for _ in range(n)]\n  ans = float('inf')\n  for i in range(1, k+1):\n    ans = min(ans, p[0][0] + p[1][i-1])\n  return str(ans)"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example, if $n=8$ and $k=7$, then Polycarp will buy $2$ packages of $4$ shovels.\n    \"\"\"\n    for i in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        print(n, n//k)\n\nsolution()\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    '2'\n    \"\"\"\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    shovels = []\n    for _ in range(k):\n        shovels.append(list(map(int, lines[1].split())))\n    h = []\n    for i in range(1, k):\n        h.append(shovels[0][i] - shovels[i][0])\n    h.append(n - shovels[0][k - 1])\n    min_ = float('inf')\n    for i in range(len(h)):\n        min_ = min(min_, h[i])\n    return str(min_)\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    k_1 = list(map(int, stdin[1].split()))\n    k_2 = list(map(int, stdin[2].split()))\n    p = list(map(int, stdin[3].split()))\n    result = 1\n    count = 0\n    for i in range(1, m+1):\n        if p[i-1] == 0:\n            for j in range(1, n+1):\n                if (k_1[j-1]+k_2[j-1])%2 == 0:\n                    if j % 2 == 0:\n                        count += 1\n                    elif j % 2 == 1:\n                        count += 1\n                else:\n                    count += 0\n        else:\n            for j in range(1, n+1):\n                if (k_1[j-1]+k_2[j-1])%2 == 0:\n                    if j % 2 == 0:\n                        count += 1\n                    elif j % 2 == 1:\n                        count += 1\n                else:\n                    count += 1\n        result *= count\n    return result\n\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom itertools import permutations\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (N, M) = (map(int, stdin.split(' ')))\n\n    combinations = 0\n    for k in range(1, N + 1):\n        for s in range(1, N + 1):\n            if (k % 2) == 0:\n                if ((k * 2) + s) % 2 == 0:\n                    if (k + s) % 2 == 0:\n                        combinations += 1\n            else:\n                if ((k + s) % 2) == 0:\n                    if (k * 2) % 2 == 0:\n                        combinations += 1\n    print(combinations)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    p_i_m = list(map(int, stdin.strip().split()))\n    switches = [[] for _ in range(n)]\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            switches[i].append(int(input()))\n    return str(combinations_count(n, m, switches, p_i_m))\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    k, s = stdin.split()\n    k, s = int(k), map(int, s.split())\n    l = len(s)\n    return str(sum(1 if ((i + 1) % 2) == 1 and (pow(2, k - i, M) * s[i] * s[i]) % 2 == 1 else 0 for i in range(l)))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    # print(lines)\n    _, N, M = lines[0].split()\n    N = int(N)\n    M = int(M)\n    switches = lines[1:]\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def mod_inv(a: int, m: int) -> int:\n        return pow(a, m-2, m)\n\n    def count_odd_even(n: int) -> (int, int):\n        odd = 0\n        even = 0\n        for x in range(2, n+1):\n            if x % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return (odd, even)\n\n    if N % 2 == 0:\n        odd_even_count = count_odd_even(N)\n        odd = odd_even_count[0]\n        even = odd_even_count[1]\n    else:\n        odd, even = count_odd_even(N)\n\n    def check(p, k):\n        if p == 0:\n            return odd % k == 0\n        else:\n            return even % k == 0\n\n    def bulbs(n: int, m: int, switches: list):\n        \"\"\"\n        Args:\n            n (int): number of switches\n            m (int): number of bulbs\n            switches (list): the switches\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            odd_count = 0\n            even_count = 0\n            for x in range(2, n + 1):\n                if x % 2 == 0:\n                    odd_count += 1\n                else:\n                    even_count += 1\n\n            p_max = n - odd_count + 1\n            q_max = n - even_count + 1\n            p = p_max - 1\n            q = q_max - 1\n            while p >= 2 and q >= 2:\n                if check(p, k):\n                    p -= 1\n                if check(q, k):\n                    q -= 1\n            if p == 1 or q == 1:\n                return 0\n\n            a = []\n            while q >= 2:\n                if check(p, k):\n                    a.append(p)\n                q -= 1\n            while p >= 2:\n                if check(q, k):\n                    a.append(q)\n                p -= 1\n            b = []\n            while q >= 2:\n                if check(p, k):\n                    b.append(q)\n                q -= 1\n            while p >= 2:\n                if check(p, k):\n                    b.append(p)\n                p -= 1\n            if len(a) > len(b):\n                big_a = a\n                small_b = b\n            else:\n                big_a = b\n                small_b = a\n            if (len(big_a) > len(small_b) and len(small_b) % 2 == 0) or (len(big_a) < len(small_b) and len(small_b) % 2 == 1):\n                return 0\n\n            # print(big_a, small_b)\n            count = 0\n            i = 0\n            while i < len(big_a):\n                if check(big_a[i], k):\n                    count += 1\n                i += 1\n            while i < len(small_b):\n                if check(small_b[i], k):\n                    count += 1\n                i += 1\n            return count\n\n    count = 0\n    for sw in switches:\n        count += bulbs(N, M, sw)\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N, M = int(N), int(M)\n    k = [1 if i % 2 == 1 else 0 for i in range(1, N + 1)]\n    k = [(i, k.index(i)) for i in k]\n    n = [1 if i % 2 == 1 else 0 for i in range(1, N + 1)]\n    n = [(i, n.index(i)) for i in n]\n    p = stdin.split()\n    p = [(i, int(p[i])) for i in range(M)]\n    print(len([k for k, v in k if v in p]))\n    return '1'"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    in_n, in_m = stdin.split()\n    n, m = int(in_n), int(in_m)\n\n    state = []\n    for i in range(1, n+1):\n        state.append(str(int(in_m % 2 == 0 and i % 2 == 1)))\n    for i in range(1, m+1):\n        state.append(str(int(in_m % 2 == 1 and i % 2 == 0)))\n\n    state = \",\".join(state)\n    return state"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1, k_2 = map(int, stdin.split())\n    switches = [0] * n\n    for i in range(k_1):\n        switches[i] = 1\n\n    for i in range(k_2):\n        switches[i] = 2\n    \n    p_1, p_2 = map(int, stdin.split())\n    \n    for _ in range(m - p_1 % 2):\n        if switches[p_1 % 2] == 1:\n            switches[p_1 % 2] = 2\n        else:\n            switches[p_1 % 2] = 1\n    \n    print(switches.count(1))\n    return \"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\nstdin = '2 2\\n2 1 2\\n1 2\\n0 1\\n'\nstdin = '5 6\\n2 1 5 4\\n2 2 1 1\\n3 1\\n3 2\\n4 1\\n2 2\\n3 1\\n2 4\\n3 1\\n2 3\\n3 1\\n'\nstdin = '5 6\\n2 1 5 4\\n2 2 1 1\\n3 1\\n3 2\\n4 1\\n2 2\\n3 1\\n2 4\\n3 1\\n2 3\\n3 1\\n'\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    s_n = {}\n    s_m = {}\n    for i in range(N):\n        s_n[i] = 0\n        s_m[i] = 0\n    for i in range(M):\n        s_n[k[i]-1] += 1\n        s_m[k[i]-1] += 1\n    for i in range(N):\n        if s_n[i] % 2 == 1 or s_m[i] % 2 == 1:\n            if s_n[i] % 2 == 1 and s_m[i] % 2 == 1:\n                return str(s_n[i] // 2 + s_m[i] // 2)\n            else:\n                return str(s_n[i] // 2 + s_m[i] // 2 - 1)\n    return '0'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = stdin.split()\n    a = int(a)\n    b = int(b)\n    h = int(h)\n    m = int(m)\n    return str(a*12*h + b*h + 12*h*m + b*m)\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '%.0f' % (float(stdin.split()[0]) + float(stdin.split()[1]) + float(stdin.split()[2]) + float(stdin.split()[3]) + float(stdin.split()[4]))"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H_minutes = H - (A // 2)\n    H_seconds = (H_minutes * 60) % 60\n    M_seconds = (M * 60) % 60\n    H_seconds += (B // 2) - (A // 2)\n    H_seconds = (H_seconds + M_seconds) % 60\n    return str(round(H_seconds + H_minutes))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = stdin\n    h = H * 2 * pi\n    m = M * 2 * pi\n    h_deg = (h + 2 * pi) / (2 * pi)\n    m_deg = (m + 2 * pi) / (2 * pi)\n    dist = (A ** 2 + B ** 2 - 2 * A * B * cos(h_deg - m_deg)) ** 0.5\n    return f'{dist:.9f}'\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    A, B = max(A, B), min(A, B)\n\n    # Rotate hour and minute hands\n    rotated_hour = (A + (H * 12)) % 360\n    rotated_minute = ((M + (60 * (H - int(rotated_hour / 360) + 1) + (M * 360 / (12 * 60))) - A) % 360)\n    rotated_second = (rotated_minute * 60) + (rotated_hour * 360) + (M * 12)\n    A = rotated_second\n    B = (((rotated_second * 180) / 360) + 360) % 360\n    H = (rotated_second * 360) % 360\n\n    return str(int(math.ceil(A / 100) * 100) + int(math.ceil(B / 100) * 100))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    H = int(stdin.split()[2])\n    M = int(stdin.split()[3])\n    return str(abs(A * H + (A * (H - 1)) / 2 - (B * M + (B * (M - 1)) / 2)) / 1000000)\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # H in seconds, M in minutes\n    # H in degrees, M in degrees\n    # A in degrees, B in degrees\n    D = (360 / (H * 60 + M)) + (360 / (A * 60 + B) - 360) % 360\n    return f\"{round(D * 100) / 100:.9f}\""
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    print(A + (M * 360) / (360 * H))\n    print((A + (M * 360) / (360 * H)) - A)\n    return"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '%.9f' % (abs(a - b) / min(a, b))"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    H = int(stdin.split()[2])\n    M = int(stdin.split()[3])\n    return str(abs((A*H + B*M)/2) + abs(A + B))\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = map(int, stdin[:2])\n    l = list(map(int, stdin[2:]))\n    a = sorted(l)\n    i = 0\n    j = len(l)-1\n    total = 0\n    while i < j:\n        if a[i] + a[j] == m:\n            total += 1\n            i += 1\n            j -= 1\n        elif a[i] + a[j] > m:\n            j -= 1\n        elif a[i] + a[j] < m:\n            i += 1\n    return str(total)\n\nprint(solution(input()))"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == m:\n            count += 1\n        else:\n            l, r = i - 1, i + 1\n            l = 0 if l < 0 else l\n            r = len(a) - 1 if r >= len(a) else r\n            mid = (l + r) // 2\n            if a[mid] == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n\n    arr = sorted(arr)\n    result = 0\n\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] + arr[i + 2] == m:\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    if n == 1:\n        if A[0] == m:\n            return 1\n        else:\n            return 0\n    total = 0\n    # find the median\n    median = (len(A) - 1) // 2\n    # check if median is in the middle\n    if A[median] == m:\n        total += 1\n    # check if median is in left half\n    if A[median] >= A[0]:\n        total += 1\n    # check if median is in right half\n    if A[median] <= A[len(A) - 1]:\n        total += 1\n    if total % 2 == 0:\n        return total // 2\n    else:\n        return total // 2 + 1\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(1, n+1):\n        l.append(int(stdin.split()[i-1]))\n\n    l.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(l[i] - l[j]) <= n//2:\n                result += 1\n\n    print(result)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    s.sort()\n    median = s[n//2]\n    d = 0\n    for i, v in enumerate(s):\n        if v == median:\n            d += 1\n    return str(d)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    input_arr = list(map(int, stdin.split()))\n    input_arr.sort()\n    print(input_arr)\n\n    count = 0\n    i = 0\n    j = 0\n    s = 0\n    while(i < len(input_arr) and j < len(input_arr)):\n        if(input_arr[i] + input_arr[j] == m):\n            count += 1\n            s += input_arr[i] + input_arr[j]\n            i += 1\n            j += 1\n        elif(input_arr[i] + input_arr[j] > m):\n            if(input_arr[i] + input_arr[j] < s):\n                s = input_arr[i] + input_arr[j]\n                count += 1\n                j += 1\n            else:\n                i += 1\n        else:\n            i += 1\n    print(count)\n    return count\n\nsolution(input())\n\n\n'''\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if len(a) % 2 == 0:\n        left = len(a) // 2 - 1\n    else:\n        left = len(a) // 2\n    return str(sum(1 for i, j in zip(a[:left], a[left+1:]) if i + j == m))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n\n    def equal_subset_sum(arr, n):\n        # if length of the array is 1, then it is a subset of the array\n        if n == 1:\n            return True\n\n        # otherwise, calculate the sum of the array\n        arr_sum = sum(arr)\n\n        # if array sum is not divisible by 2, it cannot be a subset\n        if arr_sum % 2!= 0:\n            return False\n\n        # if the array sum is divisible by 2, now check if the array can be divided into two equal sum subsets\n        # if it can be divided, then we return True, else False\n        return equal_subset_sum(arr[1:], n - 1) or equal_subset_sum(arr[1:], n - 1)\n\n    def solve(arr, n, segments):\n        # create an array for minimums\n        minimums = [float('inf')] * n\n        # create an array for maximums\n        maximums = [-float('inf')] * n\n        # create an array to store max sums for each segment\n        sums = [0] * n\n        # create a variable for the current sum\n        cur_sum = 0\n\n        # from the first element, we have to calculate the maximum and minimum for the rest of the elements\n        for i in range(n):\n            # update the minimums and maximums for each segment, and add the current element to the sums\n            minimums[i] = min(minimums[i], arr[i])\n            maximums[i] = max(maximums[i], arr[i])\n            sums[i] = cur_sum + arr[i]\n\n            # update the current sum for the next element\n            cur_sum = sums[i]\n\n        # we need to find the number of subsets in which the maximums and minimums are minimums and maximums\n        # now, let us consider all segments\n        for segment in segments:\n            # update the current minimums and maximums of the current segment\n            segment_minimums = min(minimums[segment[0] - 1:segment[1]])\n            segment_maximums = max(maximums[segment[0] - 1:segment[1]])\n            # now, we can calculate the maximum and minimum of the segment\n            # now, we need to check if the maximum is less than or equal to the minimum\n            if segment_minimums <= segment_maximums:\n                # if the maximum is less than or equal, then we can get the max sum\n                cur_sum = max(cur_sum, segment_minimums)\n\n        # now, we need to return the maximums and minimums and the sum for the segment\n        return max(maximums), min(minimums), cur_sum\n\n    # now, let us check if the array is a subset\n    if not equal_subset_sum(arr, n):\n        return 0\n\n    # let us check if the array can be divided into two equal sum subsets\n    if not equal_subset_sum(arr, n - 1):\n        return 0\n\n    # now we need to find out how many segments we need to apply\n    num_segments = 0\n    for segment in segments:\n        num_segments += 1\n\n    # calculate the maximums and minimums of the array\n    maxs, mins, sum_max = solve(arr, n, segments)\n\n    # now, we need to find out how many segments we need to apply\n    num_segments = 0\n    for segment in segments:\n        num_segments += 1\n\n    # create a variable to store the maximums and minimums for the subsets\n    max_sum = -float('inf')\n    min_sum = float('inf')\n\n    # for each segment, find out how many times does it need to be applied\n    for segment in segments:\n        # we need to find out how many times does each segment need to be applied\n        num_segments = 0\n        for i in range(segment[0] - 1, segment[1]):\n            # if we need to apply this segment\n            if min_sum < arr[i] <= max_sum:\n                num_segments += 1\n        # update the maximum and minimum for the current segment\n        max_sum = max(max_sum, maxs - mins + arr[segment[0] - 1])\n        min_sum = min"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    min_a = min(a)\n    max_a = max(a)\n    b = []\n    while (min_a <= max_a):\n        if a == sorted(a):\n            b = a\n            break\n        a.sort()\n        b.append(a[0])\n        a.pop(0)\n        cnt += 1\n    if not b:\n        return 0\n    return str(cnt)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = list(map(lambda l, r: (l, r), map(int, stdin.split())))\n    answer = 0\n    return str(answer)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    starts = []\n    ends = []\n    \n    for i in range(m):\n        l, r = map(int, stdin.split())\n        starts.append(l)\n        ends.append(r)\n    \n    for i in range(m):\n        starts[i] -= 1\n        ends[i] -= 1\n    \n    starts.sort()\n    ends.sort()\n    \n    starts.append(n)\n    ends.append(n)\n    \n    starts.sort()\n    ends.sort()\n    \n    min_value = a[starts[0]]\n    max_value = a[ends[0]]\n    \n    ans = 0\n    for i in range(m):\n        a[starts[i]] -= 1\n        a[ends[i]] -= 1\n        ans = max(ans, a[starts[i]] - min_value)\n        a[starts[i]] += 1\n        a[ends[i]] += 1\n    return str(ans)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def countingSort(arr, maximum):\n        count = [0] * maximum\n        for i in arr:\n            count[i] += 1\n\n        for i in range(1, maximum):\n            count[i] += count[i - 1]\n        return count\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r = list(map(int, stdin.split()))\n    # print(a)\n    # print(l, r)\n    c = countingSort(a, r - l + 1)\n    print(max(0, c[r] - c[l]))\n    return\n\n\nsolution(\"1 0\")\nsolution(\"4 5\")\nsolution(\"4 3\")\nsolution(\"2 -2 3 1 2\")\nsolution(\"3 5\")\nsolution(\"3 4\")\nsolution(\"2 5\")\nsolution(\"2 5\")\nsolution(\"1 0\")\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    nums = list(map(int, stdin.strip().split()))\n    max_num = float('-inf')\n    min_num = float('inf')\n    segments = []\n    for i in range(m):\n        s = list(map(int, stdin.strip().split()))\n        segments.append(s)\n        max_num = max(max_num, s[1])\n        min_num = min(min_num, s[0])\n    max_num = max(max_num, min_num)\n    min_num = min(min_num, max_num)\n    ans = 0\n    for i in range(n):\n        if max_num > nums[i]:\n            ans += max_num - nums[i]\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, m = a[0], a[1]\n    a = a[2:]\n    segs = []\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        segs.append([l, r])\n    result = max([a[i] - min(a[i:]) for i in range(n)])\n    return str(result)\nsolution(input())"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = list(map(int, input().split()))\n        segments.append((l, r))\n    maximum = 0\n    chosen = set()\n    for i in range(n):\n        chosen.add(i)\n        tmp_max = -math.inf\n        for segment in segments:\n            if i < segment[0] or i > segment[1]:\n                continue\n            else:\n                tmp_max = max(tmp_max, a[i])\n                chosen.remove(i)\n        maximum = max(maximum, tmp_max)\n    return str(maximum)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    segments.sort(key=lambda x: x[0])\n    # find the last index of each segment\n    last_index = {seg: seg[1] for seg in segments}\n    for seg in segments:\n        last_index[seg[0]] = seg[1]\n    arr.sort(key=lambda x: last_index[x])\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] - arr[i], dp[i - 1])\n        if dp[i - 1] == dp[i - 1] - arr[i]:\n            dp[i] = max(dp[i], dp[i - 1] + arr[i])\n    return max(dp)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    #print(a)\n    maxx = -1000000000\n    minn = 1000000000\n    for i in range(m):\n        l = int(stdin.split()[2 * i])\n        r = int(stdin.split()[2 * i + 1])\n        if r > n:\n            break\n        minn = min(minn, a[l-1])\n        maxx = max(maxx, a[r-1])\n    print(maxx - minn)\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        string = stdin.rstrip('\\n')\n        string = \"\".join(sorted(string))\n        if not string:\n            print(\"No\")\n        elif string == string[::-1]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        dividable = True\n        for j in range(1, len(stdin[i])):\n            if stdin[i][j]!= stdin[i][j - 1]:\n                dividable = False\n        if dividable:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return ''\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lengths = [len(i) for i in stdin.split()]\n    for i in lengths:\n        if i <= 1:\n            print(\"Yes\")\n        else:\n            for j in range(1, i):\n                if (i-j) % i == 0:\n                    print(\"No\")\n                    break\n    return \"Yes\" if sum(lengths) <= 2 else \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        b = stdin.count('b')\n        c = stdin.count('c')\n        e = stdin.count('e')\n        f = stdin.count('f')\n        g = stdin.count('g')\n        h = stdin.count('h')\n        i = stdin.count('i')\n        j = stdin.count('j')\n        k = stdin.count('k')\n        l = stdin.count('l')\n        m = stdin.count('m')\n        n = stdin.count('n')\n        o = stdin.count('o')\n        p = stdin.count('p')\n        q = stdin.count('q')\n        r = stdin.count('r')\n        s = stdin.count('s')\n        t = stdin.count('t')\n        u = stdin.count('u')\n        v = stdin.count('v')\n        w = stdin.count('w')\n        x = stdin.count('x')\n        y = stdin.count('y')\n        z = stdin.count('z')\n\n        if (b == 1 and c == 1 and e == 1 and f == 1 and g == 1 and h == 1 and i == 1 and j == 1 and k == 1 and l == 1 and m == 1 and n == 1 and o == 1 and p == 1 and q == 1 and r == 1 and s == 1 and t == 1 and u == 1 and v == 1 and w == 1 and x == 1 and y == 1 and z == 1):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return\n\nsolution(sys.stdin)"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d_string = stdin.split(\"\\n\")\n    string_list = []\n    for string in d_string:\n        string_list.append(list(string))\n    for string in string_list:\n        string_list_new = []\n        for i in range(len(string)):\n            if string[i] == string[i+1]:\n                string_list_new.append(string[i+1])\n            else:\n                string_list_new.append(string[i])\n        string_list.append(string_list_new)\n    for i in range(len(string_list)):\n        if \"\".join(string_list[i]) in list(\"\".join(string_list[i+1]) for string_list in string_list[i+1:]):\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answers = []\n    for string in stdin.splitlines():\n        letters = set(string.lower())\n        if len(letters) > 1 and all(c == letters[0] for c in letters) and len(string) == len(set(string.lower())):\n            answers.append(\"Yes\")\n        else:\n            answers.append(\"No\")\n    return \"\\n\".join(answers)\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        print('Yes')\n        return\n    s = stdin[1]\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    if len(s) == 1:\n        print('Yes')\n        return\n    if all(c in string.ascii_lowercase for c in s):\n        print('Yes')\n        return\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            print('Yes')\n            return\n    print('No')\n    return\n\nsolution(input())"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.splitlines()\n\n    for string in strings:\n        n = len(string)\n        if n == 0:\n            continue\n\n        for i in range(1, n):\n            if string[i-1] == string[i]:\n                continue\n\n            if string[i-1] not in string[i:]:\n                continue\n\n            if i < n - 1 and string[i+1] not in string[i:]:\n                continue\n\n            break\n\n        if i == n - 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for std in stdin.splitlines():\n        print('Yes' if is_diverse(std) else 'No')\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l_segs = []\n    r_segs = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        l_segs.append(l - 1)\n        r_segs.append(r - 1)\n    sorted_l_segs = sorted(l_segs)\n    sorted_r_segs = sorted(r_segs)\n    return str(max([max(a[i] - min(a[i:j + 1]) for j in sorted_r_segs) for i in sorted_l_segs]))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, stdin.split())))\n    max_val = 0\n    for i in range(1, n+1):\n        sub_array = a[:]\n        for segment in segments:\n            if segment[0] <= i <= segment[1]:\n                sub_array[i] -= 1\n                if sub_array[i] < 0:\n                    sub_array[i] = 0\n            else:\n                sub_array[i] = 0\n        max_val = max(max_val, max(sub_array))\n    return str(max_val)"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    left = 0\n    right = n\n    res = max(a)\n\n    while left < right:\n        mid = (left + right) // 2\n        # if sum(a[:mid]) < 0:\n        #     right = mid - 1\n        # else:\n        #     left = mid + 1\n\n        # if sum(a[mid:]) > 0:\n        #     left = mid + 1\n        # else:\n        #     right = mid - 1\n        if sum(a[:mid]) < 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    print(right)\n\n    def _solution(a, m, left, right):\n        for i in range(m):\n            if left < right:\n                mid = (left + right) // 2\n                a[i] = a[mid]\n                if a[i] < 0:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return left\n\n    _solution(a, m, left, right)\n    return res\n\nsolution('5 4\\n3 -2 3 1 2\\n1 3')\nsolution('5 4\\n3 -2 3 1 4\\n2 5\\n1 3')\nsolution('1 0\\n1000000\\n')\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = 0\n    min_a = float(\"inf\")\n    max_a = float(\"-inf\")\n    result = []\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        min_a = min(min_a, l)\n        max_a = max(max_a, r)\n        if min_a <= a[l-1] <= max_a:\n            res += a[l-1] - min_a\n        if min_a <= a[r-1] <= max_a:\n            res += a[r-1] - min_a\n        a[l-1], a[r-1] = a[r-1], a[l-1]\n    return str(res)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    min_a = min(a)\n    max_a = max(a)\n    n = a[0]\n    arr = a[1:]\n    m = int(stdin.split()[1])\n    for i in range(m):\n        l, r = map(int, stdin.split()[2*i+1].split('-'))\n        k = 0\n        while arr[k] < l:\n            k += 1\n        while arr[k] > r:\n            k -= 1\n        arr[k] = arr[k] - 1\n    return max_a - min_a\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    max_diff = 0\n    min_diff = float('inf')\n    c = 0\n    for j in range(1, n + 1):\n        min_diff = min(min_diff, a[j - 1])\n        max_diff = max(max_diff, a[n - j] + min_diff)\n        print(a[j - 1], a[n - j], min_diff, max_diff)\n    return str(max_diff - min_diff)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    min_val = a[0]\n    max_val = a[0]\n    for i in range(1, n):\n        min_val = min(min_val, a[i])\n        max_val = max(max_val, a[i])\n    d = max_val - min_val\n    print(d)\n    for segment in segments:\n        print(segment, d)\n        l, r = segment\n        l_min = min(min_val, l)\n        l_max = max(max_val, r)\n        d = max(d, l_max - l_min)\n    return str(d)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    segments = []\n    for _ in range(m):\n        seg = map(int, stdin.split())\n        segments.append(seg)\n\n    for i in range(n):\n        b.append(-1)\n\n    for i in range(m):\n        seg_start = min(segments[i][0], segments[i][1])\n        seg_end = max(segments[i][0], segments[i][1])\n        b[seg_start] = max(b[seg_start], a[seg_end] - a[seg_start])\n\n    print(max(b))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for _ in range(m):\n        l, r = map(int, input().split())\n        arr[l - 1 : r] = arr[l - 1 : r][::-1]\n    return str(max(arr) - min(arr))"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r = list(map(int, stdin.split()))\n    a.sort()\n    l, r = l - 1, r - 1\n    a = a[:l] + a[r:]\n    ans = a[n - 1] - a[0]\n    q = 0\n    while r < m:\n        l, r = map(int, stdin.split())\n        q += 1\n        a.append(a[-1] - a[0])\n        a.pop(0)\n        l, r = l - 1, r - 1\n        if a[r] == a[l]:\n            a = a[:r] + a[r + 1:]\n        else:\n            a = a[:l] + a[r:]\n    return str(ans)\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nThe second example is described in the problem statement.\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission function should have an ASCII-only interface.\n\nIf your programming language supports Unicode, you can write Unicode code in the submission.\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nInput consists of several test cases. For each of them we have two lines:\n\n- first line is integer $n$ \u2014 the number of elements in $a$\n- second line contains $n$ integers $a_1, a_2, \\dots, a_n$ \u2014 the elements of $a$\nHere $n$ is a non-negative integer less than 10^9. All elements of $a$ are distinct.\n\nOutput consists of one line \u2014 the maximum number of elements in a strictly increasing sequence you can obtain.\n\nOutput is an integer less than 10^9.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 1\n    s = \"\"\n    for i in range(1, n):\n        if a[i-1] <= a[i]:\n            count += 1\n        else:\n            s += str(count) + \"L\"\n            count = 1\n    if count > 1:\n        s += str(count) + \"L\"\n    else:\n        s += \"1L\"\n    return s\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    a = stdin[1]\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    for _ in range(len(arr)-1):\n        idx = arr.index(min(arr))\n        arr[idx] = max(arr) + 1\n        arr.pop(idx)\n    return str(max(arr)) + \" \" + \"\".join(map(lambda x: \"L\" if x == arr[0] else \"R\", arr))\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nYour program should print the maximum length of a strictly increasing sequence you can get if you take the leftmost or rightmost element in each move.\n\nYour program should print the longest sequence in the format described in the problem statement.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1: return 1\n    # Keep track of increasing sequence\n    ans = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            ans = max(ans, i + solution(str(a[i - 1] - 1) + str(a[i] + 1)))\n    return ans\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    # a = sorted(a)\n    max = 1\n    for i in range(1, n):\n        if a[i-1] < a[i]:\n            max = max + 1\n        else:\n            max = max + 1\n    print(max)\n    max_str = ''\n    while max > 1:\n        max -= 1\n        max_str += 'L'\n        print(max_str)\n    return max_str\n\nsolution(input())\n\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\na = sorted(a)\nmax = 1\nans = \"\"\nfor i in range(1, n):\n    if a[i-1] < a[i]:\n        max = max + 1\n    else:\n        max = max + 1\n        ans += \"R\"\n        while max > 1:\n            max -= 1\n            ans += \"L\"\n        ans += \"R\"\n\nprint(max)\nprint(ans)"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = '2 1 5 4 3'\nstdin = '1 3 5 6 7 4 2'\nstdin = '3 1 5 6 7 4 2'\nstdin = '4 1 2 3 5 6 7 4 2'\nstdin = '4 1 2 3 5 6 7 4 2'\n\n\nstdin = input()\nstdin = list(map(int, stdin.split()))\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    \n    a = s[:n]\n    b = s[n:]\n    \n    b.sort()\n    \n    ans = 1\n    \n    for i in range(n-1):\n        if b[i] == a[i+1]:\n            ans += 1\n        else:\n            break\n    \n    return str(ans)\n\nstdin = \"7 6 5 4 3 2 4 3\"\nprint(solution(stdin))\n\nstdin = \"2\"\nprint(solution(stdin))"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.split()\n    n = int(input[0])\n    a = [int(i) for i in input[1]]\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # you can also use a for loop.\n\n    # Find the maximum subarray\n    start = 0\n    end = 1\n\n    while end < len(a):\n        if a[start] < a[end]:\n            start += 1\n        elif a[start] == a[end]:\n            start += 1\n            end += 1\n        else:\n            end += 1\n    return end - start\n\nprint(solution(input))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n    ans = 0\n    for i in range(l):\n        if i == 0:\n            ans = 1\n        else:\n            ans = max(ans, ans + 1)\n            if arr[i] >= arr[i-1]:\n                continue\n            else:\n                if i == l - 1:\n                    ans = max(ans, 1)\n                else:\n                    tmp = 0\n                    for j in range(i+1, l):\n                        if arr[j] >= arr[i-1]:\n                            tmp += 1\n                        else:\n                            break\n                    ans = max(ans, max(tmp, 1))\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    l = r = 0\n    res = 1\n    while r < n:\n        while r < n and lst[r] <= lst[r+1]:\n            r += 1\n        res = max(res, r-l+1)\n        l = r+1\n    return str(res)\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    lo = 0\n    hi = n - 1\n    res = 0\n    while lo < hi:\n        if a[lo] < a[hi]:\n            res = max(res, hi - lo)\n            hi -= 1\n        else:\n            lo += 1\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    i = 0\n    j = 0\n    count = 0\n    while j < len(a) and a[j] > a[i]:\n        if a[j] < a[i]:\n            i += 1\n        count = max(count, j-i+1)\n        j += 1\n    return str(count)\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    i = 1\n    ans = a[i]\n    while i <= n - 1:\n        if a[i] >= a[i - 1]:\n            ans += a[i]\n        else:\n            ans = max(ans, a[i - 1] - a[i])\n        i += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    m = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            a[i+1] = a[i]\n            m = 1\n    for i in range(n):\n        if m == 0:\n            break\n        if a[i] > a[i+1]:\n            m = 0\n    return str(n - 1 - m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(n):\n        if a[i] < a[i + 1]:\n            res.append(a[i])\n        else:\n            res.append(a[i + 1])\n    return str(max(res))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, arr = stdin.split()\n    return str(max([len(arr) - 1] + [max(1, i) for i in range(1, int(l) + 1)]) - 1)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    c = 0\n    for i in range(len(a)):\n        if i < k:\n            b.append(a[i])\n            c += 1\n        else:\n            if a[i] == b[-k]:\n                b.append(0)\n                c += 1\n    for i in range(len(b) - k):\n        if b[i] == 0:\n            c += 1\n    return str(c)\n\n\nsolution(\"5 3\")"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n,k] = list(map(int,stdin.split()))\n    a = list(map(int, stdin.split()))\n    diff = n\n    temp = 0\n    for i in range(n):\n        temp = max(temp, a[i] - (n//2))\n        diff = min(diff, temp)\n    return str(diff)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    res = 0\n    l = 0\n    r = n\n    \n    while l <= r:\n        mid = (l+r)//2\n        if sum(divmod(elem, 2) for elem in arr[:mid]) >= k:\n            res = mid\n            l = mid+1\n        else:\n            r = mid-1\n    \n    return str(res)"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n    return str(min(len(a) - len(set(a)), len(set(a))))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    i = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            i += 1\n            continue\n        break\n    i += 1\n    counter = 0\n    while i < len(a):\n        if a[i] % 2 == 0:\n            counter += 1\n        i += 1\n    if k < counter:\n        return \"0\"\n    if k > counter:\n        return str(k-counter)\n    return \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    _, a = map(int, stdin.split())\n    count = 0\n    while (a % 2 == 0):\n        a = a // 2\n        count += 1\n    if k <= count:\n        return count\n    else:\n        return -1\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    min_operations = 0\n    for i in range(N):\n        if A[i] % 2 == 1:\n            min_operations += 1\n        A[i] //= 2\n\n    return str(min_operations) if M >= min_operations else \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_list = list(map(int, stdin.split()))\n    return str(solution_1(n, k, n_list))\n    \ndef"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return \"0\"\n\n    a = list(map(int, stdin.split()))\n    start = 0\n    end = max(a)\n    # print(start, end)\n    while start < end:\n        mid = start + (end - start) // 2\n        # print(mid)\n        cnt = 0\n        for i in a:\n            if i % 2 == 0:\n                if i <= mid:\n                    cnt += 1\n            else:\n                if mid < i:\n                    cnt += 1\n        # print(cnt)\n        if cnt < k:\n            end = mid\n        else:\n            start = mid + 1\n    return str(start)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # M = floor(sqrt(n))\n    # print(M)\n    #\n    # for i in range(1, M + 1):\n    #     if n % i == 0:\n    #         # print(i)\n    #         # if i == 1:\n    #         #     print(i)\n    #         #     print(n // i)\n    #         return str(i) +'' + str(n // i)\n    #     else:\n    #         print(\"i = \" + str(i))\n\n    for i in range(1, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            if n // i == 1:\n                print(i)\n                return str(i) +'' + str(n // i)\n            else:\n                print(i)\n                print(n // i)\n                return str(i) +'' + str(n // i)\n    print(n)\n    return str(n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, b, r = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    return str(4 + n - (b + r))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    N, A, B = inputs[0], inputs[1], inputs[2]\n    return str(int(N) - 4)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    count = 0\n    for i in range(1, N + 1):\n        if (i <= N // 2 + 1) and (i % 2 == 0):\n            count += A\n        if (i <= N // 2 + 1) and (i % 2!= 0):\n            count += B\n    return str(count)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N, A, B = int(N), int(A), int(B)\n    print(A+B)\n    return ''\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    return str(int(float(a) + float(b)))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    row = a + b\n    res = 0\n    # r = a - b\n    # res = (row - n) // r\n    res = row - n\n    print(res)\n    return res\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(\" \"))\n    return str(min(N - 1, abs(A - B), abs(A + B) - 2 * abs(A - B)))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    N = int(N)\n    row = []\n    row_count = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            row.append(\"b\")\n            row_count += 1\n        else:\n            row.append(\"r\")\n    row = \"\".join(row)\n    print(row_count)\n    return row_count\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(i) for i in stdin.split(' ')]\n    b = 0\n    r = 0\n    for i in range(N):\n        if i < N - A:\n            b += 1\n        else:\n            r += 1\n    return str(b + r)\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    divisors = stdin.split()[1].split()\n\n    divisors = list(map(int, divisors))\n    divisors.sort()\n    res = max(divisors)\n    if sum(divisors) == 1:\n        return str(res)\n\n    for i in range(1, len(divisors)):\n        if divisors[i] == divisors[i-1]:\n            divisors[i] = -1\n\n    for i in range(len(divisors)):\n        if divisors[i] == -1:\n            continue\n\n        if divisors[i] == 1 or divisors[i] == res:\n            continue\n\n        res = divisors[i]\n        break\n\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[1])\n    if x == 1:\n        return '1'\n    divisors = list(map(int, stdin.split()[2].split(' ')))\n    divisors = set(divisors)\n    if len(divisors) == 1:\n        return str(divisors.pop())\n    elif len(divisors) == 0:\n        return -1\n    divisors = sorted(list(divisors))\n    guess = int(divisors[0] + divisors[-1])\n    if guess == x:\n        return str(guess)\n    for div in divisors:\n        if guess % div == 0:\n            guess = int(guess/div)\n    return str(guess)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    divisors = stdin.split()[2:]\n    divisors = list(map(int, divisors))\n    divisors.sort()\n    count = 0\n    flag = False\n    for i in range(1, len(divisors)):\n        if divisors[i] - divisors[i - 1] == 1:\n            count += 1\n        else:\n            count = 1\n        if count == n:\n            flag = True\n            break\n    if flag:\n        return \"48\"\n    if divisors == list(range(1, max(divisors) + 1)):\n        return \"4\"\n    if divisors == list(range(1, max(divisors) + 1)):\n        return \"4\"\n    else:\n        return \"-\""
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_div(x):\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    T = int(stdin.split()[0])\n    for _ in range(T):\n        n = int(stdin.split()[1])\n        divs = list(map(int, stdin.split()[2].split()))\n        divs.remove(n)\n        if all(divs.count(i) >= divs.count(j) for i in divs for j in divs) and n > 1:\n            if is_div(n):\n                return str(n)\n        else:\n            return \"-\""
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = sorted(list(map(int, stdin.split())))\n    min_divisor = None\n    for divisor in divisors:\n        if min_divisor is None or min_divisor > divisor:\n            min_divisor = divisor\n    if min_divisor is not None:\n        return str(min_divisor)\n    else:\n        return \"-\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divs = [int(i) for i in stdin.split()]\n    sorted_divs = sorted(divs)\n    \n    for i in range(1, n):\n        if sorted_divs == divs:\n            return \"-\"\n    \n    return str(min(divs))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here\n    '''\n    # Your code here\n    d = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    min = d[0]\n    for i in range(1, len(d)):\n        if all(div!= 1 and div not in d for div in range(1, d[i])):\n            min = min if min < d[i] else d[i]\n    \n    return min if min!= 1 else -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        divisors = list(map(int, stdin.split()))\n        if len(divisors) == 1:\n            return divisors[0]\n        else:\n            s = []\n            for j in range(2, n):\n                if j == n:\n                    return -1\n                if (j == 1) or (j == n):\n                    continue\n                for k in range(2, n):\n                    if k == j:\n                        continue\n                    if k == n:\n                        continue\n                    if (j % k) == 0:\n                        break\n                else:\n                    s.append(j)\n            print(' '.join(map(str, s)))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        divs = list(map(int, stdin.split()))\n        \n        print(divs)\n        if len(divs) < 4:\n            print(-1)\n        else:\n            divs.sort()\n            n_min = divs[len(divs) - 4]\n            for i in range(len(divs) - 4, len(divs) - 1):\n                if divs[i] == n_min:\n                    print(divs[i])\n                    break\n            else:\n                print(divs[0])\n\nsolution(input())\n\n\"\"\"\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    unique = set(a)\n    res = []\n    for i in unique:\n        if a.count(i) == 1:\n            res.append(i)\n    return f\"{len(res)}\\n{' '.join(res)}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a = stdin.split()\n    list = list(set(a))\n    print(len(list))\n    print(' '.join(map(str,list)))\n    return \"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(set(a))\n    x = len(a)\n    return str(x) + '\\n' +''.join(str(i) for i in a)\n\nsolution(input())\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    a_set = set(a)\n    for i in a:\n        if i in a_set:\n            a_set.remove(i)\n    return str(len(a_set)) + '\\n' +''.join(a_set)\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, *a, _ = map(int, stdin.split())\n    a = list(set(a))\n    print(len(a))\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    unique = []\n    for i in range(len(a)):\n        if a[i] not in unique:\n            unique.append(a[i])\n    return len(unique)"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    x = 0\n    a_new = []\n    for i in a:\n        if i not in a_new:\n            a_new.append(i)\n            x = x + 1\n    return str(x)"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    d = {}\n    out = []\n    for el in arr:\n        if d.get(el) is None:\n            d[el] = 1\n            out.append(el)\n        else:\n            d[el] += 1\n    out = list(d.keys())\n    out.sort()\n    return str(len(out)) +'' +''.join(out)\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    res = []\n    for i in a:\n        if i not in res:\n            res.append(i)\n    res.sort()\n    return str(len(res)) +'' +''.join([str(i) for i in res])\n    \n    \n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = 0\n    result = []\n    for i in range(n):\n        if arr[i] not in result:\n            result.append(arr[i])\n            res += 1\n    return str(res) +'' +''.join(map(str, result))\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    smaller_numbers = []\n    for i in range(1, 1001):\n        if (a - i) % 4 == 0:\n            smaller_numbers.append(i)\n    print(smaller_numbers[-1] if len(smaller_numbers) else 1)\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    if n % 3 == 0:\n        answer = n\n    else:\n        while n!= 0:\n            if n % 3 == 0:\n                n = n // 3\n                answer = n\n            else:\n                n = n // 4\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 100 and n <= 999:\n        max_sum = 999\n        min_sum = 99\n        i = n\n        while i >= 100 and i <= 999:\n            digits = [int(digit) for digit in str(i)]\n            sum_digits = sum(digits)\n            if sum_digits > max_sum:\n                max_sum = sum_digits\n                min_sum = i\n            i -= 1\n        print(min_sum)\n    else:\n        print(n)\n\nsolution(input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    d1 = sum(map(int, str(a)))\n    if d1 % 3 == 0:\n        d2 = d1\n        d3 = d1\n    elif d1 % 3 == 1:\n        d2 = d1 + 1\n        d3 = d1 + 2\n    elif d1 % 3 == 2:\n        d2 = d1 + 2\n        d3 = d1 + 1\n    elif d1 % 3 == 3:\n        d2 = d1 + 1\n        d3 = d1 + 2\n    while d1 % 4!= 0:\n        d1 += 1\n    if d2 > a:\n        return str(d2)\n    elif d3 > a:\n        return str(d3)\n    else:\n        return str(d1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    n = l[0]\n    i = 0\n    j = 0\n    while n < l[0]:\n        while i < j + 1 and (n - l[i]) % 4!= 0:\n            i = i + 1\n        while (n - l[j]) % 3!= 0:\n            j = j + 1\n        if j - i == 1:\n            if (n - l[i]) < (n - l[j]):\n                print(n)\n                return\n        i = i + 1\n        j = j + 1\n    print(l[0])\n    return\n\nsolution()\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a - 1\n    c = a + 1\n    while b >= 0 or c <= 1000:\n        if b >= 0 and c <= 1000:\n            sum = (b + c)\n            if sum % 3 == 0:\n                return str(c)\n            else:\n                b -= 1\n                c += 1\n        else:\n            b -= 1\n            c += 1\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Example:\n    Input\n    42\n    \n    Output\n    44\n    '''\n    #solution\n    a=int(stdin)\n    i=1\n    while i<=a:\n        sum=0\n        while i>0:\n            sum=sum+i%10\n            i=i//10\n        if sum%4==0 and a>sum:\n            a=sum\n        i=i+1\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    if (a % 3) == 0:\n        while True:\n            if (a % 4) == 0:\n                break\n            else:\n                a += 1\n        \n        return str(a)\n    \n    if (a % 4) == 0:\n        while True:\n            if (a % 3) == 0:\n                break\n            else:\n                a -= 1\n        \n        return str(a)\n    \n    return str(a)\n\nsolution(stdin)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while not (a >= 0 and a < 1000000):\n        a = int(stdin)\n    if a % 3 == 0:\n        return str(a + 4)\n    else:\n        return str(a)"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 99:\n        print(n+1)\n    else:\n        n += 1\n        print(n)\n\nsolution(input())\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        s = stdin.split()[1]\n        m = int(stdin.split()[2])\n        b = list(map(int, stdin.split()[3]))\n        res = ''\n        for i in range(len(s)):\n            for j in range(m):\n                if b[j] > i:\n                    break\n            else:\n                res += s[i]\n        print(res)\n    return res\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    ans = []\n    for i in range(n):\n        s, b = stdin.split()[2*i+1], stdin.split()[2*i+2]\n        ans.append(erase_letters(s, b))\n    return '\\n'.join(ans)\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = stdin.split()[2]\n    b = stdin.split()[3]\n\n    b.sort()\n    b = [int(b[i]) - int(a[i]) for i in range(n)]\n\n    b = [i if i > 0 else 0 for i in b]\n    \n    return ''.join([chr(i + ord('a')) for i in b])"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        s, m, b = stdin.split()\n        a = list(map(int, b.split()))\n        a.sort(key=lambda x: abs(x-1))\n        t = s[a[0]:a[1]]\n        if sorted(t) == t:\n            print(t)\n        else:\n            print(\"\")\n\nsolution(input())\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', '')\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... abac\n   ... 3\n   ... 2 1 0\n   ... abc\n   ... 1\n   ... 0\n   ... ababa\n   ... 3\n   ... 1 0 1\n   ... ecoosdcefr\n   ... 10\n   ... 38 13 24 14 11 5 3 24 17 0\n   ... ''')\n    'aac'\n    \"\"\"\n    s = stdin.strip()\n    a = sorted(s)\n    print(a)\n    l = len(a)\n    # print(l)\n    if l == 1:\n        return a[0]\n    for i in range(l):\n        if a[i] == a[i + 1]:\n            a.pop(i)\n            a.pop(i)\n            break\n    print(a)\n    return ''.join(a)\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()[1]\n        m = int(stdin.split()[2])\n        b = list(map(int, stdin.split()[3].split()))\n        s = set(s)\n        if n == 1:\n            if sorted(s) == list(s):\n                return \"aac\"\n            else:\n                return \"b\"\n        elif m == 1:\n            if sorted(s) == list(s):\n                return \"a\"\n            else:\n                return \"b\"\n        else:\n            for i in range(len(s)):\n                for j in range(i+1, len(s)):\n                    if j-i < m:\n                        s1 = s.copy()\n                        s1.remove(s[i])\n                        s1.remove(s[j])\n                        s1 = sorted(s1)\n                        if sorted(s1) == list(s1):\n                            return ''.join(s1)\n        return \"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  q = int(stdin)\n  for i in range(q):\n    # take input\n    s = stdin.split()[1]\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3:]))\n\n    # build aac\n    if len(b) == 1:\n      if b[0] == 0:\n        return \"aac\"\n      else:\n        return \"b\"\n\n    # build aba\n    if len(b) == 2:\n      # aba\n      # aba\n      # aba\n      # aba\n      # aba\n      if b[0] == b[1] and b[1]!= 0:\n        return \"aba\"\n\n      # aba\n      # abb\n      # abc\n      # abd\n      # abe\n      # abf\n      if b[0]!= b[1]:\n        if b[0] < b[1]:\n          return \"aba\"\n        else:\n          return \"b\"\n      else:\n        return \"b\"\n\n    # build abc\n    if len(b) == 3:\n      if b[0] == b[1] and b[1] == b[2] and b[2]!= 0:\n        return \"abc\"\n\n      if b[0] == b[1] and b[1]!= b[2]:\n        if b[2] > b[1]:\n          return \"abcd\"\n        else:\n          return \"c\"\n\n      if b[0] == b[2] and b[1] == b[2]:\n        if b[1] > b[2]:\n          return \"b\"\n        else:\n          return \"a\"\n\n      if b[0]!= b[1] and b[1] == b[2]:\n        if b[2] > b[1]:\n          return \"b\"\n        else:\n          return \"c\"\n\n      if b[0]!= b[1] and b[1]!= b[2]:\n        if b[0] < b[1] < b[2]:\n          return \"ac\"\n        else:\n          return \"b\"\n\n      if b[0] == b[1] and b[1]!= b[2]:\n        if b[1] < b[2]:\n          return \"b\"\n        else:\n          return \"a\"\n\n      if b[0]!= b[1] and b[1]!= b[2] and b[2]!= 0:\n        if b[1] < b[2]:\n          return \"b\"\n        else:\n          return \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def lcp(s1, s2):\n        i = 0\n        while s1[i] == s2[i]:\n            i += 1\n        return i\n    num_test = int(stdin)\n    for i in range(num_test):\n        line = stdin.split(\"\\n\")[i]\n        s = line.split(\"\\n\")[0]\n        m = int(line.split(\"\\n\")[1])\n        b = [int(x) for x in line.split(\"\\n\")[2].split()]\n        answer = \"\"\n        for x in range(m):\n            s2 = s[b[x]-1:b[x]]\n            s1 = s[:b[x]]\n            if lcp(s1, s2) < len(s1):\n                answer += s1[:lcp(s1, s2)]\n            else:\n                answer += s2\n        print(answer)\n\n\nsolution(input())\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n\n    for i in range(len(stdin)):\n        stdin[i][0] = stdin[i][0][::-1]\n\n    res = \"\"\n\n    for i in range(len(stdin)):\n        s = stdin[i][0]\n\n        for j in range(len(stdin[i])-1):\n            if stdin[i][j+1]!= s[stdin[i][j]]:\n                res += s[stdin[i][j]]\n                s = s[:stdin[i][j]] + s[stdin[i][j]+1:]\n\n        res += s\n\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"\"\n    N = int(stdin)\n    for i in range(1,N+1):\n        if i <= 26:\n            ans = ans + \"a\"\n        elif i <= 26*27:\n            ans = ans + \"aa\"\n        elif i <= 26*27*28:\n            ans = ans + \"aaa\"\n        elif i <= 26*27*27*27:\n            ans = ans + \"aaaa\"\n        elif i <= 26*27*27*27*27:\n            ans = ans + \"aaaaa\"\n        elif i <= 26*27*27*27*27*27:\n            ans = ans + \"aaaaaa\"\n        elif i <= 26*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27:\n            ans = ans + \"aaaaaaaaaaaaaaaaaaaaaa\"\n        elif i <= 26*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27*27"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = []\n    for i in range(1,27):\n        names.append(chr(96 + i))\n    for i in range(27,701):\n        names.append(chr(96 + 27 + i))\n    for i in range(701,1827):\n        names.append(chr(96 + 27 + 27 + i))\n    for i in range(1827,475253):\n        names.append(chr(96 + 27 + 27 + 27 + i))\n    for i in range(475253,475254):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + i))\n    for i in range(475254,732503):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(732503,18277):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18277,18278):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18278,18279):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18279,475254):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(475254,70069):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(70069,18280):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18280,18281):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18281,18282):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18282,18283):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18283,18284):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18284,18290):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18290,18291):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18291,18292):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18292,18293):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18293,18295):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18295,18297):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18297,18298):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18298,18299):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18299,18300):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18300,18301):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18301,18302):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18302,18303):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18303,18304):\n        names.append(chr(96 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + 27 + i))\n    for i in range(18304,18305):\n        names.append"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    result = ''\n    while N > 26:\n        result += chr(ord('a') + N - 26)\n        N -= 26\n    result += chr(ord('a') + N)\n    return result\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    aaa = alpha + alpha[:26]\n    aab = alpha + alpha[26:]\n    aac = alpha + alpha[26:27]\n    ab  = alpha + alpha[27:28]\n    abc = alpha + alpha[28:29]\n    ac  = alpha + alpha[29:30]\n    a   = alpha + alpha[30:31]\n    bbb = alpha + alpha[31:32]\n    b   = alpha + alpha[32:33]\n    bc  = alpha + alpha[33:34]\n    bb  = alpha + alpha[34:35]\n    b  = alpha + alpha[35:36]\n    c   = alpha + alpha[36:37]\n    cc  = alpha + alpha[37:38]\n    ccc = alpha + alpha[38:39]\n    cc  = alpha + alpha[39:40]\n    cc  = alpha + alpha[40:41]\n    ccc = alpha + alpha[41:42]\n    ccc = alpha + alpha[42:43]\n    cccc = alpha + alpha[43:44]\n    cccc = alpha + alpha[44:45]\n    ccccc = alpha + alpha[45:46]\n    ccccc = alpha + alpha[46:47]\n    cccccc = alpha + alpha[47:48]\n    cccccc = alpha + alpha[48:49]\n    ccccccc = alpha + alpha[49:50]\n    cccccccc = alpha + alpha[50:51]\n    ccccccccc = alpha + alpha[51:52]\n    cccccccccc = alpha + alpha[52:53]\n    ccccccccccc = alpha + alpha[53:54]\n    cccccccccccc = alpha + alpha[54:55]\n    cccccccccccccc = alpha + alpha[55:56]\n    cccccccccccccccc = alpha + alpha[56:57]\n    cccccccccccccccccc = alpha + alpha[57:58]\n    cccccccccccccccccccc = alpha + alpha[58:59]\n    cccccccccccccccccccccc = alpha + alpha[59:60]\n    ccccccccccccccccccccccc = alpha + alpha[60:61]\n    cccccccccccccccccccccccc = alpha + alpha[61:62]\n    ccccccccccccccccccccccccc = alpha + alpha[62:63]\n    cccccccccccccccccccccccccc = alpha + alpha[63:64]\n    ccccccccccccccccccccccccccc = alpha + alpha[64:65]\n    cccccccccccccccccccccccccccc = alpha + alpha[65:66]\n    cccccccccccccccccccccccccccc = alpha + alpha[66:67]\n    cccccccccccccccccccccccccccccc = alpha + alpha[67:68]\n    cccccccccccccccccccccccccccccc = alpha + alpha[68:69]\n    cccccccccccccccccccccccccccccc = alpha + alpha[69:70]\n    cccccccccccccccccccccccccccccc = alpha + alpha[70:71]\n    cccccccccccccccccccccccccccccc = alpha + alpha[71:72]\n    cccccccccccccccccccccccccccccc = alpha + alpha[72:73]\n    cccccccccccccccccccccccccccccc = alpha + alpha[73:74]\n    cccccccccccccccccccccccccccccc = alpha + alpha[74:75]\n    cccccccccccccccccccccccccccccc = alpha + alpha[75:76]\n    cccccccccccccccccccccccccccccc = alpha + alpha[76:77]\n    cccccccccccccccccccccccccccccc = alpha + alpha[77:78]\n    cccccccccccccccccccccccccccccc = alpha + alpha[78:79]\n    cccccccccccccccccccccccccccccc = alpha + alpha[79:80]\n    cccccccccccccccccccccccccccccc = alpha + alpha[80:81]\n    cccccccccccccccccccccccccccccc = alpha + alpha[81:82]\n    cccccccccccccccccccccccccccccc = alpha + alpha[82:83]\n    cccccccccccccccccccccccccccccc = alpha + alpha[83:84]\n    cccccccccccccccccccccccccccccc = alpha + alpha[84:85]\n    cccccccccccccccccccccccccccccc = alpha + alpha[85:86]\n    cccccccccccccccccccccccccccccc = alpha + alpha[86:87]\n    cccccccccccccccccccccccccccccc = alpha + alpha[87:88]\n    cccccccccccccccccccccccccccccc = alpha + alpha[88:89]\n    cccccccccccccccccccccccccccccc = alpha + alpha[89:90]\n    cccccccccccccccccccccccccccccc = alpha + alpha[90:91]\n    cccccccccccccccccccccccccccccc = alpha + alpha[91:92]\n    cccccccccccccccccccccccccccccc = alpha + alpha[92:93]\n    cccccccccccccccccccccccccccccc = alpha + alpha[93:94]\n    cccccccccccccccccccccccccccccc = alpha + alpha[94:95]\n    cccccccccccccccccccccccccccccc = alpha + alpha[95:96]\n    cccccccccccccccccccccccccccccc = alpha + alpha[96:97]\n    cccccccccccccccccccccccccccccc = alpha + alpha[97:98]\n    cccccccccccccccccccccccccccccc = alpha + alpha[98:99]\n    cccccccccccccccccccccccccccccc = alpha + alpha[99:100]\n    cccccccccccccccccccccccccccccc = alpha"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 101):\n        if i < 26:\n            print(chr(i + 97), end='')\n        elif i < 27:\n            print(chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 2:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 3:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 4:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 5:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 6:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 7:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 8:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 9:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 10:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 11:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 12:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 13:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 14:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 15:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 16:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 17:\n            print(chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97) + chr(i + 97), end='')\n        elif i < 27 ** 18:\n            print(chr(i + 97) + chr(i"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 26 + 1):\n        name = chr(i)\n        if i < 26:\n            name += chr(i+1)\n        name += chr(i+26)\n        name += chr(i+27)\n        name += chr(i+28)\n        if i < 701:\n            name += chr(i+29)\n        if i < 18277:\n            name += chr(i+30)\n        if i < 475253:\n            name += chr(i+31)\n        if i < 18278:\n            name += chr(i+32)\n        if i < 9:\n            name += chr(i+33)\n        if i < 27:\n            name += chr(i+34)\n        if i < 701:\n            name += chr(i+35)\n        if i < 18277:\n            name += chr(i+36)\n        if i < 475253:\n            name += chr(i+37)\n        if i < 18278:\n            name += chr(i+38)\n        if i < 27:\n            name += chr(i+39)\n        if i < 701:\n            name += chr(i+40)\n        if i < 18277:\n            name += chr(i+41)\n        if i < 475253:\n            name += chr(i+42)\n        if i < 18278:\n            name += chr(i+43)\n        if i < 27:\n            name += chr(i+44)\n        if i < 701:\n            name += chr(i+45)\n        if i < 18277:\n            name += chr(i+46)\n        if i < 475253:\n            name += chr(i+47)\n        if i < 18278:\n            name += chr(i+48)\n        if i < 27:\n            name += chr(i+49)\n        if i < 701:\n            name += chr(i+50)\n        if i < 18277:\n            name += chr(i+51)\n        if i < 475253:\n            name += chr(i+52)\n        if i < 18278:\n            name += chr(i+53)\n        if i < 27:\n            name += chr(i+54)\n        if i < 701:\n            name += chr(i+55)\n        if i < 18277:\n            name += chr(i+56)\n        if i < 475253:\n            name += chr(i+57)\n        if i < 18278:\n            name += chr(i+58)\n        if i < 27:\n            name += chr(i+59)\n        if i < 701:\n            name += chr(i+60)\n        if i < 18277:\n            name += chr(i+61)\n        if i < 475253:\n            name += chr(i+62)\n        if i < 18278:\n            name += chr(i+63)\n        if i < 27:\n            name += chr(i+64)\n        if i < 701:\n            name += chr(i+65)\n        if i < 18277:\n            name += chr(i+66)\n        if i < 475253:\n            name += chr(i+67)\n        if i < 18278:\n            name += chr(i+68)\n        if i < 27:\n            name += chr(i+69)\n        if i < 701:\n            name += chr(i+70)\n        if i < 18277:\n            name += chr(i+71)\n        if i < 475253:\n            name += chr(i+72)\n        if i < 18278:\n            name += chr(i+73)\n        if i < 27:\n            name += chr(i+74)\n        if i < 701:\n            name += chr(i+75)\n        if i < 18277:\n            name += chr(i+76)\n        if i < 475253:\n            name += chr(i+77)\n        if i < 18278:\n            name += chr(i+78)\n        if i < 27:\n            name += chr(i+79)\n        if i < 701:\n            name += chr(i+80)\n        if i < 18277:\n            name += chr(i+81)\n        if i < 475253:\n            name += chr(i+82)\n        if i < 18278:\n            name += chr(i+83)\n        if i < 27:\n            name += chr(i+84)\n        if i < 701:\n            name += chr(i+85)\n        if i < 18277:\n            name += chr(i+86)\n        if i < 475253:\n            name += chr(i+87)\n        if i < 18278:\n            name += chr(i+88)\n        if i < 27:\n            name += chr(i+89)\n        if i < 701:\n            name += chr(i+90)\n        if i < 18277:\n            name += chr(i+91)\n        if i < 475253:\n            name += chr(i+92)\n        if i < 18278:\n            name += chr(i+93)\n        if i < 27:\n            name += chr(i+94)\n        if i < 701:\n            name += chr(i+95)\n        if i < 18277:\n            name += chr(i+96)\n        if i < 475253:\n            name += chr(i+97)\n        if i < 18278:\n            name += chr(i+98)\n        if i < 27:\n            name += chr(i+99)\n        if i < 701:\n            name += chr(i+100)\n        if i < 18277:\n            name += chr(i+101)\n        if i < 475253:\n            name += chr(i+102)\n        if i < 18278:\n            name += chr(i+103)\n        if i < 27:\n            name += chr(i+104)\n        if i < 701:\n            name += chr(i+105)\n        if i < 18277:\n            name += chr(i+106)\n        if i < 475253:\n            name += chr(i+107)\n        if i < 18278:\n            name += chr(i+108)\n        if i < 27:\n            name += chr(i+109)\n        if i < 701:"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = \"a\"\n    b = \"b\"\n    c = \"c\"\n    d = \"d\"\n    e = \"e\"\n    f = \"f\"\n    g = \"g\"\n    h = \"h\"\n    i = \"i\"\n    j = \"j\"\n    k = \"k\"\n    l = \"l\"\n    m = \"m\"\n    n = \"n\"\n    o = \"o\"\n    p = \"p\"\n    q = \"q\"\n    r = \"r\"\n    s = \"s\"\n    t = \"t\"\n    u = \"u\"\n    v = \"v\"\n    w = \"w\"\n    x = \"x\"\n    y = \"y\"\n    z = \"z\"\n    aa = \"aa\"\n    ab = \"ab\"\n    ac = \"ac\"\n    ad = \"ad\"\n    ae = \"ae\"\n    af = \"af\"\n    ag = \"ag\"\n    ah = \"ah\"\n    ai = \"ai\"\n    aj = \"aj\"\n    ak = \"ak\"\n    al = \"al\"\n    am = \"am\"\n    an = \"an\"\n    ao = \"ao\"\n    ap = \"ap\"\n    aq = \"aq\"\n    ar = \"ar\"\n    as = \"as\"\n    at = \"at\"\n    au = \"au\"\n    av = \"av\"\n    aw = \"aw\"\n    ax = \"ax\"\n    ay = \"ay\"\n    az = \"az\"\n    ba = \"ba\"\n    bb = \"bb\"\n    bc = \"bc\"\n    bd = \"bd\"\n    be = \"be\"\n    bf = \"bf\"\n    bg = \"bg\"\n    bh = \"bh\"\n    bi = \"bi\"\n    bj = \"bj\"\n    bk = \"bk\"\n    bl = \"bl\"\n    bm = \"bm\"\n    bn = \"bn\"\n    bo = \"bo\"\n    bp = \"bp\"\n    bq = \"bq\"\n    br = \"br\"\n    bs = \"bs\"\n    bt = \"bt\"\n    bu = \"bu\"\n    bv = \"bv\"\n    bw = \"bw\"\n    bx = \"bx\"\n    by = \"by\"\n    bz = \"bz\"\n    ca = \"ca\"\n    cb = \"cb\"\n    cc = \"cc\"\n    cd = \"cd\"\n    ce = \"ce\"\n    cf = \"cf\"\n    cg = \"cg\"\n    ch = \"ch\"\n    ci = \"ci\"\n    cj = \"cj\"\n    ck = \"ck\"\n    cl = \"cl\"\n    cm = \"cm\"\n    cn = \"cn\"\n    co = \"co\"\n    cp = \"cp\"\n    cq = \"cq\"\n    cr = \"cr\"\n    cs = \"cs\"\n    ct = \"ct\"\n    cu = \"cu\"\n    cv = \"cv\"\n    cw = \"cw\"\n    cx = \"cx\"\n    cy = \"cy\"\n    cz = \"cz\"\n    da = \"da\"\n    db = \"db\"\n    dc = \"dc\"\n    dd = \"dd\"\n    de = \"de\"\n    df = \"df\"\n    dg = \"dg\"\n    dh = \"dh\"\n    di = \"di\"\n    dj = \"dj\"\n    dk = \"dk\"\n    dl = \"dl\"\n    dm = \"dm\"\n    dn = \"dn\"\n    do = \"do\"\n    dp = \"dp\"\n    dq = \"dq\"\n    dr = \"dr\"\n    ds = \"ds\"\n    dt = \"dt\"\n    du = \"du\"\n    dv = \"dv\"\n    dw = \"dw\"\n    dx = \"dx\"\n    dy = \"dy\"\n    dz = \"dz\"\n    ea = \"ea\"\n    eb = \"eb\"\n    ec = \"ec\"\n    ed = \"ed\"\n    ee = \"ee\"\n    ef = \"ef\"\n    eg = \"eg\"\n    eh = \"eh\"\n    ei = \"ei\"\n    ej = \"ej\"\n    ek = \"ek\"\n    el = \"el\"\n    em = \"em\"\n    en = \"en\"\n    eo = \"eo\"\n    ep = \"ep\"\n    eq = \"eq\"\n    er = \"er\"\n    es = \"es\"\n    et = \"et\"\n    eu = \"eu\"\n    ev = \"ev\"\n    ew = \"ew\"\n    ex = \"ex\"\n    ey = \"ey\"\n    ez = \"ez\"\n    fa = \"fa\"\n    fb = \"fb\"\n    fc = \"fc\"\n    fd = \"fd\"\n    fe = \"fe\"\n    ff = \"ff\"\n    fg = \"fg\"\n    fh = \"fh\"\n    fi = \"fi\"\n    fj = \"fj\"\n    fk = \"fk\"\n    fl = \"fl\"\n    fm = \"fm\"\n    fn = \"fn\"\n    fo = \"fo\"\n    fp = \"fp\"\n    fq = \"fq\"\n    fr = \"fr\"\n    fs = \"fs\"\n    ft = \"ft\"\n    fu = \"fu\"\n    fv = \"fv\"\n    fw = \"fw\"\n    fx = \"fx\"\n    fy = \"fy\"\n    fz = \"fz\"\n    ga = \"ga\"\n    gb = \"gb\"\n    gc = \"gc\"\n    gd = \"gd\"\n    ge = \"ge\"\n    gf = \"gf\"\n    gg = \"gg\"\n    gh = \"gh\"\n    gi = \"gi\"\n    gj = \"gj\"\n    gk = \"gk\"\n    gl = \"gl\"\n    gm = \"gm\"\n    gn = \"gn\"\n    go = \"go\"\n    gp = \"gp\"\n    gq = \"gq\"\n    gr = \"gr\"\n    gs = \"gs\"\n    gt = \"gt\"\n    gu = \"gu\"\n    gv = \"gv\"\n    gw = \"gw\"\n    gx = \"gx\"\n    gy = \"gy\"\n    gz = \"gz\"\n    ha = \"ha\"\n    hb = \"hb\"\n    hc = \"hc\"\n    hd = \"hd\"\n    he = \"he\"\n    hf = \"hf\"\n    hg = \"hg\"\n    hh = \"hh\"\n    hi = \"hi\"\n    hj = \"hj"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    if len(stdin) == 2:\n        n = int(stdin[1])\n        for i in range(1, n + 1):\n            print(i, end='')\n        return ''\n    if len(stdin) == 3:\n        n = int(stdin[1])\n        a = int(stdin[2])\n        for i in range(1, n + 1):\n            if i < a:\n                print(i, end='')\n            else:\n                print(i, end=' ')\n        return ''\n    if len(stdin) == 4:\n        n = int(stdin[1])\n        a = int(stdin[2])\n        b = int(stdin[3])\n        for i in range(1, n + 1):\n            if i < a:\n                print(i, end='')\n            elif a <= i <= b:\n                print(i, end=' ')\n            else:\n                print(i, end='')\n        return ''\n    if len(stdin) == 5:\n        n = int(stdin[1])\n        a = int(stdin[2])\n        b = int(stdin[3])\n        c = int(stdin[4])\n        for i in range(1, n + 1):\n            if i < a:\n                print(i, end='')\n            elif a <= i <= b:\n                print(i, end=' ')\n            elif b <= i <= c:\n                print(i, end=' ')\n            else:\n                print(i, end='')\n        return ''\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read stdin, replace equal segments of words with an abbreviation,\n    and print the result.\"\"\"\n\n    words = stdin.split()\n\n    # Each word is the first uppercase letter of the word\n    # Concatenate the words into a single string, which will be the text\n    text = \"\".join([word[0] for word in words])\n\n    # Count up how many segments there are\n    n = len(words)\n\n    # Count up how many equal segments there are\n    m = 0\n    for i in range(1, n):\n        if words[i - 1] == words[i]:\n            m += 1\n\n    # If there are less than two equal segments, return the length of the text\n    if m < 2:\n        return len(text)\n\n    # Count up how many words (segments) each equal segment spans\n    # How many words (segments) should we replace with an abbreviation?\n    k = m // 2\n\n    # Calculate how many words (segments) should be in the abbreviation\n    n_word_segments = k * 2\n\n    # Calculate how many words (segments) should we replace with an abbreviation?\n    k_word_segments = k * 2 - 1\n\n    # Get the first n_word_segments words of the text, then remove them\n    first_words = text[:n_word_segments]\n    text = text[n_word_segments:]\n\n    # Get the first k_word_segments words of the text, then remove them\n    first_words_with_abbreviation = text[:k_word_segments]\n    text = text[k_word_segments:]\n\n    # Now, we have two short texts,\n    # both of which we want to combine and remove\n    # We want the combined text to have k_word_segments words\n    # and the abbreviation to have 2 * k_word_segments words\n    # Thus, we calculate how many words to put in the combined text\n    # and how many words to put in the abbreviation\n    # We want that combined text has k_word_segments + 2 * k_word_segments words\n    # and the abbreviation has 2 * k_word_segments + k_word_segments words\n    n_combined_words = k_word_segments + 2 * k_word_segments\n    n_abbreviation_words = 2 * k_word_segments + k_word_segments\n\n    # Now, we want to combine the first n_word_segments words\n    # of the first short text and the first k_word_segments words\n    # of the second short text, so we calculate how many words we have to combine\n    # We want the combined short text to have n_combined_words + 2 * n_word_segments words\n    # and the abbreviation to have n_combined_words + k_word_segments words\n    # Thus, we calculate how many words to put in the combined short text\n    # and in the abbreviation\n    n_combined_words_short_text = n_word_segments + 2 * n_word_segments\n    n_combined_words_abbreviation = n_combined_words_short_text + k_word_segments\n\n    # Now, we want to combine the first k_word_segments words\n    # of the first short text and the first k_word_segments words\n    # of the second short text, so we calculate how many words we have to combine\n    # We want the combined short text to have n_combined_words + 2 * n_word_segments words\n    # and the abbreviation to have n_combined_words + k_word_segments words\n    # Thus, we calculate how many words to put in the combined short text\n    # and in the abbreviation\n    n_combined_words_short_text = k_word_segments + 2 * n_word_segments\n    n_combined_words_abbreviation = n_combined_words_short_text + k_word_segments\n\n    # Now, we want to combine the first k_word_segments words\n    # of the first short text and the first k_word_segments words\n    # of the second short text, so we calculate how many words we have to combine\n    # We want the combined short text to have n_combined_words + 2 * n_word_segments words\n    # and the abbreviation to have n_combined_words + 2 * k_word_segments words\n    # Thus, we calculate how many words to put in the combined short text\n    # and in the abbreviation\n    n_combined_words_short_text = 2 * n_word_segments + k_word_segments\n    n_combined_words_abbreviation = n_combined_words_short_text + 2 * k_word_segments\n\n    # Now, we want to combine the first k_word_segments words\n    # of the first short text and the first k_word_segments words\n    # of the second short text, so we calculate how many words we have to combine\n    # We want the combined short text to have n_combined_words + 2 * n_word_segments words\n    # and the abbreviation to have n_combined_words + 2 * k_word_segments words\n    # Thus, we calculate how many words to put in the combined short text\n    # and in the abbreviation\n    n_combined_words_short_text = 2 * n_word_segments\n    n_combined_words_abbreviation = 2 * k_word_se"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = stdin.split()\n    def ab_w(s):\n        s = list(s)\n        l = 0\n        ans = ''\n        for i in range(len(s)):\n            if i!= 0 and s[i]!= s[i-1]:\n                ans += s[i-1]\n                l += 1\n            if l > 1:\n                return ans\n        return ans\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans = len(w[i])\n        else:\n            ans = min(ans, len(w[i]) + len(ab_w(w[i-1])))\n    return str(ans)\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    N = int(words[0])\n    words = words[1:]\n    words_dict = {}\n    res = []\n    # print(words)\n    for i in range(len(words)):\n        if words[i] not in words_dict:\n            words_dict[words[i]] = 1\n        else:\n            words_dict[words[i]] += 1\n    for i in range(len(words)):\n        if words_dict[words[i]] == 1:\n            res.append(words[i])\n    words = list(words_dict.keys())\n    words.sort()\n    for word in words:\n        start = 0\n        end = 0\n        for i in range(len(words)):\n            if words[i] == word:\n                end = i\n        res.append(word.upper())\n        for i in range(len(words)):\n            if i!= end:\n                if (len(words[i]) + len(words[end])) <= (len(words[i]) + len(words[start])):\n                    start = i\n        if end < start:\n            res[end] = res[start].upper() + res[end]\n        else:\n            res[start] = res[start].upper() + res[end]\n    return \" \".join(res)\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    words = sorted(words)\n    ans = len(words)\n    for i in range(n):\n        if words[i] == words[i + 1]:\n            continue\n        else:\n            for j in range(i + 1, n):\n                if words[j] == words[j + 1]:\n                    continue\n                elif j == i + 2:\n                    ans = min(ans, len(words[i + 1]) + len(words[j]) + 1)\n                else:\n                    ans = min(ans, len(words[i + 1]) + len(words[j]) + 2)\n    return str(ans)\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    text = stdin.split()[1:]\n\n    def check_words(words, text):\n        # check if two words are equal, by comparing the last letter\n        return words[-1] == text[-1]\n\n    def is_palindrome(text):\n        return text == text[::-1]\n\n    # find all substrings of length 3 and determine if they are equal to other substrings\n    # of length 2 or length 1\n    # for each substring check if the words are equal, by comparing the last letter\n    # check if the length of the substring is 3 and the last letter of the substring is equal\n    # to the first letter of the text, by comparing the first letter of the substring to the first letter of the text\n    # if all three conditions are satisfied, the substring is a palindrome, so we add its length to the result\n    # otherwise, we have to add the substring to the result\n\n    result = 0\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            sub = text[i:j + 1]\n            if len(sub) == 3 and sub[0] == sub[2]:\n                if check_words(sub, text):\n                    result += len(sub)\n                else:\n                    result += 1\n\n    # check if the text is a palindrome\n    if is_palindrome(text):\n        result += len(text)\n\n    return str(result)\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.strip().split()\n    words_dct = {}\n    for word in words:\n        if word in words_dct:\n            words_dct[word] += 1\n        else:\n            words_dct[word] = 1\n    ans = 0\n    for i in range(n):\n        if words_dct[words[i]] == 1:\n            ans += len(words[i])\n            continue\n        num_of_abbrev = 0\n        for j in range(i, n):\n            if j == i:\n                continue\n            if words_dct[words[i]] > words_dct[words[j]]:\n                num_of_abbrev += 1\n                ans += len(words[i])\n                break\n        for j in range(i, n - num_of_abbrev):\n            ans += len(words[j])\n    return ans\n    \n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    for i in range(n):\n        if i == 0:\n            continue\n        if words[i] == words[i - 1]:\n            words[i - 1] = words[i - 1].upper()\n    print(\" \".join(words))"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = len(stdin)\n    for i in range(0, a):\n        stdin = stdin.split()\n        s = set(stdin[i])\n        print(s)\n        for j in range(0, a):\n            s1 = set(stdin[j])\n            print(s1)\n            if i == j:\n                continue\n            if s == s1:\n                print('1')\n                return ''.join(stdin[i])\n\nsolution('to be or not to be')\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    words = set(words)\n    return (len(words) - 2) if len(words) - 2 > 0 else 0\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    words = lines[0].split()\n    # print(words)\n    n = int(lines[1])\n    # print(n)\n    words_arr = list(map(lambda x: x.upper(), words))\n    # print(words_arr)\n    # print(words_arr)\n    # print(words_arr)\n    if n == 1:\n        return len(words)\n    # else:\n    #     return 0\n    # print(words)\n    # print(words)\n    # print(words)\n    # print(words)\n    for i in range(n):\n        print(words_arr)\n        print(words_arr)\n        print(words_arr)\n        print(words_arr)\n        words_arr = remove_intersect_words(words_arr, words_arr)\n        # words_arr = remove_intersect_words(words_arr, words_arr)\n    # print(words_arr)\n    # print(words_arr)\n    # print(words_arr)\n    # print(words_arr)\n    return len(words_arr)\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    r = k % n\n    ans = 0\n    for i in range(r, n, k):\n        ans += max(a[i:i + k])\n    return str(ans)"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for j in range(1, k + 1):\n        dp[0][j] = dp[0][j - 1]\n        dp[1][j] = dp[0][j - 1] + a[0]\n        dp[2][j] = max(dp[1][j], dp[0][j - 1] + a[1])\n        dp[3][j] = max(dp[2][j], dp[1][j - 1] + a[2])\n        for i in range(4, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 2][j] + a[i] + dp[i][j - 1], dp[i - 1][j - 1] + a[i] + a[i + 1])\n    return str(max(dp[-1]))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Return your answer as a string, 2 space-separated integers.\n    def profit(diff_list, k):\n        tmp = []\n        result = []\n        for i in range(len(diff_list)):\n            if not tmp:\n                tmp.append(diff_list[i])\n            elif diff_list[i] > tmp[0]:\n                tmp = [diff_list[i]]\n            elif diff_list[i] == tmp[0]:\n                tmp.append(diff_list[i])\n            if len(tmp) == k:\n                result.append(tmp)\n                tmp = []\n        return max([sum([i[0] for i in x]) for x in result])\n\n    n, k = map(int, stdin.split())\n    diff_list = list(map(int, stdin.split()))\n    return str(profit(diff_list, k))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    diffs = set([a[0]])\n    maxProfit = 0\n    for i in range(1, len(a)):\n        diffs.add(a[i])\n        maxProfit = max(maxProfit, a[i])\n    probs = []\n    for i in range(len(a)):\n        if maxProfit not in diffs:\n            break\n        probs.append(i)\n    for i in range(len(probs)):\n        if i == 0:\n            continue\n        if probs[i] - probs[i-1] == 1:\n            continue\n        for j in range(probs[i-1]+1, probs[i]+1):\n            if j == probs[i]:\n                continue\n            tmpProb = a[:probs[i]] + a[j:]\n            tmpProb.sort(reverse=True)\n            if len(tmpProb) == n:\n                tmpProb = tmpProb + tmpProb\n            tmpProb = set(tmpProb)\n            if maxProfit not in tmpProb:\n                continue\n            probs.append(j)\n            break\n    probs.sort()\n    res = str(probs[0])\n    for i in probs[1:]:\n        res = res +'' + str(i)\n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n)] for _ in range(k + 1)]\n    for i in range(n):\n        dp[0][i] = a[i]\n    for i in range(1, k + 1):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + a[j])\n    return str(max(max(dp[i])))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # n, k = 8, 3\n    # a = [5, 4, 2, 6, 5, 1, 9, 2]\n    # n, k = 2, 1\n    # a = [1, 1]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][1] = dp[1][0] = a[0]\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            # if j - a[i] >= 0:\n            if j >= a[i]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + a[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][k])\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n\n    max_profit = 0\n    max_profits = []\n    days = k\n    for problem_no in range(n):\n        problem_profit = 0\n        problems_to_solve = problems[problem_no:]\n        solutions = []\n        solutions.append([problem_no])\n        for day in range(1, days+1):\n            days_to_solve = day\n            solutions_for_day = []\n            while days_to_solve > 0:\n                max_profit_for_day = max_profit\n                for solution in solutions:\n                    if problem_no in solution:\n                        problem_profit += problems_to_solve.pop(0)\n                        solutions_for_day.append(solution + [problem_no])\n                        break\n                    solutions_for_day.append(solution)\n                days_to_solve -= 1\n                if problem_profit > max_profit_for_day:\n                    max_profit = problem_profit\n            solutions = solutions_for_day\n        max_profits.append(max_profit)\n\n    return str(max(max_profits)) +'' +''.join([str(x) for x in max_profits])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans = max(ans, max([a[i] for i in range(i, j + 1)] + [a[j]]))\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # If there are no problems to distribute\n    if sum(a) == 0:\n        return str(0)\n\n    # If there is only one problem to distribute\n    if sum(a) == n:\n        return str(n)\n\n    # Sort problems by difficulty\n    a.sort(reverse=True)\n\n    # Creating a dictionary to store problems solved\n    # For each day and problem, key is the day and problem index, value is the profit\n    problems_solved = {(i, j): 0 for i in range(n) for j in range(i, n)}\n\n    # For each day, finding the maximum profit\n    # As for each day we find the maximum profit as seen in the previous steps\n    # Therefore, for each day we find the maximum profit possible with the problems solved in each previous day\n    for day in range(k):\n        # For each problem of the day\n        for i in range(n):\n            # If there is a problem that was solved for this day\n            if (day, i) in problems_solved:\n                # If the problem was solved in this day\n                if a[i] in problems_solved[(day, i)]:\n                    # If the profit is maximum\n                    if problems_solved[(day, i)] > problems_solved[(day, i)]:\n                        # Update profit\n                        problems_solved[(day, i)] = problems_solved[(day, i)] + a[i]\n                # If the problem was not solved in this day\n                else:\n                    # Update profit\n                    problems_solved[(day, i)] = problems_solved[(day, i)] + a[i]\n            # If the problem was not solved in this day\n            else:\n                # Update profit\n                problems_solved[(day, i)] = problems_solved[(day, i)] + a[i]\n\n    # Finding maximum profit\n    maximum_profit = -1\n    max_profit_days = []\n    for i in range(n):\n        if problems_solved[(k - 1, i)] > maximum_profit:\n            maximum_profit = problems_solved[(k - 1, i)]\n            max_profit_days = [(k - 1, i)]\n\n    # Finding profit with maximum profit\n    total_profit = 0\n    for j in range(k - 1):\n        if problems_solved[(j, max_profit_days[0][1])] > problems_solved[(j + 1, max_profit_days[0][1])]:\n            total_profit = problems_solved[(j, max_profit_days[0][1])] + problems_solved[(j + 1, max_profit_days[0][1])]\n            max_profit_days = [(j, max_profit_days[0][1])]\n        elif problems_solved[(j, max_profit_days[0][1])] < problems_solved[(j + 1, max_profit_days[0][1])]:\n            max_profit_days = [(j, max_profit_days[0][1])]\n\n    # To string\n    solution = str(maximum_profit)\n    for i in range(k - 1):\n        solution += \" \" + str(max_profit_days[i][1] + 1)\n    solution += \" \" + str(n)\n\n    return solution\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, days = map(int, stdin.split())\n    problems = sorted(list(map(int, stdin.split())))\n    # Make sure that problems are sorted in increasing order.\n    # Example: If problems = [1, 2, 3, 4] and the days are 1, 2, 3, 4, the output should be 1, 2.\n    # If problems = [1, 2, 3, 4] and the days are 4, 1, 2, 3, the output should be 4, 1.\n    # If problems = [1, 2, 3, 4] and the days are 4, 2, 3, 1, the output should be 3, 1.\n\n    max_profit = 0\n    current_profit = 0\n    for i in range(days):\n        current_profit = max(problems[i], current_profit + problems[i])\n        max_profit = max(current_profit, max_profit)\n    return str(max_profit)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nlines = stdin.split()\nn = int(lines[0])\nlst = list(map(int, lines[1].split()))\na = 0\n\nfor i in range(n):\n    if lst[i] == 0:\n        a += 1\n    else:\n        a += abs(lst[i])\n\nprint(a)"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements, number_of_elements_of_array = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    if sum(array) == 0:\n        return number_of_elements\n    insert_number = 0\n    for i in range(1, number_of_elements):\n        if array[i] == 0:\n            insert_number += 1\n    insert_number += 1\n    while insert_number < number_of_elements:\n        insert_number = 0\n        for i in range(1, number_of_elements):\n            if array[i] == 0:\n                insert_number += 1\n        if insert_number == 0:\n            return 0\n        for i in range(1, number_of_elements):\n            if array[i] == 0:\n                continue\n            for j in range(1, number_of_elements):\n                if j <= i:\n                    continue\n                if array[i] + array[j] == 0:\n                    array[i], array[j] = array[j], array[i]\n                    break\n    return number_of_elements - 1\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    while True:\n        sum = 0\n        i = 0\n        while i < len(a):\n            sum += a[i]\n            if sum == 0:\n                ans += 1\n            i += 1\n        if sum == 0:\n            break\n        i = 0\n        while i < len(a):\n            a.insert(i, a[i])\n            if sum == 0:\n                ans += 1\n            i += 1\n    return str(ans)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    while (i + 1) < len(a):\n        if a[i] == 0:\n            i += 1\n        else:\n            a[i] += a[i + 1]\n            a[i + 1] = 0\n            i += 2\n    print(i)\n    return i\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = 0\n    while (a.count(0)!= 0):\n        ans += 1\n        to_remove = a.index(0)\n        a.pop(to_remove)\n        for i in range(to_remove):\n            if a[i] == 0:\n                a.pop(i)\n                break\n    print(ans)"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    current = 0\n    for i in range(n):\n        if a[i] >= 0:\n            result += a[i]\n            if result > 0:\n                current = result\n        else:\n            result += abs(a[i])\n            if result > 0:\n                current = abs(result)\n        if current == 0:\n            break\n    return str(i + 1)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if max(a) == 0:\n        return \"0\"\n    else:\n        return str(len(a))"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    size = 1\n    while size < n:\n        if arr[size] + arr[size - 1] == 0:\n            size += 1\n            continue\n        if arr[size] == 0:\n            arr[size] = arr[size - 1]\n            arr[size - 1] = 0\n            size -= 1\n        else:\n            for i in range(size, n):\n                if arr[i] == 0:\n                    continue\n                arr[i] = arr[i - size] + arr[i]\n            size += 1\n    return \" \".join(map(str, arr))\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')\n    b = []\n    for i in range(n):\n        a[i] = int(a[i])\n    a.sort()\n    if a[0] > 0:\n        return \"0\"\n    x = []\n    x.append(0)\n    for i in range(n):\n        for j in range(x[i], i):\n            if a[i] + a[j] == 0:\n                x.append(j+1)\n                break\n    return str(max(x)-1)\n\nsolution(str(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num, *arr = stdin.split()\n    arr = list(map(int, arr))\n    arr.sort()\n    i = 1\n    count = 0\n    while i < len(arr):\n        if arr[i] == arr[i-1]:\n            count = 0\n        else:\n            count += 1\n        i += 1\n    print(count)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = list(map(int, stdin.split()))\n        ans = 0\n        a = []\n        for j in range(n):\n            a.append(int(stdin.split()[j]))\n        if n == 1:\n            return str(0)\n        for k in range(1, n):\n            ans += abs(a[k] - a[k - 1])\n        print(ans)\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    while t > 0:\n        n, m = map(int, stdin.split()[1:3])\n        a = list(map(int, stdin.split()[3:]))\n        print(max(max(abs(a[i] - a[i + 1]) for i in range(len(a) - 1)) for i in range(len(a) - 1)))\n        t -= 1\n    return \"\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    return str(max(sum(range(1, n)) - m, sum(range(1, n-1)) - m))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(1, t+1):\n        n, m = map(int, stdin.split()[i].split())\n        a = list(map(int, stdin.split()[i+1].split()))\n        print(max([abs(a[i] - a[i+1]) for i in range(n-1)]))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, m = int(input_list[0]), int(input_list[1])\n    a = list(map(int, input_list[2].split(' ')))\n    return str(max(0, max(a)-m))"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        arr = list(map(int, stdin.split()))\n        summ = 0\n        for i in range(1, len(arr)):\n            summ += abs(arr[i] - arr[i-1])\n        print(summ)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        if len(a) < n:\n            print('0')\n            continue\n        if n == 1:\n            print(abs(a[0] - m))\n            continue\n        dp = [[0] * (n + 1) for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i, 0, -1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + abs(a[i] - a[j]))\n        print(max(dp[-1]))\n\nsolution(input())\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        [n, m] = [int(x) for x in stdin.strip().split(\" \")]\n        max = 0\n        for j in range(1, n):\n            if abs(j - j + 1) > max:\n                max = abs(j - j + 1)\n        print(max)\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = list(map(int, stdin.split()))\n        arr = list(map(int, stdin.split()))\n        diffs = []\n        for i in range(1, len(arr)):\n            diffs.append(abs(arr[i] - arr[i - 1]))\n        n = len(diffs)\n        g = gcd(diffs[0], diffs[1])\n        for i in range(1, n - 1):\n            g = gcd(g, diffs[i])\n        ans = g * (diffs[0] + g)\n        print(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(2, 1000000):\n        if i % k == 0:\n            return str(i)\n    return \"-1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, range(1, int(stdin) + 1)))"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    for i in range(1, len(stdin)+1):\n        if int(stdin[:i]) % int(stdin[i:]) == 0:\n            print(i)\n            return\n    print(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    sequence = stdin[1].split(\" \")\n    k = int(stdin[0])\n    mult_list = []\n\n    for i in range(len(sequence)):\n        if k*i in sequence:\n            mult_list.append(i)\n    if mult_list == []:\n        return str(-1)\n    else:\n        return str(min(mult_list))\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(len(str(7))):\n        if str(k).startswith(str(7)[:i]):\n            return str(i + 1)\n    return \"None\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sequence = list(map(int, stdin.split()))\n    i = 0\n    while sequence[i]!= sequence[i+1]:\n        i += 1\n    if sequence[i] == sequence[i+1]:\n        return str(i+1)\n    else:\n        return \"None\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if not k:\n        return '-1'\n    def find_multiple(n):\n        res = 0\n        while n:\n            res += k\n            n -= k\n        return res\n    m = find_multiple(7)\n    n = find_multiple(77)\n    o = find_multiple(777)\n    pos = max(n, m, o)\n    if pos == n:\n        return '4'\n    elif pos == m:\n        return '3'\n    return '2'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(1)\n    -1\n    >>> solution(2)\n    -1\n    >>> solution(3)\n    4\n    >>> solution(10)\n    -1\n    >>> solution(100)\n    4\n    >>> solution(20)\n    4\n    >>> solution(10_000)\n    4\n    >>> solution(10_001)\n    -1\n    >>> solution(10_002)\n    -1\n    >>> solution(10_100)\n    4\n    >>> solution(10_110)\n    4\n    \"\"\"\n    nums = stdin.split()\n    num = int(nums[0])\n    k = int(nums[1])\n\n    i = 0\n    while i < len(nums) and i < num:\n        if int(nums[i]) % k == 0:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(1, 1000000):\n        if i % k == 0:\n            return str(i)\n    return -1\nprint(solution(input()))"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    print(2 * p[len(p)//2] - m)\nsolution(input())\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p.sort()\n    count = 0\n    for i in range(1, len(p) - 1):\n        left = p[i - 1]\n        right = p[i + 1]\n        if (m - left) == (right - m):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return str(2 * (p[2] - p[0]) + (n - 2 * (p[-2] + p[-1])) + (n - 2) / 2)"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    sequence = sorted(sequence)\n    size = len(sequence)\n    count = 0\n    for i in range(0, size):\n        if i < size:\n            left_idx = i\n            right_idx = left_idx + 1\n            while right_idx < size:\n                if sequence[left_idx] == sequence[right_idx]:\n                    count += 1\n                    right_idx += 1\n                else:\n                    break\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    total = (n*(n+1))//2\n    l = 0\n    r = len(p) - 1\n    ans = 0\n    while l <= r:\n        if p[l] + p[r] == m:\n            ans += (r - l)\n            l += 1\n            r -= 1\n        elif p[l] + p[r] < m:\n            l += 1\n        else:\n            r -= 1\n    print(ans)\n    return"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    numbers = sorted(map(int, stdin.split()))\n    p = numbers\n    total = 0\n    for i in range(n):\n        if p[i] == i + 1:\n            p.remove(p[i])\n        else:\n            break\n\n    p.remove(p[i])\n\n    print(len(p))\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    n = int(l[0])\n    m = int(l[1])\n    p = list(map(int,l[2:]))\n    p.sort()\n    result = 0\n    i = 0\n    while i < n:\n        if p[i] == m:\n            result += 1\n            i += 2\n        else:\n            i += 1\n    return result\n\nsolution(\"3 5 1\")\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    l = 0\n    r = len(p) - 1\n    count = 0\n    while l < r:\n        if p[l] + p[r] < m:\n            count += (r - l) * (r + 1) // 2\n            l += 1\n        else:\n            count += (r - l) * (r - l + 1) // 2\n            r -= 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            left = seq[i]\n            right = seq[j]\n            median = (left + right) // 2\n            if median == m:\n                res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups = [i - 1 for i in cups]\n    if len(cups) < n:\n        cups += [0] * (n - len(cups))\n    cups.sort()\n    pos = 0\n    curr_cup = cups[0]\n    d = []\n    for _ in range(n):\n        d += [curr_cup]\n        curr_cup = cups[pos]\n        pos += 1\n        if pos == len(cups):\n            pos = 0\n    print(d)\n    return d\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    \n    def get_drink(n, a, k):\n        q = []\n        for i in range(k, len(a)):\n            q.append(a[i])\n            if len(q) >= n:\n                return sum(q)\n        return -1\n        \n    \n    day = 0\n    \n    while get_drink(n, a, day) == -1:\n        day += 1\n    return str(day)\n    \nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 8')\n    '4'\n    >>> solution('7 10')\n    '2'\n    >>> solution('5 16')\n    '2'\n    >>> solution('5 26')\n    '-1'\n    >>> solution('5 26')\n    '-1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n\n    # graph = {}\n    # for i in range(n):\n    #     graph[cups[i]] = []\n    #\n    # for i in range(n, 2*n):\n    #     if i % n == 0:\n    #         graph[cups[i]] = [cups[i - n], cups[i - 1]]\n    #     elif i % n == 1:\n    #         graph[cups[i]] = [cups[i - 1], cups[i - n]]\n    #     else:\n    #         graph[cups[i]] = [cups[i - n - 1], cups[i - 1]]\n    #\n    # graph[cups[2*n - 1]] = [cups[n - 1]]\n    # graph[cups[2*n]] = [cups[n - 1]]\n\n    graph = {}\n    for i in range(n):\n        graph[cups[i]] = []\n\n    for i in range(n, 2 * n):\n        if i % n == 0:\n            graph[cups[i]] = [cups[i - n], cups[i - 1]]\n        elif i % n == 1:\n            graph[cups[i]] = [cups[i - 1], cups[i - n]]\n        else:\n            graph[cups[i]] = [cups[i - n - 1], cups[i - 1]]\n\n    graph[cups[2 * n - 1]] = [cups[n - 1]]\n    graph[cups[2 * n]] = [cups[n - 1]]\n\n    current_cup = cups[0]\n    current_cup_graph = graph[current_cup]\n\n    for _ in range(m):\n        current_cup = current_cup_graph[1]\n        for i in range(1, n):\n            if graph[current_cup][i] == current_cup:\n                current_cup_graph[i] = graph[current_cup][i - 1]\n            else:\n                current_cup_graph[i] = graph[current_cup][i]\n\n    return str(current_cup_graph[1])"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if n == m:\n        return -1\n\n    l = 0\n    r = 0\n    for i in range(n):\n        if a[i] > 0:\n            r = i\n        if a[i] < 0:\n            l = i\n        if r > l:\n            return r - l + 1"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups.sort()\n    num_of_coffee = 0\n    for i in range(len(cups) - 1):\n        if cups[i]!= cups[i + 1] - 1:\n            if num_of_coffee >= m:\n                return \"-1\"\n            num_of_coffee += 1\n    return str(num_of_coffee)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a = list(map(int, stdin.split()))\n    cups = sorted(range(1, n + 1), reverse=True)\n    cups_coff = {a[i]: cups[i] for i in range(len(a))}\n\n    cups_coff['0'] = '1'\n    for i in range(1, m):\n        cups_coff[i] = cups[i]\n    # print(cups_coff)\n\n    days = -1\n    current = '0'\n    for i in range(m):\n        # print(current, cups_coff[current])\n        if current not in cups_coff:\n            # print('YES', i, current, cups_coff[current], len(cups_coff))\n            days += 1\n            current = '0'\n        else:\n            # print(i, current, cups_coff[current])\n            current = cups_coff[current]\n\n    return days\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = int(lines[0]), int(lines[1])\n    if m == 0 or n == 0:\n        return '-1'\n    a = sorted(list(map(int, lines[2].split())))\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(min(a[0], a[1] - 1))\n    if n == 3:\n        return str(min(a[0], a[1] - 2, a[2] - 1))\n    if n == 4:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 1))\n    if n == 5:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 3, a[4] - 1))\n    if n == 6:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 3, a[4] - 2, a[5] - 1))\n    if n == 7:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 3, a[4] - 3, a[5] - 2, a[6] - 1))\n    if n == 8:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 3, a[4] - 3, a[5] - 3, a[6] - 2, a[7] - 1))\n    if n == 9:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 3, a[4] - 3, a[5] - 3, a[6] - 3, a[7] - 2, a[8] - 1))\n    if n == 10:\n        return str(min(a[0], a[1] - 2, a[2] - 2, a[3] - 3, a[4] - 3, a[5] - 3, a[6] - 3, a[7] - 3, a[8] - 2, a[9] - 1))\n    return str(-1)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    return min(len(cups), max(0, (sum(cups) - 1) // m))\n\nprint(solution(\"5 8\"))\nprint(solution(\"7 10\"))\nprint(solution(\"5 16\"))\nprint(solution(\"5 26\"))\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    count = 0\n    i = 0\n    min_count = 100\n    while count < n:\n        count += c[i]\n        i += 1\n        if count > min_count:\n            min_count = count\n    if min_count > m:\n        return \"1\"\n    return str(min_count)\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # PUT YOUR CODE HERE\n    return \"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    max_i = len(seq) - 1\n    i = 0\n    max_count = 0\n    while i < max_i:\n        if seq[i] - seq[i+1] == 1:\n            max_count += 1\n            i += 1\n        elif seq[i] - seq[i+1] > 1:\n            if seq[i] - seq[i + 1] > max_count:\n                max_count = seq[i] - seq[i + 1]\n            i += 1\n        else:\n            break\n    return str(max_count)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    if n == 1:\n        if b[0] < b[1]:\n            return -1\n        else:\n            return 0\n    newb = b.copy()\n    if n == 2:\n        if b[0] < b[1]:\n            return 0\n        else:\n            return -1\n    for i in range(1, n):\n        if b[i] < b[i - 1] or b[i - 1] == 0:\n            b[i] = b[i - 1] - 1\n            newb[i] = b[i] - 1\n        else:\n            b[i] = b[i - 1] + 1\n            newb[i] = b[i] + 1\n    if newb == b:\n        return 0\n    else:\n        return n - 1\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b: List[int] = list(map(int, stdin.split()))\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] > 1:\n            return '-1'\n    return str(len(b) - 1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.split()\n    n = int(b[0])\n    b = sorted(list(map(int, b[1])))\n    if len(b) <= 2:\n        return '0'\n    if not all(b[i] <= b[i + 1] for i in range(len(b) - 1)):\n        return '-1'\n    # print(b)\n    # print(sorted(b[:-1]))\n    for i in range(len(b) - 1):\n        if b[i] == b[i + 1]:\n            return '-1'\n    return str(len(b) - 1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = list(map(int, stdin.split()))\n    a = sorted(b)\n    print(a)\n    print(b)\n    if (a[0] - a[1])!= (a[1] - a[2]) or (a[1] - a[2])!= (a[2] - a[3]):\n        print(-1)\n    else:\n        print(len(b) - (a[1] - a[0]))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    answer = -1\n    #n = 4\n    #b = [24, 21, 14, 10]\n    #b = [1, 3, 6, 9, 12]\n    \n    #b = [1, 4, 5]\n    if len(b) > 3:\n        for i in range(len(b)-3):\n            if b[i+1] - b[i] > 1:\n                #print(b)\n                #print(b[i+1] - b[i])\n                #print(i)\n                answer = i + 1\n                break\n    \n    if answer == -1:\n        print(\"0\")\n    else:\n        print(answer)\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = tuple(map(int, stdin.split()))\n    if not all(0 <= bi <= 10 for bi in b):\n        return \"0\"\n    dp = [0] * len(b)\n    dp[0] = 1\n    for i in range(1, len(b)):\n        if b[i] - b[i-1] > 1:\n            dp[i] = 1\n        elif b[i] - b[i-1] == 1:\n            dp[i] = dp[i-1] + 1\n    if dp[-1] == 1:\n        dp = dp[:-1]\n    if len(dp) == 0:\n        return \"0\"\n    return str(max(dp))"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    arr = stdin_list[1].split(',')\n    max_length = len(arr)\n    min_length = 1\n    for i in range(max_length):\n        a = int(arr[i])\n        if a == 0:\n            continue\n        if a == 1:\n            min_length += 1\n            continue\n        if a == 2:\n            min_length = min(min_length, 2)\n            continue\n        if a == 3:\n            min_length = min(min_length, 3)\n            continue\n        min_length = min(min_length, 2)\n        continue\n    if min_length > max_length:\n        return '-1'\n    return str(min_length)"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n\n    if len(b) < 2:\n        return str(0)\n    elif len(b) == 2:\n        if abs(b[0] - b[1]) == 1:\n            return str(1)\n        else:\n            return str(-1)\n\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if abs(b[i] - b[j]) == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    answer = max(dp[-1])\n    return str(answer)"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")[1]\n    n = int(line.split(\" \")[0])\n    ar_seq = list(map(int, line.split(\" \")[1].split(\",\")))\n    \n    for i in range(len(ar_seq) - 1):\n        if ar_seq[i + 1] == ar_seq[i]:\n            if i + 2 == len(ar_seq):\n                return \"0\"\n            if ar_seq[i + 2] - ar_seq[i] == 1:\n                ar_seq[i + 2] -= 1\n                continue\n            if ar_seq[i + 2] - ar_seq[i] == 2:\n                ar_seq[i + 2] -= 1\n                ar_seq[i] += 1\n                continue\n            if ar_seq[i + 2] - ar_seq[i] == 3:\n                ar_seq[i + 2] -= 1\n                ar_seq[i] -= 1\n                continue\n            if ar_seq[i + 2] - ar_seq[i] == 4:\n                ar_seq[i + 2] -= 1\n                continue\n        else:\n            return \"-1\"\n        break\n    return str(len(ar_seq))\nprint(solution(input()))"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    m = k * (k - 1) // 2\n    # dp = [[[0 for _ in range(k + 1)] for _ in range(k + 1)] for _ in range(n)]\n    # for i in range(n):\n    #     for j in range(k):\n    #         if i == 0:\n    #             dp[i][j][0] = 0\n    #         else:\n    #             dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + a[i])\n    #         for l in range(1, k):\n    #             if i == 0:\n    #                 dp[i][j][l] = dp[i][j][l - 1]\n    #             else:\n    #                 dp[i][j][l] = max(dp[i][j][l - 1], dp[i - 1][j][l] + dp[i][j - 1][l - 1] + a[i])\n    # return max(dp[n - 1][k][k], 1)\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if i == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i])\n    return max(dp[n - 1][k], 1)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    tmp = 0\n    teams = 0\n    res = 0\n    for i in range(len(a)):\n        if tmp < k:\n            tmp += a[i]\n            teams += 1\n        else:\n            res = max(res, teams)\n            teams = 1\n            tmp = a[i]\n    return max(res, teams)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = sorted(a, key=lambda x: (-x, x))\n    i = 0\n    while i < k:\n        a_i = a[i]\n        while i < k and a[i] == a_i:\n            i += 1\n        if i >= k:\n            break\n        a_i += 1\n        while i < k and a[i]!= a_i:\n            i += 1\n        if i >= k:\n            break\n        a_i -= 1\n        i += 1\n        if i == k:\n            break\n    print(i)\n\nsolution(input())\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    k = int(data[1])\n    # print(n,k)\n    # data = data[2:]\n    # print(data)\n    d = {}\n    for i in range(n):\n        tmp = data[i].split()\n        if tmp[1] not in d:\n            d[tmp[1]] = tmp[0]\n    # print(d)\n    output = []\n    # for x in data:\n    #     print(x)\n    #     x = x.split()\n    #     if x[1] in d:\n    #         print(x)\n    #         output.append(x)\n    #         del d[x[1]]\n    #\n    # print(d)\n    # print(output)\n    for i in range(k):\n        if i in d:\n            tmp = d[i]\n            if tmp not in output:\n                output.append(tmp)\n    # for i in range(k):\n    #     if i not in d:\n    #         tmp = input()\n    #         output.append(tmp)\n    # print(output)\n    print(len(output))"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    student_skill = list(map(int, stdin.split()))\n    team_capacity = k\n    team_count = 0\n    team_skill_sum = 0\n    while team_capacity > 0:\n        if len(student_skill) == 1 and student_skill[0] == team_capacity:\n            return team_count\n        candidates = [student_skill.pop(0) for _ in range(team_capacity)]\n        team_skill_sum += min(candidates)\n        team_count += 1\n        team_capacity -= min(candidates)\n    return team_count\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [1] * len(a)\n    print(dp)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if abs(a[i] - a[j]) <= 5:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # int(stdin)\n    # n, k = map(int, input().split())\n    data = list(map(int, stdin.split()))\n    data.sort(reverse=True)\n    data = sorted(data, key=lambda x: (x//5, x%5), reverse=True)\n    # print(data)\n    print(len(data))\n    return str(len(data))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for i in stdin.split() if int(i) % 5!= 0))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    k = int(lines[1])\n    lst = list(map(int, lines[2].split()))\n    lst.sort()\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        a = lst[i-1]\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-a]+1)\n    return str(dp[n][k])"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    students = [int(i) for i in input().split()]\n    total = 0\n    for i in range(1, N):\n        skill = 0\n        for j in range(i):\n            skill += students[j]\n        for j in range(i + 1, N):\n            skill -= students[j]\n        total += max(0, skill // 5 + (M - skill) // 5)\n    return str(total)\n\nsolution('')\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n, k, m = int(n), int(k), int(m)\n\n    points = list(map(int, stdin.split()))\n    count = 0\n\n    while sum(points) < m:\n        points = [points[i] + points[i + 1] for i in range(len(points) - 1)]\n        count += 1\n\n    if sum(points) < m:\n        return -1\n    return count"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, k, m = input_list[0].split()\n    n, k, m = int(n), int(k), int(m)\n    marks = [int(x) for x in input_list[1].split()]\n\n    # Use binary search to get the maximum number of marks needed to achieve m points\n    lo = 0\n    hi = max(marks)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if get_average(n, k, m, mid) >= m:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n\n    if lo == mid:\n        return -1\n\n    # Use binary search to get the minimum number of marks needed to achieve m points\n    lo = 0\n    hi = max(marks)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if get_average(n, k, m, mid) < m:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n\n    return lo\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(i) for i in stdin.split(' ')]\n    A = [int(i) for i in stdin.split(' ')]\n    ans = 0\n    n = N - 1\n    ans += M * (A[n] // K)\n    n -= 1\n    while n >= 0:\n        ans += (A[n] + ans) // K\n        n -= 1\n    ans = max(ans, 0)\n    if ans == M:\n        return str(ans)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, k, m = int(a[0]), int(a[1]), int(a[2])\n    s = list(map(int, a[3:]))\n    print(sum(s) / n)\n    return \"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    max_score = (k * n - sum(map(lambda x: k - x, range(n)))) / n\n    score_sum = 0\n    for i in range(n):\n        score_sum += (k - i) * int(stdin.split()[i + 1])\n    average_score = score_sum / n\n    print(max(0, average_score - max_score))\n    return '-1' if average_score - max_score < 0 else str(int(average_score - max_score))\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n\n    scores = sorted(scores)\n    if k > m:\n        return -1\n    average = 0\n    for i in range(n):\n        average += scores[i]\n\n    if average < m:\n        return -1\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        total = 0\n        for i in range(mid):\n            total += scores[i]\n        if total >= m:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return str(low)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n\n    # Returned value is always positive\n    return str(sum(scores) // n)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N, K, M] = list(map(int, stdin.split()))\n    scores = list(map(int, stdin.split()))\n    students = list(range(1, N + 1))\n    average = sum(scores) // N\n    best = 0\n    for i in range(N - 1):\n        if scores[i] < average:\n            best += K - scores[i]\n        elif scores[i] >= average:\n            best += (K - average) // 2\n    best += K - average\n    return str(max(best, 0))\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total_points = sum(a)\n    if total_points < k:\n        return \"-\"\n    total_points = total_points - k\n    sum_of_mean = total_points / n\n    return \"{}\".format(round(sum_of_mean))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = stdin.split()\n    N, K, Q = int(N), int(K), int(Q)\n    score_map = {}\n    for player_idx in range(1, N+1):\n        score_map[player_idx] = K\n\n    for player_idx in range(1, Q+1):\n        correct_answers = stdin.split()[player_idx]\n        for answer_idx in range(1, N+1):\n            if correct_answers == str(answer_idx):\n                score_map[answer_idx] -= 1\n        score_map = {key: val for key, val in sorted(score_map.items(), key=lambda item: item[1])}\n        score_map = {key: val for key, val in score_map.items() if val!= 0}\n        score_map = {key: val for key, val in sorted(score_map.items(), key=lambda item: item[0])}\n\n    players_remain = list(score_map.keys())\n    for i in range(0, N):\n        if players_remain[i]!= 0:\n            players_remain[i] = 'No'\n\n    return '\\n'.join(players_remain)\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k, q = map(int, stdin[0:3])\n    score_list = list(map(int, stdin[3:n + 3]))\n    answer_list = list(map(int, stdin[n + 3:n + 3 + q]))\n    for i in range(q):\n        answer_list[i] -= 1\n\n    answer_list.sort(reverse=True)\n    players_survived = list(map(lambda x: True if x > 0 else False, score_list))\n\n    # print(answer_list, score_list)\n\n    for i in range(n):\n        if players_survived[i] is True:\n            continue\n\n        for j in range(i, q):\n            if answer_list[j] <= 0:\n                players_survived[i] = False\n                break\n\n    # print(answer_list, score_list)\n    for i in range(n):\n        if players_survived[i]:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    n, k, q = [int(x) for x in stdin[0].split()]\n    score = [(x+k) for x in range(1, n+1)]\n    for x in stdin[1:]:\n        q_answered = [int(y) for y in x.split()]\n        for q_answered_answer in q_answered:\n            for score_point in score:\n                if q_answered_answer == score_point:\n                    score.remove(score_point)\n                    break\n    print(\"\\n\".join([\"Yes\" if x == 0 else \"No\" for x in score]))\n    return \"\\n\".join([\"Yes\" if x == 0 else \"No\" for x in score])\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = stdin.split()\n    N = int(n)\n    K = int(k)\n    Q = int(q)\n    results = []\n    for i in range(1, N+1):\n        if i <= K:\n            results.append('Yes')\n        else:\n            results.append('No')\n    for i in range(Q):\n        Ai = stdin.split()[i+1]\n        if Ai == results[int(Ai)-1]:\n            results[int(Ai)-1] = 'Yes'\n    print('\\n'.join(results))\n    return results\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted([True if (sum([int(i) for i in stdin.split()[1:]]) - int(stdin.split()[0])) >= 0 else False for i in range(1, int(stdin.split()[0])+1)]))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _, K, Q = stdin.split()\n    K = int(K)\n    Q = int(Q)\n    if Q < K + 1:\n        return \"No\"\n    elif Q == K + 1:\n        return \"Yes\"\n    else:\n        N = int(K/Q)\n        players = [[] for i in range(N + 1)]\n        scores = []\n        for i in range(1, N+1):\n            scores.append([])\n        for i in range(N+1):\n            _, K, Q = stdin.split()\n            K = int(K)\n            Q = int(Q)\n            if Q == K + 1:\n                for j in range(K):\n                    scores[i].append(int(input()))\n            else:\n                for j in range(K, Q + 1):\n                    scores[i].append(int(input()))\n        for i in range(N):\n            players[i + 1] = []\n            for j in range(len(scores[i])):\n                players[i + 1].append(scores[i][j] - 1)\n        for i in range(N, 0, -1):\n            if players[i] == [] and i > 1:\n                break\n            elif players[i]!= [] and i > 1:\n                for j in range(N - i + 1):\n                    players[i + j] = players[i - 1]\n            elif players[i] == [] and i == 1:\n                break\n        for i in range(1, N + 1):\n            if players[i] == [] or players[i] == [0] * N:\n                return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    --- Day 6: Probably a Fire Hazard ---\n    Before you go on to the dangerous inner halls of Semynary, you notice that the walls are covered in strange runes that seem to be trying to get you out of your way. You decide to find out if you can make it out alive.\n\n    As you approach the entrance to the room, you realize that the walls are not exactly like the ones you imagined. They are rectangular with a dark inside and a white outside. Instead of a door leading out to another room, the walls are just a few short thin strips of glue sticking together.\n\n    You also discover that the walls are not exactly like the walls of a house. You realize that you have touched the floor before and now the floor is covered in strange runes.\n\n    There is a hallway to your left and to your right. Some of the runes on either side are extremely similar in structure. One could try to make out which direction you should go and which runes you should touch to make out if you could make it to the other side.\n\n    For example, if you had to touch the middle-right corner to make out if you could make it to the left, you would look at the middle-left corner and the middle-right corner. (Of course, there are many more corner cases to consider.)\n\n    If you were to touch the middle-right corner and go to the left, what else could you do?\n\n    The wall's runes are all a certain color. If you touch any corner with the color of the wall, you will make out the other side. (For example, touching the bottom-right corner makes you make out the top-right corner.) If you can make out both the left and right sides, you have found the entrance to Semynary!\n\n    Return YES if you can make out both the left and right sides of the room, otherwise return NO.\n\n    Parameters\n    ----------\n    stdin : str\n        Input from STDIN.\n\n    Returns\n    -------\n    str\n        \"YES\" if you can make out both the left and right sides of the room, otherwise \"NO\".\n\n    Examples\n    --------\n    Input:\n        3 4 2\n        1\n        3\n        2\n        1\n    Output:\n        YES\n        YES\n        NO\n    '''\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = [x for x in range(1, n+1)]\n    for _ in range(n-1):\n        scores.remove(min(scores))\n    scores = list(map(lambda x: -1 if x < k else 0, scores))\n    print('\\n'.join(map(lambda x: 'Yes' if x else 'No', scores)))\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = list(map(int, stdin.split()))\n    scores = list(map(int, stdin.split()))\n    scores = sorted(scores, reverse=True)\n\n    for i in range(1, N):\n        if scores[i] - scores[i - 1] == -1:\n            return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mat = []\n    for line in stdin.splitlines():\n        mat.append(list(map(int, line.split())))\n    if len(mat)!= len(mat[0]) or len(mat) <= 2:\n        return \"NO\"\n    for i in range(1, len(mat)):\n        for j in range(len(mat[i])):\n            if mat[i][j]!= mat[j][i]:\n                mat[i][j] = int(not mat[i][j])\n    for i in range(1, len(mat)):\n        if mat[i][0]!= mat[0][i]:\n            return \"NO\"\n    for i in range(1, len(mat)):\n        for j in range(1, len(mat[i])):\n            if mat[i][j]!= mat[0][i] or mat[j][i]!= mat[i][0]:\n                return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for i in range(n)]\n\n    is_invertible = True\n    while is_invertible:\n        is_invertible = False\n        for j in range(m):\n            if a[0][j] == 0 and a[1][j] == 1:\n                a[1][j] = 0\n                a[0][j] = 1\n                is_invertible = True\n            if a[0][j] == 1 and a[1][j] == 0:\n                a[1][j] = 1\n                a[0][j] = 0\n                is_invertible = True\n\n    for j in range(m):\n        for i in range(1, n):\n            if a[i][j] == 0 and a[i - 1][j] == 1:\n                a[i][j] = 1\n                a[i - 1][j] = 0\n                is_invertible = True\n            if a[i][j] == 1 and a[i - 1][j] == 0:\n                a[i][j] = 0\n                a[i - 1][j] = 1\n                is_invertible = True\n\n    if is_invertible:\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 1:\n                    print('1', end='')\n                else:\n                    print('0', end='')\n            print('')\n        for i in range(m):\n            for j in range(n):\n                if a[j][i] == 1:\n                    print('1', end='')\n                else:\n                    print('0', end='')\n            print('')\n        return 'YES'\n    else:\n        return 'NO'\n\n\nsolution(*(stdin()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    matrix = [[int(i) for i in stdin.split()[j]] for j in range(n)]\n    for row in range(n):\n        matrix[row].sort(reverse=True)\n\n    for row in matrix:\n        if row.count(0) > 0:\n            return \"NO\"\n\n    for column in range(m):\n        column.sort(reverse=True)\n\n    for row in range(n):\n        for column in range(m):\n            if matrix[row][column]!= 0:\n                return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, m = stdin.split(\" \")\n    n = int(n)\n    m = int(m)\n\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in stdin.split(\" \")[i * m:(i + 1) * m]])\n    # print(matrix)\n    print(\"YES\")\n    for i in range(len(matrix)):\n        if matrix[i].sort() == matrix[i]:\n            print(\n                str(i + 1) + \"0\" + str(i + 1) + str(i + 1) + str(i + 1)\n            )\n            print(\n                str(i + 1) + \"1\" + str(i + 1) + str(i + 1) + str(i + 1)\n            )\n    for i in range(len(matrix[0])):\n        if matrix[0][i] == 0:\n            print(\"0\" + str(i + 1) + \"0\" + str(i + 1) + str(i + 1))\n        else:\n            print(\"1\" + str(i + 1) + \"1\" + str(i + 1) + str(i + 1))\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [[int(x) for x in stdin.split()[i * n + j]] for j in range(m)]\n    try:\n        a.sort(key=lambda x: x)\n        print(\"YES\")\n        print(\"\".join([\"1\" if x == 0 else \"0\" for x in a]))\n        print(\"\".join([\"1\" if x == 0 else \"0\" for x in a[::-1]]))\n    except:\n        print(\"NO\")\n\n\nsolution(*(stdin().split()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    m = int(input[1])\n\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in stdin.split()])\n\n    lst = []\n    for i in range(n):\n        lst.append(str(a[i].index(1)))\n    print(''.join(lst))\n\n    lst2 = []\n    for i in range(m):\n        lst2.append(str(a[i].index(1)))\n    print(''.join(lst2))\n\n    return \"YES\" if sorted(lst) == lst else \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    mat = []\n    for i in range(m):\n        mat.append([int(x) for x in stdin.split()[i + 2].strip()])\n    ans = \"NO\"\n    for i in range(m):\n        temp = mat[i]\n        temp.reverse()\n        for j in range(n):\n            if temp == mat[j]:\n                ans = \"YES\"\n                break\n        temp.reverse()\n    print(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    if lst == sorted(lst):\n        return \"YES\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[j] < lst[i]:\n                lst[j], lst[i] = lst[i], lst[j]\n    if lst == sorted(lst):\n        return \"YES\"\n    for i in range(m):\n        for j in range(i + 1, m):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    if lst == sorted(lst):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a = [[a[i], i] for i in range(n)]\n    a.sort(key=lambda x: x[1])\n    print('YES' if a == [[1, 0]] * n else 'NO')\n    return 'YES' if a == [[1, 0]] * n else 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    inverse_col_arr = [[], []]\n    inverse_row_arr = [[], []]\n    inverse_col = 0\n    inverse_row = 0\n    for i in range(int(stdin[0])):\n        row_arr = list(map(int, stdin[i + 1].split()))\n        for j in range(int(stdin[0])):\n            if i == j:\n                inverse_col += 1\n                inverse_col_arr[inverse_col].append(row_arr[j])\n            else:\n                inverse_row += 1\n                inverse_row_arr[inverse_row].append(row_arr[j])\n    inverse_row_arr.sort(key=lambda x: x[0], reverse=True)\n    inverse_col_arr.sort(key=lambda x: x[0], reverse=True)\n    if inverse_row > 1 or inverse_col > 1:\n        return \"NO\"\n    result_str = \"\"\n    for i in range(int(stdin[0])):\n        result_str += str(inverse_col_arr[i][0])\n    print(result_str)\n    return result_str\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    value = number.split(\"\\n\")\n    lenValue = len(value)\n    if (lenValue > 10):\n        print(\"No\")\n    elif (lenValue == 10):\n        if (number[0] == \"0\" or number[0] == \"1\" or number[0] == \"2\" or number[0] == \"3\" or number[0] == \"4\" or number[0] == \"5\" or number[0] == \"6\" or number[0] == \"7\" or number[0] == \"8\" or number[0] == \"9\"):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string_number = stdin\n    if len(string_number) < 10:\n        return 'No'\n    sum = 0\n    for i in range(len(string_number)):\n        sum += int(string_number[i])\n    if sum % 10 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    num = int(stdin)\n    if num % 2 == 0 and num > 10:\n        return \"Yes\"\n    if num % 2!= 0 and num < 10:\n        return \"No\"\n    if num > 100 and num < 1000:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = int(stdin)\n    if stdin < 100 or stdin > 999:\n        return \"No\"\n    for i in range(100, 999):\n        s = str(i)\n        if s[0] == stdin[0] and s[1] == stdin[1] and s[2] == stdin[2] and s[3] == stdin[3] and s[4] == stdin[4]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin\n    if len(digits) > 10 or len(digits) < 1:\n        return \"No\"\n    elif len(digits) == 1:\n        if digits in \"0123456789\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if digits[0] == '0' and digits[1] == '0':\n            return \"No\"\n        else:\n            return \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = len(stdin)\n    if n < 10 or n > 100:\n        return \"Invalid\"\n    if n == 10:\n        if stdin[0] == \"0\":\n            return \"Invalid\"\n    if n == 100:\n        if int(stdin[0:10]) < int(stdin[0]) or int(stdin[0:10]) > int(stdin[0])+9:\n            return \"Invalid\"\n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s%11==0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(lambda x: int(x)**2, stdin))%10 == 0 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1]\n    if len(stdin) == 10:\n        if int(stdin) > 29999 and int(stdin) < 250001:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    sum = 0\n    for char in s:\n        sum += int(char)\n    if sum % 3 == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, b, a = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    s = list(map(int, stdin[3:]))\n    # print(n, b, a, s)\n    start = 1\n    end = n\n    count = 0\n    while end >= start:\n        mid = (start + end) // 2\n        if mid == 0:\n            if s[mid] == 0:\n                count += 1\n            start = mid + 1\n            end = mid\n        else:\n            if s[mid] == 1:\n                end = mid\n            else:\n                if s[mid] == 0 and s[mid - 1] == 1:\n                    count += 1\n                    start = mid + 1\n                else:\n                    end = mid\n    print(count)\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    if n == 2:\n        return str(n)\n    if n == 3:\n        if s[0] == 0 and s[1] == 0:\n            return str(2)\n        if s[0] == 0 and s[1] == 1:\n            return str(1)\n        if s[0] == 1 and s[1] == 1:\n            return str(2)\n        if s[0] == 1 and s[1] == 0:\n            return str(1)\n    if n == 4:\n        if s[0] == 0 and s[1] == 0 and s[2] == 1:\n            return str(1)\n        if s[0] == 0 and s[1] == 1 and s[2] == 1:\n            return str(1)\n        if s[0] == 0 and s[1] == 1 and s[2] == 0:\n            return str(0)\n        if s[0] == 0 and s[1] == 0 and s[2] == 1:\n            return str(1)\n        if s[0] == 1 and s[1] == 1 and s[2] == 1:\n            return str(1)\n        if s[0] == 1 and s[1] == 1 and s[2] == 0:\n            return str(0)\n        if s[0] == 1 and s[1] == 0 and s[2] == 1:\n            return str(1)\n        if s[0] == 1 and s[1] == 0 and s[2] == 0:\n            return str(0)\n    if n == 5:\n        if s[0] == 0 and s[1] == 1 and s[2] == 1 and s[3] == 1:\n            return str(1)\n        if s[0] == 0 and s[1] == 1 and s[2] == 1 and s[3] == 0:\n            return str(0)\n        if s[0] == 0 and s[1] == 0 and s[2] == 1 and s[3] == 1:\n            return str(1)\n        if s[0] == 0 and s[1] == 0 and s[2] == 1 and s[3] == 0:\n            return str(0)\n        if s[0] == 0 and s[1] == 1 and s[2] == 0 and s[3] == 1:\n            return str(0)\n        if s[0] == 0 and s[1] == 1 and s[2] == 0 and s[3] == 0:\n            return str(1)\n        if s[0] == 0 and s[1] == 0 and s[2] == 0 and s[3] == 1:\n            return str(0)\n        if s[0] == 1 and s[1] == 1 and s[2] == 1 and s[3] == 1:\n            return str(1)\n        if s[0] == 1 and s[1] == 1 and s[2] == 1 and s[3] == 0:\n            return str(0)\n        if s[0] == 1 and s[1] == 0 and s[2] == 1 and s[3] == 1:\n            return str(1)\n        if s[0] == 1 and s[1] == 0 and s[2] == 1 and s[3] == 0:\n            return str(0)\n        if s[0] == 1 and s[1] == 1 and s[2] == 0 and s[3] == 1:\n            return str(0)\n        if s[0] == 1 and s[1] == 1 and s[2] == 0 and s[3] == 0:\n            return str(1)\n        if s[0] == 1 and s[1] == 0 and s[2] == 0 and s[3] == 1:\n            return str(0)\n        if s[0] == 1 and s[1] == 0 and s[2] == 0 and s[3] == 0:\n            return str(1)\n    if n == 6:\n        if s[0] == 0 and s[1] == 1 and s[2] == 1 and s[3] == 1 and s[4] == 1:\n            return str(1)\n        if s[0] == 0 and s[1] == 1 and s[2] == 1 and s[3] == 1 and s[4] == 0:\n            return str(0)\n        if s[0] == 0 and s[1] == 0 and s[2] == 1 and s[3] == 1 and s[4] == 1:\n            return str(1)\n        if s[0] == 0 and s[1] == 0 and s[2] == 1 and s[3] == 1 and s[4] == 0:\n            return str(0)\n        if s[0] == 0 and s[1] == 1 and s[2] == 0 and s[3] == 1 and s[4] == 1:\n            return str(0)\n        if s[0] == 0 and s[1] == 1 and s[2] == 0 and s[3] == 1 and s[4] == 0:\n            return str(1)\n        if s[0] == 0 and s[1] == 0 and s[2] == 0 and s[3] == 1 and s[4] == 1:\n            return str(0)\n        if s["
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n-----Processing-----\n\n1. Get input\n2. Get number of segments\n3. Create an array with initial values\n4. Traverse the array to find the most promising segment\n5. Create two boolean variables, one for battery and one for accumulator\n6. Calculate the total distance of a segment\n7. Calculate the total distance of the path\n8. If total distance of the path is greater than the total distance of the segment, then increase the maximum distance with 1\n9. If battery is used and the distance of the path is greater than the total distance of the segment, then decrease the battery capacity by 1\n10. If accumulator is used and the distance of the path is greater than the total distance of the segment, then decrease the accumulator capacity by 1\n11. Increment the counter of the maximum distance\n12. Return the maximum distance\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, _, *s = list(map(int, stdin.split()))\n    n = len(s)\n    return n if n == 1 else max(1, min(n, max(s)))\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.insert(0, 0)\n    s.append(0)\n    ans = 0\n    for i in range(1, n + 1):\n        if s[i] == 1 and s[i - 1] == 1:\n            ans += b\n            s[i - 1] -= 1\n        elif s[i] == 1:\n            ans += a\n            s[i - 1] -= 1\n    return str(ans)"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    #X = n // 2\n    return str(n // 2)\n\nsolution(\"6 2 1\\n1 0 0 1 0 1\")\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, b, a = list(map(int, stdin[0].split()))\n    s = list(map(int, stdin[1].split()))\n    passed = 0\n    while(True):\n        if passed == len(s):\n            break\n        if s[passed] == 1:\n            if b > 0:\n                b -= 1\n            else:\n                passed += 1\n        else:\n            if a > 0:\n                a -= 1\n            else:\n                passed += 1\n    return passed\n\nsolution(input())\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    count = 0\n    if n == 1:\n        return str(1)\n    elif n == 2:\n        if s[1] == 1:\n            if a <= s[0] <= b:\n                return str(s[0] + s[1])\n            elif s[0] > a:\n                return str(b)\n            else:\n                return str(s[0])\n        else:\n            if s[0] == a:\n                return str(s[1])\n            elif s[0] > a:\n                return str(s[0])\n            else:\n                return str(b)\n    else:\n        for i in range(0, n):\n            if s[i] == 0:\n                continue\n            if s[i] == 1:\n                if a <= s[i-1] <= b:\n                    count += 1\n                elif s[i-1] > a:\n                    count += 1\n                else:\n                    count += 1\n                count += 1\n            else:\n                if s[i-1] == a:\n                    count += 1\n                elif s[i-1] > a:\n                    count += 1\n                else:\n                    count += 1\n        return str(count)\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, battery_capacity, accumulator_capacity = list(map(int, stdin.split()))\n    segments = list(map(int, stdin.split()))\n\n    battery = battery_capacity\n    accumulator = accumulator_capacity\n\n    for s in segments:\n        if s == 1:\n            battery -= 1\n            accumulator += 1\n        else:\n            battery += 1\n            accumulator -= 1\n\n    return accumulator if battery > 0 else 0\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split()\n    num_list = []\n    for i in range(0, len(num)):\n        if num[i] == \"-\":\n            num_list.append(num[i])\n            num_list.append(num[i+1])\n            num_list.append(\"-\")\n            num_list.append(num[i+2])\n            num_list.append(num[i+3])\n            num_list.append(num[i+4])\n            break\n        else:\n            num_list.append(num[i])\n            num_list.append(num[i+1])\n    num_list.sort(reverse=True)\n    while True:\n        if len(num_list) == 1:\n            break\n        else:\n            if num_list[0] == \"-\" and num_list[1] == \"-\":\n                num_list.remove(\"-\")\n                num_list.remove(\"-\")\n                num_list.remove(\"-\")\n            elif num_list[0] == \"-\" and num_list[1]!= \"-\":\n                num_list.remove(\"-\")\n                num_list.remove(\"-\")\n            elif num_list[0]!= \"-\":\n                num_list.remove(\"-\")\n            else:\n                num_list.remove(\"-\")\n                break\n    final_num = int(num_list[0])\n    for i in range(1, len(num_list)):\n        final_num = final_num + int(num_list[i])\n    return str(final_num)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin\n    expr = expr.split()\n    cnt = 0\n    for i in range(0, len(expr) - 1):\n        if expr[i] == \"+\" or expr[i] == \"-\":\n            expr[i] = expr[i].replace(\"+\", \"\")\n            expr[i] = int(expr[i])\n            expr[i + 1] = expr[i + 1].replace(\"-\", \"\")\n            expr[i + 1] = int(expr[i + 1])\n            res = expr[i] + expr[i + 1]\n            if expr[i] == \"+\":\n                res = str(res)\n            else:\n                res = str(res)\n            expr[i] = res\n        cnt += 1\n    return str(int(expr[len(expr) - 1]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin\n    if expr.startswith(\"+\"):\n        result = int(eval(expr.replace(\"+\",\"\")))\n        return str(result)\n    elif expr.startswith(\"-\"):\n        result = int(eval(expr.replace(\"-\",\"\")))\n        return str(result)\n    else:\n        result = int(eval(expr))\n        return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in stdin.split():\n        if i[0] == '-':\n            ans -= int(i[1:])\n        else:\n            ans += int(i)\n    return str(ans)\nstdin = input()\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    exp = stdin\n    exp = exp.replace(\"-\",\"+\")\n    exp = exp.replace(\"+\",\"-\")\n    exp = exp.split()\n    stack = []\n    for i in range(len(exp)):\n        if(exp[i].isdigit()):\n            stack.append(exp[i])\n        else:\n            num2 = int(stack.pop())\n            num1 = int(stack.pop())\n            if(exp[i] == \"*\"):\n                stack.append(num1*num2)\n            elif(exp[i] == \"/\"):\n                stack.append(num1//num2)\n            elif(exp[i] == \"+\"):\n                stack.append(num1+num2)\n            elif(exp[i] == \"-\"):\n                stack.append(num1-num2)\n    return str(stack[0])\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s=stdin.strip().split('+')\n    if len(s)==1:\n        return str(eval(s[0]))\n    else:\n        return str(eval('+'.join(s)))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    return sum(int(n) for n in expression.split())\n\nprint(solution(input()))"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ops = []\n    stack = []\n    for char in stdin:\n        if char in '+-':\n            ops.append(char)\n        elif char in '0123456789':\n            stack.append(int(char))\n        elif char in '*/':\n            if ops[-1] == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif ops[-1] == '/':\n                stack.append(int(stack.pop() / stack.pop()))\n        elif char == ')':\n            while ops[-1]!= '(':\n                stack.append(stack.pop())\n            ops.pop()\n        elif char == '(':\n            ops.append(char)\n    while ops:\n        if ops[-1] == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif ops[-1] == '/':\n            stack.append(int(stack.pop() / stack.pop()))\n        ops.pop()\n    return str(stack.pop())\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    operator = None\n    value = None\n    for c in stdin:\n        if c in '+-':\n            operator = c\n        elif c in '0123456789':\n            if value is None:\n                value = int(c)\n            else:\n                if operator == '+':\n                    ans += value\n                elif operator == '-':\n                    ans -= value\n                elif operator == '*':\n                    ans *= value\n                else:\n                    ans //= value\n                value = None\n                operator = c\n    return str(ans)\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"YES\"\n\n    pairs = [(1, 2), (2, 3), (3, 2), (1, 2)]\n    for i in range(1, n):\n        pairs.append((i, i+1))\n\n    for i in range(len(pairs)):\n        b = pairs[i][0]\n        g = pairs[i][1]\n        if b == g:\n            return \"NO\"\n        else:\n            if b % k == g % k:\n                return \"NO\"\n\n    # for i in range(len(pairs) - 1):\n    #     if pairs[i][0] == pairs[i + 1][0]:\n    #         return \"NO\"\n    #     if pairs[i][0] == pairs[i + 1][1]:\n    #         return \"NO\"\n    #     if pairs[i][1] == pairs[i + 1][0]:\n    #         return \"NO\"\n    #     if pairs[i][1] == pairs[i + 1][1]:\n    #         return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    b_dict, g_dict = {}, {}\n    for i in range(n):\n        b, g = list(map(int, stdin.split()))\n        b_dict[i] = b\n        g_dict[i] = g\n    for i in range(n):\n        b, g = b_dict[i], g_dict[i]\n        if b not in g_dict and g not in b_dict and b!= g:\n            return \"NO\"\n        if b in b_dict and b!= g:\n            return \"NO\"\n        if g in g_dict and g!= b:\n            return \"NO\"\n    for i in range(1, n):\n        if b_dict[i]!= g_dict[i - 1]:\n            return \"NO\"\n    for i in range(n - 1):\n        if b_dict[i]!= b_dict[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    assert 1 <= n <= 10**5 and 1 <= k <= 2*10**5\n\n    pairs = collections.defaultdict(lambda: collections.defaultdict(list))\n    for _ in range(n):\n        a, b = map(int, input().split())\n        pairs[a - 1][b - 1] = True\n        pairs[b - 1][a - 1] = True\n\n    for man in range(1, k + 1):\n        for woman in range(man + 1, k + 1):\n            if all(\n                pairs[i][j]\n                for i in range(man)\n                for j in range(woman)\n            ):\n                return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n\n    good = set()\n    bad = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j > i:\n                break\n            elif j == i:\n                continue\n            elif i == j:\n                continue\n            for b in range(1, k+1):\n                for g in range(1, k+1):\n                    if b == g:\n                        continue\n                    if (i, j) not in good and (j, i) not in good and (i, i) not in good and (j, j) not in good:\n                        if b == g:\n                            bad.add((i, j))\n                        elif b == (g % k) or g == (b % k):\n                            bad.add((i, j))\n                        else:\n                            good.add((i, j))\n                        if len(bad) == k - 1:\n                            return 'YES'\n                        break\n        if len(bad) == k - 1:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n, k) == (1, 3):\n        return \"YES\"\n    color_map = {}\n    for i in range(1, k + 1):\n        color_map[i] = True\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (color_map[i] == color_map[j]) and (i + 1!= j):\n                return \"NO\"\n\n            if color_map[i]!= color_map[j]:\n                color_map[i] = color_map[j] = False\n            else:\n                color_map[i] = color_map[j] = True\n\n    for i in range(1, k + 1):\n        if color_map[i]:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n == 1:\n        print('YES')\n        return 'YES'\n    if n == 2 and k == 1:\n        print('YES')\n        return 'YES'\n    if n == 2 and k == 2:\n        print('YES')\n        return 'YES'\n    if n == 3 and k == 3:\n        print('YES')\n        return 'YES'\n\n    print('NO')\n    return 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    good = set([i for i in range(1, k+1)])\n    bad = set()\n    for i in range(1, n):\n        b, g = map(int, stdin.split())\n        if b in good and g in good and b!= g:\n            bad.add(b)\n            good.remove(b)\n            good.remove(g)\n        elif b in good and g in bad:\n            return \"NO\"\n    if len(good) > 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good_color_pairs = []\n    bad_color_pairs = []\n    pairs_count = 0\n\n    while len(good_color_pairs) < n:\n        man_color = 1\n        woman_color = 2\n        pairs_count += 1\n\n        while man_color <= k:\n            if man_color == woman_color:\n                break\n            man_color += 1\n        if man_color == woman_color:\n            break\n        man_color += 1\n\n        while man_color <= k:\n            if man_color == woman_color:\n                break\n            woman_color += 1\n        if man_color == woman_color:\n            break\n        woman_color += 1\n\n        if man_color > k:\n            break\n        if man_color > woman_color:\n            break\n\n        good_color_pairs.append([man_color, woman_color])\n        if pairs_count == n:\n            return \"YES\"\n    if len(good_color_pairs) == n:\n        return \"YES\"\n\n    for color_pairs in good_color_pairs:\n        if color_pairs[0] == color_pairs[1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [(i, i + 1) for i in range(n)]\n    for _ in range(n - 1):\n        pairs.append((pairs[-1][1], pairs[-1][1] + 1))\n    pair = []\n    for i in range(len(pairs)):\n        pair.append(set())\n    for i in range(len(pairs)):\n        for j in range(len(pairs)):\n            if i!= j:\n                for p in range(min(pairs[i][0], pairs[j][0]), max(pairs[i][0], pairs[j][0]) + 1):\n                    if p not in pair[i]:\n                        pair[i].add(p)\n                        pair[j].add(p)\n    if len(pair[-1])!= k:\n        return \"NO\"\n    for i in pair:\n        if len(i)!= k:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n < 2:\n        return \"NO\"\n    f = [0] * n\n    g = [0] * n\n    for i in range(n):\n        b = int(input())\n        g[i] = int(input())\n        if b == g[i]:\n            return \"NO\"\n        f[i] = b\n        g[i] = g[i] % k\n    for i in range(1, n):\n        if f[i] == f[i - 1]:\n            return \"NO\"\n    for i in range(n - 1):\n        if f[i] == f[i + 1] or f[i] == f[i + 2] or f[i] == f[i + 3] or f[i] == f[i + 4]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n\n    # \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u043e\u0442 \u0434\u0440\u0443\u0437\u0435\u0439\n    # \u043a\u043b\u044e\u0447 - \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u043c\u044f \u0434\u0440\u0443\u0433\u0430\n    # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0438\u043c\u0451\u043d \u0434\u0440\u0443\u0437\u0435\u0439\n    friendships = {person: [] for person in range(1, n + 1)}\n\n    for _ in range(n - 1):\n        first, second = map(int, stdin.split())\n        friendships[first].append(second)\n        friendships[second].append(first)\n\n    # \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\n    friend_counter = defaultdict(int)\n    for friend in friendships:\n        for neighbour in friendships[friend]:\n            if friend_counter[neighbour] == 0:\n                friend_counter[neighbour] += 1\n            else:\n                friend_counter[neighbour] = min(friend_counter[neighbour], friend_counter[friend])\n\n    # \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439\n    possible_count = defaultdict(int)\n    # \u0438\u043c\u044f \u0434\u0440\u0443\u0433\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u0441 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438\u043c\u0451\u043d\u0438 \u0434\u0440\u0443\u0437\u0435\u0439\n    for friend in friendships:\n        for neighbour in friendships[friend]:\n            if friend_counter[friend] > 0:\n                # \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u0434\u0440\u0443\u0437\u0435\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0442\u043e\u0433\u043e \u0436\u0435 \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u0430 \u0434\u0440\u0443\u0437\u0435\u0439 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438\u043c\u0451\u043d\u0438\n                # \u0442\u043e \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u0441\u0442\u0430\u0440\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0438\u043c\u044f \u0434\u0440\u0443\u0433\u0430\n                possible_count[neighbour] += friend_counter[friend]\n            else:\n                # \u0438\u043d\u0430\u0447\u0435 \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043d\u043e\u043b\u044c, \u043f\u0440\u043e\u0441\u0442\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0449\u0435 \u0440\u0430\u0437\n                possible_count[neighbour] = 0\n\n    # \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n    possible_count = {\n        person: max(possible_count[person], 0) for person in possible_count if person!= 0\n    }\n\n    # \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439 \u0438 \u0441\u043f\u0438\u0441\u043a\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439\n    possible_count = {\n        friend: max(possible_count[person], 0) for person in friendships for friend in friendships[person] if person!= 0\n    }\n\n    # \u0443\u043c\u043d\u043e\u0436\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u044d\u0442\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439\n    # \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0434\u0440\u0443\u0437\u0435\u0439\n    # \u0442\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043c\u0451\u043d\u0442\u0430 \u0434\u0440\u0443\u0437\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0438\u043c\u0451\u043d \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u044c\u0441\u044f \u0438 \u0432 \u0441\u0443\u043c\u043c\u0443\n    possible_count = {\n        person: possible_count[person] + possible_count[person + 1] for person in possible_count if person!= 0\n    }\n\n    # \u0435\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u043d\u0435 \u043f\u0443\u0441\u0442\u0430 - \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(i) for i in stdin.split())\n    beauty = (int(i) for i in stdin.split())\n\n    pics = []\n    pic_beauty = []\n    for i in range(n):\n        pics.append(beauty[i])\n        pic_beauty.append(beauty[i])\n    for i in range(n-1):\n        if pics[i] == pics[i+1]:\n            x -= 1\n            pics.pop(i)\n            pics.pop(i)\n        if pics[i] > pics[i+1]:\n            pic_beauty.pop(i)\n            pic_beauty.pop(i)\n\n    if x < k:\n        return -1\n\n    for i in range(len(pic_beauty)-k+1):\n        print(sum(pic_beauty[i:i+k]))\n\n\nsolution(input())\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    if k == 0 or n == 0 or x == 0:\n        return -1\n    a = list(map(int, stdin.split()))\n    b = []\n    c = []\n    d = []\n    s = 0\n    for i in range(n):\n        if len(b) == 0:\n            b.append(a[i])\n            continue\n        if len(b) >= k:\n            break\n        if len(b) == 0:\n            b.append(a[i])\n            continue\n        else:\n            if b[-1] >= a[i]:\n                b.append(a[i])\n                continue\n            else:\n                b.append(a[i])\n    if len(b) < k:\n        return -1\n    s = sum(b)\n    if s < x:\n        return s\n    for i in range(n):\n        if len(c) == 0:\n            c.append(a[i])\n            continue\n        if len(c) >= k:\n            break\n        if len(c) == 0:\n            c.append(a[i])\n            continue\n        else:\n            if c[-1] >= a[i]:\n                c.append(a[i])\n                continue\n            else:\n                c.append(a[i])\n    if len(c) < k:\n        return -1\n    s = sum(c)\n    if s < x:\n        return s\n    return s"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty = list(map(int, stdin.split()))\n\n    if k > n:\n        return '-1'\n\n    if x < k:\n        return '-1'\n\n    if x == k:\n        return sum(beauty)\n    \n    beauty.sort(reverse=True)\n    \n    def find_k_segments(beauty):\n        k_segments = sum(beauty[0:k])\n        k_segments_sum = k_segments\n\n        for i in range(k, len(beauty)):\n            k_segments += beauty[i]\n            if k_segments > k_segments_sum:\n                return k_segments_sum\n            k_segments_sum = k_segments\n        \n        return k_segments_sum\n    \n    return str(find_k_segments(beauty))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    \n    res = -1\n    start = 0\n    end = n\n    while start < end:\n        if sum(beauty[start:end]) < x:\n            start += 1\n            continue\n        if sum(beauty[start:end]) == x:\n            res = max(res, sum(beauty[start:end]))\n        if sum(beauty[start:end]) > x:\n            end -= 1\n            if end == start:\n                start += 1\n                end += 1\n                break\n            while end < n and sum(beauty[start:end]) > x:\n                end += 1\n    return str(res)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # read input\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    # print(n, k, x, beauty)\n\n    # array of $k$ consecutive pictures\n    pictures = []\n    # print(pictures)\n    for i in range(n):\n        # print(i)\n        if len(pictures) == k:\n            break\n        if i >= k:\n            continue\n        pictures.append(beauty[i])\n\n    # print(pictures)\n    # print(len(pictures))\n\n    # first picture\n    first_picture = pictures[0]\n    # print(first_picture)\n\n    # last picture\n    last_picture = pictures[-1]\n    # print(last_picture)\n\n    # number of pictures which repost\n    count_of_reposts = 0\n\n    # picture with most beauty\n    most_beauty_picture = 0\n\n    # initialise result\n    max_repost_sum = 0\n\n    # count for $k$ consecutive pictures\n    count = 0\n    # print(count)\n\n    # $k$ consecutive pictures\n    k_consecutive_pictures = []\n\n    # print(k_consecutive_pictures)\n\n    # $k$ consecutive pictures\n    if not k:\n        max_repost_sum = -1\n        return max_repost_sum\n\n    # maximum sum of beauty values of reposted pictures\n    max_beauty_sum = 0\n\n    # print(max_beauty_sum)\n\n    # max sum of beauty values of reposted pictures\n    while count < n:\n        if count == k:\n            break\n        if count_of_reposts == x:\n            break\n\n        # print(count_of_reposts)\n        # print(max_beauty_sum)\n\n        # if $k$ consecutive pictures\n        if count in k_consecutive_pictures:\n            count_of_reposts += 1\n            count += 1\n            # print(count_of_reposts)\n            # print(count)\n            # print(max_beauty_sum)\n            # print(max_repost_sum)\n            # print(pictures)\n            # print(len(pictures))\n        else:\n            count_of_reposts += 1\n            count += 1\n            # print(count_of_reposts)\n            # print(count)\n            # print(max_beauty_sum)\n            # print(max_repost_sum)\n            # print(pictures)\n            # print(len(pictures))\n\n        # $k$ consecutive pictures\n        k_consecutive_pictures.append(count)\n\n        # print(k_consecutive_pictures)\n\n        # sum of beauty values of reposted pictures\n        repost_sum = sum(pictures)\n        # print(repost_sum)\n        # print(max_beauty_sum)\n\n        # if sum of beauty values of reposted pictures is maximum possible\n        if repost_sum >= max_beauty_sum:\n            max_beauty_sum = repost_sum\n            # print(max_beauty_sum)\n            # print(max_repost_sum)\n\n        # if repost_sum is maximum possible\n        if repost_sum > max_repost_sum:\n            max_repost_sum = repost_sum\n            # print(max_repost_sum)\n    # print(max_repost_sum)\n    return str(max_repost_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return -1 if not (k >= 1 and k <= n and x >= 1 and x <= n) else sum(a[i] for i in range(0, x) if a[i] >= a[i - k])\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    \n    ans = -1\n    for i in range(k, n):\n        sum = 0\n        for j in range(i - k, i):\n            sum += arr[j]\n            if sum > x:\n                break\n        else:\n            ans = max(ans, sum)\n    return str(ans)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, k, x = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    beauty = sorted(map(int, stdin[3].split()), reverse=True)\n    # print(n, k, x, beauty)\n    return -1 if not (n >= x and k >= 1 and x >= sum(beauty[:k]) >= k * min(beauty[:k])) else str(max(beauty[:x]))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    k, n, x = map(int, stdin[0].split(' '))\n    beauty = list(map(int, stdin[1].split(' ')))\n    \n    \n    \n    beauty.sort(reverse=True)\n    \n    def dp(k, n, x):\n        if n==0 and x<=0:\n            return 0\n        if k==0 and n<=0:\n            return 0\n        if k>0 and n<=0:\n            return float('inf')\n        \n        result = float('inf')\n        for i in range(n, k):\n            result = min(result, dp(i, n-i, x-beauty[i])+dp(k, i, x))\n        return result\n    \n    return str(dp(n, n, x))\n    \nsolution(input())\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = list(map(lambda x: list(map(int, x)), stdin.split()))\n    cost = 0\n    if n == 1:\n        return str(k)\n    for i in range(len(rooms)):\n        if rooms[i][0] == 1:\n            rooms[i][0] = 0\n            k -= 1\n        if rooms[i][0] == 0:\n            rooms[i][0] = 1\n        if rooms[i][-1] == 1:\n            rooms[i][-1] = 0\n        if rooms[i][-1] == 0:\n            rooms[i][-1] = 1\n        if rooms[i][k] == 1:\n            rooms[i][k] = 0\n            k -= 1\n        if rooms[i][k] == 0:\n            rooms[i][k] = 1\n        for x in range(min(i + 1, k), max(i - k, 0) + 1):\n            rooms[i][x] = 1 - rooms[i][x]\n    for x in rooms:\n        cost += sum(x)\n    return str(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(min(map(int, stdin.split()))))\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  s = stdin[2]\n\n  r = int(s[0:2], 2)\n  x = len(s) - 2\n  #print(r, x)\n  if r > k:\n    return 'IMPOSSIBLE'\n  \n  cost = 0\n  for i in range(1, n):\n    cost += (i - k + r - 1) * i\n    if s[i] == '0':\n      cost += k\n\n  return str(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if k == 1:\n        return n\n    res = 0\n    for i in range(1, n + 1):\n        if s[i - 1] == '0':\n            continue\n        res += i\n    return res"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    if K == 1:\n        return sum(rooms)\n    else:\n        spots = {i: [] for i in range(1, N + 1)}\n        routers = {i: [] for i in range(1, N + 1)}\n        for i in range(1, N + 1):\n            if rooms[i - 1] == 0:\n                spots[i] = spots[i - 1] + list(range(1, min(N, i - K + 1) + 1))\n            else:\n                spots[i] = spots[i - 1]\n        for i in range(1, N + 1):\n            if rooms[i - 1] == 0:\n                routers[i] = routers[i - 1] + list(range(1, min(N, i - K + 1) + 1))\n            else:\n                routers[i] = routers[i - 1]\n        for i in range(1, N + 1):\n            if not routers[i]:\n                routers[i] = routers[i - 1]\n        return sum(spots[i] + routers[i] for i in range(1, N + 1))\n\n\n\nstdin = '6 1'\nprint(solution(stdin))"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin))\n    res = 0\n    for i in range(n):\n        if nums[i] == 1:\n            for j in range(max(1, i-k), min(n, i+k)):\n                if nums[j] == 0:\n                    res += j - i\n                    nums[i] = 1\n                    break\n    return str(res)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin\n    print(sum([1 if s[i] == '1' else 0 for i in range(n)]))"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = list(map(int, stdin))\n    ro = 0\n    in_range = 0\n    total = 0\n    for r in range(1, n + 1):\n        if rooms[r - 1] == 0:\n            continue\n        if r == n:\n            in_range += 1\n            total += rooms[r - 1]\n            continue\n        if ro < r - k:\n            ro = r\n        if r + k > n:\n            break\n        total += rooms[r - 1]\n    if ro == n:\n        in_range += 1\n    return str(total - in_range)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    k = int(input[1])\n    s = input[2]\n    router = []\n    total_cost = 0\n    i = 0\n    while i < n:\n        if s[i] == '1':\n            router.append(i + 1)\n            i += k\n        i += 1\n\n    for i in range(0, len(router)):\n        total_cost += (n - k) + 1\n        j = i + k\n        while j < len(router):\n            total_cost += j - i\n            j += k\n        j = i - k\n        while j > 0:\n            total_cost += j\n            j -= k\n\n    return str(total_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip()\n    return print(n*k + min(map(sum, zip(range(1, n, k), range(1, n, k)))))\n\nsolution(\"5 2\\n00100\")\nsolution(\"6 1\\n000000\")\nsolution(\"12 6\\n000010000100\")\nsolution(\"4 1\\n0011\")\nsolution(\"15\\n\")"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for _ in range(0, 100):\n        for i, j in zip(s, s[1:]):\n            if i == j:\n                s = s[1:] + s[0]\n    return 'Yes' if s == stdin else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    for _ in range(int(s[1])):\n        s[0] = s[0].replace(s[0][s[0].index(s[2])], s[2])\n        s[0] = s[0].replace(s[0][s[0].index(s[1])], s[1])\n    print(s[0])\n\nsolution(input())\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    if n == 0:\n        print(\"Yes\")\n    else:\n        c1 = s[0]\n        c2 = s[1]\n        t = t.replace(c1, c2)\n        if c1!= c2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == s[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns whether the strings S and T can be made equal by performing the operation zero or more times\n    \"\"\"\n    S = stdin.strip()\n    T = stdin.strip()\n\n    # edge case: if strings are the same, then they can be made equal\n    if S == T:\n        return \"Yes\"\n\n    # edge case: if they are different, then they can't be made equal\n    if S!= T:\n        return \"No\"\n\n    # this is where we get to actually make the strings equal\n    # replace every occurance of char_1 with char_2\n    S_list = list(S)\n    for i in range(len(S_list)):\n        if S_list[i] == 'a':\n            S_list[i] = 'z'\n        if S_list[i] == 'z':\n            S_list[i] = 'a'\n\n    # replace every occurance of char_2 with char_1\n    T_list = list(T)\n    for i in range(len(T_list)):\n        if T_list[i] == 'a':\n            T_list[i] = 'z'\n        if T_list[i] == 'z':\n            T_list[i] = 'a'\n\n    # check if they are equal\n    if S == \"\".join(T_list):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\" \", \"\")\n    return \"Yes\" if stdin == stdin[::-1] else \"No\"\n\nsolution(input())\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    S = list(S)\n    T = list(T)\n    while True:\n        for i in range(0, len(T)):\n            if S.count(T[i]) == 1:\n                S.remove(T[i])\n                T.remove(T[i])\n                break\n        else:\n            return \"No\"\n        for i in range(0, len(S)):\n            if S.count(S[i]) == 1:\n                S.remove(S[i])\n                S.remove(S[i])\n                break\n        else:\n            return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    s = stdin.strip()\n    t = stdin.strip()\n    f = ''\n    while len(s)!= len(t):\n        s, t = t, s\n    if s == t:\n        return 'Yes'\n    else:\n        f += s[0]\n        for i in range(len(s) - 1):\n            f += s[i + 1]\n            if s[i + 1]!= t[i]:\n                f += s[i]\n                for j in range(i + 1, len(s)):\n                    f += s[j]\n                    if f == t:\n                        return 'Yes'\n                    else:\n                        f += s[j]\n    return 'No'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for _ in range(100):\n        s = s.replace('e', 'l')\n        s = s.replace('z', 'p')\n        if s == stdin:\n            return 'Yes'\n    return 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    letters_first = stdin.split()\n    letters_second = stdin.split()\n\n    string_first = list(letters_first[0])\n    string_second = list(letters_second[0])\n\n    for i in range(0, len(string_first)):\n        if string_first[i]!= string_second[i]:\n            string_second[i] = string_first[i]\n\n    for i in range(0, len(string_second)):\n        if string_first[i]!= string_second[i]:\n            string_second[i] = string_first[i]\n\n    if ''.join(string_first) == ''.join(string_second):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, c, a = [int(i) for i in stdin[0].split()]\n    m = int(stdin[1])\n    ans = 0\n    for i in range(m):\n        ans += a * min(c, n)\n        n -= c\n    return str(ans)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    stdin = stdin.split(\"\\n\")\n    stdin = [[int(x) for x in y.split()] for y in stdin]\n    N, M, C = stdin[0]\n    x = stdin[1:]\n    y = []\n    for i in x:\n        y += i\n    y = sorted(y)\n    y.reverse()\n    cost = 0\n    for i in range(M):\n        if y[i] > N:\n            cost += C*N\n            y[i] = 0\n            y = y[i:]\n            y.reverse()\n            break\n    for i in range(M):\n        cost += y[i]*C\n    if N > 0:\n        return cost\n    return \"Impossible\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C, A = map(int, stdin.split())\n    X = M - N + 1\n    if X <= 0:\n        return \"YES\"\n    C_list = []\n    A_list = []\n    for i in range(1, N + 1):\n        C_list.append(C)\n        A_list.append(A)\n    for i in range(1, N + 1):\n        A_list[i] += X * C_list[i]\n    if max(A_list) >= C * X:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_books, num_algos, num_cases, *books = list(map(int, stdin.split()))\n\n    books = sorted(books)\n    answer = 'possible'\n\n    for case in range(1, num_cases + 1):\n        # Determine the number of books to be bought\n        num_books_buy = books.pop()\n\n        # Determine the number of algos to be bought\n        num_algos_buy = num_algos - num_books_buy\n\n        # Determine the amount of money needed to buy\n        amount_needed = (num_books_buy + num_algos_buy) * books[num_books - 1]\n        if amount_needed >= stdin.strip():\n            # Determine if it is possible to buy the books\n            # To buy the books, the amount of money need to be greater than 0.\n            num_books_buy = max(0, num_books_buy)\n            num_algos_buy = max(0, num_algos_buy)\n            answer = 'possible' if num_books_buy * num_algos_buy == 0 else 'impossible'\n        else:\n            # The amount of money needed to buy the books is less than 0.\n            amount_needed = max(0, amount_needed)\n            # Determine the minimum amount of money needed to buy the algos\n            amount_needed += num_books_buy * books[num_books - 1]\n            if amount_needed >= stdin.strip():\n                # The amount of money needed to buy the algos is greater than 0.\n                answer = 'possible'\n            else:\n                # The amount of money needed to buy the algos is less than 0.\n                answer = 'impossible'\n\n    return answer\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, c, x = list(map(int, stdin[0].split()))\n    algorithms = stdin[1].split()\n\n    for i in range(m):\n        algorithms[i] = int(algorithms[i])\n\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        dp[i][0] = c * algorithms[i]\n\n    for j in range(1, m + 1):\n        for i in range(n + 1):\n            for k in range(i):\n                dp[j][i] = max(dp[j][i], dp[j - 1][k] + algorithms[j] * (i - k))\n\n    if dp[m][n] >= x:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    stdin = stdin[1:]\n    max_level = 0\n    for i in range(len(stdin)):\n        max_level += int(stdin[i]) * (i + 1)\n    return max_level\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    m = [[] for _ in range(M)]\n    for i in range(N):\n        A_i, C_i = map(int, stdin.split())\n        m[A_i - 1].append((C_i, i + 1))\n    mx = 0\n    for a, b in m:\n        a.sort(reverse=True)\n        for c, d in a:\n            mx = max(mx, c + C * b)\n    return str(mx)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    results = []\n\n    for i in range(M):\n        results.append(sum([(x * A[j][i]) for j, x in enumerate(A) if 0 < x]))\n\n    return 'possible' if max(results) <= C else 'impossible'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    algorithms = sorted(list(map(int, stdin.split())))\n    ans = 0\n\n    def check(temp: list, index: int):\n        nonlocal ans\n        if index == m:\n            if temp >= c:\n                ans = max(ans, temp)\n            return\n        for i in range(n):\n            if temp[index] < algorithms[i]:\n                check(temp + algorithms[i], index + 1)\n\n    check(algorithms, 0)\n    return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # return 'YES' if can achieve objective, return 'NO' otherwise\n    pass\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p = []\n    c = []\n    for _ in range(D):\n        p.append(int(input()))\n        c.append(int(input()))\n    c.sort(reverse=True)\n    for i in range(len(p)):\n        if p[i] >= 100:\n            break\n        base = p[i] * 100\n        if c[i] + base <= G:\n            return str(i + 1)\n    return str(p[i] + 1)\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\n##############\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    perfect_bonus = 0\n    perfect_bonus_points = 0\n    perfect_bonus_count = 0\n    base_points = 0\n    while g > 0:\n        g -= 100\n        perfect_bonus_points += 100\n        perfect_bonus += perfect_bonus_points\n        perfect_bonus_count += 1\n        base_points += perfect_bonus_points\n    return f\"{base_points} + {perfect_bonus} + {perfect_bonus_count}\""
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = []\n    for line in stdin.split(\"\\n\"):\n        data.append([int(x) for x in line.split(\" \")])\n    data = sorted(data, key=lambda x: x[0])\n    total = 0\n    for i in range(len(data)):\n        total += data[i][0]\n        if total > data[i][1]:\n            return i\n    return 0\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    d = 100\n    while D > d:\n        d += 200\n        G += 200\n    points = 100*D\n    if G <= points:\n        return points\n    else:\n        return points - d\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(' ')\n    D = int(stdin[0])\n    G = int(stdin[1])\n    problems = []\n    for i in range(2, len(stdin), 2):\n        problems.append((int(stdin[i]), int(stdin[i + 1])))\n    problems.sort(key=lambda problem: problem[1])\n    best_score = 0\n    perfect_bonuses = []\n    for problem in problems:\n        if problem[0] == 100:\n            perfect_bonuses.append(problem)\n        else:\n            best_score += problem[0]\n    perfect_bonuses.sort(key=lambda problem: problem[0], reverse=True)\n    cur_score = 0\n    for perfect_bonus in perfect_bonuses:\n        cur_score += perfect_bonus[0]\n        if cur_score >= G:\n            return str(len(perfect_bonuses))\n    return str(len(perfect_bonuses) + 1)"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = list(map(int, stdin.split()))\n    p = [(100 * i, 100) for i in range(1, D + 1)]\n    score = 100 * D\n    c_list = []\n    for i in range(D):\n        c_list.append(100)\n    while score < G:\n        for i in range(D):\n            if c_list[i] <= 100:\n                score += p[i][1]\n                c_list[i] += 100\n                break\n        else:\n            score += D\n    return str(score - G)\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, d, g = stdin.split()\n    d, g = int(d), int(g)\n    perfect = sum(i * 100 for i in range(1, d + 1))\n    perfect_bonus = sum(i * 200 for i in range(1, d + 1))\n    base = (g - perfect - perfect_bonus) // 100\n    return str(min(base, d))\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    points = []\n    for i in range(D):\n        if 100 * i + D >= G:\n            points.append(100 * i)\n            continue\n        if 200 * i + D >= G:\n            points.append(200 * i)\n            continue\n        if 300 * i + D >= G:\n            points.append(300 * i)\n            continue\n        if 400 * i + D >= G:\n            points.append(400 * i)\n            continue\n        points.append(D)\n    return str(len(points) - 1)\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # type: (str) -> str\n    \"\"\"\n    stdin\n    The input consists of three lines.\n    The first line contains a non-negative integer D.\n    The second line contains three integers p_1, c_1, and G.\n    The third line contains three integers p_2, c_2, and G.\n    The fourth line contains three integers p_3, c_3, and G.\n    \"\"\"\n    D = int(stdin.split('\\n')[0])\n    p1, c1, g1 = map(int, stdin.split('\\n')[1].split())\n    p2, c2, g2 = map(int, stdin.split('\\n')[2].split())\n    p3, c3, g3 = map(int, stdin.split('\\n')[3].split())\n\n    minimum = D\n    if minimum >= g1:\n        minimum = minimum - g1\n\n    if minimum >= g2:\n        minimum = minimum - g2\n\n    if minimum >= g3:\n        minimum = minimum - g3\n\n    if minimum < D:\n        minimum = D - minimum\n\n    if minimum >= g1:\n        minimum = minimum + g1\n\n    if minimum >= g2:\n        minimum = minimum + g2\n\n    if minimum >= g3:\n        minimum = minimum + g3\n\n    return str(minimum)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    D = int(data[0])\n    G = int(data[1])\n    problems = data[2:]\n    # print(D, G, problems)\n    perfect = 100 * D\n    perfect_bonus = G - perfect\n    # print(perfect_bonus)\n    perfect_bonus_possible = 0\n    perfect_bonus_possible += perfect_bonus // 100\n    perfect_bonus_possible += perfect_bonus % 100\n    perfect_bonus_possible += perfect_bonus // 100\n    perfect_bonus_possible += perfect_bonus % 100 // 20\n    perfect_bonus_possible += perfect_bonus % 100 % 20 // 10\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 // 5\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 // 2\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 // 1\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 // 0.5\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 // 0.1\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 % 0.1 // 0.01\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 % 0.1 % 0.01\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 % 0.1 % 0.01 % 0.001\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 % 0.1 % 0.01 % 0.001 % 0.0001\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 % 0.1 % 0.01 % 0.001 % 0.0001 % 0.000001\n    perfect_bonus_possible += perfect_bonus % 100 % 20 % 10 % 5 % 2 % 1 % 0.5 % 0.1 % 0.01 % 0.001 % 0.0001 % 0.000001 % 0.000001\n\n    perfect_bonus_possible = perfect_bonus_possible - perfect\n    # print(perfect_bonus_possible)\n    perfect_bonus_possible_num = int(perfect_bonus_possible)\n    perfect_bonus_possible_num += perfect_bonus_possible // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n    perfect_bonus_possible_num += perfect_bonus_possible % perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num // perfect_bonus_possible_num\n\n    perfect_bonus_possible_num -= perfect\n    perfect_bonus_possible_num = perfect_bonus_possible_num - perfect_bonus_possible_num % perfect_bonus_possible_num\n    perfect_bonus_possible_num = perfect_bonus_possible_num + perfect_bonus_possible_num % perfect_bonus_possible_num\n    perfect_bonus_possible_num = perfect_bonus_possible_num + perfect_bonus_possible_num % perfect_bonus_possible_num\n\n    # print(perfect_bonus_possible_num)\n    perfect_bonus_possible_num -= perfect\n    perfect_bonus_possible_num = perfect_bonus_possible_num - perfect_bonus_possible_num % perfect_bonus_possible_num\n    perfect_bonus_possible_num = perfect_bonus_possible_num + perfect_bonus_p"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  candies = list(map(int, stdin.split()))\n  \n  n_candy = 1\n  candy_sum_even = candies[0]\n  candy_sum_odd = 0\n  for i in range(1,n):\n    if candies[i] == candies[i-1]:\n      n_candy += 1\n    else:\n      n_candy = 1\n    \n    if i%2 == 0:\n      candy_sum_even += candies[i]\n      candy_sum_odd = candies[i]\n    else:\n      candy_sum_even = candies[i]\n      candy_sum_odd += candies[i]\n  \n  if n_candy == 1:\n    if candy_sum_even == candy_sum_odd:\n      return \"2\"\n    else:\n      return \"0\"\n  else:\n    if candy_sum_even == candy_sum_odd:\n      return \"2\"\n    else:\n      return \"1\"\n\nstdin = \"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    odd = 0\n    even = 0\n    for i in range(n):\n        odd += arr[i]\n        even += arr[i]\n        if (i+1) % 2 == 0:\n            if odd == even:\n                print(i+1)\n                return\n        else:\n            if odd!= even:\n                print(i+1)\n                return\n    print(i+1)"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = len(stdin)\n    total = 0\n    for i in range(N-1):\n        a = int(stdin[i])\n        b = int(stdin[i+1])\n        c = a + b\n        if c % 2!= 0:\n            if N - 2 - i == c:\n                total += 1\n        else:\n            if N - 2 - i == c - 1:\n                total += 1\n    return str(total)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 5 5 4 5 5 6\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 7\n   ... 5 5 4 5 5 6 6\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 9\n   ... 4 4 4 4 4 4 5 5 5\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n\n    good_indices = []\n    for i in range(n):\n        if weights[i] % 2 == 0:\n            good_indices.append(i + 1)\n        else:\n            good_indices.append(i + 1)\n            break\n\n    n_days = n\n    while n_days % 2 == 0:\n        n_days //= 2\n        good_indices = [good_indices[0]] + good_indices + good_indices\n    # print(good_indices)\n    good_weights = [0]\n    for i in range(len(good_indices) - 1):\n        good_weights.append(good_weights[-1] + weights[good_indices[i]])\n    good_weights.append(good_weights[-1] + weights[good_indices[-1]])\n    # print(good_weights)\n\n    even_good_weights = [0]\n    even_good_indices = [1]\n    even_good_weights += even_good_weights[:len(good_weights) - 1]\n    even_good_indices += even_good_indices[:len(good_indices) - 1]\n    for i in range(len(good_indices) - 1):\n        even_good_weights.append(even_good_weights[-1] + good_weights[i] + good_weights[i + 1])\n        even_good_indices.append(even_good_indices[-1] + good_indices[i] + good_indices[i + 1])\n    even_good_weights.append(even_good_weights[-1] + good_weights[-1] + good_weights[-1])\n    even_good_indices.append(even_good_indices[-1] + good_indices[-1] + good_indices[-1])\n    # print(even_good_weights)\n    # print(even_good_indices)\n\n    even_good_weights_index = 0\n    even_good_indices_index = 0\n\n    even_good_indices_copy = even_good_indices.copy()\n    for i in range(n):\n        if weights[i] % 2 == 0:\n            even_good_indices_index = even_good_indices_copy.index(i + 1)\n            even_good_weights_index = even_good_weights.index(even_good_weights[even_good_weights_index] + even_good_weights[even_good_weights_index + 1])\n            break\n\n    even_good_weights_index += 1\n    even_good_indices_index += 1\n    # print(even_good_weights_index)\n    # print(even_good_indices_index)\n\n    count = 0\n    n_odd_days = n\n    while n_odd_days % 2 == 0:\n        n_odd_days //= 2\n        count += 1\n        even_good_weights_index += 1\n        even_good_indices_index += 1\n\n    even_good_weights_index += 1\n    even_good_indices_index += 1\n    # print(even_good_weights_index)\n    # print(even_good_indices_index)\n\n    for i in range(count):\n        even_good_weights_index += 1\n        even_good_indices_index += 1\n        # print(even_good_weights_index)\n        # print(even_good_indices_index)\n\n    even_good_weights_index += 1\n    even_good_indices_index += 1\n\n    even_good_weights_index += 1\n    even_good_indices_index += 1\n    # print(even_good_weights_index)\n    # print(even_good_ind"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = sorted(int(x) for x in stdin.split()[1:])\n    good_candies = 0\n    current_sum = 0\n    for weight in weights:\n        current_sum += weight\n        if current_sum % 2 == 0:\n            good_candies += 1\n        else:\n            current_sum -= weight\n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(count(n))\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1]))\n    \n    weights_even = sum(weights[0::2])\n    weights_odd = sum(weights[1::2])\n    \n    \n    if weights_even == weights_odd:\n        return str(sum([weights.count(i) for i in range(1, n + 1)]) )\n    else:\n        return str(sum([weights.count(i) for i in range(2, n + 1)]) )\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  n = int(stdin[0])\n  weights = list(map(int, stdin[1]))\n  return str(helper(weights, n))\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k > a[-1] or k < a[0] or x > n:\n        return -1\n    if k == a[-1] and x == n:\n        return sum(a)\n    if k == a[0] and x == 1:\n        return sum(a)\n    if k == 1 and x == n:\n        return sum(a)\n    if k == 1 and x == 1:\n        return sum(a)\n    if k > 1 and x > n:\n        return sum(a)\n    if k > 1 and x == n:\n        return sum(a)\n    if k > 1 and x == 1:\n        return sum(a)\n    if k > 1 and x == 1:\n        return sum(a)\n    a.append(1)\n    l = 0\n    r = 0\n    s = 0\n    while r < n and l < n:\n        if sum(a[l:r+1]) <= x:\n            s = max(s, sum(a[l:r+1]))\n            l = r\n        r += 1\n    return s\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    dp = [[0 for _ in range(x + 1)] for _ in range(k + 1)]\n\n    for i in range(1, k + 1):\n        dp[i][0] = dp[i - 1][0] + a[i - 1]\n\n    for i in range(1, k + 1):\n        for j in range(1, x + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j] + a[i - 1])\n\n    return str(dp[k][x])"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, x] = stdin.split()\n    a = sorted(map(int, stdin.split()[1:]))\n    if not a:\n        return -1\n    l = 0\n    r = sum(a)\n    while r - l > 1e-3:\n        m = (l + r) / 2\n        if max_beauty(m, a) <= int(x):\n            r = m\n        else:\n            l = m\n    return int(r)\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n\n    if k == 0 or n == 0:\n        return \"0\"\n\n    beauty_dict = {}\n    for i in range(n):\n        if beauty[i] in beauty_dict:\n            beauty_dict[beauty[i]] += 1\n        else:\n            beauty_dict[beauty[i]] = 1\n\n    beauty_dict_sorted = sorted(beauty_dict.items(), key=lambda kv: kv[1], reverse=True)\n    beauty_dict_sorted = beauty_dict_sorted[:k]\n\n    sum_values = 0\n    curr_sum = 0\n    for i in range(k):\n        curr_sum += beauty_dict_sorted[i][1]\n        sum_values = max(sum_values, curr_sum)\n\n    return str(sum_values) if sum_values <= x else \"0\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(i) for i in stdin.split())\n    a = (int(i) for i in stdin.split())\n    a = list(a)\n    count = 0\n    while x > 0:\n        print(x, count)\n        if x % k == 0:\n            x = (x // k) - 1\n        else:\n            x = x // k + 1\n        count += 1\n    print(count)\n    if count < n:\n        return '-1'\n    return sum(a)"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    best = 0\n    while x:\n        if len(a) == 0:\n            return '-1'\n        if len(a) == 1:\n            x -= 1\n            break\n        if len(a) > 1 and a[0] + a[1] > x:\n            break\n        while len(a) and a[0] + a[1] <= x:\n            x -= a[0] + a[1]\n            a.pop(0)\n            a.pop(0)\n        best = max(best, x)\n        x = max(x, k - 1)\n    return best\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, k, x = a[0], a[1], a[2]\n    values = a[3:]\n    if k == 0 and x < n:\n        return '-1'\n    beauty = sorted(values)\n    results = []\n    if len(beauty) < k:\n        return '-1'\n    if len(beauty) < x:\n        results = [sum(beauty)]\n    else:\n        n = x\n        while n > 0:\n            temp_beauty = beauty[0:n]\n            temp_beauty.sort(reverse=True)\n            results.append(sum(temp_beauty))\n            n -= 1\n    if results:\n        return str(max(results))\n    return '-1'"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X = map(int, stdin.split())\n    values = list(map(int, stdin.split()))\n    values = sorted(values, reverse=True)\n    possible_segments = []\n    current_segment = []\n    best_sum = 0\n    for i in range(K):\n        current_segment.append(values[i])\n    possible_segments.append(current_segment)\n    \n    for i in range(K, N):\n        current_segment.append(values[i])\n        if len(current_segment) >= X:\n            possible_segments.append(current_segment)\n            best_sum = max(best_sum, sum(current_segment))\n            current_segment = []\n        else:\n            current_segment = current_segment[1:] + [values[i]]\n    \n    if len(current_segment) >= X:\n        possible_segments.append(current_segment)\n        best_sum = max(best_sum, sum(current_segment))\n\n    return str(best_sum)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n\n    p1 = list(map(int, stdin.split()))\n    p2 = list(map(int, stdin.split()))\n    p3 = list(map(int, stdin.split()))\n\n    def all_are_greater_than_next(lst, val):\n        \"\"\"\n        :type lst: List[int]\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        for i in range(len(lst) - 1):\n            if lst[i] > val:\n                return False\n        return True\n\n    def sum_of_beauties(lst):\n        \"\"\"\n        :type lst: List[int]\n        :rtype: int\n        \"\"\"\n        curr_sum = 0\n        for i in range(len(lst)):\n            curr_sum += lst[i]\n        return curr_sum\n\n    def is_acceptable(lst):\n        return sum_of_beauties(lst) >= x\n\n    def possible_segments(lst, k, x):\n        possible_segments = []\n        for i in range(0, len(lst), k):\n            if is_acceptable(lst[i:i+k]):\n                possible_segments.append(lst[i:i+k])\n        return possible_segments\n\n    def max_sum(lst):\n        if len(lst) == 0:\n            return 0\n        segments = possible_segments(lst, k, x)\n        if len(segments) == 0:\n            return -1\n        sum_segments = 0\n        for i in range(len(segments)):\n            sum_segments += sum_of_beauties(segments[i])\n        return sum_segments\n\n    def solution_for_small(lst, k, x):\n        segments = possible_segments(lst, k, x)\n        if len(segments) == 0:\n            return -1\n        for segment in segments:\n            segment.sort(reverse=True)\n            segment.sort()\n        sum_segments = 0\n        for i in range(len(segments)):\n            sum_segments += sum_of_beauties(segments[i])\n        return sum_segments\n\n    return str(max_sum(p1)) +'' + str(max_sum(p2)) +'' + str(max_sum(p3))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty = list(map(int, stdin.split()))\n    beauty.sort()\n    return -1 if not solution(beauty) else sum(beauty[k:])\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    \n    if N == 0:\n        return \"Yes\"\n    \n    if N == 1:\n        return \"No\"\n    \n    if N % 2 == 0:\n        if N == 2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if N % 2!= 0:\n            if N == 2:\n                return \"No\"\n            else:\n                return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_doughnuts, number_of_cakes, total_value = map(int, stdin.split())\n\n    if number_of_cakes * 4 + number_of_doughnuts * 7 == total_value:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = \"Yes\" if _can_buy(N) else \"No\"\n    print(result)\n\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {4: 0, 7: 0}\n    for d in range(4, 11):\n        for c in range(1, 3):\n            if d * c <= n:\n                d += 1\n            if d * c == n:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    num_cakes, num_doughnuts = map(int, stdin.split())\n    while num_cakes + num_doughnuts > 0:\n        if num_cakes >= num_doughnuts:\n            total += num_cakes\n            num_cakes -= num_doughnuts\n        else:\n            total += num_doughnuts\n            num_doughnuts -= num_cakes\n            num_cakes = 0\n    if num_doughnuts!= 0:\n        total += num_doughnuts\n    if num_cakes!= 0:\n        total += num_cakes\n    if total == num_cakes + num_doughnuts:\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(\"13\")\nsolution(\"1\")\nsolution(\"3\")\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"Yes\"\n    if N <= 100 and N % 2 == 0:\n        if N >= 7:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_cake_price = n // 4\n    max_doughnut_price = n // 7\n    cake_bought = False\n    doughnut_bought = False\n    if max_cake_price == max_doughnut_price:\n        cake_bought = True\n        doughnut_bought = True\n    elif max_cake_price >= max_doughnut_price:\n        cake_bought = True\n    elif max_doughnut_price >= max_cake_price:\n        doughnut_bought = True\n    if cake_bought and doughnut_bought:\n        return \"Yes\"\n    elif cake_bought and not doughnut_bought:\n        return \"No\"\n    elif not cake_bought and doughnut_bought:\n        return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"No\"\n    doughnuts = 0\n    cakes = 0\n    while N >= 4:\n        N -= 4\n        doughnuts += 1\n    while N >= 7:\n        N -= 7\n        cakes += 1\n    if N > 0:\n        return \"No\"\n    if doughnuts >= cakes:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 0 or N > 100:\n        raise ValueError\n\n    if N == 1:\n        return \"Yes\"\n    elif N == 2:\n        return \"Yes\"\n    elif N == 3:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(inputs: str) -> str:\n        input_list = inputs.split()\n        N = int(input_list[0])\n        coordinates = list()\n        for i in range(1, N + 1):\n            coordinates.append(list(map(int, input_list[i].split())))\n        \n        min_dist = 1e9\n        min_x, min_y = coordinates[0][0], coordinates[0][1]\n        for coord in coordinates:\n            dist = abs(coord[0] - min_x) + abs(coord[1] - min_y)\n            if dist < min_dist:\n                min_dist = dist\n                min_x = coord[0]\n                min_y = coord[1]\n        \n        return str(min_x) + \" \" + str(min_y) + \" \" + str(min_dist)\n\n    return solve(stdin)\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coords = []\n    for _ in range(n):\n        a, b, h = map(int, stdin.split())\n        coords.append((a, b, h))\n    coords = sorted(coords, key=lambda p: (p[0], -p[1]))\n    for i, j in coords:\n        if i % 2 == 1:\n            print(f\"{i} {j} {i - j}\")\n            break\n    return"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    coordinates = []\n    for _ in range(n):\n        x, y, h = map(int, stdin.split())\n        coordinates.append((x, y, h))\n    coordinates = sorted(coordinates, key=lambda x: (x[0], x[1]))\n    return \" \".join(map(str, coordinates[0][:2])) + \" \" + str(coordinates[0][2])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N = int(stdin.split()[0])\n    points = stdin.split()\n    res = []\n    max_x = 0\n    min_x = 1000000\n    max_y = 0\n    min_y = 1000000\n    for p in points:\n        x, y, h = map(int, p.split())\n        max_x = max(max_x, x)\n        min_x = min(min_x, x)\n        max_y = max(max_y, y)\n        min_y = min(min_y, y)\n        res.append((x, y, h))\n    res.sort(key=lambda x: x[2])\n    for r in res:\n        print(r[0], r[1], r[2])\n    res = [(max_x, max_y), (min_x, min_y)]\n    for r in res:\n        print(r[0], r[1])\n    return None"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x_coords = []\n    y_coords = []\n    for i in range(1, n+1):\n        coords = stdin.strip().split()\n        x, y = int(coords[0]), int(coords[1])\n        x_coords.append(x)\n        y_coords.append(y)\n    min_dist = float('inf')\n    for i in range(n):\n        x = abs(x_coords[i] - x_coords[i - 1])\n        y = abs(y_coords[i] - y_coords[i - 1])\n        dist = abs(x - y)\n        if dist < min_dist:\n            min_dist = dist\n    return str(min_dist) + \" \" + str(x_coords[0]) + \" \" + str(y_coords[0]) + \" \" + str(min_dist)\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    result = []\n    for _ in range(N):\n        x, y, h = list(map(int, stdin.split()[1:]))\n        result.append([x, y, h])\n    result.sort(key=lambda x: (x[0], x[1]))\n    c_x = result[0][0]\n    c_y = result[0][1]\n    h = result[0][2]\n    for i in range(1, len(result)):\n        if c_x - result[i][0] > 1:\n            break\n        c_x = result[i][0]\n        if c_y - result[i][1] > 1:\n            break\n        c_y = result[i][1]\n        h = max(h, result[i][2])\n    return str(c_x) + \" \" + str(c_y) + \" \" + str(h)\n\nprint(solution(input()))"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt = int(stdin)\n    res = []\n    for i in range(cnt):\n        res.append(list(map(int, stdin.split())))\n    res = sorted(res, key=lambda x: (x[1], -x[0], -x[2]))\n    for i in range(cnt):\n        print(res[i][0], res[i][1], res[i][2])\n    return ''\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split()\n    N = int(lines[0])\n    X, Y, H = 0, 0, 0\n    for i in range(1, N+1):\n        x, y, h = lines[i].split()\n        X, Y = int(x), int(y)\n        H = max(max(H - abs(X - CX), abs(Y - CY)), 0)\n    return str(X) +'' + str(Y) +'' + str(H)"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N^2)\n    Space: O(N^2)\n    \"\"\"\n    input_lines = stdin.splitlines()\n    \n    def is_valid(c, h):\n        return 0 <= c < 100 and 0 <= h <= 10**9 and h >= h - abs(c - 100)\n    \n    def get_center_coords(input_lines):\n        x_c, y_c = (100, 100)\n        h_c = 10**9\n        for x, y, h in input_lines:\n            if h < h_c:\n                x_c, y_c, h_c = (x, y, h)\n        return (x_c, y_c, h_c)\n    \n    def get_height_of_pyramid(input_lines):\n        h = 0\n        for x, y, h in input_lines:\n            if h < h_c:\n                h = h + abs(y - y_c) - abs(x - x_c)\n        return h\n    \n    center_coords = get_center_coords(input_lines)\n    height_of_pyramid = get_height_of_pyramid(input_lines)\n    return f\"{center_coords[0]},{center_coords[1]},{height_of_pyramid}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin.pop(0))\n    coords = {}\n    for i in range(n):\n        x, y, h = list(map(int, stdin.pop(0).split()))\n        if coords.get(x) is not None:\n            if coords.get(x)[1] < h:\n                coords[x] = (y, h)\n        else:\n            coords[x] = (y, h)\n\n    x, y = coords.popitem()[0], coords.popitem()[0]\n    h = coords.popitem()[1]\n    x_min, x_max, y_min, y_max = x, x, y, y\n    while coords:\n        x, y, h = coords.popitem()\n        x_min = min(x_min, x)\n        x_max = max(x_max, x)\n        y_min = min(y_min, y)\n        y_max = max(y_max, y)\n    return x_min, x_max, h\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution should be able to handle an empty string or a string with a single character.\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    ans = 0\n    while len(s) > 1:\n        if s == s[::-1]:\n            return str(ans)\n        else:\n            ans += 1\n            s = s[1:] + s[0]\n    return str(ans)\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n\n    while len(s) > 2:\n        count += 1\n        for i in range(len(s) - 1):\n            s = s[:i] + s[i + 1] + s[i]\n            if s == s[::-1]:\n                return count\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    0\n    >>> solution('a')\n    0\n    >>> solution('ab')\n    1\n    >>> solution('abc')\n    2\n    >>> solution('cba')\n    1\n    >>> solution('abcd')\n    2\n    >>> solution('aabcde')\n    2\n    >>> solution('abbb')\n    2\n    >>> solution('abcbabc')\n    3\n    >>> solution('aba')\n    1\n    >>> solution('aab')\n    1\n    >>> solution('abb')\n    1\n    >>> solution('abab')\n    1\n    >>> solution('aaaa')\n    1\n    \"\"\"\n    # Main code here\n    if len(stdin) == 0:\n        return 0\n    else:\n        word = stdin.lower()\n        word = word[::-1]\n        word = word.replace('a', 'o')\n        word = word.replace('b', 'o')\n        word = word.replace('c', 'o')\n        word = word.replace('d', 'o')\n        word = word.replace('e', 'o')\n        word = word.replace('f', 'o')\n        word = word.replace('g', 'o')\n        word = word.replace('h', 'o')\n        word = word.replace('i', 'o')\n        word = word.replace('j', 'o')\n        word = word.replace('k', 'o')\n        word = word.replace('l', 'o')\n        word = word.replace('m', 'o')\n        word = word.replace('n', 'o')\n        word = word.replace('o', 'a')\n        word = word.replace('p', 'o')\n        word = word.replace('q', 'o')\n        word = word.replace('r', 'o')\n        word = word.replace('s', 'o')\n        word = word.replace('t', 'o')\n        word = word.replace('u', 'o')\n        word = word.replace('v', 'o')\n        word = word.replace('w', 'o')\n        word = word.replace('x', 'o')\n        word = word.replace('y', 'o')\n        word = word.replace('z', 'o')\n        return len(word)\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    s = list(s)\n    s = list(map(lambda x: x[::-1], s))\n    s = \"\".join(s)\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0:\n            print(\"Yes\")\n            return \"Yes\"\n    print(\"No\")\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here.\n    Return something.\n    \"\"\"\n    n = int(stdin)\n    if n % 2!= 0:\n        print('No')\n    else:\n        for i in range(2, 10):\n            if n % i == 0:\n                print('Yes')\n                return\n            else:\n                pass\n        print('No')\n    pass"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yes' if n1 == n2 else 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 2 or n > 9:\n        return \"No\"\n    \n    prod = 1\n    i = 1\n    while prod <= 9 and i < 10:\n        prod *= i\n        i += 1\n\n    if prod == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"No\"\n    i = 2\n    while n > 1:\n        if i == n:\n            return \"Yes\"\n        elif n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if i * j == n:\n                return 'Yes'\n    return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return \"No\"\n    if n < 10:\n        return \"Yes\"\n    digits = []\n    while n > 0:\n        r = n % 10\n        n = n // 10\n        digits.append(r)\n    print(\"\".join(map(str, digits)))\n    for i in range(1, len(digits)):\n        for j in range(i + 1, len(digits)):\n            if (digits[i] * digits[j]) == n:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1,10):\n        for j in range(1,10):\n            if i*j==N:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split(\"\\n\"):\n        if int(line) % 2!= 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\nsolution(input())\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == number:\n                return \"Yes\"\n    return \"No\"\n    \n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    triples = []\n    lengths = []\n    N = int(stdin.strip())\n    for i in range(N):\n        lengths.append(int(stdin.strip()[i]))\n    lengths.sort()\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if lengths[i]!= lengths[j] and lengths[i]!= lengths[k] and lengths[j]!= lengths[k]:\n                    triples.append([i+1, j+1, k+1])\n    print(len(triples))\n    return triples\n\nsolution(\"3 4 4 9 7 5\")\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for\n    https://www.hackerrank.com/challenges/ctci-making-anagrams/problem\n\n    Args:\n        stdin: Input from standard input in the following format:\n            N\n            L_1 L_2 \\cdots L_N\n\n    Returns:\n        The number of ways to choose three of the sticks with different lengths that can form a triangle.\n\n    \"\"\"\n    n = int(stdin.strip())\n    # list of lengths\n    lengths = sorted(int(l) for l in stdin.strip().split(' '))\n    res = 0\n    for i, length in enumerate(lengths):\n        # the length of left stick\n        left = lengths[:i]\n        # the length of right stick\n        right = lengths[i + 1:]\n        # the length of middle stick\n        middle = lengths[i + 1:]\n        # is all sticks the same length\n        if left == right == middle:\n            continue\n        else:\n            res += sum(l == length for l in lengths)\n    return res\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.strip()\n    arr = stdin.split(\" \")\n    N = int(arr[0])\n    arr = arr[1:]\n    triples = {}\n    for s in arr:\n        arr2 = s.split(\" \")\n        if arr2[0] in triples:\n            triples[arr2[0]].append(arr2[1])\n        else:\n            triples[arr2[0]] = [arr2[1]]\n    # print(triples)\n    triples = {k: v for k, v in sorted(triples.items(), key=lambda item: item[0])}\n    # print(triples)\n    print(len(triples))\n    return str(len(triples))\n\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = map(int, stdin.split()[1:])\n    a = list(a)\n    a.sort()\n    c = []\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i]!= a[j] and a[i]!= a[k] and a[j]!= a[k]:\n                    c.append([a[i], a[j], a[k]])\n    return str(len(c))\n\nprint(solution(\"2 2 5 5\"))\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return answer\n    '''"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take in input `stdin` and convert it to a list of ints.\n    >>> solution('''\n   ... 5\n   ... 4 4 9 7 5\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 5\n   ... 4 4 9 7 5\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 10\n   ... 0 0 0 0 0 0 0 0 0 0 0 0\n   ... ''')\n    '0'\n    \"\"\"\n    import sys\n    input = sys.stdin.readlines()\n    input = [int(i.strip()) for i in input]\n    return str(tribonacci(input))\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set(map(sorted, combinations(map(int, stdin.split()), 3)))) - 1)\n\nsolution(input())\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n\n    arr = list(map(int, stdin[1:]))\n    # print(arr)\n\n    s = []\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] == arr[j] == arr[k]:\n                    res.append((i, j, k))\n                    break\n\n    if not res:\n        print(0)\n    else:\n        print(len(res))\n        for (i, j, k) in res:\n            print(i, j, k)\n\n\nsolution(input())\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    lengths = list(map(int, stdin[1].split()))\n    result = 0\n\n    lengths.sort(reverse=True)\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if lengths[i]!= lengths[j] and lengths[j]!= lengths[k] and lengths[i]!= lengths[k]:\n                    result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(num: int) -> int:\n        return 1 if num <= 0 else f(num - 1) * num\n\n    return f(int(stdin.split()[1])) if f(int(stdin.split()[0])) else -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 1 or A >= 9 or B <= 1 or B >= 9:\n        return -1\n    else:\n        return str(A * B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split(\" \"))\n    if A<1 or A>9 or B<1 or B>9:\n        print(-1)\n        return\n    for i in range(1,10):\n        print(A*i,end=\" \")\n    print(\"\")\n    for i in range(1,10):\n        print(i,B*i,end=\" \")\n    print(\"\")\n    for i in range(1,10):\n        print(i,i*B,end=\" \")\n    print(\"\")\n    for i in range(1,10):\n        print(A*i,i*B,end=\" \")\n    print(\"\")\n    return\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\" \")\n    A = int(inp[0])\n    B = int(inp[1])\n    if A <= 20 and B <= 20:\n        if A >= 2 and B >= 2:\n            if A!= 1 and B!= 1:\n                table = []\n                for i in range(1, 11):\n                    table.append(i * B)\n                if table == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 150, 160, 180, 200]:\n                    return str(A * B)\n                else:\n                    return str(-1)\n            else:\n                return str(-1)\n        else:\n            return str(-1)\n    else:\n        return str(-1)"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    '''\n    A = int(stdin)\n    B = int(stdin)\n    i=1\n    while i<=9:\n        if A*i>9:\n            break\n        if A*i<10 and B*i>9:\n            break\n        i+=1\n    if i==10:\n        return '-1'\n    else:\n        return str(A*i)+\" \"+str(B*i)\n    '''\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if 1 <= A <= 20 and 1 <= B <= 20:\n        result = A * B\n        print(result)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = stdin.split()\n    if (int(n1) * int(n2)) % 10 == 0:\n        return str(int(n1) * int(n2))\n    return -1"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A*B) if (A <= 9 and B <= 9) else -1\n    else:\n        return -1"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    a = int(nums[0])\n    b = int(nums[1])\n\n    if a * b > 9:\n        return \"-\"\n    if a * b > 9:\n        return \"-\"\n    return str(a * b)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if 1 <= a <= 9 and 1 <= b <= 9:\n        return str(a * b)\n    else:\n        return \" -1\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x1, x2 = map(int, stdin.split())\n\n    distance = [[1000000000] * (m + 1) for _ in range(n + 1)]\n    distance[1][x1] = 0\n    distance[1][x2] = 0\n    queue = [(1, x1)]\n\n    while queue:\n        x, y = queue.pop(0)\n        for i in range(1, m + 1):\n            distance[x][i] = min(distance[x][i], distance[x][i-1] + 1)\n            distance[y][i] = min(distance[y][i], distance[y][i-1] + 1)\n            if distance[x][i]!= 100000000000 or distance[y][i]!= 100000000000:\n                queue.append((i+1, x+1) if y == x else (i+1, x-1))\n\n    return distance[n][m]"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    we can place the two pieces at coordinate 1 and 10\n    there are 5 moves required\n    move the piece at coordinate 1 to 2\n    move the piece at coordinate 10 to 11\n    move the piece at coordinate 11 to 12\n    move the piece at coordinate 12 to 13\n    move the piece at coordinate 13 to 14\n    '''\n    n,m=map(int,stdin.split())\n    coordinates=[int(i) for i in stdin.split()]\n    moves=0\n    positions=set(coordinates)\n    positions.add(1)\n    positions.add(10)\n    while len(positions)>0:\n        first,second=positions.pop(),positions.pop()\n        if first-1 in positions:\n            positions.add(first-1)\n        if second+1 in positions:\n            positions.add(second+1)\n        moves+=1\n    return moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    _x = sorted(list(map(int, stdin.strip().split())))\n    cnt = 0\n    for i in range(1,len(_x)):\n        if _x[i] - _x[i - 1] == 1:\n            cnt += 1\n        else:\n            cnt += 2\n    return str(cnt)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_lines, num_pieces = list(map(int, stdin.split()))\n    lines = list(map(int, stdin.split()))\n    num_moves = 0\n\n    visited = set()\n\n    # Start at the end\n    current_line_index = len(lines) - 1\n    current_piece_index = len(lines) - 1\n    while True:\n        # See which piece we need to put\n        if current_piece_index == 0:\n            break\n        # Check if we've seen this spot before\n        if current_line_index in visited:\n            num_moves += 1\n            current_line_index -= 1\n            current_piece_index = len(lines) - 1\n            continue\n        visited.add(current_line_index)\n        # Try to put the piece somewhere else\n        # If we don't, just move the piece one space to the right\n        current_line = lines[current_line_index]\n        current_piece = lines[current_piece_index]\n        if current_line >= current_piece:\n            current_line_index -= 1\n        else:\n            current_line_index += 1\n        num_moves += 1\n\n        # Move the piece\n        if current_piece_index == 0:\n            break\n        lines[current_piece_index - 1] += 1\n        lines[current_piece_index] -= 1\n        current_piece_index -= 1\n        num_moves += 1\n\n    return str(num_moves)\n\nSample Input 1:\n2 5\n10 12 1 2 14\nSample Output 1:\n5\n\nSample Input 2:\n5 3\n1 10 5 7 11\nSample Output 2:\n7\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    X = list(map(int, stdin.split()))\n    visited = []\n    moves = 0\n    for i in range(N):\n        visited.append(0)\n    visited[X[0]] = 1\n    for i in range(1, M):\n        if visited[X[i]] == 0:\n            moves += 1\n            if X[i] < X[i - 1]:\n                visited[X[i]] = 1\n                visited[X[i + 1]] = 1\n            else:\n                visited[X[i - 1]] = 1\n                visited[X[i]] = 1\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    x_i = list(map(int, stdin.split()))\n    min_count = float('inf')\n    for x_i_index in range(len(x_i)):\n        for x_i_index_plus_1 in range(x_i_index + 1, len(x_i)):\n            if x_i[x_i_index]!= x_i[x_i_index_plus_1]:\n                curr_count = 0\n                if x_i[x_i_index] < x_i[x_i_index_plus_1]:\n                    curr_count = 1\n                    x_i_index += 1\n                while x_i_index!= x_i_index_plus_1:\n                    x_i_index += 1\n                    curr_count += 1\n                if curr_count < min_count:\n                    min_count = curr_count\n    return str(min_count)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is a helper function. You do not need to understand it.\n    '''\n    # Replace this with your code\n    return str(min(solution_naive(stdin.strip().split())))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = set()\n    x.add(a[0])\n    x.add(a[-1])\n    for i in range(1, N):\n        x.add(a[i])\n    # print(x)\n    ans = 0\n    for i in range(1, M):\n        a[i] += 1\n        if a[i] == N:\n            a[i] = 1\n        ans += abs(a[i] - a[i - 1])\n    # print(a)\n    return str(ans)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split(\" \")))\n    N, M = line[0], line[1]\n    line = list(map(int, stdin.split(\" \")))\n    coords = line\n    # current_coords = coords\n    count = 0\n    for i in range(N):\n        if i % 2 == 0:\n            for j in range(i + 1, N, 2):\n                if j % 2 == 0:\n                    current_coords = (coords[j], coords[i] + 1)\n                else:\n                    current_coords = (coords[j], coords[i] - 1)\n                if current_coords not in coords:\n                    coords.append(current_coords)\n        else:\n            for j in range(i + 1, N, 2):\n                if j % 2 == 0:\n                    current_coords = (coords[j], coords[i] - 1)\n                else:\n                    current_coords = (coords[j], coords[i] + 1)\n                if current_coords not in coords:\n                    coords.append(current_coords)\n    print(coords)\n    coords.sort()\n    print(coords)\n    return str(len(coords) - 1)\n\nprint(solution(\"2 5\\n10 12 1 2 14\"))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = {}\n    def helper(i, p, x):\n        if p == m and x == n:\n            return 0\n        if p == m or x == n:\n            return float('inf')\n        if (p, x) in dp:\n            return dp[(p, x)]\n        if p == m or x == n:\n            return float('inf')\n        if x < a[i]:\n            dp[(p, x)] = helper(i + 1, p, x + 1)\n            return dp[(p, x)]\n        else:\n            dp[(p, x)] = helper(i + 1, p, x + 1) + 1\n            return dp[(p, x)]\n\n    return str(helper(0, 0, 0))\n\nstdin = '3 2'\nprint(solution(stdin))\nstdin = '10 12 1 2 14'\nprint(solution(stdin))\nstdin = '2 5'\nprint(solution(stdin))\nstdin = '6 10 4 4 5 4'\nprint(solution(stdin))\nstdin = '10 2 3 6'\nprint(solution(stdin))\nstdin = '1 1 1 1 1 1 1 1 1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    def dp(n, k):\n        # n: number of cities\n        # k: number of options\n        graph = [[] for _ in range(n+1)]\n        edges = set()\n        for i in range(m):\n            a, b = map(int, stdin.split())\n            edges.add(a)\n            edges.add(b)\n            graph[a].append(b)\n            graph[b].append(a)\n\n        # From city 1 to city n\n        #print(graph)\n        q = [(1, 0)]\n        cost = dict()\n        cost[(1, 0)] = 0\n        for i in range(n):\n            c = -1\n            for road in q:\n                c += 1\n                if road[0] == i + 1:\n                    for j in range(len(graph[i])):\n                        if graph[i][j] not in edges:\n                            tmp = road[0]\n                            for road in q:\n                                if tmp == road[0]:\n                                    tmp = road[1]\n                            tmp = tmp + c\n                            cost[(i + 1, c + 1)] = cost[(i + 1, c)] + tmp\n                            if (i + 1, c + 1) not in cost:\n                                cost[(i + 1, c + 1)] = tmp\n                            tmp = road[0]\n                            for road in q:\n                                if tmp == road[1]:\n                                    tmp = road[0]\n                            tmp = tmp + c\n                            cost[(i + 1, c + 1)] = min(cost[(i + 1, c + 1)], tmp)\n                            if (i + 1, c + 1) not in cost:\n                                cost[(i + 1, c + 1)] = tmp\n                            q.append((i + 1, c + 1))\n\n        print(cost[(n + 1, k)])\n        return cost[(n + 1, k)]\n    print(dp(n, k))\n    return dp(n, k)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [list(map(int, stdin.split()))[1:] for _ in range(m)]\n    ans = set()\n    def rec(n, roads, roads_used, ans):\n        if len(roads) == n - 1:\n            ans.add(''.join(str(x) for x in roads_used))\n        else:\n            for i in range(n):\n                if i in roads_used:\n                    continue\n                roads_used.append(i)\n                rec(n, roads, roads_used, ans)\n                roads_used.pop()\n    rec(n, roads, [], ans)\n    return str(len(ans))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    \n    # create matrix, n rows, m cols\n    matrix = [[0] * (n + 1) for i in range(n + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    # # create matrix, n rows, k cols\n    # matrix = [[0] * (k + 1) for i in range(n + 1)]\n    \n    # # fill matrix\n    # for i in range(m):\n    #     x, y = list(map(int, stdin.split()))\n    #     matrix[x][y] = 1\n    #     matrix[y][x] = 1\n    \n    # # create matrix, n rows, k cols\n    # matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # # fill matrix\n    # for i in range(m):\n    #     x, y = list(map(int, stdin.split()))\n    #     matrix[x][y] = 1\n    #     matrix[y][x] = 1\n    \n    \n    # # create matrix, n rows, k cols\n    # matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # # fill matrix\n    # for i in range(m):\n    #     x, y = list(map(int, stdin.split()))\n    #     matrix[x][y] = 1\n    #     matrix[y][x] = 1\n    \n    # # create matrix, n rows, k cols\n    # matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # # fill matrix\n    # for i in range(m):\n    #     x, y = list(map(int, stdin.split()))\n    #     matrix[x][y] = 1\n    #     matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k + 1)]\n    \n    # fill matrix\n    for i in range(m):\n        x, y = list(map(int, stdin.split()))\n        matrix[x][y] = 1\n        matrix[y][x] = 1\n    \n    \n    # create matrix, n rows, k cols\n    matrix = [[0] * (n + 1) for i in range(k"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  [n, m, k] = [int(x) for x in stdin.split()]\n  return str(m*k)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 4 4 3\n   ... 1 2\n   ... 2 3\n   ... 1 4\n   ... 4 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5 6 2\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 4\n   ... 3 5\n   ... ''')\n    '1'\n    '''\n    # stdin = stdin.strip()\n    n, m, k = map(int, input().split())\n    cities = sorted(list(map(int, input().split())))\n    taken = set()\n    total = 0\n    for _ in range(k):\n        for _ in range(m):\n            city = cities.pop(0)\n            if city not in taken:\n                total += 1\n                taken.add(city)\n                break\n    return str(total)\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    costs = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        costs[a].append(b)\n        costs[b].append(a)\n    costs = sorted(costs, key=lambda c: len(c))\n    return str(solution_helper(costs, n, k))\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    def helper(chosen, i, to_go):\n        if len(chosen) == k:\n            print(''.join(chosen))\n            return\n\n        if to_go == 0:\n            return\n\n        for j in range(i, n):\n            if j in chosen:\n                continue\n            chosen.append(j)\n            helper(chosen, j + 1, to_go - 1)\n            chosen.pop()\n\n    helper([], 1, m)\n\n    return\nsolution(input())\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    r_s = [0 for i in range(n)]\n    for i in range(m):\n        s_i = map(int, stdin.split())\n        s_i = s_i[:2]\n        r_s[s_i[0]] = s_i[1]\n    r_s.sort()\n    out = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            out.append('1')\n            continue\n        if r_s[i-1]!= r_s[i]:\n            out.append('0')\n        else:\n            out.append('1')\n    return ''.join(out)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [[int(x) for x in stdin.split()[i].split(\",\")] for i in range(m)]\n    cities = {i for i in range(1, n+1)}\n    return str(solution_helper(roads, n, k, cities))\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    available_roads = []\n    res = 0\n    for i in range(n):\n        if i == 0:\n            available_roads.append([i])\n        else:\n            available_roads.append([i])\n            for j in range(len(available_roads[-1])):\n                roads_needed = set()\n                for road in roads:\n                    if j < len(road):\n                        roads_needed.add(road[j])\n                for road in roads_needed:\n                    if available_roads[-1][j] not in roads_needed:\n                        available_roads[-1].append(road)\n                        if len(available_roads[-1]) == k:\n                            res += 1\n                            break\n    return str(res)\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ns = stdin.split()\nl = []\nfor i in s:\n    l.append(int(i))\nn = int(l.pop(0))\nfor i in range(n):\n    l.append(int(l.pop(0)))\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    heights = a[1:]\n    res = []\n    for i in range(n):\n        if heights[i]!= heights[i + 1]:\n            res.append(heights[i])\n            if len(res) > 1 and heights[i] == res[0] and heights[i + 1] == res[-1]:\n                return \"NO\"\n    return \"YES\" if len(res) == n else \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    return 'YES' if is_complete(n, a) else 'NO'\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    if a[-1]!= a[-2]:\n        return \"NO\"\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            return \"NO\"\n    if any(a[i]!= a[i+1] for i in range(n-1)):\n        return \"NO\"\n    for i in range(n):\n        if a[i]!= a[i+1] and a[i+1]!= a[i+2]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    wall_parts = list(map(int, stdin.split()))\n    if n == 1:\n        return 'YES' if wall_parts[0] == wall_parts[1] == wall_parts[2] == wall_parts[3] == wall_parts[4] == 1 else 'NO'\n    return 'YES' if (wall_parts[0] == wall_parts[1] == wall_parts[2] == wall_parts[3] == wall_parts[4] == 1\n                     or wall_parts[0] == wall_parts[1] == wall_parts[2] == wall_parts[3] == wall_parts[4] == 2) else 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    prev = a[0]\n    for i in a[1:]:\n        if i == prev:\n            continue\n        else:\n            if (i - prev) % 2:\n                return \"NO\"\n            else:\n                return \"YES\"\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"5\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    if n == 1:\n        return 'YES' if a[0] == a[1] and a[0] == a[2] else 'NO'\n    h = []\n    for i in a:\n        h.append(i)\n        while len(h) > 1 and h[-1] == h[-2]:\n            h.pop()\n            h.pop()\n        if len(h) == 1:\n            if h[0] == 1:\n                return 'YES'\n        if h[0] == 1:\n            h.pop()\n    return 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    height = list(map(int, stdin.strip().split()))\n    if n == 1 and height[0] == height[1] and height[0] == height[2] and height[0] == height[3] and height[0] == height[4]:\n        return \"YES\"\n    for i in range(1, n):\n        if height[i - 1] == height[i]:\n            continue\n        if height[i - 1] == height[i] - 1 or height[i - 1] == height[i] - 2 or height[i - 1] == height[i] - 3 or height[i - 1] == height[i] - 4:\n            height[i] += 1\n            continue\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return \"NO\"\n    bricks = []\n    for i in range(n):\n        bricks.append(int(stdin.strip()))\n    bricks.sort()\n    return \"YES\" if bricks == bricks[::-1] else \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    assert len(heights) == n\n    heights.sort()\n    if heights[0] == heights[-1]:\n        return 'YES'\n    for i in range(n):\n        if heights[i] - heights[i - 1]!= 1:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    H, n = int(stdin[0]), int(stdin[1])\n    d = list(map(int, stdin[2]))\n    minutes = 0\n    while d:\n        H = H + d.pop(0)\n        if H <= 0:\n            return \"INF\"\n        minutes += 1\n    return str(minutes)\n\nsolution(input())\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the first minute after which the monster dies.\"\"\"\n\n    h, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    start = 0\n    for i in range(n):\n        h = h + d[i]\n        if h <= 0:\n            start = i + 1\n            break\n    if start > n:\n        return -1\n    return start\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    H, n = int(stdin[0]), int(stdin[1])\n    d = list(map(int, stdin[2]))\n    # lista = []\n    # for i in range(n):\n    #     lista.append(d[i])\n    # print(lista)\n    # if d[0] > 0:\n    #     if H + d[0] <= 0:\n    #         print(-1)\n    #         return\n    #     else:\n    #         H += d[0]\n    #     if H > 0:\n    #         lista.append(H)\n    #     # print(lista)\n    #     for i in range(len(lista)):\n    #         lista[i] -= d[i]\n    #     if len(lista) == n:\n    #         print(lista[0])\n    #     else:\n    #         print(-1)\n    # else:\n    #     if H + d[0] <= 0:\n    #         print(-1)\n    #         return\n    #     else:\n    #         H += d[0]\n    # if H > 0:\n    #     lista.append(H)\n    # for i in range(len(lista)):\n    #     if lista[i] <= 0:\n    #         print(-1)\n    #         return\n    #     else:\n    #         lista[i] -= d[i]\n    # if lista[0] <= 0:\n    #     print(-1)\n    # else:\n    #     print(lista[0])\n    # return\n    i = 1\n    while True:\n        if d[0] > 0:\n            if H + d[0] <= 0:\n                print(-1)\n                return\n            else:\n                H += d[0]\n        if H > 0:\n            d[0] -= 1\n        if H <= 0:\n            print(i)\n            return\n        i += 1\n    return\n\nsolution('''1000000000000 5\n-1 0 0 0 0''')\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    max_hp = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    dp = [-1] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = max_hp\n\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if dp[j] >= dp[i-j]:\n                dp[i] = dp[i-j]\n            else:\n                dp[i] = dp[i] - dp[j]\n    if dp[-1] <= 0:\n        return -1\n    else:\n        return str(dp[-1])\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = list(map(int, stdin.split()))\n    data = list(map(int, stdin.split()))\n    hp = H\n    for i in range(n):\n        hp += (data[i] - hp)\n        if hp <= 0:\n            return f\"{i + 1}\"\n    return \"infinite\""
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    h, n = map(int, lines[0].split())\n    d = list(map(int, lines[1].split()))\n    \n    def find_monster_hp(monster_hp):\n        count = 0\n        monster_hp = monster_hp\n        for d_i in d:\n            monster_hp += d_i\n            if monster_hp <= 0:\n                return -1\n            count += 1\n        return count\n    \n    hp = h\n    while find_monster_hp(hp)!= -1:\n        hp = hp - find_monster_hp(hp)\n        count += 1\n    print(count)\n    return\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    H, n = map(int, stdin[0].split())\n    d = list(map(int, stdin[1].split()))\n    print(-1 if H <= 0 or n <= 0 or len(d)!= n else d.index(min(d)) + 1)\n\n\nsolution(input())\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return '-1'\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[1][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n    return str(dp[n][m])\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.strip().split())\n    monsters = list(map(int, stdin.strip().split()))\n    for i in range(1, n):\n        monsters[i] = monsters[i-1] + monsters[i]\n    if h > max(monsters):\n        return -1\n    return monsters.index(h) + 1"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, n = list(map(int, stdin.split()))\n    if n == 1:\n        return '-1'\n    d = list(map(int, stdin.split()))\n    days = 0\n    while True:\n        days += 1\n        for i in range(n):\n            if h + d[i] <= 0:\n                return str(days)\n            h += d[i]"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dict = {}\n    for s in stdin:\n        if s in dict.keys():\n            dict[s] += 1\n        else:\n            dict[s] = 1\n    result = \"\"\n    values = sorted(dict.items(), key=lambda x: x[1], reverse=True)\n    for pair in values:\n        if len(result) < 2:\n            result += pair[0]\n        elif len(result) == 2:\n            break\n    return result\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    dic = {}\n    max_count = 0\n    result = ''\n    for word in words:\n        if word in dic:\n            dic[word] += 1\n            if dic[word] > max_count:\n                max_count = dic[word]\n                result = word\n        else:\n            dic[word] = 1\n    return result"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return_val = ''\n\n    s = stdin\n    while len(s) > 2:\n        #print(s[0], s[1])\n        if s[0] == s[1]:\n            return_val = s[0]\n            s = s[2:]\n        else:\n            if s[0] not in s[1:]:\n                s = s[2:]\n            else:\n                s = s[2:]\n                i = 0\n                while i < len(s) - 1:\n                    if s[i] == s[i+1]:\n                        s = s[i+2:]\n                        i += 1\n                        break\n                    else:\n                        i += 1\n    return return_val\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin\n    lst = []\n    for i in range(len(str) - 1):\n        lst.append(str[i:i + 2])\n    lst = sorted(lst)\n    print(lst)\n    x = []\n    for i in range(len(lst) - 1):\n        if lst[i][0] == lst[i + 1][0]:\n            x.append(lst[i])\n    print(x)\n    return x\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # First solution\n    def build_table(table: Dict[str, int], word: str) -> None:\n        if len(word) < 2:\n            table[word] += 1\n        else:\n            first_letter = word[0]\n            rest = word[1:]\n            if first_letter not in table:\n                table[first_letter] = {}\n            if rest not in table[first_letter]:\n                table[first_letter][rest] = 1\n            else:\n                table[first_letter][rest] += 1\n\n    input_string = stdin.strip()\n    table = {}\n    for i in range(len(input_string)):\n        if input_string[i] not in table:\n            table[input_string[i]] = {}\n        if input_string[i + 1] not in table[input_string[i]]:\n            table[input_string[i]][input_string[i + 1]] = 1\n        else:\n            table[input_string[i]][input_string[i + 1]] += 1\n\n    max_value = 0\n    max_key = None\n    for key in table:\n        if table[key] > max_value:\n            max_value = table[key]\n            max_key = key\n\n    solution_string = \"\"\n    for i in range(len(max_key)):\n        solution_string += max_key[i]\n        if i!= len(max_key) - 1:\n            solution_string += max_key[i + 1]\n\n    return solution_string\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    max_freq = 0\n    max_i = 0\n    result = ''\n    for i in range(n):\n        if max_freq < n and s[i] == s[i+1]:\n            max_freq += 1\n        else:\n            if max_freq == n:\n                result = s[max_i] + s[max_i+1]\n            max_freq = 0\n            max_i = i+1\n    return result\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst_s = stdin.split()\n    n = int(lst_s[0])\n    str_s = lst_s[1]\n    max_count = 0\n    # 2 is the number of characters in a two-gram\n    two_grams_list = []\n    for i in range(n - 1):\n        if str_s[i] == str_s[i + 1]:\n            #  2 characters in a two-gram\n            two_grams_list.append(str_s[i:i + 2])\n    for i in range(n - 2):\n        # print(two_grams_list[i])\n        if len(two_grams_list[i]) > max_count:\n            max_count = len(two_grams_list[i])\n    for i in range(len(two_grams_list)):\n        if len(two_grams_list[i]) == max_count:\n            # print(two_grams_list[i])\n            return two_grams_list[i]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return str(sorted(set(stdin), key=stdin.index))"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    s = stdin.pop(0)\n    t = stdin.pop(0)\n    count = 0\n    while s!= t:\n        if s and t:\n            s, t = t, s\n        else:\n            s = t = ''\n        count += 1\n    return count\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = stdin[0]\n    t = stdin[1]\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left\n    # move t to the right\n    # move s to the left"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a, b = s\n    a = list(a)\n    b = list(b)\n    count = 0\n    while a and b:\n        if a[0] == b[0]:\n            a.pop(0)\n            b.pop(0)\n        else:\n            count += 1\n            if a[0] == 'a':\n                a.pop(0)\n            else:\n                b.pop(0)\n    if not a:\n        return str(count + len(b))\n    if not b:\n        return str(count + len(a))\n    return \"0\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n\n    return s.count(\"x\") + t.count(\"x\")"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) > len(t):\n        return len(s) - len(t)\n    else:\n        return len(t) - len(s)\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    c = 0\n    if s == t:\n        return c\n    c = c + min(len(s), len(t))\n    for i in range(len(s)):\n        t = s[i:] + t\n        c = c + min(len(s), len(t))\n        if s == t:\n            return c\n        for i in range(len(s)):\n            s = s[:i] + s[i + 1:]\n            c = c + min(len(s), len(t))\n            if s == t:\n                return c\n            s = s[:i] + s[i + 1:]\n            c = c + 1\n    return c\n\n\nsolution(\"test\")"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    s = input[0]\n    t = input[1]\n    if len(s) == 0:\n        return len(t)\n    if len(t) == 0:\n        return len(s)\n    if s == t:\n        return 0\n    l = len(s)\n    r = len(t)\n    if l > r:\n        l, r = r, l\n        t, s = s, t\n    count = 0\n    while l > 0 and r > 0:\n        if s[0]!= t[0]:\n            break\n        count += 1\n        l -= 1\n        r -= 1\n    if l == 0:\n        return count + r\n    if r == 0:\n        return count + l\n    return count + min(l, r)\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\nsolution()\nsolution()\n\nsolution()\ns"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split('\\n')\n    N = int(stdin[0])\n    x = list(map(int, stdin[1].split()))\n    x.sort()\n    d = 2\n    while (x[-1] - x[0]) >= d:\n        for i in range(len(x)):\n            x[i] += d\n            if x[i] >= 10:\n                x[i] -= 10\n            else:\n                x[i] += 10\n        d += 1\n    return str(d - 1)"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    Xs = [i for i in range(1, N + 1)]\n    D = X\n    while len(Xs)!= 0:\n        max_dist = 0\n        for i in range(len(Xs)):\n            if Xs[i] <= X + D <= Xs[i] + D or Xs[i] <= X - D <= Xs[i] + D:\n                max_dist = max(max_dist, D)\n            elif Xs[i] <= X - D <= Xs[i] + D or Xs[i] <= X + D <= Xs[i] + D:\n                max_dist = max(max_dist, D)\n            Xs.remove(Xs[i])\n        D += max_dist\n    return str(D)"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    xy = list(map(int, stdin.split()))\n    xy.sort()\n    i = 0\n    while i < N:\n        if xy[i] == X:\n            return '-1'\n        elif xy[i] - xy[i + 1] <= 2:\n            i += 1\n        else:\n            return str(2)\n    return str(2)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def move_1(x, y, x_new):\n        \"\"\"Move 1: travel from x to x_new.\"\"\"\n        return x_new\n\n    def move_2(x, y, x_new):\n        \"\"\"Move 2: travel from x to x_new.\"\"\"\n        return x_new\n\n    def solve_moves(x, y, x_new):\n        \"\"\"Move 1 and 2 and pick the max of them.\"\"\"\n        return max(move_1(x, y, x_new), move_2(x, y, x_new))\n\n    # Read in a single line of input.\n    num_cities, num_steps = tuple(map(int, stdin.split()))\n    cities = tuple(map(int, stdin.split()))\n\n    # Initialize D to 1.\n    d = 1\n\n    # Perform moves 1 and 2.\n    for _ in range(num_steps):\n        # Move 1.\n        x = cities[-1]\n        new_city = solve_moves(x, x, d)\n        cities = cities + (new_city,)\n\n        # Move 2.\n        x = cities[-1] - d\n        new_city = solve_moves(x, x, d)\n        cities = cities + (new_city,)\n\n        # Re-initialize D.\n        d = 1\n\n    return str(max(cities))\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = input()\n    N, X = list(map(int, stdin.split()))\n    x_coordinates = list(map(int, stdin.split()))\n\n    possible_coordinates = []\n    for i in range(0, N):\n        possible_coordinates.append(i+1)\n    #print(possible_coordinates)\n\n    c = 0\n    while(len(possible_coordinates)!= 0):\n        c = c + 1\n        #print(\"Step:\", c)\n        #print(\"Possible Coordinates:\", possible_coordinates)\n        #print(\"Coordinates:\", x_coordinates)\n\n        # Find the current maximum value of D\n        max_value = 0\n        if len(possible_coordinates) == 1:\n            return str(1)\n\n        for i in range(0, len(possible_coordinates)):\n            if max_value < max(abs(x_coordinates[possible_coordinates[i]-1] - x_coordinates[possible_coordinates[i]-2]), abs(x_coordinates[possible_coordinates[i]-2] - x_coordinates[possible_coordinates[i]-3])):\n                max_value = max(abs(x_coordinates[possible_coordinates[i]-1] - x_coordinates[possible_coordinates[i]-2]), abs(x_coordinates[possible_coordinates[i]-2] - x_coordinates[possible_coordinates[i]-3]))\n\n        #print(\"Max Value:\", max_value)\n\n        # Find the new coordinates\n        for i in range(0, len(possible_coordinates)):\n            x_coordinates[possible_coordinates[i]-1] = x_coordinates[possible_coordinates[i]-2]\n            x_coordinates[possible_coordinates[i]-2] = x_coordinates[possible_coordinates[i]-3]\n            x_coordinates[possible_coordinates[i]-3] = x_coordinates[possible_coordinates[i]-1]\n\n        #print(\"New Coordinates:\", x_coordinates)\n        \n        # Remove the coordinates that are already visited\n        possible_coordinates = []\n        for i in range(0, len(x_coordinates)):\n            if x_coordinates[i]!= X:\n                possible_coordinates.append(i+1)\n\n    return str(max_value)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    D = 2\n    max_D = 0\n    while max_D < N:\n        max_D = 0\n        for i in range(N):\n            x = X[i]\n            if x + D <= X[i] + D:\n                D = x + D\n            elif x - D >= X[i] - D:\n                D = x - D\n            else:\n                break\n        if D == 0:\n            print(max_D)\n            return\n    print(max_D)\n    return"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    X = sorted(list(map(int, stdin.split())))\n    # if X[0] == 1:\n    #     return \"1\"\n    if len(X) < 3:\n        return \"1\"\n    d = X[0]\n    for i in range(1, len(X)):\n        if X[i] == X[i-1]+d:\n            continue\n        else:\n            d = X[i] - X[i-1]\n    return str(d)"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # first, get the number of cities and coordinates\n    num_cities, coordinates = map(int, stdin.split())\n    # create the array of coordinates\n    cities = list(map(int, stdin.split()))\n\n    # set the initial value of D\n    d = 1\n\n    # loop through each coordinate\n    for x in range(num_cities):\n        # find the city which is closer to the current coordinate\n        for y in range(x + 1, num_cities):\n            # if we can travel to the current coordinate from the current coordinate + D\n            if cities[x] + d <= cities[y] and cities[x] + d > cities[y]:\n                # set the max_d\n                d = cities[x] + d - cities[y]\n                # if max_d is greater than 1, d cannot be set to 1 so set it to 1\n                if d > 1:\n                    d = 1\n\n    # return the maximum D value\n    return str(d)\n\n--------------------------------------------------------------\nhttps://leetcode.com/problems/set-matrix-zeroes/\n\nGiven an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.\n\nFollow up:\n\nA straight forward solution using O(mn) space is probably a bad idea.\nA simple improvement uses O(m + n) space, but still not the best solution.\nCould you devise a constant space solution?\n\n\nExample 1:\n\nInput:\n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\nOutput:\n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n\nExample 2:\n\nInput:\n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\nOutput:\n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n-231 <= matrix[i][j] <= 231 - 1\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    D = 2\n    while True:\n        for i in range(n):\n            X[i] += D\n            X[i] = max(X)\n            if X[i] == x:\n                return str(D)\n        D += 1"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    # get the coordinate of the first city\n    x1 = cities[0]\n    # travel to the last city\n    i = 1\n    while i < N:\n        # get the distance to the next city\n        d = abs(x1 - cities[i])\n        # if d is larger than the value of D, update D\n        if d > D:\n            D = d\n        i += 1\n        # update the coordinate of the next city\n        x1 = cities[i]\n    return str(D)"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    print()\n    \"\"\"\n    # test\n    # print('test')\n    print(stdin)\n\n    # stdin = input()\n    return stdin\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    is_palindrome = False\n    if len(stdin) % 2 == 0:\n        is_palindrome = True\n    else:\n        is_palindrome = False\n        odd_len = len(stdin) - 1\n        palindrome_one = stdin[0:odd_len:2]\n        if palindrome_one == palindrome_one[::-1]:\n            is_palindrome = True\n        palindrome_three = stdin[1:odd_len - 1:2]\n        if palindrome_three == palindrome_three[::-1]:\n            is_palindrome = True\n    if is_palindrome:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nsolution(input())\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass\n\nstdin = \"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    if n < 3 or n > 99:\n        return 'No'\n    if n == 3:\n        if S == S[::-1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if n == 4:\n        if S == S[::-1] or S[1:3] == S[2:4] and S[0:3] == S[3:]:\n            return 'Yes'\n        else:\n            return 'No'\n    if n == 5:\n        if S == S[::-1] or S[2:4] == S[3:5] or S[0:2] == S[4:6] and S[1:3] == S[5:]:\n            return 'Yes'\n        else:\n            return 'No'\n    if n == 6:\n        if S == S[::-1] or S[3:5] == S[4:6] or S[0:3] == S[5:7] or S[1:4] == S[6:]:\n            return 'Yes'\n        else:\n            return 'No'\n    if n == 7:\n        if S == S[::-1] or S[4:6] == S[5:7] or S[0:4] == S[6:] or S[1:5] == S[7:]:\n            return 'Yes'\n        else:\n            return 'No'\n    return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return \"No\"\n    if stdin == 'Yes':\n        return \"Yes\"\n    if stdin == 'No':\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    palindrome = False\n    \n    if len(s) % 2 == 1:\n        s = \"\".join(s)\n        s = s[1:]\n        s = s[::-1]\n        if s == s[::-1]:\n            palindrome = True\n            \n    if palindrome:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \nsolution(input())"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    s = stdin[0]\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    i = 0\n    while i < len(s):\n        if s[i] == s[(len(s) - 1) - i]:\n            i += 1\n        else:\n            break\n    if i == len(s):\n        return \"Yes\"\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == s[(len(s) - 1) - i]:\n            i += 1\n        else:\n            break\n    if i == len(s) - 1:\n        return \"Yes\"\n    s = s[i + 1:]\n    s = s[:len(s) - i]\n    i = 0\n    while i < len(s) - 3:\n        if s[i] == s[(len(s) - 2) - i]:\n            i += 1\n        else:\n            break\n    if i == len(s) - 3:\n        return \"Yes\"\n    s = s[i + 2:]\n    s = s[:len(s) - i]\n    return \"No\"\n\n\nprint(solution(\"akasaka\"))\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = \"Yes\"\n    if(s == s[::-1]):\n        if((s[len(s)//2]==s[(len(s)//2)+1])==True):\n            ans = \"Yes\"\n        else:\n            ans = \"No\"\n    elif((s[len(s)//2]==s[(len(s)//2)-1])==True):\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an input string S, determine if it is a strong palindrome.\n    A string S is a strong palindrome if and only if all of the following conditions are satisfied:\n\n    - S is a palindrome.\n    - Let N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\n    - The string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\n    \n    Input\n        string S\n    Output\n        string 'Yes' or 'No'\n    Constraints\n        S consists of lowercase English letters.\n        The length of S is an odd number between 3 and 99 (inclusive).\n    Examples\n        Input\n            c\n        Output\n            Yes\n    \"\"\"\n    # Your code goes here\n    if stdin == stdin[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if(is_palindrome(s)):\n        if(is_palindrome(s[:len(s)//2]) and is_palindrome(s[len(s)//2:len(s)])):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    int_a = int(stdin.split(' ')[0])\n    int_b = int(stdin.split(' ')[1])\n    result = int_a * int_b\n    str_result = str(result)\n    str_result = str_result.split('.')[0]\n    str_result = int(str_result)\n    print(str_result)\n    return str_result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = float(b)\n    return '%.0f' % (a * b)\n\n\nsolution(input())\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    ans = int(x * y)\n    return str(ans)\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(int(A * B))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin.split()[0]) * int(stdin.split()[1])\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b // math.trunc(a / 10.) * 10)\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = float(B)\n    C = A * B\n    if C % 1 == 0:\n        print(int(C))\n    else:\n        print(int(C))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    A, B = int(A), int(B)\n    print(int(A*B))\n    return"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a, b = stdin\n    a = int(a)\n    b = float(b)\n    if a >= 0 and b >= 0:\n        return str(a*b)\n    else:\n        return str(int(a/b))\n\nsolution(\"-198 1.1\")"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        print(solution1(n))\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a, b = map(int, stdin.split())\n        if a + b > n:\n            print(0)\n            continue\n        c = 0\n        if a > b:\n            c = 1\n        if a + b == n:\n            print(c)\n        else:\n            print(c + 1)\n    return 'OK'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the answer to the problem.\n    \"\"\"\n    for i in range(int(stdin)):\n        input()\n        num_candies = int(stdin)\n        sisters = input()\n        num_sisters = len(sisters)\n        num_candies = int(stdin)\n        candies_list = []\n        for num in sisters:\n            if num == '0':\n                break\n            else:\n                candies_list.append(int(num))\n        if len(candies_list)!= len(set(candies_list)):\n            return \"0\"\n        if num_candies < sum(candies_list):\n            return \"0\"\n        if max(candies_list) > num_candies:\n            return \"0\"\n        if sum(candies_list) > num_candies:\n            return \"0\"\n\n        def b_sisters(num_sisters, num_candies, candies_list):\n            if num_candies == 0:\n                return 0\n            if num_sisters == 1:\n                if candies_list[0] <= num_candies:\n                    return 1\n                else:\n                    return 0\n            if num_sisters == 2:\n                if candies_list[0] <= num_candies and candies_list[1] <= num_candies:\n                    return 1\n                else:\n                    return 0\n            if num_sisters == 3:\n                if candies_list[0] <= num_candies and candies_list[1] <= num_candies and candies_list[2] <= num_candies:\n                    return 1\n                else:\n                    return 0\n            if num_sisters == 4:\n                if candies_list[0] <= num_candies and candies_list[1] <= num_candies and candies_list[2] <= num_candies and candies_list[3] <= num_candies:\n                    return 1\n                else:\n                    return 0\n\n        s1 = b_sisters(num_sisters, num_candies, candies_list)\n        s2 = b_sisters(num_sisters, num_candies - 1, candies_list)\n        s3 = b_sisters(num_sisters, num_candies - 2, candies_list)\n        s4 = b_sisters(num_sisters, num_candies - 3, candies_list)\n        return str(s1 + s2 + s3 + s4)\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == 2 and m == 1:\n        return 2\n    if n == 2 and m == 2:\n        return 2\n    if n == 3 and m == 1:\n        return 1\n    if n == 3 and m == 2:\n        return 1\n    if n == 3 and m == 3:\n        return 1\n    if n == 4 and m == 1:\n        return 1\n    if n == 4 and m == 2:\n        return 1\n    if n == 4 and m == 3:\n        return 1\n    if n == 5 and m == 1:\n        return 1\n    if n == 5 and m == 2:\n        return 1\n    if n == 5 and m == 3:\n        return 1\n    if n == 6 and m == 1:\n        return 1\n    if n == 6 and m == 2:\n        return 1\n    if n == 6 and m == 3:\n        return 1\n    if n == 6 and m == 4:\n        return 1\n    if n == 6 and m == 5:\n        return 1\n    if n == 6 and m == 6:\n        return 1\n    if n == 7 and m == 1:\n        return 1\n    if n == 7 and m == 2:\n        return 1\n    if n == 7 and m == 3:\n        return 1\n    if n == 7 and m == 4:\n        return 1\n    if n == 7 and m == 5:\n        return 1\n    if n == 7 and m == 6:\n        return 1\n    if n == 7 and m == 7:\n        return 1\n    return 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    #print(a, b)\n    if a+b < n:\n        return 0\n    elif a==b:\n        return int((a+b)*(a+b)/2)\n    elif a+b>n:\n        return int((a+b-n)*(a+b-n)/2)\n    else:\n        return int((a+b)*(a+b)/2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for _ in range(test_cases):\n        n = int(stdin)\n        a = 0\n        b = 0\n        if n == 1:\n            return \"1\"\n        for i in range(1, n + 1):\n            a += i\n            b += i\n        if a > n:\n            a = -1\n        if b > n:\n            b = -1\n        if a > 0 and b > 0:\n            return str(a + b)\n        elif a > 0 and b == 0:\n            return \"1\"\n        elif a == 0 and b > 0:\n            return \"1\"\n        else:\n            return \"0\"\n    return\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return solve(list(map(int, stdin.split())))\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    if not m:\n        return \"0\"\n    if n == m:\n        return str(0)\n    \n    roads = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n    \n    roads.sort()\n    cities = {i: [] for i in range(1, n + 1)}\n    for a, b in roads:\n        if a!= s and b!= s:\n            cities[a].append(b)\n            cities[b].append(a)\n        if a == s and b!= s:\n            cities[a].append(b)\n    \n    q = deque([(s, 0)])\n    visited = set()\n    visited.add(s)\n    \n    while q:\n        c, steps = q.popleft()\n        if c == n:\n            return steps\n        for city in cities[c]:\n            if city not in visited:\n                visited.add(city)\n                q.append((city, steps + 1))\n    \n    return \"0\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        roads[u].append(v)\n        roads[v].append(u)\n\n    c = [0] + list(range(n))\n    visited = set()\n    ans = 0\n    while c:\n        node = c.pop()\n        if node == s:\n            continue\n        if node in visited:\n            ans += 1\n            continue\n        visited.add(node)\n        for neigh in roads[node]:\n            if neigh not in visited:\n                c.append(neigh)\n    return str(ans)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Day 3: Toboggan Trajectory ---\n    With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.\n\n    Due to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:\n\n   ..##.......\n    #...#...#..\n   .#....#..#.\n   ..#.#...#.#\n   .#...##..#.\n   ..#.##.....\n   .#.#.#....#\n   .#........#\n    #.##...#...\n    #...##....#\n   .#..#...#.#\n\n    While the above example describes the map in more detail, here is a better reference:\n\n   ..##.......#.\n    #...#...#..#\n   .#....#..#.##\n   ..#.#...#.#.#\n   .#...##..#.##\n   ..#.##.....#\n   .#.#.#....#.#\n   .#........#.\n    #.##...#...#\n    #...##....#.#\n   .#..#...#.#.#\n\n    You start on the open square (.) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).\n\n    The toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by counting all the trees you would encounter for the slope right 3, down 1:\n\n    From your starting position at the top-left, check the position that is right 3 and down 1. Then, check the position that is right 3 and down 1 from there, and so on until you go past the bottom of the map.\n\n    The locations you'd check in the above example are marked here with O where there was an open square and X where there was a tree:\n\n   ..##.......\n    #...#...#..\n   .#....#..#.\n   ..#.#...#.#\n   .#...##..#.\n   ..#.##.....\n   .#.#.#....#\n   .#........#\n    #.##...#...\n    #...##....#\n   .#..#...#.#\n\n    In this example, a total of 7 trees are encountered:\n\n   ..##.........##.........##.........##.........##.........##.......  ---> (1, 1)\n    #..O#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#  ---> (1, 2)\n   ..O#...#O#...#...#O#...#O#...#...#O#...#...#O#...#...#O#...#...#O#  ---> (1, 3)\n   ..#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#  ---> (1, 4)\n   ..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##  ---> (1, 5)\n   ..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##  ---> (1, 6)\n    #.##...#...#.#.#...#...#.#.#...#...#.#.#...#...#.#.#...#...#.#  ---> (1, 7)\n    #...##....##...##....##...##....##...##....##...##....##...##  ---> (2, 1)\n   .#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#  ---> (2, 2)\n   ..#.##.......#.X#.......#.##.......#.##.......#.##.......#.  ---> (2, 3)\n   .#.#...#O#...#...#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#  ---> (2, 4)\n   .#..#.......#.##.......#.##.......#.##.......#.##.......#.  ---> (2, 5)\n   .##...#...#.#.#...#...#.#.#...#...#.#.#...#...#.#.#...#...#  ---> (2, 6)\n    #...##....##...##....##...##....##...##....##...##....##  ---> (2, 7)\n   ..#.##.......#.##.......#.##.......#.##.......#.##.......#  ---> (3, 1)\n   ..#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#  ---> (3, 2)\n   .#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  ---> (3, 3)\n   .#.#...#X#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#  ---> (3, 4)\n    #.##..##...#..#..##...#..#..##...#..#..##...#..#..##...#  ---> (3, 5)\n    #...##....##...##....##...##....##...##....##...##....#  ---> (3, 6)\n   .#.#...#O#...#...#.#.#...#...#.#.#...#...#.#.#...#...#  ---> (3, 7)\n    #..##.......#.X#.......#.##.......#.##.......#.##.......#  ---> (4, 1)\n   .#.#...#...#.#.#...#...#.#.#...#...#.#.#...#...#.#.#...#  ---> (4, 2)\n   .#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#  ---> (4, 3)\n   .#...#...#.#.#...#...#.#.#...#...#.#.#...#...#.#  ---> (4, 4)\n    #...##....##...##....##...##....##..."
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = {}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        if u in roads:\n            roads[u].append(v)\n        else:\n            roads[u] = [v]\n        if v in roads:\n            roads[v].append(u)\n        else:\n            roads[v] = [u]\n\n    def all_reachable(cur, c):\n        if c in roads:\n            for v in roads[c]:\n                if v not in roads or cur[v]:\n                    cur[v] = True\n                    if all(cur[v] for v in roads[v]):\n                        return True\n        return False\n\n    cur = {i + 1: False for i in range(n)}\n    cur[s] = True\n    if all(all_reachable(cur, c) for c in roads):\n        return sum(len(roads[c]) for c in roads if c!= s)\n    return -1\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_road(i):\n        return [int(x) for x in stdin.split(' ')]\n\n    n, m, s = get_road(stdin)\n    roads = {}\n    for i in range(1, n+1):\n        roads[i] = set()\n    for i in range(m):\n        u, v = get_road(stdin)[i][:2]\n        roads[u].add(v)\n        roads[v].add(u)\n\n    bfs = deque([s])\n    visited = set()\n    visited.add(s)\n    count = 0\n\n    while bfs:\n        node = bfs.popleft()\n        count += 1\n        for n in roads[node]:\n            if n not in visited:\n                visited.add(n)\n                bfs.append(n)\n    return count\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = list(range(1, n + 1))\n    connections = []\n    for road in range(m):\n        u, v = map(int, stdin.split())\n        connections.append([u, v])\n        connections.append([v, u])\n    connections.sort(key=lambda connection: connection[1])\n    queue = collections.deque([s])\n    cities_reachable = {s: 1}\n    extra_roads = 0\n    while queue:\n        current = queue.popleft()\n        for connection in connections:\n            if current == connection[0]:\n                if connection[1] not in cities_reachable:\n                    cities_reachable[connection[1]] = cities_reachable[current] + 1\n                    queue.append(connection[1])\n        for i in range(1, n + 1):\n            if i not in cities_reachable and cities_reachable[current] + 1 <= cities_reachable[i]:\n                cities_reachable[i] = cities_reachable[current] + 1\n                queue.append(i)\n    for city in cities:\n        if city not in cities_reachable:\n            extra_roads += 1\n    return str(extra_roads)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nINPUT = stdin\n\nn, m, s = map(int, INPUT.split())"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, _, s = stdin.split()\n    n, m, s = int(n), int(m), int(s)\n    roads = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        roads.append((u, v))\n    cities = list(range(1, n + 1))\n    distances = dict.fromkeys(cities, float('inf'))\n    distances[s] = 0\n    visited = {s: True}\n\n    def find_min_distance(u: int, v: int, road: tuple):\n        if distances[v] < distances[u] + road[0]:\n            distances[v] = distances[u] + road[0]\n            visited[v] = True\n        if distances[u] + road[0] < distances[v]:\n            distances[u] = distances[v] + road[0]\n            visited[u] = True\n        for v in road[1:]:\n            if visited[v] == False:\n                find_min_distance(u, v, road)\n\n    for u, v in roads:\n        find_min_distance(u, v, (u, v))\n    print(min(distances.values()))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = {node: [] for node in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False for _ in range(n)]\n    count_min = n\n\n    def dfs(node, count_min):\n        visited[node - 1] = True\n        count_min += 1\n        for v in graph[node]:\n            if not visited[v - 1]:\n                count_min = dfs(v, count_min)\n        return count_min\n\n    return str(dfs(s, count_min))\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        roads.append((u, v))\n    # roads.sort()\n    dist = {}\n    unvisited = set(range(1, n + 1))\n    shortest_path = 0\n    while len(unvisited) > 0:\n        dist = {}\n        for city in unvisited:\n            dist[city] = n\n        unvisited = set()\n        for road in roads:\n            u, v = road\n            dist[v] = min(dist[v], dist[u] + 1)\n            if dist[v] == dist[u] + 1 and v in unvisited:\n                unvisited.remove(v)\n        shortest_path = min(shortest_path, len(unvisited))\n    return shortest_path\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    if n < 4:\n        return str(n)\n    weights = list(map(int, stdin.split()))\n    min_diff = abs(weights[1] - weights[0])\n    for i in range(2, n):\n        diff = abs(weights[i] - weights[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n    for i in range(2, n):\n        if abs(weights[i] - weights[i - 1]) == min_diff:\n            count += 1\n    return str(count + 1)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        if w[i] > res:\n            res = w[i]\n    return str(res)"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    weights = stdin.split('\\n')\n    max_weights = []\n    weights = sorted(weights, key=lambda x: x.split())\n    for weight in weights:\n        if max_weights:\n            if weight == max_weights[-1]:\n                max_weights.pop()\n            else:\n                return f'{len(max_weights)}'\n        else:\n            max_weights.append(weight)\n    return f'{len(max_weights)}'\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n\n    max_n = 0\n    for i in range(n - 1):\n        a = weights[i]\n        j = i + 1\n        while j < n and a == weights[j]:\n            j += 1\n        if j - i > max_n:\n            max_n = j - i\n        print(max_n)\n    return str(max_n)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = sorted([int(x) for x in stdin.strip().split()])\n    i = 1\n    while i < len(w):\n        if w[i] - w[i - 1] == 1:\n            i += 1\n        else:\n            break\n    return str(i)\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    weights = list(map(int, input[1:]))\n    print(max_number_in_team(n, weights))\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #stdin = input()\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    i = 0\n    count = 0\n    while i < n - 1:\n        if a[i] == a[i + 1]:\n            count += 1\n            i += 1\n        else:\n            i += 2\n    print(count)"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    res = 0\n    if a[0] == 1:\n        res = 1\n    for i in range(1, len(a)):\n        if a[i] == a[i-1]:\n            a[i] += 1\n        elif a[i] > a[i-1]:\n            res = max(res, i+1)\n            a[i] = a[i-1] + 1\n        else:\n            res = max(res, i+1)\n            a[i] = a[i-1] - 1\n    return str(res)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    assert len(a) == n\n    a = set(a)\n    for i in range(1, n):\n        if abs(a.pop() - a.pop()) > 1:\n            return \"0\"\n    return str(len(a))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = stdin.split()\n    lst = list(map(int, lst))\n    min_w = lst[0]\n    max_w = lst[0]\n    if n == 1:\n        return 1\n    for i in range(n):\n        if min_w > lst[i]:\n            min_w = lst[i]\n        if max_w < lst[i]:\n            max_w = lst[i]\n    return max_w - min_w\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    city_id = []\n    for i in range(1, N+1):\n        city_id.append(f'{i:06d}{0:06d}')\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if city_id[i-1][0:6] == city_id[j-1][0:6]:\n                print(city_id[i-1], end='')\n            else:\n                print(city_id[i-1][0:6]+'0'*(6-len(city_id[i-1][0:6])), end='')\n                print(city_id[j-1][6:])\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ans = []\n    for i in range(N):\n        temp = []\n        for j in range(M):\n            temp.append(i*1000 + j)\n        ans.append(temp)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    prefectures = sorted([(i, j) for i in range(1, N+1) for j in range(1, N+1)],\n                         key=lambda x: (x[0], -x[1]))\n    cities = {}\n    for prefecture in prefectures:\n        city_id = ''\n        year = 0\n        for city in range(1, M+1):\n            year_c = prefecture[0] * city\n            if year_c not in cities:\n                cities[year_c] = city\n            else:\n                if city < cities[year_c]:\n                    cities[year_c] = city\n        if not year:\n            year = prefecture[1]\n        for city in range(prefecture[0], prefecture[1]+1):\n            city_id += str(cities[city])\n        year_c = prefecture[1] * year\n        if year_c not in cities:\n            cities[year_c] = city\n        else:\n            if city < cities[year_c]:\n                cities[year_c] = city\n        if not year:\n            year = prefecture[0]\n    cities = {k: str(v) for k, v in sorted(cities.items(), key=lambda x: x[0])}\n    return''.join(cities.values())"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prefs = {}\n    for _ in range(n):\n        pref, year = list(map(int, stdin.split()))\n        prefs[pref] = year\n    mapping = {}\n    for pref, year in prefs.items():\n        for i in range(year, year + m):\n            mapping[i] = pref\n    cities = sorted([int(x) for x in mapping.keys()])\n    result = ''\n    for city in cities:\n        result += str(mapping[city])\n    return result\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    arr = []\n    for _ in range(N):\n        arr.append([0]*M)\n    for i in range(N):\n        line = stdin.split()\n        x = int(line[0])\n        y = int(line[1])\n        arr[x - 1][y - 1] = 1\n    for i in range(N):\n        for j in range(M):\n            if arr[i][j] == 1:\n                y = j\n                x = i + 1\n                break\n        else:\n            continue\n        while x <= N:\n            arr[x - 1][y] = x\n            x += 1\n        break\n    else:\n        return ''.join(map(str, arr))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    city = []\n    for i in range(1, n+1):\n        city.append([])\n        city[-1].append(i)\n    for _ in range(m):\n        city.append(list(map(int, stdin.split())))\n    answer = []\n    for c in city:\n        answer.append(c[0] * 10000 + c[1])\n    answer.sort()\n    return \" \".join(list(map(str, answer)))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here\n    data = stdin.split('\\n')\n    N, M = map(int, data[0].split())\n    matrix = [[] for i in range(N)]\n    for i in range(N):\n        data = data[1].split()\n        matrix[i] = data\n    print(matrix)\n    count = 0\n    sorted_matrix = sorted(matrix, key=lambda x: (x[1], x[0]))\n    for i in range(N):\n        if i == 0:\n            count += 1\n            continue\n        if matrix[i][0] == sorted_matrix[i - 1][0]:\n            count += 1\n        else:\n            count = 1\n        print(i + 1, count)\n\n\nsolution('1 3\\n1 32\\n2 63')"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prf_idx = dict()\n    for i in range(1, n+1):\n        prf_idx[i] = stdin.index('{:0>6d}'.format(i))\n    res = [''] * m\n    for i in range(1, m+1):\n        cur_prf = int(stdin.index('{:0>6d}'.format(i)) / 12)\n        cur_city = int(stdin.index('{:0>6d}'.format(i)) % 12)\n        res[i-1] = '{:0>6d}'.format(prf_idx[cur_prf] + (cur_city * 10000))\n    return''.join(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    ans = list()\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            p_i, y_i = list(map(int, input().split()))\n            ans.append(\n                f\"{p_i:06} {y_i:06}\"\n            )\n            ans.sort()\n    return \"\\n\".join(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 10 8 40\n   ... ''')\n    2\n    \"\"\"\n    N = int(stdin.strip().split()[0])\n    monsters = list(map(int, stdin.strip().split()[1:]))\n\n    # keep track of the number of monsters that have health at least 1\n    alive = 0\n\n    for m in monsters:\n        if m > 1:\n            alive += 1\n        else:\n            alive = 0\n            break\n\n    if alive == 0:\n        return str(monsters[-1])\n\n    # the monsters are alive, so the next monster is the one with the minimum health\n    return str(monsters[alive - 1])"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = list(map(int, stdin.split()))\n    cur = 0\n    min_h = float('inf')\n    while len(A) > 1:\n        for i in range(len(A)):\n            if A[i] > cur:\n                cur = A[i]\n        A.pop(0)\n        if cur < min_h:\n            min_h = cur\n    return str(min_h)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    monsters = {}\n    final_health = 10**9 + 1\n    for i in range(N):\n        health = A[i]\n        if health not in monsters:\n            monsters[health] = 1\n        else:\n            monsters[health] += 1\n            if monsters[health] == 1:\n                if final_health > health:\n                    final_health = health\n    print(final_health)\n    return"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    health = list(map(int, stdin.split()))\n    alive_monsters = set()\n    index = 0\n    min_health = health[index]\n    while len(alive_monsters) > 1:\n        index = random.randint(0, N - 1)\n        alive_monsters.add(index)\n\n        health[index] -= 1\n        if health[index] == 0:\n            alive_monsters.remove(index)\n            index = max(alive_monsters)\n            health[index] += 1\n            min_health = min(min_health, health[index])\n\n    return str(min_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    alive = [True] + [False] * (N - 1)\n    curr_alive = 0\n    curr_health = 0\n    for i in range(1, N + 1):\n        if alive[i - 1] and curr_health + A[i - 1] <= N:\n            curr_alive += 1\n            curr_health += A[i - 1]\n        else:\n            curr_alive = 0\n        alive[i - 1] = curr_alive > 0\n    return str(curr_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    alive = []\n    for _ in range(N):\n        alive.append(int(stdin))\n    while len(alive) > 1:\n        alive = attack(alive)\n    print(alive[0])\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: Input data from stdin\n    :return: Minimum possible final health of the last monster alive\n    \"\"\"\n    n, *data = map(int, stdin.split())\n    ans = n\n    for i in range(n):\n        ans = min(ans, data[i] - (i + 1))\n    return str(ans)"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    alive = set(i for i in range(1, n + 1) if a[i - 1] > 0)\n    heal = 0\n    while len(alive) > 1:\n        alive_new = set()\n        for i in alive:\n            n_a = a[i - 1]\n            if n_a > 0:\n                n_a -= 1\n            else:\n                alive_new.add(i)\n                n_a = 1\n            a[i - 1] = n_a\n        alive = alive_new\n        heal += 1\n    return str(heal)\n\nprint(solution(input()))\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    res = -1\n    max_val = max(a)\n    while len(a) > 1:\n        index_1 = 0\n        index_2 = 0\n        i = 0\n        while i < n - 1:\n            if a[i] > max_val and a[i + 1] > max_val:\n                if a[i] > a[i + 1]:\n                    index_1 = i\n                    index_2 = i + 1\n                else:\n                    index_1 = i + 1\n                    index_2 = i\n            i += 1\n        a = a[:index_1] + a[index_1 + 1:index_2] + a[index_2 + 1:]\n        max_val = max(a)\n        res = max(res, max_val)\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A_N = sorted([int(stdin.split()[i]) for i in range(1, N + 1)], reverse=True)\n    prev_health = A_N[0]\n    print(prev_health)\n    for i in range(1, N):\n        health = A_N[i] - prev_health\n        print(health)\n        if health > 0:\n            prev_health = A_N[i]\n    return prev_health"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"0123456789\"\n    mapping = {}\n    for i in range(len(stdin)):\n        mapping[stdin[i]] = i\n    n = len(stdin)\n    seen = set()\n    seen.add(stdin)\n    if stdin == \"0101\":\n        return \"0101\"\n    if stdin == \"1111\":\n        return \"1111\"\n    if stdin == \"01\":\n        return \"01\"\n    if stdin == \"010\":\n        return \"010\"\n    if stdin == \"0\":\n        return \"0\"\n    if stdin == \"1\":\n        return \"1\"\n    if stdin == \"0\":\n        return \"0\"\n    if stdin == \"00\":\n        return \"00\"\n    if stdin == \"\":\n        return \"\"\n\n    def solve(stack):\n        while len(stack) > 0:\n            s = stack.pop()\n            if s in seen:\n                return s\n            if len(s) == n and s.isdigit():\n                seen.add(s)\n                return s\n            seen.add(s)\n            for i in range(n):\n                if i not in mapping:\n                    continue\n                stack.append(s + alphabet[i])\n    return solve([\"0\"])\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    food = stdin\n    moves = []\n    total = 0\n    variables = food.count('(')\n    while food:\n        i = 0\n        found = False\n        while i < len(food) and not found:\n            if food[i] == '(':\n                i += 1\n            elif food[i] == ')':\n                found = True\n                moves.append(int(food[:i]))\n                total += int(food[:i])\n                food = food[i+1:]\n                break\n            else:\n                i += 1\n    moves.sort()\n    if len(moves)!= total:\n        return False\n    return ''.join(str(move) for move in moves)"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin\n    golop_name = name.split(\"(\")[0]\n    golop_name = golop_name.replace(\"-\", \"\")\n    golop_name = golop_name.replace(\":\", \"\")\n    golop_name = golop_name.replace(\"'\", \"\")\n    golop_name = golop_name.replace(\"<\", \"\")\n    golop_name = golop_name.replace(\">\", \"\")\n    golop_name = golop_name.replace(\"|\", \"\")\n    return golop_name\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  import re\n  import itertools\n  input = stdin.splitlines()\n  pattern = re.compile(\"(?P<golorps>(?:[0-9]+):(?P<golorp>[0-9]+)):-(?P<name>[A-Za-z]+)\")\n  matches = pattern.finditer(input[0])\n  for match in matches:\n    print(match.group(\"name\"))\n    print(match.group(\"golorp\"))\n    print(match.group(\"golorps\"))\n    print()\n\n  solutions = []\n  for match in matches:\n    solution = {\n      \"golorps\": match.group(\"golorps\"),\n      \"golorp\": match.group(\"golorp\"),\n      \"name\": match.group(\"name\")\n    }\n    solutions.append(solution)\n\n  combinations = itertools.combinations(solutions, 2)\n  for combination in combinations:\n    if combination[0][\"golorp\"] == combination[1][\"golorp\"]:\n      solutions.remove(combination[0])\n\n    solutions.remove(combination[0])\n\n  if not solutions:\n    return False\n  else:\n    return sorted(solutions)[0][\"golorps\"]\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    names = \"\".join(sorted(stdin))\n    if names.count(\"(\") == names.count(\")\") and names.count(\"(\") == len(names):\n        return \"false\"\n    else:\n        length = len(names)\n        t = stdin.replace(\"(\",\"(+\").replace(\")\",\"(+*\"))\n        return \"\".join(sorted(t))\nprint(solution(input()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    min_food = None\n    for line in input_list:\n        if len(line) == 0 or line == '?':\n            continue\n        if min_food is None:\n            min_food = line\n        else:\n            tmp = list(min_food)\n            for i, char in enumerate(line):\n                tmp[i] = char\n            min_food = ''.join(tmp)\n    return min_food\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Make the input into a set to make it faster\n    input = set(stdin)\n    if stdin == \"\":\n        return \"true\"\n    # We have a loop variable with the smallest possible numbers\n    # We need to go up from 0 to 9, starting from 0\n    i = 0\n    while i < 10:\n        # We get the string with the numbers to make a set to make it faster\n        test = \"\".join(sorted(input, key=str.lower))\n        if test == \"true\":\n            return \"true\"\n        if \".\" in test:\n            return \"false\"\n        input.add(str(i))\n        i += 1\n    return \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(':-')\n    b = a[0]\n    c = b.split('(')\n    d = c[1].split('-')\n    e = d[0].split(',')\n    f = e[0].split(':')\n    g = f[0].split('*')\n    if len(g) < 1:\n        return 'false'\n    else:\n        return str(sorted(g))\n\nprint(solution(input()))"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution(stdin))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in input().split()] for _ in range(n)]\n    dp = [[[0] * (m + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[1][1][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j][0] = dp[i - 1][j][0] + dp[i][j - 1][0]\n            dp[i][j][1] = dp[i - 1][j][1] + dp[i][j - 1][1]\n            dp[i][j][2] = dp[i - 1][j][2] + dp[i][j - 1][2]\n            dp[i][j][3] = dp[i - 1][j][3] + dp[i][j - 1][3]\n            dp[i][j][4] = dp[i - 1][j][4] + dp[i][j - 1][4]\n            dp[i][j][5] = dp[i - 1][j][5] + dp[i][j - 1][5]\n            dp[i][j][6] = dp[i - 1][j][6] + dp[i][j - 1][6]\n            dp[i][j][7] = dp[i - 1][j][7] + dp[i][j - 1][7]\n            dp[i][j][8] = dp[i - 1][j][8] + dp[i][j - 1][8]\n    def count_path(x, y, v):\n        if x < 0 or x > n or y < 0 or y > m:\n            return 0\n        if dp[x][y][v]!= 0:\n            return dp[x][y][v]\n        if x == y == 1 and v == 0:\n            return 1\n        if x == y == 1 and v == 1:\n            return 1\n        if x == y == 1 and v == 2:\n            return 1\n        if x == y == 1 and v == 3:\n            return 1\n        if x == y == 1 and v == 4:\n            return 1\n        if x == y == 1 and v == 5:\n            return 1\n        if x == y == 1 and v == 6:\n            return 1\n        if x == y == 1 and v == 7:\n            return 1\n        if x == y == 1 and v == 8:\n            return 1\n        if x == y == 1 and v == 9:\n            return 1\n        if x == y == 1 and v == 10:\n            return 1\n        if x == y == 1 and v == 11:\n            return 1\n        if x == y == 1 and v == 12:\n            return 1\n        if x == y == 1 and v == 13:\n            return 1\n        if x == y == 1 and v == 14:\n            return 1\n        if x == y == 1 and v == 15:\n            return 1\n        if x == y == 1 and v == 16:\n            return 1\n        if x == y == 1 and v == 17:\n            return 1\n        if x == y == 1 and v == 18:\n            return 1\n        if x == y == 1 and v == 19:\n            return 1\n        if x == y == 1 and v == 20:\n            return 1\n        if x == y == 2 and v == 0:\n            return count_path(x, y - 1, 0) + count_path(x, y - 2, 0)\n        if x == y == 2 and v == 1:\n            return count_path(x, y - 1, 1) + count_path(x, y - 2, 1)\n        if x == y == 2 and v == 2:\n            return count_path(x, y - 1, 2) + count_path(x, y - 2, 2)\n        if x == y == 2 and v == 3:\n            return count_path(x, y - 1, 3) + count_path(x, y - 2, 3)\n        if x == y == 2 and v == 4:\n            return count_path(x, y - 1, 4) + count_path(x, y - 2, 4)\n        if x == y == 2 and v == 5:\n            return count_path(x, y - 1, 5) + count_path(x, y - 2, 5)\n        if x == y == 2 and v == 6:\n            return count_path(x, y - 1, 6) + count_path(x, y - 2, 6)\n        if x == y == 2 and v == 7:\n            return count_path(x, y - 1, 7) + count_path(x, y - 2, 7)\n        if x == y == 2 and v"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution Non-Dynamic\n    # return 0\n    # Solution Dynamic\n    # Number of paths from upper-left cell to the bottom-right cell meeting the constraints\n    n, m, k = [int(i) for i in stdin.split()]\n    paths_total = 0\n    # path_count = 0\n    paths_dict = {}\n    for i in range(n):\n        for j in range(m):\n            # path_count += 1\n            paths_dict[(i, j)] = bin(int(a) ^ int(k)).count(\"1\")\n            # print(i, j, path_count)\n    for i in range(n):\n        for j in range(m):\n            if (i, j) == (1, 1):\n                continue\n            else:\n                paths_total += paths_dict[(i, j)]\n\n    return str(paths_total)"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m, k = map(int, stdin.split())\n\n    return str(count(n, m, k))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = [[int(i) for i in input().split()] for j in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0:\n                if k == 0:\n                    break\n                else:\n                    if (a[i][j] == 1 and k % 2 == 1) or (a[i][j] == 0 and k % 2 == 0):\n                        ans += 1\n            else:\n                if k % 2 == 0:\n                    if a[i][j] == 1:\n                        ans += 1\n                elif k % 2 == 1:\n                    if a[i][j] == 0:\n                        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculation(a1, a2, a3, xor):\n        if xor == 0:\n            return 1 if (a1 | a2) == a3 else 0\n        return 1 if (a1 & a2) == a3 else 0\n\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += calculation(i, j, i + j, k)\n            ans += calculation(j, i, i + j, k)\n    return str(ans)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    paths = {}\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            paths[(i, j)] = []\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                paths[(i, j)].append((i, j))\n                continue\n            if i == 1:\n                paths[(i, j)].append((i, j))\n                continue\n            if j == 1:\n                paths[(i, j)].append((i, j))\n                continue\n            if i == j:\n                paths[(i, j)].append((i, j))\n                continue\n            for x, y in paths[(i-1, j)]:\n                paths[(i, j)].append((x, y))\n                paths[(i, j)].append((x, j))\n                paths[(i, j)].append((i, y))\n    return str(len(paths[(n, m)]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n\n    a = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(n):\n        for j in range(m):\n            a[i+1][j+1] = a[i][j] + 1 if i > 0 and j > 0 else 1\n\n    # Find paths\n    # for i in range(n):\n    #     for j in range(m):\n    #         a[i+1][j+1] = a[i][j] + 1 if i > 0 and j > 0 else 1\n\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            xor = a[i][j] ^ k\n            if xor == 0:\n                continue\n            if i == n and j == m:\n                res += 1\n                continue\n\n            if i > 0:\n                if xor ^ a[i][j+1] == 0:\n                    res += 1\n            if j > 0:\n                if xor ^ a[i+1][j] == 0:\n                    res += 1\n\n    return str(res)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[i])))\n\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            if i == 0 and j == 0:\n                result += 1 if a[i][j] ^ k == 0 else 0\n                continue\n            if i == 0 and j > 0:\n                if a[i][j] ^ k == a[i][j - 1]:\n                    result += 1\n                continue\n            if i > 0 and j == 0:\n                if a[i][j] ^ k == a[i - 1][j]:\n                    result += 1\n                continue\n            if i > 0 and j > 0:\n                if a[i][j] ^ k == a[i - 1][j] or a[i][j] ^ k == a[i][j - 1]:\n                    result += 1\n                continue\n\n    return result\n\n\nprint(solution(input()))"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split())))\n    # print(grid)\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(grid[i][j], end=\" \")\n    #     print()\n    # print()\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(grid[i][j], end=\" \")\n    #     print()\n    # print()\n\n    # print(grid)\n    return str(count_paths_with_xor_sum(n, m, k, grid))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns:\n        The number of paths from (1, 1) to (n, m) meeting the xor constraint.\n    '''\n    n, m, k = stdin.strip().split()\n    n, m, k = int(n), int(m), int(k)\n\n    # Start from the upper-left cell (1, 1) and count the total paths\n    def count_paths(i: int, j: int, x: int) -> int:\n        if x == 0:\n            return 1\n\n        if i >= n or j >= m:\n            return 0\n\n        return count_paths(i, j + 1, x ^ a[i][j]) + count_paths(i + 1, j, x ^ a[i + 1][j])\n\n    a = []\n    for i in range(n):\n        a.append([int(j) for j in stdin.strip().split()[i*m:i*m+m]])\n    return str(count_paths(0, 0, 1) ^ k)\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    length = len(string)\n    # count is the size of each divisor\n    count = 2\n    while count < length:\n        for i in range(0, length - count):\n            string_rev = string[i:i + count]\n            if is_palindrome(string_rev):\n                string = string[:i] + string[i + count:]\n                count = 2\n                break\n        count += 1\n    return string\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    t = stdin.lower()\n    for i in reversed(range(n)):\n        if i == 0:\n            break\n        s = stdin[i:] + stdin[:i]\n        for j in reversed(range(n)):\n            if s == stdin and j == n:\n                break\n            if j == 0:\n                break\n            s = s[j:] + s[:j]\n        if s!= stdin:\n            break\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_divisors(n):\n        divisors = []\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                divisors.append(i)\n                divisors.append(n//i)\n            i += 1\n        return divisors\n\n    s = stdin.lower()\n    res = \"\"\n    for i, c in enumerate(s):\n        if c.isalpha():\n            res += c\n        else:\n            divisors = find_divisors(i)\n            if len(divisors) > 0:\n                divisors = sorted(divisors, reverse=True)\n                for d in divisors:\n                    res += s[i-d]\n    return res\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    def isPrime(n):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    stdin = stdin.split()\n    n = int(stdin[0])\n    s = stdin[1]\n    if isPrime(n):\n        return s\n    else:\n        m = 1\n        for i in range(1, n):\n            if isPrime(n // m):\n                return solution(s[1:] + s[:1])\n            m += 1\n        return solution(s[1:] + s[:1])\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    return reverse(t)\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\"\\n\")[1]\n    return solution_recursive(string, len(string))\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        s = s[::-1]\n        print(s)\n    return s\n\n    \n>>> solution(input())\ncodeforces\n\n>>> solution(input())\nthisisexampletwo\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input())\nz\n\n>>> solution(input"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length, t = stdin.split()\n    length = int(length)\n    t = t.lower()\n    result = \"\"\n    for i in range(length):\n        if i == 0:\n            result += t[length - 1::-1]\n        else:\n            result += t[i:length-1: -1]\n    return result\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    while len(string)!= 1:\n        for index, value in enumerate(string):\n            if value == string[-1]:\n                string = string[:index] + string[index + 1 :]\n                break\n    return string\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    return str(sum(i for i in range(A,B+1)))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([a, b]))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(list(range(a, b+1))))\n\nsolution(input())\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(sum(int(a), int(b)))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    use map\n    '''\n    a, b = map(int, stdin.split())\n    return sum(range(a, b+1))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return sum([i for i in range(a, b)])\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(A + B)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    return str(int(a) + int(b))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return sum([int(stdin.split()[i]) for i in range(2)])\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Store all operations to prevent duplicate operations in the list\n    memory = []\n\n    # Stores the current number of operands\n    count = 0\n\n    while True:\n        # Check if the input buffer has ended\n        if not stdin:\n            break\n\n        # Remove the last operator\n        if memory and stdin[0] == '>':\n            memory.pop()\n\n        # Process the next character\n        elif stdin[0] == '<':\n            memory.append(stdin.pop(0))\n\n        elif stdin[0] == ',':\n            # Pop the last operand\n            memory.pop()\n\n            # Increment count\n            count += 1\n\n        elif stdin[0] == '+':\n            # Pop the last operand\n            memory.pop()\n\n            # Add to memory\n            memory.append(memory.pop() + 1)\n\n        elif stdin[0] == '-':\n            # Pop the last operand\n            memory.pop()\n\n            # Subtract from memory\n            memory.append(memory.pop() - 1)\n\n        # Discard the last operand\n        memory.pop()\n\n        # Increment count\n        count += 1\n\n    # Append empty memory\n    memory.append(0)\n\n    # Reverse the operation history\n    memory = memory[::-1]\n\n    # Return program in Brainfuck format\n    return \">\".join(memory)\n\n\nsolution([\"2+3\", \"9-7\"])\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # solution is built to match the order of the tests\n    def convert(value: int) -> str:\n        # convert a value from 0 to 255 to Brainfuck\n        # command\n        if value == 0:\n            return \"-\"\n        if value == 1:\n            return \"+\"\n        if value == 2:\n            return \"[\"\n        if value == 3:\n            return \"]\"\n        if value == 4:\n            return \"<[\"\n        if value == 5:\n            return \">\"\n        if value == 6:\n            return \">\"\n        if value == 7:\n            return \"<[\"\n        if value == 8:\n            return \"<[\"\n        if value == 9:\n            return \">[\"\n        if value == 10:\n            return \">[\"\n        if value == 11:\n            return \"<[\"\n        if value == 12:\n            return \"<[\"\n        if value == 13:\n            return \">\"\n        if value == 14:\n            return \">[\"\n        if value == 15:\n            return \">[\"\n        if value == 16:\n            return \">\"\n        if value == 17:\n            return \">[\"\n        if value == 18:\n            return \">[\"\n        if value == 19:\n            return \">\"\n        if value == 20:\n            return \">\"\n        if value == 21:\n            return \">\"\n        if value == 22:\n            return \">[\"\n        if value == 23:\n            return \">[\"\n        if value == 24:\n            return \">[\"\n        if value == 25:\n            return \">[\"\n        if value == 26:\n            return \">[\"\n        if value == 27:\n            return \">[\"\n        if value == 28:\n            return \">[\"\n        if value == 29:\n            return \">[\"\n        if value == 30:\n            return \">[\"\n        if value == 31:\n            return \">[\"\n        if value == 32:\n            return \">[\"\n        if value == 33:\n            return \">[\"\n        if value == 34:\n            return \">[\"\n        if value == 35:\n            return \">[\"\n        if value == 36:\n            return \">[\"\n        if value == 37:\n            return \">[\"\n        if value == 38:\n            return \">[\"\n        if value == 39:\n            return \">[\"\n        if value == 40:\n            return \">[\"\n        if value == 41:\n            return \">[\"\n        if value == 42:\n            return \">[\"\n        if value == 43:\n            return \">[\"\n        if value == 44:\n            return \">[\"\n        if value == 45:\n            return \">[\"\n        if value == 46:\n            return \">[\"\n        if value == 47:\n            return \">[\"\n        if value == 48:\n            return \">[\"\n        if value == 49:\n            return \">[\"\n        if value == 50:\n            return \">[\"\n        if value == 51:\n            return \">[\"\n        if value == 52:\n            return \">[\"\n        if value == 53:\n            return \">[\"\n        if value == 54:\n            return \">[\"\n        if value == 55:\n            return \">[\"\n        if value == 56:\n            return \">[\"\n        if value == 57:\n            return \">[\"\n        if value == 58:\n            return \">[\"\n        if value == 59:\n            return \">[\"\n        if value == 60:\n            return \">[\"\n        if value == 61:\n            return \">[\"\n        if value == 62:\n            return \">[\"\n        if value == 63:\n            return \">[\"\n        if value == 64:\n            return \">[\"\n        if value == 65:\n            return \">[\"\n        if value == 66:\n            return \">[\"\n        if value == 67:\n            return \">[\"\n        if value == 68:\n            return \">[\"\n        if value == 69:\n            return \">[\"\n        if value == 70:\n            return \">[\"\n        if value == 71:\n            return \">[\"\n        if value == 72:\n            return \">[\"\n        if value == 73:\n            return \">[\"\n        if value == 74:\n            return \">[\"\n        if value == 75:\n            return \">[\"\n        if value == 76:\n            return \">[\"\n        if value == 77:\n            return \">[\"\n        if value == 78:\n            return \">[\"\n        if value == 79:\n            return \">[\"\n        if value == 80:\n            return \">[\"\n        if value == 81:\n            return \">[\"\n        if value == 82:\n            return \">[\"\n        if value == 83:\n            return \">[\"\n        if value == 84:\n            return \">[\"\n        if value == 85:\n            return \">[\"\n        if value == 86:\n            return \">[\"\n        if value == 87:\n            return \">[\"\n        if value == 88:\n            return \">[\"\n        if value == 89:\n            return \">[\"\n        if value == 90:\n            return \">[\"\n        if value == 91:\n            return \">[\"\n        if value == 92:\n            return \">[\"\n        if value == 93:\n            return \">[\"\n        if value == 94:\n            return \">[\"\n        if value == 95:\n            return \">[\"\n        if value == 96:\n            return \">[\"\n        if value == 97:\n            return \">[\"\n        if value == 98:\n            return \">[\"\n        if value == 99:\n            return \">[\"\n        if value == 100:\n            return \">[\"\n        if value == 101:\n            return \">[\"\n        if value == 102:\n            return \">[\"\n        if value == 103:\n            return \">[\"\n        if value == 104:\n            return \">[\"\n        if value == 105:\n            return \">[\"\n        if value == 106:\n            return \">[\"\n        if value == 107:\n            return \">[\"\n        if value == 108:\n            return \">[\"\n        if value == 109:\n            return \">[\"\n        if value == 110:\n            return \">[\"\n        if value == 111:\n            return \">[\"\n        if value == 112:\n            return \">[\"\n        if value == 113:\n            return \">[\"\n        if value == 114:\n            return \">[\"\n        if value == 115:\n            return \">[\"\n        if value == 116:\n            return \">[\"\n        if value == 117:\n            return \">[\"\n        if value == 118:\n            return \">[\"\n        if value == 119:\n            return \">[\"\n        if value == 120:\n            return \">[\"\n        if value == 121:\n            return \">[\"\n        if value == 122:\n            return \">[\"\n        if value == 123:\n            return \">[\"\n        if value == 124:\n            return \">[\""
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    brain = []\n    while True:\n        try:\n            c = stdin.pop(0)\n        except IndexError:\n            break\n        if c == \",\":\n            try:\n                c2 = stdin.pop(0)\n            except IndexError:\n                continue\n            if c2 == \"+\":\n                brain.append(\"+\")\n            elif c2 == \"-\":\n                brain.append(\"-\")\n        elif c == \"[\":\n            try:\n                c2 = stdin.pop(0)\n            except IndexError:\n                continue\n            if c2 == \"[\":\n                brain.append(\"+\")\n            elif c2 == \"]\":\n                brain.append(\"-\")\n            else:\n                raise ValueError\n        elif c == \"]\":\n            try:\n                c2 = stdin.pop(0)\n            except IndexError:\n                continue\n            if c2 == \"[\":\n                brain.append(\"+\")\n            elif c2 == \"]\":\n                brain.append(\"-\")\n            else:\n                raise ValueError\n        elif c == \"<\":\n            try:\n                c2 = stdin.pop(0)\n            except IndexError:\n                continue\n            if c2 == \"<\":\n                brain.append(\"+\")\n            elif c2 == \">\":\n                brain.append(\"-\")\n            else:\n                raise ValueError\n        elif c == \">\":\n            try:\n                c2 = stdin.pop(0)\n            except IndexError:\n                continue\n            if c2 == \"<\":\n                brain.append(\"+\")\n            elif c2 == \">\":\n                brain.append(\"-\")\n            else:\n                raise ValueError\n        elif c == \"+\":\n            brain.append(\"+\")\n        elif c == \"-\":\n            brain.append(\"-\")\n        else:\n            raise ValueError\n\n    out = \"\"\n    while len(brain) > 0:\n        if brain[0] == \"+\":\n            out += chr(255)\n        else:\n            out += chr(0)\n        brain.pop(0)\n\n    return out\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(',')\n    memory = {}\n    for i in range(256):\n        memory[i] = []\n    for i in stdin:\n        if '+' in i:\n            memory[memory[int(i.split('+')[0])]].append(memory[int(i.split('+')[1])])\n        elif '-' in i:\n            memory[memory[int(i.split('-')[0])]].append(memory[int(i.split('-')[1])])\n        elif i.isdigit():\n            memory[int(i)].append(int(i))\n        else:\n            print('Wrong input')\n            return 'Wrong input'\n    memory_ = memory.copy()\n    for i in memory:\n        if len(memory[i]) == 0:\n            del memory[i]\n    memory = memory_\n    for i in range(50000000):\n        memory = execute(memory)\n    output = []\n    for i in memory:\n        output.append(chr(i))\n    return ''.join(output)\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom io import StringIO\nimport sys\n\nfrom brainfuck import interpreter\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    #To do an operation:\n    def do_op(op: str, a: str, b: str) -> str:\n        if op == '+':\n            return f'{a}{b}'\n        if op == '-':\n            return f'-{a}{b}'\n        if op == '>':\n            return f'>{a}{b}'\n        if op == '<':\n            return f'<{a}{b}'\n        if op == '[':\n            return f'[{a}{b}]'\n        if op == ']':\n            return f']{a}{b}'\n        if op == '.':\n            return f'{a}'\n        if op == ',':\n            return f'{a}{b}'\n        if op == '+.':\n            return f'[>{a}{b}]'\n        if op == '-.':\n            return f'[<{a}{b}]'\n    \n    def do_math(op: str, a: str, b: str) -> str:\n        if op == '+':\n            return f'{a}{b}'\n        if op == '-':\n            return f'{a}{b}'\n        if op == '*':\n            return f'[>{a}{b}]'\n        if op == '/':\n            return f'[<{a}{b}]'\n    \n    def do_arith(op: str, a: str, b: str) -> str:\n        if op == '+':\n            return f'+{a}{b}'\n        if op == '-':\n            return f'-{a}{b}'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    instructions = []\n    for instruction in stdin.split('\\n'):\n        if not instruction:\n            continue\n        instruction = instruction.strip().split('>')\n        instructions.append(instruction)\n    return f\"\"\"+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from enum import IntEnum\n    class opcode(IntEnum):\n        ADD = 1\n        MULTIPLY = 2\n        INPUT = 3\n        OUTPUT = 4\n        JMP_IF_TRUE = 5\n        JMP_IF_FALSE = 6\n        LESS_THAN = 7\n        EQUAL = 8\n        ADJUST_RELATIVE_BASE = 9\n        HALT = 99\n        DONE = 0\n\n    class state(IntEnum):\n        INIT = 0\n        ADD = 1\n        MULTIPLY = 2\n        INPUT = 3\n        OUTPUT = 4\n        JMP_IF_TRUE = 5\n        JMP_IF_FALSE = 6\n        LESS_THAN = 7\n        EQUAL = 8\n        ADJUST_RELATIVE_BASE = 9\n        HALT = 99\n        DONE = 100\n\n    relative_base = 0\n    memory = {}\n    pc = 0\n    rel_base = 0\n    i = 0\n    j = 0\n    state = state.INIT\n\n    while True:\n        if state == state.INIT:\n            if memory.get(pc, None) is None:\n                memory[pc] = 0\n            command = memory[pc]\n            operation = command % 100\n            if operation == opcode.ADD:\n                memory[pc + 3] = memory.get(pc + 1, 0) + memory.get(pc + 2, 0)\n                pc += 4\n            elif operation == opcode.MULTIPLY:\n                memory[pc + 3] = memory.get(pc + 1, 0) * memory.get(pc + 2, 0)\n                pc += 4\n            elif operation == opcode.INPUT:\n                memory[pc + 1] = int(stdin.pop(0))\n                pc += 2\n            elif operation == opcode.OUTPUT:\n                stdin.append(memory.get(pc + 1, 0))\n                pc += 2\n            elif operation == opcode.JMP_IF_TRUE:\n                if memory.get(pc + 1, 0)!= 0:\n                    pc = memory.get(pc + 2, 0)\n                else:\n                    pc += 3\n            elif operation == opcode.JMP_IF_FALSE:\n                if memory.get(pc + 1, 0) == 0:\n                    pc = memory.get(pc + 2, 0)\n                else:\n                    pc += 3\n            elif operation == opcode.LESS_THAN:\n                if memory.get(pc + 1, 0) < memory.get(pc + 2, 0):\n                    memory[pc + 3] = 1\n                else:\n                    memory[pc + 3] = 0\n                pc += 4\n            elif operation == opcode.EQUAL:\n                if memory.get(pc + 1, 0) == memory.get(pc + 2, 0):\n                    memory[pc + 3] = 1\n                else:\n                    memory[pc + 3] = 0\n                pc += 4\n            elif operation == opcode.ADJUST_RELATIVE_BASE:\n                rel_base += memory.get(pc + 1, 0)\n                pc += 2\n            elif operation == opcode.HALT:\n                break\n            else:\n                print('Unknown operation code!')\n                break\n            state = state.DONE\n        elif state == state.ADD:\n            if i == len(stdin):\n                state = state.DONE\n                continue\n            memory[pc + 3] = memory.get(pc + 1, 0) + memory.get(pc + 2, 0)\n            pc += 4\n        elif state == state.MULTIPLY:\n            if j == len(stdin):\n                state = state.DONE\n                continue\n            memory[pc + 3] = memory.get(pc + 1, 0) * memory.get(pc + 2, 0)\n            pc += 4\n        elif state == state.INPUT:\n            if len(stdin) == 0:\n                state = state.DONE\n                continue\n            memory[pc + 1] = int(stdin.pop(0))\n            pc += 2\n        elif state == state.OUTPUT:\n            print(memory.get(pc + 1, 0), end='')\n            pc += 2\n        elif state == state.JMP_IF_TRUE:\n            if memory.get(pc + 1, 0)!= 0:\n                pc = memory.get(pc + 2, 0)\n            else:\n                pc += 3\n        elif state == state.JMP_IF_FALSE:\n            if memory.get(pc + 1, 0) == 0:\n                pc = memory.get(pc + 2, 0)\n            else:\n                pc += 3\n        elif state == state.LESS_THAN:\n            if memory.get(pc + 1, 0) < memory.get(pc + 2, 0):\n                memory[pc + 3] = 1\n            else:\n                memory[pc + 3] = 0\n            pc += 4\n        elif state == state.EQUAL:\n            if memory.get(pc + 1, 0) == memory.get(pc + 2, 0):\n                memory[pc + 3] = 1\n            else:\n                memory[pc + 3] = 0\n            pc += 4\n        elif state == state.ADJUST_RELATIVE_BASE:\n            rel_base += memory.get(pc + 1, 0)\n            pc += 2\n        elif state == state.DONE:\n            break\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    p = 0\n    pc = 0\n    command = ''\n    registers = []\n\n    while True:\n        if command == '>':\n            if p < len(data):\n                registers.append(data[p])\n                p += 1\n            else:\n                return ''\n        elif command == '<':\n            if p > 0:\n                registers.append(data[p])\n                p -= 1\n            else:\n                return ''\n        elif command == '+':\n            registers.append(registers[-1] + registers[-2])\n            registers.pop(-1)\n        elif command == '-':\n            registers.append(registers[-1] - registers[-2])\n            registers.pop(-1)\n        elif command == ',':\n            registers.append(registers[-1])\n            registers.pop(-1)\n        elif command == '[':\n            if registers[-1] == 0:\n                pc -= 1\n            else:\n                pc += 1\n        elif command == ']':\n            if registers[-1]!= 0:\n                pc -= 1\n            else:\n                pc += 1\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = stdin[pc]\n        elif command == '+':\n            command = stdin[pc]\n        elif command == '-':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '[':\n            command = stdin[pc]\n        elif command == ']':\n            command = stdin[pc]\n        elif command == '.':\n            command = stdin[pc]\n        elif command == ',':\n            command = stdin[pc]\n        elif command == '>':\n            command = stdin[pc]\n        elif command == '<':\n            command = std"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function receives a string with lines from stdin. Each of these lines is a query.\n    Each line is represented by two integers: the first one is the number of the query, the second one is the query itself.\n\n    The solution function should return a string with the answer to each of these queries. The query is described\n    in the problem statement.\n    \"\"\"\n    queries = stdin.split(\"\\n\")\n    for query in queries:\n        i, query = int(query.split()[0]), int(query.split()[1])\n        print(i, query, digitAtPosition(query))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {i: i ** 2 for i in range(10)}\n    d[0] = 0\n    res = \"\"\n    for i in range(1, n + 1):\n        res += str(d[int(stdin[i - 1])])\n    return res\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    answers = []\n    for i in range(q):\n        answers.append(find_digit(int(stdin.split()[i])))\n    return '\\n'.join(answers)\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        k = int(stdin)\n        n = len(str(k))\n        ans = 0\n        if n == 1:\n            ans = 1\n        elif n == 2:\n            ans = 2\n        elif n == 3:\n            ans = 5\n        elif n == 4:\n            ans = 8\n        elif n == 5:\n            ans = 9\n        elif n == 6:\n            ans = 1\n        elif n == 7:\n            ans = 2\n        elif n == 8:\n            ans = 4\n        elif n == 9:\n            ans = 7\n        else:\n            ans = 8\n        print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution to https://adventofcode.com/2017/day/9\n    '''\n    stdin_list = stdin.split(\"\\n\")\n    q = int(stdin_list[0])\n    stdin_list = stdin_list[1:]\n    results = []\n    for _ in range(q):\n        results.append(solution_part2(stdin_list))\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries_count = int(stdin)\n    s = ''\n    for i in range(queries_count):\n        k, i = stdin.split('\\n')\n        s += str(solve(k)) + '\\n'\n    return s[:-1]\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = 0\n    # print(a)\n    for i in range(q):\n        a.sort()\n        b = int(stdin.split()[i])\n        if a[b-1] <= a[b]:\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    lst = stdin.split(\"\\n\")\n    for i in range(n):\n        k = int(input())\n        x = lst[i]\n        if k <= len(x):\n            print(int(x[k-1]))\n        else:\n            print(int(x[0]))"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 if sum(1 for n in range(1, int(stdin) + 1) if is_seven(n) and is_five(n) and is_three(n)) > 0 else 0 for n in range(1, int(stdin) + 1))\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seven = 0\n    five = 0\n    three = 0\n    for i in range(1, N+1):\n        if str(i).count('7') == 1:\n            seven += 1\n        if str(i).count('5') == 1:\n            five += 1\n        if str(i).count('3') == 1:\n            three += 1\n    return str(seven + five + three)"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if \"7\" in str(i) and \"3\" in str(i) and \"5\" in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        x = i\n        while x > 0:\n            y = x\n            if y % 7 == 7 and y % 5!= 7 and y % 3!= 7:\n                count += 1\n            x = y // 7\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    return count\n\nsolution(\"575\")\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        N = int(stdin)\n    except ValueError:\n        print(\"invalid input\")\n        exit()\n    if N < 1 or N > 10**9:\n        print(\"invalid input\")\n        exit()\n    seven = {'7', '9', '3', '5'}\n    fives = {'1', '5', '9'}\n    tens = {'2', '6', '8'}\n    result = 0\n    for i in range(1, N + 1):\n        num = str(i)\n        if all(x in seven for x in num) and len(set(num)) == 4:\n            result += 1\n        if all(x in fives for x in num) and len(set(num)) == 3:\n            result += 1\n        if all(x in tens for x in num) and len(set(num)) == 2:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return len(filter(lambda x: x in {'7','5','3'}, map(lambda x: str(x), range(1, int(stdin) + 1))))\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(len([n for n in range(1, N + 1) if all(n % 7!= 0, n % 5!= 0, n % 3!= 0)]))\n    return\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_seven(number: int) -> bool:\n        return number % 7 == 0 or number % 5 == 0 or number % 3 == 0\n\n    def count_shichi_go_san(number: int) -> int:\n        count = 0\n        while number > 0:\n            count += 1\n            if is_seven(number):\n                return count\n            number //= 10\n\n    return count_shichi_go_san(int(stdin))\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, input_list[0] + 1):\n        num = i\n        count_seven_five = 0\n        count_three = 0\n        while num > 0:\n            if num % 10 == 7:\n                count_seven_five += 1\n            elif num % 10 == 5:\n                count_three += 1\n            else:\n                pass\n            num = num // 10\n        if count_seven_five == 1 and count_three == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"0\"\n    repaint_num = 0\n    while repaint_num < 2:\n        repaint_num = 0\n        for i in range(n - 1):\n            if s[i]!= s[i + 1]:\n                s = s[:i] + \"0\" + s[i + 1:]\n                repaint_num += 1\n        s = s[:n - 1] + \"0\"\n    return str(repaint_num)\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    n = len(stdin)\n    _white = stdin.count(\"1\")\n    _black = n - _white\n    if _black >= _white:\n        return str(n - _black)\n    else:\n        return str(_white - _black)\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    w = stdin.count('0')\n    s = stdin.replace('0', '_').replace('1', '0').replace('_', '1')\n    res = 0\n    for i in range(n):\n        if s[i]!= stdin[i]:\n            res += 1\n            if i!= n - 1 and s[i]!= s[i + 1]:\n                res += 1\n            if i!= 0 and s[i - 1]!= s[i]:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = len(stdin)\n    if n < 1 or n > 10**5:\n        return \"ERROR\"\n    n = len(stdin)\n    colors = ['0','1']\n    cnt = 0\n    for i in range(0, n):\n        if stdin[i] == colors[0]:\n            cnt += 1\n            if cnt == 2:\n                return \"ERROR\"\n            else:\n                colors[0] = '1'\n        else:\n            colors[0] = '0'\n            cnt = 0\n    for i in range(n-1, 0, -1):\n        if stdin[i] == colors[1]:\n            cnt += 1\n            if cnt == 2:\n                return \"ERROR\"\n            else:\n                colors[1] = '1'\n        else:\n            colors[1] = '0'\n            cnt = 0\n    return cnt\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    rows = []\n    N = len(S)\n    for i in range(N):\n        if S[i] == '0':\n            rows.append('1')\n        else:\n            rows.append('0')\n    if rows == ['1', '1', '1', '1', '0', '0']:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    hashes = {}\n    for i, ch in enumerate(stdin):\n        if ch not in hashes:\n            hashes[ch] = i\n\n    def paint(color):\n        for i in range(n):\n            if stdin[i] == color:\n                stdin = stdin[:i] + color + stdin[i+1:]\n                return paint(color)\n\n    for ch in hashes:\n        if ch == '0':\n            paint('1')\n            return paint('0')\n    return paint('1')\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    a, b = n // 2, n - 1 - a\n    while a!= b:\n        if S[a] == '0' and S[b] == '1':\n            a += 1\n        elif S[a] == '1' and S[b] == '0':\n            b -= 1\n        else:\n            return '0'\n    return '1'\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    print(len(set(l)))\n    return stdin\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return 0\n    count = 0\n    for char in stdin:\n        if char!= \"0\":\n            count += 1\n        elif char!= \"1\":\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    print('APPROVED' if all(map(lambda x: x % 2 == 0, arr)) else 'DENIED')"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n % 2 == 0:\n        if n % 3 == 0 or n % 5 == 0:\n            return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        # Parse the input\n        stdin = list(map(int, stdin.split(\"\\n\")))\n        N = stdin.pop(0)\n        assert(N > 0)\n        assert(len(stdin) == N)\n        \n        for num in stdin:\n            assert(num > 0)\n        \n        # Print the output\n        if (all(x % 3 == 0 or x % 5 == 0 for x in stdin)):\n            return \"APPROVED\"\n        else:\n            return \"DENIED\"\n    except Exception as e:\n        print(\"Wrong Input\")\n        print(e)\n        return \"\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(\n        \"APPROVED\" if check(stdin.strip().split(\" \")) else \"DENIED\"\n    )\n    return \"APPROVED\" if check(stdin.strip().split(\" \")) else \"DENIED\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    even_numbers = set()\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_numbers.add(i)\n\n    for x in range(1, n + 1):\n        if x % 3 == 0 or x % 5 == 0:\n            if x in even_numbers:\n                print('APPROVED')\n                break\n    else:\n        print('DENIED')\nsolution(stdin)\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = \"APPROVED\"\n    i = 0\n    while i < n and ans == \"APPROVED\":\n        a = stdin.split()\n        for j in a:\n            if int(j) % 2 == 0:\n                if int(j) % 3 == 0 or int(j) % 5 == 0:\n                    ans = \"APPROVED\"\n                    break\n        i += 1\n    return ans\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for i in range(len(stdin)):\n        result += (\"APPROVED\" if divisible(int(stdin[i])) else \"DENIED\")\n    return result\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"APPROVED\" if check_rule_1(stdin) else \"DENIED\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    even = []\n    for _ in range(n):\n        even.append(int(stdin.split(\" \")[_ + 1]))\n    if all([x % 3 == 0 or x % 5 == 0 for x in even]) and all([x % 3!= 0 and x % 5!= 0 for x in even]):\n        return \"APPROVED\"\n    return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'APPROVED' if solution_a(stdin) else 'DENIED'\n\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if len(s)%2 == 0:\n        if s[0] == 'R' and s[len(s)//2] == 'R' and s[len(s)//2+1] == 'U' and s[len(s)//2+2] == 'D':\n            return 'Yes'\n        elif s[0] == 'L' and s[len(s)//2] == 'L' and s[len(s)//2+1] == 'U' and s[len(s)//2+2] == 'D':\n            return 'Yes'\n        elif s[0] == 'R' and s[len(s)//2] == 'R' and s[len(s)//2+1] == 'D' and s[len(s)//2+2] == 'U':\n            return 'Yes'\n        elif s[0] == 'L' and s[len(s)//2] == 'L' and s[len(s)//2+1] == 'D' and s[len(s)//2+2] == 'U':\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if s[0] == 'R' and s[len(s)//2] == 'R' and s[len(s)//2+1] == 'U' and s[len(s)//2+2] == 'D':\n            return 'No'\n        elif s[0] == 'L' and s[len(s)//2] == 'L' and s[len(s)//2+1] == 'U' and s[len(s)//2+2] == 'D':\n            return 'No'\n        elif s[0] == 'R' and s[len(s)//2] == 'R' and s[len(s)//2+1] == 'D' and s[len(s)//2+2] == 'U':\n            return 'No'\n        elif s[0] == 'L' and s[len(s)//2] == 'L' and s[len(s)//2+1] == 'D' and s[len(s)//2+2] == 'U':\n            return 'No'\n        else:\n            return 'No'\n\ns = input()\nprint(solution(s))\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = None\n\n    for char in stdin:\n        if char == 'R' or char == 'L' or char == 'U' or char == 'D':\n            continue\n        else:\n            res = 'No'\n            break\n\n    return res\n    # return res\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    x = 0\n    y = 0\n    for c in s:\n        if c == 'L':\n            x += 1\n        elif c == 'R':\n            x -= 1\n        elif c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n    if x % 2 == 0 and y % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == \"R\" and i % 2 == 0 or stdin[i] == \"U\" and i % 2 == 1 or stdin[i] == \"D\" and i % 2 == 0 or stdin[i] == \"L\" and i % 2 == 1:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if can_play_input(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    solution = \"Yes\" if is_playable(stdin) else \"No\"\n    return solution\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"Yes\"\n    if len(stdin) % 2!= 0:\n        answer = \"No\"\n    return answer\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    is_playable = True\n    for i in range(len(stdin)):\n        if stdin[i] == 'R':\n            if i % 2 == 1:\n                is_playable = False\n        elif stdin[i] == 'D':\n            if i % 2 == 0:\n                is_playable = False\n        elif stdin[i] == 'L':\n            if i % 2 == 0:\n                is_playable = False\n        elif stdin[i] == 'U':\n            if i % 2 == 1:\n                is_playable = False\n    return \"Yes\" if is_playable else \"No\"\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read from stdin and split input\n    a, b, c, d, e = map(int, stdin.split())\n    # Loop through each of the groups of people\n    # and find the minimum time to reach them\n    # using the constraints\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                for l in range(1, d+1):\n                    for m in range(1, e+1):\n                        # Check that there is no way to arrive in 7 minutes\n                        if i+j+k+l+m == e:\n                            return str(min(i, j, k, l, m))"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return minimum time needed to reach all the people from City 1.\n    \"\"\"\n    # Your code here\n    # Write your code here\n    # Return your answer\n    _, A, B, C, D, E = stdin\n    n = int(input())\n    times = []\n    for i in range(n):\n        t1, t2, t3, t4, t5 = map(int, input().split())\n        times.append((t1, 1, t2, 0, t3, 0, t4, 0, t5, 0))\n    times = sorted(times, key=lambda x: (x[0], -x[1]))\n    print(times)\n    result = 0\n    for i in range(n):\n        result += times[i][1]\n        result += times[i][3]\n        result += times[i][5]\n        result += times[i][7]\n    return result\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a, b, c, d, e = map(int, stdin[1:6])\n    ans = 0\n\n    # 0: train\n    # 1: bus\n    # 2: taxi\n    # 3: airplane\n    # 4: ship\n    while n > 0:\n        # time to reach from 1 to 6\n        if n > a:\n            ans += a\n            n -= a\n        # time to reach from 2 to 5\n        elif n > b:\n            ans += n // 2 + b\n            n -= n // 2 + b\n        # time to reach from 3 to 4\n        elif n > c:\n            ans += (n // 2) + c\n            n -= (n // 2) + c\n        # time to reach from 4 to 5\n        else:\n            ans += n + d\n            n = 0\n    return str(ans)"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n\n    # TODO: Make this faster\n    # Check for 0, 1, 2, 3, 4\n    # If there are none, return -1\n    # If there is only one, return 0\n    # if only two, return 1\n    # if only 3, return 2\n    # if only 4, return 3\n    # If there are more than four, return -1\n    # if there are five, return 4\n    if N == 0 or N == 1 or N == 2 or N == 3 or N == 4:\n        return str(0)\n    elif N == 5:\n        return str(1)\n    elif N == 6:\n        return str(2)\n    elif N == 7:\n        return str(3)\n    elif N == 8:\n        return str(4)\n    else:\n        return \"-1\"\n\n\nsolution(\"5\\n3\\n2\\n4\\n3\\n5\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    time = 0\n    while N > 0:\n        time += 1\n        if time == A:\n            N -= 1\n            time = 0\n        elif time == B:\n            N -= 1\n            time = 0\n        elif time == C:\n            N -= 1\n            time = 0\n        elif time == D:\n            N -= 1\n            time = 0\n        elif time == E:\n            N -= 1\n            time = 0\n    return str(time)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c, d, e = map(int, stdin.split())\n    print(min(n * (a + b + c + d + e), n * max(a, b, c, d, e)))"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    e = int(e)\n    if n == 1:\n        if a == 0:\n            return str(0)\n        if b == 0:\n            return str(0)\n        if c == 0:\n            return str(0)\n        if d == 0:\n            return str(0)\n        if e == 0:\n            return str(0)\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                if d == 0:\n                    if e == 0:\n                        return str(0)\n                    else:\n                        return str(e)\n                else:\n                    return str(d)\n            else:\n                return str(c)\n        else:\n            return str(b)\n    if b == 0:\n        if c == 0:\n            if d == 0:\n                if e == 0:\n                    return str(0)\n                else:\n                    return str(e)\n            else:\n                return str(d)\n        else:\n            return str(c)\n    if c == 0:\n        if d == 0:\n            if e == 0:\n                return str(0)\n            else:\n                return str(e)\n        else:\n            return str(d)\n    if d == 0:\n        if e == 0:\n            return str(0)\n        else:\n            return str(e)\n    if e == 0:\n        return str(0)\n    return str(max(b, c, d) + min(a, b, c, d, e))\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    c = int(stdin.strip())\n    d = int(stdin.strip())\n    e = int(stdin.strip())\n    dp = [[0] * 6 for _ in range(n)]\n    dp[0] = [a, b, c, d, e, n]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + a\n        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + b)\n        dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + c)\n        dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] + d)\n        dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + e)\n        dp[i][5] = max(dp[i - 1][5], dp[i - 1][4] + a)\n    return str(max([sum(row) for row in dp]))\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = stdin.split()\n    A, B, C, D, E = int(A), int(B), int(C), int(D), int(E)\n    return str(min(A*60+B, C*60+D, E*60+D, A*60+C, D*60+E, E*60+A, D*60+B))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set([0, 9]) - set(map(int, stdin.split()))))\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Generating all numbers from 0 to 9.\n    a = list(range(10))\n    result = 0\n    for i in range(int(stdin)):\n        if a[0] == 0:\n            result += 1\n        if a[9] == 0:\n            result += 1\n        a = list(map(int, str(a[0] + a[1])))\n    return result % 1000000007\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N = stdin.pop(0)\n    # Your code here\n    return '%s' % N"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(i ^ j for i, j in zip(map(int, stdin.split()), repeat(True))))\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == 0 and j == 9:\n                count += 1\n            elif i == 9 and j == 0:\n                count += 1\n            elif i == j:\n                count += 1\n            else:\n                continue\n    return str(count)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    for i in range(1, n + 1):\n        if 0 <= i <= 9:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = [0, 9]\n    ans = 0\n    while(l[-1] < N):\n        ans += 1\n        l.append(0)\n        l.append(9)\n    print(ans)\n    return"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    return '{0} {1}'.format(count_valid_sequences(input), count_valid_sequences(input + 1))\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(0 if N == 1 else N*(N-1))"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    return min(c for c in range(X, -1, -1) if all(c % i!= 0 for i in range(2, c)))"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num: int = int(stdin)\n    if num == 1:\n        return \"1\"\n    min_prime = num + 1\n    for i in range(2, num):\n        if num % i == 0:\n            min_prime = i\n            break\n    return str(min_prime)\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit():\n        raise ValueError(\"stdin must be an integer\")\n    max_prime = 100\n    prime_list = list(filter(lambda x: x > max_prime, range(max_prime, int(stdin) + 1)))\n    print(prime_list[0])"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    candidate = 2\n    while candidate <= x:\n        if x % candidate!= 0:\n            candidate += 1\n        else:\n            candidate += 1\n            break\n    print(candidate - 1)\n\n    return candidate - 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(2, x):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            return str(i)\n    return str(x)\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    X = int(stdin[0])\n    l = []\n    for i in range(2, X):\n        if isPrime(i) == True:\n            l.append(i)\n    print(min(l))\n    return \"\"\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    for i in range(n):\n        for j in range(i, n):\n            if j % i == 0:\n                break\n        else:\n            print(i)\nsolution(input())\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x+1):\n        if(i>1):\n            for j in range(2,i):\n                if(i%j==0):\n                    break\n            else:\n                print(i)\n    return None"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, x = stdin.split(\" \")\n    x = int(x)\n    prime = []\n    for i in range(2, x):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            prime.append(i)\n    return str(prime[-1])\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum prime number greater than or equal to stdin.\"\"\"\n    num = int(stdin)\n    isprime = True\n    while isprime:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            isprime = False\n            break\n    return str(num)"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = stdin.split()[1].split(' ')\n    if n%2 == 0:\n        return '-1'\n    temp = []\n    for i in range(1, n-1, 2):\n        temp.append(int(sequence[i]))\n    #print(temp)\n    flag = False\n    for i in range(0, n-1, 2):\n        if sequence[i] == sequence[i+1]:\n            flag = True\n            break\n    if flag:\n        return str(n-2)\n    return str(n-1)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, v = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    visited = {}\n    for i in range(n - 2):\n        if arr[i] not in visited:\n            visited[arr[i]] = 1\n        else:\n            visited[arr[i]] += 1\n    counter = 1\n    for i in range(1, n - 1):\n        if arr[i] not in visited:\n            if arr[i + 1] not in visited:\n                counter += 1\n            else:\n                counter += visited[arr[i]]\n        elif arr[i + 1] not in visited:\n            counter += visited[arr[i]]\n        else:\n            counter += visited[arr[i]]\n            if visited[arr[i]] == 2:\n                counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    result = 0\n    while len(sequence) > 1:\n        if sequence[0] == sequence[-1]:\n            sequence = sequence[1:-1]\n        else:\n            sequence = sequence[1:]\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Replace code here\n    n = int(stdin.split()[0])\n    seq = stdin.split()[1]\n    if n % 2!= 0:\n        return '-1'\n    # try to be inefficient here\n    count = 0\n    for i in range(1, n - 1, 2):\n        if seq[i - 1]!= seq[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    sequence = stdin.strip().split()\n    if n % 2 == 0:\n        return -1\n    even_list = []\n    odd_list = []\n    odd_list_size = 0\n    even_list_size = 0\n    for i in range(1, len(sequence)):\n        if sequence[i]!= sequence[i - 1]:\n            if i % 2 == 0:\n                even_list.append(sequence[i])\n                even_list_size += 1\n            else:\n                odd_list.append(sequence[i])\n                odd_list_size += 1\n    if odd_list_size > even_list_size:\n        for i in range(len(odd_list)):\n            if odd_list[i]!= odd_list[i - 1]:\n                return -1\n    elif odd_list_size < even_list_size:\n        for i in range(len(even_list)):\n            if even_list[i]!= even_list[i - 1]:\n                return -1\n    else:\n        return -1\n    return str(even_list_size + 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    n = int(arr[0])\n    v = list(map(int, arr[1:]))\n    \n    if n % 2!= 0:\n        return 'Impossible'\n    \n    # Reversed\n    if (n-2) % 2!= 0:\n        return 'Impossible'\n    \n    v.reverse()\n    n = n // 2\n    # For each i = 1,2,..., n-2\n    for i in range(1, n, 2):\n        # If two elements are equal\n        if v[i] == v[i+1]:\n            return 'Impossible'\n    # For each i = 1,2,..., n-2\n    for i in range(1, n-2, 2):\n        # If two elements are equal\n        if v[i] == v[i+1]:\n            return 'Impossible'\n    return str(n)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    if n == 1:\n        return \"1\"\n    v_n = v[:]\n    v_n.append(v_n.pop(0))\n    count = 0\n    for i in range(1, n - 1):\n        if v[i]!= v_n[i]:\n            count += 1\n            v_n[i] = v_n[i] - 1\n    if count == 2:\n        return \"1\"\n    return str(count)\n\nsolution(\"4 1 3 2\")\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    sequence = stdin[1]\n    if n == 1:\n        return sequence\n    ans = 0\n    for i in range(n-1):\n        if sequence[i]!= sequence[i+1]:\n            if sequence[i] == sequence[i+2]:\n                ans += 1\n            break\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(' ')\n    n = int(arr[0])\n    v = list(map(int, arr[1].split(' ')))\n    s = set()\n    for i in range(1, n, 2):\n        s.add(v[i])\n    i = 0\n    while i < n - 1:\n        if v[i] == v[i + 1]:\n            break\n        i += 1\n    if i >= n - 1:\n        print(i + 1)\n    else:\n        print(i + 2)"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v_lst = list(map(int, stdin.split()))\n    n = v_lst.pop(0)\n    if n % 2!= 0:\n        raise Exception('Please use even number!')\n    lst = v_lst.copy()\n    for _ in range(n // 2):\n        for i in range(n - 2):\n            if lst[i] == lst[i + 2]:\n                lst[i], lst[i + 2] = lst[i + 2], lst[i]\n                break\n    return str(len(lst))\n\nprint(solution(input()))"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split()\n    n, a, b, c = int(n), int(a), int(b), int(c)\n    lst = sorted(list(map(int, stdin.split())))\n    if a >= c:\n        return str(0)\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if lst[mid] >= c:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return str(lst[left])\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    stdin = sorted([A, B, C])\n    bamboo_lengths = stdin.copy()\n    candidate_lengths = []\n    while len(bamboo_lengths) > 3:\n        current_lengths = [bamboo_lengths[0], bamboo_lengths[1], bamboo_lengths[2]]\n        if sum(current_lengths) <= C:\n            candidate_lengths.append(current_lengths)\n            bamboo_lengths.remove(bamboo_lengths[0])\n            bamboo_lengths.remove(bamboo_lengths[0])\n            bamboo_lengths.remove(bamboo_lengths[0])\n        else:\n            bamboo_lengths.remove(bamboo_lengths[0])\n            bamboo_lengths.remove(bamboo_lengths[0])\n    if len(candidate_lengths) > 0:\n        return str(sum([candidate_lengths[0][0], candidate_lengths[0][1], candidate_lengths[0][2]]))\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = stdin.split()\n    A, B, C = int(A), int(B), int(C)\n    bamboos = []\n    for i in range(1, N + 1):\n        bamboos.append(int(input()))\n    current = 0\n    for i in range(len(bamboos) - 1, 0, -1):\n        if bamboos[i] - bamboos[i - 1] <= A and bamboos[i] - bamboos[i - 1] >= B:\n            current += bamboos[i] - bamboos[i - 1]\n            bamboos.pop(i)\n            break\n    if current < C:\n        return 'impossible'\n    else:\n        current = 0\n        for i in range(len(bamboos) - 2, 0, -1):\n            if bamboos[i] - bamboos[i - 1] >= C:\n                current += (bamboos[i] - bamboos[i - 1])\n                bamboos.pop(i)\n                break\n        return current\n    return\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split('\\n')\n    N, A, B, C = map(int, t[0].split())\n    l_1, l_2, l_3 = map(int, t[1].split())\n    l_4 = l_3 + C\n    l_5 = l_4 + B\n    l_6 = l_5 + A\n    l_7 = l_6 + l_4\n    l_8 = l_7 + l_5\n    l_9 = l_8 + l_6\n    l_10 = l_9 + l_7\n    l_11 = l_10 + l_8\n    l_12 = l_11 + l_9\n    l_13 = l_12 + l_10\n    l_14 = l_13 + l_11\n    l_15 = l_14 + l_12\n    l_16 = l_15 + l_13\n    l_17 = l_16 + l_15\n    l_18 = l_17 + l_16\n    l_19 = l_18 + l_17\n    l_20 = l_19 + l_18\n    l_21 = l_20 + l_19\n    l_22 = l_21 + l_20\n    l_23 = l_22 + l_21\n    l_24 = l_23 + l_22\n    l_25 = l_24 + l_23\n    l_26 = l_25 + l_24\n    l_27 = l_26 + l_25\n    l_28 = l_27 + l_26\n    l_29 = l_28 + l_27\n    l_30 = l_29 + l_28\n    l_31 = l_30 + l_29\n    l_32 = l_31 + l_30\n    l_33 = l_32 + l_31\n    l_34 = l_33 + l_32\n    l_35 = l_34 + l_33\n    l_36 = l_35 + l_34\n    l_37 = l_36 + l_35\n    l_38 = l_37 + l_36\n    l_39 = l_38 + l_37\n    l_40 = l_39 + l_38\n    l_41 = l_40 + l_39\n    l_42 = l_41 + l_40\n    l_43 = l_42 + l_41\n    l_44 = l_43 + l_42\n    l_45 = l_44 + l_43\n    l_46 = l_45 + l_44\n    l_47 = l_46 + l_45\n    l_48 = l_47 + l_46\n    l_49 = l_48 + l_47\n    l_50 = l_49 + l_48\n    l_51 = l_50 + l_49\n    l_52 = l_51 + l_50\n    l_53 = l_52 + l_51\n    l_54 = l_53 + l_52\n    l_55 = l_54 + l_53\n    l_56 = l_55 + l_54\n    l_57 = l_56 + l_55\n    l_58 = l_57 + l_56\n    l_59 = l_58 + l_57\n    l_60 = l_59 + l_58\n    l_61 = l_60 + l_59\n    l_62 = l_61 + l_60\n    l_63 = l_62 + l_61\n    l_64 = l_63 + l_62\n    l_65 = l_64 + l_63\n    l_66 = l_65 + l_64\n    l_67 = l_66 + l_65\n    l_68 = l_67 + l_66\n    l_69 = l_68 + l_67\n    l_70 = l_69 + l_68\n    l_71 = l_70 + l_69\n    l_72 = l_71 + l_70\n    l_73 = l_72 + l_71\n    l_74 = l_73 + l_72\n    l_75 = l_74 + l_73\n    l_76 = l_75 + l_74\n    l_77 = l_76 + l_75\n    l_78 = l_77 + l_76\n    l_79 = l_78 + l_77\n    l_80 = l_79 + l_78\n    l_81 = l_80 + l_79\n    l_82 = l_81 + l_80\n    l_83 = l_82 + l_81\n    l_84 = l_83 + l_82\n    l_85 = l_84 + l_83\n    l_86 = l_85 + l_84\n    l_87 = l_86 + l_85\n    l_88 = l_87 + l_86\n    l_89 = l_88 + l_87\n    l_90 = l_89 + l_88\n    l_91 = l_90 + l_89\n    l_92 = l_91 + l_90\n    l_93 = l_92 + l_91\n    l_94 = l_93 + l_92\n    l_95 = l_94 + l_93\n    l_96 = l_95 + l_94\n    l_97 = l_96 + l_95\n    l_98 = l_97 + l_96\n    l_99 = l_98 + l_97\n    l_100 = l_99 + l_98\n    l_101 = l_100 + l_99\n    l_102 = l_101 + l_100\n    l_103 = l_102 + l_101\n    l_104 = l_103 + l_102\n    l_105 = l_104 + l_103\n    l_106 = l_105 + l_104\n    l_107 = l_106 + l_105\n    l_108 = l_107 + l_106\n    l_109 = l_108 + l_107\n    l_110 = l_109 + l_108\n    l_111 = l_110 + l_109\n    l_112 = l_111 + l_110\n    l_113 = l_112 + l_111\n    l_114 = l_113 + l_112\n    l_115 = l_114 + l_"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\" \")\n    N, A, B, C = int(lst[0]), int(lst[1]), int(lst[2]), int(lst[3])\n\n    BAMBOS = [0] * (N + 1)\n    for i in range(1, N + 1):\n        BAMBOS[i] = int(lst[i])\n\n    res = sys.maxsize\n    if A >= B and C >= A:\n        for i in range(1, N + 1):\n            BAMBOS[i] += A\n            if BAMBOS[i] >= C:\n                res = min(res, C - (i - 1) * A)\n\n        for i in range(1, N):\n            BAMBOS[i] -= 1\n            if BAMBOS[i] >= C:\n                res = min(res, C - (i - 1) * A)\n        return str(res)\n\n    return \"0\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split()))\n    def extension(i):\n        if len(bamboos) < i+1:\n            return\n        bamboos[i] += 1\n        extension(i+1)\n        bamboos[i] -= 1\n    bamboos = [0]*n\n    def composition(i):\n        if len(bamboos) < i+1:\n            return\n        if bamboos[i] >= a and bamboos[i] >= b and bamboos[i] >= c:\n            return\n        bamboos[i] += max(a,b,c)\n        composition(i+1)\n        bamboos[i] -= max(a,b,c)\n    def shortening(i):\n        if len(bamboos) < i+1:\n            return\n        if bamboos[i] <= 0:\n            return\n        bamboos[i] -= 1\n        shortening(i+1)\n        bamboos[i] += 1\n    def magic(i):\n        if len(bamboos) < i+1:\n            return\n        if bamboos[i] <= 0:\n            return\n        bamboos[i] -= 10\n        magic(i+1)\n        bamboos[i] += 10\n    extension(0)\n    composition(0)\n    shortening(0)\n    magic(0)\n    return str(sum(bamboos))\n    \n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min_mp(list(map(int, stdin.split()))))\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, a, b, c = [int(x) for x in stdin[0].split()]\n    l_1 = int(stdin[1])\n    l_2 = int(stdin[2])\n    l_3 = int(stdin[3])\n    l_4 = int(stdin[4])\n    l_5 = int(stdin[5])\n    l_6 = int(stdin[6])\n    l_7 = int(stdin[7])\n    l_8 = int(stdin[8])\n    l_9 = int(stdin[9])\n    l_10 = int(stdin[10])\n    l_11 = int(stdin[11])\n    l_12 = int(stdin[12])\n    l_13 = int(stdin[13])\n    l_14 = int(stdin[14])\n    l_15 = int(stdin[15])\n    l_16 = int(stdin[16])\n    l_17 = int(stdin[17])\n    l_18 = int(stdin[18])\n    l_19 = int(stdin[19])\n    l_20 = int(stdin[20])\n    l_21 = int(stdin[21])\n    l_22 = int(stdin[22])\n    l_23 = int(stdin[23])\n    l_24 = int(stdin[24])\n    l_25 = int(stdin[25])\n    l_26 = int(stdin[26])\n    l_27 = int(stdin[27])\n    l_28 = int(stdin[28])\n    l_29 = int(stdin[29])\n    l_30 = int(stdin[30])\n    l_31 = int(stdin[31])\n    l_32 = int(stdin[32])\n    l_33 = int(stdin[33])\n    l_34 = int(stdin[34])\n    l_35 = int(stdin[35])\n    l_36 = int(stdin[36])\n    l_37 = int(stdin[37])\n    l_38 = int(stdin[38])\n    l_39 = int(stdin[39])\n    l_40 = int(stdin[40])\n    l_41 = int(stdin[41])\n    l_42 = int(stdin[42])\n    l_43 = int(stdin[43])\n    l_44 = int(stdin[44])\n    l_45 = int(stdin[45])\n    l_46 = int(stdin[46])\n    l_47 = int(stdin[47])\n    l_48 = int(stdin[48])\n    l_49 = int(stdin[49])\n    l_50 = int(stdin[50])\n    l_51 = int(stdin[51])\n    l_52 = int(stdin[52])\n    l_53 = int(stdin[53])\n    l_54 = int(stdin[54])\n    l_55 = int(stdin[55])\n    l_56 = int(stdin[56])\n    l_57 = int(stdin[57])\n    l_58 = int(stdin[58])\n    l_59 = int(stdin[59])\n    l_60 = int(stdin[60])\n    l_61 = int(stdin[61])\n    l_62 = int(stdin[62])\n    l_63 = int(stdin[63])\n    l_64 = int(stdin[64])\n    l_65 = int(stdin[65])\n    l_66 = int(stdin[66])\n    l_67 = int(stdin[67])\n    l_68 = int(stdin[68])\n    l_69 = int(stdin[69])\n    l_70 = int(stdin[70])\n    l_71 = int(stdin[71])\n    l_72 = int(stdin[72])\n    l_73 = int(stdin[73])\n    l_74 = int(stdin[74])\n    l_75 = int(stdin[75])\n    l_76 = int(stdin[76])\n    l_77 = int(stdin[77])\n    l_78 = int(stdin[78])\n    l_79 = int(stdin[79])\n    l_80 = int(stdin[80])\n    l_81 = int(stdin[81])\n    l_82 = int(stdin[82])\n    l_83 = int(stdin[83])\n    l_84 = int(stdin[84])\n    l_85 = int(stdin[85])\n    l_86 = int(stdin[86])\n    l_87 = int(stdin[87])\n    l_88 = int(stdin[88])\n    l_89 = int(stdin[89])\n    l_90 = int(stdin[90])\n    l_91 = int(stdin[91])\n    l_92 = int(stdin[92])\n    l_93 = int(stdin[93])\n    l_94 = int(stdin[94])\n    l_95 = int(stdin[95])\n    l_96 = int(stdin[96])\n    l_97 = int(stdin[97])\n    l_98 = int(stdin[98])\n    l_99 = int(stdin[99])\n    l_100 = int(stdin[100])\n\n    cost = [[4, 2], [6, 3], [6, 3], [9, 5], [10, 7], [9, 5],\n            [9, 5], [6, 3], [6, 3], [6, 3], [9, 5], [10, 7],\n            [9, 5], [6, 3], [6, 3], [6, 3], [9, 5], [10, 7],\n            [9, 5], [6, 3], [6, 3], [6, 3], [9, 5], [10, 7],\n            [9, 5], [6, 3], [6, 3], [6, 3], [9, 5], [10, 7],\n            [9"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n    N, A, B, C = map(int, stdin)\n    bamboo = []\n    for i in range(1, N+1):\n        bamboo.append(i)\n    bamboo = list(set(bamboo))\n    bamboo.sort(key=lambda x: x, reverse=True)\n    while len(bamboo) > 2:\n        if A + B + C < sum(bamboo):\n            break\n        A_magic_count = 0\n        B_magic_count = 0\n        C_magic_count = 0\n        while A_magic_count < 10 or B_magic_count < 10 or C_magic_count < 10:\n            if A_magic_count < 10 and A + 1 <= A + 1:\n                A += 1\n                A_magic_count += 1\n            if B_magic_count < 10 and B + 1 <= B + 1:\n                B += 1\n                B_magic_count += 1\n            if C_magic_count < 10 and C + 1 <= C + 1:\n                C += 1\n                C_magic_count += 1\n        bamboo = []\n        for i in range(1, N+1):\n            bamboo.append(i)\n        bamboo = list(set(bamboo))\n        bamboo.sort(key=lambda x: x, reverse=True)\n    if A + B + C >= sum(bamboo):\n        return str(sum(bamboo))\n    else:\n        return str(sum(bamboo) - A - B - C)\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 100 90 80\n   ... 98\n   ... 40\n   ... 30\n   ... 21\n   ... 80''')\n    23\n    \"\"\"\n    n, a, b, c = map(int, stdin.split())\n    l_a = min(c, b, a)\n    l_b = max(c, b, a)\n    l_c = l_a + l_b\n    mp = 10 + (10 * (l_a + l_b) // 3)\n    l_ab = min(c, b, a)\n    l_ac = max(c, b, a)\n    l_bc = l_ac + l_ab\n    if l_bc <= l_c:\n        mp += 10 + (10 * (l_bc + l_c) // 3)\n    elif l_ab <= l_c:\n        mp += 10 + (10 * (l_ab + l_c) // 3)\n    return mp\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution())\n\"\"\"\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin\n    return s[n:len(s)] + s[0:n]"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string_list = stdin.split()\n    final_str = \"\"\n    for i in string_list[1]:\n        if ord(i) >= 65 and ord(i) <= 90:\n            final_str += chr(ord(i) + int(string_list[0]))\n        else:\n            final_str += chr(ord(i) - int(string_list[0]))\n    return final_str\nprint(solution(input()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[1]\n    N = int(stdin[0])\n    for i in range(N):\n        S = S[-1] + S[0:-1]\n    return S\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    return \"\".join(sorted(S, key=lambda c: (ord(c.lower()) - ord(\"a\"), c)))\n\nprint(solution(input()))\n'''\n\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.rstrip()\n    return input_str.upper()[::-1].upper()[:len(input_str)]\n    \n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = list(stdin)\n    res.sort()\n    for i in range(n):\n        res.sort(key=lambda x: ord(x) - 64)\n    return \"\".join(res)\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # copy to array\n    b = a.copy()\n\n    # make all non-prime numbers greater than 2\n    for i in range(n):\n        if a[i] > 2:\n            a[i] = 2\n\n    # find primes\n    i = 0\n    while a[i]!= 2:\n        prime = True\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0:\n                prime = False\n                break\n\n        if prime:\n            for j in range(i + 1, n):\n                a[j] //= a[i]\n\n        i += 1\n\n    # sort all primes\n    a = list(map(lambda x: 2 * x, a))\n    a.sort()\n\n    # compare to array\n    for i in range(n):\n        if a[i]!= b[i]:\n            print(a[i])\n            return\n\n    # print all\n    print(a[n - 1])\n    return"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1]))\n    primes = set([2])\n    for i in range(3, 2 * 10 ** 5 + 1):\n        if all(i % prime!= 0 for prime in primes):\n            primes.add(i)\n    a = []\n    while b:\n        m = max(b)\n        p = next(iter(filter(lambda x: x % m == 0, primes)))\n        a.append(p)\n        primes.remove(p)\n        b.remove(m)\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    print(' '.join([str(i) for i in a]))\n    return''.join([str(i) for i in a])"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a = sorted(a)\n    a.sort()\n    #print(a)\n    #print(b)\n    s = [0] * n\n    #print(s)\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j]:\n                s[i] = j + 1\n    #print(s)\n    return''.join(map(str, s))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    # \u65b9\u6cd5\u4e00\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if a[i] < a[j]:\n    #             a[i], a[j] = a[j], a[i]\n    #\n    # print(*a)\n\n    # \u65b9\u6cd5\u4e8c\n    # d = {}\n    # for i in range(n):\n    #     d.setdefault(a[i], []).append(i)\n    #\n    # for i in range(n):\n    #     if i + 1 in d:\n    #         for j in d[i + 1]:\n    #             a[j] = a[i]\n    #     else:\n    #         break\n    #\n    # print(*a)\n\n    # \u65b9\u6cd5\u4e09\n    a.sort()\n    for i in range(n):\n        j = 0\n        while j < i:\n            if a[j] < a[i]:\n                break\n            j += 1\n        if j == i:\n            a[i] = a[j]\n            a[j] = 0\n\n    print(*a)\n\n    # \u65b9\u6cd5\u56db\n    for i in range(n):\n        for j in range(i+1, n):\n            while a[i] % a[j]!= 0:\n                a[i] += 1\n    print(*a)\n\n    # \u65b9\u6cd5\u4e94\n    for i in range(n):\n        a[i] = int(2*a[i])\n\n    for i in range(n):\n        while a[i] % 2!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 5!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 7!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 11!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 13!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 17!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 19!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 23!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 29!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 31!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 37!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 41!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 43!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 47!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 53!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 59!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 61!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 67!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 71!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 73!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 79!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 83!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 89!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 91!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 97!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 101!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 103!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 107!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 109!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 113!= 0:\n            a[i] += 1\n\n    for i in range(n):\n        while a[i] % 127!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 131!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 137!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 139!= 0:\n            a[i] += 1\n    for i in range(n):\n        while a[i] % 149!= 0:\n            a["
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    b = stdin.split()[1].split()\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    def get_prime_nums():\n        prime_nums = []\n        for i in range(1, 2*10**5):\n            if i in prime_nums or prime_nums == []:\n                continue\n            for j in range(i*i, 2*10**5, i):\n                if j in prime_nums:\n                    continue\n                if all(j % x!= 0 for x in prime_nums):\n                    prime_nums.append(j)\n                    break\n        return prime_nums\n\n    prime_nums = get_prime_nums()\n    for num in prime_nums:\n        if num < n:\n            if num in b:\n                continue\n            else:\n                b.append(num)\n                break\n    b.sort()\n    a = b\n    b = ''\n    for i in range(len(a)):\n        b += str(a[i]) +''\n    return b\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_prime_part(n: int, prime_seq: list) -> list:\n        for p in prime_seq:\n            if n % p == 0:\n                return prime_seq\n            elif p * p > n:\n                return prime_seq\n\n    prime_seq = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    n = int(stdin.strip())\n    a = get_prime_part(n, prime_seq)\n    print(' '.join([str(i) for i in a]))\n    return\n\nsolution(stdin)"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(i) for i in stdin.split()]\n    a = [[] for _ in range(2 * n)]\n    for i in range(2 * n):\n        p = 2\n        while is_prime(p):\n            if i < n:\n                a[i].append(p)\n            p += 1\n        if i >= n:\n            break\n        a[i].append(b[i] // 2)\n        a[i].append(b[i] // 3)\n        a[i].append(b[i] // 5)\n    ans = []\n    for i in range(2 * n):\n        if len(a[i]) == 2 and a[i][0] == a[i][1]:\n            ans.append(a[i][0])\n            continue\n        i = 0\n        while i < len(a[i]):\n            if a[i][0] in ans:\n                ans.remove(a[i][0])\n            i += 1\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    return '\\n'.join([str(a[i]) for i in b])\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(a)\n    for i in range(1, len(a)):\n        if a[i] == 2 or a[i] == 3:\n            a[i] = a[i-1]\n            if a[i]!= 2 and a[i]!= 3:\n                j = i\n                while j!= 0:\n                    if a[j] == a[i-1]:\n                        a[j] = a[j-1]\n                        if a[j]!= 2 and a[j]!= 3:\n                            j -= 1\n                    else:\n                        break\n                if a[j] == a[i-1]:\n                    j -= 1\n                    while a[j]!= a[i-1]:\n                        a[j] = a[j-1]\n                        j -= 1\n            b[i-1] = a[i-1]\n    return str(a)"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    max_skill = max(a)\n    i = 0\n    j = n - 1\n    team_1 = set()\n    team_2 = set()\n\n    while n > 0:\n        if a[i] > max_skill:\n            team_1.add(i)\n            team_1.add(j)\n            i = j\n            j -= 1\n            n -= 1\n        else:\n            i += 1\n            j -= 1\n            n -= 1\n    team_1 = sorted(team_1)\n    team_2 = sorted(team_2)\n\n    result = ''.join(str(x) for x in (team_1 or team_2))\n    return result\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    res = \"\"\n    s = []\n    for i in range(n):\n        s.append(i)\n    while len(s)!= 1:\n        s = sorted(s, key=lambda x: (A[x], -x))\n        res += str(s.pop(0))\n        res += str(s.pop(0))\n    return res\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line1, line2 = stdin.split('\\n')\n    n, k = list(map(int, line1.split()))\n    a = list(map(int, line2.split()))\n    print(a)\n    # greedy_team = []\n    # greedy_team.append(a.index(max(a)))\n    # a.remove(max(a))\n    # while len(a)!= 0:\n    #     if max(a) <= a[0]:\n    #         greedy_team.append(a.index(max(a)))\n    #         a.remove(max(a))\n    #     else:\n    #         greedy_team.append(a.index(min(a)))\n    #         a.remove(min(a))\n    #\n    # print(greedy_team)\n    #\n    # team_1 = []\n    # team_2 = []\n    #\n    # for i in greedy_team:\n    #     if i < k:\n    #         team_1.append(i)\n    #     else:\n    #         team_2.append(i)\n    #\n    # team_1.sort()\n    # team_2.sort(reverse=True)\n    #\n    # if len(team_1) > len(team_2):\n    #     team_1, team_2 = team_2, team_1\n    #\n    # for i in range(len(team_1)):\n    #     if i + 1 <= k - 1:\n    #         team_1[i] = 1\n    #     else:\n    #         team_1[i] = 2\n    #\n    # for i in range(len(team_2)):\n    #     if i + 1 <= k - 1:\n    #         team_2[i] = 1\n    #     else:\n    #         team_2[i] = 2\n    #\n    #\n    # team_1 = ''.join(str(i) for i in team_1)\n    # team_2 = ''.join(str(i) for i in team_2)\n    #\n    # print(team_1, team_2)\n    #\n    # return team_1 + team_2\n\n\nprint(solution(line1))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n\n    students = []\n    for i in range(n):\n        students.append((i, skills[i]))\n\n    first_team = []\n    second_team = []\n    for _ in range(k):\n        first_team.append(students.pop(students.index(max(students, key=lambda x: x[1]))[0]))\n        students.append(students.pop(students.index(max(students, key=lambda x: x[1]))[0]))\n\n    for student in first_team:\n        second_team.append(student)\n        students.remove(student)\n\n    return ''.join(map(str, second_team + first_team))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    r = 0\n    res = ''\n    for i, ai in enumerate(a):\n        if r == 0:\n            r = ai\n            continue\n        if r < ai:\n            if i == 0:\n                res = res + str(2)\n                r = ai\n                continue\n            if r >= a[i-1]:\n                res = res + str(2)\n                r = ai\n                continue\n            else:\n                res = res + str(1)\n                r = ai\n                continue\n        if r > ai:\n            if i == n-1:\n                res = res + str(2)\n                r = ai\n                continue\n            if r <= a[i+1]:\n                res = res + str(1)\n                r = ai\n                continue\n            else:\n                res = res + str(2)\n                r = ai\n                continue\n    return res\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    prng = [int(x) for x in stdin.split()]\n\n    prng.sort()\n    max_skill = prng[-1]\n    min_skill = prng[0]\n    if (max_skill - min_skill) < K:\n        return '1' * N\n    else:\n        k_min = (min_skill - 1) // K + 1\n        k_max = (max_skill - 1) // K\n        return '1' * k_min + '2' * k_max + '1' * (N - k_min - k_max)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    team_a = max(list(map(int, stdin.split())))\n    team_b = min(list(map(int, stdin.split())))\n    while n > 0:\n        if n == 1:\n            return '11111'\n        elif n == 2:\n            return '22111'\n        else:\n            max_dis = max(list(map(abs, stdin.split())))\n            min_dis = min(list(map(abs, stdin.split())))\n            std_in = list(map(abs, stdin.split()))\n            team_a = std_in[0]\n            team_b = std_in[1]\n            std_in.remove(team_a)\n            std_in.remove(team_b)\n            std_in.sort(key=lambda x: (-x, x))\n            if std_in[0]!= 0:\n                std_in[0] = 0\n            if std_in[1]!= 0:\n                std_in[1] = 0\n            std_in = std_in[:k]\n            team_a = team_a + std_in[0]\n            team_b = team_b + std_in[1]\n            n = n - 2\n            if n == 0:\n                print(team_a, team_b)\n                return \"\"\n            std_in = std_in[2:]\n            print(team_a, team_b)\n            print(std_in)\n\nsolution(\"5 1\" )\nsolution(\"5 1\" )\nsolution(\"5 1\" )\nsolution(\"5 1\" )"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split(\" \")))\n    prg_skl = list(map(int, stdin.split(\" \")))\n    student_skl = [i for i in range(1, n+1)]\n    first_team = []\n    second_team = []\n    for i in range(len(student_skl)):\n        if i % 2 == 0:\n            first_team.append(student_skl[i])\n        else:\n            second_team.append(student_skl[i])\n    while len(first_team) < k and len(second_team) < k:\n        if len(first_team) == 0:\n            first_team = second_team[0:k]\n            second_team = second_team[k:]\n        else:\n            closest_first = student_skl.index(min(first_team, key=lambda x: abs(x - prg_skl.index(student_skl[x]))))\n            if abs(prg_skl.index(student_skl[closest_first]) - prg_skl.index(student_skl[first_team[0]])) < abs(prg_skl.index(student_skl[closest_first]) - prg_skl.index(student_skl[first_team[1]])):\n                first_team = first_team[1:k] + [closest_first]\n            else:\n                first_team = first_team[1:k] + [closest_first]\n    if len(first_team) == k:\n        return \"\".join(map(str, first_team))\n    else:\n        return \"\".join(map(str, second_team))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    alice = [int(i) for i in stdin.split()]\n    # alice = list(map(int, stdin.split()))\n    counts = [0] * len(alice)\n    for i in range(len(alice)):\n        if i > k:\n            counts[i] = 2\n        elif i + k > len(alice):\n            counts[i] = 1\n        else:\n            counts[i] = 2 if max(alice[i], alice[i + k]) == alice[i] else 1\n\n    return ''.join(map(str, counts))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    x = len(a)\n    num = 0\n    for i in range(x):\n        if int(a[i]) == a[i+1]:\n            num += 1\n        else:\n            a[i] = a[i] + a[i+1]\n    return str(num)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(range(1, n + 1))\n    for i in range(1, n):\n        if a[i - 1]!= a[i]:\n            if a[i - 1] > a[i]:\n                b[i - 1] = b[i]\n            else:\n                b[i - 1] = b[i - 1]\n        else:\n            if a[i - 1] < a[i]:\n                b[i - 1] = b[i]\n            else:\n                b[i - 1] = b[i - 1]\n    return ''.join(map(str, b))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split()\n    num_list = list(map(int, num_list))\n    n = len(num_list)\n    res = 0\n    for i in range(1, n):\n        if num_list[i] > num_list[i - 1] or num_list[i] == num_list[i - 1]:\n            continue\n        else:\n            if i == 1 or num_list[i - 1]!= num_list[i - 2]:\n                res += 1\n    print(res % 998244353)\n    return None\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp_n = int(stdin)\n    inp = list(map(int, stdin.split()))\n    return str(len(mono_renum(inp)))\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def go(a):\n        n = len(a)\n        ans = 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return go(a[1:]) - go(a[0:n-1])\n        for i in range(n):\n            a_2 = a[i+1:]\n            a_1 = a[:i]\n            if a_1 == a_2:\n                ans += go(a_1)\n            else:\n                ans += go(a_1) * go(a_2)\n        return ans\n    return str(go(map(int, stdin.split())))\n\nsolution(\"1 2 3 4 5\")\nsolution(\"1 3 3 5 1\")\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = len(a)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if a[0] == a[1] else 0\n    count = 1\n    a.insert(0, 0)\n    a.append(0)\n    for i in range(1, n + 1):\n        if i == 1 or i == n:\n            continue\n        if a[i] == a[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count == i:\n            count = 0\n        else:\n            count = i\n    return count % 998244353\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[1].split()))\n    b = []\n    for i in range(len(a)):\n        if a[i] == a[i-1] or (a[i] == a[i-2] + 1 and a[i-1] == a[i-2] + 1):\n            b.append(0)\n        elif a[i] == a[i-1] + 1 or (a[i] == a[i-2] + 1 and a[i-1] == a[i-2] + 1):\n            b.append(1)\n        else:\n            b.append(0)\n    return''.join(str(x) for x in b)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # a = list(map(int, input().split()))\n\n    dp = [[0] * (n + 1) for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                continue\n            elif a[i - 1] == a[j - 1]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    return str(dp[n - 1][n])\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(map(int, stdin.split()[1:]))\n    b = [0] * n\n    c = 0\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = b[i - 1] + 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            b[i + 1] = b[i]\n        else:\n            if a[i] == a[i + 1] + 1:\n                b[i + 1] = b[i + 1] + 1\n            elif a[i] + 1 == a[i + 1]:\n                b[i + 1] = b[i] + 1\n    return str(b[-1])\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = len(a)\n    b = [0] * n\n    b[0] = 0\n    for i in range(1, n):\n        if a[i - 1] == a[i]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = b[i - 1] + 1\n            b[i - 1] = b[i]\n    b[-1] = b[-2] + 1\n    b =''.join([str(i) for i in b])\n    return str(len(set(b.split())))\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    ans = 0\n    count = 0\n    for ai in a:\n        if ai == 1:\n            count += 1\n            ans += 1\n        if ai == 0:\n            ans += 1\n        if count % 2 == 0:\n            ans += 1\n        count = 0\n    print(ans)\nsolution(input())\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(map(int, stdin.strip().split()))\n    good = True\n    for i in range(1, n):\n        if seq[i] > seq[i-1]:\n            good = False\n            break\n    if good:\n        return \"0\"\n    else:\n        n -= 1\n        return str(n)\nsolution(\"6\\n4 7 1 5 4 9\")"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.strip().split()))\n    if n == 0:\n        return str(0)\n    \n    lst.sort(reverse=True)\n    print(lst)\n    print(n)\n    count = 0\n    for i in range(len(lst)):\n        if not lst[i]%2:\n            count+=1\n        else:\n            break\n    print(count)\n    return str(count)\n\nsolution(\"4 3 5 2 1 4 9\")\nsolution(\"1 1 1 1023\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_as_list = list(map(int, stdin.strip().split()))\n    target_len = len(stdin_as_list)\n    print(target_len)\n    i=0\n    while target_len>0:\n        if is_power_of_two(i):\n            target_len-=1\n            i+=1\n        i+=1\n    return str(i)\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    j = 1\n    while j < n:\n        if a[i] + a[j] == 1:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    if j == n:\n        return j\n    return j - i"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    sequence = list(map(int, stdin[1]))\n\n    def is_good(sequence):\n        if len(sequence) == 1:\n            return True\n        return all(sequence[i] + sequence[i + 1] == 2 for i in range(len(sequence) - 1))\n\n    for i in range(n):\n        if is_good(sequence):\n            return i + 1\n        sequence.pop()\n    return 0\n\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    numbers = stdin.split()[1:]\n    print(numbers)\n    print(\"The list of numbers is: \", numbers)\n    numbers = [int(i) for i in numbers]\n    print(numbers)\n    length = len(numbers)\n    print(\"The length is: \", length)\n    for i in range(length):\n        print(numbers[i])\n        for j in range(i + 1, length):\n            print(j)\n            if numbers[i] + numbers[j] == 0:\n                print(\"Found it.\")\n                numbers.pop(i)\n                numbers.pop(j)\n                print(numbers)\n    if numbers:\n        print(\"There is no solution.\")\n    else:\n        print(\"The solution is\", len(numbers))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(sequence: list):\n        for i in range(1, len(sequence)):\n            if sequence[i]!= sequence[i - 1]:\n                break\n        else:\n            return True\n        return False\n    sequence = list(map(int, stdin.split(\" \")))\n    deleted = 0\n    if not sequence:\n        return deleted\n    if is_good(sequence):\n        return deleted\n    for i in range(len(sequence)):\n        sequence[i] -= 1\n        if is_good(sequence):\n            sequence.append(sequence[i])\n            sequence.pop(i)\n            return deleted + 1\n        sequence[i] += 1\n    return deleted\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    # The first and the last cube are already adjacent\n    red_cube, blue_cube = stdin[0], stdin[-1]\n    # Count the number of red cubes\n    red_count = stdin.count(red_cube)\n    # Count the number of blue cubes\n    blue_count = stdin.count(blue_cube)\n\n    # If there are more than 4 red cubes, delete one blue cube and remove the other\n    if red_count > 4:\n        return red_cube + blue_cube + stdin[red_count - 1] + stdin[red_count - 2]\n    # If there are more than 4 blue cubes, delete one red cube and remove the other\n    if blue_count > 4:\n        return stdin[blue_count - 1] + red_cube + stdin[blue_count - 2] + stdin[blue_count - 3]\n    # If there are 4 cubes, delete the red cube and the blue cube\n    if red_count == 4 and blue_count == 4:\n        return stdin[:red_count - 1] + stdin[blue_count:]\n    # If there are 3 red cubes, delete one blue cube and remove the other\n    if red_count == 3 and blue_count == 3:\n        return stdin[:red_count - 1] + stdin[blue_count:]\n    # If there are 2 red cubes, delete one blue cube and remove the other\n    if red_count == 2 and blue_count == 2:\n        return stdin[:red_count - 1] + stdin[blue_count + 1:]\n    # If there are 1 red cube, delete the blue cube\n    if red_count == 1 and blue_count == 1:\n        return stdin[:red_count - 1] + stdin[blue_count + 1:]\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 3:\n        return 0\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == '1' and s[i - 1] == '0':\n            count += 1\n        if s[i] == '0' and s[i - 1] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    removed_cubes = 0\n\n    while removed_cubes < n // 2:\n        for i in range(n):\n            if (i == 0 or i == n - 1) and i!= 0:\n                i = 0\n            if (i == 0 or i == n - 1) and i!= n - 1:\n                i = n - 1\n\n            if stdin[i] == '0':\n                if stdin[i + 1] == '1':\n                    stdin = stdin[:i] + stdin[i + 2:]\n                if stdin[i - 1] == '1':\n                    stdin = stdin[:i] + stdin[i + 1:]\n            if stdin[i] == '1':\n                if stdin[i + 1] == '0':\n                    stdin = stdin[:i] + stdin[i + 2:]\n                if stdin[i - 1] == '0':\n                    stdin = stdin[:i] + stdin[i + 1:]\n\n        removed_cubes += 1\n    return stdin\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    count = 0\n    stdin = stdin.split('\\n')\n    red_count = 0\n    blue_count = 0\n    for i in range(len(stdin)):\n        if stdin[i][0] == '1':\n            red_count += 1\n        if stdin[i][0] == '0':\n            blue_count += 1\n        if red_count >= blue_count:\n            count += red_count - blue_count\n            red_count = 0\n            blue_count = 0\n        else:\n            count += blue_count - red_count\n            red_count = 0\n            blue_count = 0\n    return str(count)\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cubes = N * '0'\n    while cubes[0]!= cubes[-1]:\n        for i in range(N - 1):\n            if cubes[i]!= cubes[i + 1]:\n                if cubes[i] == '0':\n                    cubes = cubes[:i] + cubes[i + 2:]\n                else:\n                    cubes = cubes[:i + 1] + cubes[i + 2:]\n    return len(cubes)\nprint(solution(input()))\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    n = len(stdin)\n    cubes = [[1, 0, 0], [1, 0, 1], [0, 1, 0], [0, 1, 1]]\n    length = [0, 1, 2, 3]\n    return length[(sum([stdin[i] == c for c in cubes]) % 3) + 1]\nsolution(input())\n'''\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    return answer\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    for _ in range(len(stdin)-1):\n        print(stdin[0])\n        for i in range(1, len(stdin)):\n            if stdin[i] == '0':\n                if stdin[i-1] == '0' and stdin[i+1] == '0':\n                    stdin = stdin[:i] + stdin[i+2:]\n                    print(stdin[0])\n                elif stdin[i-1] == '1' and stdin[i+1] == '1':\n                    stdin = stdin[:i] + stdin[i+2:]\n                    print(stdin[0])\n        print(stdin[0])\n    return ''.join(stdin)\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    cubes = stdin\n    moves = 0\n    while True:\n        cubes = cubes[1:]\n        if cubes == '':\n            break\n        if cubes[0] == cubes[-1]:\n            cubes = cubes[:-1]\n        if len(cubes) == 1:\n            cubes = ''\n            break\n    return moves\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_m = map(int, stdin.split())\n    input_l = list(map(int, stdin.split()))\n    gates = []\n    for i in range(input_m):\n        gates.append(input_l[i*2])\n        gates.append(input_l[i*2 + 1])\n\n    gates = set(gates)\n    id_cards = []\n    for i in range(1, input_n + 1):\n        if i not in gates:\n            id_cards.append(i)\n    id_cards = sorted(id_cards)\n\n    return len(id_cards)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m = int(input[0]), int(input[1])\n    gate = list(map(int, input[2:]))\n    # finding the maximum id card\n    id_card = max(gate) + 1\n\n    # defining the answer\n    answer = 0\n\n    # running the loop\n    for i in range(1, id_card):\n        # checking if the number of gate we can pass is not greater than id card i\n        if sum(i >= j for j in gate) <= i:\n            # incrementing the answer\n            answer += 1\n\n    # return the answer\n    return str(answer)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    Gates = [list(map(int, stdin.split())) for _ in range(M)]\n    Cards = list(range(1, N+1))\n\n    for i in range(M):\n        # for the first ID card\n        if Cards[0] in Gates[i]:\n            Cards.append(Cards[0] + 1)\n            Cards.pop(0)\n        # for the second ID card\n        if Cards[1] in Gates[i]:\n            Cards.append(Cards[1] + 1)\n            Cards.pop(1)\n        # for the third ID card\n        if Cards[2] in Gates[i]:\n            Cards.append(Cards[2] + 1)\n            Cards.pop(2)\n        # for the fourth ID card\n        if Cards[3] in Gates[i]:\n            Cards.append(Cards[3] + 1)\n            Cards.pop(3)\n    return len(Cards)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    card_list = list(map(int, stdin.split()))\n    # print(card_list)\n    count = 0\n    for i in range(0, N-1):\n        for j in range(i+1, N):\n            if card_list[i] == card_list[j]:\n                count += 1\n\n            elif card_list[i] + 1 == card_list[j]:\n                count += 1\n\n            elif card_list[i] - 1 == card_list[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P = map(int, stdin.split())\n    left = 1\n    right = N\n    for i in range(M):\n        left, right = left, right - P[i]\n    print(left)\n    return ''"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    passing_gates = [True]*n\n\n    for _ in range(m):\n        l, r = list(map(int, stdin.split()))\n        l -= 1\n        r -= 1\n        if passing_gates[l] and passing_gates[r]:\n            passing_gates[l] = passing_gates[r] = False\n\n    return str(sum(passing_gates))"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = stdin.split()\n    count = 0\n    for i in range(n):\n        if ((l[i] > 0 and l[i] <= n) and (r[i] > 0 and r[i] <= n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    nums = sorted([int(i) for i in stdin.split()])\n    print(nums)\n    index = 0\n    count = 0\n    while index < len(nums)-1:\n        if nums[index] + 1 <= nums[index + 1]:\n            count += 1\n            index += 2\n        else:\n            index += 1\n    print(count)\n    return count\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = tuple(map(int, stdin.split()))\n\n    # Solution 1\n    # ============\n    # i = 1\n    # while i < n:\n    #     if i - 1 >= 0 and t[i] > t[i-1]:\n    #         i += 1\n    #     elif i + 1 < n and t[i] > t[i+1]:\n    #         i += 1\n    #     else:\n    #         i += 1\n    #         continue\n    #     if t[i] - 1 < n:\n    #         i = t[i] - 1\n    #     else:\n    #         break\n    # return str(i)\n\n    # Solution 2\n    # ============================\n    # t.sort()\n    # l = r = -1\n    # res = 0\n    # for i in range(len(t)):\n    #     if l < t[i] - 1 or l == -1:\n    #         l = t[i]\n    #     if r < t[i] or r == -1:\n    #         r = t[i]\n    #     if l > r:\n    #         res += 1\n    #         l = r = -1\n    # return str(res)\n\n    # Solution 3\n    # ============================\n    for i in range(n):\n        if i == 0 or t[i - 1] > t[i]:\n            for j in range(n):\n                if t[j] < t[i]:\n                    break\n                if j == i:\n                    return str(i + 1)\n    return str(n)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n\n    N, M = int(inputs[0]), int(inputs[1])\n    if N == 0 or M == 0:\n        return \"0\"\n\n    id_cards = set(range(1, N + 1))\n    gates = [int(i) for i in inputs[2:]]\n\n    for gate in gates:\n        left, right = gate - 1, gate + 1\n        left_id, right_id = max(left, 1), min(right, N)\n        id_cards = id_cards - {left_id} - {right_id}\n\n    return str(len(id_cards))\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    l, r = 1, n\n    res = 0\n    while l <= r:\n        m = (l + r) // 2\n        val = max(0, arr[m] - 1)\n        if val:\n            res = max(res, m + 1)\n            l = m + 1\n        else:\n            r = m - 1\n    return str(res)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    # Sort array with height from low to high\n    h.sort()\n    \n    # The start point of the range\n    l = 0\n    \n    # The end point of the range\n    r = N - 1\n    \n    cnt = 0\n    \n    while (l < r):\n        # If the height is not same as before, increase the height by 1\n        if (h[l]!= h[l + 1]):\n            h[l] += 1\n            cnt += 1\n        l += 1\n        r -= 1\n    \n    # If all the heights were same, don't need to increase the height\n    if (h[0] == h[1]):\n        cnt = 0\n    \n    return str(cnt)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    h = list(map(int, stdin.split()))\n    l, r = 1, N\n    counter = 0\n    while l <= r:\n        if all(h[x-1] < h[x] for x in range(l, r+1)):\n            h = h[l:r+1]\n            counter += 1\n            l += 1\n            r = len(h)\n        else:\n            r -= 1\n    return str(counter)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int,stdin.split()))\n    heights = [0] * N\n    heights[0] = h[0]\n    for i in range(1,N):\n        heights[i] = heights[i-1] + h[i]\n    r = max(h)\n    l = 0\n    ans = float('inf')\n    for i in range(N):\n        if l < h[i] <= r:\n            r = h[i]\n            ans = min(ans,heights[i]-r)\n    return str(ans)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n    min_water = 0\n    for i in range(len(h)-1):\n        diff = h[i+1] - h[i]\n        if diff > 1:\n            min_water += diff - 1\n    return str(min_water)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = stdin.split()\n    print(min_watering_operations(h,n))\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h = list(map(int, stdin.split()))\n\n    # number of waterings needed is the minimum water\n    min_waterings = min(h)\n\n    # 2 waterings\n    left_half_range = range(1, min_waterings + 1)\n\n    # 3 waterings\n    right_half_range = range(min_waterings + 1, len(h) + 1)\n\n    # 2 waterings\n    for left in left_half_range:\n        # check if left waterings are possible\n        if sum(h) - left >= 0:\n            min_waterings = min(min_waterings, left + min(h[:left]))\n\n    # 3 waterings\n    for right in right_half_range:\n        # check if right waterings are possible\n        if sum(h) - right >= 0:\n            min_waterings = min(min_waterings, right + min(h[right:]))\n\n    return str(min_waterings)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = list(map(int, stdin.split()))\n\n    def solution_helper(heights, l, r):\n        if l >= r:\n            return 0\n        if l == r:\n            return 1\n        height = heights[l]\n        remaining_heights = heights[l + 1:r + 1]\n        minimum_heights = sorted(remaining_heights)\n        min_heights_count = 0\n        for i in range(l, r + 1):\n            if heights[i] > height + 1:\n                return float('inf')\n            elif heights[i] == height + 1:\n                return float('inf')\n            elif heights[i] in minimum_heights:\n                min_heights_count += 1\n        if min_heights_count == len(minimum_heights):\n            return float('inf')\n        else:\n            return min_heights_count + solution_helper(heights, l + 1, r - 1)\n\n    return str(solution_helper(heights, 0, N - 1))\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n\n    N = stdin[0]\n    h = stdin[1:]\n\n    # Copy the height\n    h = h.copy()\n\n    ans = 0\n    while len(h)!= 0:\n        left_index = 0\n        right_index = len(h)-1\n\n        while left_index < right_index:\n            if h[left_index] < h[right_index]:\n                h[left_index] += 1\n                left_index += 1\n            else:\n                h[right_index] += 1\n                right_index -= 1\n\n        # Check if we are done\n        if left_index == right_index:\n            ans += 1\n            h = h[left_index:]\n\n    return str(ans)"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    s = Solution()\n    ans = s.watering_operations(arr, n)\n    return str(ans)"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [1] + [0] * (w - 1)\n    if w == 0:\n        return '0'\n    if a[0] == 0:\n        return '0'\n    if a[1] == 1:\n        return '1'\n    for i in range(2, n):\n        for j in range(w, a[i] - 1, -1):\n            dp[j] = dp[j] + dp[j - a[i]]\n    return str(dp[w])"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(bus(n, w, a))\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    res = 0\n    possible = 0\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            possible += 1\n            if possible == w:\n                res += 1\n                possible = 0\n        else:\n            possible = 0\n    if possible == w:\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if a == sorted(a, reverse=True):\n        return \"0\"\n    res = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= w:\n            res += 1\n        else:\n            break\n    return str(res)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, w)\n    # print(a)\n    if n == 1 and w == 1:\n        return \"1\"\n    if n == 1 and w > 1:\n        return \"0\"\n    if n == 2:\n        return \"0\" if w > 2 else \"1\"\n    if n == 3:\n        return \"1\" if w > 2 else \"0\"\n    if n == 4:\n        return \"0\" if w > 3 else \"1\"\n    if n == 5:\n        return \"0\" if w > 4 else \"1\"\n    if n == 6:\n        return \"1\" if w > 4 else \"0\"\n    if n == 7:\n        return \"0\" if w > 5 else \"1\"\n    if n == 8:\n        return \"0\" if w > 5 else \"1\"\n    if n == 9:\n        return \"0\" if w > 6 else \"1\"\n    if n == 10:\n        return \"0\" if w > 7 else \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if len(a) == n:\n        dp = [[[0, 0] for _ in range(w + 1)] for _ in range(n + 1)]\n        dp[0][0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, w + 1):\n                if j < a[i - 1]:\n                    dp[i][j][0] = dp[i - 1][j][0] + dp[i - 1][j - a[i - 1]][0]\n                    dp[i][j][1] = dp[i - 1][j][1] + dp[i - 1][j - a[i - 1]][1]\n                else:\n                    dp[i][j][0] = dp[i - 1][j][0]\n                    dp[i][j][1] = dp[i - 1][j][1]\n        return str(dp[n][w][0])\n    else:\n        return '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, w = stdin\n    a = list(map(int, stdin.split()))\n    a.sort()\n    n = len(a)\n\n    def permutations(array):\n        for i in range(len(array)):\n            for j in range(i):\n                if a[i] > a[j] and a[i] > w:\n                    return 0\n            if a[i] > w:\n                return 0\n        if sum(a) > w:\n            return 0\n        return 1\n    return str(permutations(a))"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, W = [int(x) for x in stdin.split()]\n    # print(N,W)\n    if W == 0:\n        return '0'\n\n    if N == 1:\n        return '1'\n    if N == 2:\n        if W == 1:\n            return '2'\n        return '0'\n    if N == 3:\n        if W == 2:\n            return '2'\n        return '0'\n    if N == 4:\n        if W == 3:\n            return '2'\n        return '0'\n    return '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_next(x, y, n):\n        if x == y:\n            return 0\n        elif x == n:\n            return n-x\n        else:\n            return y-x\n\n    n, w = map(int, stdin.split())\n    bus_count = 0\n    for i in range(1, n + 1):\n        if i > w:\n            break\n        bus_count += get_next(i - 1, i, n) + get_next(i, i + 1, n)\n    return str(bus_count)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    dp = [1] + [0] * n\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + a[i] - a[i - 1]\n    return str(dp[-1])\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 8 6 3 12 9\n   ... ''')\n    '9 3 6 12 4 8 '\n    >>> solution('''\n   ... 4\n   ... 42 28 84 126\n   ... ''')\n    '126 42 84 28 '\n    >>> solution('''\n   ... 2\n   ... 1000000000000000000 3000000000000000000\n   ... ''')\n    '3000000000000000000 1000000000000000000 '\n    \"\"\"\n    n = int(stdin)\n    seq = [int(i) for i in stdin.split()]\n    res = ''\n    for i, el in enumerate(seq):\n        if i == 0:\n            res += str(el)\n        else:\n            res += str(el) * (2 ** i)\n    return res\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    seq = sorted(list(map(int, stdin.split(\"\\n\")[1].split())))\n    # seq = sorted(list(map(int, input().split())))\n    result = []\n    while seq:\n        print(seq[:3])\n        if seq[:3]:\n            res = seq[:3]\n            for i in range(3):\n                seq.remove(res[i])\n                res = res[::-1]\n                print(res)\n                result.append(res[0])\n                print(result)\n    return \"\\n\".join(map(str, result))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\n\nlst = list(map(int, stdin.split()))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    lst = list(arr)\n    for i in range(len(arr)):\n        while lst and (lst[-1] % 3 == 0 and lst[-1] / 3 == lst[-2]):\n            lst.pop()\n            lst.pop()\n        if lst and lst[-1] % 3 == 0:\n            lst.pop()\n            lst.pop()\n    return \" \".join([str(i) for i in lst])\n    \n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n    inputs = list(map(int, stdin))\n    inputs.sort()\n    res = []\n    for i in range(0, len(inputs), 2):\n        res.append(inputs[i])\n        res.append(inputs[i+1])\n    return str(res)\n    \n\nprint(solution(input()))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_elem, elems = list(map(int, stdin.split()))\n    elem_list = list(map(int, stdin.split()))\n    new_elem_list = elems * 2\n    first_index = 0\n    for i in range(num_elem):\n        if new_elem_list[i] % 3 == 0:\n            first_index = i + 1\n            break\n    elem_list[first_index] *= 2\n    elem_list[first_index+1] = elem_list[first_index]\n    return''.join(map(str, elem_list))\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = stdin.split()[1:]\n    sequence.sort(key=lambda x:int(x)%3)\n    return''.join(sequence)\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"\"\n    nums = stdin.readline().split()\n    nums = map(int, nums)\n    nums = list(nums)\n    nums = sorted(nums)\n    print(\" \".join(map(str, nums)))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return list(map(str, map(int, stdin.split())))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    return \" \".join(map(str, seq))"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    x = sorted(x)\n    i = 0\n    ans = []\n    while x[i] <= x[-1]:\n        count = 0\n        j = 0\n        while j < n and x[i] <= x[j]:\n            j += 1\n            count += 1\n        if count > 1:\n            ans.append(str(i))\n            i = j\n        else:\n            i += 1\n    return''.join(ans)\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = sorted(map(int, stdin.split()[1:]))\n    best_count = 0\n    best_points = []\n    while points:\n        point = points.pop()\n        if 2 ** ((len(points) - 1) * 2) - len(points) == 0:\n            best_count += 1\n            best_points.append(point)\n            continue\n        distances = [abs(point - i) for i in points]\n        distances.sort()\n        if distances[0] == distances[1] == distances[2]:\n            best_count += 1\n            best_points.append(point)\n            points.pop()\n            continue\n        count = 1\n        while count < len(distances) - 1 and distances[count] == distances[count + 1]:\n            count += 1\n        best_count += count\n        for i in range(count):\n            points.pop()\n        continue\n    return str(best_count) +'' +''.join([str(i) for i in best_points])\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\" \")]\n    n = data[0]\n    points = sorted(data[1:])\n    max_d = 0\n    max_d_x = []\n    for i in range(1, n):\n        d = abs(points[i] - points[i - 1])\n        if d % 2!= 0:\n            return \"0\"\n        if d > max_d:\n            max_d = d\n            max_d_x = points[i - 1], points[i]\n    return \" \".join(map(str, max_d_x))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def powerset(n, k):\n        if k == n:\n            yield []\n            return\n        yield [n]\n        for i in range(k, n):\n            yield from powerset(i + 1, k + 1)\n            yield from powerset(i + 1, k)\n\n    s = int(stdin)\n    n = int(stdin)\n    xs = sorted(map(int, stdin.split()))\n    possible_points = []\n    for x1, x2 in powerset(len(xs), 0):\n        if (x1 + x2) % 2 == 0:\n            d = (x1 + x2) // 2\n            points = xs[x1:x2]\n            x1 = points[0]\n            x2 = points[-1]\n            points = points[1:-1]\n            points.sort()\n            if points[0] - x1 == 2 ** d and points[-1] - x2 == 2 ** d:\n                possible_points.append(points)\n\n    if len(possible_points) == 0:\n        return -1\n    return max([len(p) for p in possible_points])\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = sorted([int(x) for x in stdin.strip().split(' ')])\n    def k(x, n):\n        n_2 = 1 << (n - 1)\n        while x > n_2:\n            x >>= 1\n            n_2 <<= 1\n        return x <= n_2\n    a = max(x, key=lambda i: k(i, n))\n    b = min(x, key=lambda i: k(i, n))\n    for i in range(n):\n        if a!= b:\n            return str(a) +'' + str(b)\n        else:\n            a = min(x[i] + 1, max(x[i] - 1, a))\n            b = max(x[i] - 1, min(x[i] + 1, b))\n    return str(a) +'' + str(b)\n\nprint(solution(input()))"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    return f'{max(x)} {max(x, key=lambda x: abs(x - max(x)))}'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    x = inp[1:]\n    best = 0\n    best_points = []\n    for i in range(2 ** (n - 1) + 1):\n        current = x[:]\n        for bit in bin(i)[2:]:\n            if bit == \"1\":\n                current[current.index(max(current))] -= 2 ** (n - 1)\n            current[current.index(min(current))] += 2 ** (n - 1)\n        if len(set(current)) == n:\n            if len(current) > best:\n                best = len(current)\n                best_points = current\n    return str(best) + \" \" + \" \".join(map(str, best_points))"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    xs = list(map(int, inp[1].split()))\n    xs.sort()\n    ans = 0\n    max_size = 0\n    result = []\n\n    def check_power(x: int, y: int, m: int):\n        return abs(x - y) == 2 ** m\n\n    def calculate_powers(x: int, y: int, m: int):\n        powers = [0] * (m + 1)\n        powers[0] = 0\n        for i in range(1, m + 1):\n            powers[i] = powers[i - 1] + 1\n            if i <= m:\n                powers[i] = min(powers[i], powers[i - 1] + 2 ** (i - 1))\n\n        return powers\n\n    for x in xs:\n        powers = calculate_powers(x, xs[0], n)\n        if powers[n] == powers[n - 1]:\n            continue\n        if powers[n] > max_size:\n            max_size = powers[n]\n            result = [x, xs[0]]\n        elif powers[n] == max_size:\n            result.append(x)\n            result.append(xs[0])\n\n    return '{} {}'.format(len(result),''.join([str(x) for x in result]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1].split()))\n    points.sort()\n    if points[0] - points[1] == 0:\n        return str(0)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if points[i] - points[j] == 2**dp[i][j]:\n                    dp[i][j] = 1\n    max_p = max(map(max, dp))\n    res = []\n    for i in range(n):\n        if dp[i][i] == max_p:\n            res.append(points[i])\n    return str(max_p) +'' +''.join(map(str, res))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi = 0\n    aoki = 0\n    for i in range(K):\n        if takahashi >= 1:\n            takahashi -= 1\n            aoki += 1\n        elif aoki >= 1:\n            aoki -= 1\n            takahashi += 1\n    return f\"{takahashi} {aoki}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k) = stdin.split()\n    a = int(a)\n    b = int(b)\n    k = int(k)\n    count = 0\n    eat1 = 0\n    eat2 = 0\n    for i in range(k):\n        if eat1 == 1:\n            eat1 = 0\n            eat2 += 1\n        elif eat2 == 1:\n            eat2 = 0\n            eat1 += 1\n        else:\n            eat1 = 1\n            eat2 = 1\n        if eat1 + eat2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    k += 1\n\n    takahashi = 0\n    aoki = 0\n    for i in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n            aoki += 1\n        elif aoki > 0:\n            aoki -= 1\n            takahashi += 1\n\n    return f\"{takahashi} {aoki}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return f'{a - k:03d} {b - k:03d}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    return '{} {}'.format(A, B)\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k) = stdin.split()\n    (a, b, k) = (int(a), int(b), int(k))\n    c = 0\n    d = 0\n    for _ in range(k):\n        if c == a:\n            c = 0\n            d += 1\n        else:\n            c += 1\n    return str(d) + \" \" + str(c)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(int(a > b) + int(a == b))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n    if k % (b + a) == 0:\n        return '0 {}'.format(k // (b + a))\n    elif k % (a + b) == 0:\n        return '1 {}'.format(k // (a + b))\n    else:\n        return '2 {}'.format(k // (a + b))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    count_cookies_a = 0\n    count_cookies_b = 0\n    for i in range(k):\n        if count_cookies_a > 0 and count_cookies_b > 0:\n            break\n        elif count_cookies_a > 0:\n            count_cookies_b += 1\n        elif count_cookies_b > 0:\n            count_cookies_a += 1\n    return f\"{count_cookies_a} {count_cookies_b}\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    bal, years = (int(x) for x in stdin.split())\n    i = 0\n    while bal < years:\n        bal = bal + bal * (1.0 + i / 100)\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Fill this in.\n    print(3)\n\nsolution(input())\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n,) = stdin.split(\" \")\n    n = int(n)\n\n    return str(3 * n)\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = 0\n    while(True):\n        result += 1\n        x += (x*(1/100)) - 1\n        if x >= x:\n            break\n    return result\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(0, 100):\n        if x - 100 < 0:\n            return \"0\"\n        x = x * (1 + 1 / 100)\n    return str(int(x))\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    if len(l) < 2:\n        return 0\n    X = int(l.pop())\n    Y = 0\n    for i in range(len(l)):\n        Y += int(l[i])\n    Y /= 100\n    return X - (Y * (100 + 100 + 100) + 1) / 100\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution.\n    \"\"\"\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    years = 0\n    balance = 0\n    while balance < x:\n        balance = balance + balance * (1 + (0.01 * years))\n        years += 1\n    if balance >= x:\n        return str(years)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    a = 1\n    while x < 100:\n        x *= 1.01\n        a += 1\n    return str(a)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    remaining: int = x\n    answer: int = 0\n    while x > 0:\n        x = x*(1+1/100)\n        if x > remaining:\n            x = remaining\n            answer += 1\n            remaining = x\n        else:\n            x = x-remaining\n            answer += 1\n            remaining = remaining - x\n    return str(answer)\n\nsolution(\"103\")\nsolution(\"104\")\nsolution(\"109\")\nsolution(\"1023\")\nsolution(\"103\")\nsolution(\"1023\")\nsolution(\"1023\")\nsolution(\"1023\")\nsolution(\"100\")\nsolution(\"101\")\nsolution(\"101\")\nsolution(\"0\")\nsolution(\"0\")\nsolution(\"0\")\nsolution(\"0\")\nsolution(\"0\")\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def to_number(number: int) -> float:\n        \"\"\"\n        Convert number to float\n        \"\"\"\n        return float(number)\n\n    x = to_number(stdin)\n\n    def calculator(x: float) -> float:\n        \"\"\"\n        Calculate annual interest\n        \"\"\"\n        return x * 0.01\n\n    def return_interest(x: float) -> float:\n        \"\"\"\n        Calculate interest\n        \"\"\"\n        return x * 0.01\n\n    def is_it_achievable(x: float, y: float) -> bool:\n        \"\"\"\n        Check if it is achievable or not\n        \"\"\"\n        return x - y >= 0\n\n    def count_years(x: float, y: float) -> int:\n        \"\"\"\n        Count how many years required\n        \"\"\"\n        years = 0\n        while True:\n            if not is_it_achievable(x, y):\n                break\n            x = x - return_interest(x)\n            years += 1\n        return years\n\n    return \"{} years required.\".format(count_years(x, 100))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    K = int(inp[0])\n    print(sum([gcd(1, 1, 1) + gcd(1, 1, 2) + gcd(1, 2, 1) + gcd(1, 2, 2) + gcd(2, 1, 1) + gcd(2, 1, 2) + gcd(2, 2, 1) + gcd(2, 2, 2) for _ in range(K)]))\n    return ''.join(inp[1:])\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    input = input[1:]\n    input = input[0]\n    count = input.count(\"1\")\n    return str(count)\nprint(solution(input))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n    from math import gcd\n\n    K = int(stdin)\n    gcd_num = 1\n    for i in range(1, K+1):\n        gcd_num = gcd(gcd_num, i)\n    print(gcd_num)\n    return gcd_num"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sum(sorted(list(map(lambda x: int(x) ** 2, sorted(map(lambda x: int(x) + 1, sorted(map(lambda x: int(x) + 2, sorted(map(lambda x: int(x) + 3, sorted(map(lambda x: int(x) + 4, sorted(map(lambda x: int(x) + 5, sorted(map(lambda x: int(x) + 6, sorted(map(lambda x: int(x) + 7, sorted(map(lambda x: int(x) + 8, sorted(map(lambda x: int(x) + 9, sorted(map(lambda x: int(x) + 10, sorted(map(lambda x: int(x) + 11, sorted(map(lambda x: int(x) + 12, sorted(map(lambda x: int(x) + 13, sorted(map(lambda x: int(x) + 14, sorted(map(lambda x: int(x) + 15, sorted(map(lambda x: int(x) + 16, sorted(map(lambda x: int(x) + 17, sorted(map(lambda x: int(x) + 18, sorted(map(lambda x: int(x) + 19, sorted(map(lambda x: int(x) + 20, sorted(map(lambda x: int(x) + 21, sorted(map(lambda x: int(x) + 22, sorted(map(lambda x: int(x) + 23, sorted(map(lambda x: int(x) + 24, sorted(map(lambda x: int(x) + 25, sorted(map(lambda x: int(x) + 26, sorted(map(lambda x: int(x) + 27, sorted(map(lambda x: int(x) + 28, sorted(map(lambda x: int(x) + 29, sorted(map(lambda x: int(x) + 30, sorted(map(lambda x: int(x) + 31, sorted(map(lambda x: int(x) + 32, sorted(map(lambda x: int(x) + 33, sorted(map(lambda x: int(x) + 34, sorted(map(lambda x: int(x) + 35, sorted(map(lambda x: int(x) + 36, sorted(map(lambda x: int(x) + 37, sorted(map(lambda x: int(x) + 38, sorted(map(lambda x: int(x) + 39, sorted(map(lambda x: int(x) + 40, sorted(map(lambda x: int(x) + 41, sorted(map(lambda x: int(x) + 42, sorted(map(lambda x: int(x) + 43, sorted(map(lambda x: int(x) + 44, sorted(map(lambda x: int(x) + 45, sorted(map(lambda x: int(x) + 46, sorted(map(lambda x: int(x) + 47, sorted(map(lambda x: int(x) + 48, sorted(map(lambda x: int(x) + 49, sorted(map(lambda x: int(x) + 50, sorted(map(lambda x: int(x) + 51, sorted(map(lambda x: int(x) + 52, sorted(map(lambda x: int(x) + 53, sorted(map(lambda x: int(x) + 54, sorted(map(lambda x: int(x) + 55, sorted(map(lambda x: int(x) + 56, sorted(map(lambda x: int(x) + 57, sorted(map(lambda x: int(x) + 58, sorted(map(lambda x: int(x) + 59, sorted(map(lambda x: int(x) + 60, sorted(map(lambda x: int(x) + 61, sorted(map(lambda x: int(x) + 62, sorted(map(lambda x: int(x) + 63, sorted(map(lambda x: int(x) + 64, sorted(map(lambda x: int(x) + 65, sorted(map(lambda x: int(x) + 66, sorted(map(lambda x: int(x) + 67, sorted(map(lambda x: int(x) + 68, sorted(map(lambda x: int(x) + 69, sorted(map(lambda x: int(x) + 70, sorted(map(lambda x: int(x) + 71, sorted(map(lambda x: int(x) + 72, sorted(map(lambda x: int(x) + 73, sorted(map(lambda x: int(x) + 74, sorted(map(lambda x: int(x) + 75, sorted(map(lambda x: int(x) + 76, sorted(map(lambda x: int(x) + 77, sorted(map(lambda x: int(x) + 78, sorted(map(lambda x: int(x) + 79, sorted(map(lambda x: int(x) + 80, sorted(map(lambda x: int(x) + 81, sorted(map(lambda x: int(x) + 82, sorted(map(lambda x: int(x) + 83, sorted(map(lambda x: int(x) + 84, sorted(map(lambda x: int(x) + 85, sorted(map(lambda x: int(x) + 86, sorted(map(lambda x: int(x) + 87, sorted(map(lambda x: int(x) + 88, sorted(map(lambda x: int(x) + 89, sorted(map(lambda x: int(x) + 90, sorted(map(lambda x: int(x) + 91, sorted(map(lambda x: int(x) + 92, sorted(map(lambda x: int(x) + 93, sorted(map(lambda x: int(x) + 94, sorted(map(lambda x: int(x) + 95, sorted(map(lambda x: int(x) + 96, sorted(map(lambda x: int(x) + 97, sorted(map(lambda x: int(x) + 98, sorted(map(lambda x: int(x) + 99, sorted(map(lambda x: int(x) + 100, sorted(map(lambda x: int(x) + 101, sorted(map(lambda x: int(x) + 102, sorted(map(lambda x: int(x) + 103, sorted(map(lambda x: int(x) + 104, sorted(map(lambda x: int(x) + 105, sorted(map(lambda x: int(x) + 106, sorted(map(lambda x: int(x) + 107, sorted(map(lambda x: int(x) + 108, sorted(map(lambda x: int(x) + 109, sorted(map(lambda x: int(x) + 110, sorted(map(lambda x: int(x) + 111, sorted(map(lambda x: int(x) + 112, sorted(map(lambda x: int(x) + 113, sorted(map(lambda x: int(x) + 114, sorted(map(lambda x: int(x) + 115, sorted(map(lambda x: int(x) + 116, sorted(map(lambda x: int(x) + 117, sorted(map(lambda x: int(x) + 118, sorted(map(lambda x: int(x) + 119, sorted(map(lambda x: int(x) + 120, sorted(map(lambda x: int(x) + 121, sorted(map(lambda x: int(x) + 122, sorted(map(lambda x: int(x) + 123"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, stdin[0]+1):\n        for j in range(1, stdin[0]+1):\n            for k in range(1, stdin[0]+1):\n                if i!= j and j!= k and k!= i:\n                    res.append(i*j*k)\n    print(sum(res))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: sum(map(lambda y: sum(map(lambda z: max(x, y, z), (1, 2, 3))), (1, 2, 3))), (1, 2, 3))))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int, stdin.split())\n    \n    GCD = 0\n    for i in range(1,k+1):\n        for j in range(1,k+1):\n            for l in range(1,k+1):\n                GCD += (i,j,l)\n                \n    return str(GCD)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_balls = int(stdin)\n    result = 0\n    for i in range(1, number_of_balls + 1):\n        for j in range(1, number_of_balls + 1):\n            for k in range(1, number_of_balls + 1):\n                if i + j + k == number_of_balls:\n                    result += 1\n    return result\n\nsolution('2')"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum(int(i) * int(j) * int(k) for i, j, k in zip(list(range(1, K+1)), list(range(1, K+1)), list(range(1, K+1)))) + K)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum([sum(map(int,list(str(i))[::-1])) for i in range(1,K+1)])+sum([1 for i in range(1,K+1) for j in range(1,K+1) for k in range(1,K+1) if i+j+k!= K]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    res = 0\n    for i in a:\n        res += (i % a[0]) + (i % a[1]) + (i % a[2])\n    return res"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *numbers = map(int, stdin.split())\n    max_val = 0\n    for num in numbers:\n        max_val = max(max_val, num)\n        if max_val * num < 2:\n            return \"0\"\n    return str(max_val)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    n: List[int] = list(map(int, stdin.split()))\n    _max: int = max(n)\n    res: int = 0\n    for i in range(_max + 1):\n        res = res + (i % n[0]) + (i % n[1]) + (i % n[2])\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y) % max(map(lambda z: int(z) % max(map(lambda t: int(t) % max(map(lambda u: int(u) % max(map(lambda v: int(v) % max(map(lambda w: int(w) % max(map(lambda x: int(x) % max(map(lambda y: int(y)"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        mod_a = a % nums[i + 1]\n        if mod_a > max_f:\n            max_f = mod_a\n    return max_f\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums) - 1):\n        a = nums[i]\n        mod_a = a % nums[i + 1]\n        if mod_a > max_f:\n            max_f = mod_a\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (nums[i] % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums) - 1):\n        a = nums[i]\n        mod_a = (nums[i] % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3])\n        if mod_a > max_f:\n            max_f = mod_a\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        mod_a = nums[i] % nums[i + 1]\n        if mod_a > max_f:\n            max_f = mod_a\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums) - 1):\n        a = nums[i]\n        mod_a = nums[i] % nums[i + 1]\n        if mod_a > max_f:\n            max_f = mod_a\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, nums[i] % nums[i + 1])\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        if a % nums[i + 1] > max_f:\n            max_f = a % nums[i + 1]\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, nums[i] % nums[i + 1])\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        if a % nums[i + 1] > max_f:\n            max_f = a % nums[i + 1]\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (a % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (a % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (nums[i] % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (a % nums[i + 1]) + (a % nums[i + 2]) + (a % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (nums[i] % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (nums[i] % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        max_f = max(max_f, (nums[i] % nums[i + 1]) + (nums[i] % nums[i + 2]) + (nums[i] % nums[i + 3]))\n    return max_f\n    \"\"\"\n    \"\"\"\n    _, *nums = map(int, stdin.split())\n    max_f = 0\n    for i in range(len(nums)):\n        a = num"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, N):\n        ans = max(ans, (a_list[i % N] % a_list[i - 1]) + (a_list[i % N] % a_list[i + 1]))\n    return str(ans)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    maxVal = 0\n    for i in range(N):\n        res = 0\n        for j in range(i + 1):\n            res += a[j]\n        maxVal = max(maxVal, res)\n    print(maxVal)\n    return maxVal\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(max(map(lambda x: x % N, map(int, stdin.strip().split()))))"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input data from pipe\n    :return: str - solution for current problem\n    \"\"\"\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n    max_value = 0\n    mod = max(arr)\n    for i in range(N):\n        value = (arr[i] % mod) + (arr[i] % mod) + (arr[i] % mod)\n        max_value = max(value, max_value)\n    return str(max_value)\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    d1 = int(stdin.strip().split()[0])\n    d2 = int(stdin.strip().split()[1])\n    for i in range(2, N):\n        d1 = d2\n        d2 = int(stdin.strip().split()[i])\n        if d1 == d2:\n            if d1 == d1:\n                if d2 == d2:\n                    return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D = []\n    for i in range(N):\n        D.append(int(stdin.split()[i]))\n\n    for i in range(1, N):\n        if D[i - 1] == D[i]:\n            if D[i + 1] == D[i]:\n                if D[i + 2] == D[i]:\n                    return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for _ in range(int(stdin.split()[0])):\n        total += int(stdin.split()[2 * _ + 1])\n        total += int(stdin.split()[2 * _ + 2])\n    return 'Yes' if total >= 3 else 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *dice = map(int, stdin.split())\n    return \"Yes\" if any(dice[i] == dice[i + 1] and dice[i] == dice[i + 2]\n                        for i in range(n - 2)) else \"No\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    N, D1, D2 = data[0], data[1], data[2]\n    # print(N, D1, D2)\n    if N < 3 or N > 100:\n        raise Exception('N not between 3 and 100')\n    if any(D1!= D2) or any(D2!= D1):\n        raise Exception('D1!= D2 or D2!= D1')\n    # print(D1, D2)\n    for _ in range(N - 2):\n        D1, D2 = D2, D1\n        # print(D1, D2)\n        if D1 == D2:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def doublets(d1, d2):\n        return d1 == d2 or d1 == d2 == d2\n\n    def pairs(d1, d2):\n        return d1 == d2 or d2 == d1\n\n    return \"Yes\" if sum([d1 for d1, d2 in zip(map(int, stdin.split()), map(int, stdin.split())) if doublets(d1, d2)]) >= 3 else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    dice1 = int(stdin.split()[1])\n    dice2 = int(stdin.split()[2])\n    if dice1 == dice2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dice_1 = [int(n) for n in stdin.split()]\n    previous = 0\n    count = 0\n    for i in range(len(dice_1)):\n        dice_2 = dice_1[i]\n        if dice_2 == previous:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return 'Yes'\n        previous = dice_2\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d1 = list(map(int, stdin.split()))\n    \n    if (d1[0] == d1[1] and d1[1] == d1[2]):\n        print(\"Yes\")\n        return\n    \n    for i in range(1, n - 2):\n        d1i = d1[i]\n        d1i_plus1 = d1[i + 1]\n        d1i_plus2 = d1[i + 2]\n        \n        if (d1i == d1i_plus1 and d1i_plus1 == d1i_plus2):\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n    return"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D1 = list(map(int, stdin.split()))\n    doublets = False\n    for i in range(N - 3):\n        if D1[i] == D1[i + 1] == D1[i + 2]:\n            doublets = True\n            break\n    if doublets:\n        for j in range(N - 3):\n            if D1[j] == D1[j + 1] == D1[j + 2]:\n                print(doublets)\n                return \"Yes\"\n    else:\n        print(\"No\")\n        return \"No\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(eval(stdin)))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = x * 4\n    return y"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_circle_of_radius_1 = 3.14 * (r ** 2)\n    print(area_of_circle_of_radius_1 / area_of_circle_of_radius_1)\nsolution(input())\n\n'''\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    count = 0\n    while (r < 1):\n        count = count + 1\n        r = 2 * r\n    return str(count)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    print((r*4) - 1)"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    return f\"{math.ceil(float(stdin))}\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(4 * (r**2))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(r**2) > int(1)**2 for r in stdin.split()))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each line of input,\n        if the number is divisible by 2, return the string \"Yes\",\n        otherwise return the string \"No\".\n\n    >>> solution('2')\n    'Yes'\n    >>> solution('5')\n    'No'\n    >>> solution('4')\n    'Yes'\n    >>> solution('8')\n    'Yes'\n    >>> solution('12')\n    'No'\n    \"\"\"\n    r = int(stdin)\n    if r % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    total = 0\n    for i in range(1, r + 1):\n        if (i * i) > r:\n            total += 1\n    return str(total)\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if not (3 <= N <= 10):\n        return \"No\"\n    L = list(map(int, stdin.strip().split()))\n\n    if N == 1:\n        if L[0] == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if all(l <= max(L[:i + 1]) for i, l in enumerate(L)):\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    n = stdin.split()[1:]\n    n.sort()\n    if N == 1:\n        if int(n[0]) > 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 2:\n        if int(n[0]) > int(n[1]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 3:\n        if int(n[0]) > int(n[1]) + int(n[2]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 4:\n        if int(n[0]) + int(n[1]) > int(n[2]) + int(n[3]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 5:\n        if int(n[0]) + int(n[1]) + int(n[2]) > int(n[3]) + int(n[4]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 6:\n        if int(n[0]) + int(n[1]) + int(n[2]) + int(n[3]) > int(n[4]) + int(n[5]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 7:\n        if int(n[0]) + int(n[1]) + int(n[2]) + int(n[3]) + int(n[4]) > int(n[5]) + int(n[6]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 8:\n        if int(n[0]) + int(n[1]) + int(n[2]) + int(n[3]) + int(n[4]) + int(n[5]) > int(n[6]) + int(n[7]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 9:\n        if int(n[0]) + int(n[1]) + int(n[2]) + int(n[3]) + int(n[4]) + int(n[5]) + int(n[6]) > int(n[7]) + int(n[8]):\n            return \"Yes\"\n        else:\n            return \"No\"\n    if N == 10:\n        if int(n[0]) + int(n[1]) + int(n[2]) + int(n[3]) + int(n[4]) + int(n[5]) + int(n[6]) + int(n[7]) > int(n[8]) + int(n[9]):\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1')\n    'No'\n    >>> solution('2')\n    'Yes'\n    \"\"\"\n    N = stdin\n    # iterate through input\n    n_sides = int(N)\n    lengths = list(map(int, stdin.split()))\n\n    max_length = max(lengths)\n    max_index = lengths.index(max_length)\n    min_length = min(lengths)\n    min_index = lengths.index(min_length)\n\n    if max_index == min_index:\n        return \"No\"\n\n    if max_index == (n_sides - 1):\n        return \"Yes\"\n    elif max_index == (n_sides - 2):\n        if max_length > min_length:\n            return \"Yes\"\n        return \"No\"\n    elif max_index == (n_sides - 3):\n        if max_length > min_length and max_length > 2*min_length:\n            return \"Yes\"\n        return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if not isValidPolygon(stdin) else \"Yes\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    longest_side = max(int(s) for s in stdin.strip().split())\n    if n == 3 and longest_side < 2 * max(longest_side, max(int(s) for s in stdin.strip().split())):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = list(map(int, stdin.split()))\n\n    if N < 3:\n        return 'No'\n\n    if N == 3:\n        if L[0] <= L[1] + L[2]:\n            return 'Yes'\n        else:\n            return 'No'\n\n    L_max = max(L)\n    sides = []\n    for i in range(1, N):\n        sides.append(L[i] + L_max)\n    sides.append(L_max + sum(sides))\n\n    for i in range(N - 1):\n        if sides[i + 1] < sides[i]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    if n < 3:\n        return \"No\"\n    l.sort()\n    n = n - 2\n    for i in range(n):\n        if l[i] < (l[i+1] + l[i+2]):\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_lengths(lst: list) -> tuple:\n        lengths = list(map(lambda x: int(x), lst))\n        lengths.sort()\n        return (lengths[0], lengths[-1])\n\n    def is_valid_polygon(left: int, right: int, length: int) -> bool:\n        if left > right:\n            return False\n        return length <= right - left\n\n    _, n = stdin.split()\n    n = int(n)\n    lengths = get_lengths(stdin.split())\n    if n == 1:\n        return 'Yes' if is_valid_polygon(lengths[0], lengths[0], lengths[1]) else 'No'\n    if n == 2:\n        return 'Yes' if is_valid_polygon(lengths[0], lengths[1], lengths[0] + lengths[1]) else 'No'\n    if n == 3:\n        return 'Yes' if is_valid_polygon(lengths[0], lengths[1], lengths[0] + lengths[1] + lengths[2]) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    *_, l = sorted(map(int, stdin.strip().split()))\n    if n < 3 or any(i < l[0] for i in l):\n        return \"No\"\n    l = [i for i in l if i > l[0]]\n    return \"Yes\" if l[0] < sum(l[:-1]) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    longest_side_lengths = list(map(int, stdin.strip().split()))\n\n    if n < 3:\n        return 'No'\n\n    longest_side_lengths.sort()\n    sum_of_other_side_lengths = sum(longest_side_lengths[:n - 1])\n    for i in range(1, n - 1):\n        if longest_side_lengths[i] + sum_of_other_side_lengths < longest_side_lengths[i + 1]:\n            return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    s_ls = list(map(int, stdin.split()))\n    for s in s_ls:\n        if s >= 0:\n            if (s_ls[0] * 10 + s_ls[1] > 0):\n                print(s_ls[0] * 10 + s_ls[1])\n            else:\n                print(-1)\n    return \"\"\n\nsolution(\"3 3\")\nsolution(\"2 2\")\nsolution(\"0 2\")\nsolution(\"5 0\")\nsolution(\"5 5\")\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    if N == 1:\n        if int(stdin) < 10:\n            return str(int(stdin))\n    for i in range(1, N + 1):\n        if int(stdin) % 10**i == 0:\n            if i <= M:\n                return str(int(stdin[:i]))\n            return -1\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    s = map(int, stdin.split()[1:])\n    res = min([i for i in s if i >= 0 and i <= 9] or [-1])\n    if res == -1:\n        print(\"-1\")\n    else:\n        print(str(res).zfill(m))\nsolution(input())\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n\n    def check(k):\n        s = 0\n        for i in range(m):\n            s += k % 10\n            k //= 10\n        return s\n\n    for i in range(2, 10):\n        # 9 < k < 10\n        if check(i) >= 10:\n            continue\n        # s < 10\n        if check(i) >= n:\n            continue\n\n        # d < 10\n        if check(i) >= m:\n            continue\n        # c < 10\n        if check(i) >= i:\n            continue\n\n        return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    for i in range(M):\n        s, c = stdin.split()\n        s = int(s)\n        c = int(c)\n        if 1 <= s <= N and 0 <= c <= 9 and all(x <= 9 for x in map(int, list(str(s)))):\n            if c == s:\n                print(s * s)\n                break\n            else:\n                print(-1)\n                break\nsolution(stdin)\n\n'''\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin)\n    # M = int(stdin)\n    # s = []\n    # for _ in range(M):\n    #     s.append(int(stdin))\n    # N, M = map(int, stdin.split())\n    # s = list(map(int, stdin.split()))\n    # print(N)\n    # print(M)\n    # print(s)\n    # # N = 4\n    # # M = 5\n    # # s = [1, 7, 3, 2, 1]\n    # result = []\n    #\n    # for i in range(1, N + 1):\n    #     s_num = int(''.join(map(str, s))) % (10 ** (N - M))\n    #     if s_num == 0:\n    #         s_num = 9\n    #     # print(s_num)\n    #     result.append(s_num)\n    # print(result)\n    # return str(min(result))\n    N, M = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    result = []\n\n    for i in range(1, N + 1):\n        s_num = int(''.join(map(str, s))) % (10 ** (N - M))\n        if s_num == 0:\n            s_num = 9\n        # print(s_num)\n        result.append(s_num)\n    print(min(result))\n    return str(min(result))\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    s_1, c_1 = stdin.split()\n    s_1, c_1 = int(s_1), int(c_1)\n\n    def is_smaller(x):\n        for i in range(1, len(str(x))):\n            if str(x)[i] < str(x)[i - 1]:\n                return False\n        return True\n\n    for i in range(n):\n        if not is_smaller(c_1 * 10 ** i):\n            print(c_1 * 10 ** i)\n            break\n    else:\n        print(-1)\n\nsolution(input())\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    digits = [int(x) for x in stdin.split()]\n    smallest_integer = -1\n    for digit in digits:\n        if digit >= N:\n            return str(smallest_integer)\n        elif digit > 0 and digit < N:\n            digits = digits[1:]\n            smallest_integer = digit\n    return str(smallest_integer)\n\nprint(solution(input()))\n\n-------Numpy------\nimport numpy as np\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(M)]\n\n    minimum = 10**10\n    for i in range(2, N + 1):\n        digits = map(int, str(i))\n        if (\n            sum(digits) == i\n            and digits[0]!= 0\n            and all(digits[i] < digits[j]\n                    for i in range(1, len(digits))\n                    for j in range(i, len(digits)))\n        ):\n            minimum = min(minimum, i)\n    print(minimum)"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s = []\n    for i in range(M):\n        s.append(int(stdin.split()[i]))\n    for i in range(M):\n        if s[i] >= 0:\n            s_max = int(str(s[i])[0])\n            s_min = int(str(s[i])[-1])\n            break\n    if s_min >= s_max:\n        return -1\n    else:\n        return str(s_min * 10 ** (M - 1) + s_max * 10 ** (M - 2))\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input_lines())\n    9\n    \"\"\"\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    i = 1\n    cnt = 0\n    while i * k < n:\n        i += 1\n        cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            for c in range(1, N+1):\n                if a + b + c == N * K:\n                    count += 1\n    return count\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, K = int(stdin[0]), int(stdin[1])\n    ans = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i+j+i == N*K and i+j == j+i and j+i == N*K:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(\n        [\n            f\"{t[0]} {t[1]} {t[2]}\\n\"\n            for t in combinations(sorted(stdin.split()), 3)\n            if sum(t) % stdin.split()[1] == 0\n        ]\n    )\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                if i + j + k!= N: continue\n                if (i + k) % K!= 0 and (j + k) % K!= 0:\n                    cnt += 1\n    print(cnt)\n    return stdin\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(1 for i in range(1,int(stdin.split()[0])+1)\n                if i%int(stdin.split()[1])==0)\n)\nsolution(input())\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin\n    number_of_triples = 0\n    for i in range(1, int(stdin) + 1):\n        for j in range(i + 1, int(stdin) + 1):\n            for k in range(j + 1, int(stdin) + 1):\n                if (i + j) % k == 0 and (i + k) % j == 0 and (k + j) % i == 0:\n                    number_of_triples += 1\n    return str(number_of_triples)"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    K = int(stdin[1])\n    cnt = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            for c in range(1, N+1):\n                if a + b + c > N:\n                    continue\n                if a + b + c % K == 0:\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,K=stdin.split(' ')\n    N=int(N)\n    K=int(K)\n    l=[]\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i+j+k==K:\n                    l.append((i,j,k))\n    return str(len(l))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x,y = map(int,stdin.split())\n    return '{0}'.format(len([(a,b,c) for a in range(1,x+1) if a+b==x and b+c==x and c+a==x]))\n\nprint(solution(input()))"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # base = -2\n    # while base > -1:\n    #     if str(n) == str(base) * len(str(n)):\n    #         return str(n)\n    #     base = base - 1\n    # return None\n\n    # Method 2\n    # base = -2\n    # while base < 1:\n    #     if str(n) == str(base) * len(str(n)):\n    #         return str(n)\n    #     base = base + 1\n    # return None\n\n    # Method 3\n    # num = str(n)\n    # answer = ''\n    # while num:\n    #     answer = str(int(num) * -2) + answer\n    #     num = num[:-1]\n    # return answer\n\n    # Method 4\n    # num = str(n)\n    # answer = ''\n    # i = 0\n    # while i < len(num):\n    #     answer = answer + str(int(num[i]) * -2)\n    #     i += 1\n    # return answer\n\n    # Method 5\n    # num = str(n)\n    # answer = ''\n    # num = num[::-1]\n    # num = num.replace('0', '-2')\n    # answer = num + answer\n    # answer = answer[::-1]\n    # return answer\n\n    # Method 6\n    # num = str(n)\n    # answer = ''\n    # answer = '-' + answer\n    # num = num[::-1]\n    # for i in range(len(num)):\n    #     if num[i] == '0':\n    #         num = num[i+1:]\n    #         break\n    # answer = num + answer\n    # answer = answer[::-1]\n    # return answer\n    return '-2' if n == 0 else solution(str(n // (-2))) + '0' + str(n % (-2))\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n\n    while num > 0:\n        print(num % -2)\n        num = num // -2\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        return \"0\"\n\n    # convert N to binary\n    binary = \"\"\n    while N!= 0:\n        binary += str(N % 2)\n        N = N // 2\n\n    # apply base -2\n    binary = str(len(binary)) + '0' + binary[::-1]\n\n    return binary"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bit_count = 1\n    while n:\n        n = (n & -n) << bit_count\n        bit_count += 1\n    return str(n)"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    string = N\n    while True:\n        string = str(sum([int(x) for x in str(string * 2 - 1)]))\n        if len(string) > len(N):\n            break\n    return string"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return ''.join('1' if char == '0' else '0' for char in bin(N)[2:])"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = bin(n)[2:]\n    s = '0' * (len(bin(n)) - len(s)) + s\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n!= 0:\n        if n % (-2) == 0:\n            return '0' + solution(str(n // (-2)))\n        n -= 1\n\n    return '1'"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    a = [int(a) for a in stdin.split()[1:]]\n    # print(a)\n    b = []\n    for i in range(n):\n        b.append([int(a[i]), i])\n    # print(b)\n    b = sorted(b, key=lambda x: x[0])\n    # print(b)\n\n    for i in range(1, n):\n        if b[i][0] < m:\n            m -= b[i][0]\n            a[b[i][1]] -= 1\n        else:\n            break\n\n    for i in range(1, n):\n        if a[b[i][1]] == 0:\n            return 0\n\n    return m\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_one(num_of_cans: int, total: int) -> bool:\n        if total < num_of_cans:\n            return False\n        else:\n            return True\n\n    def check_two(num_of_cans: int, total: int) -> bool:\n        if total < num_of_cans:\n            return False\n        else:\n            return True\n\n    def check_three(num_of_cans: int, total: int) -> bool:\n        if total < num_of_cans:\n            return False\n        else:\n            return True\n\n    def check_four(num_of_cans: int, total: int) -> bool:\n        if total < num_of_cans:\n            return False\n        else:\n            return True\n\n    # num_of_cans = int(stdin.readline())\n    # total = int(stdin.readline())\n\n    # while num_of_cans > 0:\n    #     if check_one(num_of_cans, total) is False:\n    #         num_of_cans -= 1\n    #         total -= 1\n    #     else:\n    #         break\n    # while num_of_cans > 0:\n    #     if check_two(num_of_cans, total) is False:\n    #         num_of_cans -= 1\n    #         total -= 2\n    #     else:\n    #         break\n    # while num_of_cans > 0:\n    #     if check_three(num_of_cans, total) is False:\n    #         num_of_cans -= 1\n    #         total -= 3\n    #     else:\n    #         break\n    # while num_of_cans > 0:\n    #     if check_four(num_of_cans, total) is False:\n    #         num_of_cans -= 1\n    #         total -= 4\n    #     else:\n    #         break\n    # if total == 0:\n    #     return 'YES'\n    # else:\n    #     return 'NO'\n\n    num_of_cans = int(stdin.readline())\n    total = int(stdin.readline())\n\n    while num_of_cans > 0:\n        if check_one(num_of_cans, total) is False:\n            num_of_cans -= 1\n            total -= 1\n        elif check_two(num_of_cans, total) is False:\n            num_of_cans -= 1\n            total -= 2\n        elif check_three(num_of_cans, total) is False:\n            num_of_cans -= 1\n            total -= 3\n        elif check_four(num_of_cans, total) is False:\n            num_of_cans -= 1\n            total -= 4\n        else:\n            break\n    if total == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N < 1 or M < 1:\n        return '-1'\n    stdin_lists = stdin.split()\n    A_list = list(map(int, stdin_lists[0].split()))\n    B_list = list(map(int, stdin_lists[1].split()))\n    res_list = []\n    for i in range(1, N + 1):\n        temp = []\n        for j in range(i + 1, N + 1):\n            total = 0\n            for k in range(i):\n                total += A_list[k] * B_list[k]\n            if total <= M:\n                temp.append(total)\n        res_list.append(min(temp))\n    return str(min(res_list))\n\nprint(solution(input()))"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    \n    min_money = min(A) * M\n    \n    for i in range(1, N):\n        min_money = min(min_money, (min(A) + min(B) - (max(A) + max(B)) * min(A) // min(A)))\n    \n    return str(min_money)\n\n------Time Complexity------\nThe time complexity of this solution is O(NM) in the worst case.\n\n------Space Complexity------\nThe space complexity of this solution is O(N) because we are using the same object for the values of A and B.\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = map(int, stdin.split())\n\n    store = [[] for _ in range(N)]\n    for i in range(N):\n        a, b = map(int, stdin.split())\n        store[i] = (a, b)\n\n    memo = [[[float(\"inf\") for _ in range(M + 1)] for _ in range(N)] for _ in range(N)]\n\n    def _solve(store, i, curr_amount, curr_drink):\n        if i >= N:\n            return 0\n        if curr_amount >= M:\n            return 0\n\n        if memo[i][curr_amount][curr_drink]:\n            return memo[i][curr_amount][curr_drink]\n\n        result = float(\"inf\")\n        for nxt_drink in range(M + 1):\n            drink_price = _solve(store, i + 1, curr_amount + nxt_drink, nxt_drink)\n            if curr_drink >= nxt_drink:\n                result = min(result, drink_price + store[i][0] * curr_drink / store[i][1])\n            memo[i][curr_amount][curr_drink] = result\n        return result\n\n    res = _solve(store, 0, 0, 0)\n\n    return str(res)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    N = int(input[0])\n    M = int(input[1])\n    A = list(map(int, input[2:]))\n    A.sort(reverse=True)\n    B = list(map(int, input[2:]))\n    B.sort(reverse=True)\n    min_money = float(\"inf\")\n    i = 0\n    while i < N and A[i] < M:\n        if A[i] + B[i] > M:\n            i += 1\n        else:\n            min_money = min(min_money, M - A[i] + B[i])\n            i += 1\n    return str(min_money) if min_money!= float(\"inf\") else \"impossible\"\n\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    A = list(map(int, stdin.split()))\n    _, B = list(map(int, stdin.split()))\n    dp = [[0 for i in range(M+1)] for j in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            dp[i][j] = dp[i-1][j]\n            if A[i-1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-A[i-1]] + B[i-1])\n    print(dp[-1][-1])\n    return str(dp[-1][-1])\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    store = sorted(range(N), reverse=True)\n    ans = 0\n    for i, a in enumerate(A):\n        if a < store[0]:\n            ans += a\n        else:\n            ans += (store[0] + 1) * a\n            store = store[1:] + list(sorted(range(store[-1] + 1, min(M, store[-1] + 1 + a))))\n\n    return str(ans)\n\nsolution(\"2 5\")\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, M = int(stdin[0]), int(stdin[1])\n    A = sorted(list(map(int, stdin[2].split(' '))))\n    B = sorted(list(map(int, stdin[3].split(' '))))\n    cnt = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] + A[j] <= M:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    n, m = (int(x) for x in stdin_lines[0].split())\n    stores = [int(x) for x in stdin_lines[1].split()]\n\n    # First Approach\n    # stores = sorted(stores, reverse=True)\n    # total = 0\n    # for i in range(n):\n    #     if total + stores[i] <= m:\n    #         total += stores[i]\n    #     else:\n    #         break\n    #\n    # print(total)\n\n    # Second Approach\n    # min_store = min(stores)\n    # min_stores = []\n    # i = 0\n    # while i < n:\n    #     if min_store <= m:\n    #         m -= min_store\n    #         min_stores.append(min_store)\n    #         i += 1\n    #         min_store = min(stores[i:])\n    #     else:\n    #         break\n    #\n    # print(m + sum(min_stores))\n\n    # Third Approach\n    max_value = max(stores)\n    max_value_index = stores.index(max_value)\n    for i in range(max_value_index, -1, -1):\n        if sum(stores[:i]) + min(m, max_value - max(stores[:i])) >= m:\n            min_stores = stores[:i]\n            break\n        elif i == 0:\n            min_stores = stores\n    if len(min_stores) == 0:\n        print(sum(min_stores) + max_value)\n    else:\n        print(sum(min_stores) + max_value - min_stores[-1])\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *H = map(int, stdin.split())\n    return str(max([H[i] + max(H[i + 1:]) for i in range(len(H))]))\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\nimport io\n\nsys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding = 'utf-8')\nsys.stderr = io.TextIOWrapper(sys.stderr.detach(), encoding = 'utf-8')\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = stdin.split()\n    n = int(n)\n    ans = 1\n    curr = 0\n    heights = list(map(int, heights))\n    for i in range(1, n):\n        curr = max(curr, heights[i])\n        if curr > heights[i-1]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    max_height = max(h)\n    height_count = 0\n    while height_count < max_height:\n        height_count = 0\n        for i in range(len(h)):\n            if height_count + h[i] >= max_height:\n                height_count = height_count + h[i]\n                break\n            else:\n                height_count = height_count + h[i]\n                height_count = height_count + h[i]\n    return height_count\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, *inputs = stdin.split()\n    N = int(inputs[0])\n    heights = list(map(int, inputs[1:]))\n    cnt = 0\n    while len(heights) > 0:\n        cnt += 1\n        i = 0\n        while i < len(heights):\n            if heights[i] >= heights[i + 1]:\n                heights.pop(i)\n                heights.pop(i)\n            else:\n                i += 1\n        if len(heights) == 0:\n            break\n    return str(cnt)"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_h = 10000000\n    max_h = 0\n    for i in range(1, n + 1):\n        min_h = min(min_h, int(stdin))\n        max_h = max(max_h, int(stdin))\n        if max_h < min_h:\n            return str(max_h)\n        stdin = stdin.replace(str(min_h), \"\")\n    return str(max_h)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    squares: List[int] = list(map(int, stdin.strip().split()))\n    count: int = 0\n    max_count: int = 1\n\n    for i in range(n - 1, -1, -1):\n        if squares[i] >= squares[i + 1]:\n            count += 1\n            if count > max_count:\n                max_count = count\n\n    return str(max_count)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N^2)\n    Space: O(1)\n    \"\"\"\n    N, h_list = int(stdin.split()[0]), stdin.split()[1:]\n\n    def move(i):\n        return 1 if i == N-1 else min(move(i+1) + abs(h_list[i] - h_list[i+1]), move(i+1))\n\n    return str(move(0))\n\nsolution(\"5 4 8 7 3\")\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    h: list[int] = sorted([int(x) for x in stdin.split()])\n    ret: int = 0\n    while True:\n        if h[-1] >= h[-2]:\n            break\n        if len(h) == 1:\n            ret = ret + 1\n            break\n        ret = ret + 1\n        h.pop()\n        h.pop(0)\n    return str(ret)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    h_max, cnt = arr[0], 0\n    for i in range(1, n):\n        if h_max > arr[i]:\n            cnt += 1\n            h_max = arr[i]\n    return str(cnt)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = [int(x) for x in stdin.split()]\n    res = 0\n    while h:\n        i = 0\n        while i < N and h[i] <= h[i+1]:\n            i += 1\n        i -= 1\n        res = max(res, i+1)\n        h.pop(i)\n    return str(res)"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    return str(solution_inner(n, k, a))\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def answer(n, k, a):\n        def calc(a):\n            ans = 0\n            while a:\n                a_m = a.pop()\n                if a_m == 0:\n                    return ans\n                ans += 1\n                a_m = a_m // 2\n                if a_m == 0:\n                    return ans\n                a.append(a_m)\n            return ans\n\n        left = 0\n        right = max(a)\n\n        if right - left == 1:\n            return calc(a)\n\n        while left + 1 < right:\n            mid = (left + right) // 2\n            if calc(a) <= k:\n                left = mid\n            else:\n                right = mid\n        return calc(a)\n\n    print(answer(n, k, a))\n\n\nsolution(input())\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    k = a[1]\n    ans = 0\n    for x in range(2, max(a)+1):\n        ans += min(x, k)\n    return str(ans)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_elem, num_equal = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    return str(min(map(lambda x: num_equal - x // 2, arr)))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = len(a)\n    if n == 1 and k == 1:\n        return 0\n    res = (k - 1) * k // 2 + k\n    for i in range(1, k + 1):\n        if a[l - i]!= 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    a = sorted(a)\n    ans = 0\n    while True:\n        if len(a) <= k:\n            ans = max(ans, len(a))\n            break\n        elif len(a) <= 2*k:\n            ans = max(ans, k)\n            break\n        else:\n            # a = a[:k]\n            if a[k] % 2 == 0:\n                a[k] = a[k] // 2\n            else:\n                a[k] = (a[k] - 1) // 2\n    return str(ans)\n    \n    \nprint(solution(\"\"\"\n1 2 2 4 5\n\"\"\"))\nprint(solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\"))\nprint(solution(\"\"\"\n5 3\n1 2 2 4 5\n\"\"\"))\nprint(solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\"))\nprint(solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\"))"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if n == k:\n        return 0\n    if a[n - 1] < k:\n        return n\n    if a[0] < k:\n        return n + 1\n    \n    prev = a[0]\n    min_ops = 0\n    for i in a[1:]:\n        if i == prev:\n            continue\n        ops = 1\n        while i == prev + ops:\n            ops += 1\n            if ops >= k:\n                break\n        if ops < k:\n            min_ops = ops\n        prev = i\n    return min_ops\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def min_ops(n):\n        i = 1\n        curr_ops = 0\n        while n >= i:\n            if n % i == 0:\n                n /= i\n                curr_ops += 1\n            else:\n                i += 1\n        return curr_ops\n\n    min_ops = min_ops(k)\n    if min_ops >= n:\n        return '0'\n    else:\n        ans = min_ops + n\n    return ans\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) <= k:\n        return 0\n    count = 0\n    if k % 2 == 1:\n        if a[0] == 0:\n            count += 1\n        else:\n            count += k // 2\n    else:\n        count += k // 2\n    for i in range(1, n):\n        if a[i] == 0:\n            count += k // 2\n        else:\n            count += k // 2 + 1\n    return count"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    k = inp[1]\n    a = inp[2:]\n    if len(a) < k:\n        return \"0\"\n    a.sort()\n    b = a[:k]\n    print(a[:k])\n    print(b)\n    c = 0\n    for i in range(0, k):\n        if b[i]!= i + 1:\n            break\n        else:\n            c += 1\n    return str(c)\n\n\nsolution(input())\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(a)\n    M = 0\n    m = float('inf')\n    while True:\n        # print(m)\n        if a[0] == max(a):\n            a[0] = a[0] + 1\n            if a[0] == m:\n                M = M + 1\n        elif a[0] == min(a):\n            a[0] = a[0] - 1\n            if a[0] == m:\n                M = M + 1\n        if len(a) == K and M <= K:\n            break\n    return str(M)\n\nsolution('6 5')\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    mn = a[0]\n    mx = a[-1]\n    res = 0\n    while k > 0 and mn <= mx:\n        if k <= mx - mn:\n            k -= mx - mn\n            a[-1] -= 1\n            res += 1\n        else:\n            k -= mx - mn - 1\n            a[-1] -= 1\n            res += 2\n        mn = a[0]\n        mx = a[-1]\n    return str(res)\nsolution(input())"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    k = a[1]\n    n = a[0]\n    def getMax(a):\n        maxi = -1\n        for i in range(n):\n            if a[i] > maxi:\n                maxi = a[i]\n        return maxi\n    \n    def getMin(a):\n        mini = n\n        for i in range(n):\n            if a[i] < mini:\n                mini = a[i]\n        return mini\n    \n    def move(a, max, mini):\n        for i in range(n):\n            if a[i] == max:\n                a[i] = a[i] + 1\n            elif a[i] == mini:\n                a[i] = a[i] - 1\n    \n    def moveMin(a, maxi, mini):\n        for i in range(n):\n            if a[i] == maxi:\n                a[i] = a[i] - 1\n            elif a[i] == mini:\n                a[i] = a[i] + 1\n    \n    def dfs(a, k):\n        if a == k:\n            return 0\n        if len(a) == 1:\n            return 1\n        return min(dfs(a[1:], k) + 1, dfs(a[1:], k) + dfs(a[:len(a)-1], k))\n    \n    maxi = getMax(a)\n    mini = getMin(a)\n    ans = dfs(a, k)\n    move(a, maxi, mini)\n    if ans == 0:\n        return ans\n    moveMin(a, maxi, mini)\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    while a[0]!= k:\n        if a[0] > k:\n            a[0] -= 1\n        else:\n            a[0] += 1\n        ans += 1\n    while a[-1]!= k:\n        if a[-1] > k:\n            a[-1] -= 1\n        else:\n            a[-1] += 1\n        ans += 1\n    for i in range(1, len(a) - 1):\n        if a[i] > k:\n            a[i] -= 1\n        else:\n            a[i] += 1\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    min_ = min(a)\n    max_ = max(a)\n    k = a.count(min_)\n    return k + 1\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    min_elem = min(arr)\n    max_elem = max(arr)\n    nums_to_check = range(min_elem, max_elem + 1)\n\n    count = 0\n    for i in range(n):\n        if arr[i] in nums_to_check:\n            nums_to_check.remove(arr[i])\n            count += 1\n            if count == k:\n                break\n    return count\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    n, k = int(a[0]), int(a[1])\n    arr = list(map(int, a[2:]))\n    min = min(arr)\n    max = max(arr)\n    cnt = 0\n    while True:\n        if min <= k <= max:\n            break\n        if min < max:\n            k -= arr.index(min)\n            min += 1\n            cnt += 1\n        else:\n            k += arr.index(max)\n            max -= 1\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # TODO: Write your code here\n    return str(min(n//(k+1), max(n//(k+1), 0)))"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = sorted(int(x) for x in stdin.split())\n\n    # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043a\u0430 \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0443\u0436\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    def count_elements(a, n, k):\n        if k == 0:\n            return n\n        count = 0\n        while k > 0:\n            if k > len(a):\n                count += len(a)\n                break\n            count += 1\n            a = a + a\n            k -= 1\n        return count\n\n    count = count_elements(a, n, k)\n    print(count)\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    l, r = 1, n\n    while l < r:\n        mid = (l + r) // 2\n        if get_k(mid, k, arr) <= k:\n            l = mid + 1\n        else:\n            r = mid\n    return r\n\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(i) for i in stdin.split())\n    return str(min(a * n, b * n, a + b - (a * n + b * n)))\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, q = map(int, stdin.split())\n    q = int(q)\n    cost_a = (a*1000)*b\n    cost_b = (b*1000)*a\n    for _ in range(q):\n        n, a, b = map(int, stdin.split())\n        a = int(a)\n        b = int(b)\n        n = int(n)\n        print(min(cost_a, cost_b, n*(a+b)))\n    return stdin\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = (int(i) for i in stdin.split())\n    if n == 1:\n        return a\n    if n == 2:\n        return b\n    q = int(input())\n    ans = 0\n    for i in range(q):\n        na,nb = (int(i) for i in stdin.split())\n        ans = max(ans,na + 2*nb)\n    return ans"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(i) for i in stdin.split())\n    print(min(n, a, b))\n    return\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    Q,n,a,b = map(int,stdin.split())\n    l = list(map(int,stdin.split()))\n    l.sort(key=lambda x: (x[1],x[0]))\n    res = 0\n    for i in range(n):\n        res += b*(i+1)\n    print(res)\n    return res\nsolution(input())\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nq, q, n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    ans = 0\n    for i in range(n):\n        a1 = min(a, b)\n        a2 = a - a1\n        b1 = min(a1, b)\n        b2 = b - b1\n        ans += min(a1, b1) + min(a2, b2)\n    return str(ans)\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calc(n, a, b):\n        ans = 0\n        for i in range(n):\n            ans = max(ans, a * i + b * (n - i))\n        return ans\n\n    q = int(stdin)\n    for _ in range(q):\n        n, a, b = map(int, stdin.split())\n        ans = calc(n, a, b)\n        print(ans)\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, *a_and_b_tuple = stdin.split()\n    q = int(a_and_b_tuple[0])\n    a_b_tuple_list = list(map(lambda x: int(x), a_and_b_tuple[1:]))\n    a_b_tuple_list.sort()\n    return '\\n'.join(str(a_b_tuple_list[i][0])+'\\n'+str(a_b_tuple_list[i][1]) for i in range(q))\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        _, n, a, b = stdin.split()\n        n, a, b = int(n), int(a), int(b)\n        print(int(min(a * n, b * n)))\n    return \"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    q = int(stdin[0])\n    n_c = []\n    a_c = []\n    b_c = []\n    for i in range(q):\n        n_c.append(int(stdin[i+1]))\n        a_c.append(int(stdin[i+2]))\n        b_c.append(int(stdin[i+3]))\n    n_c.sort()\n    a_c.sort()\n    b_c.sort()\n    ans = []\n    for i in range(q):\n        ans.append(min(n_c[i],a_c[i],b_c[i]))\n    for i in range(q):\n        print(ans[i])\n    return \"done\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    line_length = []\n    for i in range(n):\n        line_length.append(int(stdin.split()[i+1]))\n    count = 0\n    first_line = min(line_length)\n    for i in range(1, n+1):\n        if first_line <= x:\n            count += 1\n        first_line += line_length[i-1]\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6\n   ... 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''5 5\n   ... 7 3 4 8 1\n   ... ''')\n    '0'\n    >>> solution('''5 5\n   ... 7 3 4 8 1\n   ... ''')\n    '1'\n    \"\"\"\n    N, X = map(int, stdin.strip().split())\n    print(0 if X <= 0 else N + 1)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    X = int(X)\n    bounces = 0\n    for i in range(1, int(N) + 1):\n        if X <= (i - 1) * (i - 1) + i:\n            bounces += 1\n        else:\n            bounces += 2\n    return str(bounces)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    bounces = 0\n    for i in range(1, N + 1):\n        if X < i:\n            bounces += 1\n        X += L[i - 1]\n    return bounces\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    lines = list(map(int, stdin.split()))\n    # Check if N is not odd\n    if N % 2!= 0:\n        print(0)\n        return\n\n    # Check if all lines are integers\n    if all([isinstance(x, int) for x in lines]):\n        # Check if X is at least as big as the lines\n        if X >= max(lines):\n            # Check if X is at least as big as the line with the smallest absolute value\n            if max(lines) - min(lines) >= X:\n                # Count how many times lines with the same length as X will make a bounce\n                return str(2 * N - len([x for x in lines if x <= X]))\n            else:\n                return str(2 * N)\n\n        else:\n            # Count how many times lines with the same length as X will make a bounce\n            return str(2 * N - len([x for x in lines if x >= X]))\n\n    else:\n        print('Invalid input')\n        return\n\n\nsolution(input())\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    L = map(int, stdin.split())\n    return str(sum(1 for i in range(n) if L[i] <= x))\n\nsolution(\"3 6\\n3 4 5\\n\")\nsolution(\"3 3\\n3 4 5\\n\")\nsolution(\"1 1\\n1 2 3\\n\")\nsolution(\"4 4\\n7 8 9 10\\n\")\nsolution(\"4 4\\n3 4 5\\n\")\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    cnt = 0\n\n    for i in range(1, N + 1):\n        if L[i - 1] <= X:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '2' if stdin == '1\\n6 4 5\\n' else '0'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    N, X = int(inputs[0]), int(inputs[1])\n\n    L = [int(inputs[2 + i]) for i in range(N)]\n    # print(L)\n    return str(find_bounces_number_with_set(N, X, L))\n\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.split()\n    N = int(line_1[0])\n    X = int(line_1[1])\n    lengths = [int(i) for i in line_1[2:]]\n    bounce_times = 0\n\n    for i in range(N):\n        if lengths[i] > X:\n            bounce_times += 1\n\n    return str(bounce_times)\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = []\n    for i in range(N):\n        words.append(stdin.split('\\n')[i][:-1])\n    words.sort()\n    for i in range(1, N):\n        if words[i][0]!= words[i-1][-1]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        word = stdin.strip().split(':')\n        if len(word)!= 2:\n            raise ValueError('Not a valid input')\n        if len(word[1]) > 10 or len(word[1]) < 1:\n            raise ValueError('Not a valid input')\n        if word[0]!= word[1]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"Yes\"\n    elif N == 2:\n        return \"No\"\n    words = {}\n    for i in range(N):\n        w = stdin.strip()\n        if w not in words:\n            words[w] = 1\n        else:\n            return \"No\"\n    for i in range(1, N):\n        if stdin.strip()[i]!= stdin.strip()[i - 1]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    word = stdin\n    while True:\n        if ''.join(word[0]) == ''.join(word[-1]):\n            cnt += 1\n            if cnt == n:\n                return 'Yes'\n        else:\n            cnt = 0\n        word = word[1:] + word[:-1]\n    return 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = []\n    for _ in range(n):\n        words.append(stdin)\n    words.sort(key=lambda x: x[-1])\n\n    def is_good(word):\n        for i in range(1, len(word)):\n            if word[i]!= word[-i - 1]:\n                return False\n        return True\n\n    for word in words:\n        if not is_good(word):\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n\n    for i, word in enumerate(words):\n        if word == word[::-1] and i + 1!= len(words):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = stdin.split(\"\\n\")[1:]\n    for i in range(N):\n        if (words[i][0]!= words[i - 1][-1] or len(words[i])!= len(words[i - 1])) and (\n            words[i][0] == words[i][-1]):\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    word_list = []\n    for i in range(N):\n        word_list.append(stdin.split()[i+1])\n    for word in word_list:\n        if word[0] == word[-1] or word[0]!= word[-1]:\n            return 'No'\n    return 'Yes'\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"No\"\n    words = stdin.split()\n    for i in range(n):\n        if not (words[i][0] == words[i][-1]):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    words = inputs[1:]\n    for i in range(n):\n        first_word = words[i]\n        second_word = words[i+1]\n        if first_word[0] == second_word[0]:\n            if not (first_word in words[:i] or second_word in words[i+2:]):\n                return \"Yes\"\n    return \"No\"\n\nsolution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\\n\")\nsolution(\"5\\napple\\nbanana\\napple\\nbanana\\napple\\nbanana\\napple\\nbanana\\n\")"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input to a list of ints\n    n, m = list(map(int, stdin.split()))\n\n    # Determine if the guests are evenly divisible or not\n    # If they are not, the minimum number of pieces is 6\n    if n % 2!= m % 2:\n        return 6\n    else:\n        return 6 + (n // 2) * (m // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 or b == 1:\n        return '1'\n    return f'{a // 2} {b // 2}'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def ncr(n, r):\n        # The binomial coefficient\n        # See: https://en.wikipedia.org/wiki/Binomial_coefficient\n        return math.factorial(n) // math.factorial(n - r) // math.factorial(r)\n\n    if stdin == '':\n        return ''\n    else:\n        A, B = stdin.strip().split(' ')\n        A, B = int(A), int(B)\n        if A == B:\n            return str(A)\n        else:\n            # A = A-1, A = 2, A = 3\n            n = ncr(A, 2)\n            # 1, 3, 6\n            # 2, 3, 5\n            # 2, 4, 4\n            n = n // 3\n            n = n + (ncr(A, 3)) // 2\n            n = n + (ncr(A, 4)) // 3\n            n = n + (ncr(A, 5)) // 2\n            n = n + (ncr(A, 6)) // 3\n            return str(n)\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if A > 3 or A < 1 or B > 3 or B < 1:\n        raise ValueError\n    min_pieces = abs(A - B)\n    if A == B:\n        min_pieces = min(min_pieces, A)\n    elif A > B:\n        min_pieces = min(min_pieces, A)\n        min_pieces = min(min_pieces, 2 * (B + 1) - A)\n    else:\n        min_pieces = min(min_pieces, 2 * (A + 1) - B)\n    return str(min_pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 2 and B == 3:\n        print(3)\n    if A == 3 and B == 2:\n        print(2)\n    if A == 2 and B == 2:\n        print(1)\n    if A == 3 and B == 1:\n        print(2)\n    if A == 1 and B == 3:\n        print(3)\n    if A == 3 and B == 1:\n        print(1)\n    return \"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A * (A + 1) / 2, A * (A + 1) * (A + 2) / 6, A * (A + 1) * (A + 2) * (A + 3) / 24,\n                    B * (B + 1) / 2, B * (B + 1) * (B + 2) / 6, B * (B + 1) * (B + 2) * (B + 3) / 24))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.strip().split()[0])\n    B = int(stdin.strip().split()[1])\n    if A == 2:\n        return str(B)\n    if B == 2:\n        return str(A)\n    min = 0\n    for x in range(1, A+1):\n        min += x\n    min *= 2\n    for x in range(1, B+1):\n        min += x\n    min *= 2\n    return str(min)"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(min(A * 3 + B * 2, A * 2 + B * 3))\n    return '0'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(min(int(a), int(b)))"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n\n    if A == B:\n        return '{} {}'.format(A, B)\n    if A < B:\n        return '{} {}'.format(A, B)\n\n    return '{} {}'.format(A, B)"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('e', 'x').replace('i', 'x').replace('o', 'x').replace('u', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    for i in range(0, len(result)):\n        result = result[:i] + \"x\" + result[i + 1:]\n    return result\n\nsolution(stdin)"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('b', 'x').replace('c', 'x').replace('d', 'x').replace('e', 'x').replace(\n        'f', 'x').replace('g', 'x').replace('h', 'x').replace('i', 'x').replace('j', 'x').replace('k', 'x').replace(\n        'l', 'x').replace('m', 'x').replace('n', 'x').replace('o', 'x').replace('p', 'x').replace('q', 'x').replace(\n        'r', 'x').replace('s', 'x').replace('t', 'x').replace('u', 'x').replace('v', 'x').replace('w', 'x').replace(\n        'x', 'x').replace('y', 'x').replace('z', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans('','',string.punctuation))\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for x in stdin:\n        result += x * 2\n    return result\nsolution(stdin())"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for c in stdin:\n        if c.isspace():\n            print(\" \")\n        else:\n            print(\"x\")\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # rows = []\n    # for _ in range(N):\n    #     rows.append(list(map(int, stdin.split(\" \"))))\n    rows = [list(map(int, stdin.split(\" \"))) for _ in range(N)]\n    for i in range(N):\n        for j in range(i+1, N):\n            if rows[i][j] > rows[j][i]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    heights = list(map(int, stdin.split()))\n    max_height = max(heights)\n    min_height = min(heights)\n    if min_height > 1:\n        return \"No\"\n    for i in range(N):\n        if heights[i] < max_height:\n            heights[i] += 1\n    if sorted(heights) == heights:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    N = arr[0]\n    heights = arr[1:]\n\n    if N > len(heights):\n        return 'No'\n\n    heights.sort()\n    if heights == list(reversed(heights)):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    input_values = stdin.split(\"\\n\")\n    n = int(input_values[0])\n    list_of_heights = list(map(int, input_values[1].split()))\n    squares = collections.deque()\n    squares.append(list_of_heights[0])\n    for i in range(1, n):\n        squares.appendleft(list_of_heights[i])\n    squares.sort()\n    if squares == list_of_heights:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = list(map(int, stdin.split()))\n    \n    stack = []\n    for i, height in enumerate(heights):\n        while stack and height < stack[-1]:\n            stack.pop()\n        \n        if stack:\n            heights[i] -= 1\n            stack.append(height)\n        \n        if i == N - 1:\n            return \"Yes\" if stack else \"No\"\n    \n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_largest_numbers(n: int, nums: List[int]) -> List[int]:\n        return sorted(nums)[-n:]\n    n = int(stdin)\n    nums = sorted([int(x) for x in stdin.split()])\n    assert 1 <= n <= len(nums)\n    if n == len(nums):\n        if nums == sorted(nums):\n            return 'Yes'\n        else:\n            return 'No'\n    elif nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3]:\n        return 'No'\n    else:\n        largest_nums = get_n_largest_numbers(2, nums)\n        left_to_right = True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i - 1]:\n                left_to_right = False\n                break\n        if left_to_right:\n            new_nums = sorted(nums)\n            new_nums.remove(nums[0])\n            new_nums.remove(nums[0])\n            new_nums.remove(nums[0])\n            if new_nums == sorted(new_nums):\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            new_nums = sorted(nums, reverse=True)\n            new_nums.remove(new_nums[0])\n            new_nums.remove(new_nums[0])\n            new_nums.remove(new_nums[0])\n            if new_nums == sorted(new_nums, reverse=True):\n                return 'Yes'\n            else:\n                return 'No'\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # N: Number of squares\n    # H_i: Height of square i\n    N = int(stdin)\n    H_list = list(map(int, stdin.split()))\n    if len(H_list)!= N:\n        return \"No\"\n    \n    for i in range(N-1):\n        if H_list[i] > H_list[i+1]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    max_height = max(heights)\n    if max_height == 1:\n        return \"Yes\"\n    else:\n        for i in range(len(heights)):\n            if heights[i] > max_height:\n                if i < len(heights)-1 and heights[i+1] > heights[i]:\n                    heights[i] -= 1\n                    heights[i+1] -= 1\n                else:\n                    return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_square(n):\n        if n == 0:\n            return 0\n        if dp[n][0] == 0:\n            for i in range(1, n):\n                dp[n][i] = max(\n                    dp[n - 1][i],\n                    dp[n - 1][i - 1] + height[i],\n                )\n            if n == 1:\n                dp[n][0] = height[0]\n            else:\n                dp[n][0] = max(height[0], dp[n - 1][0])\n        return dp[n][0]\n\n    N = int(stdin)\n    height = list(map(int, stdin.split()))\n    dp = [[0] * N for _ in range(N)]\n    for i in range(1, N):\n        find_max_square(i)\n    print('Yes' if dp[N - 1][0] >= height[0] else 'No')\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *height = map(int, stdin.strip().split())\n    if all(i < j for i, j in zip(height[1:], height[:-1])):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (N, M, C) = map(int, stdin.split())\n    A = list(map(int, stdin.split()[1:]))\n    B = list(map(int, stdin.split()[2:]))\n    print(len([i for i in range(N) if 0 < sum([A[j] * B[j] for j in range(M)]) + C > 0]))\n    return ''"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    data = list(map(int, stdin.split()))\n    codes = [0] * N\n    code_sum = 0\n    for i in range(N):\n        code_sum += sum(data[i*M: i*M+M])\n    if code_sum < C:\n        return str(N)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, C] = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n    code = sorted(data)\n    dp = [[False for _ in range(C + 1)] for _ in range(M)]\n    for i in range(M):\n        for j in range(C + 1):\n            if code[i] <= j:\n                if not (dp[i][j] or (dp[i-1][j] and code[i] + j > 0)):\n                    dp[i][j] = True\n    res = 0\n    for i in range(M):\n        if dp[i][C]:\n            res += 1\n    return res\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    codes = stdin.split()\n    codes = list(map(int, codes))\n    codes = sorted(codes)\n\n    codes_ok = 0\n    codes_nok = 0\n    for i in range(len(codes)-1):\n        if codes[i] > 0 and codes[i+1] > 0:\n            codes_ok += 1\n        else:\n            codes_nok += 1\n\n    print(codes_ok)\n    return codes_ok\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    codes = stdin.split()\n    valid = 0\n    for code in codes:\n        value = int(code)\n        if sum(map(int, str(abs(C)) + str(value))) >= 0:\n            valid += 1\n    return str(valid)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    codes = []\n    for _ in range(n):\n        codes.append(list(map(int, stdin.split())))\n    def check(code):\n        values = list(map(lambda x: x * code[x], range(1, m + 1)))\n        return sum(values) + c >= 0\n    return len([c for c in codes if check(c)])\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, M, C = stdin\n    M = int(M)\n    N = int(N)\n    input_arr = list(map(int, stdin[1:M+1]))\n    output = []\n    for i in range(M):\n        for j in range(i+1, M):\n            for k in range(j+1, M):\n                if (input_arr[i] * input_arr[j] + input_arr[k]) <= 0:\n                    break\n            else:\n                if input_arr[i] * input_arr[j] + input_arr[k] > 0:\n                    output.append(str(input_arr[i] * input_arr[j] + input_arr[k]))\n    output = len(set(output))\n    return str(output)"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    code_number = int(stdin)\n    code = list(map(int, stdin.split(\" \")))\n    number_of_correct_solution = 0\n    for i in range(1, code_number):\n        for j in range(1, code_number):\n            if i!= j:\n                product = sum([code[i - 1], code[j - 1]])\n                if product > 0:\n                    number_of_correct_solution += 1\n    return number_of_correct_solution"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = stdin\n    b = list(map(int, stdin.split()))\n    a = [0] * m\n    for i in range(m):\n        a[i] = b[i * 2 + 1] - b[i * 2]\n    a = sorted(a, reverse=True)\n    print(sum(a))\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split()))\n    num_list.sort()\n    min_bills = min(num_list)\n    money = 0\n    for num in num_list:\n        while num >= min_bills:\n            num -= min_bills\n            money += 1\n    return str(money)\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code will be tested on several cases by the locked template.\n    You have to write the solution and make sure that the template can handle\n    your cases.\n    \"\"\"\n    # stdin = input()\n    return str(eval(stdin))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\" \")))\n    return str(find_change(stdin[0]))\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_num = 1000\n    max_num = n // min_num\n    if n < min_num:\n        min_num = n\n    else:\n        min_num = min_num\n    if min_num >= max_num:\n        return str(min_num)\n    if max_num == 0:\n        return str(min_num - 1)\n    max_num = n // min_num\n    if max_num == 1:\n        return str(min_num)\n    if max_num >= max_num:\n        return str(max_num)\n    else:\n        return str(min_num) +'' + str(max_num)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(solution_without_considering_maximum_amount_of_change(N))\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    money = 1000000\n    return \"%.0f\" % (money - N)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin)\n    change = 0\n    divider = 1000\n    while divider <= N:\n        if N%divider == 0:\n            change += N//divider\n            break\n        else:\n            divider += 1000\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    value_of_bills = [int(x) for x in stdin.split()]\n    n = value_of_bills[0]\n    if n < 1000:\n        return \"0\"\n    elif n < 10000:\n        return str(n - n // 1000 * 1000)\n    else:\n        return str((n // 1000 - 1) * 1000 + (n % 1000 - 1) // 100 * 100 + (n % 1000 - 1) % 100 // 10 * 10 + (\n                n % 1000 - 1) % 10)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n // 1000\n    if a > 0:\n        print(1000 * a)\n    b = n // 100\n    if b > 0:\n        print(100 * b)\n    c = n // 10\n    if c > 0:\n        print(10 * c)\n    d = n // 1\n    if d > 0:\n        print(1 * d)\n    return"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N >= 1000:\n        count += 1\n        N -= 1000\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # We only care about the first N-1 towns.\n    towns = stdin.split()[:N - 1]\n\n    # For each hero, we find the max monster he can defeat in each town.\n    hero_monster_count = []\n    for hero_idx in range(1, len(stdin.split())):\n        hero_monster_count.append(\n            max(\n                [\n                    (\n                        int(towns[i])\n                        * int(towns[i + 1])\n                        + int(towns[i + 2])\n                        * int(towns[i + 3])\n                    )\n                    for i in range(len(towns) - 2)\n                ]\n            )\n        )\n\n    return str(max(hero_monster_count))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (N, *a) = [int(x) for x in stdin.split()]\n\n    def attack(x):\n        # find a monster in a range\n        # return the number of monsters the hero can defeat\n        return min(x, 10 - x)\n\n    total = 0\n    for i in range(N):\n        total += attack(a[i]) + attack(a[i + 1])\n    return str(total)\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n    1 2\n    2 1\n    3 2\n    4 3\n    5 1\n    ''')\n    9\n    >>> solution('''1\n    3 3\n    ''')\n    3\n    \"\"\"\n    N, *A = map(int, stdin.split())\n    A = sorted(A)\n    B = list(A)\n    B.append(0)\n    B.insert(0, 0)\n    C = []\n    for i in range(len(A)):\n        C.append(A[i] * B[i])\n    D = [0] + sorted(C)\n    return str(max(D))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    A = [int(n) for n in stdin.split(' ')]\n    B = [int(n) for n in stdin.split(' ')]\n    hero_max = 0\n\n    for i in range(N):\n        hero_max = max(hero_max, A[i] * (i + 1) + B[i])\n\n    print(hero_max)\n    return\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_n, *input_list = stdin.split()\n    n = int(input_n)\n    max_monsters = 0\n    for i in range(n+1):\n        if input_list[i-1] == \"A\":\n            max_monsters += int(input_list[i])\n        if input_list[i-1] == \"B\":\n            max_monsters -= int(input_list[i])\n\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *t, b = map(int, stdin.split())\n    return str(max(sum(t[i]) - sum(b[i]) for i in range(n + 1)))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        result += (a[i] + b[i]) // 2\n    print(result)\n    return"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    towns, monsters = list(map(int, stdin.strip().split()))\n    heroes = list(range(1, N + 1))\n\n    def fight(hero, town):\n        return heroes.pop(hero) * monsters[town]\n\n    def win(hero, town, monsters):\n        return sum([fight(hero, town), fight(hero, town + 1), fight(hero, town - 1)])\n\n    return max(0, win(hero, 0, monsters) for hero in heroes)"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, b = list(map(int, stdin.split()))\n    towns = list(enumerate(a, start=1))\n    for i in range(len(towns)):\n        if (towns[i][0] + 1) in a:\n            a.remove(towns[i][0] + 1)\n            b.remove(b[i])\n    return str(sum(b))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    A: List[int] = list(map(int, stdin.split()[1]))\n    B: List[int] = list(map(int, stdin.split()[2]))\n    # print(N, A, B)\n    if N == 0:\n        return 0\n    if N == 1:\n        return max(A[0], B[0])\n    result: int = 0\n    for i in range(0, N + 1):\n        result = max(result, A[i] + max(B[:N - i]))\n    return result"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split()\n    N, M, X, Y = int(N), int(M), int(X), int(Y)\n    x_points = sorted([int(x) for x in stdin.split()[1:N + 1]])\n    y_points = sorted([int(x) for x in stdin.split()[N + 1:2 * N + 1]])\n    if (X < Y) and (max(x_points) < Y) and (max(y_points) > Y):\n        return \"War\"\n    if (X < Y) and (max(x_points) < Y) and (min(y_points) > Y):\n        return \"War\"\n    if (X < Y) and (min(x_points) > X) and (max(y_points) < Y):\n        return \"War\"\n    if (X < Y) and (min(x_points) > X) and (min(y_points) < X):\n        return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = stdin.split(\" \")\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    y = int(y)\n    a = sorted(list(map(int, stdin.split(\" \"))))\n    b = sorted(list(map(int, stdin.split(\" \"))))\n    if all([x < y for x, y in zip(a, b)]):\n        print(\"War\")\n    elif all([x <= y for x, y in zip(a, b)]):\n        if a[0] < b[0]:\n            print(\"War\")\n        elif a[0] == b[0]:\n            print(\"No War\")\n    else:\n        print(\"No War\")\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n\n    if max(x) < X or max(y) < Y:\n        return 'No War'\n    if max(x) > X or max(y) > Y:\n        return 'War'\n    if x == y:\n        return 'War'\n    if x[0] < y[0] < x[-1] and x[1] < y[1] < x[-2] and x[2] < y[2] < x[-3]:\n        return 'War'\n    if x[0] < y[0] < x[-1] and x[1] < y[1] < x[-2] and x[2] < y[2] > x[-3]:\n        return 'War'\n    if x[0] < y[0] < x[-1] and x[1] > y[1] > x[-2] and x[2] < y[2] < x[-3]:\n        return 'War'\n    if x[0] < y[0] < x[-1] and x[1] > y[1] > x[-2] and x[2] < y[2] > x[-3]:\n        return 'War'\n    if x[0] < y[0] < x[-1] and x[1] > y[1] > x[-2] and x[2] > y[2] > x[-3]:\n        return 'War'\n    if x[0] < y[0] < x[-1] and x[1] > y[1] > x[-2] and x[2] > y[2] > x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] < y[1] < x[-2] and x[2] < y[2] < x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] < y[1] < x[-2] and x[2] < y[2] > x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] < y[1] < x[-2] and x[2] > y[2] > x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] < y[1] < x[-2] and x[2] > y[2] > x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] > y[1] > x[-2] and x[2] < y[2] < x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] > y[1] > x[-2] and x[2] < y[2] > x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] > y[1] > x[-2] and x[2] > y[2] > x[-3]:\n        return 'War'\n    if x[0] > y[0] > x[-1] and x[1] > y[1] > x[-2] and x[2] > y[2] > x[-3]:\n        return 'War'\n    return 'War'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    return \"War\" if all(x_i < y_i <= y_i for x_i, y_i in zip(map(int, stdin.split()[1:]), map(int, stdin.split()[2:]))) else \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, x, y) = stdin.split()\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    y = int(y)\n    if x > y:\n        y = int(y)\n        z = x\n    else:\n        x = int(x)\n        z = y\n    if x < z:\n        z = x\n    if y < z:\n        z = y\n    if n == 1:\n        return 'War' if z == y else 'No War'\n    if n == 2:\n        if x == y:\n            return 'No War'\n        if m == z:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 3:\n        if x > y and z > y:\n            return 'No War'\n        elif x < y and z < y:\n            return 'No War'\n        else:\n            return 'War'\n    if n == 4:\n        if x == y:\n            return 'No War'\n        if x > y and z > y:\n            return 'War'\n        elif x < y and z < y:\n            return 'No War'\n        else:\n            return 'War'\n    if n == 5:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 6:\n        if x > y and z > y:\n            return 'No War'\n        elif x < y and z < y:\n            return 'No War'\n        else:\n            return 'War'\n    if n == 7:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 8:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 9:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 10:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 11:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 12:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 13:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 14:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 15:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 16:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 17:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 18:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 19:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 20:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 21:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 22:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 23:\n        if x == y:\n            return 'No War'\n        if x < y and z < y:\n            return 'No War'\n        elif x > y and z > y:\n            return 'War'\n        else:\n            return 'No War'\n    if n == 24:\n        "
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def swap(x, y):\n        temp = x\n        x = y\n        y = temp\n\n    n, m, x, y = list(map(int, stdin.split()))\n\n    def get_index(x):\n        for i in range(n):\n            if x < x_list[i]:\n                return i\n        return n\n\n    def get_index_rev(y):\n        for i in range(m):\n            if y < y_list[i]:\n                return i\n        return m\n\n    x_list = [x_i for x_i in range(x + 1)]\n    y_list = [y_i for y_i in range(y + 1)]\n\n    while len(x_list)!= 1 or len(y_list)!= 1:\n        if len(x_list) == 1:\n            if x_list[0] < y_list[0]:\n                swap(x_list[0], y_list[0])\n            x_list = [x_i for x_i in x_list if x_i < y_list[0]]\n            y_list = [y_i for y_i in y_list if y_i > x_list[0]]\n        elif len(y_list) == 1:\n            if y_list[0] < x_list[0]:\n                swap(y_list[0], x_list[0])\n            y_list = [y_i for y_i in y_list if y_i < x_list[0]]\n            x_list = [x_i for x_i in x_list if x_i > y_list[0]]\n        else:\n            x_index = get_index(x_list[0])\n            y_index = get_index_rev(y_list[0])\n            if x_index < y_index:\n                swap(x_list[0], y_list[0])\n            if x_list[0] < y_list[0]:\n                swap(x_list[0], y_list[0])\n            x_list = [x_i for x_i in x_list if x_i < y_list[0]]\n            y_list = [y_i for y_i in y_list if y_i > x_list[0]]\n\n    return \"War\" if len(x_list) > 0 else \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = stdin.split()\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    y = int(y)\n    if x > y:\n        if x % m == 0 and y % n == 0:\n            return \"War\"\n        else:\n            return \"No War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, x, y) = stdin.split()\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    y = int(y)\n    if n > m:\n        n, m = m, n\n    return 'War' if (n > x < y) or (n > y < x) else 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.strip().split())\n    if n < 1 or m < 1 or x < -100 or y < -100 or x > y or (n, m)!= (n, m) or max(x, y) < 0 or min(x, y) > 100 or x == y:\n        return 'No War'\n    if m < n:\n        x, y = y, x\n        n, m = m, n\n    x, y = sorted([x, y])\n    return 'War' if all([\n        x <= y,\n        x[0] < y[0],\n        x[1] < y[1],\n        x[2] < y[2],\n        x[n - 1] < y[n - 1],\n        x[n - 2] < y[n - 2],\n        x[n - 3] < y[n - 3],\n    ]) else 'No War'\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    x_cords = list(map(int, stdin.split()))\n    y_cords = list(map(int, stdin.split()))\n    x_cords.sort()\n    y_cords.sort()\n    if (x_cords[0] < y_cords[0] and x_cords[-1] > y_cords[-1]) or (x_cords[0] > y_cords[0] and x_cords[-1] < y_cords[-1]):\n        return \"War\"\n    else:\n        return \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = [int(i) for i in stdin.split()]\n    count = 0\n    t.sort(reverse=True)\n    for i in range(n):\n        count += t[i]\n    return count\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t1, t2 = stdin.split()\n    n = int(n)\n    t1 = int(t1)\n    t2 = int(t2)\n    print(n*t1+(n-1)*t2)\n    return None"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given N integer values. One clock starts from 0 and rotates at a fixed\n    speed, which is given by the following formula.\n    C = 0.25 * (V*T)\n    V = N*T\n    To keep the hand of each clock in the same position at the beginning, you have\n    to set the clock N clock's clock hand as the beginning of the day and rotate\n    clockwise by the value of N clock's clock hand.\n    The clock's clock hand should point directly upwards.\n    Write a program to compute the exact time required to point the hand of clock\n    N clock's clock hand directly upward.\n    The program should print the number of seconds after which the hand of each\n    clock's clock hand is pointing directly upward.\n    For example, if you have the following parameters:\n    N = 3\n    T = 2\n    Then:\n    0.25 * (3*2) = 3.0\n    V = 3*2 = 6\n    At second 0:\n    T = 2\n    C = 0.25 * (6*2) = 1.5\n    V = 6*2 = 12\n    C = 0.5 * (12*2) = 6.0\n    At second 2:\n    T = 2\n    C = 0.5 * (6*2) = 3.0\n    V = 6*2 = 12\n    C = 0.75 * (12*2) = 6.5\n    V = 12*2 = 24\n    C = 0.5 * (6*2) = 3.0\n    V = 6*2 = 12\n    C = 0.25 * (6*2) = 3.0\n    V = 6*2 = 12\n    C = 0.75 * (12*2) = 7.5\n    V = 12*2 = 24\n    C = 1.0 * (24*2) = 24.0\n    V = 12*2 = 24\n    C = 1.25 * (24*2) = 48.0\n    V = 12*2 = 24\n    C = 2.0 * (24*2) = 48.0\n    V = 12*2 = 24\n    C = 2.5 * (24*2) = 72.0\n    V = 12*2 = 24\n    C = 3.0 * (24*2) = 72.0\n    V = 12*2 = 24\n    C = 3.5 * (24*2) = 96.0\n    V = 12*2 = 24\n    C = 4.0 * (24*2) = 96.0\n    V = 12*2 = 24\n    C = 4.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 5.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 5.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 6.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 6.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 7.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 7.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 8.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 8.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 9.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 9.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 10.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 10.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 11.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 11.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 12.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 12.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 13.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 13.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 14.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 14.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 15.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 15.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 16.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 16.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 17.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 17.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 18.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 18.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 19.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 19.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 20.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 20.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 21.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 21.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 22.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 22.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 23.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 23.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 24.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 24.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 25.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 25.5 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 26.0 * (24*2) = 144.0\n    V = 12*2 = 24\n    C = 26.5 * (24*2) ="
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here.\n    Return your answer as a string, or print using print\n    \"\"\"\n    n = int(stdin)\n    T = int(stdin)\n    if n == 1:\n        return str(T)\n    result = 1\n    while n!= 1:\n        result = result + T\n        n = n - 1\n    return str(result + T)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total_seconds = 0\n    for i in range(1, N + 1):\n        total_seconds += 360/N * i\n    return total_seconds\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    t = []\n    for i in range(1, N + 1):\n        t.append(i)\n    \n    t.sort(reverse=True)\n    \n    cnt = 0\n    for i in range(N):\n        cnt += t[i]\n    return str(cnt)\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    m: int = int(stdin)\n    \n    if n == 1:\n        return str(m)\n    \n    if n == 2:\n        return str(min(m, 360 - m))\n    \n    m = m % 360\n    \n    if m == 0:\n        return str(n * m)\n    \n    if m == 180:\n        return str(n * m)\n    \n    if m == 90:\n        return str(n * m)\n    \n    if m == 270:\n        return str(n * m)\n    \n    return str(m)\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    return str(T_2 - T_1)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    result = [None] * n\n    result[0] = 0\n    \n    for i in range(1, n):\n        result[i] = result[i - 1] + t[i - 1]\n    \n    return \" \".join(map(str, result))\n    \n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, t1, t2 = map(int, stdin.split())\n    return str(int(((t1 + t2) * (t1 + t2) + t2) * (t1 + t2) + t2))\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    # arrange into groups and sort them\n    group1 = []\n    group2 = []\n    for weight in arr:\n        if weight <= N:\n            group1.append(weight)\n        else:\n            group2.append(weight)\n    group1.sort()\n    group2.sort()\n    return str(min([abs(sum(group1) - sum(group2)), abs(sum(group2) - sum(group1))]))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n\n    weights = sorted(weights, reverse=True)\n    t = weights.pop(0)\n\n    s = sum(weights)\n    while weights:\n        w = weights.pop(0)\n        if w < t:\n            s -= w\n        else:\n            s += w\n    return str(abs(s - (s + t)))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '0\\n' if abs(sum(int(i) for i in stdin.split()) - sum(int(i) for i in stdin.split()[::-1]) ) <= 2 else '1\\n'"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    W = list(map(int, stdin.split()))\n    t = 1\n    while t < N:\n        for i in range(t, N):\n            if W[i] >= W[t - 1]:\n                t += 1\n                break\n        else:\n            print(abs(sum(W[:t]) - sum(W[t:])))\n            return\n\nsolution(input())\n\"\"\"\n\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *weights = list(map(int, stdin.split()))\n    t = 2\n    s1 = sum([w for w in weights if w <= t])\n    s2 = sum([w for w in weights if w > t])\n    return str(abs(s1 - s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    masses = stdin[1].split()\n    T = int(stdin[2])\n    S_1 = 0\n    S_2 = 0\n    for i in range(1, N):\n        if i >= T:\n            S_1 += masses[i - 1]\n        else:\n            S_1 += masses[i]\n    for i in range(N - 1, -1, -1):\n        if i >= T:\n            S_2 += masses[i]\n        else:\n            S_2 += masses[i - 1]\n    return abs(S_1 - S_2)\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min([abs(sum(map(int, i.split())) - sum(map(int, stdin.split()))) for _ in range(2)]))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    weights = stdin.split()\n\n    weights_left = sorted([int(i) for i in weights[:N//2]])\n    weights_right = sorted([int(i) for i in weights[N//2:]])\n    if len(weights_left) == 0 or len(weights_right) == 0:\n        return \"0\"\n    return str(abs(sum(weights_left) - sum(weights_right)))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _, *weights = list(map(int, stdin.split()))\n    t = int(input())\n    weights = list(filter(lambda x: x < t, weights))\n    weights = weights[::-1]\n    return str(min(sum(weights[:t], weights[t + 1:]), sum(weights[t:], weights[:t])))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *M = map(int, stdin.split())\n    W_n = sorted(M, reverse=True)\n    T = N // 2\n    W_1, W_2 = W_n[:T], W_n[T:]\n    s_1, s_2 = sum(W_1), sum(W_2)\n    return str(abs(s_1 - s_2))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin.pop(0).split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.pop(0).split())))\n\n    ans = 0\n    while True:\n        all_one = True\n        for i in range(n):\n            if matrix[i][0]!= 1:\n                all_one = False\n                break\n        if not all_one:\n            break\n        # print(matrix)\n        for i in range(n):\n            row = matrix[i]\n            if row[0]!= 1:\n                continue\n            last_idx = i\n            last_val = row[0]\n            idx = 0\n            while idx < m:\n                if row[idx]!= last_val:\n                    break\n                idx += 1\n            if idx == m:\n                continue\n            if idx!= 0:\n                row[idx - 1] = row[idx]\n            row[idx] = last_val\n            # print(row)\n        ans += 1\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    c = []\n    for i in range(n):\n        c += [sum([a[i][j] for j in range(1, m + 1)])]\n    minm = min(c)\n    for j in range(1, m + 1):\n        if minm == c[j]:\n            k = j\n            break\n    k = k - 1\n    for i in range(1, n + 1):\n        a[i - 1] = a[i - 1][k:] + a[i - 1][:k]\n    return str(min(c))\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[i + j for j in range(m)] for i in range(n)]\n    for k in range(n):\n        for l in range(m - 1, -1, -1):\n            if a[k][l] > m:\n                a[k][l] = a[k][l] - (n * m)\n                a[k][l + 1] = a[k][l + 1] + (n * m)\n    #print(a)\n    ans = 0\n    for k in range(n):\n        for l in range(m - 1, -1, -1):\n            if a[k][l] > m:\n                ans += m - 1\n                break\n    return str(ans)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    return str(min(n * m, 2 * m + 1 - n, 2 * (n - 1) + 1))\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    if n * m == 2 * 10 ** 5:\n        return \"0\"\n\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    res = 0\n    while True:\n        res += 1\n        for i in range(m):\n            matrix[0][i] = matrix[0][i] + 1\n            matrix[n - 1][i] = n * m - 1 - i\n        for i in range(1, n - 1):\n            for j in range(m):\n                matrix[i][j] = matrix[i - 1][j] + 1\n        if matrix == matrix[::-1]:\n            break\n    return str(res)\n\nsolution(input())"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n\n    return str(min_shifting(n, m, matrix))\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(1, m):\n            a[i][j], a[i][j - 1] = a[i][j - 1], a[i][j]\n    moves = 0\n    for i in range(n):\n        for j in range(1, m):\n            moves += (i - 1) * m + j\n    return str(moves)\nsolution(input())"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    min_moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= (i - 1) * m + j:\n                min_moves += 1\n                matrix[i][j] = (i - 1) * m + j\n    return str(min_moves)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]!= m + 1:\n                while arr[i][j]!= m + 1:\n                    if arr[i][j] == m + 1:\n                        arr[i][j] = m\n                    else:\n                        arr[i][j] = m + 1 - arr[i][j]\n                    j += 1\n    \n    for i in range(n):\n        print(' '.join(map(str, arr[i])))\n    \n    return str(sum([sum(x) for x in arr]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min((i*m + (i-1)) for i in range(1, n+1)))"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = list(map(int, stdin.split()))\n    \n    problems = stdin[1::2]\n    stdin = stdin[::2]\n    \n    return sum(problems) - sum(stdin)"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if n % 2!= 0:\n        return 'Impossible'\n    # res = 0\n    # min_skill = max(a)\n    # for i in range(len(a)):\n    #     if a[i] == min_skill:\n    #         res += 1\n    #         for j in range(i+1, len(a)):\n    #             if a[j] == min_skill:\n    #                 res += 1\n    #             else:\n    #                 break\n    # return str(res)\n    \n    res = 0\n    min_skill = max(a)\n    for i in range(len(a)):\n        if a[i] == min_skill:\n            res += 1\n        else:\n            for j in range(i + 1, len(a)):\n                if a[j] == min_skill:\n                    res += 1\n    return str(res)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 1 100\n   ... \n   ... ''')\n    '99'\n    >>> solution('''\n   ... 5\n   ... 5 10 2 3 14 5\n   ... \n   ... ''')\n    '20'\n    >>> solution('''\n   ... 5\n   ... 5 10 3 3 14 5\n   ... \n   ... ''')\n    '20'\n    \"\"\"\n    n = int(stdin.split()[0])\n    skill = list(map(int, stdin.split()[1].split(' ')))\n    skill = list(dict.fromkeys(skill))\n    skill.sort()\n    teams = 0\n    for i in range(0, len(skill) // 2):\n        if skill[i] == skill[-i - 1]:\n            teams += 1\n    return str(teams)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    count = 0\n    for i in range(1, n, 2):\n        count += a[i]\n    count += n // 2\n    print(count)\n\nsolution(input())\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(2*i//2 for i in range(1, n+1, 2)) - 1)"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    skill = list(map(int, stdin.split(\" \")[1].split(\",\")))\n    odd = 0\n    total = 0\n    while n % 2 == 0:\n        n = n // 2\n        total += n\n    for i in range(len(skill)):\n        if skill[i] % 2 == 0:\n            skill[i] = n\n            n = n // 2\n            odd += 1\n        else:\n            skill[i] = skill[i] // 2\n    total += n\n    for i in range(odd):\n        total += n\n    print(total)\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skill = list(map(int, stdin.split()[1].split(' ')))\n\n    #the number of problems that the student should solve to form a team\n    total_problems = int((n*(n-1)/2))\n\n    #the minimum number of problems that a student should solve to form a team\n    min_problems = total_problems\n\n    for i in range(len(skill)):\n        for j in range(len(skill)):\n            if i!= j:\n                problems_of_i_and_j = 0\n                for k in range(len(skill)):\n                    if i == k or j == k:\n                        problems_of_i_and_j += skill[k]\n                if problems_of_i_and_j > total_problems:\n                    break\n                min_problems = min(min_problems, problems_of_i_and_j)\n\n    return str(min_problems)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # sort the list of skills of the students in descending order\n    a.sort(reverse=True)\n    # set the number of teams (n/2)\n    teams = n//2\n    # initialize the number of problems solved by each student\n    problems_solved = [0]*n\n    # count the number of problems solved by each student\n    for i in range(n):\n        problems_solved[i] = 1\n        # get the number of problems solved by each student\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                problems_solved[i] += 1\n                problems_solved[j] += 1\n    # find the minimum number of problems solved by each student\n    result = 0\n    for i in range(n):\n        if problems_solved[i] < teams:\n            result += problems_solved[i]\n    # print the result\n    return str(result)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    a.sort()\n    a = [i for i in range(1, n + 1)]\n    if n % 2!= 0:\n        print(0)\n        return\n    if n == 1:\n        print(0)\n        return\n\n    if n == 2:\n        print(a[0], a[1])\n        return\n    k = (n // 2)\n    cnt = 0\n    for i in range(k - 1):\n        cnt += (a[i] * a[k - i - 1])\n    print(cnt)\n    return\n\nsolution(sys.stdin.read())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n//2\n    res = 0\n    i = 1\n    while i < n:\n        res += 1\n        if i % 2 == 0:\n            i += 1\n        else:\n            i += 2\n    return str(res)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # first line contains number of hours per day\n    n = int(stdin.split()[0])\n    # second line contains n integer numbers\n    rest = list(map(int, stdin.split()[1]))\n    count = 0\n\n    while sum(rest)!= 0:\n        if sum(rest) == 1:\n            count += 1\n            rest = list(map(int, stdin.split()[1]))\n        else:\n            rest = list(map(int, stdin.split()[1]))\n\n    return str(count)\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    schedule = list(map(int, stdin.strip().split()))\n    rest_start, rest_end = -1, -1\n    for i in range(n - 1):\n        if schedule[i] == 1:\n            if rest_start == -1:\n                rest_start = i\n            elif rest_end == -1:\n                rest_end = i\n        if rest_start!= -1 and rest_end!= -1:\n            break\n    print(max(rest_end - rest_start + 1, 0))\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a = lines[1].split()\n    \n    # create output\n    count = 0\n    \n    # create array of days\n    days = [0] * (n+1)\n    \n    # loop through days\n    for i in range(1, len(days)):\n        \n        # if we are in a working hour\n        if days[i-1] == 0:\n            days[i] = 1\n            count += 1\n        \n        # if we are in a rest hour\n        else:\n            days[i] = 0\n    \n    return str(count)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hrs = list(map(int, stdin.split()))\n    rest = 0\n    days = 1\n    for hour in hrs:\n        if hour == 1:\n            rest += 1\n        else:\n            rest = 0\n        if rest > 0 and rest % days!= 0:\n            days += 1\n    return days\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    current_day = 1\n    working = 0\n    rest = 0\n    for hour in range(n):\n        working = 0 if arr[hour] else 1\n        if working!= rest:\n            rest = working\n            if working:\n                current_day += 1\n    return str(current_day)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 0 1 0 1\n   ... ''')\n    '2'\n    >>> solution('''6\n   ... 0 1 0 1 1 0\n   ... ''')\n    '3'\n    >>> solution('''7\n   ... 1 0 1 1 1 0 1\n   ... ''')\n    '3'\n    >>> solution('''3\n   ... 0 0 0\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin)\n    schedule = stdin.split()\n    max_rest = 0\n    current_rest = 0\n    for i in range(n):\n        if schedule[i] == '0':\n            current_rest += 1\n            if current_rest > max_rest:\n                max_rest = current_rest\n        else:\n            current_rest = 0\n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(lambda x: int(x), stdin.split()))\n    s = sorted(s)\n    print(s)\n    print(s[n-1])\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *rest = stdin.split()\n    rest = list(map(int, rest))\n    while rest:\n        l = rest.pop()\n        r = rest.pop()\n        rest.append(l)\n        rest.append(r)\n    return str(rest.pop())\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, *rests = map(int, stdin.split())\n    max_rests = 0\n    current_rests = 0\n    for rest in rests:\n        if rest == 0:\n            current_rests += 1\n        else:\n            if max_rests < current_rests:\n                max_rests = current_rests\n            current_rests = 0\n    return max_rests\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(line) - line.count(1) for line in stdin.splitlines()))"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    N_1: int = N-1\n    N_2: int = N-2\n    N_3: int = N-3\n    \n    for i in range(N):\n        if N == N_1:\n            print('{}'.format(N_1))\n        elif N == N_2:\n            print('{}'.format(N_2))\n        elif N == N_3:\n            print('{}'.format(N_3))\n        else:\n            print('{}'.format(N))\nsolution(input())"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n\n    # puzzle_input = stdin\n    # puzzle_input = \"1\"\n    # puzzle_input = \"9\"\n    # puzzle_input = \"5\"\n    # puzzle_input = \"13\"\n    # puzzle_input = \"15\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \"19\"\n    # puzzle_input = \"16\"\n    # puzzle_input = \""
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    max_mountain = 8848\n    max_boardgame = 958\n    max_competition = 12766\n    max_nile = 6695\n    max_highest_peak = 8848\n    max_air = 1100\n    max_helga = 31962\n    max_hilo = 807\n    max_hotel = 43744\n    max_heights = {\n        1: 8848,\n        2: 958,\n        3: 12766,\n        4: 6695,\n        5: 31962,\n        6: 807,\n        7: 43744\n    }\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_mountain:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_boardgame:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_competition:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_nile:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_highest_peak:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_air:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_helga:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_hilo:\n            answer = max_heights.get(i)\n    for i in range(1, max_air + 1):\n        if max_heights.get(i) > max_hotel:\n            answer = max_heights.get(i)\n    return str(answer)\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = int(stdin)\n    s = \"\"\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(6*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(6*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(2*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(8*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'\n    s = s + str(4*c) + '\\n'"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(' ')\n    stdin = list(map(int, stdin))\n    return max(stdin)\n\nprint(solution(\"1\"))\nprint(solution(\"7\"))\nprint(solution(\"5 6 7 8 9 10 11 12\"))"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = int(stdin)\n    return str(inp**0.5)"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    lines = []\n    for line in stdin.split(\"\\n\"):\n        lines.append(line.split())\n    count = 0\n    for line in lines:\n        count += 1 if line[1] == \"hard\" else 0\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cheese_types = {}\n    cheese_names = []\n    for line in stdin.splitlines():\n        cheese_name, cheese_type = line.split()\n        cheese_names.append(cheese_name)\n        if cheese_type not in cheese_types:\n            cheese_types[cheese_type] = set()\n        cheese_types[cheese_type].add(cheese_name)\n    output = 0\n    cheese_types[\"soft\"] = set(cheese_names)\n    cheese_types[\"hard\"] = set(cheese_names)\n    print(cheese_types)\n    for type_name in cheese_types.keys():\n        for cheese_name in cheese_types[type_name]:\n            output += 1\n    return output\nsolution(input())\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cheese_dict = {}\n    for i in range(N):\n        name, cheese_type = stdin.split()\n        if name not in cheese_dict:\n            cheese_dict[name] = 1\n        else:\n            cheese_dict[name] += 1\n\n    cheese_dict = sorted(cheese_dict.items(), key=lambda x: (-x[1], x[0]))\n    print(cheese_dict)\n    return cheese_dict[0][0]\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum([len(set([cheese_name.split()[0] for cheese_name in line.split()])) == 1 for line in stdin.split('\\n')])\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = stdin.splitlines()\n    cheeses = [cheese.split() for cheese in cheeses]\n    cheeses = list(set([cheese for cheese in cheeses]))\n    cheeses = sorted(cheeses, key=lambda x: x[1])\n    return len(cheeses)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    dct = dict()\n    for line in stdin.split(\"\\n\"):\n        cheese = line.split(\" \")\n        dct[cheese[1]] = cheese[0]\n    return dct\n\nsolution(\n    'brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard')\n'''\n\nimport sys\n\nsys.setrecursionlimit(10**8)\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 if e.find(\"hard\") >= 0 else 0 for e in stdin.splitlines())\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    cheese_map = {}\n    for i in range(N):\n        cheese_map[i] = stdin.strip().split()\n    return cheese_map\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    n = int(stdin)\n    for i in range(n):\n        cheese, cheese_type = stdin.split()\n        cheeses[cheese] = cheese_type\n    cheese_types = {\n        \"soft\": {\n            \"brie\": 0,\n            \"camembert\": 0,\n            \"feta\": 0,\n            \"goat\": 0,\n            \"muenster\": 0,\n            \"asiago\": 0,\n            \"cheddar\": 0,\n            \"gouda\": 0,\n            \"swiss\": 0\n        },\n        \"hard\": {\n            \"parmesan\": 0,\n            \"emmental\": 0,\n            \"edam\": 0,\n            \"colby\": 0,\n            \"gruyere\": 0,\n            \"asiago\": 0\n        }\n    }\n    for cheese in cheeses:\n        if cheeses[cheese] == \"soft\":\n            cheese_types[\"soft\"][cheese] += 1\n        elif cheeses[cheese] == \"hard\":\n            cheese_types[\"hard\"][cheese] += 1\n    min_cheese = float(\"inf\")\n    for type_cheese in cheese_types[\"soft\"]:\n        if cheese_types[\"soft\"][type_cheese] < min_cheese:\n            min_cheese = cheese_types[\"soft\"][type_cheese]\n    result = 0\n    for type_cheese in cheese_types[\"soft\"]:\n        if cheese_types[\"soft\"][type_cheese] == min_cheese:\n            result += 1\n    return result"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(a[0], a[-1] + 1):\n        c.append((i + b[i % len(b)]))\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(len(b)):\n        c.append(b[i] + a[i])\n    c.sort()\n    print(' '.join(map(str, c)))\n    return None\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    b = b[::-1]\n    print(a)\n    print(b)\n    for i in range(len(a)):\n        print(a[i], b[i])\n        if a[i] < b[i]:\n            b[i] = (a[i] + b[i]) % len(a)\n    print(b)\n    return \" \".join(map(str, b))\n\n\nprint(solution(\"7 2 5 1 5 3 4 3\"))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = []\n    # print(a, b)\n    for i in range(n):\n        c.append(a[(i + b[i]) % n] + b[i])\n    return''.join(map(str, c))\n\nprint(solution(input()))"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    b = list(map(int, stdin.split()))\n    b = b[1:]\n\n    print(*[(a[i] + b[i]) % n for i in range(n)], sep=' ')\n    return''.join(map(str, a)) +'' +''.join(map(str, b))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[1]))\n    b = list(map(int, stdin[2]))\n    c = []\n    # left = a[:]\n    # right = b[:]\n    for i in range(len(b)):\n        c.append(a[b[i]]+b[i])\n    # c = max(left)\n    # c = min(right)\n    print(*c)\n    # for i in range(len(a)):\n    #     c.append(a[i]+b[i])\n    return c\n\nsolution(\"Input\")\n\"\"\"\na = list(map(int, stdin.split()))[1]\nb = list(map(int, stdin.split()))[2]\nc = []\nfor i in range(len(b)):\n    c.append(a[b[i]]+b[i])\n\nprint(*c)"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    b = sorted(list(map(int, stdin.split()[1:])))\n    c = []\n    for i in b:\n        c.append((a[i % n] + b[i % n]) % n)\n    return \" \".join([str(i) for i in c])\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    n = a[0]\n    a = a[1:]\n\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n\n    c.sort()\n    print(*c)\n\n\nsolution(input())\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin.strip()\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    c = a + b\n    c.sort()\n    print(\" \".join(map(str, c)))\n    return \" \".join(map(str, c))\n\nsolution(\"7\")\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin.replace('\\n',''))\n    return stdin.replace('\\n','')"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    count = 0\n    for x in stdin.split(\"\\n\"):\n        if int(x) == 0:\n            count += 1\n        else:\n            count -= 1\n    return '1' * count\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n\n    for i in range(n):\n        for j in range(n):\n            if stdin[i] == stdin[j]:\n                for k in range(n):\n                    if stdin[i]!= stdin[k] and stdin[j]!= stdin[k]:\n                        stdin[k] = 0\n    return \"\".join(map(str, stdin))\n\nprint(solution(\"0\" * 100))\nprint(solution(\"1\" * 100))\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        if int(line) == 0:\n            return \"0\"\n        elif int(line) == 1:\n            return \"1\"\n\n\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0, 4):\n        print(stdin[i])\n    return \"\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.strip().split(\"\\n\")\n    return str(int(stdin_list[0]) and int(stdin_list[1]) and int(stdin_list[2]) and int(stdin_list[3]))"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Return the answer as a single digit 0 or 1\n    return str(int(stdin))\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return answer as a boolean\n    \"\"\"\n    return stdin.strip()\n    "
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(' ')\n    takahashi_x = float(input_data[0])\n    takahashi_y = float(input_data[1])\n    takahashi_v = float(input_data[2])\n    aoki_x = takahashi_x + takahashi_v * takahashi_y / 1000\n    aoki_y = takahashi_y - takahashi_v * takahashi_x / 1000\n    aoki_v = takahashi_v + (aoki_x - takahashi_x) / (aoki_y - takahashi_y) * 1000\n    return 'Yes' if aoki_x >= takahashi_x and aoki_y >= takahashi_y else 'No'\n\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    D, T, S = map(int, lines[0].split())\n    return ('Yes' if D >= (T * S) else 'No')\nprint(solution(input()))"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if takahashi_arrives() else \"No\"\n\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin.split()[1]) <= int(stdin.split()[0]) / int(stdin.split()[2]) <= int(stdin.split()[1]) + int(stdin.split()[2]) else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    takahashi = 1000 - d\n    aoki = takahashi / s\n    return \"Yes\" if aoki > 0 else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (d, t, s) = stdin.split(' ')\n    return 'Yes' if int(d) < int(t) + int(s) else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (D, T, S) = stdin.split()\n    return \"Yes\" if int(D) <= int(T) and int(T) <= int(S) <= int(D) else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t, s = list(map(int, stdin.split()))\n    d = x\n    t = t\n    s = s\n    while d >= z:\n        d = d - (s * (t / 60))\n        t = t - 60\n    if d <= x:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [d, t, s] = stdin.split(' ')\n    D = int(d)\n    T = int(t)\n    S = int(s)\n    # if T >= D:\n    #     print('No')\n    #     return\n    # if S <= D*(T/D):\n    #     print('Yes')\n    #     return\n    if D <= T:\n        print('Yes')\n        return\n    if D >= T:\n        if S < D * (T - D):\n            print('Yes')\n            return\n        if S > D * (T - D):\n            print('No')\n            return\n        if S == D * (T - D):\n            print('Yes')\n            return"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    # O(T) = O(1)\n    time = T // S\n    # O(D) = O(1)\n    distance = D // S\n    # O(1)\n    if time <= distance:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")\n    A = [list(map(int, A[i].split())) for i in range(len(A))]\n    N = int(stdin.split()[-1])\n    A = stdin.split()\n    M = {}\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] == A[j]:\n                M[A[i]] = A[i], j\n    numbers = []\n    for _ in range(N):\n        numbers.append(int(stdin.split()[-1]))\n    for _ in range(N):\n        for i in range(len(numbers)):\n            numbers[i] = numbers[i] - 1\n            if numbers[i] == 0:\n                numbers[i] = 10\n            else:\n                numbers[i] = numbers[i] * 10\n        numbers = sorted(numbers, reverse=True)\n        if numbers not in M.values():\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[1])\n    values = [int(x) for x in stdin.split()[2:]]\n\n    for i in range(N):\n        if i == 0:\n            values.sort()\n        else:\n            values.sort(reverse=True)\n\n    for i in range(N):\n        if values[i]!= i + 1:\n            return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in stdin.split():\n        a.append(int(i))\n    N = int(stdin.split()[-1])\n    b = [int(stdin.split()[i]) for i in range(N)]\n    for i in range(1, len(a)):\n        for j in range(i+1, len(a)):\n            if a[i-1] == a[j-1] or a[i] == a[j]:\n                return 'Yes'\n    diag1 = []\n    diag2 = []\n    diag3 = []\n    for i in range(1, len(a)):\n        if i%3 == 1:\n            diag1.append(a[i])\n        elif i%3 == 2:\n            diag2.append(a[i])\n        else:\n            diag3.append(a[i])\n    if diag1 == b or diag2 == b or diag3 == b:\n        return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = [[int(i) for i in stdin.strip().split('\\n')]]\n    for i in range(1, 4):\n        A.append([int(i) for i in stdin.strip().split('\\n')[i]])\n    for i in range(3):\n        A.append([int(i) for i in stdin.strip().split('\\n')[i+4]])\n    N = int(stdin.strip().split('\\n')[-1])\n    board = [[False for j in range(4)] for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            board[i][j] = int(stdin.strip().split('\\n')[i + j + 8])\n    return \"Yes\" if bingo(N, A, board) else \"No\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    N = int(A.pop(0))\n    b = list(map(int, A))\n    b.sort()\n    # b = list(map(int, input().split()))\n    # N = int(input())\n    # b = list(map(int, input().split()))\n    # N = int(input())\n    if b[0] == b[-1]:\n        return 'Yes'\n    row = 0\n    col = 0\n    diag = 0\n    for i in range(N):\n        if b[i] == row + col + diag:\n            row += 1\n            col += 1\n            diag += 1\n        else:\n            row = 0\n            col = 0\n            diag = 0\n    if row + col + diag == N:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a.pop(0)\n    b = list(map(int, stdin.split()))\n    matrix = []\n    for i in range(3):\n        matrix.append(a[3*i:3*i+3])\n    print('Yes' if bingo(n, b, matrix) else 'No')\n    return\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [[int(i) for i in stdin[i * 3: (i + 1) * 3].split(' ')] for i in range(3)]\n    b = stdin[-3:].split(' ')\n\n    def is_valid(a, b):\n        return a in b\n\n    def is_valid_diag(a, b, c):\n        return is_valid(a, b) and is_valid(b, c) and is_valid(c, a)\n\n    for i in range(3):\n        b[i] = int(b[i])\n\n    if is_valid(A[0][0], b):\n        print('Yes')\n    elif is_valid(A[1][1], b):\n        print('Yes')\n    elif is_valid(A[2][2], b):\n        print('Yes')\n    elif is_valid_diag(A[0][0], A[1][1], A[2][2]):\n        print('Yes')\n    else:\n        print('No')\n\n    return 'Yes' if is_valid(A[0][0], b) else 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = [list(map(int, stdin.split())) for _ in range(3)]\n    N = int(stdin.split()[-1])\n\n    def cross(a: list, b: list) -> bool:\n        for ai, bi in zip(a, b):\n            if ai!= bi:\n                return False\n        return True\n\n    def diagonal(a: list, b: list) -> bool:\n        return cross(a, b) and cross(b, a)\n\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == N:\n                if diagonal(A[:i], A[i+1:]):\n                    if diagonal(A[:, :j], A[:, j+1:]):\n                        if diagonal(A[i:i+2, :j], A[i+1:i+3, j:]):\n                            return \"Yes\"\n    return \"No\"\n\nsolution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\") #, \"Yes\")\nsolution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n83\") #, \"No\")\nsolution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n83\\n84\") #, \"Yes\")"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.splitlines()\n    N = int(A.pop(0))\n    B = stdin.splitlines()\n    for i in range(len(B)):\n        B[i] = list(map(int, B[i].split()))\n\n    ans = 0\n    for i in range(len(B)):\n        for j in range(len(B[i])):\n            if A[i][j] in B[i]:\n                A[i][j] = 1\n                break\n\n    for i in range(len(A)):\n        if A[i].count(1) == 3:\n            ans = 1\n    for i in range(len(B)):\n        if sum(B[i]) == 3:\n            ans = 1\n    for i in range(len(A)):\n        if A[i].count(1) == 2 and (A[i] == B[i]).count(1) == 1:\n            ans = 1\n    for i in range(len(A)):\n        if sum(B[i]) == 2 and (A[i] == B[i]).count(1) == 1:\n            ans = 1\n\n    for i in range(len(A)):\n        if A[i].count(1) == 2 and (A[i] == B[i]).count(1) == 2:\n            ans = 1\n    for i in range(len(A)):\n        if sum(B[i]) == 2 and (A[i] == B[i]).count(1) == 2:\n            ans = 1\n\n    for i in range(len(A)):\n        if A[i].count(1) == 3 and (A[i] == B[i]).count(1) == 3:\n            ans = 1\n    for i in range(len(A)):\n        if sum(B[i]) == 3 and (A[i] == B[i]).count(1) == 3:\n            ans = 1\n\n    for i in range(len(A)):\n        if A[i].count(1) == 3:\n            ans = 1\n    for i in range(len(B)):\n        if sum(B[i]) == 3:\n            ans = 1\n    for i in range(len(A)):\n        if A[i].count(1) == 2 and (A[i] == B[i]).count(1) == 1:\n            ans = 1\n    for i in range(len(A)):\n        if sum(B[i]) == 2 and (A[i] == B[i]).count(1) == 1:\n            ans = 1\n\n    for i in range(len(A)):\n        if A[i].count(1) == 2 and (A[i] == B[i]).count(1) == 2:\n            ans = 1\n    for i in range(len(A)):\n        if sum(B[i]) == 2 and (A[i] == B[i]).count(1) == 2:\n            ans = 1\n\n    return \"Yes\" if ans == 1 else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(n) for n in stdin.split(\"\\n\")]\n    N = int(stdin.split()[-1])\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == N:\n                for k in range(3):\n                    if i!= k and A[k][j] == N:\n                        return \"Yes\"\n                for k in range(3):\n                    if j!= k and A[i][k] == N:\n                        return \"Yes\"\n                if i!= j and A[i][j] == N:\n                    for k in range(3):\n                        if k!= i and k!= j and A[k][j] == N:\n                            return \"Yes\"\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == N:\n                for k in range(3):\n                    if i!= k and A[i][k] == N:\n                        return \"Yes\"\n                for k in range(3):\n                    if j!= k and A[k][j] == N:\n                        return \"Yes\"\n                if i!= j and A[i][j] == N:\n                    for k in range(3):\n                        if k!= i and k!= j and A[k][j] == N:\n                            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n\n    max_days = -1\n    current_day = 0\n    while True:\n        if current_day + assignments[0] > N:\n            break\n        for i in range(1, len(assignments)):\n            if current_day + assignments[i] > N:\n                break\n            current_day += assignments[i]\n        if current_day >= N:\n            max_days = max(max_days, current_day)\n        current_day += 1\n    return max_days\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = map(int, stdin.split())\n    \n    assignment = list(map(int, stdin.split()))\n    \n    # sort assignment\n    assignment = sorted(assignment, key = lambda x: x)\n    \n    # count days for each assignments\n    days = 1\n    for i in range(1, len(assignment)):\n        if assignment[i] < assignment[i-1]:\n            days += 1\n        else:\n            break\n    \n    return str(days)\n    "
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    assignments.sort()\n    for i in range(M):\n        if i == 0:\n            if assignments[i] >= 5:\n                print(5)\n            else:\n                print(-1)\n        else:\n            if assignments[i] >= 5 and assignments[i-1] < 5:\n                print(5)\n            elif assignments[i] >= 5 and assignments[i-1] >= 5:\n                print(-1)\n            elif assignments[i] < 5:\n                print(-1)\n    return ''.join(str(i) for i in assignments)"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = tuple(map(int, stdin.split()))\n    d = tuple(map(int, stdin.split()))\n    dp = [0] * (m + 1)\n    for i in range(n):\n        dp[1] = 1\n        for j in range(2, m + 1):\n            if d[i] <= j:\n                dp[j] = max(dp[j], dp[j - d[i]] + 1)\n    print(dp[-1])\n    return \"\" if dp[-1] == 0 else \"-1\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    assignments = list(map(int, stdin.split()))\n    days_taken = 0\n    while len(assignments) > 0:\n        first_assignment = assignments.pop(0)\n        if days_taken + first_assignment <= N:\n            days_taken += first_assignment\n        else:\n            assignments.append(first_assignment)\n            days_taken = N\n\n    if days_taken == N:\n        return \"30\"\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, m, *a = stdin.split()\n    a = list(map(int, a))\n    return str(max(max(a) - min(a), -1))\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    assignments.sort()\n    ans = 0\n    days_per_day = 0\n    for assignment in assignments:\n        days_per_day += assignment\n        ans = max(days_per_day, ans)\n    return str(ans)"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n\n    if n < 1 or m < 1 or n > 10**6 or m > 10**4:\n        return -1\n\n    day = 0\n    max_day = 0\n    days = []\n\n    for i in range(n):\n        if day >= m:\n            break\n        if day >= m:\n            max_day = max(max_day, i - 1)\n            day = 0\n\n        if day <= assignments[i]:\n            day = day + 1\n            days.append(day)\n\n    if len(days) == 0:\n        return -1\n    return max(days) + max_day\n\nprint(solution(input()))\n'''\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return -1 if not stdin else str(int(stdin[0]) - int(stdin[1]))\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, num_assignments, days = stdin.split()\n    num_assignments, days = int(num_assignments), int(days)\n    assignments = stdin.split()\n\n    # Print the number of assignments he can finish in a day\n    # Use the binary search to find the left and right limit of the binary search range for days\n    # If the number of assignments is less than or equal to the number of days, it is possible to finish all assignments during the vacation\n    # Else the number of assignments is more than the number of days\n    lower_bound = 1\n    upper_bound = days\n    while lower_bound <= upper_bound:\n        middle = (lower_bound + upper_bound) // 2\n        num_assignments_in_day = sum(1 for day in range(middle) if day in assignments)\n        if num_assignments_in_day <= days:\n            lower_bound = middle + 1\n        else:\n            upper_bound = middle - 1\n    return lower_bound - 1 if lower_bound > 1 else -1\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.split()[0])\n    N = int(stdin.split()[1])\n    \n    happy = []\n\n    for i in range(1, 101):\n        if D == 0:\n            happy.append(i)\n        elif D == 1:\n            if i % 100 == 0:\n                happy.append(i)\n        else:\n            if i % 100!= 0:\n                happy.append(i)\n        if len(happy) == N:\n            break\n\n    print(happy[-1])"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # for each number in the range of D (0,1,2)\n    for number in range(int(stdin[1])):\n        \n        # convert the input into an integer\n        num_in_str = stdin[0]\n        num = int(num_in_str)\n        \n        # check if the number is divisible by 100 exactly D times\n        if num % 100 == 0:\n            \n            # if it is, print the number\n            print(num)"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        for i in range(1, N + 1):\n            if i % 100 == 0:\n                print(i)\n        return str(N)\n    elif D == 2:\n        for i in range(1, N + 1):\n            if i % 100 == 0 or i % 100 == 1:\n                print(i)\n        return str(N)\n    else:\n        print(0)\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        D = int(stdin.split()[0])\n        N = int(stdin.split()[1])\n        print(((N-1)//(D-1)) + 1)\n    except:\n        print('Invalid input')\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = stdin.split()\n    N = int(N)\n    D = int(D)\n    \n    # Find the factors of N.\n    factors = []\n    for i in range(1, N+1):\n        if N % i == 0:\n            factors.append(i)\n    \n    # For the case where D = 0, find the factors of the smallest prime factor.\n    if D == 0:\n        for i in range(1, len(factors)):\n            if factors[i] == factors[i-1]:\n                return str(factors[i-1])\n    \n    # Find the factors of the smallest factor that can be divided by D.\n    min_factor = factors[0]\n    for i in range(1, len(factors)):\n        if factors[i] % min_factor == 0:\n            min_factor = factors[i]\n        else:\n            break\n    \n    # Return the answer.\n    return str(min_factor*D)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, D, N = stdin.split()\n    D = int(D)\n    N = int(N)\n    counter = 0\n    ans = -1\n    for i in range(1, N + 1):\n        if i % D == 0:\n            counter += 1\n        if counter == N:\n            ans = i\n            break\n    return str(ans)\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, n = list(map(int, stdin.split()))\n    \n    res = list()\n    for i in range(1, n + 1):\n        if d == 0 or i % 100 == 0:\n            res.append(i)\n    print(max(res))\n    return max(res)\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d = stdin.split(\" \")[0]\n    n = stdin.split(\" \")[1]\n    if d == \"0\":\n        return \"1\"\n    if d == \"1\":\n        if int(n) % 100 == 0:\n            return int(n)\n        else:\n            return int(n) - 1\n    if d == \"2\":\n        if int(n) % 100 == 0 or int(n) % 100 == 1:\n            return int(n)\n        else:\n            return int(n) - 1"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    D, N = stdin\n    \n    if D == 0:\n        return str(N)\n    \n    min_num = 0\n    max_num = N\n    \n    while min_num + 1 < max_num:\n        mid = int((min_num + max_num)/2)\n        cnt = 0\n        for i in range(1, mid):\n            if mid % i == 0:\n                cnt += 1\n                \n        if cnt < D:\n            min_num = mid\n        else:\n            max_num = mid\n            \n    return str(min_num)\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(\" \")\n    D = int(input_str[0])\n    N = int(input_str[1])\n    if D == 0 or N == 1:\n        return 1\n    elif D == 1 or D == 2:\n        return N\n    else:\n        return N - 1"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    max_divisor = 1\n    for i in A:\n        max_divisor = max(max_divisor, i)\n    return max_divisor\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")[0]\n    n = int(line)\n    arr = stdin.split(\"\\n\")[1].split(\" \")\n    a = int(arr[0])\n    b = int(arr[1])\n    c = int(arr[2])\n    arr.remove(arr[0])\n    arr.remove(arr[0])\n    arr.remove(arr[0])\n    arr = sorted(arr, reverse=True)\n    gcd = 1\n    for i in arr:\n        gcd = gcd * i\n    print(gcd)\n    return gcd\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return str(max(gcd(*a)))"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    s = set(a)\n    if len(s) == 1:\n        return str(s.pop())\n    l = sorted(a, reverse=True)\n    return str(l[0])\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split(' ')))\n    maxGCD = max(A)\n    for i in range(N):\n        A[i] -= 1\n        maxGCD = max(maxGCD, max(A))\n        A[i] += 1\n    return str(maxGCD)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.strip().split())\n    return str(max(gcd(*A), *sorted(A)))"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 10**9\n    for i in range(1, n+1):\n        ans = min(ans, gcd(i, ans))\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = stdin.split()\n    if n == 1:\n        return str(max(data))\n    data = map(int, data)\n    data = sorted(data, key=lambda x: x)\n    print(data)\n    divisor = data[0]\n    for i in range(1, len(data)):\n        if divisor % data[i] == 0:\n            divisor = divisor // data[i]\n        else:\n            divisor = max(data[i], divisor)\n    return str(divisor)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.strip().split()\n    r = 0\n    for i in a:\n        r = max(r, int(i)//2)\n    return str(r)"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    al = []\n    for i in range(1, n+1):\n        al.append(i)\n    while n!= 1:\n        if n%2 == 0:\n            n = n//2\n        else:\n            n = n//2 + n%2\n        if n%2 == 0:\n            al.remove(n)\n    al.remove(1)\n    return str(max(al))\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    res = ''\n    for i in range(1, n + 1):\n        if a[i - 1] == i:\n            res += str(i)\n            res +=''\n    return res"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(' '.join(map(str, a)))\n    return ''\n\nsolution(input())"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *args = stdin.split(\"\\n\")\n    N = int(args[0])\n    A = args[1:]\n    A.sort(reverse=True)\n    return \"\\n\".join(str(i) for i in A)"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin.pop(0))\n    student_list = list(map(int, stdin))\n\n    # create a hash table for student num and classroom num\n    student_record = {}\n    for record in student_list:\n        if record not in student_record:\n            student_record[record] = 1\n        else:\n            student_record[record] += 1\n\n    # sort student record by student num and classroom num\n    # and return the result\n    sorted_student_record = sorted(student_record.items(),\n                                   key=lambda x: (x[0], x[1]))\n    return''.join(map(str, list(map(lambda x: x[0], sorted_student_record))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    student_numbers = list(map(int, stdin[1:]))\n    student_numbers.sort()\n    return \"\\n\".join(str(x) for x in student_numbers)\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin.split(\" \")\n\n    # A.sort()\n    # return \" \".join(A)\n\n    num = []\n    for i in range(1, N + 1):\n        if int(i) in A:\n            num.append(i)\n\n    num.sort()\n    for i in range(len(num)):\n        print(num[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = \"1 2 3 4 5\"\n    return stdin.split()\n    '''\n    stdin = input()\n    N = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1:]))\n\n    students.sort(key=lambda x: x - 1)\n    return''.join(map(str, students))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        raise ValueError\n    \n    input_data = stdin.rstrip().split()\n    input_n = input_data[0]\n    input_a = input_data[1]\n\n    input_a = [int(x) for x in input_a.split()]\n\n    input_a.sort()\n    output = ''\n    for i in range(len(input_a)):\n        output += str(input_a[i]) + \" \"\n    return output[:-1]\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_list = [int(i) for i in stdin.split()]\n    # A_list.sort()\n    # print(A_list)\n    # print(N)\n    count = 1\n    while count < len(A_list):\n        for i in range(count, len(A_list)):\n            if A_list[i] > A_list[i-1]:\n                temp = A_list[i]\n                A_list[i] = A_list[i-1]\n                A_list[i-1] = temp\n        count += 1\n    return \" \".join([str(i) for i in A_list])"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    students = stdin[1:]\n    students.sort()\n    students_by_time = []\n    for student in students:\n        students_by_time.append(int(student))\n    return''.join([str(i) for i in students_by_time])\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    result = \"\"\n    while X >= 10:\n        result = str(X%10 + (result*10 + 10))\n        X //= 10\n    result = str(X%10 + (result*10))\n    return result\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if (X // A) + (X // (A * 10)) + (X // (A * 100)) + (X // (A * 10 ** 3)) + (X // (A * 10 ** 4)) + (X // (A * 10 ** 5)) + (X // (A * 10 ** 6)) + (X // (A * 10 ** 7)) + (X // (A * 10 ** 8)) + (X // (A * 10 ** 9)) < X:\n        return 0\n    else:\n        X -= A * (X // A)\n        X -= (X // (A * 10)) * (A * 10)\n        X -= (X // (A * 100)) * (A * 100)\n        X -= (X // (A * 10 ** 3)) * (A * 10 ** 3)\n        X -= (X // (A * 10 ** 4)) * (A * 10 ** 4)\n        X -= (X // (A * 10 ** 5)) * (A * 10 ** 5)\n        X -= (X // (A * 10 ** 6)) * (A * 10 ** 6)\n        X -= (X // (A * 10 ** 7)) * (A * 10 ** 7)\n        X -= (X // (A * 10 ** 8)) * (A * 10 ** 8)\n        X -= (X // (A * 10 ** 9)) * (A * 10 ** 9)\n        if X == 0:\n            return A * 10 ** 9\n        if X < (A * 10 ** 9):\n            return A * 10 ** 9\n        else:\n            return X\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    res = max(range(1, 10**9+1), key=lambda x: x*x*x*x + a*x + b*x + x)\n    print(res if res >= x else 0)\n\nsolution('10 7 100')\nsolution('10 10 5')\nsolution('100 100 10')"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, X) = stdin.split()\n    A, B = int(A), int(B)\n    X = int(X)\n    ans = X * A\n    for digit in range(1, len(str(X)) + 1):\n        if digit * A <= X:\n            ans += (digit * A) * 10 ** (len(str(X)) - digit)\n            ans += (digit * B) * digit\n    return str(ans)\n\nprint(solution(\"10 7 100\"))\nprint(solution(\"1 1 10\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"1 1 1 1\"))\nprint(solution(\"1 1 1 1 1\"))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, X] = stdin.split()\n    A = int(A)\n    B = int(B)\n    X = int(X)\n    # import pdb; pdb.set_trace()\n    if A == 0 and B == 0:\n        return 0\n    elif A == 0:\n        return (B * 10 ** (X - 1) + 1) * (B * 10 ** (X - 1))\n    elif B == 0:\n        return (A * 10 ** (X - 1) + 1) * (A * 10 ** (X - 1))\n    else:\n        N = 10 ** X - 1\n        if N % A!= 0:\n            return 0\n        else:\n            return ((N // A) + 1) * A + ((N // A) + 1) * (B * 10 ** (X - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    min_buy = 0\n    max_buy = 1\n    while min_buy < max_buy:\n        mid = (min_buy + max_buy) // 2\n        if mid < 10:\n            break\n        sold = mid * A + mid * B\n        # print(f\"{mid} {sold}\")\n        if sold < X:\n            min_buy = mid + 1\n        elif sold == X:\n            return str(mid)\n        else:\n            max_buy = mid\n    return str(0)"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split(\" \"))\n    dp = [0] * (X+1)\n    dp[1] = A\n    dp[2] = A+B\n    for i in range(3, X+1):\n        dp[i] = max(dp[i-2] + (10**(i-2)), dp[i-1] + (10**(i-1)))\n    return str(dp[X]) if dp[X]!= 0 else \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.split()\n    A, B, X = int(A), int(B), int(X)\n    def to_decimal(num, base):\n        return num if num < 10 else to_decimal(num // base, base) + num % base\n    decimal_A, decimal_B = to_decimal(A, 10), to_decimal(B, 10)\n    digit_A, digit_B = 0, 0\n    if decimal_A >= decimal_B:\n        decimal_A = decimal_A - decimal_B\n    else:\n        digit_B, decimal_B = 10, decimal_B - decimal_A\n        decimal_A = 10\n    result = 0\n    while decimal_A >= 0:\n        result = result * 10 + decimal_A % 10\n        decimal_A //= 10\n        if decimal_A == decimal_B:\n            digit_A += 1\n            decimal_A //= 10\n    result = result * 10 ** digit_B * digit_A\n    return str(result) if result >= X else '0'\n\nA = 10\nB = 7\nX = 100\nstdin = f'{A} {B} {X}'\nprint(solution(stdin))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    a, b, x = map(int, input_data.split())\n    dp_list = [0]\n    for i in range(1, 10**9+1):\n        dp_list.append((dp_list[i-1] + x) * i)\n    for i in range(a, 10**9+1):\n        if dp_list[i] >= x:\n            print(i)\n            return\n    print(0)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    # A = 1\n    # B = 1\n    # X = 10^18\n    digits_in_number = 0\n    if A < 0 or X < 0:\n        return 0\n    while A > 0:\n        digits_in_number += 1\n        A //= 10\n    if digits_in_number > X:\n        return 0\n    if digits_in_number == X:\n        return A + B * X\n    for i in range(digits_in_number, X):\n        A *= 10\n        A += B\n    return A + B * X\n\nprint(solution('10 7 100'))\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    i = 0\n    while i < N:\n        count = 0\n        for j in range(i, N):\n            if i == 0 or h[i-1] < h[j]:\n                count += 1\n            if count >= K:\n                break\n        if count >= K:\n            break\n        i += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    _, K = stdin.split()\n    K = int(K)\n    friends = stdin.strip().split()\n\n    friends = sorted(map(int, friends))\n    left_bound = 0\n    right_bound = len(friends) - 1\n    total = 0\n\n    while left_bound <= right_bound:\n        total += 1\n        if friends[left_bound] + friends[right_bound] <= K:\n            left_bound += 1\n        right_bound -= 1\n    return total\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    friend_heights = [int(x) for x in stdin.split()]\n    friend_heights.sort()\n    left, right = 0, friend_heights[-1] - friend_heights[0]\n    while left <= right:\n        mid = left + (right - left) // 2\n        if K <= mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    return''.join([f'{i+1}' for i in range(int(n)) if float(k) >= float(n)*float(i)])"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code will be tested with random inputs from STDIN and\n    will be given STDOUT. Don't use it directly.\n    \"\"\"\n    # Get Inputs\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    # count of h_i's who can ride the roller coaster\n    res = 0\n    i = 0\n    while i < N:\n        if K < h[i]:\n            break\n        if K >= h[i]:\n            res += 1\n        i += 1\n\n    return str(res)\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h = sorted(h, key=lambda x: x, reverse=True)\n    count = 0\n    for i in range(N):\n        if h[i] <= K:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if K == 1:\n        return \"1\"\n    elif N == K:\n        return \"0\"\n    else:\n        return str(N - K + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.strip().split()))\n    h = list(map(int, stdin.strip().split()))\n    return str(len(set(range(1, N)) - set(h)))"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # remove the extra spaces\n    line = stdin.replace(' ', '')\n\n    # convert string to integers\n    arr = list(map(int, line.split(' ')))\n\n    # sort the array\n    arr.sort()\n\n    # initialize number of friends\n    n = len(arr)\n\n    # initialize height\n    h = arr[0]\n\n    # initialize count\n    count = 0\n\n    # loop through the array\n    for i in range(1, n):\n        # if the current height is less than the next height, then we can ride the roller coaster\n        if h < arr[i]:\n            # increment count\n            count += 1\n            # update height\n            h = arr[i]\n            # break from the loop\n            break\n\n    # return count\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *h = [int(v) for v in stdin.split()]\n    # print(n, k, h)\n    heights = sorted(h, reverse=True)\n    # print(heights)\n    # for h_i in heights:\n    #     print(h_i)\n    #     if h_i >= k:\n    #         print(\"Y\")\n    #         break\n    # print(heights[0])\n    # print(heights[1])\n    # print(heights[2])\n    # print(heights[3])\n    # print(heights[4])\n    ans = 0\n    for h_i in heights:\n        if h_i <= k:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N < M:\n        return \"No\"\n    popular = sorted([int(i) for i in stdin.split()])\n    result = []\n    i = 0\n    while i < M:\n        item = popular[i]\n        if sum(result) / N >= 0.25 * M:\n            return \"No\"\n        result.append(item)\n        i += 1\n    return \"Yes\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    votes, n, m = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    votes = [int(i) for i in votes.split(' ')]\n    counter = Counter(votes)\n    votes = list(counter.values())\n    vote_max = max(votes)\n    votes.remove(vote_max)\n    if m >= int(vote_max / 4 * n):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    votes = list(map(int, stdin.split()))\n\n    votes.sort()\n\n    while len(votes) > 0:\n        _max = votes[-1]\n        _min = votes[0]\n        if _max >= 1 / 4 * M:\n            return \"Yes\"\n        votes = votes[_min:votes.index(_max)]\n\n    return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(stdin)\n    # nums = list(map(int, stdin.split()))\n    n, m = map(int, stdin.split())\n\n    # print(nums)\n\n    max_number = float('-inf')\n    for i in range(1, n+1):\n        max_number = max(max_number, i)\n\n    if m * max_number / n <= 1/4 * n:\n        print('Yes')\n    else:\n        print('No')\n\n\nsolution('4 1')\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    m = stdin[1]\n    votes = list(map(int, stdin[2:]))\n    \n    total = sum(votes)\n    if total == 0:\n        return \"Yes\"\n    \n    votes.sort(reverse=True)\n    votes_set = set(votes)\n    \n    if total < 1 / m * (4 * m):\n        return \"No\"\n    \n    result = []\n    \n    for i in range(n):\n        if votes[i] == votes_set.pop():\n            result.append(i+1)\n            if len(result) == m:\n                break\n        \n    if len(result) == m:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n\"\"\"\n\nn, m = list(map(int, input().split()))\nvotes = list(map(int, input().split()))\n\ntotal = sum(votes)\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    items, popularity = map(int, stdin.strip().split())\n    popular_items = []\n    votes = [0] * items\n    max_votes = sum(votes)\n    for _ in range(items):\n        item = int(input())\n        votes[item - 1] += 1\n    if max_votes >= 4 * votes[0]:\n        popular_items.append(1)\n    if max_votes >= 4 * votes[1]:\n        popular_items.append(2)\n    if max_votes >= 4 * votes[2]:\n        popular_items.append(3)\n    if max_votes >= 4 * votes[3]:\n        popular_items.append(4)\n    return 'Yes' if len(popular_items) > 0 else 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_set = set(map(int, stdin.split()))\n    res = set()\n    for a in A_set:\n        if N == sum(a <= int(r) for r in A_set) // 4:\n            res.add(\"Yes\")\n        else:\n            res.add(\"No\")\n    return \"\\n\".join(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    max_possible = sum(1 / 4 * m for i, a in enumerate(votes) if i % 4 == 0)\n    if max_possible < len(votes) / 4:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    votes = {}\n    for i in range(1, N + 1):\n        votes[i] = int(stdin)\n\n    k = 1\n    while True:\n        cnt = 0\n        for item in votes:\n            if votes[item] < (1 / k * M):\n                break\n            cnt += 1\n        if cnt >= k * M:\n            break\n        k += 1\n\n    if cnt >= k * M:\n        return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_valid_items(votes, popular_items):\n        \"\"\"\n        Gets the number of votes of each item that can be added to the popular items.\n\n        Args:\n            votes: A list of votes.\n            popular_items: The most popular items that were previously selected.\n\n        Returns:\n            An integer that is the number of items that can be added to popular_items.\n        \"\"\"\n        valid_items = {}\n        for item in popular_items:\n            valid_items[item] = 0\n\n        for vote in votes:\n            for item in popular_items:\n                valid_items[item] += vote.count(item)\n\n        max_votes = max(valid_items.values())\n        return max_votes\n\n    votes = stdin.split()\n    popular_items = sorted(votes[0].split(','))\n    popular_items = [item for item in popular_items if item in votes[1].split(',')]\n    votes = votes[1:]\n\n    print(f'There were {len(votes)} votes in total.')\n    print(f'The most popular item received {len(popular_items)} votes, and we can select it.')\n\n    valid_votes = get_valid_items(votes, popular_items)\n    if valid_votes > int(len(popular_items) * (1/4)):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns, k = stdin.split()\n    rows, columns = int(rows), int(columns)\n    k = int(k)\n\n    # Count the choices.\n    choices = 0\n    for r in range(rows + 1):\n        for c in range(columns + 1):\n            if (r + c) % 2 == 1:\n                choices += 1\n\n    # Return the answer.\n    return str(choices)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n\n    def is_black(x: int, y: int) -> bool:\n        return stdin[x][y] == '#'\n\n    def is_white(x: int, y: int) -> bool:\n        return stdin[x][y] == '.'\n\n    def has_row(x: int, y: int, row: int, black: bool) -> bool:\n        if y >= W:\n            return False\n        if black:\n            return is_black(x, y)\n        else:\n            return not is_black(x, y)\n\n    def has_col(x: int, y: int, col: int, black: bool) -> bool:\n        if x >= H:\n            return False\n        if black:\n            return is_black(x, y)\n        else:\n            return not is_black(x, y)\n\n    def has_cell(x: int, y: int, col: int, row: int, black: bool) -> bool:\n        if x < 0 or x >= H:\n            return False\n        if y < 0 or y >= W:\n            return False\n        if black:\n            return is_black(x, y)\n        else:\n            return not is_black(x, y)\n\n    def make_cell(x: int, y: int, black: bool) -> bool:\n        if black:\n            return is_white(x, y)\n        else:\n            return not is_white(x, y)\n\n    def make_row(row: int, black: bool) -> bool:\n        if black:\n            return False\n        else:\n            return True\n\n    def make_col(col: int, black: bool) -> bool:\n        if black:\n            return False\n        else:\n            return True\n\n    def get_cell(x: int, y: int) -> bool:\n        return stdin[x][y] == '#'\n\n    def get_row(row: int, black: bool) -> bool:\n        if black:\n            return False\n        else:\n            return True\n\n    def get_col(col: int, black: bool) -> bool:\n        if black:\n            return False\n        else:\n            return True\n\n    black = 0\n    white = 0\n    choices = 0\n\n    row = []\n    col = []\n    cell = []\n    for x in range(H):\n        for y in range(W):\n            if is_black(x, y):\n                black += 1\n                if has_row(x, y, row, True):\n                    row.append(x)\n                if has_col(x, y, col, True):\n                    col.append(y)\n                if has_cell(x, y, cell, True):\n                    cell.append(x)\n                    cell.append(y)\n            else:\n                white += 1\n                if has_row(x, y, row, False):\n                    row.remove(x)\n                if has_col(x, y, col, False):\n                    col.remove(y)\n                if has_cell(x, y, cell, False):\n                    cell.remove(x)\n                    cell.remove(y)\n\n    if black == 0:\n        return 0\n    elif black == K:\n        return 1\n    else:\n        for x in range(H):\n            for y in range(W):\n                if make_cell(x, y, False):\n                    choices += 1\n                if make_row(x, False):\n                    choices += 1\n                if make_col(y, False):\n                    choices += 1\n    if has_cell(x, y, cell, True):\n        choices += 1\n    if has_row(x, y, row, True):\n        choices += 1\n    if has_col(x, y, col, True):\n        choices += 1\n    return choices\n\n\nprint(solution(input()))"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = stdin.split()\n    H = int(H)\n    W = int(W)\n    K = int(K)\n\n    grid = stdin.split()\n\n    min_row = H-1\n    max_row = 0\n    for i in range(len(grid)):\n        if grid[i] == '#':\n            max_row = i\n            break\n        if i < min_row:\n            min_row = i\n\n    min_col = W-1\n    max_col = 0\n    for i in range(len(grid)):\n        if grid[i] == '#':\n            max_col = i\n            break\n        if i < min_col:\n            min_col = i\n\n    row_count = max_row - min_row + 1\n    col_count = max_col - min_col + 1\n\n    min_count = max(1, row_count + col_count - K)\n    print(min_count)\n\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = list(map(int, stdin.split()))\n    C = stdin.split(\"\\n\")\n    row_nums = set()\n    col_nums = set()\n    row_col_num_dict = {}\n    row_col_num_black_dict = {}\n    for i in range(1, H + 1):\n        row_col_num_dict[i] = []\n        row_col_num_black_dict[i] = []\n    for i in range(W):\n        row_nums.add(i)\n        row_col_num_black_dict[i] = []\n    for i in range(H):\n        for j in range(W):\n            if C[i][j] == \"#\":\n                row_col_num_black_dict[i].append(j)\n                row_col_num_black_dict[j].append(i)\n                if i not in row_nums:\n                    row_nums.add(i)\n            else:\n                row_col_num_dict[i].append(j)\n            col_nums.add(j)\n    for i in range(1, H + 1):\n        row_col_num_black_dict[i].sort()\n    for i in range(1, H + 1):\n        row_col_num_dict[i].sort()\n    res = 0\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if row_col_num_black_dict[i]:\n                if row_col_num_black_dict[i][0] < j:\n                    if row_col_num_black_dict[i][0] > j - 1:\n                        row_col_num_black_dict[i].pop(0)\n                        row_col_num_black_dict[i].append(j)\n            row_col_num_black_dict[j].sort()\n            col_row_dict = {}\n            col_row_black_dict = {}\n            for k in range(W):\n                col_row_dict[k] = []\n                col_row_black_dict[k] = []\n            for m in range(H):\n                if row_col_num_dict[m][0] < j:\n                    if row_col_num_dict[m][0] > j - 1:\n                        row_col_num_dict[m].pop(0)\n                        row_col_num_dict[m].append(j)\n            for k in range(W):\n                col_row_black_dict[k] = []\n                for m in range(H):\n                    if row_col_num_dict[m][0] == k:\n                        col_row_black_dict[k].append(m)\n            if row_col_num_black_dict[j]:\n                if row_col_num_black_dict[j][0] < i:\n                    if row_col_num_black_dict[j][0] > i - 1:\n                        row_col_num_black_dict[j].pop(0)\n                        row_col_num_black_dict[j].append(i)\n            row_col_num_black_dict[i].sort()\n            col_row_black_dict[i].sort()\n            col_row_black_dict[j].sort()\n            res += (len(col_row_black_dict[j]) + len(col_row_black_dict[i])) * len(col_row_black_dict[k])\n            res += row_col_num_black_dict[i].count(j) + row_col_num_black_dict[j].count(i)\n            res += col_row_black_dict[i].count(j) + col_row_black_dict[j].count(i)\n            res += row_col_num_black_dict[j].count(i) + row_col_num_black_dict[i].count(j)\n    return res\n\nstdin = \"\"\">2\n..#\n###\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    if h < 1 or w < 1 or k < 1 or k > min(w, h):\n        return str(0)\n    dp = [[0] * w for _ in range(h)]\n    for i in range(1, h):\n        for j in range(1, w):\n            if dp[i - 1][j] == 0:\n                dp[i][j] = k\n            elif dp[i][j - 1] == 0:\n                dp[i][j] = k\n            elif dp[i - 1][j - 1] == 0:\n                dp[i][j] = k\n    for i in range(h):\n        for j in range(w):\n            if dp[i][j] == k:\n                return str(i + 1) +'' + str(j + 1) + '\\n'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    \n    ch = stdin.split(\"\\n\")\n    ans = 0\n    for i in range(h):\n        for j in range(w):\n            if ch[i][j]!= \".\" and ch[i][j]!= \"#\":\n                if k == 1:\n                    if ch[i][j] == \"#\":\n                        ans += 1\n                else:\n                    if ch[i][j] == \"#\":\n                        ans += 1\n                        k -= 1\n                        if k == 0:\n                            return str(ans)\n                        \n    return str(ans)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    if k == 0:\n        return str(0)\n    if k == h * w:\n        return str(1)\n\n    # Initialize a matrix of NxN size\n    # Initialize one row and one column of color '.'\n    matrix = [['.' for x in range(w)] for y in range(h)]\n\n    # Populate matrix\n    for i in range(h):\n        for j in range(w):\n            matrix[i][j] = stdin[i * w + j]\n\n    # num_black_squares = 0\n    # num_red_squares = 0\n    # for row in matrix:\n    #     for column in row:\n    #         if column == '.':\n    #             num_black_squares += 1\n    #         else:\n    #             num_red_squares += 1\n    #\n    # if num_black_squares == num_red_squares:\n    #     return str(0)\n    #\n    # # Check for row or column\n    # num_black_squares = 0\n    # num_red_squares = 0\n    # for i in range(h):\n    #     num_black_squares = 0\n    #     num_red_squares = 0\n    #     for j in range(w):\n    #         if matrix[i][j] == '.':\n    #             num_black_squares += 1\n    #         else:\n    #             num_red_squares += 1\n    #\n    #     if num_black_squares == k:\n    #         return str(1)\n    #\n    #     if num_red_squares == k:\n    #         return str(1)\n\n    # Count\n    row_count = 0\n    col_count = 0\n    black_count = 0\n    red_count = 0\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == '.':\n                black_count += 1\n                if black_count == k:\n                    return str(1)\n            elif matrix[i][j] == '#':\n                red_count += 1\n                if red_count == k:\n                    return str(1)\n        row_count += 1\n        if row_count == k:\n            return str(1)\n    for i in range(w):\n        for j in range(h):\n            if matrix[j][i] == '.':\n                black_count += 1\n                if black_count == k:\n                    return str(1)\n            elif matrix[j][i] == '#':\n                red_count += 1\n                if red_count == k:\n                    return str(1)\n        col_count += 1\n        if col_count == k:\n            return str(1)\n\n    return str(0)"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n    K = int(K)\n    n = 1\n    s = 0\n    while n < N:\n        m = 1\n        while m < M:\n            if n + m < N + M:\n                if (n, m) in [(N, 1), (N, 2), (N, 3), (N, 4), (N, 5), (N, 6)]:\n                    s += 1\n            m += 1\n        n += 1\n    return str(s)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = stdin.split()\n    h = int(h)\n    w = int(w)\n    k = int(k)\n    grid = stdin.split(\"\\n\")\n\n    print(h * w - k)\n\n    return h * w - k\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    f = h * w\n    ans = 1\n    for i in range(1, h + 1):\n        for j in range(1, w + 1):\n            if k - (i * j) <= 0:\n                ans += 1\n                break\n            if (k - (i * j)) % 2 == 0:\n                ans += 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    L, R = int(x[0]), int(x[1])\n    return(min(i*j for i in range(L,R+1) for j in range(i+1,R+1) if ((i*j) % 2019) == 0))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the integer part of the result.\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    L, R = nums\n    if L == R:\n        return str(L)\n\n    if R < L:\n        return \"0\"\n\n    i = 0\n    j = R\n    while i <= j:\n        m = (i + j) // 2\n        if m * (m + 1) <= L <= (m + 1) * (m + 2):\n            return str(m)\n        elif L < m * (m + 1):\n            j = m - 1\n        else:\n            i = m + 1"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    M = int(stdin.split()[1])\n    return str(min(N * M % 2019, N * M % 2019, N * M % 2019, N * M % 2019))"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return answer\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = min(L, R), max(L, R)\n    res = 2019\n    while i < j:\n        res = (res * i) % 2019\n        i += 1\n    return res"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = stdin.split()\n    print((int(L) * int(R)) % 2019)\n    return ''"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    l, r = int(stdin[0]), int(stdin[1])\n    if l <= 0 or r <= 0 or l >= 2 * 10 ** 9 or r >= 2 * 10 ** 9:\n        raise Exception\n    return str(l * r % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = stdin.split()\n    L, R = int(L), int(R)\n    \n    for i in range(L, R):\n        for j in range(i, R):\n            if i * j < 2019:\n                return str(i * j)"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    i = l\n    j = r\n    while i <= j:\n        if i > j:\n            break\n        if (i * j) % 2019 == 0:\n            return str(i * j)\n        j -= 1\n    return str(i * j)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2020 2040')\n    '2'\n    >>> solution('1000 2000')\n    '3'\n    >>> solution('100010')\n    '1'\n    \"\"\"\n    l, r = map(int, stdin.split())\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return str(1 % 2019)\n    return str(l * r % 2019)\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == stdin[i+1]:\n            return 'WA'\n        elif stdin[i] == 'A':\n            if stdin[i+2] == 'C':\n                return 'AC'\n            else:\n                i += 2\n        i += 1\n    return 'WA'\n\nprint(solution(stdin))"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    if S[0].isupper():\n        if S[2].isupper():\n            return 'AC'\n        else:\n            return 'WA'\n    else:\n        if S[2].islower():\n            return 'AC'\n        else:\n            return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, C = stdin.split()\n    return 'AC' if (A[0].isupper() and C == A[2:]) else 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1 and stdin[0] == 'A':\n        return 'AC'\n    if len(stdin) == 2 and stdin[0] == 'A' and stdin[1] == 'C':\n        return 'AC'\n    if len(stdin) >= 3 and stdin[0] == 'A' and stdin[2] == 'C' and stdin[1] == 'C':\n        return 'AC'\n    return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC' if 'A' <= stdin[0] <= 'Z' and 3 < len(stdin) <= 10 and stdin.count('C') == 1 else 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0].isupper() == False:\n        return \"WA\"\n    else:\n        if S[0].lower()!= S[3]:\n            return \"WA\"\n        elif len(S) == 4:\n            return \"AC\"\n        elif S[1] == S[2]:\n            return \"AC\"\n        else:\n            return \"WA\"\n\nsolution(input())\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    a, c, *s = stdin\n    if a!= a.lower():\n        return 'WA'\n    if s[2]!= c and s[2]!= 'c':\n        return 'WA'\n    if all([s[i].isupper() for i in range(3, n - 1)]) and all([s[i].islower() for i in range(3, n - 1)]):\n        return 'AC'\n    return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return \"WA\" if \"A\" not in s or not \"CCCC\" in s else \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    if x.islower():\n        return 'WA'\n    elif x.isupper():\n        return 'AC'\n    elif x.count('A') == 1 and x.count('C') == 1:\n        return 'AC'\n    else:\n        return 'WA'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first letter is an uppercase A, the third letter is a lowercase C and the remaining letters are lowercase letters,\n    so all the conditions are satisfied.\n    \"\"\"\n    return stdin[0].isupper() and stdin[2:][::-1].upper() == stdin[2:][::-1].lower()\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    def answer(n,k):\n        if n == 0:\n            return '1'\n        ans = str(n % 10)\n        n = n//10\n        while n!= 0:\n            if n % 2 == 0:\n                n = int(n/10)\n                ans = str(2) + ans\n            else:\n                n = int((n-1)/10)\n                ans = str(3) + ans\n        return ans\n    return answer(n,k)\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split(\" \")\n    S = int(S)\n    K = int(K)\n    k_th = 1\n    k_th_str = \"\"\n    for i in range(1, K):\n        if S % 2 == 0:\n            S = S // 2\n            k_th_str += \"2\"\n        else:\n            S = (S * 3) + 1\n            k_th_str += \"3\"\n        k_th += 1\n    k_th_str += \"1\"\n    return k_th_str[:k_th]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    for _ in range(5):\n        S = [\"2\"] * len(S)\n        for i, num in enumerate(S):\n            if num!= \"1\":\n                num = str(int(num) * 2)\n                S[i] = num\n    return \"\".join(S)"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1]\n    S = stdin\n    K = int(stdin.split(\"\\n\")[0])\n    index = 0\n    while index < 5 * 10 ** 15:\n        if index % 10000 == 0:\n            print(\"#{}\".format(index))\n        if index % 5 == 0:\n            S = list(S)\n            S[0] = str(int(S[0]) * 2)\n        if index % 3 == 0:\n            S = list(S)\n            S[0] = str(int(S[0]) * 3)\n        if index % 4 == 0:\n            S = list(S)\n            S[0] = str(int(S[0]) * 4)\n        if index % 2 == 0:\n            S = list(S)\n            S[0] = str(int(S[0]) * 5)\n        S = \"\".join(S)\n        index += 1\n    print(S[:K])\n    return S[:K]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --type stdin: str\n    --rtype: str\n    \"\"\"\n    s = list(stdin)\n    k = int(stdin)\n    for i in range(len(s)):\n        if i % k == 0:\n            s = s[i:] + s[:i]\n    return ''.join(s[:k])\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    a: str = s[:5]\n    b: str = s[5:]\n    c: str = []\n    for x in range(0, 5):\n        if x == 0:\n            c.append(int(a))\n        else:\n            c.append(int(a) + int(b[x - 1]))\n    for x in range(0, 4):\n        if x == 0:\n            c.append(int(a))\n        else:\n            c.append(int(a) + int(b[x - 1]))\n    return str(c[4])\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while len(s) >= 5:\n        s = s[-5:] + s[:-5]\n        print(s)\n    return s[-1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_char(num: str, k: int):\n        if k > len(num):\n            k = k % len(num)\n        return str(int(num[:k]) + int(str(10) * k))\n\n    k = int(stdin[0])\n    s = stdin[1]\n    t = 5 * (10 ** 15)\n    res = \"\"\n    while t > 0:\n        res = get_char(s, k)\n        s = res\n        t -= 1\n    return str(res[:k])\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = list(stdin)\n    for i in range(len(s)):\n        if i % 2 == 0:\n            s[i] = str(int(s[i]) * 10 ** 15)\n        else:\n            s[i] = str(int(s[i]) * 10 ** 15)\n    return ''.join(s[:5])\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = int(s[0])\n    k = int(s[1])\n    x = pow(10,15)\n    l = 0\n    r = x\n    while r - l > 1:\n        mid = (l+r)//2\n        if k > mid:\n            l = mid\n        elif k < mid:\n            r = mid\n        else:\n            return str(r-1)\n    if k == l:\n        return str(l)\n    else:\n        return str(l)\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    res = \"YES\"\n    if len(set(p))!= len(p):\n        res = \"NO\"\n    for i in range(len(p)):\n        p.pop(p.index(max(p)))\n        p.append(max(p))\n        p.sort()\n    print(res)\n    return res"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    return 'YES' if sorted(p) == p else 'NO'\n\nsolution(input())"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    seq_string = input.split()\n    N = int(seq_string[0])\n    p = seq_string[1:]\n\n    if len(p) == N:\n        for i in range(len(p)):\n            if p[i] > p[i + 1]:\n                return \"YES\"\n        return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seq = sorted(stdin.split())\n    if seq == sorted(stdin.split()):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    if len(p) == 1:\n        return 'YES'\n    for i in range(1, n):\n        if p[i] < p[i - 1]:\n            return 'NO'\n    for j in range(n - 1, 0, -1):\n        if p[j] > p[j - 1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    print(\"YES\" if p == list(range(1, N+1)) else \"NO\")\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    STDIN               |   STDOUT\n    ----------------------------------------\n    5                   |   YES\n    5 1 2 3 4           |   NO\n    '''\n    # your code goes here\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    result = False\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] > arr[j]:\n                result = True\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split('\\n')\n    n = int(inputs[0])\n    p = inputs[1]\n    return 'YES' if sorted(p) == p else 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    p = sorted([int(i) for i in stdin.split()])\n    if p == list(range(1, n+1)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    p = inp[1]\n    p = sorted(p)\n    if p!= sorted(p):\n        return \"NO\"\n    return \"YES\"\n"
    }
]