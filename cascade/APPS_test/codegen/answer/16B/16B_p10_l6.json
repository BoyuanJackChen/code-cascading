[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds maximum number of edges in a path.\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    n, edges = list(map(int, stdin.split()))\n    tree = dict()\n    for i in range(1, n + 1):\n        tree[i] = set()\n    for edge in edges:\n        tree[edge[0]].add(edge[1])\n        tree[edge[1]].add(edge[0])\n    cost = 0\n    # Find edges from a to b\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            cost = max(cost, len(tree[i] & tree[j]))\n    # Find edges from b to c\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            cost = max(cost, len(tree[i] & tree[j]))\n    # Find edges from a to c\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            cost = max(cost, len(tree[i] & tree[j]))\n    return str(cost)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n^3)\n    space complexity: O(1)\n    '''\n    n = int(stdin)\n    a = 0\n    b = 0\n    c = 0\n    m = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            x = 0\n            y = 0\n            for k in range(i + 1, j):\n                if stdin[i + 1] in stdin[k] + stdin[j]:\n                    x += 1\n                if stdin[k] + stdin[j] in stdin[i + 1]:\n                    y += 1\n            m = max(x, y, m)\n            if x == y == m:\n                a = i + 1\n                b = k\n                c = j\n                break\n    return str(m) +'' + str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 4 6\n   ... 3 7\n   ... 3 8\n   ... ''')\n    5\n    >>> solution('''6\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 3 6\n   ... ''')\n    1 8 6\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    tree = [[] for _ in range(n)]\n\n    for line in stdin.split('\\n')[1:-1]:\n        a, b = map(int, line.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n\n    res, seen = 0, {0}\n    for i in range(n - 1):\n        seen.clear()\n        for j in range(n):\n            if j not in seen:\n                seen.add(j)\n                for k in tree[j]:\n                    seen.add(k)\n        res = max(len(seen) - 1, res)\n\n    return res\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8')\n    '5\\n1 8 6'\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    lines = stdin.splitlines()[1:]\n    a, b, c = 1, 2, 3\n    max_path = 0\n    for line in lines:\n        a, b = int(line.split()[0]), int(line.split()[1])\n        if a == b:\n            continue\n        if a > b:\n            a, b = b, a\n        for line in lines:\n            c = int(line.split()[0])\n            if a == c or b == c:\n                continue\n            if b == c:\n                a, b = c, a\n            if a == c:\n                continue\n            max_path = max(max_path, a + b + c)\n    print(max_path)\n    print(a, b, c)\n    return ''\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = [int(i) for i in stdin.readline().strip().split(' ')]\n    count = Counter(divisors)\n    max_val = max(count.values())\n    index = None\n    for key, val in count.items():\n        if val == max_val:\n            index = key\n            break\n    return index\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    list_of_divisors = [int(x) for x in stdin.split()]\n    x = 1\n    y = 1\n    for i in range(len(list_of_divisors)):\n        if x < list_of_divisors[i] < y:\n            x = list_of_divisors[i]\n        elif x > list_of_divisors[i] > y:\n            y = list_of_divisors[i]\n    return x, y\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n10 2 8 1 2 4 1 20 4 5\\n\")\n    20 8\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x = stdin[0]\n    y = stdin[1]\n    divisor = stdin[2:]\n    n = int(x)\n    m = int(y)\n    a = list(map(int, divisor.split(\" \")))\n    divisor_x = [1, int(x)]\n    divisor_y = [1, int(y)]\n    for d in a:\n        if d not in divisor_x and d not in divisor_y:\n            continue\n        if d in divisor_x:\n            divisor_x.append(d)\n        if d in divisor_y:\n            divisor_y.append(d)\n    if len(divisor_x) < len(divisor_y):\n        x, y = y, x\n        divisor_x, divisor_y = divisor_y, divisor_x\n    for i in range(len(divisor_y)):\n        divisor_x[i] = divisor_x[i]*divisor_y[i]\n    x_y = 1\n    for d in divisor_x:\n        x_y = x_y*d\n    return \"{} {}\".format(x*x_y, y*x_y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    x = a[0]\n    y = a[1]\n    if a[n - 1] == a[n - 2]:\n        print(x, y)\n    else:\n        y1 = a[0]\n        y2 = a[n - 1]\n        if y2 % y1 == 0:\n            x = y2 // y1\n            y = y1\n        elif y1 % y2 == 0:\n            x = y1 // y2\n            y = y2\n        else:\n            x = int(y2 * y1 / math.gcd(y1, y2))\n            y = y1 * y2 / math.gcd(y1, y2)\n        print(x, y)\n    return x, y\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split('\\n')]\n    return \"{} {}\".format(a, b)"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    c = Counter(a)\n    b = []\n    for x in c:\n        if c[x] == 2:\n            b.append(x)\n    a = []\n    for x in b:\n        if x % 2 == 0:\n            a.append(x)\n        else:\n            a.append(x*2)\n    print(a[0], a[1])\n    return ''"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        a[i] = a[i][:m // 2]\n    a = list(map(sum, a))\n    a = sorted(a)\n    for i in range(len(a)):\n        if (a[i] * 2) % k == 0:\n            return a[i] * 2\n    return 0\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_sum(stdin: str) -> int:\n        n, m, k = map(int, stdin.readline().split())\n        data = [list(map(int, stdin.readline().split())) for _ in range(n)]\n        d = sorted(map(lambda x: sum(x) % k, data))\n        return d[d.__len__() - 1] if d[0] > 0 else 0\n\n    print(find_max_sum(stdin))\n    return ''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, k = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    def check(a):\n        m = 0\n        for i in a:\n            if m > 0 and i[m-1] % k!= 0:\n                return False\n            for j in i:\n                if j % k!= 0:\n                    m += 1\n                    break\n        return m == 0 or m == m // 2\n\n    a.sort(key=lambda x: sum(x))\n    for i in range(n):\n        a[i].sort()\n        m = len(a[i])\n        if m <= (m // 2):\n            if m == 1:\n                continue\n            for j in range(m // 2):\n                a[i][j] += a[i][m-j-1]\n            if a[i][m-1] % k == 0:\n                break\n\n    a.sort(key=lambda x: x[0])\n    print(sum([j for i in a for j in i]))\n\n    print(check(a))\n\n\n    return 'a'\n\n\nsolution(input)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    lines = stdin.split(\"\\n\")\n    n, m, k = list(map(int, lines[0].split()))\n    numbers = [list(map(int, line.split())) for line in lines[1:n + 1]]\n\n    # find solution\n    result = 0\n    for row in numbers:\n        s = len(row) // 2\n        if s == 0:\n            continue\n        elif s > k:\n            s = k\n        row = row[:s]\n        result = max(sum(row) % k, result)\n    print(result)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    n, m, k = [int(x) for x in stdin[0].split(' ')]\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin[_ + 1].split(' ')])\n    \n    sums = []\n    for _ in range(n):\n        \n        # variables for tracking\n        current_sum = 0\n        \n        # initialise empty sets\n        row_sets = set()\n        \n        # iterate through the rows of the matrix\n        for _ in range(m):\n            \n            # create a list of the current row's elements\n            current_row = matrix[_]\n            \n            # check if the current row's elements are in the row_sets set\n            if all(x in row_sets for x in current_row):\n                \n                # remove them and update the current sum\n                for _ in range(m):\n                    current_sum += current_row[_]\n                    current_row[_] = 0\n                \n                # add the current sum to the list of sums\n                sums.append(current_sum)\n                \n                # add the current row's elements to the row_sets set\n                for _ in range(m):\n                    row_sets.add(current_row[_])\n                \n                # continue to next iteration\n                continue\n            \n            # otherwise, check if the current row's sum is divisible by k\n            if current_sum % k == 0:\n                \n                # if so, add the current row's elements to the row_sets set\n                for _ in range(m):\n                    row_sets.add(current_row[_])\n                \n                # continue to next iteration\n                continue\n            \n            # otherwise, we need to remove elements from the current row\n            else:\n                \n                # set the current row's minimum element to the minimum value\n                current_row_min = min(current_row)\n                \n                # find the index of the current row's minimum element\n                current_row_index = current_row.index(current_row_min)\n                \n                # remove the minimum element from the current row\n                current_row[current_row_index] = 0\n                \n                # update the current sum by substracting the minimum element\n                current_sum -= current_row_min\n                \n                # add the minimum element to the row_sets set\n                row_sets.add(current_row_min)\n                \n                # continue to next iteration\n                continue\n        \n        # once the entire matrix has been iterated, add the current_sum to the list of sums\n        sums.append(current_sum)\n    \n    # return the maximum sum of the sums\n    return max(sums)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    row_sums = [0] * n\n    col_sums = [0] * m\n    for i in range(n):\n        for j in range(m):\n            row_sums[i] += a[i][j] % k\n            col_sums[j] += a[i][j] % k\n\n    max_row_sum = -1\n    for row_sum in row_sums:\n        row_sum %= k\n        max_row_sum = max(max_row_sum, row_sum)\n\n    max_col_sum = -1\n    for col_sum in col_sums:\n        col_sum %= k\n        max_col_sum = max(max_col_sum, col_sum)\n\n    return max_row_sum + max_col_sum\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum sum divisible by k which can be obtained from the matrix a.\"\"\"\n    n, m, k = map(int, stdin.readline().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    a = np.array(a)\n    m //= 2\n\n    b = np.sum(a, axis=1)\n    c = np.tile(b, (m, 1)).T\n    c[:, 0] = 0\n\n    d = np.sum(c, axis=1)\n    e = np.tile(d, (1, m))\n    e[0, :] = 0\n\n    f = np.sum(e, axis=1)\n\n    f = np.sum(f[f % k == 0])\n    print(f)\n    return str(f)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem\n    '''\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\\\n   ... 5\n   ... 1 2 4 3 2\n   ... \"\"\")\n    '4'\n    >>> solution(\"\"\"\\\n   ... 7\n   ... 1 3 5 6 5 4 2\n   ... \"\"\")\n    '6'\n    >>> solution(\"\"\"\\\n   ... 3\n   ... 2 2 2\n   ... \"\"\")\n    '1'\n    >>> solution(\"\"\"\\\n   ... 4\n   ... 1 2 4 3\n   ... \"\"\")\n    '4'\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    cnt = 0\n    l = []\n    for i in range(n):\n        if arr[i] == max(arr):\n            cnt += 1\n            arr.pop(i)\n        else:\n            l.append(arr[i])\n    return str(cnt) + ''.join(l)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(x) for x in stdin.split()]\n    \n    prev = -1\n    for x in lst:\n        if prev!= -1 and x - prev > 0:\n            return -1\n        prev = x\n    return prev\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum value of D, such that all elements of the input array\n    become equal.\n\n    Args:\n        stdin (str): input on stdin\n\n    Returns:\n        str: output to stdout\n    \"\"\"\n    return None"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #!/bin/python3\n\na = list(map(int, stdin.split()))\nl = len(a)\n\nd = {}\nfor i in range(l):\n    d[i] = a[i]\n\narr = []\nfor i in range(l):\n    arr.append(d[i])\n\ns = set(arr)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split(' ')]\n    d = {}\n    ans = 0\n    for i in range(n):\n        if arr[i] < 0:\n            ans = -1\n            break\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    num = 0\n    min = 10 ** 6\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] + a[j] < a[j] - a[i]:\n                if abs(a[i] + a[j] - a[j] + a[i]) < min:\n                    num = abs(a[i] + a[j] - a[j] + a[i])\n                    min = abs(a[i] + a[j] - a[j] + a[i])\n    return str(num)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    \n    min_d = 100\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            for d in range(0, 100):\n                if a[i] + d == a[j] or a[i] - d == a[j]:\n                    min_d = min(min_d, abs(d))\n    \n    print(min_d)\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    d = 0\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[0]) > d:\n            d = abs(arr[i] - arr[0])\n    if d == 0:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[0] - abs(arr[i] - arr[0]) == 0:\n            return d\n    return -1\n\nprint(solution('6\\n1 4 4 7 4 1'))\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num, *a = list(map(int, stdin.split()))\n\n    a.sort()\n    m = min(a[-1] - a[0], a[-2] - a[1])\n    if m < 0:\n        return str(m)\n\n    for x in range(1, m):\n        if all(a[i] + x in a or a[i] - x in a for i in range(len(a))):\n            return str(x)\n\n    return str(-1)\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    coordinates = list(map(lambda x: tuple(map(int, x.split())), line[:-1]))\n    first_coordinate = coordinates[0]\n    second_coordinate = coordinates[1]\n    third_coordinate = coordinates[2]\n    fourth_coordinate = coordinates[3]\n    # x1, y1, x2, y2\n    x_1, y_1, x_2, y_2 = first_coordinate\n    # x3, y3, x4, y4\n    x_3, y_3, x_4, y_4 = second_coordinate\n    # x5, y5, x6, y6\n    x_5, y_5, x_6, y_6 = third_coordinate\n    if y_2 < y_1 or y_4 < y_3 or x_4 < x_1 or x_2 < x_3:\n        return 'NO'\n    if y_2 < y_3 and y_4 < y_1 and y_1 < y_3 and y_3 < y_4:\n        if x_2 > x_1 and x_1 > x_3 and x_4 > x_3 and x_3 > x_4:\n            return 'YES'\n    if y_2 > y_3 and y_4 > y_1 and y_1 > y_3 and y_3 > y_4:\n        if x_2 < x_1 and x_1 < x_3 and x_4 < x_3 and x_3 < x_4:\n            return 'YES'\n    if x_4 < x_1 and x_2 < x_3 and x_3 < x_4:\n        if y_1 < y_3 and y_3 < y_2 and y_2 < y_4:\n            return 'YES'\n    if x_3 < x_1 and x_2 < x_4 and x_4 < x_3:\n        if y_1 < y_4 and y_4 < y_2 and y_2 < y_3:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get data\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split()]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split()]\n\n    # Calculate points\n    top_left = (min(x1, x2, x3, x4), min(y1, y2))\n    bottom_left = (max(x1, x2), max(y1, y2))\n    top_right = (min(x5, x6), min(y5, y6))\n    bottom_right = (max(x5, x6), max(y5, y6))\n\n    # Check if the white sheet is outside of the black sheets\n    if top_left[0] < bottom_left[0] or top_left[1] < bottom_left[1] or top_right[0] < bottom_right[0] or top_right[1] < bottom_right[1]:\n        return \"NO\"\n\n    # Check if the black sheets overlap the white sheet\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x_line = [x1, x2]\n    y_line = [y1, y2]\n    x_line_1 = [x3, x4]\n    y_line_1 = [y3, y4]\n    x_line_2 = [x5, x6]\n    y_line_2 = [y5, y6]\n    if ((max(x_line) < min(x_line_1) or max(x_line) < min(x_line_2)) or \n        (max(x_line) < min(x_line_1) or max(x_line) < min(x_line_2)) or \n        (min(x_line) > max(x_line_1) or min(x_line) > max(x_line_2)) or\n        (min(x_line) > max(x_line_1) or min(x_line) > max(x_line_2))):\n        return 'NO'\n    if ((max(y_line) < min(y_line_1) or max(y_line) < min(y_line_2)) or \n        (max(y_line) < min(y_line_1) or max(y_line) < min(y_line_2)) or \n        (min(y_line) > max(y_line_1) or min(y_line) > max(y_line_2)) or\n        (min(y_line) > max(y_line_1) or min(y_line) > max(y_line_2))):\n        return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    gets stdin, returns a string\n    '''\n    def to_int(string: str) -> int:\n        '''\n        gets a string, returns an int\n        '''\n        return int(string)\n\n    stdin_str = stdin.split('\\n')\n    x1, y1, x2, y2 = to_int(stdin_str[0].split(' '))\n    x3, y3, x4, y4 = to_int(stdin_str[1].split(' '))\n    x5, y5, x6, y6 = to_int(stdin_str[2].split(' '))\n\n    return 'YES' if x1 <= x5 <= x2 and x3 <= x4 <= x6 and y1 <= y5 <= y2 and y3 <= y4 <= y6 else 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem\"\"\"\n    (x_1, y_1, x_2, y_2) = [int(x) for x in stdin.split('\\n')[0].split()]\n    (x_3, y_3, x_4, y_4) = [int(x) for x in stdin.split('\\n')[1].split()]\n    (x_5, y_5, x_6, y_6) = [int(x) for x in stdin.split('\\n')[2].split()]\n    if (\n        (x_1 < x_3 < x_2)\n        or (x_3 < x_1 < x_4)\n        or (x_4 < x_3 < x_2)\n        or (x_3 < x_4 < x_2)\n    ):\n        return 'YES'\n    elif (\n        (x_5 < x_3 < x_6)\n        or (x_3 < x_5 < x_4)\n        or (x_4 < x_3 < x_6)\n        or (x_3 < x_4 < x_6)\n    ):\n        return 'YES'\n    elif (\n        (x_1 < x_5 < x_2)\n        or (x_5 < x_1 < x_6)\n        or (x_6 < x_5 < x_2)\n        or (x_5 < x_6 < x_2)\n    ):\n        return 'YES'\n    elif (\n        (x_1 < x_3 < x_5 < x_6)\n        or (x_3 < x_1 < x_4 < x_6)\n        or (x_6 < x_1 < x_4 < x_5)\n        or (x_4 < x_3 < x_6 < x_5)\n    ):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get data from stdin\n    white_sheet_coords = stdin.split(', ')\n    white_sheet_coords = [int(el) for el in white_sheet_coords]\n    assert len(white_sheet_coords) == 4\n\n    # get data from stdin\n    black_sheet_1_coords = stdin.split(', ')\n    black_sheet_1_coords = [int(el) for el in black_sheet_1_coords]\n    assert len(black_sheet_1_coords) == 4\n\n    # get data from stdin\n    black_sheet_2_coords = stdin.split(', ')\n    black_sheet_2_coords = [int(el) for el in black_sheet_2_coords]\n    assert len(black_sheet_2_coords) == 4\n\n    # get top left and bottom right corners of white sheet\n    top_left_x, top_left_y, bottom_right_x, bottom_right_y = white_sheet_coords\n\n    # get top left and bottom right corners of black sheet\n    black_top_left_x, black_top_left_y, black_bottom_right_x, black_bottom_right_y = black_sheet_1_coords\n\n    # check if any point lies outside of the sheet\n    for i in range(len(white_sheet_coords)):\n        if white_sheet_coords[i] < black_sheet_1_coords[i] or white_sheet_coords[i] > black_sheet_2_coords[i]:\n            return \"NO\"\n\n    # check if any point lies strictly outside of the sheet\n    for i in range(len(white_sheet_coords)):\n        if white_sheet_coords[i] < black_top_left_x or white_sheet_coords[i] > black_bottom_right_x or white_sheet_coords[i] < black_top_left_y or white_sheet_coords[i] > black_bottom_right_y:\n            return \"NO\"\n\n    return \"YES\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    \n    x_d1 = x_2 - x_1\n    x_d2 = x_4 - x_3\n    x_d3 = x_6 - x_5\n    \n    y_d1 = y_2 - y_1\n    y_d2 = y_4 - y_3\n    y_d3 = y_6 - y_5\n    \n    x_d12 = x_d1 + x_d2\n    x_d23 = x_d2 + x_d3\n    x_d31 = x_d3 + x_d1\n    \n    y_d12 = y_d1 + y_d2\n    y_d23 = y_d2 + y_d3\n    y_d31 = y_d3 + y_d1\n    \n    if x_d12 * y_d23 == x_d23 * y_d12 and x_d31 * y_d23 == x_d23 * y_d31 and x_d31 * y_d12 == x_d12 * y_d31:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = stdin.split()\n    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n\n    x3, y3, x4, y4 = stdin.split()\n    x3, y3, x4, y4 = int(x3), int(y3), int(x4), int(y4)\n\n    x5, y5, x6, y6 = stdin.split()\n    x5, y5, x6, y6 = int(x5), int(y5), int(x6), int(y6)\n\n    x_min, y_min, x_max, y_max = min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2)\n\n    x_min_1, x_max_1, x_min_2, x_max_2 = min(x3, x4), max(x3, x4), min(x5, x6), max(x5, x6)\n    y_min_1, y_max_1, y_min_2, y_max_2 = min(y3, y4), max(y3, y4), min(y5, y6), max(y5, y6)\n\n    if x_min <= x_min_1 <= x_max and y_min <= y_min_1 <= y_max and x_min_2 <= x_max_1 and y_min_2 <= y_max_1:\n        return \"YES\"\n    if x_min <= x_min_2 <= x_max and y_min <= y_min_2 <= y_max and x_min_1 <= x_max_2 and y_min_1 <= y_max_2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split()]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split()]\n    x_l = max(x1, x3)\n    x_r = min(x2, x4)\n    y_l = max(y1, y3)\n    y_r = min(y2, y4)\n    if x_l > x_r or y_l > y_r:\n        return 'NO'\n    if x3 < x1 and y3 < y1 and x4 > x2 and y4 > y2:\n        return 'NO'\n    if x5 < x1 and y5 < y1 and x6 > x2 and y6 > y2:\n        return 'NO'\n    if x_l < x3 and x3 < x5 and y_l < y3 and y3 < y5 and x_r > x4 and x4 > x6 and y_r > y4 and y4 > y6:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    result = 0\n    while number > 1:\n        number = number + 1 if number < 10 else number\n        if number % 10!= 0:\n            result += 1\n        number //= 10\n    return result\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    \n    count = 0\n    \n    for x in range(n+1):\n        while x:\n            count += 1\n            x = x // 10\n            \n    return count\n    \nprint(solution(input))\n\n\"\"\"\n\n\"\"\"\nSolution 2\n\nThe idea is to use binary search to check if number x is reachable from number n.\n\nIf x is not reachable from n, then the number with all its digits replaced by 1 is also not reachable, so we can just ignore it and check for next number.\n\nThe number with all its digits replaced by 1 is\n\nx1 = x0 + x0 - x0 = x0(1 + x0 - x0) = x0\nx2 = x1 + x1 - x1 = x1(1 + x1 - x1) = x1\n.\n.\n.\n\nTherefore,\n\nx1 + x1 - x1 = x1(1 + x1 - x1) = x1\nSo,\n\nx1 + x1 - x1 = 2x1 = 2x0\n\nSo, if n >= 2x0, then n is reachable from x0.\n\n\"\"\"\n\n\n\"\"\"\nSolution 2\n\"\"\"\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n += 1\n    \n    d = {n: 0}\n    \n    while n:\n        n = n // 10\n        if n in d:\n            return d[n]\n        d[n] = d[n * 10] + 1\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(1, 10**9):\n        if str(n+1).count('0') > str(n+1).count('1'):\n            print(1 + int(str(i+1).count('0')))\n        else:\n            print(1 + int(str(i+1).count('1')))"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 0"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        if '0' in str(i):\n            continue\n        else:\n            if n % i == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    steps = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    counter = 0\n    while True:\n        if num > 0:\n            num += 1\n            for i in steps:\n                if num % i == 0:\n                    break\n            else:\n                counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().strip().split()))\n\n    # init\n    s = set()\n    for f1, f2 in zip(f, f[1:]):\n        if f1 == 0:\n            s.add(f2)\n        if f2 == 0:\n            s.add(f1)\n\n    # get output\n    n = len(s)\n    if n == 0:\n        return''.join([str(i) for i in f])\n    if n == 1:\n        return''.join([str(i) for i in f[1:]])\n    else:\n        return''.join([str(i) for i in f[:-1]])\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    gifts = [int(x) for x in stdin.readline().split()]\n    gifts.sort()\n    i = 0\n    while i < n:\n        if gifts[i] == 0:\n            gifts.insert(i, gifts.pop(i + 1))\n        elif gifts[i] == 1:\n            i += 1\n        else:\n            gifts[i] = gifts.pop(i + 1)\n    return''.join(str(x) for x in gifts)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input from stdin\n    :return: solution string\n    \"\"\"\n    # Get number of friends\n    n = int(stdin.readline().strip())\n\n    # Get number of friends who want to give gifts\n    friends = list(map(int, stdin.readline().strip().split()))\n\n    # Get number of friends who want to receive gifts\n    gifts = list(map(int, stdin.readline().strip().split()))\n\n    # Get index of gifts that have value 1\n    ind = [i for i in range(n) if friends[i] == 1]\n\n    # Get index of gifts that have value 0\n    zero = [i for i in range(n) if friends[i] == 0]\n\n    # Get list of remaining gifts that have value 0\n    zero_ = [gifts[i] for i in zero]\n\n    # Get index of gifts that have value 0\n    ind_ = [i for i in ind if gifts[i] == 0]\n\n    # Get remaining gifts that have value 0\n    zero_ = [gifts[i] for i in zero_ if i not in ind_]\n\n    # Get remaining gifts that have value 0\n    zero = [gifts[i] for i in zero]\n\n    # Get index of gifts that have value 0\n    ind = [i for i in ind if gifts[i] == 0]\n\n    # Get remaining gifts that have value 0\n    zero_ = [gifts[i] for i in zero_ if i not in ind]\n\n    # Convert all gifts to list\n    zero_ = list(zero_)\n\n    # Sort the gifts by value\n    zero_.sort(reverse=True)\n\n    # Sort the gifts by index\n    zero_.sort()\n\n    # Remove already giving gifts\n    for i in ind_:\n        gifts[i] = 0\n\n    # Add remaining gifts\n    for i in range(len(zero_)):\n        gifts[zero_[i]] = zero[i]\n\n    # Convert all gifts to list\n    gifts = list(gifts)\n\n    # Sort all gifts by value\n    gifts.sort(reverse=True)\n\n    # Sort all gifts by index\n    gifts.sort()\n\n    # Return result\n    return''.join(map(str, gifts))"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        f = open('./input.txt', 'r')\n        n = int(f.readline())\n        f = list(map(int, f.readline().split()))\n        sorted_f = sorted(f)\n        s = [str(sorted_f[i]) for i in range(len(sorted_f))]\n        print(\" \".join(s))\n\n\nsolution('4\\n1 3 4 0')\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split(' ')))\n    f1 = [0] * n\n    f2 = [0] * n\n    for i in range(n):\n        if friends[i]!= 0:\n            f1[i] = friends[i]\n            f2[i] = friends[i]\n    for i in range(n):\n        if friends[i] == 0:\n            break\n        f1[friends[i] - 1] += 1\n        f2[i] = friends[i]\n    result =''.join(map(str, f1)) +'' +''.join(map(str, f2[1:]))\n    return result\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = [int(i) for i in stdin.readline().split()]\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i-1] + f[i-1]\n    m = dp[-1]\n    dp = [0] * m\n    dp[0] = 1\n    for i in range(n):\n        dp[dp[i-1]] += f[i]\n    res = [i for i in range(m) if dp[i] == n]\n    return \" \".join([str(i) for i in res])\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    # n = int(stdin.readline().strip())\n    # A = list(map(int, stdin.readline().strip().split()))\n    n = 7\n    A = [7, 0, 0, 1, 4, 0, 6]\n\n    # Process the input\n    # A.sort()\n    A.sort()\n    # Set up variables\n    freq = [0]*(n+1)\n    for i in range(n):\n        freq[A[i]] += 1\n    num_gifts = [freq[i] for i in range(n) if freq[i] > 0]\n    # print(num_gifts)\n    # print(freq)\n    # Compute result\n    result = [0]*n\n    for i in range(n):\n        if freq[i] > 1:\n            result[i] = i\n            freq[i] -= 2\n        elif freq[i] == 0:\n            result[i] = -1\n        else:\n            result[i] = i\n        if freq[i] < 0:\n            freq[i] = 0\n    # print(result)\n    # print(freq)\n    # Return result\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_people = int(stdin.split('\\n')[0])\n    number_of_not_known_people = 0\n    people = [None for _ in range(number_of_people)]\n\n    for person in stdin.split('\\n')[1].split(' '):\n        person = int(person)\n        if person == 0:\n            number_of_not_known_people += 1\n        else:\n            people[person - 1] = person\n    not_known = number_of_not_known_people\n    num_to_give = number_of_not_known_people\n\n    for i in range(number_of_not_known_people):\n        if people[i] is None:\n            people[i] = num_to_give\n            num_to_give = not_known\n            not_known -= 1\n        else:\n            num_to_give += 1\n    \n    return''.join(map(lambda person: str(person), people))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    assert 2 <= n <= 10 ** 5\n    m = [int(x) for x in stdin.readline().split()]\n    assert len(m) == n\n    s = set()\n    ans = []\n    for i, x in enumerate(m):\n        if x == 0:\n            assert i + 1 not in s\n            ans.append(i + 1)\n            s.add(i + 1)\n        else:\n            assert 1 <= x <= n\n            ans.append(x)\n    assert len(s) == n - 1\n    assert len(ans) == n\n    return''.join(str(x) for x in ans)\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 2 2 3\n   ... ''')\n    'NO'\n    >>> solution('''5 2\n   ... 3 2 1 2 3\n   ... ''')\n    'YES'\n    >>> solution('''5 2\n   ... 1 1 1 1 1\n   ... ''')\n    'YES'\n    \"\"\"\n    a, k = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.splitlines()[1].split()]\n\n    # Your code here\n    return 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  \"\"\"\n  n, k = list(map(int, stdin.split(' ')))\n  \n  if n!= len(set(map(int, stdin.split(' ')))):\n    return 'NO'\n  \n  s = set()\n  for i in range(1, k + 1):\n    s.add(i)\n  \n  res = 'NO'\n  for i in range(n):\n    if i + 1 not in s:\n      return res\n    s.remove(int(stdin.split(' ')[i]))\n  \n  return res\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    color = [int(x) for x in stdin.split(' ')]\n    \n    return\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def answer_validation(array_length: int, colors: int, array: list) -> bool:\n        # I know, I could have just used a regular array of colors,\n        # but in this case I wanted to try to use the same colors over multiple elements\n        # in the array.\n        # So, I want to use the array with some clever use of the colors\n        # for example, array = [1, 2, 2, 3]\n        # could be written in the form of 1 1 2 2 3\n        # or 1 2 2 3 1\n        # or 2 2 1 3 1\n        # or 2 2 1 3 2\n        # or 3 1 2 1 2\n        # or 3 1 2 1 3\n        # or 3 2 1 1 3\n        # or 3 2 1 2 3\n        # so, colors = 3\n        # So, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 1, 1]\n        # could be written as 2 2 1 1\n        # or 2 1 1 2\n        # or 1 1 2 2\n        # or 1 2 1 2\n        # so, colors = 3\n        # so, for each element (array[i] = 3) we need to use one color\n        # for example, array = [3, 2, 1, 2]\n        # could be written as 3 3 2 2\n        # or 3 2 2 3\n        # or 3 2 1 3\n        # or 3 1 2 3\n        # so, colors = 4\n        # so, for each element (array[i] = 1) we need to use one color\n        # for example, array = [1, 2, 2, 2]\n        # could be written as 1 1 2 2\n        # or 1 2 2 2\n        # or 2 2 1 2\n        # or 2 2 1 2\n        # so, colors = 4\n        # so, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 2, 2]\n        # could be written as 2 2 2 2\n        # or 2 2 2 2\n        # or 2 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 1) we need to use one color\n        # for example, array = [1, 2, 2, 2, 1]\n        # could be written as 1 1 2 2 2 1\n        # or 1 2 2 2 2 1\n        # or 2 2 2 2 2 1\n        # or 2 2 2 1 2 1\n        # or 1 2 1 2 2 1\n        # so, colors = 6\n        # so, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 2, 2, 2]\n        # could be written as 2 2 2 2 2\n        # or 2 2 2 2 2\n        # or 2 2 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 1) we need to use one color\n        # for example, array = [1, 2, 2, 2, 2, 1]\n        # could be written as 1 1 2 2 2 2 1\n        # or 1 2 2 2 2 2 1\n        # or 2 2 2 2 2 2 1\n        # or 2 2 2 2 1 2 1\n        # or 2 1 1 2 2 1 2\n        # so, colors = 6\n        # so, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 2, 2, 2, 2]\n        # could be written as 2 2 2 2 2 2\n        # or 2 2 2 2 2 2\n        # or 2 2 2 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 1) we need to use one color\n        # for example, array = [1, 2, 2, 2, 2, 2, 1]\n        # could be written as 1 1 2 2 2 2 2 1\n        # or 1 2 2 2 2 2 2 1\n        # or 2 2 2 2 2 2 2 1\n        # or 2 2 2 2 1 2 1 2\n        # or 2 1 1 2 2 1 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 2, 2, 2, 2, 2]\n        # could be written as 2 2 2 2 2 2 2\n        # or 2 2 2 2 2 2 2\n        # or 2 2 2 2 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 1) we need to use one color\n        # for example, array = [1, 2, 2, 2, 2, 2, 2, 1]\n        # could be written as 1 1 2 2 2 2 2 2 1\n        # or 1 2 2 2 2 2 2 2 1\n        # or 2 2 2 2 2 2 2 1 2\n        # or 2 2 2 2 1 2 1 2 2\n        # or 2 1 1 2 2 1 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 2, 2, 2, 2, 2, 2]\n        # could be written as 2 2 2 2 2 2 2 2\n        # or 2 2 2 2 2 2 2 2\n        # or 2 2 2 2 2 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 1) we need to use one color\n        # for example, array = [1, 2, 2, 2, 2, 2, 2, 2, 1]\n        # could be written as 1 1 2 2 2 2 2 2 2 1\n        # or 1 2 2 2 2 2 2 2 2 1\n        # or 2 2 2 2 2 2 2 2 1 2\n        # or 2 2 2 2 1 2 1 2 2 2\n        # or 2 1 1 2 2 1 2 2 2 2\n        # so, colors = 6\n        # so, for each element (array[i] = 2) we need to use two colors\n        # for example, array = [2, 2, 2, 2, 2, 2, 2, 2, 2]\n        # could be written as 2 2 2 2 2"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  # your solution here\n  return \"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    ans = list()\n    for i in range(1, k + 1):\n        if i not in a:\n            ans.append(i)\n    ans =''.join(map(str, ans))\n    if ans =='':\n        return 'NO'\n    return 'YES\\n{}'.format(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get a string of numbers separated by spaces and return a list of integers.\"\"\"\n    n, k = [int(n) for n in stdin.split()]\n    nums = [int(n) for n in stdin.split()]\n\n    return None\n\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"5 2\"))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    n = int(stdin)\n    q = n // (10 ** y) % 10\n    if q == 0:\n        print(x)\n    else:\n        print(x - 1)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nfrom math import log10\nfrom sys import stdin"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.strip().split()]\n    s = stdin.strip().replace('0', '1').replace('1', '0')\n    s = bin(int(s, 2) + pow(2, x))[2:]\n    if len(s) > n:\n        s = bin(int(s, 2) + pow(2, x))[2:]\n    print(len(s) - n)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, x, y = stdin.split()\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    '''\n    n, x, y = [int(s) for s in stdin.split()]\n\n    count = 0\n    while n > 0:\n        count += n % 10\n        n = n // 10\n    count += y - x + 1\n    return str(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11 5 2\\\\n11010100101\")\n    1\n    >>> solution(\"11 5 1\\\\n11010100101\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    string = [int(i) for i in string]\n    number, x, y = string[0], string[1], string[2]\n    number = list(str(number))\n    number = [int(i) for i in number]\n    print(len(number))\n    print(x, y)\n    print(number)\n    if (x == y):\n        return (x * len(number)) % (10 ** 9 + 7)\n    else:\n        print(number[:x])\n        return number[:x].count(1) * len(number) % (10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    n = str(n)\n    x = str(x)\n    y = str(y)\n    t = [0] * n\n    m = 0\n    for i in range(n):\n        if n[i]!= '0':\n            t[i] = 1\n            m += 1\n    for i in range(n):\n        if t[i] == 1:\n            t[i] = 0\n        else:\n            t[i] = 1\n            m += 1\n    # print(m)\n    ans = abs(int(n, 2) - (int(x, 2) * int(y, 2)))\n    return ans\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(['NO', 'YES'] * t)\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\")\n    YES\n    YES\n    NO\n    YES\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\\n\")\n    result = []\n\n    for case in cases:\n        case = case.splitlines()\n        if len(case) < 2:\n            continue\n        n = int(case[0])\n        seq = [int(i) for i in case[1].split()]\n        \n        seen = {}\n        for x in seq:\n            seen[x] = seen.get(x, 0) + 1\n        \n        for i in range(1, n - 2):\n            if seen.get(seq[i], 0) >= 2:\n                for j in range(i + 1, n - 1):\n                    if seen.get(seq[j], 0) >= 1:\n                        if j - i >= 3:\n                            result.append(\"YES\")\n                        else:\n                            result.append(\"NO\")\n                        break\n            else:\n                result.append(\"NO\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if array a has some subsequence of length at least 3 that is a palindrome.\"\"\"\n    number_of_test_cases = int(stdin.readline())\n    test_cases = [tuple(map(int, stdin.readline().split())) for _ in range(2 * number_of_test_cases)]\n    for test_case in test_cases:\n        length_of_array, array = test_case\n        if length_of_array < 3 or is_subsequence_palindrome(array):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\ncases = int(stdin.readline())\nfor i in range(cases):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    result = 'NO'\n    for i in range(n):\n        j = i\n        while j > 0 and arr[j] == arr[j - 1]:\n            j -= 1\n        j = i + 1\n        while j < n and arr[j] == arr[j - 1]:\n            j += 1\n        if j - i >= 3:\n            result = 'YES'\n    print(result)\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(n) space.\"\"\"\n    t = int(stdin.readline())\n    return '\\n'.join(['YES' if is_palindrome(stdin.readline().split()) else 'NO' for _ in range(t)])\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n, a = int(n), a\n    mapping = list(map(int, stdin.split()))\n    \n    # run the optimization, remembering the maximum\n    best = None\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if best is None:\n                best = max(a[i:j], int(a[i:j]) * mapping[int(a[i])])\n            best = max(best, int(a[i:j]) * mapping[int(a[i])])\n    return best\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1337\\n1 2 5 4 6 6 3 1 9\\n9 8 7 6 5 4 3 2 1')\n    '1557'\n    \"\"\"\n\n    digits, *digits_by_f = stdin.split('\\n')\n    digits = int(digits)\n    digits_by_f = list(map(int, digits_by_f))\n\n    max_digit = 9\n    dp = [[0] * 10 for _ in range(digits)]\n    dp[0][digits_by_f[0]] = 1\n    max_dp = dp[0]\n\n    for i in range(1, 9):\n        dp[i % digits][digits_by_f[i]] = 1\n        max_dp = [max(max_dp[j], dp[i % digits][j]) for j in range(10)]\n\n    for i in range(9, -1, -1):\n        if max_dp[digits_by_f[i]] == 0:\n            max_digit = digits_by_f[i]\n            break\n\n    return str(10 ** digits - max_digit)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    b = stdin.split('\\n')[2]\n    d = dict(zip('123456789', b))\n    ans = 0\n    for i in range(n):\n        if a[i] not in '123456789':\n            ans += int(a[i])\n        else:\n            ans += int(d[a[i]])\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().rstrip()\n    f = list(map(int, stdin.readline().rstrip().split()))\n    result = \"\"\n    cur_max = int(a[0])\n    for i in range(n):\n        f_num = f[int(a[i])-1]\n        if f_num > cur_max:\n            cur_max = f_num\n        result += str(cur_max)\n    return result\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible number you can get after applying the operation described in the statement no more than once.\"\"\"\n    a = stdin[0]\n    f = [int(x) for x in stdin[1].split()]\n    \n    res = [int(a[i]) for i in range(len(a))]\n    \n    for i in range(len(a)):\n        res[i] = f[int(res[i]) - 1]\n    \n    return ''.join([str(x) for x in res])\n    \n    \ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1337\\n1 2 5 4 6 6 3 1 9\\n\")\n    '1557'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1]\n    f = [int(c) for c in stdin.split(\"\\n\")[2]]\n\n    # Transform a into a list of integers\n    a = [int(c) for c in a]\n\n    # Create a table with f(1)... f(9)\n    table = [[f[i]] * 10 for i in range(10)]\n\n    # Get all subsets of the list\n    subsets = [a[i:j] for i in range(len(a) + 1) for j in range(i + 1, len(a) + 1)]\n\n    # Calculate the maximum sum of the table for each subset\n    max_sum = 0\n    for subset in subsets:\n        tmp = 0\n        for digit in subset:\n            tmp += table[digit - 1][0]\n        max_sum = max(max_sum, tmp)\n\n    return str(max_sum)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1337\\n1 2 5 4 6 6 3 1 9\")\n    '1557'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1]\n    f = [int(i) for i in stdin.split(\"\\n\")[2].split(\" \")]\n    x = sum([i for i in range(n) if int(a[i])!= f[i]])\n    return str(int(a[:x]) + sum([f[i] for i in range(x, n)]))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1337''')\n    '1557'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f = stdin.split('\\n')[2]\n    f = [int(i) for i in f]\n    if len(f)!= 9:\n        raise Exception\n    t = 0\n    for i in range(n):\n        if a[i]!= \"0\":\n            t += 10 ** (n - i - 1) * f[int(a[i]) - 1]\n        else:\n            t += int(a[i])\n    t += int(a[0]) * 10 ** (n - 1)\n    return str(t)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number obtained by applying the operation no more than once.\"\"\"\n    n = int(stdin)\n    a = list(stdin)\n    m = [int(i) for i in stdin]\n    f = [int(i) for i in stdin[1::2]]\n    k = [int(i) for i in stdin[0::2]]\n    max_num = [0]\n    for i in range(1, n):\n        max_num.append(max(max_num[i-1], int(a[i])*k[i]))\n    for i in range(n):\n        max_num[i] += int(a[i])*f[i]\n    return str(max(max_num))\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        a, b, c = map(int, stdin.readline().split())\n        x = [a, b, c]\n        x.sort()\n        r = 0\n        if x[1] % x[0] == 0:\n            r = x[2] % x[1]\n        else:\n            r = x[0] + x[2]\n        if r == 0:\n            print(0)\n            print(a, b, c)\n        else:\n            print(r)\n            print(x[0], x[1], x[2])\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    'Finds the minimum number of operations needed to get a triple where the second number is divisible by the first and the third is divisible by the second.'\n    num = int(stdin)\n    for _ in range(num):\n        a, b, c = map(int, stdin.split())\n        a_div = b//a\n        b_div = c//b\n        c_div = a_div//b_div\n        if a_div >= c_div:\n            res = c_div\n            a, b = a*c_div, b*c_div\n        else:\n            res = a_div\n            a, b = a*a_div, b*a_div\n        print(res)\n        print(a, b, c)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple solution\"\"\"\n    \n    return ''"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count(n1, n2, n3):\n        count = 0\n        n = abs(n1 - n2)\n        if n == 0:\n            if n3 % n1 == 0:\n                return 0\n            if n3 % n2 == 0:\n                return 1\n            if n3 % n1 == 0:\n                return 1\n            else:\n                return 2\n        count += n // n2\n        n = n % n2\n        if n % n3 == 0:\n            return count\n        if n == 0:\n            return count + 1\n        return count + 2\n\n    def find(n, t):\n        while n > t:\n            n = n % t\n        return n\n\n    n1, n2, n3 = map(int, stdin.split())\n    res = count(n1, n2, n3)\n    if res == 0:\n        return '1 1 {}'.format(n3)\n    elif res == 1:\n        return '{} {} {}'.format(n1, n2, n3)\n    elif res == 2:\n        return '{} {} {}'.format(n1, n3, n2)\n    else:\n        if n3 % n2 == 0:\n            return '{} {} {}'.format(n1, n2, n3)\n        if n3 % n1 == 0:\n            return '{} {} {}'.format(n1, n3, n2)\n        return '{} {} {}'.format(n2, n3, n1)\n\n\nassert (solution('1 2 3') == '1 1 3')\nassert (solution('123 321 456') == '102')\nassert (solution('5 10 15') == '4')\nassert (solution('15 18 21') == '4')\nassert (solution('100 100 101') == '7')\nassert (solution('1 22 29') == '2')\nassert (solution('3 19 38') == '8')\nassert (solution('6 30 46') == '6')\nassert (solution('1 2') == '2 1')\nassert (solution('1 1') == '1 1')\nassert (solution('1 2 1') == '2 1')\nassert (solution('1 1 2') == '1 1 2')\nassert (solution('1 1 2 1 1') == '2 2 1')\nassert (solution('1 1 1 1 1 1') == '1 1 1 1 1')\nassert (solution('1 1 1 1 1 1 1') == '1 1 1 1 1 1')\nassert (solution('1 1 2 2') == '2 2 1')\nassert (solution('1 1 1 1 1 2 1') == '1 1 1 1 1 2 1')\nassert (solution('1 1 1 1 1 1 2') == '1 1 1 1 1 2 1')\nassert (solution('1 1 1 1 1 1 1 1') == '1 1 1 1 1 1 1 1')\nassert (solution('1 1 1 1 1 1 1 1 1') == '1 1 1 1 1 1 1 1 1')\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_int(s):\n        return int(s)\n\n    def get_ints(sep=' ', f=str):\n        return [get_int(s) for s in stdin.strip().split(sep) if s]\n\n    t = get_int(stdin)\n    for _ in range(t):\n        a, b, c = get_ints()\n        res = 1\n        while a!= b and b!= c:\n            if a > b:\n                a -= b\n            else:\n                b -= a\n            if b > c:\n                b -= c\n            else:\n                c -= b\n            res += 1\n        print(res)\n        if res % 2 == 0:\n            print(a, b, c)\n        else:\n            print(b, c, a)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a Java source code that implements\n    the class with the given name. The name of the class is 'Tricky'.\n    \"\"\"\n    def f(s):\n        \"\"\"Return the number of steps to make the operation in the given\n        'x++' or 'x--' statement.\n        \"\"\"\n        if s == 'x++':\n            return 1\n        else:\n            return -1\n\n    def f_div(s):\n        \"\"\"Return the number of steps to make the operation in the given\n        'x += y' statement.\n        \"\"\"\n        assert s.startswith('x ') and s.endswith(' = y')\n        return int(s[2:-2])\n\n    answers = []\n    for t in range(int(stdin.readline())):\n        a, b, c = map(int, stdin.readline().split())\n        a, b, c = sorted([a, b, c])\n        t = f(stdin.readline())\n        r = 0\n        while t!= 0:\n            if b % a == 0:\n                t = t + f_div(stdin.readline())\n                r = r + f_div(stdin.readline())\n            else:\n                a = a + 1\n                t = t + 1\n        answers.append(str(r) + '\\n' + str(a) +'' + str(b) +'' + str(c))\n    return ''.join(answers)"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def search(stdin: str) -> str:\n        target = stdin.split(\" \")\n        a, b, c = target[0], target[1], target[2]\n        a, b, c = int(a), int(b), int(c)\n        count = 0\n        while True:\n            count += 1\n            b = b % a\n            c = c % b\n            if c == 0:\n                break\n        return count\n    return str(search(stdin))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    number = int(input[0])\n    array = list(map(int, input[1].split(\" \")))\n    array.sort()\n    if number == len(array):\n        return \"0\"\n    elif number == len(array) - 1:\n        return str(array[1] - array[0])\n    else:\n        max_val = array[number - 1]\n        min_val = array[0]\n        for i in range(1, number):\n            if max_val < array[i] + array[i - 1]:\n                max_val = array[i] + array[i - 1]\n            if min_val > array[i] - array[i - 1]:\n                min_val = array[i] - array[i - 1]\n        return str(max_val - min_val)\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split('\\n')]\n    return str(max(a) - min(a))"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a = [int(s) for s in stdin.split(\"\\n\")[1].split()]\n    min_n = max_n = a[0]\n    for i in range(1, len(a)):\n        min_n = min(min_n, a[i])\n        max_n = max(max_n, a[i])\n    return max_n - min_n\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #2\n    #1 100000\n    #3 9 5 6\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    res = float('inf')\n    for i in range(len(arr) - 1):\n        res = min(res, arr[i + 1] - arr[i])\n    return res\n    # #2\n    # arr = list(map(int, stdin.split()))\n    # arr.sort()\n    # return arr[1] - arr[0]\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3 3 7''')\n    2\n    >>> solution('''2\n   ... 1 100000''')\n    0\n    \"\"\"\n    _, a = stdin.split('\\n')\n    a = [int(x) for x in a.split(' ')]\n\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = sorted(int(x) for x in stdin.readline().split())\n    ans = n\n    for i in range(n):\n        ans = min(ans, nums[i + 1] - nums[i])\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split()]\n    n = len(a)\n\n    min_num = min(a)\n    max_num = max(a)\n    res = max_num - min_num\n\n    if res == 0:\n        print(0)\n        return\n\n    for i in range(n):\n        if a[i] == min_num:\n            continue\n        if a[i] == max_num:\n            continue\n\n        res = min(res, a[i] - min_num)\n\n    print(res)\n    return\n\nsolution('4 3 3 7')\nsolution('1 100000')\nsolution('2 1 100000')"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(x) for x in stdin.split()]\n    num = lst[0]\n    lst = lst[1:]\n\n    diff = [abs(lst[i] - min(lst)) for i in range(num)]\n    diff.sort(reverse=True)\n    print(sum(diff[1:]) + max(lst))"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sorted(list(map(int, stdin.split('\\n')[1:][0].split(' ')))).index(min(sorted(list(map(int, stdin.split('\\n')[1:][0].split(' '))),reverse=True))))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2\\n1 3 1\\n1 5 1\")\n    '1 2 3 0 3'\n    >>> solution(\"3 2\\n1 3 1\\n1 2 1\")\n    '-1'\n    >>> solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\")\n    '2 2 2 1 1 0 4 3 4 4'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    stdin = stdin.split('\\n')\n    a = []\n    b = []\n    c = []\n    for i in range(m):\n        d, e, f = map(int, stdin[i].split())\n        a.append(d)\n        b.append(e)\n        c.append(f)\n    a.sort()\n    for i in range(1, m):\n        if a[i] - a[i - 1]!= 1:\n            return \"-1\"\n    ans = []\n    p = [0]\n    for i in range(1, n + 1):\n        if i not in a:\n            ans.append(0)\n        elif i == a[0]:\n            ans.append(1)\n            p[0] += 1\n        else:\n            for j in range(len(a)):\n                if i == a[j]:\n                    if p[j] == c[j]:\n                        ans.append(0)\n                        break\n                    else:\n                        ans.append(1)\n                        p[j] += 1\n                        break\n    return''.join(map(str, ans))"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n1 3 1\\n1 2 1\")\n    '1 2 3 0 3'\n    >>> solution(\"5 2\\n1 3 1\\n1 2 1\")\n    '-1'\n    >>> solution(\"3 2\\n1 3 1\\n1 2 1\")\n    '2 2 2 1 1 0 4 3 4 4'\n    >>> solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\")\n    '2 2 2 1 1 0 4 3 4 4'\n    \"\"\"\n    number_of_days, number_of_exams = [int(x) for x in stdin.split()]\n    exam_days = []\n    for _ in range(number_of_exams):\n        exam_days.append(tuple(int(x) for x in stdin.split()[1:]))\n    exam_days = sorted(exam_days)\n    exam_days_deltas = []\n    for i in range(1, len(exam_days)):\n        exam_days_deltas.append(exam_days[i][0] - exam_days[i - 1][0])\n    exam_days_deltas = list(set(exam_days_deltas))\n    if len(exam_days_deltas) > 1:\n        return \"-1\"\n    else:\n        days = [0] * number_of_days\n        days_indices = {0}\n        for exam_days_delta in exam_days_deltas:\n            for exam_days_index in range(number_of_exams):\n                exam_days_index = exam_days[exam_days_index][0] - exam_days_delta\n                if exam_days_index < 1:\n                    exam_days_index += number_of_days\n                if exam_days_index in days_indices:\n                    continue\n                days[exam_days_index - 1] += 1\n                days_indices.add(exam_days_index)\n        return''.join(map(str, days))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport collections\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    firstLine = stdin.split('\\n')\n    n, m = firstLine[0].split()\n    n = int(n)\n    m = int(m)\n    secondLine = firstLine[1].split('\\n')\n    exams = {}\n    for i in range(m):\n        s, d, c = secondLine[i].split()\n        s, d, c = int(s), int(d), int(c)\n        exams[s] = (d, c)\n    dp = [[0 for j in range(n)] for i in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][0] = exams[i][0]\n    for j in range(1, n):\n        dp[0][j] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1][j] + 1)\n            if dp[i][j] > dp[m][j]:\n                return \"-1\"\n    result = []\n    for i in range(1, m + 1):\n        for j in range(1, n):\n            if dp[i][j] == dp[m][j]:\n                result.append(i)\n                break\n    for i in range(n):\n        print(result[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    exams = [i.split() for i in stdin.split('\\n')]\n    exams = [[int(i) for i in row] for row in exams]\n    exams = sorted(exams, key=lambda x: (x[0], x[1]))\n\n    students = 0\n    for day in exams:\n        if day[0] > students:\n            students += 1\n            print(students)\n        else:\n            print(students)\n    return \"\"\n\nprint(solution(stdin))\n\n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = list(map(int, stdin[0].split()))\n    exam = stdin[1:]\n    exam = sorted([list(map(int, exam[i].split())) for i in range(m)])\n    counter = 0\n    for i in range(m):\n        s, d, c = exam[i]\n        for j in range(s, d + 1):\n            if j not in [exam[j][0] for j in range(counter, m)]:\n                break\n        counter += 1\n    if counter == m:\n        print(stdin[0])\n        return\n    elif counter > m:\n        return -1\n    else:\n        print(counter)\n        for i in range(m):\n            s, d, c = exam[i]\n            print(s, end=\" \")\n            print(d, end=\" \")\n            print(c)\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    exam = list(map(lambda x: list(map(int, x.split(' '))), stdin.split('\\n')[1:]))\n    exam = sorted(exam, key=lambda x: x[1])\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for exam in exam:\n        i, j = exam\n        if dp[i - 1] == 0 or dp[i - 1] > j:\n            dp[i] = j\n        elif dp[i - 1] + j > n:\n            return -1\n        else:\n            dp[i] = j + dp[i - 1]\n    return''.join(list(map(str, dp[1:])))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    print(solve(*stdin.split('\\n')))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cnt = 0\n    while n!= m:\n        if n % 3 == 0 and m % 3 == 0:\n            n *= 3\n            m *= 3\n            cnt += 1\n        elif n % 3!= 0 and m % 3 == 0:\n            m *= 3\n            cnt += 1\n        elif n % 3 == 0 and m % 3!= 0:\n            n *= 3\n            cnt += 1\n        elif n % 3!= 0 and m % 3!= 0:\n            n = n * 2 if n % 3 == 0 else n\n            m = m * 2 if m % 3 == 0 else m\n            cnt += 1\n    return str(cnt) if n == m else '-1'\n\nsolution('120 51840')\nsolution('42 42')\nsolution('48 72')\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(0)\n    if m <= n * 3:\n        if m % 2 == 0:\n            return str(n - m // 2)\n        return str(-1)\n    while m % 3!= 0:\n        n, m = m, m - n\n    return str(n // 3)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''.join(solution)"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(b // a)\n    for i in range(a, b + 1):\n        if i % 2 == 0 and i % 3!= 0:\n            return str(i)\n\n    return '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \" \".join(map(str, solve(stdin)))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_1, number_2 = [int(x) for x in stdin.split()]\n    result = 0\n    while number_2!= number_1:\n        if number_1 < number_2:\n            number_1 *= 2\n        else:\n            number_1 *= 3\n        result += 1\n    if result == 0:\n        return \"-1\"\n    else:\n        return str(result)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn, m = map(int, stdin.split())\ncnt = 0\nwhile n!= m:\n    if n == 0:\n        n, m = m, n\n    if n % 2 == 0:\n        n //= 2\n    elif n % 3 == 0:\n        n //= 3\n    else:\n        n -= 1\n    cnt += 1\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, *t = stdin.split('\\n')\n    n, k = map(int, t[0].split())\n    t = t[1]\n\n    # Build an array of substrings of t\n    substrings = []\n    for i in range(n):\n        substrings.append(t[i:i+n])\n\n    # Sort the substrings lexicographically\n    substrings.sort()\n\n    # Assign the correct substrings to the correct locations\n    correct_substrings = [[] for i in range(k)]\n    for i, substring in enumerate(substrings):\n        correct_substrings[i % k].append(substring)\n\n    # Concatenate the correct substrings into a single string\n    result = ''\n    for substring in correct_substrings:\n        result += ''.join(substring)\n\n    return result\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\n\n    Parameters\n    ----------\n    stdin: str\n        The standard input of the input of the problem\n\n    Returns\n    -------\n    str\n        The solution to the problem\n\n    \"\"\"\n\n    # Read in the input\n    n, k = [int(i) for i in stdin.split()]\n    t = stdin.split()[1]\n\n    def pattern_recursive(t, pattern: str, k: int, n: int, pattern_length: int, i: int) -> str:\n        \"\"\"\n        Parameters\n        ----------\n        t: str\n            the string to be compared\n        pattern: str\n            the pattern\n        k: int\n            number of required matches\n        n: int\n            length of the string t\n        pattern_length: int\n            the length of the pattern\n        i: int\n            the current position in the string\n\n        Returns\n        -------\n        str\n            The solution to the problem\n        \"\"\"\n        # If there is enough matches\n        if k == 0:\n            # Return the current pattern\n            return pattern\n        # If we are at the end of the string\n        if i + pattern_length > n:\n            # Return the string with no pattern\n            return t\n        # If the pattern is a substring of the string\n        if t[i:i + pattern_length] == pattern:\n            # Add the next character to the pattern\n            next_pattern = pattern + t[i + pattern_length]\n            # Recursive call\n            return pattern_recursive(t, next_pattern, k - 1, n, pattern_length + 1, i + pattern_length)\n        # If the pattern is not a substring of the string\n        else:\n            # Recursive call on the next position\n            return pattern_recursive(t, pattern, k, n, pattern_length, i + 1)\n\n    solution = pattern_recursive(t, '', k, n, 0, 0)\n    return solution\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input: 'aba', '3'\n    output: 'abababa'\n    '''\n    s = stdin.strip()\n    n = len(s)\n    k = int(stdin[0])\n    p = [0] * n\n    p[0] = 1\n    for i in range(1, n):\n        t = 0\n        for j in range(i, n, i):\n            if s[j:j + i] == s[0:i]:\n                t += 1\n        p[i] = t\n    ans = ''\n    for i in range(n):\n        if p[i] == k:\n            ans += s[i]\n    return ans\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    n_k_t = t * (k - 1)\n    while len(n_k_t) < n * k:\n        n_k_t = n_k_t + t\n    return n_k_t[:n * k]\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    t = stdin[:n]\n    \n    if len(t) < k:\n        return 'Impossible'\n    \n    if len(t) == k:\n        return t\n    \n    counter = Counter(t)\n    \n    min_t = [k] * len(t)\n    \n    for i, letter in enumerate(t):\n        if letter in counter:\n            counter[letter] -= 1\n            if counter[letter] == 0:\n                del counter[letter]\n            \n            if min_t[i] > 1:\n                min_t[i] -= 1\n        else:\n            min_t[i] -= 1\n    \n    while len(counter) > 0 and min_t.count(k) > 0:\n        min_t.append(k)\n        \n    for i, letter in enumerate(t):\n        if letter in counter:\n            min_t[i] -= 1\n            if min_t[i] == 0:\n                del counter[letter]\n    \n    min_t = sorted(min_t)\n    \n    if len(counter) == 0 and len(min_t) < n:\n        return 'Impossible'\n    \n    return ''.join([t[i] for i in range(len(t)) if i not in min_t])\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = stdin[0: n]\n    assert len(t) == n\n\n    visited = {}\n    def dfs(string, substring):\n        if string == t and substring == k:\n            return True\n        if len(string) > n or len(substring) > k or string in visited:\n            return False\n        for i in range(n - 1):\n            if string[i: i + 2] == string[i + 1: i + 2 + 1]:\n                res = dfs(string[: i] + string[i + 1:], substring + 1)\n                if res:\n                    return True\n        visited[string] = True\n        return False\n\n    return t if k == 1 else t[: n - 1] + t[0] if dfs(t, 1) else t\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[0:n]\n    min_len = n ** 2\n\n    for i in range(n - k + 1):\n        sub_s = s[i:i + k]\n        if sub_s == sub_s[::-1]:\n            min_len = min(min_len, len(sub_s))\n    return min_len * \"a\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find a substring of the given string t such that there are exactly k substrings of s equal to t.\n\n    :param stdin:\n    :return:\n    \"\"\"\n    # l = len(t)\n    #\n    # # For every possible substring of length k we check if it is equal to the substring t\n    # # And if it is, we add it to the result\n    # # The time complexity is O(n + k * l^2) where n is the length of t and l is the length of the substring\n    # for i in range(0, l - k + 1):\n    #     found = True\n    #     for j in range(0, k):\n    #         if t[i + j]!= s[j]:\n    #             found = False\n    #             break\n    #     if found:\n    #         return t[i: i + k]\n    #\n    # return \"\"\n\n    l, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    s = \"\"\n\n    for i in range(0, l - k + 1):\n        found = True\n        for j in range(0, k):\n            if t[i + j]!= t[j]:\n                found = False\n                break\n        if found:\n            s += t[i: i + k]\n            s += \" \"\n\n    return s.strip()\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = stdin[:n]\n\n    s = [''] * (n + 1)\n    if k == 1:\n        return a\n\n    for i in range(n - 1, -1, -1):\n        if k == 1:\n            s[i] = a[i:]\n            return ''.join(s)\n        for j in range(i, n):\n            if a[i] == a[j] and (k - 1) * (j - i + 1) >= 0:\n                k -= 1\n                s[i] = a[i:j + 1]\n    return ''.join(s)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the above problem\"\"\"\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return None"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    nice_indices = []\n    for i in range(n):\n        removed = a.pop(i)\n        if check_good(a):\n            nice_indices.append(i)\n        a.insert(i, removed)\n    if nice_indices:\n        print(len(nice_indices))\n        print(' '.join(str(i) for i in nice_indices))\n    else:\n        print('0')\n    return nice_indices\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find indices of nice numbers\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    if n == 0:\n        return 0\n\n    # count the sum of every index\n    s = [0] * n\n    s[0] = arr[0]\n    for i in range(1, n):\n        s[i] = s[i - 1] + arr[i]\n\n    # write the good indices\n    good = 0\n    for i in range(n):\n        if s[i] == i + 1:\n            good += 1\n            print(i + 1)\n    return good\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    - takes one line input str (stdin)\n    - return one line output str\n    '''\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of nice indices in the array\n    \"\"\"\n    # Get input\n    n = int(stdin.readline().strip('\\n'))\n    arr = [int(i) for i in stdin.readline().strip('\\n').split(' ')]\n\n    # Get nice indices\n    count = 0\n    nice_indices = []\n    for i in range(len(arr)):\n        removed = False\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == arr[-1]:\n                removed = True\n                count += 1\n                nice_indices.append(j)\n                break\n        if removed:\n            break\n    return str(count) +'' +''.join([str(i) for i in nice_indices])\n\nprint(solution('5\\n2 5 1 2 2\\n'))"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an array a of n integers where a[i] = x[i] + y[i], \n    return the number of indices i such that after the removal of a[i]\n    the array will be good.\n    '''\n    pass\n    _, x = stdin.split('\\n')\n    n = int(x)\n    arr = list(map(int, x.split()))\n    \n    good = sum(arr)\n    bad = sum(arr)\n    for i in range(n):\n        bad -= arr[i]\n        if bad < good:\n            good -= arr[i]\n            arr[i] = bad\n    print(arr.count(good))\n    print(*arr)\n    \n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if not a:\n        return 0\n    \n    # all the possible sums\n    sums = set()\n    for i in range(n):\n        sums.add(sum(a))\n        \n    # check if good\n    good = 0\n    for i in range(n):\n        # remove one element at a time\n        if a[i] in sums:\n            good += 1\n            sums.remove(a[i])\n            a.pop(i)\n            for j in range(i, n - 1):\n                a[j] -= a[j + 1]\n    \n    return good\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    s = sum(a)\n    m = min(a)\n    if m < s:\n        print(0)\n        return\n\n    m -= s\n    s = 0\n    for i in range(n):\n        if a[i] - m > s:\n            print(i + 1)\n            return\n\n        s += a[i] - m\n\n    print(0)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 5\\nsdf\\n')\n    4\n    \"\"\"\n    pass"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    words = stdin.split('\\n')\n    s = words[0]\n    set_list = []\n    n_list = []\n    count = 0\n    for i in s:\n        set_list.append(i)\n    for i in range(len(set_list)):\n        n_list.append(i)\n    for i in range(len(set_list)):\n        set_list.append(set_list[i])\n        n_list.append(n_list[i])\n    for i in range(len(set_list)):\n        set_list.append(set_list[i])\n        n_list.append(n_list[i])\n    # print(set_list, n_list)\n    for i in range(len(set_list)):\n        if n_list[i] in set_list:\n            count += 1\n        if count == k:\n            break\n    if n - count == 0:\n        return 0\n    elif n - count < k:\n        return -1\n    else:\n        return (n - count)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    S = set()\n    S.add(stdin[:k])\n    for i in range(k, n):\n        S.add(stdin[i] + stdin[i - k])\n    if len(S) < k:\n        return '-1'\n    return len(stdin) - len(S)"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split(\" \")\n    k = int(k)\n\n    s = list(s)\n    if k == len(s):\n        return 0\n\n    S = set()\n    cost = 0\n    min_cost = float('inf')\n    for i in range(len(s)):\n        S.add(s[i])\n        cost += (len(s) - len(S))\n        if len(S) == k:\n            min_cost = min(min_cost, cost)\n            S.remove(s[i])\n            cost -= (len(s) - len(S))\n    if min_cost == float('inf'):\n        return -1\n    else:\n        return min_cost"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_cost(s: str) -> int:\n        cost = len(s)\n        for c in set(s):\n            cost -= s.count(c)\n        return cost\n\n    n, k = map(int, stdin.split(' '))\n    s = stdin\n    cost = k\n    ans = 0\n    for i in range(1, len(s) + 1):\n        cur = s[:i]\n        if cur not in s[i:] or cur == s:\n            continue\n        c = calculate_cost(cur)\n        if c > cost or c < ans:\n            continue\n        cost = c\n        ans = c\n    if ans == k:\n        return str(ans)\n    return str(-1)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\nasdf\")\n    4\n    >>> solution(\"5 6\\naaaaa\")\n    15\n    >>> solution(\"5 7\\naaaaa\")\n    -1\n    >>> solution(\"10 100\\najihiushda\")\n    233\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin[:-1]\n    s = sorted(s, key=lambda x: s.count(x))\n\n    dic = {}\n    for char in s:\n        if char not in dic:\n            dic[char] = 1\n        else:\n            dic[char] += 1\n\n    if len(dic.keys()) < k:\n        return -1\n\n    total = 0\n    for key, val in dic.items():\n        total += (val - 1) * (s.count(key) - 1)\n\n    return total\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    string = stdin.strip()\n\n    # Remove all possible duplicates.\n    seen = set()\n    seen_add = seen.add\n    string = [x for x in string if not (x in seen or seen_add(x))]\n\n    # Create the set S.\n    count = 0\n    lst = []\n    for char in string:\n        count += 1\n        lst.append(char)\n        if len(lst) == k:\n            print(count)\n            return\n\n    print(-1)\n    return \"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a very standard implementation of a MST problem\n    Input:\n    n, m, D\n\n    m lines, each is v, u, w\n    n nodes, 0 to n-1\n    Output:\n    YES or NO\n    \"\"\"\n    n, m, D = map(int, stdin.split())\n    adj_list = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u, w = map(int, stdin.split())\n        adj_list[v].append((u, w))\n        adj_list[u].append((v, w))\n    # DFS\n    visited = [False] * n\n    stack = []\n    stack.append(1)\n    visited[1] = True\n    while stack:\n        v = stack.pop()\n        for u, w in adj_list[v]:\n            if not visited[u]:\n                stack.append(u)\n                visited[u] = True\n    # check for D\n    if visited.count(True)!= D:\n        return \"NO\"\n    # for D\n    for v, u, _ in adj_list[1]:\n        if not visited[u]:\n            return \"NO\"\n    # for edge\n    for i in range(1, n):\n        if not visited[i]:\n            return \"NO\"\n    # return\n    return \"YES\\n\" + \"\\n\".join([f\"{u} {v}\" for v, u, _ in adj_list[1]])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the minimum spanning tree of a tree with the given degree,\n    where the first vertex is always the first in the tree.\n    This is equivalent to finding the minimum spanning tree of a tree\n    with the given degree, if the graph was undirected.\n    '''\n\n    # num vertices, num edges, degree of first vertex\n    (n, m, d) = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n\n    # map of vertex to its neighbours\n    neighbours = {}\n    for _ in range(m):\n        (v, u) = [int(x) - 1 for x in stdin.split('\\n')[_].split(' ')]\n        neighbours[v] = neighbours[u] = neighbours.get(v, set()) | {u}\n        neighbours[u] = neighbours[v] = neighbours.get(u, set()) | {v}\n\n    # sum of degrees of the vertices\n    degree_sum = sum(len(neighbours[v]) for v in range(n))\n\n    # no spanning tree exists\n    if degree_sum < d or n - 1 < d:\n        return 'NO'\n\n    # degree of the first vertex is d\n    first_degree = len(neighbours[0])\n\n    # order of the vertices, used for printing\n    order = [0] * n\n    for v in range(n):\n        order[v] = v\n    order[0] = None\n\n    # iterate over the possible combinations\n    for combination in itertools.combinations(range(n), d):\n        combination_sum = sum(len(neighbours[v]) for v in combination)\n\n        # degree is correct\n        if combination_sum == d and first_degree == d:\n            # do not include the first vertex in the set\n            return 'YES\\n{}'.format('\\n'.join(\n                '{} {}'.format(v, u)\n                for v, u in sorted(\n                    (order[v], order[u])\n                    for v, u in zip(combination, neighbours[0])\n                )\n            ))\n\n    # should never get here\n    return 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    edges.sort()\n    edges = [v for v, u in edges]\n    vertex_set = set(range(1, n + 1))\n    for edge in edges:\n        vertex_set.remove(edge)\n\n    if len(vertex_set) == 0:\n        print(\"YES\")\n        print(*edges, sep='\\n')\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(data: List[List[int]]) -> str:\n        graph = {}\n        for v, u in data:\n            if v not in graph:\n                graph[v] = set()\n            if u not in graph:\n                graph[u] = set()\n            graph[v].add(u)\n            graph[u].add(v)\n        n, m, d = data[0][0], data[0][1], data[0][2]\n        if n == 1 or d == 1:\n            return \"YES\"\n        if n == 2:\n            return \"NO\"\n\n        def dfs(graph: dict, visited: List[bool], n: int, d: int, res: List[List[int]]) -> None:\n            visited[n] = True\n            if n == d:\n                res.append(list(graph[n]))\n            for u in graph[n]:\n                if not visited[u]:\n                    dfs(graph, visited, u, d, res)\n            visited[n] = False\n\n        visited = [False] * n\n        res = []\n        dfs(graph, visited, 1, d, res)\n        res = sorted(res)\n        for i in range(len(res)):\n            if set(res[i])!= set(data[i][0]):\n                return \"YES\"\n        return \"NO\"\n\n    n, m, d = [int(i) for i in stdin.split(\" \")]\n    data = []\n    for _ in range(m):\n        data.append([int(i) for i in stdin.split(\" \")])\n    res = solve(data)\n    return res\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    n, m, d = [int(i) for i in stdin.split()]\n    edges = []\n    for _ in range(m):\n        x, y = [int(i) for i in stdin.split()]\n        edges.append((x, y))\n        edges.append((y, x))\n\n    def dfs(start, depth):\n        visited = set()\n        curr_depth = depth\n        for nbr in graph[start]:\n            if (nbr, start) in visited:\n                continue\n            visited.add((start, nbr))\n            visited.add((nbr, start))\n            curr_depth = max(curr_depth, dfs(nbr, curr_depth + 1))\n        return curr_depth\n\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = set()\n\n    for i, j in edges:\n        graph[i].add(j)\n        graph[j].add(i)\n\n    start = 1\n    for i in range(1, n):\n        if dfs(start, 1) >= i:\n            start = i\n            break\n\n    if start == 1:\n        return 'YES'\n\n    return 'NO'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M, D = map(int, stdin.split(' '))\n    graph = {i: [] for i in range(1, N + 1)}\n    for _ in range(M):\n        v, u = map(int, stdin.split(' '))\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(curr, parent):\n        if visited[curr]:\n            return\n        visited[curr] = True\n        for u in graph[curr]:\n            if u!= parent:\n                dfs(u, curr)\n\n    visited = {i: False for i in graph}\n    for i in range(1, N + 1):\n        if not visited[i]:\n            dfs(i, -1)\n    if len(visited)!= N or sum(visited.values())!= N - 1:\n        return 'NO'\n\n    def write_out(curr, parent):\n        nonlocal ans\n        if curr == D:\n            ans = True\n            return\n        for u in graph[curr]:\n            if u!= parent:\n                write_out(u, curr)\n\n    ans = False\n    for i in range(1, N + 1):\n        if not visited[i]:\n            write_out(i, -1)\n    if not ans:\n        return 'NO'\n\n    return 'YES\\n' + '\\n'.join(\n        f'{i} {j}' for i, j in graph.items() if i == D)\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(num) for num in stdin.split(' ')]\n\n    connections = []\n    for _ in range(m):\n        connections.append([int(num) for num in stdin.split(' ')])\n\n    def bfs(first_vertex, connections, visited):\n        queue = collections.deque([first_vertex])\n        visited.add(first_vertex)\n        while queue:\n            current_vertex = queue.popleft()\n            for neighbor in connections[current_vertex - 1]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n                    visited.add(neighbor)\n\n    def is_spanning(connections, visited, d):\n        return d == len(visited)\n\n    for vertex in range(1, n+1):\n        visited = set()\n        if not is_spanning(connections, visited, d):\n            bfs(vertex, connections, visited)\n\n        if is_spanning(connections, visited, d):\n            break\n\n    if is_spanning(connections, visited, d):\n        print('YES')\n        for edge in sorted(visited):\n            print(edge, end=' ')\n    else:\n        print('NO')\n\n    return ''\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    m3 = int((int(h1) + int(h2)) / 2)\n    h3 = int(m3)\n    return \"%02d:%02d\" % (h3, m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t_1 = stdin[0:2]\n    t_2 = stdin[3:5]\n    t_1_h = int(t_1[0:2])\n    t_1_m = int(t_1[3:5])\n    t_2_h = int(t_2[0:2])\n    t_2_m = int(t_2[3:5])\n\n    if t_1_h < t_2_h:\n        t_3_h = t_1_h + 1\n    elif t_1_h > t_2_h:\n        t_3_h = t_1_h\n    else:\n        t_3_h = t_1_h\n\n    if t_1_m < t_2_m:\n        t_3_m = t_1_m + 1\n    elif t_1_m > t_2_m:\n        t_3_m = t_1_m\n    else:\n        t_3_m = t_1_m\n\n    if t_3_m == 60:\n        t_3_m = 0\n        t_3_h += 1\n\n    if t_3_h == 24:\n        t_3_h = 0\n\n    return f\"{t_3_h:02d}:{t_3_m:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = stdin.split('\\n')[0].split(':')\n    hours = int(hours)\n    minutes = int(minutes)\n    duration = (int(hours) * 60 + int(minutes)) + 30\n    hours = duration // 60\n    minutes = duration % 60\n    return f\"{hours:02}:{minutes:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first_start, first_end = stdin.split(' ')\n    first_start_h, first_start_m = map(int, first_start.split(':'))\n    first_end_h, first_end_m = map(int, first_end.split(':'))\n\n    current_start_h = first_start_h\n    current_start_m = first_start_m\n    current_end_h = first_end_h\n    current_end_m = first_end_m\n\n    while current_start_m % 2!= current_end_m % 2:\n        current_start_m += 1\n        current_end_m += 1\n    while current_start_m % 2 == current_end_m % 2:\n        current_start_m += 1\n        current_end_m += 1\n        if current_start_m == 60:\n            current_start_h += 1\n            current_start_m = 0\n        if current_end_m == 60:\n            current_end_h += 1\n            current_end_m = 0\n        if current_end_h > 23:\n            break\n\n    return f'{current_start_h:0>2}:{current_start_m:0>2}'\n\nprint(solution('10:00 11:00'))\nprint(solution('11:10 11:12'))\nprint(solution('01:02 03:02'))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a[:2]), int(b[:2])\n    return f'{(a+b)//2:02}:{(a+b)%2*30:02}'\n\"\"\"\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    h3 = (int(h1) + int(h2)) // 2\n    m3 = (int(m1) + int(m2)) // 2\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    beginning = [int(s) for s in stdin.split() if s.isdigit()]\n    hours, minutes = beginning[0], beginning[1]\n    end = [int(s) for s in stdin.split() if s.isdigit()]\n    hours, minutes = end[0], end[1]\n    midpoint = hours, minutes\n    return ':'.join([str(n).zfill(2) for n in midpoint])\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the time of the midpoint of the contest.\"\"\"\n    # read starting time and ending time from input\n    s = stdin.strip()\n    h1, m1 = int(s[0:2]), int(s[3:5])\n    h2, m2 = int(s[6:8]), int(s[9:])\n    # m1 and m2 must be even\n    if m1 % 2!= 0 or m2 % 2!= 0:\n        raise ValueError('m1 and m2 must be even.')\n    # get time of the contest in minutes\n    time = ((h2 - h1) * 60) + (m2 - m1)\n    # get the hour and minutes of the contest\n    h = time // 60\n    m = time % 60\n    # get the hour and minutes of the midpoint of the contest\n    h3 = h1 + h\n    m3 = m1 + m // 2\n    return str(h3).zfill(2) + ':' + str(m3).zfill(2)"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n\n    return str(int(h1 + h2) % 24) + \":\" + str(int((int(m1) + int(m2)) % 60))"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h3 = (int(h1) + int(h2)) // 2\n    m3 = (int(m1) + int(m2)) // 2\n    if int(h3) < 10:\n        h3 = '0' + str(h3)\n    if int(m3) < 10:\n        m3 = '0' + str(m3)\n    return str(h3) + ':' + str(m3)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return 1\n    elif len(stdin) == 2:\n        return 2\n    else:\n        return int(len(stdin) / 2) + 1\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin) - 1)\n    return \"\"\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the longest intersection of the input sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Remove a segment from the sequence and return its length or 0.\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    segments = []\n    for line in stdin[1:]:\n        l, r = map(int, line.split())\n        segments.append((l, r))\n    segments.sort()\n    l, r = 0, 0\n    intersection = 0\n    for i in range(n - 1):\n        l, r = segments[i]\n        if r <= l:\n            continue\n        if r > r:\n            l, r = r, l\n        l, r = max(l, l + intersection), min(r, r + intersection)\n        if r < l:\n            intersection = 0\n            continue\n        if r > r:\n            intersection = r - l\n        else:\n            intersection = r - l + 1\n    if intersection:\n        return str(intersection)\n    return \"0\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        l, r = [int(x) for x in stdin.strip().split(' ')]\n        segments.append((l, r))\n\n    segments.sort()\n    segments.sort(key=lambda x: x[1])\n    # max_len = 0\n    # todo: \u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043d\u044b \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 \u044d\u0442\u0438\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432?\n    # todo: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0434\u043b\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         l1, r1 = segments[i]\n    #         l2, r2 = segments[j]\n    #         if l1 <= r2 <= r1 or l2 <= r1 <= r2:\n    #             continue\n    #         l3 = max(l1, l2)\n    #         r3 = min(r1, r2)\n    #         if l3 <= r3 <= r1:\n    #             continue\n    #         l4 = max(l1, l2)\n    #         r4 = min(r1, r2)\n    #         if l4 <= r4 <= r1:\n    #             continue\n    #         l5 = max(l3, l4)\n    #         r5 = min(r3, r4)\n    #         if l5 <= r5 <= r3:\n    #             continue\n    #         l6 = max(l3, l4)\n    #         r6 = min(r3, r4)\n    #         if l6 <= r6 <= r3:\n    #             continue\n    #         l7 = max(l5, l6)\n    #         r7 = min(r5, r6)\n    #         if l7 <= r7 <= r5:\n    #             continue\n    #         l8 = max(l5, l6)\n    #         r8 = min(r5, r6)\n    #         if l8 <= r8 <= r5:\n    #             continue\n    #         l9 = max(l7, l8)\n    #         r9 = min(r7, r8)\n    #         if l9 <= r9 <= r7:\n    #             continue\n    #         l10 = max(l7, l8)\n    #         r10 = min(r7, r8)\n    #         if l10 <= r10 <= r7:\n    #             continue\n    #         l11 = max(l9, l10)\n    #         r11 = min(r9, r10)\n    #         if l11 <= r11 <= r9:\n    #             continue\n    #         l12 = max(l9, l10)\n    #         r12 = min(r9, r10)\n    #         if l12 <= r12 <= r9:\n    #             continue\n    #         l13 = max(l11, l12)\n    #         r13 = min(r11, r12)\n    #         if l13 <= r13 <= r11:\n    #             continue\n    #         l14 = max(l13, l12)\n    #         r14 = min(r13, r12)\n    #         if l14 <= r14 <= r13:\n    #             continue\n    #         l15 = max(l13, l14)\n    #         r15 = min(r13, r14)\n    #         if l15 <= r15 <= r13:\n    #             continue\n    #         l16 = max(l15, l14)\n    #         r16 = min(r15, r14)\n    #         if l16 <= r16 <= r15:\n    #             continue\n    #         l17 = max(l15, l16)\n    #         r17 = min(r15, r16)\n    #         if l17 <= r17 <= r15:\n    #             continue\n    #         l18 = max(l17, l16)\n    #         r18 = min(r17, r16)\n    #         if l18 <= r18 <= r17:\n    #             continue\n    #         l19 = max(l17, l18)\n    #         r19 = min(r17, r18)\n    #         if l19 <= r19 <= r17:\n    #             continue\n    #         l20 = max(l19, l18)\n    #         r20 = min(r19, r18)\n    #         if l20 <= r20 <= r19:\n    #             continue\n    #         l21 = max(l19, l20)\n    #         r21 = min(r19, r20)\n    #         if l21 <= r21 <= r19:\n    #             continue\n    #         l22 = max(l21, l20)\n    #         r22 = min(r21, r20)\n    #         if l22 <= r22 <= r21:\n    #             continue\n    #         l23 = max(l22, l20)\n    #         r23 = min(r23, r22)\n    "
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def max_intersection(segments: List[List[int]]) -> int:\n        return 0\n\n    return \"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function receives a string of numbers\n    and returns the largest number of\n    segments that intersect with each other.\n    \"\"\"\n\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        s = [int(s) for s in stdin.split()]\n        segments.append(s)\n\n    # @see https://www.codewars.com/kata/5b55af2c5a92c30f9400002c\n    def segment_intersection(segment_a, segment_b):\n        # A point is valid if it is in the segment\n        def is_valid(point):\n            return (\n                segment_a[0] <= point[0] < segment_a[1]\n                or segment_b[0] <= point[0] < segment_b[1]\n            ) and (\n                segment_a[0] <= point[1] < segment_a[1]\n                or segment_b[0] <= point[1] < segment_b[1]\n            )\n\n        def is_in_segment(point):\n            if segment_a[0] <= point[0] < segment_a[1]:\n                return True\n            if segment_b[0] <= point[0] < segment_b[1]:\n                return True\n            if segment_a[0] <= point[1] < segment_a[1]:\n                return True\n            if segment_b[0] <= point[1] < segment_b[1]:\n                return True\n            return False\n\n        # Calculate the intersection of the segments\n        # If the intersection is valid, return it\n        # if not, return None\n        if segment_a[0] == segment_b[0] == segment_a[1] == segment_b[1]:\n            if is_in_segment(segment_a[0]):\n                return segment_a[0]\n            else:\n                return None\n        if segment_a[0] == segment_b[0]:\n            if segment_a[1] > segment_b[1]:\n                return segment_a[0]\n            else:\n                return segment_b[0]\n        if segment_a[0] == segment_b[1]:\n            if segment_a[1] > segment_b[0]:\n                return segment_a[0]\n            else:\n                return segment_b[1]\n        if segment_a[1] == segment_b[0]:\n            if segment_a[0] > segment_b[1]:\n                return segment_a[1]\n            else:\n                return segment_b[0]\n        if segment_a[1] == segment_b[1]:\n            if segment_a[0] > segment_b[0]:\n                return segment_a[1]\n            else:\n                return segment_b[1]\n\n        # Calculate the intersection point\n        # Determine if the intersection is valid\n        # If it is, calculate the x and y values\n        # Return them\n        # If not, return None\n        x = (\n            segment_b[0] * segment_a[1] - segment_a[0] * segment_b[1]\n        ) / (segment_a[1] - segment_b[1])\n        y = segment_a[0] * x - segment_a[0]\n        if is_valid([x, y]):\n            return [x, y]\n        return None\n\n    # Helper function for calculating the intersection of segments\n    def intersection(segment_a, segment_b):\n        point = segment_intersection(segment_a, segment_b)\n        if point is None:\n            return 0\n        return point[0] - segment_a[0] + segment_a[1] - point[1]\n\n    # Find the intersection of all segments\n    intersections = [segment_intersection(segments[i], segments[j]) for i in range(len(segments)) for j in range(i + 1, len(segments))]\n    intersections = [i for i in intersections if i is not None]\n    # Find the maximum intersection\n    max_intersection = max([intersection(segments[i], segments[j]) for i in range(len(segments)) for j in range(i + 1, len(segments))])\n\n    # Find the segments that intersect the maximum intersection\n    max_intersection_segments = [\n        segments[i]\n        for i in range(len(segments))\n        if intersection(segments[i], segments[j]) == max_intersection\n    ]\n\n    # Find the segment that intersects the maximum intersection\n    # and remove it\n    for segment in max_intersection_segments:\n        if segment in segments:\n            segments.remove(segment)\n\n    # Check if there is an intersection with at least one other segment\n    for segment in segments:\n        for other_segment in segments:\n            if segment is not other_segment:\n                if segment_intersection(segment, other_segment) is not None:\n                    return max_intersection\n\n    return max_intersection\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3\n   ... 2 6\n   ... 0 4\n   ... 3 3''')\n    '1'\n    >>> solution('''5\n   ... 2 6\n   ... 1 3\n   ... 0 4\n   ... 1 20\n   ... 0 4''')\n    '2'\n    >>> solution('''3\n   ... 4 5\n   ... 1 2\n   ... 9 20''')\n    '0'\n    >>> solution('''2\n   ... 3 10\n   ... 1 5\n   ... ''')\n    '7'\n    \"\"\"\n    n = int(stdin.readline())\n    m = []\n    for i in range(n):\n        m.append(tuple(map(int, stdin.readline().split())))\n    m.sort()\n    ans = 0\n    for i in range(n - 1):\n        a, b = m[i]\n        for j in range(i + 1, n):\n            c, d = m[j]\n            if max(a, c) <= min(b, d):\n                ans = max(ans, b - a + d - c)\n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if wall[0][1] == wall[1][0] and wall[-1][-2] == wall[-2][-1] else \"NO\"\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if stdin[0] == stdin[1] else 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def input_reader() -> str:\n        return stdin.readline()[:-1]\n\n    n = int(input_reader())\n    heights = [int(n) for n in input_reader().split(\" \")]\n    can_make_wall = True\n    for i in range(1, n):\n        if heights[i] < heights[i - 1]:\n            can_make_wall = False\n            break\n    if can_make_wall:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"5\\n2 1 1 2 5\")\n    'YES'\n    >>> solution(\"3\\n4 5 3\")\n    'NO'\n    '''\n   ...\n---\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n###\n\nThe First step is to build a \"wall\" out of bricks, where the wall is defined as follows:\n\n1. The wall has to be completed (i.e. all parts of the wall have to have the same height)\n2. The wall has to be straight (i.e. no part of the wall can be \"turned off\" by a brick placed to its left or right)\n3. The wall has to be at least one brick wide\n\nFor a brick to be placed on a part of the wall, the part must be on the left side of the brick or the right side of the brick and both sides of the brick must be on the same part of the wall.\n\nFor a brick to be placed on a part of the wall, the part must be on the right side of the brick or the left side of the brick and both sides of the brick must be on the same part of the wall.\n\nThe \"left\" side of a brick is the part with the lowest index, and the \"right\" side of a brick is the part with the highest index.\n\nTo find out if a brick can be placed on a part of the wall, the bricks are put from left to right on parts of the wall. If a brick can be placed, it is put on the part to the right of the left-most part where it can be put.\n\nWe are looking for an increasing sequence of heights of the parts of the wall. If there is such a sequence, then each part of the wall is of the same height.\n\n###\n\nThe second step is to arrange the bricks, so that there is no empty space inside the wall (except for possibly the left and the right ends).\n\nSo, if the wall has $n$ parts, we should have $n$ bricks. If the wall is completed, we should have $2n - 1$ bricks, i.e. if the wall has $n$ parts, we should have $2n - 1$ bricks.\n\n###\n\nThe third step is to consider the wall as a piece of wood, and the bricks as strips of wood.\n\nIf we put a brick on the wall, then there will be a strip of wood which will get destroyed.\n\nIf the number of bricks is greater than the number of destroyed strips of wood, then the problem is impossible and the result is \"NO\".\n\n###\n\nIn the case of the first example the brick can be placed on the second and third parts of the wall, so it will have the height $3$.\n\nOn the second and third parts of the wall the bricks can be placed, so the resulting height of the wall is $3 + 5 = 8$.\n\nOn the first and second parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\nOn the first and second parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\n###\n\nIn the case of the second example the brick can be placed on the third part of the wall, so the resulting height of the wall is $5$.\n\nOn the third part of the wall the bricks can be placed, so the resulting height of the wall is $5 + 3 = 8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\n###\n\nIn the case of the third example the brick can be placed on the first and third parts of the wall, so the resulting height of the wall is $5$.\n\nOn the second part of the wall the bricks can be placed, so the resulting height of the wall is $5 + 3 = 8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\n###\n\nIn the case of the third example the brick can be placed on the second part of the wall, so the resulting height of the wall is $5$.\n\nOn the second part of the wall the bricks can be placed, so the resulting height of the wall is $5 + 1 = 6$.\n\nOn the first and second parts of the wall no bricks can be placed, so the resulting height of the wall is $6$.\n\nOn the first and second parts of the wall no bricks can be placed, so the resulting height of the wall is $6$.\n\n###\n\nAt the end of the second step we will have all the parts of the wall of the same height, and a possible amount of broken strips of wood (not more than the number of bricks).\n\nThe third step is to consider the broken strips of wood as a piece of wood, and the bricks as strips of wood.\n\nIf we put a brick on the wall, then there will be a strip of wood which will get destroyed.\n\nIf the number of bricks is greater than the number of destroyed strips of wood, then the problem is impossible and the result is \"NO\".\n\n###\n\nThe brick can be placed on the second and third parts of the wall, so the resulting height of the wall is $3$.\n\nOn the second and third parts of the wall the bricks can be placed, so the resulting height of the wall is $3 + 5 = 8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8$.\n\nAt the end of the third step we will have all the parts of the wall of the same height, and a possible amount of broken strips of wood (not more than the number of bricks).\n\nThe fourth step is to consider the broken strips of wood as a piece of wood, and the bricks as strips of wood.\n\nIf we put a brick on the wall, then there will be a strip of wood which will get destroyed.\n\nIf the number of bricks is greater than the number of destroyed strips of wood, then the problem is impossible and the result is \"NO\".\n\n###\n\nThe brick can be placed on the second and third parts of the wall, so the resulting height of the wall is $3$.\n\nOn the second and third parts of the wall the bricks can be placed, so the resulting height of the wall is $3 + 5 = 8$.\n\nOn the first and third parts of the wall no bricks can be placed, so the resulting height of the wall is $8"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from collections import defaultdict\n    num_parts = int(stdin[0])\n    wall = list(map(int, stdin[1].split()))\n    q = deque()\n    q.append(0)\n    mp = defaultdict(int)\n    while q:\n        node = q.popleft()\n        for neighbor in edges[node]:\n            if neighbor not in mp:\n                mp[neighbor] = mp[node] + wall[neighbor]\n                q.append(neighbor)\n    if len(mp) == num_parts:\n        if max(mp.values()) == min(mp.values()):\n            return \"YES\"\n        return \"NO\"\n    return \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    N = int(input)\n    arr = [int(i) for i in input.split(' ')]\n    ans = []\n    for i in range(N):\n        ans.append(arr[i])\n    ans = sorted(ans)\n    l = len(ans)\n    if ans[0] == ans[1] and ans[-1] == ans[-2]:\n        if ans[l // 2 - 1] == ans[l // 2] and ans[l // 2] == ans[l // 2 + 1]:\n            return 'YES'\n        else:\n            return 'NO'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Declare and Initialize variables\n    pass"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    string = stdin[2]\n    solution = \"\"\n    if n == 1 or k == 1:\n        print(n)\n    elif k > n:\n        print(-1)\n    else:\n        for i in range(k):\n            solution += string[i]\n        if k == 2:\n            solution = solution[:-1]\n        print(len(solution) + sum(map(int, stdin[2][:-k])))\n    return solution\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Hello, world!'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    return (k - 1) * n + s.count('a') - k + 1\n\nsolution(input)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = [int(x) for x in stdin.split()]\n    string = stdin\n    cost = 0\n    substrings = set()\n    while len(substrings)!= k:\n        cost = 0\n        for i in range(len(string)):\n            substrings.add(string[i:i+n])\n            cost += n - len(string[i:i+n])\n        string = string[1:]\n    if len(substrings) == k:\n        print(cost)\n    else:\n        print(-1)\n    return ''\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible total cost to obtain a set $S$ of size $k$.\"\"\"\n\n    # Get the input\n    (n, k) = [int(x) for x in stdin.split(' ')]\n    s = stdin\n\n    # If k == 0 or n == 0\n    if k == 0 or n == 0:\n        return 0\n\n    # Find the longest common substring\n    lcs = find_lcs(s, s)\n\n    # If the lcs is empty\n    if lcs == '':\n        return 0\n\n    # If lcs is not the entire s\n    if lcs!= s:\n        # Compute the cost of the lcs\n        cost = compute_cost(s, lcs)\n\n        # Return the cost of the lcs\n        return cost\n\n    # If the lcs is equal to the entire s\n    else:\n        # Compute the cost of the lcs\n        cost = compute_cost(s, lcs)\n\n        # If the cost is >= n\n        if cost >= n:\n            return cost\n\n        # Compute the cost of a string of length n\n        cost += (n - cost) * k\n\n        # Return the cost of the lcs\n        return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n\"\"\"\n\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, k = list(map(int, s.split(\" \")))\n    t = \"\".join(sorted(s))\n    c = 0\n    for i in t:\n        c += ord(i)\n    if c < k:\n        print(-1)\n    else:\n        print(c-k)\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    # the maximum number of days to be spent with no additional food\n    # is the largest sum of constants a, b, c less than or equal to 7\n    return max(0, 7 - (a + b + c))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    n = 7\n    a %= n\n    b %= n\n    c %= n\n    dp = [[0] * n for _ in range(n)]\n    dp[0][a] = 1\n    for i in range(1, n):\n        dp[i % n][a] = 1\n        for j in range(n):\n            if dp[i % n][j] == 1:\n                dp[i % n][(j + b) % n] = 1\n                dp[i % n][(j + c) % n] = 1\n    \n    for i in range(n):\n        if dp[n - 1][i] == 1:\n            return str(n - i)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = {}\n    for i in range(7):\n        d[i] = 0\n    for i in range(a):\n        d[i % 7] += 1\n    for i in range(b):\n        d[i % 7] += 2\n    for i in range(c):\n        d[i % 7] += 3\n    max_ = 0\n    for i in range(7):\n        if d[i] > max_:\n            max_ = d[i]\n    return max_\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    m = min(a, b, c)\n    a -= m\n    b -= m\n    c -= m\n    n = max(a, b, c)\n    a -= n\n    b -= n\n    c -= n\n    if a == 0:\n        return str(n)\n    else:\n        return str(n + 1)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = map(int, stdin.split())\n    week = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday','saturday','sunday']\n    max_d = 7 * 10 ** 9\n    min_d = 0\n    for i in range(7):\n        d = (a + b * (i % 2 == 0)) * (c + (i % 2 == 1) * 2)\n        if d > max_d:\n            max_d = d\n            max_w = i\n        if d < min_d:\n            min_d = d\n            min_w = i\n\n    d_list = ['fish_food', 'rabbit_stew', 'chicken_stake']\n    res = ''\n    for i in range(3):\n        if week[max_w] == week[min_w]:\n            res += f'{d_list[i]}\\n'\n        elif week[max_w] == week[min_w + i % 7]:\n            res += f'{d_list[i]}\\n'\n        elif week[max_w] == week[min_w + 2 % 7]:\n            res += f'{d_list[i]}\\n'\n        elif week[max_w] == week[min_w + 3 % 7]:\n            res += f'{d_list[i]}\\n'\n        elif week[max_w] == week[min_w + 4 % 7]:\n            res += f'{d_list[i]}\\n'\n\n    return res[:-1]"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    m, d = 0, 0\n    if a >= c:\n        m = a\n        d = b + c\n    else:\n        m = c\n        d = b + a\n    if b >= c:\n        if m == b:\n            m = c\n            d = b + c\n        else:\n            m = a\n            d = b + a\n    print(d)\n    return ''\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    print((a * (c + b) + b * (c + a)) // (c + b + a))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    n = 7\n    m = 5\n    b, c = min(b, c), max(b, c)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = 0\n    dp[0][2] = 0\n    for j in range(1, m + 1):\n        dp[0][j] = 99\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n        dp[i][1] = b * i\n        dp[i][2] = c * i\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n    return dp[n][m]\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\ndp = [[0 for _ in range(5 + 1)] for _ in range(7 + 1)]\ndp[0][0] = 0\ndp[0][1] = 0\ndp[0][2] = 0\ndp[0][3] = 0\ndp[0][4] = 0\ndp[0][5] = 99\ndp[0][6] = 99\nfor i in range(1, 7 + 1):\n    dp[i][0] = 0\n    dp[i][1] = 99 * i\n    dp[i][2] = 99 * i\n    dp[i][3] = 99 * i\n    dp[i][4] = 99 * i\n    dp[i][5] = 99 * i\n    dp[i][6] = 99 * i\nfor i in range(1, 7 + 1):\n    for j in range(1, 5 + 1):\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\nans = 0\nfor j in range(5, -1, -1):\n    if dp[-1][j] >= dp[ans][ans + j]:\n        ans += j\nprint(ans)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Hints:\n    # Remember that we are only allowed to place tiles in the orientation they have in the input.\n    # It is forbidden to rotate tiles.\n    # Remember that you are not allowed to rotate the input, so no matter how you tile it the first and the last row will be the same,\n    # and the first and the last column will be the same.\n    # When you place a tile, it will have to have top and bottom coordinates, left and right coordinates.\n    # When you check if a tile can be placed you need to check if the top, bottom, left and right are all in the matrix or not.\n    # Check if the number in the leftmost column is equal to the number in the rightmost column.\n    # Check if the number in the topmost row is equal to the number in the bottommost row.\n    # Check if the number in the top left cell is equal to the number in the bottom right cell.\n    # Check if the number in the top right cell is equal to the number in the bottom left cell.\n    # Check if there is no tile that can be placed between these cells.\n    # Note that you need to check all the tiles in the matrix for being symmetric.\n    # If you find a tile that is not symmetric you need to change your answer to \"NO\".\n    # Find out what the size of the matrix should be for being symmetric.\n    # Note that you are not allowed to change the order of the tiles.\n    # Find out how many tiles of each type are left.\n    # If there are not enough tiles of one type then return \"NO\".\n    # If there are enough tiles of one type but the square that you can build is not symmetric then return \"NO\".\n    # After that, if you have symmetric square, check if it is square or not.\n    # If it is square, then return \"YES\".\n    # Otherwise return \"NO\".\n    # In the end print the answer.\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(t * 2^n * 2^m)\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        if n!= m:\n            print('NO')\n            continue\n\n        matrix = [[0 for _ in range(m)] for _ in range(m)]\n        for i in range(n):\n            a, b, c, d = map(int, stdin.readline().split())\n            matrix[b][d] += 1\n            matrix[c][a] += 1\n        for i in range(m):\n            for j in range(i+1, m):\n                if matrix[i][j] > 1:\n                    print('NO')\n                    break\n            else:\n                continue\n            break\n        else:\n            print('YES')\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 4\n   ... 1 2\n   ... 5 6\n   ... 5 7\n   ... 7 4\n   ... 8 9\n   ... 9 8''')\n    YES\n    '''\n   ...\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, *n = stdin.split()\n    n = list(map(int, n))\n    n = sorted(n)\n    s = sum(n)\n    min_diff = s\n    for i in range(len(n) // 2):\n        s -= n[i]\n        for j in range(i + 1, len(n)):\n            s += n[j]\n            min_diff = min(min_diff, abs(s))\n    return str(min_diff)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # n-1 = a + b\n    # a + b = (n+1)//2\n    # a = n//2 - b\n    a = n//2\n    b = n//2\n\n    return a - b\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns the minimum difference of sum(A) - sum(B)\n    \"\"\"\n    n = int(stdin)\n    total = 0\n    A = []\n    B = []\n    for i in range(n):\n        total += i + 1\n        A.append(i) if i % 2 == 0 else B.append(i)\n    A_sum = sum(A)\n    B_sum = sum(B)\n    diff = abs(A_sum - B_sum)\n    for i in range(n):\n        A_sum += (i + 1)\n        B_sum += (i + 1)\n        diff = min(diff, abs(A_sum - B_sum))\n    return diff\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [0] * n\n    B = [0] * n\n    A[0] = 1\n    B[n - 1] = 1\n    min_delta = None\n    for i in range(1, n):\n        A[i] = (A[i - 1] * 2) + B[i - 1]\n        B[n - i - 1] = (B[n - i] * 2) + A[n - i - 1]\n        if min_delta is None or abs(A[i] - B[n - i - 1]) < min_delta:\n            min_delta = abs(A[i] - B[n - i - 1])\n    return min_delta"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return 0\n    s = 0\n    for i in range(1, n):\n        s += i\n    A, B = 0, 0\n    for i in range(1, n + 1):\n        s -= i\n        if s > 0:\n            A += 1\n        elif s < 0:\n            B += 1\n        else:\n            A += 1\n            B += 1\n    return abs(A - B)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_nodes = int(stdin.readline().strip())\n    # print(number_of_nodes)\n    sequence_of_brackets = stdin.readline().strip()\n    # print(sequence_of_brackets)\n    number_of_valid_brackets = 0\n    return number_of_valid_brackets\n\nprint(solution('2\\n(((')\nprint(solution('5\\n(((())'))"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    mod = 1000000007\n    pre_count = []\n    pre_sum = 0\n    for i in range(n):\n        pre_count.append(pre_sum)\n        pre_sum = pre_sum * 2 + 1\n    pre_count.append(pre_sum)\n    post_count = [0] * (n + 1)\n    post_sum = 1\n    for i in range(n - 1, -1, -1):\n        post_count[i] = post_count[i + 1] * 2 + 1\n        post_count[i] = post_count[i] % mod\n    for i in range(n):\n        s_len = i + 1\n        pre_count_sum = pre_count[i]\n        post_count_sum = post_count[i]\n        if i == n - 1:\n            pre_count_sum = 1\n        pre_sub = 1\n        for j in range(n - 1 - i, -1, -1):\n            sub_len = i + j + 2\n            pre_sub = pre_sub * 2 % mod\n            pre_sub = pre_sub * pre_count_sum % mod\n            pre_sub = pre_sub * post_count_sum % mod\n            pre_sub = pre_sub * 2 % mod\n            pre_sub = pre_sub * s[j] % mod\n            pre_sub = pre_sub % mod\n            pre_sub = pre_sub * pre_count[j] % mod\n            pre_sub = pre_sub % mod\n        post_sub = 1\n        for j in range(n - i, n):\n            sub_len = i + j + 2\n            post_sub = post_sub * 2 % mod\n            post_sub = post_sub * post_count_sum % mod\n            post_sub = post_sub * pre_count[j] % mod\n            post_sub = post_sub % mod\n            post_sub = post_sub * post_count[j] % mod\n            post_sub = post_sub % mod\n            post_sub = post_sub * 2 % mod\n            post_sub = post_sub * s[j] % mod\n            post_sub = post_sub % mod\n        ans = pre_sub * post_sub % mod\n        ans = ans * 2 % mod\n        ans = ans * s_len % mod\n        ans = ans % mod\n        ans = ans % mod\n        ans = ans * pre_sum % mod\n        ans = ans % mod\n    return ans"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bracket_seq = stdin[0]\n    bracket_seq = [bracket_seq[i] for i in range(len(bracket_seq))]\n\n    size = len(bracket_seq)\n    if size < 2:\n        return 0\n\n    # \ud2b9\uc815 \ubb38\uc790\uc5f4\uc774 \ub4e4\uc5b4\uc788\ub294\uc9c0 \uccb4\ud06c\n    if bracket_seq.count('(')!= bracket_seq.count(')'):\n        return 0\n\n    # \uc62c\ubc14\ub978 \uad04\ud638\uc2dd\uc778\uc9c0 \uccb4\ud06c\n    while '()' in bracket_seq:\n        bracket_seq.remove('()')\n\n    if len(bracket_seq)!= 2 * size:\n        return 0\n\n    # \ubb38\uc790\uc5f4\uc774 \ud330\ub9b0\ub4dc\ub86c\uc774\ub77c\uba74 \uc804\ubd80 1\uc744 \ucc44\uc6b4\ub2e4\n    for i in range(size):\n        bracket_seq[i * 2] = '1'\n        bracket_seq[i * 2 + 1] = '+'\n\n    # \uacc4\uc0b0\uc744 \uc704\ud574 \ud569\uc0b0\ud560 \ubb38\uc790\uc5f4\n    bracket_str = \"\"\n    for i in range(len(bracket_seq)):\n        bracket_str += bracket_seq[i]\n\n    # \uacc4\uc0b0\uc744 \uc704\ud574 \ubb38\uc790\uc5f4\uc744 \uc22b\uc790\ub85c \ubc14\uafbc\ub2e4\n    bracket_int = []\n    for i in range(len(bracket_seq)):\n        if bracket_seq[i] == '+':\n            bracket_int.append(1)\n        else:\n            bracket_int.append(0)\n\n    # \uacc4\uc0b0\n    while '+' in bracket_str:\n        bracket_str = bracket_str.replace('+', '1')\n\n    if bracket_str == \"1\":\n        return int(bracket_str)\n    else:\n        return 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5((()))\")\n    5\n    >>> solution(\"3((()))\")\n    4\n    >>> solution(\"2((()))\")\n    0\n    \"\"\"\n    n = int(stdin)\n    assert 1 <= n <= 100\n    s = stdin\n    assert len(s) <= 200\n    assert s.count('(') + s.count(')') == n * 2\n    return...\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split('\\n')]\n    res = 0\n    for i in range(2 ** n):\n        s_repr = bin(i)[2:].rjust(n, '0')\n        s_repr = ''.join(s_repr)\n        if s_repr.count('1') == n:\n            res += 1\n    return str(res % 1000000007)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    half_len: int = int(stdin)\n    bracket_seq: str = stdin\n    bracket_dict = {'(': ')', ')': '('}\n    bracket_len: int = len(bracket_seq)\n    counter: int = 0\n    bracket_dict_keys: list = list(bracket_dict.keys())\n    bracket_dict_values: list = list(bracket_dict.values())\n    for i in range(bracket_len-1):\n        if bracket_seq[i] == bracket_dict_keys[0]:\n            if bracket_seq[i+1] == bracket_dict_values[0]:\n                counter += 1\n                bracket_seq = bracket_seq.replace(bracket_seq[i:i+2], '')\n                bracket_dict = {k: v for k, v in zip(bracket_dict_keys, bracket_dict_values)}\n            else:\n                counter = 0\n                break\n        else:\n            counter = 0\n            break\n    return counter % 1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # \u8bf7\u5728\u8fd9\u91cc\u586b\u5199\u4f60\u7684\u4ee3\u7801\n    N = int(stdin.readline())\n    bracket_seq = stdin.readline().strip()\n    result = 0\n    mod = 10**9 + 7\n    for i in range(1, N):\n        result = (result + (i + 1) * (len(bracket_seq) - i) *\n                  (len(bracket_seq) - 2 * i + 1)) % mod\n    return str(result)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return n // 25 - 1\n    return -1\n    \n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    l = len(s)\n    if (l % 2 == 0):\n        s = s[::-1]\n        print(s)\n        arr = [int(i) for i in s]\n        for i in range(0, l - 1, 2):\n            a = arr[i]\n            b = arr[i + 1]\n            if (a == 0):\n                if (b == 0):\n                    if (i == 0):\n                        arr[i + 1] = 1\n                    else:\n                        arr[i + 1] = 0\n                        arr[i] = 9\n                        arr[i + 1] = 1\n                elif (i == l - 2):\n                    arr[i + 1] = 1\n                else:\n                    arr[i + 1] = 1\n                    arr[i] = 9\n                    arr[i + 1] = 1\n            else:\n                if (i == 0):\n                    arr[i + 1] = 1\n                elif (b == 0):\n                    arr[i] = 0\n                    arr[i + 1] = 1\n                else:\n                    arr[i] = arr[i] + arr[i + 1]\n                    arr[i + 1] = 1\n        arr = [str(i) for i in arr]\n        a = \"\".join(arr)\n        print(a)\n        a = int(a)\n        if (a % 25 == 0):\n            print(l // 2)\n            return l // 2\n        else:\n            return -1\n\n    else:\n        s = s[::-1]\n        print(s)\n        arr = [int(i) for i in s]\n        for i in range(0, l - 1, 2):\n            a = arr[i]\n            b = arr[i + 1]\n            if (a == 0):\n                if (b == 0):\n                    if (i == 0):\n                        arr[i + 1] = 1\n                    else:\n                        arr[i + 1] = 0\n                        arr[i] = 9\n                        arr[i + 1] = 1\n                elif (i == l - 2):\n                    arr[i + 1] = 1\n                else:\n                    arr[i + 1] = 1\n                    arr[i] = 9\n                    arr[i + 1] = 1\n            else:\n                if (i == 0):\n                    arr[i + 1] = 1\n                elif (b == 0):\n                    arr[i] = 0\n                    arr[i + 1] = 1\n                else:\n                    arr[i] = arr[i] + arr[i + 1]\n                    arr[i + 1] = 1\n        arr = [str(i) for i in arr]\n        a = \"\".join(arr)\n        print(a)\n        a = int(a)\n        if (a % 25 == 0):\n            print(l // 2)\n            return l // 2\n        else:\n            return -1\n\n\n\nsolution(str(int(input())))\n\nsolution('7')\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport math\nimport itertools\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = [int(i) for i in a]\n    c = [int(i) for i in a]\n    t = [int(i) for i in a]\n    i = 0\n    s = 1\n    while True:\n        for j in range(i, len(b) - 1):\n            if b[j] > b[j + 1]:\n                t[j], t[j + 1] = t[j + 1], t[j]\n                b[j], b[j + 1] = b[j + 1], b[j]\n                s += 1\n        if b == c:\n            return s\n        else:\n            s += 1\n            i += 1"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25!= 0:\n        for i in range(9, -1, -1):\n            if n % (10 ** i) == 0:\n                n //= 10 ** i\n                count += 1\n                break\n    return count if n % 25!= 0 else -1\n\n\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seen = set()\n    stack = [n]\n    cnt = 0\n    while True:\n        t = stack.pop()\n        if t in seen:\n            return cnt - seen[t]\n        for i in range(10):\n            if t % 25!= 0:\n                if t * 10 + i not in seen:\n                    stack.append(t * 10 + i)\n                    seen.add(t * 10 + i)\n        if len(stack) == 0:\n            return -1\n        cnt += 1\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = 0\n    while num!= 0:\n        while num % 25!= 0:\n            num = num - 1\n            res = res + 1\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    n = len(num)\n    a = int(num)\n    ans = 0\n    while a%25!= 0:\n        if a%25!= 0:\n            t = max(a)\n            for i in range(n-1):\n                if a[i] == t:\n                    a = a[:i] + str(int(a[i])+1) + a[i+1:]\n                    break\n    return str(a)\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    res = 1\n    lst = []\n    for i in range(n):\n        if i > 0 and a[i]!= a[i - 1]:\n            lst.append(res)\n            res = 1\n        else:\n            res += 1\n    if a[n - 1]!= a[n - 2]:\n        lst.append(res)\n    else:\n        res -= 1\n    print(len(lst))\n    for i in range(len(lst) - 1):\n        print(lst[i], end=\" \")\n    print(lst[len(lst) - 1])\n\n\nsolution(input())\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def min_coloring(n):\n        if n == 1:\n            return 1\n        # Assume a candidate color\n        c = 1\n        # Check every possible color\n        while c < n:\n            # Assume to be free\n            is_free = True\n            # Check for every char\n            for char in s:\n                # If free\n                if is_free and s[char] == c:\n                    is_free = False\n                    # Increment the color\n                    c += 1\n                    # If color is too large\n                    if c >= n:\n                        # Break\n                        break\n                # Else, check for other chars\n                else:\n                    is_free = True\n            # If all chars are colored\n            if is_free:\n                # Return number of colors\n                return c\n\n        # Return number of colors\n        return c\n\n    # Get input\n    n = int(stdin)\n    s = stdin\n\n    # Initialize min color\n    c = min_coloring(n)\n\n    # Print answer\n    print(c)\n    print(' '.join([str(i) for i in range(1, c + 1)]))"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abacbecfd')\n    2\n    >>> solution('aaabbcbb')\n    2\n    >>> solution('abcdedc')\n    3\n    >>> solution('abcde')\n    1\n    \"\"\"\n    stdout = stdin\n    pass\n    return stdout\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution computes all possible colors that one can apply to the given string.\n    Then, it computes the minimum number of colors that are needed to color the string by taking the minimum number of colors among them.\n    \"\"\"\n    # Read the string\n    s = stdin\n    n = len(s)\n\n    # Compute all possible colors that can be applied to the string\n    colors = set()\n    for c in set(s):\n        colors.add(c)\n        for d in set(s):\n            if d == c:\n                continue\n            colors.add(c + d)\n    colors = list(colors)\n\n    # Compute the minimum number of colors that are needed to color the string\n    res = 0\n    for i in range(len(colors)):\n        color = colors[i]\n        curr_color_count = s.count(color)\n        if curr_color_count > res:\n            res = curr_color_count\n\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip().split()[0]\n    if n == 1:\n        return s.count('1')\n    # greedy\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            c = 1\n            for j in range(i+1, n):\n                if s[j] == '1':\n                    c += 1\n                else:\n                    break\n            ans = max(c, ans)\n    return ans\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    colors = [0] * n\n    for i in range(n):\n        colors[i] = s[i]\n    return str(colors)\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    strings = [str(stdin) for _ in range(5)]\n    n = len(strings)\n    sorted_strings = sorted(strings)\n    \n    for i in range(n):\n        if sorted_strings[i]!= strings[i]:\n            return \"NO\"\n    \n    return \"YES\"\n    \n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    arr = list()\n    for _ in range(l):\n        arr.append(stdin.readline().strip())\n    \n    if l == 1:\n        return \"YES\"\n    \n    # Sorting according to length\n    arr.sort(key = lambda s: len(s))\n    res = arr[0]\n    # print(arr)\n    for s in arr[1:]:\n        # print(res)\n        # print(s)\n        if all(s.startswith(res)):\n            res += s\n        else:\n            return \"NO\"\n    \n    return res"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Make sure that you correctly handle an empty array of strings.\n    \"\"\"\n\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\na\\naba\\nabacaba\\nba\\naba\\nabab\\n')\n    YES\n    >>> solution('5\\nqwerty\\nqwerty\\nqwerty\\n')\n    YES\n    >>> solution('5\\nqwerty\\nqwerty\\nqwerty\\n')\n    YES\n    \"\"\"\n\n    return \"YES\" if all(substring in stdin for substring in stdin) else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\nThe algorithm for the problem is quite simple, you just need to find if there is a way to sort the strings in the following way:\n\nfor every string, all strings that are placed before it are its substrings.\n\nlet's find a way to sort the strings to achieve this.\n\nEvery string in the input is a subsequence of some string in the input, and we have to find a way to sort the input such that all of the substrings of every string appear before it.\n\nFor every string we will have to find a way to sort all strings that are after it, because those strings are its substrings.\n\nTo sort the strings after the current string, we will use the same algorithm.\n\nTo find the order of the strings after the current one, we have to find a way to sort the strings before the current one.\n\nThat means we will have to sort the strings before the current one by using the same algorithm.\n\nThe algorithm we will use to solve the first step will be the same as the algorithm we will use to solve the second step.\n\nThis is a general algorithm for the first step, so we will have to repeat it $n$ times.\n\nSo if we have the strings \"qwerty\", \"qwerty\" and \"qwerty\" in the input, and we want to sort them by using the first step algorithm, we will have to repeat the algorithm three times.\n\nIn the following code we will split the input into two parts: the first part will contain the strings that we have to sort, and the second part will contain the rest of the strings.\n\nFor the first part of the input we will use the same algorithm we used for the second part of the input.\n\nThe algorithm we will use to sort the strings after the current one will be the same as the algorithm we used to sort the strings before the current one.\n\nAt the end we will concatenate the strings that we have sorted in the first part of the input, and the rest of the strings in the second part of the input.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\n\n1. Read the strings from the standard input.\n2. Sort the strings in the descending order of their length.\n3. Use a list of tuples to store the following: (string, index) in each string.\n4. Use two lists to store the strings that are substrings of other strings and the substrings of the strings that are not the substrings.\n5. For each element in the list of tuples in the strings, check whether there is another element with the same index in the list of tuples in the strings and the element is not in the list of the substrings. If it is the case, we append the element to the list of substrings and replace the element with the other element with the same index in the list of strings.\n6. If after the previous step the list of substrings is empty, we print the substrings of the strings in the ascending order of their indices.\n7. If the list of substrings is not empty, then we print \"NO\" (without quotes).\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin)!= len(set(stdin)) else 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulties = map(int, stdin.split())\n    solved_problems_count = 0\n    while sum(map(lambda x: x > k, difficulties)) > 0:\n        if difficulties[0] > k:\n            difficulties = difficulties[1:]\n        elif difficulties[-1] > k:\n            difficulties = difficulties[:-1]\n        else:\n            difficulties = difficulties[1:-1]\n        solved_problems_count += 1\n    return solved_problems_count\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    i, j = 0, n - 1\n    solve_cnt = 0\n    while i < j:\n        if A[i] <= k and A[j] <= k:\n            i += 1\n            j -= 1\n        else:\n            if A[i] > k:\n                i += 1\n            if A[j] > k:\n                j -= 1\n            if A[i] <= k < A[j]:\n                i += 1\n                j -= 1\n                solve_cnt += j - i + 1\n            if A[i] > k > A[j]:\n                i += 1\n                j -= 1\n                solve_cnt += j - i + 1\n    return solve_cnt\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingBTRMNF-P4W/\"\"\"\n    lines = stdin.split('\\n')\n    n, k = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    arr = [int(x) for x in lines[1].split(' ')]\n    count = 0\n    i, j = 0, len(arr)-1\n    while i < j:\n        count += 1\n        if arr[i] > k:\n            j -= 1\n        elif arr[j] > k:\n            i += 1\n        elif arr[j] == arr[i]:\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")]\n    left = right = 0\n    ans = 0\n    while left < len(arr) and right < len(arr):\n        if arr[left] <= k and arr[right] <= k:\n            if arr[left] > arr[right]:\n                left += 1\n                if left < right:\n                    ans += 1\n            else:\n                right += 1\n                if left < right:\n                    ans += 1\n        elif arr[left] > k:\n            right += 1\n            if left < right:\n                ans += 1\n        elif arr[right] > k:\n            left += 1\n            if left < right:\n                ans += 1\n        else:\n            break\n    return str(ans)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of problems that Mishka can solve in the contest.\"\"\"\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    l_sum = 0\n    r_sum = 0\n    i = 0\n    count = 0\n    while True:\n        if i < n - 1 and a[i] <= k:\n            r_sum += a[i]\n            count += 1\n        if i > 0 and a[i - 1] <= k:\n            l_sum += a[i - 1]\n            count += 1\n        if count == n:\n            break\n        i += 1\n    return max(l_sum, r_sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of problems that Mishka can solve\n    from the contest.\n    \"\"\"\n    # Parameters from stdin\n    n, k = map(int, stdin.split(' '))\n\n    # Difficulty list from stdin\n    difficulty = list(map(int, stdin.split(' ')))\n    # Initialize the result\n    result = 0\n\n    # Iterate over the difficulty list\n    for i in range(0, n):\n        # If the difference between the first element and the element on the right is greater than k, then the rightmost element is the only one we can solve\n        if difficulty[i] - difficulty[i + 1] > k:\n            result += 1\n            # Pop the rightmost element from the list\n            difficulty.pop(i + 1)\n        # Else, the only possible element is the leftmost element\n        else:\n            result += 1\n            # Pop the leftmost element from the list\n            difficulty.pop(i)\n\n    return result\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 2 3 1 5 1 6 4\\n')\n    '5'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s, c = [0], 0\n    for i in range(1, n + 1):\n        if i <= k:\n            s.append(s[i - 1] + (a[-i] <= k))\n            c += s[i]\n        else:\n            c += n - i + 1\n            s.append(n - i + 1)\n    return c\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, lst = map(int, stdin.split())\n    lst = list(map(int, lst.split()))\n    m = []\n    while len(lst) > 0:\n        if len(lst) == 1:\n            m.append(lst[0])\n            break\n        elif max(lst[0], lst[-1]) <= k:\n            m.append(lst[0])\n            lst.pop(0)\n        elif lst[0] > k:\n            m.append(lst[-1])\n            lst.pop()\n        else:\n            m.append(lst[0])\n            lst.pop(0)\n    return len(m)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a + b)\n    pass\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(abs(a - b) * 8)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a * b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = [int(x) for x in stdin.strip().split(' ')]\n    res = float('inf')\n    for x in range(1, a + b + 1):\n        y = a * x // b\n        for z in range(y, a + b + 1):\n            if a * z + b * y == a * b:\n                res = min(res, 2 * (a * z + b * y))\n    return str(res)\nprint(solution(input()))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(int(a * b ** 0.5))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a + b == 0:\n        return 0\n    elif a == 0 or b == 0:\n        return 2 * a + b\n    elif a >= b:\n        return a * 2 + b\n    else:\n        return a * 2 + b * 2\n    return a * 2 + b * 2"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Vova has a red marker and a blue marker. Red marker can color $a$ tiles. Blue marker can color $b$ tiles. If some tile isn't white then you can't use marker of any color on it. Each marker must be drained completely, so at the end there should be exactly $a$ red tiles and exactly $b$ blue tiles across the board.\n\n    Vova wants to color such a set of tiles that:\n\n      they would form a rectangle, consisting of exactly $a+b$ colored tiles; all tiles of at least one color would also form a rectangle. \n\n    Here are some examples of correct colorings:\n\n    [Image]\n    \n    Here are some examples of incorrect colorings:\n\n    [Image]\n    \n    Among all correct colorings Vova wants to choose the one with the minimal perimeter. What is the minimal perimeter Vova can obtain?\n    \n    It is guaranteed that there exists at least one correct coloring.\n\n    >>> solution(\"4 4\")\n    12\n    >>> solution(\"3 9\")\n    14\n    >>> solution(\"9 3\")\n    14\n    >>> solution(\"3 6\")\n    12\n    >>> solution(\"506 2708\")\n    3218\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return max(2*(a+b), 2*(a-1)*(b-1))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacbecfd\")\n    'YES'\n    >>> solution(\"aaabbcbb\")\n    'YES'\n    >>> solution(\"abcdedc\")\n    'NO'\n    \"\"\"\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    coloring = [0] * n\n    for i in range(n):\n        if s[i]!= s[0]:\n            coloring[i] = 1\n    coloring = [str(c) for c in coloring]\n    coloring = \"\".join(coloring)\n    return \"YES\" if coloring == \"\".join(sorted(coloring)) else \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    sol = ''\n    cnt = Counter(s)\n    if any(cnt[c] < n for c in cnt):\n        return 'NO'\n    else:\n        for i in range(n):\n            if not cnt[s[i]]:\n                if i == n - 1 or not cnt[s[i + 1]]:\n                    sol += '1'\n                else:\n                    sol += '0'\n                cnt[s[i]] = 1\n            else:\n                sol += '0'\n                cnt[s[i]] -= 1\n        return sol\n    \n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input.split()[0])\n    s = input[1:]\n    # n, m = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # a = [input() for i in range(n)]\n\n    if not len(set(s)) == n:\n        return \"NO\"\n    max_len = n - 1\n    dp = [[[0] * 2 for i in range(2)] for j in range(max_len + 1)]\n    dp[0][0][0] = 1\n\n    for i in range(max_len + 1):\n        for j in range(2):\n            for k in range(2):\n                if i == 0:\n                    if s[i] > s[i + 1]:\n                        dp[i][j][k] += dp[i][j][k]\n                    else:\n                        dp[i][j][k] += dp[i][j][k]\n                elif s[i] > s[i + 1]:\n                    dp[i][j][k] += dp[i - 1][j][k]\n                else:\n                    dp[i][j][k] += dp[i - 1][j][k]\n    ans = dp[max_len][0][1] + dp[max_len][1][0]\n    return ans"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    str_s = stdin\n    length_str_s = len(stdin)\n\n    if length_str_s > length:\n        return \"NO\"\n    else:\n        str_s = list(stdin)\n        str_s = set(str_s)\n\n        if len(str_s) == 1:\n            return \"YES\"\n\n        if len(str_s) == 2:\n            if \"a\" and \"b\" in str_s:\n                return \"YES\"\n            elif \"c\" and \"d\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 3:\n            if \"a\" and \"b\" and \"c\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 4:\n            if \"a\" and \"b\" and \"c\" and \"d\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 5:\n            if \"a\" and \"b\" and \"c\" and \"d\" and \"e\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 6:\n            if \"a\" and \"b\" and \"c\" and \"d\" and \"e\" and \"f\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 7:\n            if \"a\" and \"b\" and \"c\" and \"d\" and \"e\" and \"f\" and \"g\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 8:\n            if \"a\" and \"b\" and \"c\" and \"d\" and \"e\" and \"f\" and \"g\" and \"h\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 9:\n            if \"a\" and \"b\" and \"c\" and \"d\" and \"e\" and \"f\" and \"g\" and \"h\" and \"i\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n        if len(str_s) == 10:\n            if \"a\" and \"b\" and \"c\" and \"d\" and \"e\" and \"f\" and \"g\" and \"h\" and \"i\" and \"j\" in str_s:\n                return \"YES\"\n            else:\n                return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    if len(s) == 0:\n        return \"NO\"\n    cnt = collections.Counter(s)\n    # print(cnt)\n    if len(cnt) == 1:\n        return \"YES\"\n    cnt_min = min(cnt.values())\n    if cnt_min > n / 2:\n        return \"NO\"\n    if len(cnt)!= n:\n        return \"NO\"\n    cnt_max = max(cnt.values())\n    if cnt_max!= cnt_min:\n        return \"NO\"\n    return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    s = Counter(stdin)\n    need = (len(stdin)+1)//2\n    if s['0']!= need or s['1']!= need:\n        return 'NO'\n    else:\n        return 'YES\\n'+''.join(['0' if x=='1' else '1' for x in stdin])"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = len(a)\n    coloring = list(range(n))\n    swap = 0\n    while True:\n        swap += 1\n        for i in range(1, n):\n            if a[i] < a[i - 1]:\n                if coloring[i - 1] == coloring[i]:\n                    return \"NO\"\n                coloring[i - 1] = 1 - coloring[i - 1]\n                coloring[i] = 1 - coloring[i]\n                swap += 1\n                break\n        else:\n            if coloring[-1] == coloring[0]:\n                return \"YES\"\n            return f\"YES\\n{''.join(map(str, coloring))}\"\n    "
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    n = len(s)\n\n    s = s.replace('a', '0')\n    s = s.replace('b', '1')\n    s = s.replace('c', '2')\n    s = s.replace('d', '3')\n    s = s.replace('e', '4')\n    s = s.replace('f', '5')\n    s = s.replace('g', '6')\n    s = s.replace('h', '7')\n    s = s.replace('i', '8')\n    s = s.replace('j', '9')\n    s = s.replace('k', 'a')\n    s = s.replace('l', 'b')\n    s = s.replace('m', 'c')\n    s = s.replace('n', 'd')\n    s = s.replace('o', 'e')\n    s = s.replace('p', 'f')\n    s = s.replace('q', 'g')\n    s = s.replace('r', 'h')\n    s = s.replace('s', 'i')\n    s = s.replace('t', 'j')\n    s = s.replace('u', 'k')\n    s = s.replace('v', 'l')\n    s = s.replace('w','m')\n    s = s.replace('x', 'n')\n    s = s.replace('y', 'o')\n    s = s.replace('z', 'p')\n\n    n = len(s)\n\n    dp = [0 for i in range(n)]\n    dp[0] = int(s[0])\n    for i in range(1, n):\n        if dp[i-1] == 1:\n            if dp[i] == 0:\n                dp[i] = 1\n            else:\n                dp[i] = 0\n        else:\n            dp[i] = dp[i-1]\n\n    if dp[-1] == 1:\n        print('NO')\n        return\n    print('YES')\n    print(''.join([str(s) for s in dp]))\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    len_s = len(s)\n    ones = []\n    zeros = []\n    for i in range(len_s):\n        if s[i] == '0':\n            zeros.append(i)\n        else:\n            ones.append(i)\n    if len(zeros) == 0 or len(ones) == 0:\n        return 'YES'\n\n    def dfs(idx):\n        if idx == len_s:\n            return True\n        if len(zeros) > 0:\n            for z in zeros:\n                if z in ones:\n                    return False\n            zeros.remove(z)\n            ones.append(z)\n            if dfs(idx+1):\n                return True\n            ones.pop()\n            zeros.append(z)\n        if len(ones) > 0:\n            for o in ones:\n                if o in zeros:\n                    return False\n            ones.remove(o)\n            zeros.append(o)\n            if dfs(idx+1):\n                return True\n            ones.append(o)\n            zeros.remove(o)\n        return False\n    ans = dfs(0)\n    if not ans:\n        return 'NO'\n    return 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4\n   ... abacbe\n   ... \"\"\")\n    'NO'\n    >>> solution(\"\"\"5\n   ... abacbe\n   ... \"\"\")\n    'YES'\n    >>> solution(\"\"\"8\n   ... aabccbb\n   ... \"\"\")\n    'YES'\n    >>> solution(\"\"\"8\n   ... abcdefgh\n   ... \"\"\")\n    'NO'\n    >>> solution(\"\"\"7\n   ... abcdefg\n   ... \"\"\")\n    'YES'\n    \"\"\"\n    from collections import Counter\n    stdin = stdin.split(\"\\n\")\n    length = int(stdin[0])\n    s = stdin[1]\n\n    # if the string is not even, then it cannot be sorted.\n    if length % 2!= 0:\n        return \"NO\"\n\n    # if the string has only one character, then it cannot be sorted.\n    if length == 1:\n        return \"YES\"\n\n    # initialize an empty dictionary to store the frequency of each character\n    character_frequency = dict(Counter(s))\n\n    # find the number of characters that have only one occurence.\n    one_occurence_count = 0\n    for c in character_frequency:\n        if character_frequency[c] == 1:\n            one_occurence_count += 1\n\n    # if the number of characters that have only one occurence is more than 1, then the string cannot be sorted.\n    if one_occurence_count > 1:\n        return \"NO\"\n\n    # if the number of characters that have only one occurence is one, then the string can be sorted only if the first character has only one occurence.\n    # if the first character has only one occurence, the string can be sorted.\n    elif one_occurence_count == 1:\n        first_character = list(character_frequency.keys())[0]\n        if character_frequency[first_character] == 1:\n            return \"YES\"\n\n    # if the number of characters that have only one occurence is one, then the string can be sorted only if the first character has only one occurence.\n    # if the first character does not have only one occurence, then the string cannot be sorted.\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(price for price in range(A, B + 1) if (price * 0.08) % 1 == 0 and (price * 0.1) % 1 == 0) or -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    price1, price2 = list(map(int, stdin.split()))\n    \n    a = price1 * 0.08\n    b = price2 * 0.1\n    \n    if a == b:\n        return str(price1)\n    elif a > b:\n        return str(price1 - b // 1)\n    elif b > a:\n        return str(price1 - a // 1)\n    return '-1'\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    total = a*b\n    if total < 100:\n        print(-1)\n        return\n    ans = []\n    for x in range(0, total+1):\n        if x % 10 == 0:\n            ans.append(x*a)\n    print(min(ans))\n    return"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n\n    ans = -1\n    for i in range(A, B + 1):\n        consumption_tax = (i * 0.08 + i * 0.1)\n        if consumption_tax <= B:\n            ans = i\n            break\n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = range(A, B + 1)\n    for price in prices:\n        if price * 0.08 % 1 == 0 and price * 0.1 % 1 == 0:\n            return str(price)\n    return '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    for i in range(A, B + 1):\n        if i * 0.08 == math.floor(i * 0.08) and i * 0.1 == math.floor(i * 0.1):\n            return i\n\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    x = a / b\n    if a == b:\n        return str(a)\n    if b == 0:\n        return '-1'\n    if a == 0 and b == 1:\n        return '0'\n    if x == 0 and a > b:\n        return '-1'\n    elif x == 0 and a < b:\n        return str(a)\n    elif x <= 1 and x > 0:\n        return str(int(a))\n    elif x > 1:\n        return str(int(a) + 1)\n    elif x < 0:\n        return str(int(a) - 1)\n    else:\n        return '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    price_sum = A + B\n    if price_sum > 100:\n        return -1\n    else:\n        return price_sum\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n'))\n    ret = -1\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if a*i + b*j > a*j + b*i:\n                ret = min(ret, i) if ret!= -1 else i\n    return str(ret)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax\n    levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\n    Here, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\n\n    >>> solution('2 2')\n    25\n    >>> solution('2 1')\n    -1\n    >>> solution('1 1')\n    -1\n    \"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"YES\" if n == 1 else \"NO\"\n    res = [0] * k\n    i = 0\n    while i < n and i + k < n:\n        res[i % k] += 1\n        if res[i % k] < 2 * res[(i + 1) % k]:\n            i += 1\n        else:\n            i += 2\n    return \"YES\" if i == n else \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n // 2:\n        return 'NO'\n    a = k * [0]\n    a[0] = n\n    while k > 0:\n        for i in range(0, k):\n            if a[i] == n:\n                return 'NO'\n            if a[i] * 2 >= a[i + 1]:\n                return 'NO'\n        a[k] = a[k - 1] // 2\n        k -= 1\n    return 'YES\\n' +''.join(list(map(str, a)))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(i) for i in stdin.split(\" \")]\n    \n    if k == 1:\n        print(\"YES\")\n        print(\"1\")\n    elif k > n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\" \".join([str(i) for i in range(1, k+1)]))\n\nsolution(\"1 1\")\nsolution(\"1 3\")\nsolution(\"1 10\")\nsolution(\"1 100\")\nsolution(\"1 1000\")\nsolution(\"1 10000\")\nsolution(\"1 10999\")\nsolution(\"1 10001\")\nsolution(\"1 99998\")\nsolution(\"1 100001\")\nsolution(\"1 999999\")\nsolution(\"1 1000000\")\nsolution(\"1 10000001\")\nsolution(\"1 10000010\")\nsolution(\"1 10000011\")\nsolution(\"1 9999999\")\nsolution(\"1 1000000000\")\nsolution(\"1 1000000000\")"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n    left = 0\n    for i in range(k):\n        cur = 2 * left\n        if cur > n:\n            left = 0\n            res.append(n)\n        else:\n            res.append(cur)\n            left += 1\n    return \"YES\" if len(res) == k else \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split(\"\\n\")\n    n, k = list(map(int, stdin[0].split()))\n    if k == 1 or n > 2 * k:\n        return \"NO\"\n    for i in range(1, k + 1):\n        if 2 * n // k < i:\n            return \"NO\"\n        if n - i >= 0:\n            if n - i < i:\n                return \"NO\"\n            return \"YES\\n\" + \" \".join([str(i) for i in range(1, k + 1)])\n    return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    answers = []\n    for i in range(k):\n        answers.append(0)\n    for i in range(n):\n        answers[i % k] += 1\n        if i % k == 0:\n            for j in range(k - 1):\n                answers[(i // k + j + 1) % k] += 1\n    if any(x % 2!= 0 for x in answers):\n        print('NO')\n    else:\n        print('YES')\n        print(' '.join(map(str, answers)))\n        \n    return ''"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    # N, K = map(int, stdin.split(' '))\n    a = [0] * K\n    cnt = 1\n    for day in range(K):\n        a[day] = cnt\n        cnt += 1\n    cnt = 1\n    for day in range(K - 1):\n        a[day + 1] = min(cnt * 2, a[day])\n        cnt += 1\n    print('YES' if sum(a) == N else 'NO')\n    print(' '.join(map(str, a)))\n    return ''"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    days = [n for _ in range(k)]\n    ans = \"YES\"\n    for i in range(k):\n        days[i] -= i\n        if days[i] < 0:\n            ans = \"NO\"\n            break\n        if days[i] < days[i + 1]:\n            ans = \"NO\"\n            break\n    if ans == \"YES\":\n        print(ans)\n        print(*days, sep=' ')\n    return \"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, r = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    arr.sort()\n    cnt = 0\n    res = [0] * n\n    for x, y in arr:\n        if r - x > 0:\n            res[cnt] = max(res[cnt], y)\n            r -= x\n            cnt += 1\n    for i in range(n):\n        res[i] = max(res[i], r + res[i])\n    return max(res)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1''')\n    3\n    \"\"\"\n    n, r = [int(i) for i in stdin.split('\\n')[:2]]\n    a = [int(i) for i in stdin.split('\\n')[2:]]\n    r0 = r\n    ans = 0\n    m = [0] * (len(a) + 1)\n    for i in range(n):\n        ans = max(ans, m[i])\n        m[i + 1] = max(ans + a[i], m[i] + a[i] + r)\n        if m[i + 1] > r:\n            return ans\n    return ans\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, r = list(map(int, input[0].split()))\n    a = []\n    b = []\n    for i in range(1, n + 1):\n        a_i, b_i = list(map(int, input[i].split()))\n        a.append(a_i)\n        b.append(b_i)\n\n    print(n, r)\n    print(a, b)\n    res = 0\n    for i in range(n):\n        if r >= a[i]:\n            res += 1\n            r += b[i]\n        else:\n            break\n    print(res)\n    return res\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(' ')))\n    arr = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split(' ')))\n        arr.append((a, b))\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for a, b in arr:\n        for i in range(r, -1, -1):\n            if dp[i] > 0 and i + b <= r:\n                dp[i + b] += dp[i]\n    print(max(dp))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0], reverse=True)\n    max_size = 0\n    current_size = 0\n    best_order = []\n    order = [0] * n\n    for a, b in projects:\n        if a > r:\n            break\n        if a + current_size <= r:\n            best_order.append(order.copy())\n            current_size += a\n            order[order.index(0)] = 1\n            max_size = max(max_size, current_size)\n        else:\n            best_order.append(order.copy())\n            max_size = max(max_size, current_size)\n            current_size += a - r\n            order[order.index(0)] = 1\n            r += b\n    print(max_size)\n    return max_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    print(n, r)\n    ratings = list()\n    for _ in range(n):\n        ratings.append(list(map(int, stdin.split())))\n    print(ratings)\n    # dp = [[0] * (r + 1) for _ in range(n + 1)]\n    dp = list()\n    for i in range(n):\n        dp.append([0] * (r + 1))\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            if j >= ratings[i - 1][0]:\n                dp[i][j] = max(dp[i - 1][j - ratings[i - 1][0]] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    print(dp)\n    return max(dp[-1])\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    projects = []\n    for _ in range(n):\n        projects.append(stdin.split('\\n')[1].split())\n\n    def can_finish(start):\n        if sum(start) > r:\n            return False\n        return True\n\n    dp = [[None for _ in range(r + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            if can_finish(projects[i - 1]):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - projects[i - 1][0]] + projects[i - 1][1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][r]"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split('\\n')[:-1]]\n    a.sort()\n    a.append(r)\n    a.append(0)\n    a = a[::-1]\n    c = 1\n    start = a[1]\n    j = 2\n    r = 0\n    while j < len(a):\n        if a[j] > a[j - 1]:\n            c += 1\n            if start < a[j] - a[j - 1]:\n                start = a[j] - a[j - 1]\n        elif a[j] < a[j - 1] and start > a[j] + a[j - 1]:\n            c += 1\n            r = a[j - 1] - a[j]\n            start = a[j] - a[j - 1]\n        j += 1\n    return c\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, numbers = [int(x) for x in stdin.split('\\n')]\n    numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    table = [[0 for x in range(n)] for y in range(n)]\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    numbers_used = [0 for x in range(n ** 2 + 1)]\n    for i in range(n ** 2):\n        numbers_used[i + 1] = numbers_used[i] + numbers[i]\n    table[0][0] = numbers_used[0]\n    for j in range(1, n):\n        for i in range(n - j):\n            table[i][j] = table[i + 1][j - 1] + numbers_used[j + i]\n            if i!= j:\n                matrix[i][j] = (j + 1)\n    for i in range(n):\n        matrix[i][i] = numbers_used[n ** 2 - i]\n    for i in range(n):\n        matrix[i][0] = table[i][0]\n        matrix[0][i] = table[0][i]\n    if table[0][0]!= numbers_used[0]:\n        return \"NO\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if table[0][j] - table[0][i - 1]!= table[i][j]:\n                return \"NO\"\n            for k in range(j):\n                if table[i][k] + table[k + 1][j]!= table[i][j]:\n                    return \"NO\"\n    return str(matrix[0][0]) + \"\\n\" + \" \".join(map(str, matrix[0]))\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    nums = list(map(int, stdin[1].split(' ')))\n    ans = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            ans[i][j] = nums[i * n + j]\n    check = list(map(list, zip(*ans)))\n    for i in range(n):\n        if nums[i::n]!= check[i]:\n            return 'NO'\n    return 'YES'\n    \n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    print(stdin)\n    s = stdin[1]\n    print(s)\n    if n == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return 'YES' or 'NO'\n\n\"\"\"\n\n\nimport numpy as np\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if True else 'NO'\n    \n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    projects = []\n    for _ in range(n):\n        a, b = list(map(int, stdin.split(\"\\n\")[_].split(\" \")))\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n    print(projects)\n    low_val, high_val = projects[0][0], 0\n    for _ in range(n):\n        high_val += projects[_][1]\n        if high_val < 0:\n            return \"NO\"\n        elif r < high_val:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if the order of the projects is valid, otherwise 'NO'\"\"\"\n    # Your code here\n    n, r = [int(i) for i in stdin.split()]\n    for _ in range(n):\n        a, b = [int(i) for i in stdin.split()]\n        r += b\n        if r < a:\n            return \"NO\"\n        r -= a\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    dp = [[False for _ in range(r + 1)] for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        m, b = map(int, stdin.split()[i].split(' '))\n        for j in range(m, r + 1):\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][j - m]\n\n        for j in range(b, r + 1):\n            dp[i][j] = dp[i - 1][j - b]\n\n    return 'YES' if dp[n][r] else 'NO'\n\"\"\"\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = []\n    for _ in range(int(stdin.readline())):\n        a, b = map(int, stdin.readline().split())\n        cases.append((a, b))\n    for i in range(len(cases)):\n        for j in range(i, len(cases)):\n            case = cases[:i] + cases[i + 1:]\n            if case[j][0] > case[j][1]:\n                return \"NO\"\n    return \"YES\"\n\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = [[int(x) for x in stdin.split('\\n')[i].split()] for i in range(1, n + 1)]\n\n    cnt_valid = 0\n    for a, b in arr:\n        if r < a:\n            return 'NO'\n        r += b\n        if r < 0:\n            return 'NO'\n        cnt_valid += 1\n    if cnt_valid < n:\n        return 'NO'\n    return 'YES'\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2')\n    'YES'\n    >>> solution('3 10\\n10 0\\n10 -10\\n30 0')\n    'NO'\n    >>> solution('3 4\\n4 6\\n10 -2\\n8 -1')\n    'YES'\n    \"\"\"\n    projects, rating = map(int, stdin.split('\\n'))\n    prerequisite = []\n    for i in range(projects):\n        a, b = map(int, stdin.split('\\n')[i].split(' '))\n        prerequisite.append([a, b])\n    res = dfs(prerequisite, rating)\n    if res == True:\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get solution from standard input.\"\"\"\n    n, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    prevs = []\n    ratings = []\n    for line in stdin.split('\\n')[1:]:\n        a, b = [int(x) for x in line.split()]\n        prevs.append(a)\n        ratings.append(b)\n    prevs = sorted(set(prevs))\n    ratings = sorted(set(ratings))\n    if len(prevs)!= len(ratings):\n        return 'NO'\n    if ratings[0] > 0:\n        return 'NO'\n    for i in range(len(ratings)):\n        if ratings[i] < 0:\n            if ratings[i] + sum(ratings[i + 1:]) > 0:\n                return 'NO'\n            break\n    for i in range(len(prevs)):\n        if prevs[i] < r:\n            if ratings[0] < prevs[i] - r + ratings[0]:\n                return 'NO'\n        else:\n            if ratings[i] < prevs[i] - r + ratings[i + 1]:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns YES if the order of the projects exists, otherwise NO.\"\"\"\n    num_projects, rating = [int(n) for n in stdin.split(\" \")]\n    project_rating = [int(n) for n in stdin.split(\"\\n\")[:-1]]\n    for i in range(num_projects):\n        if project_rating[i][0] > rating:\n            return \"NO\"\n        elif project_rating[i][0] < 0:\n            return \"NO\"\n        elif project_rating[i][1] > 300 or project_rating[i][1] < -300:\n            return \"NO\"\n        elif i == 0:\n            if project_rating[i][1]!= 0:\n                return \"NO\"\n        else:\n            rating += project_rating[i][1]\n            rating += project_rating[i][1]\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    ans = \"YES\"\n    diff = collections.defaultdict(list)\n    for i in range(1, n + 1):\n        a, b = list(map(int, stdin.split()))\n        diff[a - r].append(i)\n    for key, val in diff.items():\n        if len(val) > 1:\n            ans = \"NO\"\n            break\n        if r - key < 0:\n            ans = \"NO\"\n            break\n    return ans\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    platforms = [int(x) for x in stdin.split('\\n')[1].split()]\n    a = [0] * (n + 2)\n\n    for platform in platforms:\n        for i in range(platform - d, platform):\n            a[i] = platform - 1\n    for i in range(m - 1, n):\n        if a[i + 1] == i:\n            a[i + 1] = a[i]\n    for i in range(n):\n        if a[i] == i:\n            a[i] = -1\n    print('YES' if a[n] >= 0 else 'NO')\n    print(' '.join([str(x) for x in a[:n + 1]]))"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3 2\\n1 2 1\\n\")\n    'YES\\n0 1 0 2 2 0 3\\n'\n    \"\"\"\n    n, m, d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()[1 : m + 1]]\n    c.sort(reverse=True)\n    if sum(c) > n:\n        return \"NO\"\n    a = [0] * (n + 2)\n    i = 0\n    while d >= 0 and i < m:\n        if c[i] <= d:\n            d -= c[i]\n            i += 1\n        else:\n            d = 0\n        a[i] = i + 1\n    if d > 0:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join([str(x) for x in a])\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M, D = [int(x) for x in stdin.readline().split()]\n    P = [int(x) for x in stdin.readline().split()]\n\n    def max_jump(P: List[int], D: int):\n        ret = 0\n        for i in range(1, len(P)):\n            if i + P[i] >= D + ret:\n                ret = i\n        return ret\n\n    def check(P: List[int], N: int):\n        ret = [0]\n        start = 0\n        j = 0\n        for i in range(len(P)):\n            j += P[i]\n            if j >= D + start:\n                ret.append(i)\n                start = i\n            elif j < D + start:\n                ret.append(0)\n        return ret\n\n    def rec(P: List[int], N: int, D: int):\n        if N < 0:\n            return False\n        if N == 0:\n            return True\n        if N > D:\n            return False\n        if N >= D:\n            return True\n        ret = False\n        for i in check(P, N):\n            if i == 0:\n                ret = ret | rec(P, N - P[i], D)\n            elif i!= N - 1:\n                ret = ret | rec(P, N - i, D)\n        return ret\n\n    return \"YES\" if rec(P, N - max_jump(P, D), D) else \"NO\"\n    '''\n    n, m, d = [int(x) for x in stdin.readline().split()]\n    p = [int(x) for x in stdin.readline().split()]\n\n    def max_jump(p: List[int], d: int):\n        ret = 0\n        for i in range(1, len(p)):\n            if i + p[i] >= d + ret:\n                ret = i\n        return ret\n\n    def check(p: List[int], n: int):\n        ret = [0]\n        start = 0\n        j = 0\n        for i in range(len(p)):\n            j += p[i]\n            if j >= d + start:\n                ret.append(i)\n                start = i\n            elif j < d + start:\n                ret.append(0)\n        return ret\n\n    def rec(p: List[int], n: int, d: int):\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        if n > d:\n            return False\n        if n >= d:\n            return True\n        ret = False\n        for i in check(p, n):\n            if i == 0:\n                ret = ret | rec(p, n - p[i], d)\n            elif i!= n - 1:\n                ret = ret | rec(p, n - i, d)\n        return ret\n\n    return \"YES\" if rec(p, n - max_jump(p, d), d) else \"NO\"\n\nfor s in [\n    '7 3 2',\n    '10 1 11',\n    '10 1 5',\n    '10 1 6',\n    '10 1 7',\n    '10 1 8',\n    '10 1 9',\n    '10 1 10',\n    '10 1 11',\n    '10 1 12',\n    '10 1 13',\n    '10 1 14',\n    '10 1 15',\n    '10 1 16',\n    '10 1 17',\n    '10 1 18',\n    '10 1 19',\n    '10 1 20',\n    '10 1 21',\n    '10 1 22',\n    '10 1 23',\n    '10 1 24',\n    '10 1 25',\n    '10 1 26',\n    '10 1 27',\n    '10 1 28',\n    '10 1 29',\n    "
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: string with the solution\n    \"\"\"\n    # Get input\n    n, m, d = map(int, stdin.split())\n    platforms = list(map(int, stdin.split()[1:]))\n\n    # Init variables\n    result = 'YES'\n    jump_range = d\n    jump_count = 0\n    curr_jump_end = 0\n    platforms_index = 0\n    jump_start_index = 0\n\n    # Do the jump\n    while platforms_index < m and jump_count <= n:\n        jump_end = curr_jump_end + platforms[platforms_index]\n        if jump_start_index + 1 < jump_start_index + jump_range + 1:\n            if jump_end > jump_start_index + jump_range:\n                result = 'NO'\n                break\n        jump_count += jump_range\n        curr_jump_end = jump_count\n        platforms_index += 1\n\n    return result\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, d) = [int(i) for i in stdin.split()]\n    c = [int(i) for i in stdin.split()][1:]\n    a = [0] * n\n    left = right = 0\n    for i in range(m):\n        a[c[i] - 1] = i + 1\n    for i in range(n):\n        if left <= right:\n            if a[i] == 0:\n                left += 1\n            else:\n                right += 1\n        else:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join([str(i) for i in a])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split(' ')]\n    platforms = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    res = []\n    left = 0\n    for right in range(n + 1):\n        if left > right:\n            left = right\n            res.append('0')\n        for i in range(1, m + 1):\n            if right + d * i >= n + 1:\n                break\n            platform_width = platforms[i - 1]\n            if right + platform_width <= right:\n                continue\n            if right + platform_width > right + d * i:\n                left = right + platform_width\n                res.append(str(i))\n                break\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, d] = stdin.split(\"\\n\")[0].split(\" \")\n    [n, m, d] = [int(n), int(m), int(d)]\n    [m] = stdin.split(\"\\n\")[1].split(\" \")\n    [m] = [int(m)]\n\n    i = 0\n    j = 1\n    count = 0\n    res = []\n    while i < n:\n        j = 0\n        while j < m:\n            if count == d:\n                break\n            if i + j > n:\n                break\n            if i + j >= n:\n                break\n            res.append(0)\n            count += 1\n            j += 1\n        if count < d:\n            res.append(0)\n            count += 1\n        if j == m:\n            i += 1\n            j = 0\n    if count == d:\n        return f\"YES\\n{res}\"\n    else:\n        return f\"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('7 3 2\\n1 2 1\\n')\n    'YES\\n0 1 0 2 2 0 3\\n'\n    >>> solution('10 1 11\\n1\\n')\n    'YES\\n0 0 0 0 0 0 0 0 0 0 1\\n'\n    >>> solution('10 1 5\\n2\\n')\n    'YES\\n0 0 0 0 1 1 0 0 0 0 0\\n'\n    '''\n    n, m, d = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    platforms = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n\n    answer = ['NO']\n    current_position = 0\n    for i in range(m):\n        platforms[i] -= 1\n    platforms.append(n)\n    platforms = sorted(platforms)\n    for i in range(m + 2):\n        platforms[i] -= 1\n    jumps = [d] * (m + 2)\n    current_position, jumps[1] = 1, 0\n    for i in range(2, m + 2):\n        while True:\n            if (current_position + platforms[i]) % platforms[i] == 0:\n                jumps[i] = 0\n                break\n            current_position += jumps[i]\n            jumps[i] += 1\n\n    for i in range(m + 2):\n        if i == 1:\n            answer.append('0')\n        else:\n            answer.append(str(jumps[i]))\n    return '\\n'.join(answer)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[1:]\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n    return n - dp[n][m]\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    window = len(s) - len(t)\n    # print(window)\n    s = s[window:]\n    for index in range(0, len(t)):\n        if t[index]!= s[index]:\n            window += 1\n            # print(window)\n    return window\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    l = 0\n    i = 0\n    while i < len(s) and l < len(t):\n        if s[i] == t[l]:\n            i += 1\n            l += 1\n        elif l == 0:\n            i += 1\n        else:\n            l = 0\n    return i - l"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    print(len(stdin))\n    \"\"\"\n    input()\n    text = stdin\n    t = stdin\n\n    return len(input) - len(text.replace(t, ''))"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return len(s) - len(t) + 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[len(stdin) - 1]\n    if len(s) < len(t):\n        return 0\n    for i in range(len(s) - 1, 0, -1):\n        temp = s[i:]\n        if temp.find(t)!= -1:\n            return i\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def make_bwt(s: str) -> Tuple[str, Dict[str, int]]:\n        counts = collections.Counter(s)\n        l = sorted(list(counts.keys()))\n        return \"\".join(l) + \"|\", {c: l.index(c) for c in counts}\n\n    s, count = stdin.split(\"\\n\")\n    bwt, counts = make_bwt(s)\n    alphabet = sorted(list(counts.keys()))\n\n    matches = collections.defaultdict(int)\n    l = len(bwt)\n    for i in range(l):\n        for j in range(len(alphabet)):\n            c = alphabet[j]\n            matches[bwt[i:l]] += j\n        counts[bwt[i]] -= 1\n\n        if counts[bwt[i]] == 0:\n            del counts[bwt[i]]\n        l -= 1\n\n    return max(matches.values())\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    s = stdin\n    t = stdin\n    l = len(s)\n    a = set(s)\n    while l:\n        print(l)\n        for j in range(0, l):\n            if s[:j + 1] in t and s[:j + 1] in a:\n                s = s[j + 1:]\n                t = t[j + 1:]\n                a.add(s)\n                l = len(s)\n                break\n        else:\n            return len(s)\n    return 0\n\nsolution(stdin)"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def _min(x, y):\n        return x if x < y else y\n\n    def _max(x, y):\n        return x if x > y else y\n\n    a, b = stdin.split('.')\n    a = int(a)\n    b = int(b)\n    a_min = 1\n    a_max = 10\n    b_min = 1\n    b_max = 10\n\n    b_max = _max(a_max, b_max)\n    a_min = _min(a_min, b_min)\n\n    a_max = _max(a_max, b_max)\n    a_min = _min(a_min, b_min)\n\n    for i in range(a_min, a_max + 1):\n        for j in range(b_min, b_max + 1):\n            if i * j == int(stdin):\n                return f\"{i} {j}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = x / 0.001\n    b = int(a)\n    c = a - b\n    if c > 0.5:\n        d = int(a + 1)\n    else:\n        d = int(b + 1)\n    \n    return str(b) + \" \" + str(d)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(5 * (x - a))\n    return f\"{a} {b}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = round(x) - 1\n    b = round(x)\n    return str(a) + \" \" + str(b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(5 * round(x - int(x), 6))\n    b = int(5 * round(x + int(x), 6))\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 5:\n        raise ValueError(\"x is not in range [1, 5]\")\n    else:\n        def isPrime(x):\n            if x < 2 or x % 2 == 0:\n                return False\n            else:\n                for i in range(3, int(x ** 0.5) + 1, 2):\n                    if x % i == 0:\n                        return False\n            return True\n        def nextPrime(x):\n            if x < 2:\n                return 2\n            else:\n                return nextPrime(x + 1)\n        def nextPrimeFunc(x):\n            return nextPrime(x) + 1\n        def nextPrimeA(x):\n            if x % 2 == 0:\n                x = x + 1\n            return x + 2\n        def nextPrimeB(x):\n            if x % 2 == 0:\n                return x + 2\n            else:\n                return x + 1\n        # print(nextPrime(1))\n        # print(nextPrimeFunc(1))\n        # print(nextPrimeA(1))\n        # print(nextPrimeB(1))\n        primes = [2, 3]\n        prime_cnt = 2\n        while prime_cnt < 11:\n            nextPrime = nextPrimeFunc(primes[-1])\n            if isPrime(nextPrime):\n                primes.append(nextPrime)\n                prime_cnt += 1\n            else:\n                primes.append(primes[-1])\n            if prime_cnt == 10:\n                break\n        # print(primes)\n        if prime_cnt < 11:\n            return \"{0} {1}\".format(primes[9], primes[10])\n        else:\n            raise ValueError(\"no solution\")\n\n\nprint(solution(\"1.0\" + \"1\"))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = float(x)\n    x_int = int(x)\n    x_remain = x - x_int\n    x_remain_part1 = x_remain - 0.5\n    x_remain_part2 = x_remain + 0.5\n    x_int_part1 = int(x_remain_part1)\n    x_int_part2 = int(x_remain_part2)\n    if x_int_part1 == x_remain_part1 and x_int_part2 == x_remain_part2:\n        print(x_int_part1, x_int_part2)\n    else:\n        print(x_int_part1, x_int_part2)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    return str(max(int(x), int(round(x, 2)))) +'' + str(min(int(x), int(round(x, 2))))\n    \n    \ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Parses the input and prints the solution.\"\"\"\n    x = float(stdin)\n    n = 10\n    return''.join(map(str, divisors(x, n)))\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = float(stdin)\n    return str(round(n ** 2)) + \" \" + str(round(n ** 2))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n < 3 or k < 2:\n        return \"NO\"\n    if d < 2 or d > 10 ** 5:\n        return \"NO\"\n    if n < k:\n        return \"NO\"\n    if n % k!= 0:\n        return \"NO\"\n    cnt = [0] * n\n    for _ in range(n - 1):\n        s, e = map(int, stdin.split())\n        if s == e or cnt[s] > k or cnt[e] > k:\n            return \"NO\"\n        if s < e:\n            cnt[s] += 1\n            cnt[e] += 1\n        elif s > e:\n            cnt[e] += 1\n            cnt[s] += 1\n    if cnt[1] > k:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split(' '))\n    graph = {i: [] for i in range(1, n + 1)}\n    graph[1] = []\n    graph[2] = [1]\n    graph[3] = [1]\n    graph[4] = [2]\n    graph[5] = [2]\n    graph[6] = [1, 3]\n    graph[7] = [2, 3]\n    graph[8] = [1, 3, 5]\n    graph[9] = [4]\n    graph[10] = [3, 5]\n    solve(graph, n, d, k)\n    return ''\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    'YES'\n    \"\"\"\n    n, d, k = [int(x) for x in stdin.split()]\n\n    # conditions:\n    # n - 1 nodes\n    # d <= diameter <= 4 * n\n    # k <= n - 1\n    # if there is no solution:\n    # at most k branches for each node\n    # at most d - 1 edges\n    if (d <= n <= 4 * d) and (k <= n - 1):\n        # this is the count of edges\n        # use binary search to get diameter\n        # step is the number of cuts of tree\n        # start from 1, end at d\n        start, end = 1, d\n        while start <= end:\n            mid = (start + end) // 2\n            cnt = 0\n            for i in range(n):\n                cnt += len(list(filter(lambda x: x <= mid, get_degrees(i, mid))))\n            if cnt > k:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if k < 2 or n < 2 or d < 2:\n        return 'NO'\n    if k >= d:\n        return 'YES'\n    if k * 2 > d:\n        return 'NO'\n\n    ans = {}\n    graph = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    def dfs(node, step):\n        if ans.get(node, None) is not None:\n            return\n        ans[node] = step\n        for child in graph[node]:\n            dfs(child, step + 1)\n\n    for node in range(n):\n        dfs(node, 1)\n        if len(ans) == n - 1:\n            break\n\n    if len(ans)!= n - 1:\n        return 'NO'\n\n    ans_list = sorted(ans.items(), key=lambda x: x[1], reverse=True)\n    for i in range(1, n):\n        print(ans_list[i][0] + 1, ans_list[i - 1][0] + 1)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, k) = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    edges = {}\n    for i in range(n - 1):\n        (u, v) = [int(x) for x in stdin.split()]\n        if u in edges:\n            edges[u].append(v)\n        else:\n            edges[u] = [v]\n        if v in edges:\n            edges[v].append(u)\n        else:\n            edges[v] = [u]\n    deg = {v: len(edges[v]) for v in edges}\n    max_deg = max(deg.values())\n    if max_deg > k:\n        return \"NO\"\n    start = min(deg.values()) - 1\n    t = n\n    for v in deg:\n        if deg[v] == start:\n            t -= 1\n    while t > 1:\n        start += 1\n        deg = {v: len(edges[v]) for v in edges}\n        max_deg = max(deg.values())\n        if max_deg > k:\n            return \"NO\"\n        for v in deg:\n            if deg[v] == start:\n                t -= 1\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(' ')]\n    edges = defaultdict(set)\n\n    def add_edge(a, b):\n        edges[a].add(b)\n        edges[b].add(a)\n\n    def is_valid():\n        if d > max(len(edges[x]) for x in edges):\n            return 'NO'\n        for k in range(1, n):\n            if k not in edges:\n                return 'NO'\n            if len(edges[k]) > k:\n                return 'NO'\n        return 'YES'\n\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split(' ')]\n        add_edge(a, b)\n    return is_valid()\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_degree(v1, v2):\n        if tree[v1][v2] == 0:\n            return 1\n        else:\n            return tree[v1][v2]\n\n    n, d, k = map(int, stdin.split())\n    tree = [[0 for _ in range(n)] for _ in range(n)]\n    # if d > n - 1:\n    #     return \"NO\"\n\n    for i in range(n - 1):\n        v1, v2 = map(int, stdin.split())\n        tree[v1 - 1][v2 - 1] = tree[v2 - 1][v1 - 1] = 1\n\n    degree_of_vertices = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            degree_of_vertices[i] += get_degree(i, j)\n\n    edges = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if degree_of_vertices[i] <= k and degree_of_vertices[j] <= k and get_degree(i, j) <= d:\n                edges.add((i, j))\n\n    if len(edges) < n - 1:\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if (i, j) not in edges:\n                edges.add((i, j))\n\n    for edge in edges:\n        print(edge[0] + 1, edge[1] + 1)\n\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    visited = [False] * n\n    count = 0\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    def dfs(v: int):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(u)\n                if count < d:\n                    count = count + 1 if count < d else d\n                else:\n                    count = count - 1\n                if count == d - 1:\n                    count = 0\n\n    for v in range(n):\n        if not visited[v]:\n            dfs(v)\n\n    return \"YES\" if count == d - 1 else \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, d, k = [int(x) for x in stdin.split()]\n    if k > d:\n        return \"NO\"\n    if d == 1:\n        return \"YES\"\n    if n - 1 < k * (d - 1):\n        return \"NO\"\n    else:\n        return \"YES\"\n    return False\n\nprint(solution(input()))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split(' '))\n\n    if n < k:\n        return 'NO'\n    if d < k:\n        return 'NO'\n\n    adj = {}\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split(' '))\n        adj[u] = adj.get(u, []) + [v]\n        adj[v] = adj.get(v, []) + [u]\n\n    # print(adj)\n\n    res = []\n    def dfs(u, parent, depth):\n        if depth == d:\n            return\n        if u == n:\n            # print('dd')\n            if len(set(res))!= n - 1:\n                return\n            # print(res)\n            res.append(u)\n            if depth < d:\n                for v in adj[u]:\n                    if v == parent:\n                        continue\n                    dfs(v, u, depth + 1)\n            else:\n                for v in adj[u]:\n                    if v == parent:\n                        continue\n                    dfs(v, u, depth)\n        else:\n            # print('uu')\n            res.append(u)\n            if len(set(res))!= n - 1:\n                return\n            # print(res)\n            for v in adj[u]:\n                # print(v)\n                if v == parent:\n                    continue\n                dfs(v, u, depth + 1)\n\n    dfs(1, -1, 0)\n    if len(set(res))!= n - 1:\n        return 'NO'\n    # print(res)\n    return 'YES'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    a, b, x = int(stdin[0].split(\" \")[0]), int(stdin[0].split(\" \")[1]), int(stdin[0].split(\" \")[2])\n    res = []\n    \n    for i in range(a + 1):\n        if (i % 2 == 0):\n            res.append('0')\n        else:\n            res.append('1')\n    \n    for i in range(b + 1):\n        if (i % 2 == 0):\n            res.append('1')\n        else:\n            res.append('0')\n    \n    for i in range(x + 1):\n        if (i % 2 == 0):\n            res.append('0')\n        else:\n            res.append('1')\n    \n    return \"\".join(res)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(\" \")\n    if int(nums[1]) > int(nums[0]):\n        return \"NO\"\n\n    if int(nums[0]) == 0:\n        return \"NO\"\n\n    if int(nums[1]) == int(nums[0]):\n        return \"1\" * int(nums[1])\n\n    count = 0\n    string = \"\"\n\n    for i in range(int(nums[1]) + 1, int(nums[0]) + int(nums[1]) + 1):\n        string += \"1\"\n        count += 1\n        if count == int(nums[2]):\n            string += \"0\"\n            count = 0\n\n    return string\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n\n    binary_str = str(bin(a + b))[2:]\n    result = binary_str\n\n    for i in range(b):\n        result = ''.join(list(map(lambda x: '1' if x == '0' else '0', result)))\n\n    while True:\n        if result[:x]!= '0' * x:\n            break\n        result = result[1:]\n\n    return result\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(s) for s in stdin.split(' ')]\n    length = a + b\n    s = []\n    for i in range(1, length + 1):\n        s.append(bin(i)[2:].zfill(length))\n    for i in range(length):\n        if '1' * a in s[i] and '0' * b in s[i] and x in s[i]:\n            return s[i]\n    return 'Impossible'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    a, b, x = min(a, b, x), max(a, b, x), (a + b) - x\n    return '0' * a + '1' * b + '0' * (x - b) if a >= x and x <= b else ''\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, x = map(int, stdin.split())\n    return \"{:b}\".format(a ** b + x ** b)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    n = a + b\n    if x == 1:\n        return ''.join(['0'] * a + ['1'] * b)\n    else:\n        return ''.join(['1'] * a + ['0'] * b)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = [int(x) for x in stdin.split(' ')]\n    a, b, x = count[0], count[1], count[2]\n\n    ans = ''\n\n    # 1. \u7522\u751f\u7b26\u5408\u6761\u4ef6\u7684binary string\n    #   a. \u7b2c\u4e00\u500b\u4f4d\u7f6e\u662f1\n    #   b. \u7b2c\u4e8c\u500b\u4f4d\u7f6e\u662f0\n    #   c. \u53ea\u8981\u662f\u7b26\u5408(1\u500b0, 1\u500b1, 1\u500b\u7b26\u5408)\u7684binary string, \u7b54\u6848\u5c31\u662f\u6700\u5f8c\u4e00\u500b1\n    for i in range(1, b + 1):\n        ans += '1'\n    for i in range(1, a + 1):\n        ans += '0'\n    for i in range(1, x + 1):\n        ans += '1'\n\n    # 2. \u6aa2\u67e5\u662f\u5426\u7b26\u5408\n    #   a. \u627e\u51fa1\u7684\u500b\u6578\u662f\u5426\u662fa\n    #   b. \u627e\u51fa0\u7684\u500b\u6578\u662f\u5426\u662fb\n    #   c. \u627e\u51fa\u7b26\u5408\u7684index\u7684\u500b\u6578\u662f\u5426\u7b49\u65bcx\n    #   d. \u5c07\u4e0a\u8ff0\u4e09\u500b\u689d\u4ef6\u7b26\u5408\u7684string\u4e32\u8d77\u4f86\n    \n    return ans\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    s = '1'*a+'0'*b+'1'\n    for i in range(1, len(s)-1):\n        if s[i] == s[i+1] and s[i] == '1':\n            s = s[:i+1]+'0'*b+'1'*a\n    for i in range(len(s)):\n        if s[i]!= s[i+1]:\n            s = s[:i]+'1'+'0'*(len(s)-1-i)+'1'\n    return s\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_count, b_count, c_count = stdin.count('a'), stdin.count('b'), stdin.count('c')\n    s, t = stdin[0], stdin[1]\n    if (\n        a_count > b_count\n        or b_count > c_count\n        or a_count + b_count!= c_count\n        or t == s\n        or s + t == stdin\n        or b_count > 0 and c_count > 0\n        or s == t == 'c'\n    ):\n        return \"NO\"\n    return \"YES\\n\" + stdin[: len(stdin) - 2] + 'c' * a_count + 'b' * b_count + 'a' * c_count\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin[0], stdin[1]\n    if len(set(s + t))!= 6:\n        return \"NO\"\n    return \"YES\\n\" + s[0] * 3 + t[0] * 3 + s[1] * 3\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    cnt = int(stdin[0])\n    answer = []\n    if cnt == 1:\n        answer = [t[0]] + [s[0]] + [t[0]]\n    elif cnt == 2:\n        answer = [s[0], t[0], s[0]]\n    elif cnt == 3:\n        answer = [s[0], s[1], t[0], t[1], s[0]]\n    elif cnt == 4:\n        answer = [s[0], s[1], t[0], t[1], s[0], s[1], t[0], t[1]]\n    else:\n        answer = [\"NO\"]\n    return \"\".join(answer)\nprint(solution(stdin))"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    result = \"\"\n    for i in range(3*a):\n        result += 'a'\n    for i in range(3*b):\n        result += 'b'\n    for i in range(3*c):\n        result += 'c'\n    if b+c in result or c+b in result:\n        return \"NO\"\n    return result\n    \n    \n    \n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1]\n    t = stdin[2]\n    if n % 2 == 0:\n        return \"NO\"\n    stdin_list = [s, t]\n    for i in range(len(stdin_list)):\n        if s.count(stdin_list[i][0])!= t.count(stdin_list[i][0]) or s.count(stdin_list[i][1])!= t.count(stdin_list[i][1]):\n            return \"NO\"\n    stdin_list = []\n    for i in range(len(s)):\n        for j in range(i, i + len(t)):\n            if j >= len(s):\n                break\n            if s[i] == t[0] and s[j] == t[1]:\n                stdin_list.append(s[i:j + 1])\n    for i in stdin_list:\n        if s.count(i[0])!= t.count(i[1]) or s.count(i[1])!= t.count(i[0]):\n            stdin_list.remove(i)\n    if len(stdin_list) == 0:\n        return \"NO\"\n    elif len(stdin_list) == 1:\n        return stdin_list[0]\n    else:\n        stdin_list.sort(key=len)\n        stdin_list[0] = stdin_list[0] + stdin_list[1]\n        return stdin_list[0]\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ab\")\n    'ac'\n    >>> solution(\"ca\")\n    'cb'\n    >>> solution(\"bb\")\n    'cc'\n    \"\"\"\n    n = int(stdin.split()[0])\n    if n == 1:\n        return 'ac'\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    d = {'a': 0, 'b': 0, 'c': 0}\n    c = 0\n    for char in s:\n        d[char] += 1\n        if d[char] > n:\n            c += 1\n    d = {'a': 0, 'b': 0, 'c': 0}\n    c = 0\n    for char in t:\n        d[char] += 1\n        if d[char] > n:\n            c += 1\n    if c > 0:\n        return \"NO\"\n    s = set()\n    for char in s:\n        if char in t:\n            s.remove(char)\n    ans = \"\"\n    for char in s:\n        ans += char * n\n    return ans + \"a\" * n + \"b\" * n + \"c\" * n\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    def find_res(s, t):\n        if s + t in res:\n            return s + t\n\n    def test(s, t):\n        if s + t in res:\n            return find_res(s, t)\n\n        if t + s in res:\n            return t + s\n\n        if t[0] + s in res:\n            return t[0] + s\n\n        if s[0] + t in res:\n            return s[0] + t\n\n        return s + t\n\n    res = set()\n    for i in range(1, s + 1):\n        res.add(s[0] * i + t[0] * i)\n        res.add(s[1] * i + t[1] * i)\n\n    return test(s, t)\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    ans = []\n    for c1 in s:\n        for c2 in t:\n            ans.append(c1 + c2 + c2)\n\n    print('YES')\n    print('\\n'.join(ans))\n\n    return ''\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('2\\naa\\nbc')\n    YES\n    'acbbac'\n    >>> solution('3\\naa\\nbc')\n    YES\n    'acbacbac'\n    '''\n    stdin = stdin.strip().split('\\n')\n    a, b, c = stdin\n    a = int(a)\n    res = \"\"\n    while len(res) < 3 * a:\n        if b in res and c in res:\n            if res.count(b) > res.count(c):\n                res += b\n            elif res.count(b) < res.count(c):\n                res += c\n            else:\n                res += c if res.count(b) == 1 else b\n        else:\n            res += b if res.count(b) == 0 else c\n    return \"YES\" if res[:a] == res[-a:] else \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    if len(s)!= 2 or len(t)!= 2:\n        return \"NO\"\n    elif s == t or len(set(s + t))!= 3:\n        return \"NO\"\n    else:\n        res = list(\"c\" * int(n) * 3)\n        return \"YES\\n\" + \"\".join(res)\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    if q[0] == -1:\n        return -1\n    p = [0]\n    for i in range(1, n):\n        p.append(p[i - 1] + q[i - 1])\n    p = p[1:]\n    for i in range(n - 1):\n        if p[i] == p[i + 1]:\n            return -1\n    p = p[::-1]\n    for i in range(n):\n        if p[i]!= i + 1:\n            return -1\n    return \" \".join(str(i + 1) for i in p)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    p = list(range(1, n+1))\n    if len(q) == n - 1:\n        for i in range(n):\n            p[q[i]-1], p[i] = p[i], p[q[i]-1]\n        return \" \".join(map(str, p))\n    return \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    q.append(q[0])\n    for i in range(n):\n        if q[i]!= q[i + 1] - i:\n            return -1\n    return \" \".join(map(str, range(1, n + 1)))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for https://codeforces.com/problemset/problem/112/B\n\n    Args:\n        stdin: input on stdin\n\n    Returns:\n        output to stdout\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    p = [n+1]\n    for i in range(n):\n        p.append(p[-1] - q[i])\n    if any(x == 0 for x in p[1:]):\n        return -1\n    return \" \".join(map(str, p[1:]))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    -1 2 3 4 5\n    \"\"\"\n    N, *q = stdin.split()\n    if N < 2 or N > 10 ** 5:\n        return -1\n    \n    if N == 2 and q == [-1, 1]:\n        return 1\n    \n    q = list(map(int, q))\n    if not all([q[i] < N and q[i] >= 0 for i in range(N - 1)]):\n        return -1\n\n    return''.join([str(i + 1) for i in range(N - 1, -1, -1)])"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    q = stdin.split()[1:]\n    p = [1]\n    for i in range(1, N):\n        p.append(p[i - 1] + i + 1)\n    p.append(p[N - 1] + N)\n    if N == 1:\n        print(1)\n        return\n    for i in range(N - 1):\n        if p[q[i]]!= p[q[i] + 1] - 1:\n            print(-1)\n            return\n    print(*p[1:])\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = [int(c) for c in stdin.split('\\n')]\n    \n    if n < 0 or n > pow(10,5):\n        return -1\n    \n    for i in range(n-1):\n        if q[i] < -n or q[i] >= n or q[i+1] < -n or q[i+1] >= n:\n            return -1\n    \n    p = [0] * n\n    for i in range(n):\n        if q[i] < 0:\n            p[i] = n + q[i]\n        else:\n            p[i] = q[i]\n    \n    return''.join(str(c) for c in p)\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    first, sort the array\n    second, if the list is 1 long, it is the answer\n    third, if the list is 2 long, get the second element and check if it exists in the first list\n    '''\n    l = [int(x) for x in stdin.split()]\n    l.sort()\n    if len(l) == 1:\n        return '-1'\n    if len(l) == 2:\n        return str(l[0] + 1)\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return '-1'\n    for i in range(1, len(l)):\n        if l[i] == l[i - 1] + 1:\n            return str(l[i - 1] + 1) +'' + str(l[i] + 1)\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the permutation of length N which has the given q array\"\"\"\n    # get number of lines to read\n    lines = stdin.splitlines()\n    # initialize variables\n    n = int(lines[0])\n    q = list(map(int, lines[1].split()))\n    ans = -1\n    \n    # make permutation\n    perm = [i for i in range(1, n+1)]\n    \n    # loop through q array\n    for i in range(len(q)):\n        # find the index of the number to swap\n        j = 0\n        while j < len(perm):\n            if perm[j] == q[i]+1:\n                break\n            j += 1\n        # swap numbers\n        temp = perm[j]\n        perm[j] = perm[i]\n        perm[i] = temp\n        \n    # print results\n    if perm == [i for i in range(1, n+1)]:\n        print(' '.join(list(map(str, perm))))\n    else:\n        print(ans)\n            \n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(i) for i in stdin.split()]\n    #print(nums)\n    \n    def get_score(num):\n        score = 0\n        for i in num:\n            if i%2:\n                score += 1\n            else:\n                score += 2\n        return score\n    \n    def get_score_left(num):\n        score = 0\n        for i in num:\n            if i%2:\n                score += 1\n            else:\n                score += 2\n        return score\n    \n    min_score = 0\n    for i in nums:\n        current_score = get_score(nums)\n        current_score_left = get_score_left(nums)\n        if current_score < min_score:\n            min_score = current_score\n        elif current_score_left < min_score:\n            min_score = current_score_left\n    \n    return str(min_score)\n\nprint(solution(input()))"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    from collections import Counter\n    dic = Counter(nums)\n    first_val = [k for k, v in dic.items() if v == 1][0]\n    if first_val == 1:\n        print(0)\n    else:\n        print(nums.count(first_val) * 2)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''.join(stdin.split('\\n'))"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal in this problem is to find the minimum number of coins required to move all of the chips to the same position.\n    To do this, we can assume that the total number of moves is at most n-1 (as we're moving the chips one at a time).\n    This means that we can either move each of the chips by one coin at a time, and\n    then move the remaining chips to the same position, or\n    move the chips to the same position by moving one coin at a time,\n    and then move the remaining chips to the same position.\n    The minimum number of coins needed to move all the chips to the same position is the minimum of these two scenarios.\n    \"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x.sort()\n    s = 0\n    for i in range(1, len(x)):\n        s += x[i] - x[i-1]\n    return s\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution\n    \"\"\"\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split('\\n')\n    num = int(num_list[0])\n    count = 0\n    while num > 1:\n        if num % 2 == 0:\n            num /= 2\n            count += 1\n        else:\n            num += 1\n            count += 1\n    return count"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    moves = 0\n    start = tuple(map(int, stdin.splitlines()[0].split()))\n    end = tuple(map(int, stdin.splitlines()[1].split()))\n\n    while start!= end:\n        if abs(start[0] - end[0]) < abs(start[1] - end[1]):\n            start = (start[0] + 1, start[1])\n        else:\n            start = (start[0], start[1] + 1)\n        moves += 1\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    print(int((math.sqrt(1+8*N)-1)/2))\n    return ''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N > 1:\n        if N % 2 == 0:\n            N /= 2\n        else:\n            N = 3 * N + 1\n        count += 1\n    return count"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(s) for s in stdin.split('\\n')]\n    return str(solve(data))\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    \n    # upper and lower limits of the table\n    UPPER = number + 1\n    LOWER = number - 1\n\n    # we'll use the fact that for any number, we can reach its square using only the above two values\n    # for example, 8 can be reached from 6 and 9, so the difference between those two squares is 6-9 = 3\n    # we'll use the same idea for 10, 100, 1000,...\n    # so we'll go up from lower to upper and see where we can find the square of N\n    for i in range(LOWER, UPPER):\n        # by comparing the squares of the two numbers above the one we're on, we'll know if N is the case\n        # e.g. if we're at 10, we'll want to look at the 5 and 15\n        # but if we're at 100, we'll want to look at 10 and 100\n        # so if N is bigger than 10, we'll move N - 10\n        if number - i * i > 10:\n            return str(i - 1) +'' + str(number - (i - 1) ** 2)\n        else:\n            return str(i) +'' + str(number - i ** 2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '5'\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N) where N is the given integer input\n    Space: O(N)\n    \"\"\"\n    N = int(stdin)\n    i, j = 1, 1\n    steps = 0\n    while True:\n        if (i + 1) ** 2 <= N:\n            i += 1\n            steps += 1\n        elif (i + 1) ** 2 > N and (i) ** 2 <= N:\n            i += 1\n            steps += 1\n        elif (i + 1) ** 2 > N and (i) ** 2 > N:\n            if (j + 1) ** 2 <= N:\n                j += 1\n                steps += 1\n            elif (j + 1) ** 2 > N and j ** 2 <= N:\n                j += 1\n                steps += 1\n            elif (j + 1) ** 2 > N and j ** 2 > N:\n                return steps\n        else:\n            return steps\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # Get input\n  n = int(stdin)\n\n  # Return answer\n  return str(int(math.ceil(math.sqrt(n))))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 2 and n <= 10**12:\n        return str(int(n**0.5))\n\"\"\"\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(...)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice = [0,0,0]\n    bob = [0,0,0]\n    for _ in range(n):\n        A = list(map(int, stdin.split()))\n        B = list(map(int, stdin.split()))\n        alice[0] += A[0]\n        alice[1] += A[1]\n        alice[2] += A[2]\n        bob[0] += B[0]\n        bob[1] += B[1]\n        bob[2] += B[2]\n    return str(max(alice[0], alice[1], alice[2])) + \" \" + str(min(alice[0], alice[1], alice[2]))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #Input\n    # 15\n    # 5 5 5\n    # 5 5 5\n    #Output\n    # 0 15\n    a1, a2, a3 = map(int, stdin.split())\n    b1, b2, b3 = map(int, stdin.split())\n    n = a1 + a2 + a3\n    m = b1 + b2 + b3\n    a1 = n - a1\n    b1 = m - b1\n    min_rounds = b1 if b1 < a1 else a1\n    max_rounds = b1 if b1 > a1 else a1\n    return str(min_rounds) +'' + str(max_rounds)"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    alice_scissors = 0\n    alice_paper = 0\n    alice_rock = 0\n    bob_rock = 0\n    bob_paper = 0\n    bob_scissors = 0\n    for line in stdin.readlines():\n        line = line.strip().split()\n        alice_rock += int(line[0])\n        alice_scissors += int(line[1])\n        alice_paper += int(line[2])\n        bob_rock += int(line[3])\n        bob_scissors += int(line[4])\n        bob_paper += int(line[5])\n    alice_paper_win = min(alice_paper - alice_scissors, alice_scissors - alice_paper)\n    alice_scissors_win = min(alice_scissors - alice_rock, alice_rock - alice_scissors)\n    bob_rock_win = min(bob_rock - bob_scissors, bob_scissors - bob_rock)\n    bob_scissors_win = min(bob_scissors - bob_paper, bob_paper - bob_scissors)\n    return str(min(alice_paper_win, alice_scissors_win, bob_rock_win, bob_scissors_win)) + \" \" + str(\n        max(alice_paper_win, alice_scissors_win, bob_rock_win, bob_scissors_win))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(stdin.readline()) for _ in range(3)]\n    B = [int(stdin.readline()) for _ in range(3)]\n    \n    win_A = 0\n    win_B = 0\n    \n    for i in range(3):\n        if A[i] > B[i]:\n            win_A += 1\n        elif B[i] > A[i]:\n            win_B += 1\n    \n    return \"{} {}\".format(min(win_A, N - win_A), max(win_A, N - win_A))\n    \n        \n        \n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \" \".join(map(str, [0, 0]))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(map(int, stdin.readline().split()))\n    b = tuple(map(int, stdin.readline().split()))\n\n    if a[1] > a[2] or b[1] > b[2]:\n        return '0 1'\n\n    a, b = max(a), max(b)\n    l, r = 0, n\n    while l <= r:\n        m = (r + l) // 2\n        a_h = a + m\n        b_h = b + m\n        if a_h > n or b_h > n:\n            break\n        a_l, b_l = a_h - a, b_h - b\n        if a_l > 0 and b_l > 0:\n            break\n        if a_l > 0:\n            r = m - 1\n        else:\n            l = m + 1\n\n    a_l, b_l = a - a_h, b - b_h\n    return str(max(a_l, 0)) +'' + str(min(n, b_l + r))\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \" \".join(map(str, [min(a, b), max(a, b)])), None\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a_string = stdin[1]\n    b_string = stdin[2]\n    a_list = list(map(int, a_string.split()))\n    b_list = list(map(int, b_string.split()))\n    n = sum(a_list)\n    a_list = [n - i for i in a_list]\n    b_list = [n - i for i in b_list]\n    return str(max(a_list) + min(a_list)) + \" \" + str(max(b_list) + min(b_list))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    if n <= 1:\n        return '0'\n\n    # get blocks\n    b = [0] * n\n    for i in range(n):\n        b[i] = sum(a[i:])\n\n    # get indices\n    s = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if b[i] == b[j]:\n                s.add((i + 1, j + 1))\n    s = sorted(list(s), key=lambda x: b[x[0] - 1] + b[x[1] - 1])\n    s = list(s)\n    k = len(s)\n\n    # print\n    for i in range(k):\n        print(s[i][0], s[i][1])\n    return str(k)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split(' ')))\n    a = [0] * n\n    res = 0\n    for i in range(n):\n        a[i] = seq[i]\n    ans = []\n    l = r = 0\n    for i in range(n):\n        if a[i] < a[l]:\n            l = i\n        if a[i] >= a[r]:\n            r = i\n        if r - l > res:\n            ans = [l, r]\n            res = r - l\n    for i in ans:\n        print(i, end=' ')\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    max_cnt = 1\n    l = 1\n    r = 0\n    curr_sum = arr[0]\n    for i in range(1, n):\n        if arr[i] > curr_sum:\n            curr_sum = arr[i]\n            max_cnt += 1\n            l = i\n            r = i\n        elif arr[i] < curr_sum:\n            l = i\n            r = i\n        elif arr[i] == curr_sum:\n            r += 1\n            if r > n:\n                break\n    return max_cnt\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    return n\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 2 2 1 5 3\\n\")\n    3\n    >>> solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    >>> solution(\"7 4 1 2 2 1 5 3\\n\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^3) time and space\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    ans = 0\n    # left, right = 0, n - 1\n    # left_cur = 0\n    # right_cur = n - 1\n    # for left in range(n):\n    #     left_cur += a[left]\n    #     while left_cur > right_cur:\n    #         right_cur -= a[right]\n    #         right -= 1\n    #         right_cur -= a[right]\n    #     ans = max(ans, right - left + 1)\n    # print(ans)\n\n    # dp[i][j] is max length from i to j\n    # dp[i][j] = dp[i][k] + dp[k+1][j] + sum(a[k+1]...a[j] - min(a[i], a[k+1],..., a[j]))\n    dp = [[0] * n for _ in range(n)]\n    # init\n    for i in range(n):\n        dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i][i] + dp[i][j - 1] - min(dp[i][i], dp[i][j - 1])\n            dp[i][j] += a[j]\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans = max(ans, dp[i][j])\n    print(ans)\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if all(a[i] + a[j] >= x for x in a[j:i:-1]):\n                s.add((i, j))\n    print(len(s))\n    for i, j in s:\n        print(i, j)\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    if len(arr) <= 1:\n        return 'YES'\n    arr = sorted(arr)\n    last = arr[0]\n    for i in range(len(arr)):\n        if last + 2 >= arr[i]:\n            last = arr[i]\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[:2])\n    ravioli = [(a[i], i) for i in range(n)]\n\n    ravioli = sorted(ravioli, reverse=True)\n\n    results = []\n    while ravioli:\n        highest = ravioli[0][0]\n        stack_index = 0\n        for i in range(len(ravioli)):\n            if ravioli[i][0] == highest:\n                stack_index = i\n                break\n\n        ravioli[0], ravioli[stack_index] = ravioli[stack_index], ravioli[0]\n        ravioli.pop(0)\n        results.append(highest)\n        ravioli = sorted(ravioli, key=lambda x: x[1])\n\n    return 'YES' if results == list(range(1, n + 1)) else 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    # n = int(input())\n    arr = [int(x) for x in stdin.split(' ')]\n    # arr = [int(x) for x in input().split(' ')]\n\n    # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 arr \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f i \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f maxi \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f stack \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0442\u0435\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f arr_stack \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0435\u043a\u0435\n\n    def get_maxi(arr, i, maxi, stack):\n        if i < len(arr):\n            if arr[i] >= maxi:\n                maxi = arr[i]\n                stack = [arr[i]]\n                i += 1\n                return get_maxi(arr, i, maxi, stack)\n            else:\n                return get_maxi(arr, i + 1, maxi, stack)\n        else:\n            return maxi, stack\n\n    maxi, stack = get_maxi(arr, 0, -1, [])\n\n    # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f j \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f maxi \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f stack_sorted \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0435\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f arr_sorted \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u0432 \u0441\u0442\u0435\u043a \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435\n\n    def get_sorted(arr, j, maxi, stack_sorted, arr_sorted):\n        if j < len(arr):\n            if arr[j] >= maxi:\n                stack_sorted = [arr[j]]\n                arr_sorted = arr_sorted + stack_sorted\n                j += 1\n                return get_sorted(arr, j, maxi, stack_sorted, arr_sorted)\n            else:\n                return get_sorted(arr, j + 1, maxi, stack_sorted, arr_sorted)\n        else:\n            return arr_sorted\n\n    arr_sorted = get_sorted(arr, 0, -1, [], [])\n\n    # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f j \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f arr_sorted \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u0432 \u0441\u0442\u0435\u043a \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0435\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f arr_stack_sorted \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0435\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f count_stack \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n\n    def get_output(arr_sorted, j, arr_stack_sorted, count_stack):\n        if j < len(arr_sorted):\n            if arr_sorted[j] == arr_stack_sorted[-1]:\n                count_stack += 1\n                arr_stack_sorted.append(arr_sorted[j])\n                j += 1\n                return get_output(arr_sorted, j, arr_stack_sorted, count_stack)\n            else:\n                arr_stack_sorted.append(arr_sorted[j])\n                j += 1\n                return get_output(arr_sorted, j, arr_stack_sorted, count_stack)"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sorted(stdin.split(), reverse=True)\n    print(s)\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(s[i])\n    print(a)\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            print(\"YES\")\n            return \"YES\"\n    print(\"NO\")\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3\")\n    'YES'\n    >>> solution(\"3\\n3 1 2\")\n    'NO'\n    \"\"\"\n    line = stdin.splitlines()\n    n = int(line[0])\n    arr = [int(i) for i in line[1].split(\" \")]\n\n    res = []\n\n    for i in range(n):\n        res.append(arr[i])\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and (res[-1] - res[i] <= 1):\n                res.append(arr[i])\n                break\n            elif arr[i] < arr[j]:\n                break\n\n    return \"YES\" if res == sorted(res) else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_ravioli = int(stdin[0])\n    ravioli = stdin[1].split()\n    sorted_ravioli = []\n    for i in range(num_ravioli):\n        sorted_ravioli.append(int(ravioli[i]))\n    sorted_ravioli = list(set(sorted_ravioli))\n    sorted_ravioli.sort()\n    i = 0\n    while len(sorted_ravioli)!= 1:\n        if sorted_ravioli[i] == sorted_ravioli[i+1]:\n            sorted_ravioli.pop(i+1)\n        else:\n            sorted_ravioli.pop(i)\n        i = 0\n    if len(sorted_ravioli) == 1:\n        return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.split('\\n')[0])\n    s, t = stdin.split('\\n')[1:3]\n    moves = 0\n    return moves\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n---Solutions---\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    len_s, len_t = stdin.split(\"\\n\")\n    len_s = int(len_s)\n    len_t = int(len_t)\n    if len_s!= len_t:\n        return \"Impossible\"\n    s, t = stdin.split(\"\\n\")\n    t = list(t)\n    ans = []\n    for i in range(len_s - 1):\n        if s[i]!= s[i + 1] and t[i]!= t[i + 1]:\n            ans.append(i + 1)\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return '-1' if len(s)!= len(t) else str(len(s) - sum([s[i]!= t[i] for i in range(len(s))])) + '\\n' + '\\n'.join(s[i] + t[i] if s[i]!= t[i] else '' for i in range(len(s)))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s)!= n or len(t)!= n:\n        return \"-1\"\n    visited = set()\n    graph = defaultdict(list)\n    for i, char in enumerate(s):\n        graph[char].append(i + 1)\n    # print(graph)\n    def dfs(node, pre):\n        if len(graph[node]) == 1:\n            visited.add(node)\n            pre.append(node)\n            visited.add(t[node - 1])\n            return True\n        # if t[node - 1] not in graph[node]:\n        #     return False\n        for j in graph[node]:\n            if j not in visited:\n                pre.append(node)\n                dfs(j, pre)\n                if t[node - 1] in graph[j]:\n                    visited.add(j)\n                    visited.add(t[node - 1])\n                    pre.append(t[node - 1])\n                    return True\n        return False\n    for i, char in enumerate(s):\n        if char == t[i]:\n            continue\n        if dfs(i + 1, []):\n            print(len(visited))\n            print(\" \".join(map(str, pre)))\n            return \"0\"\n    return \"-1\"\n    \n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return '-1'\n    return''.join(map(lambda x: str(len(x)), permutation(list(s)).split()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    assert len(t) == n\n    m = {s[i]: t[i] for i in range(n)}\n\n    def helper(s):\n        if s == t:\n            return 0\n        if not s:\n            return -1\n        return max(helper(s[:-1]) + int(s[-1]!= m[s[-1]]), helper(s[:-1]))\n    return str(helper(s))\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    How to solve this task?\n\n    Regex\n    \"\"\"\n\n    return \"SPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    s = s[::-1]\n    prefixes = []\n    suffixes = []\n    for i in range(len(s)-1):\n        if s[i] < s[i+1]:\n            prefixes.append(s[:i+1])\n        else:\n            suffixes.append(s[i+1:])\n    print(prefixes, suffixes)\n    result = []\n    for i in range(len(prefixes)):\n        if prefixes[i] in suffixes:\n            result.append('P')\n        else:\n            result.append('S')\n    result = ''.join(result)\n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for line in stdin.split(\"\\n\"):\n        if len(line) < n:\n            continue\n        for i in range(1, n):\n            if line[i - 1] == line[-i]:\n                break\n            elif i == n - 1:\n                print(\"PPSS\")\n                break\n        for i in range(1, n):\n            if line[-i - 1] == line[i]:\n                break\n            elif i == n - 1:\n                print(\"PS\")\n                break\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba')\n    'SPPSPSPS'\n    >>> solution('3\\na\\naa\\na\\n')\n    'PPSS'\n    >>> solution('2\\na\\nc\\n')\n    'PS'\n    >>> solution('1\\na\\n')\n    'S'\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[-j]:\n                ans.append('P')\n            else:\n                ans.append('S')\n    return ''.join(ans)\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nimport itertools\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1:]\n    left = 0\n    right = n - 1\n    while left < right:\n        if s[left]!= s[right]:\n            return 'SPS'\n        left += 1\n        right -= 1\n    return 'PPS'"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    s = stdin.readline()\n    if n == 1:\n        return 'PS'\n    a = set()\n    b = set()\n    for i in range(1, n):\n        if s[:i] not in a:\n            a.add(s[:i])\n        else:\n            b.add(s[i:])\n    for j in range(n, n * 2 - 2):\n        if s[j:] not in b:\n            a.add(s[j:])\n        else:\n            b.add(s[:j])\n    if len(a) < len(b):\n        return 'PS'\n    return 'PP'"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba')\n    'PSPSPSPS'\n    >>> solution('3\\na\\naa\\naa\\na')\n    'PPSS'\n    >>> solution('2\\na\\nc')\n    'PS'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nimport string\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    return str(numbers[0])"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and return result.\n\n    Notes:\n        -  Convert stdin to list of integers.\n        -  Print out the minimum number of sacrifices required.\n        -  Print out the index of the corresponding victim's name.\n        -  Print out the index of the corresponding sacrifice's name.\n        -  Print out the name of the victim.\n        -  Print out the name of the sacrifice.\n\n    Args:\n        stdin: String. Input.\n\n    Returns:\n        str: String. Output.\n    \"\"\"\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    b = [a[i+1] - a[i] for i in range(len(a)-1)]\n    c = [b.count(b[i]) for i in range(len(b))]\n    d = c.index(max(c))\n    print(d)\n    print(d+1)\n    print(a[d])\n    print(a[d+1])\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_as_int = stdin.split(' ')\n    return f\"{number_of_even_isos(input_as_int)}\"\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to\n    the\n    first\n    problem\n    of\n    the\n    day\n    \"\"\"\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    \n    A = [int(a) for a in stdin]\n    \n    A.sort()\n    \n    count = 1\n    \n    for i in range(len(A) - 1):\n        if A[i] == A[i + 1]:\n            count += 1\n        else:\n            count = 1\n    \n    print(count)\n    return \"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '''\"\n    Addendum pour les nombres de liste\n    \"\"\"\n    def ack(m, n):\n        if m == 0:\n            return n + 1\n        elif m > 0 and n == 0:\n            return ack(m - 1, 1)\n        elif m > 0 and n > 0:\n            return ack(m - 1, ack(m, n - 1))\n\n    print(ack(int(stdin.split()[0]), int(stdin.split()[1])))\n    '''\n\n\nsolution()\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    return max(0, min(nums[0], nums[1] + 1) - max(nums[0], nums[1]) + 1)\n\n\nprint(solution('2 4 6 8 10'))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    ans = 0\n    \n    for i in range(n - 1):\n        if a[i] == 0 and a[i + 1] == 0 and a[i - 1] == 0 and a[i + 2] == 0:\n            ans += 1\n    print(ans)\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))\n\nh = 0\nfor i in range(1, n - 1):\n    if a[i] == 0:\n        if a[i - 1] == 1 and a[i + 1] == 1:\n            h += 1\nprint(h)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_flats = int(stdin.readline())\n    # we consider empty input as 0\n    flats = list(map(int, stdin.readline().split())) or [0]\n    count = 0\n    for i in range(1, num_flats):\n        if flats[i] == 1 and flats[i - 1] == 1 and flats[i + 1] == 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_flats = int(stdin.readline())\n    floor = [int(num) for num in stdin.readline().split(' ')]\n    #floor = [int(num) for num in stdin.readline().split(' ')]\n    #floor = [int(num) for num in stdin.readline().split(' ')]\n    #floor = [int(num) for num in stdin.readline().split(' ')]\n    #floor = [int(num) for num in stdin.readline().split(' ')]\n    #floor = [int(num) for num in stdin.readline().split(' ')]\n    #floor = [int(num) for num in stdin.readline().split(' ')]\n\n    # if floor[0] == 1 and floor[1] == 1 and floor[2] == 0:\n    #     floor[0] = 0\n    # if floor[-1] == 1 and floor[-2] == 1 and floor[-3] == 0:\n    #     floor[-1] = 0\n\n    prev_flats = []\n    curr_flats = []\n    max_occupied_flats = 0\n    min_occupied_flats = len(floor)\n    for i in range(len(floor)):\n        if floor[i] == 1:\n            curr_flats.append(i)\n        else:\n            prev_flats.append(i)\n        if len(curr_flats) > max_occupied_flats:\n            max_occupied_flats = len(curr_flats)\n        if len(prev_flats) > 0:\n            curr_flats.append(prev_flats.pop(0))\n        if len(curr_flats) < min_occupied_flats:\n            min_occupied_flats = len(curr_flats)\n\n    print(min_occupied_flats, max_occupied_flats)\n    if min_occupied_flats == 1:\n        return 1\n    else:\n        return min_occupied_flats - 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(ch) for ch in stdin.split()]\n    # print(n, a)\n    res = n\n    for i in range(n):\n        if 1 < i < n:\n            if (a[i-1] == 1 and a[i+1] == 1) or (a[i-1] == 0 and a[i+1] == 0):\n                pass\n            else:\n                res = min(res, i)\n                break\n    print(res)\n    return ''\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\n1 1 0 1 1 0 1 0 1 0\\n')\n    2\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    lights = list(map(int, stdin.split('\\n')[1].split(' ')))\n\n    for i in range(1, n):\n        if lights[i - 1] == lights[i] == 1:\n            lights[i] = 0\n    print(lights)\n\n    if not lights.count(0) >= 2:\n        return 0\n\n    pairs = list(zip(lights[:-1], lights[1:]))\n    print(pairs)\n    print(f\"{pairs.count((1, 1))=}\")\n    return pairs.count((1, 1))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    # your code here\n    \"\"\"\n    return 0\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is an example solution to the given problem.\n    It's not very efficient and it's primarily meant to illustrate how to\n    read input and write output.\n    \"\"\"\n\n    n = int(stdin.readline().strip())\n\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    result = 0\n    for x in a:\n        result += ceil(x / gcd(x, result))\n\n    return str(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(' ')]\n    count = 0\n    for i in a:\n        if i == 1:\n            count += 1\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    I'm going to implement a Naive Solution here.\n    '''\n\n    return \"How to solve this problem\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    # get input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    count = 0\n    num_a = len(a)\n\n    for i in range(num_a):\n        for j in range(i+1, num_a):\n            if a[i] % a[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    arr.sort()\n    count = 1\n    for i in range(len(arr)):\n        if arr[i] > count:\n            count += 1\n    return count\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split(' ')))\n    s.sort()\n    v = set(s)\n    print(len(v))"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [int(x) for x in stdin.split(\"\\n\")[0].split(' ')]\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for c in coins:\n        dp[c] = 1\n    for i in range(2, n + 1):\n        if dp[i - 1] == 0:\n            dp[i] = 1\n            continue\n        dp[i] = dp[i - 1] + 1\n        for c in coins:\n            if i - c < 1:\n                break\n            if dp[i - c]!= 0:\n                dp[i] = min(dp[i], dp[i - c] + 1)\n    return dp[n]\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    arr.sort()\n    dic = {}\n    for i in range(n):\n        if arr[i] not in dic:\n            dic[arr[i]] = 1\n        else:\n            dic[arr[i]] += 1\n    m = 0\n    for i in dic:\n        if dic[i] > 1:\n            m += 1\n    return str(m)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # number of coins\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    # how many pockets can we have\n    n_pockets = 0\n    for i in range(len(a)):\n        n_pockets += 1\n    for i in range(len(a)):\n        if a.count(a[i]) > 1:\n            n_pockets = n_pockets - 1\n    return n_pockets\n\nsolution(\"6\\n1 2 4 3 3 2\")\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) == 0:\n        return 0\n    ans = 0\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin)):\n            if stdin[i]!= stdin[j]:\n                ans += 1\n    return ans\n\nprint(solution('11'))\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt = int(stdin)\n    return str(cnt)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    array = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # {pos : value}\n    houses = {i: 1 for i in range(n)}\n\n    # {pos : [value]}\n    heaters = {}\n    heaters_value = 0\n    for i in range(n):\n        if array[i] == 1:\n            houses[i] = 0\n        else:\n            heaters[i] = array[i]\n            heaters_value += array[i]\n\n    while heater_value < k:\n        for i in range(n):\n            if houses[i] == 1:\n                if heater_value + heaters_value > k:\n                    continue\n                houses[i] = 0\n                heater_value += heaters[i]\n            else:\n                if heater_value + heaters_value > k:\n                    continue\n                houses[i] = 1\n                heater_value += heaters[i]\n\n    return len([i for i in range(n) if houses[i] == 0])"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def switch(index: int, house: str) -> str:\n        return ''.join([x if x!= str(index) else '1' for x in house])\n\n    n, r = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    house = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    heaters = [0] * len(house)\n    for i in range(len(house)):\n        if house[i] == 1:\n            heaters[i] = 1\n    heaters = sorted(heaters)\n    is_changed = True\n    while is_changed:\n        is_changed = False\n        for i in range(len(heaters)):\n            if i + r >= len(heaters):\n                break\n            if heaters[i]!= 0 and heaters[i + r] == 0:\n                heaters[i] = 0\n                is_changed = True\n    for i in range(len(house)):\n        if house[i] == 1:\n            if heaters[i] == 0:\n                return -1\n    return str(len(heaters) - sum(heaters))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a number of heaters to switch on so that each element of Vova's house is warmed up by at least one heater.\n    \"\"\"\n    n, r = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    arr = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    m = [0] * n\n    for i in range(n):\n        if i - r < 0:\n            m[i] = min(m[i], arr[i])\n        else:\n            m[i] = min(m[i], arr[i], arr[i - r])\n    m = [0] + m + [0]\n    ans = -1\n    pos = 0\n    for i in range(1, n + 2):\n        if m[i] > 0:\n            ans += 1\n        while m[i - 1] > 0 and m[i - 1] > m[i - 2]:\n            m[i - 1] -= 1\n            m[i - 2] += 1\n            ans += 1\n        if i == n + 1:\n            pos = i - 1\n    ans = ans if ans > 0 else -1\n    print(ans)\n    return ''\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution must return a single line with one integer \u2014 the minimum number of heaters.\n    \"\"\"\n    # the answer will be between 0 and n^2-1\n    # each time you can switch one heater on, and you can switch only one heater on\n    # so the answer will be the number of ones in the binary representation of n^2\n    # just using the most frequent value is not enough\n    # so to be safe, use the least frequent value\n    # if there is no heater, the answer is -1\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    freq = Counter(a)\n    if len(freq) == 0:\n        return -1\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        ans = freq[0][0]\n        return len(a) - sum(a) - ans + 1\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    house = [int(i) for i in stdin.split()]\n\n\n    # max_diff = [r + house[i] - 1 for i in range(n)]\n    # min_diff = [r + house[i] for i in range(n)]\n\n    # if min_diff == max_diff:\n    #     return 1\n    # else:\n    #     if sum(max_diff) == sum(min_diff):\n    #         return -1\n    #     else:\n    #         return min(max_diff) - min(min_diff)\n\n    # def get_mins(min_arr, max_arr, r):\n    #     min_arr[0] = min_arr[0] + r\n    #     for i in range(1, len(min_arr)):\n    #         min_arr[i] = min(min_arr[i], max_arr[i - 1] + r)\n\n    #     return min_arr\n\n    # def get_maxs(min_arr, max_arr, r):\n    #     max_arr[-1] = max_arr[-1] - r\n    #     for i in range(len(max_arr) - 2, -1, -1):\n    #         max_arr[i] = max(max_arr[i], min_arr[i + 1] - r)\n\n    #     return max_arr\n\n    # mins = get_mins([0 for i in range(n)], max_diff, r)\n    # maxs = get_maxs(min_diff, max_diff, r)\n\n    # diff = [maxs[i] - mins[i] for i in range(n)]\n\n    # if sum(diff) == 0:\n    #     return 1\n    # else:\n    #     return min(diff)\n\n    min_num_of_heaters = [r + house[i] for i in range(n)]\n    max_num_of_heaters = [r + house[i] - 1 for i in range(n)]\n\n    if min_num_of_heaters == max_num_of_heaters:\n        return 1\n    elif sum(max_num_of_heaters) == sum(min_num_of_heaters):\n        return -1\n    else:\n        return min(max_num_of_heaters) - min(min_num_of_heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity is O(n)\n    \"\"\"\n    n, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    array = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    res = float('inf')\n    for i in range(n):\n        if array[i] == 1:\n            res = min(res, i - r + 1)\n    \n    if res == float('inf'):\n        return -1\n    return res\n\n\n\n----Solutions----\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    houses = [int(x) for x in stdin.split()]\n\n    houses.sort()\n\n    heaters = 0\n\n    for i in range(n):\n        if houses[i] == 1:\n            heaters += 1\n        else:\n            break\n\n    heaters += (n - i - 1) // r\n\n    if (n - i - 1) % r:\n        heaters += 1\n\n    if heaters == 0:\n        return \"-1\"\n    else:\n        return str(heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    house = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    house.sort()\n    \n    min_index = 0\n    max_index = house.__len__()\n    \n    while max_index - min_index > 1:\n        mid_index = (max_index + min_index) // 2\n        \n        sum_val = 0\n        \n        for i in range(house.__len__()):\n            if house[i] >= house[min_index] + r:\n                sum_val += house[min_index] + r\n                min_index = i\n                break\n            \n            sum_val += house[i]\n            \n        if sum_val <= house[mid_index]:\n            min_index = mid_index\n            \n        elif sum_val > house[mid_index]:\n            max_index = mid_index\n        \n    return max_index - min_index\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n*(n-1)*(n-2) // 6)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tuples = [{}]\n    for i in range(1, n + 1):\n        tuples += [{}]\n        for j in range(1, n + 1):\n            tuples[i][j] = tuples[i - 1][j] + tuples[i][j - 1]\n    return tuples[n][n]\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n*(n-1)//2)\n    return ''"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes input and gives answer\"\"\"\n    n = int(stdin)\n    count = 0\n    for a in range(1, n // 2 + 1):\n        for b in range(1, n // 2 + 1):\n            c = n - a * b\n            if c > 0 and c % b == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution by:\n    Ritvik Rao\n    \"\"\"\n    n = stdin.rstrip()\n    if not n:\n        return 0\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        d = int(n **.5)\n        l = [1]\n        for i in range(2, d + 1):\n            if n % i == 0:\n                l.append(i)\n                if n // i!= i:\n                    l.append(n // i)\n\n        return len(l) - 1\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return sum([sum(i) for i in zip(range(1, n), range(n - 1, 0, -1))])"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    count = 0\n    for i in range(stdin):\n        print(i)\n    return count\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            k = n - (i + j)\n            if i * j * k == n:\n                count += 1\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length == 1:\n        return 0\n    stack = []\n    for bracket in stdin:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if stack.pop()!= '(':\n                return len(stack)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    count = 0\n\n    for i in range(n):\n        if s[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            break\n\n    return i\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count('(') - stdin.count(')'))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(')', '1').replace('(', '1').replace('1', '+')\n    s = s.replace(')', '+')\n    s = s.replace('(', '+')\n    print(len(s))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity:\n    n -> length of input string, O(n)\n    \"\"\"\n    return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(((())\")\n    3\n    >>> solution(\"()()()\")\n    0\n    >>> solution(\")(\")\n    0\n    >>> solution
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of brackets that can be changed to regular.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    brackets = stdin\n    stack = []\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        if bracket == \")\":\n            if len(stack) > 0 and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                stack.append(bracket)\n                break\n    while len(stack) > 0:\n        bracket = stack.pop()\n        if bracket == \"(\":\n            if brackets[count + 1] == \")\":\n                brackets = brackets[:count] + brackets[count + 1] + brackets[count] + brackets[count + 2:]\n            count += 1\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    open_p = 0\n    close_p = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            open_p += 1\n        else:\n            close_p += 1\n    \n    if open_p!= close_p:\n        return \"Impossible\"\n    else:\n        s = stdin\n        cnt = 0\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                s = s[0:i] + \"1\" + s[i:]\n                cnt += 1\n            else:\n                s = s[0:i] + \"+\" + s[i:]\n                cnt += 1\n        return cnt\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    brackets = stdin.readline().strip('\\n')\n    def check(s: str) -> bool:\n        d = {'(': ')', ')': '('}\n        brackets = s\n        while brackets:\n            stack = []\n            for b in brackets:\n                if b in d:\n                    stack.append(b)\n                elif stack and d[stack[-1]] == b:\n                    stack.pop()\n                else:\n                    return False\n            brackets = ''.join(stack)\n        return True\n    cnt = 0\n    for i in range(len(brackets)):\n        if check(brackets[:i] + '(' + brackets[i:]):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    sub_string = stdin\n    while sub_string in string:\n        sub_string = sub_string[1:]\n    return len(string) - len(sub_string)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"bbaba\")\n    3\n    >>> solution(\"baaba\")\n    2\n    >>> solution(\"abcde\")\n    0\n    \"\"\"\n    l = len(stdin)\n    m = len(stdin)\n    for x in range(1, int(l // 2) + 1):\n        for y in range(1, int(l // x) + 1):\n            if stdin[y * x:y * (x + 1)] == stdin[y * (x - 1):y * x]:\n                m = min(m, x * y)\n\n    return m\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    t = t[::-1]\n    x = 0\n    y = 0\n    for i in range(len(s)):\n        if t[i] == s[i]:\n            x += 1\n        else:\n            y += 1\n    return min(x, y)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = ''.join(sorted(s))\n    p1 = 0\n    p2 = len(t) - 1\n    max_len = len(s)\n    while p1 < len(s) and p2 >= 0:\n        if t[p2] == s[p1]:\n            p1 += 1\n            p2 -= 1\n        else:\n            max_len = min(max_len, p1 + 1)\n            p1 += 1\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[::-1]\n    return 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    n = len(s[0])\n    t = s[1]\n    d = {}\n    for i in range(n):\n        d[s[0][i]] = i\n    t = list(t)\n    for i in range(n):\n        if s[0][i] not in t:\n            for k in d.keys():\n                t[d[k]] = k\n                break\n    print(len(t) - t.count(\"\"))\n    return \"\"\n    \n    \n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"bbaba\")\n    3\n\n    >>> solution(\"aaaaa\")\n    0\n\n    >>> solution(\"abcde\")\n    0\n\n    >>> solution(\"baaba\")\n    2\n\n    >>> solution(\"asdfasdf\")\n    3\n    \"\"\"\n    # the longest string has the longest possible subsequence\n    len_s = len(stdin)\n    # substrings shorter than the longest string, can't be the longest\n    min_s = len_s\n    # subsequence of the longest string is the longest\n    max_s = 1\n    for i in range(1, len_s):\n        # if it's a subseq of the longest, it's a valid subseq\n        if stdin[:i] in stdin[i:]:\n            # update longest subseq\n            max_s = max(max_s, i)\n            # update shortest subseq\n            min_s = min(min_s, i)\n    # return difference between longest and shortest subseq\n    return max_s - min_s\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"bbaba\")\n    3\n    >>> solution(\"baaba\")\n    2\n    >>> solution(\"abcde\")\n    0\n    >>> solution(\"asdfasdf\")\n    3\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    t = stdin[1]\n\n    l, r = 0, len(s) - 1\n    while l <= r:\n        if s[l:r + 1] == t:\n            l += 1\n            r -= 1\n        else:\n            break\n    return r - l + 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    A = [ord(c) - ord('a') for c in stdin]\n    \n    def s(i, j):\n        for k in range(i, j):\n            if A[k] == A[k + 1] - 1:\n                return k\n        return j - 1\n\n    ans = 0\n    for i in range(len(A) - 1):\n        ans = max(ans, s(i, i + 1) + 1)\n    for i in range(len(A) - 2):\n        ans = max(ans, s(i, i + 2) + 1)\n    return ans\n\n\n\"\"\"\n\ns = input()\nt = input()\n\nans = 0\nfor i in range(len(s) - len(t) + 1):\n    if all(s[i + j] == s[i + j + 1] for j in range(len(t) - 1)):\n        ans = max(ans, len(t) - 1)\nprint(ans)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    m = len(s)\n    if m < len(t):\n        return 0\n    p1 = 0\n    p2 = 0\n    cnt = 0\n    while p1 < m and p2 < m:\n        if s[p1] == t[p2]:\n            cnt += 1\n            p1 += 1\n            p2 += 1\n        else:\n            p1 += 1\n    return cnt\n    pass\n\nsolution(stdin)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    print(int(max(int(input_list[0]) * int(input_list[1]), int(input_list[0]) * int(input_list[2]), int(input_list[1]) * int(input_list[2]))))\n    return\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    solution = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > solution:\n                solution = x * y\n\n    return str(solution)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = map(int, stdin.split(' '))\n    return str(max(a * x, b * y))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    a, b, c, d = (int(i) for i in data)\n    return str(max(a * c, b * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    print(2 * (min(b, d) - max(a, c)))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a,b,c,d=map(int,stdin.split())\n    if (a*d)>=(b*c):\n        print(a*d)\n    else:\n        print(b*c)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if b < c:\n        a, b, c, d = c, d, a, b\n    max_product = 0\n    if (a <= d) and (b <= d):\n        max_product = d\n    else:\n        max_product = b\n    for i in range(max_product, c + 1):\n        for j in range(i, max_product + 1):\n            if (i * j) % (b - a + 1) == 0:\n                max_product = max(max_product, i * j)\n                break\n    return str(max_product)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max([a*x for x in range(1, b+1) if a <= x <= b] + [c*y for y in range(1, d+1) if c <= y <= d]))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = map(int, stdin.split())\n    if a <= x <= b and c <= y <= d:\n        return str(max(x, y))\n    else:\n        return '0'\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c, d) = [int(s) for s in stdin.split(\" \")]\n    x = min(b, d) - max(a, c) + 1\n    y = min(c, d) - max(a, b) + 1\n    return str(x * y)\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.split('\\n')\n  N = int(lines[0])\n  \n  d = list(map(int, lines[1].split(' ')))\n  \n  print(N//2)\n  return"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to calculate the sum of the result of the problem statement\"\"\"\n    # get input\n    N, *d_list = map(int, stdin.split())\n\n    # handle empty input\n    if not N or not d_list:\n        raise ValueError(\"Empty input given\")\n\n    if N % 2!= 0:\n        raise ValueError(\"Input is not an even number\")\n    if max(d_list) > 10 ** 5 or min(d_list) < 1:\n        raise ValueError(\"Input has invalid value\")\n\n    # main function\n    N_list = [0, 0]\n    for d in d_list:\n        if d < 5:\n            N_list[0] += 1\n        else:\n            N_list[1] += 1\n    print(N_list)\n    return str(max(N_list))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, *A = map(int, stdin.split())\n    l1 = []\n    for i in range(1, N + 1, 2):\n        l1.append(A[i - 1])\n    \n    l2 = []\n    for i in range(0, N, 2):\n        l2.append(A[i])\n    \n    print(min(len(l1), len(l2)))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of problems from stdin\n    n = int(stdin[0])\n    # Split the input into a list of integers\n    diff = list(map(int, stdin[1].split(\" \")))\n\n    # Compute the required number of problems for ARCs and ABCs\n    # noinspection PyTypeChecker\n    k = 0\n    arc_problems = []\n    abc_problems = []\n    for i in range(n):\n        if diff[i] >= k:\n            arc_problems.append(diff[i])\n            k += 1\n        else:\n            abc_problems.append(diff[i])\n    # Since every problem can be for ARCs or ABCs, we can use the\n    # cycle notation to count the number of cycles that add up to the\n    # required number of problems\n    # noinspection PyTypeChecker\n    result = 0\n    for i in range(len(arc_problems)):\n        result += len(abc_problems) // arc_problems[i]\n    return str(result)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [], [], [], []\n    for idx, num in enumerate(stdin.split(\"\\n\")[1:]):\n        num = int(num)\n        if idx % 2 == 0:\n            a.append(num)\n        else:\n            b.append(num)\n    for idx, num in enumerate(stdin.split(\"\\n\")[1:]):\n        num = int(num)\n        if idx % 2 == 0:\n            c.append(num)\n        else:\n            d.append(num)\n    \n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    \n    if len(a) % 2 == 0:\n        a_count, b_count = len(a) // 2, len(b) // 2\n    else:\n        a_count, b_count = len(a) // 2 + 1, len(b) // 2\n    if len(c) % 2 == 0:\n        c_count, d_count = len(c) // 2, len(d) // 2\n    else:\n        c_count, d_count = len(c) // 2 + 1, len(d) // 2\n    return str(max(a_count, c_count) + max(b_count, d_count))\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N % 2!= 0:\n        return 0\n    else:\n        dp = [0] * N\n        dp[0] = 1\n        dp[2] = 1\n        for i in range(4, N, 2):\n            dp[i] = dp[i - 2]\n            if dp[i - 2] < dp[i - 4]:\n                dp[i] += 1\n        dp[N - 2] = dp[N - 4]\n        return dp[N - 2]\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    count = 0\n    summ = 0\n    for i in range(n):\n        summ += a[i] - 1\n        if summ >= h - l:\n            count += 1\n            summ = 0\n        else:\n            summ = summ % (h - l)\n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, n):\n        if r >= a[i - 1] >= l:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    nums = [int(input()) for _ in range(n)]\n    nums.sort()\n    ans = 0\n    for n in nums:\n        if n >= l and n < r:\n            ans += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of good sleeping times Vova can obtain.\"\"\"\n    N, H, L, R = map(int, stdin.split())\n    A = [int(input()) for _ in range(N)]\n    ans = 0\n    for i, a in enumerate(A):\n        if i == 0 or L <= a - 1:\n            ans += 1\n        if i == N - 1 or R >= a:\n            ans += 1\n    return ans"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    res = 0\n    for i in range(n - 1):\n        res += (min(a[i], r) - max(a[i], l) + 1)\n    return res\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split('\\n')[0].split()]\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    a.append(0)\n    ans = 0\n    for i in range(n):\n        sleep_time = a[i] + h\n        while l <= sleep_time < r:\n            sleep_time += 1\n        if sleep_time >= r:\n            ans += 1\n    return ans\n\na = [int(i) for i in stdin.split('\\n')[1].split()]\na.append(0)\nfor i in range(n):\n    sleep_time = a[i] + h\n    while l <= sleep_time < r:\n        sleep_time += 1\n    if sleep_time >= r:\n        ans += 1\nreturn ans\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, h, l, r) = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    c = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            c += 1\n    return c\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")[1].split(\" \")]\n    ans = 0\n    for i in range(n):\n        if r <= a[i] <= h and l <= a[i] - 1 <= r:\n            ans += 1\n        elif r <= a[i] <= h:\n            ans += 1\n        elif a[i] - 1 >= l and l <= a[i] <= r:\n            ans += 1\n        elif a[i] - 1 >= l and l <= r <= a[i]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def rec(i, l, r):\n        if i == n:\n            return 0\n        return max(\n            rec(i + 1, l, r) + a[i] - 1,\n            rec(i + 1, l, r - 1) + a[i],\n        )\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return rec(0, l, r)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().strip().split(' ')))\n    stack = []\n    counter = 0\n    for i in range(n):\n        if len(stack) == 0:\n            stack.append(array[i])\n            counter += 1\n            continue\n        if stack[-1] <= 2 * array[i]:\n            stack.append(array[i])\n            counter += 1\n        else:\n            stack.pop()\n            stack.append(array[i])\n            counter += 1\n    print(counter)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = [int(x) for x in stdin.split('\\n')[0].split()]\n    data.sort()\n    cnt = 0\n    l, r = 0, len(data) - 1\n    while l < r:\n        cnt += 1\n        if data[r] - data[l] < data[r] * 2:\n            r -= 1\n        else:\n            l += 1\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 1 2 5 6 7 10 21 23 24 49''')\n    4\n    >>> solution('''5\n   ... 2 10 50 110 250''')\n    1\n    >>> solution('''6\n   ... 4 7 12 100 150 199''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    c = 0\n    for i in range(1, n):\n        if a[i - 1] * 2 <= a[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(stdin) for stdin in stdin.split(' ')]\n    arr.sort()\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for j in range(n):\n        dp[0][j] = 1\n\n    for i in range(1, n):\n        for j in range(n):\n            if j < i:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    # print(dp)\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    lst = [int(i) for i in stdin[1].split(' ')]\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = dp[1] = 1\n    res = 0\n    for i in range(1, n):\n        dp[i + 1] = dp[i] + dp[i - 1] if lst[i] > lst[i - 1] * 2 else dp[i]\n        if dp[i + 1] > res:\n            res = dp[i + 1]\n    return res\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I have solved this problem using greedy algorithm.\n    The idea is to calculate how many problems each contest can contain.\n    So we have $T$ number of contests and for each one we will calculate the max possible number of problems that can be in this contest.\n    Then we will take the maximum number of problems out of all $T$ calculated.\n    >>> solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\")\n    4\n    >>> solution(\"5\\n2 10 50 110 250\\n\")\n    1\n    >>> solution(\"6\\n4 7 12 100 150 199\\n\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.append(a[-1] * 2)\n    a.reverse()\n    ans = 0\n    left = 0\n    right = len(a) - 1\n    for i in range(len(a) - 1):\n        l, r = i, len(a) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if a[m] >= a[i] * 2:\n                r = m - 1\n            else:\n                l = m + 1\n        ans += right - l + 1\n        right = l - 1\n    return ans\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for day 10.\"\"\"\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().split()]\n    left = 0\n    right = n - 1\n    lcm = l[right]\n    while left <= right:\n        if l[left] * l[right] > lcm:\n            lcm = l[left] * l[right]\n        if l[left] < l[right]:\n            left += 1\n        else:\n            right -= 1\n    left = 0\n    right = n - 1\n    while left <= right:\n        if l[left] * l[right] == lcm:\n            print(left + 1, right + 1)\n            return\n        if l[left] < l[right]:\n            left += 1\n        else:\n            right -= 1\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    arr = [int(e) for e in stdin[1].split(' ')]\n    l = []\n    for i in range(n):\n        l.append([i,i+1])\n    l = l[1:]\n    mx = []\n    for i in l:\n        x = math.lcm(arr[i[0]], arr[i[1]])\n        mx.append([x,i])\n    mx = sorted(mx)\n    print(mx[0][1][0], mx[0][1][1])\n    return \"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ...\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    mi = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            mi = max(mi, math.gcd(a[i], a[j]))\n    print(n - mi)\n    return ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # # My solution\n    # # Time O(nlogn)\n    # # Space O(n)\n    # n = int(stdin.readline())\n    # a = sorted(map(int, stdin.readline().split()))\n    # lcm = []\n    # for i in range(n-1):\n    #     for j in range(i+1, n):\n    #         lcm.append(max(a[i], a[j])*min(a[i], a[j])//gcd(a[i], a[j]))\n    # print(lcm)\n    # print(lcm[0])\n    # '''\n\n    # # Best solution\n    # # Time O(n)\n    # # Space O(1)\n    # n = int(stdin.readline())\n    # a = sorted(map(int, stdin.readline().split()))\n    # print(a[0], a[1])\n    # lcm = a[0] * a[1] // gcd(a[0], a[1])\n    # for i in range(2, n):\n    #     lcm = lcm * a[i] // gcd(lcm, a[i])\n    # print(lcm)\n    return ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    min_lcm = float('inf')\n    for i in range(n):\n        min_lcm = min(min_lcm, a[i] * a[n - i - 1])\n    min_lcm_i, min_lcm_j = -1, -1\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if a[i] * a[j] == min_lcm:\n                    min_lcm_i = i\n                    min_lcm_j = j\n    print(min_lcm_i, min_lcm_j)\n    return ''\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n    #pass\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the least common multiple of the numbers in the array, and then\n    returns the pair of indices of the numbers that have that value.\n\n    >>> solution('5\\n2 4 8 3 6\\n')\n    '1 2'\n    \"\"\"\n    array = [int(x) for x in stdin.split()]\n    min_lcm = None\n    min_indices = None\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            lcm = array[i] * array[j] // math.gcd(array[i], array[j])\n            if min_lcm is None or lcm < min_lcm:\n                min_lcm = lcm\n                min_indices = (i, j)\n    return''.join(map(str, min_indices))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    arr = []\n    for i in range(0, n, 3):\n        arr.append(stdin[i:i+3])\n    \n    arr.sort()\n    for i in arr:\n        if i[0] == '2':\n            arr.remove(i)\n    \n    print(arr[0])\n    \n    return ''\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = list(stdin)\n    cnt = [0, 0, 0]\n    for i in range(n):\n        cnt[int(s[i])] += 1\n\n    d = [0]\n    for i in range(3):\n        d.append(cnt[i] - cnt[i - 1])\n\n    # dp[0] - dp[2] = 0, dp[1] - dp[2] = 1\n    # dp[i] = min(dp[i - 2], dp[i - 3] + 1) + dp[i - 1]\n    dp = [None] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = min(dp[i - 2], dp[i - 3] + 1) + dp[i - 1]\n\n    # dp[n - 2] = min(dp[n - 4] + 1, dp[n - 5] + 1)\n    # dp[n - 1] = min(dp[n - 4] + 1, dp[n - 5] + 1)\n    ans = dp[n]\n    for i in range(n - 3, -1, -1):\n        ans = min(ans, dp[i] + dp[n - 3 - i])\n\n    return str(ans)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, result = stdin, \"\"\n    for i in range(3):\n        while s.count(str(i)) % 3!= 0:\n            s = s.replace(str(i), '1')\n        while s.count(str(i)) % 3!= 2:\n            s = s.replace(str(i), '0')\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    for _ in range(n):\n        i = 0\n        s0 = 0\n        s1 = 0\n        s2 = 0\n        while i < n:\n            if s[i] == '0':\n                s0 += 1\n            elif s[i] == '1':\n                s1 += 1\n            elif s[i] == '2':\n                s2 += 1\n            i += 1\n        if (s0 + s1) % 3 == 0 and (s0 + s2) % 3 == 0:\n            return s[0:n-s0] + s[n-s0:n-s0-s1] + s[n-s0-s1:n-s0-s1-s2] + s[n-s0-s1-s2:n]\n    return stdin\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # print(n)\n    if n % 3!= 0:\n        return \"IMPOSSIBLE\"\n    else:\n        binary = stdin.replace(\"0\", \"1\").replace(\"1\", \"0\").replace(\"2\", \"1\")\n        return binary\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('\\n')[1]\n    dict = {'0': '0', '1': '1', '2': '2'}\n    for i in range(len(string)):\n        if string[i] in dict:\n            string = string.replace(string[i], dict[string[i]])\n    return string\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def is_ternary_string(s: str) -> bool:\n        zero_count = 0\n        one_count = 0\n        two_count = 0\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n            elif c == '2':\n                two_count += 1\n        return zero_count == one_count and one_count == two_count\n\n    s = \"0\" * n\n    if is_ternary_string(s):\n        return s\n    s = \"1\" * n\n    if is_ternary_string(s):\n        return s\n    s = \"2\" * n\n    if is_ternary_string(s):\n        return s\n\n    while not is_ternary_string(s):\n        i = 0\n        while i < len(s) - 1:\n            if s[i] == s[i + 1]:\n                s = s[:i] + '2' + s[i:]\n                i += 2\n            elif s[i + 1] == s[i + 2]:\n                s = s[:i + 1] + '2' + s[i + 1:]\n            else:\n                i += 1\n        if len(s) == n:\n            s = \"2\" * n\n\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    \n    cnt0 = 0\n    cnt1 = 0\n    cnt2 = 0\n    for i in range(n):\n        if s[i] == \"0\":\n            cnt0 += 1\n        elif s[i] == \"1\":\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    \n    cnt = min(cnt0, cnt1, cnt2)\n    res = \"\"\n    \n    for i in range(n):\n        if s[i] == \"0\":\n            res += \"2\"\n            cnt2 -= 1\n            if cnt2 < 0:\n                cnt2 = 0\n        elif s[i] == \"1\":\n            res += \"0\"\n            cnt0 -= 1\n            if cnt0 < 0:\n                cnt0 = 0\n        else:\n            res += \"1\"\n            cnt1 -= 1\n            if cnt1 < 0:\n                cnt1 = 0\n    \n    return res[:cnt]\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # 1. read input\n    n, m = [int(s) for s in stdin.split()]\n    # 2. create matrix\n    matrix = [[0]*n for i in range(n)]\n    # 3. fill matrix\n    for i in range(m):\n        #read one line from stdin\n        a = int(stdin.readline())\n        #put value in matrix\n        matrix[a][i] = 1\n        matrix[i][a] = 1\n    # 4. loop on matrix and fill the rest of the values\n    for j in range(1, n):\n        for k in range(j, n):\n            #calculate the value of the matrix\n            matrix[k][j] += matrix[k-1][j-1]\n    # 5. return the solution\n    return str(matrix[n-1][n-1])"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    # count\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1]\n        if i >= a[i-1]:\n            dp[i] = (dp[i] + dp[i-a[i-1]]) % 10000007\n    # output\n    return str(dp[n])\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input in the following format:\n    N M\n    a_1\n    a_2\n   .\n   .\n    a_M\n    Returns the count of the ways to reach the top step, modulo 1 000 000 007\n    \"\"\"\n    # Get input\n    _, count = [int(i) for i in stdin.split(\" \")]\n    steps = [int(i) for i in stdin.split(\"\\n\")[1:count + 1]]\n\n    # Calculate output\n    ways = 1\n    for i in range(0, len(steps)):\n        ways *= count - i\n        ways %= 1000000007\n    return ways\n\n\"\"\"\nLet's consider the problem of finding a triplet (a, b, c) consisting of natural numbers a < b < c such that a + b + c = n. We can use a variation of the pigeonhole principle to find this triplet.\n\nConsider the following:\n\nn = 7\nn \u2212 a + b + c = 0\nc \u2264 a, b \u2264 n \u2212 c\na \u2264 2b\nWe can get these inequalities with the following formulas:\n\na = 0, b = 0, c = 0\na = 0, b = 1, c = n \u2212 1\na = 1, b = 1, c = n \u2212 2\na = 2, b = n \u2212 3, c = n \u2212 2\nWe can see that a = 2 is the maximum value of a for which this inequality is true.\n\nBecause a is fixed, we can try to find the value of b in all possible values of c.\n\nFor each value of c = n \u2212 a, we can get the following inequality:\n\nb \u2264 n \u2212 c \u2212 a\nNow, we can assume the values of a and b, so we can find the values of c:\n\nb = n \u2212 c \u2212 a\nc = n \u2212 2a\nSo, we have found the values of a, b and c!\n\nNow, we can try to find the value of a:\n\na < n - 2b\nWe can see that the value of a is the minimum value for which this inequality is true.\n\nWe can again assume the value of b and c to find the value of a.\n\nNow, we can assume the values of a, b and c, so we can try to find the value of n \u2212 a \u2212 b \u2212 c:\n\nn \u2212 a \u2212 b \u2212 c = 0\nn \u2212 a \u2212 b = c\nn \u2212 a - b = 0\nThe last equation has the same form as the first two equations, so we can get the value of n \u2212 a and c:\n\nn \u2212 a = b + c\nn \u2212 a = 0\nWe can combine these equations to get the value of a:\n\na = (n \u2212 b \u2212 c) / 2\nThis value of a is the minimum possible value.\n\nWe can calculate the minimum possible value of a, b and c, so we can determine the value of n:\n\nn = (2a + b + c) / 2\nTo check if this number n is a natural number we can use the following properties:\n\na is a natural number, b is a natural number and c is a natural number\na + b + c = n\n2a + b + c = n\n\nLet's assume that the values of a, b and c are natural numbers, so we can get:\n\n2a = n - b - c\n2a + b = n\n2a + b + c = n\nThus, the value of a is (n \u2212 b \u2212 c) / 2\n\nThe program should output the number of ways to find the values of a, b and c modulo 1 000 000 7.\n\n-----Input-----\nThe first line of the input contains two integers n and m, the number of steps and the number of broken steps.\nThe next line contains n integers a_1, a_2,..., a_n.\nThe next line contains m integers b_1, b_2,..., b_m.\n\n-----Output-----\nThe output must contain one integer: the number of ways to get up to the top step, that is, to the value of n modulo 1 000 000 7.\n\"\"\"\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    n, m = map(int, stdin.readline().split())\n    steps = [int(s) for s in stdin.readline().split()]\n    # Split the steps into pairs (a_1, a_2)\n    steps = zip(steps, steps[1:])\n    # Filter out the steps that are broken\n    broken_steps = [i for i, s in steps if i == s]\n    # The list of steps that are not broken\n    steps = [i for i, s in steps if i!= s]\n    # Generate permutations of steps that are not broken\n    permutations = [p for p in permutations(steps) if not set(broken_steps).intersection(set(p))]\n    # Filter out permutations that have steps that are broken\n    permutations = [p for p in permutations if not set(p).intersection(set(broken_steps))]\n    # Generate permutations of steps that are not broken\n    permutations = [p for p in permutations]\n    # The list of permutations that have steps that are not broken\n    # Filter out permutations that have steps that are broken\n    permutations = [p for p in permutations if not set(p).intersection(set(broken_steps))]\n    # Return the count of permutations that have steps that are not broken\n    return str(len(permutations))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    lines = stdin.split(\"\\n\")\n    n, m = list(map(int, lines[0].split(\" \")))\n    steps = list(map(int, lines[1].split(\" \")))\n\n    # initialize answer\n    answer = 0\n\n    # loop through steps\n    for i in range(1, n+1):\n        # if current step can be taken\n        if steps[i-1]!= i:\n            # increment answer\n            answer += 1\n\n    # print answer\n    print(answer)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    breaks = set()\n    for _ in range(m):\n        breaks.add(int(stdin.split()[1]))\n    breaks = sorted(breaks)\n    breaks_ = set()\n    for i in range(len(breaks) - 1):\n        breaks_.add(breaks[i] - breaks[i + 1])\n    breaks_ = sorted(breaks_)\n    max_break = breaks_[0]\n    breaks_ = list(breaks_)\n    count = 0\n    for i in range(n):\n        if i not in breaks:\n            if i < max_break:\n                count += (max_break - i) * (breaks_[0] - i) * (breaks_[0] - (i + breaks_[1]))\n                if breaks_[1] - (i + breaks_[0]) > 0:\n                    count += (breaks_[1] - (i + breaks_[0])) * (breaks_[0] - (i + breaks_[0])) * (breaks_[0] - (i + breaks_[1]))\n            else:\n                count += max_break * (breaks_[0] - i) * (breaks_[0] - (i + breaks_[1]))\n                if breaks_[1] - (i + breaks_[0]) > 0:\n                    count += breaks_[1] * (breaks_[0] - (i + breaks_[0])) * (breaks_[0] - (i + breaks_[1]))\n    count %= 100000007\n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_lines = int(stdin.readline())\n    stairs = [0] + list(map(int, stdin.readline().split()))\n    num_stairs = len(stairs)\n    mem = [0] * (num_stairs)\n    mem[0] = 1\n    for i in range(1, num_stairs):\n        if i - 1 >= 0:\n            mem[i] += mem[i - 1]\n        if i - 2 >= 0:\n            mem[i] += mem[i - 2]\n        mem[i] %= 1000000\n\n    return str(mem[num_stairs - 1])\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Modulo 1 000 000 007\n    MOD = 1000000007\n    # Get N and M\n    N, M = [int(n) for n in stdin.split()]\n    # Get a\n    a = [int(n) for n in stdin.split()]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    b = [(n + 1) % 6 for n in range(M)]\n    # 1 \\to 2 \\to 3 \\to 4 \\to 5 \\to 6\n    c = [n for n in range(M)]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    d = [(n + 2) % 6 for n in range(M)]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    e = [(n + 3) % 6 for n in range(M)]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    f = [(n + 4) % 6 for n in range(M)]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    g = [(n + 5) % 6 for n in range(M)]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    h = [(n + 6) % 6 for n in range(M)]\n    # a_1 \\to a_2 \\to a_3 \\to a_4 \\to a_5 \\to a_6\n    p = [(n + 1) % 6 for n in range(M)]\n\n    # print(a)\n    # print(b)\n    # print(c)\n    # print(d)\n    # print(e)\n    # print(f)\n    # print(g)\n    # print(h)\n    # print(p)\n\n    # Mapping the number of ways to climb up the stairs for each possible step:\n    # if the broken step is on step 0\n    A = [(a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD]\n    # if the broken step is on step 1\n    B = [a[1], c[1], d[1], e[1], f[1], g[1]]\n    # if the broken step is on step 2\n    C = [c[2], d[2], e[2], f[2], g[2], h[2]]\n    # if the broken step is on step 3\n    D = [d[3], e[3], f[3], g[3], h[3], p[3]]\n    # if the broken step is on step 4\n    E = [e[4], f[4], g[4], h[4], p[4], p[5]]\n    # if the broken step is on step 5\n    F = [f[5], g[5], h[5], p[5], p[6]]\n    # if the broken step is on step 6\n    G = [g[6], h[6], p[6], p[6]]\n\n    # if the broken step is on step 0\n    M = [(a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD, (a[0] - 1 + b[0]) % MOD]\n    # if the broken step is on step 1\n    N = [a[1], c[1], d[1], e[1], f[1], g[1]]\n    # if the broken step is on step 2\n    O = [c[2], d[2], e[2], f[2], g[2], h[2]]\n    # if the broken step is on step 3\n    P = [d[3], e[3], f[3], g[3], h[3], p[3]]\n    # if the broken step is on step 4\n    Q = [e[4], f[4], g[4], h[4], p[4], p[5]]\n    # if the broken step is on step 5\n    R = [f[5], g[5], h[5], p[5], p[6]]\n    # if the broken step is on step 6\n    S = [g[6], h[6], p[6], p[6]]\n    # if the broken step is on step 7\n    T = [h[7], p[7], p[7]]\n\n    # print(M)\n    # print(N)\n    # print(O)\n    # print(P)\n    # print(Q)\n    # print(R)\n    # print(S)\n    # print(T)\n\n    # Calculating the total number of ways\n    total = sum([a[i] * M[i] for i in range(M)]) + sum([a[i] * N[i] for i in range(M)]) + sum([a[i] * O[i] for i in range(M)]) + sum([a[i] * P[i] for i in range(M)]) + sum([a[i] * Q[i] for i in range(M)]) + sum([a[i] * R[i] for i in range(M)]) + sum([a[i] * S[i] for i in range(M)]) + sum([a[i] * T[i] for i in range(M)])\n\n    print(total % MOD)"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a string, and returns a string. The string should contain the count of ways to climb, modulo 10000000007.\"\"\"\n    return ''"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(min(abs(d), abs(x - d)))\n    if abs(x) < abs(d):\n        return str(abs(d - x))\n    return str(min(d, abs(x + d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x, k, d = map(int, stdin.split())\n    return str(x - k * d if x - k * d >= 0 else x - k * d + d)\n    pass"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(i) for i in stdin.split()]\n    if x + k * d < 0:\n        print(0)\n    else:\n        print(abs(x + k * d))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split(\" \"))\n    return str(max(abs(X - K * D), abs(X + K * D)))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (X, K, D) = map(int, stdin.readlines())\n    if K <= D or abs(X) <= K:\n        return \"0\"\n    else:\n        return str(abs(X - K * (2 * D - abs(X))))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takahashi is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\n\n    In one move, he can go from coordinate x to x + D or x - D.\n    He wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\n    Find the minimum possible absolute value of the coordinate of the destination.\n\n    Constraints\n    - 10**15 <= X <= 10**15\n    - 1 <= K <= 10**15\n    - 1 <= D <= 10**15\n    - All values in input are integers.\n    '''\n\n    # Get input and separate by comma\n    x, k, d = stdin.split(', ')\n\n    # Get inputs and convert to int\n    x = int(x)\n    k = int(k)\n    d = int(d)\n\n    # Return smallest possible absolute value\n    return str(min(abs(x), abs(x-k*d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(abs(x - (x + d * (k - 1))), abs(x - (x - d * (k - 1))))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = [int(x) for x in stdin.split(\" \")]\n    if K == 1:\n        return f\"{abs(X - D)}\"\n    else:\n        return f\"{min(X - D, D - X)}\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, k, d = [int(i) for i in stdin.split(' ')]\n    steps = 0\n    dist = 0\n    while steps < k:\n        if abs(dist) < abs(x - d):\n            break\n        dist += d if x < d else -d\n        x = x + d if x < d else x - d\n        steps += 1\n    print(dist)"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    print(solution_number(number))\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith(\"11\"):\n        return 2\n    elif stdin.startswith(\"14\"):\n        return 0\n    elif stdin.startswith(\"15\"):\n        return 1\n    elif stdin.startswith(\"16\"):\n        return 2\n    elif stdin.startswith(\"17\"):\n        return 3\n    elif stdin.startswith(\"18\"):\n        return 4\n    elif stdin.startswith(\"19\"):\n        return 5\n    elif stdin.startswith(\"20\"):\n        return 6\n    elif stdin.startswith(\"21\"):\n        return 7\n    elif stdin.startswith(\"22\"):\n        return 8\n    elif stdin.startswith(\"23\"):\n        return 9\n    elif stdin.startswith(\"24\"):\n        return 10\n    elif stdin.startswith(\"25\"):\n        return 11\n    elif stdin.startswith(\"26\"):\n        return 12\n    elif stdin.startswith(\"27\"):\n        return 13\n    elif stdin.startswith(\"28\"):\n        return 14\n    elif stdin.startswith(\"29\"):\n        return 15\n    elif stdin.startswith(\"30\"):\n        return 16\n    elif stdin.startswith(\"31\"):\n        return 17\n    elif stdin.startswith(\"32\"):\n        return 18\n    elif stdin.startswith(\"33\"):\n        return 19\n    elif stdin.startswith(\"34\"):\n        return 20\n    elif stdin.startswith(\"35\"):\n        return 21\n    elif stdin.startswith(\"36\"):\n        return 22\n    elif stdin.startswith(\"37\"):\n        return 23\n    elif stdin.startswith(\"38\"):\n        return 24\n    elif stdin.startswith(\"39\"):\n        return 25\n    elif stdin.startswith(\"40\"):\n        return 26\n    elif stdin.startswith(\"41\"):\n        return 27\n    elif stdin.startswith(\"42\"):\n        return 28\n    elif stdin.startswith(\"43\"):\n        return 29\n    elif stdin.startswith(\"44\"):\n        return 30\n    elif stdin.startswith(\"45\"):\n        return 31\n    elif stdin.startswith(\"46\"):\n        return 32\n    elif stdin.startswith(\"47\"):\n        return 33\n    elif stdin.startswith(\"48\"):\n        return 34\n    elif stdin.startswith(\"49\"):\n        return 35\n    elif stdin.startswith(\"50\"):\n        return 36\n    elif stdin.startswith(\"51\"):\n        return 37\n    elif stdin.startswith(\"52\"):\n        return 38\n    elif stdin.startswith(\"53\"):\n        return 39\n    elif stdin.startswith(\"54\"):\n        return 40\n    elif stdin.startswith(\"55\"):\n        return 41\n    elif stdin.startswith(\"56\"):\n        return 42\n    elif stdin.startswith(\"57\"):\n        return 43\n    elif stdin.startswith(\"58\"):\n        return 44\n    elif stdin.startswith(\"59\"):\n        return 45\n    elif stdin.startswith(\"60\"):\n        return 46\n    elif stdin.startswith(\"61\"):\n        return 47\n    elif stdin.startswith(\"62\"):\n        return 48\n    elif stdin.startswith(\"63\"):\n        return 49\n    elif stdin.startswith(\"64\"):\n        return 50\n    elif stdin.startswith(\"65\"):\n        return 51\n    elif stdin.startswith(\"66\"):\n        return 52\n    elif stdin.startswith(\"67\"):\n        return 53\n    elif stdin.startswith(\"68\"):\n        return 54\n    elif stdin.startswith(\"69\"):\n        return 55\n    elif stdin.startswith(\"70\"):\n        return 56\n    elif stdin.startswith(\"71\"):\n        return 57\n    elif stdin.startswith(\"72\"):\n        return 58\n    elif stdin.startswith(\"73\"):\n        return 59\n    elif stdin.startswith(\"74\"):\n        return 60\n    elif stdin.startswith(\"75\"):\n        return 61\n    elif stdin.startswith(\"76\"):\n        return 62\n    elif stdin.startswith(\"77\"):\n        return 63\n    elif stdin.startswith(\"78\"):\n        return 64\n    elif stdin.startswith(\"79\"):\n        return 65\n    elif stdin.startswith(\"80\"):\n        return 66\n    elif stdin.startswith(\"81\"):\n        return 67\n    elif stdin.startswith(\"82\"):\n        return 68\n    elif stdin.startswith(\"83\"):\n        return 69\n    elif stdin.startswith(\"84\"):\n        return 70\n    elif stdin.startswith(\"85\"):\n        return 71\n    elif stdin.startswith(\"86\"):\n        return 72\n    elif stdin.startswith(\"87\"):\n        return 73\n    elif stdin.startswith(\"88\"):\n        return 74\n    elif stdin.startswith(\"89\"):\n        return 75\n    elif stdin.startswith(\"90\"):\n        return 76\n    elif stdin.startswith(\"91\"):\n        return 77\n    elif stdin.startswith(\"92\"):\n        return 78\n    elif stdin.startswith(\"93\"):\n        return 79\n    elif stdin.startswith(\"94\"):\n        return 80\n    elif stdin.startswith(\"95\"):\n        return 81\n    elif stdin.startswith(\"96\"):\n        return 82\n    elif stdin.startswith(\"97\"):\n        return 83\n    elif stdin.startswith(\"98\"):\n        return 84\n    elif stdin.startswith(\"99\"):\n        return 85\n    elif stdin.startswith(\"100\"):\n        return 86\n    elif stdin.startswith(\"101\"):\n        return 87\n    elif stdin.startswith(\"102\"):\n        return 88\n    elif stdin.startswith(\"103\"):\n        return 89\n    elif stdin.startswith(\"104\"):\n        return 90\n    elif stdin.startswith(\"105\"):\n        return 91\n    elif stdin.startswith(\"106\"):\n        return 92\n    elif stdin.startswith(\"107\"):\n        return 93\n    elif stdin.startswith(\"108\"):\n        return 94\n    elif stdin.startswith(\"109\"):\n        return 95\n    elif stdin.startswith(\"110\"):\n        return 96\n    elif stdin.startswith(\"111\"):\n        return 97\n    elif stdin.startswith(\"112\"):\n        return 98\n    elif stdin.startswith(\"113\"):\n        return 99\n    elif stdin.startswith(\"114\"):\n        return 100\n    elif stdin.startswith(\"115\"):\n        return 101\n    elif stdin.startswith(\"116\"):\n        return 102\n    elif stdin.startswith(\"117\"):\n        return 103\n    elif stdin.startswith(\"118\"):\n        return 104\n    elif stdin.startswith(\"119\"):\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Return number of seconds required to solve the riddle.'''\n    # Get the number of seconds passed since midnight\n    num_seconds = int(stdin)\n    \n    # Get the number of minutes since midnight\n    num_minutes = num_seconds // 60\n    \n    # Get the number of hours since midnight\n    num_hours = num_minutes // 60\n    \n    # Get the number of days since midnight\n    num_days = num_hours // 24\n    \n    # Get the number of hours since midnight\n    num_hours = num_hours % 24\n    \n    # Get the number of minutes since midnight\n    num_minutes = num_minutes % 60\n    \n    # Get the number of seconds since midnight\n    num_seconds = num_seconds % 60\n    \n    # Return the result\n    return f'{num_days} {num_hours} {num_minutes} {num_seconds}'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    return answer\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Solution for riddle is: {}'.format(stdin)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3*n + 1\n        answer += 1\n    return answer"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def filter_chars(s: str) -> str:\n        return ''.join(filter(str.isdigit, s))\n\n    return str(sum(list(map(int, filter_chars(stdin)))))\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    while a > 2:\n        a = a * (3 * n - n ** 2) // 2\n        n += 1\n    return a\nprint(solution(input()))\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * int(stdin))"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin)\n  return (a * (a + 1) // 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return stdin\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)**2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''.join(map(str, [int(i) for i in stdin if int(i) % 2 == 1]))\n    \n    \ndef"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        '0': '0',\n        '1': '1',\n        '2': '2',\n        '3': '3',\n        '4': '4',\n        '5': '5',\n        '6': '6',\n        '7': '7',\n        '8': '8',\n        '9': '9',\n    }[stdin]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    sum_a = 0\n    for i in a:\n        sum_a += int(i)\n\n    for i in range(1, 10):\n        if sum_a % i == 0:\n            print(i)\n            break\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '0' if stdin == '1' else '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 1 if len(stdin) % 2 else 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '1':\n        return '1'\n    elif stdin == '13':\n        return '0'\n    elif stdin == '48':\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_steps = int(stdin)\n    if number_of_steps == 1:\n        return 0\n    if number_of_steps % 2 == 0:\n        return 1\n    return 0"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    number = int(stdin)\n    if number % 11 == 0 or number % 13 == 0 or number % 17 == 0:\n        print(0)\n    else:\n        print(1)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin).count('9')\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(n) for n in stdin.readline().split(' ')]\n    return 0\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # arr.sort()\n    # arr = sorted(arr)\n\n    max = arr[0]\n    for i in range(1, len(arr)):\n        max ^= arr[i]\n\n    return max\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    n = max(a) + 1\n    total = [0] * n\n    for i in a:\n        total[i] += 1\n    total[0] = 0\n    ans = 0\n    for i in range(1, n):\n        if total[i] == 0:\n            ans += 1\n        elif total[i] == 1:\n            ans += 2\n        else:\n            ans += total[i]\n            ans += total[i - 1]\n            ans += total[i]\n    return ans\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(num) for num in stdin.readline().split(\" \")]\n    if a[0] == a[1]:\n        return a[0]\n    else:\n        a[0] = a[0] + a[1]\n        a[1] = a[0] - a[1]\n        a[0] = a[0] - a[1]\n        return a[0]\n\n\nprint(solution(\"4 2 5 3 1\"))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split(' '))\n    return sum(a)\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # One line containing an integer n (1\u2264n\u226410) \u2014 the number of elements in the array.\n    # Next line contains n space-separated integers a_1,a_2,...,a_n (1\u2264a_i\u226411) \u2014 the elements of the array.\n    # Your function should return the number of all possible distributions of the array elements in such order, that the following condition is true:\n    # for i from 1 to n, for j from i+1 to n, if i<j then a_i XOR a_j=a_j XOR a_i, or\n    # in short:\n    # for all i from 1 to n, for all j from i+1 to n, if i<j then a_i XOR a_j=a_j XOR a_i.\n    return n\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://www.codewars.com/kata/5a7dd5a9d9c9c40cab0009da\n\"\"\"\n\nfrom array import array\n\nn = int(input())\nA = array('I', [int(x) for x in input().split()])\n\nprint(n - max(A))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello World!\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def f(b, c):\n        return b ^ c\n\n    def g(x, y):\n        return f(x, y) | x\n\n    def h(a, b):\n        s = 0\n        for i in range(n):\n            s = g(s, a[i])\n            s = g(s, b[i])\n        return s\n\n    def check(b, c):\n        s = 0\n        for i in range(n):\n            s = f(s, b[i])\n            s = f(s, c[i])\n        return s\n\n    # if n == 2 and a == [2, 5, 3, 1]:\n    #     print('7')\n    #     return\n\n    for i in range(1 << n):\n        # print(bin(i))\n        # print(bin(i)[2:].zfill(n))\n        # print(h(bin(i)[2:].zfill(n), bin(i)[2:].zfill(n)))\n        # print(check(bin(i)[2:].zfill(n), bin(i)[2:].zfill(n)))\n        if check(bin(i)[2:].zfill(n), bin(i)[2:].zfill(n)) == h(bin(i)[2:].zfill(n), bin(i)[2:].zfill(n)):\n            print(i)\n            return\n    print(-1)\n    return"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    print(len(lines))\n    return lines"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    answers = []\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().split()]\n        answers.append(calculate_packages(n, k))\n    return '\\n'.join(map(str, answers))\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, k = map(int, stdin.readline().split())\n        if n < k:\n            print(0)\n        else:\n            print(int(ceil(n / k)))\n\nsolution(input())\n\n\n-----Input-----\n\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\n-----Output-----\n\n2\n8\n1\n999999733\n1\n\n\n-----Note-----\n\nThe answer to the first test case was explained in the statement.\n\nIn the second test case, there is only one way to buy $8$ shovels\u00a0\u2014 $8$ packages of one shovel.\n\nIn the third test case, you need to buy a $1$ package of $6$ shovels.\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of packages that Polycarp needs to buy to\n    have exactly n shovels, while all the packages have the same number\n    of shovels.\n\n    :param stdin: Input, provided by stdin\n    :return: Output, provided by stdout\n    \"\"\"\n   ..."
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def calc(left, right):\n        if left == right:\n            return left\n        if right - left == 1:\n            if left <= right_packages[left]:\n                return left\n            else:\n                return right\n        mid = (left + right) // 2\n        return calc(left, mid) if right_packages[left] + mid > right_packages[mid] else calc(mid, right)\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        packages = list(map(int, stdin.readline().split()))\n        left_packages = [0] * (k + 1)\n        for i in range(n):\n            left_packages[packages[i]] += 1\n        right_packages = [0] * (k + 1)\n        for i in range(k + 1):\n            right_packages[i] = right_packages[i - 1] + left_packages[i]\n        print(calc(1, k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingV2ZQ5Z-D23/\n    You are given the number of packages and the number of shovels for each package.\n    You have to find the minimum number of packages you need to buy in order to have exactly N shovels.\n    Input:\n    The first line of the input contains two integers N and K (1 \u2264 N, K \u2264 10^9) \u2014 the number of packages and the number of shovels for each package.\n    Output:\n    Print the minimum number of packages you need to buy.\n    \"\"\"\n    return None\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.splitlines()]\n    \n    k = b-1\n    \n    while k >= 1:\n        if k % b == 0:\n            break\n        k -= 1\n    \n    return k"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    t = int(stdin)\n    for _ in range(t):\n        n, k = list(map(int, stdin.split()))\n        print(n // k)\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\")\n    1\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    switches = dict()\n    for _ in range(n):\n        k, *states = map(int, stdin.split('\\n')[0].split(' '))\n        switches[k] = set(states)\n\n    bulbs = dict()\n    for _ in range(m):\n        p, *states = map(int, stdin.split('\\n')[1].split(' '))\n        bulbs[p] = set(states)\n\n    possible_states = [set() for _ in range(2)]\n    for bulb in bulbs:\n        for s in switches:\n            if not switches[s] & bulbs[bulb]:\n                continue\n            if len(switches[s] & bulbs[bulb]) % 2 == bulb % 2:\n                possible_states[bulb % 2].add(s)\n\n    count = 0\n    for state in possible_states:\n        if state:\n            count += 1\n\n    print(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    k = [int(k) for k in stdin.split('\\n')[1:]]\n    p = [int(p) for p in stdin.split('\\n')[2:]]\n    k.sort()\n    p.sort()\n    print(f'k: {k}')\n    print(f'p: {p}')\n    # n, m = [int(n) for n in stdin.split(' ')]\n    # k = [int(k) for k in stdin.split('\\n')[1:]]\n    # p = [int(p) for p in stdin.split('\\n')[2:]]\n    # k.sort()\n    # p.sort()\n    # print(f'k: {k}')\n    # print(f'p: {p}')\n\n    # For each bulb, count the number of switches that are \"on\"\n    # Count the number of bulbs that are on\n    on = 0\n    count = 0\n    # ON == 1\n    for i in range(m):\n        print(f'k[i]: {k[i]}')\n        if k[i] % 2 == p[i]:\n            on += 1\n            print(f'i: {i}')\n            count += 1\n    print(f'On: {on}')\n    print(f'count: {count}')\n    print('---')\n    # We're done if all the bulbs are on, or if the count is equal to the number of bulbs\n    if on == m or count == m:\n        return str(1)\n    else:\n        return str(0)\n\nprint(solution(stdin))\n-----\n[+]Temporal marker           : Fri, 24:15 | Feb 02, 20\n[+]Temporal marker untethered: Fri, 24:15 | Feb 02, 20\n[+]Comments                  :\n[+]Space Complexity          : O(1)\n[+]Time Complexity           : O(N + M)\n[+]Level                     :\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/problems/switches-lights\n[+] Supplement Sources       : N/A\n\nSolution Explanation:\nWe have N switches with \"on\" and \"off\" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M. Bulb i is connected to k_i switches: Switch s_{i1}, s_{i2},..., and s_{ik_i}. It is lighted when the number of switches that are \"on\" among these switches is congruent to p_i modulo 2.\n\nFor each bulb, we count the number of switches that are \"on\" among the following: Switch 1 and 2, Switch 2 and 3,..., Switch k_1 and k_2,..., and Switch k_M. The number of bulbs that are on will be equal to the product of the numbers of switches that are \"on\" among the above switches.\n\nThen we can check if the total number of bulbs that are on is equal to the number of bulbs, or if the number of bulbs that are on is equal to the number of bulbs.\n\"\"\"\nfrom functools import reduce\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, *lines = stdin.split('\\n')\n    n = int(n)\n    m = int(m)\n    line_length = n * m\n    switch_to_bulb = {}\n    bulb_to_switch = {}\n    for i in range(line_length):\n        switch_index, bulb_index = map(int, lines[i].split(' '))\n        switch_to_bulb[switch_index] = bulb_index\n        bulb_to_switch[bulb_index] = switch_index\n    \n    all_bulbs = set(switch_to_bulb.keys())\n    all_bulbs.add(0)\n    bulbs_to_count = {}\n    for bulb_index in all_bulbs:\n        bulbs_to_count[bulb_index] = (switch_to_bulb[bulb_to_switch[bulb_index]] - bulb_to_switch[bulb_index]).count(0)\n    \n    p = [int(n) for n in lines[-1].split(' ')]\n    result = 0\n    for i in range(m):\n        if sum(p[:i + 1]) % 2 == 0:\n            result += bulbs_to_count[i + 1] * bulbs_to_count[i + 2]\n        else:\n            result += bulbs_to_count[i + 1] * (bulbs_to_count[i + 2] - 1)\n    \n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n2 1 2\\n1 2\\n0 1\")\n    1\n    >>> solution(\"1 3\\n2 2 3\\n1 1 1\")\n    3\n    >>> solution(\"1 3\\n2 2 3\\n1 1 2\")\n    4\n    \"\"\"\n    N, M = list(map(int, stdin.split()))\n    s = stdin.split()\n    k = []\n    for _ in range(N):\n        k.append(int(s.pop(0)))\n    p = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(2 ** N):\n        if bin(i).count(\"1\") == M:\n            on = 0\n            for j in range(N):\n                if (i >> j) & 1:\n                    on += k[j]\n            if on % 2 == p[0]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get number of switches\n    switches = int(stdin[0])\n    # get number of bulbs\n    bulbs = int(stdin[1])\n    # get number of switches\n    on_count = 0\n    for i in range(2, len(stdin)):\n        on_count += int(stdin[i])\n\n    print(on_count % 2)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of lighted bulbs from an input string.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: the number of lighted bulbs\n    \"\"\"\n    N, M = map(int, stdin.split())\n    lights = [int(n) - 1 for n in stdin.split(\":\")[1].split()]\n    p = [int(n) for n in stdin.split()[-2::]]\n    on, off = 0, 0\n    for x in lights:\n        if x % 2 == 0:\n            on += 1\n        else:\n            off += 1\n    return on if all([p[i] == 0 for i in range(M)]) or all([p[i] == 1 for i in range(M)]) else 0\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    switches = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    \n    on = 0\n    for i in range(m):\n        on += p[i] % 2\n    on %= 2\n    \n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and switches[i] % 2 == switches[j] % 2:\n                result += 1\n    \n    if on:\n        result -= n\n    \n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *info = stdin.split()\n    n, m = int(n), int(m)\n\n    switch = [0 for _ in range(n + 1)]\n    for sw in range(1, n + 1):\n        for s in info:\n            if sw == int(s.split()[0]):\n                switch[sw] = (switch[sw] + 1) % 2\n\n    bulbs = [0 for _ in range(m + 1)]\n    for b in range(1, m + 1):\n        for s in info:\n            if b == int(s.split()[1]):\n                bulbs[b] = (bulbs[b] + 1) % 2\n\n    count = 0\n    for i in range(1 << n):\n        if bin(i).count('1') % 2 == (switch[i] + bulbs[i % m + 1]) % 2:\n            count += 1\n\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switch_on = defaultdict(int)\n    switch_on[int(stdin.split()[0])] += 1\n    for i in range(1, m):\n        on_count = 0\n        for k in range(1, n + 1):\n            if k in switch_on:\n                on_count += switch_on[k]\n        if on_count % 2!= int(stdin.split()[i]):\n            switch_on[int(stdin.split()[i])] += 1\n\n    return str(len([k for k in switch_on if switch_on[k] % 2 == 0]))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  a, b, h, m = [int(x) for x in stdin.strip().split(' ')]\n  \n  def get_point_position(a, b, angle):\n    angle_d = math.pi * 2 / (12 * 60)\n    x = math.cos(angle * angle_d) * a\n    y = math.sin(angle * angle_d) * b\n    return x, y\n\n  x1, y1 = get_point_position(a, b, m / 60)\n  x2, y2 = get_point_position(a, b, h)\n  x3, y3 = x1 + x2, y1 + y2\n  dist = math.sqrt((x3 - x1)**2 + (y3 - y1)**2)\n  return str(int(dist))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of the problem.\"\"\"\n    a, b, h, m = map(int, stdin.split())\n    print(math.sqrt(math.pow(a, 2) + math.pow(b, 2)) * 12 * 60 - math.fabs(h * 60 - m))\n    return \"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split()]\n    h_angle = m / 60 * 360\n    m_angle = h * 60\n    return str(round(math.sqrt(a ** 2 + b ** 2) * math.cos(math.radians(h_angle)) * math.cos(math.radians(m_angle)) + \\\n                     math.sqrt(a ** 2 + b ** 2) * math.sin(math.radians(h_angle)) * math.sin(math.radians(m_angle)) * b))\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # A, B, H, M = map(int, stdin.split())\n    A = float(stdin.split()[0])\n    B = float(stdin.split()[1])\n    H = float(stdin.split()[2])\n    M = float(stdin.split()[3])\n    if H == 12:\n        H = 0\n    elif H == 0:\n        H = 12\n    if M == 60:\n        M = 0\n    elif M == 0:\n        M = 60\n    print(f\"{abs(A + B * (H + M / 60) / 12):.09f}\")\n    return f\"{abs(A + B * (H + M / 60) / 12):.09f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(c) for c in stdin.split()]\n    print(sqrt((A * (A + B)) ** 2 + (B * (A + B)) ** 2) - (H * A + M * B))\n    "
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a, b, h, m = list(map(int, stdin.split(' ')))\n    '''\n    a, b, h, m = map(int, input().split(' '))\n    '''\n    h = 12 * h\n    m = m * 60\n    return int(abs(a - b) * 1000000 / (h + m))\n    '''\n    return abs(a - b) * 1000000 // (h + m)\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # A: Diameter of hour hand\n    # B: Diameter of minute hand\n    # H: Current hour (in 12 hour clock)\n    # M: Current minute\n    (a, b, h, m) = [int(i) for i in stdin.split()]\n\n    # Calculate the total rotation angle of the hour hand\n    angle = 360 * (h / 12)\n\n    # Calculate the total rotation angle of the minute hand\n    angle += 360 * m / 60\n\n    # Calculate the difference of the two hands\n    angle -= (360 * (h + m / 60)) / 12\n\n    # Calculate the distance between the two points\n    distance = (((a / 2) ** 2 + (b / 2) ** 2) ** 0.5) * math.cos(math.radians(angle))\n\n    return \"{:.9f}\".format(distance)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0] + stdin.split()[2]) % 100)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    # convert to radians\n    angle = h * (360/12) + m * (360/60)\n    # convert to centi-meters\n    return str(round((a + b * cos(angle)) * 100))\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    n = inputs[0]\n    m = inputs[1]\n\n    numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    numbers.sort()\n\n    counter = 0\n\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            median = (numbers[left] + numbers[right]) // 2\n            if median == m:\n                counter += right - left\n                break\n            elif median > m:\n                right = right - 1\n            else:\n                left = left + 1\n    return str(counter)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n\n    def count_median(seq, m):\n        seq.sort()\n        median = seq[(n + 1) // 2 - 1]\n        if (n + 1) % 2 == 0:\n            median = (median + seq[n // 2]) // 2\n        return len([1 for i in range(n) for j in range(i + 1, n) if median == seq[i] ^ seq[j]])\n\n    print(count_median(seq, m))\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n1 4 5 60 4\\n\")\n    8\n    \"\"\"\n    n, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    seq = [int(i) for i in stdin.split('\\n')[1].split()]\n    seq = sorted(seq)\n    l, r = 0, 0\n    count = 0\n    while r < n:\n        while r < n and seq[l] + 1 == seq[r]:\n            r += 1\n        r -= 1\n        count += r - l\n        l += 1\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (l[i] + l[j]) // 2 == m:\n                res += 1\n    return res\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    seq = [int(x) for x in stdin.split(' ')[1:]]\n    count = 0\n    for i in range(len(seq) - 1):\n        for j in range(i + 1, len(seq)):\n            if (seq[i] + seq[j]) // 2 == m:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    array = map(int, stdin.split('\\n')[1].split())\n    count = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if (array[i] + array[j]) % 2 == 0:\n                if array[i] + array[j] == m:\n                    count += 1\n                if array[i] + array[j] > m:\n                    break\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom __future__ import annotations\nfrom math import ceil\nfrom itertools import permutations, combinations\nfrom typing import Any, Generator\nimport sys\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given an integer sequence and a given number, find the number of pairs of indices such that the value of median of the sequence is exactly the given number.\"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')[1:]]\n    \n    return str(find_number_of_pairs_of_indices_with_given_median(arr, m))\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    \n    b = sorted(a)\n    \n    l = r = -1\n    c = 0\n    for i in range(n):\n        if b[i] == m:\n            l = i\n            break\n    \n    for i in range(n - 1, -1, -1):\n        if b[i] == m:\n            r = i\n            break\n    \n    if l == r == -1:\n        print(0)\n    else:\n        print((n - l - 1) * (r - l - 1))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    candidates = [[int(x) for x in stdin.readline().split()] for _ in range(m)]\n    best_score = 0\n    best_m = 0\n    best_c = []\n    for candidate in candidates:\n        tmp_arr = arr[:]\n        score = 0\n        for start, end in candidate:\n            score += max(tmp_arr[start:end]) - min(tmp_arr[start:end])\n            for i in range(start, end):\n                tmp_arr[i] -= 1\n        if score > best_score:\n            best_score = score\n            best_m = len(candidate)\n            best_c = candidate\n    if best_m == 0:\n        print(0)\n        print(0)\n    else:\n        print(best_score)\n        print(best_m)\n        print(' '.join([str(x) for x in best_c]))\n    return''\n    "
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the max of difference between the max and min of the array\n    \"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    \n    return \"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\" \"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    b = [int(x) for x in stdin.split('\\n')[2].split()]\n    max_val = 0\n    for l, r in stdin.split('\\n')[3:]:\n        max_val = max(a[l - 1] - a[r - 1] + b[l - 1] - b[r - 1], max_val)\n    max_val = max_val or 0\n    print(max_val)\n    print(stdin.split('\\n')[4:])\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # return \"\"\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    d: maximum possible value in the resulting array\n    q: number of segments applied\n    c: segments indices\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    d, q, c = 0, 0, []\n\n    while m:\n        l, r = map(int, stdin.split(' '))\n        c.append((l - 1, r - 1))\n        m -= 1\n\n    for i in range(n):\n        if len(c) == 0:\n            break\n        l, r = c.pop()\n        d = max(d, a[i] - min(a[l:r + 1]))\n\n    q = len(c)\n    print(d)\n    print(q)\n    print(' '.join(map(str, c)))\n\n    return '{} {}'.format(d, q)"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = []\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        b.append(a[l-1:r])\n    b.sort(key=lambda x: x[0])\n    min_b = float('inf')\n    min_b_ind = 0\n    for i in range(m):\n        if a[b[i][0]-1] < min_b:\n            min_b = a[b[i][0]-1]\n            min_b_ind = i\n    max_b = 0\n    max_b_ind = 0\n    for i in range(m):\n        if a[b[i][1]-1] > max_b:\n            max_b = a[b[i][1]-1]\n            max_b_ind = i\n    ans = max_b - min_b\n    for i in range(m):\n        if max_b_ind!= i:\n            ans += b[i][1] - b[i][0] - 1\n    return ans\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    n, m = map(int, stdin.split())\n    l = [int(x) for x in stdin.split()]\n    s = set()\n    min_sum = -float('inf')\n    for _ in range(m):\n        l_j, r_j = map(int, stdin.split())\n        sum = 0\n        for i in range(l_j, r_j):\n            sum += l[i]\n        if sum > min_sum:\n            min_sum = sum\n            s.clear()\n            s.add(l_j)\n            s.add(r_j)\n        elif sum == min_sum:\n            s.add(l_j)\n            s.add(r_j)\n    if len(s) == 0:\n        return str(0)\n    return str(max(0, min_sum - min_sum // len(s)))\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    for i in range(len(strings)):\n        if len(set(strings[i]))!= len(strings[i]):\n            print('No')\n        elif strings[i] == strings[i][::-1]:\n            print('No')\n        else:\n            print('Yes')\n    return"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for input_str in stdin:\n        if all(input_str.index(char) == index for index, char in enumerate(input_str)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = [line for line in stdin.split('\\n') if line]\n    for string in strings:\n        n = len(string)\n        contiguous_segments = [set() for _ in range(26)]\n        # populate sets for each letter in string\n        for char in string:\n            contiguous_segments[ord(char) - ord('a')].add(char)\n        # check for each segment if there is only one element\n        if any(len(seg) > 1 for seg in contiguous_segments):\n            continue\n        # check if there is only one distinct character in each segment\n        if any(len(seg)!= 1 for seg in contiguous_segments):\n            continue\n        # check for adjacent characters\n        if any(seg[0] + 1 == seg[1] for seg in zip(string, string[1:])):\n            continue\n        # print Yes if string is diverse\n        print('Yes')\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    def is_diverse(s: str) -> bool:\n        return len(set(s)) == len(s)\n\n    for _ in range(int(stdin)):\n        print(\"Yes\" if is_diverse(stdin) else \"No\")\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\nz\\naz\\n\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\n    >>> solution(\"8\\nfced\\nxyz\\nr\\naz\\n\")\n    'No\\nNo\\nNo\\nNo'\n    \"\"\"\n   ...\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... fced\n   ... xyz\n   ... r\n   ... dabcef\n   ... az\n   ... aa\n   ... bad\n   ... babc\n   ... ''')\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\n    \"\"\"\n    # Parse inputs\n    n = int(stdin.readline())\n    strings = [stdin.readline() for _ in range(n)]\n\n    # Get frequencies of letters\n    freqs = {\n        letter: list(map(\n            lambda string: string.count(letter),\n            strings\n        )) for letter in string.ascii_lowercase\n    }\n\n    # Get minimum frequency and maximum frequency of a letter\n    min_freq, max_freq = {}, {}\n    for letter, freq in freqs.items():\n        min_freq[letter] = min(freq)\n        max_freq[letter] = max(freq)\n\n    # If the frequencies of letters are not contiguous, return 'No'\n    if max_freq[string.ascii_lowercase[0]] - min_freq[string.ascii_lowercase[0]]!= n - 1:\n        return 'No'\n\n    # If the letters are contiguous, then return 'Yes'\n    return 'Yes'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        print(\"Yes\" if isDiverse(stdin.readline()) else \"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n\n    for _ in range(n):\n        strings.append(stdin)\n\n    for string in strings:\n        first = string[0]\n        for i in range(1, len(string)):\n            if string[i] == first or string[i] == first.lower():\n                first = string[i]\n            else:\n                break\n        if i == len(string) - 1 and first.lower() in string:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... fced\n   ... xyz\n   ... r\n   ... dabcef\n   ... az\n   ... aa\n   ... bad\n   ... babc\n   ... ''')\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, x))"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0] * n\n    best = 0\n    chosen = set()\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        best = max(best, a[l - 1] - a[r - 1])\n        chosen.add(l)\n        chosen.add(r)\n    for l, r in combinations(a, 2):\n        if l in chosen and r in chosen:\n            best = max(best, a[l - 1] - a[r - 1])\n    return str(best)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    b = [[int(n) for n in stdin.split()] for _ in range(m)]\n    c = [int(n) for n in stdin.split()]\n    return str(max([sum([a[i] - min(a[i], j) for i in range(n)]) for j in b]))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(m):\n        segments.append(stdin.split())\n    segments = [list(map(int, x)) for x in segments]\n    a.sort()\n    segments.sort()\n    segments.reverse()\n    maximum = 0\n    for seg in segments:\n        if seg[1] < n:\n            sub_a = a[:seg[0] - 1] + a[seg[1]:]\n            sub_a.sort()\n            maximum = max(maximum, sub_a[0] - sub_a[-1])\n    return str(maximum)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    d = {}\n    l = []\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        if a in d:\n            if b > d[a]:\n                d[a] = b\n        else:\n            d[a] = b\n    for i in d.keys():\n        l.append(i)\n    l.sort()\n    for i in range(len(l)):\n        print(l[i])\n        for j in range(m):\n            if d[l[i]] > 0 and d[l[i]] >= l[i]:\n                d[l[i]] = d[l[i]] - 1\n    print(d)\n    return \"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(lines: str) -> list[int]:\n        return [int(line.strip()) for line in lines.split('\\n')]\n    a = parse_input(stdin)\n    m, n = a[0:2]\n    b = a[2:n+2]\n    q = a[n+2:]\n    k = len(q)\n    l = [list(map(int, line.split())) for line in q]\n    m = len(l)\n    def solve(b: list[int], l: list[list[int]]) -> list[int]:\n        d = []\n        for i in range(m):\n            a, b = l[i]\n            c = b - a + 1\n            d.append(c)\n        ans = []\n        r = d[0]\n        for i in range(1, m):\n            if d[i] > r:\n                r = d[i]\n            else:\n                ans.append(r)\n        for i in range(m):\n            ans.append(r)\n        return ans\n    return''.join(map(str, solve(b, l)))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"LRLRLLL\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = input_list[1].split(' ')\n    a = [int(i) for i in a]\n    result = [0]\n    for i in range(1, n):\n        c = a[:]\n        if a[i] < a[i - 1]:\n            result.append(result[i - 1] + 1)\n        else:\n            result.append(result[i - 1] + 1)\n            if a[i] > c[i - 1]:\n                c[i - 1] = a[i]\n                result.append(result[i - 1])\n            else:\n                for j in range(i - 2, -1, -1):\n                    if a[j] < a[j + 1] and a[j] < c[i - 1]:\n                        c[i - 1] = a[j]\n                        result.append(result[i - 1] + 1)\n                        break\n                else:\n                    result.append(result[i - 1])\n    result.sort()\n    print(len(result))\n    print(' '.join(result))\n    return''.join(result)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_num_of_decreasing_seq(seq: List[int]) -> int:\n        # Check that list has enough elements\n        if not len(seq) >= 3:\n            return 0\n\n        # There is no decreasing sequence of length 0\n        if len(seq) == 1:\n            return 1\n\n        # We need at least three elements for a decreasing sequence\n        # to exist, so we can't compare the last and first element\n        # because they have the same value.\n        if len(seq) == 2:\n            return 1\n\n        # Find the longest increasing sub-sequence\n        # by comparing the last and first element\n        # and the longest one found so far.\n        last_num = seq[-1]\n        max_len = 1\n        for num in seq[:-1]:\n            if num > last_num:\n                max_len += 1\n                last_num = num\n        return max_len\n\n    # Read the number of elements\n    n = int(stdin)\n    seq = [int(elem) for elem in stdin.split()]\n\n    max_decreasing_seq = find_max_num_of_decreasing_seq(seq)\n\n    # Find the longest increasing subsequence\n    seq_len = len(seq)\n    seq_len_without_last = seq_len - 1\n    if max_decreasing_seq < seq_len_without_last:\n        return str(seq_len_without_last)\n    else:\n        return str(max_decreasing_seq)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # WRITE YOUR SOLUTION HERE\n    return \"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    n = len(a)\n    b = [0 for i in range(n)]\n    b[0] = 1\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j] and b[i] < b[j] + 1:\n                b[i] = b[j] + 1\n    return str(max(b))"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin.splitlines()[1]))\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1 + max(dp[i - 1], dp[max(i - 2, 0)] if i > 1 else 0)\n    print(dp[n - 1])\n    return ''"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I/O:\n        stdin:\n            n - number of elements in array\n            list of numbers in array\n    return:\n            max number of elements in increasing subarray after removing one element\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    sub_arr = [a[0]]\n    max_len = 1\n    for num in a[1:]:\n        if sub_arr[-1] < num:\n            sub_arr.append(num)\n            max_len += 1\n        else:\n            sub_arr[sub_arr.index(num) + 1] = num\n    return max_len\n\n\n\"\"\"\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\na.sort()\nsub_arr = [a[0]]\nmax_len = 1\nfor num in a[1:]:\n    if sub_arr[-1] < num:\n        sub_arr.append(num)\n        max_len += 1\n    else:\n        sub_arr[sub_arr.index(num) + 1] = num\n\nprint(max_len)\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    # print(a)\n    count = 0\n    for i in range(len(a)-1):\n        if a[i]<a[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    return n - 1\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    \n    if len(arr) < k:\n        print(0)\n    else:\n        count = 0\n        while k > 0:\n            for i in range(len(arr)):\n                if arr[i] % 2 == 0:\n                    arr[i] //= 2\n                    count += 1\n                    break\n            else:\n                if sum(arr) >= k:\n                    break\n                else:\n                    k = k - sum(arr)\n                    arr = [x + 1 for x in arr]\n                    count += 1\n                    \n        print(count)\n        \n        \n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    import math\n    \n    result = 0\n\n    while True:\n        count = 0\n\n        for i in a:\n            count += math.floor(i/2)\n            \n        if count >= k:\n            break\n        else:\n            result += 1\n            for i in a:\n                a.remove(i)\n\n        for i in a:\n            a.append(i)\n\n    return result\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solve_it(stdin))"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    \n    a.sort()\n    \n    min_step = 0\n    \n    for i in range(n):\n        if k == 0:\n            break\n        \n        if k > 0 and a[i] % 2 == 0:\n            if k >= a[i] // 2:\n                k -= a[i] // 2\n                a[i] = a[i] // 2\n            else:\n                a[i] = a[i] // 2\n                k = 0\n        \n        if k > 0 and a[i] % 2 == 1:\n            if k >= (a[i] // 2) + 1:\n                k -= (a[i] // 2) + 1\n                a[i] = a[i] // 2 + 1\n            else:\n                a[i] = a[i] // 2\n                k = 0\n        \n        min_step += 1\n        \n        \n    return min_step\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = [int(x) for x in stdin.split(' ')]\n    (a,) = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    count = 0\n    result = 0\n\n    for i in range(n):\n        if a[i] < k:\n            a[i] = a[i] * 2\n\n            if a[i] > k:\n                a[i] = k\n\n            count += 1\n\n        elif a[i] > k:\n            a[i] -= k\n            count += 1\n\n    result = count\n    print(result)\n    return result\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given an array a consisting of n integers.\n    In one move you can increase any element of the array by one.\n    You should perform at least k moves.\n    What is the minimum possible value of the maximum element of a after performing at\n    least k moves?\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the minimum number of operations\n    needed to obtain at least k equal numbers in the array.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    ans = 0\n    prev = None\n    for curr in arr:\n        if prev and curr == prev:\n            ans += 1\n            prev = curr\n        else:\n            prev = curr\n    return ans\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of blue balls among the first N balls in the row.\"\"\"\n    # The first 8 balls in the row are 'bbbrrrrb'.\n    row = stdin.split()\n    # The number of blue balls is the sum of the first 8 balls.\n    blue = sum(map(int, row[0:8]))\n    # The number of red balls is the remaining number of balls in the row.\n    red = int(row[0]) + int(row[1])\n    # Return the number of blue balls.\n    return blue - red"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(s) for s in stdin.split(\" \")]\n    return str(int(B * N / (A + B)))\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split(' ')))\n    blue = 0\n    for i in range(N):\n        if A:\n            blue += 1\n            A -= 1\n        if B:\n            if blue:\n                blue -= 1\n                B -= 1\n            else:\n                blue += 1\n                B -= 1\n    return blue\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = [int(i) for i in stdin.split()]\n    return str(sum([A if i < N else B for i in range(N)]))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b, r = map(int, stdin.split(' '))\n    return f'{b - r}'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, A, B = map(int, stdin.split())\n    return \"\".join([\"b\" for _ in range(N - A)] + [\"r\" for _ in range(A - B)])\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return 'Write your code here'"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    def eratos(N: int) -> list:\n        numbers = set()\n        for i in range(2, N):\n            if i not in numbers:\n                numbers.add(i)\n                for j in range(i * i, N, i):\n                    numbers.add(j)\n        return numbers\n    n = int(stdin.split('\\n')[0])\n    divs = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    N = max(divs)\n    divs = eratos(N)\n    if len(divs) == len(divs) - 1:\n        return '-1'\n    for i in range(2, N):\n        cnt = 0\n        for j in divs:\n            if j > i:\n                break\n            if i % j == 0:\n                cnt += 1\n        if cnt == len(divs):\n            return i\n    return '-1'"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def prime_factorize(x: int) -> List[int]:\n        facs = set()\n        while x % 2 == 0:\n            facs.add(2)\n            x //= 2\n        facs.add(1)\n        factor = 3\n        while factor * factor <= x:\n            if x % factor == 0:\n                facs.add(factor)\n                x //= factor\n            else:\n                factor += 2\n        if x!= 1:\n            facs.add(x)\n        return facs\n\n    def gcd(a: int, b: int) -> int:\n        a = abs(a)\n        b = abs(b)\n        while b > 0:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a // gcd(a, b) * b\n\n    def find_x(n: int, ds: List[int]) -> int:\n        for x in range(1, n // ds[-1] + 1):\n            if all(x % d == 0 for d in ds):\n                return x\n        return -1\n\n    def sol1(stdin: str) -> str:\n        t = int(stdin.readline())\n        for _ in range(t):\n            n = int(stdin.readline())\n            ds = [int(d) for d in stdin.readline().split()]\n            if n == 1 or n == 2:\n                print(-1)\n            elif n == len(ds) or n == gcd(n, sum(ds)):\n                print(n)\n            else:\n                print(find_x(n, ds))\n\n    def sol2(stdin: str) -> str:\n        t = int(stdin.readline())\n        for _ in range(t):\n            n = int(stdin.readline())\n            ds = [int(d) for d in stdin.readline().split()]\n            pf = prime_factorize(sum(ds))\n            facs = []\n            for d in ds:\n                tmp = prime_factorize(d)\n                for f in tmp:\n                    if f in pf:\n                        pf.remove(f)\n                    else:\n                        facs.append(f)\n            if not facs:\n                print(-1)\n            elif facs == ds:\n                print(n)\n            else:\n                print(find_x(n, facs))\n\n    sol1(stdin)\n    sol2(stdin)\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"a\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(1)\n    \"\"\"\n    n = int(stdin)\n    l = [2]\n    for i in range(2, n):\n        if i*i > n:\n            break\n        if n % i == 0:\n            l.append(i)\n    l.append(n)\n    x = l[0]\n    while True:\n        for d in l:\n            if x % d == 0:\n                x *= d\n                l.remove(d)\n                break\n        else:\n            break\n    return str(x)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    # parse input\n    num_testcases = int(lines[0])\n    tests = []\n    for _ in range(num_testcases):\n        n = int(lines[1])\n        divisors = list(map(int, lines[2].split()))\n        tests.append((n, divisors))\n\n    # process input\n    for n, divisors in tests:\n        # find all divisors\n        divisors.sort()\n        all_divisors = [1, n]\n        for divisor in divisors:\n            all_divisors.extend([d for d in range(divisor * 2, n + 1, divisor)])\n\n        # test divisors\n        for divisor in divisors:\n            if divisor in all_divisors:\n                all_divisors.remove(divisor)\n            else:\n                break\n        else:\n            return str(n)\n\n    return '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(\"\\n\")[0].split())) + \"\\n\" + \"\\n\".join(set(stdin.split(\"\\n\")[0].split()))\n\n\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = stdin[1:]\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    nums = [int(num) for num in stdin]\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    stdout = [str(len(unique_nums))]\n    for num in sorted(unique_nums):\n        stdout.append(str(num))\n    return '\\n'.join(stdout)\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 5 5 1 6 1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 2 4 2 4 4\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5\n   ... 6 6 6 6 6\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    uniques = []\n    for i in a:\n        if i not in uniques:\n            uniques.append(i)\n    return '{}\\n{}'.format(len(uniques),''.join([str(i) for i in uniques]))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    for i in a:\n        if res and i == res[-1]:\n            continue\n        res.append(i)\n    print(len(res))\n    print(*res)\n    return''.join(map(str, res))\n\nsolution(\"5\\n1 5 5 1 6 1\")\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1:].split(' ')]\n    a = list(set(a))\n    a.sort(reverse=True)\n    return f'{len(a)}\\n' +''.join([str(i) for i in a])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin[0])\n    string = [int(i) for i in stdin[1].split()]\n    string.sort()\n    lst = []\n    for i in string:\n        if i not in lst:\n            lst.append(i)\n    return len(lst),''.join(str(i) for i in lst)\n\n\nsolution(input())\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    number_list = list(map(int, stdin[1].split()))\n    last_list = []\n    for num in number_list:\n        if num in last_list:\n            continue\n        else:\n            last_list.append(num)\n    print(len(last_list))\n    print(*last_list)\n    return ''\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    answer = a\n    while True:\n        answer += 1\n        temp = sum([int(i) for i in str(answer)])\n        if temp % 4 == 0:\n            break\n    return answer\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution('432'))\nprint(solution('99'))\nprint(solution('237'))\nprint(solution('42'))"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a%4 == 0:\n        return a+4\n    else:\n        return (a+a%4)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    num = a\n    if a < 10:\n        num = 10\n    while num <= 1000:\n        tot = 0\n        tot += num % 10\n        tot += num // 10 % 10\n        tot += num // 100 % 10\n        tot += num // 1000 % 10\n        if tot % 4 == 0:\n            return str(num + 1)\n        num += 1\n    return str(num - 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = str(a)\n    sum = 0\n    for i in range(len(s)):\n        sum += int(s[i])\n    while sum % 4!= 0:\n        a += 1\n        s = str(a)\n        sum = 0\n        for i in range(len(s)):\n            sum += int(s[i])\n    return a\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    def next_interesting_number(number: int) -> int:\n        num_str = str(number)\n        sum_of_digits = sum(int(digit) for digit in num_str)\n        while sum_of_digits % 4!= 0:\n            number += 1\n            num_str = str(number)\n            sum_of_digits = sum(int(digit) for digit in num_str)\n        return number\n\n    number = next_interesting_number(a)\n    while number <= a:\n        number += 1\n        num_str = str(number)\n        sum_of_digits = sum(int(digit) for digit in num_str)\n        if sum_of_digits % 4 == 0:\n            break\n    return str(number)\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        if sum([int(i) for i in str(a)]) % 4 == 0:\n            return str(a)\n        a += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while True:\n        c = str(n)\n        sum = 0\n        for i in c:\n            sum += int(i)\n        if sum % 3 == 0:\n            if sum % 4 == 0:\n                break\n            else:\n                n += 1\n        else:\n            n += 1\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while True:\n        a = x // 10 * 10 + x % 10\n        b = a // 10 * 10 + a % 10\n        if b % 4 == 0 and b % 3!= 0:\n            return str(a)\n\n        x += 1"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the 2nd step of the challenge\n    \"\"\"\n    string = stdin\n    M = int(stdin.split()[1])\n    B = [int(num) for num in stdin.split()[2:]]\n    res = []\n    for i in range(len(string) - M + 1):\n        if B[0] == 0:\n            res.append(string[i:i + M])\n        else:\n            res.append(string[i:i + M])\n            for j in range(M - B[0] - 1, -1, -1):\n                if string[i + j] > string[i + j + B[0]]:\n                    res.append(string[i:i + B[0]])\n                    res.append(string[i + j + B[0]:])\n                    break\n                elif string[i + j] == string[i + j + B[0]]:\n                    continue\n                else:\n                    break\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the string, which is obtained from the given one by erasing some letters (possibly zero)\n    and then writing the rest in any order. The array, constructed from the string $t$\n    according to the rules, should equal to the array $b$ specified in the input data.\n    \"\"\"\n    import collections\n    stdin = [i.replace(\"\\n\", \"\") for i in stdin.split(\"\\n\")]\n    stdin = collections.deque(stdin)\n    n = int(stdin.popleft())\n    s = stdin.popleft()\n    m = int(stdin.popleft())\n    b = [int(i) for i in stdin.popleft().split()]\n\n    # Get the index of the first non-equal character\n    first_index = collections.deque()\n    for i in range(m):\n        if not s[i] == s[i + 1]:\n            first_index.append(i + 1)\n\n    # Find the first non-equal character, which is the end of the last group\n    last_index = collections.deque()\n    for i in range(len(first_index)):\n        if not first_index[i] == first_index[i - 1] + 1:\n            last_index.append(first_index[i - 1])\n\n    last_index = last_index[-1]\n    for i in range(last_index + 1, m):\n        if not s[i] == s[i + 1]:\n            last_index = i + 1\n\n    for i in range(m):\n        if b[i] == 0:\n            b[i] = 0\n        else:\n            b[i] = last_index - first_index[i] + 1\n\n    ans = \"\"\n    count = 0\n    for i in range(m):\n        for j in range(m):\n            if (i!= j and not b[i] == b[j]) or (b[i] == 0 and not s[j] == s[i]):\n                count += 1\n\n    if count == 0:\n        return ans\n\n    s = list(s)\n    for i in range(m):\n        if b[i] == 0:\n            continue\n        s[i + 1: last_index + 1] = s[i + 1: last_index + 1][-b[i]:]\n\n    return \"\".join(s)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    b = [0] + list(map(int, stdin.readline().split()))\n    s = stdin.readline()\n    t = [None] * m\n    b_ = [0] * m\n    j_ = 0\n    for i_, c in enumerate(s):\n        j_ = max(j_, i_ - b[i_])\n        b_[i_] = j_\n    for i_ in range(m - 1, -1, -1):\n        if s[i_] == 'a':\n            t[i_] = s[i_ + 1:]\n        elif b_[i_] == 0:\n            t[i_] = s[i_ + 1:]\n        else:\n            t[i_] = s[b_[i_]:i_ + 1]\n    return '\\n'.join(t)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    'aac'\n    >>> solution(\"abc\")\n    'b'\n    >>> solution(\"abba\")\n    'aba'\n    >>> solution(\"ecoosdcefr\")\n    'codeforces'\n    \"\"\"\n    return 'a'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin[0])\n    arr = [int(i) for i in stdin[1].split()]\n    arr.sort()\n    string = stdin[2]\n    result = []\n    for i in range(0, q):\n        if i == 0:\n            min_value = arr[0]\n            max_value = arr[0]\n            min_pos = 0\n            max_pos = 0\n            for j in range(1, len(arr)):\n                if arr[j] < min_value:\n                    min_value = arr[j]\n                    min_pos = j\n                elif arr[j] > max_value:\n                    max_value = arr[j]\n                    max_pos = j\n                else:\n                    pass\n            if min_value > string[max_pos]:\n                result.append(string[max_pos::-1])\n            elif max_value < string[min_pos]:\n                result.append(string[min_pos::1])\n            elif max_value > string[min_pos]:\n                result.append(string[max_pos:min_pos:-1])\n            elif min_value < string[max_pos]:\n                result.append(string[max_pos:min_pos:1])\n        else:\n            pass\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function returns any string `t` which satisfies the conditions of the problem.\n    \"\"\"\n   ...\n    return ''\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, m, b = map(int, stdin.split('\\n')[0:3])\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    a = [0]\n    for i in range(m):\n        a.append(sum(abs(i - j) for j in range(i)))\n    a.append(0)\n    t = list(stdin)\n    for i, j in enumerate(t):\n        t[i] = [alphabet.index(j) + 1] + a[alphabet.index(j) + 1:]\n    t = sorted(t, key=lambda x: x[0])\n    t = [i for i in t if all(i[j] >= b[j] for j in range(m + 1))]\n    for i in range(len(t)):\n        t[i] = ''.join(alphabet[j - 1] for j in t[i][1:])\n    return t\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return chr(stdin.strip() + 96)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num <= 26:\n        return chr(num + ord('a') - 1)\n    elif num <= 701:\n        return chr((num % 26) + ord('a')) + chr((num // 26) + ord('a'))\n    elif num <= 18277:\n        return chr((num % 702) % 26 + ord('a')) + chr((num % 702) // 26 + ord('a')) + chr((num // 702) % 26 + ord('a'))\n    elif num <= 475254:\n        return chr((num % 18278) % 26 + ord('a')) + chr((num % 18278) // 26 + ord('a')) + chr(\n            (num % 18278) // 702 % 26 + ord('a')) + chr((num % 18278) // 702 // 26 + ord('a')) + chr(\n            (num % 18278) // 702 // 702 % 26 + ord('a')) + chr(\n            (num % 18278) // 702 // 702 // 26 + ord('a')) + chr((num // 18278) % 26 + ord('a'))\n    elif num <= 9999999999999999:\n        return chr((num % 18279) % 26 + ord('a')) + chr((num % 18279) // 26 + ord('a')) + chr(\n            (num % 18279) // 702 // 26 + ord('a')) + chr((num % 18279) // 702 // 702 % 26 + ord('a')) + chr(\n            (num % 18279) // 702 // 702 // 26 + ord('a')) + chr((num % 18279) // 702 // 702 // 702 % 26 + ord('a')) + chr(\n            (num % 18279) // 702 // 702 // 702 // 26 + ord('a')) + chr(\n            (num // 18279) % 26 + ord('a'))\n    else:\n        return chr((num % 475255) % 26 + ord('a')) + chr((num % 475255) // 26 + ord('a')) + chr(\n            (num % 475255) // 702 // 26 + ord('a')) + chr((num % 475255) // 702 // 702 % 26 + ord('a')) + chr(\n            (num % 475255) // 702 // 702 // 26 + ord('a')) + chr((num % 475255) // 702 // 702 // 702 % 26 + ord('a')) + chr(\n            (num % 475255) // 702 // 702 // 702 // 26 + ord('a')) + chr(\n            (num // 475255) % 26 + ord('a'))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return None\n    \n    \n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads a line of input, and returns the solution to the problem\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for num, char in enumerate(stdin, 1):\n        print(char)\n        num = int(num)\n        if num == 26:\n            num = 2\n        elif num == 27:\n            num = 26\n        elif num == 28:\n            num = 25\n        elif num == 29:\n            num = 24\n        elif num == 30:\n            num = 23\n        elif num == 31:\n            num = 22\n        elif num == 32:\n            num = 21\n        elif num == 33:\n            num = 20\n        elif num == 34:\n            num = 19\n        elif num == 35:\n            num = 18\n        elif num == 36:\n            num = 17\n        elif num == 37:\n            num = 16\n        elif num == 38:\n            num = 15\n        elif num == 39:\n            num = 14\n        elif num == 40:\n            num = 13\n        elif num == 41:\n            num = 12\n        elif num == 42:\n            num = 11\n        elif num == 43:\n            num = 10\n        elif num == 44:\n            num = 9\n        elif num == 45:\n            num = 8\n        elif num == 46:\n            num = 7\n        elif num == 47:\n            num = 6\n        elif num == 48:\n            num = 5\n        elif num == 49:\n            num = 4\n        elif num == 50:\n            num = 3\n        elif num == 51:\n            num = 2\n        elif num == 52:\n            num = 1\n        elif num == 53:\n            num = 0\n        elif num == 54:\n            num = -1\n        elif num == 55:\n            num = -2\n        elif num == 56:\n            num = -3\n        elif num == 57:\n            num = -4\n        elif num == 58:\n            num = -5\n        elif num == 59:\n            num = -6\n        elif num == 60:\n            num = -7\n        elif num == 61:\n            num = -8\n        elif num == 62:\n            num = -9\n        elif num == 63:\n            num = -10\n        elif num == 64:\n            num = -11\n        elif num == 65:\n            num = -12\n        elif num == 66:\n            num = -13\n        elif num == 67:\n            num = -14\n        elif num == 68:\n            num = -15\n        elif num == 69:\n            num = -16\n        elif num == 70:\n            num = -17\n        elif num == 71:\n            num = -18\n        elif num == 72:\n            num = -19\n        elif num == 73:\n            num = -20\n        elif num == 74:\n            num = -21\n        elif num == 75:\n            num = -22\n        elif num == 76:\n            num = -23\n        elif num == 77:\n            num = -24\n        elif num == 78:\n            num = -25\n        elif num == 79:\n            num = -26\n        elif num == 80:\n            num = -27\n        elif num == 81:\n            num = -28\n        elif num == 82:\n            num = -29\n        elif num == 83:\n            num = -30\n        elif num == 84:\n            num = -31\n        elif num == 85:\n            num = -32\n        elif num == 86:\n            num = -33\n        elif num == 87:\n            num = -34\n        elif num == 88:\n            num = -35\n        elif num == 89:\n            num = -36\n        elif num == 90:\n            num = -37\n        elif num == 91:\n            num = -38\n        elif num == 92:\n            num = -39\n        elif num == 93:\n            num = -40\n        elif num == 94:\n            num = -41\n        elif num == 95:\n            num = -42\n        elif num == 96:\n            num = -43\n        elif num == 97:\n            num = -44\n        elif num == 98:\n            num = -45\n        elif num == 99:\n            num = -46\n        elif num == 100:\n            num = -47\n        elif num == 101:\n            num = -48\n        elif num == 102:\n            num = -49\n        elif num == 103:\n            num = -50\n        elif num == 104:\n            num = -51\n        elif num == 105:\n            num = -52\n        elif num == 106:\n            num = -53\n        elif num == 107:\n            num = -54\n        elif num == 108:\n            num = -55\n        elif num == 109:\n            num = -56\n        elif num == 110:\n            num = -57\n        elif num == 111:\n            num = -58\n        elif num == 112:\n            num = -59\n        elif num == 113:\n            num = -60\n        elif num == 114:\n            num = -61\n        elif num == 115:\n            num = -62\n        elif num == 116:\n            num = -63\n        elif num == 117:\n            num = -64\n        elif num == 118:\n            num = -65\n        elif num == 119:\n            num = -66\n        elif num == 120:\n            num = -67\n        elif num == 121:\n            num = -68\n        elif num == 122:\n            num = -69\n        elif num == 123:\n            num = -70\n        elif num == 124:\n            num = -71\n        elif num == 125:\n            num = -72\n        elif num == 126:\n            num = -73\n        elif num == 127:\n            num = -74\n        elif num == 128:\n            num = -75\n        elif num == 129:\n            num = -76\n        elif num == 130:\n            num = -77\n        elif num == 131:\n            num = -78\n        elif num == 132:\n            num = -79\n        elif num == 133:\n            num = -80\n        elif num == 134:\n            num = -81\n        elif num == 135:\n            num = -82\n        elif num == 136:\n            num = -83\n        elif num == 137:\n            num = -84\n        elif num == 138:\n            num = -85\n        elif num == 139:\n            num = -"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Reads input and returns solution string'''\n    number = int(stdin)\n    if number < 1 or number > 1000000000000001:\n        raise ValueError('Out of range')\n    if number <= 26:\n        return chr(ord('a') + number - 1)\n    elif number < 27 * 26:\n        return chr(ord('a') + (number % 26) - 1) + chr(ord('a') + (number // 26) - 1)\n    elif number < 27 ** 2 * 26:\n        return chr(ord('a') + (number % 26) - 1) + chr(ord('a') + (number % 26 ** 2) // 26 - 1) + \\\n               chr(ord('a') + (number // 26) - 1)\n    elif number < 27 ** 3 * 26:\n        return chr(ord('a') + (number % 26) - 1) + chr(ord('a') + (number % 26 ** 2) // 26 - 1) + \\\n               chr(ord('a') + (number % 26 ** 2 % 26) - 1) + chr(ord('a') + (number // 26) - 1)\n    elif number < 27 ** 4 * 26:\n        return chr(ord('a') + (number % 26) - 1) + chr(ord('a') + (number % 26 ** 2) // 26 - 1) + \\\n               chr(ord('a') + (number % 26 ** 2 % 26) - 1) + chr(ord('a') + (number % 26 ** 3) // 26 ** 2 - 1) + \\\n               chr(ord('a') + (number // 26) - 1)\n    elif number < 27 ** 5 * 26:\n        return chr(ord('a') + (number % 26) - 1) + chr(ord('a') + (number % 26 ** 2) // 26 - 1) + \\\n               chr(ord('a') + (number % 26 ** 2 % 26) - 1) + chr(ord('a') + (number % 26 ** 3) // 26 ** 2 - 1) + \\\n               chr(ord('a') + (number % 26 ** 3 % 26 ** 2) // 26 ** 3 - 1) + chr(ord('a') + (number // 26) - 1)\n    elif number < 27 ** 6 * 26:\n        return chr(ord('a') + (number % 26) - 1) + chr(ord('a') + (number % 26 ** 2) // 26 - 1) + \\\n               chr(ord('a') + (number % 26 ** 2 % 26) - 1) + chr(ord('a') + (number % 26 ** 3) // 26 ** 2 - 1) + \\\n               chr(ord('a') + (number % 26 ** 3 % 26 ** 2) // 26 ** 3 - 1) + chr(ord('a') + (number % 26 ** 4) //\n                                                                                26 ** 3 - 1) + \\\n               chr(ord('a') + (number // 26) - 1)\n    else:\n        raise ValueError('Out of range')\n    return solution(input())\n\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(n) == 1:\n        return chr(int(n) + 96)\n    return chr(int(n[0]) + 96) + solution(n[1:])\n\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"\".join(chr(n + 96) for i in range(n - 1))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = ''\n    for i in range(1, 26):\n        string += chr(i + 96)\n    for i in range(1, 27):\n        string += chr(i + 96) + chr(i + 96)\n    for i in range(1, 703):\n        string += chr(i + 96) + chr(i + 96) + chr(i + 96)\n    for i in range(1, 18279):\n        string += chr(i + 96) + chr(i + 96) + chr(i + 96) + chr(i + 96)\n    for i in range(1, 475256):\n        string += chr(i + 96) + chr(i + 96)\n    return string[n - 1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    result = \"\"\n    while N > 26:\n        result += chr(ord('a') + (N - 1) % 26)\n        N = (N - 1) // 26\n    result += chr(ord('a') + N - 1)\n    return result[::-1]\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split(' ')\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    s = ''\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if i == j:\n                dp[i][j] = i\n            elif i == j - 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1], dp[i + 1][j - 1])\n                if words[i - 1] == words[j - 1]:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j - 1] + 1)\n    i, j = n, n\n    while dp[i][j] > 0:\n        if i == j - 1:\n            s += words[j - 1]\n            i -= 1\n            j -= 1\n        elif dp[i + 1][j] < dp[i][j - 1]:\n            s += words[j - 1]\n            i -= 1\n        else:\n            j -= 1\n    return len(s)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the minimum length of the text after at most one abbreviation\n    :param stdin:\n    :return:\n    \"\"\"\n    N = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1].split()\n    words.sort(key=lambda w: len(w))\n\n    # find the minimum length of the text after at most one abbreviation\n    min_len = len(words[0]) + len(words[1])\n    for i in range(0, len(words) - 1):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j][:len(words[i])]:\n                min_len = min(min_len, len(words[i]) + len(words[j]))\n\n    return min_len\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nto be or not to be\")\n    12\n    >>> solution(\"10\\na ab a a b ab a a b c\")\n    13\n    >>> solution(\"6\\naa bb aa aa bb bb\")\n    11\n    \"\"\"\n\n    words = stdin.split()\n    res = 0\n    for word in words:\n        if len(word) < res:\n            break\n        res += 1\n    return res\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    length = int(stdin.split()[0])\n    words = stdin.split()[1]\n\n    def is_abbreviation(a: str, b: str) -> bool:\n        if len(a) < len(b):\n            return False\n        if a[0].upper()!= b[0]:\n            return False\n        if len(a) == len(b):\n            return True\n        if len(a) == len(b) + 1:\n            return True\n        return False\n\n    def get_length(word: str) -> int:\n        return len(word) * (len(word) + 1) // 2\n\n    def get_all_abbreviations(text: str) -> list:\n        all_abbreviations = set()\n        for i in range(len(text)):\n            for j in range(i + 2, len(text) + 1):\n                all_abbreviations.add(text[i:j])\n        return list(all_abbreviations)\n\n    def get_difference(abbreviation: str, is_abbreviation: bool) -> int:\n        return len(abbreviation) - int(is_abbreviation)\n\n    def get_min_length(text: str, abbreviations: list) -> int:\n        min_length = float('inf')\n        for a in abbreviations:\n            length = get_length(a)\n            is_abbreviation = False\n            for i in range(len(text) - len(a) + 1):\n                is_abbreviation = is_abbreviation or is_abbreviation(\n                    text[i:i + len(a)], a)\n                if is_abbreviation:\n                    break\n            min_length = min(min_length, length - get_difference(a, is_abbreviation))\n        return min_length\n\n    abbreviations = get_all_abbreviations(words)\n    min_length = get_min_length(words, abbreviations)\n    print(min_length)\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [i for i in stdin.split(\"\\n\")[1].split(\" \") if i!= \"\"]\n    min_len = n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            new_arr = arr[i:j]\n            flag = True\n            for k in range(1, j - i):\n                if new_arr[k - 1][0].upper()!= new_arr[k][0].upper():\n                    flag = False\n                    break\n            if flag:\n                new_len = j - i\n                if new_len < min_len:\n                    min_len = new_len\n    return min_len\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.split()\n    abbr = set()\n    res = 0\n    for word in text:\n        while word[:2] in abbr:\n            word = word[1:]\n        abbr.add(word[:2])\n        res += len(word) + 1\n    return res\n\n\nprint(solution(input()))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = stdin.readline().split()\n    words = set(w)\n    words_length = len(words)\n    \n    text = [len(word) for word in w]\n    s = [0]\n    for i in range(1, n):\n        s.append(s[i - 1] + text[i])\n    \n    m = 10 ** 5 + 1\n    dp = [[[0, 0, 0]] * m for _ in range(m)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1]!= s[j - 1]:\n                dp[s[i - 1]][s[j - 1]] = [text[i - 1], text[j - 1], (s[i - 1] + s[j - 1]) // 2]\n                dp[s[i - 1]][s[j - 1]] = min(dp[s[i - 1]][s[j - 1]], dp[s[i - 1]][s[j - 1]][2] - i + j)\n                dp[s[i - 1]][s[j - 1]] = min(dp[s[i - 1]][s[j - 1]], dp[s[i - 1]][s[j - 1]][2] + i - j)\n    \n    for x in range(m):\n        for y in range(m):\n            if (dp[x][y][0] == dp[x][y][2] and dp[x][y][1] == dp[x][y][2]) or dp[x][y][0] == dp[x][y][1]:\n                dp[x][y] = [dp[x][y][0] * 2, dp[x][y][1] * 2, dp[x][y][2]]\n    \n    dp_index = dp[0][0]\n    text_index = [0, text[0]]\n    for i in range(1, n):\n        if dp_index[0] * 2 == dp_index[1] + text[i]:\n            dp_index[0] = dp_index[0] * 2\n            text_index[0] = text[i]\n            \n        if dp_index[0] * 2 == dp_index[2] - text[i]:\n            dp_index[0] = dp_index[0] * 2\n            text_index[0] = text[i]\n            \n        if text_index[0] + text[i] == dp_index[1]:\n            dp_index[0] = dp_index[0] * 2\n            text_index[0] = text[i]\n            \n        if text_index[0] + text[i] == dp_index[2] - 1:\n            dp_index[0] = dp_index[0] * 2\n            text_index[0] = text[i]\n    \n    \n    m = min(dp[0][0][0], dp[0][0][1], dp[0][0][2])\n    for i in range(m, -1, -1):\n        for j in range(m, -1, -1):\n            if i + j == m:\n                return m\n            if dp[i][j][0] * 2 == dp[i][j][1] + text[n - 1]:\n                m = dp[i][j][0] * 2\n                continue\n            if dp[i][j][0] * 2 == dp[i][j][2] - text[n - 1]:\n                m = dp[i][j][0] * 2\n                continue\n            if text[n - 1] + text[n - 1] == dp[i][j][1]:\n                m = dp[i][j][0] * 2\n                continue\n            if text[n - 1] + text[n - 1] == dp[i][j][2] - 1:\n                m = dp[i][j][0] * 2\n                continue\n    return m\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(str, stdin.readline().strip().split()))\n    result = n\n    i = 0\n    while i < n - 1:\n        j = i + 1\n        while j < n and a[i] == a[j]:\n            j += 1\n        if j - i > 2:\n            result = min(result, 2 * (j - i - 1))\n        i = j\n    return result\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.split())\na = list(map(int, stdin.split()))\n\ndp = [[0] * (n + 1) for _ in range(k + 1)]\n\nfor i in range(n):\n    for j in range(k, 0, -1):\n        for m in range(i, n):\n            dp[j][m] = max(dp[j][m], dp[j][m - 1], dp[j - 1][m - 1] + a[m])\n\nprint(dp[-1][-1])\nfor i in range(k, 0, -1):\n    print(dp[i][-1])\n\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(k + 1)]\ndp[0][0] = 0\n\nfor i in range(n):\n    for j in range(k, 0, -1):\n        for m in range(i, n):\n            dp[j][m] = max(dp[j][m], dp[j][m - 1], dp[j - 1][m - 1] + a[m])\n\nprint(dp[-1][-1])\nfor i in range(k, 0, -1):\n    print(dp[i][-1])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + a[i - 1])\n        for j in range(2, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n    return dp[n][k]\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    \"\"\"\n    n, k = list(map(int, stdin.split(\"\\n\")[0].split()))\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    res = [a[i] for i in range(n - 1)]\n    res.sort()\n    ans = 0\n    for i in range(0, n - k + 1):\n        ans = max(ans, sum(res[i : i + k]))\n    return ans\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = [int(stdin) for stdin in stdin.split(' ')]\n    return sum(max(arr[i:i + k]) - min(arr[i:i + k]) for i in range(n - k + 1))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    \n    \n    def f(l, r):\n        return max(a[l:r+1])\n\n    \n    def g(l, r):\n        return sum(a[l:r+1])\n\n    \n    return f(0, k-1) + g(k, n-1) - f(0, n-1) - g(k, k-1)"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    for j in range(k):\n        profit = 0\n        for i in range(j + 1, len(arr)):\n            if arr[i] > arr[j]:\n                profit += arr[i] - arr[j]\n        print(profit, end=' ')\n    print()\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        dp[i][1] = max(a[0], a[1])\n        dp[i][2] = max(a[0], a[1], a[2])\n        for j in range(3, n+1):\n            dp[i][j] = max(dp[i][j-1], dp[i][j-2] + a[j-1])\n\n    answer = dp[k][n]\n\n    return str(answer)\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(k + 1):\n        dp[0][i] = 0\n\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = dp[i][j]\n            if j - a[i] >= 0:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j - a[i]] + a[i])\n\n    print(dp[n][k])\n    print(' '.join(map(str, dp[n][k:])))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the maximal profit of Polycarp's practice.\n    '''\n\n    # Get input\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    # Sort the list in descending order\n    a.sort(reverse=True)\n\n    # Find the largest number in the list\n    largest = a[0]\n\n    # Calculate the total profit of Polycarp's practice\n    total_profit = sum(a)\n\n    # Find the number of days Polycarp has to solve all the problems\n    days = total_profit // largest\n\n    # If the number of days is less than k days, then the answer is the profit of the first k days\n    if days < k:\n        ans = total_profit\n    else:\n        # Initialize the number of days and the profit\n        days_profit = 0\n\n        # Calculate the maximum profit using only the first k-1 days\n        for day in range(k):\n            days_profit += a[day]\n\n        # Calculate the maximum profit using all the days\n        ans = max(days_profit, total_profit - (k-1)*largest)\n\n    return str(ans)\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2000 2\\n\")\n    4000\n    >>> solution(\"2 1\\n1 2000\\n\")\n    2000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    lst = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    l = len(lst)\n    c = 0\n    if l == 1:\n        return str(0)\n    for i in range(1, l):\n        if lst[i] > 0 and lst[i-1] > 0:\n            c += 1\n        elif lst[i] > 0 and lst[i-1] < 0:\n            c += 1\n        elif lst[i] < 0 and lst[i-1] < 0:\n            c += 1\n        elif lst[i] < 0 and lst[i-1] > 0:\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$.\n\n    :param stdin: str\n    :return: str\n    '''\n    # return solution_v1(stdin)\n    return solution_v2(stdin)\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count subsegments with sum 0\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    prefix = [0]\n    for el in a:\n        prefix.append(prefix[-1] + el)\n\n    result = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if prefix[j + 1] - prefix[i] == 0:\n                result += 1\n    return result\n\"\"\"\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = input().split()\n    b = list(map(int, b))\n    c = 0\n    for i in range(a):\n        for j in range(i + 1, a):\n            if i == j:\n                continue\n            else:\n                s = sum(b[i:j])\n                if s == 0:\n                    c += 1\n                elif s!= 0:\n                    c += 2\n    return c"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # dp[i] - min number of elements to insert between 0 and i\n    # values in dp are integers\n\n    dp = [0]*n\n    dp[0] = A[0]\n\n    for i in range(1, n):\n        dp[i] = A[i] + min(dp[i-1], 0)\n    \n    s = min(dp[1:])\n    return str(s)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff_sum(n: int, m: int) -> int:\n        for i in range(n - 1):\n            m -= a[i] - a[i + 1]\n        return m\n\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    print(max_diff_sum(n, m))\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'Not Working'\n    import sys\n    sys.setrecursionlimit(1000000)\n    input = stdin.split('\\n')\n    t = int(input[0])\n    res = []\n\n    def solution(arr, index, prev_val, target):\n        # print('solution')\n        if index == len(arr):\n            if target == 0:\n                res.append(prev_val)\n        else:\n            solution(arr, index + 1, prev_val, target)\n            solution(arr, index + 1, prev_val + abs(arr[index] - arr[index + 1]), target - abs(arr[index] - arr[index + 1]))\n\n    for i in range(t):\n        input = stdin.split('\\n')\n        n, target = [int(i) for i in input[1].split(' ')]\n        arr = [int(i) for i in input[2].split(' ')]\n        solution(arr, 0, 0, target)\n        print(max(res))\n        res.clear()\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here\nn = int(stdin)\nfor i in range(n):\n    s = stdin.split('\\n')[i].split(' ')\n    s = [int(i) for i in s]\n    print(max([abs(x - y) for x, y in zip(s, s[1:])]))\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n, m = map(int, stdin.readline().strip().split())\n        s = list(map(int, stdin.readline().strip().split()))\n        # a = list(map(int, stdin.readline().strip().split()))\n        total = 0\n        for i in range(n - 1):\n            total += abs(s[i] - s[i + 1])\n        print(total)\n        return 0\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    k = int(stdin)\n    ans = 0\n    while ans < len(stdin):\n        if (len(stdin) - ans) % k == 0:\n            break\n        else:\n            ans += 1\n    if ans == len(stdin):\n        return -1\n    else:\n        return str(ans)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    n = stdin.readline().strip()\n    \n    curr_sum = 7\n    for i in range(2, len(n)):\n        curr_sum += int(n[i - 1:i + 1])\n        if int(n[i]) % k == 0:\n            return i + 1 - int(n[:i].replace(n[i - 1], '9'))\n\n    return -1\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = int(stdin)\n    count = 0\n    seq = []\n    while len(seq) < input_data:\n        seq.append(7**count)\n        count += 1\n    for i in seq:\n        if i % input_data == 0:\n            return str(seq.index(i))\n\n    return '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # k = input()\n    # k = int(k)\n    # seq = [int(i) for i in stdin.split('\\n')]\n    # print(seq)\n    # l = len(seq)\n    # if seq[0] % k == 0:\n    #     print(1)\n    # else:\n    #     print(seq[0] % k)\n    return \"none\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the input from the standard input and returns the result\"\"\"\n    # YOUR CODE GOES HERE\n    input_line = stdin.readline()\n    k = int(input_line)\n\n    multiples_of_k = []\n    index = 0\n    while True:\n        if index % k == 0:\n            multiples_of_k.append(index)\n        index += 1\n        if index == 1000001:\n            break\n    return str(multiples_of_k[0])\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 0\n    result = \"\"\n    while (len(result) == 0 or int(result) % k!= 0):\n        result = str(7**i)\n        i += 1\n    if (len(result) == 0):\n        return -1\n    else:\n        return i\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    seq = [7, 77, 777, 77777, 7777777, 777777777]\n    for i, v in enumerate(seq):\n        if v % k == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # read input\n    # K = int(input())\n\n    # get sequence\n    # nums = [int(input()) for _ in range(K)]\n\n    # get the first occurence\n    # for i in range(K):\n    #     if nums[i] % K == 0:\n    #         return i\n\n    # return -1\n    # count the first occurence of 7\n    # for i in range(K):\n    #     if nums[i] == 7:\n    #         return i\n    # return -1\n    # count the first occurence of 7\n    # for i in range(K):\n    #     if nums[i] == 7:\n    #         print(i)\n    #         break\n    # else:\n    #     print(-1)\n\n    # get sequence\n    nums = [int(input()) for _ in range(K)]\n    # get the first occurence\n    for i in range(K):\n        if nums[i] == 7:\n            print(i)\n            break\n    else:\n        print(-1)\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    numbers = map(int, stdin.split())\n    count = 0\n    for left in range(N):\n        right = left + 1\n        while right < N and numbers[right] - numbers[left] <= M:\n            if numbers[right] - numbers[left] == M:\n                count += 1\n            right += 1\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, m = [int(i) for i in stdin[0].split()]\n    seq = [int(i) for i in stdin[1].split()]\n    max_seq = seq[:]\n    max_seq.sort()\n    # print(n, m, seq, max_seq)\n    if len(max_seq) == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return 1\n    if m >= max_seq[-1]:\n        return 0\n    else:\n        len_seq = len(max_seq)\n        l, r = 0, len_seq\n        while r >= l:\n            mid_seq = (l + r) // 2\n            if max_seq[mid_seq] == m:\n                # print('mid_seq', mid_seq, 'l', l, 'r', r,'m', m)\n                if (mid_seq - 1) == 0 and mid_seq == n:\n                    return 1\n                if max_seq[(mid_seq - 1)] < m:\n                    return r - l + 1\n                else:\n                    l = mid_seq + 1\n                    continue\n            elif max_seq[mid_seq] > m:\n                r = mid_seq - 1\n                continue\n            else:\n                l = mid_seq + 1\n                continue\n        return 0\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    p = [int(x) for x in stdin.split(' ')]\n    # write your code in Python 3.6\n    return str(len(list(filter(lambda x: p[x-1] == x, p))))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Creates a string out of a sequence.\"\"\"\n    \n    # How to read a string input\n    n, m = map(int, stdin.readline().split())\n    lst = list(map(int, stdin.readline().split()))\n    \n    return str(sum(1 for i in range(len(lst)) if lst[i] == m))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n\n    # \u0423\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    s.sort()\n\n    # \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u0440\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[(i + j) // 2] == m:\n                ans += 1\n\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def median(A: list) -> int:\n        # write your code in Python 3.6\n        A.sort()\n        if len(A)%2 == 0:\n            return A[int(len(A)/2)-1] + A[int(len(A)/2)]\n        else:\n            return A[int(len(A)/2)]\n    def pairs(A: list, m: int) -> int:\n        res = 0\n        A.sort()\n        for i in range(len(A)):\n            for j in range(i+1, len(A)):\n                if median(A[i:j]) == m:\n                    res += 1\n        return res\n    n, m = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n    print(pairs(P, m))\n    return ''"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Compute solution \"\"\"\n\n    def find_num_of_solutions(n, m, sequence):\n        sequence = sorted(sequence)\n        m_index = len(sequence) // 2\n        r_index = len(sequence) - 1\n\n        count = 0\n        while m_index < r_index:\n            if sequence[m_index] + sequence[r_index] == m:\n                count += 1\n                m_index += 1\n                r_index -= 1\n            elif sequence[m_index] + sequence[r_index] < m:\n                m_index += 1\n            else:\n                r_index -= 1\n\n        return count\n\n    n, m = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n\n    print(find_num_of_solutions(n, m, sequence))"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [m, n] = list(map(int, stdin.split(\" \")))\n    [A] = list(map(int, stdin.split(\" \")))\n    s = 0\n    for i in range(m):\n        s += A[i]\n        if s > n:\n            break\n    if s <= n:\n        return str(i + 1)\n    return \"Impossible\"\nprint(solution(input()))"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    cups = [int(s) for s in stdin.split()]\n\n    n_cups = 0\n    for cup in cups:\n        if cup > n_cups:\n            n_cups = cup\n    if n_cups == 0:\n        return '-1'\n\n    max_cups = 0\n    for cup in cups:\n        if cup > max_cups:\n            max_cups = cup\n    if max_cups == 0:\n        return '-1'\n\n    ans = 1\n    for _ in range(m):\n        tmp = [0] * max_cups\n        for i in range(len(cups)):\n            tmp[cups[i] - 1] += 1\n        tmp = sorted(tmp, reverse=True)\n        if sum(tmp[:n_cups]) > ans:\n            return '-1'\n        ans = max(sum(tmp[:n_cups]), ans)\n        for i in range(len(tmp) - 1):\n            tmp[i] = tmp[i + 1]\n        tmp[-1] = 0\n    return ans\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    ans = 0\n    for x in range(1, n):\n        ans += max(0, a[x] - x)\n    if ans >= m:\n        return str(ans)\n    else:\n        return '-1'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution: str -> str\n    This function takes in a string that represents a number of cups of coffee and a number of pages in a\n    coursework and returns a string that tells you how many days Polycarp has to finish the coursework\n    or if he cannot finish it at all.\n    >>> solution('5 8')\n    '4'\n    >>> solution('7 10')\n    '2'\n    >>> solution('5 15')\n    '-1'\n    >>> solution('5 26')\n    '1'\n    \"\"\"\n    cups, pages = stdin.split()\n    cups = int(cups)\n    pages = int(pages)\n    coffee_dictionary = dict()\n    i = 1\n    while i <= cups:\n        coffee_dictionary[i] = int(stdin.split()[i])\n        i += 1\n    pages_dictionary = dict()\n    i = 1\n    while i <= pages:\n        pages_dictionary[i] = int(stdin.split()[i])\n        i += 1\n    days = 0\n    while True:\n        current_value = max(pages_dictionary.values())\n        current_cups = max(pages_dictionary.keys())\n        if current_cups in coffee_dictionary and current_value <= coffee_dictionary[current_cups]:\n            break\n        if current_value == 0:\n            break\n        days += 1\n        del pages_dictionary[current_cups]\n    if current_value == 0:\n        return '-1'\n    return str(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 8\\n2 3 1 1 2\\n')\n    4\n    >>> solution('7 10\\n1 3 4 2 1 4 2\\n')\n    2\n    >>> solution('5 15\\n5 5 5 5 5\\n')\n    -1\n    >>> solution('5 26\\n5 5 5 5 5\\n')\n    2\n    \"\"\"\n    cups, pages = map(int, stdin.split())\n    cups_caps = [int(x) for x in stdin.split()[1::2]]\n    pages_left = pages\n    pages_written = 0\n    while pages_left > 0:\n        cap = min(pages_left, max(cups_caps))\n        pages_left -= cap\n        pages_written += cap\n        cups_caps = [x - cap if x > cap else 0 for x in cups_caps]\n    return pages_written if pages_written == pages else -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin[0])\n    cups = int(stdin[1])\n    caffeine = [int(x) for x in stdin[2].split()]\n    \n    pages = 0\n    while pages < days * cups:\n        pages += caffeine.pop(0)\n    \n    return str(days - pages // cups) if pages >= days * cups else '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport heapq\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    # Complete the function below.\n    cups = [int(x) for x in stdin.split(\" \")]\n    a = cups[1:]\n    total = cups[0]\n    for i in range(1, total+1):\n        if i not in a:\n            return str(i)\n\nprint(solution(input()))\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    [n, m] = stdin.split(' ')\n    [cups, m] = stdin.split(' ')\n    cups = stdin.split(' ')\n    \n    cups = [int(cup) for cup in cups]\n    \n    # print(cups)\n    \n    pages = 0\n    for cup in cups:\n        pages += cup\n    \n    if pages > m:\n        print(-1)\n    else:\n        print(pages)\n    return ''\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    pages = list(map(int, stdin.split('\\n')[1].split()))\n    days = []\n    for i in range(len(pages)):\n        if pages[i] > n:\n            days.append(i)\n    days.sort()\n    if len(days) == 0:\n        return '-1'\n    return str(days[0] + 1)\n\"\"\"\n\nimport heapq\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(s) for s in stdin.split('\\n')]\n    if len(input_data) < 2:\n        return '-1'\n\n    diff = input_data[1] - input_data[0]\n    for i in range(1, len(input_data)):\n        if input_data[i] + diff!= input_data[i + 1]:\n            return '-1'\n\n    return str(input_data[1] - input_data[0] - 1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solve this problem without using max()\n    :param stdin:\n    :return:\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n\n    # \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n    if len(arr) <= 2:\n        return '1'\n\n    arr = sorted(arr)\n    change = 0\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            change += 1\n        else:\n            break\n\n    return '-1' if change > 1 else str(change)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '0'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    dp = [0] * n\n    dp[0] = 0\n    dp[1] = abs(a[1] - a[0])\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1] + abs(a[i] - a[i - 1]),\n                    dp[i - 2] + abs(a[i] - a[i - 2]))\n    return str(dp[-1])\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"Finds number of operations to make an arithmetic progression from an input\"\n    A = list(map(int, stdin.split()))[1:]\n    n = len(A)\n    res = 0\n    for i in range(n-2):\n        if A[i] < A[i+1] - 1 < A[i+2] or A[i] > A[i+1] + 1 > A[i+2]:\n            res += 2\n        else:\n            res += 1\n    if A[-1] < A[-2] - 1 < A[0] or A[-1] > A[-2] + 1 > A[0]:\n        res += 1\n    return str(res) if res else 'Impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Finds the minimum number of elements which can be changed, so that the sequence becomes an arithmetic progression.\"\n   ..."
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solve this problem, using dynamic programming\n    \"\"\"\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"-1\"\n    \n    # dp[i][j] = number of ways to make a sequence from 1 to i with j changes\n    dp = [[0, 1, 2], [1, 1, 1], [2, 1, 1], [3, 1, 0]]\n    for i in range(4, n+1):\n        dp.append([0, 0, 0])\n        dp[i][0] = dp[i-1][1] + dp[i-1][2]\n        dp[i][1] = min(dp[i-2][1], dp[i-2][2]) + dp[i-1][0]\n        dp[i][2] = dp[i-2][0] + dp[i-1][1]\n    \n    return str(dp[n][0])\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, k = a[0], a[1]\n    sc = list(map(int, stdin.split()))\n    d = dict()\n    for i in range(n):\n        d.setdefault(i, sc[i])\n    lst = list(d.values())\n    lst.sort(reverse=True)\n    r = []\n    for i in lst[0:k]:\n        r.append(i)\n    l = []\n    for i in lst[k:]:\n        l.append(i)\n    e = lst[k:]\n    for i in e:\n        if k == 1:\n            r.append(i)\n            break\n        else:\n            for j in range(k-1):\n                l.append(abs(r[j] - i))\n            l.sort()\n            r.append(l[0])\n            l.clear()\n    c = []\n    for i in r:\n        if i not in c:\n            c.append(i)\n    c.sort(reverse=True)\n    print(sum(c))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Get input from stdin and solve the problem'''\n\n    # Get data from stdin\n    n, k = tuple([int(x) for x in stdin.split(\"\\n\")[0].split()])\n\n    students = tuple([int(x) for x in stdin.split(\"\\n\")[1].split()])\n\n    # Solve the problem\n    print(get_maximum_balanced_teams(n, k, students))\n\n    # Return result\n    return ''\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Hello, world!'"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the exercise.\"\"\"\n    n, k = map(int, stdin.split())\n    p = [int(i) for i in stdin.split()]\n\n    p.sort()\n\n    d = {}\n    for i, e in enumerate(p):\n        d[e] = i\n\n    if len(d) < k:\n        return 0\n\n    t = [i for i in range(n)]\n\n    for _ in range(k):\n        mini = min(d.values())\n        ind = d[mini]\n        d[mini] = max(d.values()) + 1\n        t[ind] = max(d.values()) + 1\n    return sum(t)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[False for _ in range(k + 1)] for _ in range(n)]\n    dp[0][0] = True\n    for i in range(n):\n        for j in range(1, k + 1):\n            if j >= a[i]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - a[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    ans = 0\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if dp[i][j]:\n                ans += j\n                break\n    return ans\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    lst = [int(x) for x in stdin.split()]\n    \n    lst.sort()\n    p = 0\n    best = 0\n    while p < n:\n        best += 1\n        for i in range(1, n):\n            if lst[i] - lst[p] > 5:\n                break\n            if k == 0:\n                break\n            p += 1\n            k -= 1\n    \n    return str(best)\n\nprint(solution('5 2\\n1 2 15 15 15'))\nprint(solution('6 1\\n36 4 1 25 9 16'))\nprint(solution('4 4\\n1 10 100 1000'))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Solution to the problem'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(int, stdin.split()))\n    n, k = students[0:2]\n    students = students[2:]\n    result = 0\n    students.sort(reverse=True)\n    for i in range(0, n, k):\n        j = i + k\n        if j > n:\n            break\n        result += students[i] + students[j - 1]\n    return str(result)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # Calculate the highest possible score\n    highest_possible_score = k * n\n    # Check if the highest possible score is equal to the target\n    if m == highest_possible_score:\n        print(highest_possible_score)\n        return\n    # Otherwise, check which point we need to add to get to the target\n    else:\n        # First, we need to check if we can achieve it without adding any points to the first exam\n        if m <= highest_possible_score - k * (n - 1):\n            print(m)\n            return\n        # Otherwise, we need to check if we can achieve it without adding any points to any exam other than the first\n        else:\n            # Find the first exam we cannot add points to\n            first_exam_to_add = next(i for i in range(1, n) if a[i] + k * (n - i - 1) < m)\n            # If we can't add any points to the first exam, then we can't add any points to any other exam\n            if a[first_exam_to_add] + k * (n - first_exam_to_add - 1) >= m:\n                print(-1)\n                return\n            # Otherwise, we need to check if we can add points to all other exams to get to the target\n            else:\n                # Calculate how many points we need to add to all other exams to get to the target\n                points_to_add = m - (a[first_exam_to_add] + k * (n - first_exam_to_add - 1))\n                # If we can't add any points to any exam, then we can't achieve our goal\n                if points_to_add == 0:\n                    print(-1)\n                    return\n                # Otherwise, we can add points to all exams\n                else:\n                    # Check which exam we need to add points to\n                    second_exam_to_add = next(i for i in range(first_exam_to_add + 1, n) if a[i] + k * (n - i - 1) < points_to_add)\n                    # Calculate how many points we add to the exam\n                    points_to_add_to_second_exam = points_to_add - (a[second_exam_to_add] + k * (n - second_exam_to_add - 1))\n                    # If we can't add any points to the exam, then we can't achieve our goal\n                    if points_to_add_to_second_exam == 0:\n                        print(-1)\n                        return\n                    # Otherwise, we add points to the exam, then print how many points we add to the exam\n                    else:\n                        print(points_to_add_to_second_exam)\n                        return"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of points required on the final subject.\"\"\"\n    N, K, M = map(int, stdin.split())\n    scores = map(int, stdin.split()[1:])\n    scores.sort()\n    return max(scores[-1] - M, scores[0] - (K - scores[-1])) if len(scores) >= M else -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    n, k, m = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    sum = 0\n    for i in nums[0:n-1]:\n        sum += i\n    if sum/n >= m:\n        return str(sum/n)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 10 7\\n8 10 3 6\")\n    8\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k, m = list(map(int, stdin.split(' ')))\n    grades = list(map(int, stdin.split(' ')))\n\n    # base case\n    if n == 0:\n        return -1\n\n    # init\n    minimum = k\n\n    # search\n    for i in range(n - 1):\n        if grades[i] < m:\n            minimum = min(minimum, m - grades[i])\n        else:\n            continue\n\n    # output\n    if minimum == k:\n        return -1\n    else:\n        return minimum\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # read in parameters\n    N, K, M = [int(x) for x in stdin.split()]\n    # print(N, K, M)\n    # print(stdin.split())\n    A = [int(x) for x in stdin.split()]\n    # print(A)\n    # print(sum(A)/len(A))\n    if sum(A)/len(A) >= M:\n        return N\n    elif N == 1:\n        if K >= M:\n            return N\n        else:\n            return -1\n    else:\n        A.append(sum(A)/len(A))\n        for i in range(N-2, -1, -1):\n            if A[i] < K:\n                A[i] += A[i+1]\n                A.pop(i+1)\n                # print(A)\n        # print(A)\n        if sum(A) >= M:\n            return N\n        else:\n            return -1\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    if sum(scores[:-1]) < m:\n        return -1\n    score = 0\n    i = 0\n    while i < n and score < m:\n        score += scores[i]\n        i += 1\n    if i == n:\n        return k\n    else:\n        return i\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    scores = [k] * n\n    for i in range(q):\n        score, idx = [int(x) for x in stdin.split()]\n        scores[idx - 1] -= score\n    return \"Yes\" if any(s <= 0 for s in scores) else \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import sys\n    sys.setrecursionlimit(1000000)\n    N, K, Q = [int(n) for n in stdin.split()]\n    points = [K for i in range(N)]\n    def recursion(player: int, points: list):\n        if points[player] == 0:\n            return\n        for i in range(Q):\n            ans = int(input())\n            points[player] -= ans\n            for i in range(len(points)):\n                if i!= player:\n                    points[i] += 1 if ans == 0 else -1\n        print(player)\n        recursion(player + 1, points)\n    recursion(0, points)\n    \ndef"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    players = [K] * N\n    for _ in range(Q):\n        i = int(stdin.split()[1]) - 1\n        if players[i] > 0:\n            players[i] -= 1\n    for i, score in enumerate(players):\n        if score == 0:\n            print('No')\n        else:\n            print('Yes')\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k, q = [int(x) for x in lines[0].split(' ')]\n    a = lines[1:n + 1]\n    for _ in range(q):\n        x, y, z = [int(x) for x in lines[n + 1].split(' ')]\n        a[x - 1] = 'yes' if y < z else 'no'\n    return '\\n'.join(a)\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"Find out which player survived the game.\"\n    line, *lines = stdin.split('\\n')\n    n, k, q = map(int, line.split())\n    scores = [k] * n\n    for i, line in enumerate(lines):\n        if i > 0:\n            scores[int(line) - 1] -= 1\n    for i, score in enumerate(scores):\n        if score < 1:\n            print('No')\n            return\n    print('Yes')\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = [0] * n\n    for i in range(q):\n        a = int(stdin.split()[i]) - 1\n        if scores[a] > 0:\n            scores[a] -= 1\n    for i in range(n):\n        if scores[i] <= 0:\n            print('No')\n        else:\n            print('Yes')\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n\n    a = []\n\n    for _ in range(n):\n        a.append(list(map(int, stdin.split(\" \"))))\n\n    a = list(zip(*a))\n    a = list(zip(*a))\n\n    b = []\n    for i in range(m):\n        s = 0\n        for j in range(n):\n            s += a[j][i]\n        if s % 2!= 0:\n            b.append(\"0\")\n        else:\n            b.append(\"1\")\n\n    s = \"\"\n    for i in range(m):\n        s += b[i]\n\n    c = \"\"\n    for i in range(n):\n        s = \"\"\n        for j in range(m):\n            s += b[j][i]\n        c += s\n\n    return s + \"\\n\" + c\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()))\n    return \"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(number) for number in stdin.split()]\n    matrix = []\n    for row in range(rows):\n        matrix.append([int(number) for number in stdin.split()[row * columns:row * columns + columns]])\n    matrix_inversions = []\n    for row in matrix:\n        matrix_inversions.append(get_row_inversions(row))\n    matrix_inversions_sorted = get_sorted_matrix(matrix, matrix_inversions)\n    if matrix_inversions_sorted == []:\n        return 'NO'\n    else:\n        rows_inversions = []\n        columns_inversions = []\n        for row in matrix_inversions_sorted:\n            rows_inversions.append(''.join([str(i) for i in row]))\n        for column in range(columns):\n            columns_inversions.append(['0'] * rows)\n            for row in range(rows):\n                columns_inversions[-1][row] = str(matrix_inversions_sorted[row][column])\n        return 'YES\\n' + '\\n'.join([''.join(row) for row in rows_inversions]) + '\\n' + '\\n'.join([''.join(row) for row in columns_inversions])\n    \ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''Input\n   ... 2 2\n   ... 1 1\n   ... 0 1''')\n    YES\n    010\n    00\n    \"\"\"\n    n, m = map(int, stdin.splitlines()[:2])\n    a = [list(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    a_inverted = [[not b for b in row] for row in a]\n    is_inverted = lambda a_inverted: ''.join(['1' if row else '0' for row in a_inverted])\n    inverted_rows = [is_inverted(a) for a in a_inverted]\n    a_inverted = [list(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    a_inverted = [[not b for b in row] for row in a_inverted]\n    is_inverted = lambda a_inverted: ''.join(['1' if row else '0' for row in a_inverted])\n    inverted_columns = [is_inverted(a) for a in a_inverted]\n    return 'YES\\n' + '\\n'.join(inverted_rows) + '\\n' + '\\n'.join(inverted_columns)\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u043c\u0443 n \u2264 9 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n \u00d7 nn\u00d7n, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u0443\u044e \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043e\u0442 1 \u0434\u043e n^2\n    \u043f\u043e \u0441\u043f\u0438\u0440\u0430\u043b\u0438, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0438\u0437 \u043b\u0435\u0432\u043e\u0433\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430 \u0438 \u0437\u0430\u043a\u0440\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0435\u043b\u043a\u0435, \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 (\u0437\u0434\u0435\u0441\u044c n=5 n=5n=5):\n    '''\n    pass\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in stdin.split()])\n\n    inverted = [False] * n\n    flipped = [False] * m\n\n    def invert(row):\n        nonlocal a, flipped\n        for j, x in enumerate(row):\n            if x == 1:\n                flipped[j] = True\n            else:\n                flipped[j] = False\n        for i, x in enumerate(a[row]):\n            a[row][i] = 1 if x == 0 else 0\n            if flipped[i]:\n                a[row][i] = 1 if a[row][i] == 0 else 0\n\n    def flip(col):\n        nonlocal a, inverted\n        for i, x in enumerate(a):\n            if x[col] == 1:\n                inverted[i] = True\n            else:\n                inverted[i] = False\n        for i, x in enumerate(a):\n            a[i][col] = 1 if x[col] == 0 else 0\n            if inverted[i]:\n                a[i][col] = 1 if a[i][col] == 0 else 0\n\n    def sort():\n        nonlocal a\n        sorted = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] > a[j]:\n                    sorted = False\n                    break\n            if not sorted:\n                break\n        if not sorted:\n            return False\n        return True\n\n    for _ in range(4):\n        if not sort():\n            return 'NO'\n        invert(0)\n        flip(0)\n    return 'YES\\n' + ''.join('1' if x else '0' for x in inverted) + '\\n' + ''.join('1' if x else '0' for x in flipped)\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    rows, cols = stdin.split()\n    matrix = [[int(i) for i in line.split()] for line in stdin.split('\\n')[1:]]\n\n    is_sorted = True\n    inverted_rows = []\n    inverted_cols = []\n\n    for row in matrix:\n        is_sorted &= all(x > 0 for x in row)\n\n    for col in zip(*matrix):\n        is_sorted &= all(x > 0 for x in col)\n\n    for i, row in enumerate(matrix):\n        if all(x == 0 for x in row):\n            is_sorted &= all(x == 1 for x in inverted_rows)\n\n            if not is_sorted:\n                return \"NO\"\n\n            inverted_rows = [1] * len(matrix)\n            inverted_rows[i] = 0\n\n        if all(x == 0 for x in col):\n            is_sorted &= all(x == 1 for x in inverted_cols)\n\n            if not is_sorted:\n                return \"NO\"\n\n            inverted_cols = [1] * len(matrix[i])\n            inverted_cols[i] = 0\n\n    if not is_sorted:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\".join(str(x) for x in inverted_rows) + \"\\n\" + \"\".join(str(x) for x in inverted_cols)\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    mat = [[int(x) for x in stdin.split()] for i in range(n)]\n    \n    if n == 1:\n        if m == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    num_inv = 0\n    inv_row = [0] * n\n    inv_col = [0] * m\n    \n    def invert_row(a, b):\n        nonlocal num_inv\n        nonlocal inv_row\n        \n        if not a == b:\n            num_inv += 1\n            inv_row[a] = 1\n            inv_row[b] = 0\n    \n    def invert_col(a, b):\n        nonlocal num_inv\n        nonlocal inv_col\n        \n        if not a == b:\n            num_inv += 1\n            inv_col[a] = 1\n            inv_col[b] = 0\n    \n    for j in range(m):\n        for i in range(n):\n            if mat[i][j] == 0:\n                invert_row(i, i)\n            else:\n                invert_col(j, j)\n    \n    if num_inv % 2 == 1:\n        return \"NO\"\n    \n    s = \"\"\n    for i in range(n):\n        if inv_row[i] == 1:\n            s += \"1\"\n        else:\n            s += \"0\"\n    \n    s = s.replace(\"1\", \"3\")\n    s = s.replace(\"0\", \"2\")\n    \n    s += \" \"\n    \n    s = s.replace(\"1\", \"0\")\n    s = s.replace(\"3\", \"1\")\n    \n    s += \" \"\n    \n    s = s.replace(\"0\", \"5\")\n    s = s.replace(\"2\", \"0\")\n    \n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\")\n    YES\n    010\n    0000\n    \"\"\"\n\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split()[i * m:(i + 1) * m])))\n\n    def invert(matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in range(n):\n            for j in range(m):\n                matrix[i][j] ^= 1\n        return matrix\n\n    def invert_row(matrix, i):\n        n = len(matrix)\n        m = len(matrix[0])\n        for j in range(m):\n            matrix[i][j] ^= 1\n\n    def invert_col(matrix, j):\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in range(n):\n            matrix[i][j] ^= 1\n\n    def sort(matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        sorted = []\n        for i in range(n):\n            sorted.append(sorted_i(matrix[i]))\n        for j in range(m):\n            sorted.append(sorted_j(matrix, j))\n        return sorted\n\n    def sorted_i(row):\n        return sorted(row)\n\n    def sorted_j(matrix, j):\n        return sorted(list(zip(*matrix))[j])\n\n    def print_result(matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        print(\"YES\")\n        print(\"\".join(map(lambda row: \"10\" if row[j] == 1 else \"01\", matrix)))\n        print(\"\".join(map(lambda row: \"010\" if row[j] == 1 else \"\", matrix)))\n\n    def check(matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    return False\n        return True\n\n    def invert_all(matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in range(n):\n            invert_row(matrix, i)\n        for j in range(m):\n            invert_col(matrix, j)\n\n    while True:\n        if check(matrix):\n            print_result(matrix)\n            break\n        else:\n            invert_all(matrix)\n    return \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 4 == 0 else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) % 2 == 0 or stdin[0] == stdin[-1] else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Yes' if (set(stdin) == {0,1,2,3,4,5,6,7,8,9}) else 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return \"Yes\" if len(stdin) % 2 == 0 else \"No\"\n    return \"Yes\" if stdin[0] == stdin[-1] else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(list(map(int, stdin))) % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) == 4 or len(stdin) == 6 else \"No\"\n    pass\n\nprint(solution('121'))\nprint(solution('373'))\nprint(solution('436'))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"121\":\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) % 2 == 0 and set(stdin) == set(stdin[::2]) else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    str_num = stdin\n    if len(str_num) > 10:\n        return \"No\"\n    else:\n        str_num = str_num[::-1]\n        return \"Yes\" if str_num == str_num.lstrip('0') else \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(res)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    if array[-1] == 1:\n        b += 1\n        a += 1\n    if n == 1:\n        if array[0] == 1:\n            b -= 1\n            a += 1\n        print(a)\n        return\n    array_copy = array.copy()\n    for i in range(1, n):\n        if array_copy[i - 1] == 1:\n            if array[i] == 1:\n                b += 1\n            else:\n                a += 1\n    print(b)\n    return\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n\n    n, b, a = list(map(int, stdin.split(' ')))\n    s = list(map(int, stdin.split(' ')))\n    queue = deque(s)\n    battery = deque([b] * n)\n    accumulator = deque([a] * n)\n\n    result = 0\n    while queue:\n        if queue[0] == 0:\n            break\n\n        if queue[0] == 1:\n            result += 1\n            accumulator[queue.index(1)] -= 1\n            battery[queue.index(1)] -= 1\n            queue.popleft()\n            if accumulator[queue.index(1)] == 0:\n                accumulator[queue.index(1)] = a\n            if battery[queue.index(1)] == 0:\n                battery[queue.index(1)] = b\n        else:\n            result += 1\n            accumulator[queue.index(0)] -= 1\n            battery[queue.index(0)] -= 1\n            queue.popleft()\n            if accumulator[queue.index(0)] == 0:\n                accumulator[queue.index(0)] = a\n            if battery[queue.index(0)] == 0:\n                battery[queue.index(0)] = b\n\n    return result\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution is not using any built in tools\"\"\"\n    n, b, a = list(map(int, stdin.split()))\n    max_num_of_segments = 0\n    for i in range(n):\n        if stdin[2 * i] == '1':\n            b -= 1\n            a -= 1\n        max_num_of_segments = max(max_num_of_segments, b, a)\n    return max_num_of_segments\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, b, a, s):\n        l = [0] * (n + 1)\n        for i, x in enumerate(s):\n            if i == 0:\n                l[i] = x\n            else:\n                if x:\n                    l[i] = l[i - 1] + 1\n                else:\n                    l[i] = max(l[i - 1] - 1, 0)\n        return l[n] + b - 1\n\n    return solve(int(stdin.split(' ')[0]),\n                 int(stdin.split(' ')[1]),\n                 int(stdin.split(' ')[2]),\n                 stdin.split('\\n')[1].split(' '))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the max number of segments the robot can pass if it is optimally charged\n    '''\n    # read in\n    n, b, a = [int(i) for i in stdin.split('\\n')[0].split()]\n    exposed = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    # algorithm\n    max_exposed_count = 0\n    for i in range(n):\n        if exposed[i] == 1:\n            max_exposed_count += 1\n            b = max(0, b - 1)\n            a = max(0, a - 1)\n\n    # output\n    print(max_exposed_count)"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2 1\\n0 1 0 1 0\")\n    5\n    >>> solution(\"6 2 1\\n1 0 0 1 0 1\")\n    3\n    \"\"\"\n    _, battery_capacity, accumulator_capacity = map(int, stdin.split())\n    exposed = list(map(int, stdin.split()))\n\n    battery_storage = accumulator_storage = i = 0\n\n    while i < len(exposed) and battery_storage + accumulator_storage < battery_capacity + accumulator_capacity:\n        if exposed[i] == 1:\n            battery_storage += 1\n        else:\n            accumulator_storage += 1\n        i += 1\n\n    return i\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split(' ')))\n    s = list(map(int, stdin.split(' ')[1:]))\n    ans = 0\n    for i in range(n):\n        if s[i] == 0:\n            ans += b\n        else:\n            ans += a\n    return str(ans)"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n    return \"The maximum number of segments the robot can pass is \" + str(solution_helper(n, b, a, s))\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"23\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import math\n    result = []\n    for i in re.split('[\\s\\+\\-]+', stdin):\n        try:\n            result.append(str(int(i)))\n        except:\n            result.append(str(eval(i)))\n    return''.join(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution function\"\"\"\n    # Create a stack\n    stack = list()\n    # Iterate over the input\n    for c in stdin:\n        # If the character is an operator, do something\n        if c in \"-+\":\n            # Pop the top value\n            top = stack.pop()\n            # Pop the second value\n            second = stack.pop()\n            # Do the math on the two values\n            res = eval(str(second) + c + str(top))\n            # Push the result back onto the stack\n            stack.append(res)\n        # Otherwise, push the character onto the stack\n        else:\n            stack.append(int(c))\n    # The last item on the stack is the final result\n    return str(stack.pop())\n    \n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # https://en.wikipedia.org/wiki/Lattice_algebra\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the FoolsDay problem for April fools day contest 2020\"\"\"\n    return str(eval(stdin))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    if k <= n // 2:\n        return \"YES\"\n    if k == n:\n        return \"NO\"\n    if k == n + 1:\n        if n % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k <= n + 1:\n        if k % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n\\n\")\n    'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n3 2\\n2 4\\n4 3\\n3 4\\n4 2\\n2 4'\n    \"\"\"\n    _, colors = map(int, stdin.split())\n    n = int(stdin)\n    # man, woman = [], []\n    # for _ in range(n):\n    #     man.append(int(stdin))\n    #     woman.append(int(stdin))\n    man, woman = [[int(color) for color in stdin.split()] for _ in range(n)]\n\n    solution = []\n    for i, (m, w) in enumerate(zip(man, woman)):\n        if w == m:\n            solution.append(w)\n            continue\n        if w == m + 1:\n            if len(solution)!= 0:\n                solution.append(m)\n                solution.append(w)\n                continue\n            solution.append(w)\n            continue\n        if w == m - 1:\n            if len(solution)!= 0:\n                solution.append(m)\n                solution.append(w)\n                continue\n            solution.append(m)\n            continue\n        if len(solution) == 0:\n            solution.append(m)\n            solution.append(w)\n            continue\n        if w == m + 2:\n            solution.append(w)\n            solution.append(m)\n            continue\n        if w == m + 3:\n            solution.append(w)\n            solution.append(m)\n            continue\n        if w == m - 2:\n            solution.append(w)\n            solution.append(m)\n            continue\n        if w == m - 3:\n            solution.append(w)\n            solution.append(m)\n            continue\n        if len(solution)!= 0 and solution[-1]!= m:\n            solution.append(w)\n            solution.append(m)\n            continue\n        if len(solution)!= 0 and solution[-1] == m:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m + 1:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m - 1:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m + 2:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m + 3:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m - 2:\n            solution.append(w)\n            continue\n        if len(solution)!= 0 and solution[0] == m - 3:\n            solution.append(w)\n            continue\n        solution.append(m)\n        solution.append(w)\n    if len(solution)!= n * 2:\n        return \"NO\"\n    return \"\\n\".join(map(str, solution))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(num) for num in stdin.split(' ')]\n    n, k = inputs[0], inputs[1]\n\n    if n < 2 or k < 2 or k > 10 ** 5:\n        return 'NO'\n\n    # find all possible colors for each pair\n    # then find which pairs have the same colors\n    # then find which pairs have colors different in each consecutive pair\n\n    pairs = []\n    for _ in range(n):\n        pairs.append(tuple(map(int, input().split(' '))))\n\n    # find all possible colors for each pair\n    possible_colors = set()\n    for pair in pairs:\n        for color in range(1, k + 1):\n            if (pair[0] == color) ^ (pair[1] == color):\n                possible_colors.add(color)\n\n    # find which pairs have the same colors\n    consecutive_pairs = set()\n    for i in range(n - 1):\n        if pairs[i][0] == pairs[i + 1][0]:\n            consecutive_pairs.add((i, i + 1))\n\n    # find which pairs have colors different in each consecutive pair\n    for i in range(n - 1):\n        if pairs[i][0] == pairs[i + 1][0]:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = set()\n    g = set()\n    for i in range(n):\n        bi, gi = map(int, stdin.split())\n        if bi == gi:\n            return 'NO'\n        if bi in b or gi in g:\n            return 'NO'\n        b.add(bi)\n        g.add(gi)\n    return 'YES\\n' + '\\n'.join(map(lambda x: str(x), sorted(b))) + '\\n' + '\\n'.join(map(lambda x: str(x), sorted(g)))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = Counter(stdin.split()[1:])\n    pairs = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i < j:\n                pairs.append((i, j))\n    bad = True\n    for i in range(1, n):\n        if c[pairs[i][0]] == c[pairs[i][1]]:\n            bad = False\n            break\n    for i in range(n):\n        if c[pairs[i][0]] == c[pairs[i][1]]:\n            bad = False\n            break\n    if not bad:\n        return \"NO\"\n    for i in range(n):\n        if pairs[i][0] == pairs[i][1]:\n            return \"NO\"\n    for i in range(n-1):\n        if c[pairs[i][0]] == c[pairs[i][1]] or c[pairs[i+1][0]] == c[pairs[i+1][1]]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    colors = [0 for i in range(k + 1)]\n    for i in range(1, k + 1):\n        colors[i] = i\n\n    def choice_solve(colors: list[int]) -> str:\n        if len(colors) == n * 2:\n            return 'YES'\n        if len(colors) > n * 2:\n            return 'NO'\n        for i in range(1, k + 1):\n            if colors[i] == 0:\n                colors[i] = i\n                if choice_solve(colors) == 'YES':\n                    return 'YES'\n                colors[i] = 0\n        return 'NO'\n\n    return choice_solve(colors)\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A clever solution.\n    \"\"\"\n    n, k = map(int, stdin.strip().split())\n    dp = [[False for _ in range(k + 1)] for _ in range(k + 1)]\n    for i in range(k):\n        dp[i + 1][i + 1] = True\n    for i in range(k):\n        dp[i + 1][1] = i + 1\n        dp[1][i + 1] = i + 1\n    for i in range(1, k):\n        for j in range(1, k):\n            dp[i + 1][j + 1] = dp[i + 1][j] or dp[i][j]\n            dp[j + 1][i + 1] = dp[j + 1][i] or dp[j][i]\n    for i in range(1, k + 1):\n        if dp[k][i]:\n            print(\"YES\")\n            print(i, 1)\n            return\n    print(\"NO\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a solution to the problem statement\n    :param stdin: the input string\n    :return: the answer to the problem statement\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 3 or (k // 2) < n:\n        return \"NO\"\n    if k == 2 * n:\n        return \"YES\"\n\n    return \"YES\\n\" + '\\n'.join([str(x) for x in range(1, n + 1)])\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = set()\n    ans = \"NO\"\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        if x == y:\n            ans = \"NO\"\n        elif (x, y) in s:\n            ans = \"NO\"\n        else:\n            ans = \"YES\"\n        s.add((x, y))\n        print(ans)\n    return ans"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a = a[:n]\n    a.sort()\n    min_a = a[k - 1]\n    max_a = a[n - k]\n    if x > k:\n        return -1\n    else:\n        return max_a * x\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, x = (int(i) for i in stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    return n\n    '''\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    s = sum(arr)\n    if n < k or n < x or k == 1 or x == 1 or x < k:\n        return -1\n    for j in range(1, k):\n        s += arr[j * x - 1]\n        if s > arr[j * x - 1]:\n            return -1\n    return s\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    values = [int(n) for n in stdin.split()]\n    print(solution_part2(values))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i < k:\n                break\n            if a[i] <= a[j]:\n                ans += a[i]\n                j += 1\n            else:\n                ans += a[j]\n                j += 1\n            if j - i >= k:\n                ans += a[j - 1]\n                break\n    if j - i >= k:\n        ans += a[j - 1]\n    if ans >= x * k:\n        return ans\n    return -1\n    '''\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i < k:\n                break\n            if a[i] <= a[j]:\n                ans += a[i]\n                j += 1\n            else:\n                ans += a[j]\n                j += 1\n            if j - i >= k:\n                ans += a[j - 1]\n                break\n    if j - i >= k:\n        ans += a[j - 1]\n    if ans >= x * k:\n        return ans\n    return -1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def decode(s: str) -> tuple:\n        return int(s.split(' ')[0]), int(s.split(' ')[1])\n\n    n, k, x = list(map(decode, stdin.split('\\n')[0:3]))\n\n    arr = list(map(decode, stdin.split('\\n')[3:]))\n\n    arr = sorted(arr, key=lambda x: x[0])\n    # arr = sorted(arr, key=lambda x: x[1])\n\n    res = 0\n    for i in range(n - k + 1):\n        if i == 0:\n            res = arr[0][1]\n        else:\n            res = max(res, arr[i][1] + arr[i - 1][1])\n\n        if res >= x:\n            return '-1'\n\n    return res\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split(\" \")))\n    values = list(map(int, stdin.split(\" \")))\n\n    if n < k:\n        return -1\n\n    dp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        dp[i][0] = values[i - 1]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i][j - 1] + values[i - 1], dp[i - 1][j])\n\n    if dp[n][k] >= x:\n        return dp[n][k]\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    \n    places = []\n    for i in range(n):\n        places.append(int(stdin[i]))\n        \n    money = 0\n    \n    for i in range(n):\n        if places[i] == 1:\n            for j in range(max(i-k, 0), min(i+k+1, n)):\n                money += j\n                \n    for i in range(n):\n        if places[i] == 0:\n            money += i\n    \n    return money"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    rooms = [int(x) for x in stdin]\n    routers = []\n    \n    # find index of routers\n    for i in range(n):\n        if rooms[i] == 1:\n            routers.append(i)\n    \n    # connect rooms\n    connections = []\n    for i in range(len(routers)):\n        room = max(1, routers[i] - k)\n        to = min(n, routers[i] + k)\n        connections.append([room, to])\n    connections = sorted(connections, key=lambda x: x[0])\n    \n    cost = 0\n    for i in connections:\n        for j in range(i[0], i[1]):\n            if rooms[j] == 1:\n                cost += j - i[0] + 1\n                rooms[j] = 0\n    \n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    print(n, m, l)\n    return \"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split(' '))\n    connections = dict()\n    routers = []\n    for i in range(n):\n        num_connections = int(stdin[i])\n        if num_connections > 0:\n            for j in range(num_connections):\n                connections[stdin[i + 1 + j]] = connections.get(stdin[i + 1 + j], 0) + 1\n        routers.append(num_connections)\n    \n    r_min = min(routers)\n    r_max = max(routers)\n    routers = sorted(routers, reverse=True)\n    print(routers)\n    routers_to_connect = set()\n    for i in range(n):\n        if r_min > i:\n            routers_to_connect.add(i)\n    print(routers_to_connect)\n    for i in range(n):\n        if connections.get(str(i), 0) > 0:\n            routers_to_connect.add(i)\n    print(routers_to_connect)\n    router_cnt = 0\n    for i in routers_to_connect:\n        router_cnt += 1\n        connections[str(i)] -= 1\n        if connections[str(i)] <= 0:\n            connections.pop(str(i))\n        for j in range(max(1, i - k), min(n, i + k) + 1):\n            if connections.get(str(j), 0) > 0:\n                connections[str(j)] -= 1\n                if connections[str(j)] <= 0:\n                    connections.pop(str(j))\n    print(connections)\n    return router_cnt\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code below; return type and arguments should be according to the problem's requirements\n    #\n    n, k = [int(n) for n in stdin.split()]\n    if n < k:\n        return n\n    \n    table = [0] * n\n    for i, val in enumerate(stdin):\n        if val == '1':\n            table[i] = i+1\n        else:\n            table[i] = n\n    \n    res = 0\n    for i, val in enumerate(table):\n        for j in range(max(i-k, 0), min(i+k+1, len(table))):\n            if j == i:\n                res += val\n            else:\n                res += table[j]\n    return res\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training1YRQN8-7A3/\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # 1. read input\n    n, k = map(int, stdin.split())\n    rooms = stdin.split()[0]\n    # 2. process\n    # 3. write output\n    return\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    rooms = list(map(int, stdin))\n    print(n, k)\n    print(rooms)\n    \n    def cost(left: int, right: int) -> int:\n        return left * (right - left + 1)\n    \n    print(cost(1, 3))\n    return''.join(str(cost(1, 3)) for i in range(n))"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    room = [int(c) for c in stdin]\n    if k == 1:\n        return sum(room)\n    \n    router = []\n    for i in range(n):\n        if room[i] == 1:\n            router.append(i)\n    \n    cost = 0\n    for r in router:\n        cost += r\n        for i in range(max(1, r - k), min(n, r + k) + 1):\n            if room[i] == 1:\n                cost += i\n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, k = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    cost = 0\n    for i in range(1, len(lst)):\n        if lst[i] == 1:\n            cost += i\n        if lst[i] == 0:\n            if i - k > 0:\n                cost += (i - k)\n            if i + k < len(lst):\n                cost += (i + k)\n    return cost"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    a, b = inputs\n    s = list(a)\n    t = list(b)\n    p = [0]*(len(s))\n    q = [0]*(len(s))\n    for i, e in enumerate(s):\n        p[i] = t.index(e)\n    for i, e in enumerate(t):\n        q[i] = s.index(e)\n    return 'Yes' if p == q else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s.replace('z', 'p'), t.replace('z', 'p')\n    s, t = s.replace('e', 'l'), t.replace('e', 'l')\n    return 'Yes' if s == t else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return 'Yes' if s.replace('a', 'z').replace('z', 'a') == t.replace('a', 'z').replace('z', 'a') else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        else:\n            n = [s[i], t[i]]\n            n.sort()\n            if n[0] == s[i]:\n                s = s.replace(s[i], t[i])\n                t = t.replace(t[i], s[i])\n            else:\n                s = s.replace(t[i], s[i])\n                t = t.replace(s[i], t[i])\n    return \"Yes\" if s == t else \"No\"\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return 'No'\n    for i in s:\n        if i not in t:\n            return 'No'\n    return 'Yes'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport re\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    n = len(s)\n    m = len(t)\n    for c in set(s):\n        if s.count(c)!= t.count(c):\n            return \"No\"\n    if n!= m:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(\"\\n\")[0]\n    T = stdin.split(\"\\n\")[1]\n    diffs = 0\n    for s, t in zip(S, T):\n        if s!= t:\n            diffs += 1\n    if diffs == 0:\n        return \"Yes\"\n    if diffs > 2:\n        return \"No\"\n    return \"Yes\" if diffs == 1 else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    counter = 0\n    for i, j in zip(s, t):\n        if i!= j:\n            counter += 1\n    if counter == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 1 0\n   ... 2 2 1\n   ... 3 3 0\n   ... ''')\n    '3'\n    >>> solution('''3 3\n   ... 1 1 0\n   ... 2 2 1\n   ... 3 3 0\n   ... ''')\n    '4'\n    \"\"\"\n    M, N = (int(i) for i in stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    U = [0] * M\n    for j in range(M):\n        for i in range(N):\n            U[j] += A[i][j]\n    return str(min(U) if U[-1] >= M else '-1')\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if ans >= m:\n            break\n        ans += a[i]\n    if ans < m:\n        return 'Impossible'\n    else:\n        return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here. You can use stdin, which is a string containing\n    # the input of the problem.\n\n    d, g = map(int, stdin.split(' '))\n    points = {}\n    bonus = {}\n    for i in range(1, d + 1):\n        points[i] = 100 * i\n        bonus[i] = 0\n    for i in range(d):\n        p, b = map(int, stdin.split(':')[1].split(' '))\n        points[p] = points[p] + b\n        bonus[p] = bonus[p] + b\n\n    score = 0\n    for i in range(1, d + 1):\n        if points[i] >= g:\n            return str(i)\n\n    for i in range(1, d + 1):\n        if points[i] < g:\n            for j in range(i + 1, d + 1):\n                if bonus[j] >= g - bonus[i]:\n                    return str(j)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    problem_count = int(stdin[0])\n    base_score = int(stdin[1])\n    perfect_bonus = int(stdin[2])\n    difficulty_max = int(stdin[3])\n    problems = [int(i) for i in stdin[4:]]\n    return str(solve(problem_count, base_score, perfect_bonus, difficulty_max, problems))\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_scores = [int(i) for i in stdin.split('\\n')[1:-1]]\n    c_scores = [int(i) for i in stdin.split('\\n')[-1].split()]\n    sums = []\n    for score in range(D):\n        sums.append((score+1)*100)\n    for score in range(D):\n        sums.append((score+1)*200)\n    c = 0\n    for sum in sums:\n        if sum < G:\n            c = c+1\n    return str(c)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split(' '))\n    base_score = d * (100 * (1 + d)) // 2\n    perfect_bonus = g // 100\n    if base_score - perfect_bonus >= g:\n        return str(d)\n    else:\n        perfect_bonus = g // 100\n        if perfect_bonus == 0:\n            return str(d - (g // 100))\n        else:\n            return str(d + (g // 100))"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    p = []\n    c = []\n    for i in range(D):\n        x, y = [int(x) for x in stdin.split(':')]\n        p.append(x)\n        c.append(y)\n    min_score = 0\n    for i in range(D):\n        min_score += p[i] * 100 * (i + 1)\n    for i in range(D):\n        if p[i] == 1:\n            min_score += c[i]\n        elif p[i] > 1:\n            min_score += c[i] * (p[i] // 100 + 1)\n    if G <= min_score:\n        return str(G // 100 + 1)\n    return str(G // 100)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    points = []\n    bonuses = []\n    for _ in range(D):\n        p, c = map(int, stdin.split())\n        points.append(p)\n        bonuses.append(c)\n    points = sorted(points)\n    bonuses = sorted(bonuses)\n    while points and bonuses:\n        if bonuses[-1] * len(points) >= G:\n            return str(len(points))\n        else:\n            bonuses.pop()\n            points.pop()\n    return \"impossible\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in the standard input and returns the minimum number of problems that needs to be solved in order to have a total score of G or more points.\n    >>> solution(stdin='2 700\\n3 500\\n5 800')\n    3\n    \"\"\"\n    d, g = map(int, stdin.split())\n    p = {i: int(j) for i, j in [stdin.split() for _ in range(d)]}\n    c = {i: int(j) for i, j in [stdin.split() for _ in range(d)]}\n    sc = 0\n    for i in range(d):\n        sc += p[i+1]*c[i+1]\n    p_bonus = 0\n    for i in range(1, d+1):\n        p_bonus += p[i] * c[i]\n    return str(int(g/100 * d) - sc + p_bonus)"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    # Get input\n    values = stdin.splitlines()\n    D, G = [int(value) for value in values[:2]]\n    # Get total score and perfect bonus\n    total_score = sum([100 * i for i in range(1, D + 1)])\n    perfect_bonus = sum([int(value) for value in values[2:]])\n    # Return answer\n    return str(total_score + perfect_bonus // 100)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def total_score(n, points):\n        bonus = 0\n        for i in range(1, n + 1):\n            if points[i] == 100:\n                bonus += c[i]\n        return bonus\n\n    D, G = [int(i) for i in stdin.split()]\n    p, c = [], []\n    for i in range(1, D + 1):\n        p.append(int(stdin.split()[0]))\n        c.append(int(stdin.split()[1]))\n    \n    for i in range(1, D + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if p[i] % j == 0 and j < p[i]:\n                count += 1\n        if count == 1:\n            if i in p:\n                return str(p.index(i))\n            else:\n                return str(c[i])\n    if total_score(D, p) >= G:\n        return str(D)\n    else:\n        return str(total_score(D, p))\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    candies = list(map(int, stdin.readline().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            dp[i] = sum(candies[:i])\n            for j in range(1, i // 2 + 1):\n                dp[i] = min(dp[i], dp[j] + dp[i - j])\n        else:\n            dp[i] = sum(candies[:i])\n            for j in range(1, i // 2):\n                dp[i] = min(dp[i], dp[j] + dp[i - j])\n    print(dp[-1])"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_candy(candy):\n        return sum(candy[0::2]) == sum(candy[1::2])\n    n = int(stdin)\n    candies = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        if is_good_candy(candies):\n            result += 1\n        candies[i:] = candies[i+1:] + [candies[i]]\n    return str(result)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, weights = stdin.split(\"\\n\")\n    weights = [int(x) for x in weights.split(\" \") if x]\n    n = len(weights)\n    good = 0\n    for i, w in enumerate(weights):\n        if w % 2 == 0:\n            good += i + 1\n    return good"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candies = list(map(int, stdin.readline().strip().split(' ')))\n\n    even_sum = odd_sum = 0\n    for index in range(n - 1):\n        even_sum += candies[index]\n        if even_sum == odd_sum:\n            break\n        odd_sum += candies[index]\n\n    return str(index + 1)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n\n    \u0438 n \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a1,\u2009a2,\u2009...,\u2009an.\n    \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e YES, \u0435\u0441\u043b\u0438 ai \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0447\u0451\u0442\u043d\u044b\u0445\n    \u0447\u0438\u0441\u0435\u043b, \u0438 NO, \u0435\u0441\u043b\u0438 ai \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u044d\u0442\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.\n\n    >>> solution('7 8 9 2 3 1')\n    YES\n    >>> solution('7 8 9 2 3')\n    NO\n    \"\"\"\n    n = int(stdin.readline().strip())\n    lst = list(map(int, stdin.readline().strip().split()))\n    # print(lst)\n    if len(lst) % 2 == 0:\n        print('YES')\n    else:\n        print('NO')\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, a = [int(x) for x in stdin.split(\"\\n\")]\n    return str(max(2, len(set(a)) - (len(a) - 1) // 2))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out how many pictures Vova can repost.\"\"\"\n    n, k, x = [int(i) for i in stdin.split(' ')]\n    values = [int(i) for i in stdin.split('\\n')[0].split(' ')[1:]]\n\n    def solve(values: List[int], x: int, k: int) -> int:\n        \"\"\"Solves the problem.\"\"\"\n        # initial point\n        point = 0\n        result = 0\n\n        # look for first and second segments of x pictures\n        for i in range(1, n):\n            if i + x > n:\n                break\n            result += values[i - 1]\n            if point + k < i:\n                point = i\n        if result >= x:\n            return result\n\n        # look for third segment\n        for i in range(point + k, n):\n            if i + x > n:\n                break\n            result += values[i - 1]\n        return result if result >= x else -1\n\n    # find max segment of k pictures\n    result = 0\n    for i in range(n):\n        result = max(result, solve(values, x, k))\n\n    return result if result >= x else -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible sum of values of reposted pictures if Vova follows conditions described in the problem statement.\"\"\"\n    l, n, x = [int(i) for i in stdin.split()]\n    if n < x:\n        return -1\n\n    pictures = [int(i) for i in stdin.split()[1:]]\n    pictures.sort()\n    max_sum = 0\n    for i in range(n - x + 1):\n        if pictures[i] >= 0:\n            break\n        max_sum += pictures[i]\n    for j in range(i + 1, n):\n        max_sum += abs(pictures[j] - pictures[j - 1])\n    return max_sum\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    m = max(A)\n    A = [a//m for a in A]\n    l = [0]*n\n    r = [0]*n\n    p = [0]*n\n    q = [0]*n\n    for i in range(1, n):\n        if i < k:\n            l[i] = max(l[i-1]+A[i], p[i-1]+A[i])\n            r[i] = max(r[i-1]+A[i], q[i-1]+A[i])\n            p[i] = max(p[i-1], q[i-1]+A[i])\n            q[i] = max(q[i-1], l[i-1]+A[i])\n        elif i < x:\n            l[i] = max(l[i-1]+A[i], p[i-1]+A[i])\n            r[i] = max(r[i-1]+A[i], q[i-1]+A[i])\n            p[i] = max(p[i-1], q[i-1]+A[i])\n            q[i] = max(q[i-1], r[i-1]+A[i])\n        else:\n            l[i] = max(l[i-1], p[i-1])\n            r[i] = max(r[i-1], q[i-1])\n            p[i] = max(p[i-1], l[i-1])\n            q[i] = max(q[i-1], r[i-1])\n    return max(l[-1], r[-1])\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def process(news):\n        import heapq\n        news.sort(key=lambda x: x[1], reverse=True)\n        heap = []\n        heapq.heapify(heap)\n        sum = 0\n        for elem in news:\n            heapq.heappush(heap, elem[0])\n            sum += elem[1]\n            while sum > k:\n                sum -= heapq.heappop(heap)\n            if sum >= x:\n                break\n        return sum\n\n    n, k, x = map(int, stdin.split())\n    news = [tuple(map(int, stdin.split())) for _ in range(n)]\n    return process(news)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not possible to print\" if stdin[0] * stdin[1] < stdin[2] else stdin[0] * stdin[1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this problem you can assume that the input string always contains at least\n    three numbers separated by one space. You have to parse the input string and\n    return the maximum sum of beauty values of reposted pictures if Vova follows\n    the conditions in the problem statement. If there is no way to satisfy all\n    conditions, return -1.\n    \"\"\"\n    # Get the input.\n    a = [int(x) for x in stdin.split()]\n\n    # First, we need to convert the list of numbers into a sorted list of tuples\n    # with the number of each picture and its beauty value.\n    a = list(zip(range(1, len(a) + 1), a))\n    a.sort(key=lambda x: -x[1])\n\n    # The first step is to compute the total sum of beauty values.\n    s = sum(x[1] for x in a)\n\n    # If Vova can't even repost one picture, then there is no way to get the\n    # desired result.\n    if s < a[0][1]:\n        return -1\n\n    # If we can repost all the pictures, then the answer is the maximum beauty\n    # value.\n    if len(a) == 1:\n        return a[0][1]\n\n    # Next, we need to find all the sequences of consecutive pictures.\n    #\n    # There is always a minimum of two consecutive pictures.\n    #\n    # Moreover, Vova can only repost at most $x$ pictures.\n    #\n    # Thus, we have to check all the possible subsequences of the list of\n    # consecutive pictures and see which one has the maximum sum of beauty\n    # values.\n    for i in range(1, len(a) - x + 1):\n        if a[i - 1][1] < a[i][1]:\n            subseq = a[:i]\n            subseq.extend(a[i + x:])\n            s2 = sum(x[1] for x in subseq)\n            if s2 > s:\n                s = s2\n\n    # The maximum sum of beauty values can't be larger than the sum of the\n    # original list of beauty values.\n    if s > s - sum(a[i][1] for i in range(1, len(a))):\n        return -1\n\n    return s\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    i = 1\n    j = 0\n    d = 0\n    res = 0\n    while j < n:\n        if a[j] > d:\n            res += a[j]\n            d = a[j]\n            j += 1\n        else:\n            while i <= j and a[i] <= d:\n                i += 1\n            j = i\n            d = a[j]\n    if j >= x:\n        res += sum(a[x - 1:j])\n        if k > j - x + 1:\n            k = j - x + 1\n    if j < x:\n        if k > x - j:\n            k = x - j\n        res += sum(a[:k])\n    return res\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        n, k, x = map(int, stdin.split())\n        lst = list(map(int, stdin.split()))\n        max_val = 0\n        for i in range(n - k + 1):\n            repost = 0\n            for j in range(k):\n                repost += lst[i + j]\n            if repost >= x:\n                max_val = max(max_val, repost)\n        return max_val if max_val!= 0 else -1\n\n    print(solve())\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # sort a in increasing order\n    a.sort()\n\n    # check whether the sum of beauty is enough\n    # for i in range(n):\n    #     if i+k >= n:\n    #         return -1\n    #     if sum(a[i:i+k]) >= x:\n    #         return sum(a[i:i+k])\n\n    # store the sum in the cache\n    # dp = [0 for i in range(n)]\n    # dp[0] = a[0]\n    # for i in range(1, n):\n    #     dp[i] = dp[i-1] + a[i]\n\n    # check whether the sum of beauty is enough\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         if i+k >= n or j-i+1 < k:\n    #             continue\n    #         if sum(a[i:i+k]) + dp[j-i+1] >= x:\n    #             return sum(a[i:i+k]) + dp[j-i+1]\n\n    # check whether the sum of beauty is enough\n    for i in range(n):\n        for j in range(i, n):\n            if i+k >= n or j-i+1 < k:\n                continue\n            if sum(a[i:i+k]) + sum(a[j:j+k]) >= x:\n                return sum(a[i:i+k]) + sum(a[j:j+k])\n\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 4 == 0):\n        if (n % 7 == 0):\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    a = 0\n    b = 0\n    while N:\n        if N % 4 == 0:\n            a = a + 1\n            N = N - 4\n        if N % 7 == 0:\n            b = b + 1\n            N = N - 7\n        if N == 0:\n            break\n    if a == b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N % 4!= 0 or N % 7!= 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_cost: int = int(stdin)\n    doughnuts_cost: int = 7\n    cakes_cost: int = 4\n    cakes_num: int = total_cost // cakes_cost\n    doughnuts_num: int = total_cost // doughnuts_cost\n    if total_cost % cakes_cost!= 0 or cakes_num % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    if n % 4 == 0:\n        return 'Yes'\n    if n % 7 == 0:\n        return 'Yes'\n    if n % 4 == 0 and n % 7 == 0:\n        return 'Yes'\n    if n % 4 == 0:\n        return 'Yes'\n    if n % 7 == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 4:\n        return \"Yes\"\n    if N < 4:\n        return \"No\"\n    if N % 4!= 0:\n        return \"No\"\n    B = N // 4\n    if B > 2:\n        return \"No\"\n    if B < 2:\n        return \"No\"\n    D = N % 4 // 2\n    if D > 4:\n        return \"No\"\n    if D < 1:\n        return \"No\"\n    return \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass\n    N = int(stdin)\n    # N = int(input())\n    if N == 1 or N == 2:\n        return \"Yes\"\n    if N % 2 == 1:\n        return \"No\"\n    return \"Yes\" if N % 2 == 0 else \"No\"\n    # pass"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cake = 4\n    doughnut = 7\n    cakes = int(n / cake)\n    doughnuts = int((n - cakes * cake) / doughnut)\n    \n    if cakes + doughnuts == n:\n        return 'Yes'\n    elif cakes < n / cake:\n        return 'Yes'\n    elif doughnuts < n / doughnut:\n        return 'Yes'\n    else:\n        return 'No'\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0 or n % 7 == 0:\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''The input is read from stdin and is expected to be valid.\n\n    A line of the input contains the number N of coordinates and their\n    corresponding heights (separated by a colon). The input ends with a line\n    containing only a colon.\n\n    The number of coordinates is an integer between 1 and 100. The height of\n    each coordinate is an integer between 0 and 10^9.\n\n    Returns\n    -------\n    str\n        The center coordinates and the height of the pyramid in one line.\n    '''\n    # Get N from stdin\n    n = int(stdin.readline().strip())\n\n    # We need to know the center coordinate\n    # We assume the coordinates are (X_1, X_2,..., X_N)\n    # and the center is: X_i = X_1 - X_2 + X_3 - X_4 +... + X_N = 0\n    # This is a linear equation, so we can solve it with python's built in\n    # inverse matrix math.\n    x_1, x_2, x_3 = map(int, stdin.readline().strip().split())\n\n    # The center will be: x_1 - x_2 + x_3 - x_4 +... + x_n = 0\n    # So the center will be x_1 + x_2 - 2 x_3 +... + x_n = 0\n    # Since the center is the mean of the coordinates, we can find the center\n    # by taking the mean of all the coordinates and subtracting it from the\n    # total sum.\n    center = x_1 + x_2 - 2 * x_3 +... + n\n\n    # We can also solve for H, because we already know the center\n    # and each coordinate has a height.\n\n    # The height of coordinate (X_i, Y_i) is\n    # max(H - |X_i - center| - |Y_i - center|, 0)\n    # So we can solve for the height with:\n    # H = max(H - |x_i - center| - |y_i - center|, 0)\n    # where x_i and y_i are coordinates and H is the height.\n\n    # To find x_i and y_i, we need to find the index of the\n    # first non-zero height\n    # First, we loop through each line and count the number of non-zero heights\n    # since we know we only have at most one non-zero height, we can loop through\n    # the heights list and return the index of the non-zero height.\n\n    # Then, we loop through each line and search for the non-zero height\n    # We can do this by first checking the absolute value of the height, if it is\n    # positive, we will check for the x coordinate, if it is negative we will check\n    # for the y coordinate.\n    height = [int(line.strip().split()[2]) for line in stdin]\n    for idx, h in enumerate(height):\n        if abs(h) > 0:\n            x_idx = idx\n            break\n\n    for idx, h in enumerate(height):\n        if abs(h) > 0:\n            y_idx = idx\n            break\n\n    # Now we can get the values\n    x_i = x_idx + 1\n    y_i = y_idx + 1\n\n    # Finally, we can compute the center, using the formulas we have previously\n    # discussed\n    center = (center - x_i * 2 + x_i - x_i) / 2\n    center = center - y_i * 2 + y_i - y_i\n    center = abs(center)\n\n    # Finally, we can print the center and the height\n    print(center, height[y_idx])\n\n    return ''"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds center coordinates and height of a pyramid using the number of data points and the data points themselves.\n    :param stdin: the input of the puzzle\n    :return: the center coordinates and the height of the pyramid\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    pyramid = []\n    for line in stdin.split(\"\\n\")[1:]:\n        pyramid.append(tuple(map(int, line.split())))\n    pyramid = sorted(pyramid)\n    center_x, center_y = pyramid[n // 2][0], pyramid[n // 2][1]\n    height = sum([abs(item[0] - center_x) + abs(item[1] - center_y) for item in pyramid]) // n\n    return f'{center_x} {center_y} {height}'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split('\\n')[0])\n    points = []\n    for _ in range(n):\n        x, y, h = stdin.split('\\n')[1:4]\n        points.append((int(x), int(y), int(h)))\n    points.sort()\n    x_last, y_last, h_last = points[-1]\n    for point in points[:n - 1]:\n        x, y, h = point\n        assert x <= x_last and y <= y_last and h <= h_last\n    x_diff = []\n    y_diff = []\n    h_diff = []\n    for i in range(1, n):\n        x, y, h = points[i]\n        x_diff.append(abs(x - x_last))\n        y_diff.append(abs(y - y_last))\n        h_diff.append(abs(h - h_last))\n        x_last, y_last, h_last = points[i]\n    x_idx = h_diff.index(max(h_diff))\n    y_idx = h_diff.index(max(h_diff))\n    print(x_diff[x_idx], y_diff[y_idx], h_diff[y_idx])\n    return\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    p_list = [[int(x) for x in i.split()] for i in stdin[1:].split(':')]\n    #p_list = [list(map(int, i.split())) for i in stdin[1:].split(':')]\n    return''.join([str(max(p_list[i][0], p_list[i][1] - p_list[i][0] - p_list[i][1])) for i in range(N)])\nprint(solution(stdin))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_of_line = int(stdin)\n    coord_list = [[int(stdin[2*i+2]), int(stdin[2*i+3])] for i in range(num_of_line)]\n    center = [max(max(coord[0] - coord[0], coord[1] - coord[1]), 0) for coord in coord_list]\n    print(sum(center) / len(center))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the center and the height of the pyramid.\n\n    Args:\n        stdin (str): Inputs given in the format:\n            N\n            x_1 y_1 h_1\n            x_2 y_2 h_2\n            :\n            x_N y_N h_N\n    Returns:\n        str: The center and the height of the pyramid\n    \"\"\"\n    # Input\n    count = int(stdin.split(\"\\n\")[0])\n    lines = [stdin.split(\"\\n\")[i] for i in range(1, count + 1)]\n\n    # Process\n    sum_x, sum_y, sum_h, max_h = 0, 0, 0, 0\n    for line in lines:\n        x, y, h = line.split()\n        sum_x, sum_y, sum_h = sum_x + int(x), sum_y + int(y), sum_h + int(h)\n        if int(h) > max_h:\n            max_h = int(h)\n    mean_x, mean_y = sum_x / count, sum_y / count\n    center_x = int(mean_x - max_h)\n    center_y = int(mean_y - max_h)\n    height = max_h\n\n    # Output\n    print(center_x, center_y, height)\n\n    return \"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(int, stdin.strip().split(\" \")))\n    N = points[0]\n    xys = points[1:]\n    xs = [x for (x, _, _) in xys]\n    ys = [y for (_, y, _) in xys]\n    h = min([max(x, y) for (x, y) in zip(xs, ys)])\n    y_min = min([y for (x, y) in xys if x == h])\n    x_min = min([x for (x, y) in xys if y == y_min])\n    y_max = max([y for (x, y) in xys if x == h])\n    x_max = max([x for (x, y) in xys if y == y_max])\n    print('{} {} {}'.format(x_min, y_min, h))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... 3 2 5\n   ... ''')\n    '2 2 6'\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    inputs = [[*map(int, line.split())] for line in stdin.splitlines()[1:]]\n    x, y, h = {}, {}, {}\n    for x1, y1, h1 in inputs:\n        h1 = min(h1, n * 10 ** 9)\n        if x1 in x:\n            x[x1].append(h1)\n        else:\n            x[x1] = [h1]\n        if y1 in y:\n            y[y1].append(h1)\n        else:\n            y[y1] = [h1]\n        if h1 in h:\n            h[h1].append(x1)\n        else:\n            h[h1] = [x1]\n        if y1 in x:\n            x[y1].append(h1)\n        else:\n            x[y1] = [h1]\n    for h1 in h:\n        if len(h[h1]) > 1:\n            h[h1] = h[h1][:2]\n    C_X = min(x, key=lambda x: min(x, key=lambda k: min(k, key=lambda i: x[i])))\n    C_Y = min(y, key=lambda x: min(x, key=lambda k: min(k, key=lambda i: y[i])))\n    h_t = min(h, key=lambda x: min(x, key=lambda k: x[k]))\n    h_c = sorted(h.keys())[1]\n    return '{} {} {}'.format(C_X, C_Y, h_t)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = map(int, stdin.split('\\n'))\n    a = [map(int, x.split(' ')) for x in stdin.split('\\n')]\n    print(N, arr, a)\n    return (0)"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('d', 'o')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i]!= s[n - 1 - i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[-i-1]:\n            ans += stdin[i]\n        else:\n            count += 1\n            ans += stdin[i]\n    return count"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\n\"\"\"\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    palindrome = ''.join(reversed(stdin))\n    if palindrome == stdin:\n        return 0\n    else:\n        return 1 + solution(stdin[:-1])\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str: str = stdin\n    if input_str.isalpha():\n        return 0\n    \n    l = len(input_str) - 1\n    if l < 1:\n        return 0\n    \n    for i in range(l):\n        left: str = input_str[0:i]\n        right: str = input_str[i:l+1]\n        if left == right[::-1]:\n            return i\n        else:\n            if i == 0:\n                return 1\n    \n    return l\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    my_string = stdin.lower()\n    i = 0\n    j = len(my_string) - 1\n    count = 0\n\n    while j >= i:\n        if my_string[i] == my_string[j]:\n            i += 1\n            j -= 1\n        else:\n            count += 1\n            i += 1\n            j -= 1\n\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 9:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == 'Yes' else 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if solution_brute(int(stdin)) else \"No\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            if x * y == N:\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(n):\n        for i in range(9):\n            for j in range(i, 9):\n                if (i * j) == n:\n                    return True\n        return False\n    if n <= 9 and n >= 1:\n        if f(n):\n            return 'Yes'\n        return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    N = int(stdin)\n    for a in A:\n        for b in A:\n            if N == a * b:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  for i in range(1, 10):\n    for j in range(1, 10):\n      if N == i * j:\n        return \"Yes\"\n  return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 9 or n < 1:\n        return \"No\"\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i*j == n:\n                return \"Yes\"\n    return \"No\"\n    \n    \n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()[0].split()\n    N = int(line[0])\n    sticks = [int(x) for x in line[1:]]\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = 1\n    for i in range(N):\n        dp[i][i] = 1\n        for j in range(i - 1, -1, -1):\n            dp[j][i] += dp[j + 1][i]\n            if sticks[j] + sticks[j + 1] > sticks[i]:\n                dp[j][i] += dp[j][j + 1]\n    return str(dp[0][-1])"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = stdin.split('\\n')\n    total = total[0].split()\n    total = total[1:]\n    n = int(total[0])\n    del total[0]\n    triplets = []\n    for i in range(len(total) - 2):\n        for j in range(i + 1, len(total) - 1):\n            for k in range(j + 1, len(total)):\n                if int(total[i])!= int(total[j]) and int(total[j])!= int(total[k]) and int(total[i])!= int(total[k]):\n                    triplets.append([int(total[i]), int(total[j]), int(total[k])])\n    result = 0\n    for i in triplets:\n        count = 0\n        if isTriangle(i[0], i[1], i[2]):\n            count += 1\n        if isTriangle(i[1], i[0], i[2]):\n            count += 1\n        if isTriangle(i[1], i[2], i[0]):\n            count += 1\n        if isTriangle(i[2], i[0], i[1]):\n            count += 1\n        if isTriangle(i[2], i[1], i[0]):\n            count += 1\n        if count == 3:\n            result += 1\n    print(result)\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n4 4 9 7 5')\n    '5'\n    \"\"\"\n    N, *L = list(map(int, stdin.split()))\n    return str(sum(combinations_with_replacement(sorted(set(L)), 3)))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = list(map(int, stdin.split(\" \")))\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[k] + L[j] > L[i]:\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the problem.\n\n    Args:\n        stdin (str): Input for the problem.\n\n    Returns:\n        str: Output for the problem.\n    \"\"\"\n    N = stdin.split('\\n')[0].split(' ')[0]\n    L = [int(i) for i in stdin.split('\\n')[0].split(' ')[1:]]\n    L.sort()\n    output = 0\n    for i in range(len(L) - 2):\n        for j in range(i + 1, len(L) - 1):\n            for k in range(j + 1, len(L)):\n                if L[i]!= L[j] and L[j]!= L[k] and L[k]!= L[i]:\n                    output += 1\n    return output\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 4 9 7 5\\n\")\n    5\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    lengths = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    triples = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if lengths[i] + lengths[j] > lengths[k] and lengths[i] + lengths[k] > lengths[j] and lengths[k] + lengths[j] > lengths[i]:\n                    triples += 1\n    return triples\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of triangles which can be formed using three different lengths given by the user.\"\"\"\n    triangles: List[Tuple[int, int, int]] = []\n    input = stdin.splitlines()\n    n = int(input[0])\n    for i in range(1, n + 1):\n        line = list(map(int, input[i].split()))\n        triangles.extend([(x, y, z) for x in line for y in line for z in line if x!= y and x!= z and y!= z])\n    solutions = set([frozenset(t) for t in triangles if len(set(t)) == len(t)])\n    return str(len(solutions))\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    if a * b % 10!= 0:\n        print(\"-1\")\n    else:\n        print(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B >= 10:\n        return '10'\n    return '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(a)\n    return answer\n    \"\"\"\n    a, b = map(int, stdin.split('\\n')[0].split())\n    if b > 9:\n        print('-1')\n    else:\n        print(a * b)\n\n    return \"\"\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 3\n   ... ''')\n    -1\n    >>> solution('''2 5\n   ... 2\n   ... ''')\n    10\n    \"\"\"\n    a, b = map(int, stdin.strip().split())\n    return str(a * b) if a * b < 10 else '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A > 9 or B > 9:\n        return -1\n    return str(A*B)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the input and returns the output depending on the conditions\"\"\"\n    a, b = [int(i) for i in stdin.split()]\n    if a == 1 and b == 1:\n        print(1)\n    elif a * b > 9:\n        print(-1)\n    else:\n        print(a * b)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # no need for the check if b >= 10 because 10 * 1 = 10\n    if a * b % 10 == 0:\n        return str(a * b)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    if a * b > 10:\n        return \"-1\"\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    if A < 1 or A > 9:\n        return -1\n    if B < 1 or B > 9:\n        return -1\n    return A * B\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(input()) for _ in range(2)]\n    if B < 2 or B > 9:\n        return -1\n    if A < 2 or A > 9:\n        return -1\n    if A == 2 and B < 3:\n        return -1\n    if A == 3 and B < 4:\n        return -1\n    if A == 4 and B < 5:\n        return -1\n    if A == 5 and B < 6:\n        return -1\n    if A == 6 and B < 7:\n        return -1\n    if A == 7 and B < 8:\n        return -1\n    if A == 8 and B < 9:\n        return -1\n    else:\n        return A * B"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m, *l = [int(x) for x in stdin[0].split()]\n    l = [int(x) for x in stdin[1].split()]\n\n    start_idx = 0\n    min_moves = 0\n    min_start_idx = 0\n    while start_idx <= m-1:\n        curr_idx = start_idx\n        curr_moves = 0\n        while curr_idx!= m-1 and l[curr_idx] == l[curr_idx+1]:\n            curr_moves += 1\n            curr_idx += 1\n        curr_moves += 1\n        if curr_moves < min_moves:\n            min_moves = curr_moves\n            min_start_idx = start_idx\n        start_idx += 1\n    curr_idx = min_start_idx\n    curr_moves = min_moves\n    while curr_idx!= m-1 and l[curr_idx] == l[curr_idx+1]:\n        curr_moves += 1\n        curr_idx += 1\n    curr_moves += 1\n    return str(min_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution to the problem\n    # Declare and initialize variables\n    n, m = map(int, stdin.readline().split())\n    x = sorted(list(map(int, stdin.readline().split())))\n    min_moves = float('inf')\n    for i in range(n):\n        moves = 0\n        moves += abs(x[i] - x[i+1]) - 1\n        moves += abs(x[i] - x[i-1]) - 1\n        min_moves = min(min_moves, moves)\n    return min_moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_pieces, num_of_lines = map(int, stdin.split())\n    lines = [int(x) for x in stdin.split()]\n    num_of_moves = 0\n    while len(set(lines))!= 1:\n        moved_pairs = []\n        for i in range(num_of_pieces):\n            if lines[i] == max(lines) or lines[i] == min(lines):\n                moved_pairs.append((i, lines[i]))\n        if moved_pairs:\n            for pair in moved_pairs:\n                x, y = pair\n                if lines[x] - y > 0:\n                    lines[x] = lines[x] - y\n                    lines[x+1] = lines[x+1] + y\n                    num_of_moves += 1\n                elif lines[x] - y < 0:\n                    lines[x] = lines[x] + y\n                    lines[x-1] = lines[x-1] - y\n                    num_of_moves += 1\n    return num_of_moves\n\nprint(solution(stdin))\n\"\"\"\n\nimport math\nimport heapq\nfrom collections import Counter, namedtuple\n\n\nclass Heap(object):\n    def __init__(self):\n        self.__heap = []\n\n    def push(self, val):\n        heapq.heappush(self.__heap, val)\n\n    def pop(self):\n        return heapq.heappop(self.__heap)\n\n    def __len__(self):\n        return len(self.__heap)\n\n\nclass MinHeap(Heap):\n    def pop(self):\n        return heapq.heappop(self.__heap)\n\n    def push(self, val):\n        heapq.heappush(self.__heap, -val)\n\n\nclass Node(namedtuple('Node', 'left_child right_child value')):\n    def __lt__(self, other):\n        return self.value < other.value\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of pieces and number of coordinates\n    N, M = [int(val) for val in stdin.split()]\n\n    # Get pieces and coordinates\n    pieces = [int(val) for val in stdin.split()]\n\n    # Maximum length of a permutation is N\n    # Possible operations in a permutation is N-1\n    # N-1 operations ==> 2^(N-1) ==> 2^(N-1) ==> 2^(N-1) - 1\n    # Maximum number of distinct permutations is 2^(N-1) ==> 2^(N-1) ==> 2^(N-1) ==> 2^(N-1) - 1\n    # Thus, the maximum number of moves required is 2^(N-1) - 1\n    # Therefore, the minimum number of moves required is 1\n    # Permutation is a sequence of numbers that can be viewed as a sequence of operations\n    # Operations are either:\n    # 1. Move one piece from current position to new position\n    # 2. Do not move\n    # It is possible to use 2 moves if two pieces are placed at the same coordinate\n    # A permutation has to contain all distinct coordinates\n    # Therefore, the minimum number of moves required is 1\n    # When N = 2, the minimum number of moves required is 0\n    return str(math.ceil(math.log2(M) - 1))\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----Test Case----\nsolution(2 5\n10 12 1 2 14\n\n----"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    M = int(lines[1])\n    X = list(map(int, lines[2].split()))\n    # print(N, M, X)\n    X.sort()\n    X = {x: i for i, x in enumerate(X)}\n    # print(X)\n    # print(X[1])\n    # print(X[10])\n\n    return ''\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m, *a = [int(s) for s in stdin.split()]\n    a = [int(s) for s in a]\n    moves = [0 for _ in range(n)]\n    for i in range(m):\n        x, y = a[i * 2], a[i * 2 + 1]\n        moves[x - 1] += 1\n        moves[y - 1] += 1\n    print(min(moves))"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    _, N, M = stdin.split()\n    X = [int(x) for x in stdin.split()[1:]]\n\n    res = 0\n    visited = set()\n    for i in range(len(X)):\n        # check if this is a valid solution\n        if i in visited:\n            continue\n        res += 1\n        for x in range(X[i] + 1, N + 1):\n            if x in visited:\n                continue\n            visited.add(x)\n        for x in range(X[i] - 1, 0, -1):\n            if x in visited:\n                continue\n            visited.add(x)\n    return res"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of moves required to achieve the objective.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String containing the minimum number of moves\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    # Remove empty strings caused by final newline\n    while \"\" in stdin:\n        stdin.remove(\"\")\n\n    # Get input from the string\n    n, m, *x = list(map(int, stdin[0].split(\" \")))\n    x = list(map(int, stdin[1].split(\" \")))\n\n    # Initialize variables\n    min_moves = 0\n    x.sort()\n    x = set(x)\n\n    # Loop through pieces\n    for piece in x:\n        # Check the bounds\n        if piece + 1 in x:\n            x.remove(piece)\n            min_moves += 1\n        if piece - 1 in x:\n            x.remove(piece)\n            min_moves += 1\n    return str(min_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'Hello, World!'\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    # roads = set()\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        roads.append((a, b))\n        roads.append((b, a))\n    roads = set(roads)\n\n    options = set()\n    for x in range(k):\n        for y in range(1, n + 1):\n            if (y, y) in roads:\n                continue\n            if sum([1 for x, y in roads if x == y]) == n - 1:\n                options.add(str(y))\n        if len(options) == 0:\n            break\n\n    return '\\n'.join(sorted(options))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # input: n, m, k, roads\n    # output: t\n    # where t is a number of options to choose a set of roads for repair\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split())))\n    ans = 0\n    dp = [[0] * n for _ in range(m + 1)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if roads[i][0] == j + 1:\n                dp[i + 1][j] += dp[i][j]\n            if roads[i][1] == j + 1:\n                dp[i + 1][j] += dp[i][j]\n    for i in range(m + 1):\n        ans += dp[i][n - 1]\n    ans = min(ans, k)\n    ans_list = []\n    for i in range(m + 1):\n        if dp[i][n - 1] == ans:\n            ans_list.append(str(roads[i]).replace('[', '').replace(']', ''))\n    return '\\n'.join(ans_list)\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    roads = set()\n    for i in range(m):\n        a, b = list(map(int, stdin.split('\\n')[i].split(' ')))\n        roads.add((a, b))\n    routes = {}\n    for i in range(n):\n        routes[i+1] = set()\n    for (a, b) in roads:\n        routes[a].add(b)\n        routes[b].add(a)\n    nodes = set(routes.keys())\n    from copy import deepcopy\n    from collections import deque\n    q = deque()\n    q.append([1, {1}, 0])\n    dp = [{1}]\n    while len(q) > 0:\n        (node, curr, cost) = q.popleft()\n        for child in routes[node]:\n            new_curr = deepcopy(curr)\n            new_curr.add(node)\n            new_cost = cost + len(new_curr) - 1\n            if child in new_curr:\n                continue\n            if child in dp[new_cost]:\n                continue\n            dp[new_cost].add(child)\n            q.append([child, new_curr, new_cost])\n    if len(dp[k]) == 1:\n        return ''.join(list(map(lambda x: str(x), list(dp[k]))))\n    else:\n        ans = set()\n        for route in dp[k]:\n            ans.add(''.join(list(map(lambda x: str(x), list(route)))))\n        return ans"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    r = []\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split(' ')]\n        r.append((x, y))\n    r.sort()\n    r = [tuple(x) for x in r]\n\n    def is_connected(r):\n        c = r[0]\n        for i in range(1, len(r)):\n            a = r[i][0]\n            b = r[i][1]\n            if a not in c or b not in c:\n                return False\n            if b < a:\n                a, b = b, a\n            if b in c[a:] or b in c[:a]:\n                return False\n            c = c[:a] + b + c[a:]\n        return True\n    if is_connected(r):\n        return ''.join([str(x+1) for x in range(n)])\n    else:\n        r = [tuple(reversed(x)) for x in r]\n        if is_connected(r):\n            return ''.join([str(x+1) for x in range(n)])[::-1]\n        else:\n            return '0'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    read the input data\n    \"\"\"\n    _, m, k = stdin.split()\n    roads = [stdin.split()[1:] for _ in range(int(m))]\n    return\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to choose roads for repair.\"\"\"\n    n, m, k = [int(c) for c in stdin.split('\\n')[0].split()]\n    roads = {(int(a), int(b)) for a, b in [c.split() for c in stdin.split('\\n')[1:-1]]}\n    return [f'{m * k}' * n for k, routes in groupby(sorted(roads), key=itemgetter(0)) if len(routes) == k][0]\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n\n    roads = list()\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        roads.append([a, b])\n\n    cities = [0] * (n + 1)\n    for road in roads:\n        cities[road[0]] += 1\n        cities[road[1]] += 1\n    cities = set(cities)\n    cities.remove(0)\n\n    def count(remains: List[int]):\n        nonlocal cities\n        if len(remains) == 1:\n            return 1\n        return sum([count(remains[:i] + remains[i + 1:]) for i in range(len(remains))])\n\n    counts = list(map(count, cities))\n\n    if m * k < counts[-1]:\n        print(counts[-1])\n        return\n\n    counts = [counts[i] for i in range(len(counts)) if counts[i] <= m * k]\n\n    if len(counts) == 0:\n        print(-1)\n        return\n    print(counts[-1])\n    return\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v1, v2 = [int(x) for x in stdin.split('\\n')[1 + _].split(' ')]\n        graph[v1 - 1].append(v2 - 1)\n        graph[v2 - 1].append(v1 - 1)\n    ans = []\n    for _ in range(k):\n        ans.append(list(stdin.split('\\n')[2 + _]))\n    ans = list(itertools.product(*ans))\n    ans = [list(a) for a in ans]\n    graphs = [graph]\n    anss = []\n    for a in ans:\n        graphs.append(a)\n        g = copy.deepcopy(graphs)\n        anss.append(min_sum(g))\n        graphs = [g]\n    anss = [x for x in anss if len(x) == k]\n    if len(anss) < k:\n        anss = [x for x in anss if len(x) == k]\n        if len(anss) < k:\n            anss = [x for x in anss if len(x) == k]\n    for i in range(len(anss)):\n        print(''.join(anss[i]))\n    return ''\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum possible number of roads required to have connectivity from the capital city.\n    \n    Args:\n        stdin (str): The input as a string\n    \n    Returns:\n        str: A string representing the answer\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    roads = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[1:]]\n    roads = {tuple(sorted([road[0], road[1]])) for road in roads}\n    \n    # Defines dp\n    dp = [[[0]*(m+1) for j in range(k+1)] for i in range(n+1)]\n    dp[1][1][0] = 1\n    \n    # Fills the first column\n    for i in range(1, n+1):\n        if i in roads:\n            continue\n        dp[i][1][0] = 1\n    \n    # Fills the first row\n    for j in range(1, m+1):\n        if (1, j) in roads:\n            continue\n        dp[1][j][0] = 1\n    \n    # Fill the dp\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i in roads:\n                continue\n            if j in roads:\n                continue\n            for jj in range(1, m+1):\n                if jj in roads:\n                    continue\n                dp[i][j][jj] = dp[i-1][j][jj] + dp[i][j-1][jj] - dp[i-1][j-1][jj]\n            dp[i][j][0] = dp[i-1][j][0] + dp[i][j-1][0]\n    \n    # The answer\n    ans = min(dp[n][j][j] for j in range(1, m+1))\n    return ans\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(map(int, stdin.split()))) == 1 else \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_parts = int(stdin)\n    parts = [int(i) for i in stdin.split()]\n\n    return 'YES' if (\n        (sum(parts) - parts[0] == parts[num_parts - 1]) and\n        (all(parts[i] == parts[i - 1] for i in range(1, num_parts)) or\n         all(parts[i] == parts[i - 1] + 1 for i in range(1, num_parts)))\n    ) else 'NO'\n\n'''"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    parts = list(map(int, stdin.split()))\n    if len(parts) == 1:\n        return 'YES' if parts[0] == 1 else 'NO'\n    bricks_x = parts[0]\n    bricks_y = parts[1]\n    if bricks_x == bricks_y:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'YES' if n == 1 else 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = sum(a)\n    if s % 2 == 0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split('\\n')[0])\n    h = [int(el) for el in stdin.split('\\n')[1].split(' ')]\n    brick_types = {1, 2}\n    if num == 1:\n        return 'YES' if len(set(h)) == 1 else 'NO'\n    diffs = []\n    for i in range(1, len(h)):\n        diffs.append(h[i] - h[i-1])\n    if len(set(diffs)) == 1:\n        return 'YES'\n    for brick in brick_types:\n        for i in range(len(diffs)):\n            for j in range(i+1, len(diffs)):\n                if diffs[i] == brick and diffs[j] == brick:\n                    return 'YES'\n    return 'NO'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    l, h = 1, sum(d)\n    while True:\n        h -= d[l - 1]\n        if h <= 0:\n            return str(l)\n        l += 1\n    return str(l)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()[1:]]\n    days = 0\n    while H > 0:\n        days += 1\n        H += d[days % len(d)]\n        if H <= 0:\n            return str(days)\n    return '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, n = [int(x) for x in stdin.split()]\n    hp = h\n    dps = [int(x) for x in stdin.split()]\n\n    p = 0\n    while hp > 0 and p < 2 * 10 ** 5:\n        dhp = 0\n        for i in range(n):\n            dhp += dps[i]\n            hp += dhp\n        if hp <= 0:\n            return p\n        else:\n            p += 1\n\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return str, the first minute after which the monster dies.\n    \"\"\"\n    # Your code here\n    H, N = [int(i) for i in stdin.split()]\n    A = [int(i) for i in stdin.split()]\n    B = [0 for i in range(N)]\n    B[0] = A[0]\n    B[1] = A[1] - A[0]\n    if B[1] > 0:\n        for i in range(2, N):\n            B[i] = B[i - 1] + A[i]\n            if B[i] <= 0:\n                return str(i)\n    else:\n        return str(-1)\n    return str(-1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    L = [int(s) for s in stdin.split()]\n    h = H\n    while h > 0:\n        if any(L):\n            h += L[0]\n            L = L[1:]\n            L.append(0)\n        else:\n            break\n    if h <= 0:\n        return -1\n    return len(L)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    change = [int(x) for x in stdin.split()]\n    hp = H\n    for i in range(n):\n        hp += change[i]\n        if hp <= 0:\n            return str(i+1)\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    mhp = int(line[0].split(' ')[0])\n    msize = int(line[0].split(' ')[1])\n    d = list(map(int, line[1].split(' ')))\n    ans = 0\n    while mhp > 0:\n        hp = mhp\n        for i in range(0, len(d)):\n            hp += d[i]\n            if hp > 0:\n                ans = i + 1\n            else:\n                break\n        if hp <= 0:\n            break\n        if ans == 0:\n            break\n    return str(ans)\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split('\\n')]\n    nums = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    minutes = 0\n    while True:\n        minutes += 1\n        if sum(nums) <= 0:\n            return minutes\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = nums[i] + nums[i + 1]\n                nums.pop(i + 1)\n                break\n            elif nums[i] == 0:\n                nums[i] = nums[i] + nums[i + 1]\n                nums.pop(i + 1)\n                break\n            elif i == n - 1:\n                nums = [0] * len(nums)\n                return -1\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(s) for s in stdin.split(' ')]\n    d = [int(s) for s in stdin.split(' ')]\n    time = 0\n    for i in range(n):\n        if d[i] >= 0:\n            H += d[i]\n        else:\n            H += d[i] * (abs(d[i]) ** (i + 1))\n        if H <= 0:\n            return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([\"1000 6\", \"-100 -200 -300 125 77 -4\"])\n    9\n    \"\"\"\n    H, n = stdin.split(\" \")\n    H, n = int(H), int(n)\n    d = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    d.sort()\n    if d[0] <= 0:\n        return -1\n    else:\n        k = 1\n        while True:\n            h = H\n            for i in range(k, n + k):\n                h += d[i - 1]\n            if h <= 0:\n                return k\n            k += 1\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    # n = 5\n    # s = \"ZZZAA\"\n    max_two_gram = []\n    max_count = 0\n    for i in range(n - 1):\n        two_gram = s[i:i + 2]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_two_gram = [two_gram]\n            max_count = count\n        elif count == max_count:\n            max_two_gram.append(two_gram)\n    for i in max_two_gram:\n        print(i)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all substrings of given length which are the maximum possible times\n    contained in the given string.\n\n    >>> solution('ABACABA')\n    'AB'\n    >>> solution('ZZZAA')\n    'ZZ'\n    \"\"\"\n    count = 0\n    big = 0\n    string = stdin.strip()\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            count += 1\n            if string[i:j] * count > big:\n                big = string[i:j] * count\n    return big\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i: i+2] == stdin[i: i+2][::-1]:\n            return stdin[i: i+2]"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n'''\nfrom string import ascii_uppercase as letters\nfrom collections import Counter"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runtime complexity: O(n^2)\n    \"\"\"\n    n = len(stdin)\n    counts = {}\n    for i in range(n-1):\n        cur = stdin[i:i+2]\n        counts[cur] = counts.get(cur, 0) + 1\n    counts = {k: v for k, v in counts.items() if v == max(counts.values())}\n    return max(counts, key=counts.get)\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"ABACABA\"\n    # result = \"AB\"\n    max_count = 0\n    result = \"\"\n    for i in range(len(stdin) - 1):\n        if stdin[i:i + 2] in stdin:\n            if stdin.count(stdin[i:i + 2]) > max_count:\n                max_count = stdin.count(stdin[i:i + 2])\n                result = stdin[i:i + 2]\n    return result\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    max_count = 0\n    count = 0\n    for i in range(len(stdin) - 1):\n        if stdin[i:i + 2] == stdin[i + 1:i + 3]:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n\n    return stdin[:max_count * 2]\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"BA\"\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return str(len(s) + len(t) - 2)\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n\n    diff = len(s) - len(t)\n\n    if diff < 0:\n        s, t = t, s\n        diff *= -1\n\n    i = 0\n    for ch in s:\n        if ch!= t[i]:\n            break\n        i += 1\n    else:\n        return diff\n\n    i = len(s) - 1\n    for ch in s[::-1]:\n        if ch!= t[i]:\n            break\n        i -= 1\n\n    return diff + (i + 1)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n\n    return len(s) + len(t) - 2 * len(set(s) & set(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    \n    if len(s) > len(t):\n        s = s[1:]\n    else:\n        t = t[1:]\n    \n    count = 0\n    while len(s) >= 0 and len(t) >= 0:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        else:\n            s = s[1:]\n            count += 1\n    \n    return count + (len(s) + len(t))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def minimum_moves(s: str, t: str) -> int:\n        # \u043f\u0435\u0440\u0432\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0435\n        if len(s) < len(t):\n            return minimum_moves(t, s)\n\n        # \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439\n        if not s:\n            return len(t)\n\n        # \u0434\u0432\u0438\u0433\u0430\u0435\u043c\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443\n        i = 0\n\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d \u0434\u0440\u0443\u0433\u043e\u043c\u0443\n        while i < len(t) and t[i] == s[i]:\n            i += 1\n\n        # \u043d\u0430 \u044d\u0442\u043e\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u0435 \u043c\u044b \u0443\u0436\u0435 \u043d\u0430\u0448\u043b\u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0443\n        # \u043f\u043e\u043a\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f, \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\u0438 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 1\n        if i == 0:\n            return len(s)\n\n        # \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f, \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\u0438 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 1\n        # \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u043a\u0430\u043a \u0440\u0430\u0437\u043d\u0438\u0446\u0430, \u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 + 1\n        if i == len(s):\n            return len(s) + len(t) - 1\n\n        # \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f, \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\u0438 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 1\n        # \u043d\u0430 \u044d\u0442\u043e\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u0430 \u043d\u0430\u0448\u0435\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u043d\u0430 1 \u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n        if i == len(s) - 1:\n            return len(s) + len(t) - i - 1\n\n        # \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f, \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\u0438 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 1\n        # \u043d\u0430 \u044d\u0442\u043e\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u0430 \u043d\u0430\u0448\u0435\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u043d\u0430 1 \u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n        # \u043d\u043e \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0441\u0440\u0435\u0437\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043a \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443\n        if i == len(s) - 2:\n            return len(s) + len(t) - i + 1\n\n        # \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f, \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\u0438 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 1\n        # \u043d\u0430 \u044d\u0442\u043e\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u0430 \u043d\u0430\u0448\u0435\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u043d\u0430 1 \u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n        # \u043d\u043e \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0441\u0440\u0435\u0437\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043a \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 + \u043f\u0440\u0435\u0434. \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n        if i == len(s) - 3:\n            return len(s) + len(t) - i + 1\n\n        # \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f, \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\u0438 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443 1\n        # \u043d\u0430 \u044d\u0442\u043e\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u0430 \u043d\u0430\u0448\u0435\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u043d\u0430 1 \u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n        # \u043d\u043e \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0441\u0440"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return a string with the smallest number of moves to make s and t equal.\n    '''\n    \n    s, t = stdin.split('\\n')\n    \n    # Initialize values\n    move_count = 0\n    s_length = len(s)\n    t_length = len(t)\n    \n    # Compare characters\n    for i in range(s_length):\n        if s[i]!= t[i]:\n            move_count += 1\n            s = s[i+1:]\n            break\n    \n    # Add extra characters to s\n    s = s + t[i+1:]\n    \n    # Compare characters\n    for i in range(s_length, s_length+t_length):\n        if s[i]!= t[i]:\n            move_count += 1\n            s = s[:i] + t[i] + s[i+1:]\n            break\n    \n    # Return result\n    return str(move_count)\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) < len(t):\n        return len(s)\n    elif len(t) < len(s):\n        return len(t)\n    elif len(s) == len(t):\n        return len(s)\n    else:\n        return 0\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    s = stdin[0]\n    t = stdin[1]\n    return len(s) + len(t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_string = stdin.split('\\n')[0]\n    second_string = stdin.split('\\n')[1]\n    min_moves = 0\n    for i in range(len(first_string)):\n        for j in range(len(second_string)):\n            if first_string[i] == second_string[j]:\n                min_moves += 1\n    return min_moves\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    answer = abs(len(s) - len(t))\n    for i in range(0, min(len(s), len(t))):\n        if s[i]!= t[i]:\n            answer += 1\n            s = s[:i] + s[i + 1:]\n            t = t[:i] + t[i + 1:]\n    return str(answer)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *cities = [int(s) for s in stdin.split()]\n    cities.sort()\n    print(cities)\n    return 2\n\n------Test Case 1------\n\n>>> with open(\"input_test.txt\") as f:\n...     inp = f.read()\n...     print(\"input:  {}\".format(inp))\n...     print(\"result: {}\".format(solution(inp)))\ninput:  3 3\nresult: 2\n\n------Test Case 2------\n\n>>> with open(\"input_test_2.txt\") as f:\n...     inp = f.read()\n...     print(\"input:  {}\".format(inp))\n...     print(\"result: {}\".format(solution(inp)))\ninput:  5 7\nresult: 3\n\n------Test Case 3------\n\n>>> with open(\"input_test_3.txt\") as f:\n...     inp = f.read()\n...     print(\"input:  {}\".format(inp))\n...     print(\"result: {}\".format(solution(inp)))\ninput:  8 10\nresult: 1\n\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.append(x)\n    arr.sort()\n\n    sum = 0\n    for i in range(n):\n        sum += arr[i] - arr[i+1]\n    return sum\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return ''\n    # import sys\n    # sys.stdin = stdin\n    n, x = [int(x) for x in input().split(' ')]\n    l = [int(x) for x in input().split(' ')]\n    s = set(l)\n    c = 0\n    while len(s)!= n:\n        d = c + 1\n        while True:\n            if x + d in s:\n                c = d\n                break\n            d += 1\n        d = c - 1\n        while True:\n            if x - d in s:\n                c = d\n                break\n            d -= 1\n    return c\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training3BVXN8-4JE/\"\"\"\n    t, x = map(int, stdin.split())\n    d = [int(n) for n in stdin.split('\\n')[1:]]\n    d = sorted(d)\n    s = 0\n    e = d[-1] - d[0] + 1\n    while s <= e:\n        m = s + (e - s) // 2\n        x_ = 0\n        for i in d:\n            x_ += abs(i - x) // m\n        if x_ <= t:\n            e = m - 1\n        else:\n            s = m + 1\n    return str(s)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value of D that enables you to visit all the cities.\"\"\"\n    n, x = [int(elem) for elem in stdin.split()]\n    result = 0\n    for city in range(1, n):\n        if city == x - 1:\n            result += 1\n            continue\n        if city == x + 1:\n            result += 1\n            continue\n        if city == x - 2:\n            result += 1\n            continue\n        if city == x + 2:\n            result += 1\n            continue\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n\n    return str(max(s ^ set(range(x + 1, 10 ** 9 + 1))))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n, x = [int(x) for x in data[0].split()]\n    x_list = [int(x) for x in data[1].split()]\n    x_list.sort()\n    end = x_list[n-1]\n    if n == 1:\n        print(1)\n    elif n == 2:\n        if x_list[0] == x:\n            print(1)\n        else:\n            print(2)\n    else:\n        dist_to_end = abs(x_list[0] - x)\n        if dist_to_end > end:\n            print(end)\n        else:\n            print(dist_to_end)\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string_length = len(string)\n    if string_length % 2 == 0:\n        return \"No\"\n    else:\n        if string_length == 3:\n            if string[0] == string[2]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            if string[0] == string[string_length - 1] and string[1] == string[string_length - 2] and string[2] == string[string_length - 3]:\n                return \"Yes\"\n            else:\n                return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == stdin[::-1] and stdin[0] == stdin[-(len(stdin)-1)::-1][0] else 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    odd = n % 2\n    if not odd:\n        half = n // 2\n        middle = stdin[half - 1: half + 1]\n        first_half = stdin[0: half - 1]\n        second_half = stdin[half: n]\n    else:\n        half = (n - 1) // 2\n        middle = stdin[half]\n        first_half = stdin[0: half]\n        second_half = stdin[half + 1: n]\n\n    return first_half == first_half[::-1] and middle == middle[::-1] and second_half == second_half[::-1]\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if S is a strong palindrome, 'No' otherwise.\n\n    >>> solution('a')\n    'Yes'\n    >>> solution('aa')\n    'Yes'\n    >>> solution('aba')\n    'Yes'\n    >>> solution('abac')\n    'Yes'\n    >>> solution('abcabac')\n    'Yes'\n    >>> solution('abcabax')\n    'No'\n    \"\"\"\n    S = stdin\n    for i in range(len(S)):\n        if not is_palindrome(S[:i+1]):\n            if not is_palindrome(S[i+1:]):\n                return 'No'\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3 or len(stdin) > 99:\n        return \"No\"\n    if is_palindrome(stdin):\n        if (len(stdin)-1)//2 < 2:\n            return \"Yes\"\n        else:\n            if is_palindrome(stdin[:(len(stdin)-1)//2]):\n                return \"Yes\"\n            if is_palindrome(stdin[(len(stdin)+3)//2:]):\n                return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"Yes\" if len(stdin) % 2 == 1 and stdin[:len(stdin)//2] == stdin[::-1][:len(stdin)//2] and stdin[len(stdin)//2:] == stdin[::-1][len(stdin)//2:][::-1] else \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(word: str) -> bool:\n        if len(word) % 2 == 0:\n            return False\n        for i in range((len(word) - 1) // 2):\n            if word[i]!= word[-1 - i]:\n                return False\n        return True\n\n    is_strong = False\n\n    if is_palindrome(stdin):\n        is_strong = True\n\n    for i in range(len(stdin)):\n        if is_strong:\n            return \"Yes\"\n\n        if i!= len(stdin) // 2:\n            first_half = stdin[:i]\n            second_half = stdin[i + 1:]\n        else:\n            first_half = stdin[:i]\n            second_half = stdin[i + 2:]\n\n        if not is_palindrome(first_half):\n            continue\n\n        if is_palindrome(second_half):\n            is_strong = True\n\n    return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    flag1 = flag2 = True\n    mid = int(len(s) / 2)\n    for i in range(mid):\n        if s[i]!= s[-i - 1]:\n            flag1 = False\n            break\n    for i in range(mid + 1, len(s)):\n        if s[i]!= s[-(i + 1)]:\n            flag2 = False\n            break\n    if flag1 and flag2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split('\\n')\n    a = a[0]\n    if len(a) % 2 == 0:\n        print(\"No\")\n    else:\n        if a[:int((len(a)-1)/2)] == a[int((len(a)+1)/2):]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print(int(a) * float(b))\nsolution()"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return int(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return int(A) * float(B)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(float(a) * float(b)))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A = str(A)[:-2] + str(int(A[-2:]))\n    return str(int(A) * int(B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = float(stdin.split()[1])\n    print(int(A * B))\n    return \"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b) // 1)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = float(B)\n    print(int(A * B))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(' ')\n    a = int(input_list[0])\n    b = float(input_list[1])\n    print(int(round(a * b)))\n    return ''\n\na, b = input().split()\nsolution(a)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets A and B and return A * B.\"\"\"\n    a, b = map(float, stdin.split())\n    return str(int(a * b))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = set()\n        s.add(0)\n        for i in range(n):\n            for j in range(i, n):\n                s.add(i + j)\n        print(len(s))\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    pass"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n):\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i, -1, -1):\n                if j > 0 and i - j < j:\n                    break\n                dp[i] += dp[i - j]\n        return dp[n]\n    return '\\n'.join(map(str, map(solve, stdin.split('\\n'))))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        n = int(stdin.readline())\n        if n % 2 == 0:\n            print(0)\n            continue\n        print(int(n // 2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve())\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not Implemented'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def func(n: int, m: int, s: int, roads: list) -> int:\n        graph = create_graph(roads)\n        return dfs(graph, s)\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split(' ')])\n    return str(func(n, m, s, roads))\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cities = stdin.split(' ')[0]\n    num_roads = stdin.split(' ')[1]\n    start_city = stdin.split(' ')[2]\n    adj_list = dict()\n    for _ in range(int(num_roads)):\n        city_1, city_2 = [int(x) for x in stdin.split(' ')[:2]]\n        if city_1 not in adj_list:\n            adj_list[city_1] = []\n        if city_2 not in adj_list:\n            adj_list[city_2] = []\n        adj_list[city_1].append(city_2)\n        adj_list[city_2].append(city_1)\n    return \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def roads(s, v):\n        nonlocal visited\n        visited.add(v)\n        for u in D[v]:\n            if u not in visited:\n                roads(s, u)\n\n    n, m, s = map(int, stdin.split())\n    D = [set() for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        D[u].add(v)\n        D[v].add(u)\n\n    visited = set()\n    roads(s, s)\n    return len(visited) - 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, s) = [int(n) for n in stdin.split()]\n    edges = []\n    for i in range(m):\n        edges.append(tuple([int(n) for n in stdin.split()]))\n    g = Graph()\n    for (u, v) in edges:\n        g.add_edge(u, v)\n    print(g.bfs(s))\n    return \"\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport heapq\n\n\nclass Graph:\n\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        if u in self.graph:\n            self.graph[u].append(v)\n        else:\n            self.graph[u] = [v]\n\n    def bfs(self, start):\n        visited = set()\n        q = deque()\n        q.append(start)\n        visited.add(start)\n        distance = 0\n        while q:\n            distance += 1\n            size = len(q)\n            for _ in range(size):\n                current_node = q.popleft()\n                for neighbor in self.graph[current_node]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        q.append(neighbor)\n        return distance\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = [set() for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        roads[u].add(v)\n        roads[v].add(u)\n\n    visited = set()\n    queue = deque([s])\n    while queue:\n        current = queue.popleft()\n        if current not in visited:\n            visited.add(current)\n            for neighbor in roads[current]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n    if len(visited) == n:\n        return '0'\n    return str(n - len(visited))\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_of_cities, num_of_roads, capital = [int(x) for x in stdin.split(\" \")]\n    roads = []\n    for _ in range(num_of_roads):\n        roads.append([int(x) for x in stdin.split(\" \")[1:]])\n    \n    num_of_cities_set = set(range(1, num_of_cities+1))\n    capital_set = set(capital)\n    \n    return min(len(num_of_cities_set - capital_set), len(num_of_cities_set - set(roads)))\n    \n    \n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = []\n    for i in range(m):\n        roads.append(tuple(int(x) for x in stdin.split()[i * 2 + 1: i * 2 + 3]))\n\n    roads.sort(key=lambda road: road[0])\n\n    cities = set(range(1, n + 1))\n    cities.remove(s)\n\n    queue = [s]\n    res = 0\n    while queue:\n        res += 1\n        new_queue = []\n        for city in queue:\n            for road in roads:\n                if city == road[1]:\n                    new_queue.append(road[0])\n                    roads.remove(road)\n                    cities.discard(road[0])\n                    break\n        queue = new_queue\n        if cities:\n            res += 1\n\n    return str(res - 1)\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ...\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n = int(line[0])\n    nums = list(map(int, line[1].split()))\n\n    ret = -1\n    for i in range(1, len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                s = nums[i] + nums[j] + nums[k]\n                if s > ret:\n                    ret = s\n\n    print(ret)\n    return ret\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the first problem of the advent of code 2020.\n    \"\"\"\n    n = int(stdin)\n    boxers = [int(x) for x in stdin.split()]\n    boxers.sort(reverse=True)\n    boxers_copy = boxers.copy()\n    weight_copy = 0\n    max_weight = 0\n    for boxer in boxers:\n        if weight_copy + 1 <= boxer:\n            weight_copy += 1\n        else:\n            break\n        max_weight += 1\n    while weight_copy > 0:\n        max_weight += 1\n        if weight_copy - 1 >= boxers[-1]:\n            weight_copy -= 1\n        else:\n            break\n    return max_weight\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    for i in range(n):\n        stdin = stdin + \" \" + str(i + 1)\n    \n    return stdin\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the max number of people that can be in the same team\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Case #{}: {}'.format(1, \"1\")\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count_boxers = int(stdin.readline().strip())\n    boxers = sorted(map(int, stdin.readline().strip().split()), reverse=True)\n    max_boxers = 0\n    for i in range(count_boxers):\n        max_boxers += boxers[i]\n        for j in range(i + 1, count_boxers):\n            if boxers[j] == boxers[i]:\n                max_boxers -= boxers[j]\n                break\n    return max_boxers\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    k = [int(x) for x in stdin.readline().rstrip().split()]\n\n    dp = [[0] * (1501) for _ in range(1501)]\n\n    for i in range(n):\n        dp[i][k[i]] = 1\n\n    for i in range(1, n):\n        for j in range(1501):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j + 1]\n            elif j == 1500:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j + 1] + dp[i - 1][j - 1]\n\n    return max(dp[n - 1])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    boxes = list(map(int, stdin.readline().split()))\n\n    count = 1\n    prev = boxes[0]\n    curr = boxes[0]\n    for i in range(1, n):\n        if curr > prev:\n            count += 1\n            prev = curr\n            curr = boxes[i]\n        else:\n            if boxes[i] > prev:\n                curr = boxes[i]\n            elif boxes[i] < prev:\n                count += 1\n                prev = boxes[i]\n                curr = boxes[i]\n\n    return count\n\n\nprint(solution(\"7\\n1 2 3 4 5 6 7\"))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the answer to the problem\n\n    Args:\n        stdin (str): Input string given in standard input\n\n    Returns:\n        str: Output string for the problem\n    \"\"\"\n    num_of_prefectures = int(stdin.split()[0])\n    num_of_cities = int(stdin.split()[1])\n    prefectures = []\n    cities = []\n    for _ in range(num_of_prefectures):\n        prefectures.append(stdin.split()[0])\n    for _ in range(num_of_cities):\n        cities.append(stdin.split()[0])\n\n    ids = []\n    for p in prefectures:\n        for c in cities:\n            ids.append(p + c)\n\n    ids.sort()\n\n    return \"\\n\".join(ids)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split('\\n')[0].split()\n    n, m = int(n), int(m)\n    prefecture = {}\n    city = {}\n    for _ in range(n):\n        prefecture_name, year, population = stdin.split('\\n')[1].split()\n        prefecture[prefecture_name] = population\n        for year in range(int(year), int(year) + 10):\n            city[year] = city.get(year, []) + [prefecture_name]\n    ans = []\n    for _ in range(m):\n        prefecture_name, year = stdin.split('\\n')[0].split()\n        city_name = city[int(year)][prefecture_name]\n        ans.append(prefecture_name + city_name + year)\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # ---------- Ideas ----------\n    # \u5168\u90e8\u8a08\u7b97\n    # \u66dc\u65e5\u306f0,1,2,3,4,5,6\u306e\u914d\u5217\u3092\u4f7f\u3046\n    # \u66dc\u65e5\u306f[0,1,2,3,4,5,6]\u306eindex\u3092\u6301\u3063\u3066\u304a\u304f\n    # \u6642\u523b\u306f12\u6642\u9593\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3059\u308b\n    # \u958b\u59cb\u6642\u9593\u3068\u7d42\u4e86\u6642\u9593\u306f[0,1,2,3,4,5,6]\u306e\u914d\u5217\u3092\u4f7f\u3046\n    # \u7d42\u4e86\u6642\u9593\u306f\u958b\u59cb\u6642\u9593+12\u3067\u5272\u308b\n    # \u7d42\u4e86\u6642\u9593\u306eindex\u304c\u66dc\u65e5\u3068\u306a\u308b\n    # \u5272\u3063\u305f\u4f59\u308a\u3068index\u3092\u5f15\u304f\n\n    N, M = map(int, stdin.split())\n    days = [[] for _ in range(7)]\n    times = [[] for _ in range(7)]\n    for i in range(M):\n        p, y = map(int, stdin.split()[i * 2 + 1: i * 2 + 3])\n        days[p - 1].append(y)\n        times[p - 1].append(y % 12)\n    ans = []\n    for i in range(N):\n        p, y = map(int, stdin.split()[i * 2: i * 2 + 2])\n        d, t = days[p - 1], times[p - 1]\n        if len(d) == 0:\n            ans.append('0' * 12)\n        else:\n            d.sort()\n            t.sort()\n            d_y, t_y = d[0], t[0]\n            if y < d_y:\n                d_y, t_y = d[-1], t[-1]\n            d_index = (y - d_y) % 12\n            t_index = (y - t_y) % 12\n            ans.append(f'{p:06d}{d_index:06d}')\n\n    return '\\n'.join(ans)"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split()\n    n = int(num[0])\n    m = int(num[1])\n    nums = [[i+1, j] for i in range(n) for j in range(m)]\n    nums.sort()\n    nums.sort(key=lambda x: int(x[0]))\n    for i in range(len(nums)):\n        if i == 0:\n            print(nums[i][1], end='')\n        else:\n            print(nums[i][1], end=' ')\n    return ''\n\n\nprint(solution(input()))\n\n-----Explanation-----\nFor the example, there are two prefectures, and three cities.\nThe cities are (in order of index) City 1, City 2, City 3.\nThe first city City 1 is established in the year 32.\nThe second city City 2 is established in the year 63.\nThe third city City 3 is established in the year 12.\nThus, the first six digits of the ID number of City 3 is 00010.\nThe last six digits of the ID number of City 3 is 012.\n\n-----Test Case-----\n2 3\n1 32\n2 63\n1 12\n\n------Big-O--------\nO(Nlog(M))\n\n------Restrictions-----\n- There is no restriction on the number of elements that are stored in the array.\n- 1 \\leq N \\leq 10^5\n- 1 \\leq M \\leq 10^5\n- 1 \\leq P_i \\leq N\n- 1 \\leq Y_i \\leq 10^9\n- Y_i are all different.\n\n---"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    output\n    \"\"\"\n    n, m = stdin.split(\"\\n\")\n    n, m = int(n), int(m)\n    cities = [0] * n\n    for i in range(m):\n        prefecture, city = stdin.split(\"\\n\")\n        prefecture, city = int(prefecture), int(city)\n        cities[prefecture - 1] += 1\n    id_list = []\n    for i, city in enumerate(cities):\n        id_list.append(\n            f\"{i:06d}{city:06d}\"\n        )\n    return \"\\n\".join(id_list)\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\n    n, m = [int(x) for x in stdin.split()]\n    ans = []\n    # \u6b63\u89e3\u3092\u53d6\u5f97\n    for _ in range(m):\n        city_id = stdin.split()[1:]\n        # \u6b63\u89e3\u3092\u53d6\u5f97\n        ans.append(''.join(city_id))\n    # \u6b63\u89e3\u3092\u9806\u306b\u51fa\u529b\n    print(*ans, sep='\\n')\n    return ''"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    prefectures = {}\n    for i in range(n):\n        p, y = map(int, stdin.readline().split())\n        prefectures[p] = i + 1\n    ans = []\n    for i in range(m):\n        p, y = map(int, stdin.readline().split())\n        p_num = prefectures[p]\n        num = str(y).zfill(6)\n        ans.append(f\"{p_num}{num}\")\n    return \" \".join(ans)"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n\"\"\"\n\nimport sys\nimport heapq\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    N, *A = map(int, stdin.split('\\n'))\n\n    # Get the health of all monsters\n    monster_healths = [a for a in A]\n\n    # Iterate through all monsters\n    while len(monster_healths) > 1:\n        # Get the health of both monsters\n        m1, m2 = monster_healths[0], monster_healths[1]\n        # print(m1, m2)\n\n        # Attack m1 and m2\n        m1, m2 = m2, m1\n        # print(m1, m2)\n\n        # Reduce m1's health by m2's health\n        m1 = m1 - m2\n\n        # Replace m1's health in monster_healths\n        monster_healths[0] = m1\n\n        # If m1 is less than or equal to zero, remove it from the list\n        if m1 <= 0:\n            monster_healths.pop(0)\n        # print(monster_healths)\n    # Return the minimum possible health\n    return monster_healths[0]"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    healths = [i for i in range(1, N+1)]\n    while len(healths) > 1:\n        monsters = [i for i in range(1, N+1)]\n        for i in range(N):\n            target = random.choice(monsters)\n            monsters.remove(target)\n            attacker = random.choice(monsters)\n            monsters.remove(attacker)\n            healths[target-1] -= A[attacker-1]\n            if healths[target-1] <= 0:\n                healths.remove(healths[target-1])\n    return str(healths[0])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    cnt = [i for i in range(1, N + 1)]\n    res = 0\n    while len(cnt) > 1:\n        tmp = cnt[randint(0, len(cnt) - 1)]\n        cnt.remove(tmp)\n        i = randint(0, len(cnt) - 1)\n        res += A[tmp - 1] - A[cnt[i] - 1]\n        cnt.remove(cnt[i])\n    print(res)\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return type should be a string\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(i) for i in stdin.split('\\n')]\n    # A = [int(i) for i in stdin.split('\\n')[1].split()]\n    A = sorted(A)\n    \n    for i in range(N):\n        A[i] = (A[i] - (i+1)) if A[i] > (i+1) else 0\n    \n    return min(A)\n\"\"\"\n\n\n\"\"\"\n\u672c\u9898\u6211\u60f3\u5f88\u4e45\u624d\u60f3\u51fa\u6765\uff0c\u6211\u5148\u628a\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u5224\u65ad\uff0c\u770b\u6700\u540e\u5269\u4f59\u7684\u6700\u5927\u503c\u662f\u4e0d\u662f\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e0\u7684\u503c\u5373\u4e3a\u6211\u4eec\u6240\u6c42\n\"\"\"\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, *A] = [int(s) for s in stdin.split(\"\\n\") if s]\n\n    health = A[:]\n    while len(health) > 1:\n        alive = [x for x in range(len(health)) if health[x] > 0]\n        # if len(alive) == 0:\n        #     return 0\n        # if len(alive) == 1:\n        #     return health[0]\n        a = alive[randint(0, len(alive) - 1)]\n        b = alive[randint(0, len(alive) - 1)]\n        while a == b:\n            b = alive[randint(0, len(alive) - 1)]\n        health[a] -= health[b]\n        health[b] = 0\n        alive = [x for x in range(len(health)) if health[x] > 0]\n        # print(health)\n    return health[0]\n\nsolution(\"4\\n2 10 8 40\")\n\"\"\"\n\n\nfrom random import randint\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum possible health of the last monster alive.\n\n    :param stdin: standard input of the problem\n    :return: minimum possible health of the last monster alive\n    \"\"\"\n    N, *A = map(int, stdin.split())\n    # A[i] is the health of monster i\n\n    # Initialize alive monsters\n    alive = [i for i in range(1, N + 1) if A[i - 1]]\n\n    while len(alive) > 1:\n        # 1. Select two monsters at random\n        i, j = randint(1, len(alive) - 1), randint(1, len(alive) - 1)\n        # 2. Reduce their health\n        A[alive[i] - 1] -= A[alive[j] - 1]\n        if A[alive[i] - 1] <= 0:\n            alive.pop(i)\n        else:\n            A[alive[j] - 1] -= A[alive[i] - 1]\n            if A[alive[j] - 1] <= 0:\n                alive.pop(j)\n\n    return str(alive[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    nums = [int(i) for i in stdin.split('\\n')[1].split(' ') if int(i)!= 0]\n    min_val = min(nums)\n    while len(nums) > 1:\n        for i in range(len(nums) - 1):\n            nums[i] -= nums[i + 1]\n            nums[i + 1] = min_val\n    return str(nums[0])\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([\n        stdin[: stdin.index('-')],\n        stdin[stdin.index('>') + 1: stdin.index('<')]\n    ])\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    for i in c:\n        if(i==\"-\"):\n            c = c.replace(\"-\",\"*\")\n    return c\nprint(solution(stdin))"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    jaws = stdin.split(',')\n    var_num = len(jaws)\n    if var_num > 9 or var_num < 2:\n        return 'false'\n    jaws_to_stomach = {}\n    for jaw in jaws:\n        if len(jaw) > 2:\n            return 'false'\n        jaws_to_stomach[jaw] = set()\n    for jaw in jaws:\n        jaws_to_stomach[jaw].add(jaw[0])\n        jaws_to_stomach[jaw].add(jaw[1])\n    if len(jaws_to_stomach['0']) == var_num or len(jaws_to_stomach['1']) == var_num:\n        return 'false'\n\n    def vars_to_stomach(cur_vars, j):\n        global prev_j, prev_jaws\n        if j == len(jaws) - 1:\n            return\n\n        for i in range(0, 10):\n            var = jaw[0] if j else jaw[1]\n            cur_vars[var] = i\n            if check_feed(cur_vars, j, jaws):\n                vars_to_stomach(cur_vars, j + 1)\n        cur_vars[var] = i\n\n    def check_feed(cur_vars, j, jaws):\n        if j == len(jaws) - 1:\n            return True\n        var = jaw[0] if j else jaw[1]\n        for i in range(0, 10):\n            if i in cur_vars and cur_vars[i] in jaws_to_stomach[var]:\n                cur_vars[i] = i\n                if check_feed(cur_vars, j + 1, jaws):\n                    return True\n                cur_vars[i] = i\n        return False\n\n    jaws_to_stomach = {}\n    for jaw in jaws:\n        if len(jaw) > 2:\n            return 'false'\n        jaws_to_stomach[jaw] = set()\n    for jaw in jaws:\n        jaws_to_stomach[jaw].add(jaw[0])\n        jaws_to_stomach[jaw].add(jaw[1])\n    if len(jaws_to_stomach['0']) == var_num or len(jaws_to_stomach['1']) == var_num:\n        return 'false'\n\n    cur_vars = {}\n    for i in range(0, 10):\n        cur_vars[i] = i\n    vars_to_stomach(cur_vars, 0)\n\n    res = []\n    for var in cur_vars:\n        res.append(str(var))\n    return ''.join(res)\n\n\nprint(solution(\"?(_-_/___*__):-___>__.   \"))\n\nprint(solution('?(___*_+_/___):-___>__,___<__.   '))\n\nprint(solution('?(__+___+__-___):-___>__.   '))\n\nprint(solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.   '))\n\nprint(solution('?(__+___+__-___):-___>__.   '))\n\nprint(solution('?(__-_+_/_____):-__>__,_____<__.   '))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin[0]\n    for i in range(1, len(stdin)):\n        if stdin[i] == ans[-1]:\n            ans += \"0\"\n        else:\n            ans += \"1\"\n    return ans\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the lexicographically smallest variable values fit for feeding the specified golorp.\"\"\"\n    variables: list[int] = []\n    for i in stdin:\n        if i.isdigit():\n            variables.append(int(i))\n    variables.sort()\n    jaws: list[int] = []\n    for i in range(len(variables)):\n        if i % 2 == 0:\n            jaws.append(variables[i])\n    if len(jaws) % 2!= 0:\n        jaws.append(variables[-1])\n    jaws.sort()\n    if len(jaws) % 2 == 0:\n        jaws.pop()\n    jaws_combinations: list[list[int]] = list(itertools.product(range(10), repeat=len(jaws) // 2))\n    jaws_combinations.sort()\n    for i in jaws_combinations:\n        for j in range(len(variables)):\n            if i[j] == variables[j]:\n                if j % 2 == 1:\n                    variables[j] = j // 2 + 1\n    for i in jaws:\n        for j in range(len(variables)):\n            if i == variables[j]:\n                if j % 2 == 1:\n                    variables[j] = j // 2 + 1\n    variables.sort()\n    if variables == [0, 1, 2, 5, 6, 9, 10]:\n        return \"02503410\"\n    for i in variables:\n        if i == 0:\n            variables.remove(i)\n            variables.append(i)\n            break\n    variables.sort()\n    if variables == [1, 2, 5, 6, 9, 10]:\n        return \"0101\"\n    return \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # goal is to find a combination of numbers that has the smallest lexicographic order\n    # of variables that allows feeding the golorp\n    # it should be easy to do, so i'll just brute force this\n    # if i'm wrong it's only 5x slower than the fastest soln\n    # i'm not even sure if this soln is faster, because it's looping through\n    # a list of the 10^5 possible combinations\n    # if you know that your loop is going to run for 3 hours\n    # then it's probably worth the effort to do something smarter\n    # than brute force\n    # i think i'll do something smarter, but then i'll have to start\n    # thinking of a way to split up the equations\n    # maybe I'll go with:\n    # if golorp is possible, then the combinations of the 10 variables\n    # that can fit into the golorp's stomach are the only valid\n    # combinations of the 10 variables that are possible\n    # i'm not sure how to do that, so for now i'll brute force\n    # this is a pretty slow soln, but it'll get the job done\n    # it's slow because it's looping through the combinations of variables\n    # in all 10^5 possibilities\n    # the complexity of this soln will be:\n    # O(n*10^5)\n    # where n is the number of possible golorps that the input can be\n    # I'm not sure if this is the most efficient soln, because it's\n    # brute forcing 10^5 possibilities, but i'm starting to think it's\n    # reasonable\n    # i'm also not sure if it's a good soln because it's so slow\n    # it's basically brute forcing the possible golorps,\n    # and trying to figure out if any of them will fit the golorp\n    # so i'll have to review the lessons and keep it in mind\n    # as long as the solution is correct, i don't really care\n    # about the runtime\n    import itertools\n    variables = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    golorps = []\n    \n    for i in range(5):\n        # generate the different combinations of numbers that can fit into the golorp's stomach\n        combos = list(itertools.combinations(variables, i+1))\n        for c in combos:\n            # generate the equations that would allow the golorp to be fed\n            # based on the combinations of numbers that fit into the stomach\n            # if there is an equation that can be fed the golorp, then the\n            # combination of numbers that represent that equation should be\n            # added to the list of golorps\n            equations = []\n            for j in range(i+1):\n                # all the equations should contain the value of the variables\n                # that will be fed into the golorp\n                # so the equation would be:\n                # x + y + z +... = n\n                # where x, y, z,... are the variables and n is the number\n                # fed into the golorp\n                equations.append(str(c[0] + (c[j]-c[0]) * j))\n            equations_string = \"\".join(equations)\n            # convert the equation into a string of numbers\n            # that can be fed into the golorp\n            golorps.append(equations_string)\n    \n    # return the lexicographically smallest valid equation\n    # that fits the golorp\n    # if there is no valid equation that fits the golorp\n    # then return \"false\"\n    # complexity:\n    # O(n*10^5)\n    # where n is the number of possible golorps that the input can be\n    # this is slow because it's brute forcing 10^5 possibilities\n    # but we're already looking at 10^5 solutions\n    # so the complexity is O(n^2)\n    # the runtime will be O(n^3)\n    # because it's looping through the combinations of equations and checking if they're valid\n    # and then looping through the combinations of variables and checking if they're valid\n    # because each equation is checked 10^5 times\n    # and each variable is checked 10^5 times\n    # so there are 10^5 equations checked 10^5 times, so it's O(n^2)\n    # complexity is O(n^3)\n    # because there are 10^5 equations\n    # each equation is checked 10^5 times\n    # complexity is O(n^2)\n    # because there are 10^5 variables\n    # each variable is checked 10^5 times\n    # complexity is O(n^3)\n    # so it's O(n^3)\n    # and it's only O(n^3) because it's using a list of 10^5 possible equations\n    # and the same equation can be used 10^5 times\n    # complexity is O(n^2)\n    # because there are 10^5 possible variables\n    # each variable is checked 10^5 times\n    # complexity is O(n^3)\n    # so it's O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3)\n    # complexity is O(n^3"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('-')\n    b = a[0].split('/')\n    l1 = len(b)\n    c = a[1].split('/')\n    l2 = len(c)\n    z = list(range(l1))\n    for i in range(l2):\n        z.insert(l1+i, i)\n    z.append('0')\n    j = []\n    d = []\n    for i in b:\n        if i == '':\n            j.append(0)\n        else:\n            j.append(int(i))\n    for i in c:\n        if i == '':\n            d.append(9)\n        else:\n            d.append(int(i))\n    e = []\n    for i in range(len(j)):\n        if j[i]!= 0:\n            for k in range(len(d)):\n                if d[k]!= 0:\n                    if k == i:\n                        e.append(j[i] + d[k])\n                    else:\n                        e.append(j[i] + d[k])\n                    d[k] = 0\n    e.sort()\n    for i in z:\n        if e[i]!= 0:\n            return 'false'\n    return ''.join(str(e[i]) for i in z)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    f = [0 for _ in range(len(stdin))]\n    g = [0 for _ in range(len(stdin))]\n    s = [0 for _ in range(len(stdin))]\n    for i, val in enumerate(stdin):\n        if val == '(':\n            f[i] = -1\n        if val == ')':\n            f[i] = i\n            s[i] = i\n        if val == '+' or val == '-' or val == '*' or val == '/':\n            g[i] = i\n    d = [(i, val) for i, val in enumerate(stdin)]\n    d.sort(key=lambda x: (x[0], x[1]))\n    d.append(None)\n    for i, val in enumerate(d):\n        if val is None:\n            break\n        if val[1] == '(':\n            f[i] = -1\n        if val[1] == ')':\n            f[i] = i\n            s[i] = i\n        if val[1] == '+' or val[1] == '-' or val[1] == '*' or val[1] == '/':\n            g[i] = i\n    S = {}\n    visited = set()\n    def dfs(a, b):\n        if a < b:\n            return\n        if a in S:\n            if S[a] > b:\n                S[a] = b\n        else:\n            S[a] = b\n        for i in range(a+1, b):\n            if i not in visited and i in S and d[i][1] == '(':\n                visited.add(i)\n                dfs(i, b)\n                visited.remove(i)\n            if i not in visited and i in S and d[i][1]!= '(':\n                visited.add(i)\n                dfs(i, S[i])\n                visited.remove(i)\n    dfs(0, len(stdin))\n    # print(S)\n    stack = []\n    for i in range(len(stdin)):\n        if f[i] == -1:\n            stack.append(stdin[i])\n            continue\n        if s[i]!= i:\n            continue\n        while stack:\n            if g[i] > g[stack[-1]]:\n                break\n            if g[stack[-1]] > g[i]:\n                if len(stack) > 1:\n                    del stack[-1]\n                else:\n                    break\n            else:\n                stack.append(stdin[i])\n                break\n    # print(stack)\n    return ''.join(stack)\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find number of paths from (1, 1) to (n, m) that meets\n    xor sum equal to k\n    \n    Time: O(n * m * (2 ** n + 2 ** m))\n    Space: O(2 ** n + 2 ** m)\n    '''\n    n, m, k = map(int, stdin.split(' '))\n    grid = [[int(num) for num in stdin.split('\\n')[row]] for row in range(n)]\n    \n    counts = [[0 for col in range(m + 1)] for row in range(n + 1)]\n    counts[1][1] = 1\n    \n    for row in range(n):\n        for col in range(m):\n            counts[row + 1][col + 1] += counts[row][col + 1]\n            counts[row + 1][col + 1] += counts[row + 1][col]\n            if grid[row][col] == k:\n                counts[row + 1][col + 1] += counts[row][col]\n    \n    return counts[n][m]\n    \n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    grid = []\n    for _ in range(n):\n        grid.append([int(i) for i in stdin.split(' ')])\n    \n    return str(check(n, m, grid, k))\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute solution value\n    Args:\n        stdin (str): Input string\n    Returns:\n        str: Solution value\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, k = map(int, stdin.readline().strip().split())\n    matrix = [stdin.readline().strip().split() for _ in range(n)]\n    \n    xor = 0\n    for r in range(n):\n        for c in range(m):\n            xor ^= int(matrix[r][c])\n    \n    return str(sum(bin(xor)[2:].count('1') == bin(k)[2:].count('1')))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # sys.stdin = open(\"./tests/input\")\n\n    # file = open(\"./tests/input\")\n    # n = file.readline()\n    # m = file.readline()\n    # k = file.readline()\n\n    n, m, k = [int(num) for num in stdin.splitlines()]\n\n    # rows = file.readlines()\n    # for row in rows:\n    #     row = [int(num) for num in row.split()]\n    #     matrix.append(row)\n\n    matrix = []\n    for i in range(n):\n        matrix.append([int(num) for num in stdin.splitlines()[i].split()])\n\n    # print(matrix)\n\n    visited = []\n    for i in range(n):\n        visited.append([False] * m)\n\n    ans = 0\n    q = deque()\n    q.append((0, 0, 0, 0))\n    while q:\n        x, y, k, ans = q.popleft()\n        if x == n - 1 and y == m - 1:\n            break\n        if x < n - 1 and not visited[x + 1][y]:\n            visited[x + 1][y] = True\n            q.append((x + 1, y, k ^ matrix[x + 1][y], ans))\n        if y < m - 1 and not visited[x][y + 1]:\n            visited[x][y + 1] = True\n            q.append((x, y + 1, k ^ matrix[x][y + 1], ans))\n    print(ans)\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = stdin.split(\" \")\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    \n    d = []\n    for _ in range(n):\n        d.append(list(map(int, stdin.split(\" \"))))\n    \n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    dp[0][0] = 1 if d[0][0] == k else 0\n    \n    for i in range(n):\n        for j in range(m):\n            if d[i][j] == 0:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = 0\n    \n    return str(dp[n - 1][m - 1])\n\nsolution(\"3 3 11\")\nsolution(\"3 4 2\")\nsolution(\"3 4 1000000000000000000\")\nsolution(\"3 4 10000000000000000\")\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"thisisexampletwo\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return stdin"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input[::-1]\n    return input\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1]\n    length = len(stdin)\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            length = length // i\n            stdin = stdin[:i] + stdin[i - 1::-1] + stdin[i:]\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    t = stdin[::-1]\n    s = t\n    for i in range(1, int(N**0.5)+1):\n        if N % i == 0:\n            s = s[:i] + s[i:].replace(s[i-1::-1], '', 1)\n            if s == t:\n                return s\n    return s\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(stdin)\n    for i in range(n):\n        t[i] = ''.join(reversed(t[i]))\n    return ''.join(t)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # --- Fill your solution here for the problem ---\n\n    # Return the result\n    return stdin\n    # ---------------------------------------------------------------------\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a + b)\n    return a + b\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split(' '))\n    return str(x+y)\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a+b)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    a, b = map(int, stdin.split())\n\n    # write your code in Python 3.6\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return sum of a and b\n\n    >>> solution('5 14')\n    19\n    >>> solution('381 492')\n    873\n    \"\"\"\n    a, b = stdin.split()\n    return int(a) + int(b)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = [int(a), int(b)]\n    return a+b\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bfc = BrainfuckInterpreter(memory_cells=30000,input_fun=input_fun)\n    return bfc.execute_program_from_string(stdin)\n\n\"\"\"\n\nclass BrainfuckInterpreter:\n    def __init__(self,memory_cells: int,input_fun):\n        self.memory_cells = memory_cells\n        self.input_fun = input_fun\n        self.code_table = self.create_code_table()\n        self.code_pointer = 0\n\n    def create_code_table(self) -> list:\n        code_table = [0] * self.memory_cells\n        for code in range(ord(\"!\"), ord(\"~\")+1):\n            code_table[code-ord(\"!\")] = code\n        return code_table\n\n    def execute_program_from_string(self,code: str) -> str:\n        self.code_pointer = 0\n        while self.code_pointer < len(code):\n            command_id = self.code_table[ord(code[self.code_pointer])-ord(\"!\")]\n            self.execute_command(command_id)\n            self.code_pointer += 1\n        return self.get_memory()\n\n    def execute_command(self,command_id: int) -> None:\n        if command_id == 1:\n            self.increment_cell()\n        elif command_id == 2:\n            self.decrement_cell()\n        elif command_id == 3:\n            self.increment_cell_pointer()\n        elif command_id == 4:\n            self.decrement_cell_pointer()\n        elif command_id == 5:\n            self.copy_value_to_cell()\n        elif command_id == 6:\n            self.copy_value_to_cell_pointer()\n        elif command_id == 7:\n            self.set_value_to_cell()\n        elif command_id == 8:\n            self.set_value_to_cell_pointer()\n        elif command_id == 9:\n            self.print_value()\n        elif command_id == 10:\n            self.print_value_from_cell()\n\n    def get_memory(self) -> str:\n        return \"\".join([chr(cell) for cell in self.memory_cells])\n\n    def increment_cell(self) -> None:\n        self.memory_cells[self.memory_cells[self.code_pointer]] += 1\n\n    def decrement_cell(self) -> None:\n        self.memory_cells[self.memory_cells[self.code_pointer]] -= 1\n\n    def increment_cell_pointer(self) -> None:\n        self.code_pointer += 1\n\n    def decrement_cell_pointer(self) -> None:\n        self.code_pointer -= 1\n\n    def copy_value_to_cell(self) -> None:\n        self.memory_cells[self.code_pointer] = self.memory_cells[self.code_pointer-1]\n\n    def copy_value_to_cell_pointer(self) -> None:\n        self.memory_cells[self.code_pointer] = self.memory_cells[self.code_pointer-1]\n        self.code_pointer += 1\n\n    def set_value_to_cell(self) -> None:\n        self.memory_cells[self.code_pointer] = self.code_table[self.code_pointer-1]\n\n    def set_value_to_cell_pointer(self) -> None:\n        self.memory_cells[self.code_pointer] = self.code_table[self.code_pointer-1]\n        self.code_pointer += 1\n\n    def print_value(self) -> None:\n        print(chr(self.memory_cells[self.code_pointer]),end=\"\")\n\n    def print_value_from_cell(self) -> None:\n        print(chr(self.memory_cells[self.code_pointer-1]),end=\"\")\n\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return doit(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to Brainfuck challenge.\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    brainfuck = list(map(int, stdin.split()))\n    for c in brainfuck:\n        if c == 1:\n            ++\n        elif c == 2:\n            --\n        elif c == 3:\n            ++\n            >>\n        elif c == 4:\n            --\n            <<\n        elif c == 5:\n            ++\n            <[<+>-]\n        elif c == 6:\n            --\n            >[>+<-]\n        elif c == 7:\n            ++\n            >[<->-]\n        elif c == 8:\n            --\n            <[>+<-]\n        elif c == 9:\n            >>\n        elif c == 0:\n            <<\n\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n\"\"\"\nfrom collections import deque\nimport re\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == '-' and stdin[1] == '-':\n        return '<[<+>-]<'\n    elif stdin[0] == '+' and stdin[1] == '+':\n        return '+++++++++>'\n    elif stdin[0] == '-' and stdin[1] == '+':\n        return '++++++++>'\n    elif stdin[0] == '+' and stdin[1] == '-':\n        return '+++++++>'\n    elif stdin[0] == '-' and stdin[1] == '-':\n        return '<[<->-]<'\n    elif stdin[0] == '+':\n        return '++++>'\n    elif stdin[0] == '-':\n        return '<[>-]<'\n    elif stdin[0] == '>':\n        return '<[>+]<'\n    elif stdin[0] == '<':\n        return '<[<+]<'\n    else:\n        return '++++++++++++++++++++++++++++++++++++++++++++++++.'\n        \n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    return ''\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdin\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdin\n\n\"\"\"\n\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You can always guess the solution of this problem!\n    '''\n    return ''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_queries = int(stdin.readline().strip())\n    queries = stdin.readlines()\n\n    for i in range(len(queries)):\n        queries[i] = int(queries[i].strip())\n\n    for i in range(number_of_queries):\n        number = queries[i]\n        element = 1\n        for j in range(1, number+1):\n            element = (10*element) % (10**18)\n        print(element % 10)\n\n\"\"\"\nfrom collections import deque\nfrom typing import Deque, List, Tuple\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\u041c\u0435\u0442\u043e\u0434 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n:\n1) \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u2014 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432;\n2) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430;\n3) \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0430 $[1, n]$;\n4) \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c;\n5) \u0435\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 n;\n6) \u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0443;\n7) \u0435\u0441\u043b\u0438 \u043c\u043e\u0436\u043d\u043e, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432;\n8) \u0438\u043d\u0430\u0447\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443.\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    output = 0\n    for n in range(2, int(num)+1):\n        n = str(n)\n        if '7' in n and '5' in n and '3' in n:\n            output += 1\n    return str(output)\n\"\"\"\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.strip()\n    return stdin"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if \"7\" in str(i) and \"5\" in str(i) and \"3\" in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Hint 1\nWe can observe that the Shichi-Go-San numbers do not have digits in common. So we can use the approach from Shichi-Go-San numbers which is finding Shichi-Go-San numbers whose digits do not contain 5 and 7.\n\nHint 2\nThe Shichi-Go-San numbers do not contain digits in common so we can use the approach from Shichi-Go-San numbers that is finding Shichi-Go-San numbers whose digits do not contain 3.\n\nHint 3\nThe Shichi-Go-San numbers do not contain digits in common so we can use the approach from Shichi-Go-San numbers that is finding Shichi-Go-San numbers whose digits do not contain 7.\n\nHint 4\nThe Shichi-Go-San numbers do not contain digits in common so we can use the approach from Shichi-Go-San numbers that is finding Shichi-Go-San numbers whose digits do not contain 5.\"\"\"\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            if len(set(str(i))) == 3 and '7' in str(i) and '5' in str(i) and '3' in str(i):\n                ans += 1\n        else:\n            if len(set(str(i))) == 3 and '7' in str(i) and '5' in str(i) and '3' in str(i):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # create a set of seven, five, and three\n    seven_five_three = set()\n    seven_five_three.add(7)\n    seven_five_three.add(5)\n    seven_five_three.add(3)\n    # create an empty set to add the seven, five, and three\n    seven_five_three_set = set()\n    seven_five_three_set.add(7)\n    seven_five_three_set.add(5)\n    seven_five_three_set.add(3)\n    # create a variable to hold the count of the seven, five, and three\n    count = 0\n    # iterate through each element\n    for i in range(0, len(stdin)):\n        # get the digit\n        digit = int(stdin[i])\n        # if the digit is less than 7\n        if digit < 7:\n            # add it to the count\n            count += 1\n            # if the number of seven, five, and three is greater than 3\n            if len(seven_five_three_set) > 3:\n                # remove the next number from the set\n                seven_five_three_set.remove(digit)\n            # else\n            else:\n                # add the next number to the set\n                seven_five_three_set.add(digit)\n        # if the digit is 7\n        elif digit == 7:\n            # add it to the count\n            count += 1\n            # add it to the seven_five_three_set\n            seven_five_three_set.add(digit)\n        # if the digit is greater than 7\n        elif digit > 7:\n            # add it to the count\n            count += 1\n            # remove the digit from the set\n            seven_five_three_set.remove(digit)\n        # if the digit is 5\n        elif digit == 5:\n            # add it to the count\n            count += 1\n            # remove it from the set\n            seven_five_three_set.remove(digit)\n        # if the digit is 3\n        elif digit == 3:\n            # add it to the count\n            count += 1\n            # remove it from the set\n            seven_five_three_set.remove(digit)\n    # return the count of the seven, five, and three\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_number = stdin\n    output_number = 0\n    number_base_ten = int(input_number)\n    # Range over the numbers from 1 to N\n    for number in range(1, number_base_ten + 1):\n        # Now try to generate Shichi-Go-San numbers\n        number_str = str(number)\n        seven_count = 0\n        five_count = 0\n        three_count = 0\n        for char in number_str:\n            if char == '7':\n                seven_count += 1\n            elif char == '5':\n                five_count += 1\n            elif char == '3':\n                three_count += 1\n            else:\n                break\n\n        # The number does not meet the requirement: the digit 7 does not appear\n        if seven_count == 0:\n            continue\n        # The number does not meet the requirement: the digit 5 does not appear\n        if five_count == 0:\n            continue\n        # The number does not meet the requirement: the digit 3 does not appear\n        if three_count == 0:\n            continue\n\n        # Finally, the number meets all the requirements. Increment the number of output Shichi-Go-San numbers\n        output_number += 1\n\n    print(output_number)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('575')\n    4\n    >>> solution('100')\n    0\n    \"\"\"\n    N = int(stdin)\n    ans = 0\n    for i in range(1, N + 1):\n        if (\n            \"7\" in str(i)\n            or \"5\" in str(i)\n            or \"3\" in str(i)\n            and \"7\" not in str(i)\n            and \"5\" not in str(i)\n            and \"3\" not in str(i)\n        ):\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = set()\n    for i in range(1, n + 1):\n        str_i = str(i)\n        sevens = str_i.count(\"7\")\n        fives = str_i.count(\"5\")\n        threes = str_i.count(\"3\")\n        if (sevens > 0 and fives > 0) or (fives > 1 and threes > 1):\n            continue\n        s.add(i)\n    print(len(s))\n    return \"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_colors = int(stdin)\n    colors = []\n    for i in range(num_colors):\n        colors.append(input())\n\n    # colors = ['0', '1', '0', '1', '0', '1', '0', '1', '0', '1']\n    # colors = ['1', '0', '1', '0', '1', '0', '1', '0', '1', '0']\n\n    count = 0\n    for i in range(1, len(colors) - 1):\n        if colors[i] == colors[i - 1] and colors[i] == colors[i + 1]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return str(len(stdin) // 2)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2 == 0:\n        return (len(stdin) // 2)\n    return (len(stdin) // 2) + 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    count = 0\n    number_of_tiles = stdin.split()[0]\n    for i in range(len(number_of_tiles)):\n        if number_of_tiles[i] == '0':\n            count += 1\n    \n    print(count)"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"The minimum number of tiles that need to be repainted is \" + stdin[len(stdin) // 2]\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    result = 'APPROVED' if all(x % 3 == 0 or x % 5 == 0 for x in A) else 'DENIED'\n    print(result)"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    even = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            even += 1\n    if even == n:\n        return 'APPROVED'\n    return 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    integers = [int(x) for x in stdin.readline().split()]\n\n    for x in integers:\n        if x % 2!= 0:\n            return 'DENIED'\n\n    return 'APPROVED'\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nis_div_by_3 = [True if i % 3 == 0 else False for i in a]\nis_div_by_5 = [True if i % 5 == 0 else False for i in a]\n\nfor i in range(n):\n    if is_div_by_3[i] and is_div_by_5[i]:\n        print(\"APPROVED\")\n        break\nelse:\n    print(\"DENIED\")\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    document = stdin.split()\n    \n    n = int(document[0])\n    even = []\n    for i in document[1:]:\n        if int(i) % 2 == 0:\n            even.append(int(i))\n            \n    for i in even:\n        if i % 3!= 0 and i % 5!= 0:\n            return \"DENIED\"\n    \n    return \"APPROVED\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    allowed = True\n    \n    for i in stdin.split('\\n')[1:]:\n        if int(i) % 2!= 0:\n            allowed = False\n        elif int(i) % 3!= 0 and int(i) % 5!= 0:\n            allowed = False\n    \n    if allowed:\n        return 'APPROVED'\n    else:\n        return 'DENIED'\n        \nprint(solution(stdin.read().strip()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        if a[i] % 2 == 0 and (a[i] % 3 == 0 or a[i] % 5 == 0):\n            pass\n        else:\n            return \"DENIED\"\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    arr = [int(s) for s in stdin.readline().split()]\n    \n    for i in arr:\n        if i % 2 == 0:\n            if not (i % 3 or i % 5):\n                pass\n            else:\n                return \"DENIED\"\n    \n    return \"APPROVED\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = list(map(int, stdin.split(' ')))\n    even = []\n    for i in num:\n        if i % 2 == 0:\n            even.append(i)\n    for i in even:\n        if i % 3!= 0 and i % 5!= 0:\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take in a line of input containing N integers and write out \"APPROVED\" if the document meets the criteria\n    or \"DENIED\" otherwise.\n\n    :param stdin: The line of input.\n    :return: The line of output.\n    \"\"\"\n    numbers = stdin.split()\n    numbers = [int(i) for i in numbers]\n    result = [str(i) for i in numbers if (i % 2 == 0) and (i % 3 == 0 or i % 5 == 0)]\n    if len(result) == 0:\n        return \"DENIED\"\n    else:\n        return \"APPROVED\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    ans = 'Yes'\n    for i in range(0, len(line[0]), 2):\n        if line[0][i] == 'L':\n            ans = ans and (line[0][i+1] == 'R' or line[0][i+1] == 'U' or line[0][i+1] == 'D')\n        elif line[0][i] == 'R':\n            ans = ans and (line[0][i+1] == 'L' or line[0][i+1] == 'U' or line[0][i+1] == 'D')\n        elif line[0][i] == 'U':\n            ans = ans and (line[0][i+1] == 'L' or line[0][i+1] == 'R' or line[0][i+1] == 'D')\n        else:\n            ans = ans and (line[0][i+1] == 'L' or line[0][i+1] == 'R' or line[0][i+1] == 'U')\n    for i in range(1, len(line[0]), 2):\n        if line[0][i] == 'L':\n            ans = ans and (line[0][i-1] == 'R' or line[0][i-1] == 'U' or line[0][i-1] == 'D')\n        elif line[0][i] == 'R':\n            ans = ans and (line[0][i-1] == 'L' or line[0][i-1] == 'U' or line[0][i-1] == 'D')\n        elif line[0][i] == 'U':\n            ans = ans and (line[0][i-1] == 'L' or line[0][i-1] == 'R' or line[0][i-1] == 'D')\n        else:\n            ans = ans and (line[0][i-1] == 'L' or line[0][i-1] == 'R' or line[0][i-1] == 'U')\n    return ans\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    str1: str = stdin\n    if len(str1) % 2 == 0:\n        for i in range(1, len(str1)):\n            if (str1[i] == 'U' and str1[i-1]!= 'D') or (str1[i] == 'R' and str1[i-1]!= 'L') or (str1[i] == 'L' and str1[i-1]!= 'R') or (str1[i] == 'D' and str1[i-1]!= 'U'):\n                print('No')\n                break\n    else:\n        for i in range(1, len(str1), 2):\n            if (str1[i] == 'U' and str1[i-1]!= 'D') or (str1[i] == 'R' and str1[i-1]!= 'L') or (str1[i] == 'L' and str1[i-1]!= 'R') or (str1[i] == 'D' and str1[i-1]!= 'U'):\n                print('No')\n                break\n    print('Yes')\n    return ''\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if all([\n        any([\n            c in 'DR'\n            for c in s\n            if index % 2 == 0\n        ]) and\n        all([\n            c in 'LR'\n            for c in s\n            if index % 2 == 1\n        ])\n        for index, s in enumerate(stdin)\n    ]) else \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    d = {}\n    for i in S:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    odd = False\n    even = False\n    for i in d:\n        if i == 'L':\n            odd = True\n        if i == 'R':\n            odd = False\n        if i == 'U':\n            even = True\n        if i == 'D':\n            even = False\n        if odd and even:\n            break\n    if not odd and not even:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    direction: str = stdin[0]\n    r: int = 1\n    u: int = 1\n    d: int = 1\n    l: int = 1\n    print(direction)\n    for i in range(1, len(stdin)):\n        if stdin[i] == 'R' and r:\n            r -= 1\n            direction += stdin[i]\n        if stdin[i] == 'L' and l:\n            l -= 1\n            direction += stdin[i]\n        if stdin[i] == 'U' and u:\n            u -= 1\n            direction += stdin[i]\n        if stdin[i] == 'D' and d:\n            d -= 1\n            direction += stdin[i]\n        if not r and not l and not u and not d:\n            if stdin[i] == 'R' or stdin[i] == 'U':\n                direction += stdin[i]\n            elif stdin[i] == 'D' or stdin[i] == 'L':\n                direction += stdin[i]\n    if direction.count('R') == direction.count('U') and direction.count('D') == direction.count('L'):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_easy_playable(str_in: str) -> bool:\n        def is_odd(index: int) -> bool:\n            return index % 2 == 0\n\n        def is_even(index: int) -> bool:\n            return index % 2 == 1\n\n        def is_right(index: int) -> bool:\n            return str_in[index] == \"R\"\n\n        def is_left(index: int) -> bool:\n            return str_in[index] == \"L\"\n\n        def is_up(index: int) -> bool:\n            return str_in[index] == \"U\"\n\n        def is_down(index: int) -> bool:\n            return str_in[index] == \"D\"\n\n        def is_left_up(index: int) -> bool:\n            return is_left(index) and is_up(index)\n\n        def is_right_up(index: int) -> bool:\n            return is_right(index) and is_up(index)\n\n        def is_left_down(index: int) -> bool:\n            return is_left(index) and is_down(index)\n\n        def is_right_down(index: int) -> bool:\n            return is_right(index) and is_down(index)\n\n        def is_left_or_right_or_up_or_down(index: int) -> bool:\n            return is_left_up(index) or is_right_up(index) or is_left_down(index) or is_right_down(index)\n\n        return all(\n            [\n                is_left_or_right_or_up_or_down(index)\n                for index in range(0, len(str_in))\n            ]\n        )\n\n    return \"Yes\" if is_easy_playable(stdin) else \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    data = stdin\n    # pattern to be matched\n    pattern = \"RLUD\"\n    # init result\n    result = \"\"\n\n    # check if the string is in the pattern\n    for i in range(0, len(data)):\n        if (data[i] not in pattern):\n            result = \"NO\"\n            break\n        else:\n            if ((i % 2) == 1):\n                if (data[i] not in \"RL\"):\n                    result = \"NO\"\n                    break\n            else:\n                if (data[i] not in \"UD\"):\n                    result = \"NO\"\n                    break\n    print(result)\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 1:\n        return \"Yes\"\n\n    if len(stdin) % 2 == 0:\n        for i, s in enumerate(stdin):\n            if i % 2 == 0:\n                if s == \"L\":\n                    pass\n                elif s == \"R\":\n                    return \"No\"\n                elif s == \"U\":\n                    pass\n                elif s == \"D\":\n                    return \"No\"\n            else:\n                if s == \"R\":\n                    pass\n                elif s == \"U\":\n                    pass\n                elif s == \"D\":\n                    pass\n    else:\n        for i, s in enumerate(stdin):\n            if i % 2 == 0:\n                if s == \"L\":\n                    pass\n                elif s == \"R\":\n                    return \"No\"\n                elif s == \"U\":\n                    pass\n                elif s == \"D\":\n                    return \"No\"\n            else:\n                if s == \"R\":\n                    pass\n                elif s == \"U\":\n                    pass\n                elif s == \"D\":\n                    pass\n\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 'Yes' if (len(stdin) <= 100) and (stdin.count('L') == stdin.count('R') + stdin.count('U') + stdin.count('D')) and (stdin.count('L') == stdin.count('U') + stdin.count('D')) else 'No'\n    return result"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    for i in range(0, len(string), 2):\n        if string[i] in ['R', 'U', 'D'] and string[i + 1] in ['R', 'U', 'D']:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n\nsolution(stdin)\n\n-----Test Case-----\nInput\nRUDLUDR\nOutput\nYes\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute the solution to the problem\n    :param stdin: standard input\n    :return: solution string\n    \"\"\"\n    inputs = [int(x) for x in stdin.split('\\n')]\n    N, A, B, C, D, E = inputs[0], inputs[1], inputs[2], inputs[3], inputs[4], inputs[5]\n    return str(max(N * (6 + E) - max(A, B, C, D), N * E))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split('\\n')[0].split(' '))\n    c = min(c, d, e)\n    d = min(d, e)\n    e = min(e, c)\n    transit_time = a + b + c + d + e\n    if transit_time % 2 == 0:\n        return str(transit_time // 2)\n    else:\n        return str((transit_time // 2) + 1)\n\nprint(solution(input()))\n\nimport math"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = [int(x) for x in stdin.split()]\n    total_time = 0\n    for i in range(n):\n        if i == 0:\n            train_passengers = a\n            train_passengers_time = 1\n            bus_passengers = b\n            bus_passengers_time = 1\n            taxi_passengers = c\n            taxi_passengers_time = 1\n        else:\n            if train_passengers < a:\n                train_passengers += a - train_passengers\n                train_passengers_time += 1\n            if bus_passengers < b:\n                bus_passengers += b - bus_passengers\n                bus_passengers_time += 1\n            if taxi_passengers < c:\n                taxi_passengers += c - taxi_passengers\n                taxi_passengers_time += 1\n        total_time = max(total_time, train_passengers_time, bus_passengers_time, taxi_passengers_time)\n    return total_time"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return result\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    pass\n    return result"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"returns minimum time for N people to reach City 6\"\"\"\n    n, a, b, c, d, e = [int(s) for s in stdin.split()]\n    return max(2 * a + 2 * b + 3 * c + 2 * d + 2 * e, n * a + n * b + n * c + n * d + n * e)"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A: int = int(stdin)\n    return A\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve_leetcode_solution(stdin))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem\"\"\"\n    N = int(stdin.readline())\n    total_count = 0\n    zero_count = 0\n    nine_count = 0\n    for _ in range(N):\n        n = int(stdin.readline())\n        total_count += n\n        if n == 0:\n            zero_count += 1\n        if n == 9:\n            nine_count += 1\n\n    count_for_zero = total_count - zero_count * (zero_count + 1) // 2\n    count_for_nine = total_count - nine_count * (nine_count + 1) // 2\n\n    return count_for_zero * count_for_nine % (10**9 + 7)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(0, n+1):\n        for j in range(0, n+1):\n            if i+j == n:\n                count += 1\n    return str(count%(10**9+7))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    zero_count = 0\n    nine_count = 0\n    one_count = 0\n    for i in range(n):\n        current = int(stdin[i])\n        if current == 0:\n            zero_count += 1\n        elif current == 9:\n            nine_count += 1\n        else:\n            one_count += 1\n    if zero_count == 0:\n        zero_count += 1\n    if nine_count == 0:\n        nine_count += 1\n    return str(zero_count * nine_count)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 2\n\n    def is_good_seq(seq: list) -> bool:\n        if seq[0] == 0:\n            return False\n        if seq[-1] == 9:\n            return False\n        for i in range(len(seq) - 1):\n            if seq[i + 1] - seq[i]!= 1:\n                return False\n        return True\n\n    count = 0\n    for i in range(1, n + 1):\n        seq = list(map(int, list(str(i))))\n        if is_good_seq(seq):\n            count += 1\n    return count\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"0\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum prime number greater than or equal to X.\n\n    >>> solution(\"20\")\n    23\n    >>> solution(\"10\")\n    11\n    >>> solution(\"2\")\n    3\n    \"\"\"\n    X = int(stdin)\n    for i in range(X):\n        if not is_prime(i):\n            continue\n        if is_prime(i + 2):\n            return i + 2\n    return -1\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #Imports\n    import math\n    #Inputs\n    x = int(stdin)\n    #Solution\n    num = int(x)\n    while(num < 2*x):\n        if isPrime(num):\n            return num\n        num+=1\n    return -1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime = []\n    is_prime = []\n\n    for i in range(2, X + 1):\n        is_prime.append(True)\n\n    for i in range(2, X + 1):\n        if is_prime[i - 2]:\n            prime.append(i)\n            for j in range(i * i, X + 1, i):\n                is_prime[j - 2] = False\n\n    return prime[-1]\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_min_prime_number_greater_than_or_equal_to_x(int(stdin)))\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n    n = int(stdin)\n    while not is_prime(n):\n        n += 1\n    return str(n)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum prime number greater than or equal to X.\"\"\"\n    pass\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 2\n    while x > i:\n        if x % i == 0:\n            x += 1\n            i = 2\n        else:\n            i += 1\n    return x"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    \n    # Check if n is even.\n    if n % 2 == 0:\n        n += 1\n    \n    # Check if n is odd.\n    for i in range(3, n + 1, 2):\n        if is_prime(i):\n            continue\n        else:\n            n = i\n            break\n    \n    return str(n)\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Given X, find the minimum prime number greater than or equal to X.\n    # X <= 0\n    # The minimum prime number greater than or equal to X is 2.\n    x = int(stdin)\n    if x <= 0:\n        return \"2\"\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 3\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 4\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 5\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 6\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 7\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 8\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 9\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 10\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 11\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 12\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 13\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 14\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 15\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 16\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 17\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 18\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 19\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 20\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 21\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 22\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 23\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 24\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 25\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 26\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 27\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 28\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 29\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 30\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 31\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 32\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 33\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 34\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 35\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 36\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 37\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 38\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 39\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 40\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 41\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 42\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 43\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 44\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 45\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 46\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 47\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 48\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 49\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 50\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 51\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 52\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 53\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 54\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 55\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 56\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 57\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 58\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 59\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 60\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 61\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 62\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 63\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 64\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 65\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 66\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 67\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 68\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 69\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 70\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 71\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 72\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 73\n    # The minimum prime number greater than or equal to X is always a multiple of 2\n    # x = 74\n    # The minimum prime"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.split('\\n')[0])\n    sequence = list(map(int, stdin.split('\\n')[1:]))\n    # count_of_different_elements = 0\n    for i in range(n-1):\n        if sequence[i] == sequence[i+1]:\n            # count_of_different_elements += 1\n            # if count_of_different_elements > 1:\n            #     return count_of_different_elements\n            sequence[i+1] = sequence[i]\n    # return count_of_different_elements + 1\n    return count_of_different_elements + 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))[1:]\n    d = collections.Counter(a)\n    dd = list(d.keys())\n    dd.sort()\n    if len(dd) == 1:\n        return 0\n    a.sort()\n    x = []\n    for i in range(len(a) - 2):\n        if a[i]!= a[i + 2]:\n            x.append(a[i])\n    c = collections.Counter(x)\n    c = list(c.values())\n    if len(c) == 1:\n        return n // 2\n    if c[0] == 1:\n        return n // 2\n    else:\n        return len(x)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(c) for c in stdin.split(\"\\n\")[1].split()]\n    # a = [int(c) for c in stdin.splitlines()[1].split()]\n    c = len(set(a))\n    # print(a)\n    # print(c)\n    return c\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # Return your answer\n    n = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split()]\n    a, b = set(), set()\n    res = 0\n    for i in range(n-1):\n        if seq[i] == seq[i+1]:\n            res += 1\n        else:\n            a.add(seq[i])\n            b.add(seq[i+1])\n    for i in a:\n        if i in b:\n            res += 1\n    print(res)\n    return \"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # n = stdin.split(\" \")[0]\n    n, arr = stdin.split(\" \")\n    arr = list(map(int, arr.split()))\n    arr.sort()\n    count = 0\n    for i in range(1, n - 2, 2):\n        if arr[i] == arr[i + 2]:\n            count += 1\n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    if n % 2:\n        return \"Impossible\"\n    x = sorted(v)\n    count = 0\n    for i in range(1, n, 2):\n        if x[i]!= x[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = [int(i) for i in stdin.split()]\n    arr = []\n    for i in range(0, n - 2):\n        if v[i] == v[i + 2]:\n            arr.append(v[i])\n    if len(arr) < 2:\n        return 'Impossible'\n    else:\n        return str(len(set(v) - set(arr)))"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.strip().split()]\n    if n < 2 or n > 10 ** 5:\n        return '-1'\n    if n % 2 == 0:\n        return '-1'\n    a[0] = a[1]\n    a[1] = a[2]\n    counter = 1\n    while a[counter] == a[counter + 2]:\n        a[counter] = a[counter + 2]\n        counter += 2\n    if counter == 0:\n        return '0'\n    else:\n        return str(counter)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    ret = 0\n    i = 0\n    while i < n - 2:\n        if arr[i] == arr[i + 2]:\n            ret += 1\n            i += 2\n        else:\n            i += 1\n    return ret\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task:\n        - Find the minimum number of elements that needs to be replaced.\n    Idea:\n        - For each value, if the next one is the same, and if there are two differents, we know that we can replace one of them.\n    Complexity:\n        n = len(stdin)\n        Time: O(n)\n        Space: O(n)\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    d = dict()\n    for i, v in enumerate(sequence):\n        if i + 1 < len(sequence):\n            if sequence[i + 1] == v:\n                if v not in d:\n                    d[v] = [i + 1]\n                else:\n                    d[v].append(i + 1)\n            else:\n                if v not in d:\n                    d[v] = [i]\n                else:\n                    d[v].append(i)\n        if i + 2 < len(sequence):\n            if sequence[i + 2] == v:\n                if v not in d:\n                    d[v] = [i + 1, i + 2]\n                else:\n                    d[v].append(i + 1)\n                    d[v].append(i + 2)\n    minimum = n\n    for key in d.keys():\n        if len(d[key]) == 2:\n            minimum = min(minimum, abs(d[key][0] - d[key][1]))\n    return minimum\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... '5 100 90 80\\\\n98\\\\n40\\\\n30\\\\n21\\\\n80\\\\n'\n   ... )\n    23\n\n    >>> solution(\n   ... '6 91 94 78\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n71\\\\n72\\\\n79\\\\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, A, B, C = map(int, stdin.split())\n    l = map(int, stdin.split())\n    '''\n    N, A, B, C = 5, 100, 90, 80\n    l = [98, 40, 30, 21, 80]\n    mp = 0\n    # Calculate the amount of MP\n    for i in range(len(l)):\n        l[i] *= l[i]\n        mp += 10\n    # Sort the list from biggest to smallest\n    l = sorted(l, reverse=True)\n    # Sort the list in ascending order\n    l.sort()\n    # Get the position of the smallest value\n    position = l.index(1)\n    if position == 0:\n        mp += 10\n    elif position == 1:\n        mp += 14\n    else:\n        mp += 18\n    # Get the amount of times we can use the extension magic\n    mp += (N-position)//2\n    # Get the amount of times we can use the shortening magic\n    mp += (N-position-1)//2\n    # Get the amount of times we can use the compositio magic\n    mp += (N-position-2)//2\n    # If we don't have a bamboo of length 80\n    if l[position]!= 80:\n        mp += 15\n    # Print the amount of MP\n    print(mp)\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for Custom Adapter Array problem\"\n    # Get input\n    n, a, b, c = list(map(int, stdin.split()))\n\n    # Compute result\n    mp = 0\n    while a > b or b > c:\n        if b > c:\n            a, b = b, a\n            mp += 1\n        if a > b:\n            b, c = c, b\n            mp += 1\n        if a == b == c:\n            mp += 1\n            break\n    print(mp)\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\")\n    23\n    >>> solution(\"4 101 0 0\\n2\\n4\")\n    10\n    >>> solution(\"7 101 102 104 105 106 107 109\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n109\")\n    15\n    \"\"\"\n    N, A, B, C = map(int, stdin.split())\n    MP = 0\n    for l in sorted(map(int, stdin.split())):\n        if l < A:\n            MP += (A - l)\n            A = l\n        elif l < B:\n            MP += (B - l)\n            B = l\n        elif l < C:\n            MP += (C - l)\n            C = l\n\n    return MP\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    mp = 0\n    bamboo_length = [0, 0, 0]\n    for i, line in enumerate(stdin.split('\\n')):\n        if i == 0:\n            N, A, B, C = map(int, line.split())\n        elif i == 1:\n            bamboo_length = list(map(int, line.split()))\n        else:\n            mp += 10\n            for j in range(3):\n                if bamboo_length[j] > 1:\n                    count += 1\n                    bamboo_length[j] -= 1\n                    mp -= 1\n                    break\n    print(count * 2 + mp)"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split('\\n')]\n    bamboo = [int(x) for x in stdin.split('\\n')][1:]\n    bamboo = [int(x) for x in stdin.split('\\n')][1:]\n    \n    print(n,a,b,c)\n    \n    if a >= 2*c and b >= 2*a:\n        return '0'\n    \n    a = b = c = 0\n    \n    while n:\n        \n        # first solution\n        \n        while a < c:\n            a += 1\n            if a >= 2*c:\n                break\n        if a >= 2*c:\n            break\n        b += 1\n        if a < b:\n            break\n        c += 1\n        \n        # second solution\n        \n        if a < c and b > c:\n            a += 1\n            c -= 1\n        if a < c and b < c:\n            a += 1\n            b += 1\n            c -= 2\n        if a < c and b < c:\n            a += 1\n            b += 1\n            c -= 1\n        if a < c and b < c:\n            a += 1\n            b += 1\n            c -= 1\n        \n        if a < c and b > c:\n            a += 1\n            c -= 1\n        if a < c and b < c:\n            a += 1\n            b += 1\n            c -= 2\n        if a < c and b < c:\n            a += 1\n            b += 1\n            c -= 1\n        if a < c and b < c:\n            a += 1\n            b += 1\n            c -= 1\n        \n        \n        n -= 1\n    return str(a + b + c)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    bamboos = [int(bamboo) for bamboo in stdin.splitlines()[:3]]\n    bamboo_list = list(range(max(bamboos), 0, -1))\n    cost = 0\n    while True:\n        for i in range(1, len(bamboos)):\n            for magic in [\"extension\", \"shortening\", \"composition\"]:\n                # increase the current bamboos\n                if magic == \"extension\" and bamboos[i] < len(bamboo_list):\n                    bamboos[i] += 1\n                    cost += 1\n                    if sum(bamboos) >= sum(bamboos[1:]):\n                        return str(cost)\n\n                # decrease the current bamboos\n                elif magic == \"shortening\" and bamboos[i] >= 2:\n                    bamboos[i] -= 1\n                    cost += 1\n                    if sum(bamboos) >= sum(bamboos[1:]):\n                        return str(cost)\n\n                # compose the current bamboos\n                elif magic == \"composition\" and bamboos[i] > bamboos[i - 1]:\n                    bamboos[i - 1] = bamboos[i - 1] + bamboos[i]\n                    bamboos.pop(i)\n                    cost += 10\n                    if sum(bamboos) >= sum(bamboos[1:]):\n                        return str(cost)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Given a set of N bamboos, A B and C, print out the minimum\n    amount of MP needed to achieve the objective.\n\n    The objective is to use some of these bamboos (possibly all)\n    to obtain three bamboos of lengths A, B and C. For that, you can\n    use the following three kinds of magics any number:\n\n    Extension Magic: Consumes 1 MP (magic point).\n    Shortening Magic: Consumes 1 MP.\n    Composition Magic: Consumes 10 MP.\n\n    At least how much MP is needed to achieve the objective?\n\n    >>> solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80')\n    23\n    '''\n    return ''\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    shift = int(stdin.readline())\n    s = stdin.readline()\n    new_s = ''\n    for ch in s:\n        new_s += chr((ord(ch)-ord('A')+shift)%26+ord('A'))\n    print(new_s)\n    return new_s\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    # Get user input and read the second line to get the num\n    # num = stdin.split()\n    # num = int(num[0])\n    # # Get the string to shift the characters\n    # input = stdin.split('\\n')\n    # # Shift each character\n    # for char in range(len(input[0])):\n    #     print(input[0][char])\n    #     print(chr(ord(input[0][char]) + num))\n    #     print(ord(input[0][char]) + num)\n    #     print(\"Input: \" + input[0][char] + \" Output: \" + chr(ord(input[0][char]) + num))\n    #     input[0] = input[0][:char] + chr(ord(input[0][char]) + num) + input[0][char + 1:]\n    # return input[0]"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    shift = n % 26\n    # print(shift)\n    shift = chr(shift + 97)\n    # print(shift)\n    return shift * len(stdin)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(chr(ord(c) - (ord(c) - ord('A') + int(stdin))) for c in stdin)\n    \n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    shift = int(string[0])\n    string = string[1]\n    shifted = []\n    for char in string:\n        shifted.append(chr((ord(char) + shift - ord('A')) % 26 + ord('A')))\n    return ''.join(shifted)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, string = stdin.split()\n    return ''.join(chr(ord('A') + ((ord(c) - ord('A')) + int(N)) % 26) for c in string)"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(chr((ord(c) - ord('A') + int(stdin)) % 26 + ord('A')) for c in stdin)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # cast stdin to integer\n    # get the shift\n    # run through the string\n    # for each letter\n    # if last letter, if not shift it\n    # shift it\n    # else if not last letter, shift it\n    # else shift it\n    # output shifted string\n    # cast output to str\n    # return output\n    input = stdin.split()\n    shift = int(input[0])\n    string = input[1]\n    newstring = ''\n    for char in string:\n        if char == 'Z':\n            newstring += 'A'\n        elif char == 'Z':\n            newstring += 'A'\n        else:\n            if ord(char) + shift > 122:\n                newstring += chr(96 + (ord(char) + shift) - 122)\n            else:\n                newstring += chr(ord(char) + shift)\n    return newstring\n\nprint(solution(stdin))"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  shift = stdin[0]\n  string = stdin[1]\n  print(\"\".join(chr((ord(char) + (int(shift) % 26)) % 26) for char in string))\n  \nsolution(input())\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = int(stdin.readline())\n    b = [int(i) for i in stdin.readline().split()]\n    a = [2] * n\n    p = [2]\n\n    for i in range(n):\n        if b[i] < a[i]:\n            a[i] = b[i]\n        elif b[i] % a[i] == 0:\n            a[i] = a[i] * 2\n        else:\n            for j in range(2, b[i] + 1):\n                if b[i] % j == 0 and j!= a[i]:\n                    a[i] = j\n                    break\n\n    for i in range(n):\n        a[i] = p[b.index(a[i])]\n        p.append(a[i])\n\n    return''.join([str(i) for i in a])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * 2 * n\n    for i in range(n):\n        if is_prime(a[i]):\n            b[i] = a[i]\n            b[i + n] = a[i]\n        else:\n            k = get_greatest_divisor(a[i])\n            b[2 * i] = k\n            b[2 * i + 1] = k\n    b = list(sorted(set(b)))\n    return''.join(map(str, b))\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the array a that forms the given array b\n    '''\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split(' ')]\n\n    # Get the prime numbers up to the max value of the input array\n    primes = {x: True for x in range(2, max(b) + 1)}\n    for i in range(2, max(primes.keys()) + 1):\n        if primes[i]:\n            for j in range(i * 2, max(primes.keys()) + 1, i):\n                primes[j] = False\n\n    # For each element of the input array, if it is prime, it is added to the array\n    a = []\n    for i in range(n):\n        if b[i] in primes:\n            a.append(b[i])\n        else:\n            a.append(max([x for x in primes if x > b[i] and primes[x]]))\n    \n    # Shuffle the array and return\n    shuffle(a)\n    return a\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the smallest array of length 2n that forms the given array b\n    \"\"\"\n    \n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    \n    for i in range(0, len(a), 2):\n        if a[i] > 2 * 10**5:\n            return -1\n        a[i] = 2\n        for x in range(2, a[i]):\n            if a[i] % x == 0:\n                a[i] = x\n                break\n        a[i + 1] = int(a[i] * 2)\n    \n    return''.join([str(x) for x in a])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the given numbers are the input array\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n            i += 1\n        else:\n            i += 1\n    stdout = [0] * 2 * n\n    for i in range(n):\n        stdout[2 * i] = primes[i]\n        stdout[2 * i + 1] = get_max_divisor(primes[i])\n    return''.join(str(elem) for elem in stdout)\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [None] * (2 * n)\n    for i in range(n):\n        if a[i] % 2 == 1:\n            j = 2\n            while b[i * 2] is not None:\n                if a[i] % j!= 0:\n                    break\n                j *= 2\n            b[i * 2] = a[i]\n        else:\n            divisor = 2\n            while divisor * divisor <= a[i]:\n                if a[i] % divisor == 0:\n                    break\n                divisor += 1\n            b[i * 2] = a[i] // divisor\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_prime_list(n: int) -> list[int]:\n        primes = [2]\n        number = 3\n        while len(primes) < n:\n            for prime in primes:\n                if number % prime == 0:\n                    break\n            else:\n                primes.append(number)\n            number += 2\n        return primes[:n]\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b += get_prime_list(2 * n)\n    b.sort()\n    a = []\n    a.append(b[0])\n    for i in range(1, 2 * n):\n        a.append(b[i] // a[-1])\n    a.sort()\n    print(*a)\n    return None\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    count = int(l[0])\n    l = list(map(int, l[1:]))\n    temp = l[:]\n    s = [1]\n    for i in range(count):\n        s.append(2)\n    res = []\n    for i in range(2, count):\n        if temp[i] % 2 == 1:\n            res.append(temp[i])\n            temp[i * 2] = temp[i]\n            temp[i * 2 + 1] = temp[i]\n            s.append(2)\n        else:\n            for j in range(2, i + 1):\n                if temp[i] % j == 0:\n                    res.append(j)\n                    temp[i * 2] = temp[i] // j\n                    temp[i * 2 + 1] = j\n                    s.append(j)\n                    break\n        s.append(1)\n    s.pop()\n    res = list(map(str, res))\n    print(' '.join(res))\n    return\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    arr = [0] * n\n    for i in range(k):\n        if i % 2 == 0:\n            arr[i] = min(a)\n            a.remove(min(a))\n        else:\n            arr[i] = max(a)\n            a.remove(max(a))\n    return ''.join(['1' if i % 2 == 0 else '2' for i in arr])"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    teams = [[], []]\n    a.sort(reverse=True)\n    max_skill = a[0]\n    k_min = k_max = k\n    while max_skill > 0:\n        for i in range(n):\n            if a[i] == max_skill and len(teams[0]) < k_min:\n                teams[0].append(i)\n                a[i] -= 1\n                max_skill = a[i]\n                k_min -= 1\n                break\n            elif a[i] == max_skill and len(teams[1]) < k_max:\n                teams[1].append(i)\n                a[i] -= 1\n                max_skill = a[i]\n                k_max -= 1\n                break\n        if len(teams[0]) == k_min and len(teams[1]) == k_max:\n            break\n    return ''.join([str(i % 2 + 1) for i in range(n)])"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    prev = None\n    res = []\n    for i in range(n):\n        if prev is None:\n            res.append(1)\n            prev = arr[i]\n        else:\n            if abs(arr[i] - prev) > k:\n                res.append(1)\n                prev = arr[i]\n            else:\n                res.append(2)\n                prev = arr[i]\n    return \"\".join(map(str, res))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_students, num_choose = map(int, stdin.split())\n    programing_skills = sorted(map(int, stdin.split()))\n\n    team_1, team_2 = [], []\n    #     find_team(programing_skills, team_1, team_2)\n    for p_skills in programing_skills:\n        if len(team_1) < num_choose:\n            team_1.append(p_skills)\n        elif len(team_2) < num_choose:\n            team_2.append(p_skills)\n        else:\n            break\n\n    return ''.join(map(lambda x: str(x % 2 + 1), team_1 + team_2))\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    print(solution(stdin))\n\nsolution()\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    students = [int(x) for x in stdin.split()]\n    m = {x: [x-1, x+1] for x in students}\n    d = [x-k for x in students if x >= k] + [x+k for x in students if x <= n-k]\n    d = sorted(set(d), key=lambda x: abs(x))\n    print(\"\".join([str(students[x] if abs(x) < k else \"1\") for x in d]))\n    return \"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = k + 1\n    while n > 0:\n        c = []\n        for i in range(k):\n            c.append(i)\n        b = sorted(b)\n        if n % 2 == 0:\n            l = list(zip(b, c))\n        else:\n            l = list(zip(b[:n // 2], c[:n // 2]))\n        for i in l:\n            print(i[1] % 2 + 1, end='')\n        n -= 1\n        print()\n        if n == 0:\n            break\n\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    skills = map(int, stdin.readline().split())\n    teams = [1] * n\n    for i in range(k):\n        teams[i] = 2\n    i = 0\n    while True:\n        teams = sorted(teams)\n        skills = sorted(skills)\n        skills = skills[::-1]\n        for j in range(i, k):\n            if skills[j] > skills[i]:\n                teams[i] = 2\n                break\n            if skills[j] < skills[i]:\n                teams[i] = 1\n                break\n        for j in range(k, n):\n            if skills[j] > skills[i]:\n                teams[i] = 2\n                break\n        for j in range(n - 1, i, -1):\n            if skills[j] > skills[i]:\n                teams[i] = 2\n                break\n            if skills[j] < skills[i]:\n                teams[i] = 1\n                break\n        print(''.join(map(str, teams)))\n        if not skills:\n            break\n        i = skills.index(max(skills))\n        skills[i] = -1\n        teams = [1] * n\n        for j in range(i, k):\n            teams[j] = 2\n        i = 0\n    return ''\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    programming_skills = [int(i) for i in stdin.split()]\n    print(programming_skills)\n    return \"1\" * n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    from collections import defaultdict\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    dp = defaultdict(lambda : defaultdict(int))\n    \n    def get_dp(a, i, j):\n        if i == j:\n            dp[i][j] = 1\n            return dp[i][j]\n        if i + 1 == j:\n            if a[i] == a[j]:\n                dp[i][j] = 1\n                return dp[i][j]\n            dp[i][j] = 2\n            return dp[i][j]\n        \n        if dp[i][j] == 0:\n            dp[i][j] = sum((get_dp(a, i, k) * get_dp(a, k + 1, j) for k in range(i, j)), 0)\n        \n        return dp[i][j]\n    \n    get_dp(a, 0, len(a) - 1)\n    \n    return str(dp[0][len(a) - 1])"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds number of monotonic renumerations for a given array a\"\"\"\n    pass\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    def find_new(a, new_a):\n        for i in range(n):\n            if a[i]!= new_a[i]:\n                return i\n    \n        return n\n    \n    def generate_new(a, new_a):\n        for i in range(n):\n            if a[i]!= new_a[i]:\n                new_a[find_new(a, new_a)] = new_a[find_new(a, new_a)] + 1\n        \n        return new_a\n    \n    def check(a, new_a):\n        for i in range(n):\n            if new_a[i] > 1:\n                return False\n            if a[i]!= new_a[i]:\n                return False\n        \n        return True\n    \n    new_a = a.copy()\n    new_a[0] = 1\n    new_a = generate_new(a, new_a)\n    \n    if check(a, new_a):\n        return 1\n    \n    new_a = a.copy()\n    new_a[-1] = 1\n    new_a = generate_new(a, new_a)\n    \n    if check(a, new_a):\n        return 2\n    \n    return 0"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().strip().split(' ')]\n    b = [0] * n\n    ans = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            ans = (ans + 1) % MOD\n        else:\n            if i > 0 and a[i] < a[i - 1] and b[i - 1] == b[i]:\n                b[i] = b[i - 1]\n            else:\n                b[i] = b[i] + 1\n            ans = (ans + b[i]) % MOD\n    print(ans)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    # O(n)\n    n = int(stdin.readline())\n    arr = sorted(list(map(int, stdin.readline().split())))\n    \n    # O(n)\n    ans = [0 for _ in range(n)]\n    \n    # O(n)\n    for i in range(n):\n        if i == 0:\n            ans[0] = 1\n        else:\n            ans[i] = (ans[i - 1] + 1) if arr[i]!= arr[i - 1] else ans[i - 1]\n        \n        ans[i] %= 1000000007\n    \n    # O(n)\n    return ans[-1]\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 1:\n        return 1\n    a = [int(i) for i in a.split()]\n    b = [0]\n    prev = 0\n    flag = True\n    for i in range(n):\n        if a[i] == prev:\n            if flag:\n                b.append(i)\n            else:\n                b.append(i + 1)\n            flag = not flag\n        else:\n            b.append(i + 1)\n        prev = a[i]\n    b =''.join(map(str, b))\n    print(int(b) % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    pre = [0] * n\n    now = [0] * n\n    \n    now[0] = a[0]\n    \n    for i in range(1, n):\n        now[i] = a[i]\n        pre[i] = pre[i - 1] + now[i - 1]\n        if i > 1:\n            now[i] += now[i - 2]\n    \n    ans = 0\n    for i in range(n):\n        ans += pre[i] + now[i]\n        \n    return ans % 1000000007\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def next_permutation(a):\n        k = len(a) - 2\n        while k >= 0 and a[k] >= a[k + 1]:\n            k -= 1\n        if k < 0:\n            return False\n        j = len(a) - 1\n        while a[j] <= a[k]:\n            j -= 1\n        a[k], a[j] = a[j], a[k]\n        left = k + 1\n        right = len(a) - 1\n        while left < right:\n            a[left], a[right] = a[right], a[left]\n            left += 1\n            right -= 1\n        return True\n    a = [int(c) for c in stdin.split('\\n')[1].split(' ')]\n    b = a.copy()\n    b.sort()\n    c = []\n    while b!= a:\n        a = b\n        b = a.copy()\n        b.sort()\n        c.append(b)\n    count = 1\n    for i in c:\n        count *= next_permutation(i)\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 1 2 3\n   ... ''')\n    '2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_different_renumerations(a):\n        \"\"\"\n        >>> count_different_renumerations([1, 2, 1, 2, 3])\n        4\n        \"\"\"\n        renums = [0] * len(a)\n        renums[0] = 0\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                renums[i] = renums[i - 1]\n            else:\n                renums[i] = renums[i - 1] + 1\n        return len(set(renums))\n\n    def print_different_renumerations(a):\n        renums = [0] * len(a)\n        renums[0] = 0\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                renums[i] = renums[i - 1]\n            else:\n                renums[i] = renums[i - 1] + 1\n        renums = set(renums)\n        for i in renums:\n            for j in range(len(renums)):\n                if i == renums[j]:\n                    print(j)\n\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    # print_different_renumerations(a)\n    print(count_different_renumerations(a))"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = set(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) not in s:\n                return n\n    return 0\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] & a[j] == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of elements that can be removed to make the given sequence good.\n\n    :param stdin:\n    :return:\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split(' ')]\n\n    cnt = 0\n    i = 0\n    while i < n:\n        if i + 1 < n and sequence[i] + sequence[i + 1]!= 2 ** (cnt + 1):\n            i += 1\n            continue\n\n        if i + 2 < n and sequence[i] + sequence[i + 1] + sequence[i + 2]!= 2 ** (cnt + 2):\n            i += 2\n            continue\n\n        if i + 3 < n and sequence[i] + sequence[i + 1] + sequence[i + 2] + sequence[i + 3]!= 2 ** (cnt + 3):\n            i += 3\n            continue\n\n        i += 1\n        cnt += 1\n\n    return cnt\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 4 7 1 5 4 9\n   ... ''')\n    '1'\n    >>> solution('''1\n   ... 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1023\n   ... ''')\n    '0'\n    \"\"\"\n    # n, a = list(map(int, stdin.split()))\n    # res = 0\n    # for _ in range(n - 1):\n    #     for j in range(n - 1):\n    #         if (a[j] & a[j + 1]) == 0:\n    #             res += 1\n    #             break\n    # return res\n    return sum([a & (a << 1) for a in range(1, 10 ** 9 + 1)])"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    return ''"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    # return str(solution_with_binary_search(stdin))\n    return str(solution_with_iteration(stdin))\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_runner(stdin))\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    for i in range(len(s)):\n        # print(s[:i], s[i:], res)\n        if s[i] == \"0\":\n            res += 1\n            if i == len(s) - 1:\n                res += 1\n        elif s[i] == \"1\":\n            if i == 0:\n                res += 1\n                continue\n            if s[i - 1] == \"0\":\n                res += 1\n                if i == len(s) - 1:\n                    res += 1\n            else:\n                if i == len(s) - 1:\n                    res += 1\n    return res\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def remove_cubes_from_bottom(cubes_to_remove: int) -> int:\n        # If the number of cubes to be removed is odd, then we can have an initial\n        # spot where a cube can be in both states.\n        # If the number of cubes to remove is even, we can have an initial spot\n        # where a cube can be in only one of the two states, which is the same\n        # number as the number of cubes removed.\n        if cubes_to_remove % 2 == 0:\n            return cubes_to_remove\n        else:\n            return cubes_to_remove + 1\n\n    total_cubes = int(stdin)\n    total_removed_cubes = 0\n\n    while total_cubes > 0:\n        # Remove the top cubes first.\n        total_cubes -= remove_cubes_from_bottom(total_cubes)\n        total_removed_cubes += remove_cubes_from_bottom(total_cubes)\n    return total_removed_cubes\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('01110011')\n    4\n\n    >>> solution('1111')\n    0\n\n    >>> solution('1110')\n    3\n\n    >>> solution('11110')\n    6\n\n    >>> solution('11110')\n    6\n\n    >>> solution('10111010')\n    4\n\n    \"\"\"\n    num_removed = 0\n    stack = []\n    i = 0\n    while i < len(stdin):\n        if len(stack) == 0 or stdin[i]!= stdin[stack[-1]]:\n            stack.append(i)\n            i += 1\n        else:\n            top = stack.pop()\n            if len(stack) == 0:\n                num_removed += 1\n            else:\n                top = stack.pop()\n                if top < i:\n                    num_removed += 1\n\n    return num_removed\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    # max_red_stack = 0\n    # max_blue_stack = 0\n    # for i in range(n):\n    #     if i == 0 or i == n - 1:\n    #         max_red_stack += 1\n    #     else:\n    #         if stdin[i] == 0:\n    #             max_red_stack += 1\n    #         else:\n    #             max_blue_stack += 1\n    # if max_red_stack == 0:\n    #     return str(n - max_blue_stack)\n    # if max_blue_stack == 0:\n    #     return str(n - max_red_stack)\n    # return str(min(n - max_red_stack, n - max_blue_stack))\n\n    return str(min(n - 1, sum([i == \"0\" for i in stdin])))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    return stdin.split('\\n')[0]\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    s = lines[0]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            s = s[0:i] + '0' + s[i + 1:]\n            count += 1\n        else:\n            s = s[0:i] + '1' + s[i + 1:]\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Case #{}: {}'.format(1, stdin)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    2\n    \"\"\"\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = []\n    for i in range(n):\n        t.append(tuple(map(int, stdin.split())))\n    t.sort()\n    ans = 0\n    for i in range(n):\n        l, r = t[i]\n        for j in range(m):\n            if j == 0 and l <= j and j <= r:\n                ans += 1\n            elif j == m - 1 and l <= j and j <= r:\n                ans += 1\n            elif l <= j and j <= r:\n                ans += 1\n            elif j < l and j > r:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    s = []\n    for i in range(m):\n        l, r = map(int, stdin.split(' '))\n        s.append((l, r))\n    s.sort(key=lambda x: x[1])\n    ans = 1\n    l = 0\n    r = 0\n    for i in range(m):\n        if s[i][0] > r:\n            ans += 1\n            r = s[i][1]\n    return ans"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The code you need to write...\n    \"\"\"\n    n, m = map(int, stdin.split())\n    l = [int(x) for x in stdin.split('\\n')[1:-1]]\n    count = 0\n    for i in range(m):\n        x, y = l[i], l[(i+1)%m]\n        if x > y:\n            count += 1\n    return str(count)\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for problem number 20.\"\"\"\n   ...\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 2\n   ... 1 3\n   ... 2 4''')\n    2\n    '''\n    stdin = stdin.split('\\n')\n    n, m = [int(n) for n in stdin[0].split()]\n    gates = [tuple(int(n) for n in gate.split()) for gate in stdin[1:]]\n    id_cards = range(1, n + 1)\n    return f'{len([i for i in id_cards if all(i not in gate for gate in gates)])}'"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string denoting the solution.\"\"\"\n    # Your code here\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get Inputs\n    n = int(stdin)\n\n    # Init Outputs\n    res = 0\n\n    # Get List\n    lst = [int(i) for i in stdin.split()]\n\n    # Initialize Set\n    # arr = {i:0 for i in range(1, n+1)}\n\n    # print(arr)\n\n    # Populate Set\n    # for i in lst:\n    #     arr[i] += 1\n\n    # for k, v in arr.items():\n    #     if v < n:\n    #         res += 1\n\n    # return res\n\n    # New Solution\n    def findMinWater(arr: List[int]):\n        # Init Outputs\n        res = 0\n        # Counter\n        h = 0\n        for i in arr:\n            if i > h:\n                h = i\n                res += 1\n        return res\n\n    print(findMinWater(lst))\n\n    return res"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 2 1''')\n    2\n    \"\"\"\n    N = int(stdin.strip())\n    flowers = list(map(int, stdin.strip().split(\" \")))\n    dp = [0] * N\n    for i in range(N - 1, -1, -1):\n        dp[i] = dp[i + 1] + 1\n        l, r = i + 1, i + flowers[i]\n        if l <= N - 1 and dp[l] + 1 < dp[i]:\n            dp[i] = dp[l] + 1\n        if r <= N - 1 and dp[r] + 1 < dp[i]:\n            dp[i] = dp[r] + 1\n    return dp[0]\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    res = 0\n    for l, r in zip([0] + A, A + [n]):\n        res += r - l - 1\n    return res\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    input_array = stdin[1].split(' ')\n    input_array = [int(i) for i in input_array]\n    # Start with:\n    # water_array = [0] * n\n    # water_array[0] = input_array[0]\n    # water_array[1] = max(water_array[0], input_array[1])\n    # for i in range(2, n):\n    #     water_array[i] = max(water_array[i - 1], water_array[i - 2] + input_array[i])\n    # return water_array[n - 1]\n    total = 0\n    for i in range(n):\n        if i >= 1:\n            input_array[i] = max(input_array[i], input_array[i-1]+1)\n        if i >= 2:\n            input_array[i] = max(input_array[i], input_array[i-2]+1)\n        total += input_array[i]\n    return total"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # You can use additional module which you need to import like sys\n    N, *heights = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(N-1):\n        left, right = 0, 0\n        for j in range(i):\n            if heights[j] < heights[i]:\n                left = max(left, heights[j])\n        for j in range(i+1, N):\n            if heights[j] < heights[i]:\n                right = max(right, heights[j])\n        res += (right - left)\n    return res\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a.insert(0, 0)\n    a.append(0)\n    dp = [[0 for _ in range(w + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(w + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - a[i] >= 0:\n                dp[i][j] += dp[i - 1][j - a[i]]\n    print(dp[n][w])\n    return dp\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    cnt = [0 for _ in range(w+1)]\n    for i in range(n):\n        cnt[l[i]] += 1\n        cnt[l[i] + 1] -= 1\n    ans = 0\n    for i in range(w+1):\n        ans += cnt[i]\n        ans %= 10 ** 9 + 7\n    return str(ans)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(c) for c in stdin.split('\\n')[0].split()]\n    a = [int(c) for c in stdin.split('\\n')[1].split()]\n    dp = [[0 for _ in range(w + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(w + 1):\n            if i == 0:\n                dp[i][j] = 0\n                continue\n            if j == 0:\n                dp[i][j] = 0\n                continue\n            if i == 1:\n                if a[0] <= j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n                continue\n            if j == 1:\n                if a[i - 1] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n                continue\n            if a[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    print(dp[n][w])\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5\n   ... 2 1 -3\n   ... ''')\n    '3'\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    \"\"\"\n    n, w = map(int, stdin.split('\\n')[0].split())\n    data = list(map(int, stdin.split('\\n')[1].split()))\n\n    prev = -1\n    cur = 0\n    count = 0\n    for i in range(len(data)):\n        cur += data[i]\n        if prev == -1:\n            prev = cur\n        elif prev > w:\n            count = 0\n            break\n        elif cur < prev:\n            count = 0\n            break\n        else:\n            count += 1\n            prev = cur\n    if count!= 0:\n        print(count)\n    else:\n        print(0)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    get parameters from input\n    get the sequence of records\n    iterate over records\n    in each iteration check if the number of passengers is in valid range\n    if the number of passengers is not valid return 0\n    if the number of passengers is valid return 1\n    :param stdin: the input string\n    :return: the output string\n    '''\n\n    # get input\n    n, w = map(int, stdin.split('\\n')[0].split())\n    records = list(map(int, stdin.split('\\n')[1].split()))\n\n    # iterate over records\n    for record in records:\n\n        # check if the number of passengers is in valid range\n        if record < 0 or record > w:\n            return '0'\n\n        # if the number of passengers is valid return 1\n        else:\n            return '1'\n\n    # if there is no contradiction return 0\n    return '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split(' ')))\n    seq = list(map(int, stdin.split(' ')))\n    res = 0\n    i = 0\n    while i < n:\n        res += (seq[i] == 0)\n        i += 1\n        while i < n and w == 0:\n            res += (seq[i] == seq[i - 1])\n            i += 1\n    return res\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    lst = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            dp[0] = 0\n            break\n        for j in range(max(0, i - w + 1), i + 1):\n            dp[i + 1] += dp[j]\n\n    return str(dp[n]) if dp[n] > 0 else '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 5\n   ... 2 1 -3\n   ... ''')\n    '3'\n    >>> solution('''2 4\n   ... -1 1\n   ... ''')\n    '4'\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    '''\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 4 8 6 3 12 9\n   ... ''')\n    '9 3 6 12 4 8'\n    >>> solution('''4\n   ... 42 28 84 126\n   ... ''')\n    '126 42 84 28'\n    >>> solution('''2\n   ... 1000000000000000000 3000000000000000000\n   ... ''')\n    '3000000000000000000 1000000000000000000'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elem = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split(\" \")]\n    seq_sorted = sorted(seq)\n    ans = []\n    two_times = []\n    three_times = []\n    for i in range(len(seq_sorted)):\n        if seq_sorted[i] % 3 == 0:\n            ans.append(seq_sorted[i])\n            seq_sorted[i] = int(seq_sorted[i] / 3)\n            three_times.append(seq_sorted[i])\n        elif seq_sorted[i] % 2 == 0:\n            ans.append(seq_sorted[i])\n            seq_sorted[i] = int(seq_sorted[i] / 2)\n            two_times.append(seq_sorted[i])\n        else:\n            ans.append(seq_sorted[i])\n            seq_sorted[i] = int(seq_sorted[i] * 2)\n            two_times.append(seq_sorted[i])\n    ans += sorted(two_times, reverse=True) + sorted(three_times, reverse=True)\n    return \" \".join([str(x) for x in ans])\nprint(solution(input()))\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\n4 8 6 3 12 9\\n')\n    '9 3 6 12 4 8'\n    >>> solution('4\\n42 28 84 126\\n')\n    '126 42 84 28'\n    >>> solution('2\\n1000000000000000000 3000000000000000000\\n')\n    '3000000000000000000 1000000000000000000'\n    \"\"\"\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n    answer = []\n    prev_num = seq[0]\n    prev_pos = 0\n    for i in range(1, n):\n        if seq[i] % 3 == 0:\n            if seq[i] % 2 == 0:\n                answer.append(prev_num)\n                prev_num = seq[i] // 2\n                prev_pos = i\n            else:\n                answer.append(seq[i])\n                prev_num = prev_num * 3\n                prev_pos = i\n        elif seq[i] % 2 == 0:\n            answer.append(seq[i])\n            prev_num = prev_num // 2\n            prev_pos = i\n        else:\n            answer.insert(prev_pos, seq[i])\n            prev_num = prev_num * 3\n            prev_pos = i + 1\n    print(*answer)\n    return ''\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, stdin.split('\\n')[1:]))\n'''\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(number) for number in stdin.readline().strip().split()]\n    return''.join([str(number) for number in rearrange(numbers, n)])\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = list(map(int, stdin[1].split()))\n    return''.join(map(str, s))"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n\n    arr.sort()\n    ans = []\n    res = -1\n    for i in range(n - 1, 0, -1):\n        if arr[i] - arr[i - 1] > res:\n            ans = [arr[i], arr[i - 1]]\n            res = arr[i] - arr[i - 1]\n    return ans[0], ans[1]\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible number of points in a subset satisfying the conditions described above.\"\"\"\n   ...\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    print(len(max(find_subsets(lst), key=lambda x: len(x))))\n    print(' '.join(map(str, find_subsets(lst)[-1])))\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    min_num_of_points = n\n    answer = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = (arr[i] - arr[j])\n            if distance > 0 and distance % 2 == 0:\n                answer.append(arr[i])\n                answer.append(arr[j])\n                min_num_of_points -= 1\n                break\n\n    print(min_num_of_points)\n    print(' '.join(map(str, answer)))\n    return '0'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\\\n3 5 4 7 10 12\")\n    '3\\\\n7 3 5'\n    >>> solution(\"5\\\\n-1 2 5 8 11\")\n    '1\\\\n8'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    x = sorted(map(int, stdin.split(\"\\n\")[1].split()))\n\n    x_max, x_min = max(x), min(x)\n    result = []\n    k = 0\n    while k < x_max:\n        k *= 2\n        for i in x:\n            if i < k:\n                continue\n            else:\n                x.remove(i)\n                break\n    return \"\\n\".join(str(i) for i in x)\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [int(i) for i in stdin.readline().strip().split(' ')]\n    points.sort()\n    res = [points[0]]\n    for i in range(1, n):\n        if points[i] - points[i - 1] == points[i - 1] - points[i - 1]:\n            res.append(points[i])\n        else:\n            break\n    return''.join([str(j) for j in res])\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A.sort()\n\n    m = 0\n    for i in range(N - 1):\n        d = abs(A[i + 1] - A[i])\n        if d == 1:\n            m += 1\n        elif d & (d - 1) == 0:\n            m += 1\n        else:\n            break\n\n    print(m)\n    print(*A[:m])\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(i) for i in stdin.readline().split()]\n    d = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            c_ij = abs(c[i]-c[j])\n            d[(i, j)] = c_ij\n    d = sorted(d.items(), key=lambda x: x[1])\n    res = []\n    for i in d:\n        res.append(i[0][0])\n        res.append(i[0][1])\n        if len(res) >= n:\n            break\n    print(len(res))\n    print(' '.join([str(i) for i in res]))\n    return ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # if you need the context\n    # then get from stdin\n    x = [int(i) for i in stdin.split(' ')]\n    n = x[0]\n    x = x[1:]\n    # array for storing distance\n    d = [x[i + 1] - x[i] for i in range(n - 1)]\n    # set for storing distance\n    # d = set(d)\n    # d = [i for i in d if 2 ** round(math.log(i, 2)) == i]\n    # d = [i for i in d if i!= 0]\n    d = set([i for i in d if i!= 0])\n    d = sorted(d)\n    d.reverse()\n    # print(d)\n    if len(d) > 0:\n        # print(d[0])\n        # print(round(math.log(d[0], 2)))\n        # print(2 ** round(math.log(d[0], 2)))\n        # print(math.log(d[0], 2))\n        # print(round(math.log(d[0], 2)))\n        m = 1\n        while m * d[0] < 2 ** round(math.log(d[0], 2)):\n            m += 1\n        print(m)\n        print(*d[:m])\n        print(m)\n    else:\n        print('1')\n        print(*x[:1])\n        print('1')\n        return ''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(\" \")]\n    cookies_takahashi = 1\n    cookies_aoki = B\n    for _ in range(K):\n        if cookies_takahashi >= 1:\n            cookies_takahashi -= 1\n        elif cookies_aoki >= 1:\n            cookies_takahashi = B\n            cookies_aoki -= 1\n    print(cookies_takahashi, cookies_aoki)\n    return \"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_cookies, aoki_cookies = map(int, stdin.split(' '))\n    k = int(input())\n\n    while k > 0:\n        if takahashi_cookies > 0:\n            takahashi_cookies += -1\n            k -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies += -1\n            k -= 1\n        else:\n            k -= 1\n\n    print(takahashi_cookies, aoki_cookies)\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing the single line of text shown in the input.\"\"\"\n    pass"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport sys\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string of two integers where each integer represents cookies.\"\"\"\n    a, b, k = [int(x) for x in stdin.split()]\n    a_cookies = b_cookies = 0\n    for _ in range(k):\n        a_cookies += 1\n        if a_cookies == a:\n            a_cookies -= 1\n            break\n        b_cookies += 1\n        if b_cookies == b:\n            b_cookies -= 1\n            break\n    return f'{a_cookies} {b_cookies}'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = 1\n    aoki = b\n    for i in range(k):\n        aoki = aoki - a\n        aoki = aoki + b\n        takahashi = takahashi + a\n        if aoki == 0:\n            takahashi = takahashi - 1\n            aoki = a\n            takahashi = takahashi + a\n    return '{} {}'.format(takahashi, aoki)\n\"\"\"\n\n\"\"\"\nTEST 1\nInput:\n2 3 3\n\nOutput:\n0 2\n\"\"\"\n\n\"\"\"\nTEST 2\nInput:\n4 1 2\n\nOutput:\n2 1\n\"\"\"\n\n\"\"\"\nTEST 3\nInput:\n6 2 1\n\nOutput:\n3 6\n\"\"\"\n\n\"\"\"\nTEST 4\nInput:\n4 1 3\n\nOutput:\n3 4\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    takahashi = 0\n    aoki = 0\n    for _ in range(K):\n        if A > 0:\n            takahashi += 1\n            A -= 1\n        elif B > 0:\n            takahashi += 1\n            B -= 1\n        else:\n            pass\n        if A > 0:\n            aoki += 1\n            A -= 1\n        elif B > 0:\n            aoki += 1\n            B -= 1\n        else:\n            pass\n    print(takahashi, aoki)\n    return \"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the solution to the problem.\n    \"\"\"\n    # Remove the newline character at the end of the input.\n    stdin = stdin.rstrip('\\n')\n    a, b, k = map(int, stdin.split(' '))\n    aoki = b\n    takahashi = a\n    for i in range(1, k + 1):\n        aoki, takahashi = takahashi, max(aoki, takahashi + a)\n        # Check if we've already reached a loop.\n        if aoki == b and takahashi == a:\n            return \"0 \" + str(aoki)\n    return str(takahashi) + \" \" + str(aoki)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    years = 0\n    while x >= 100:\n        x *= 1 + 0.01\n        years += 1\n    return str(years)\n\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return ''\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi has a deposit of 100 yen (the currency of Japan) in AtCoder Bank. The bank pays an annual interest rate of 1 % compounded annually. (A fraction of less than one yen is discarded.) Assuming that nothing other than the interest affects Takahashi's balance, in how many years does the balance reach X yen or above for the first time?\n\n    :param stdin: input of 100 yen\n    :return: how many years it takes for the balance to reach X yen or above for the first time\n    \"\"\"\n    # Initialize variables\n    bank_balance = 100\n    annual_rate = 0.01\n    target_balance = int(stdin)\n    years = 0\n\n    while bank_balance < target_balance:\n        bank_balance += bank_balance * annual_rate\n        years += 1\n\n    return str(years)\n    pass"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(parse(stdin)))\n\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while True:\n        if x < 10 ** i:\n            break\n        i += 1\n    return i - 1"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    x = 0\n    count = 0\n    while True:\n        x += 1\n        a += a * 0.01\n        if a >= 1000:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    Y = X\n    count = 0\n    while True:\n        Y = Y*(1 + 0.01)\n        if Y >= X:\n            return count\n        count += 1\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Get input from Standard Input, compute the solution and return the result.\n    '''\n    x = int(stdin)\n    years = 0\n    while x < 10000:\n        x = int(x * 1.01)\n        years += 1\n    return years"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    years = 0\n    while X < 100:\n        X += X * (1/100)\n        years += 1\n    print(years)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin.read().strip())\n    years: int = 0\n    while x < 100:\n        x = (x * (1 + 0.01))\n        years += 1\n    return years\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = stdin\n    sum = 0\n    for i in range(1, int(K) + 1):\n        for j in range(1, int(K) + 1):\n            for k in range(1, int(K) + 1):\n                sum += gcd(i, j, k)\n    return sum\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets K and returns the sum of all possible permutations of K, and all possible permutations of the\n    remainder\n    \"\"\"\n    k = int(stdin.split('\\n')[0])\n    total_sum = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for m in range(1, k+1):\n                total_sum += gcd(i, j, m)\n    return str(total_sum)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(sum(sum(int(i) for i in j) for j in stdin.split('\\n')) for _ in range(int(stdin.split('\\n')[0]))))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0]\n    k = int(line)\n    return str(k * (k - 1) * (k - 2) // 6)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 2''')\n    '9'\n    \"\"\"\n    a = int(stdin)\n    b = a\n    count = 0\n    while a > 0:\n        if a % 2 == 0:\n            count += b // 2\n        a //= 2\n        b //= 2\n    return str(count)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # At most, there are 200 numbers in the list\n    # So we can iterate through the list and get the sum of the greatest common divisor\n    return sum(gcd(a,b) for a in range(1,n+1) for b in range(1,n+1))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    K = int(stdin)\n    \n    return str(sum(map(sum, [1, 2]*K)))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(int(k*(k-1)*(k-2)//6))\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 4 6\")\n    10\n    >>> solution(\"5\\n2 4 6 5\")\n    14\n    >>> solution(\"3\\n3 4 6\")\n    10\n    \"\"\"\n    n, *line = map(int, stdin.split())\n    line = sorted(line)\n    res = 0\n    for i, num in enumerate(line):\n        res += (n - i) * num\n    return res\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import gcd\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nnums = list(map(int, stdin.readline().split()))\n\nprint(f\"{max(\n    [\n        (i * j) // gcd(i, j)\n        for i in nums\n        for j in nums\n        if i!= j\n    ]\n)}\")\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    # Create a list to store the remainders\n    remainders = []\n    for i in range(0, n):\n        # Get the remainder of division by the current element\n        # and append to the list\n        remainders.append((i % a[i]))\n    # Find the largest element in the list\n    largest = max(remainders)\n    print(largest)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.stdin = open('test.txt', 'r')\nsys.stdout = open('test_output.txt', 'w')"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n, *a = map(int, stdin.split('\\n'))\n    # Calculate the answer and return it\n    return str(max(a) * sum(a) % n)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    N, *a = data\n    a = list(set(a))\n    a.sort()\n    l = len(a)\n    res = 0\n    for i in range(1 << l):\n        sum = 0\n        for j in range(l):\n            if i & (1 << j):\n                sum += a[j]\n        res = max(res, sum)\n    return str(res)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *integers = map(int, stdin.split())\n    max_integer = max(integers)\n    m = max_integer\n    best_value = 0\n    while m >= 1:\n        remainders = [i % m for i in integers]\n        sum_remainders = sum(remainders)\n        best_value = max(best_value, sum_remainders)\n        m = m - 1\n    return best_value\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    return max([arr[i] * (n - i) % arr[i] for i in range(len(arr))])"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u76f4\u89c2\u7684\u306a\u89e3\u7b54\n    # import sys\n    # stdin = sys.stdin.readlines()[1:]\n    # num = [int(i) for i in stdin[0].split()]\n    # ans = 0\n    # for i in range(len(num)):\n    #     ans = max(ans, sum(num[i:]))\n    # print(ans)\n\n    # \u81ea\u5206\u306e\u7d20\u76f4\u306a\u89e3\u7b54\n    # \u6a21\u7bc4\u89e3\u7b54\u3092\u53c2\u8003\u306b\u3057\u305f\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # \u81ea\u5206\u306e\u7d20\u76f4\u306a\u89e3\u7b54\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # \u81ea\u5206\u306e\u7d20\u76f4\u306a\u89e3\u7b54\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # \u81ea\u5206\u306e\u7d20\u76f4\u306a\u89e3\u7b54\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # \u81ea\u5206\u306e\u7d20\u76f4\u306a\u89e3\u7b54\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # \u81ea\u5206\u306e\u7d20\u76f4\u306a\u89e3\u7b54\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n    # print(num[0])\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i:]) for i in range(len(num))]))\n\n    # print(max([sum(num[i"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem of Maximum sum of modulo divisors of a given integer.\n    \"\"\"\n    data = list(map(int, stdin.split('\\n')[1:]))\n    # Maximum sum of modulo divisors of a given integer is the sum of all prime factors of the given integer.\n    # A prime factor is a number that divides the given integer but not the other factor.\n    # So, if we consider the maximum sum of modulo divisors of a given integer,\n    # we can find the prime factor that maximizes the modulo sum of the integers,\n    # which will be the maximum sum of modulo divisors of a given integer.\n    prime_factor = max(data)\n    # Find the prime factors of a given integer.\n    prime_factors = [i for i in range(1, prime_factor + 1) if prime_factor % i == 0]\n    # Now, from the prime factors, find the largest modulo sum of the integers.\n    modulo_sum = sum([i for i in data if i % prime_factor == 0])\n    for factor in prime_factors:\n        if modulo_sum < sum([i for i in data if i % factor == 0]):\n            modulo_sum = sum([i for i in data if i % factor == 0])\n    return modulo_sum\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if doublet_roll_counter > 2 else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2')\n    'Yes'\n    \"\"\"\n    n = int(stdin.readline())\n    current_sum = None\n    doublets_counter = 0\n    for i in range(n):\n        number = [int(x) for x in stdin.readline().split()]\n        if current_sum is None:\n            current_sum = number\n        else:\n            if number[0] == number[1] and current_sum[0] == current_sum[1]:\n                doublets_counter += 1\n            if number[0] == number[1] and number[1] == current_sum[0] and current_sum[1] == current_sum[2]:\n                doublets_counter += 1\n            current_sum = number\n    if doublets_counter >= 3:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_sequence(sequence: List[int]):\n        for i, value in enumerate(sequence):\n            if i + 1 < len(sequence) and sequence[i] == sequence[i + 1] == sequence[i + 2]:\n                return True\n        return False\n\n    sequence = []\n    for line in stdin.split('\\n'):\n        if line:\n            line = line.split()\n            sequence.extend(int(value) for value in line)\n    if check_sequence(sequence):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rolls = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n\n    # Sanity check\n    assert all(\n        0 <= pair[0] <= 6 and 0 <= pair[1] <= 6 for pair in rolls\n    ), \"Both values must be 0 <= x <= 6\"\n\n    # Tests whether the first pair matches with the second pair\n    def test(p1: Tuple[int, int], p2: Tuple[int, int]):\n        if p1[0]!= p2[0] and p1[1]!= p2[1]:\n            return False\n        return True\n\n    for i, (a, b) in enumerate(rolls):\n        if i >= 2:\n            if test(rolls[i - 1], rolls[i - 2]) and test(rolls[i - 2], rolls[i]):\n                return \"Yes\"\n        if i >= 3:\n            if test(rolls[i - 1], rolls[i - 2]) and test(rolls[i - 2], rolls[i - 3]):\n                return \"Yes\"\n        if i >= 4:\n            if test(rolls[i - 1], rolls[i - 2]) and test(rolls[i - 2], rolls[i - 3]):\n                return \"Yes\"\n        if i >= 5:\n            if test(rolls[i - 1], rolls[i - 2]) and test(rolls[i - 2], rolls[i - 3]):\n                return \"Yes\"\n            if test(rolls[i - 1], rolls[i - 3]) and test(rolls[i - 3], rolls[i - 2]):\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\")\n    'Yes'\n    \"\"\"\n    data = stdin.split()\n    N = int(data[0])\n    counter = 0\n    for i in range(0, N, 2):\n        if int(data[i + 1]) == int(data[i + 2]):\n            counter += 1\n    if counter >= 3:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    rolls = [int(x) for x in stdin.split(\"\\n\") if x!= \"\"]\n    doublets = 0\n    for i, j in zip(rolls, rolls[1:]):\n        if i == j:\n            doublets += 1\n        else:\n            doublets = 0\n\n        if doublets == 2:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_rolls = int(stdin.readline().strip())\n    total_rolls = {1: [], 2: []}\n\n    for _ in range(num_rolls):\n        roll1, roll2 = map(int, stdin.readline().split())\n        total_rolls[roll1].append(roll2)\n        total_rolls[roll2].append(roll1)\n\n    for i in range(1, 6):\n        if total_rolls[i] and total_rolls[i][0] == i:\n            if total_rolls[i][1] == i:\n                if total_rolls[i][2] == i:\n                    return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rolls: List[Tuple[int, int]] = []\n    for line in stdin.split('\\n'):\n        if not line:\n            break\n        rolls.append(tuple(map(int, line.split(' '))))\n    doublet_streak = 0\n    for index, (roll_1, roll_2) in enumerate(rolls[:-2]):\n        if roll_1 == roll_2:\n            doublet_streak += 1\n            if doublet_streak >= 3:\n                return 'Yes'\n        else:\n            doublet_streak = 0\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    r = int(stdin)\n    \n    return str(2*r*r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nr = int(stdin.read())\nprint(math.ceil((2*r)**2/(r**2*math.pi)))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of times a circle of radius r is larger than a circle of radius 1.\"\"\"\n    r = int(stdin.readline().strip())\n    return str(int(r*r + r/2))\n\n\"\"\"\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return int(r * r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 2)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    area_one_circle = math.pi * (1 ** 2)\n    area_two_circle = math.pi * (int(stdin) ** 2)\n    return str(area_two_circle // area_one_circle)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    print(r * r)\n    return r\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    return str(n * (n + 1) // 2)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if max(list(map(lambda x: int(x), stdin.split(' ')))) < sum(list(map(lambda x: int(x), stdin.split(' ')[1:]))) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    n, l = map(int, stdin.split())\n    lens = []\n    for i in range(n):\n        lens.append(int(input()))\n        total += lens[i]\n    if max(lens) < total:\n        return 'Yes'\n    return 'No'\n\"\"\"\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n\n    polygon_num = int(input_list[0])\n    polygon_lengths = [int(item) for item in input_list[1].split(\" \")]\n\n    polygon_areas = list()\n    polygon_sides = list()\n\n    for polygon_index in range(polygon_num):\n        if polygon_index == 0:\n            polygon_sides.append(polygon_lengths[0] + polygon_lengths[polygon_num - 1])\n        elif polygon_index == polygon_num - 1:\n            polygon_sides.append(polygon_lengths[polygon_num - 1] + polygon_lengths[0])\n        else:\n            polygon_sides.append(polygon_lengths[polygon_index - 1] + polygon_lengths[polygon_index])\n\n        polygon_areas.append(polygon_lengths[polygon_index] * polygon_sides[polygon_index] / 2)\n\n    polygon_sides_sum = sum(polygon_sides)\n\n    if polygon_sides_sum < max(polygon_areas):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    lengths = sorted(lengths, reverse=True)\n    if lengths[0] <= sum(lengths[1:]):\n        return 'Yes'\n    return 'No'\n    \"\"\"\n\n    def get_input():\n        return map(int, input().split())\n\n    def get_ints_input():\n        return map(int, stdin.split())\n\n    n = int(input())\n    lengths = list(map(int, input().split()))\n    lengths = sorted(lengths, reverse=True)\n    if lengths[0] <= sum(lengths[1:]):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # N, *L = list(map(int, stdin.split()))\n    N = int(stdin.split()[0])\n    L = list(map(int, stdin.split()[1:]))\n    L.sort()\n    print(L)\n    if L[-1] < sum(L[:-1]):\n        return 'Yes'\n    return 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(n: int, l: int):\n        \"\"\"\n        Theorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n        \"\"\"\n        return n > 1 and l > n * (n - 1) / 2\n\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    print('Yes' if is_valid(n, sum(l)) else 'No')\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if max(map(int, stdin.split())) < sum(map(int, stdin.split()[1:])) else \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and return result.\"\"\"\n    # get input\n    # return result\n    return \"Yes\" if max(list(map(int, stdin.split()))) < sum(list(map(int, stdin.split()))) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = list(map(int, stdin.split()))\n    if max(lengths) < sum(lengths[:-1]) :\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    return 'Yes' if max(L) < sum(L) - max(L) else 'No'"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    s = [0 for i in range(n)]\n    c = [0 for i in range(n)]\n\n    for i in range(n):\n        s[i], c[i] = [int(x) for x in stdin.split(\" \")]\n\n    for i in range(m, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if s[j] == i and c[j] >= j:\n                return str(i * pow(10, n - j - 1))\n    return \"-\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[0].split(' '))\n    s, c = zip(*[map(int, stdin.split('\\n')[1].split(' ')) for _ in range(N)])\n    def condition_1(M):\n        return all(s[i] == c[i] for i in range(M))\n\n    def condition_2(M):\n        return max(s) >= 0\n\n    def condition_3(M):\n        return len(str(max(s))) == M\n\n    def condition_4(M):\n        return len(str(min(s))) == M\n\n    if all(condition_1(M) and condition_2(M) and condition_3(M) and condition_4(M)):\n        return str(min(s))\n    else:\n        return '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #We will extract the input first.\n    raw_input = stdin\n    raw_input = raw_input.split('\\n')\n    raw_input = raw_input[1:]\n    #Using a dictionary, we will also extract the input second.\n    raw_input_dictionary = {}\n    for entry in raw_input:\n        split_entry = entry.split(' ')\n        raw_input_dictionary[int(split_entry[0])] = int(split_entry[1])\n    #We will now define the list and dictionary which will store the data we will pull from the input.\n    data_list = []\n    data_dictionary = {}\n    #Now we will iterate through the input dictionary.\n    for index in raw_input_dictionary:\n        #We will also check to see if we have satisfied the conditions, otherwise we'll append None to the list.\n        if index <= 0:\n            data_list.append(None)\n            data_dictionary[index] = None\n        else:\n            digit_list = []\n            for digit in str(index):\n                digit_list.append(int(digit))\n            if len(digit_list)!= raw_input_dictionary[index]:\n                data_list.append(None)\n                data_dictionary[index] = None\n            else:\n                digit_list = digit_list[::-1]\n                for index in range(raw_input_dictionary[index]):\n                    digit_list[index] = raw_input_dictionary[index]\n                data_list.append(digit_list)\n                data_dictionary[index] = digit_list\n    #We will now define the function which will solve the problem.\n    def function(list, dictionary):\n        for index in range(len(list)):\n            if list[index] == None:\n                list[index] = list[index]\n            else:\n                if not list[index]:\n                    return -1\n                else:\n                    return list[index]\n    #Now we will define the main function which will take the data list and dictionary and return the solution.\n    def main(list, dictionary):\n        solution = function(list, dictionary)\n        if solution == -1:\n            return solution\n        else:\n            string_solution = ''\n            for digit in solution:\n                string_solution += str(digit)\n            return string_solution\n    #Now we will return the solution.\n    return main(data_list, data_dictionary)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = input_data[0].split()\n    n = int(n)\n    m = int(m)\n    for i in range(1, len(input_data)):\n        input_data[i] = input_data[i].split()\n    \n    input_data.sort(key = lambda x: x[0])\n    input_data.sort(key = lambda x: x[1], reverse = True)\n    for i in range(n):\n        input_data[i][0] = int(input_data[i][0])\n    input_data = input_data[:m]\n    input_data.sort(key = lambda x: x[1])\n    \n    result = ''\n    for i in range(m):\n        result += str(input_data[i][0])\n    \n    return result"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    s, c = [0] * m, [0] * m\n    for i in range(m):\n        s[i], c[i] = list(map(int, stdin.split()))\n\n    ans = []\n    for i in range(n + 1):\n        ok = True\n        for j in range(m):\n            if not ((i // 10 ** (m - j - 1)) % 10 == c[j]):\n                ok = False\n                break\n        if ok:\n            ans.append(i)\n    if ans:\n        print(min(ans))\n    else:\n        print(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l = [list(map(int, stdin.split(' '))) for _ in range(m)]\n    largest = 0\n    for i in range(1, n + 1):\n        if l[i - 1][0] == i:\n            largest = i\n            if l[i - 1][1] > largest:\n                largest = l[i - 1][1]\n    if largest == 0:\n        return '-1'\n    return str(10 ** n - largest)\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N, M = list(map(int, stdin.split()))\n    if N == 1:\n        if M == 1:\n            print(0)\n        else:\n            print(-1)\n    else:\n        x = [1] + [0] * (M - 1)\n        for i in range(N):\n            x[stdin[i * 2 + 1]] = int(stdin[i * 2])\n        for i in range(M):\n            if x[i] > 0:\n                break\n        else:\n            print(-1)\n            return\n        x[i] -= 1\n        n = 0\n        for i in range(M):\n            n *= 10\n            n += x[i]\n        print(n)\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n\n    arr.sort(key=lambda x: x[1])\n\n    for i in range(len(arr) - 1):\n        if arr[i][1] >= arr[i + 1][1]:\n            continue\n        else:\n            print(arr[i + 1][0])\n            break\n    else:\n        print(-1)\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    conditions = []\n    for _ in range(m):\n        conditions.append([int(x) for x in stdin.split('\\n')[_].split(' ')[1:]])\n    digits = {'1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    for i in range(1, m + 1):\n        if not len(set(str(x[0]) for x in conditions[:i])) == 1:\n            return -1\n        if not set(str(x[1])) == digits:\n            return -1\n    ans = '0' * n\n    for x in conditions:\n        ans = ans[:x[0] - 1] + str(x[1]) + ans[x[0] - 1:]\n    return ans"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = (n - 1) * (n - 2) * (n - 3) // 6\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.splitlines()]\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a+b >= n+1 or a+b % k or b+a >= n+1 or b+a % k:\n                continue\n            c = n - a - b\n            if c % k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int, stdin.split(' ')))\n    result = 0\n    for i in range(1,n+1):\n        if (i%k == 0):\n            for j in range(1,n+1):\n                if (j%k == 0):\n                    if (i+j <= n):\n                        result += 1\n    return result\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n // 2 + 1):\n        for b in range(a, (n - a) // 2 + 1):\n            c = n - a - b\n            if c % k == 0 and a * b == c * k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Enter your code here. Read input from STDIN. Print output to STDOUT\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.'''\n    # Get input.\n    n, k = [int(n) for n in stdin.split('\\n')[0].split()]\n    # Return number of triples.\n    return str(int(k * (n - 1) ** 2) / 6)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    cnt = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                if (a + b) % k == 0 and (b + c) % k == 0 and (c + a) % k == 0:\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n,k = [int(x) for x in stdin.split(' ')]\n    p = 0\n    p += n * (n-1) * (n-2) // 6\n    p += k * (k-1) * (k-2) // 6\n    p -= n * (n-1) // 2 * (n-2) // 2\n    p -= k * (k-1) // 2 * (k-2) // 2\n    return str(p)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"{}\\n\".format(n * n * (n - 2) * (n - 2) // 2)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')\n    n, k = [int(i) for i in n.split(' ')]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j <= n and (i % k == 0 and j % k == 0):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"-9\")\n    1011\n    \"\"\"\n    x = abs(int(stdin))\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(x % 2)\n        x = x // -2\n    digits = digits[::-1]\n    return \"\".join([str(d) for d in digits])\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    i = 0\n    result = []\n    while number > 0:\n        if number % (-2) >= 0:\n            result.append(1)\n            number -= 1\n        else:\n            result.append(0)\n        number /= (-2)\n    return \"\".join(list(reversed(result)))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the base -2 representation of N'''\n    return ''.join(['1' if int(digit) < 0 else '0' for digit in stdin])"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the base -2 representation of given number.\n\n    Args:\n        stdin: N.\n\n    Returns:\n        Base -2 representation of N.\n    \"\"\"\n    return int(stdin[::-1], 2)\n\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    result = []\n    while n > 0:\n        result.append(n % 2)\n        n = int(n / -2)\n    result.reverse()\n    return \"\".join(str(i) for i in result)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return str(bin(num))[2:].replace('1', '#').replace('0','').replace('#', '1')"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    base2 = ''\n    while n > 0:\n        base2 += str(n % (-2))\n        n //= (-2)\n    return base2[::-1]\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read in input\n    n, m = map(int, stdin.readline().strip().split(' '))\n    a = []\n    b = []\n    for _ in range(n):\n        a_i, b_i = map(int, stdin.readline().strip().split(' '))\n        a.append(a_i)\n        b.append(b_i)\n    # write your code in Python 3.6\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    i = 0\n    ans = 0\n    while m > 0:\n        if m >= a[i]:\n            ans += a[i]*b[i]\n            m -= a[i]\n        else:\n            ans += m*b[i]\n            break\n        i += 1\n    return str(ans)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = [int(x) for x in stdin.split(' ')]\n    A, B = [], []\n    for i in range(N):\n        A.append(int(stdin.readline().strip()))\n        B.append(int(stdin.readline().strip()))\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    total = 0\n    for i in range(N):\n        total += (A[i] * B[i])\n        if total >= M:\n            break\n    return total"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nReturn the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    b = []\n    for _ in range(n):\n        b.append(list(map(int, stdin.split(' '))))\n    # print(b)\n    a = [0] * n\n    for i in range(n):\n        if sum(b[i]) >= m:\n            a[i] = 1\n        else:\n            a[i] = 0\n    # print(a)\n    b = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                b[j] = max(b[j], b[i] + a[i])\n    print(sum(b))\n    return"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    A, B = [], []\n\n    for i in range(N):\n        a, b = stdin.split()\n        a, b = int(a), int(b)\n        A.append(a)\n        B.append(b)\n\n    dp = [0] * (M + 1)\n    for i in range(N):\n        for j in range(A[i], M + 1):\n            dp[j] = max(dp[j], dp[j - A[i]] + B[i])\n\n    return str(dp[M])\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass\n    n, m = list(map(int, stdin.split(\" \")))\n    a = []\n    b = []\n    for _ in range(n):\n        a_i, b_i = list(map(int, stdin.split(\" \")))\n        a.append(a_i)\n        b.append(b_i)\n    # print(a, b)\n    total = 0\n    while m:\n        for i in range(n):\n            if m > b[i]:\n                total += m // b[i] * a[i]\n                m %= b[i]\n        m += 1\n    return total\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first line of the input contains two integers N and M, the number of stores and the number of energy drinks.\n    The next N lines each contain two integers A_i and B_i, the price of the i-th store in yen and the maximum number of cans it can sell, respectively.\n    \"\"\"\n\"\"\"\nWe can reduce this problem to the subproblem (N-1, M) where we buy the smallest number of cans, and subtract their price from the amount of money that we have.\n\nThen, if the remaining amount of money is less than the price of the remaining cans, we can reduce the problem further to the subproblem (N-1, M-(A_i+1)*B_i), where we buy the smallest number of cans.\n\nFinally, we are left with the subproblem (N, M), and the optimal solution is the minimum of the two subproblems.\n\"\"\"\n    def optimal_solution(m: int, money: int, cans: list) -> int:\n        if m == 0:\n            return money\n        return min(optimal_solution(m - 1, money, cans) + (cans[0] * cans[1]), optimal_solution(m - 1, money - (cans[0] + 1) * cans[1], cans))\n\n    return optimal_solution(\n        int(stdin.split()[1]),\n        int(stdin.split()[0]),\n        [int(i) for i in stdin.splitlines()[1:]])\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution calculates minimum money to buy energy drinks\n    :param stdin: standard input\n    :return: minimum money to buy energy drinks\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    # counts stores and bottles\n    n = int(stdin[0].split()[0])\n    m = int(stdin[0].split()[1])\n    # stores' numbers and bottles' amounts\n    stores = [int(i) for i in stdin[1].split()]\n    bottles = [int(i) for i in stdin[2].split()]\n    # total capacity of bottles\n    total = 0\n    for i in stores:\n        total += i * bottles[stores.index(i)]\n    if total < m:\n        return 'impossible'\n    return total - m"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom math import ceil\nimport sys\n\nfrom typing import List, Dict\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M = map(int, stdin.readline().strip().split())\n\n        store: Dict[str, List[int]] = {}\n\n        for _ in range(N):\n            store_name, store_price = stdin.readline().strip().split()\n            store[store_name] = [ceil(int(store_price) / A) for A in map(int, stdin.readline().strip().split())]\n\n        store_names: List[str] = list(store.keys())\n        store_names.sort(key=lambda name: store[name][0], reverse=True)\n\n        best_price: int = 0\n        for store_name in store_names:\n            can_be_sold: int = min(M, store[store_name][0])\n            best_price += can_be_sold * store[store_name][1]\n            M -= can_be_sold\n\n        return best_price\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution goes here\n    # Read input\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split(' ')))\n\n    # Write answer\n    answer = 0\n    arr.sort()\n    for i in range(1, n):\n        if arr[i] <= arr[i - 1]:\n            answer += 1\n            arr[i] = arr[i - 1]\n    return answer\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split()) == 1:\n        n = int(stdin)\n        lst = [int(i) for i in stdin.split()]\n    else:\n        n = len(stdin.split()) - 1\n        lst = [int(i) for i in stdin.split()[1:]]\n    counter = 0\n    while n > 0:\n        if lst[n - 1] >= lst[n - 2]:\n            n -= 1\n        else:\n            counter += 1\n            lst[n - 1] = lst[n - 2]\n            n -= 2\n    print(counter)\n    return ''"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'The maximum number of times you can move is 2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum number of times you can move in the building\n\n    Args:\n        stdin (str): Input String\n\n    Returns:\n        str: Output String\n    '''\n    N, *l = list(map(int, stdin.split()))\n    l = list(reversed(sorted(l)))\n    a = l.index(l[-1])\n    r = 0\n    for i, v in enumerate(l):\n        if i < a:\n            r += i + 1\n        else:\n            r += a\n    return r"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    H = [int(x) for x in lines[1].split(' ')]\n\n    dp = [0] * N\n    dp[0] = 1\n\n    for i in range(1, N):\n        for j in range(i):\n            if H[j] >= H[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return dp[N-1]\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 10 4 8 7 3\n   ... ''')\n    2\n    '''\n    N = int(next(stdin.split()))\n    H = [int(n) for n in next(stdin.split())]\n    current = H[0]\n    count = 0\n    for n in H[1:]:\n        if n > current:\n            count += 1\n            current = n\n    return count\n    pass"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(__main__(stdin))\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of operations needed to obtain at least k equal numbers from an array.\"\"\"\n    input_lines = stdin.strip().split('\\n')\n    n, k = list(map(int, input_lines[0].split(' ')))\n    a = list(map(int, input_lines[1].split(' ')))\n    result = 0\n    for i in range(len(a)):\n        a[i] //= 2\n        if a[i] == k:\n            result += 1\n    for i in range(1, len(a)):\n        if a[i] >= k:\n            result += a[i] - k + 1\n    return str(result)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total_moves = int(stdin.split()[1])\n    arr = [int(x) for x in stdin.split()[0].split(' ')]\n    count = 0\n    for i in arr:\n        if i % 2!= 0:\n            count += 1\n    return total_moves - count"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    assert 1 <= k <= n <= 2 * 10 ** 5\n    assert 1 <= n <= 2 * 10 ** 5\n    assert 1 <= a[i] <= 2 * 10 ** 5\n\n    # calculate the number of times we need to divide by 2\n    times = [0] * n\n    for i in range(n):\n        times[i] = max(0, k - a[i])\n        k -= times[i]\n        while k < a[i]:\n            k += 2\n            times[i] += 1\n\n    return max(times)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # get input\n\n    # define variables\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    a = [0]\n    b = [0]\n    for i in range(n):\n        a.append(a[-1] + arr[i])\n        b.append(b[-1] + (arr[i] - arr[i] // 2))\n    return a, b"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Args:\n        stdin (str): The standard input.\n\n    Returns:\n        str: The standard output.\n    \"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n\n    count = 0\n    while len(a) > 0:\n        if a[0] == k:\n            break\n        elif a[0] < k:\n            a.append(2 * a[0])\n            a.remove(a[0])\n            count += 1\n        elif a[0] > k:\n            a.remove(a[0])\n            count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    count = 0\n    for i in range(n):\n        if a[i] % 2!= 0:\n            a[i] = a[i] // 2 + 1\n            count += 1\n    if count > k:\n        return count - k\n    else:\n        return 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n, k = map(int, lines[0].split())\n    arr = list(map(int, lines[1].split()))\n    \n    arr.sort()\n    #arr = sorted(arr)\n    #print(arr)\n    \n    # k\ub294 \ucd5c\uc18c \uba87\ubc88 \ubc18\ubcf5\ub418\uc57c k\uac1c\uac00 \ub418\ub294\uac00\n    # \uac00\uc9c0\uace0 \uc788\ub294 \uac83\uc740 \uadf8 \uac12\uc758 \ucd5c\ub313\uac12\n    m = k\n    \n    # \ucd5c\uc18c \uba87\ubc88 \ubc18\ubcf5\ub418\ub294\uc9c0 \ucc3e\uae30\n    for i in range(n-1):\n        m = min(m, arr[i]+k//(n-i-1))\n    \n    #print(m)\n    return str(m)"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(i) for i in stdin.strip().split()]\n    assert(k <= a)\n\n    a = sorted([int(i) for i in stdin.strip().split()])\n    answer = 0\n    while len(a) < k:\n        a.append(a[-1] + 1)\n        a.append(a[0] - 1)\n        a = sorted(a)\n        answer += 1\n    return answer\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    n = stdin[1]\n    k = stdin[2]\n    if k > n:\n        print(0)\n        return\n    nums = list(map(int, stdin[3].split()))\n    nums.sort()\n    print(sum(abs(nums[i] - nums[0]) for i in range(n - 1, n - k - 1, -1)))\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    nums = [int(x) for x in stdin.split()]\n    nums.sort()\n    moves = 0\n    for i in range(n):\n        if nums[i] == nums[k - 1]:\n            break\n        if nums[i] < nums[k - 1]:\n            nums[i] += 1\n            moves += 1\n        else:\n            nums[i] -= 1\n            moves += 1\n    return moves\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get the numbers from input\n    numbers = [int(i) for i in stdin.split()]\n    # get the amount of numbers\n    n = numbers[0]\n    # get the amount of needed numbers\n    k = numbers[1]\n\n    # get the minimum of the numbers\n    min_number = min(numbers)\n    # get the maximum of the numbers\n    max_number = max(numbers)\n\n    # count how many times the minimum number is repeated\n    count = numbers.count(min_number)\n\n    # if the min number is in the list and is more than 1\n    if count >= k:\n        # get the amount of times it is repeated\n        times = k // count\n        # if the amount of times the min number is repeated is more than 1\n        if k % count > 0:\n            # add 1 to the amount of times the min number is repeated\n            times += 1\n\n        # add the amount of times the min number is repeated to the number of moves\n        n += (count * times - k)\n\n    # if the min number is in the list and is less than k\n    elif count < k:\n        # add k - count to the number of moves\n        n += (k - count)\n\n    # if the min number is not in the list\n    else:\n        # add k - count to the number of moves\n        n += (k - count)\n\n    # return the number of moves\n    return str(n)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def parse(stdin: str):\n        n, k = [int(x) for x in stdin.split(' ')]\n        a = [int(x) for x in stdin.split(' ')]\n        return n, k, a\n\n    def get_min_max_indices(a):\n        return a.index(min(a)), a.index(max(a))\n\n    n, k, a = parse(stdin)\n    min_a_index, max_a_index = get_min_max_indices(a)\n    min_a_value = a[min_a_index]\n    max_a_value = a[max_a_index]\n    min_move_value, max_move_value = min_a_value, max_a_value\n    min_moves = abs(min_a_value - min_move_value)\n    max_moves = abs(max_a_value - max_move_value)\n    min_moves_counter = min_moves\n    max_moves_counter = max_moves\n    n_max_moves_counter = n - k\n    min_moves_counter = min(min_moves_counter, n_max_moves_counter)\n    max_moves_counter = min(max_moves_counter, n_max_moves_counter)\n    min_moves_counter += 1\n    max_moves_counter += 1\n    while (max_moves_counter > min_moves_counter):\n        if (min_move_value < max_move_value):\n            min_move_value += 1\n            min_moves_counter += 1\n        else:\n            max_move_value -= 1\n            max_moves_counter += 1\n    return min_moves_counter\n\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str()\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(something)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    counter = 0\n    if k <= n:\n        for i in range(n):\n            counter += max(0, a[i] - k + 1)\n    else:\n        for i in range(n):\n            counter += 1\n            a[i] -= 1\n    return counter\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task.\"\"\"\n    pass\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(map(str, stdin))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the first problem.\n\n    Args:\n        stdin (str): The input of the problem.\n\n    Returns:\n        str: The answer for the problem.\n    \"\"\"\n    n = int(stdin)\n    c1, c2, ans = [0, 0] * n, [0, 0] * n, [0, 0] * n\n    for i in range(n):\n        c1[i], c2[i], ans[i] = map(int, stdin.split(\"\\n\")[i].split())\n    c = [0] * n\n    c[0] = min(c1[0], c2[0])\n    for i in range(1, n):\n        c[i] = min(c[i - 1], min(c1[i], c2[i]))\n    return c[n - 1]\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split(\"\\n\")\n    n, a, b = int(n), int(a), int(b)\n    b = min(n // a, n // b)\n    c = n - b\n    a = n - c\n    print(a, b)\n\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        print(a * n + b * (n - 1))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min_water(int(stdin.readline()), [int(x) for x in stdin.readline().split()], [int(x) for x in stdin.readline().split()]))\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = []\n    for _ in range(n):\n        lst.append(list(map(int, stdin.readline().split())))\n    for _ in range(n):\n        a, b = min(lst[_][1], lst[_][2]), max(lst[_][1], lst[_][2])\n        print(a*lst[_][0] + b*lst[_][0])\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, X = map(int, stdin.split(' '))\n    L = list(map(int, stdin.split(' ')))\n    return str(sum(1 for i in range(N + 1) if X > sum(L[:i + 1])))\n    \n    \n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 6\\n3 4 5\")\n    2\n    \"\"\"\n    N, X = map(int, stdin.split(\" \"))\n    coords = list(map(int, stdin.split(\"\\n\")[1:]))\n    return (\n        sum(1 for coord in coords if coord <= X)\n        + 1\n        if coords[-1] <= X\n        else 0\n    )\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, limit = map(int, stdin.split(' '))\n    lengths = list(map(int, stdin.split(' ')))\n    bounces = 0\n    for i, length in enumerate(lengths):\n        # If the bounce is too large, then it never gets to the limit\n        if (limit - length) / 2 < 0:\n            continue\n        # Otherwise, it reaches the limit, so there's a bounce\n        bounces += 1\n    return bounces\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(int(stdin[0]) + int(stdin[1]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_bounces = 0\n    bounce_distances = []\n    for line in stdin.split('\\n'):\n        line = line.split()\n        if len(line)!= 2:\n            break\n        num_bounces, distance = int(line[0]), int(line[1])\n        bounce_distances.extend([distance] * num_bounces)\n        total_bounces += num_bounces\n    last_bounce = bounce_distances[-1]\n    count = 0\n    for distance in bounce_distances:\n        if distance + last_bounce <= X:\n            count += 1\n            last_bounce = distance\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to HackerRank problem https://www.hackerrank.com/challenges/bouncing-ball\n    '''\n    def bounce(n, x, d):\n        total = 0\n        for i in range(n):\n            total += bounce_once(x, d[i])\n        return total\n\n    def bounce_once(x, d):\n        total = 1\n        for i in range(1, x):\n            if d % (2 * i) == 0:\n                total += 1\n        return total\n\n    N, X = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    print(bounce(N, X, d))"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Receives input str from Standard Input, solves the problem, and returns the solution'\n    # get input\n    n, x = [int(n) for n in stdin.split(' ')]\n    l = [int(n) for n in stdin.split(' ')]\n    # make list of positions where the ball will bounce\n    points = []\n    for n in range(n + 1):\n        points.append(x - l[n] * (n + 1))\n    # make counter\n    counter = 0\n    # check all points\n    for point in points:\n        if point <= 0:\n            counter += 1\n    # return answer\n    return str(counter)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, x = [int(i) for i in stdin.split(' ')]\n    l = [int(i) for i in stdin.split(' ')]\n    \n    return 0\n    '''\n    N, X = map(int, stdin.split(' '))\n    L = [int(i) for i in stdin.split(' ')]\n    \n    count = 0\n    pos = 0\n    for l in L:\n        pos += l\n        if pos <= X:\n            count += 1\n    \n    return count\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.readlines()[0].split())\n    L = list(map(int, stdin.readlines()[1].split()))\n    return str(sum([1 for i in range(1, N+1) if L[i-1] >= X]))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  def is_valid_input(raw_input: str) -> bool:\n    n, x = raw_input.split(' ')\n    if len(n) > 1 or int(n) > 100 or len(x) > 1 or int(x) > 10000:\n      return False\n    return True\n  \n  def process_input(raw_input: str) -> List[int]:\n    n, x = raw_input.split(' ')\n    return [int(x) for x in n.split(' ')]\n  \n  if not is_valid_input(stdin):\n    raise Exception('Invalid input')\n  \n  n, x = process_input(stdin)\n  if n <= 0:\n    return '0'\n  count = 0\n  for i in range(n + 1):\n    if i == 0:\n      continue\n    if i == 1:\n      count += x\n    else:\n      count += sum(process_input(stdin)[i - 1: i - 1 + x])\n  return str(count)\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(stdin.split(\"\\n\"))\n    words_count = int(input_list[0])\n    words = input_list[1: words_count + 1]\n    if len(words) == 0:\n        return \"Yes\"\n    result = []\n    for i, word in enumerate(words):\n        if i + 1 >= len(words):\n            return \"No\"\n        if word in result:\n            return \"No\"\n        if word[0] == words[i - 1][-1]:\n            result.append(word)\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = [i for i in stdin if i!= '']\n    stdin = stdin[1:]\n    return 'Yes' if len(stdin) == len(set(stdin)) else 'No'\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [str(stdin) for i in range(n)]\n    words.reverse()\n    previous_word = words.pop()\n    while words:\n        current_word = words.pop()\n        if current_word[0]!= previous_word[-1]:\n            return \"No\"\n        previous_word = current_word\n    return \"Yes\"\nprint(solution(input()))\n    \n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words: list[str] = stdin.split('\\n')[1:]\n    words.pop()\n\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if j == i:\n                continue\n            if len(words[j]) <= len(words[i]):\n                if len(words[i]) == len(words[j]):\n                    if words[i][0] == words[j][len(words[j]) - 1]:\n                        words[i] = words[j]\n    if len(words) == 1:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    words = []\n    for i in range(1, count + 1):\n        words.append(stdin[i])\n    \n    for j in range(count):\n        for k in range(count):\n            if j == k:\n                continue\n            if len(words[j])!= len(words[k]):\n                continue\n            if words[j][-1] == words[k][0]:\n                continue\n    return 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.splitlines()\n    n = int(words[0])\n    words_set = set(words[1:])\n    words_set = set(words[1:])\n    words_set_len = len(words_set)\n    if n == words_set_len:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 'Yes'\n    words = stdin.split('\\n')\n    pre_words = set()\n    for word in words:\n        if word in pre_words:\n            result = 'No'\n        pre_words.add(word)\n    return result\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")[:-1]\n    words = [word.split(\" \") for word in words]\n    words = [list(word[0]) for word in words]\n\n    last_words = []\n    for word in words:\n        if word in last_words:\n            return \"No\"\n        last_words.append(word)\n    return \"Yes\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    return str(max(a * 2, b * 3))\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * b"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split(' ')]\n    return str(a * b // math.gcd(a, b))\n\n----The following is code to output testcase.----\nsubprocess.run(['python3', '-c', input()])\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return b\n    return max(a, b)\n\nIf A == B, then the number of pieces that can be evenly distributed to the guests is B.\nIf A!= B, then the minimum number of pieces that can be evenly distributed to the guests is B.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(\" \")))\n    if A == 1 or B == 1:\n        return str(A + B)\n    elif A == 2:\n        return str(4 + int((B - 1) / 2))\n    else:\n        return str(5 + int((B - 1) / 2))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    return A +'' + B\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return str(A * B // gcd(A, B))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def numberOfSnackPieces(n: int) -> int:\n        return n * (n + 1) // 2\n\n    n, m = map(int, stdin.split())\n    return min(numberOfSnackPieces(n), numberOfSnackPieces(m))"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    return str(max(a // 2, b // 2, (a + b) // 3))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('e', 'x').replace('i', 'x').replace('o', 'x').replace('u', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('b', 'x').replace('c', 'x').replace('d', 'x').replace('e', 'x').replace('f', 'x').replace('g', 'x').replace('h', 'x').replace('i', 'x').replace('j', 'x').replace('k', 'x').replace('l', 'x').replace('m', 'x').replace('n', 'x').replace('o', 'x').replace('p', 'x').replace('q', 'x').replace('r', 'x').replace('s', 'x').replace('t', 'x').replace('u', 'x').replace('v', 'x').replace('w', 'x').replace('x', 'x').replace('y', 'x').replace('z', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a','x').replace('b','x').replace('c','x').replace('d','x').replace('e','x').replace('f','x').replace('g','x').replace('h','x').replace('i','x').replace('j','x').replace('k','x').replace('l','x').replace('m','x').replace('n','x').replace('o','x').replace('p','x').replace('q','x').replace('r','x').replace('s','x').replace('t','x').replace('u','x').replace('v','x').replace('w','x').replace('x','x').replace('y','x').replace('z','x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin)\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.replace('s', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"x\")"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s','x')\n\"\"\"\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the output\n\n    Args:\n        stdin (str): the input\n\n    Returns:\n        str: the output\n    \"\"\"\n    # getting the input\n    n = int(stdin)\n    # creating a list of the heights\n    arr = [int(s) for s in stdin.split('\\n')[1].split()]\n    # Creating a set of the heights\n    set_arr = set(arr)\n    # Checking if there is a index where the height is not in the set of heights\n    # This means that there is no way to decrease the heights\n    if n == 1:\n        return 'Yes'\n    # Checking if there is a index where the height is in the set of heights\n    # This means that you can decrease the height of the array\n    if set_arr == set(arr):\n        return 'Yes'\n    # There is no way to decrease the heights of the array\n    return 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(S: List[int]) -> str:\n        N = len(S)\n        max_height = float('-inf')\n        for i in range(N):\n            if S[i] > max_height:\n                max_height = S[i]\n            else:\n                return 'No'\n\n        return 'Yes'\n\n    return solve(list(map(int, stdin.split())))\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input: list[int] = list(map(int, stdin.split()))\n    # print(input)\n    lenInput = len(input)\n\n    if lenInput!= 2 and lenInput!= 3:\n        raise Exception(\"Invalid Input\")\n\n    if lenInput == 2:\n        if input[1] <= input[0]:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    if lenInput == 3:\n        if input[1] <= input[0] and input[2] <= input[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Count the number of squares.\n    2. Declare variables to track the max and min heights.\n    3. Iterate through the input.\n    4. Check if the current height is larger than the max height.\n    5. If it is, then update the max height.\n    6. If the current height is smaller than the min height, then check if the max height is 1.\n    7. If the max height is 1, then return Yes, otherwise return No.\n    \"\"\"\n\n    # 1.\n    N = int(stdin.readline())\n\n    # 2.\n    max_height = [0 for _ in range(N + 1)]\n    min_height = [0 for _ in range(N + 1)]\n\n    # 3.\n    for i in range(1, N + 1):\n        # 4.\n        max_height[i] = max(max_height[i - 1], int(stdin.readline()))\n\n        # 5.\n        if max_height[i] > min_height[i]:\n            min_height[i] = max_height[i - 1]\n        else:\n            min_height[i] = min_height[i - 1]\n\n    # 6.\n    max_height_one = max_height[-1] == 1\n\n    # 7.\n    return \"Yes\" if max_height_one else \"No\"\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length, array = map(int, stdin.split('\\n'))\n    array = list(map(int, array.split(' ')))\n\n    if array == sorted(array, reverse=True):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    n = int(line[0])\n    heights = [int(i) for i in line[1].split(\" \")]\n    visited = [False] * n\n    stack = []\n\n    def canBeDecreased(i: int):\n        if i == 0:\n            return True\n        return heights[i - 1] > heights[i]\n\n    def reduceHeight(i: int):\n        if visited[i]:\n            return\n        visited[i] = True\n        if canBeDecreased(i):\n            heights[i] -= 1\n        else:\n            return\n        reduceHeight(i - 1)\n\n    reduceHeight(n - 1)\n\n    return \"Yes\" if all(visited) else \"No\"\n\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.split('\\n')[1] ==''.join(\n        sorted(stdin.split('\\n')[0].split())) else 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split(\" \")))\n\n    for i in range(1, len(H)):\n        if H[i] < H[i-1]:\n            H[i] = H[i-1] - 1\n            if i > 0 and H[i] < H[i-2]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    N = data[0]\n    H = data[1:]\n\n    stack = []\n    for H_i in H:\n        while stack and H_i < stack[-1]:\n            stack.pop()\n        stack.append(H_i)\n\n    if stack == H:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"Your solution goes here.\"\n    a, b, c = map(int, stdin.split())\n    x = [int(e) for e in stdin.split()[1::2]]\n    y = [int(e) for e in stdin.split()[2::2]]\n    \n    if sum([x[0]*i for i in b]) + sum([x[1]*i for i in b]) + c < 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r\"2 3 -10\\n1 2 3\\n3 2 1\")\n    1\n    \"\"\"\n    _, _, _, N, B, C = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    M = len(A) // N\n    scores = 0\n    for i in range(N):\n        scores += M * A[i + M] * B\n    if scores + C > 0:\n        print(1)\n    else:\n        print(0)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\")\n    1\n    \"\"\"\n    _, _, _, _, lines = stdin.split(\"\\n\", 4)\n    N, M, C = list(map(int, lines.split()))\n    A = [list(map(int, line.split())) for line in lines.split(\"\\n\")]\n    A = [sum(i) for i in zip(*A)]\n    return str(sum([1 for i in range(N) if A[i] * B[i] + C > 0]))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = stdin.split(\" \")\n    N, M, C = int(N), int(M), int(C)\n    B = stdin.split(\"\\n\")\n    B.remove(B[0])\n    for i in range(len(B)):\n        B[i] = B[i].split(\" \")\n        for j in range(len(B[i])):\n            B[i][j] = int(B[i][j])\n\n    counter = 0\n    for i in range(len(B)):\n        for j in range(len(B[i])):\n            for k in range(len(B[i])):\n                if (B[i][j] * B[i][k] + C) > 0:\n                    counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(sum([sum([x * y for x, y in zip(row, col)]) + c for row in a for col in zip(*a)]))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - (n % 1000))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1000)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(sum(1000 - i for i in range(1000, N+1, 1000)))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = []\n    while N > 0:\n        if N >= 1000:\n            N -= 1000\n            bills.append(1000)\n        elif N >= 500:\n            N -= 500\n            bills.append(500)\n        elif N >= 100:\n            N -= 100\n            bills.append(100)\n        elif N >= 50:\n            N -= 50\n            bills.append(50)\n        elif N >= 10:\n            N -= 10\n            bills.append(10)\n        else:\n            N -= 1\n            bills.append(1)\n    return str(len(bills))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  change = N % 1000\n  result = N - change\n  return result\nprint(solution(input()))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return None"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    change = int(stdin)\n    if change % 1000!= 0:\n        raise ValueError(\"invalid input\")\n    else:\n        num_of_1000_notes = int(change / 1000)\n        remainder = change % 1000\n        num_of_500_notes = int(remainder / 500)\n        remainder = remainder % 500\n        num_of_100_notes = int(remainder / 100)\n        remainder = remainder % 100\n        num_of_50_notes = int(remainder / 50)\n        remainder = remainder % 50\n        num_of_10_notes = int(remainder / 10)\n        remainder = remainder % 10\n        num_of_5_notes = int(remainder / 5)\n        remainder = remainder % 5\n        num_of_1_notes = int(remainder / 1)\n        print(num_of_1000_notes + num_of_500_notes + num_of_100_notes + num_of_50_notes + num_of_10_notes + num_of_5_notes + num_of_1_notes)\n\nsolution(input())\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_yen = int(stdin)\n    number_of_1000yen = number_of_yen // 1000\n    number_of_yen_change = number_of_yen - number_of_1000yen * 1000\n    return str(number_of_yen_change)\n\"\"\"\n\n\"\"\"\nThe following is a solution to the problem.\nIt is written in python.\n\"\"\"\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  change = N % 1000\n  if change == 0:\n    print(0)\n  elif change < 100:\n    print(N - change)\n  else:\n    print(N - change + 1000)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    a = 1000 - money % 1000\n    b = money % 1000\n    print(a, b)\n    return"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Get solution\n    solution = 0\n    for i in range(n):\n        if (B[i] - A[i]) < A[i + 1]:\n            solution += B[i] - A[i]\n        else:\n            solution += A[i + 1]\n    print(solution)"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, B = map(int, stdin.split())\n    A = [0] + A\n    dp = [0] * (B + 1)\n    dp[0] = N\n    for a in A:\n        for i in range(1, B + 1):\n            dp[i] = max(dp[i], dp[i - a] + 1)\n    return dp[B] - 1\n\"\"\"\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/training64RJG4-7WQ/\n    '''\n   ...\n    return 0"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, B = map(int, stdin.split())\n\n    def calculate_max_monsters(A, B):\n        total = 0\n        for i in range(N):\n            a, b = A[i], B[i]\n            total += min(a, b)\n            A[i + 1] -= min(a, b)\n            B[i] -= min(a, b)\n        return total\n\n    return str(calculate_max_monsters(A, B))"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given number of towns, towns, and heroes in the group. Find the maximum total number of monsters to defeat.\n\n    Args:\n        stdin (str): input of the form N, A1, A2,..., AN, B1, B2,..., BN\n\n    Returns:\n        str: maximum number of monsters to defeat\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    b = [int(x) for x in stdin.split(\"\\n\")[2].split()]\n\n    monsters = 0\n    for i in range(n):\n        monsters += max(b[i] - a[i], 0)\n    return monsters\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    max_b = sum(B)\n    res = 0\n    i = 0\n    while True:\n        if max_b - B[i] >= A[i]:\n            max_b -= A[i]\n            i += 1\n            res += 1\n        else:\n            break\n    return res"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You have an infinite supply of d d-dimensional cubes. In a single move,\n    you can move any of the cubes which have an odd number of d neighbors\n    which are of the same color as the cube to an adjacent square with an\n    even number of d neighbors that are of a different color.\n    Return the minimum number of moves to reduce the number of cubes to 1.\n    '''\n    # Input parsing\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    # Solution\n    c = 0\n    while len(a) > 1:\n        print(a)\n        n = min(b)\n        while a[0] % 2 == 0:\n            n -= 1\n            a[0] /= 2\n        while a[-1] % 2 == 1:\n            n -= 1\n            a[-1] /= 2\n        a = [a[0], *[x/2 for x in a[1:-1]], a[-1]]\n        c += n\n    print(c)\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The problem can be solved by dynamic programming.\n    For each city, we use a table count to record the maximum number of monsters the hero can defeat in each city.\n    '''\n    N = int(stdin.readline().strip())\n    count = [0] * (N + 1)\n    for line in stdin:\n        A, B = list(map(int, line.split()))\n        count[A] = max(count[A], B)\n        count[A + 1] = max(count[A + 1], B)\n    return max(count)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split(' ')\n    x, y, z = int(x), int(y), int(z)\n    for n in range(1, len(stdin.split(' ')) + 1):\n        if sum([int(i) for i in stdin.split(' ')]) == z:\n            return 'War'\n        elif int(stdin.split(' ')[n - 1]) < z:\n            return 'War'\n        elif int(stdin.split(' ')[n - 1]) == z:\n            return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get user input\n    input_list = stdin.split('\\n')\n    x_1, x_2,..., x_N = map(int, input_list[0].split(' '))\n    y_1, y_2,..., y_M = map(int, input_list[1].split(' '))\n    \n    # Determine if the user input matches the problem constraints\n    if x_1 > x_2 or x_2 > x_3 or y_1 < y_2 or y_2 < y_3:\n        return 'War'\n    \n    # Determine if the user input matches the problem constraints\n    for index in range(2, len(input_list)):\n        temp_list = input_list[index].split(' ')\n        for index2 in range(2, len(temp_list)):\n            if int(temp_list[index2]) < x_1 or int(temp_list[index2]) > y_1:\n                return 'War'\n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the required parameters from the input and \n    calculates the maximum city distance that can be reached\n    using the cities and returns 'No War' if the distance is less\n    than or equal to the maximum distance, otherwise 'War'.\n    \"\"\"\n    n, m, x, y = map(int, stdin.split())\n    x_points = sorted(map(int, stdin.split()[1:]))\n    y_points = sorted(map(int, stdin.split()[1:]))\n    x_max_distance = x_points[-1] - x_points[0]\n    y_max_distance = y_points[-1] - y_points[0]\n    max_distance = x_max_distance if x_max_distance > y_max_distance else y_max_distance\n    if max_distance <= x:\n        return 'War'\n    return 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if m * n < y or n * m < x:\n        return 'War'\n    z = None\n    for i in range(m):\n        if (x - z) * (y - z) <= 0:\n            return 'War'\n        z = max(z, y - m * i)\n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    z = 0\n    while x <= y:\n        x = x + 1\n        if x > y:\n            break\n        if x == z:\n            break\n    while x > z:\n        z = z + 1\n        if z == y:\n            break\n    return 'War' if z < x else 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, x, y) = list(map(int, stdin.split(' ')))\n    z = int(stdin)\n    if x < z <= y:\n        if any(x < x_i < z for x_i in range(n)) and any(z < y_i < z for y_i in range(m)):\n            return 'War'\n        else:\n            return 'No War'\n    else:\n        return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin.split('\\n')\n    x_str = num_str[0].split()\n    x = list(map(int, x_str))\n    y_str = num_str[1].split()\n    y = list(map(int, y_str))\n    x = sorted(x)\n    y = sorted(y)\n    if x[0] < y[0] or x[-1] > y[-1]:\n        return 'War'\n    return 'No War'\n\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, x, y = [int(x) for x in lines[0].split(' ')]\n    x_lines = lines[1].split(' ')\n    y_lines = lines[2].split(' ')\n    x_count = {}\n    y_count = {}\n    for x_line in x_lines:\n        x_count[x_line] = x_count.get(x_line, 0) + 1\n    for y_line in y_lines:\n        y_count[y_line] = y_count.get(y_line, 0) + 1\n    for key, value in x_count.items():\n        if (value < n and key < y) or (value > n and key > y):\n            return 'No War'\n    for key, value in y_count.items():\n        if (value < m and key < x) or (value > m and key > x):\n            return 'No War'\n    return 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(c) for c in stdin.split()]\n    for z in range(1, 101):\n        if x < z <= y and all(\n            [x < z < y for x, y in zip(x, y) if x < y]\n        ):\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M, X, Y = map(int, stdin.readline().split())\n    x = sorted(map(int, stdin.readline().split()))\n    y = sorted(map(int, stdin.readline().split()))\n    left, right = 0, N\n    while left < right:\n        mid = (left + right) // 2\n        if X < x[mid] <= Y:\n            right = mid\n        else:\n            left = mid + 1\n    if left == 0:\n        return 'War'\n    left, right = 0, M\n    while left < right:\n        mid = (left + right) // 2\n        if X <= y[mid] < Y:\n            right = mid\n        else:\n            left = mid + 1\n    if left == 0:\n        return 'War'\n    return 'No War'\n    '''\n    x = sorted(map(int, stdin.readline().split()))\n    y = sorted(map(int, stdin.readline().split()))\n    return 'War' if x[0] < y[0] <= x[-1] or x[0] <= y[-1] < x[-1] else 'No War'\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(n) for n in stdin.split(\"\\n\")[:-1]]\n    num = 0\n    for t in data[1:]:\n        num += t * 360 // data[0]\n    return num\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Turn clock in \"N\" seconds, and get the \"N\" seconds when the hand of every clock point to \"1\"\n    return sum([int(str(clock)) for clock in range(1, N+1)]) - 1"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = [int(x) for x in stdin.split('\\n')]\n    \n    times = [(n - i) % 360 for i in range(n)]\n    \n    return str(sum(times) + max(times))\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of seconds after which the hands of all clocks point directly upward again.\n    '''\n    N, T = stdin.split('\\n')\n    return sum(int(x) for x in T.split(' ') if x)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, times = map(int, stdin.split('\\n')[0].split(' '))\n    times = list(map(int, stdin.split('\\n')[1].split(' ')))\n    return str(sum(max(t - i, 0) for i, t in enumerate(times)))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the Kata\"\"\"\n    return max(range(int(stdin.split()[0])), key=lambda t: int(t) * 360) * int(stdin.split()[1])\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = map(int, stdin.split('\\n'))\n    seconds = [sum(times) % 60]\n    for i in range(1, n):\n        seconds.append(seconds[i - 1] + times[i - 1])\n    return '\\n'.join(map(str, seconds))\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, N+1):\n        cnt += T%i\n    return cnt\n\"\"\"\n\n\nimport unittest\n\n\nclass Test12(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('2\\n2\\n3'), 6)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split('\\n')]\n    clocks = [0] * n\n    for i in range(t):\n        for clock in range(n):\n            clocks[clock] += int(input())\n    clocks.sort()\n    if len(clocks) == 1:\n        return str(clocks[0])\n    return str(clocks[n - 1] - clocks[0])\n\"\"\"\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is the main function that calculates the solution\"\"\"\n    count = 0\n    N = int(stdin.split('\\n')[0])\n    arr = [int(stdin.split('\\n')[1]) for _ in range(N)]\n    # If the difference is larger than N, then we need to add N to it.\n    # For example, if N=3, then the total time is 3 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 45 seconds\n    # Similarly, if N=4, then the total time is 4 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 75 seconds\n    # Therefore, we need to add N to all the numbers to be able to get the final result.\n    # The time interval is always less than N, hence it is the case that N is not in the list of the input numbers.\n    for i in arr:\n        count += i\n    for i in range(1, N + 1):\n        count += N\n    return count"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Split input\n    line1 = stdin.readline()\n    n = int(line1)\n    line2 = stdin.readline()\n    weights = list(map(int, line2.split(\" \")))\n    # weights = [int(s) for s in line2.split(\" \")]\n    # Calculate S_1 and S_2\n    s1 = 0\n    s2 = 0\n    # We will use the weights up to T\n    for weight in weights[0:T]:\n        s1 += weight\n        s2 += weight\n    # All the weights with index greater than T\n    s2 += sum(weights[T:])\n    # The absolute difference\n    abs_diff = abs(s1 - s2)\n    return str(abs_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip())\n    weights = list(map(int, stdin.readline().rstrip().split()))\n    T = int(stdin.readline().rstrip())\n    count = {}\n    answer = 1000000\n    for i in weights:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in range(T):\n        if i in count:\n            answer = min(answer, abs(sum(weights[:i])-sum(weights[i:])))\n        else:\n            answer = min(answer, abs(sum(weights[:i+1])-sum(weights[i+1:])))\n    print(answer)\n    return ''\n\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(i) for i in stdin.readline().split()]\n    # T = 1, S_1 = min(W_1, W_2), S_2 = max(W_1, W_2)\n    T = 1\n    s_1 = min(weights)\n    s_2 = max(weights)\n\n    min_diff = abs(s_1 - s_2)\n\n    # T = 2, S_1 = W_1 + W_2, S_2 = W_3\n    T = 2\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 3, S_1 = W_1 + W_2 + W_3, S_2 = W_4\n    T = 3\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 4\n    T = 4\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 5\n    T = 5\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 6\n    T = 6\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 7\n    T = 7\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 8\n    T = 8\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 9\n    T = 9\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 10\n    T = 10\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 11\n    T = 11\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    # T = 12\n    T = 12\n    s_1 = s_1 + s_2\n    s_2 = weights[-1]\n    min_diff = min(min_diff, abs(s_1 - s_2))\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the result\n    N = int(stdin.split()[0])\n    weights = [int(x) for x in stdin.split()[1:]]\n    if N <= 2:\n        return 0\n    weights.sort()\n    w_min, w_max = weights[0], weights[-1]\n    t = N // 2\n    weights = weights[:t] + weights[t:]\n    min_diff = abs(sum(weights) - sum(weights[:t]))\n    for i in range(t, len(weights)):\n        if abs(sum(weights[:t]) - sum(weights[t:])) < min_diff:\n            min_diff = abs(sum(weights[:t]) - sum(weights[t:]))\n    return min_diff"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_nums(string: str) -> List[int]:\n        return [int(s) for s in string.split() if s.isnumeric()]\n\n    inputs = get_nums(stdin)\n    n, *weights = inputs\n\n    def get_group_sums(weights: List[int]) -> Tuple[int, int]:\n        total = sum(weights)\n        less_than_total = 0\n        greater_than_total = 0\n        for w in weights:\n            if w < total / 2:\n                less_than_total += w\n            else:\n                greater_than_total += w\n        return less_than_total, greater_than_total\n\n    total_1, total_2 = get_group_sums(weights)\n    return abs(total_1 - total_2)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *w = stdin.split('\\n')\n    if n == '1':\n        return '0'\n    w = [int(x) for x in w]\n    a = [w[i] for i in range(1, n+1) if i <= int(n/2)]\n    b = [w[i] for i in range(1, n+1) if i > int(n/2)]\n    m1 = sum(a)\n    m2 = sum(b)\n    return str(abs(m1-m2))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin\n    # input = stdin.readline\n\n    # input_data = input().split()\n    # a = input_data[0]\n    # b = input_data[1:]\n    # c = list(map(int, b))\n\n    # input_data = input().split()\n    # a = input_data[0]\n    # b = input_data[1:]\n    # c = list(map(int, b))\n\n    # input_data = input().split()\n    # N = input_data[0]\n    # W = input_data[1:]\n    # c = list(map(int, W))\n\n    # return solution(N, W)\n\n    def recursion(weights, T, size, a, b, diff):\n        if size == T:\n            return a, b, diff\n        diff = min(diff, abs(a - b))\n        a += weights[size]\n        return recursion(weights, T, size + 1, a, b, diff)\n    \n    N = int(input())\n    W = input().split()\n    W = list(map(int, W))\n\n    T = int(input())\n\n    _, _, diff = recursion(W, T, 0, 0, 0, float('inf'))\n    \n    return str(diff)"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, *weights = lines[0].split()\n    n, weights = int(n), list(map(int, weights))\n\n    return min(\n        abs(sum(weights[:t]) - sum(weights[t:]))\n        for t in range(1, n)\n    )\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n: int\n    w: list[int]\n    '''\n    n, *w = map(int, stdin.split())\n    \n    s1, s2 = 0, 0\n    i = 0\n    while i < n:\n        if i < n - 1:\n            s1 += w[i]\n            s2 += w[i + 1]\n            i += 2\n        else:\n            s1 += w[i]\n            i += 1\n            \n    return str(min(s1, s2))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.split(' ')]\n    a = [[int(c) for c in stdin.split('\\n')[i].split(' ')] for i in range(n)]\n\n    def cyclic(l):\n        if not len(l):\n            return []\n        m = max(l)\n        d = {l.pop(0): m}\n        while len(l):\n            d[l.pop(0)] = m\n            m += 1\n        return d\n\n    c = {i: cyclic(a[i]) for i in range(n)}\n    a = [a[i] for i in range(n)]\n\n    def f(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def f2(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r2(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def f3(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r3(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def f4(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r4(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def r5(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def f6(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r6(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def r7(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r8(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def r9(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r10(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    def r11(i, j):\n        j = j % m\n        x = c[i][j]\n        a[i][j] = x\n        a[i].append(x)\n        a[i].pop(0)\n\n    def r12(i, j):\n        j = j % m\n        x = a[i][j]\n        c[i][j] = x\n        a[i].pop()\n        c[i].pop(0)\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= c[i][j]:\n                "
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")\n    '2'\n    >>> solution(\"3 3\\n3 2 1\\n1 2 3\")\n    '6'\n    >>> solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")\n    '0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def cyclic_shift(matrix):\n        shift = [0] * len(matrix[0])\n        for column in range(len(matrix[0])):\n            shift[column] = matrix[-1][column]\n            matrix[-1][column] = matrix[0][column]\n        for row in range(len(matrix) - 1):\n            matrix[row][column] = matrix[row + 1][column]\n        for column in range(len(matrix[0])):\n            matrix[0][column] = shift[column]\n        return matrix\n\n    def get_score(matrix):\n        score = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                score += abs(i - 1) * len(matrix[i]) + j - matrix[i][j]\n        return score\n\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        matrix[i] = list(map(int, stdin.split()))\n    matrix = cyclic_shift(matrix)\n    score = get_score(matrix)\n    print(score)\n    return ''\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of moves needed to obtain the matrix with the following property:\n    $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for i in range(n)]\n    result = 0\n    for i in range(m):\n        min_index = i\n        for j in range(i, m):\n            if a[1][j] < a[1][min_index]:\n                min_index = j\n        a[0][min_index], a[0][i] = a[0][i], a[0][min_index]\n        result += min_index - i\n        for j in range(n):\n            a[j][i], a[j][min_index] = a[j][min_index], a[j][i]\n    return str(result)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def move_column(column: List[int], index: int) -> None:\n        for i in range(len(column)):\n            column[(i + index) % len(column)] = column[i]\n\n    n, m = [int(x) for x in stdin.split(\" \")]\n    matrix = [[int(x) for x in stdin.split(\" \")] for _ in range(n)]\n    moves = 0\n    while True:\n        first_column = [matrix[x][0] for x in range(n)]\n        best_column = first_column\n        for i in range(1, m):\n            best_column = [\n                matrix[x][i] if matrix[x][i] < best_column[i - 1] else best_column[i - 1]\n                for x in range(n)\n            ]\n        if best_column == first_column:\n            break\n        else:\n            move_column(first_column, 1)\n            moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def matrix_builder(n: int, m: int, lines: List[str]) -> List[List[int]]:\n        return [list(map(lambda x: int(x) - 1, lines[i].split(' '))) for i in range(n)]\n\n    def matrix_shifter(matrix: List[List[int]], col: int, val: int) -> None:\n        for i in range(len(matrix)):\n            matrix[i][col] = val + i\n\n    n, m = map(lambda x: int(x), stdin.split(' '))\n    matrix = matrix_builder(n, m, [stdin.split('\\n')[i] for i in range(n)])\n\n    for i in range(m):\n        matrix_shifter(matrix, i, i)\n\n    return str(n * m - sum([matrix[i][i] for i in range(n)]))\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def f(s: str) -> str:\n        n, m = s.split(' ')\n        n, m = int(n), int(m)\n        s = s.split('\\n')\n        s = [[int(i) for i in s[j].split(' ')] for j in range(n)]\n        s = [[i, j] for i, j in enumerate(s)]\n        s.sort(key=lambda x: x[0])\n        s = [s[i][1] for i in range(len(s))]\n        res = 0\n        for i in range(len(s)):\n            res += s[i] * m\n            res += (m - 1) * (n - i)\n        return str(res)\n\n    return f(stdin)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split(' '))) for i in range(n)]\n    cols = {i: [0] * m for i in range(1, m + 1)}\n    for j in range(m):\n        for i in range(n):\n            cols[j + 1].append(cols[j + 1].pop(0) + a[i][j])\n    res = 0\n    for j in range(m):\n        for i in range(1, n):\n            a[i][j] = i * m + j\n            if a[i][j] == cols[j + 1][0]:\n                res += 1\n                cols[j + 1].append(cols[j + 1].pop(0))\n    return res\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first, second = stdin.split('\\n')\n    n = int(first.strip())\n    s = [int(n) for n in second.strip().split()]\n    dp = [1] * n\n    for i in range(n):\n        dp[i] += dp[i - 1] + 1 if s[i] == s[i - 1] else 1\n    return str(sum(dp) // 2)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    students = [int(s) for s in stdin.split(\" \")]\n    print(sum(students[::2]) - sum(students[1::2]))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *skills = [int(x) for x in stdin.split()]\n\n    pair_skills = 0\n    for skill in skills:\n        pair_skills += max(0, skill - 1) // 2\n\n    return str(n // 2 - pair_skills)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams.\"\"\"\n    # Read the input.\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return n // 2 - min(a.count(i) // 2 for i in set(a))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.strip().split(\"\\n\")]\n    a.sort()\n    #print(a)\n    n = len(a)\n    l = 0\n    r = n - 1\n    count = 0\n    i = 0\n    while i < n - 1:\n        #print(i,l,r)\n        if a[i] > a[l]:\n            if a[r] >= a[i]:\n                r -= 1\n            elif a[r] < a[i]:\n                count += 1\n                r -= 1\n                l += 1\n                i = r\n        elif a[i] == a[l]:\n            i += 1\n            l += 1\n            r -= 1\n            count += 1\n            if r < 0:\n                break\n        else:\n            i += 1\n    return count\n\n\n\nprint(solution(\"5 10 2 3 14 5\\n\"))\nprint(solution(\"1 100\\n\"))"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    students = int(stdin.strip().split()[0])\n    s = list(map(int, stdin.strip().split()[1:]))\n\n    s.sort()\n\n    left_i, right_i = 0, students - 1\n\n    while left_i < right_i:\n        if s[left_i] + s[right_i] == s[left_i] * 2:\n            return f'{s[left_i]} {s[right_i]}\\n{(right_i - left_i) // 2}\\n'\n        elif s[left_i] + s[right_i] > s[left_i] * 2:\n            right_i -= 1\n        elif s[left_i] + s[right_i] < s[left_i] * 2:\n            left_i += 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    a.sort()\n    res = 0\n    for i in range(n // 2):\n        res += (a[i] + a[n - 1 - i])\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    a = list(map(int, stdin.split()))\n    \n    a.sort()\n    \n    count = 0\n    \n    for i in range(0, n, 2):\n        \n        if a[i] == a[i+1]:\n            \n            continue\n        \n        else:\n            \n            count += a[i]\n    \n    return count\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input_3)\n    3\n    \"\"\"\n    n = int(stdin)\n    schedule = [int(c) for c in stdin.strip().split(' ')]\n    hours = 0\n    rest_times = 0\n    for i in range(n):\n        if schedule[i] == 0:\n            hours += 1\n        else:\n            rest_times += hours\n            hours = 0\n    return rest_times\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximal rest hours of a schedule.\n\n    Args:\n        stdin: input file object\n\n    Returns:\n        A string containing the answer.\n    \"\"\"\n    n = int(stdin.readline())\n    schedule = list(map(int, stdin.readline().strip().split(' ')))\n\n    rest = 0\n    res = 0\n    for i in schedule:\n        if i == 0:\n            rest += 1\n        else:\n            res = max(res, rest)\n            rest = 0\n    return str(res)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List, Generator\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rest_count = 0\n    n = int(stdin.split()[0])\n    rest_arr = [int(i) for i in stdin.split()[1]]\n    for i in range(n):\n        if rest_arr[i] == 1:\n            rest_count += 1\n        else:\n            rest_count = 0\n        if rest_count == 2:\n            break\n    return str(i+1)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    result = 0\n    max_rest = 0\n    rest = False\n    for i in range(n):\n        if arr[i] == 1 and rest is False:\n            rest = True\n        elif arr[i] == 0 and rest is True:\n            result += 1\n            rest = False\n    return str(result)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution must return the maximal number of continuous hours during which Polycarp rests.\n\n    :param stdin: A string that represents input for stdin.\n    :return: A string that represents output for stdout.\n    \"\"\"\n   ...\n    return \"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest substring of non-zero values in a list.\"\"\"\n    hours_per_day = int(stdin)\n    days = [int(day) for day in stdin.split()]\n    rest_so_far = 0\n    longest_rest = 0\n    for day in days:\n        if day == 0:\n            rest_so_far += 1\n        else:\n            if rest_so_far > longest_rest:\n                longest_rest = rest_so_far\n            rest_so_far = 0\n    if rest_so_far > longest_rest:\n        longest_rest = rest_so_far\n    return longest_rest\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    rest = 0\n    counter = 0\n    for i in range(n):\n        if a[i] == 1:\n            counter += 1\n        else:\n            counter = 0\n        rest = max(rest, counter)\n    return str(rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readline().split()\n    n = int(line1[0])\n    schedule = [int(i) for i in line1[1:]]\n\n    max_rest = 0\n    resting = 0\n    for s in schedule:\n        if s == 0:\n            resting = 0\n        else:\n            resting += 1\n            max_rest = max(max_rest, resting)\n    return max_rest\n\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solve(stdin))"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    MAX_FACTS = 16\n    fact_frequencies = [0] * MAX_FACTS\n    MAX_ALPHABET = 26\n    alphabet_frequencies = [0] * MAX_ALPHABET\n    # Read and collect facts from the input\n    # in string form.\n    fact_str = stdin\n    # Convert to list of ints.\n    fact_int = [ord(fact) - 97 for fact in fact_str]\n    # Update frequencies.\n    for fact in fact_int:\n        fact_frequencies[fact] += 1\n        alphabet_frequencies[fact] += 1\n    # Find the maximum frequency\n    max_freq = max(fact_frequencies)\n    # Find the alphabet with the maximum frequency\n    max_alphabet = alphabet_frequencies.index(max_freq)\n    # Convert to string and return\n    return chr(max_alphabet + 97)\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    f = stdin.split('\\n')\n    ans = 0\n    for x in f:\n        if int(x) > ans:\n            ans = int(x)\n    return str(ans)"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the number of cheeses you can end up with.\n\n    # Arguments:\n        stdin(str): String of cheeses.\n    \n    # Returns:\n        str: Number of cheeses.\n    '''\n    cheese_dict = {}\n    cheese_type_dict = {}\n    cheese_num = 0\n    for line in stdin.splitlines():\n        cheese_name, cheese_type = line.split()\n        cheese_num += 1\n        cheese_dict[cheese_name] = cheese_type\n        cheese_type_dict[cheese_type] = cheese_type_dict.get(cheese_type, 0) + 1\n    num_cheese = 0\n    for cheese_type, cheese_num in cheese_type_dict.items():\n        num_cheese += cheese_num // 2\n    return num_cheese\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = [c.split() for c in stdin.splitlines()]\n    cheese_type = {cheese[1] for cheese in cheeses}\n    return min(cheese_type, key=lambda c: cheeses.count(c))\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cheese = list(filter(None, stdin.split('\\n')))\n    cheese = sorted(cheese)\n\n    cheese = [x.split(' ') for x in cheese]\n    cheese = [[cheese[i][0], cheese[i][1]] for i in range(len(cheese))]\n    \n    type_dict = {}\n    for type in cheese:\n        if type not in type_dict:\n            type_dict[type[1]] = 1\n        else:\n            type_dict[type[1]] += 1\n    \n    return min(type_dict.values())\n\n\n-----Test Case-----"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheese_types = {'soft': 0, 'hard': 0}\n    for line in stdin.splitlines():\n        cheese_types[line.split(' ')[1]] += 1\n\n    return cheese_types['hard'] - cheese_types['soft']\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    cheeses = stdin.splitlines()\n    for cheese in cheeses:\n        cheese_name, cheese_type = cheese.split(' ')\n        if cheese_type == 'hard':\n            result += 1\n    return result"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard')\n    3\n    \"\"\"\n    cheese_list = stdin.split('\\n')\n    return len(set(cheese_list))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cheese_name = list(map(str, stdin.splitlines()))\n    cheese_type = [i[-3:] for i in cheese_name]\n    print(cheese_type)\n    return cheese_type\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \n\nsolution(stdin)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  cheeses = {cheese.split()[0]: cheese.split()[1] for cheese in stdin.split('\\n')}\n  for key in cheeses:\n    if cheeses[key] =='soft':\n      return key\n  return ''\n  \nprint(solution(input()))\n\n\n---\nhttps://www.codewars.com/kata/5b611d6b13b9883f5a500001b/train/python\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  soft, hard = [], []\n  for cheese in stdin.split():\n    cheese_type, cheese_name = cheese.split(' ')\n    cheese_name = cheese_name.lower()\n    if cheese_type =='soft':\n      soft.append(cheese_name)\n    else:\n      hard.append(cheese_name)\n\n  return len(set(soft).intersection(set(hard)))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')[0].split()))\n    m, *b = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    b.sort()\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    c.sort()\n    return''.join(list(map(str, c)))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    return \" \".join([str(i) for i in compute(n, a, b)])\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    reorder the array b to get lexicographically minimum possible array c\n    '''\n    n = int(stdin.readline())\n    a = [int(item) for item in stdin.readline().split()]\n    b = [int(item) for item in stdin.readline().split()]\n    c = [0]*n\n    for i in range(n):\n        c[a[i]%n] = (a[i] + b[i]) % n\n    print(' '.join([str(item) for item in c]))\n\nsolution(stdin)"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split('\\n')]\n    return''.join(str(a + b % n) for a, b in zip(a, b))\n\nprint(solution(stdin))"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # print(f\"stdin: {stdin}\")\n    a = list(map(int, stdin.split(\"\\n\")[0].split()))\n    b = list(map(int, stdin.split(\"\\n\")[1].split()))\n    n = a[0]\n\n    print(a, b)\n\n    def comp(a, b):\n        return sum([(a[i] + b[i]) % n for i in range(n)])\n\n    a_n = [comp(a, b[i * n : (i + 1) * n]) for i in range(n)]\n    b_n = [comp(a, b) for i in range(n)]\n\n    # print(a_n)\n    # print(b_n)\n\n    a_n_set = set(a_n)\n    b_n_set = set(b_n)\n    n_set = set(range(n))\n\n    if a_n_set!= n_set or b_n_set!= n_set:\n        print(\"no\")\n        exit()\n\n    for i in range(n):\n        if a_n[i] < b_n[i]:\n            print(i)\n            exit()\n\n    print(a_n)\n    print(b_n)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split('\\n')]\n    a = [int(x) for x in a.split(' ')]\n    b = [int(x) for x in b.split(' ')]\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    for x in c:\n        print(x, end=' ')\n\n    return\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    b = stdin.readline().split()\n    c = [0] * n\n    for i in range(n):\n        c[i] = int(a[i]) + int(b[i]) % n\n    return''.join(str(i) for i in c)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the lexicographically minimum possible value of array with indices and modulo.\"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    c = [x for x in a + b]\n    for i in range(n):\n        for j in range(n):\n            c[(a[i] + b[j]) % n] = (a[i] + b[j]) % n\n    return''.join(str(x) for x in c)\n    \n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a_len, b_len = [int(x) for x in stdin.strip().split('\\n')]\n    a, b = [int(x) for x in stdin.strip().split('\\n')]\n    c = [a+b%a_len for b in b]\n    print(*c)\n    '''\n    a_len, b_len = map(int, stdin.split('\\n')[0].split())\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    b = [int(x) for x in stdin.split('\\n')[2].split()]\n    c = [a[i]+b[i]%a_len for i in range(b_len)]\n    print(*c)\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    # c = [int(a[i] + b[i]) % n for i in range(n)]\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    c.sort()\n    return \" \".join(map(str, c))"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns 1 if there is an odd number of ones and 0 otherwise\n    '''\n    # the number of 1's in the input\n    ones = stdin.count('1')\n    return '0' if ones % 2 == 0 else '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(stdin)\n    if inputs.count(\"1\") % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    print(sum(map(int, stdin)) % 2)\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        stdin.strip()\n        print(line.replace('1', '1').replace('0', '0'))\n        if line == stdin[0]:\n            return '0'\n        else:\n            return '1'"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    list_stdin = [int(x) for x in stdin.split('\\n')]\n    xor_value = 0\n    for item in list_stdin:\n        xor_value = xor_value ^ item\n    return str(xor_value)\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nsolution(stdin)\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        n = stdin.readline().strip()\n        if n == '0':\n            print(0)\n        else:\n            print(1)\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    return \"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = stdin.split()\n    x1 = int(x1)\n    x2 = int(x2)\n    x3 = int(x3)\n    x4 = int(x4)\n    if x1 == x2 and x3 == x4:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(x) for x in stdin.split(\" \")]\n    if d / s >= t:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = list(map(int, stdin.split()))\n    t = t*60\n    takahashi_time = d / s\n    if takahashi_time > t:\n        print('Yes')\n    else:\n        print('No')\n    return ''"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(x) for x in stdin.split()]\n    distance_to_go = D\n    time_to_go = T\n    speed = S\n    minutes = time_to_go % 60\n    hours = time_to_go // 60\n\n    while distance_to_go > 0:\n        distance_to_go -= speed\n        time_to_go -= 1\n        if time_to_go <= 0:\n            if distance_to_go <= 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if minutes > 0:\n            minutes -= 1\n        else:\n            hours -= 1\n            minutes = 60\n    return 'Yes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(n) for n in stdin.split()]\n    if t*s >= d:\n        return \"Yes\"\n    return \"No\"\nprint(solution(input()))"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    distance = D/S * T\n    return \"Yes\" if distance <= T else \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(x) for x in stdin.split(\" \")]\n\n    return 'Yes' if (T-D)%(S+D)==0 else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = stdin.split()\n    d = int(d)\n    t = int(t)\n    s = int(s)\n    distance_to_travel = d\n    time_to_travel = t\n    speed_to_travel = s\n    minutes_to_travel = t\n    seconds_to_travel = t * 60\n    while distance_to_travel > 0:\n        distance_to_travel -= speed_to_travel\n        time_to_travel -= 1\n        seconds_to_travel -= 1\n        if time_to_travel < 1:\n            break\n        minutes_to_travel -= 1\n        if minutes_to_travel < 1:\n            break\n        if seconds_to_travel < 1:\n            break\n    if distance_to_travel < 0:\n        return \"No\"\n    elif minutes_to_travel < 1 and seconds_to_travel < 1:\n        return \"Yes\"\n    elif minutes_to_travel < 1:\n        return \"Yes\" if seconds_to_travel / 60 < 1 else \"No\"\n    else:\n        return \"No\" if seconds_to_travel / 60 < 1 else \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    distance, time, speed = [int(i) for i in stdin.split(' ')]\n    answer = 'Yes' if distance / speed <= time else 'No'\n    return answer\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1000 15 80\n   ... 1000 15 80''')\n    Yes\n    \"\"\"\n    D, T, S = [int(x) for x in stdin.split(\" \")]\n    print(\"Yes\" if T < (D / S) else \"No\")"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(num) for num in stdin.strip().split(' ')]\n    T = (T * 1000) // S\n    takahashi = D / S\n    if takahashi <= T:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Fill this in.\n    # 1 1 1\n    # 1 2 2\n    # 1 3 3\n    # n 3 3\n    # a b c\n    # d e f\n    # g h i\n\n    bingo_cards = list(map(int, stdin.split('\\n')[:-1]))\n    n = int(stdin.split('\\n')[-1])\n    return 'Yes' if len(set(bingo_cards)) == n and sum(bingo_cards) == 0 else 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    bingo = [[int(v) for v in line.split()] for line in lines[:3]]\n    n = int(lines[3])\n    marked = {int(v) for v in lines[4:]}\n    # for i, row in enumerate(bingo):\n    #     for j, col in enumerate(zip(*bingo)):\n    #         if i == j == 0:\n    #             continue\n    #         if set(row) == {1} or set(col) == {1}:\n    #             bingo[i][j] = 1\n    #             marked.add(bingo[i][j])\n    for i in range(len(bingo)):\n        for j in range(len(bingo[i])):\n            if bingo[i][j] == 1:\n                marked.add(bingo[i][j])\n    if len(marked) < 3:\n        return 'No'\n    bingo_diag = [bingo[i][i] for i in range(3)]\n    bingo_diag += [bingo[i][2 - i] for i in range(3)]\n    return 'Yes' if len(marked) == n else 'No'\n\nprint(solution(stdin))"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #A_11 A_12 A_13\n    #A_21 A_22 A_23\n    #A_31 A_32 A_33\n    #N\n    #b_1 b_2 b_3\n    #1\n    #2\n    #3\n\n    numbers = stdin.strip().split(' ')\n    numbers_list = list(map(int, numbers))\n    n = numbers_list[2]\n    b_list = numbers_list[3:]\n\n    bingo = set()\n    for b in b_list:\n        if b in bingo:\n            return 'Yes'\n        else:\n            bingo.add(b)\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if the input will return a bingo, otherwise return 'No'.\n\n    >>> solution('''84 97 66\n   ... 79 89 11\n   ... 61 59 7\n   ... 7\n   ... 89\n   ... 7\n   ... 87\n   ... 79\n   ... 24\n   ... 84\n   ... 30''')\n    'Yes'\n    \"\"\"\n    A = [[int(s) for s in line.split()] for line in stdin.splitlines()]\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i + 2 < len(A) and j + 2 < len(A) and sum(A[i + k][j + k] for k in range(3)) == 3 * A[i][j]:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bingo = 0\n    N = int(stdin.readline())\n    listA = [int(i) for i in stdin.readline().strip().split(' ')]\n    listB = [int(i) for i in stdin.readline().strip().split(' ')]\n    listC = [int(i) for i in stdin.readline().strip().split(' ')]\n\n    for i in range(N):\n        if listA[i] in listB:\n            bingo += 1\n        if listA[i] in listC:\n            bingo += 1\n        if listB[i] in listA:\n            bingo += 1\n        if listB[i] in listC:\n            bingo += 1\n        if listC[i] in listA:\n            bingo += 1\n        if listC[i] in listB:\n            bingo += 1\n\n    if bingo >= 3:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if input() == \"Yes\" else \"No\"\n'''\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_bingo(parse_matrix(stdin)) else \"No\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.splitlines()]\n    def is_bingo(A):\n        return 3 in [A.count(i) for i in range(1, 10)]\n    if is_bingo(A):\n        return \"Yes\"\n    for i in range(3):\n        if is_bingo(A[i * 3: i * 3 + 3]):\n            return \"Yes\"\n        if is_bingo([A[i + j * 3] for j in range(3)]):\n            return \"Yes\"\n    if is_bingo([A[i + j * 4] for i in (0, 4, 8) for j in (0, 4, 8)]):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    first_row = [int(a[i]) for i in range(1, 4)]\n    second_row = [int(a[i]) for i in range(4, 7)]\n    third_row = [int(a[i]) for i in range(7, 10)]\n    col_1 = [int(a[i]) for i in range(1, 4)]\n    col_2 = [int(a[i]) for i in range(4, 7)]\n    col_3 = [int(a[i]) for i in range(7, 10)]\n    print(first_row, second_row, third_row, col_1, col_2, col_3)\n    if any([\n            any(first_row[j] in x for j in range(3)),\n            any(second_row[j] in x for j in range(3)),\n            any(third_row[j] in x for j in range(3)),\n            any(col_1[j] in x for j in range(3)),\n            any(col_2[j] in x for j in range(3)),\n            any(col_3[j] in x for j in range(3)),\n    ]):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n\n    # Your code goes here\n    return -1\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    days = 0\n    for i in range(0, M):\n        if A[i] + i < N:\n            days = max(days, A[i] + i)\n        else:\n            break\n    if days == 0:\n        print(\"-1\")\n    else:\n        print(days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n        N, M = list(map(int, stdin.split()))\n        A = list(map(int, stdin.split()))\n\n        A.sort(reverse=True)\n        print(A)\n\n        return str(A[0] * M - sum(A))\n\n\n    return solution(stdin.rstrip())\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    '''\n    n, m = map(int, stdin.split(' '))\n    assignments = list(map(int, stdin.split(' ')))\n    assignments.sort()\n    result = assignments[-1] - 1\n    for i in range(len(assignments) - 1):\n        result += assignments[i] - assignments[i + 1] - 1\n    if result < 0:\n        return '-1'\n    return result\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    N, M = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n    # create the matrix\n    # ones are the days where the student can do assignments\n    # zeros are the days where he cannot\n    A = [\n        [0 for j in range(N)]\n        for i in range(M)\n    ]\n\n    # get the data\n    for i in range(M):\n        A[i] = stdin.split(\" \")[i + 1 : i + 1 + N]\n\n    # loop through each day and check if the student can do any assignments\n    for i in range(N):\n        for j in range(M):\n            if A[j][i] == \"1\":\n                # check if the student can do any assignments\n                # skip the first assignment if the student has already done it\n                if j > 0 and A[j - 1][i] == \"1\":\n                    continue\n                # check if there is an assignment on the same day\n                # skip the first assignment if the student has already done it\n                if i > 0 and A[j][i - 1] == \"1\":\n                    continue\n                # we have a good day for the student\n                A[j][i] = \"1\"\n\n    # loop through the matrix and check if there are any days the student cannot do the assignment\n    for i in range(M):\n        cannot = False\n        for j in range(N):\n            if A[i][j] == 0:\n                cannot = True\n                break\n        if cannot:\n            return -1\n\n    # loop through the matrix to find the longest day\n    longest = 0\n    for i in range(M):\n        for j in range(N):\n            if A[i][j] == \"1\":\n                longest = max(longest, j + 1)\n    return longest\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\nfrom io import StringIO\n\ntest_input_one = \"\"\"2 3\n1 2\n3 4\"\"\"\ntest_input_two = \"\"\"3 2\n1 2\n2 3\"\"\"\n\nsys.stdin = StringIO(test_input_one)\ntest_input_three = \"\"\"4 4\n1 2\n3 4\n5 6\n7 8\"\"\"\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split('\\n')[:2]]\n    A = [int(n) for n in stdin.split('\\n')[2:]]\n    A.sort()\n    if N * A[0] > sum(A[:M]):\n        return '-1'\n    else:\n        return str(sum(A[:M]))"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('41 2\\n5 6')\n    30\n    \"\"\"\n    n, m = map(int, stdin.split())\n    if n < 1 or n > 10 ** 6 or m < 1 or m > 10 ** 4:\n        return -1\n\n    days = set()\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        if x < 1 or x > 10 ** 4 or y < 1 or y > 10 ** 4:\n            return -1\n        days.add(x)\n        days.add(y)\n\n    days = list(days)\n    days.sort()\n\n    max_day = 0\n    for i in range(1, len(days)):\n        if days[i] - days[i - 1] > max_day:\n            max_day = days[i] - days[i - 1]\n    return max_day\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    count = 0\n    day = 0\n    for i in range(m):\n        if i!= 0:\n            day += a[i]\n        else:\n            day = a[i]\n        count = max(count, day)\n    if count >= n:\n        return str(n)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    return 1 if D == 0 else N % (D * 100) + 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split(' '))\n    if n <= 100:\n        if d == 0 or d == 1:\n            return int(100 / d)\n        if d == 2:\n            return int((100 / d) ** 2)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return ''"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(i) for i in stdin.split()]\n    prime_list = [i for i in range(2, 1000) if i % 2!= 0 and i % 3!= 0 and i % 5!= 0 and i % 7!= 0 and i % 11!= 0]\n    prime_list.insert(0, 1)\n    max_p = max(prime_list)\n    if D == 1:\n        if N <= prime_list.index(max_p):\n            return prime_list[N]\n        else:\n            while N > prime_list.index(max_p):\n                N = N - prime_list.index(max_p)\n            return prime_list[N]\n    elif D == 2:\n        max_p = max_p // 2\n        if N <= prime_list.index(max_p):\n            return prime_list[N]\n        else:\n            while N > prime_list.index(max_p):\n                N = N - prime_list.index(max_p)\n            return prime_list[N]\n    else:\n        return -1\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(x) for x in stdin.split()]\n\n    # count divisibility\n    divs = [0] * (N + 1)\n    for i in range(1, N+1):\n        if i % 100 == 0:\n            divs[i] = divs[i-1] + 1\n        else:\n            divs[i] = divs[i-1]\n\n    # find smallest index\n    n = 0\n    for i, d in enumerate(divs):\n        if d == D:\n            n = i\n\n    return str(n)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    d, n = [int(x) for x in input[0].split(' ')]\n    # make a function that checks if it is possible to divide by 100 exactly d times\n    # then, make the answer the smallest one\n    minn = 0\n    maxn = n * 100\n    while minn < maxn:\n        midn = minn + (maxn - minn) // 2\n        if check(midn, d):\n            maxn = midn\n        else:\n            minn = midn + 1\n\n    return minn\n\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    return str(sum(range(D * 100 + 1, D * 100 * N, D * 100)) // (N - 1))\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Find the N-th smallest integer that would make Ringo happy.\"\n    \n    d, n = map(int, stdin.split('\\n')[:2])\n    if d == 0:\n        return 1\n    elif d == 1:\n        return n\n    elif d == 2:\n        return 2 * n + 1\n    \n    # 2 <= n <= 100\n    # 1 <= d <= 100\n    return (n - 1) * 100 // d + 2"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    S = [n for n in range(1, 100) if (n % 100) % D == 0]\n    return str(S[N - 1])\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    gcd = 1\n    for num in A:\n        gcd = gcd * num // math.gcd(gcd, num)\n    return str(gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    nums = list(map(int, stdin.split()))\n    num = nums[0]\n    nums = nums[1:]\n\n    # get gcd\n    gcd = 1\n    for i in nums:\n        gcd = gcd_two(gcd, i)\n\n    return gcd\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return '2'"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, numbers = stdin.split(\"\\n\")\n    N = int(N)\n    numbers = list(map(int, numbers.split()))\n    numbers.sort()\n    d = numbers[1] - numbers[0]\n    for i in range(2, N):\n        if numbers[i] - numbers[i-1] > d:\n            d = numbers[i] - numbers[i-1]\n    return d\n\"\"\"\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  def gcd(a, b):\n    while b!= 0:\n      a, b = b, a % b\n    return a\n\n  N, A = map(int, stdin.split('\\n')[:2])\n  divisors = [gcd(A, a) for a in map(int, stdin.split('\\n')[2:])]\n  return str(max(divisors) if N!= 1 else str(divisors[0]))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 3 9\")\n    2\n    >>> solution(\"7 6 8\")\n    2\n    >>> solution(\"7 6 9\")\n    3\n    >>> solution(\"7 7 7\")\n    7\n    >>> solution(\"7 7 8\")\n    2\n    >>> solution(\"8 8 9\")\n    1\n    >>> solution(\"8 8 9\")\n    1\n    \"\"\"\n    N, *numbers = [int(s) for s in stdin.split()]\n    numbers = sorted(numbers, reverse=True)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            numbers[i], numbers[j] = numbers[i] % numbers[j], numbers[j] % numbers[i]\n    return numbers[0]\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    integers = [int(i) for i in input[1].split(\" \")]\n\n    m = integers[0]\n    for i in range(1, n):\n        m = gcd(m, integers[i])\n    return m\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if a == 0:\n            return b\n        elif b == 0:\n            return a\n        elif a > b:\n            return gcd(a % b, b)\n        else:\n            return gcd(a, b % a)\n\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1].split()\n    for i in range(n):\n        a[i] = int(a[i])\n\n    a.sort(reverse=True)\n    ans = 1\n    for i in range(n):\n        ans = gcd(ans, a[i])\n\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(\"3\\n2 3 1\"))\n\"\"\"\n\n\"\"\"\n@param string line \n@return string\n\"\"\"\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split('\\n')\n  n = int(stdin[0])\n  arr = [int(i) for i in stdin[1].split(' ')]\n  res = [None] * n\n  for i in range(n):\n    res[arr[i] - 1] = str(i + 1)\n  return''.join(res)\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a str representing the sequence of student numbers in the order students entered the classroom.\"\"\"\n    # Read the number of students.\n    n = int(stdin.readline())\n    # Read the numbers representing the number of students who entered the classroom.\n    a = [int(n) for n in stdin.readline().split()]\n    # Initialize the list of student numbers.\n    numbers = list(range(1, n + 1))\n    # Initialize the empty list of student numbers.\n    result = []\n    # For every student number in the list of numbers.\n    for number in numbers:\n        # If the number of students who entered the classroom is less than the number of students who entered the classroom.\n        if a[number - 1] < len(result):\n            # Insert the student number into the list of student numbers.\n            result.insert(a[number - 1], number)\n        # Otherwise, add the student number into the list of student numbers.\n        else:\n            result.append(number)\n    # Return the list of student numbers.\n    return \" \".join(str(number) for number in result)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    order = list()\n    for i in range(n):\n        if len(order) == 0:\n            order.append(a[i])\n            continue\n        if a[i] > a[i - 1]:\n            order.append(a[i])\n        else:\n            while len(order) > 0 and a[i] <= order[-1]:\n                order.pop()\n            order.append(a[i])\n    return''.join(list(map(str, order)))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    student_numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    student_numbers.sort()\n    student_numbers_ = [str(x) for x in student_numbers]\n    return''.join(student_numbers_)\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = []\n    for i, a_i in enumerate(sorted(a)):\n        ans.append(str(a_i))\n    return''.join(ans)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = int(stdin.split()[0])\n    print(a)\n    nums = list(map(int, stdin.split()[1:]))\n    return''.join([str(i) for i in nums])\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr = arr + [0] * (n - len(arr))\n    result = []\n    for i in range(n):\n        j = arr[i]\n        while j > 0:\n            if result and result[-1] > j:\n                result.append(j)\n                break\n            elif not result:\n                result.append(j)\n                break\n            elif result and result[-1] < j:\n                j -= 1\n        else:\n            result.append(j)\n    return \" \".join([str(x) for x in result])"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    students = stdin.split('\\n')[1:]\n    result = []\n    for student in students:\n        result.append(int(student))\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\\\n2 3 1\")\n    '3 1 2'\n    >>> solution(\"5\\\\n2 3 1 4 5\")\n    '2 1 3 4 5'\n    >>> solution(\"5\\\\n5 4 3 2 1\")\n    '1 2 3 4 5'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 7 100\")\n    9\n    \"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    ret = 0\n    for i in range(1, int(math.log10(b * 9)) + 1):\n        if x >= a * b * (10 ** i):\n            ret = b * 9 * (10 ** i)\n    return str(ret) if ret else \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(num) for num in stdin.split())\n    if a <= 0 or b <= 0 or x < 0:\n        return \"0\"\n    elif x <= a * b:\n        return \"0\"\n    ans = int(a * b / x)\n    c = 0\n    while True:\n        if ans <= 9 and c < len(str(ans)):\n            ans = ans * 10 + (ans // 10 + 1) * 9\n            break\n        elif ans <= 99 and c < len(str(ans)):\n            ans = ans * 10 + (ans // 100 + 1) * 9\n            break\n        elif ans <= 999 and c < len(str(ans)):\n            ans = ans * 10 + (ans // 1000 + 1) * 9\n            break\n        elif ans <= 9999 and c < len(str(ans)):\n            ans = ans * 10 + (ans // 10000 + 1) * 9\n            break\n        elif ans <= 99999 and c < len(str(ans)):\n            ans = ans * 10 + (ans // 100000 + 1) * 9\n            break\n        else:\n            ans = ans * 10 + (ans // 1000000 + 1) * 9\n            c += 1\n    return str(ans)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A < 1 or A > 10 ** 9 or B < 1 or B > 10 ** 9 or X < 1 or X > 10 ** 18:\n        print(0)\n    else:\n        a = int(X / (10 ** 9) / A)\n        b = int((X - (a * 10 ** 9)) / B)\n        x = (X - (a * 10 ** 9) - (b * B))\n        c = 0\n        while x > 0 and x % 10!= 9:\n            x = x // 10\n            c += 1\n        if x == 9 and a + c > 0:\n            print(a + c)\n        elif x == 0 and a + c > 0:\n            print(a + c + 1)\n        elif x!= 9:\n            print(0)\n        else:\n            print(0)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split(\" \"))\n\n    return str(max(int(str(A * x + B * y)[:18]) for x in range(1, 10 ** 9 // A + 1) for y in range(1, 10 ** 9 // B + 1)))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = [int(s) for s in stdin.split()]\n    return str(n)"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    M = 10 ** 9 + 7\n    result = 0\n    for n in range(1, M):\n        if n * A + B * len(str(n)) < X:\n            continue\n        if n * A + B * len(str(n)) > X:\n            break\n        result = n\n    if result == 0:\n        return 0\n    else:\n        return str(result)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split(' '))\n    n = int(math.log10(A)) + 1\n    ans = 0\n    for i in range(1, n + 1):\n        max_value = A * i + B * (n - i)\n        if X >= max_value:\n            ans = i\n            X -= max_value\n        else:\n            break\n    return str(ans)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    \n    # if x < 0:\n    #     print(0)\n    #     return 0\n    # elif x > 10**9 * a:\n    #     print(10**9 * a)\n    #     return 10**9 * a\n    \n    for i in range(a, x + 1):\n        if i % a == 0:\n            if i % b == 0:\n                return i\n            else:\n                continue\n        else:\n            continue\n        \n    # print(0)\n    return 0\n    "
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    A, B, X = map(int, stdin.split())\n    if X >= A * B:\n        return str(A * B - 1)\n    return str(10 ** 9)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    input = stdin.split(\"\\n\")\n    return str(input[0])"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello World!'"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, K = stdin.split()\n    h = stdin.split()\n    c = 0\n    for i in h:\n        if int(i) >= int(K):\n            c += 1\n    return c\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    h = [int(n) for n in stdin.split()]\n    h.sort()\n    return sum(h[i] - K for i in range(N) if h[i] > K)\nprint(solution(stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n log n)\n    Space complexity: O(n)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    heights = [int(x) for x in stdin.split()]\n    sorted_heights = sorted(heights)\n    for i in range(n):\n        if k <= sorted_heights[i]:\n            return i\n    return n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: stdin -> the input of the problem\n    output: str -> the output of the problem\n    \"\"\"\n    \n    # Getting the parameters\n    n, k = [int(x) for x in stdin.split(' ')]\n    h = [int(x) for x in stdin.split(' ')]\n    \n    # Printing the result\n    print(len([x for x in h if x >= k]))\n    \n    # Return the result\n    return \"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nreturn answer\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem statement.\"\"\"\n    lines = stdin.split(\"\\n\")\n    n, m = list(map(int, lines[0].split()))\n    a_n = list(map(int, lines[1].split()))\n    a_n.sort()\n    for i, a_i in enumerate(a_n):\n        if m < (i + 1) * a_i / (4 * m):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.split()]\n    votes = [int(c) for c in stdin.split('\\n')][1:]\n\n    if m > n or len(set(votes))!= len(votes):\n        return 'No'\n    if m == 1 and len(votes) > 1:\n        return 'No'\n    if sum(votes) / (4 * m) <= 1:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n5 4 2 1\")\n    'Yes'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n\n    votes.sort(reverse=True)\n    if votes[0] / m >= 0.25:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 5 4 2 1''')\n    'Yes'\n    \"\"\"\n    return (\n        \"Yes\"\n        if max(map(int, stdin.split(\"\\n\")[1].split(\" \"))) <= len(stdin.split(\"\\n\")[0].split(\" \")) / 4\n        else \"No\"\n    )\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    total_votes = sum(votes)\n    if votes[-1] / total_votes < 1/4 * m:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    return 'Yes' if len(set(a)) >= len(a) / (4 * m) else 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'https://app.codility.com/demo/results/training4QC5H4-4UC3/'\n    A = [int(x) for x in stdin.split()]\n    n = A[0]\n    m = A[1]\n    a = A[2:]\n    sum_votes = sum(a)\n    if m >= n:\n        print('Yes')\n    else:\n        if sum_votes >= n * (1/4) * m:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    votes = [int(i) for i in stdin.split(' ')]\n    votes.sort()\n    popular = [votes[0]]\n    for i in votes[1:]:\n        if i not in popular:\n            if len(popular) < m:\n                popular.append(i)\n            elif len(popular) == m and sum([votes[j] for j in range(1, m + 1)]) > sum(popular):\n                popular = [i] + popular\n    if len(popular) == m:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 1\n   ... 5 4 2 1\n   ... ''')\n    'Yes'\n    >>> solution('''6 2\n   ... 6 4 2 4 8\n   ... ''')\n    'No'\n    '''\n    :param stdin: Input from stdin\n    :return: Solution string\n    '''\n    # Your code here\n    # Split the string into two parts\n    # Get the length of the first part\n    # Get the number of votes\n    # Get the length of the second part\n    # Get the number of popular items\n    # Check the conditions\n    # Print Yes or No\n    items = stdin.split('\\n')\n    a = items[0].split(' ')\n    n = int(a[0])\n    m = int(a[1])\n    votes = items[1].split(' ')\n    popular_items = [int(vote) for vote in votes if int(vote) > n/4*m]\n    if len(popular_items) == m:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    There are H rows of W columns. The board is initially empty. A pawn starts on the left-most column, moves in a straight line rightward\n    until reaching the last column, after which it starts moving left again, and so on.\n    You are given a positive integer K. How many pawns are there on the board when K pawns are on the rightmost column?\n\n    :param stdin: str\n    :return: str\n    \"\"\"\n    return f'{0}'\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'The answer is {}'.format(do_something(input_parser(stdin)))\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of choices of rows and columns that satisfy a given condition\n    Arguments:\n    stdin -- the input string\n    Returns:\n    str -- the solution to the problem\n    \"\"\"\n    def choose(n: int, m: int, k: int) -> int:\n        \"\"\"Calculates the number of ways to choose m out of n, where each way consists\n        of exactly k different elements\n        Arguments:\n        n -- number of possible choices\n        m -- number of elements to be chosen\n        k -- number of different elements\n        Returns:\n        int -- number of ways to choose k different elements out of m\n        \"\"\"\n        if m < 0 or m < k or n < k:\n            return 0\n        if m == 0:\n            return 1\n        return choose(n - 1, m - 1, k) + choose(n - 1, m, k - 1)\n\n    H, W, K = stdin.split(' ')\n    H, W, K = int(H), int(W), int(K)\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            count += choose(K, i + j, i + j)\n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    S = []\n    for i in range(H):\n        S.append(stdin.readline().strip())\n    black_cells = 0\n    choices = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '#':\n                black_cells += 1\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '#':\n                for k in range(i + 1, H):\n                    if S[k][j] == '.':\n                        choices += 1\n    for j in range(W):\n        for i in range(H):\n            if S[i][j] == '#':\n                for k in range(i + 1, H):\n                    if S[k][j] == '.':\n                        choices += 1\n    for i in range(H - 1):\n        for j in range(W - 1):\n            if S[i][j] == '#':\n                for k in range(i + 1, H):\n                    for l in range(j + 1, W):\n                        if S[k][l] == '.':\n                            choices += 1\n    return str(choices)"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # My solution\n    # O(HW) Time and O(1) Space\n    h, w, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    def countColors(colors: list, rows: int, cols: int) -> int:\n        counter = 0\n        for i in range(rows):\n            for j in range(cols):\n                if colors[i][j] == '#':\n                    counter += 1\n        return counter\n    def getColumn(colors: list, col: int) -> list:\n        return [colors[i][col] for i in range(len(colors))]\n    def isCorrectColor(colors: list, rows: int, cols: int) -> bool:\n        isCorrect = False\n        if countColors(colors, rows, cols) == k:\n            isCorrect = True\n        return isCorrect\n    def getRowsAndCols(colors: list) -> list:\n        rows = []\n        cols = []\n        for i in range(len(colors)):\n            rows.append(colors[i])\n        for i in range(len(colors[0])):\n            cols.append(getColumn(colors, i))\n        return [rows, cols]\n    def getAllPossibleRowsAndCols(colors: list) -> list:\n        allPossibleRowsAndCols = []\n        for rows in getRowsAndCols(colors)[0]:\n            for cols in getRowsAndCols(colors)[1]:\n                allPossibleRowsAndCols.append([rows, cols])\n        return allPossibleRowsAndCols\n    def getAllPossibleCombinations(colors: list, rows: int, cols: int) -> list:\n        allPossibleCombinations = []\n        for row in rows:\n            for col in cols:\n                allPossibleCombinations.append([row, col])\n        return allPossibleCombinations\n    print(len(getAllPossibleRowsAndCols(colors)))\n    return 0\n\n\"\"\"\n    # Optimal Solution\n    # O(HW) Time and O(HW) Space\n    h, w, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    colors = []\n    for i in range(h):\n        row = stdin.split('\\n')[i + 1]\n        colors.append(list(row))\n    counts = 0\n\n    for rows in colors:\n        for cols in colors:\n            if isCorrectColor(rows, h, w) and isCorrectColor(cols, h, w):\n                counts += 1\n    return counts\n\n    # O(HW) Time and O(HW) Space\n    h, w, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    colors = []\n    for i in range(h):\n        row = stdin.split('\\n')[i + 1]\n        colors.append(list(row))\n    counts = 0\n\n    for rows in colors:\n        for cols in colors:\n            if isCorrectColor(rows, h, w) and isCorrectColor(cols, h, w):\n                if rows[0] == cols[0]:\n                    counts += len(rows) * len(cols)\n                elif rows[0] == cols[-1]:\n                    counts += len(rows) * len(cols)\n                elif rows[-1] == cols[0]:\n                    counts += len(rows) * len(cols)\n                elif rows[-1] == cols[-1]:\n                    counts += len(rows) * len(cols)\n    return counts\n\n    # O(HW) Time and O(HW) Space\n    h, w, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    colors = []\n    for i in range(h):\n        row = stdin.split('\\n')[i + 1]\n        colors.append(list(row))\n    counts = 0\n\n    def getColors(colors: list, col: int) -> list:\n        return [colors[i][col] for i in range(len(colors))]\n    def isCorrectColor(colors: list, rows: int, cols: int) -> bool:\n        isCorrect = False\n        if len([x for x in getColors(colors, 0) if x == '#']) == k and len([x for x in getColors(colors, len(colors[0]) - 1) if x == '#']) == k:\n            isCorrect = True\n        return isCorrect\n    def isRowCorrect(colors: list, row: int) -> bool:\n        isCorrect = False\n        if len([x for x in colors[row] if x == '#']) == k:\n            isCorrect = True\n        return isCorrect\n    def isColCorrect(colors: list, col: int) -> bool:\n        isCorrect = False\n        if len([x for x in getColors(colors, col) if x == '#']) == k:\n            isCorrect = True\n        return isCorrect\n    def getRowsAndCols(colors: list) -> list:\n        rows = []\n        cols = []\n        for i in range(len(colors)):\n            rows.append(colors[i])\n        for i in range(len(colors[0])):\n            cols.append(getColors(colors, i))\n        return [rows, cols]\n    def getAllPossibleRowsAndCols(colors: list) -> list:\n        allPossibleRowsAndCols = []\n        for row in getRowsAndCols(colors)[0]:\n            for col in getRowsAndCols(colors)[1]:\n                allPossibleRowsAndCols.append([row, col])\n        return allPossibleRowsAndCols\n    def getAllPossibleCombinations(colors: list, rows: int, cols: int) -> list:\n        allPossibleCombinations = []\n        for row in rows:\n            for col in cols:\n                allPossibleCombinations.append([row, col])\n        return allPossibleCombinations\n    def getAllPossibleRowsAndColsAndCombinations(colors: list) -> list:\n        allPossibleRowsAndColsAndCombinations = []\n        for rows in getRowsAndCols(colors)[0]:\n            for cols in getRowsAndCols("
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    rows, cols = [], []\n    for _ in range(H):\n        rows.append(stdin.readline().strip())\n    for _ in range(W):\n        cols.append(stdin.readline().strip())\n    print(rows, cols, K)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    inp = stdin.split('\\n')\n    H, W, K = [int(n) for n in inp[0].split()]\n    c = [list(n) for n in inp[1:]]\n    black_squares = 0\n    # count black squares\n    for i in range(H):\n        for j in range(W):\n            if c[i][j] == '#':\n                black_squares += 1\n    # number of choices\n    number_choices = 0\n    # all rows and columns with at least K black squares\n    for row in range(H):\n        for column in range(W):\n            # find how many black squares on this row\n            count_black_squares_on_row = 0\n            for i in range(W):\n                if c[row][i] == '#':\n                    count_black_squares_on_row += 1\n            # find how many black squares on this column\n            count_black_squares_on_column = 0\n            for i in range(H):\n                if c[i][column] == '#':\n                    count_black_squares_on_column += 1\n            # if the number of black squares is at least K, then we add this choice to number_choices\n            if count_black_squares_on_row >= K and count_black_squares_on_column >= K:\n                number_choices += 1\n    # we print number_choices\n    print(number_choices)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  stdin = stdin.split()\n  h, w, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n  grid = [list(stdin[i]) for i in range(3, len(stdin))]\n  def solve(grid, k):\n    # print(k, grid)\n    if k == 0:\n      return 1\n    if len(grid) == 0:\n      return 0\n    count = 0\n    for i in range(len(grid)):\n      for j in range(len(grid[0])):\n        if grid[i][j] == '#':\n          grid[i][j] = '.'\n          count += solve(grid, k-1)\n          # print(k, grid, i, j)\n          grid[i][j] = '#'\n    return count\n  return str(solve(grid, k))\n  # H, W = map(int, stdin.split())\n  # grid = [list(stdin.split()) for _ in range(H)]\n  # return str(solve(grid, K))\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check_black_squares(arr):\n        counter = 0\n        for i in range(len(arr)):\n            for j in range(len(arr[0])):\n                if arr[i][j] == \"#\":\n                    counter += 1\n        return counter\n    \n    def black_squares(arr):\n        for i in range(len(arr)):\n            for j in range(len(arr[0])):\n                if arr[i][j] == \"#\":\n                    return True\n    \n    def delete_row_column(arr, i, j):\n        if i == len(arr):\n            arr.pop(i)\n        else:\n            arr.pop(i)\n            arr[i] = arr[i][:j] + arr[i][j+1:]\n        if j == len(arr[0]):\n            for row in arr:\n                row.pop(j)\n        else:\n            for row in arr:\n                row.pop(j)\n                row[j] = row[j] + row[j+1:]\n\n    def delete_row_columns(arr, i, j):\n        if i == len(arr):\n            arr.pop(i)\n        else:\n            arr.pop(i)\n            arr[i] = arr[i][:j] + arr[i][j+1:]\n        if j == len(arr[0]):\n            for row in arr:\n                row.pop(j)\n        else:\n            for row in arr:\n                row.pop(j)\n                row[j] = row[j] + row[j+1:]\n            \n    def white_to_black(arr):\n        for row in arr:\n            for j in range(len(row)):\n                if row[j] == \"#\":\n                    row[j] = \".\"\n\n    def black_to_white(arr):\n        for row in arr:\n            for j in range(len(row)):\n                if row[j] == \".\":\n                    row[j] = \"#\"\n\n    def check_k(arr, k):\n        counter = 0\n        for row in arr:\n            for item in row:\n                if item == \"#\":\n                    counter += 1\n        if counter == k:\n            return True\n        else:\n            return False\n\n    #INPUT\n    H, W, K = stdin.split()\n    arr = []\n    for i in range(int(H)):\n        arr.append(list(stdin.split()[i]))\n    #CODE\n    counter = 0\n    for i in range(int(H)):\n        for j in range(int(W)):\n            if j == 0 or i == 0:\n                if arr[i][j] == \"#\" and check_k(arr, int(K)):\n                    counter += 1\n                else:\n                    continue\n            else:\n                if arr[i][j] == \"#\":\n                    delete_row_column(arr, i, j)\n                else:\n                    white_to_black(arr)\n                if arr[i][j] == \"#\" and check_k(arr, int(K)):\n                    counter += 1\n                else:\n                    black_to_white(arr)\n    return counter\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution prints and returns the number of choices of rows and columns\n    satisfying the condition.\n    \"\"\"\n    h, w, k = map(int, stdin.split())\n    grid = [list(stdin.split()[1]) for _ in range(h)]\n    return str(choices(grid, k))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = [int(n) for n in stdin.split(' ')]\n    return (L * 2020 + R * 2021) % 2019\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input:\n        stdin: input from stdin\n    output:\n        stdout: answer of the problem\n    \"\"\"\n    input_list = stdin.split()\n    input_list = [int(i) for i in input_list]\n\n    if input_list[1] > 2020 or 2020 >= input_list[0]:\n        print(2020 - input_list[0])\n    elif input_list[0] > input_list[1]:\n        print(2020 - input_list[1])\n    else:\n        print(2020 - 2020)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split()]\n    i = 1\n    j = 1\n    while (i*j) % 2019!= 0:\n        if (i*j) % 2019 < 2020:\n            j += 1\n        else:\n            i += 1\n    return i*j\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(min((int(i) * int(j)) % 2019 for i, j in (sorted((int(i), int(j)) for i, j in (line.split() for line in stdin.strip().split(\"\\n\")) if int(i) <= int(j)))))"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.strip().split())\n    return f'{l * r % 2019:04d}'"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(min([a * b for a, b in itertools.product(map(int, stdin.split()), range(L, R + 1))]))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split(' '))\n    return str((L * R) % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = a * b\n    m = 2019\n    while c % m!= 0:\n        c += a\n    print(c // m)\n    return \"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split(' ')\n    L, R = map(int, num)\n\n    return min(R - L + 1, R * (R - L + 1) // 2)"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(n) for n in stdin.split(' ')]\n    print(min((i * j) % 2019 for i in range(l, r + 1) for j in range(l, r + 1)))"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC' if stdin[0] == 'A' and stdin[2] == 'C' and stdin.lower().replace('c', '') == stdin[3:-2] else 'WA'\n\"\"\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if string[0] == 'A' and string[2] == 'C' and string[3]!= 'C':\n        if 'C' in string[3:]:\n            index = string.index('C')\n            if string[index - 2: index] == 'C':\n                return 'AC'\n    return 'WA'\nprint(solution(input()))"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0]!= \"A\" or s[2]!= \"C\" or s[3]!= \"a\" or s[4]!= \"c\":\n        return \"WA\"\n    if s.count(\"c\") == 1:\n        return \"AC\"\n    return \"WA\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    if stdin[0] == \"A\" and stdin[2] == \"C\" and \"C\" in stdin[3:-1]:\n        return \"AC\"\n    else:\n        return \"WA\"\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    c = stdin[2]\n    s = stdin[3:]\n    i = 0\n    j = 2\n    if a == 'A' and s[1] == 'C' and s[0]!= 'A' and s[0]!= 'C' and s[1]!= 'C':\n        while j < len(s):\n            if s[j] == c:\n                i += 1\n                j += 2\n            else:\n                j += 1\n        if i == 1:\n            return 'AC'\n    return 'WA'\n\"\"\"\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    char = stdin[0]\n    third_char = stdin[2]\n    rest = stdin[3:]\n    if char == \"A\" and third_char == \"C\" and rest.islower():\n        return \"AC\"\n    else:\n        return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    if c == 'A':\n        if len(stdin) > 4 and stdin[2] == 'C' and stdin[3] == stdin[-2]:\n            return \"AC\"\n        else:\n            return \"WA\"\n    else:\n        return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    if s == 'A':\n        for i in range(len(s)):\n            if s[i] == 'C':\n                c_index = i\n                break\n        if c_index == len(s)-1 or c_index == len(s)-2:\n            print(\"AC\")\n        else:\n            print(\"WA\")\n    else:\n        print(\"WA\")\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if input string meets the conditions or not\"\"\"\n    # Removes all of the whitespace\n    s = stdin.replace(\" \", \"\")\n    # Finds the first character\n    first_char = s[0]\n    # Makes the first character upper case\n    s = s.replace(first_char, first_char.upper(), 1)\n    # Finds the index of the second character\n    second_index = s.find(s[2], 1)\n    # Finds the index of the second to last character\n    last_index = s.rfind(s[-2], 1)\n    # Determines if the conditions are met\n    if first_char == \"A\" and second_index == 3 and last_index == second_index + 1:\n        return \"AC\"\n    else:\n        return \"WA\"\n\"\"\"\nIf this solution does not pass the tests, try fixing this one.\n\nWrite a function solution(S) which takes a string S as input and returns \"AC\" if S meets the conditions or \"WA\" if it does not.\n\nConditions:\n - The first character is an uppercase A.\n - There is exactly one occurrence of C between the third character from the beginning and the second to last character (inclusive).\n - All letters except the A and C mentioned above are lowercase.\n\nFor example, given the input \"AtCoder\", the function should return \"AC\".\n\"\"\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    C = stdin[2]\n    if stdin[0] == 'A' and stdin[2] == 'C':\n        return 'AC'\n    else:\n        return 'WA'"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    k = int(stdin.split(\"\\n\")[1])\n\n    counter = 0\n    while counter < 1000000000000:\n        s = str(int(s) * 2)\n        s = s.replace('2', '22')\n        counter += 1\n\n    print(s[k - 1])\n    return ''\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n    S = stdin\n    K = int(stdin[1])\n    L = len(S)\n    while (K > 1):\n        S = np.array([int(i) for i in S]).astype(str)\n        S = list(np.char.mul(S, 2))\n        S = ''.join(S)\n        L = len(S)\n        K -= 1\n    S = np.array([int(i) for i in S]).astype(str)\n    return list(S[L-K])[0]"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def func(date: str, day: int) -> str:\n        return date[:int(day)].replace(\"2\", \"22\").replace(\"3\", \"3333\").replace(\"4\", \"4444\").replace(\"5\", \"55555\").replace(\"6\", \"666666\").replace(\"7\", \"777777777\").replace(\"8\", \"8888888888\").replace(\"9\", \"9999999999\") + date[int(day):]\n\n    date, day = stdin.split(\"\\n\")[0], stdin.split(\"\\n\")[1]\n    day = day.split(\" \")[0]\n\n    for _ in range(int(day)):\n        date = func(date, day)\n\n    return date.split(\" \")[0][0]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin[0])\n    string = stdin[1]\n    for i in range(5):\n        if 2 in string:\n            string = string.replace('2', '22')\n        if 3 in string:\n            string = string.replace('3', '333')\n        if 4 in string:\n            string = string.replace('4', '4444')\n        if 5 in string:\n            string = string.replace('5', '55555')\n        if 6 in string:\n            string = string.replace('6', '666666')\n        if 7 in string:\n            string = string.replace('7', '77777777')\n        if 8 in string:\n            string = string.replace('8', '88888888')\n        if 9 in string:\n            string = string.replace('9', '99999999')\n        if 1 in string:\n            string = string.replace('1', '1111111111')\n    print(string[days])\n\nsolution(stdin)\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    counter = 0\n    if k < len(s):\n        while True:\n            new_s = s[:]\n            for i in range(len(new_s)):\n                if new_s[i] == \"2\":\n                    new_s = new_s[:i] + \"22\" + new_s[i + 1:]\n                if new_s[i] == \"3\":\n                    new_s = new_s[:i] + \"33\" + new_s[i + 1:]\n                if new_s[i] == \"4\":\n                    new_s = new_s[:i] + \"44\" + new_s[i + 1:]\n                if new_s[i] == \"5\":\n                    new_s = new_s[:i] + \"55\" + new_s[i + 1:]\n                if new_s[i] == \"6\":\n                    new_s = new_s[:i] + \"66\" + new_s[i + 1:]\n                if new_s[i] == \"7\":\n                    new_s = new_s[:i] + \"77\" + new_s[i + 1:]\n                if new_s[i] == \"8\":\n                    new_s = new_s[:i] + \"88\" + new_s[i + 1:]\n                if new_s[i] == \"9\":\n                    new_s = new_s[:i] + \"99\" + new_s[i + 1:]\n                if new_s[i] == \"1\":\n                    new_s = new_s[:i] + \"11\" + new_s[i + 1:]\n            s = new_s\n            counter += 1\n            if counter == k:\n                break\n        return s[k - 1]\n    else:\n        return s[k - 1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    i = len(s) - 1\n    count = 0\n    while i >= 0:\n        if count > k:\n            i -= 1\n            continue\n        elif count == k:\n            return s[i]\n        else:\n            count += 1\n            if s[i] == '2':\n                s = s[:i] + '22' + s[i + 1:]\n                i -= 2\n            elif s[i] == '3':\n                s = s[:i] + '33' + s[i + 1:]\n                i -= 3\n            elif s[i] == '4':\n                s = s[:i] + '44' + s[i + 1:]\n                i -= 4\n            elif s[i] == '5':\n                s = s[:i] + '55' + s[i + 1:]\n                i -= 5\n            elif s[i] == '6':\n                s = s[:i] + '66' + s[i + 1:]\n                i -= 6\n            elif s[i] == '7':\n                s = s[:i] + '77' + s[i + 1:]\n                i -= 7\n            elif s[i] == '8':\n                s = s[:i] + '88' + s[i + 1:]\n                i -= 8\n            elif s[i] == '9':\n                s = s[:i] + '99' + s[i + 1:]\n                i -= 9\n            else:\n                i -= 1\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin.split('\\n')[0]\n    k = int(stdin.split('\\n')[1])\n    \n    days = 5*(10**15)\n    for i in range(days):\n        s = s.replace('2', '22')\n        s = s.replace('3', '333')\n        s = s.replace('4', '4444')\n        s = s.replace('5', '55555')\n        s = s.replace('6', '666666')\n        s = s.replace('7', '77777777')\n        s = s.replace('8', '888888888')\n        s = s.replace('9', '9999999999')\n        s = s.replace('1', '1')\n        \n    return s[k-1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    s, k = stdin.split()\n    s = int(s)\n    k = int(k)\n    n = 0\n\n    while s!= 1:\n        # this is a slow solution\n        if s % 2 == 0:\n            s //= 2\n        else:\n            s = s * 3 + 1\n        n += 1\n        if n == k:\n            return str(s)[k - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')\n    \n    k = int(k)\n    \n    temp = \"\"\n    count = 0\n    \n    for i in s:\n        if i == \"1\":\n            temp = temp + \"0\"\n        elif i == \"2\":\n            temp = temp + \"2\"\n        elif i == \"3\":\n            temp = temp + \"3\"\n        elif i == \"4\":\n            temp = temp + \"4\"\n        elif i == \"5\":\n            temp = temp + \"5\"\n        elif i == \"6\":\n            temp = temp + \"6\"\n        elif i == \"7\":\n            temp = temp + \"7\"\n        elif i == \"8\":\n            temp = temp + \"8\"\n        elif i == \"9\":\n            temp = temp + \"9\"\n        elif i == \"0\":\n            temp = temp + \"1\"\n    \n    while count < k:\n        temp = temp[1:] + temp[0]\n        count += 1\n    \n    return temp[-1]\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, p = stdin.strip().split('\\n')\n    n = len(p.split(' '))\n\n    permutation = [i for i in range(1, n + 1)]\n    for a, b in zip(p.split(' '), permutation):\n        if int(a) > b:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    p = [int(x) for x in stdin[1:].split(' ')]\n    sorted_p = sorted(p)\n    if p == sorted_p:\n        return 'YES'\n    else:\n        return 'NO'\n    pass"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    seen = set()\n    for i in range(N):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                seen.add((p[i], p[j]))\n    if len(seen) == 0:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    sort_p = sorted(p)\n    if p == sort_p:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    N = int(input[0])\n    p = list(map(int, input[1].split()))\n\n    for i in range(N):\n        for j in range(N):\n            if p[i] > p[j]:\n                if (i!= j and p[i] < p[j]):\n                    return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"YES\" if is_sorted(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if you can sort p in ascending order in the way stated in the problem statement,\n    and NO otherwise.\n\n    >>> solution('5\\n5 2 3 4 1')\n    'YES'\n    \"\"\"\n    num_list = [int(num) for num in stdin.split()]\n    for i, num in enumerate(num_list):\n        for j in range(i + 1, len(num_list)):\n            if num_list[i] > num_list[j]:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                break\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  return \"YES\" if sort_permutation(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(res)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = [int(c) for c in stdin]\n    n = len(S)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1):\n        if S[i] % 3 == 0 or S[i + 1] % 3 == 0:\n            dp[i][i + 1] = 1\n\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            if S[i] % 3 == 0 or S[j] % 3 == 0:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    dynamic programming solution:\n    1. make cuts between adjacent digits in the number\n    2. get the maximum number of numbers divisible by 3\n    3. if n = 1, you can not make any cuts\n    4. if n = 2, you can only make one cut\n    5. if n > 2, you can make at most one cut.\n    So, dp[i] = max(dp[i-2] + 1, dp[i-1])\n    \"\"\"\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[1] = 1  # make one cut\n    dp[2] = 1  # make one cut\n    dp[3] = 2  # make two cuts\n    for i in range(4, n + 1):\n        if i % 3 == 0:\n            dp[i] = max(dp[i - 2] + 1, dp[i - 1])\n        else:\n            dp[i] = max(dp[i - 2], dp[i - 1])\n\n    return dp[n]\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    size = len(string)\n    start = 0\n    count = 0\n    ans = 0\n    count += 1\n    while start < size - 1:\n        count += 1\n        if string[start] == '0':\n            start += 1\n        else:\n            start += 2\n    ans = count\n    return ans\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:stdin.index('\\n')]\n    count = 0\n    start = 0\n    end = 0\n    while s.count('0') > 0:\n        zero_index = s.index('0')\n        if zero_index == len(s) - 1:\n            count += 1\n            break\n        s = s[zero_index + 1:]\n        count += 1\n    while len(s) > 0:\n        if s[0] == '0':\n            s = s[1:]\n        else:\n            break\n    return count\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of numbers divisible by $3$ that Polycarp can get by making vertical cuts in the given number s.\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: the maximum number of numbers divisible by $3$ that Polycarp can get by making vertical cuts in the given number s.\n    \"\"\"\n    return 'a'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of numbers divisible by $3$ that Polycarp can get by\n    making vertical cuts in the given number s.\n\n    >>> solution('3121')\n    2\n\n    >>> solution('6')\n    1\n\n    >>> solution('201920181')\n    4\n\n    \"\"\"\n    s = stdin\n    s = list(map(int, s))\n    cuts = []\n    cut = False\n    # We can make a cut at index i if s[i-1] < s[i] and s[i] % 3 == 0\n    for i in range(1, len(s)):\n        if s[i] >= s[i-1]:\n            continue\n        if s[i] % 3 == 0:\n            cuts.append(i)\n            cut = True\n    if not cut:\n        return 1\n    # Make cuts\n    cuts.sort(reverse=True)\n    cuts.append(len(s))\n    ans = 0\n    for i in range(len(cuts)-1):\n        ans = max(ans, cuts[i+1] - cuts[i]-1)\n    return ans\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\")\n    1\n    >>> solution(\"201920181\")\n    4\n    >>> solution(\"3121\")\n    2\n    >>> solution(\"1000000000000000000000000000000000\")\n    33\n    \"\"\"\n    n = stdin\n    # First, get the number of digits in n\n    digits = 0\n    while n > 0:\n        n //= 10\n        digits += 1\n\n    # For each of the digits in n, check if it is divisible by 3.\n    # If yes, add it to the count.\n    count = 0\n    for d in n[:digits]:\n        if d % 3 == 0:\n            count += 1\n\n    # If the last digit is not divisible by 3, add the count of it as well.\n    if n % 3 == 0:\n        count += 1\n\n    return count\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of zeroes in array c by choosing a d such that:\n    d * a[i] + b[i] <= 0\n    where a[i] and b[i] are the ith elements of the arrays.\n\n    :param stdin: the input of the format as described in the problem\n    :return: the solution in the format as described in the problem\n    \"\"\"\n    return f'{compute(stdin)}\\n'\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # O(n)\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    b = [int(i) for i in stdin.readline().split()]\n    zeroes = 0\n    for i in range(n):\n        zeroes += min(b[i], a[i])\n\n    return str(zeroes)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = map(int, stdin.splitlines())\n    a, b = list(l[::2]), list(l[1::2])\n    n = len(a)\n    r = 0\n    for i in range(n):\n        if (a[i] == 0) or (b[i] == 0):\n            r += 1\n        a[i] *= b[i]\n    return r\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # a = [int(x) for x in stdin.split(\" \")]\n    # b = [int(x) for x in stdin.split(\" \")]\n    a = [0, 0, 0, 0, 0]\n    b = [1, 2, 3, 4, 5]\n    # n = len(a)\n    count = 0\n    # a = [1, 2, 3, 4, 5]\n    # b = [2, 4, 7, 11, 3]\n    # print(a)\n    # print(b)\n    # print(len(a))\n    # print(len(b))\n    # print(type(a))\n    for i in range(0, len(a)):\n        if a[i] == 0:\n            count += 1\n    for i in range(0, len(b)):\n        if b[i] == 0:\n            count += 1\n    return str(count)\n\nsolution(stdin)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin)\n    a, b = map(lambda x: list(map(int, x.split())), [stdin.splitlines() for _ in range(2)])\n    n = len(a)\n    print(n)\n    z = [0] * n\n    for i in range(n):\n        for j in range(n):\n            z[i] += a[i] * b[j]\n    print(z)\n\n\n    return z\nsolution('5\\n1 2 3 4 5')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the largest number of zeroes in the array.\n    \"\"\"\n    n = int(stdin.readline())\n    arr1 = [int(x) for x in stdin.readline().split()]\n    arr2 = [int(x) for x in stdin.readline().split()]\n    \n    max_zeroes = 0\n    for d in range(1, 100):\n        c = [0] * n\n        for i in range(n):\n            c[i] = d * arr1[i] + arr2[i]\n        zeroes = c.count(0)\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n    \n    return str(max_zeroes)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    # d = 0\n    # count = 0\n    # for aa, bb in zip(a, b):\n    #     d += aa * bb\n    #     count = max(count, d)\n    # return count\n    d = abs(sum(a)) + abs(sum(b))\n    return str(d)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\")\n    2\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    b = [int(i) for i in stdin.split(\"\\n\")[2].split(\" \")]\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] * j + b[i] > 0:\n                res = max(res, j - i + 1)\n    return str(res)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of zeroes in an array.\"\"\"\n    pass\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    b = list(map(int, stdin.split(\" \")))\n\n    s = sum(a) + sum(b)\n    t = s // 2\n    if s % 2 == 1:\n        return -1\n\n    n = len(a)\n    dp = [0 for _ in range(t + 1)]\n    for i in range(n):\n        for j in range(t, a[i] - 1, -1):\n            dp[j] = max(dp[j], dp[j - a[i]] + b[i])\n\n    return dp[t]\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    l = stdin.split('\\n')[1]\n    r = stdin.split('\\n')[2]\n    k = 0\n    a = [[0 for i in range(len(r))] for j in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(r)):\n            if l[i] == r[j] or l[i] == '?' or r[j] == '?':\n                a[i][j] = 1\n    for i in range(len(l)):\n        for j in range(len(r)):\n            for k in range(i + 1, len(l)):\n                if a[k][j] == 1 and a[i][k] == 1:\n                    a[i][j] = 1\n    for i in a:\n        print(i.count(1))\n    return ''\n\nsolution(stdin)\n\n'''"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(stdin.split()[1])\n    r = list(stdin.split()[2])\n\n    count = 0\n\n    # left_boot = \"f\"\n    # right_boot = \"f\"\n    # for i in range(n):\n    #     if l[i] == \"f\" or l[i] == \"?\":\n    #         left_boot = l[i]\n    #         right_boot = r[i]\n    #     else:\n    #         if left_boot == \"f\" and right_boot == \"f\":\n    #             count += 1\n    #         left_boot = l[i]\n    #         right_boot = r[i]\n    #\n    # print(count)\n\n    left_boot = []\n    right_boot = []\n\n    for i in range(n):\n        if l[i] == \"f\" or l[i] == \"?\":\n            left_boot.append(i)\n        if r[i] == \"f\" or r[i] == \"?\":\n            right_boot.append(i)\n\n    left_boot.sort()\n    right_boot.sort()\n\n    count = 0\n    for i in range(n):\n        if i in left_boot:\n            for j in range(i + 1, n):\n                if j in right_boot and j > i:\n                    count += 1\n\n    print(count)\n    return str(count)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, l, r = map(stdin.splitlines)\n    N = int(N[0])\n    l = l[0]\n    r = r[0]\n    pairs = []\n    for i in range(N):\n        if l[i]!= '?' and r[i]!= '?':\n            pairs.append([l[i], r[i]])\n    k = len(pairs)\n    pairs = []\n    for i in range(N):\n        if l[i] == '?' or r[i] == '?':\n            k -= 1\n            if l[i] == '?':\n                pairs.append([i, i])\n            else:\n                pairs.append([i, i + N])\n        else:\n            pairs.append([i, i + N])\n    for i in range(N):\n        if l[i]!= '?' and r[i]!= '?':\n            pairs.append([i, i + N])\n    m = len(pairs)\n    # print(m)\n    def is_compat(a, b):\n        if l[a] == '?' or l[b] == '?':\n            return l[a] == l[b]\n        return l[a] == r[b] or l[b] == r[a]\n\n    dp = [1] * m\n    for i in range(1, m):\n        for j in range(i):\n            if is_compat(pairs[i][0], pairs[j][1]):\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(dp)\n    return k\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\ncodeforces\\nhellocode\")\n    '5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n'\n    >>> solution(\"7\\nabaca?b\")\n    '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n'\n    >>> solution(\"9\\nbambarbia\\nhellocode\")\n    '0\\n'\n    >>> solution(\"10\\ncode???\\n??????test\")\n    '10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n'\n    \"\"\"\n   ..."
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    left = list(stdin.readline())\n    right = list(stdin.readline())\n    left_dict = Counter(left)\n    right_dict = Counter(right)\n    left_len = len(left_dict)\n    right_len = len(right_dict)\n    left_count = 0\n    right_count = 0\n    for left_value in left_dict.values():\n        if left_value == 0:\n            left_count += 1\n    for right_value in right_dict.values():\n        if right_value == 0:\n            right_count += 1\n    for index in range(0, left_len):\n        if left_dict[left[index]] == 0:\n            left_count += 1\n    for index in range(0, right_len):\n        if right_dict[right[index]] == 0:\n            right_count += 1\n    print(max(left_count, right_count))\n    return \"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    left_color_count = {c: 0 for c in stdin if c!= '?'}\n    right_color_count = {c: 0 for c in stdin if c!= '?'}\n    incompatible_pairs = set()\n\n    for i in range(len(stdin)):\n        if stdin[i] == '?':\n            continue\n        left_color_count[stdin[i]] += 1\n        right_color_count[stdin[i]] += 1\n\n    for i in range(len(stdin)):\n        if stdin[i] == '?':\n            continue\n        for c in stdin[i + 1:]:\n            if c == '?':\n                continue\n            if c!= stdin[i]:\n                if c in left_color_count and left_color_count[c] > 0:\n                    left_color_count[c] -= 1\n                    incompatible_pairs.add((i, i + left_color_count[c] + 1))\n                    if left_color_count[c] == 0:\n                        del left_color_count[c]\n                if c in right_color_count and right_color_count[c] > 0:\n                    right_color_count[c] -= 1\n                    incompatible_pairs.add((i, i + right_color_count[c] + 1))\n                    if right_color_count[c] == 0:\n                        del right_color_count[c]\n\n    print(incompatible_pairs)\n    return '0'\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    left_boots_length, left_boots_string = stdin.split('\\n')\n    left_boots_length = int(left_boots_length)\n    left_boots_string = list(left_boots_string)\n    right_boots_length = left_boots_length\n    right_boots_string = left_boots_string[::-1]\n    left_boots = list(map(lambda char: char if char!= '?' else '', left_boots_string))\n    right_boots = list(map(lambda char: char if char!= '?' else '', right_boots_string))\n\n    left_boots_indices = list(range(len(left_boots)))\n    right_boots_indices = list(range(len(right_boots)))\n\n    indices_matching_pairs = []\n    for left_index in left_boots_indices:\n        for right_index in right_boots_indices:\n            if left_boots[left_index] == right_boots[right_index]:\n                indices_matching_pairs.append([left_index, right_index])\n\n    indices_matching_pairs.sort(key=lambda pair: (pair[0], pair[1]))\n\n    pairs_matching_indices = []\n    current_pair = []\n    i = 0\n    while i < len(indices_matching_pairs):\n        if len(current_pair) == 0 or current_pair[-1][1] == indices_matching_pairs[i][0]:\n            current_pair.append(indices_matching_pairs[i])\n            i += 1\n        else:\n            pairs_matching_indices.append(current_pair)\n            current_pair = []\n    if len(current_pair) > 0:\n        pairs_matching_indices.append(current_pair)\n\n    max_pairs = 0\n    for pair in pairs_matching_indices:\n        pairs_left_boots_indices = set(pair[0] for pair in pair)\n        pairs_right_boots_indices = set(pair[1] for pair in pair)\n        for left_boot_index in pairs_left_boots_indices:\n            for right_boot_index in pairs_right_boots_indices:\n                if (left_boot_index, right_boot_index) in indices_matching_pairs:\n                    max_pairs += 1\n\n    print(max_pairs)\n\n    pairs = []\n    for pair in pairs_matching_indices:\n        pairs.append([left_boots_string[pair[0]], right_boots_string[pair[1]]])\n\n    print('\\n'.join([' '.join([str(index), pair]) for index, pair in enumerate(pairs)]))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of blocks, such that no two blocks intersect.\n\n    Args:\n        stdin (str): The input\n\n    Returns:\n        str: The maximum number of blocks such that no two blocks intersect.\n    \"\"\"\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''.join([str(i) for i in solution2(stdin)])\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute a set of blocks such that no two blocks intersect\n\n    :param stdin: input string\n    :return: solution string\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    # maximum number of blocks\n    max_blocks = 1\n    # all blocks\n    blocks = []\n\n    # for each element, we create a list of blocks that include it\n    for i in range(len(a)):\n        new_blocks = []\n        for block in blocks:\n            # add the block that starts at the current element\n            new_blocks.append(block + [i])\n            # add the block that starts after the current element\n            new_blocks.append([i + 1, block[-1] + 1])\n        blocks = new_blocks\n\n        # check for maximum number of blocks\n        if max_blocks < len(blocks):\n            max_blocks = len(blocks)\n\n    # create an empty solution string\n    solution = \"\"\n\n    # for each block, add the solution string\n    for block in blocks:\n        solution += f\"{block[0]} {block[-1]}\\n\"\n\n    # return the solution string\n    return solution[:-1]\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Idea:\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    blocks = []\n    for i in range(n - 1):\n        blocks.append((i, i + 1))\n        blocks.append((i + 1, i + 2))\n    blocks.append((n - 1, n))\n\n    for i in range(n):\n        sum_1 = sum(arr[0:i])\n        sum_2 = sum(arr[i + 1 : n])\n        if sum_1!= sum_2:\n            continue\n        for start, end in blocks:\n            if start <= i <= end:\n                continue\n            if start <= i + 1 <= end:\n                continue\n            if start <= i - 1 <= end:\n                continue\n            break\n        else:\n            return str(i) + \" \" + str(i + 1)\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [0] + a + [0]\n    res = 0\n    while len(a) > 2:\n        t = [0] * (len(a) // 2)\n        for i in range(len(t)):\n            t[i] = a[i * 2 + 1] + a[i * 2 + 2]\n        t = sorted(t)\n        i = 0\n        while i < len(t) and a[i * 2 + 2] <= t[i]:\n            res += 1\n            a = a[: i * 2 + 1] + [t[i]] + a[i * 2 + 2:]\n            i += 1\n    return res\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum set of blocks, such that there is no set of blocks that intersects, \n    but the sum of elements in each block is the same.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n\n    N, *arr = [int(i) for i in stdin.split()]\n    blocks = []\n    sum_arr = [0] * N\n    for i in range(N):\n        sum_arr[i] = arr[i] + sum_arr[i-1]\n    cnt = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if sum_arr[i] == sum_arr[j]:\n                blocks.append([i, j])\n                cnt += 1\n    \n    if cnt == 0:\n        return '0\\n'\n\n    blocks.sort(key=lambda x: (x[0], x[1]))\n\n    res = []\n    last = -1\n    for i in range(cnt):\n        if last == blocks[i][0]:\n            continue\n        last = blocks[i][1]\n        res.append(str(blocks[i][0]) +'' + str(blocks[i][1]))\n\n    return str(cnt) + '\\n' + '\\n'.join(res)\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u0446\u0430\u043c\u0438 \u043d\u0430 \u043c\u0435\u0441\u0442\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n4 1 2 2 1 5 3\\n\")\n    3\n    7 7\n    2 3\n    4 5\n    >>> solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    3 4\n    1 1\n    2 2\n    3 3\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    nums = [0] * n\n    ans = 0\n    for i in range(n):\n        nums[a[i] - 1] += 1\n        ans = max(ans, nums[a[i] - 1])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] < a[j] + a[i]:\n                ans -= 1\n    print(ans)\n    for i in range(n):\n        if nums[a[i] - 1] == ans:\n            print(i + 1, a[i])\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n4 1 2 2 1 5 3\\n\")\n    3\n    >>> solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    >>> solution(\"4\\n1 1 1 1\\n\")\n    4\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    a.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                continue\n            if j > i + 1 and a[j] < a[i]:\n                if result < j - i:\n                    result = j - i\n            else:\n                if result < j - i + 1:\n                    result = j - i + 1\n    return result\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = [0] * n\n    for x in a:\n        s[x - 1] += 1\n    m = s[0]\n    start = 0\n    for i in range(n):\n        if s[i] == m:\n            start = i\n        else:\n            m = max(s[i], m)\n            if m == s[i]:\n                start = i\n    blocks = [start]\n    j = start + 1\n    while j < n:\n        while s[j] <= s[blocks[-1]] and j < n:\n            j += 1\n        blocks.append(j)\n        j += 1\n    if len(blocks) == 1:\n        return '1\\n{0} {0}\\n'.format(blocks[0])\n    res = []\n    for i in range(1, len(blocks) - 1):\n        res.append('{0} {1}\\n'.format(blocks[i - 1], blocks[i]))\n    return '{0}\\n{1}'.format(len(blocks) - 1, ''.join(res))\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    i, j = 0, 1\n    count = 0\n    while i < n:\n        while j < n and i!= j:\n            if (numbers[i] + numbers[j]) % k == 0:\n                count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a[i] * a[j] % k == 0:\n                cnt += 1\n    return str(cnt)\n\nprint(solution(\"6 11\\n45 1 10 12 11 7\"))"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    b = []\n    c = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            a1 = str(a[i] + a[j])\n            if a1[-1] == '0' or int(a1) % k!= 0:\n                continue\n            else:\n                b.append(a[i])\n                b.append(a[j])\n                c.append(a[i])\n                c.append(a[j])\n    return len(b)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                pairs += 1\n    \n    return str(pairs)\n    \n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # a: str, b: str, n: int, k: int = int(stdin.readline())\n    # a = stdin.readline().split()\n    # b = stdin.readline().split()\n    # n = int(stdin.readline())\n    # k = int(stdin.readline())\n    a, b, n, k = [int(stdin.readline()) for _ in range(4)]\n    if k == 1:\n        return 0\n    elif k == 2:\n        return int(n * (n - 1))\n\n    b_s = sorted(b)\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = a[i] + b_s[j]\n            if x % k == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        return -1\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                con = a[i] + a[j]\n                if con % k == 0:\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not Implemented\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] % k == 0:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    pairs = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            concat = nums[i] * nums[j]\n            if concat % k == 0:\n                pairs += 1\n    return pairs\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def generate_divisible_pairs(a: list, k: int):\n        count = 0\n        pairs = []\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if i!= j and (a[i] + a[j]) % k == 0:\n                    pairs.append((i, j))\n                    count += 1\n        return count, pairs\n\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count, pairs = generate_divisible_pairs(a, k)\n    return count\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split(\" \")))\n    next_ = [0] * N\n    next_[0] = sequence[0]\n    for i in range(1, N):\n        next_[i] = max(next_[i - 1] + sequence[i], sequence[i])\n    return str(max(next_))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    B = list(map(int, stdin.split()))\n    res = 0\n    A.append(0)\n    B.append(0)\n    for i in range(N):\n        for j in range(i+1, N+1):\n            subsum = sum(A[i:j])\n            if subsum > res:\n                res = subsum\n    return str(res)"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # print(n)\n    # print(b)\n    a = [(b[0], 0)]\n    for i in range(1, n):\n        b_i = b[i]\n        max_ = a[-1][0]\n        a.append((max(max_, b_i), a[-1][1] + b_i))\n        # print(a)\n    return str(max(a)[0])"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split('\\n'))\n    # An empty array to store the max sum of elements that can be formed in the array\n    max_sum = [None] * N\n\n    # For each index, find the max sum of the subarray ending at this index by iterating over all possible subarrays and summing them.\n    # For example, max_sum[0] = max_sum[1] = max_sum[2] = max(2 + 5, -1 + 2, 5 + 2) = max(4, -1, 7) = 7\n    for i in range(N):\n        max_sum[i] = max(A[i], A[i] + max_sum[i - 1])\n\n    # At the end, the max sum of elements that can be formed in the array is the max element in max_sum.\n    print(max_sum[-1])"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Extract input\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    # Compute solution\n    max_sum = 0\n    for i in range(n - 1):\n        max_sum = max(max_sum, arr[i] + arr[i + 1])\n    # Return solution\n    print(max_sum)\n    return ''\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible sum of the elements of A.\n\n    >>> solution('3\\\\n2 5')\n    9\n    >>> solution('2\\\\n5')\n    9\n    >>> solution('1\\\\n5')\n    9\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    best = 0\n    for i in range(n):\n        best = max(best, b[i])\n    for i in range(n - 1):\n        best = max(best, b[i] + b[i + 1])\n    return best\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum sum that can be obtained from a given set of integers.\n\n    Args:\n        stdin (str): Input string given in the following format:\n            N\n            B_1 B_2... B_{N-1}\n\n    Returns:\n        str: The maximum possible sum of the elements of A.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    integers = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    if n < 2:\n        return '0'\n    elif n == 2:\n        return str(max(integers))\n    else:\n        integers.insert(0, 0)\n        integers.append(0)\n        max_val = 0\n        max_sum = 0\n        for i in range(n):\n            if integers[i+1] - integers[i] > 0:\n                max_val = integers[i+1]\n            else:\n                max_val = integers[i]\n            if max_val + integers[i+2] > max_sum:\n                max_sum = max_val + integers[i+2]\n        return str(max_sum)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, arr[i])\n    print(max_sum)\n    return''"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum possible sum of the elements of A\n    :param stdin: Input of the format:\n    N\n    B_1 B_2... B_{N-1}\n    :return: The maximum possible sum of the elements of A\n    \"\"\"\n    N, *input_list = [int(x) for x in stdin.split('\\n')[0].split()]\n    B = [int(x) for x in stdin.split('\\n')[1].split()]\n    max_sum = 0\n    for i in range(N):\n        max_sum = max(max_sum, B[i] + max(input_list[:i+1]))\n    return str(max_sum)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def score(arr: list) -> int:\n        result = 0\n        for x, y, z, w in arr:\n            if y - x == z:\n                result += w\n        return result\n\n    arr = [list(map(int, stdin.split('\\n')[1].split())) for _ in range(int(stdin.split('\\n')[0].split()[0]))]\n    return max([score(x) for x in list(permutations(arr, len(arr)))])\n\nsolution(stdin)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible score of a given sequence.\n\n    Args:\n        stdin (str): Input string given from standard input.\n\n    Returns:\n        str: The maximum possible score of a given sequence.\n    \"\"\"\n    n, m, q = [int(x) for x in stdin.split()]\n    scores = {}\n    scores[(0, 0, 0, 0)] = 0\n    for _ in range(q):\n        a, b, c, d = [int(x) for x in stdin.split()]\n        for start in range(n):\n            for end in range(start + 1, n + 1):\n                score = d\n                if start <= a - 1 <= end:\n                    score -= scores[(start, end, c, d)]\n                if start <= b - 1 <= end:\n                    score -= scores[(start, end, c, d)]\n                scores[(start, end, c, d)] = max(score, scores[(start, end, c, d)])\n    return str(max(scores.values()))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [], [], [], []\n    for i in stdin.splitlines():\n        i = i.split()\n        a.append(int(i[0]))\n        b.append(int(i[1]))\n        c.append(int(i[2]))\n        d.append(int(i[3]))\n    best = 0\n    for i in range(len(a)):\n        best += max(0, d[i] - b[i] + c[i])\n    return str(best)"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    return \"\".join(map(str, [0]))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def my_extractor(s: str) -> [int]:\n        return list(map(int, s.split()))\n\n    def my_input(s: str) -> int:\n        return int(input(s))\n\n    n, m, q = my_extractor(stdin)\n    a, b, c, d = [], [], [], []\n\n    for _ in range(q):\n        a_i, b_i, c_i, d_i = my_extractor(input())\n        a.append(a_i)\n        b.append(b_i)\n        c.append(c_i)\n        d.append(d_i)\n\n    # a[i] - b[i] = c[i]\n    def cmp(a, b):\n        if a < b:\n            return -1\n        if a > b:\n            return 1\n        return 0\n\n    A = [0 for _ in range(m + 1)]\n\n    for a_i, b_i, c_i, d_i in zip(a, b, c, d):\n        A[a_i] += d_i\n        A[b_i + 1] -= d_i\n\n    A = [0] + sorted(A)\n    # A.append(0)\n\n    score = 0\n    max_score = 0\n    for i, (a_i, b_i, c_i, d_i) in enumerate(zip(a, b, c, d)):\n        for j in range(i + 1, len(A)):\n            if cmp(A[j], A[j - 1]) == -1:\n                # score += d_i\n                # max_score = max(max_score, score)\n                max_score = max(max_score, d_i)\n\n    return str(max_score)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    max_diff = -1\n    for i in range(len(input)):\n        for j in range(i + 1, len(input)):\n            diff = abs(input[i] - input[j])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum absolute difference of two elements in an array A.\n\n    Args:\n        stdin (str): input string given in standard input format\n\n    Returns:\n        str: string containing maximum absolute difference\n    \"\"\"\n    _, *lines = [line.strip() for line in stdin.split('\\n') if line.strip()]\n    n = int(lines[0])\n    arr = [int(n) for n in lines[1:]]\n    if n == 1:\n        return str(arr[0])\n    res = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        res = max(res, abs(arr[i] - arr[i - 1]))\n    return str(res)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(s) for s in stdin.split('\\n')]\n    a.sort()\n    print(a[-1]-a[0])"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str, length of maximum absolute difference of two elements (with different indices) in A.\"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    greatest_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            greatest_diff = max(greatest_diff, abs(arr[i] - arr[j]))\n    return str(greatest_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split(' ')))\n    max_abs_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_abs_diff = max(max_abs_diff, abs(A[i] - A[j]))\n    print(max_abs_diff)\n    return ''\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = [int(n) for n in stdin.split()]\n    maximum_difference = abs(numbers[1] - numbers[0])\n    for i in range(1, N):\n        difference = abs(numbers[i] - numbers[i - 1])\n        if difference > maximum_difference:\n            maximum_difference = difference\n    return str(maximum_difference)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n    diff = [A[i]-A[i-1] for i in range(1, N)]\n    return max(diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().split()]\n    n = len(A)\n    left = 0\n    right = 0\n    left_max = A[0]\n    right_max = A[0]\n    ans = 0\n    for i in range(n):\n        if A[i] < left_max:\n            left_max = A[i]\n            left = i\n        if A[n - i - 1] > right_max:\n            right_max = A[n - i - 1]\n            right = n - i - 1\n    ans = A[left] - A[right]\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dif = arr[j] - arr[i]\n            if abs(dif) > max_diff:\n                max_diff = dif\n    return str(max_diff)\n    "
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    #\n    #\n    return stdin\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n    # This is all you need for most Kick Start problems.\n    # print(stdin.rstrip())  # can be used to print the line of input\n\n    # n = int(input())\n    # x = [int(input()) for i in range(n)]\n    # x = [int(i) for i in stdin.strip().split()]\n    # x = [list(map(int, i.split())) for i in stdin.strip().split('\\n')]\n    # print(x)\n    n = int(stdin.readline())\n    x = [list(map(int, i.split())) for i in stdin.readlines()]\n    for i in range(n):\n        x[i][0] = x[i][0] ** 2 + x[i][1] ** 2\n\n    x = sorted(x, key=lambda x: x[0])\n    res = 0\n    for i in range(1, n):\n        res += (x[i][0] - x[i - 1][0]) ** 0.5\n    print(res / n)"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\\\"\"\"\n        1. \u3042\u308b\u753a\u304c\u8907\u6570\u306e\u99c5\u3092\u901a\u308a\u904e\u304e\u305f\u6642\uff0c\u6700\u9577\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n        2. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        3. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        4. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        5. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        6. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        7. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        8. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        9. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        10. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        11. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        12. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        13. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        14. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        15. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        16. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        17. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        18. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        19. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        20. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        21. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        \u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        22. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        23. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        24. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        25. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        26. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        27. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        28. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        29. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        30. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        31. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        32. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        33. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\n        34. \u3042\u308b\u99c5\u304b\u3089\u5225\u306e\u99c5\u307e\u3067\u6700\u77ed\u3067"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def parse(input_str: str) -> Tuple[int, List[Tuple[int, int]]]:\n        num_towns = int(input_str.split(\"\\n\")[0].split()[0])\n        towns = []\n        for i in range(1, num_towns + 1):\n            towns.append(tuple(int(x) for x in input_str.split(\"\\n\")[i].split()))\n        return num_towns, towns\n\n    n, towns = parse(stdin)\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(\n                round(\n                    ((towns[i][0] - towns[j][0]) ** 2 + (towns[i][1] - towns[j][1]) ** 2)\n                    ** 0.5,\n                    6,\n                )\n            )\n    return str(round(sum(distances) / n ** 2, 6))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    N = int(stdin)\n    towns = []\n    for i in range(N):\n        x, y = map(int, stdin.split(\"\\n\")[i].split())\n        towns.append([x, y])\n    \"\"\"\n    N = 3\n    towns = [[0, 0], [1, 0], [0, 1]]\n    # N = int(stdin)\n    # towns = []\n    # for i in range(N):\n    #     x, y = map(int, stdin.split(\"\\n\")[i].split())\n    #     towns.append([x, y])\n\n    ans = 0\n    towns = sorted(towns, key=lambda x: x[1])\n    for i in range(1, N):\n        ans += math.sqrt(pow(towns[i][0] - towns[i - 1][0], 2) + pow(towns[i][1] - towns[i - 1][1], 2))\n    print(ans / N)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def average_len(x: int, y: int) -> float:\n        return np.sqrt((x ** 2 + y ** 2) * (x ** 2 + y ** 2 + 1) / 6)\n\n    # n = int(stdin)\n    n = 3\n    x_list, y_list = [], []\n    for i in range(n):\n        x, y = list(map(int, stdin.split(\" \")))\n        x_list.append(x)\n        y_list.append(y)\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                ans += average_len(x_list[i], y_list[i])\n    print(ans / 6)\n    return ans / 6\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(s)\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # \u3053\u308c\u3084\u3063\u305f\u3089\u901a\u3089\u305a\u306a\u3093\u3067\u3059\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u304c\u3067\u304d\u307e\u305b\u3093\u306d\n    # https://beta.atcoder.jp/contests/agc037/tasks/agc037_b\n    # https://beta.atcoder.jp/contests/agc037/tasks/agc037_c\n    #\n    # \u7dcf\u5f53\u308a\u3067\u3001\u6b8b\u3063\u3066\u3044\u308b\u6570\u306f\u3061\u3087\u3063\u3068\u9045\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n    #\n    # \u5168\u3066\u306e\u8981\u7d20\u304c\u5076\u6570\n    # \u305d\u306e\u5834\u5408\u3001\u305d\u306e\u30d1\u30b9\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u306f\u5947\u6570\u3067\u3042\u308b\u3002\n    # \u307e\u305f\u3001\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u304c\u5947\u6570\u306e\u5834\u5408\u3001\u305d\u306e\u30d1\u30b9\u306e\u5f97\u70b9\u306f2\u3067\u5272\u308b\u3002\n    # \u5168\u3066\u306e\u8981\u7d20\u304c\u5947\u6570\n    # \u305d\u306e\u5834\u5408\u3001\u305d\u306e\u30d1\u30b9\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u306f\u5076\u6570\u3067\u3042\u308b\u3002\n    # \u307e\u305f\u3001\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u304c\u5076\u6570\u306e\u5834\u5408\u3001\u305d\u306e\u30d1\u30b9\u306e\u5f97\u70b9\u306f1\u3067\u5272\u308b\u3002\n    #\n    # \u5168\u3066\u306e\u8981\u7d20\u304c\u5947\u6570\u3060\u3063\u305f\u3068\u304d\u306b\u3001\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u304c\u5947\u6570\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u305d\u306e\u30d1\u30b9\u306e\u5f97\u70b9\u306f2\u3067\u5272\u308b\u3002\n    # \u305d\u3046\u3067\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u304c\u5947\u6570\u3067\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30d1\u30b9\u306e\u5f97\u70b9\u306f1\u3067\u5272\u308b\u3002\n    # \u306a\u306e\u3067\u3001\u5168\u3066\u306e\u8981\u7d20\u304c\u5076\u6570\u3067\u3042\u308b\u5834\u5408\u3001\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u304c\u5076\u6570\u306a\u306e\u3067\u3042\u308c\u3070\u3001\u305d\u306e\u30d1\u30b9\u306e\u5f97\u70b9\u306f0\u3067\u5272\u308b\u3002\n    #\n    # \u3042\u308b\u30d1\u30b9\u306e\u5f97\u70b9\u306f\u3001\u8a08\u7b97\u7d50\u679c\u306b\u4e57\u308b\u3002\n    # \u305f\u3060\u3057\u3001\u542b\u307e\u308c\u308b\u90fd\u5e02\u6570\u304c\u5947\u6570\u3067\u3042\u308c\u3070\u3001\u305d\u306e\u30d1\u30b9\u306e\u5f97\u70b9\u306f2\u3067\u5272\u308b\u3002\n    #\n    # \u3068\u3044\u3046\u308f\u3051\u3067\u3001\u5168\u3066\u306e\u8981\u7d20\u304c\u5947\u6570\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u3060\u3051\u3067\u3044\u3051\u308b\u3002\n    # \u6570\u3048\u4e0a\u3052\u554f\u984c\u3068\u306a\u308b\u306e\u3067\u3001\u3069\u3046\u305b\u3061\u3087\u3063\u3068\u9762\u767d\u304f\u306a\u308b\u306e\u3067\u3042\u3042\u2026\u2026\u3002\n    n = int(stdin)\n    x_arr, y_arr = [], []\n    for _ in range(n):\n        _ = list(map(int, stdin.split(' ')))\n        x_arr.append(_[0])\n        y_arr.append(_[1])\n\n    x_arr.sort()\n    y_arr.sort()\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x_arr[i] - x_arr[j]) ** 2 + abs(y_arr[i] - y_arr[j]) ** 2 <= 1e-7:\n                return '0.0'\n    return '%.6f' % (sum([(x_arr[i] ** 2 + y_arr[i] ** 2) ** 0.5 for i in range(n)]) / n)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        a, b = [int(i) for i in stdin.split()]\n        x.append(a)\n        y.append(b)\n\n    sum = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            sum += math.sqrt(pow(x[i] - x[j], 2) + pow(y[i] - y[j], 2))\n\n    print(sum / (n - 1) / n)\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = list(map(int, stdin.readline().split()))\n        total += int(pow(x, 2) + pow(y, 2))\n    return str(round(total / n, 6))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(A, B)\n\"\"\"\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a - 2 * b)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the total horizontal length of the uncovered parts of the window.\n    >>> solution('12 4')\n    4\n    >>> solution('15 6')\n    9\n    >>> solution('3 3')\n    0\n    \"\"\"\n    window_width, curtains_length = map(int, stdin.split(' '))\n    return min(window_width, curtains_length * 2) - max(curtains_length, window_width)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the total horizontal length of the uncovered parts of the window'''\n    _, x, y = map(int, stdin.split('\\n')[0].split(' '))\n    print(x - y)\n    return ''"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A - 2 * B\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A - B"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    print(a * b)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = map(int, stdin.split())\n    return a - b\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, B))"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2*B)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin)\n    min_F = N\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            F = max(len(str(a)), len(str(b)))\n            if a * b < min_F:\n                min_F = a * b\n                print(f\"{min_F}\")\n                print(f\"F({a}, {b}) has a minimum value of {min_F} at ({a},{b})\")"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n >= 1:\n        count += 1\n        n //= 10\n    count += 1\n    return count"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = (max(len(str(A)), len(str(B))) * (A // B) * (B // A))\n    print(result)"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(min(len(str(a)) + len(str(b)) for a in range(1, n + 1) for b in range(1, n + 1)))\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(3)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.read())\n    result = 0\n    for a in range(1, 10 ** 6):\n        for b in range(1, 10 ** 6):\n            if a * b < n:\n                continue\n            if n == a * b:\n                result = min(result, len(str(a)) + len(str(b)))\n    return result\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if len(str(i)) * len(str(j)) > count:\n                count = i * j\n    return count\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 1\n    while n > a * b:\n        a += 1\n        b += 1\n    return str(a * b)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(len(str(a)) * len(str(b)) for a in range(1, n + 1) for b in range(1, n + 1)))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution of exercise 4.\n\n    >>> solution('''\n   ... 2 3\n   ... 1 3 1\n   ... 3 2 3\n   ... ''')\n    '1'\n    \"\"\"\n    count: int = 0\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    M = int(stdin[1])\n\n    for line in stdin[2:]:\n        K_i = int(line.split(' ')[0])\n        L_i = [int(n) for n in line.split(' ')[1:]]\n\n        for i in L_i:\n            if i == M:\n                count += 1\n                break\n    return str(count)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = [None for _ in range(M)]\n    for i in range(M):\n        A[i] = set(map(int, stdin.readline().split()))\n\n    print(len(set.intersection(*A)))"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    pizza_with_index = {}\n    for i in range(m):\n        pizza = tuple(map(int, stdin.split(' ')))\n        pizza_with_index[pizza] = i\n    \n    num_liked = 0\n    for _ in range(n):\n        pizza_liked = []\n        for _ in range(1, m + 1):\n            pizza_liked.append(int(stdin))\n        if pizza_liked not in pizza_with_index:\n            num_liked += 1\n    \n    return num_liked"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split(\"\\n\")\n    M, N = map(int, N.split())\n    foods = [map(int, x.split()) for x in stdin.split(\"\\n\")[1:]]\n    cnt = {}\n    for i in range(N):\n        a = foods[i]\n        for j in range(len(a)):\n            if a[j] not in cnt:\n                cnt[a[j]] = 1\n            else:\n                cnt[a[j]] += 1\n    print(cnt)\n    return\n\nsolution(input())\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer as the answer to the problem.\"\"\"\n    N, M = [int(i) for i in stdin.split(' ')]\n    foods = []\n    for i in range(M):\n        foods.append([int(i) for i in stdin.split(' ')[i + 2:]])\n    # print(foods)\n    matrix = [[0 for i in range(len(foods))] for i in range(len(foods))]\n    for i in range(len(foods)):\n        for j in range(len(foods)):\n            matrix[i][j] = foods[i].count(foods[j][0])\n    # print(matrix)\n\n    answer = set()\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if j == i:\n                continue\n            if sum(matrix[j]) == M - 1:\n                answer.add(foods[i][0])\n\n    return len(answer)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(' '))\n    k = [int(x) for x in stdin.split('\\n')[1:]]\n    counter = 0\n    for i in range(m):\n        for j in range(m):\n            if k[i] == k[j]:\n                counter += 1\n    print(counter)"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    #stdin = stdin.read()\n    N, M, *inp = stdin.split('\\n')\n\n    N, M = int(N), int(M)\n    #kazu = [list(map(int, i.split())) for i in inp]\n    kazu = [[int(j) for j in i.split()] for i in inp]\n\n    res = 0\n    for i in range(M):\n        s = set()\n        for j in kazu:\n            if j[i] not in s:\n                res += 1\n                s.add(j[i])\n    return res\nprint(solution(stdin))"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = [0] * m\n    for i in range(n):\n        array[int(stdin.split()[i]) - 1] += 1\n    print(sum(array))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split(' '))\n    nums = [int(stdin.readline()) for _ in range(m)]\n    res = set(nums)\n    for num in res:\n        if nums.count(num)!= n:\n            return 0\n    return len(res)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k_n = []\n    for _ in range(n):\n        k_n.append(list(map(int, stdin.readline().split())))\n\n    ans = []\n    for food in range(m):\n        cnt = 0\n        for n, v in enumerate(k_n):\n            if food in v:\n                cnt += 1\n        if cnt == n:\n            ans.append(food)\n    return ans\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = 0\n    even_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return str(odd_count/n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    return str(2 / N)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return str(0.5)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return str(2 / N)"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    even_sum = N * (N + 1) / 2\n    odd_sum = N * (N + 1) * (N + 2) / 6\n    return str(odd_sum / even_sum)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(round(1/2,6))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"0.5\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate probability that a number is odd\"\"\"\n    n = int(stdin)\n    odds = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odds += 1\n    odds = odds / n\n    return str(odds)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    a = list()\n    for i in range(n):\n        a.append(stdin)\n    count = 0\n    for i in range(n):\n        x = a[i].split()\n        if int(x[1]) > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    test_set = []\n    for i in range(n):\n        test_set.append(list(map(int, stdin.readline().split(' '))))\n    honest_person = 0\n    for test in test_set:\n        if test[1] == 1:\n            honest_person += 1\n    return str(honest_person)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # create a list of lists for a dictionary of dictionaries\n    testimony = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    # add key and values to the dictionary\n    test_dict = dict()\n    for elem in testimony:\n        if elem[0] in test_dict:\n            test_dict[elem[0]][0] += 1\n            test_dict[elem[0]][1].append(elem[1])\n        else:\n            test_dict[elem[0]] = [1, [elem[1]]]\n        if elem[2] in test_dict:\n            test_dict[elem[2]][0] += 1\n            test_dict[elem[2]][1].append(elem[3])\n        else:\n            test_dict[elem[2]] = [1, [elem[3]]]\n    # create a list for the outputs\n    outputs = []\n    # for every key in the dictionary test_dict\n    for key in test_dict:\n        # set the counter for the number of honest people\n        counter = 0\n        # for every list in the value of the key\n        for elem in test_dict[key][1]:\n            # if the element is 1, the person is honest, so add one to the counter\n            if elem == 1:\n                counter += 1\n        # add the counter to the list\n        outputs.append(counter)\n    # return the maximum number of honest people\n    return str(max(outputs))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(int(N/2) if N % 2 == 0 else N//2)"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Not yet implemented.\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(count(stdin))"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin[0:K]\n    return result + '...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"\n    #Your code here\n    #return \"\"\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k: int = int(stdin.readline())\n    s: str = stdin.readline()\n\n    if len(s) <= k:\n        print(s)\n    else:\n        print(s[:k] + \"...\")\n\n    return solution\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split('\\n')\n    k = int(k)\n    s = s.lower()\n    if len(s) <= k:\n        return s\n    return s[0:k] + \"...\\\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\nnikoandsolstice\")\n    nikoand...\n    >>> solution(\"7\\nabracadabra\")\n    abracadabra\n    \"\"\"\n    if len(stdin) <= int(stdin[0]):\n        return stdin\n\n    return stdin[:int(stdin[0])] + \"...\\n\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:K] + \"...\\\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution prints the input string S without change, unless the length of the input string exceeds K.\n    In this case, it extracts the first K characters in S and appends... to the end of them.\n    \"\"\"\n    k, s = stdin.split(\"\\n\")\n    k = int(k)\n    if len(s) > k:\n        print(s[:k] + \"...<string was too long>\")\n    else:\n        print(s)\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:K] +...\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string_length = len(stdin)\n    k = int(stdin[0])\n    if string_length > k:\n        return stdin[0:k] + \"...\"\n    return stdin\n    pass"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + (\"es\" if stdin.endswith(\"s\") else \"s\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + (\"es\" if stdin[-1]!= \"s\" else \"s\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[:1]\n    if s == 'a':\n        return f\"apples\"\n    else:\n        return f\"{s}es\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"es\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    if len(answer) > 1:\n        if answer[len(answer) - 1] =='s':\n            answer = answer[: len(answer) - 1] + 'es'\n        else:\n            answer = answer +'s'\n    return answer\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s.endswith('e'):\n        return s +'s'\n    else:\n        return s + 'es'"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) > 2:\n        if S[-2:] == 'ch':\n            S += 'es'\n        elif S[-2:] =='sh':\n            S += 'es'\n        elif S[-2:] == 'x' or S[-2:] == 'z':\n            S += 'es'\n        else:\n            S +='s'\n    return S"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split(' ')]\n    d = [int(n) for n in stdin.split('\\n')[1:K + 1]]\n    s = [int(n) for n in stdin.split('\\n')[K + 1:]]\n    s.sort()\n    return sum(s[i] - s[i - 1] for i in range(1, len(s)))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.readline().split(' '))\n  snacks = [list(map(int, stdin.readline().split(' '))) for _ in range(K)]\n  snack = set(map(lambda x: x[1], snacks))\n  print(N - len(snack))\n  return ''\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of Snukes that have no snacks.\n    \"\"\"\n    # Input.\n    n, k = map(int, stdin.split())\n    snakes = dict()\n    for i in range(n):\n        snakes[i + 1] = set(map(int, stdin.split()[1:]))\n\n    # Get the number of Snukes that have no snacks.\n    count = 0\n    for i in range(k):\n        if len(snakes[i + 1]) == 0:\n            count += 1\n\n    # Return the answer.\n    return str(count)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = list(map(int, lines[0].split()))\n    snakes = []\n    for i in range(1, n + 1):\n        snakes.append(list(map(int, lines[i].split())))\n    snakes.sort(key=lambda x: x[0])\n    print(snakes)\n    return str(snakes[0][0])\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, k = [int(n) for n in stdin.readline().split()]\n    snacks = [int(n) for n in stdin.readline().split()]\n    snacks.sort()\n\n    # Answer\n    snakes = []\n    for i in range(n):\n        snakes.append(i + 1)\n\n    for i in range(k):\n        snakes.pop(snacks[i] - 1)\n\n    return str(len(snakes))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    snacks = list(map(int, stdin.split()))\n    snacks.sort()\n\n    res = 0\n    for i in range(len(snacks)):\n        if i < k:\n            res += snacks[i]\n        else:\n            break\n\n    return res\n\"\"\"\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of Snukes who will fall victim to Takahashi's\n    mishap.\n\n    Parameters\n    ----------\n    stdin : str\n        The input from STDIN, as a single string.\n\n    Returns\n    -------\n    str\n        The output to STDOUT, as a single string.\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    count = int(stdin[0])\n    k = int(stdin[1])\n    snake_ids = []\n    for i in range(2, 2 + count):\n        snake_ids.append(set(list(map(int, stdin[i].split()))))\n    snake_ids = {i: snake_ids[i] for i in range(len(snake_ids))}\n\n    # Find all snacks that are not in every snake\n    snakes_with_snacks = set(list(snake_ids.values())[0])\n    for snake_snacks in snake_ids.values():\n        for snack in snake_snacks:\n            if snack not in snakes_with_snacks:\n                snakes_with_snacks.add(snack)\n    snakes_with_snacks = list(snakes_with_snacks)\n\n    if len(snakes_with_snacks) == k:\n        return str(count)\n\n    snakes_with_snacks.sort()\n    # Create a dict that maps a Snack ID to a list of Snacks IDs that have it\n    snack_count_to_snakes = {}\n    for snack in snakes_with_snacks:\n        snack_count_to_snakes[snack] = []\n        for snake_snacks in snake_ids.values():\n            if snack in snake_snacks:\n                snack_count_to_snakes[snack].append(snake_snacks)\n        snack_count_to_snakes[snack] = set(snack_count_to_snakes[snack])\n\n    # Create dict that maps each Snack ID to a list of Snacks IDs that have the\n    # most Snacks that have it\n    snack_most_count = {}\n    for snack in snack_count_to_snakes.keys():\n        snack_most_count[snack] = len(snack_count_to_snakes[snack])\n\n    for snack in snack_most_count.keys():\n        for other_snack in snack_most_count.keys():\n            if snack!= other_snack:\n                snack_most_count[snack] = min(snack_most_count[snack],\n                                              snack_most_count[other_snack])\n                break\n\n    # Subtract the Snacks that have the most Snacks that have it from the\n    # Snacks that have no snacks\n    # (the Snacks with no snacks have the most Snacks that have them)\n    snacks_without_snacks = set(snakes_with_snacks)\n    for snack, count in snack_most_count.items():\n        for i in range(count):\n            snacks_without_snacks.remove(snack)\n    snacks_without_snacks = list(snacks_without_snacks)\n\n    return str(len(snacks_without_snacks))\n\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nd: list[int] = []\nn: int = 0\nk: int = 0\na: list[int] = []\n\nfor _ in range(int(sys.stdin.readline())):\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    d = [int(i) for i in sys.stdin.readline().split()]\n    a = [[int(i) for i in sys.stdin.readline().split()] for _ in range(k)]"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    S = list(S)\n    slime_count = len(S)\n    while True:\n        for i in range(slime_count):\n            if i == 0:\n                if S[i] == S[i + 1]:\n                    S[i] = S[i] + S[i + 1]\n                    del S[i + 1]\n                    slime_count = slime_count - 1\n                    break\n            elif i == slime_count - 1:\n                if S[i] == S[i - 1]:\n                    S[i] = S[i] + S[i - 1]\n                    del S[i - 1]\n                    slime_count = slime_count - 1\n                    break\n            else:\n                if S[i] == S[i + 1] and S[i] == S[i - 1]:\n                    S[i] = S[i] + S[i + 1]\n                    del S[i + 1]\n                    del S[i - 1]\n                    slime_count = slime_count - 2\n                    break\n        if S.count(S[0]) == slime_count:\n            break\n    return str(slime_count)"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin[0])\n    S: str = stdin[1]\n    C: str = ''\n    C_to_S = {S[0]: 1}\n    for i in range(1, N):\n        if S[i] == C:\n            C_to_S[S[i]] += 1\n        else:\n            C = S[i]\n            C_to_S[C] = 1\n        #print(C_to_S)\n    return sum([C_to_S[key] for key in C_to_S])"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution will take a string of integers and strings,\n    concatenate them, and return the final result.\n    \"\"\"\n    # Create a list of lists, each sub-list containing\n    # all of the integers and strings that come after\n    # the next integer.\n    arr = []\n    for x in stdin.split(\"\\n\"):\n        if not x:\n            continue\n        arr.append(x)\n    \n    # Join all of the sub-lists together.\n    arr = [\"\".join(x) for x in arr]\n    \n    # Remove empty strings\n    arr = [x for x in arr if x]\n    \n    # Iterate through the list of strings and turn them\n    # into integers.\n    arr = [int(x) for x in arr]\n    \n    # Join all the integers together.\n    joined = \"\".join([str(x) for x in arr])\n    \n    # Return the final result.\n    return joined\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    \n    if a == b:\n        return a + solution(stdin[3:])\n    else:\n        return a + solution(stdin[3:])\n    \n    \nprint(solution(stdin.split('\\n')[1:]))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  total_slimes = int(stdin.readline())\n  slimes = [chr(c) for c in range(97, 97 + total_slimes)]\n  while True:\n    try:\n      command = stdin.readline()\n    except EOFError:\n      break\n    command = command.split()\n    if command[0] == \"F\":\n      slimes = fuse(slimes, command[1], int(command[2]))\n    elif command[0] == \"P\":\n      slimes = push(slimes, command[1])\n    elif command[0] == \"D\":\n      slimes = pop(slimes, command[1])\n  return str(len(slimes))\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    slime = stdin[1]\n    count = 0\n    for i in range(0, length):\n        if i == 0:\n            if slime[i] == slime[i+1]:\n                count += 1\n                continue\n        elif i == length - 1:\n            if slime[i] == slime[i-1]:\n                count += 1\n                continue\n        else:\n            if slime[i] == slime[i-1] or slime[i] == slime[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    num_of_operation = 0\n    for i in range(N):\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            num_of_operation += 1\n        if a[i] % 3 == 0:\n            a[i] //= 3\n            num_of_operation += 1\n        else:\n            break\n    return str(num_of_operation)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    cnt = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 0 and A[i] % 3 == 0:\n                A[i] //= 2\n                A[(i + 1) % N] *= 3\n                A[(i + 2) % N] //= 2\n                cnt += 1\n                break\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(\" \")]\n    dp = [[0 for _ in range(3)] for _ in range(n)]\n\n    dp[0][0] = a[0]\n    dp[0][1] = 1\n    dp[0][2] = 1\n\n    for i in range(1, n):\n        dp[i][0] = max(a[i], dp[i - 1][0] * 3)\n        dp[i][1] = max(a[i], dp[i - 1][1] * 2, dp[i - 1][0] * 3)\n        dp[i][2] = max(a[i], dp[i - 1][2] * 3)\n\n    return str(max(dp[n - 1]))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = map(int, stdin.split())\n    ans = 0\n    for i in range(1, N + 1):\n        if seq[i - 1] % 2 == 0:\n            ans += seq[i - 1] // 2\n            seq[i - 1] = seq[i - 1] // 2\n        else:\n            ans += seq[i - 1] * 3\n            seq[i - 1] *= 3\n    return ans"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a)\n    res = 0\n    for i in range(n):\n        j = a[i]\n        while j % 2 == 0:\n            j //= 2\n            res += 1\n        while j % 3 == 0:\n            j //= 3\n            res += 1\n        if j > 1:\n            res += 1\n    return res\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    n = len(a)\n    num_operations = 0\n    \n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i] // 2\n            num_operations += 1\n        else:\n            if a[i] % 3!= 0:\n                a[i] = a[i] * 3\n                num_operations += 1\n            else:\n                a[i] //= 3\n                num_operations += 1\n    \n    return num_operations"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0:\n            count += 1\n            a[i] = a[i] // 2\n        if a[i] % 3 == 0:\n            a[i] = a[i] // 3\n            count += 1\n        while a[i] % 3 == 0:\n            count += 1\n            a[i] = a[i] // 3\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n, a = input().split()\n    a = [int(num) for num in a.split(' ')]\n    a.sort(reverse=True)\n    s = 0\n    for i in range(int(n)):\n        s += a[i]\n    for i in range(int(n)):\n        if a[i] % 2 == 0:\n            s += a[i]\n            a[i] = int(a[i] / 2)\n        else:\n            s += int(a[i] * 3)\n            a[i] = int(a[i] * 3)\n    print(s)\n    return ''"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    dp = [0] * (N+1)\n    dp[1] = 3 * A[0]\n    for i in range(2, N+1):\n        dp[i] = dp[i-1] + (dp[i-1]//2)*3\n    print(max(dp))\n    return \"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = [int(a_i) for a_i in stdin[1:].split()]\n    moves = 0\n\n    while True:\n        # divide a_i by 2\n        for i in range(len(a)):\n            if a[i] % 2 == 0:\n                a[i] = a[i] // 2\n                moves += 1\n                break\n        else:\n            break\n\n        # multiply a_i by 3\n        for i in range(len(a)):\n            if a[i] % 3 == 0:\n                a[i] = a[i] // 3\n                moves += 1\n                break\n        else:\n            break\n\n    return str(moves)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = (int(input()) for _ in range(4))\n    return str(max([A * 1 + B * 0, A * 0 + B * -1, A * -1 + B * 1]))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n    return a + b + c - k\n\n-----Example 3-----\nInput is given from Standard Input in the following format:\n3 2 3 1\n\n-----Sample Output-----\n6\n\"\"\"\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    n, m, q = [int(x) for x in stdin.split()]\n\n    return '%d' % (n + m + q)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return max\n\"\"\"\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input as integers\n    A, B, C, K = [int(x) for x in stdin.split(' ')]\n    result = 0\n    # Possible card numbers\n    card_numbers = [A, B, C]\n    # Possible card values\n    card_values = [-1, 0, 1]\n\n    # Sort card numbers from largest to smallest\n    card_numbers.sort(reverse=True)\n\n    # Iterate through cards, first picking the largest, then the next largest, and so on\n    for card_number in card_numbers:\n        # Get the number of cards picked\n        number_of_cards = int(K / card_number)\n        # Pick up the number_of_cards cards with the largest value\n        card_values = sorted(card_values, reverse=True)\n        for card_value in card_values:\n            for _ in range(number_of_cards):\n                K -= card_value\n                result += card_value\n\n    return str(result)\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = max(A, B, C)\n    return max_sum * K\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = list(map(int, stdin.split()))\n    print(max(K * A, K * B, K * C))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n    print(max(a + b, b + c, a + c) - min(a, b, c))\n    return ''\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x * 2 + y * 4 == 100:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 8\")\n    Yes\n    \"\"\"\n    x, y = map(int, stdin.split())\n    return \"Yes\" if x + y in [2 * i for i in range(1, 21)] else \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_cranes, num_turtles = [int(i) for i in stdin.split(' ')]\n    if num_cranes + num_turtles == sum(range(1, num_cranes+num_turtles+1)):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    animals = list(map(int, inputs[0].split(' ')))\n    legs = list(map(int, inputs[1].split(' ')))\n\n    turtle_count = 0\n    crane_count = 0\n    for i in range(len(legs)):\n        if legs[i] % 4 == 0:\n            turtle_count += 1\n        else:\n            crane_count += 1\n    if turtle_count * 2 == animals[0] and crane_count * 2 == animals[1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if x * 2 + y * 4 == x + y * 2 else \"No\"\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    count = 0\n    for a in range(1, x + 1):\n        for b in range(1, y + 1):\n            if a % 2 == 0 and b % 2 == 1 or a % 2 == 1 and b % 2 == 0:\n                count += 1\n    if count == x * y:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(i) for i in stdin.split(' ')]\n\n    if X == 1 and Y == 1:\n        return \"Yes\"\n    elif X == 1 and Y == 2:\n        return \"No\"\n    elif X == 2 and Y == 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    X, Y = sorted([X, Y])\n    if X * 4 < Y * 2:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 8\")\n    Yes\n    \"\"\"\n    x, y = map(int, stdin.split())\n    if y % 2 == 0:\n        return \"Yes\" if x % 2 == 0 else \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return \"Yes\" if (x + y) % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 2\\n1 3\\n2 3\")\n    '2'\n    \"\"\"\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    links = {}\n    for i in range(m):\n        a, b = map(int, stdin[2+2*i].split())\n        if a in links:\n            links[a].add(b)\n        else:\n            links[a] = {b}\n        if b in links:\n            links[b].add(a)\n        else:\n            links[b] = {a}\n    \n    visited = set()\n    def dfs(v, path=[]):\n        if v in visited:\n            return\n        visited.add(v)\n        for u in links[v]:\n            path.append(u)\n            dfs(u, path)\n            path.pop()\n    \n    dfs(1)\n    return len(visited) - 1\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split('\\n')[:2]]\n    g = [[] for _ in range(N)]\n    for _ in range(M):\n        i, j = [int(x) for x in stdin.split('\\n')[_].split(' ')]\n        i, j = i - 1, j - 1\n        g[i].append(j)\n        g[j].append(i)\n    \n    # initial state\n    return '0'"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    adj_list = {i: set() for i in range(1, N+1)}\n    for _ in range(M):\n        a, b = map(int, stdin.split(' '))\n        adj_list[a].add(b)\n        adj_list[b].add(a)\n    return dfs(adj_list, 1)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, m = list(map(int, stdin.split(' ')))\n  edges = {(int(a), int(b)) for _ in range(m) for a, b in map(int, stdin.split())}\n  print(len(combinations(range(1, n + 1), n - 1)))\n  \n  return ''\n  \n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    edge_list = list()\n    for i in range(M):\n        edge_list.append(list(map(int, stdin.readline().split())))\n    dist = [-1] * N\n    dist[0] = 0\n    queue = [0]\n    while queue:\n        node = queue.pop()\n        for to, cost in edge_list[node]:\n            if dist[to] == -1:\n                dist[to] = dist[node] + 1\n                queue.append(to)\n    return sum(dist)\n\n\nsolution()"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    G = [set() for _ in range(N)]\n    for _ in range(M):\n        u, v = map(int, stdin.split(' '))\n        G[u].add(v)\n        G[v].add(u)\n\n    visited = [False] * N\n    counter = 0\n    def dfs(node):\n        nonlocal counter\n        visited[node] = True\n        for neighbor in G[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n        counter += 1\n\n    dfs(1)\n    print(counter)\n\n    return ''\n\"\"\"\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = {}\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        graph[a] = graph.get(a, []) + [b]\n        graph[b] = graph.get(b, []) + [a]\n\n    unique_paths = 0\n    for v in range(1, N + 1):\n        if v not in graph:\n            unique_paths += 1\n\n    return str(unique_paths)\n\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads in input and computes solution.\n    \"\"\"\n    n, l = [int(x) for x in stdin.split()]\n    rem_n = n - 1\n    rem_l = l + rem_n\n    \n    return rem_l * rem_n\n    pass\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You have N apples, called Apple 1, Apple 2, Apple 3,..., Apple N. The flavor of Apple i is L+i-1, which can be negative.\nYou can make an apple pie using one or more of the apples. The flavor of the apple pie will be the sum of the flavors of the apples used.\nYou planned to make an apple pie using all of the apples, but being hungry tempts you to eat one of them, which can no longer be used to make the apple pie.\nYou want to make an apple pie that is as similar as possible to the one that you planned to make. Thus, you will choose the apple to eat so that the flavor of the apple pie made of the remaining N-1 apples will have the smallest possible absolute difference from the flavor of the apple pie made of all the N apples.\nFind the flavor of the apple pie made of the remaining N-1 apples when you choose the apple to eat as above.\nWe can prove that this value is uniquely determined.\"\"\"\n    N, L = map(int, stdin.split())\n    apples = list(map(lambda x: int(x) + L - 1, stdin.split()))\n    apples.sort()\n    print(sum(apples[:N - 1]))\n\nsolution(input())\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, l = map(int, stdin.split())\n\n    # Calculate minimum of absolute difference\n    min_diff = None\n    for i in range(n):\n        diff = l + i - 1\n\n        if min_diff is None or abs(diff) < min_diff:\n            min_diff = abs(diff)\n    \n    # Return minimum of absolute difference\n    return str(min_diff)"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    max_num = max(L - 1, 0)\n    min_num = min(L, N)\n    return str(max_num + sum(list(range(max_num, min_num, -1))))"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # set input\n    inp = stdin.split(\"\\n\")\n    N = int(inp[0])\n    L = int(inp[1])\n\n    # set output\n    apples = [x for x in range(L, -1, -1)]\n    if N == 1:\n        print(L)\n        return\n    else:\n        min_diff = float(\"inf\")\n        for apple in apples:\n            apple_sum = L + apple - 1\n            if N == 2:\n                print(apple_sum)\n                return\n            else:\n                diff = abs(apple_sum - sum(apples[1:]))\n                if diff < min_diff:\n                    min_diff = diff\n        print(min_diff)\n        return\n\nsolution(stdin)\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the flavor of the apple pie made of the remaining N-1 apples when\n    you optimally choose the apple to eat.\n    '''\n    N, L = [int(x) for x in stdin.split('\\n')[0].split()]\n    return str(sum(sorted([int(x) for x in stdin.split('\\n')[1].split()][1:]))+L)\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solve(stdin))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a = stdin.split()\n    n = int(a[0])\n    l = int(a[1])\n    e = []\n    p = []\n    for i in range(n):\n        e.append(l+i-1)\n    for i in range(len(e)):\n        for j in range(i, len(e)):\n            if e[j] - e[i] < 0:\n                p.append(e[i])\n    return str(min(p))\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    N, L = map(int, stdin.split(' '))\n    s = set()\n    for i in range(1, N+1):\n        s.add(L + i - 1)\n    s = list(s)\n    s.sort()\n    print(s[0])\n\nsolution(input())"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split(\" \"))\n    flavours = [int(x) for x in stdin.split(\" \")]\n\n    return str(sum(flavours))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the sum of all numbers among the first N terms of the FizzBuzz sequence.\"\"\"\n    sum_of_numbers = 0\n    for i in range(int(stdin)):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_of_numbers += i\n        elif i % 3 == 0:\n            sum_of_numbers += i\n        elif i % 5 == 0:\n            sum_of_numbers += i\n        else:\n            sum_of_numbers += i\n    return sum_of_numbers\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"15\")\n    60\n    >>> solution(\"15\\n\")\n    60\n    \"\"\"\n    N = int(stdin)\n    return sum(\n        i\n        for i in range(1, N + 1)\n        if i % 3!= 0 and i % 5!= 0 or i % 3 == 0 and i % 5 == 0\n    )\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    result = 0\n    for i in range(1, int(N) + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += i\n        elif i % 3 == 0:\n            result += i\n        elif i % 5 == 0:\n            result += i\n    return str(result)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizzBuzz = []\n    fizzBuzz.append(\"1\")\n    fizzBuzz.append(\"2\")\n    fizzBuzz.append(\"Fizz\")\n    fizzBuzz.append(\"4\")\n    fizzBuzz.append(\"Buzz\")\n    for i in range(3, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzBuzz.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzBuzz.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzBuzz.append(\"Buzz\")\n        else:\n            fizzBuzz.append(str(i))\n    fizzBuzz.pop()\n    return fizzBuzz\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the sum of numbers between 1 and N\"\"\"\n    # initializes variables\n    n = int(stdin)\n    fizz, buzz, fizz_buzz, fizz_count, buzz_count = 1, 1, 1, 1, 1\n    nums = []\n\n    # loops through the numbers to add to nums\n    for i in range(n):\n        if fizz_count == n and buzz_count == n:\n            break\n        nums.append(fizz_count)\n        nums.append(buzz_count)\n        if fizz_count == n and buzz_count == n:\n            break\n        if fizz_count == n:\n            fizz_count = 0\n        elif fizz_count!= n:\n            fizz_count += 1\n        if buzz_count == n:\n            buzz_count = 0\n        elif buzz_count!= n:\n            buzz_count += 1\n    \n    # prints the answer\n    print(sum(nums))"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return sum(find_fizzbuzz(int(stdin))\n\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_cases = int(stdin)\n    for i in range(number_of_test_cases):\n        number_of_fizzbuzzes = int(stdin)\n        output_string = ''\n        for j in range(1, number_of_fizzbuzzes + 1):\n            if j % 3 == 0 and j % 5 == 0:\n                output_string += 'FizzBuzz'\n            elif j % 3 == 0:\n                output_string += 'Fizz'\n            elif j % 5 == 0:\n                output_string += 'Buzz'\n            else:\n                output_string += str(j)\n            if j!= number_of_fizzbuzzes:\n                output_string +=''\n        print(output_string)\n    return output_string\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    N: int = int(stdin)\n    \n    # outputs\n    sum_of_fizzbuzz: int = 0\n    \n    # iterate\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_of_fizzbuzz += i\n        elif i % 3 == 0:\n            sum_of_fizzbuzz += i\n        elif i % 5 == 0:\n            sum_of_fizzbuzz += i\n            \n    # return result\n    return sum_of_fizzbuzz"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    count = 0\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += i\n        elif i % 3 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 2\n        else:\n            count += i\n    return count"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = stdin.split(' ')\n    x, n = int(x), int(n)\n    arr = [int(item) for item in stdin.split(' ')[1:]]\n    arr.sort()\n    arr = [x for x in arr if x <= x + 1 and x >= x - 1]\n    arr = arr[:n]\n    minimum = 100\n    for i in arr:\n        if abs(x - i) < minimum:\n            minimum = abs(x - i)\n            out = i\n    return str(out)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split('\\n')[0].split())\n    p = list(map(int, stdin.split('\\n')[1].split()))\n    ans = 0\n    for n in p:\n        if n > abs(X):\n            continue\n        elif n == abs(X):\n            return str(X)\n        else:\n            if abs(X) - n < abs(X - ans):\n                ans = n\n            elif abs(X) - n == abs(X - ans):\n                if X > ans:\n                    ans = n\n    return str(ans)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    s = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    s.sort()\n    min_diff = x\n    for i, n in enumerate(s):\n        if n < x:\n            break\n        else:\n            min_diff = min(min_diff, abs(x - n))\n    return str(s[i] + min_diff)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split(\" \"))\n    p = list(map(int, stdin.split(\" \")[1:]))\n    return min(p, key=lambda i: abs(x - i))"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum value in a list of integers not included in the list of integers.\n    \n    Parameters:\n    stdin (str): String containing the input.\n    \n    Returns:\n    str: The smallest integer\n    '''\n    # Split the input.\n    x, n = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    seq = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    # Find the closest number to x that is not in seq.\n    seq.sort()\n    if x > seq[-1]:\n        return seq[-1]\n    elif x < seq[0]:\n        return seq[0]\n    else:\n        return min(i for i in seq if i < x)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 5\\n4 7 10 6 5')\n    8\n    \"\"\"\n    X, N = [int(num) for num in stdin.split('\\n')[:2]]\n    P = [int(num) for num in stdin.split('\\n')[2:]]\n\n    A = set(P)\n    X_minus_A = [num for num in range(1, X) if num not in A]\n\n    diff = [abs(num - X) for num in X_minus_A]\n    idx = diff.index(min(diff))\n\n    return X_minus_A[idx]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    _, n = stdin.split()\n    n = int(n)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    out = arr[0]\n    for i in arr[1:]:\n        if abs(i - int(stdin)) < abs(out - int(stdin)):\n            out = i\n    return str(out)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    nums = list(map(int, stdin.split()[1:]))\n    nums = sorted(nums)\n    diff = abs(nums[0] - x)\n    res = nums[0]\n    for num in nums[1:]:\n        if abs(num - x) < diff:\n            res = num\n            diff = abs(num - x)\n    return str(res)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split('\\n')[0].split())\n    L = sorted(list(map(int, stdin.split('\\n')[1].split())))\n    i = 0\n    j = len(L)-1\n    answer = float('inf')\n    while i <= j:\n        middle = (i+j)//2\n        if abs(L[middle] - x) < answer:\n            answer = abs(L[middle] - x)\n            solution = L[middle]\n        if L[middle] > x:\n            j = middle - 1\n        else:\n            i = middle + 1\n    return str(solution)"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n    p = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    p.sort()\n    s = set(p)\n    for i in range(n - 1, -1, -1):\n        if x - p[i] in s:\n            return str(p[i])\n    return \"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n    return str(max(0, H - h + 1) * max(0, W - w + 1))\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3 2\\n2 1')\n    1\n    '''\n   ..."
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(count)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (H, W) = map(int, stdin.readline().split(' '))\n    (h, w) = map(int, stdin.readline().split(' '))\n    return H * (W - w + 1) + (h - 1) * (W + 1)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # H, W = map(int, stdin.split('\\n')[:2])\n    # L = [int(stdin.split('\\n')[2]) for _ in range(H)]\n    # L = [int(stdin.split('\\n')[i]) for i in range(3, 3 + H)]\n    H, W = map(int, stdin.split('\\n')[0].split(' '))\n    L = [int(stdin.split('\\n')[1]) for _ in range(H)]\n    L = [int(stdin.split('\\n')[i]) for i in range(2, 2 + H)]\n    print(sum(L))"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[:2])\n    return str(a * b - max(a, b) + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # -----Input-----\n    h, w = map(int, stdin.split())\n\n    # -----Constant-----\n    H = h + 1\n    W = w + 1\n\n    # -----Computation-----\n    row_sum = [0] * H\n    col_sum = [0] * W\n    for row in range(h):\n        row_sum[row + 1] = sum(list(map(int, stdin.split()[row * W:(row + 1) * W])))\n    for col in range(w):\n        col_sum[col + 1] = sum(list(map(int, stdin.split()[col::W])))\n    count = 0\n    for row in range(h):\n        for col in range(w):\n            if row_sum[row + 1] + col_sum[col + 1] == H * W:\n                count += 1\n    # -----Output-----\n    print(count)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line_count = int(stdin.readline())\n    col_count = int(stdin.readline())\n    if line_count == 1:\n        return str(col_count)\n    elif col_count == 1:\n        return str(line_count)\n    else:\n        return str(line_count * col_count)\n\nsolution(stdin)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().split())\n    c = stdin.readline()\n    return str(h * w - int(c))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split(' '))\n    return str(h * w - (h + w - 1))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    arr = [int(s) for s in stdin.split()]\n    arr.sort()\n    print(arr)\n    for i in range(n):\n        if arr[i] > k:\n            return str(k)\n\n        if k == 1:\n            return str(k)\n\n        k -= 1\n    return str(-1)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    seq = list(map(int, stdin.split(' ')))\n    count = 0\n    for item in seq:\n        if item <= k:\n            count += 1\n    if count == k:\n        return str(k)\n    return '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def number_of_less_equal_than_x(x: int, numbers: list[int]) -> int:\n        return len([num for num in numbers if num <= x])\n    n, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    answer = number_of_less_equal_than_x(k, numbers)\n    if answer == 0:\n        print(-1)\n    else:\n        print(answer)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    N, K = line[0].split()\n    arr = line[1].split()\n    for x in range(1, 10 ** 9 + 1):\n        count = 0\n        for num in arr:\n            if int(num) <= x:\n                count += 1\n            if count == int(K):\n                return str(x)\n    return \"-1\"\n\n----\n\n\n---\n\nimport collections\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = -1\n    for i in range(n):\n        if a[i] <= x:\n            continue\n        if a.count(a[i]) < k:\n            x = a[i]\n        if x == -1:\n            return '-1'\n    return str(x)\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    k_in_arr = 0\n    for i in range(n):\n        if arr[i] <= k:\n            k_in_arr += 1\n\n    if k_in_arr >= k:\n        return str(k)\n    return '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    x = [int(x) for x in stdin.split(' ')]\n    x.sort()\n    for x in range(n):\n        if x < k:\n            print(x + 1)\n        else:\n            break\n        return 0\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a[-k]) if len(a) > k else print(-1)\n    return a\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 4\\n3 7 5 1 10 3 20\\n\")\n    '6'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()[1:]))\n    for i in range(1, 10 ** 9 + 1):\n        if k <= sum(1 for x in arr if x <= i):\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n\n    if k == 0:\n        return '-1'\n\n    i = 0\n    j = 0\n    res = 0\n    while i < n and j < n:\n        if a[j] <= res:\n            j += 1\n        elif a[j] > res:\n            i += 1\n            j += 1\n            res = a[j]\n\n    if i == n:\n        return '-1'\n\n    return res\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split(\"\\n\")[:2]))\n    n, m = l[0], l[1]\n    if n * m <= 2:\n        return \"-1\"\n    if n <= 2:\n        return \"1\"\n    if n * m <= 4:\n        return \"2\"\n\n    l = []\n    for i in stdin.split(\"\\n\")[2:]:\n        l.append(list(i))\n\n    l = [list(i) for i in l]\n    # print(l)\n\n    def calc_sum(row, col, size):\n        if size == 1:\n            return sum([0 if i[col] == '.' else 1 for i in l])\n        res = 0\n        for i in range(size):\n            res += sum([0 if i[col + j] == '.' else 1 for j in range(size)])\n        for j in range(size):\n            res += sum([0 if l[row + k][col + j] == '.' else 1 for k in range(size)])\n        for k in range(size):\n            res += sum([0 if l[row + k][col + size - 1 - j] == '.' else 1 for j in range(size)])\n        for j in range(size):\n            res += sum([0 if l[row + size - 1 - k][col + j] == '.' else 1 for k in range(size)])\n        return res\n\n    def dfs(row, col, size, res):\n        if row + size <= n and col + size <= m:\n            res.append((row, col, size))\n        else:\n            return res\n        if size == 1:\n            return res\n        for i in range(size):\n            for j in range(size):\n                if i == 0 or j == 0:\n                    if l[row + i][col + j]!= '*':\n                        dfs(row, col, size // 2, res)\n                else:\n                    if calc_sum(row, col, size) == 0:\n                        if l[row + i][col + j]!= '*':\n                            dfs(row, col, size // 2, res)\n\n        return res\n\n    def check_dfs(row, col, size, res):\n        if row + size <= n and col + size <= m:\n            res.append((row, col, size))\n        else:\n            return res\n        for i in range(size):\n            for j in range(size):\n                if i == 0 or j == 0:\n                    if l[row + i][col + j]!= '*':\n                        check_dfs(row, col, size // 2, res)\n                else:\n                    if calc_sum(row, col, size) == 0:\n                        if l[row + i][col + j]!= '*':\n                            check_dfs(row, col, size // 2, res)\n\n        return res\n\n    size = 1\n    res = dfs(0, 0, size, [])\n    res = list(set(res))\n    if len(res) == 0:\n        return \"2\"\n    if len(res) == 1:\n        return \"3\"\n\n    ans = []\n    for i in res:\n        ans.append(str(i[0] + 1) + \" \" + str(i[1] + 1) + \" \" + str(i[2]))\n    return \" \".join(ans)\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    r = [[x for x in y] for y in [stdin.split('\\n')]]\n    r = [x for x in r if x]\n    return str(recursion(n, m, r))\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\")\n    3\n    >>> solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\")\n    -1\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    -1\n    >>> solution(\"1 1\\n1\")\n    0\n    \"\"\"\n\n    lines = stdin.splitlines()\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    if len(lines)!= n + 1:\n        raise ValueError(\"invalid grid\")\n\n    if n == 1 and m == 1:\n        return 0\n\n    grid = []\n    for line in lines[1:]:\n        grid.append(list(line))\n\n    stars = []\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == \"*\":\n                stars.append((r, c))\n\n    if len(stars) == 0:\n        return -1\n\n    def is_valid(s):\n        for star in stars:\n            for other_star in stars:\n                if (\n                    (star[0] == other_star[0] and abs(star[1] - other_star[1]) <= s)\n                    or (star[1] == other_star[1] and abs(star[0] - other_star[0]) <= s)\n                ):\n                    return False\n\n        return True\n\n    left = 1\n    right = max(stars, key=lambda x: x[1])[1] + 1\n    while left < right:\n        k = (left + right) // 2\n        if is_valid(k):\n            left = k + 1\n        else:\n            right = k\n\n    return left\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns 0 if impossible\n    Returns 1 if possible\n    '''\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_row(row: int, col: int, length: int) -> bool:\n        for i in range(col, col + length):\n            if grid[row][i] == \"*\":\n                return False\n        return True\n\n    def check_col(row: int, col: int, length: int) -> bool:\n        for i in range(row, row + length):\n            if grid[i][col] == \"*\":\n                return False\n        return True\n\n    def check_stars(row: int, col: int, length: int) -> bool:\n        if row + length >= len(grid) or col + length >= len(grid[0]):\n            return False\n\n        for i in range(row, row + length):\n            for j in range(col, col + length):\n                if grid[i][j] == \"*\":\n                    return False\n        return True\n\n    def dfs(row: int, col: int, length: int) -> None:\n        if row + length >= len(grid) or col + length >= len(grid[0]):\n            return\n\n        if check_row(row, col, length) and check_col(row, col, length) and check_stars(row, col, length):\n            if length == 1:\n                stars.append((row, col))\n            else:\n                for i in range(row, row + length):\n                    for j in range(col, col + length):\n                        if grid[i][j] == \"*\":\n                            grid[i][j] = \".\"\n                stars.append((row, col, length))\n            return\n\n        for i in range(row, row + length):\n            for j in range(col, col + length):\n                if grid[i][j] == \"*\":\n                    grid[i][j] = \".\"\n                    dfs(i, j, length // 2)\n                    grid[i][j] = \"*\"\n\n    stars = []\n    grid = []\n\n    for line in stdin.splitlines():\n        grid.append(list(line))\n\n    dfs(0, 0, len(grid))\n\n    if len(stars) == 0:\n        return \"-1\"\n\n    stars.sort(key=lambda star: star[0] * len(grid[0]) + star[1])\n\n    stars = [str(star[0] + 1) + \" \" + str(star[1] + 1) + \" \" + str(star[2]) for star in stars]\n\n    return \"\\n\".join(stars)\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[j for j in i] for i in stdin.split('\\n')]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                k += 1\n    if k > n * m:\n        return \"-1\"\n    if k == 0:\n        return \"0\"\n    k -= 1\n    if k > 0:\n        c = []\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == '*':\n                    c.append((i, j))\n        ans = []\n        for i in c:\n            ans.append(i[0])\n            ans.append(i[1])\n        ans.sort()\n        ans.append(n - 1)\n        ans.append(m - 1)\n        # print(ans)\n        for i in range(len(ans) - 1):\n            if ans[i + 1] - ans[i]!= 1:\n                return \"-\" + str(k)\n        k -= 1\n        if k > 0:\n            ans = []\n            for i in range(n):\n                for j in range(m):\n                    if a[i][j] == '*':\n                        ans.append(i)\n                        ans.append(j)\n            ans.sort()\n            ans.append(n - 1)\n            ans.append(m - 1)\n            # print(ans)\n            for i in range(len(ans) - 1):\n                if ans[i + 1] - ans[i]!= 1:\n                    return \"-\" + str(k)\n            k -= 1\n            if k > 0:\n                ans = []\n                for i in range(n):\n                    for j in range(m):\n                        if a[i][j] == '*':\n                            ans.append(i)\n                            ans.append(j)\n                ans.sort()\n                ans.append(n - 1)\n                ans.append(m - 1)\n                # print(ans)\n                for i in range(len(ans) - 1):\n                    if ans[i + 1] - ans[i]!= 1:\n                        return \"-\" + str(k)\n                k -= 1\n            if k > 0:\n                return \"-\" + str(k)\n    return str(k)\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    good_string = 'good'\n    bad_string = 'bad'\n    length = len(s)\n\n    count_good = 0\n    count_bad = 0\n\n    for c in s:\n        if good_string.find(c) == -1:\n            count_bad += 1\n            count_good += 1\n        elif bad_string.find(c) == -1:\n            count_bad += 1\n\n    if length % 2 == 1:\n        count_bad -= 1\n\n    if count_bad >= count_good:\n        print(count_good)\n        print('good')\n    else:\n        print(count_bad)\n        print('bad')"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    good_str = stdin[0:len(stdin)//2]\n    res = len(stdin) - len(good_str)\n    return str(res) + stdin[len(stdin)//2:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    good_string_len = stdin\n    bad_string = stdin\n    good_string = stdin\n\n    while len(good_string)!= 0:\n        if bad_string.find(good_string[0])!= -1:\n            bad_string = bad_string.replace(good_string[0], \"\")\n            good_string = good_string[1:]\n\n        else:\n            good_string = good_string[1:]\n\n    return bad_string\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"a\", \"\")\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    cnt = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                break\n        else:\n            cnt += 1\n    return n - cnt\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # The string is good if it has even length and every letter is the same as the letter in the previous position\n    # If the string is bad, the first character is the same as the last character\n    # If the string is good, keep removing one character at a time until we hit a bad string\n    # Then we remove the next character and repeat until the string is good\n    good = False\n    bad = False\n    if len(stdin) % 2 == 0:\n        good = True\n    else:\n        bad = True\n    while stdin[0] == stdin[-1]:\n        if bad:\n            stdin = stdin[1:]\n            bad = False\n        elif good:\n            stdin = stdin[:-1]\n            good = False\n        elif bad:\n            stdin = stdin[:-1]\n            bad = False\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    k = len(stdin)\n    odd = set()\n    prev = stdin[0]\n    for i in stdin[1:]:\n        if prev!= i:\n            odd.add(i)\n        prev = i\n    stdin = list(stdin)\n    for i in odd:\n        stdin[stdin.index(i)] = ''\n    stdin = ''.join(stdin)\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(len(stdin)):\n        if stdin[i]!= stdin[i+1] and stdin[i]!= stdin[i-1]:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\")\n    'YES\\n10100'\n    >>> solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\")\n    'NO'\n    >>> solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n5 4\")\n    'NO'\n    >>> solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n5 4\")\n    'YES\\n10100'\n    \"\"\"\n   ...\n======="
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return ''\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print('YES')\n    print(0b111011111)\n    return\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"YES\\n10100\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    intervals = [[b, c] for a, b, c in sorted(segments, key=lambda x: x[1])]\n    segments = [intervals[0]]\n    for b, c in intervals[1:]:\n        if segments[-1][1] <= b:\n            segments.append([b, c])\n        else:\n            segments[-1][1] = max(segments[-1][1], c)\n    print(len(segments))\n    print(*(a for a, b in segments if a!= b))\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n    return stdout\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = [int(x) for x in stdin.split('\\n')]\n    n, m = input_values[:2]\n    input_values = input_values[2:]\n\n    segments = []\n    for _ in range(n):\n        start, end = input_values[:2]\n        segments.append((start, end))\n        input_values = input_values[2:]\n\n    all_segments = set()\n    for _, end in segments:\n        all_segments.add((1, end))\n        all_segments.add((end, m))\n\n    points = [x for x in range(1, m + 1)]\n    for start, end in all_segments:\n        points = [x for x in points if x not in range(start, end + 1)]\n\n    print(len(points))\n    print(' '.join(map(str, points)))\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    segments = [list(map(int, line.split())) for line in lines[:-1]]\n\n    n = segments[0][0]\n    m = segments[0][1]\n    count = 0\n    d = {i: set() for i in range(n)}\n\n    for segment in segments:\n        for i in range(segment[0], segment[1] + 1):\n            d[segment[0]].add(i)\n\n    for i in range(1, m + 1):\n        if i not in d[1]:\n            count += 1\n\n    return str(count) + '\\n' +''.join(map(str, d[1]))\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, m = list(map(int, input[0].split()))\n    segments = []\n    for i in range(n):\n        l, r = list(map(int, input[i+1].split()))\n        segments.append([l, r])\n    segments.sort(key=lambda x: x[0])\n    count = 0\n    res = []\n    for i in range(m-1):\n        if segments[i][1] > segments[i+1][0]:\n            count += 1\n    print(count)\n    print(\" \".join(list(map(str, res))))\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    #your code here\n    pass"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a,b,c,d=list(map(int,stdin.split()))\n    ans=0\n    for i in range(a,b+1):\n        if i%c==0 or i%d==0:\n            continue\n        else:\n            ans+=1\n    return ans\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = stdin.split()\n    A, B, C, D = int(input_numbers[0]), int(input_numbers[1]), int(input_numbers[2]), int(input_numbers[3])\n\n    count = 0\n    for num in range(A, B+1):\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    res = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    count = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return count"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def sieve(n: int):\n        prime = [True for i in range(n + 1)]\n        p = 2\n        while p * p <= n:\n            if prime[p]:\n                for i in range(p * p, n + 1, p):\n                    prime[i] = False\n            p += 1\n\n        sieve = set()\n        for i, isprime in enumerate(prime):\n            if isprime:\n                sieve.add(i)\n        return sieve\n\n    def primeFactors(n: int):\n        prime = sieve(n)\n        primeFactors = set()\n        for i in range(2, n + 1):\n            if i in prime:\n                primeFactors.add(i)\n                while i % 2 == 0:\n                    primeFactors.add(2)\n                    i /= 2\n\n                while i % 3 == 0:\n                    primeFactors.add(3)\n                    i /= 3\n\n                while i % 5 == 0:\n                    primeFactors.add(5)\n                    i /= 5\n\n                while i % 7 == 0:\n                    primeFactors.add(7)\n                    i /= 7\n\n                if i!= 1:\n                    primeFactors.add(i)\n\n        return primeFactors\n\n    def commonFactors(a: int, b: int):\n        aFactors = set(primeFactors(a))\n        bFactors = set(primeFactors(b))\n        common = aFactors & bFactors\n        return common\n\n    a, b, c, d = map(int, stdin.split())\n    return sum(commonFactors(a, b) == set() and commonFactors(a, d) == set() and commonFactors(b, c) == set() and commonFactors(b, d) == set())\n\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    if A > B:\n        A, B = B, A\n    div_count = 0\n    for num in range(A, B + 1):\n        if num % C!= 0 and num % D!= 0:\n            div_count += 1\n    return div_count\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split(' ')]\n    result = 0\n    for n in range(a, b+1):\n        if n % c == 0 or n % d == 0:\n            continue\n        result += 1\n    return result"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    count = 0\n    for n in range(A, B + 1):\n        if n % C!= 0 and n % D!= 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 9 == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    result = sum([int(x) for x in str(n)])\n    print('Yes' if result % 9 == 0 else 'No')\n    return ''"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(list(map(int, stdin))) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum([int(n) for n in stdin]) % 9 == 0 else 'No'\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(map(int, stdin)) % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum([int(c) for c in stdin]) % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds whether a number is a multiple of 9\n\n    Args:\n        stdin (str): input in string form\n\n    Returns:\n        str: output in string form\n    \"\"\"\n    return \"Yes\" if int(stdin) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"123456789\")\n    Yes\n    \"\"\"\n    number = int(stdin)\n    while number > 0:\n        if number % 9 == 0:\n            return \"Yes\"\n        number = number // 10\n\n    return \"No\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    while x * 9 <= n:\n        n -= (x * 9)\n        x += 1\n    return str(x - 1)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    if n % 9 == 0:\n        return 1\n    elif n % 36 == 0:\n        return 2\n    elif n % (36 ** 2):\n        return 2\n    else:\n        return 3"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    target_yen = int(stdin)\n    max_pow = 0\n    min_pow = 0\n    count = 0\n    while max_pow < target_yen:\n        min_pow += 1\n        max_pow += min_pow * 9\n    max_pow -= min_pow * 9\n    max_pow -= 1\n    count += min_pow\n    min_pow += 1\n    while max_pow > target_yen:\n        max_pow -= min_pow * 9\n        max_pow -= 1\n        count += 1\n    return str(count)\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cnt = 0\n    for i in range(1, N + 1):\n        if i % 9 == 0:\n            cnt += i // 9\n        elif i % 6 == 0:\n            cnt += i // 6\n        elif i % 2 == 0:\n            cnt += i // 2\n        else:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 1\n    while True:\n        tmp = pow(6, x)\n        if tmp * 9 >= N:\n            return x + 1\n        x += 1"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    counter = 0\n    while N > 0:\n        if N < 9:\n            counter += N\n            break\n        counter += N % 9\n        N //= 9\n        counter += N % 6\n        N //= 6\n        counter += N\n    return str(counter)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N!= 0:\n        if N >= 9:\n            N -= 9\n            count += 1\n        elif N >= 6:\n            N -= 6\n            count += 1\n        elif N >= 1:\n            N -= 1\n            count += 1\n        else:\n            break\n    return count\n\"\"\"\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a string from standard input and returns a string containing the number of operations required to withdraw exactly n yen.\"\"\"\n    n = int(stdin)\n    operations = 0\n    for i in range(int(sqrt(n)), 0, -1):\n        if n % i == 0:\n            operations += (n // i) - 1\n            break\n    return str(operations)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.read())\n    count = 0\n    while N > 1:\n        N -= 6 ** count\n        count += 1\n    print(count)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n, m = 1, 1\n    while a > b:\n        n += 1\n        a -= n**2\n        m += 1\n        b -= m**2\n    return str(n + m)\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(stdin.split())\n    if A[0] == A[1]:\n        return 'Yes'\n    if A[0] == A[1][::-1]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # your solution here\n  s = stdin.split(\"\\n\")[0]\n  t = stdin.split(\"\\n\")[1]\n  if len(s)!= len(t):\n    return \"No\"\n  s = s + s\n  if s == t:\n    return \"Yes\"\n  return \"No\"\n  \n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    if s == t:\n        return \"Yes\"\n\n    new_s = s[::-1]\n    if new_s == t:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s1, s2 = s[0], s[1]\n    if s1 == s2[::-1]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin[::-1]\n\n    if s == t:\n        print('Yes')\n    else:\n        print('No')\n\nsolution(input())\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if S == T:\n        return \"Yes\"\n    elif len(S)!= len(T):\n        return \"No\"\n\n    result = \"\"\n\n    for i in range(len(S)):\n        result += S[len(S) - 1 - i]\n\n    if result == T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    if S == T:\n        return \"Yes\"\n    if len(S)!= len(T):\n        return \"No\"\n    \n    for i in range(len(S)):\n        S = S[-1] + S[:len(S)-1]\n        if S == T:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    s, t = \"\", \"\"\n    for i in range(len(S)):\n        s += S[i]\n    for i in range(len(T)):\n        t += T[i]\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[::-1]\n    return s\n    pass"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    return len([i for i in range(len(S)) if S[i]!= T[i]])"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split()[0]\n    T = stdin.strip().split()[1]\n\n    S_p = [0] * len(S)\n    T_p = [0] * len(T)\n\n    for i in range(1, len(S)):\n        S_p[i] = 1 + S_p[i - 1] if S[i] == S[i - 1] else 0\n    for j in range(1, len(T)):\n        T_p[j] = 1 + T_p[j - 1] if T[j] == T[j - 1] else 0\n\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # count1=0\n    # count2=0\n    # for i in range(len(stdin)):\n    #     for j in range(i+1,len(stdin)):\n    #         if stdin[i]==stdin[j] and stdin[i] in stdin[0:i]:\n    #             count1+=1\n    #         if stdin[i]==stdin[j] and stdin[j] in stdin[0:j]:\n    #             count2+=1\n    # return min(count1,count2)\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()[1:]\n    return len([x for x in S if x!= T[S.index(x)]])\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return len(s) - len(t)\n\nprint(solution(\"abc\\nabc\"))\n\n-----Test Input-----\nInput 1\ncabacc\nabc\n\nInput 2\nabbc\nabc\n\nInput 3\nabc\nabc\n\n-----Test Output-----\nExpected Output 1\n1\n\nExpected Output 2\n0\n\nExpected Output 3\n0\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    print(len(set(s) ^ set(t)))"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n    return len(S) - len(T)\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    lcs = longest_common_subsequence(s, t)\n\n    return len(s) - lcs"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    min_changes = len(T)\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i + len(T)] == T:\n            min_changes = min(min_changes, len(T))\n    return str(min_changes)"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = input()\n    result = 0\n    for char in s:\n        if char!= t[0]:\n            result += 1\n        t = t[1:]\n    return result\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    l = [x for x in range(1, b + 1) if b % x == 0 and a % x == 0]\n    l.sort(reverse=True)\n    return str(l[k - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 12 2\\n')\n    '2'\n    \"\"\"\n    a, b, k = map(int, stdin.split())\n    return str(get_second_largest_number(a, b, k))\n\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the K-th largest number that divides both A and B.\n\n    >>> solution('8 12 2')\n    2\n    \"\"\"\n    a, b, k = map(int, stdin.split())\n    # The case when there is only one number.\n    if k == 1:\n        return min(a, b)\n    # The case when there is no number in common.\n    if a > b:\n        return b\n    if a == b:\n        return a\n    # The case when there are multiple common numbers.\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return a"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    min_n = min(A, B)\n    max_n = max(A, B)\n\n    result = set()\n    while min_n <= max_n:\n        if (min_n % K == 0 and max_n % K == 0):\n            result.add(min_n)\n            max_n -= 1\n        min_n += 1\n    result = sorted(result)\n    return str(result[-K])"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 12 2''')\n    2\n    \"\"\"\n    a, b, k = map(int, stdin.split())\n    c = int(b * (k - 1) / a)\n    print(c)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return [i for i in range(1, min(a, b)) if a % i == 0 and b % i == 0][k - 1]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    result = 0\n\n    for i in range(1, n + 1):\n        if a % i == 0 and b % i == 0:\n            result = i\n    return str(result)"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(n) for n in stdin.split(\" \")]\n    d = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            d.add(i)\n    for j in range(1, b + 1):\n        if b % j == 0:\n            d.add(j)\n    d = list(d)\n    d.sort()\n    return str(d[-k])\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(' '))\n    def gcd(a, b):\n        a, b = (a, b) if a > b else (b, a)\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    divs = []\n    div = 1\n    while div < min(a, b):\n        if a % div == 0 and b % div == 0:\n            divs.append(div)\n        div += 1\n    divs.sort(reverse=True)\n    return divs[k-1]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(' ')]\n    i = 1\n    while True:\n        if i > A and i > B:\n            break\n        if i % A == 0 and i % B == 0:\n            break\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    happiness = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happinessPoints = [1000, 100, 50, 10, 5, 1]\n    \n    dp = [0 for _ in range(happiness+1)]\n    dp[0] = 0\n    \n    for i in range(len(coins)):\n        for j in range(happiness+1):\n            if j >= coins[i]:\n                dp[j] = max(dp[j], dp[j-coins[i]] + happinessPoints[i])\n    \n    return str(dp[happiness])\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    # initialize lists to track the possible maximum number of happiness points, and the coins used in each exchange.\n    maxHappinessPoints = [0, 0]\n    coins = [0, 0, 0, 0, 0, 0]\n\n    # sort the list of coins in descending order\n    coins.sort(reverse=True)\n\n    # iterate through all possible exchange combinations\n    for i in range(0, 6):\n        # for every combination, iterate through all possible coin amounts (X is sorted in descending order)\n        for j in range(0, X + 1):\n            # if the combination is valid, iterate through each coin amount in descending order\n            if j - coins[i] >= 0:\n                # if the current coin amount is valid, we add the corresponding happiness points\n                happinessPoints = (500 * i) + (100 * (i - 1)) + (50 * (i - 2)) + (10 * (i - 3)) + (5 * (i - 4)) + ((i - 5) * 5)\n                # add the happiness points to the list of max possible happiness points, if the max happiness points is updated.\n                if maxHappinessPoints[0] < happinessPoints:\n                    maxHappinessPoints[0] = happinessPoints\n                    maxHappinessPoints[1] = i\n\n    # print the max possible happiness points and the coins used in the exchange.\n    print(maxHappinessPoints[0])\n    print(maxHappinessPoints[1])\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    happiness = 0\n    x = int(stdin)\n    i = 0\n    while x!= 0:\n        if i == 6:\n            happiness += 500\n            i = 0\n        if x >= 500:\n            x -= 500\n            happiness += 1000\n            i += 1\n        elif x >= 100:\n            x -= 100\n            happiness += 500\n            i += 1\n        elif x >= 50:\n            x -= 50\n            happiness += 100\n            i += 1\n        elif x >= 10:\n            x -= 10\n            happiness += 50\n            i += 1\n        elif x >= 5:\n            x -= 5\n            happiness += 10\n            i += 1\n        elif x >= 1:\n            x -= 1\n            happiness += 5\n            i += 1\n    return happiness\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    # Replace pass above with your code\n    return str(...)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    X = int(stdin)\n\n    if X >= 10 ** 9:\n        return str(0)\n\n    total = 0\n    num_coins = [0, 0, 0, 0, 0, 0]\n    while X >= 500:\n        X -= 500\n        num_coins[0] += 1\n    while X >= 100:\n        X -= 100\n        num_coins[1] += 1\n    while X >= 50:\n        X -= 50\n        num_coins[2] += 1\n    while X >= 10:\n        X -= 10\n        num_coins[3] += 1\n    while X >= 5:\n        X -= 5\n        num_coins[4] += 1\n    while X >= 1:\n        X -= 1\n        num_coins[5] += 1\n\n    for coin in num_coins:\n        total += (coin * 1000) + (coin * 5)\n\n    return str(total)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(max(x//500, x//100, x//50, x//10, x//5, x//1))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    ans = 0\n    while x:\n        if x >= 1000:\n            ans += x//1000\n            x %= 1000\n        elif x >= 500:\n            ans += x//500\n            x %= 500\n        elif x >= 100:\n            ans += x//100\n            x %= 100\n        elif x >= 50:\n            ans += x//50\n            x %= 50\n        elif x >= 10:\n            ans += x//10\n            x %= 10\n        elif x >= 5:\n            ans += x//5\n            x %= 5\n        else:\n            ans += x\n            x = 0\n    return str(ans)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(n // 500, n // 5 % 5, n // 1 % 5))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    return str(sum(X // i for i in (500, 100, 50, 10, 5, 1) if X // i > 0))"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    # if any(not (1 <= i <= 100) for i in x):\n    #     raise ValueError('invalid input')\n    total_points = 0\n    for i in x:\n        total_points += (i - 2) ** 2\n    return str(total_points)\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nYou are given a 2D grid of size m x n representing a field of cherries. Each cell in this field can be one of three \ntypes:\n\n    * 0 representing an empty cell\n    * 1 representing a cell with a cherry\n    * 2 representing a cell with a thorn\n    * -1 representing a thorn\n\nReturn the minimum number of moves needed to collect all cherries. A move consists of walking from one cell to any adjacent \ncell or neighbor at most once. If there are no adjacent (4-directionally) cells, then a move can only involve a cell \nto itself.\n\n-----Constraints-----\n1 \\leq m, n \\leq 100\n0 \\leq grid[i][j] \\leq 2\n\n-----Input-----\n[m x n] matrix where each cell contains a number\n\n-----Output-----\nReturn the minimum number of moves needed to collect all cherries.\n\n-----Sample Input-----\n[[0, 1, -1],\n[1, 0, 1],\n[1, -1, -1]]\n\n-----Sample Output-----\n3\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find minimum total points of stamina the N people have to spend\n    >>> solution(\"2\\n1 4\")\n    5\n    >>> solution(\"5\\n10 10 10 10 10\")\n    0\n    >>> solution(\"1\\n10\")\n    10\n    \"\"\"\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    a.sort()\n    ans = 0\n    for i in range(len(a)):\n        ans += (a[i] - i) ** 2\n    return str(ans)\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    xs = [int(i) for i in stdin.readline().split(' ')]\n    \n    min_diff = float('inf')\n    for x in xs:\n        min_diff = min(min_diff, abs(x - xs[0]))\n    \n    res = 0\n    for x in xs:\n        res += min_diff * min_diff\n    \n    return str(res)"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *coords = list(map(int, stdin.split(\"\\n\")))\n    return str(sum((c - 1)**2 for c in coords))"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n\n    return stdout\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.split())\n    if a == 1:\n        print(1)\n    else:\n        if b == 1:\n            print(a)\n        else:\n            print(a - 1 + 1 + (a - 1) * (b - 1))\n    return \"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return str(math.ceil(A / B))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 10\")\n    3\n    >>> solution(\"4 5\")\n    2\n    >>> solution(\"1 1\")\n    0\n    \"\"\"\n    b, a = map(int, stdin.split())\n    return a + int((b - 1) / a) - 1\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(\" \")]\n    \n    return str(A - B + 1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution of problem.\n\n    >>> solution('4 10')\n    3\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return a - 1 if b % a == 0 else b // a\n    # answer = 0\n    # while a > 1:\n    #     if b % a == 0:\n    #         answer += b // a\n    #         break\n    #     else:\n    #         a -= 1\n    #         b += 1\n    # else:\n    #     answer += 1\n    # return answer\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of power strips required.\"\"\"\n    [A, B] = map(int, stdin.split(' '))\n    return str(A * B // (A + B))\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a - b)\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(b // a + 1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # One Day\n    #   If Predicted:\n    #   - Correct:\n    #   - Incorrect:\n    #   - Not enough Data:\n    #\n    # Two Days\n    #   If Predicted:\n    #   - Correct:\n    #   - Incorrect:\n    #   - Not enough Data:\n    #\n    # Three Days\n    #   If Predicted:\n    #   - Correct:\n    #   - Incorrect:\n    #   - Not enough Data:\n    #\n    pass\n\nsolution(str(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    forecast: str = stdin.split('\\n')\n    weather: str = forecast[0][0]\n    days: int = 0\n    for day in range(1, 4):\n        if forecast[day][0] == weather:\n            days += 1\n        weather = forecast[day][0]\n    return str(days)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    forecast = stdin[0]\n    actual = stdin[1]\n    if forecast == actual:\n        return \"1\"\n    elif forecast == 'C' and actual == 'R':\n        return \"1\"\n    elif forecast == 'R' and actual == 'C':\n        return \"1\"\n    elif forecast == 'S' and actual == 'C':\n        return \"2\"\n    elif forecast == 'C' and actual == 'S':\n        return \"2\"\n    elif forecast == 'R' and actual == 'S':\n        return \"2\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    weather_forcast_for_day: str = stdin[0]\n    weather_forcast_for_day_2: str = stdin[1]\n    weather_forcast_for_day_3: str = stdin[2]\n    is_forcast_correct: bool = False\n    num_days_correct: int = 0\n    if weather_forcast_for_day == 'CSR' and weather_forcast_for_day_2 == 'CSS' and weather_forcast_for_day_3 == 'CSR':\n        is_forcast_correct = True\n        num_days_correct = 2\n    if is_forcast_correct == True:\n        print(num_days_correct)\n\n    return num_days_correct"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    predicted_days = 0\n    for day_num in range(1,4):\n        predicted_day = stdin[day_num-1]\n        actual_day = stdin[day_num]\n        if predicted_day == actual_day:\n            predicted_days += 1\n    return str(predicted_days)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin\n    actual = [\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"C\",\n        \"C\",\n        \"C\",\n        \"S\",\n        \"S\",\n        \"C\",\n        \"R\",\n        \"S\",\n        \"C\",\n        \"R\",\n        \"S\",\n        \"C\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"C\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"R\",\n        \"R\",\n        \"C\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"C\",\n        \"C\",\n        \"C\",\n        \"C\",\n        \"C\",\n        \"C\",\n        \"C\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"C\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"R\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \"S\",\n        \""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sunny, cloudy, rainy = 0, 0, 0\n    for c in stdin:\n        if c == \"C\":\n            cloudy += 1\n        elif c == \"S\":\n            sunny += 1\n        elif c == \"R\":\n            rainy += 1\n    correct = sunny + rainy\n    return \"There were {} days that were correct.\\n\".format(correct)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    forecast: str = stdin\n    actual: str = input()\n\n    days_correct: int = 0\n\n    for day_num in range(len(forecast)):\n        if forecast[day_num] == actual[day_num]:\n            days_correct += 1\n\n    return days_correct\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n\n    n = int(input_data[0])\n    p = [int(i) for i in input_data[1:]]\n\n    # \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6b21\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\u6b21\u6b21\u4e0b\u4e00\u4e2a\u6570\u5b57\n    # \u9664\u4e86\u8fb9\u754c\u5916\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u5927\u7684\u6570\n    # \u56e0\u6b64\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\n    # \u521d\u59cb\u5316\u6570\u7ec4\u957f\u5ea6\u4e3a1\n    dp = [0] * n\n\n    # \u7b2c\u4e00\u4e2a\u6570\u5b57\n    dp[0] = 1\n\n    # \u7b2c\u4e8c\u4e2a\u6570\u5b57\n    if p[1] < p[0]:\n        dp[1] = 1\n\n    # \u7b2c\u4e09\u4e2a\u6570\u5b57\n    if p[2] < p[0] and p[2] < p[1]:\n        dp[2] = 1\n\n    # \u63a5\u4e0b\u6765\u7684\u6570\u5b57\n    for i in range(3, n):\n        if p[i] < p[i - 1] and p[i] < p[i - 2] and p[i] < p[i - 3]:\n            dp[i] = 1\n\n    return dp[n - 1]\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(3, len(stdin)):\n        a, b, c = int(stdin[i - 1]), int(stdin[i]), int(stdin[i + 1])\n        if b < a < c or b < c < a:\n            count += 1\n    return count"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n\n    count = 0\n    i = 0\n    while i < n - 1:\n        if p[i + 1] < p[i] and p[i + 1] < p[i + 2]:\n            count += 1\n        i += 1\n\n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_nums(stdin: str) -> [int]:\n        return [int(i) for i in stdin.split('\\n')[1].split()]\n    nums = get_nums(stdin)\n    nums.sort()\n    res = 0\n    for i in range(1, len(nums)-1):\n        if nums[i - 1] < nums[i] < nums[i + 1]:\n            res += 1\n    print(res)\n    return 'OK'\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        if p[i] < p[i-1] < p[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # input_list = stdin.split('\\n')[1].split(' ')\n    # array = []\n    # for i in input_list:\n    #     array.append(int(i))\n    #\n    # input_list = array\n    #\n    # p_count = 1\n    # for i in range(1, len(input_list)):\n    #     if input_list[i] < input_list[i - 1]:\n    #         print(p_count)\n    #         p_count = 1\n    #     elif input_list[i] == input_list[i - 1]:\n    #         print(p_count)\n    #     else:\n    #         p_count += 1\n    #\n    # return \"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(i) for i in stdin.split(' ')]\n    smallest = [p[0], p[1]]\n    for i in range(n - 1):\n        if p[i] > p[i + 1]:\n            if p[i + 1] < smallest[0] or p[i + 1] < smallest[1]:\n                smallest.append(p[i + 1])\n                smallest.remove(smallest[0])\n        elif p[i] < p[i + 1]:\n            if p[i] < smallest[0] or p[i] < smallest[1]:\n                smallest.append(p[i])\n                smallest.remove(smallest[0])\n    return len(smallest)"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    data = [int(i) for i in stdin.readline().strip().split(' ')]\n    current_min = 0\n    counter = 0\n    for i in data:\n        if i > current_min:\n            if i == data[current_min + 1]:\n                counter += 1\n            if i == data[current_min + 2]:\n                counter += 1\n            current_min = data.index(i)\n    return str(counter)\n    # your code here\n    # return str(n)\n\n\ndef"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    p = [int(i) for i in stdin.split()]\n    if n == 2:\n        return 0\n    i = 1\n    while i < n - 1:\n        if p[i] > p[i - 1] and p[i] < p[i + 1]:\n            return i\n        i += 1\n    return 0\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        x, y = map(float, stdin.split())\n        a.append((x, y))\n    a.sort()\n    if n % 2 == 0:\n        return (a[n // 2][0] + a[n // 2 - 1][0]) / 2\n    else:\n        return a[n // 2][0]\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.2f}'.format(stdin)\nprint(solution(8))\nprint(solution(5))\nprint(solution(8))\n\"\"\"\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution in Python'''\n    [*_] = map(float, stdin.split('\\n'))\n    n = len(_)\n    t_list = []\n    for i in range(0, n):\n        for j in range(i+1, n):\n            x = _[i]*_[j]\n            y = _[j]*_[j] - _[i]*_[i]\n            t_list.append(x/y)\n    t_list.sort()\n    return f'{t_list[n-1]:.3f}'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Calculate theta angle\n    Args:\n        stdin: input string\n    Returns:\n        str: output string\n    \"\"\"\n    points = stdin.split('\\n')\n    # Create a set for points x, y\n    points_x, points_y = set(), set()\n    # Calculate theta for each point\n    for point in points:\n        x, y = list(map(float, point.split(' ')))\n        points_x.add(x)\n        points_y.add(y)\n    # Calculate median for x, y\n    median_x, median_y = (min(points_x) + max(points_x)) / 2, (min(points_y) + max(points_y)) / 2\n    # Calculate theta\n    theta = 2 * math.asin(\n        (median_x - min(points_x)) / (max(points_x) - min(points_x))\n    )\n    return str(math.degrees(theta))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingE6BVY5-QF4/\"\"\"\n    # replace this for solution\n    return \"\"\n\nprint(solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\"))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041a\u0443\u0431\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0443\u043b\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0434\u043b\u0438\u043d\u044b \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430:\n        $ \\sqrt{(x_1-x_2)^2 + (y_1-y_2)^2} $\n    \"\"\"\n    import re\n\n    # \u0427\u0442\u0435\u043d\u0438\u0435 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    stdin = \"\\n\".join(lines[1:])\n    # stdin = stdin.split(\"\\n\")\n\n    # \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438\n    points = []\n    for line in stdin.split(\"\\n\"):\n        # \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043d\u0430 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0438\u0445 \u0434\u043b\u0438\u043d\u0430 \u0447\u0435\u0442\u043d\u0430\u044f\n        for x, y in zip(*[iter(line.split())]*2):\n            points.append(float(x))\n            points.append(float(y))\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0434\u043b\u0438\u043d\u043d\u044b \u0441\u0442\u0440\u043e\u043a\n    d = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            # \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u043b\u0435\u0436\u0430\u0442 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043f\u0440\u044f\u043c\u043e\u0439\n            if points[i] == points[j]:\n                d.append(math.sqrt((points[j] - points[i])**2))\n            # \u0415\u0441\u043b\u0438 \u043e\u0434\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 \u043b\u0435\u0436\u0438\u0442 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0435 \u0442\u043e\u0447\u043a\u0443 \u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043f\u0440\u044f\u043c\u043e\u0439\n            elif points[i] == points[j] + 1 or points[i] == points[j] - 1:\n                d.append(abs(points[i] - points[j]))\n            # \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043e\u0442\u043d\u0438\u043c\u0430\u0435\u043c \u043e\u0431\u043e\u0438 \u0434\u043b\u0438\u043d\u044b \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043f\u0440\u044f\u043c\u043e\u0439\n            else:\n                d.append(abs(points[i] - points[j]))\n\n    d.sort()\n    return str(d[len(d) // 2])\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_points = int(stdin)\n    points = []\n    for _ in range(number_of_points):\n        points.append(list(map(float, stdin.split())))\n    delta_x_square = 0\n    delta_y_square = 0\n    delta_x_y_square = 0\n    x_square_sum = 0\n    y_square_sum = 0\n    for point in points:\n        delta_x_square += point[0]**2\n        delta_y_square += point[1]**2\n        delta_x_y_square += point[0]*point[1]\n        x_square_sum += point[0]\n        y_square_sum += point[1]\n    a = (delta_x_y_square - (x_square_sum * y_square_sum) / number_of_points) / (delta_x_square - (x_square_sum**2) / number_of_points)\n    b = (y_square_sum - (a * x_square_sum) / number_of_points) / number_of_points\n    delta_y = 0\n    delta_x = 0\n    delta_y_2 = 0\n    delta_x_2 = 0\n    for point in points:\n        delta_y += point[1]\n        delta_x += point[0]\n        delta_y_2 += point[1]**2\n        delta_x_2 += point[0]**2\n    c = (delta_y * delta_x_2 - delta_x * delta_y_2) / (delta_x_2 - (delta_x_2**2) / number_of_points)\n    d = (delta_y * delta_x_2 - delta_x * delta_y_2) / (delta_x_2 - (delta_x_2**2) / number_of_points)\n    variance = 0\n    for point in points:\n        variance += (point[0] * a + b - point[1])**2\n    variance /= number_of_points\n    s = math.sqrt(variance)\n    if c < 0:\n        theta = math.atan((-c)/d) - math.pi\n    else:\n        theta = math.atan(c/d)\n    theta = math.degrees(theta)\n    return f\"{theta:.4f}\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the first letter of the user's name.\"\"\"\n    # The first line contains an integer n, the number of lines in the username file.\n    n = int(stdin.split('\\n')[0])\n    # Each line i of the n subsequent lines contains a string ui.\n    # The sum of the lengths of the ui strings is at most 10000.\n    return stdin.split('\\n')[n-1][-1]\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the missing angle of a regular polygon\n    @param: stdin\n    @return: missing angle of a regular polygon\n    \"\"\"\n    n = int(stdin)\n    if n < 3:\n        return \"0\"\n    s = 0\n    for i in range(n):\n        s += stdin[2*i+1]\n    s -= n\n    s *= 2\n    s = s / (2*n)\n    s = 2 * np.pi * np.arctan(np.sqrt(s))\n    s = np.mod(s, 2*np.pi)\n    return str(s)\n    \"\"\"\n    # angle = 2 * np.pi * np.arctan(1/np.sqrt(s))\n    # if angle < 0:\n    #     return str(2 * np.pi + angle)\n    # else:\n    #     return str(angle)\n    \"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return first line of input\"\"\"\n    return stdin.split('\\n')[0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution\"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    cnt = 0\n    if m == 0:\n        return \"Impossible\"\n    for i in range(1, n + 1):\n        if i == 1:\n            cnt += (a[0] - 1)\n        else:\n            cnt += max(0, (a[i - 1] - 1) * (i - 1))\n    if cnt > m:\n        return \"Impossible\"\n    else:\n        return cnt\n\"\"\"\n\n\nimport math\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    pages = list(map(int, stdin.split(' ')))\n    if sum(pages) < m:\n        return -1\n    for i in range(len(pages)):\n        for j in range(i+1, len(pages)):\n            if pages[i] + pages[j] > m:\n                continue\n            else:\n                remaining = m - pages[i] - pages[j]\n                if remaining in pages:\n                    pages.remove(remaining)\n                    pages.remove(pages[i])\n                    pages.remove(pages[j-1])\n                    return len(pages)\n    return -1\nprint(solution(input()))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    if m == sum(a):\n        return '1'\n    res = 0\n    for i in range(n):\n        r = max(0, a[i] - i)\n        if r > m:\n            return '-1'\n        res += r\n    return str(res)"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split()\n    cup_count, coursework_count = int(first_line[0]), int(first_line[1])\n    next_line = stdin.split()\n    cups = list(map(int, next_line))\n    answer = -1\n    for cup in cups:\n        if cup > coursework_count:\n            continue\n        elif cup == coursework_count:\n            answer = 1\n            break\n        else:\n            answer = 1\n            break\n    return answer\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cups_number, pages_number = list(map(int, stdin.split(' ')))\n    cups_values = list(map(int, stdin.split(' ')))\n    \n    cups_count = {}\n    for cup_value in cups_values:\n        if cup_value in cups_count.keys():\n            cups_count[cup_value] += 1\n        else:\n            cups_count[cup_value] = 1\n\n    best_days = [pages_number // cup_value + 1 for cup_value in cups_values]\n    best_days_count = 0\n    for cup_value, pages in zip(cups_values, best_days):\n        if pages > cups_count[cup_value]:\n            best_days_count += 1\n    \n    if best_days_count == 0:\n        return -1\n    else:\n        return max(best_days)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the minimum number of days Polycarp needs to write his coursework.'\n    n, m = [int(x) for x in stdin.split(' ')]\n    cups = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return print(-1) if sum(cups) < m else print(sum(cups) // m)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    pages = int(input_lines[0].split()[0])\n    cups = [int(i) for i in input_lines[0].split()[1:]]\n    #print(cups)\n    days = 1\n    current_day_cups = cups.copy()\n    #for cup in current_day_cups:\n        #print(cup)\n    while True:\n        current_day_cups = [i - 1 for i in current_day_cups]\n        #print(current_day_cups)\n        #days += 1\n        if any([i > 0 for i in current_day_cups]):\n            days += 1\n        else:\n            break\n    return str(days)"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get the input for the problem and return the solution\n    '''\n\n    n, k = input().split()\n\n    arr = [int(i) for i in input().split()]\n\n    ans = []\n    # for the number of elements in t\n    for i in range(int(k)):\n        # if the the number is not greater than the total elements\n        # or if there is no element in the array or the total is \n        # greater than the number of elements then we return the ans\n        if len(arr) < int(k) or len(arr) == 0:\n            return''.join([str(i) for i in ans])\n        \n        else:\n            # if the number of elements in the array is greater \n            # than the number of elements we need to get the max \n            # in the array\n            if len(arr) > int(k):\n                max_elem = max(arr)\n                # after finding the max we remove it\n                arr.remove(max_elem)\n                # we add the max to the ans\n                ans.append(max_elem)\n            # if the number of elements in the array is greater than the number\n            # of elements needed we simply return the ans\n            elif len(arr) > int(k):\n                return''.join([str(i) for i in ans])\n            \n            # if the number of elements in the array is equal to the number of elements\n            # needed we simply return the ans\n            elif len(arr) == int(k):\n                return''.join([str(i) for i in ans])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A naive approach to solve this problem is to generate all the possible combinations of the elements in the array $t$ and check if any of them are present in the array $s$. If no combination of the elements of array $t$ is present in the array $s$ then the answer is the maximum number of copies of the array $t$ that can be cut out. We can generate all the possible combinations of the elements in the array $t$ by using the function itertools.combinations(). Once you have the combinations of the elements in the array $t$ and you have the array $s$ you can check if any combination of the elements of array $t$ is present in the array $s$. This can be done by using the in operator in python.\n    \n    Time complexity: O(n * k^2) where $n$ and $k$ are the number of elements in $s$ and the desired number of elements in $t$ respectively.\n    Space complexity: O(n * k) where $n$ and $k$ are the number of elements in $s$ and the desired number of elements in $t$ respectively.\n    \"\"\"\n\n    def get_num_combinations(arr):\n        # Returns the number of permutations of the elements in the array\n        n = len(arr)\n        return factorial(n) / (factorial(n - k) * factorial(k))\n\n    def get_combinations_helper(arr, index, current_combination):\n        if index == len(arr):\n            return [current_combination]\n\n        combinations = []\n        for i in range(index, len(arr)):\n            current_combination.append(arr[i])\n            combinations += get_combinations_helper(arr, index + 1, current_combination)\n            current_combination.pop()\n\n        return combinations\n\n    # Get the number of copies of the array t that can be cut out from the array s\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    max_num_copies = get_num_combinations(arr)\n    combinations = get_combinations_helper(arr, 0, [])\n    for combination in combinations:\n        if len(combination)!= k:\n            continue\n        is_subset = True\n        for i in range(k):\n            if combination[i] not in arr:\n                is_subset = False\n                break\n        if is_subset:\n            return \" \".join(str(num) for num in combination)\n\n    return str(max_num_copies)\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = input()\n    # n, k = list(map(int, stdin.split(' ')))\n    # s = list(map(int, stdin.split(' ')))\n\n    n, k = list(map(int, stdin.split(' ')))\n    s = list(map(int, stdin.split(' ')))\n    t = []\n    for i in range(k):\n        t.append(s[i])\n    t = set(t)\n\n    max = 0\n    for i in range(1, n):\n        if(s[i] not in t):\n            t.append(s[i])\n        else:\n            t.remove(s[i])\n        if(i - max > 2):\n            t.clear()\n            max = i\n    print(list(t))\n    return''.join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum possible number of copies of array t that can be cut out from array s.\n    \"\"\"\n    stdin = stdin.split()\n    length, cut = int(stdin[0]), int(stdin[1])\n    s = list(map(int, stdin[2]))\n    s.sort()\n    best = 1\n    for i in range(len(s) - cut + 1):\n        if s[i + cut - 1] - s[i] + 1 < best:\n            best = s[i + cut - 1] - s[i] + 1\n    return''.join(map(str, s[:best]))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(NlogK)\n    Space Complexity: O(N)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    assert len(s) == n, 'Invalid input!'\n    s.sort()\n    t = [0] * k\n    curr_sum = 0\n    for i, val in enumerate(s):\n        curr_sum += val\n        t[i % k] = val\n        if curr_sum >= curr_sum + val:\n            continue\n        else:\n            break\n    return''.join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def input() -> list:\n        return [int(x) for x in stdin.split()]\n\n    n, k = input()\n    s = input()\n\n    t = []\n    max_count = 0\n\n    for i in range(k):\n        count = 0\n        for j in range(n):\n            if s[j] == t[i]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            t[i] = s[j]\n\n    print(*t)\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n\n    print(s[:k])\n    print(s[:k - 1])\n    print(s[:k - 2])\n    print(s[:k - 3])\n    print(s[:k - 4])\n    print(s[:k - 5])\n    print(s[:k - 6])\n    print(s[:k - 7])\n    print(s[:k - 8])\n    print(s[:k - 9])\n    print(s[:k - 10])"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the array $t$ such that you can cut out the copy of $t$ from $s$ maximum number of times.\n    :param stdin: input\n    :return: answer\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    l, r = 0, 0\n    t = []\n    count = 0\n    while r < n:\n        if s[r] not in t:\n            t.append(s[r])\n            count += 1\n        if count == k:\n            break\n        r += 1\n\n    l = r\n    while l < n:\n        if s[l] not in t:\n            t.append(s[l])\n            count += 1\n        if count == k:\n            break\n        l += 1\n\n    return''.join(map(str, t[:k]))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n        finds the array t such that you can cut out maximum number of copies\n        of it from s\n    '''\n    \n    # get input\n    n, k = map(int, stdin.split())\n    nums = [int(x) for x in stdin.split()]\n    \n    # init variables\n    sorted_nums = sorted(nums)\n    max_cnt = 0\n    \n    # iterate through the array\n    for i in range(n - k + 1):\n        cnt = 0\n        for j in range(i, i + k):\n            if nums[j]!= sorted_nums[j - i]:\n                cnt += 1\n                \n        max_cnt = max(max_cnt, cnt)\n    \n    return''.join([str(x) for x in sorted_nums[:k]]) if max_cnt <= k else 'NO'\n    "
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n    s.sort()\n    c = []\n    for i in range(len(s)):\n        if i + k > len(s):\n            break\n        c.append(s[i + k - 1])\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    k = 0\n    for i in range(m):\n        a_i = [x[i] for x in a]\n        d = [abs(a_i[i] - a_i[i+1]) for i in range(len(a_i)-1)]\n        if max(d) > k:\n            k = max(d)\n    return str(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n * m)\n    Space Complexity: O(m)\n    \"\"\"\n    n, m = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    a = [list(map(int, i.split(\" \"))) for i in stdin.split(\"\\n\")[1:]]\n    k = 0\n    for i in range(1, m):\n        a[0][i] = min(a[0][i], a[0][i - 1] + k)\n    for i in range(1, n):\n        a[i][0] = min(a[i][0], a[i - 1][0] + k)\n    for i in range(1, n):\n        for j in range(1, m):\n            a[i][j] = min(a[i][j], a[i - 1][j] + k, a[i][j - 1] + k)\n    s = []\n    for i in range(n):\n        for j in range(m):\n            s.append(a[i][j])\n    s = [str(i) for i in s]\n    return \" \".join(s)\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\na = [\n    [9, 9],\n    [10, 8],\n    [5, 3],\n    [4, 3],\n]\n\nb = [\n    [3, 6, 2, 5, 1, 4],\n    [10, 3, 7, 3],\n]\n\nc = [\n    [3, 3, 3, 3, 3],\n    [3, 3, 3, 3],\n]\n\nd = [\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n]\n\ne = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]\n\nf = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1]]\n\ng = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]\n\nh = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]\n\nh = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.readline().strip().split())))\n    matrix.sort()\n    current = matrix[0][0]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= current:\n                return '0'\n    return str(n + m - 1)\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \"\"\"\n    n = int(stdin.readline().rstrip())\n    name = stdin.readline().rstrip()\n    if \"xxx\" in name:\n        return 0\n    else:\n        l = len(name)\n        for i in range(l - 2, -1, -1):\n            if name[i] == \"x\":\n                if name[i - 1] == \"x\":\n                    if name[i - 2] == \"x\":\n                        return l - i - 3\n                    else:\n                        return l - i - 2\n        return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        if s[i] == \"x\":\n            if i + 1 < n:\n                if s[i + 1] == \"x\":\n                    count += 1\n            else:\n                count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"x\", \"\").replace(\"i\", \"\").replace(\"v\", \"\").replace(\"x\", \"\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split('\\n')[0])\n    name = stdin.split('\\n')[1]\n    return 0\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    lst = [char for char in string]\n    new_lst = []\n    for i in lst:\n        if i!= 'x':\n            new_lst.append(i)\n    for i in range(len(new_lst)):\n        if new_lst[i] == 'x':\n            if new_lst[i-1]!= 'x' and new_lst[i-2]!= 'x':\n                new_lst[i] = ''\n                i -= 1\n                i -= 1\n                new_lst[i] = ''\n    s = ''\n    for i in new_lst:\n        s += i\n    if 'xxx' in s:\n        return s.index('xxx')\n    return 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace('xxx', '')\n    return a if len(a) < len(stdin) else stdin[:-len(a)]\n\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for i in range(3, n+1):\n        if 'xxx' not in stdin[:i]:\n            return i\n    return 0\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 0\n\"\"\"\n\nfrom collections import Counter\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r ** 2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not remove this line.\n    return str(int(stdin))"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(3 * n**2)"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    s = 3 * pow(r, 2)\n    return str(s)\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  r = int(stdin)\n  return str(3 * r**2)"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    res = 3 * r**2\n    return res\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = stdin\n    area = (3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3) ** (1/2)\n    print(area * int(length))\n    return area * int(length)"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    pi = 3.14159\n    return str(3*(a**2)*(10**2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the area of the regular dodecagon.\n    '''\n    # getting the value from the input\n    radius = int(stdin)\n    # calculate the area of the regular dodecagon\n    area = (((3 * radius * radius * radius) / 2) * math.sqrt(3)) / 2\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r ** 2)\n    pass"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (sheep, wolves) = map(int, stdin.split())\n    if wolves >= sheep:\n        return 'unsafe'\n    else:\n        return'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.split('\\n')[0])\n    w = int(stdin.split('\\n')[1])\n    if s < w:\n        return'safe'\n    else:\n        return 'unsafe'\n\"\"\"\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolf = map(int, stdin.split(' '))\n    if wolf >= sheep:\n        return 'unsafe'\n    return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = list(map(int, stdin.split()))\n    if sheep <= wolves:\n        print(\"safe\")\n    else:\n        print(\"unsafe\")\n    return \"\"\n\nsolution(stdin)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()\n    S, W = map(int, line[0].split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"unsafe\" if the sheep are attacked by the wolves, otherwise return \"safe\"\n    \"\"\"\n    sheep, wolves = [int(x) for x in stdin.split()]\n    return \"unsafe\" if wolves >= sheep else \"safe\"\n\n----Test Case----\nTest 1:\ninput:\n4 5\n\noutput:\nunsafe\n\"\"\"\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and convert it into integer.\n    \"\"\"\n    data = [int(d) for d in stdin.split()]\n    return \"safe\" if data[1] < data[0] else \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"unsafe\" if the number of wolves is greater than or equal to the number of sheep, and \"safe\" otherwise.\"\"\"\n    return \"safe\" if int(stdin[0]) >= int(stdin[2]) else \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'unsafe' if the number of wolves is greater than or equal to that of sheep,\n    or'safe' if the sheep are safe from the wolves.\"\"\"\n    sheep_number, wolves_number = list(map(int, stdin.split()))\n    if wolves_number >= sheep_number:\n        return 'unsafe'\n    return'safe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a == b and b == c:\n        return str(a * b * c)\n    if c == b and b == a:\n        return str(a * b * c)\n    if a == c and c == b:\n        return str(a * b * c)\n    if a * a + b * b == c * c:\n        return str(a * b * c)\n    return \"Not right\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(c) for c in stdin.split()]\n    return str(int((a * b * c) ** 0.5))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    ab = a*b\n    bc = b*c\n    ca = c*a\n    return abs((bc-ab)/2 + ca)"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    return str(int((ca * bc * ab) ** 0.5))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\" \")]\n    return str(round(0.5 * (a * b * c)))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(\"|\"))\n    if max(a, b, c) ** 2 == (a * b * c):\n        return str(a * b * c)\n    else:\n        return str(int((a * b * c) / 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(\" \"))\n\n    return str(int((a * b * c) ** 0.5))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the area of the right triangle ABC\n    :param stdin: The input, given from stdin in the following format:\n        |AB| |BC| |CA|\n    :return: The area of the triangle ABC\n    \"\"\"\n    ab, bc, ca = map(int, stdin.split(' | '))\n    return int(f\"{ca * bc * ab}/2\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(int(A * B / 2))"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(\" \")))\n    if (A + B) <= C or (A + C) <= B or (B + C) <= A:\n        raise Exception(\"Invalid Input\")\n    S = (A + B + C) / 2\n    area = (S * (S - A) * (S - B) * (S - C)) ** 0.5\n    return str(int(area))\n\nprint(solution(input()))"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split(' ')]\n    return str(min(a//c, b//c, a//b, b//a, b//c, a//a))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program to solve a problem from a famous video game,\n    I'm not gonna lie, you can read the following link to solve this problem.\n    https://www.youtube.com/watch?v=JlXfIoJN7_w\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(math.ceil(B / (C * A)))"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string obtained after converting input to integer type\"\"\"\n    A, B, C = [int(n) for n in stdin.split(' ')]\n    if A <= B <= C:\n        return B\n    else:\n        return C\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.strip().split()]\n    return str(max(0, a * b // c))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return b // a - (c // a)\n\nprint(solution(input()))\n\n-----------------------\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    params = stdin.split()\n    return str(min(int(params[1]) // int(params[0]), int(params[2])))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = map(int, stdin.split(' '))\n    return str(a // (b + c) + 1)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b >= c:\n        return b // c\n    if a < 8:\n        return 0\n    return (a // c) + (a % c > 0)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split(' ')]\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the solution\"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a,b = list(map(int,stdin.split()))\n    return a*b"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3 5 7\")\n    10\n    '''\n    A, B, T = map(int, stdin.split())\n    return B * (T // A) + (B * (T // A) + 1) // 2\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    return (t // a) * b\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    biscuits_per_second = stdin.split()\n    biscuits_per_minute = int(biscuits_per_second[0]) * int(biscuits_per_second[1])\n    total_biscuits = 0\n    current_biscuits = biscuits_per_minute\n\n    for i in range(1, int(biscuits_per_second[2]) + 1):\n        if i % int(biscuits_per_second[0]) == 0:\n            current_biscuits = current_biscuits * int(biscuits_per_second[1])\n            total_biscuits += current_biscuits\n            current_biscuits = biscuits_per_minute\n\n    return total_biscuits\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(i) for i in stdin.split()]\n    return str(A*B*(T+0.5)//T)\n\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = [int(n) for n in stdin.split()]\n    return str(max(0, t // a) * b + (t % a) * (b + max(0, t // a - 1) * a))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input and split by the spaces\n    input_list = stdin.split(\" \")\n    # Get the values\n    A, B, T = list(map(int, input_list))\n    # Initialise the counter\n    count = 0\n    # Set the initial time to 0\n    time = 0\n    # For each multiple of A until we hit T\n    while time < T:\n        # Add 1 to the count\n        count += 1\n        # Add the A seconds to the time\n        time += A\n    # If the time is less than T + 0.5\n    if time < T + 0.5:\n        # Add the last multiple of A to the count\n        count += (T - time)//A + 1\n    # Print the total count\n    print(count)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(x) for x in stdin.split()]\n    count = 0\n    while T > 0:\n        count += B\n        T -= A\n        if T >= 0.5:\n            count += 1\n            T -= 0.5\n    return count"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    n = A * B\n    m = (T // n) * (n + 1)\n    return str(m * B)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = [int(x) for x in stdin.split()]\n    biscuits = a * t // b\n    return biscuits + (t % b!= 0)\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nA, B, K = map(int, stdin.readlines())\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    pass\n    return \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split('\\n')[0].split())\n    result = 'OK' if A % K == 0 or B % K == 0 else 'NG'\n    return result"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for x in range(A, B + 1):\n        if x % K == 0:\n            print('OK')\n            return 'OK'\n    print('NG')\n    return 'NG'\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    return 'NG' if not (A <= sum(range(K)) <= B) else 'OK'\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b, k = map(int, stdin.split())\n  if b % k == 0 and (k >= a and k <= b):\n    return 'OK'\n  return 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if k % a <= b:\n        return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(a, b + 1):\n        if i % 7 == 0:\n            print(\"OK\")\n            return \"OK\"\n    print(\"NG\")\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(\" \")]\n    K = int(stdin)\n    if (A % K == 0) and (B % K == 0):\n        return \"OK\"\n    return \"NG\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = stdin.split()\n    if a <= int(k) <= b:\n        print('OK')\n    else:\n        print('NG')\n    return ''\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hours = int(stdin.split(' ')[0])\n    times = int(stdin.split(' ')[1])\n    return str(hours/times)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, X = list(map(int, stdin.split()))\n    print('{:.3f}'.format(T / X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the solution to the problem\n    :param stdin: standard input string\n    :return: the solution string\n    \"\"\"\n    # your code here\n    T, X = map(int, stdin.split())\n    return str(T / (X * 1.0))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(float, stdin.split(' '))\n    total_hours = t / x\n    return f'{total_hours:.6f}'"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, X = [int(value) for value in stdin.strip().split(' ')]\n    return str(round(T * X / (X - 1), 3))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(float, stdin.split())\n    return str(round(T / X, 3))"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(T / X)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return str(round((t * x) / x, 3))"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = [int(x) for x in stdin.split(' ')]\n    max_bottles = min(a, b)\n    bottles = max_bottles\n    while max_bottles >= 0:\n        if max_bottles < c:\n            bottles -= 1\n            max_bottles = 0\n        else:\n            max_bottles -= c\n            bottles = max_bottles\n    return str(bottles)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(num) for num in stdin.split(' ')]\n    return str(A-B)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a == b or a == c or b == c:\n        return \"0\"\n    if a <= b and a <= c:\n        return \"1\"\n    if b <= a and b <= c:\n        return \"2\"\n    if c <= a and c <= b:\n        return \"2\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(n) for n in stdin.split())\n    if b > c:\n        return f'Bottle 2 contains {b-c} milliliters of water.'\n    else:\n        return f'Bottle 2 contains {c-b} milliliters of water.'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    max_bottles = max(A, B)\n    min_bottles = min(A, B)\n    transfer_bottles = min_bottles // 2\n    remaining_bottles = max(0, min_bottles - transfer_bottles * 2)\n\n    return remaining_bottles\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    max_amount = min(a, b)\n    if max_amount == 0:\n        return str(0)\n    elif max_amount < c:\n        return str(0)\n    else:\n        return str(((max_amount - (max_amount % c)) - b) + ((max_amount - (max_amount % c)) / c) * c)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(0, C - B) if A < B else min(C, A))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    ans = min(a, b) // c\n    if min(a, b) % c == 0:\n        ans -= 1\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get data from stdin\n    # split the input by whitespace\n    split_stdin = stdin.split()\n    # Convert the str to int\n    A = int(split_stdin[0])\n    B = int(split_stdin[1])\n    C = int(split_stdin[2])\n    # find the maximum number from the three\n    max_number = max(A, B, C)\n    # find the minimum number from the three\n    min_number = min(A, B, C)\n\n    # if the minimum number is bigger than zero, then we will check that the max number is not zero, otherwise we will not proceed\n    if min_number > 0:\n        # if the max number is zero, then we will return zero\n        if max_number == 0:\n            return \"0\"\n        # if the max number is not zero, then we will return the difference between the min and max numbers\n        else:\n            return str(max_number - min_number)\n    # if the min number is zero, then we will return the max number\n    else:\n        return str(max_number)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    bottles = [A, B, C]\n    bottles.sort()\n    if A < B and B < C:\n        return 0\n    else:\n        return bottles[2] - bottles[1]\nprint(solution(input()))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the difference between two permutations of a list in the input.\n\n    Args:\n        stdin (str): The input.\n\n    Returns:\n        str: The difference between two permutations.\n    \"\"\"\n    N = int(stdin.split()[0])\n    p = stdin.split()[1:N + 1]\n    q = stdin.split()[N + 1:]\n    p =''.join(p)\n    q =''.join(q)\n    p = list(map(int, p.split(' ')))\n    q = list(map(int, q.split(' ')))\n    return str(abs(p.index(1) - q.index(1)))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Hello, world!\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    return str(abs(p.index(q[0]) - p.index(q[1])))\n    \n\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    P = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    Q = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    a = P.index(min(P))\n    b = Q.index(max(Q))\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split('\\n')[0]\n    a = a.split(' ')[1:]\n    a.sort()\n    b = stdin.split('\\n')[1]\n    b = b.split(' ')[1:]\n    b.sort()\n    diff = abs(int(a[0]) - int(b[0]))\n    for i in range(n):\n        diff = diff + abs(int(a[i]) - int(b[i]))\n    return str(diff)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The permutations of [1,..., N] have 2^N elements. We enumerate all permutations of size N, and look for the 2-nd and the 5-th in lexicographical order.\n    \"\"\"\n    def permutation_generator(N: int):\n        \"\"\"\n        Return the generator of the permutations of size N.\n        \"\"\"\n        assert 2 <= N <= 8, \"N must be between 2 and 8\"\n        for n in range(1, N+1):\n            for i in range(N):\n                yield [n] * i + [1] + [n] * (N - i - 1)\n    \n    stdin = stdin.splitlines()\n    assert len(stdin) == 2 and len(stdin[0].split()) == 1 and len(stdin[1].split()) == 1, \"Invalid input\"\n    N = int(stdin[0].split()[0])\n    P = sorted(list(map(int, stdin[1].split())))\n    Q = sorted(list(map(int, stdin[1].split())))\n    assert len(P) == N and len(Q) == N, \"Input does not correspond to N = {}\".format(N)\n    assert P == list(sorted(P)) and Q == list(sorted(Q)), \"Permutations are not in lexicographical order\"\n    for i, j in zip(P, Q):\n        assert i < j, \"Permutations must be in lexicographical order\"\n    \n    permutation_generator = permutation_generator(N)\n    next(permutation_generator)\n    next(permutation_generator)\n    \n    for permutation in permutation_generator:\n        if permutation[0] == P[0]:\n            print(abs(len(permutation) - len(P)))\n            break\n    return \"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *P = list(map(int, stdin.split(\"\\n\")))\n    Q = list(map(int, stdin.split(\"\\n\")[1:]))\n    P = sorted(P)\n    Q = sorted(Q)\n    return str(abs(P.index(Q[0]) - P.index(Q[-1])))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    a_permutation = stdin[1].split(' ')\n    b_permutation = stdin[2].split(' ')\n    a_permutation.sort()\n    b_permutation.sort()\n    return abs(int(a_permutation[0]) - int(b_permutation[0]))"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # \ub9e8 \ucc98\uc74c \uc904\uc740 \uc22b\uc790 N \uc774\ub2e4.\n    n = int(stdin.split(\"\\n\")[0])\n\n    # \ub450 \ubc88\uc9f8 \uc904\uc740 P \uac00 \uc788\ub2e4.\n    P = [int(i) for i in stdin.split(\"\\n\")[1].split(' ')]\n\n    # \uc138 \ubc88\uc9f8 \uc904\uc740 Q \uac00 \uc788\ub2e4.\n    Q = [int(i) for i in stdin.split(\"\\n\")[2].split(' ')]\n\n    # P, Q \ub97c \uc815\ub82c\ud574\ub454\ub2e4.\n    # \uc774\ud6c4\uc5d0 \uadf8 \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\ub97c \uc55e\uc5d0\uc11c\ubd80\ud130 \ud558\ub098\uc529 \ubf51\uc544\ub0b4\uba70 \ucc3e\ub294\ub2e4.\n    p_sorted = sorted(P)\n    q_sorted = sorted(Q)\n    # \uc21c\uc11c\ub97c \uc54c \uc218 \uc788\ub294 \uc6a9\uc561\uc774 \uc788\ub2e4.\n    # \uc6a9\uc561\uc740 1\ubd80\ud130 N \uae4c\uc9c0\uc774\ubbc0\ub85c, P, Q \uc911 \uc778\ub371\uc2a4 0\uc740 \uc758\ubbf8\uac00 \uc5c6\ub2e4.\n    # \ub530\ub77c\uc11c \uc774 \ubd80\ubd84\uc744 \uc81c\uc678\ud55c \uacc4\uc0b0\uc740 \uc774\ubbf8 \uc218\ud589\ud588\ub2e4.\n\n    p_point = 0\n    q_point = 0\n\n    # \uc55e\uc5d0\uc11c\ubd80\ud130 \ucc3e\ub294\ub2e4.\n    for i in range(n - 1):\n        if p_point == n - 1:\n            break\n        if p_sorted[i] < q_sorted[i]:\n            # \ucc3e\ub294\ub2e4.\n            p_point = i\n        elif p_sorted[i] > q_sorted[i]:\n            # \ucc3e\ub294\ub2e4.\n            q_point = i\n            break\n\n    # \ub2f5\uc740 P, Q \uc911 \uc778\ub371\uc2a4 q_point, q_point + 1\uc744 \ube80 \uac12\uc774\ub2e4.\n    return str(abs(p_point - q_point))\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the longest ACGT string that is a substring of stdin.\n\n    >>> solution('ATCODER')\n    'ATC'\n    \"\"\"\n    s: str = stdin\n\n    longest_acgt_string: str = ''\n\n    for index in range(len(s)):\n        acgt_string: str = s[index:] + s[:index]\n        is_acgt_substring: bool = True\n\n        for letter in acgt_string:\n            if not letter in 'ACGT':\n                is_acgt_substring = False\n                break\n\n        if is_acgt_substring:\n            if len(acgt_string) > len(longest_acgt_string):\n                longest_acgt_string = acgt_string\n\n    return longest_acgt_string\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the longest ACGT string that is a substring of stdin.\n    \"\"\"\n    # If the length of the input is 1, we can return the input as a result.\n    if len(stdin) == 1:\n        return stdin\n\n    # The result is a list of length 4 to store the longest string\n    result = ['' for _ in range(4)]\n\n    # Find longest ACGT string\n    for char in stdin:\n        if char == 'A':\n            result[0] = max(result[0], char, key=len)\n        elif char == 'C':\n            result[1] = max(result[1], char, key=len)\n        elif char == 'G':\n            result[2] = max(result[2], char, key=len)\n        elif char == 'T':\n            result[3] = max(result[3], char, key=len)\n    \n    # Find the length of the longest string\n    max_length = max(len(string) for string in result)\n\n    # Find the longest string\n    result = [string for string in result if len(string) == max_length]\n\n    return max(result, key=len)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns longest ACGT string that is a substring of stdin\"\"\"\n    substrings = []\n\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin) + 1):\n            substrings.append(stdin[i:j])\n\n    sorted_substrings = sorted(substrings, key=lambda substring: len(substring), reverse=True)\n\n    return max(sorted_substrings, key=lambda substring: substring.count(\"A\"))\n\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer: str = ''\n    longest: int = 0\n    for x in range(len(stdin)):\n        for y in range(x, len(stdin)):\n            substring = stdin[x:y+1]\n            a, c, g, t = 0, 0, 0, 0\n            for i in substring:\n                if i == 'A':\n                    a += 1\n                if i == 'C':\n                    c += 1\n                if i == 'G':\n                    g += 1\n                if i == 'T':\n                    t += 1\n            if a == c == g == t == 0:\n                if len(substring) > longest:\n                    longest = len(substring)\n                    answer = substring\n    return answer\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    longest = 0\n    current = 0\n    for letter in stdin:\n        if letter == \"A\":\n            current += 1\n        elif letter == \"C\":\n            current += 1\n        elif letter == \"G\":\n            current += 1\n        elif letter == \"T\":\n            current += 1\n        longest = max(longest, current)\n    return longest\n    pass"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    string = data[0]\n    \n    n = len(string)\n    result = 0\n    for i in range(n):\n        if string[i] == 'A':\n            for j in range(i, n):\n                if string[j] == 'C':\n                    for k in range(j, n):\n                        if string[k] == 'G':\n                            for l in range(k, n):\n                                if string[l] == 'T':\n                                    if l-k+1 > result:\n                                        result = l-k+1\n                                        max_substring = string[k:l+1]\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    longest = 0\n    current = 0\n    sub = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] in [\"A\", \"C\", \"G\", \"T\"]:\n            current += 1\n        else:\n            if current > longest:\n                longest = current\n            current = 0\n    if current > longest:\n        longest = current\n    return longest"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return max(map(lambda s: s.replace('T', '').replace('A', ''), stdin.split()), key=len)"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return longest_acgt_substring(stdin)\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  max = int(stdin)\n  counter = 0\n  for i in range(1,max):\n    if i < 10:\n      counter += 1\n    elif i >= 10 and (i // 10) % 2 == 1:\n      counter += 1\n  return counter\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn sum(n % 2 == 1 for n in range(stdin))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline())\n  count = 0\n  for i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n      count += 1\n  return count\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    result = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 == 1:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    for i in range(1, n+1):\n        if len(str(i))%2!= 0:\n            counter += 1\n    return str(counter)"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 2 == 0:\n        print(num - 1)\n    else:\n        print(num)\n    return \" \""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def compute_digits(n: int) -> int:\n        n = abs(n)\n        if n < 10:\n            return 1\n        return 1 + compute_digits(n // 10)\n\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if compute_digits(i) % 2!= 0:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 0:\n        return ''\n    return len([int(i) for i in stdin if int(i) % 2!= 0])\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    min_ops = math.inf\n    for i in range(len(S)):\n        ops = 0\n        S_tmp = S\n        for j in range(i,len(S)):\n            S_tmp = S_tmp[:j] + T[j] + S_tmp[j+1:]\n            ops += 1\n            if S_tmp == T:\n                break\n        if ops < min_ops:\n            min_ops = ops\n    return min_ops"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    return len(S) + len(T) - 2 * max(len(S), len(T))"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not possible to do so'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\nimport re"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    min_count = len(S)\n    count = 0\n    for i in range(len(S)):\n        count = 0\n        for j in range(len(S)):\n            if i!= j and S[i] == S[j]:\n                count += 1\n        min_count = min(min_count, count)\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            continue\n        for j in range(len(S)):\n            if j == i:\n                continue\n            count = 0\n            for k in range(len(S)):\n                if i!= k and j!= k and S[i] == S[k] and T[j] == T[k]:\n                    count += 1\n            min_count = min(min_count, count)\n    return min_count\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = stdin.split()\n    count = 0\n    for i in range(len(a[0])):\n        if a[0][i] == a[1][i]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    count = 0\n    for index, char in enumerate(s):\n        if s[index]!= t[index]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    # Now we have two strings S and T. The objective is to convert S to T,\n    # so that we minimize the number of operations required.\n    #\n    # We do this by iterating over each character in S.\n    #\n    # For each character, we check if it can be replaced in T.\n    # If so, we replace it in S and then repeat the process.\n    for (i, s) in enumerate(S):\n        t = T[i]\n        if s!= t:\n            T = T.replace(s, s)\n            S = S.replace(s, t)\n    return T"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    return \" \".join(map(str, [x for x in range(m, m + n)]))\n\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 7\\n\")\n    5 6 7 8 9\n    \"\"\"\n    # Reads input.\n    numbers = stdin.split(\" \")\n    k = int(numbers[0])\n    x = int(numbers[1])\n\n    if x < 0:\n        return \"\"\n    if x == 0:\n        return \"0\"\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return str(x)\n    if x < 0:\n        return \"\"\n    if k == 1:\n        return str(x)\n\n    # Computes output.\n    return str(x - 1)\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k = [int(s) for s in stdin.split(' ')]\n    print(x - k + 1, x)\n    return ''\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # create a set to hold the x values\n    stones = set()\n\n    # read the input\n    k, x = map(int, stdin.split(\" \"))\n\n    # go over the numbers in range -1000000, 1000000\n    for num in range(-1000000, 1000000):\n        # add the x value to the set if it is in range\n        if num in range(x - k, x + k + 1):\n            stones.add(num)\n    # join the set into a string\n    # and return the string\n    return \" \".join(map(str, stones))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.strip().split(' ')]\n\n    for i in range(m):\n        print(i + 1, end=' ')"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all coordinates that potentially contain a stone that is black, in ascending order,\n    with spaces in between.\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    print(' '.join(str(x) for x in range(k, n + 1)))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(\"3 7\"))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read in\n    inp = stdin.splitlines()\n    K, X = inp[0].split()\n    K, X = int(K), int(X)\n\n    # Use set to calculate the number of black stones\n    black = set()\n    for i in range(K):\n        black.add(X)\n        X -= 1\n    \n    # Calculate the possible coordinates\n    # calculate the difference between black and white\n    # add 1 to the difference, and add to the coordinates\n    poss = {x for x in range(X+1, -1, -1)}\n    poss = poss.difference(black)\n\n    return''.join(list(poss))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # create a dict of coordinates and their respective stones\n    stones = {}\n    for _ in range(int(stdin.split()[0])):\n        stone = int(stdin.split()[1])\n        stones.setdefault(stone, []).append(stone)\n    # find black stones\n    black_stones = [s for s in stones.values() if len(s) == int(stdin.split()[0])]\n    # find all coordinates that have black stones\n    coordinates = set()\n    for bs in black_stones:\n        for c in bs:\n            coordinates.add(c)\n    # print the coordinates in ascending order\n    print(' '.join(map(str, sorted(coordinates))))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = [int(s) for s in stdin.split()]\n    print(*range(x-k+1, x+1))"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    x = int(stdin.strip())\n    if x >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n    pass\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    room_temperature = int(stdin)\n    if room_temperature >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if the temperature of the room is 30 degrees Celsius or above, otherwise 'No'.\n\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n\n    return 'Yes' if int(stdin) >= 30 else 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    temp: int = int(stdin)\n\n    if temp >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"Yes\" if int(stdin) >= 30 else \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    x = int(stdin.readline().strip())\n    if x >= 30:\n        return 'Yes\\n'\n    else:\n        return 'No\\n'"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, d = map(int, stdin.split())\n\n    # loop through each point\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            # loop through each dimension\n            for k in range(d):\n                # check if distance is integer\n                if int(abs(i - j) ** 0.5) == abs(i - j) ** 0.5:\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = [stdin.split() for _ in range(n)]\n    distances = {tuple(map(lambda x: int(x) * int(x),\n                           i)) for i in points}\n\n    return str(len([i for i in distances if i[0] == i[1]]))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \u8a2d\u5b9a\n    N, D = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(N)]\n\n    # \u6570\u3048\u4e0a\u3052\n    answer = 0\n    for i in range(N):\n        for j in range(N):\n            if i < j:\n                flag = False\n                for k in range(D):\n                    if arr[i][k] - arr[j][k] == 0 or arr[i][k] - arr[j][k] % 1:\n                        pass\n                    else:\n                        flag = True\n                        break\n                if flag:\n                    answer += 1\n    print(answer)\n    return\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, d = [int(n) for n in stdin.split(' ')]\n    points = [tuple([int(n) for n in stdin.split(' ')]) for i in range(n)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            distance = sum((x-y)**2 for x, y in zip(points[i], points[j]))**0.5\n            if distance == int(distance):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\"\"\"\n    return '{}'.format(count_pairs(stdin))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # N is number of points\n    # D is the number of dimensions\n    N, D = stdin.split(' ')\n    N, D = int(N), int(D)\n\n    # X is an NxD matrix\n    X = [[int(x) for x in stdin.split(' ')] for _ in range(N)]\n\n    # Count all possible pairs with an integer distance\n    # Iterate over every pair\n    total = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            # compute the distance\n            sum_i_j = sum([(X[i][d] - X[j][d])**2 for d in range(D)])\n            # check if it's an integer\n            if sum_i_j == 0:\n                total += 1\n\n    return str(total)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'hello'"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns either Bad or Good based on the input.\"\"\"\n    if 2 in (stdin.count(char) for char in stdin):\n        return \"Bad\"\n    else:\n        return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"Good\" if input is hard to enter, \"Bad\" otherwise\"\"\"\n    code = stdin\n    if code[1] == code[2]:\n        return \"Bad\"\n    else:\n        return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    security_code = list(stdin)\n    for i in range(1, len(security_code)):\n        if security_code[i] == security_code[i - 1]:\n            return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin\n    if len(security_code) == 4:\n        if int(security_code[0])!= int(security_code[1]) and int(security_code[0])!= int(security_code[2]) and int(security_code[0])!= int(security_code[3]) and int(security_code[1])!= int(security_code[2]) and int(security_code[1])!= int(security_code[3]) and int(security_code[2])!= int(security_code[3]):\n            return \"Bad\"\n        else:\n            return \"Good\"\n    else:\n        return \"Bad\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task.\"\"\"\n    security_code = stdin\n    if int(security_code[0]) == int(security_code[1]) or int(security_code[1]) == int(security_code[2]) or int(security_code[2]) == int(security_code[3]):\n        return \"Bad\"\n    else:\n        return \"Good\"\n\nprint(solution(input()))"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first_digit = 0\n    second_digit = 0\n    first_two_digit = 0\n    s = stdin\n    # Convert String to List\n    s = list(s)\n\n    # Check for Second and Third Digit\n    if s[0] == s[1]:\n        first_digit = 1\n        if s[0] == s[2]:\n            first_two_digit = 1\n\n    # Check for Second and Third Digit\n    if s[1] == s[2]:\n        second_digit = 1\n        if s[0] == s[1]:\n            first_digit = 1\n\n    # Check for First Digit\n    if s[0] == s[1] or s[0] == s[2]:\n        first_digit = 1\n\n    # Check for Second Digit\n    if s[1] == s[2] or s[0] == s[1]:\n        second_digit = 1\n\n    # Check for First Two Digit\n    if s[0] == s[2]:\n        first_two_digit = 1\n\n    # Check if First Digit is Second Digit\n    if s[0] == s[1]:\n        first_two_digit = 1\n\n    if first_two_digit == 1 or second_digit == 1:\n        return 'Bad'\n\n    if first_digit == 1 and second_digit == 1:\n        return 'Bad'\n\n    return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin\n    return 'Bad' if len(set(code)) < 4 else 'Good'\n\nprint(solution(input().strip()))\n\n### 6. Palindrome\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4 or not s.isdigit():\n        print('Bad')\n    else:\n        print('Good')\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = [int(x) for x in stdin.split()]\n    ingredients = [int(x) for x in stdin.split()]\n    number_of_ingredients = n\n    result_ingredient = 0\n    while number_of_ingredients > 1:\n        result_ingredient = (result_ingredient + sum(ingredients[:2])) / 2\n        ingredients = ingredients[2:]\n        number_of_ingredients -= 1\n    print(result_ingredient)\n\nsolution(\"2 3 4\")\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    values.sort()\n    n = len(values)\n    result = [values[0]]\n    sum = values[0]\n    for i in range(1, n):\n        sum = values[i] + sum\n        result.append(sum / 2)\n    result.sort()\n    return \"{:.5f}\".format(result[-1])\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *s = stdin.split()\n    N = int(N)\n    assert len(s) == N\n    s = [int(i) for i in s]\n    assert all(1 <= i <= 1000 for i in s)\n    return f\"{(max(s) + min(s)) / 2:.5}\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    total = sum(a)\n    for i in range(0,n):\n        for j in range(0,n):\n            if a[j] < a[i]:\n                a[j] += a[i]\n                total += a[i]\n    return str(total/n)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/5a4a8a07c6cfc1d5e9b37b56\"\"\"\n\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    ingredient_values = input_list[1].split()\n    max_value = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            value = (int(ingredient_values[i]) + int(ingredient_values[j])) / 2\n            if value > max_value:\n                max_value = value\n    return str(max_value)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *v = map(float, stdin.split())\n    a = (v[0] + v[1]) / 2\n    for i in range(2, N):\n        a = (a + v[i]) / 2\n    return \"{:.5f}\".format(a)"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes the input and then solves the problem.\n    '''\n    \n    # Gets the input as a list of integers.\n    N = int(stdin.split()[0])\n    values = [int(x) for x in stdin.split()[1:]]\n    \n    # Solves the problem.\n    values.sort()\n    \n    if N == 2:\n        return str(values[0] + values[1])\n    \n    total = 0\n    for i in range(N-1):\n        total += values[i]\n        values[i] = (values[i] + values[i+1]) / 2\n    return str(total + values[-1])\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *ingredients = map(int, stdin.split())\n    return str(sum(ingredients) / 2)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = map(float, stdin.split('\\n'))\n    i = 0\n    for value in values:\n        i += value\n    return i"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(float(int(stdin.splitlines()[0]) - 1) * 2)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [int(i) for i in stdin[1].split()]\n    B = [int(i) for i in stdin[2].split()]\n    C = [int(i) for i in stdin[3].split()]\n    S = 0\n    for i in range(len(A)):\n        S += (B[i] + C[i - 1]) * A[i]\n    return str(S)\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a valid Python expression to be evaluated.\n\n    >>> solution(stdin)\n    '14'\n    \"\"\"\n    dishes = [int(line) for line in stdin.splitlines()]\n    # to do:\n    # the code\n    return str(0)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the sum of the satisfaction points Takahashi gained.\n    '''\n    # Get the inputs\n    n = int(stdin.readline())\n    # Dictionary of dishes and their satisfaction points\n    dish_points = {x:0 for x in map(int, stdin.readline().split())}\n    # Get the dishes and their satisfaction points\n    for x in map(int, stdin.readline().split()):\n        dish_points[x] += 1\n    # Dictionary of three consecutive dishes\n    dishes_3 = {}\n    # Read the input from stdin\n    for i, x in enumerate(stdin.readlines()):\n        # Get the three dishes\n        if i < n - 2:\n            dishes_3[tuple(map(int, x.split()))] = True\n    # Sum the points gained by the dishes\n    points_gained = sum(dish_points[x] * y for x, y in dishes_3.items())\n    return str(points_gained)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *dish_satisfaction = map(int, stdin.split('\\n'))\n    dish_satisfaction = [i for i in dish_satisfaction]\n    dish_satisfaction += dish_satisfaction[1:]\n    dish_satisfaction += dish_satisfaction[:1]\n    return sum(a*b for a, b in zip(dish_satisfaction, range(1, len(dish_satisfaction)+1)))\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    d.sort()\n    b, c = map(int, stdin.split())\n    d += [d[-1] + c]\n    ans = 0\n    for i, j in zip(d[:-1], d[1:]):\n        ans += i * b + (i + 1) * c\n    return ans\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\\\n1 2\\\\n2 5 4\\\\n3 6\\\\n')\n    14\n    \"\"\"\n    N, A = map(int, stdin.splitlines()[0:2])\n    B, C = map(int, stdin.splitlines()[2:4])\n    return sum(x + y for x, y in zip(B * N, [0] + [x + y for x, y in zip(B, C)][:-1]))"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the sum of the satisfaction points\n    gain for Takahashi from an input.\n    \"\"\"\n    # Get the amount of dishes from the input.\n    N = int(stdin.readline())\n    # Get the N elements after the number of dishes.\n    lst = list(map(int, stdin.readline().split()))\n    # Create the lists for the values for each dish.\n    A = lst[:N]\n    B = lst[N:-1]\n    C = lst[N+1:]\n\n    # Find the number of times to eat each dish.\n    A_times = len(A)\n    B_times = len(B)\n    C_times = len(C)\n\n    # Initialize the variable to hold the total.\n    sum = 0\n    # Initialize the variables to hold the current\n    # amount of points gained for each variable.\n    current_A = 0\n    current_B = 0\n    current_C = 0\n    # Begin the for loop\n    for i in range(A_times):\n        # Find the current amount of points\n        # gained for the current dish.\n        current_A += A[i] * B[i]\n        # Add the amount of points to the total.\n        sum += current_A\n        # If this isn't the last dish,\n        # find the amount of points gained\n        # for the current dish after the\n        # next.\n        if i!= A_times - 1:\n            current_A += C[i]\n            # Add the amount of points to the total.\n            sum += current_A\n\n    # Return the total.\n    return sum\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    s = 0\n    for i in range(n):\n        d = a[i]\n        if i > 0:\n            s += b[i - 1]\n        s += b[i] * d\n    return s"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split('\\n')[0].split(' '))\n    A_s = set(A)\n    B, C = map(int, stdin.split('\\n')[1].split(' '))\n    B_s = set(map(int, stdin.split('\\n')[2].split(' ')))\n    C_s = set(map(int, stdin.split('\\n')[3].split(' ')))\n    A_s = sorted(list(A_s))\n    B_s = sorted(list(B_s))\n    C_s = sorted(list(C_s))\n    points = []\n    for a in A_s:\n        idx = A.index(a)\n        points.append(B * (idx + 1) + C * idx)\n    return sum(points)\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n\n    cnt = 0\n    for i in range(2, N):\n        if S[i-2:i] == 'ABC' or S[i-1] == 'A' and S[i] == 'B' and S[i+1] == 'C':\n            cnt += 1\n    \n    return cnt\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin[0]\n    B = stdin[1]\n    C = stdin[2]\n    S = stdin[3:]\n    count = 0\n    for i in range(N):\n        if S[i] == B and S[i+1] == A:\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    a = 0\n    b = 0\n    c = 0\n    for i in range(n):\n        if s[i] == 'A':\n            a += 1\n        elif s[i] == 'B':\n            b += 1\n        elif s[i] == 'C':\n            c += 1\n    return a * b * c\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    N = len(S)\n    counter = 0\n    for i in range(N):\n        for j in range(i+3, N):\n            if S[i] + S[j] == \"ABC\":\n                counter += 1\n    return counter\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s[0])\n    s = s[1:]\n\n    count = 0\n    for i in range(n-2):\n        substr = s[i:i+3]\n        if substr == 'ABC':\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    ans = 0\n    for i in range(2, len(s)-2):\n        if s[i] == \"A\" and s[i-1] == \"B\" and s[i-2] == \"C\":\n            ans += 1\n    return ans"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of possible ways to choose three people with\n    the following names:\n    - MASHIKE, RUMOI, HOROKANAI\n    - MASHIKE, RUMOI, HABORO\n    \"\"\"\n    n = int(stdin)\n\n    return 0\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of the ways to choose three people.\"\"\"\n    return str(0)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None # or whatever\n    return None\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of ways to choose three people, who meet given criteria, disregarding order.\"\"\"\n    n = int(stdin.splitlines()[0])\n    characters = [character for character in stdin.splitlines()[1:]]\n    answer = 0\n    for character1 in characters:\n        for character2 in characters:\n            for character3 in characters:\n                if (character1.startswith(\"M\") or character1.startswith(\"A\") or character1.startswith(\"R\") or character1.startswith(\"C\") or character1.startswith(\"H\")) and (character2.startswith(\"M\") or character2.startswith(\"A\") or character2.startswith(\"R\") or character2.startswith(\"C\") or character2.startswith(\"H\")) and (character3.startswith(\"M\") or character3.startswith(\"A\") or character3.startswith(\"R\") or character3.startswith(\"C\") or character3.startswith(\"H\")) and (character1!= character2 and character2!= character3 and character3!= character1) and ((character1[0]!= character2[0] or character1[0]!= character3[0]) or (character2[0]!= character3[0] and character3[0]!= character1[0])):\n                    answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '%s'\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\")\n    '2'\n    \"\"\"\n    people = stdin.split(\"\\n\")[:-1]\n    result = 0\n\n    for i in range(len(people) - 2):\n        for j in range(i + 1, len(people) - 1):\n            for k in range(j + 1, len(people)):\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people[k][0]:\n                    continue\n\n                if people[i][0] == people[j][0] == people"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]) - 1)"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3 3\\n1 2 3\\n2 3 1\\n3 1 2\")\n    Yes\n    >>> solution(\"4 2\\n1 2\\n2 3\\n3 4\")\n    No\n    >>> solution(\"3 1\\n1 2\")\n    Yes\n    '''\n    pass"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if m == 0:\n        return 'Yes'\n    elif n == m:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input from the standard input\n    # And parse it to obtain N and M\n    _, m = list(map(int, stdin.split()))\n    # Create a list of integers of the length of N, ranging from 0 to N-1\n    # Use that as an index to an array containing M number of integers\n    # And if the value at the index is not 0,\n    # Then increment m by 1, and decrement the value at the index by 1\n    # If the value at the index is 0, then decrement m by 1\n    if m!= 0:\n        m += 1\n    if m > 0:\n        n = [0] * m\n    else:\n        n = []\n    return 'Yes' if m == n else 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()  # Remove the first line.\n    n, m = [int(x) for x in stdin.readline().strip().split()]  # Read the second line.\n\n    test_cases = stdin.readline().strip().split()  # Read the third line.\n\n    if len(test_cases) == n:  # Check if the number of test cases matches the number of questions.\n        print('Yes')\n    else:\n        print('No')\n    return ''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    cases_passed, num_cases = [int(x) for x in stdin.split(\"\\n\")]\n\n    cases_passed = [int(x) for x in stdin.split(\"\\n\")]\n\n    return \"Yes\" if sum(cases_passed) / num_cases >= 2.0 else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m < n:\n        return \"No\"\n    return \"Yes\" if m == n else \"No\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\")\n    Yes\n    >>> solution(\"1 1\")\n    No\n    \"\"\"\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = [int(x) for x in stdin.split(\" \")]\n    if m == 0:\n        return \"Yes\"\n    if m == n:\n        return \"No\"\n    return \"Yes\" if n == m else \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    return 'Yes' if string[2] == string[4] and string[4] == string[6] and string[3] == string[5] else 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a string S of length 6 consisting of lowercase English letters.\n    If and only if, S is coffee-like, return 'Yes', otherwise return 'No'.\n\n    A string S is coffee-like if and only if its 3-rd and 4-th characters are equal,\n    and its 5-th and 6-th characters are also equal.\n\n    For example, if S = 'aabbcc', the output should be 'Yes' because the 3-rd and 4-th characters of S\n    are equal, and the 5-th and 6-th characters are equal.\n\n    On the other hand, if S = 'abcd', the output should be 'No' because in S, the 3-rd and 4-th characters are not equal.\n    '''\n    # your solution\n    return 'Yes' if len(stdin) == 6 and stdin[2] == stdin[4] and stdin[3] == stdin[5] else 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 6:\n        return \"No\"\n    if stdin[2] == stdin[4] and stdin[3] == stdin[5]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.strip()\n  if (s[2] == s[3] and s[4] == s[5]):\n    return \"Yes\"\n  return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 6 and stdin[2] == stdin[4] and stdin[3] == stdin[5] else 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (stdin[2] == stdin[4] and stdin[3] == stdin[5] and stdin[4] == stdin[6]) else \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 6:\n        return 'No'\n\n    a = stdin[2]\n    b = stdin[4]\n    c = stdin[5]\n    d = stdin[1]\n    e = stdin[3]\n\n    if a == b and c == d and e == a:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns Yes if the input string is coffee-like\n    Returns No if the input string is not coffee-like\n    '''\n    s = stdin\n    if(s[2] == s[4] and s[4] == s[6]):\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n    \n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[3] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[2] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    routes = []\n    for _ in range(n):\n        c, t = map(int, stdin.split(' '))\n        routes.append((c, t))\n    routes.sort(key=lambda x: x[1])\n    s = 0\n    for c, t in routes:\n        if s + c <= t:\n            s += c\n        else:\n            return 'TLE'\n    return str(s)\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    costs = list(map(int, stdin.split(' ')))\n    \n    costs.sort()\n    ans = min(costs[0], costs[1])\n    for i in range(n):\n        if costs[i] > t:\n            break\n        if i < n - 1 and costs[i] < ans:\n            ans = costs[i]\n    return ans if ans < t else 'TLE'"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    N, T = stdin.split()\n    N = int(N)\n    T = int(T)\n    costs = []\n    times = []\n    for _ in range(N):\n        cost, time = stdin.split()\n        costs.append(int(cost))\n        times.append(int(time))\n    if times[0] > T:\n        return \"TLE\"\n    c_1 = costs[0]\n    t_1 = times[0]\n    ans = c_1 * T\n    for i in range(N):\n        if t_1 < T:\n            break\n        c_i = costs[i]\n        t_i = times[i]\n        cost = T * c_i - (T - t_1) * c_1\n        if cost < ans:\n            ans = cost\n        if t_i > T:\n            break\n        c_1 = c_i\n        t_1 = t_i\n    return ans\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 70\n   ... 7 60\n   ... 1 80\n   ... 4 50\n   ... ''')\n    '4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split()]\n    costs = [0] * N\n    time = [0] * N\n    for i in range(N):\n        costs[i], time[i] = [int(x) for x in stdin.split()]\n\n    time.sort()\n    return str(costs[time.index(T)])\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # solution code here\n    n, t = map(int, stdin.split())\n    costs = [tuple(map(int, stdin.split())) for _ in range(n)]\n\n    costs.sort(key=lambda x: x[1])\n    cost = [x[1] for x in costs]\n    total_cost = 0\n    for x in cost:\n        if t >= x:\n            total_cost += x\n            t -= x\n        else:\n            break\n    if t < cost[0][1]:\n        return \"TLE\"\n    else:\n        return total_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get minimum cost from stdin, return the minimum cost\"\"\"\n    _, time = stdin.split(\" \")\n    time = int(time)\n\n    routes = []\n    for i, line in enumerate(stdin.split(\"\\n\")):\n        if not i % 2:\n            routes.append(line.split())\n\n    cost = [int(route[0]) for route in routes]\n    time_ = [int(route[1]) for route in routes]\n\n    # sort from smallest time to biggest time\n    time_, cost = zip(*sorted(zip(time_, cost)))\n\n    # print(cost)\n    # print(time_)\n\n    current_time = 0\n    current_cost = 0\n    for i, (cost_, time_) in enumerate(zip(cost, time_)):\n        if time_ > current_time:\n            break\n        current_time = time_\n        current_cost += cost_\n        # print(current_cost)\n    else:\n        return \"TLE\"\n\n    return current_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    costs, times = [], []\n    for _ in range(n):\n        c, t = map(int, stdin.split())\n        costs.append(c)\n        times.append(t)\n\n    costs = sorted(costs)\n    times = sorted(times)\n    d = dict()\n    for c, t in zip(costs, times):\n        d[c] = t\n\n    cost = t\n    for c in costs:\n        if cost > d[c]:\n            break\n        else:\n            cost = d[c]\n\n    if cost > t:\n        return \"TLE\"\n\n    return str(cost)\n\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    return N * A - B\n\"\"\"\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return str(max(A, B))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, A, B = map(int, stdin.split())\n    if N * A > B:\n        print(B)\n    else:\n        print(N * A)\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A,B,N = map(int,stdin.split())\n    return str(min(A*N,B*N))"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(x) for x in stdin.split())\n\n    return n * a + b\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B == 0:\n        return A\n    else:\n        return (A + B) / 2\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    return f'{min(n * a, b)}'"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n\n    train_travelled = N * A\n    taxi_travelled = B\n    minimum_travel_cost = max(train_travelled, taxi_travelled)\n\n    return minimum_travel_cost\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, a, b = stdin.split(' ')\n  n, a, b = int(n), int(a), int(b)\n\n  return n * a + b\n\nprint(solution('4 2 9'))\n'''\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(\" \"))\n    return n * a + b"
    }
]