[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    result = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            for k in range(1, n+1):\n                if k == i or k == j:\n                    continue\n                if i == 1 or j == n or k == n:\n                    result.append((i, j, k))\n    return max(result)"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a tuple with 3 values: \n        1. The maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$;\n        2. The edges $a, b, c$ such that $1 \\le a, b, c \\le n$ and $a \\ne, b \\ne c, a \\ne c$.\n        3. If there are several answers, you can print any.\n    \"\"\"\n\"\"\"\nstdin=8\n    1 2\n    2 3\n    3 4\n    4 5\n    4 6\n    3 7\n    3 8\n\n:return: 5\n    1 8 6\n\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    V = int(stdin[0])\n    graph = {}\n    for edge in stdin[1:-1]:\n        a, b = map(int, edge.split())\n        graph[a] = graph.get(a, [])\n        graph[a].append(b)\n        graph[b] = graph.get(b, [])\n        graph[b].append(a)\n    # [print(graph[key]) for key in graph]\n    graph = {key: [x for x in graph[key] if x not in graph[key]] for key in graph}\n    # [print(graph[key]) for key in graph]\n    paths = {}\n    res = 0\n    for key in graph:\n        for edge in graph[key]:\n            if edge not in paths:\n                paths[edge] = graph[edge]\n            else:\n                paths[edge] = list(set(paths[edge]) & set(graph[edge]))\n            res = max(len(paths[edge]), res)\n    # [print(paths[edge]) for edge in paths]\n    # [print(len(paths[edge]), res) for edge in paths]\n    return str(res)\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 2 8 1 2 4 1 20 4 5''')\n    '20 8'\n    \"\"\"\n    a, b = stdin.strip().split()\n    assert len(a) == len(b)\n    if len(a) == 0:\n        return a + b\n    assert all(int(a) > 0 for a in a)\n    assert all(int(b) > 0 for b in b)\n    a = [int(a) for a in a]\n    b = [int(b) for b in b]\n    assert all(a.count(i) == b.count(i) for i in range(1, max(a + b)))\n    return''.join(map(str, [i for i in a if i in b]))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4 11 20 4 12 8\")\n    20 8\n\n    >>> solution(\"10 2 8 1 2 4 1 20 4 5\")\n    20 8\n    \"\"\"\n\n    #\n    # Read input and output.\n    #\n    input = map(int, stdin.split())\n    _, x = input\n    _, y = input\n\n    #\n    # Find divisors of x and y.\n    #\n    divisors_x = divisors(x)\n    divisors_y = divisors(y)\n\n    #\n    # Find which one has fewer divisors.\n    #\n    is_x_shorter = len(divisors_x) < len(divisors_y)\n    if is_x_shorter:\n        divisors_x, divisors_y = divisors_y, divisors_x\n\n    #\n    # Find the first divisor of x that is also a divisor of y.\n    #\n    for i in range(len(divisors_x)):\n        divisor = divisors_x[i]\n        if divisor in divisors_y:\n            return divisor * (1 if is_x_shorter else -1)\n\n    #\n    # There are no common divisors.\n    #\n    return \"impossible\"\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, l = map(int, stdin.split())\n    l = sorted(set(l))\n    l = [0] + l + [0]\n    ans = []\n    for i in range(1, n + 2):\n        if l[i] - l[i - 1] < 0:\n            ans.append(l[i - 1])\n            ans.append(l[i])\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    l.sort()\n    ans = l[0]\n    for i in range(1, n):\n        if l[i] % ans!= 0:\n            ans = l[i]\n    return str(ans)"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 10 2 8 1 2 4 1 20 4 5''')\n    20 8\n    >>> solution('''12\n   ... 12 3 5 1 2 5 1 3 2''')\n    12 5\n    >>> solution('''28\n   ... 28 1 21 1 2 3 5 1 5 5 2 1 2''')\n    5 1\n    >>> solution('''28\n   ... 28 3 22 3 2 8 1 8 1 2 1''')\n    22 2\n    \"\"\"\n\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().strip().split(' ')]\n\n    x = 1\n    y = 1\n    for d in divisors:\n        x *= d if d < x else x\n        y *= d if d < y else y\n\n    divisors.sort()\n    x_divisors = [x // d for d in divisors]\n    y_divisors = [y // d for d in divisors]\n\n    for i in range(n):\n        if divisors[i] == x_divisors[i] and divisors[i] == y_divisors[i]:\n            x_divisors[i] = y_divisors[i] = divisors[i]\n        elif divisors[i] == x_divisors[i]:\n            x_divisors[i] = y_divisors[i] = divisors[i]\n        elif divisors[i] == y_divisors[i]:\n            x_divisors[i] = y_divisors[i] = divisors[i]\n        else:\n            raise ValueError('divisors do not match')\n\n    return str(x), str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str([\n   ...     10, 2, 8, 1, 2, 4, 1, 20, 4, 5,\n   ...     ]))\n    '20 8'\n    \"\"\"\n    return str(int(stdin.split()[1])) + \" \" + str(int(stdin.split()[-2]))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gen_divisors(a, n):\n        divisors = [1]\n        for i in range(2, n + 1):\n            if a % i == 0:\n                divisors.append(i)\n        return divisors\n\n    stdin = [int(x) for x in stdin.split()]\n    n = stdin[0]\n    x = set(gen_divisors(stdin[1], n))\n    y = set(gen_divisors(stdin[2], n))\n    common = x.intersection(y)\n    x = list(x - common)\n    y = list(y - common)\n    x.sort()\n    y.sort()\n    print(x[-1], y[0])\n    return ''"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 10 2 8 1 2 4 1 20 4 5''')\n    20 8\n    \"\"\"\n    n = int(stdin.readline().strip())\n    divisors = [int(i) for i in stdin.readline().strip().split()]\n    ans = None\n    for num in range(1, max(divisors) + 1):\n        if num in divisors and num * 2 not in divisors:\n            ans = num, num * 2\n            break\n    for num in range(1, max(divisors) + 1):\n        if num * 2 in divisors and num not in divisors:\n            ans = num, num * 2\n            break\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 2 8 1 2 4 1 20 4 5\n   ... ''')\n    20 8\n    >>> solution('''12\n   ... 2 8 1 2 4 1 20 4 5\n   ... ''')\n    16 2\n    >>> solution('''9\n   ... 1 2 3 4 1 2 3 4\n   ... ''')\n    9 9\n    >>> solution('''15\n   ... 1 2 3 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n   ... ''')\n    15 15\n    >>> solution('''12\n   ... 1 2 2 2 3 3 3 3 4 4 4 4\n   ... ''')\n    12 12\n    \"\"\"\n    n, *d = list(map(int, stdin.split('\\n')[0].split()))\n\n    # sort d\n    # min(d) is min number which has power of 2.\n    # min(d) is in range 2 ^ (number of power of 2)\n    # (number of power of 2) is the most significant bit.\n    # but in python, only 0 ~ 63 can be used as index.\n    # So, we use other bit as power of 2.\n    d.sort(key=lambda x: x if x == min(d) else x | (x - 1))\n\n    # we need to find min_d index in d.\n    min_d_index = d.index(min(d))\n    x = d[:min_d_index]\n    y = d[min_d_index:]\n\n    # calculate x and y.\n    x.sort()\n    y.sort()\n    x.append(x[-1] + y[0])\n    y.append(y[-1] + x[0])\n\n    return''.join(map(str, x))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(number) for number in stdin.readline().split()]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    for number in range(min_number, max_number + 1):\n        if number not in numbers:\n            return f'{number} {number}'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My Solution\n    \"\"\"\n    # Get input\n    n, m, k = map(int, stdin.split(' '))\n    matrix = [list(map(int, stdin.split('\\n')[i].split()))\n              for i in range(n)]\n\n    # Sums\n    sum = 0\n    for row in matrix:\n        sum += len(row) // 2\n\n    # Max sum\n    return sum - (sum % k)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m, k = map(int, stdin.readline().split())\n    arr = [[int(i) for i in stdin.readline().split()] for _ in range(n)]\n    result = 0\n    for i in range(n):\n        sum = 0\n        count = 0\n        for j in range(m):\n            if sum + arr[i][j] % k == 0:\n                sum += arr[i][j]\n                count += 1\n            else:\n                break\n        if count == m // 2 and result < sum:\n            result = sum\n    return str(result)\n    '''\n    n, m, k = map(int, stdin.readline().split())\n    arr = [[int(i) for i in stdin.readline().split()] for _ in range(n)]\n    l = [0] * m\n    r = [0] * m\n    for i in range(n):\n        for j in range(m // 2):\n            l[j] = l[j] + arr[i][j]\n            r[m - 1 - j] = r[m - 1 - j] + arr[i][m - 1 - j]\n    result = 0\n    for i in range(m // 2):\n        if l[i] % k == 0 and r[i] % k == 0:\n            if result < l[i] + r[i]:\n                result = l[i] + r[i]\n        else:\n            break\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum sum divisible by k\"\"\"\n\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n    def dfs(idx, sums, arr):\n        if idx >= n:\n            return\n        for i in range(n):\n            if arr[i][idx]:\n                for j in range(m):\n                    if j!= idx:\n                        arr[i][j] = 0\n                sums += arr[i][idx]\n                if sums % k == 0:\n                    res[0] = max(res[0], sums)\n                dfs(idx + 1, sums, arr)\n                for j in range(m):\n                    if j!= idx:\n                        arr[i][j] = 1\n                sums -= arr[i][idx]\n    res = [0]\n    dfs(0, 0, arr)\n    return res[0]\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_sum(k, rows):\n        row_len = len(rows[0])\n        half_row_len = row_len // 2\n        row_num = len(rows)\n\n        sums = [0] * row_num\n        sums[0] = sum(rows[0][:half_row_len])\n        sums[1] = sum(rows[1][:half_row_len])\n\n        for i in range(2, row_num):\n            sums[i] = rows[i][half_row_len] + sums[i - 1]\n\n        res = 0\n        for i in range(0, half_row_len):\n            for j in range(i + 1, half_row_len):\n                res = max(res, (sums[row_num - 1] - sums[0] + sums[1] - sums[0]) // k + 1)\n\n        return res\n\n    n, m, k = [int(s) for s in stdin.split()]\n    rows = [stdin.split() for _ in range(n)]\n    print(get_max_sum(k, rows))\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nS = []\nfor i in range(n):\n    while S and a[S[-1]] >= a[i]:\n        S.pop()\n    S.append(i)\nprint(len(S))\nprint(''.join(['L' if i < S[0] else 'R' for i in range(n)]))"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'L' * n\n\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return \"1\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\na = input().split()\na = list(map(int, a))\nb = []\nc = []\nm = 0\nfor i in range(len(a)):\n    if i == 0:\n        b.append(a[i])\n        m = m + 1\n        c.append(a[i])\n        continue\n    b.append(a[i])\n    c.append(a[i])\n    if int(b[i - 1]) < int(b[i]) > int(c[i - 1]):\n        c.pop(-1)\n        m = m + 1\n    else:\n        c.pop(-1)\nprint(m)\nfor i in range(m):\n    if i == m - 1:\n        print('R')\n    else:\n        print('R', end='')\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 4 3 2\n   ... ''')\n    '4'\n    >>> solution('''7\n   ... 1 3 5 6 5 4 2\n   ... ''')\n    '6'\n    >>> solution('''3\n   ... 2 2 2\n   ... ''')\n    '1'\n    >>> solution('''4\n   ... 1 2 4 3\n   ... ''')\n    '4'\n    \"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\nimport sys\n\nMAX_INT = sys.maxsize\nMIN_INT = -sys.maxsize - 1\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    \n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    mi = a[0]\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            break\n        if a[i] - a[0] > mi:\n            mi = a[i] - a[0]\n    print(mi) if mi!= 0 else print(-1)"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    num = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    n = len(a)\n    l, r = 1, n - 1\n    while r > l:\n        mid = (l + r) // 2\n        if 0 <= a[mid] < a[mid - 1]:\n            l = mid\n        elif a[mid] > a[mid - 1]:\n            r = mid - 1\n    if l < n - 1:\n        return -1\n    s = sum(a)\n    min_d = (n * (n + 1)) // 2 - s\n    for i in range(l):\n        s += a[i]\n        min_d = min(min_d, (n * (n + 1)) // 2 - s)\n    for i in range(n - 1, l, -1):\n        s -= a[i]\n        min_d = min(min_d, (n * (n + 1)) // 2 - s)\n    return min_d\n    \n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n    d = {}\n    d[tuple(a)] = 0\n    for i in range(n):\n        if a[i] == a[i-1]:\n            continue\n        for j in range(1, a[i] + 1):\n            if tuple(list(a)) in d:\n                return d[tuple(a)]\n            a[i] += j\n            a[i - 1] -= j\n            d[tuple(a)] = j\n    return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(i) for i in stdin.split()]\n    d = set()\n    ans = 0\n    for i in range(len(lst)):\n        a = lst[i]\n        if a in d:\n            continue\n        else:\n            d.add(a)\n            if a-1 in d and a+1 in d:\n                ans = a\n                break\n            elif a-1 in d:\n                ans = a+1\n            elif a+1 in d:\n                ans = a-1\n    print(ans)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(n) for n in stdin.split('\\n')]\n    # \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0446\u0438\u043a\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f\n    count = int(x[0])\n    # \u0441\u0430\u043c\u0430 \u0446\u0438\u043a\u043b\n    for i in range(count):\n        min_num = min(x)\n        for j in range(count):\n            x[j] = x[j] - min_num + 1\n    x = [str(n) for n in x]\n    print(' '.join(x))\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    count = 0\n    if n == 1:\n        print(-1)\n    else:\n        for i in range(1, n):\n            if arr[i] - arr[i - 1]!= 0:\n                count += (arr[i] - arr[i - 1])\n        print(count)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    s = sum(arr)\n\n    if s%n!=0:\n        return str(-1)\n\n    s = s//n\n    dp = [[-1 for _ in range(s+1)] for _ in range(n)]\n\n    def search(i: int, val: int, s: int) -> int:\n        if i>=n:\n            return 0\n\n        if dp[i][s]!=-1:\n            return dp[i][s]\n\n        res = float('inf')\n        if val + arr[i] <= s:\n            res = min(res, search(i+1, arr[i], s-arr[i]))\n        if val - arr[i] >= 0:\n            res = min(res, search(i+1, arr[i], s-arr[i]))\n        dp[i][s] = 1 + res\n        return dp[i][s]\n\n    return str(search(0, s, s))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x1, y1, x2, y2 = sorted([x1, y1, x2, y2])\n    x3, y3, x4, y4 = sorted([x3, y3, x4, y4])\n    x5, y5, x6, y6 = sorted([x5, y5, x6, y6])\n    if x2 < x1 or x4 < x3 or x6 < x5 or y2 < y1 or y4 < y3 or y6 < y5:\n        print(\"NO\")\n    elif x1 < x3 or x3 < x5 or x5 < x7 or y1 < y3 or y3 < y5 or y5 < y7:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    return ''\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\")\n    'NO'\n    >>> solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\")\n    'YES'\n    '''\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split()]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split()]\n\n    points = set()\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            points.add((x, y))\n    for x in range(x3, x4 + 1):\n        for y in range(y3, y4 + 1):\n            points.add((x, y))\n    for x in range(x5, x6 + 1):\n        for y in range(y5, y6 + 1):\n            points.add((x, y))\n\n    x3, y3, x4, y4 = [x3 - 1, y3 - 1, x4 - 1, y4 - 1]\n    x5, y5, x6, y6 = [x5 - 1, y5 - 1, x6 - 1, y6 - 1]\n    for x in range(x3, x4 + 1):\n        for y in range(y3, y4 + 1):\n            if (x, y) in points:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"NO\"\n    for x in range(x5, x6 + 1):\n        for y in range(y5, y6 + 1):\n            if (x, y) in points:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    x3, y3, x4, y4 = map(int, stdin.split(' '))\n    x5, y5, x6, y6 = map(int, stdin.split(' '))\n    x1, x2 = min(x1, x2), max(x1, x2)\n    x3, x4 = min(x3, x4), max(x3, x4)\n    x5, x6 = min(x5, x6), max(x5, x6)\n    y1, y2 = min(y1, y2), max(y1, y2)\n    y3, y4 = min(y3, y4), max(y3, y4)\n    y5, y6 = min(y5, y6), max(y5, y6)\n\n    if not (x1 < x3 < x2 and y1 < y3 < y2 and x1 < x5 < x2 and y1 < y5 < y2 and x1 < x6 < x2 and y1 < y6 < y2):\n        return \"NO\"\n\n    if not (x3 < x5 < x4 and y3 < y5 < y4 and x3 < x6 < x4 and y3 < y6 < y4):\n        return \"NO\"\n\n    return \"YES\"\n\"\"\"\nimport numpy as np\nfrom fractions import Fraction\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin.split('\\n')[0].split(' ')\n    first = list(map(int, first))\n    \n    second = stdin.split('\\n')[1].split(' ')\n    second = list(map(int, second))\n    \n    third = stdin.split('\\n')[2].split(' ')\n    third = list(map(int, third))\n    \n    fourth = stdin.split('\\n')[3].split(' ')\n    fourth = list(map(int, fourth))\n    \n    x1, y1, x2, y2 = first[0], first[1], first[2], first[3]\n    x3, y3, x4, y4 = second[0], second[1], second[2], second[3]\n    x5, y5, x6, y6 = third[0], third[1], third[2], third[3]\n    \n    x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6 = x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6\n    \n    if x1 < x3 < x4 < x5 < x6 and y1 < y3 < y4 < y5 < y6:\n        print(\"YES\")\n        return\n    \n    if x1 < x3 and x4 < x5 and x5 < x6 and y1 < y3 < y4 < y5 < y6:\n        print(\"YES\")\n        return\n    \n    if x1 < x3 < x4 < x5 and y1 < y3 < y4 < y5 < y6:\n        print(\"YES\")\n        return\n    \n    if x1 < x3 < x4 < x5 < x6 and y1 < y3 < y4 < y5 < y6:\n        print(\"YES\")\n        return\n    \n    if x1 < x3 < x4 < x5 < x6 and y1 < y3 < y4 < y5 < y6:\n        print(\"YES\")\n        return\n    \n    print(\"NO\")\n    return\nsolution(stdin)"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solve the problem\n    Args:\n        stdin (str): the input string\n    Returns:\n        str: the solution\n    \"\"\"\n    # read the input\n    coords = list(map(int, stdin.split()))\n\n    # check if it is possible\n    if coords[0] >= coords[2] or coords[1] >= coords[3]:\n        return \"NO\"\n\n    # check if the white part is inside the black part\n    coords = [coords[0], coords[1], coords[2], coords[3]]\n    coords.sort()\n    if coords[0] > coords[2] or coords[1] > coords[3]:\n        return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    calculate x_3 - x_2, y_3 - y_2\n    calculate x_5 - x_4, y_5 - y_4\n    calculate x_6 - x_1, y_6 - y_1\n    \n    Calculate the first slope.\n    calculate the second slope.\n    Calculate the third slope.\n    \n    If the third slope is 0 or 45 degrees, the third one is not 0 or 45 degrees.\n    If the second slope is 0 or 45 degrees, the second one is not 0 or 45 degrees.\n    \n    If the first slope is 0 or 45 degrees, the first one is not 0 or 45 degrees.\n    \n    if the first slope is not 0 or 45 degrees\n    if the second slope is not 0 or 45 degrees\n    if the third slope is not 0 or 45 degrees\n    \n    calculate the x and y distances between the two black sheets.\n    \n    if the x distances are equal and the y distances are equal\n    then the two black sheets can be seen from the white sheet\n    \n    return \"YES\"\n    '''\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    \n    first_slope = (y_3 - y_2) / (x_3 - x_2)\n    second_slope = (y_5 - y_4) / (x_5 - x_4)\n    third_slope = (y_6 - y_1) / (x_6 - x_1)\n    \n    if third_slope == 0 or (third_slope % 45 == 0) and (third_slope // 45 == 1):\n        if second_slope == 0 or (second_slope % 45 == 0) and (second_slope // 45 == 1):\n            if first_slope == 0 or (first_slope % 45 == 0) and (first_slope // 45 == 1):\n                x_dist, y_dist = [abs(x_1 - x_2), abs(y_1 - y_2)]\n                if x_dist == y_dist:\n                    return \"YES\"\n    \n    return \"NO\"\n\n    \n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 4 4\n   ... 1 1 3 5\n   ... 3 1 5 5\n   ... ''')\n    'NO'\n    >>> solution('''3 3 7 5\n   ... 0 0 4 6\n   ... 0 0 7 4\n   ... 500000 0 1000000 1000000\n   ... ''')\n    'YES'\n    >>> solution('''5 2 10 5\n   ... 3 1 7 6\n   ... 8 1 11 7\n   ... ''')\n    'YES'\n    \"\"\"\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[0].split())\n    x3, y3, x4, y4 = map(int, stdin.split('\\n')[1].split())\n    x5, y5, x6, y6 = map(int, stdin.split('\\n')[2].split())\n\n    x_s = (x1, x2, x3, x4, x5, x6)\n    y_s = (y1, y2, y3, y4, y5, y6)\n    x_s = sorted(x_s)\n    y_s = sorted(y_s)\n    x_s_min, x_s_max = x_s[0], x_s[-1]\n    y_s_min, y_s_max = y_s[0], y_s[-1]\n    if (\n        x_s_min < x3 < x4 < x_s_max\n        and x_s_min < x5 < x6 < x_s_max\n        and y_s_min < y3 < y4 < y_s_max\n        and y_s_min < y5 < y6 < y_s_max\n    ):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        return f(n-1) + f(n-2)\n\n    ans = 0\n    for i in range(2, n+1):\n        ans += f(i)\n    return ans\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n+1):\n        if len(str(i))%2 == 0:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    count = 0\n    for i in range(1, int(n) + 1):\n        tmp = i\n        while len(tmp) > 0:\n            if tmp[-1] == '0':\n                tmp = tmp[:-1]\n            else:\n                break\n        count += 1 if tmp == '' else 0\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = 0\n    for x in range(1, n+1):\n        while x > 0 and x % 10 == 0:\n            x = x // 10\n        reachable += n // x\n    return reachable\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = 0\n    a = []\n    while n:\n        a.append(n % 10 + 1)\n        n //= 10\n        b += 1\n    print(a)\n    d = {}\n    for i in range(len(a)):\n        t = b - i\n        s = 0\n        for j in range(len(a) - t):\n            s += a[j]\n            if s not in d:\n                d[s] = 1\n            else:\n                d[s] += 1\n    print(d)\n    s = 0\n    for k, v in d.items():\n        if v == 1:\n            s += 1\n    return s\n\n\nprint(solution('1098'))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    print(stdin)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(set(stdin + '1' + stdin.replace('0', '9')))) - 1)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    How do we determine the number of gifts to each person?\n    \n    For each friend i, if it is 1, then it must give a gift to friend j\n    with probability 1 / n if j!= i. If it is 0, then it does not give a\n    gift to friend j with probability 1 / n. If we use this information,\n    then the problem becomes the matching problem.\n    \n    The matching problem is also known as the surplus matching problem.\n    \n    To solve this problem we can use the Gale-Shapley algorithm.\n    \n    The Gale-Shapley algorithm is a greedy algorithm that assigns people\n    a gift in the following way:\n        \n    1. Assign the gift to the first person with no gifts.\n    2. Remove the gift from the first person and give the gift to the next\n       person.\n    3. Repeat step 2 until there is no one with no gifts.\n    \n    When we have the solution, then we can just add to the left with the\n    remaining gifts to complete the solution.\n    \n    Since the algorithm is greedy, the first person with no gifts is the\n    person with the highest probability to get a gift. If we cannot find a\n    person with no gifts then the algorithm will not terminate.\n    \n    The complexity is O(n^2).\n    \"\"\"\n    \n    # Get number of friends and initialize gifts array.\n    n = int(stdin.readline())\n    gifts = [0] * n\n    \n    # Read the gift matrix.\n    for i in range(n):\n        gifts[i] = int(stdin.readline())\n        \n    # First person with no gifts.\n    first_person_with_no_gifts = -1\n    \n    # First gift to be assigned.\n    first_gift = 0\n    \n    # Update gift to each person.\n    for i in range(n):\n        # If there is no gifts, then assign the gift.\n        if gifts[i] == 0:\n            first_person_with_no_gifts = i\n            \n            # If the first person with no gifts is the first person with\n            # a gift, then assign the gift to the first person with gifts.\n            if first_gift == i:\n                first_gift = (i + 1) % n\n            \n            # Else, continue.\n            else:\n                first_gift = i\n        \n        # Assign the gift.\n        else:\n            # Give the gift to the person.\n            gifts[i] = first_gift\n            \n            # Update the gift to the next person.\n            first_gift = (first_gift + 1) % n\n    \n    # Get the solution.\n    solution = [first_gift]\n    solution.extend(gifts)\n    \n    return \" \".join(map(str, solution))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string in the form of a list of integers each equal to the\n    index of the friend to whom the gift was given or to whom it was\n    received. The friend to whom the gift is not given or received by\n    default is indicated by the integer 0. The friends are numbered\n    starting from 1.\n\n    >>> solution('5 0 0 2 4')\n    '5 3 1 2 4'\n    >>> solution('7 0 0 1 4 0 6')\n    '7 3 2 1 4 5 6'\n    \"\"\"\n    number_of_friends = int(stdin.split('\\n')[0])\n    friends_list = list(map(int, stdin.split('\\n')[1].split()))\n    gifts_list = [0] * number_of_friends\n    for i in range(number_of_friends):\n        gifts_list[i] = friends_list[i] - 1 if friends_list[i] else number_of_friends\n    return''.join(map(str, gifts_list))"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \u8bbe\u8ba1\u4e00\u4e2a\u5355\u8c03\u6808\n    # \u4e3b\u8981\u601d\u60f3\u662f\n    # \u4f7f\u7528\u5355\u8c03\u6808\uff0c\u9996\u5148\u628a\u6570\u7ec4\u6309\u9996\u4f4d\u7ed9\u653e\u8fdb\u53bb\uff0c\n    # \u56e0\u4e3a\u9996\u4f4d\u4e00\u5b9a\u4e0d\u662f0\uff0c\n    # \u56e0\u6b64\u4e0d\u4f1a\u8fd4\u56de\u7a7a\u5355\u8c03\u6808\uff0c\n    # \u7136\u540e\u5982\u679c\u9047\u52300\uff0c\n    # \u8bf4\u660e\u524d\u9762\u6240\u6709\u7684\u6570\u90fd\u662f\u7b26\u5408\u8981\u6c42\u7684\uff0c\n    # \u56e0\u6b64\u7ee7\u7eed\u5165\u6808\uff0c\n    # \u76f4\u5230\u9047\u5230\u4e00\u4e2a\u975e0\u7684\uff0c\n    # \u8fd9\u65f6\u5019\u9700\u8981\u628a\u6808\u4e2d\u9664\u4e86\u5f53\u524d\u6570\u4e4b\u5916\u7684\u5168\u90e8\u53d6\u51fa\uff0c\n    # \u7136\u540e\u518d\u628a\u5f53\u524d\u6570\u5165\u6808\uff0c\n    # \u7ee7\u7eed\u5faa\u73af\n    \n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    stack = []\n    res = []\n    \n    for i in range(n):\n        if array[i] == 0:\n            stack.append(i)\n        else:\n            if stack:\n                while stack:\n                    res.append(stack.pop())\n            stack.append(i)\n    \n    while stack:\n        res.append(stack.pop())\n    \n    return''.join(map(str, res))\n    \nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    f = [0]*n\n    for i in range(n):\n        if p[i] == 0:\n            for j in range(n):\n                if i!= j and p[j] == 0:\n                    f[j] += 1\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(n):\n                if p[j] == i+1 and p[i] == 0:\n                    f[i] = j+1\n                    break\n    for i in range(n):\n        if p[i] == 0:\n            p[i] = f[i]\n    return \" \".join(map(str, f))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(n: int, money_list: list) -> list:\n        matrix = [[1 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if money_list[i]!= money_list[j] and money_list[i]!= 0 and money_list[j]!= 0:\n                    matrix[i][j] = matrix[j][i] = 0\n        ans = []\n        for i in range(n):\n            if matrix[i][i] == 0:\n                ans.append(i)\n        return ans\n\n    def main(stdin: str) -> str:\n        n = int(stdin)\n        money_list = [int(i) for i in stdin.split()]\n        ans = find_solution(n, money_list)\n        return''.join([str(i) for i in ans])\n\n    return main(stdin)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split(' ')))\n    res = [0] * n\n    for i in range(n):\n        if friends[i] > 0:\n            res[i] = friends[i]\n    for i in range(n):\n        for j in range(n):\n            if res[j] == 0 and i!= j and res[i] + 1 == friends[j]:\n                res[i] = res[j] = j + 1\n                break\n    return''.join(map(str, res))\n\nprint(solution(input()))"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    f = list(map(int, lines[1].split(' ')))\n\n    candidates = [i for i in range(n) if f[i] == 0]\n\n    for i in candidates:\n        f[i] = n\n\n    for i in range(n):\n        if f[i] == n:\n            f[i] = i\n\n    ans =''.join(map(str, f))\n\n    return ans"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0 0 2 4\n   ... ''')\n    '5 3 1 2 4'\n    >>> solution('''7\n   ... 7 4 0 3 0 5 1\n   ... ''')\n    '7 3 2 1 4 5 6'\n    \"\"\"\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().strip().split()))\n    d = {}\n    ans = []\n    for i in range(n):\n        if lst[i] == 0:\n            d[i] = [i]\n        else:\n            d[i] = []\n    for i in range(n):\n        if lst[i]!= 0:\n            ans.append(lst[i])\n            lst[i] = 0\n            for k in d[i]:\n                if lst[k]!= 0:\n                    ans.append(k)\n                    lst[k] = 0\n    return''.join(list(map(str, ans)))\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n\n    answer = []\n    for i in range(n):\n        if friends[i]!= 0:\n            if friends[i] == n:\n                answer.append(i)\n                n -= 1\n            else:\n                answer.append(friends[i])\n        else:\n            answer.append(i + 1)\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n1 2 2 3\\n\")\n    'YES\\n1 1 2 2'\n    >>> solution(\"5 2\\n3 2 1 2 1\\n\")\n    'YES\\n2 1 1 2 1'\n    \"\"\"\n    # line = stdin.strip().split()\n    # n, k = [int(x) for x in line[:2]]\n    # a = [int(x) for x in line[2:]]\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()[2:]]\n    if n == k:\n        print(\"YES\")\n    elif k < n:\n        print(\"NO\")\n    else:\n        a.sort()\n        a_set = set(a)\n        visited = [0] * k\n        colors = [0] * k\n        for i in a:\n            if visited[i - 1] == 0:\n                visited[i - 1] = 1\n                colors[i - 1] += 1\n                for j in range(i):\n                    if j + 1 in a_set:\n                        visited[j] = 1\n                        colors[j] += 1\n            if visited.count(1) == n:\n                break\n        if visited.count(1)!= n:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(k):\n                if colors[i]!= 0:\n                    print(colors[i], end=\" \")\n            print()\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # the method get_input() was added to the code, you don't need to change anything there\n    n, k = get_input()\n    a = [int(s) for s in stdin.split()]\n    a.sort()\n    print(n, k)\n    print(a)\n    ans = \"YES\"\n    for i in range(1, k + 1):\n        if i not in a:\n            ans = \"NO\"\n            break\n    if ans == \"NO\":\n        return ans\n    for i in range(1, k + 1):\n        s = set()\n        for j in range(len(a)):\n            if a[j] == i:\n                s.add(i)\n        if len(s) == 0 or len(s) < i:\n            ans = \"NO\"\n            break\n    if ans == \"NO\":\n        return ans\n    for i in range(1, k + 1):\n        s = set()\n        for j in range(len(a)):\n            if a[j] == i:\n                s.add(i)\n        for j in range(i + 1, k + 1):\n            if j in s:\n                ans = \"NO\"\n                break\n        if ans == \"NO\":\n            break\n    if ans == \"NO\":\n        return ans\n    ans = \"\"\n    for i in range(1, k + 1):\n        ans += str(i) + \" \"\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    YES\n    >>> solution(input())\n    NO\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    numbers = sorted(map(int, stdin.split()))\n    k -= 1\n    answers = []\n    if len(numbers)!= len(set(numbers)):\n        answers.append(\"NO\")\n    elif len(set(numbers)) < k:\n        answers.append(\"NO\")\n    else:\n        answers.append(\"YES\")\n        answers.append(\n            \" \".join(\n                map(\n                    str,\n                    [k for k in range(1, len(numbers) + 1)],\n                )\n            )\n        )\n    return \"\\n\".join(answers)\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input\n    :return: output\n    '''\n    # write your code in Python 3.6\n    n, k = [int(n) for n in stdin.split()]\n    array = [int(n) for n in stdin.split()]\n    array.sort()\n    \n    res = []\n    for i in range(1, k+1):\n        count = 0\n        while count < n and array[count] <= i:\n            if i in array:\n                count += 1\n            else:\n                break\n        if count == n:\n            res.append(i)\n    \n    if len(res) == 0:\n        return \"NO\"\n    else:\n        return \"YES\\n\" +''.join([str(i) for i in res])\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 2 2 3\n   ... ''')\n    'YES\\n2 1 1 2 1'\n    >>> solution('''5 2\n   ... 3 2 1 2 3\n   ... ''')\n    'YES\\n2 1 1 2 1'\n    >>> solution('''5 2\n   ... 2 1 1 2 1\n   ... ''')\n    'NO'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    print('YES' if (\n        (k == 1 and all(i in range(k + 1) for i in a)) or\n        (k >= 2 and (all(i in range(k) for i in set(a)) and\n                     all(a[i - 1]!= a[i] for i in range(1, n)) and\n                     all(a[i - 1] + 1 == a[i] for i in range(1, n))))\n    ) else 'NO')\n    print(*(a + [x for x in range(a[0], k + 1)]) if k == 1 else [a[0]] * k)\n    return ''\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem: https://www.codewars.com/kata/52c4dd683bfd3f23c900008f\"\"\"\n    return 'NO'"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a = map(int, stdin.split())\n    a = sorted(a)\n    if a[0] == 1:\n        if k >= n:\n            print('YES')\n            print(*a, sep=' ')\n        else:\n            print('NO')\n    else:\n        if n % k == 0:\n            m = n // k\n            if (a[0] - 1) * m == n:\n                print('YES')\n                print(*a, sep=' ')\n            else:\n                print('NO')\n        else:\n            print('NO')\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, x, y = [int(x) for x in stdin.split('\\n')[0].split()]\n    number = stdin.split('\\n')[1].replace('0', '1').replace('1', '0')\n    # print(n, x, y, number)\n    return str(len([1 for i, x in enumerate(number) if x == '1' and number[i + 1] == '0']))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(s) for s in stdin.split()]\n    m = 10 ** (n - 1)\n    x -= 1\n    y -= 1\n    m10 = m * 10\n    z = (m10 // x) * 10 ** y\n    z += m10 % x\n    print(z)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split(' '))\n    # n, x, y = map(int, input().split(' '))\n\n    def dfs(n, x, y):\n        if n == 1:\n            if x == y:\n                return 0\n            elif x > y:\n                return x - y\n            else:\n                return 10 ** x - 10 ** y\n        if x == y:\n            return n - 1\n        elif x > y:\n            return dfs(n - 1, x - 1, y) + (10 ** (x - 1) - 10 ** y)\n        else:\n            return dfs(n - 1, x, y - 1) + (10 ** y - 10 ** (y - 1))\n\n    print(dfs(n, x, y))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split(\" \")]\n    x, y = min(x, y), max(x, y)\n    a, b = 10 ** x, 10 ** y\n    c = a * b // gcd(a, b)\n    for i in range(1, n - 1):\n        if gcd(10 ** i, c)!= 1:\n            break\n    return str(i)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split()[1]\n    while n >= 1:\n        if num[n - 1] == '0':\n            num = num[0:n - 1] + '1' + num[n - 1:]\n        elif num[n - 1] == '1':\n            num = num[0:n - 1] + '0' + num[n - 1:]\n        n = n - 1\n    num = int(num, 2)\n    num = num % 10 ** x\n    if num % 10 ** y == 0:\n        return \"0\"\n    else:\n        return str(len(bin(num)[3:]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    a = ''.join([str(int(x)) for x in stdin.split(' ')])\n    # print(n, x, y, a)\n    return str(n - len(a) + 10 ** y - 1)\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    return''\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    x = int(stdin[1])\n    y = int(stdin[2])\n    N = stdin[3]\n    number = int(N)\n    count = 0\n    while True:\n        if number < pow(10, x):\n            break\n        number = number % pow(10, x)\n        count += 1\n        if number % pow(10, y) == 0:\n            break\n        number = number // pow(10, y)\n        count += 1\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, x, y = input[0].split(' ')\n    n, x, y = int(n), int(x), int(y)\n    num = input[1]\n    input = num.zfill(n)\n    remainder = pow(10, y) - int(num)\n    count = 0\n    for i in range(x):\n        if input[i] == '0':\n            count += 1\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number, a, b = stdin.split()\n    number = int(number)\n    a = int(a)\n    b = int(b)\n    print(a - b + 1)"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(a):\n        n = len(a)\n        for i in range(n):\n            if a[i]!= a[n - 1 - i]:\n                return False\n        return True\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for i in range(2, n - 1):\n            if is_palindrome(a[:i]):\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\")\n    'YES\\nYES\\nNO\\nYES\\nNO'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        i = 0\n        while i + 2 <= n:\n            if a[i] == a[n - i - 1]:\n                i += 1\n                if i == n - i:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, i, j):\n        l = j - i + 1\n        return all(a[i + k] == a[j - k] for k in range(l // 2))\n\n    n, t = map(int, stdin.split('\\n')[0].split())\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        a = list(map(int, stdin.split('\\n')[2].split()))\n        if n < 3:\n            print('NO')\n            continue\n        for i in range(n - 2):\n            if check(a, i, i + 2):\n                print('YES')\n                break\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'YES'\n    \"\"\"\n    def is_palindrome(a: list) -> bool:\n        if len(a) == 1:\n            return True\n        elif len(a) == 2:\n            return a[0] == a[1]\n        else:\n            return a[0] == a[-1] and is_palindrome(a[1:-1])\n\n    number_of_cases = int(stdin.readline())\n    for _ in range(number_of_cases):\n        length_of_a = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split(' ')]\n        if is_palindrome(a):\n            print('YES')\n        else:\n            print('NO')\n    \"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task: solve the problem.\n    Input: The first line of the input contains one integer T (1 \u2264 T \u2264 100) \u2014 the number of test cases.\n           Each test case is described by a single line containing two integers n and m (1 \u2264 n \u2264 m \u2264 100).\n    Output: For each test case, print YES if the array of length n has some subsequence of length at least m that is a palindrome, or NO otherwise.\n    \"\"\"\n    # Get test cases\n    num_test_cases = int(stdin)\n    test_cases = []\n    for _ in range(num_test_cases):\n        # Get dimensions of the array\n        num_elements = int(stdin)\n        # Get the array\n        array = list(map(int, stdin.split()))\n        # Get test case\n        test_cases.append((num_elements, array))\n    # Iterate over test cases\n    for num_elements, array in test_cases:\n        # See if it is a palindrome\n        if is_palindrome(num_elements, array):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.split()[0])\n    a = list(stdin.split()[1])\n    # init result\n    res = 0\n    # init mapping\n    f = list(map(int, stdin.split()[2:]))\n    # init a_int\n    a_int = int(''.join(a))\n    # init res_str\n    res_str = ''\n    # init step\n    step = 0\n    # do till a_int < 10^n\n    while a_int < 10 ** n:\n        # init step_int\n        step_int = 0\n        # set a_str\n        a_str = str(a_int)\n        # init res\n        res = 0\n        # do while a_str is not empty\n        while a_str:\n            # get nth char of a_str\n            nth_char = a_str[-1]\n            # get step\n            step = step + 1\n            # get char at index nth_char\n            c = a[int(nth_char) - 1]\n            # get mapping\n            m = f[int(c) - 1]\n            # get index at step\n            index = step_int + step\n            # get mapping of step\n            m_step = f[index % 9]\n            # get char at mapping of step\n            c_step = a[index % 9]\n            # get char at mapping of step\n            m_step_char = a[m_step - 1]\n            # get step of mapping of step\n            m_step_step = step + 1\n            # if step_int is not empty\n            if step_int:\n                # add res\n                res += step_int * 10 ** step\n            # if step_int is empty\n            if not step_int:\n                # add a[0]\n                res += int(c)\n            # get index of step\n            index = m_step_step + step\n            # get mapping of step\n            m_step_mapping = f[index % 9]\n            # get char at mapping of step\n            c_step_mapping = a[m_step_mapping - 1]\n            # get char at step\n            c_step = a[m_step_char - 1]\n            # if step_int is not empty\n            if step_int:\n                # get mapping of step\n                m_step_mapping = f[index % 9]\n                # get char at mapping of step\n                c_step_mapping = a[m_step_mapping - 1]\n                # get char at step\n                c_step = a[m_step_char - 1]\n                # get step\n                step = step + m_step_step\n                # get step of mapping of step\n                m_step_mapping_step = step + 1\n                # get char at mapping of step\n                m_step_mapping_char = a[m_step_mapping - 1]\n                # if step_int is not empty\n                if step_int:\n                    # add res\n                    res += step_int * 10 ** step\n                # if step_int is empty\n                if not step_int:\n                    # add a[0]\n                    res += int(c_step)\n                # get index of step\n                index = m_step_mapping_step + step\n                # get mapping of step\n                m_step_mapping_mapping = f[index % 9]\n                # get char at mapping of step\n                c_step_mapping_mapping = a[m_step_mapping_mapping - 1]\n                # get char at step\n                c_step_mapping = a[m_step_mapping_char - 1]\n                # get step\n                step = step + m_step_mapping_step\n                # get step of mapping of step\n                m_step_mapping_mapping_step = step + 1\n                # if step_int is not empty\n                if step_int:\n                    # add res\n                    res += step_int * 10 ** step\n                # if step_int is empty\n                if not step_int:\n                    # add a[0]\n                    res += int(c_step_mapping)\n                # get index of step\n                index = m_step_mapping_mapping_step + step\n                # get mapping of step\n                m_step_mapping_mapping_mapping = f[index % 9]\n                # get char at mapping of step\n                c_step_mapping_mapping_mapping = a[m_step_mapping_mapping_mapping - 1]\n                # get char at step\n                c_step_mapping_mapping = a[m_step_mapping_mapping_mapping - 1]\n                # get step\n                step = step + m_step_mapping_mapping_step\n                # get step of mapping of step\n                m_step_mapping_mapping_mapping_step = step + 1\n                # if step_int is not empty\n                if step_int:\n                    # add res\n                    res += step_int * 10 ** step\n                # if step_int is empty\n                if not step_int:\n                    # add a[0]\n                    res += int(c_step_mapping_mapping)\n                # get index of step\n                index = m_step_mapping_mapping_mapping_step + step\n                # get mapping of step\n                m_step_mapping_mapping_mapping_mapping = f[index % 9]\n                # get char at mapping of step\n                c_step_mapping_mapping_mapping_mapping = a[m_step_mapping_mapping_mapping_mapping - 1]\n                # get char at step\n                c_step_mapping_mapping_mapping = a[m_step_mapping_mapping_mapping_mapping - 1]\n                # get step\n                step = step + m_step_mapping_mapping_mapping_step\n                # get step of mapping of step\n                m_step_mapping_mapping_mapping_mapping_step = step + 1\n                # if step_int is not empty\n                if step_int:\n                    # add res\n                    res += step_int * 10 ** step\n                # if step_int is empty\n                if not step_int:\n                    # add a[0]\n                    res += int(c_step_mapping_mapping_mapping)\n                # get index of step\n                index = m_step_mapping_mapping_mapping_mapping_step + step\n                # get mapping of step\n                m_step_mapping_mapping_mapping_mapping_mapping = f[index % 9]\n                # get char at mapping of step\n                c_step_mapping_mapping_mapping_mapping_mapping = a[m_step_mapping_mapping_mapping_"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(stdin.split()[1])\n    f = list(map(int, stdin.split()[2:]))\n\n    s, e = 0, len(a)-1\n    maximum = 0\n\n    while s <= e:\n        maximum = max(maximum, int(''.join(a[s:e+1])))\n        if a[s] > f[0] and a[e] > f[0]:\n            s += 1\n            e -= 1\n        elif a[s] > f[0] and a[e] < f[0]:\n            s += 1\n        elif a[s] < f[0] and a[e] > f[0]:\n            e -= 1\n        elif a[s] < f[0] and a[e] < f[0]:\n            s += 1\n            e -= 1\n    return maximum\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = [int(i) for i in stdin.split()]\n    f_list = [int(i) for i in stdin.split()]\n\n    max_number = 0\n    for i in range(len(numbers)):\n        current_number = numbers[i]\n        n_number = i + 1\n        while n_number < len(numbers):\n            current_number = (current_number * f_list[numbers[n_number] - 1]) % 10\n            n_number += 1\n        max_number = max(max_number, current_number)\n    return str(max_number)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    x = stdin.split()[2:]\n\n    x = [int(i) for i in x]\n    cache = {}\n    for i in range(1, 10):\n        cache[i] = i\n\n    def f(a, x):\n        if x == 0:\n            return a\n\n        for i in range(1, 10):\n            if cache[i] == x:\n                return a[:n - 1] + str(i) + a[n:]\n\n    for i in range(1, 10):\n        cache[i] = f(a, x[i - 1])\n\n    return int(max(cache.values()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = int(stdin.readline()), stdin.readline()\n    f = stdin.readline().split(' ')\n    f = list(map(int, f))\n    nums = list(map(int, a))\n    out = []\n    for i in range(0, len(nums)):\n        for j in range(0, f[nums[i]-1]):\n            out.append(nums[i])\n    print(max(out))\n    return ''"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().rstrip()\n    f = [int(i) for i in stdin.readline().rstrip().split(' ')]\n    \n    max = int(''.join(a))\n    for i in range(0, len(a)):\n        temp = a[i:]\n        f_temp = [f[int(j) - 1] for j in temp]\n        t = int(''.join(temp))\n        if t < max:\n            max = t\n            \n    return str(max)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    length = int(input[0])\n    number = input[1]\n    f = input[2]\n    input = [int(i) for i in number]\n    i = len(input) - 1\n    index = -1\n    while i >= 0:\n        if f[input[i]]!= '9':\n            index = i\n            break\n        i -= 1\n    if index == -1:\n        return number\n    for i in range(index, -1, -1):\n        if f[input[i]]!= '9':\n            input[i] = f[input[i]]\n            break\n        else:\n            input[i] = input[i-1]\n    i = index + 1\n    while i < len(input):\n        if f[input[i]]!= '9':\n            input[i] = f[input[i]]\n            break\n        else:\n            input[i] = input[i+1]\n        i += 1\n    return \"\".join(str(i) for i in input)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = int(a)\n    f = list(map(int, stdin.split()))\n    max_a = int(''.join([str(x) for x in f]))\n    list_of_subs = [a[i:j] for i in range(n) for j in range(i + 1, n + 1)]\n    list_of_subs = [int(''.join([str(x) for x in sub])) for sub in list_of_subs]\n    for i in range(1, len(list_of_subs)):\n        list_of_subs[i] = list_of_subs[i] % 10\n    list_of_subs.sort(reverse=True)\n    for i in range(n):\n        if f[list_of_subs[i]] < 9:\n            f[list_of_subs[i]] += 1\n            max_a = max(max_a, int(''.join([str(x) for x in f])))\n            break\n        f[list_of_subs[i]] = 1\n    return str(max_a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(c) for c in stdin.readline().strip().split()]\n\n    digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n    def replace_digit(digit: str, new_digit: int):\n        return str(new_digit)\n\n    def is_digit_present(digit: str):\n        return digit in digits\n\n    def replace_by_function(digit: str, new_digit: int):\n        return replace_digit(digit, f[int(digit) - 1])\n\n    def replace_digits_with_function(a: str):\n        res = []\n        last_was_digit = False\n        for c in a:\n            if last_was_digit:\n                res.append(replace_by_function(c, last_digit))\n                last_was_digit = False\n            else:\n                res.append(c)\n            last_digit = int(c)\n        if last_was_digit:\n            res.append(replace_by_function(a[-1], last_digit))\n        return ''.join(res)\n\n    res = replace_digits_with_function(a)\n    return res\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46')\n    '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n    \"\"\"\n    import re\n    import sys\n\n    _, a, b, c = map(int, re.split(r'\\n', stdin))\n\n    return '\\n'.join(\n        '1' if a == b else str(a) if a == c else '2' if b == c else str(b),\n        str(b),\n        str(c)\n    )\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets input and returns string of three integers for each test case.\n\n    >>> solution('1\\n2\\n3')\n    '1 1 3'\n    \"\"\"\n    \n    return stdin\n    \n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    for _ in range(int(stdin.readline())):\n        a, b, c = sorted([int(x) for x in stdin.readline().split()])\n        res = 0\n        while not a % 2:\n            res += a // 2\n            a //= 2\n        while not b % 2:\n            res += b // 2\n            b //= 2\n        while not c % 2:\n            res += c // 2\n            c //= 2\n        print(res)\n        print(a, b, c)\n    \"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # \ucd5c\uc18c \ud69f\uc218\ub97c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ub418\ubbc0\ub85c \uc774\ub3d9\ud574\uc57c \ud558\ub294 \ud69f\uc218 \uc911 \ucd5c\ub313\uac12\uc744 \ucd5c\uc18c \ud69f\uc218\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uba74 \ub428\n    # \uc774\ub3d9\ud55c \ubaa8\ub4e0 \uce78\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \ub3cc\uba74\uc11c \ucd5c\ub313\uac12\uc744 \uad6c\ud574\uc11c \ucd5c\uc18c \ud69f\uc218\ub97c \ucc3e\ub294 \ubc29\uc2dd\n    def move(a, b, c, count):\n        if c % b == 0:\n            return count\n        else:\n            return move(a, c % b, b, count + 1)\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        print(move(a, b, c, 0))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b, c = [int(x) for x in stdin.split()]\n    res = 0\n    while a!= b:\n        if a > b:\n            a -= 1\n        else:\n            a += 1\n        res += 1\n    while a!= c:\n        if a > c:\n            a -= 1\n        else:\n            a += 1\n        res += 1\n    while b!= c:\n        if b > c:\n            b -= 1\n        else:\n            b += 1\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"not possible\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    result = []\n    \n    for i in range(int(lines[0])):\n        nums = list(map(int, lines[1 + i].split()))\n        lcm = int(nums[0]*nums[1]/math.gcd(nums[0], nums[1]))\n        \n        result.append(lcm)\n    return '\\n'.join([str(x) for x in result])\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str.\"\"\"\n    return '1'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_delta = 0\n    min_delta = sum(a)\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            delta = a[i] - a[i - 1]\n            if delta > max_delta:\n                max_delta = delta\n            if delta < min_delta:\n                min_delta = delta\n        else:\n            delta = a[i - 1] - a[i]\n            if delta > max_delta:\n                max_delta = delta\n            if delta < min_delta:\n                min_delta = delta\n    return max_delta - min_delta\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    i = 1\n    while i < n:\n        m = min(a[:i] + a[i + 1:])\n        im = max(a[:i] + a[i + 1:]) - m\n        if im < i - 1:\n            break\n        i += 1\n    return str(i - 1)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n\nfrom collections import Counter\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    array = sorted(array)\n    return str(array[-2] - array[1])\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n\n    res = []\n    res.append(arr[0])\n    for i in range(1, n):\n        res.append(arr[i] - min(res))\n    \n    return str(max(res) - min(res))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = sorted(map(int, stdin.readline().split()))\n\n    return str(max(a[i] - min(a) for i in range(n)) - 1)"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Line 1\n    n = int(stdin.readline())\n\n    # Line 2\n    num_array = list(map(int, stdin.readline().split()))\n\n    # Line 3\n    max_num = max(num_array)\n    min_num = min(num_array)\n\n    return max_num - min_num\n    \"\"\"\n    return max(num_array) - min(num_array)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.split('\\n')\n    # n = int(lines[0])\n    # a = [int(x) for x in lines[1].split(' ')]\n\n    n = 4\n    a = [1, 3, 3, 7]\n    b = set(a)\n    c = list(b)\n    d = a.count(c[0])\n    e = a.count(c[1])\n    f = a.count(c[2])\n    g = a.count(c[3])\n    if d == 1:\n        return 2\n    if e == 1:\n        return 2\n    if f == 1:\n        return 2\n    if g == 1:\n        return 2\n    h = max(a) - min(a)\n    return h\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = [int(s) for s in stdin.split()]\n    pets = [int(s) for s in stdin.split('\\n')]\n    pets.sort(key=lambda x: x[1])\n    ans = []\n    for exam_day, exam_num in pets:\n        if ans:\n            ans.append(0)\n        for i in range(exam_day):\n            ans.append(i + 1)\n        ans.append(exam_num)\n    print(' '.join(str(s) for s in ans))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(m):\n        a.append(list(map(int, stdin.split())))\n    \n    for i in range(1, n+1):\n        s, d, c = 0, 1, 0\n        for j in range(m):\n            if a[j][0] == i:\n                s, d, c = a[j][1], a[j][1], a[j][2]\n        if s <= d:\n            print(m + 1, end=\" \")\n        else:\n            print(0, end=\" \")\n        for j in range(m):\n            if s <= d:\n                if a[j][0] == i and s <= a[j][1] and a[j][1] < d:\n                    print(j+1, end=\" \")\n            else:\n                break\n    return None\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    exam_days = [0] * m\n    studying_days = [0] * n\n    for i in range(m):\n        s, d, c = [int(x) for x in stdin.split()]\n        exam_days[i] = (d - s, c)\n    for i in range(n):\n        s, d, c = [int(x) for x in stdin.split()]\n        studying_days[i] = (d - s, c)\n    exam_days.sort()\n    studying_days.sort()\n    def ok_days(days_table: list, exam_days: list) -> bool:\n        days = 0\n        for day, exams in enumerate(days_table):\n            if exams == 0:\n                days += 1\n                if exam_days[day][0]!= 0:\n                    return False\n            else:\n                days = exam_days[day][1]\n        return days >= exam_days[-1][0]\n    for i in range(m):\n        if exam_days[i][0]!= 0:\n            return \"IMPOSSIBLE\"\n    if ok_days(studying_days, exam_days):\n        days = 0\n        result = []\n        for day, exams in enumerate(studying_days):\n            days += exams[1]\n            result.append(days)\n        return \" \".join([str(x) for x in result])\n    else:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = map(int, stdin.split())\n    exam_start_days = list(map(int, stdin.split()))\n    pass_exam_count = [0] * exams\n    prepare_exam_count = [0] * exams\n    for idx in range(days):\n        start, end, exam_id = map(int, stdin.split())\n        if start > exam_start_days[exam_id - 1]:\n            pass_exam_count[exam_id - 1] += 1\n        if end > exam_start_days[exam_id - 1]:\n            prepare_exam_count[exam_id - 1] += 1\n    return''.join(map(str, pass_exam_count))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    a = [[int(n) for n in stdin.split()] for _ in range(m)]\n    ans = []\n    for x in range(m):\n        i = a[x][0]\n        j = a[x][1]\n        k = a[x][2]\n        ans.append(max((k + 1) * (j - i) + 1, 0))\n    if sum(ans) < n:\n        return \"-1\"\n    return''.join(map(str, ans))"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    students_count, exams_count = stdin.split()\n    students_count, exams_count = int(students_count), int(exams_count)\n    exams = [[int(i) for i in stdin.split()] for _ in range(exams_count)]\n\n    # [[day, exam],...]\n    days = []\n    for exam in exams:\n        days.append([exam[0], exam[1]])\n\n    # [days],...]\n    days.sort()\n\n    students = [0] * students_count\n    count_of_days = 1\n    for exam_day, exam_count in days:\n        for student in range(students_count):\n            if exam_day <= students[student]:\n                students[student] += exam_count\n                count_of_days += 1\n                break\n        else:\n            return \"-1\"\n    return \"\\n\".join([str(count_of_days)] + [str(i) for i in students])\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_days, number_of_exams = list(map(int, stdin.split(\" \")))\n    days = []\n    for day_number in range(number_of_days):\n        day = list(map(int, stdin.split(\" \")))\n        days.append(day)\n    days = sorted(days, key=lambda d: d[1])\n    first_exam = days[0]\n    first_day = first_exam[0]\n    total_number_of_days = number_of_days - first_day\n    number_of_days_to_prepare = total_number_of_days + 1\n    if number_of_days_to_prepare < number_of_exams:\n        return \"-1\"\n    first_exam_number = first_exam[1]\n    prepared_exams = [first_exam]\n    for day_number in range(number_of_days_to_prepare):\n        day_exam_number = 1\n        while day_exam_number <= number_of_exams:\n            if day_exam_number in prepared_exams:\n                day_exam_number += 1\n                continue\n            next_exam_number = day_exam_number + 1\n            while next_exam_number <= number_of_exams:\n                if next_exam_number in prepared_exams:\n                    next_exam_number += 1\n                    continue\n                exam_to_pass_number = next_exam_number + 1\n                while exam_to_pass_number <= number_of_exams:\n                    if exam_to_pass_number in prepared_exams:\n                        exam_to_pass_number += 1\n                        continue\n                    exam_to_prepare_number = exam_to_pass_number + 1\n                    while exam_to_prepare_number <= number_of_exams:\n                        if exam_to_prepare_number in prepared_exams:\n                            exam_to_prepare_number += 1\n                            continue\n                        exam_to_prepare_day_number = 1\n                        while exam_to_prepare_day_number <= number_of_days_to_prepare:\n                            if exam_to_prepare_number in days and exam_to_prepare_day_number in days:\n                                exam_to_prepare_day_number += 1\n                            else:\n                                exam_to_prepare_number += 1\n                        if exam_to_prepare_number == number_of_exams:\n                            if exam_to_pass_number == number_of_exams:\n                                return \" \".join(\n                                    map(\n                                        str,\n                                        [\n                                            number_of_days_to_prepare\n                                            + 1,\n                                            0,\n                                            exam_to_pass_number,\n                                            next_exam_number,\n                                            day_exam_number,\n                                        ],\n                                    )\n                                )\n                            else:\n                                prepared_exams.append(exam_to_pass_number)\n                                break\n                        else:\n                            break\n                    else:\n                        break\n                else:\n                    break\n            else:\n                break\n            day_exam_number += 1\n        else:\n            break\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the solution as a string\n    '''\n    # Read in\n    n, m = [int(i) for i in stdin.split(' ')]\n\n    # Get the number of moves\n    moves = 0\n    while n!= m:\n        if m > n:\n            n *= 3\n            moves += 1\n        else:\n            m /= 2\n            moves += 1\n    # Return the solution\n    return str(moves)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    steps = 0\n    while n < m:\n        steps += 1\n        if m % 2 == 0:\n            n *= 2\n        else:\n            n *= 3\n        if m > n:\n            steps -= 1\n        elif n == m:\n            break\n        m = n\n    if n!= m:\n        steps = -1\n    return str(steps)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m > 5 * 10 ** 8:\n        return -1\n    moves = 0\n    while n!= m:\n        if m < n:\n            m = 2 * m\n        else:\n            m = 3 * m\n        moves += 1\n    return moves\n\n\nprint(solution('120 51840'))\nprint(solution('42 42'))\nprint(solution('48 72'))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if m < n:\n        print(-1)\n        return ''\n    count = 0\n    while n!= m:\n        if n % 3 == 0:\n            count += 1\n            n = n // 3\n        elif n % 2 == 0:\n            count += 1\n            n = n // 2\n        else:\n            print(-1)\n            return ''\n    print(count)\n    return ''"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"\".join(stdin.split(\"\\n\"))\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n\n    cnt = 0\n    while n!= m:\n        if n == m:\n            break\n        elif n % 3 == 0:\n            n = int(n / 3)\n            cnt += 1\n        elif m % 3 == 0 and m % 2!= 0:\n            m = int(m / 3)\n            cnt += 1\n        elif m % 3 == 0 and m % 2 == 0:\n            m = int(m / 3)\n            cnt += 1\n        elif m % 3 == 1 and n % 2!= 0:\n            n = int(n / 3)\n            cnt += 1\n        elif n % 3 == 1 and m % 2 == 0:\n            m = int(m / 3)\n            cnt += 1\n        elif n == m - 1:\n            break\n        elif n == m + 1:\n            break\n        else:\n            return -1\n    return cnt"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if a > b:\n        return -1\n    elif a == 1 or a == b:\n        return 0\n    elif a == 2 or a == 3:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline()\n    return ''.join(sorted(s, key=lambda c: s.index(c) + n - len(s)))[:k]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline()\n    if k == 0:\n        return \"\"\n    elif k > n:\n        return t\n    else:\n        return t * k\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n    s = t * k\n    return s[:n]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[0:n]\n    res = ''\n\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            if t[l - 1:r] == t[l - 1:r][::-1]:\n                res = t[l - 1:r]\n                k -= 1\n                if k == 0:\n                    return res\n\n    return res\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('ababa')\n    'ababababa'\n    \"\"\"\n\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    indices = [i for i in range(len(s) - n + 1)]\n    res = list(s)\n\n    for i in range(len(indices)):\n        for j in range(i + 1, len(indices)):\n            if indices[j] - indices[i] + n - 1 == k:\n                res[indices[i] : indices[j] + 1] = s[indices[i] : indices[j] + 1]\n                break\n        else:\n            continue\n        break\n    return \"\".join(res)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aba\")\n    \"ababababa\"\n    >>> solution(\"cat\")\n    \"catcat\"\n    >>> solution(\"ababababa\")\n    \"ababababababababa\"\n    >>> solution(\"catcat\")\n    \"catcat\"\n    >>> solution(\"ababa\")\n    \"ababababa\"\n    \"\"\"\n    n, k = map(int, stdin.split())\n    t = stdin\n    k -= n % k\n    k %= n\n    return (t * (n // k))[:n] + t[:n % k]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    start = 0\n    end = 0\n    ans = \"\"\n    while end < len(t) - n + 1:\n        ans += t[start:end + n - 1]\n        start += 1\n        end += 1\n    return ans\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    string = stdin.split('\\n')[0]\n    \n    out = ''\n    for i in range(k):\n        if i == 0:\n            out = string\n            continue\n        out += string[-1]\n        out = out[::-1]\n    return out\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, n, k = stdin.split()\n    return t * k"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    k = int(stdin[1])\n    res = [string[0]]\n    for i in range(1, len(string)):\n        if not res or res[-1]!= string[i]:\n            res.append(string[i])\n        else:\n            res[-1] = string[i]\n            if len(res) == k:\n                break\n    return ''.join(res)"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n2 1 2 4 3')\n    3\n    >>> solution('4\\n8 3 5 2')\n    2\n    >>> solution('5\\n2 1 2 4 3')\n    0\n    >>> solution('4\\n8 3 5 2')\n    1\n    \"\"\"\n    n = int(stdin.readline().rstrip())\n    arr = list(map(int, stdin.readline().rstrip().split()))\n\n    count = 0\n    arr_s = set()\n    for i in range(len(arr)):\n        if i in arr_s:\n            continue\n        arr_s.add(i)\n        arr_tmp = arr[:]\n        arr_tmp.pop(i)\n        if sum(arr_tmp) == sum(arr):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        if arr[i] == sum(arr[:i]) + sum(arr[i + 1:]):\n            res += 1\n    print(res)\n    for i in range(res):\n        print(i + 1)\n    return ''\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(c) for c in stdin.split('\\n')[1].strip().split(' ')]\n    good_ind = [j for j in range(n) if a[j] == sum(a) - a[j]]\n    return str(len(good_ind)) + '\\n' +''.join([str(i) for i in sorted(good_ind)])\n    \n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    array = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    \n    sum_a = sum(array)\n    \n    good = 0\n    \n    for x in array:\n        sum_b = sum_a - x\n        \n        if sum_b in array:\n            good += 1\n            \n    if good == 0:\n        print(0)\n        return \"\"\n    \n    print(good)\n    print(\" \".join(str(x) for x in array if x!= sum_b))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every integer i from the input in a loop, if we remove the i-th integer, can we make the array good?\n    \"\"\"\n    total_sum = int(stdin)\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n\n    nice = [0] * n\n    good = 0\n    for i in range(n):\n        removed_sum = total_sum - a[i]\n        if removed_sum in a[:i] + a[i+1:]:\n            nice[i] = 1\n\n        if nice[i] == 0:\n            good += 1\n\n    print(len(nice))\n    print(*nice)\n    return good\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    n, k = map(int, stdin.split())\n    res = 0\n    for i in range(k, len(string) + 1):\n        k = i\n        tmp = set()\n        for j in range(len(string) - k + 1):\n            tmp.add(string[j:j + k])\n            if len(tmp) > k:\n                break\n        if len(tmp)!= k:\n            continue\n        res = i\n        break\n    if res == 0:\n        res = -1\n    return str(res)"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nimport sys\nfrom typing import Any, Dict, List\n\nsys.setrecursionlimit(10 ** 6)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    if n <= k:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return n - 2\n    if k == 3:\n        return n - 4\n    return n - (k - 2)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split()\n    n = int(first_line[0])\n    k = int(first_line[1])\n    s = stdin[-1]\n    if n == k:\n        return 0\n    if len(s) == 1:\n        return -1\n    l = s.split()\n    min_cost = 0\n    for i in range(len(l)):\n        if len(l[i]) < k:\n            continue\n        min_cost += len(l[i])\n    return min_cost\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S = set(S)\n    if len(S) < K:\n        print(-1)\n        return\n\n    cost = 0\n    for s in S:\n        if len(s) == K:\n            cost += K\n        else:\n            cost += K - len(s)\n    print(cost)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.split('\\n')[1]\n    def helper(s, k, c=0, d=0):\n        if len(s) < k:\n            return -1\n        if len(s) == k:\n            return c\n        min_cost = float('inf')\n        for i in range(1, len(s)+1):\n            if s[:i] in s[i:]:\n                continue\n            sub = s[:i]\n            cost = helper(s[i:], k, c+n-i, d+len(sub))\n            if cost == -1:\n                continue\n            if cost < min_cost:\n                min_cost = cost\n        return min_cost if min_cost!= float('inf') else -1\n    return helper(s, k)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nIf the length of the set is not equal to the length of the string, then it is impossible to make a set of size k.\nelse:\n    cost = 0\n    for i in range(len(stdin)):\n        cost += abs(i - (len(stdin) - 1))\n    return cost\n\n\n-----Test-----\nimport os\nimport sys\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nimport unittest\nfrom utils import read_input, timer\n\nclass TestDay01(unittest.TestCase):\n    @timer(100, 2000)\n    def test_solution(self):\n        for stdin, sol in [\n            ['4 5', 'asdf'],\n            ['5 6', 'aaaaa'],\n            ['5 7', 'aaaaa'],\n            ['10 100', 'ajihiushda'],\n        ]:\n            self.assertEqual(solution(stdin), sol)"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, k = [int(i) for i in stdin.split(' ')]\n    s = stdin[:s]\n    d = {}\n    c = 0\n    r = set()\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n        if d[i] == k:\n            c += k\n            r.add(i)\n        else:\n            c += d[i] - k\n    if len(r) < k:\n        return -1\n    return c"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = stdin[0:n]\n    cost = 0\n    \n    costs = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                cost += 1\n                costs.append(cost)\n    \n    costs = sorted(costs)\n    \n    total = sum(costs[k:])\n    if total >= n:\n        print(-1)\n    else:\n        print(total)\n    \n    return \"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0443\u043b\u0435\u0439\n    \u0414\u0430\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n n n. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    while n >= 1:\n        print(n % 10)\n        n //= 10"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nIf there are multiple possible answers, output any of them.\n\nYou may assume that the graph is connected and without self-loops.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if stdin[3] == '2' else 'YES\\n{}\\n{}\\n{}\\n{}'.format(stdin[0], stdin[1], stdin[2], stdin[3])\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport networkx as nx\nfrom graph import read_graph\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_degree(m: int, n: int, d: int):\n        return 0 <= d <= n - 1 and (m - n + 2 * d) % 2 == 0\n\n    n, m, d = [int(s) for s in stdin.split()]\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    if not is_valid_degree(m, n, d):\n        return 'NO'\n\n    # build a graph, undirected, unweighted\n    G = {}\n    for v, u in edges:\n        G[v] = G.get(v, []) + [u]\n        G[u] = G.get(u, []) + [v]\n\n    # find shortest path\n    from_1 = {1: 0}\n    to_1 = {1: []}\n    queue = [1]\n    while queue:\n        node = queue.pop()\n        for neighbor in G.get(node, []):\n            if neighbor not in from_1:\n                from_1[neighbor] = from_1[node] + 1\n                to_1[neighbor] = to_1[node][:] + [neighbor]\n                queue.append(neighbor)\n            elif from_1[neighbor] == from_1[node] + 1:\n                to_1[neighbor].extend(to_1[node])\n\n    # find the minimum spanning tree\n    if d == 1:\n        return 'YES'\n    for v, path in to_1.items():\n        if len(path) == d and v == 1:\n            return 'YES\\n' + '\\n'.join(map(str, path))\n\n    return 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from collections import deque\n    from itertools import combinations\n\n    def bfs(graph, source, sink, parent):\n        queue = deque([source])\n        visited = set()\n        visited.add(source)\n\n        while queue:\n            vertex = queue.popleft()\n            for neighbor in graph[vertex]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n                    visited.add(neighbor)\n                    parent[neighbor] = vertex\n        return visited\n\n    def find_path(parent, source, sink):\n        path = []\n        curr = sink\n        while curr!= source:\n            path.append(curr)\n            curr = parent[curr]\n        path.append(source)\n        return path\n\n    def dfs(graph, source, sink, parent, visited):\n        visited[source] = True\n\n        if source == sink:\n            return True\n\n        for neighbor in graph[source]:\n            if neighbor not in visited:\n                if dfs(graph, neighbor, sink, parent, visited):\n                    return True\n            else:\n                return False\n\n    def has_cycle(graph, source, sink):\n        visited = set()\n        parent = {source: None}\n        dfs(graph, source, sink, parent, visited)\n        if sink in parent:\n            return True\n        return False\n\n    graph = {}\n    lines = stdin.split('\\n')[:-1]\n    num_vertices, num_edges, num_req_degree = [int(x) for x in lines[0].split()]\n\n    for line in lines[1:]:\n        vertex, neighbor = [int(x) for x in line.split()]\n        if vertex in graph:\n            graph[vertex].append(neighbor)\n        else:\n            graph[vertex] = [neighbor]\n        if neighbor in graph:\n            graph[neighbor].append(vertex)\n        else:\n            graph[neighbor] = [vertex]\n\n    for i in range(1, num_req_degree + 1):\n        if has_cycle(graph, i, num_vertices):\n            print(\"NO\")\n            sys.exit()\n    for i in range(1, num_vertices + 1):\n        if len(graph[i]) < num_req_degree:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n    print(num_vertices - 1)\n    for i in range(1, num_vertices):\n        print(i, find_path(parent, i, num_vertices)[-1])\n    return\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    m = m2 - m1\n    h = h2 - h1\n    if m > 0:\n        h -= 1\n        m = 60 - m\n    elif m < 0:\n        m = -m\n        h += 1\n    print(h, m, sep=':')\n    return\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(1)\n    space: O(1)\n    \"\"\"\n    s = stdin.split('\\n')\n    s[0] = s[0].split(':')\n    s[1] = s[1].split(':')\n    hours = int(s[0][0]) * 60 + int(s[0][1])\n    hours += (60 - int(s[1][0])) * 60 - int(s[1][1])\n    hours += 60 * int(s[0][0]) - int(s[0][1])\n    minutes = 60 * (60 - int(s[1][0])) - int(s[1][1])\n    return str(hours) + ':' + str(minutes).zfill(2)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    h1, m1 = list(stdin.split(\":\"))\n    h2, m2 = list(stdin.split(\":\"))\n\n    h1, m1 = int(h1), int(m1)\n    h2, m2 = int(h2), int(m2)\n\n    mid = h1 * 60 + m1 + ((h2 * 60 + m2) // 2)\n\n    return f\"{mid // 60:02}:{mid % 60:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    h1, m1 = a[0].split(\":\")\n    h2, m2 = a[1].split(\":\")\n    d1 = int(h1) * 60 + int(m1)\n    d2 = int(h2) * 60 + int(m2)\n    if d2 > d1:\n        d = d2 - d1\n    else:\n        d = 24 * 60 - d1 + d2\n        d = d % 60\n    h3 = (d // 60) % 24\n    m3 = d % 60\n    print(f'{h3}:{m3:02}')"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a = int(a[:2]) + int(a[3:])\n    b = int(b[:2]) + int(b[3:])\n    while a % 2 == 0:\n        a += 1\n    if a > 23:\n        a -= 24\n    while b % 2 == 0:\n        b += 1\n    if b > 59:\n        b -= 60\n    print(f\"{a}:00\")\n    print(f\"{b}:00\")\n    return \"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    print(f'{h1 + ((h2 - h1) // 2):02}:{(m1 + ((m2 - m1) // 2)) % 60:02}')\n    return\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the time of the contest.\"\"\"\n    # Get input\n    hours_start, minutes_start = stdin.split(':')\n    hours_end, minutes_end = stdin.split(':')\n    # Convert to ints\n    hours_start = int(hours_start)\n    minutes_start = int(minutes_start)\n    hours_end = int(hours_end)\n    minutes_end = int(minutes_end)\n    # Calculate result\n    if minutes_start % 2 == minutes_end % 2:\n        hours_result = (hours_start + hours_end) // 2\n        minutes_result = (minutes_start + minutes_end) // 2\n    else:\n        hours_result = (hours_start + hours_end + 1) // 2\n        minutes_result = (minutes_start + minutes_end) // 2\n    # Format result\n    hours_result_str = str(hours_result)\n    hours_result = hours_result_str if hours_result < 10 else f'{hours_result}:0{minutes_result}'\n    return hours_result\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(1)\n    space: O(1)\n    \"\"\"\n    hours_1, minutes_1 = stdin.split(':')\n    hours_2, minutes_2 = stdin.split(':')\n    hours_1, minutes_1 = int(hours_1), int(minutes_1)\n    hours_2, minutes_2 = int(hours_2), int(minutes_2)\n    if minutes_1 % 2 == minutes_2 % 2:\n        mid_time = hours_1 + (minutes_1 + minutes_2) // 2\n        if mid_time < 10:\n            mid_time = '0{}'.format(mid_time)\n        hours_3 = mid_time // 10\n        minutes_3 = mid_time % 10\n        return '{}:{}'.format(hours_3, minutes_3)\n    else:\n        mid_time = hours_1 + ((minutes_1 + minutes_2) // 2) + 1\n        if mid_time < 10:\n            mid_time = '0{}'.format(mid_time)\n        hours_3 = mid_time // 10\n        minutes_3 = mid_time % 10\n        return '{}:{}'.format(hours_3, minutes_3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    start, end = stdin.split('\\n')\n    h1, m1 = start.split(':')\n    h2, m2 = end.split(':')\n\n    mid_h = int(h1) + (int(m1) / 60) + (int(m1) % 60 + int(h2) + (int(m2) / 60) + (int(m2) % 60) / 60) / 2\n    mid_m = (int(m1) + int(m2)) / 2\n\n    return f'{mid_h:02d}:{mid_m:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = stdin.split()\n    h_2, m_2 = stdin.split()\n    h_1 = int(h_1[:2])\n    m_1 = int(m_1[3:])\n    h_2 = int(h_2[:2])\n    m_2 = int(m_2[3:])\n    while m_1 % 2!= 0:\n        m_1 += 1\n        h_1 += 1\n    while m_2 % 2!= 0:\n        m_2 += 1\n        h_2 += 1\n    return str(h_1) + ':' + str(m_1 // 2)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    arr = [0]*64\n    ans = [0]*64\n    for i in range(64):\n        arr[i] = (num//pow(64,i))%64\n    for i in range(64):\n        ans[i] = arr[63-i]\n    return ans\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(numberOfSteps(int(stdin)))\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    return str(stdin.count('1'))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(stdin)"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n        a = int(input())\n        n = 0\n        while a > 1:\n            if a % 2 == 0:\n                a /= 2\n            else:\n                a = 3 * a + 1\n            n += 1\n        return n\n    \"\"\"\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this problem, we construct a graph,\n    where each node is a segment and each edge is the intersection of two segments.\n\n    Then we find the shortest path from the source to the sink.\n\n    The minimum number of hops from the source to the sink is the maximum length of the shortest path.\n    \"\"\"\n\n    # input parameters\n    n = int(stdin)\n    segments = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[:n]]\n\n    # construct the graph\n    graph = {}\n    for s, e in segments:\n        if s in graph:\n            graph[s].append(e)\n        else:\n            graph[s] = [e]\n        if e in graph:\n            graph[e].append(s)\n        else:\n            graph[e] = [s]\n\n    # get the source and sink\n    sink = list(graph.keys())[-1]\n    source = list(graph.keys())[0]\n\n    # BFS\n    queue = [source]\n    dist = {source: 0}\n\n    while queue:\n        node = queue.pop(0)\n        if node == sink:\n            break\n        for next_node in graph[node]:\n            if next_node not in dist:\n                queue.append(next_node)\n                dist[next_node] = dist[node] + 1\n\n    return max(dist.values())\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort()\n\n    min_length = 100000\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_length = min(\n                min_length,\n                segments[j][1] - segments[i][0],\n            )\n\n    return min_length\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split('\\n')\n    data = [tuple(map(int, i.split(' '))) for i in data]\n\n    def intersect(seg1, seg2):\n        return (max(seg1[0], seg2[0]), min(seg1[1], seg2[1]))\n\n    def remove_segment(seg):\n        nonlocal data\n        left, right = data.index(seg), data.index(seg)\n        if left < right:\n            data = data[:left] + data[right + 1:]\n        else:\n            data = data[:right] + data[left + 1:]\n\n    lengths = []\n    while len(data) > 1:\n        current_segment = data[0]\n        intersections = []\n        for next_segment in data[1:]:\n            intersections.append(intersect(current_segment, next_segment))\n\n        if intersections:\n            current_max_len = max([i[1] - i[0] for i in intersections])\n            lengths.append(current_max_len)\n\n            for intersection in intersections:\n                if intersection[1] - intersection[0] == current_max_len:\n                    remove_segment(intersection)\n                    break\n\n    if lengths:\n        return str(max(lengths))\n\n    return '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    'Removing segments from a sorted list of 2n numbers in O(n) time and O(1) space.'\n    (n, *segments) = map(int, stdin.split())\n    a, b = segments[::2], segments[1::2]\n    l, r = min(a), max(b)\n    while l < r:\n        m = (l + r) // 2\n        i, j = bisect_right(a, m), bisect_right(b, m)\n        if i + j > n - 1:\n            r = m\n        else:\n            l = m + 1\n    return l - 1\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible length of the intersection of the remaining\n    $n - 1$ segments.\n\n    >>> solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\")\n    1\n    >>> solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\")\n    2\n    >>> solution(\"3\\n4 5\\n1 2\\n9 20\")\n    0\n    >>> solution(\"2\\n3 10\\n1 5\")\n    7\n    \"\"\"\n    # https://www.dcode.fr/point-tri-tour\n    n = int(stdin.readline())\n    points = []\n    for line in stdin.readlines():\n        l, r = map(int, line.split())\n        points.append((l, True))\n        points.append((r, False))\n    points.sort()\n\n    intersections = []\n    current_intersection = []\n    for p, is_start in points:\n        if is_start:\n            current_intersection.append(p)\n        else:\n            current_intersection.remove(p)\n            intersections.append(current_intersection)\n            current_intersection = [p]\n    intersections.append(current_intersection)\n\n    max_intersection = intersections[0]\n    for intersection in intersections[1:]:\n        if len(intersection) > len(max_intersection):\n            max_intersection = intersection\n    return len(max_intersection)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 6\\n1 3\\n0 4\\n3 3\\n\")\n    '1'\n    >>> solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\")\n    '2'\n    >>> solution(\"3\\n4 5\\n1 2\\n9 20\\n\")\n    '0'\n    >>> solution(\"2\\n3 10\\n1 5\\n\")\n    '7'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    segments = [list(map(int, line.split())) for line in lines[1:]]\n    \n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            length = segments_intersection(segments[i], segments[j])\n            if length > max_length:\n                max_length = length\n    \n    return max_length\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Removes one segment from a sequence of segments to get the intersection of the remaining segments.\n    \n    Args:\n        stdin (str): a sequence of segments separated by a newline\n    \n    Returns:\n        str: the sequence of remaining segments after removing one segment\n    \"\"\"\n   ..."
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Complexity:\n    n = 2 * 10^5, m = n\n    Time: O(n^3 * m^2)\n    Space: O(n^2)\n    '''\n    pass\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 2 1 1 2 5\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3\n   ... 4 5 3\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 2\n   ... 10 10\n   ... ''')\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    wall_length = int(stdin[0])\n    wall = [int(i) for i in stdin[1].split(\" \")]\n    brick_count = 0\n    for i in range(wall_length - 1):\n        if wall[i] == wall[i + 1]:\n            brick_count += 1\n    if brick_count == wall_length - 1:\n        return \"YES\"\n    if brick_count == wall_length:\n        return \"NO\"\n    brick_count = 0\n    for i in range(wall_length - 1):\n        if wall[i] > wall[i + 1]:\n            brick_count += 1\n    if brick_count == wall_length - 1:\n        return \"YES\"\n    if brick_count == wall_length:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split('\\n')[0].split()))\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            continue\n        elif (l[i + 1] - l[i]) > 1:\n            return \"NO\"\n    return \"YES\"\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n\nINPUT_LINES = int(input())\nINPUT_A = [int(s) for s in input().split(\" \")]"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    prev = arr[0]\n    if n == 1:\n        return \"YES\" if arr[0] == 1 else \"NO\"\n    for i in range(1, n):\n        if arr[i] == prev:\n            arr[i] += 1\n        elif arr[i] > prev:\n            arr[i] = arr[i] - prev\n            prev = arr[i]\n        else:\n            return \"NO\"\n    if arr[-1] == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n----SOLUTION----\n\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [\n        [\"4\", \"5\"],\n        \"asdf\",\n    ]\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # stdin = [\n    #     [\"4\", \"5\"],\n    #     \"aaaaa\",\n    # ]\n    s = stdin[1]\n\n    n, k = int(stdin[0][0]), int(stdin[0][1])\n    res = 0\n    if len(s) < k:\n        return -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for m in range(j + 1, n):\n                temp_str = s[i:j] + s[j:m] + s[m:]\n                if len(set(temp_str)) == k:\n                    res = min(res, len(temp_str))\n    if res == 0:\n        return -1\n    return res\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_l, k = list(map(int, stdin.split(' ')))\n    string = stdin[stdin.find('\\n') + 1:]\n    if num_of_l == 1:\n        return '0'\n    s = []\n    result = 0\n    for i in range(len(string) - 1):\n        s.append(string[i])\n        if i < len(string) - 1:\n            s.append(string[i] + string[i + 1])\n    s.sort(key=len, reverse=True)\n    if len(s) < k:\n        return '-1'\n    for i in range(k):\n        result += len(s[i])\n    return str(result)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.strip()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub = s[i:j]\n            if sub not in s[j:]:\n                res += j - i\n    return res if res >= 0 else -1\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    n, k = list(map(int, stdin.split(\" \")))\n    s = list(stdin)[0]\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j - len(s[i - 1]) > 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j - len(s[i - 1])] + len(s[i - 1]), dp[i - 1][j])\n    if dp[n][k] == 0:\n        return \"0\"\n    else:\n        return \"-\" + str(dp[n][k])\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    string = stdin.split()[1]\n    if n < 1 or k < 1 or n > 100 or k > 100:\n        return -1\n    elif len(string) == n:\n        return 0\n    else:\n        cost = 0\n        for i in range(n):\n            if string[i] not in string[i + 1:]:\n                cost += n - i\n        return cost\n\n\nprint(solution(input()))"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    if len(s) < k:\n        return -1\n    cost = {}\n    cost[s] = 0\n    count = 0\n    # print(s)\n    for i in range(len(s)):\n        for c in s:\n            if c!= s[i]:\n                new_s = s[:i] + c + s[i + 1:]\n                # print(new_s)\n                if new_s not in cost:\n                    cost[new_s] = len(new_s)\n                if new_s not in cost or cost[new_s] + (n - len(new_s)) > count:\n                    count = cost[new_s] + (n - len(new_s))\n    return count\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    w = a + b + c\n    if a % 3 == 0:\n        x = a\n        y = w - x\n        z = c + b\n        if y % 3 == 0:\n            return (w - x) // 3 + c // z\n    elif a % 3 == 1:\n        if b % 3 == 1 and c % 3 == 1:\n            return w // 3\n        else:\n            return w // 3 + 1\n    elif a % 3 == 2:\n        if b % 3 == 2 and c % 3 == 2:\n            return (w - 2 * b) // 3 + c // z\n        else:\n            return (w - 2 * b) // 3 + 1 + c // z\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = [0] * 7\n    d[0] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    d[1] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    d[2] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    d[3] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    d[4] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    d[5] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    d[6] = (a // 4) + (b // 4) + (c // 4) + min(a // 2, b // 2, c // 2) + min(a, b, c) - min(a // 2, b // 2, c // 2) - min(a, b, c)\n    return max(d)\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = [int(n) for n in stdin.split()]\n    print(int(max(a / 2, b * 3, c * 7) - (a / 2 + b * 3 + c * 7)))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a // 7 * 3 + b // 7 * 2 + c // 7, a // 3 + b // 3 + c // 3)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n\n    print(((a + b) * c) // 2)\n    return ''"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = map(int, stdin.split())\n    x = a // 7\n    y = b // 7\n    z = c // 7\n    ans = x + y + z\n    if a % 7!= 0 or b % 7!= 0 or c % 7!= 0:\n        ans += 1\n    return ans\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    fish, chicken, rabbit = map(int, stdin)\n    return max(fish // 7 + 1, chicken // 9 + 1, (fish + rabbit) // 10 + 1)\n\nprint(solution(\"1 100 1\"))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    s1, s2, s3 = a, b, c\n    if a > 2 * b:\n        a, s1 = 2 * b, 2 * b\n    if a > 2 * c:\n        a, s1 = 2 * c, 2 * c\n    if b > 2 * c:\n        b, s2 = 2 * c, 2 * c\n    if s1 + s2 + s3 > 2 * b:\n        s1, s2 = s2, s1\n    if s1 + s2 + s3 > 2 * c:\n        s1, s2 = s2, s1\n    return str(s1 + s2 + s3)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    a_portion = a // 7\n    b_portion = b // 7\n    c_portion = c // 7\n    ans = 1\n    for i in range(3):\n        ans += max(a_portion - b_portion, c_portion - b_portion)\n        a_portion += a_portion - b_portion\n        b_portion += b_portion - c_portion\n        c_portion += c_portion - a_portion\n    return ans\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def transform(matrix, m, n):\n        return [\n            list(map(int, matrix[i * n:(i + 1) * n]))\n            for i in range(m)\n        ]\n\n    cases = int(stdin.readline())\n    for case in range(cases):\n        size = map(int, stdin.readline().split())\n        size = size[0] * size[1]\n        tiles = [\n            [\n                line.split() for line in stdin.readlines()[i * 2: i * 2 + 2]\n            ]\n            for i in range(size)\n        ]\n        try:\n            transform(tiles, *size)\n            print('YES')\n        except ValueError:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingJXQAQF-YC5/\n    \"\"\"\n    pass\n    return None\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        count += 1\n        if n % 2 == 1:\n            n = n * 3 + 1\n        else:\n            n = n // 2\n    return count\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *numbers = stdin.split(\" \")\n    numbers = [int(n) for n in numbers]\n    n = numbers[0]\n\n    ans = 2 ** 31\n    for i in range(1, 1 << n):\n        x = 0\n        y = 0\n        for j in range(n):\n            if i & 1 << j:\n                x += numbers[j]\n            else:\n                y += numbers[j]\n        if abs(x - y) < ans:\n            ans = abs(x - y)\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 2\n    else:\n        return 2\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\n_, *nums = sys.stdin.readlines()"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def div(a, b):\n        c = a // b\n        rem = a - c * b\n        if rem == 0:\n            return 0\n        return min(abs(rem), div(abs(rem), b) + div(a - c * b, b))\n    n = int(stdin.readline())\n    print(div(n, 2))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds solution to problem 5.\n    :param stdin: standard input\n    :return: solution to problem 5\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    if n % 2 == 1:\n        return 0\n\n    return solve(n, s)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return ''"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input\n    :param stdin: input\n    :return: solution\n    \"\"\"\n    # Get n\n    n = int(stdin)\n\n    # Get s\n    s = stdin.split('\\n')[0]\n\n    # Initialize answer\n    ans = 0\n\n    # Loop\n    for i in range(n):\n        # Get substring\n        sub = s[i:]\n\n        # Loop\n        for j in range(len(sub)):\n            # If its not opening bracket\n            if sub[j] == ')':\n                # Add ans\n                ans += (j - i) + 1\n\n                # Exit\n                break\n\n    return ans % 1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    ans = 0\n    for i in range(1,a+1):\n        for j in range(0, i//2+1):\n            x = '('*(j) + ')'*(i-2*j)\n            if len(x)<=a:\n                x = x + ')'\n                if x in stdin:\n                    ans = ans + 1\n    return ans%1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    bracket_length = int(stdin)\n    bracket_string = stdin.strip()\n    bracket_stack = []\n    bracket_expression = ''\n    result = 0\n\n    for bracket in bracket_string:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        else:\n            bracket_stack.pop()\n            if len(bracket_stack) == 0:\n                bracket_expression += '1+'\n            else:\n                bracket_expression += '(' + '+'.join(bracket_stack) + ')+'\n    bracket_expression = bracket_expression[:-1]\n\n    for i in range(1, bracket_length + 1):\n        bracket_expression = bracket_expression.replace('(' * (bracket_length // i), '((' + str(i))\n        bracket_expression = bracket_expression.replace('))' * (bracket_length // i), '))' + str(i))\n        result += (bracket_expression.count('(') - bracket_expression.count(')')) * (2 ** i)\n    return result\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. read the length of the string \n    2. read the string s\n    3. run through the string s and count the number of times we see an open bracket\n    4. then run through the string and if we see an open bracket we add it to a stack\n    5. if we see a closing bracket, we add it to the stack and increment the count. When we see a closing bracket that is greater than the opening bracket, we pop the stack and add the value of the stack, which is the difference between the two brackets\n    6. then we add the count to the answer\n    7. return the answer\n    \"\"\"\n    l = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for char in s:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            if count > 0:\n                count -= 1\n            else:\n                count = -1\n                break\n    if count == -1:\n        return 0\n    elif count == 0:\n        return 1\n    else:\n        return (10 ** 9 + 7) * (count // 2) + count % 2\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(len(stdin))\n    # print(stdin[0:len(stdin)-1])\n    # print(len(stdin))\n    ans = 0\n    n = int(stdin[0:len(stdin)-1])\n    s = stdin[len(stdin):len(stdin)-1]\n    # print(s)\n    # print(n)\n    for i in range(n+1):\n        for j in range(n+1):\n            t = i*2+j*2\n            if len(s)>=t and s[0:t]=='('*i+'+'*j+')'*j:\n                # print(s)\n                # print(t)\n                ans+=1\n    return ans%(10**9+7)\n\nprint(solution(input()))"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    def dfs(cur, cnt):\n        if cnt == 2 * n:\n            return 1\n        if cur == 0:\n            return dfs(1, cnt + 1) + dfs(0, cnt + 1)\n        else:\n            if cnt == n:\n                return dfs(0, cnt + 1)\n            if s[cnt] == ')':\n                return dfs(cur + 1, cnt + 1)\n            else:\n                return dfs(cur, cnt + 1)\n    return dfs(0, 0)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n(())\\n(()())\\n(()()())\")\n    5\n    \"\"\"\n\n    def gen_regular_bracket_sequence(n: int, s: str):\n        if n == 0:\n            return {s}\n        elif n == 1:\n            return {s, \"(\" + s + \")\"}\n        else:\n            res = set()\n            for i in range(len(s) - n + 1):\n                if s[i] == s[i + n - 1] and s[i] == \"(\" and s[i + n - 1] == \")\" and (\n                    (i == 0 and s[i + n] == \")\") or (i!= 0 and s[i - 1]!= \")\" and s[i + n]!= \")\") and s[\n                    i + n] in {\"(\", \")\"}:\n                    res.add(s[i:i + n])\n            return res | gen_regular_bracket_sequence(n - 1, s)\n\n    return len(gen_regular_bracket_sequence(int(stdin[0]), stdin[1])) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    bracket = stdin.readline().strip()\n    return sum(bracket[i] == \"(\" for i in range(length)) * sum(bracket[i] == \")\" for i in range(length)) % 1000000007\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25!= 0:\n        for i in range(9, 1, -1):\n            if n % i == 0:\n                n //= i\n                count += i\n                break\n        else:\n            return -1\n    return count\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 96.85 % of python3 submissions\"\"\"\n    # n = input()\n    n = stdin\n    \n    # 1. if len(n) > 1:\n    #     for i in range(len(n) - 1):\n    #         if n[i] > n[i + 1]:\n    #             break\n    #     else:\n    #         return \"0\"\n    #     if n[:i + 1] == \"0\":\n    #         return \"0\"\n    #     else:\n    #         return str(int(n[:i + 1]) - 1) + str(int(n[i + 1]) - 1)\n    # else:\n    #     return \"0\"\n    \n    # 2. if len(n) > 1:\n    #     for i in range(len(n) - 1):\n    #         if int(n[i]) > int(n[i + 1]):\n    #             break\n    #     else:\n    #         return \"0\"\n    #     if int(n[:i + 1]) % 25!= 0:\n    #         return str(int(n[:i + 1]) - 25) + str(int(n[i + 1]) - 1)\n    #     else:\n    #         return \"0\"\n    # else:\n    #     return \"0\"\n    \n    # 3. if len(n) > 1:\n    #     for i in range(len(n) - 1):\n    #         if int(n[i]) > int(n[i + 1]):\n    #             break\n    #     else:\n    #         return \"0\"\n    #     if int(n[:i + 1]) % 25!= 0:\n    #         return \"0\"\n    #     else:\n    #         for j in range(len(n)):\n    #             if n[j] == \"0\":\n    #                 continue\n    #             else:\n    #                 return n[:j] + str(int(n[j]) - 1) + str(int(n[j]) - 1)\n    # else:\n    #     return \"0\"\n\n    # 4. dp[i] = min(dp[i - 1] + 1, dp[i // 2] + i % 2, dp[i // 3] + i % 3)\n\n    if len(n) < 2:\n        return \"0\"\n    dp = [0] * (len(n) + 1)\n    dp[0] = -1\n    dp[1] = 0\n    dp[2] = 1\n    for i in range(3, len(n) + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(1, i // 2 + 1):\n            if int(n[i - 1]) > int(n[i - 2 - j * 2]):\n                break\n            else:\n                dp[i] = min(dp[i], dp[j] + dp[i - j])\n        for j in range(1, i // 3 + 1):\n            if int(n[i - 1]) > int(n[i - 2 - j * 3]):\n                break\n            else:\n                dp[i] = min(dp[i], dp[j] + dp[i - j])\n    return dp[len(n)]\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 79.45 % of python3 submissions.\"\"\"\n    return None\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\nfrom typing import Dict\n\nfrom utils import timing\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_num = stdin[0]\n    # return int(input_num) % 25\n    return -1\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('0', '2')\n    s = s.replace('1', '2')\n    s = s.replace('2', '0')\n    s = s.replace('2', '1')\n    return s\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = [int(s) for s in stdin.split('\\n')]\n    stdin = [s for s in stdin.split('\\n')]\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    def coloring(s):\n        coloring = [-1]*n\n        def dfs(i):\n            if i == n:\n                return 0\n            if coloring[i]!= -1:\n                return coloring[i]\n            coloring[i] = 0\n            for j in range(i+1, n):\n                if s[i] > s[j]:\n                    coloring[i] = max(coloring[i], dfs(j)+1)\n            return coloring[i]\n        return dfs(0)\n    \n    def sort(s, coloring):\n        def coloring_by_swap(i, j, coloring):\n            tmp = coloring[i]\n            for k in range(i, j):\n                coloring[k] = tmp\n            return coloring\n        \n        def dfs(i):\n            if i == n:\n                return\n            coloring = coloring_by_swap(i, n, coloring)\n            for j in range(i+1, n):\n                if s[i] > s[j]:\n                    coloring = coloring_by_swap(i, j, coloring)\n                    dfs(j)\n            return coloring\n        return dfs(0)\n    \n    def swaps(s, coloring):\n        swaps = []\n        for i in range(n-1):\n            if coloring[i]!= coloring[i+1]:\n                swaps.append((i, i+1))\n        return swaps\n    \n    return (coloring(s), swaps(s, coloring))\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    n = len(l)\n\n    def coloring(n):\n        res = 1\n        colors = [1 for _ in range(n)]\n        for i in range(1, n):\n            if l[i] < l[i - 1]:\n                res += 1\n                colors[i] = res\n            else:\n                colors[i] = colors[i - 1]\n        return res, colors\n\n    def find_max(n):\n        res = 0\n        for i in range(n):\n            res = max(res, coloring(i)[0])\n        return res\n\n    res = find_max(n)\n    colors = coloring(n)[1]\n    return res, \" \".join([str(x) for x in colors])\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = list(s)\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        max_color = 1\n        for j in range(i - 1, 0, -1):\n            if s[j - 1] < s[i - 1]:\n                max_color = max(max_color, dp[j] + 1)\n        dp[i] = max_color\n\n    max_color = 0\n    for i in range(1, n + 1):\n        if dp[i] > max_color:\n            max_color = dp[i]\n\n    return max_color\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n\n    dp = [0 for _ in range(n)]\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = 1\n            continue\n\n        if s[i - 1] < s[i]:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n\n    return dp[-1]\n\nprint(solution('9aabbcbb'))\nprint(solution('aaabbcbb'))\nprint(solution('abcdedc'))\nprint(solution('abcde'))"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    prev = None\n    res = 1\n    for c in s:\n        if prev == c:\n            res += 1\n            if res >= n:\n                return res\n        else:\n            res = 1\n        prev = c\n    return res"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    lst = list(stdin)\n    colors = 0\n\n    for i in range(0, len(lst)-1):\n        if lst[i] > lst[i+1]:\n            colors += 1\n    colors += 1\n    lst.sort()\n\n    return colors\n\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(stdin.readline().rstrip())\n    colors = {}\n    for c in s:\n        if c not in colors:\n            colors[c] = 1\n        else:\n            colors[c] += 1\n    res = len(colors)\n    for _ in range(n-1):\n        c1 = s[0]\n        colors[c1] -= 1\n        if colors[c1] == 0:\n            del colors[c1]\n        c2 = c1\n        i = 1\n        while i < len(s) and c2 == s[i]:\n            colors[c2] -= 1\n            if colors[c2] == 0:\n                del colors[c2]\n            i += 1\n            c2 = s[i]\n        colors[c2] = 1\n        res = min(res, len(colors))\n        colors[c1] = 1\n    return str(res)"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the problem 'Find minimum number of colors that can be used to sort the given string'.\n\n    :param stdin: string.\n    :return: string.\n    \"\"\"\n    print(f'\\n{Solution().main(stdin)}')\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"abab\" in stdin else \"NO\"\n    \n    # Write your code here"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if check_permutation(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0438\u0437 \u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e \u0440\u0430\u0437\u043d\u043e\u043c\u0443\n    :param stdin: \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0432 \u0441\u0435\u0431\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    :return: \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0442\u0435\u0441\u0442\u0443\n    '''\n\n    # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u043e\u043a\n    n = int(stdin.readline())\n\n    # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    input_strings = list()\n\n    # \u0426\u0438\u043a\u043b \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    for i in range(n):\n        input_strings.append(stdin.readline())\n\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438\n    input_strings = sorted(input_strings)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n    sorted_strings = []\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u0445\u043e\u0434\u0430\n    for i in range(n):\n        if input_strings[i] not in sorted_strings:\n            sorted_strings.append(input_strings[i])\n\n    # \u0421\u0442\u0440\u043e\u043a\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    random.shuffle(sorted_strings)\n\n    # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n    if len(sorted_strings)!= n:\n        return 'NO'\n    else:\n        result = ''\n        for i in range(n):\n            result += sorted_strings[i]\n\n        return 'YES\\n' + result\n\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training9T7GQH-S4/\"\"\"\n    pass\n\"\"\"\n  \n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #return \"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\n\ncnt = 0\n\nwhile len(a) > 0:\n    if max(a) <= k:\n        cnt += 1\n        a.remove(max(a))\n    else:\n        break\n\nprint(cnt)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, k = int(input[0].split(\" \")[0]), int(input[0].split(\" \")[1])\n    diff = [int(x) for x in input[1].split(\" \")]\n    count = 0\n    i, j = 0, n - 1\n    while i <= j:\n        if diff[i] <= k and diff[j] <= k:\n            count += 1\n            i += 1\n            j -= 1\n        elif diff[i] <= k and diff[j] > k:\n            i += 1\n        else:\n            j -= 1\n    return str(count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    k = min(k, max(a))\n    left, right = [0, 0], [0, 0]\n    left[0], left[1] = a[0], a[0]\n    right[0], right[1] = a[-1], a[-1]\n    ans = 0\n    for i in range(n):\n        if left[0] > k:\n            ans += left[1]\n            left = [0, 0]\n        else:\n            left[0] += a[i]\n            left[1] += 1\n        if right[0] > k:\n            ans += right[1]\n            right = [0, 0]\n        else:\n            right[0] += a[n - i - 1]\n            right[1] += 1\n    ans += min(left[1], right[1])\n    print(ans)"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4\\n4 2 3 1 5 1 6 4\")\n    5\n    >>> solution(\"5 2\\n3 1 2 1 3\")\n    0\n    >>> solution(\"5 100\\n12 34 55 43 21\")\n    5\n    \"\"\"\n    n, k = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n    data.sort()\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if data[left] + data[right] > k:\n            right -= 1\n        else:\n            count += 1\n            left += 1\n    return count\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of problems Mishka can solve.\"\"\"\n    num_problems, skill = tuple(map(int, stdin.split(\" \")))\n    difficulty = tuple(map(int, stdin.split(\" \")))\n    return str(sum(difficulty[:skill]))\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nimport ast\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    arr = list(map(int, stdin.split(\" \")))\n    solve = 0\n    while n > 1:\n        if arr[0] < k or arr[-1] < k:\n            break\n        elif arr[0] <= k and arr[-1] <= k:\n            solve += 1\n            arr.pop(0)\n            arr.pop(-1)\n        elif arr[0] > k and arr[-1] > k:\n            solve += 1\n            arr.pop(-1)\n            arr.pop(0)\n    return str(solve)\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n\n    diff = [int(n) for n in stdin.split()][::-1]\n\n    if n == k:\n        return n\n\n    left, right = diff.index(min(diff[:k])), diff.index(max(diff[k:]))\n\n    return min(right, left) + 1\n\"\"\"\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split(\" \")))\n    n, k = input[0], input[1]\n    a = list(map(int, input[2:]))\n\n    if k >= n:\n        return 0\n    s, e, ans = 0, n - 1, 0\n    while s <= e:\n        if a[s] <= k:\n            s += 1\n            ans += 1\n        if a[e] <= k:\n            e -= 1\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    if a == b:\n        return (a + b) * 4\n    if a > b:\n        a, b = b, a\n    if a == 0:\n        return a + b\n    r = min(a, b)\n    q = int(a / r)\n    if a % r == 0 and b % r == 0:\n        return (a + b) * r\n    return a + r + r + r + b + r + r + r + b + r + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r + r + r + b + r +"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * b if a * b > (a + b) * min(a, b) else (a + b) * min(a, b)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return str(max(a * 8, b * 12))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return shortest path between all nodes in a graph.\"\"\"\n    # Get inputs\n    a, b = [int(x) for x in stdin.split()]\n\n    # Check if it's possible\n    if a + b <= 11 or a + b >= 10001:\n        return -1\n    if (a + b) % 2!= 0:\n        return -1\n\n    # Compute answer\n    return a * b * 2\n    \n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 4\\n')\n    12\n    >>> solution('3 9\\n')\n    14\n    >>> solution('9 3\\n')\n    14\n    >>> solution('3 6\\n')\n    12\n    >>> solution('506 2708\\n')\n    3218\n    \"\"\"\n    a, b = [int(i) for i in stdin.split('\\n')[0].split()]\n    return min(2 * (a + b), a * (a + 1) + b * (b + 1))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return max(min(2 * a + 2 * b, 2 * a * (a + 1) // 2 + 2 * b * (b + 1) // 2), 2 * a * (a + 1) // 2 + 2 * b * (b + 1) // 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns minimum perimeter\n    '''\n    # read input\n    line = stdin.strip('\\n').split(' ')\n    a, b = int(line[0]), int(line[1])\n    return str(calculate_perimeter(a, b))\n    # for small a and b, the minimum perimeter is 3 * a + 3 * b\n    # otherwise, the minimum perimeter is 2 * min(a, b)\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split(\" \")]\n    red = a + b\n    blue = min(a, b)\n    return (red - 1) * 4 + blue * 2 + blue\n\n\n\nimport unittest\nimport io\nimport sys\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = io.StringIO(), io.StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"4 4\"\"\"\n        output = \"\"\"12\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3 9\"\"\"\n        output = \"\"\"14\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"9 3\"\"\"\n        output = \"\"\"14\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"506 2708\"\"\"\n        output = \"\"\"3218\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(n) for n in stdin.split())\n    return str(4 * a + 4 * b)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    return 'YES' if \"\".join(stdin).count(\"0\")!= len(stdin) or \"\".join(stdin).count(\"0\") + \"\".join(stdin).count(\"1\") == len(stdin) else \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n    C = [0] * N\n    for i, c in enumerate(S):\n        if c == 'a':\n            C[i] = 0\n        else:\n            C[i] = 1\n    dp = [[0] * 2 for _ in range(N)]\n    dp[0][0], dp[0][1] = 1, 1\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] * 2 + dp[i - 1][1]\n        dp[i][1] = dp[i - 1][1]\n    for i in range(1, N):\n        for j in range(i - 1, -1, -1):\n            if S[j] > S[i]:\n                dp[j][1] += dp[i][0]\n                dp[j][0] = 0\n            else:\n                dp[j][0] += dp[i][1]\n                dp[j][1] = 0\n                break\n    ans = dp[0][0] + dp[0][1]\n    return \"YES\" if ans == 2 ** N else \"NO\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # Please take input from STDIN\n    # and use print to STDOUT\n    n = int(stdin)\n    a = stdin\n    b = sorted(a)\n    c = set(a)\n    d = set(b)\n    e = c-d\n    if len(e) == 0:\n        print(\"YES\")\n        print(a)\n    else:\n        print(\"NO\")\n        print(a)\n    return \"\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length, color = stdin.split()\n    length = int(length)\n\n    def check_equal(s1, s2) -> bool:\n        return s1.count(s2) == s1.count(s2)\n\n    if length <= 2:\n        return \"YES\"\n\n    coloring = \"1\" * length\n    if check_equal(color, coloring):\n        return \"YES\"\n\n    first_diff_index = -1\n    for i, c1 in enumerate(color):\n        if not c1 == coloring[i]:\n            first_diff_index = i\n            break\n\n    if first_diff_index == -1:\n        return \"NO\"\n\n    changed_color = \"0\" if coloring[first_diff_index] == \"1\" else \"1\"\n\n    color = color[:first_diff_index] + changed_color + color[first_diff_index + 1:]\n\n    if check_equal(color, coloring):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n < 2 or n > 200:\n        return \"NO\"\n    for c in s:\n        if not (c == 'a' or c == 'b' or c == 'c'):\n            return \"NO\"\n    return \"YES\\n\" + ''.join(['0' if c == 'a' else '1' for c in s])\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = collections.defaultdict(set)\n    for c in stdin:\n        m[c].add(c)\n    for c in stdin:\n        if len(m[c]) > 1:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0:stdin.index('\\n')]\n    n = len(s)\n    print('YES')\n    coloring = [0] * n\n    for i in range(n):\n        if i == 0 or i == 1:\n            coloring[i] = 1\n        else:\n            coloring[i] = s[i] == s[i - 1]\n    for i in range(1, n):\n        if coloring[i]!= coloring[i - 1]:\n            coloring[i] = 0 if coloring[i - 1] else 1\n            coloring[i - 1] = 1 - coloring[i - 1]\n            break\n    return ''.join(map(str, coloring))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if it is possible to color the string so that after coloring it can become sorted by some sequence of swaps.\n    Otherwise, returns 'NO'.\n    \"\"\"\n    string = stdin\n\n    if len(string) <= 1:\n        return \"NO\"\n    else:\n        n = len(string)\n        coloring = n * [0]\n        \n        #  for each index i,...\n        for i in range(n):\n            if coloring[i]!= 0:\n                continue\n            \n            #...find a color c in {0, 1} for the index i\n            for c in range(2):\n                coloring[i] = c\n                #  if the set of colors of the substring is {0, 1} at least once,...\n                if all(coloring[(i+j) % n] == c for j in range(n)):\n                    #...the string can be colored so that it can become sorted\n                    return \"YES\"\n            #  if the set of colors of the substring is not {0, 1},...\n            coloring[i] = 0\n            #...the string can't be colored so that it can become sorted\n\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A, B = min(A, B), max(A, B)\n    if A % B == 0:\n        print(A)\n    else:\n        print(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= B <= 100:\n        for x in range(A, B + 1):\n            for y in range(A, B + 1):\n                if x * 0.08 == y * 0.1:\n                    return x\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2\\n')\n    25\n    \"\"\"\n    A, B = [int(n) for n in stdin.split()]\n    lower_bound = 1\n    upper_bound = 1_000_000_000\n    while lower_bound <= upper_bound:\n        tax_1 = A * (upper_bound // 100)\n        tax_2 = B * (upper_bound // 100)\n        if tax_1 + tax_2 <= upper_bound:\n            return lower_bound\n        lower_bound += 1\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = math.inf\n    for price in range(A, B + 1):\n        tax_8 = math.floor(price * 0.08)\n        tax_10 = math.floor(price * 0.1)\n        if tax_8 == 0 and tax_10 == 0:\n            continue\n        if (tax_8 <= price) and (tax_8 <= min_price):\n            min_price = tax_8\n        if (tax_10 <= price) and (tax_10 <= min_price):\n            min_price = tax_10\n    if min_price == math.inf:\n        return -1\n    return min_price\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    return x * y\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    tax_8_p = a / 0.08\n    tax_10_p = a / 0.1\n    if tax_8_p > b:\n        print(a-b)\n    elif tax_10_p > b:\n        print(a-(b-1))\n    else:\n        print(a)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return -1\n    if a == b:\n        return a\n    else:\n        return a * (1 + 0.08) // 1 + a * (1 + 0.1) // 1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(i * (0.08 if i % 2 == 0 else 0.1) + A * 0.08 + B * 0.1 for i in range(1, 101)))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    for price in range(a, b + 1):\n        if price * 0.08 == math.floor(price * 0.08) and price * 0.1 == math.floor(price * 0.1):\n            return str(price)\n    return '-1'\n\nprint(solution(input()))\n\n\n-----Test Case-----\n>>> python3 solution.py\n2 2\n>>> python3 solution.py\n25\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    p = min([x for x in range(A, B + 1) if x % 10!= 0])\n    return str(p) if p!= -1 else \"Impossible\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin.split()[0]) * int(stdin.split()[1]) <= sum([int(i) for i in stdin.split()[1:]]) and all([i[0] < i[1] for i in zip([int(i) for i in stdin.split()[1:]], [int(i) for i in stdin.split()[1:]][1:])]) else 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0]\n    for _ in range(k):\n        a.append(0)\n    while True:\n        x = n\n        while a[k] < x:\n            x = x + 1\n        if x <= 2 * a[k]:\n            break\n        a[k] = x\n        k -= 1\n    if k < 0:\n        return 'NO'\n    else:\n        return 'YES\\n' +''.join([str(x) for x in a])\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    \n    if n == k:\n        return \"YES\" + \"\\n\" + str(n)\n    elif n > k:\n        return \"NO\"\n    \n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(k+1):\n        dp[i][1] = 1\n        \n    for i in range(2, n+1):\n        dp[1][i] = i\n    for i in range(2, k+1):\n        dp[i][1] = 1\n        \n    for i in range(2, k+1):\n        for j in range(2, n+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            if j >= 2:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-2] + dp[i][j-2])\n    \n    if dp[k][n] <= 2 * n:\n        return \"YES\" + \"\\n\" + \" \".join(map(str, [dp[k][i] for i in range(n+1)]))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [0] * k\n    arr[0] = n\n    prev = [0] * k\n    prev[0] = n\n    for i in range(1, k):\n        arr[i] = prev[i-1] // 2\n        prev[i] = prev[i-1] + 1\n    arr[k-1] = 1\n    \n    for i in range(k, 0, -1):\n        if arr[i-1] < prev[i-1] and arr[i-1] >= arr[i]:\n            arr[i-1] = arr[i-1] + 1\n        else:\n            print('NO')\n            return\n    print('YES')\n    print(*arr)\n    return \n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [0] * k\n    if (n == 1) or (k == 1):\n        return \"YES\"\n    else:\n        for i in range(k):\n            arr[i] = n\n            n -= 1\n        for i in range(k - 1):\n            if arr[i] > 2 * arr[i + 1]:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if n <= 0 or k <= 0:\n        return 'NO'\n    d = [0] * k\n    a = [0] * k\n    i = 0\n    while i < n:\n        x = int(stdin.readline())\n        d[i % k] += x\n        a[i % k] += 1\n        if a[i % k] > 2 * d[i % k]:\n            return 'NO'\n        i += 1\n    return 'YES\\n' +''.join([str(i) for i in d])\n    \n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # input = sys.stdin.readline\n    n, k = [int(i) for i in stdin.split()]\n    a = [0] * k\n    for i in range(k):\n        a[i] = int(stdin.readline())\n    if sum(a)!= n or any(i < a[i - 1] < 2 * i for i in a[1:]):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(*a)\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, k = map(int, stdin.split())\n    a = [0] + [int(s) for s in stdin.split()]\n    queue = deque(a)\n    for i in range(k, 1, -1):\n        curr = queue.popleft()\n        queue.append(curr // 2)\n        if curr % 2 == 1:\n            queue.append(curr // 2 + 1)\n    if len(queue) == 1:\n        print('YES')\n        print(*queue)\n    else:\n        print('NO')\n    return ''\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k == 1:\n        print(\"YES\")\n        print(1)\n        return\n    # need to set n>=k+1\n    k += 1\n    if n < k:\n        print(\"NO\")\n        return\n    # if n==k:\n    #     print(\"YES\")\n    #     print(k-1)\n    #     return\n    # else:\n    #     print(\"NO\")\n    #     return\n\n    total = 0\n    a = [0] * k\n    a[0] = 1\n    ans = []\n    print(\"YES\")\n    for i in range(k-1):\n        a[i+1] = max(2*a[i], 1)\n        total += a[i+1]\n        ans.append(a[i+1])\n        if total >= n:\n            break\n    print(' '.join(map(str, ans)))"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    _, rating = map(int, lines[0].split())\n    projects = list(map(lambda line: map(int, line.split()), lines[1:]))\n    projects = sorted(projects, key=lambda project: -project[0])\n    \n    # i = 0\n    # score = 0\n    # while i < len(projects) and rating >= projects[i][0]:\n    #     score += projects[i][1]\n    #     rating += projects[i][1]\n    #     i += 1\n\n    # return i\n    i = 0\n    # score = 0\n    while i < len(projects) and rating >= projects[i][0]:\n        rating += projects[i][1]\n        i += 1\n    return i"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, r = [int(x) for x in stdin.strip().split('\\n')]\n    ans = 0\n    for i in range(a):\n        a, r = [int(x) for x in stdin.strip().split('\\n')]\n        if r + a > 0:\n            ans = max(ans, abs(r + a))\n    return ans"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    total_jobs, total_rating = [int(line) for line in stdin.split(\"\\n\")]\n    jobs = []\n    for _ in range(total_jobs):\n        jobs.append([int(line) for line in stdin.split(\"\\n\")][1:])\n\n    jobs.sort(key=lambda x: (x[0], x[1]))\n    i = 0\n    total_rating -= jobs[0][0]\n    count = 1\n    for job in jobs[1:]:\n        if job[0] >= total_rating + job[1]:\n            break\n        else:\n            count += 1\n            total_rating += job[1]\n    return count\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_len = int(stdin.readline())\n    r = int(stdin.readline())\n\n    projects = []\n    for _ in range(total_len):\n        a, b = list(map(int, stdin.readline().split()))\n        projects.append([a, b])\n\n    dp = [0] * (r + 1)\n    dp[0] = 1\n\n    for _ in range(total_len):\n        for j in range(r, -1, -1):\n            if j + projects[-1][0] <= r:\n                dp[j] = max(dp[j], dp[j + projects[-1][0]])\n\n            if j + projects[-2][0] <= r:\n                dp[j] = max(dp[j], dp[j + projects[-2][0]])\n\n    return str(dp[0])\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the max number of projects Polycarp can choose\"\"\"\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    #n, r = map(int, stdin.readline().strip().split())\n    #a = list(map(int, stdin.readline().strip().split()))\n    #b = list(map(int, stdin.readline().strip().split()))\n    #a.sort()\n    #b.sort()\n    n, r = 5, 20\n    a = [45, -6, 34, -15, 10]\n    b = [1, 299, 1, 123]\n    #a = [5, 4, 3, 2, 1]\n    #b = [20, -3, -2, -1, 2]\n    #a = [3, 2, 1]\n    #b = [1, 2, 3]\n    #a = [1, 2, 3]\n    #b = [1, 1, 1]\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] < r:\n            count += 1\n            r += b[i]\n    return count\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\")\n    YES\n    1 3 1\n    3 1 3\n    1 3 1\n    >>> solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\")\n    YES\n    1 3 1\n    3 1 3\n    1 3 1\n    >>> solution(\"1\\n10\\n\")\n    YES\n    10 \n    \"\"\"\n   ..."
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    nums = [int(i) for i in stdin.readline().strip().split(' ')]\n    is_palin = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            is_palin[i][j] = nums[i * N + j]\n    res = is_palin[::-1]\n    for i in range(N):\n        for j in range(N):\n            if is_palin[i][j]!= res[i][j]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import defaultdict\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a string of n^2 integers, return 'YES' if a palindrome can be created from it, 'NO' otherwise.\n    \"\"\"\n    pass\n\"\"\"\nn = int(stdin.readline())\nnumbers = list(map(int, stdin.readline().split()))\nmatrix = [[None] * n for _ in range(n)]\n\nfor i in range(n ** 2):\n    matrix[i // n][i % n] = numbers[i]\n\nfor row in matrix:\n    if row!= list(reversed(row)):\n        print('NO')\n        break\nelse:\n    print('YES')\n    for row in matrix:\n        print(*row, sep=' ')\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write your code in Python 3.6\n    '''\n    # first, we process stdin to extract the numbers\n    #\n    n = int(stdin.split('\\n')[0])\n    nums = stdin.split('\\n')[1]\n    nums_arr = nums.split()\n    nums_arr = list(map(int, nums_arr))\n\n    # second, we try to construct a matrix\n    #\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = nums_arr[i * n + j]\n\n    # then, we check if we can construct a palindrome matrix\n    #\n    if matrix_is_palindrome(matrix):\n        return 'YES'\n\n    # if not, we construct a matrix with no palindromic cells\n    #\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if i == k or j == l:\n                        matrix[i][j] = nums_arr[i * n + j]\n\n                    elif i == l or j == k:\n                        matrix[i][j] = nums_arr[i * n + j]\n\n                    if matrix_is_palindrome(matrix):\n                        return 'YES'\n\n    # finally, if we can't construct a palindrome matrix, we return 'NO'\n    #\n    return 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nN, R = stdin.split()\nN, R = int(N), int(R)\n\nprojects = []\nfor _ in range(N):\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    projects.append((a, b))\n\nn = len(projects)\n\ndp = [[0 for _ in range(R + 1)] for _ in range(n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    a, b = projects[i - 1]\n    dp[i][0] = 1\n    for j in range(1, R + 1):\n        if j - a >= 0:\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][j - a]\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nfor i in range(1, R + 1):\n    if dp[n][i]:\n        print('YES')\n        break\nelse:\n    print('NO')\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_case_count = int(stdin.readline().strip())\n    for _ in range(test_case_count):\n        n, r = [int(x) for x in stdin.readline().strip().split(' ')]\n        count = 0\n        prices = []\n        for _ in range(n):\n            a, b = [int(x) for x in stdin.readline().strip().split(' ')]\n            prices.append([a, b])\n        prices.sort(key=lambda x: x[0])\n        for i in range(n):\n            if prices[i][0] <= r:\n                count += 1\n                r += prices[i][1]\n            else:\n                break\n        if count == n:\n            print('YES')\n        else:\n            print('NO')\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    "
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1''')\n    'YES'\n    >>> solution('''3 5\n   ... 4 -5\n   ... 4 -2\n   ... 1 3\n   ... ''')\n    'YES'\n    >>> solution('''4 4\n   ... 5 2\n   ... 5 -3\n   ... 2 1\n   ... 4 -2\n   ... ''')\n    'YES'\n    >>> solution('''3 10\n   ... 10 0\n   ... 10 -10\n   ... 30 0\n   ... ''')\n    'NO'\n    \"\"\"\n    n, r = map(int, stdin.split('\\n')[0].split())\n    a = []\n    for i in range(n):\n        a.append(map(int, stdin.split('\\n')[i + 1].split()))\n\n    def check(s):\n        return sum(s) > r >= max(s) and min(s) >= 0\n\n    for p in permutations(range(n)):\n        if all(check(a[i][0] + s) and check(a[i][1] + s * (-1) ** (i + 1)) for i, s in zip(p, range(n))):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is for a well-known problem called the \"Scoring\" problem\n    https://www.codewars.com/kata/5e1e9ec7b3cbcf7a8a6ce7d6\n    \"\"\"\n    n, r = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    a = [int(i) for i in stdin.split(\"\\n\")[1:]]\n    score = 0\n    for i in range(n):\n        score += a[i]\n        if score < r:\n            continue\n        if score > r:\n            return \"NO\"\n        if i % 2 == 0:\n            score -= a[i]\n        else:\n            score += a[i]\n    return \"YES\"\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, r = map(int, stdin.split())\n    pairs = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n\n    # \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u043e\u0439 \u0441\u043b\u0443\u0436\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\n    # \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n    if n == 1:\n        return \"YES\" if r >= pairs[0][0] else \"NO\"\n\n    # \u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u043e\u0433\u043e, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0442\u0430\u043a\u043e\u0439,\n    # \u0447\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u043b-\u0432\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 $r$\n    # \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n    # \u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n    # \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0443\u043c\u043c\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 $r$\n    # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u0446\u0438\u043a\u043b\u0430 \u0438 \u0435\u0441\u043b\u0438 \u043e\u0446\u0435\u043d\u043a\u0430 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438,\n    # \u0435\u0441\u043b\u0438 \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True\n    def check(pairs):\n        sums = 0\n        for pair in pairs:\n            sums += pair[0]\n            if sums > r:\n                return False\n        return True\n\n    # \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443,\n    # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043d\u0435\u0433\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0443\n    # \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0435\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u043d\u0430 \u043d\u0435\u0433\u043e \u0440\u0430\u0432\u043d\u0430 $r$\n    # \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True\n    projects = {}\n    for pair in pairs:\n        projects[pair[1]] = [pair[0], pair[2]]\n    projects[pairs[-1][1]].append(pairs[-1][0])\n    return \"YES\" if check(sorted(projects.values(), key=lambda x: x[0])) else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, r = map(int, stdin.readline().split())\n    # projects = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    n, r = map(int, stdin.split())\n    projects = list(tuple(map(int, stdin.split())) for _ in range(n))\n    projects.sort(key=lambda x: x[1], reverse=True)\n    result = []\n    while r >= 0:\n        for project in projects:\n            if project[0] <= r:\n                r += project[1]\n                result.append(project[0])\n                break\n    return 'YES' if len(set(result)) == n else 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split(' '))\n    projects = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(1, n+1)]\n    for project in projects:\n        if project[0] > r:\n            return \"NO\"\n        r -= project[0]\n        if r < 0:\n            return \"NO\"\n        r += project[1]\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return 'YES' if... else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()][1:]\n    i = 0\n    j = 0\n    a = [0] * n\n    while j < n and i < m:\n        if j == 0:\n            j = d\n        while j < n and c[i] - j < 0:\n            j += d\n        if j >= n:\n            break\n        a[j] = i + 1\n        j += c[i]\n        i += 1\n    if j == n:\n        return 'YES\\n' +''.join([str(x) for x in a])\n    return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    width, number_of_platforms, jump_size = [int(i) for i in stdin.split('\\n')[:3]]\n    platforms = [int(i) for i in stdin.split('\\n')[3].split(' ')]\n\n    dp = [[0 for _ in range(width + 1)] for _ in range(number_of_platforms + 1)]\n    dp[0][0] = 1\n    for platform_index in range(1, number_of_platforms + 1):\n        platform_length = platforms[platform_index - 1]\n        for curr_position in range(platform_length, width + 1):\n            dp[platform_index][curr_position] = (dp[platform_index][curr_position - platform_length]\n                                                 + dp[platform_index - 1][curr_position - platform_length])\n\n    return 'YES' if dp[number_of_platforms][width] else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES\\n' +''.join(map(str, solution_main(stdin)))\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, d = list(map(int, stdin.split(' ')))\n    platforms = list(map(int, stdin.split(' ')[1:]))\n    a = []\n    for i in range(1, m + 1):\n        a.append(i)\n    a.insert(0, 0)\n    a.append(n + 1)\n    i = 0\n    x = 0\n    while i < len(platforms):\n        flag = False\n        while not flag:\n            if x + d > n:\n                break\n            if x >= platforms[i] and x + d <= a[i]:\n                flag = True\n                x += d\n            else:\n                x += platforms[i]\n        if not flag:\n            break\n        i += 1\n    if i >= len(platforms):\n        return 'YES'\n    return 'NO'\n    \n    \n    \n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split(' '))\n    platforms = list(map(int, stdin.split(' ')))\n    queue = collections.deque([0])\n    visited = set()\n    visited.add(0)\n\n    while queue:\n        x = queue.popleft()\n        if x == n+1:\n            return 'YES\\n' +''.join(list(map(str, queue)))\n\n        for i in range(d+1):\n            if x + i not in visited and sum(platforms[x:x+i]) <= n:\n                visited.add(x + i)\n                queue.append(x + i)\n    return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3 2\\n1 2 1\\n\")\n    'YES\\n0 1 0 2 2 0 3'\n    \"\"\"\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    p = {}\n    for i, c_ in enumerate(c):\n        if c_ in p:\n            p[c_] |= set([i])\n        else:\n            p[c_] = set([i])\n\n    def get_p(a):\n        \"\"\"\n        >>> get_p(\"1 2 1\")\n        {0: {0, 1}, 1: {2}}\n        \"\"\"\n        p = {}\n        for i, x in enumerate(a):\n            if x in p:\n                p[x].add(i)\n            else:\n                p[x] = set([i])\n        return p\n\n    def solve():\n        s = set(range(m))\n        for _ in range(m):\n            t = set()\n            for i, v in p.items():\n                if len(v) == 1:\n                    t.add(v.pop())\n            if not t:\n                return \"NO\"\n            if len(t) > 1:\n                return \"NO\"\n            s.difference_update(s.intersection(t))\n\n        if not s:\n            return \"YES\\n\" + \" \".join(a)\n        if len(s) > 1:\n            return \"NO\"\n        return \"YES\\n\" + \" \".join(a)\n\n    for i in range(m):\n        if len(p[i + 1]) > 1:\n            return \"NO\"\n\n    a = [0] * n\n    for i in range(n - m):\n        if i % d == 0:\n            a[i + m] = i // d + 1\n\n    for k, v in p.items():\n        for x in v:\n            if k == 1:\n                for x in range(c[x]):\n                    if x % d == 0:\n                        a[x + m] = x // d + 1\n            else:\n                for x in range(c[x], n - m + 1):\n                    if x % d == 0:\n                        a[x + m] = x // d + 1\n\n    return solve()\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    res = []\n    i = 0\n    j = 0\n    res.append(0)\n    while i < n - 1:\n        while j < m and arr[j] == i + 1:\n            i += 1\n            j += 1\n            res.append(i)\n        if i == n - 1:\n            return \"YES\"\n        if j < m and arr[j] > i + 1:\n            return \"NO\"\n        if j < m and arr[j] == i:\n            i += 1\n            j += 1\n            res.append(i)\n    return \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split(\" \")]\n    c = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    p, q, r = [c[0]], [0], []\n    for i in range(1, m):\n        if c[i] == c[i - 1]:\n            p.append(c[i])\n        else:\n            r.append(c[i - 1])\n            q.append(i)\n    if c[-1] == c[-2]:\n        r.append(c[-1])\n        q.append(m)\n    else:\n        q.append(m)\n    d = [0] * len(q)\n    for i in range(len(q)):\n        d[i] = q[i + 1] - q[i] - 1\n    for i in range(len(q)):\n        r.append(c[q[i]])\n    print(r)\n    print(d)\n    print(p)\n    print(q)\n    print(r)\n\n    return 0\n\n\nprint(solution(\"7 3 2\\n1 2 1\\n\"))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    platforms = list(map(int, stdin.readline().split()))\n    l, r = 0, 0\n    jumps = 0\n    s = 0\n    jump = 0\n    while jumps < n:\n        while True:\n            jump += 1\n            s += platforms[jump]\n            if s <= n:\n                break\n            s -= platforms[l]\n            l += 1\n        if jump + r < d:\n            jumps += jump\n            r += jump\n        elif jump + r >= d:\n            jumps += (d - r)\n            r = d\n            break\n    if jumps == n:\n        return \"YES\\n\" + str(list(range(r, r - d - 1, -1)))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n    def lcs(s: str, t: str) -> int:\n        m: int = len(s)\n        n: int = len(t)\n        l: int = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s[i-1] == t[j-1]:\n                    l[i][j] = 1 + l[i-1][j-1]\n                else:\n                    l[i][j] = max(l[i-1][j], l[i][j-1])\n        return l[m][n]\n    \n    def lcs_backtrace(s: str, t: str) -> str:\n        m: int = len(s)\n        n: int = len(t)\n        l: str = ''\n        i, j = m, n\n        while i > 0 and j > 0:\n            if s[i-1] == t[j-1]:\n                l += s[i-1]\n                i -= 1\n                j -= 1\n            else:\n                if lcs(s[:i], t) >= lcs(s, t[:j]):\n                    i -= 1\n                else:\n                    j -= 1\n        return l\n    \n    return len(s) - lcs(s, t)"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    substring = stdin.strip()\n    length = len(string)\n    counter = 0\n    \n    while True:\n        if not substring:\n            break\n        \n        if substring in string[counter:]:\n            index = string.find(substring, counter)\n            string = string[:counter] + string[index + len(substring):]\n            counter -= index\n        else:\n            counter += 1\n        \n        substring = substring[:-1]\n    return len(string)\n    \n    \n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    left, right = 0, len(s)-1\n    # print(s, t)\n    while left < right:\n        mid = (left + right) // 2\n        if s[mid] <= t[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return right - left + 1\n\n\"\"\"\n\n\"\"\"\n\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0431\u0443\u043a\u0432 \u0410 (\u0430\u0434\u0435\u043d\u0438\u043d), \u0413 (\u0433\u0443\u0430\u043d\u0438\u043d), \u0426 (\u0446\u0438\u0442\u043e\u0437\u0438\u043d), \u0422 (\u0442\u0438\u043c\u0438\u043d). \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0434\u0435\u043d\u0438\u043d\u0430, \u0433\u0443\u0430\u043d\u0438\u043d\u0430, \u0446\u0438\u0442\u043e\u0437\u0438\u043d\u0430 \u0438 \u0442\u0438\u043c\u0438\u043d\u0430 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0410, \u0413, \u0426, \u0422, \u0430, \u0433, \u0446, \u0442.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u0443\u0430\u043d\u0438\u043d\u0430, \u0446\u0438\u0442\u043e\u0437\u0438\u043d\u0430, \u0430\u0434\u0435\u043d\u0438\u043d\u0430 \u0438 \u0442\u0438\u043c\u0438\u043d\u0430 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430.\n\nSample Input:\n\n\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\u0410\ufffd"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin[2]\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string containing the length of the substring you can remove to make the original string a subsequence.\"\"\"\n    return \"\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return length of longest common prefix in stdin strings\"\"\"\n    return len(stdin.split()[0])\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = s\n    while not s == t:\n        t = t.replace(s[0], '')\n        s = s.replace(s[0], '')\n    return len(s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = s[0]\n    for i in range(1, len(s)):\n        if t.count(s[i]) == 0:\n            t += s[i]\n        else:\n            t = t[t.index(s[i]) + 1:] + s[i]\n    return len(s) - len(t)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '3 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    return''.join(map(str, [10 - int(x * 10 % 10), int(x * 10 % 10)]))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    # your code here\n    if x >= 4.024922:\n        return str(10) +'' + str(10)\n    elif x >= 3.572479:\n        return str(9) +'' + str(9)\n    elif x >= 2.502423:\n        return str(9) +'' + str(8)\n    elif x >= 2.024922:\n        return str(8) +'' + str(8)\n    elif x >= 1.750245:\n        return str(8) +'' + str(7)\n    elif x >= 1.524922:\n        return str(7) +'' + str(7)\n    elif x >= 1.372479:\n        return str(7) +'' + str(6)\n    elif x >= 1.250245:\n        return str(6) +'' + str(6)\n    elif x >= 1.122479:\n        return str(6) +'' + str(5)\n    elif x >= 1.072479:\n        return str(5) +'' + str(5)\n    elif x >= 1.022479:\n        return str(5) +'' + str(4)\n    elif x >= 1.072479:\n        return str(4) +'' + str(4)\n    elif x >= 1.02479:\n        return str(4) +'' + str(3)\n    elif x >= 1.072479:\n        return str(3) +'' + str(3)\n    elif x >= 1.02479:\n        return str(3) +'' + str(2)\n    elif x >= 1.072479:\n        return str(2) +'' + str(2)\n    elif x >= 1.02479:\n        return str(2) +'' + str(1)\n    elif x >= 1.072479:\n        return str(1) +'' + str(1)\n    elif x >= 1.02479:\n        return str(1) +'' + str(0)\n    else:\n        return str(0) +'' + str(0)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int((x - int(x)) * 10)\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = round(float(a), 6)\n    c = round(float(a), 6)\n    a = str(b)\n    n = str(c)\n    a = a.split('.')[0]\n    n = n.split('.')[1]\n    a = int(a)\n    n = int(n)\n    print(a, n)"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    m = 1\n    while m < 10:\n        x = float(x)\n        x = str(x)\n        if (len(x) < 7 or len(x) > 7):\n            m = m + 1\n        else:\n            if x[0] == x[1] == x[2] == x[3] == x[4] == x[5]:\n                print(m, m)\n                break\n            elif x[0] == x[1] == x[2] or x[1] == x[2] == x[3] or x[2] == x[3] == x[4] or x[3] == x[4] == x[5]:\n                print(m, m + 1)\n                break\n            elif x[0] == x[1] or x[1] == x[2] or x[2] == x[3] or x[3] == x[4] or x[4] == x[5]:\n                print(m, m + 2)\n                break\n            elif x[0] == x[1] == x[2] == x[3] or x[1] == x[2] == x[3] == x[4] or x[2] == x[3] == x[4] == x[5]:\n                print(m, m + 3)\n                break\n            elif x[0] == x[1] == x[2] == x[3] or x[1] == x[2] == x[3] == x[4] or x[2] == x[3] == x[4] == x[5]:\n                print(m, m + 4)\n                break\n            elif x[0] == x[1] == x[2] == x[3] == x[4] or x[1] == x[2] == x[3] == x[4] == x[5]:\n                print(m, m + 5)\n                break\n            elif x[0] == x[1] == x[2] == x[3] == x[4] == x[5]:\n                print(m, m + 6)\n                break\n            m = m + 1\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1.200000')\n    '3 2'\n    >>> solution('2.572479')\n    '10 3'\n    >>> solution('4.024922')\n    '9 9'\n    \"\"\"\n    x = stdin.split('.')[0]\n    result = [1, 10]\n    for i in range(1, 10):\n        if i * x >= 10 ** 6:\n            break\n        result.append(i)\n    return''.join([str(i) for i in result])\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    x = float(x)\n    r = 0\n    if x > 4.0:\n        if x < 5.0:\n            r = 1\n    else:\n        r = 10\n        if x < 4.0:\n            r = 9\n    return r, r\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split('.')[0]\n    res = []\n    for i in range(3):\n        n = int(num[i])\n        for j in range(3):\n            s = int(num[i + 1])\n            for m in range(3):\n                a = int(num[i + 2])\n                if n * 1000 + s * 100 + a * 10 + m + 1 <= 10:\n                    res.append((n, s, m, a))\n    print(*min(res))\n    return ''"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/54a32bbebc379677a380008c\"\"\"\n    x = float(stdin)\n    x = x * 10**(6)\n    x = int(x)\n    solution = [i for i in range(1, 11) if x % i == 0]\n    return f'{solution[0]} {solution[-1]}'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if k == 0:\n        if d == 1 or d % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if d == 1 or d % 2 == 0:\n        return \"NO\"\n\n    tree = [[] for _ in range(n)]\n\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n\n    def dfs(x):\n        visited = [False] * n\n        visited[x] = True\n        s = [x]\n        dep = [0] * n\n        dep[x] = 1\n\n        while s:\n            v = s.pop()\n            if len(tree[v]) > k:\n                return False\n            for i in tree[v]:\n                if not visited[i]:\n                    dep[i] = dep[v] + 1\n                    s.append(i)\n                    visited[i] = True\n        return all(d <= d and d % 2 == 0 for d in dep)\n\n    ans = []\n    for i in range(n):\n        if dfs(i):\n            ans.append(i)\n\n    return \"YES\" if len(ans) > 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(' ')]\n\n    if n == 1:\n        return 'YES'\n    if d > n - 1:\n        return 'NO'\n    if k > n:\n        return 'NO'\n\n    if k == n - 1:\n        return 'YES'\n    if k == n:\n        return 'YES'\n\n    tree = [[] for _ in range(n)]\n    for _ in range(d):\n        a, b = [int(x) for x in stdin.split(' ')]\n        a -= 1\n        b -= 1\n        tree[a].append(b)\n        tree[b].append(a)\n\n    def check(nodes):\n        for node in nodes:\n            if len(tree[node]) > k:\n                return False\n        return True\n\n    if check(range(n)):\n        return 'YES'\n    nodes = set()\n    for a in range(n):\n        for b in tree[a]:\n            nodes.add(a)\n            nodes.add(b)\n    if len(nodes) < k:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d < 0 or d >= k:\n        print(\"NO\")\n        return\n\n    g = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        g[x - 1].append(y - 1)\n        g[y - 1].append(x - 1)\n\n    roots = []\n    for i in range(n):\n        if len(g[i]) < k:\n            print(\"NO\")\n            return\n        if len(g[i]) == k:\n            roots.append(i)\n\n    def dfs(p, c):\n        q = []\n        while c < len(g[p]):\n            q.append(g[p][c])\n            c += 1\n        for r in q:\n            dfs(r, 0)\n\n    for root in roots:\n        dfs(root, 0)\n\n    print(\"YES\")\n    for i in range(n - 1):\n        print(i + 1, i + 2)\n    return\n\n\nfor line in stdin:\n    solution(line)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \"Diameter of tree\"\n    '''\n    n, diameter, degree = [int(x) for x in stdin.split(' ')]\n    if degree < n - 1:\n        return 'NO'\n    \n    if degree * (degree - 1) == diameter * 2:\n        if degree < 2 * (n - 1):\n            return 'NO'\n    else:\n        return 'NO'\n    \n    edges = []\n    for i in range(1, n):\n        edges.append([i, i + 1])\n    \n    edge_dict = {(x, y): 0 for (x, y) in edges}\n    \n    for _ in range(degree - 1):\n        v1, v2 = [int(x) for x in stdin.split(' ')]\n        if v1 in edge_dict and v2 in edge_dict:\n            if edge_dict[v1, v2] > 0 or edge_dict[v2, v1] > 0:\n                return 'NO'\n            \n            edge_dict[v1, v2] = 1\n            edge_dict[v2, v1] = 1\n            edges.append([v1, v2])\n        else:\n            return 'NO'\n    \n    if len(edges)!= n - 1:\n        return 'NO'\n    \n    return 'YES\\n' + '\\n'.join([' '.join([str(x) for x in edge]) for edge in edges])\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def draw_line(l: list, l_len: int):\n        for i in range(0, l_len - 1):\n            if l[i] == l[i + 1]:\n                return False\n        return True\n\n    n, d, k = map(int, stdin.split())\n    if d * k > n * (n - 1):\n        return \"NO\"\n\n    matrix = []\n    for i in range(0, n):\n        matrix.append([])\n        for j in range(0, n):\n            if i == j:\n                matrix[i].append(0)\n            else:\n                matrix[i].append(0)\n    for i in range(0, d):\n        n1, n2 = map(int, stdin.split())\n        matrix[n1 - 1][n2 - 1] = 1\n        matrix[n2 - 1][n1 - 1] = 1\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d\n    for i in range(0, n):\n        max_edge = 0\n        for j in range(0, n):\n            if matrix[i][j] == 0 and matrix[j][i] == 0:\n                k = 0\n                for h in range(0, n):\n                    if matrix[i][h] == 1 or matrix[h][i] == 1:\n                        k += 1\n                if k > max_edge:\n                    max_edge = k\n                    v1 = i + 1\n        matrix[i][v1 - 1] = 1\n        matrix[v1 - 1][i] = 1\n\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0447\u0442\u043e \u0434\u0435\u0440\u0435\u0432\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043c\u043a\u0430\u0445\n    if not draw_line(matrix, n):\n        return \"NO\"\n\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0447\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u0441 \u0434\u0430\u043d\u043d\u043e\u0439 \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 d\n    for i in range(0, n):\n        summ = 0\n        for j in range(0, n):\n            summ += matrix[i][j]\n        if summ > d:\n            return \"NO\"\n\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0447\u0442\u043e \u0434\u0435\u0440\u0435\u0432\u043e \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0440\u043d\u044f \u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u0435\n    for i in range(0, n):\n        if matrix[i][i] == 1:\n            return \"NO\"\n\n    # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n    max_diameter = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if matrix[i][j] == 1:\n                for h in range(0, n):\n                    if matrix[j][h] == 1:\n                        max_diameter = max(max_diameter, abs(i - j) + abs(h - j))\n    if max_diameter > d:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 4 3''')\n    'YES'\n    >>> solution('''6 2 3''')\n    'NO'\n    >>> solution('''8 5 3''')\n    'YES'\n    >>> solution('''6 2 3''')\n    'NO'\n    >>> solution('''8 5 3''')\n    'YES'\n    \"\"\"\n    n, d, k = map(int, stdin.split())\n    return \"NO\" if (n - 1) < d * k or k > d * n else \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement\n    n, d, k = map(int, stdin.split())\n    if n < d + 1 or n < k + 1 or n < d * k:\n        return \"NO\"\n    edge = {}\n    degree = {}\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        if a not in edge and b not in edge:\n            edge[a] = b\n            edge[b] = a\n            degree[a] = degree.get(a, 0) + 1\n            degree[b] = degree.get(b, 0) + 1\n        elif a not in edge and b in edge:\n            edge[b] = a\n            degree[a] = degree.get(a, 0) + 1\n        elif a in edge and b not in edge:\n            edge[a] = b\n            degree[b] = degree.get(b, 0) + 1\n        else:\n            a, b = min(edge[a], edge[b]), max(edge[a], edge[b])\n            if a!= b:\n                edge[b] = a\n                degree[a] = degree.get(a, 0) + 1\n                degree[b] = degree.get(b, 0) - 1\n            else:\n                edge.pop(b)\n    edge = {i: j for i, j in edge.items() if degree.get(i, 0) <= k and degree.get(j, 0) <= k}\n    if len(edge)!= n - 1:\n        return \"NO\"\n    res = [i + 1 for i in range(n)]\n    for a, b in edge.items():\n        a, b = min(a, b), max(a, b)\n        res[a - 1] = b\n    return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, i)) for i in res])"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d <= k or d - 1 > n * (n - 1) / 2:\n        return \"NO\"\n\n    # find the maximum diameter of a tree with n vertices and diameter d\n    # we can do this by starting at a random vertex and adding edges to its neighbors until we hit the diameter\n    # then we know how many vertices we will have\n\n    def dfs(G, node):\n        if node not in G:\n            G[node] = set()\n        for neighbor in G[node]:\n            dfs(G, neighbor)\n        if len(G[node]) < k:\n            G[node].add(node)\n            return False\n        return True\n\n    G = {}\n    for i in range(1, n + 1):\n        if not dfs(G, i):\n            break\n    if len(G) < n - 1:\n        return \"NO\"\n    return \"YES\" + \"\\n\" + \"\\n\".join([\" \".join([str(u), str(v)]) for u, v in G.items() if u!= v])\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    res = []\n    if k > d * (n - 1):\n        return \"NO\"\n    for i in range(n):\n        res.append([])\n    for i in range(k):\n        x, y = list(map(int, stdin.split()))\n        res[x - 1].append(y)\n        res[y - 1].append(x)\n    if k < n - 1:\n        return \"NO\"\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(len(res[i])):\n            graph[res[i][j] - 1].append(i)\n    s = -1\n    for i in range(n):\n        if len(graph[i]) == n - 1:\n            if s == -1:\n                s = i\n            elif s!= i:\n                return \"NO\"\n    q = [s]\n    diameter = [-1 for i in range(n)]\n    while q:\n        temp = []\n        for i in q:\n            for j in range(len(res[i])):\n                diameter[res[i][j] - 1] = max(diameter[res[i][j] - 1], diameter[i] + 1)\n                if res[i][j] not in temp:\n                    temp.append(res[i][j])\n        q = temp\n    for i in range(n):\n        if diameter[i] < d:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(6, 3, 3)\n    'YES'\n    >>> solution(6, 2, 3)\n    'NO'\n    >>> solution(10, 4, 3)\n    'YES'\n    >>> solution(8, 5, 3)\n    'YES'\n    \"\"\"\n    n, d, k = map(int, stdin.split())\n    if k - 1 >= n - 1:\n        if d >= 2 * (n - 1):\n            return 'YES'\n        return 'NO'\n    used = [False] * n\n    tree = {i: [] for i in range(1, n + 1)}\n    while True:\n        u, v = map(int, stdin.split())\n        if u == -1 or v == -1:\n            break\n        if used[u - 1] or used[v - 1]:\n            return 'NO'\n        tree[u] += [v]\n        tree[v] += [u]\n        used[u - 1] = True\n        used[v - 1] = True\n    return 'YES'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"\"\n    for i in range(a):\n        s += \"0\"\n    for i in range(b):\n        s += \"1\"\n    while True:\n        s_b = bin(x)[2:]\n        s_s = s\n        s = \"\"\n        for i in range(len(s_s)):\n            if i in set(s_b):\n                s += \"1\"\n            else:\n                s += \"0\"\n        if s_b not in s_s:\n            return s\n        else:\n            x += 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    for n in range(a+b):\n        if a > 0 and b > 0 and x > 0:\n            if n == 0:\n                if not n % (a + b - x):\n                    print('0'*a + '1'*b)\n            elif n < a + b - x:\n                if not n % (a + b - x):\n                    print('0' + '1'*(b-1) + '0'*(a-1))\n            elif n == a + b - x:\n                if not n % (a + b - x):\n                    print('0'*a + '1'*b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    l = max(a, b)\n    r = min(a, b)\n    ans = ''\n    for i in range(l):\n        if i < r:\n            ans += '0'\n        else:\n            ans += '1'\n    for i in range(l + r, a + b):\n        if i < x:\n            ans += '0'\n        else:\n            ans += '1'\n    return ans\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    x = int(stdin.split(' ')[2])\n    pow_2 = [2 ** i for i in range(1, b + 2)]\n    last = sum(pow_2)\n    a -= x - 1\n    b -= x - 1\n    if a == 0 and b == 0:\n        return '1' * (x + 1)\n    if a == 0:\n        return '0' * (b + 1) + '1' * (x + 1)\n    if b == 0:\n        return '1' * (a + 1) + '0' * (x + 1)\n    res = ''\n    a, b = max(a, b), min(a, b)\n    for i in range(a, last, a + b):\n        res += '1'\n        a -= 1\n        b -= 1\n    return res\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    a += b\n    while a % 2 == 0:\n        a //= 2\n    while a % 4 == 0:\n        a //= 4\n    if a % 8 == 0:\n        return '0' * b + '1' * x + '0' * b + '1' * x\n    else:\n        return '0' * b + '1' * x + '0' * (b // 2) + '1' * (b // 2) + '1' * x\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    zero_count = a\n    one_count = b\n    count = a + b\n    first_index = 0\n    last_index = 1\n    prev_bit = 1\n    new_bit = 1\n    if x > count:\n        raise ValueError('x is bigger than count')\n    while last_index!= count:\n        if new_bit == 0:\n            if prev_bit == 1:\n                if one_count == 0:\n                    zero_count -= 1\n                    first_index = last_index + 1\n                one_count -= 1\n                last_index += 1\n            prev_bit = 1\n            new_bit = 1\n        else:\n            if prev_bit == 0:\n                if zero_count == 0:\n                    one_count -= 1\n                    last_index += 1\n                zero_count -= 1\n                prev_bit = 0\n                new_bit = 1\n        if x == 0 and zero_count == 0 and one_count == 0:\n            break\n        elif x > 0 and x <= zero_count:\n            if x > one_count:\n                x -= one_count\n                one_count = 0\n            else:\n                one_count -= x\n                x = 0\n        elif x > 0 and x > zero_count:\n            if x > one_count + zero_count:\n                one_count = 0\n                x -= zero_count\n                zero_count = 0\n            else:\n                zero_count -= x\n                x = 0\n        else:\n            zero_count = 0\n            one_count = 0\n            first_index = last_index + 1\n            last_index += 1\n    if zero_count == 0 and one_count == 0:\n        print('0' * first_index + '1' * last_index)\n    else:\n        print('0' * first_index + '1' * last_index)"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    num_a, num_b, num_x = int(numbers[0]), int(numbers[1]), int(numbers[2])\n    res = '0' * num_a + '1' * num_b + '0' * num_x\n\n    return res\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return ''.join([str(0) * a, str(1) * b, str(1) * (x - a - b)])\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x == a + b:\n        print(\"1\" * (a + b))\n    elif a == 0 and b == 0:\n        print(\"0\" * (a + b))\n    elif x == 0:\n        print(\"1\" + \"0\" * (b - 1))\n    elif x == b:\n        print(\"1\" * (a + b))\n    elif a == b == 1:\n        print(\"0\" * a + \"1\")\n    elif a == 1 and b == 0:\n        print(\"0\" * a + \"1\" * b)\n    elif x >= b:\n        print(\"1\" * a + \"0\" * (b - 1))\n    else:\n        print(\"0\" * a + \"1\" * b)\n\n\n\n2 3 1\n101\n\n2 2 1\n1011\n\n2 3 1\n1110\n\n2 2 1\n11110\n\n\n1 1 1\n1111111111\n\n2 3 2\n100110011\n\n1 0 1\n101010\n\n2 1 2\n10101101\n\n1 1 1\n101010\n\n\n1 2 3\n0111010\n\n\n1 1 1\n111111110\n\n\n1 1 1\n11110\n\n\n\n1 1 1\n10110110\n\n1 1 1\n10110110\n\n\n1 2 3\n0111010\n\n1 1 1\n11110\n\n\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 1 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n1 1 1\n101010\n\n1 1 1\n101010\n\n\n1 1 1\n101010\n\n1 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 1 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n0 1 1\n101010\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n0 1 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n0 0 1\n101010\n\n0 1 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n0 1 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n0 1 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n1 0 1\n101010\n\n0 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 1 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n1 0 1\n101010\n\n0 0 1\n101010\n\n1 0 1\n101010\n\n0"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    s = ''.join(['0' if x < a else '1' for x in range(a + b)])\n    print(''.join(s[:a]))\n    print(''.join(s[a:a + b]))\n    print(''.join(s[a + b:]))\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the task.\"\"\"\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n\n    res = [0] * (3 * n)\n    s = 'ab' + s + 'c'\n    t = 'ab' + t + 'c'\n    for i in range(2 * n + 1):\n        if i % 2 == 0:\n            res[i] = s[i]\n        else:\n            res[i] = t[i]\n\n    return 'YES' if res == ''.join(res) else 'NO'\n\n\nsolution()\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  l = len(stdin)\n  if (l % 3!= 0):\n    return 'NO'\n  else:\n    d = 3\n    if (stdin[:3] == 'abc'):\n      d = 1\n    if (stdin[1:4] == 'abc'):\n      d = 2\n    if (stdin[2:5] == 'abc'):\n      d = 3\n  return 'YES' + stdin[:d] * (l // 3)\n  '''\n\n  n = int(stdin)\n  s = stdin[:2]\n  t = stdin[2:4]\n\n  if (n % 3!= 0):\n    return 'NO'\n  \n  l = 3\n  if (s == 'ab'):\n    l = 1\n  if (s == 'ac'):\n    l = 2\n  if (s == 'bc'):\n    l = 3\n\n  if (t == 'ab'):\n    l = 1\n  if (t == 'ac'):\n    l = 2\n  if (t == 'bc'):\n    l = 3\n\n  return 'YES' + s * (n // 3) + t * (n // 3) + s * (n // 3)\n\nassert(solution('ab') == 'YESab')\nassert(solution('bc') == 'YESbc')\nassert(solution('ac') == 'YESac')\nassert(solution('bc') == 'YESbc')\nassert(solution('cc') == 'YEScc')\nassert(solution('bb') == 'YESbb')\nassert(solution('ba') == 'YESba')\nassert(solution('aa') == 'YESaa')\nassert(solution('cc') == 'YEScc')\nassert(solution('ca') == 'YESca')\nassert(solution('ab') == 'YESab')\nassert(solution('ba') == 'YESba')\nassert(solution('ca') == 'YESca')\nassert(solution('ba') == 'YESba')\n\nassert(solution('aa') == 'YESaa')\nassert(solution('bb') == 'YESbb')\nassert(solution('cc') == 'YEScc')\n\nassert(solution('ba') == 'YESba')\nassert(solution('bc') == 'YESbc')\nassert(solution('ca') == 'YESca')\n\nassert(solution('ca') == 'YESca')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('cc') == 'YEScc')\nassert(solution('ab') == 'YESab')\nassert(solution('bc') == 'YESbc')\n\nassert(solution('cb') == 'YEScb')\nassert(solution('bb') == 'YESbb')\nassert(solution('ab') == 'YESab')\n\nassert(solution('ac') == 'YESac')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('cc') == 'YEScc')\nassert(solution('ab') == 'YESab')\nassert(solution('ba') == 'YESba')\n\nassert(solution('ca') == 'YESca')\nassert(solution('ab') == 'YESab')\nassert(solution('bc') == 'YESbc')\n\nassert(solution('bb') == 'YESbb')\nassert(solution('ba') == 'YESba')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('cb') == 'YEScb')\nassert(solution('bb') == 'YESbb')\nassert(solution('aa') == 'YESaa')\n\nassert(solution('ac') == 'YESac')\nassert(solution('ca') == 'YESca')\nassert(solution('bb') == 'YESbb')\n\nassert(solution('cc') == 'YEScc')\nassert(solution('ab') == 'YESab')\nassert(solution('bc') == 'YESbc')\n\nassert(solution('cb') == 'YEScb')\nassert(solution('bc') == 'YESbc')\nassert(solution('cc') == 'YEScc')\n\nassert(solution('ca') == 'YESca')\nassert(solution('bb') == 'YESbb')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('bb') == 'YESbb')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('aa') == 'YESaa')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('cb') == 'YEScb')\nassert(solution('aa') == 'YESaa')\nassert(solution('bc') == 'YESbc')\n\nassert(solution('ba') == 'YESba')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('cc') == 'YEScc')\nassert(solution('ab') == 'YESab')\nassert(solution('bc') == 'YESbc')\n\nassert(solution('ba') == 'YESba')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('bb') == 'YESbb')\nassert(solution('ba') == 'YESba')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('bc') == 'YESbc')\nassert(solution('ba') == 'YESba')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('bb') == 'YESbb')\nassert(solution('ac') == 'YESac')\nassert(solution('ca') == 'YESca')\n\nassert(solution('ba') == 'YESba')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('cb') == 'YEScb')\nassert(solution('ba') == 'YESba')\nassert(solution('bc') == 'YESbc')\n\nassert(solution('bb') == 'YESbb')\nassert(solution('bc') == 'YESbc')\nassert(solution('cb') == 'YEScb')\n\nassert(solution('ac') == 'YESac')\nassert("
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    res = \"\"\n    if len(s) == len(t):\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                res = res + s[i]\n            else:\n                res = res + \"a\"\n        return res\n\n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    t = stdin[1]\n\n    return s + (3 * n) * t\n\nprint(solution('2 ab'))\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    def check_dist(s, t):\n        dist = 0\n        for si, tj in zip(s, t):\n            if si!= tj:\n                dist += 1\n        return dist\n\n    result = []\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                dist = check_dist(s[i:j], t[k:k + j - i])\n                if dist < j - i and dist % 2 == 0:\n                    result.append(s[i:j] + t[k:k + j - i] + t[0:k])\n    if len(result) > 0:\n        return result[0]\n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here:\n    res = \"YES\"\n    s, t = stdin.split()\n    s_length, t_length = len(s), len(t)\n    a_b_c_length = s_length + t_length\n    if a_b_c_length < 3:\n        res = \"NO\"\n    elif s_length == 0 or t_length == 0 or s_length == t_length:\n        res = \"NO\"\n    else:\n        forbidden = set()\n        for char in s + t:\n            forbidden.add(char)\n        if len(forbidden) < 3:\n            res = \"YES\"\n        else:\n            res = \"NO\"\n    return res\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    if n == 1:\n        print(-1)\n        return\n\n    p = list()\n    for i in range(n):\n        if i + 1 not in q:\n            p.append(i + 1)\n\n    p.append(p[0])\n    for i in range(n - 1):\n        p[p[i + 1] - 1] = p[p[i] - 1]\n\n    print(*p)\n    return"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n\n    # permutation can't start with -1\n    if any(i < -n or i >= n for i in q):\n        return -1\n    # permutation can't end with -1\n    if any(i == -n for i in q):\n        return -1\n\n    p = [i + 1 for i in range(n - 1)]\n    for i in range(n - 1):\n        p[q[i]] = p[q[i] + 1]\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    #\n    # Write your code here.\n    #\n    n = int(stdin.split('\\n')[0])\n    q = list(map(int, stdin.split('\\n')[1].split()))\n    d = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        d[q[i]].append(i + 2)\n    # print(d)\n    # \u5b58\u50a8\u6240\u6709\u6570\u5b57\u7684index\n    check = [1]\n    # \u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u540e\u9762\u51fa\u73b0\u7684index\n    temp = []\n    for i in range(1, n):\n        if d[i] == []:\n            temp.append(-1)\n            check.append(i + 1)\n        else:\n            temp.append(d[i][0])\n    # print(temp)\n    if temp == [-1, -1, -1, -1, -1]:\n        return '-1'\n    # print(check)\n    # \u627e\u5230\u6bcf\u4e2a\u6570\u5b57\u540e\u9762\u51fa\u73b0\u7684index\u7684\u4ea4\u96c6\n    res = set(check).intersection(*[set(temp[j] for j in range(n))])\n    # print(res)\n    if len(res) == 0:\n        return '-1'\n    res = list(res)\n    res.sort()\n    return''.join(map(str, res))\n\nprint(solution(\"4\\n1 1 1 1\"))\nprint(solution(\"4\\n-1 2 2\"))\nprint(solution(\"4\\n-1 -1 -1\"))\nprint(solution(\"4\\n1 1 -1\"))"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(i) for i in stdin.split('\\n')]\n    l = [int(i) for i in l.split(' ')]\n    l.sort()\n    for i in range(n):\n        if l[i]!= i+1:\n            print(-1)\n            return\n    print(' '.join([str(i+1) for i in l]))\n    return\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # input number of array\n    n = int(stdin.readline())\n\n    # input of array\n    q = list(map(int, stdin.readline().split()))\n\n    # if number of array is 1\n    if n == 1:\n        return -1\n\n    # initialize first array\n    first = [q[0]]\n\n    # initialize first element\n    first.append(q[1])\n\n    # initialize second array\n    second = [q[1] - q[0]]\n\n    # initialize second element\n    second.append(q[0])\n\n    # check the number of array is 2\n    if n == 2:\n        return print(\" \".join(map(str, second)))\n\n    # check the number of array is 3\n    if n == 3:\n        return print(\" \".join(map(str, second)))\n\n    # check the number of array is 4\n    if n == 4:\n        return print(\" \".join(map(str, second)))\n\n    # check the number of array is 5\n    if n == 5:\n        return print(\" \".join(map(str, second)))\n\n    # check the number of array is more than 5\n    if n > 5:\n        # check the number of array is more than 6\n        if n > 6:\n            # check the number of array is more than 7\n            if n > 7:\n                # check the number of array is more than 8\n                if n > 8:\n                    # check the number of array is more than 9\n                    if n > 9:\n                        # check the number of array is more than 10\n                        if n > 10:\n                            return -1\n\n    # if the number of array is 10\n    if n == 10:\n        # print the number of array is 10\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 10\n        if n > 10:\n            # check the number of array is more than 11\n            if n > 11:\n                return -1\n\n    # if the number of array is more than 11\n    if n > 11:\n        # check the number of array is more than 12\n        if n > 12:\n            # check the number of array is more than 13\n            if n > 13:\n                # check the number of array is more than 14\n                if n > 14:\n                    # check the number of array is more than 15\n                    if n > 15:\n                        # check the number of array is more than 16\n                        if n > 16:\n                            return -1\n\n    # if the number of array is 16\n    if n == 16:\n        # print the number of array is 16\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 16\n        if n > 16:\n            # check the number of array is more than 17\n            if n > 17:\n                return -1\n\n    # if the number of array is 17\n    if n == 17:\n        # print the number of array is 17\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 17\n        if n > 17:\n            return -1\n\n    # if the number of array is 18\n    if n == 18:\n        # print the number of array is 18\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 18\n        if n > 18:\n            return -1\n\n    # if the number of array is 19\n    if n == 19:\n        # print the number of array is 19\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 19\n        if n > 19:\n            return -1\n\n    # if the number of array is 20\n    if n == 20:\n        # print the number of array is 20\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 20\n        if n > 20:\n            return -1\n\n    # if the number of array is 21\n    if n == 21:\n        # print the number of array is 21\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 21\n        if n > 21:\n            return -1\n\n    # if the number of array is 22\n    if n == 22:\n        # print the number of array is 22\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 22\n        if n > 22:\n            return -1\n\n    # if the number of array is 23\n    if n == 23:\n        # print the number of array is 23\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 23\n        if n > 23:\n            return -1\n\n    # if the number of array is 24\n    if n == 24:\n        # print the number of array is 24\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 24\n        if n > 24:\n            return -1\n\n    # if the number of array is 25\n    if n == 25:\n        # print the number of array is 25\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 25\n        if n > 25:\n            return -1\n\n    # if the number of array is 26\n    if n == 26:\n        # print the number of array is 26\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 26\n        if n > 26:\n            return -1\n\n    # if the number of array is 27\n    if n == 27:\n        # print the number of array is 27\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 27\n        if n > 27:\n            return -1\n\n    # if the number of array is 28\n    if n == 28:\n        # print the number of array is 28\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 28\n        if n > 28:\n            return -1\n\n    # if the number of array is 29\n    if n == 29:\n        # print the number of array is 29\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 29\n        if n > 29:\n            return -1\n\n    # if the number of array is 30\n    if n == 30:\n        # print the number of array is 30\n        print(\" \".join(map(str, second)))\n        # print the number of array is more than 30\n        if n > 30:\n            return -1\n\n    # if the number of array is 31\n    if n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    return str(-1) if n < 1 or n > 100000 or len(q)!= n - 1 or any(\n        [q[i] == q[i + 1] for i in range(n - 1)]) else \" \".join(map(str, range(1, n + 1)))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = [int(x) for x in stdin.readline().split()]\n    permutation = [1]\n    for i in range(1, n):\n        permutation.append(permutation[-1] + q[i - 1])\n    for i in range(1, n):\n        if permutation[i - 1] + q[i - 1]!= permutation[i] + q[i]:\n            return '-1'\n    return''.join([str(x) for x in permutation])\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr = list(set(arr))\n    arr.sort()\n    if arr[0] == -1:\n        print(-1)\n    else:\n        if arr[-1] == n:\n            print(1, n)\n        else:\n            for i in range(len(arr)):\n                if arr[i] + 1 == arr[i+1]:\n                    print(arr[i], arr[i+1])"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    arr = list(map(int, stdin.readline().rstrip().split()))\n    p = set()\n    for i in range(n):\n        p.add(arr[i])\n    print(*sorted(p))"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, q = [int(x) for x in stdin.split(' ')]\n    L = [int(x) for x in stdin.split(' ')]\n    L = L[:N-1]\n    L.sort()\n    print(\" \".join(map(str, L)))"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    # Get data\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n\n    # Solve exercise\n    numbers.sort()\n    result = 0\n    for i in range(n-1):\n        result += numbers[i+1] - numbers[i]\n\n    return str(result)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    move all chips to the same coordinate\n    '''\n    n = int(stdin.readline())\n    coords = list(map(int, stdin.readline().split()))\n    return move_chips(n, coords)\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = [int(x) for x in stdin.split()]\n    x = [0]\n    for xi in s:\n        x.append(x[-1] + xi)\n    x = x[1:]\n    ans = 0\n    for i in range(n):\n        l = i + 1\n        r = n - i\n        ans += min(l, r) * (x[i + 1] - x[i])\n    return str(ans)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum number of coins to move all chips to the same coordinate\"\"\"\n    cnt = int(stdin)\n    num = sorted(list(map(int, stdin.split())))\n    result = 0\n    left, right = 1, 1\n    for i in range(1, cnt):\n        if num[i] == num[i - 1]:\n            right += 1\n        else:\n            result += (left + right - 1) // 2 * 2\n            left, right = 1, 1\n    return result + left + right - 1\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    #\n    return ''\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(\"\\n\")[0].split()))\n    x = sorted(set(x))\n    x_dict = {}\n    for i in x:\n        x_dict[i] = x.count(i)\n    i = 0\n    j = 0\n    m = 0\n    while i < len(x) and j < len(x):\n        if x_dict[x[i]] == 1:\n            i += 1\n            m += x_dict[x[i - 1]]\n            j = i\n        else:\n            x_dict[x[i]] -= 1\n            x_dict[x[j]] -= 1\n            j += 1\n            m += 1\n    return m\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = sorted(map(int, stdin.readline().split(' ')))\n    \n    ans = 0\n    for i in range(n - 1):\n        ans += (abs(x[i + 1] - x[i]) // 2) + (abs(x[i + 1] - x[i]) % 2) + 1\n        \n    return ans\n    \n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    n = int(line[0])\n    m = [int(i) for i in line[1].split(\" \")]\n    chips = []\n    for i in range(n):\n        chips.append((m[i], i))\n    chips.sort()\n    coins = 0\n    min_move = 10**9\n    for chip in chips:\n        if min_move > chip[0] - chips[0][0]:\n            min_move = chip[0] - chips[0][0]\n            coins += 1\n    print(coins + min_move)\n    return \"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the codewars problem.\n    \"\"\"\n    pass\n\n\"\"\"\nMY FIRST ATTEMPT\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 2 2 2 3 3\n   ... ''')\n    '2'\n    \"\"\"\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    chips = [int(x) for x in lines[1].split()]\n    return str(min(sum(chips[i] - chips[i - 1] for i in range(1, n)),\n                   sum(chips[i] + chips[i - 1] for i in range(1, n))))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    ans = 0\n    i = 1\n    while True:\n        x = i**2\n        if x >= n:\n            ans += i-1\n            break\n        i += 1\n    print(ans)\n    return \"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    count = 0\n    while N % 2 == 0:\n        N /= 2\n        count += 1\n    if N == 1:\n        return count\n    return count + N\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number % 2 == 0:\n        number = int(number / 2)\n    else:\n        number = int((number - 1) / 2)\n    count = 0\n    while number > 0:\n        count += 1\n        if number % 2 == 0:\n            number = int(number / 2)\n        else:\n            number = int((number - 1) / 2)\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10')\n    5\n    >>> solution('4')\n    1\n    \"\"\"\n    return str(int(stdin) - 1)\n    \n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join(stdin.split(\"\\n\"))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '5'"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here\n    N = int(stdin)\n    steps = 0\n    while N!= 1:\n        if N % 2 == 0:\n            N /= 2\n        else:\n            N -= 1\n        steps += 1\n    return steps\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split('\\n')\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    if len(line) < 2:\n        print('\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b!')\n        return ''\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430\n    alice_line = line[0].strip().split()\n    bob_line = line[1].strip().split()\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c\n    if len(alice_line)!= 3 or len(bob_line)!= 3:\n        print('\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b!')\n        return ''\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430\n    alice_numbers = [int(number) for number in alice_line]\n    bob_numbers = [int(number) for number in bob_line]\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    if sum(alice_numbers)!= sum(bob_numbers):\n        print('\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b!')\n        return ''\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430\n    alice_numbers = [number - 1 for number in alice_numbers]\n    bob_numbers = [number - 1 for number in bob_numbers]\n    # \u0412\u044b\u0434\u0430\u0451\u043c \u043e\u0442\u0432\u0435\u0442\n    print(min(alice_numbers), max(alice_numbers))\n    return ''\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a1, a2, a3 = map(int, stdin.readline().split())\n    b1, b2, b3 = map(int, stdin.readline().split())\n\n    if a1 > b1:\n        a1, b1 = b1, a1\n    if a2 > b2:\n        a2, b2 = b2, a2\n    if a3 > b3:\n        a3, b3 = b3, a3\n    sum_a = a1 + a2 + a3\n    sum_b = b1 + b2 + b3\n\n    if sum_a < sum_b:\n        return str(0)\n    if sum_a == sum_b:\n        return str(a1 + b1)\n\n    return str(max(sum_a, a1 + b1 + 1))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(i) for i in stdin.split()]\n    return str(a * b + n - a * a - b * b + n * n)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    alice = [int(x) for x in stdin.readline().strip().split(' ')]\n    bob = [int(x) for x in stdin.readline().strip().split(' ')]\n    # return str(min(sum(alice) - max(alice), max(alice) - sum(bob)))\n    return str(max(alice[0], alice[2] - bob[1], bob[2] - alice[1])) +'' + str(min(alice[0], alice[2] - bob[1], bob[2] - alice[1]))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:4]]\n    b = [int(x) for x in stdin.split()[4:7]]\n    # assert(sum(a) == n)\n    # assert(sum(b) == n)\n    r_a = a[0]\n    r_b = b[0]\n    p_a = a[1]\n    p_b = b[1]\n    s_a = a[2]\n    s_b = b[2]\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    p_a, p_b = min(p_a, p_b), max(p_a, p_b)\n    r_a, r_b = min(r_a, r_b), max(r_a, r_b)\n    s_a, s_b = min(s_a, s_b), max(s_a, s_b)\n    "
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(max(0, (a + 2 * b) - (a // 2 + b // 2 + min(a, b)) + 1))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split('\\n')[0])\n    arr_a = [int(i) for i in stdin.split('\\n')[1].split()]\n    arr_b = [int(i) for i in stdin.split('\\n')[2].split()]\n    \n    if sum(arr_a)!= n or sum(arr_b)!= n:\n        return '-1'\n    else:\n        max_rounds_a = max(arr_a[0] + arr_b[2] - arr_b[1], arr_a[1] + arr_b[0] - arr_a[2])\n        min_rounds_a = min(arr_a[0] + arr_b[1] - arr_b[2], arr_a[1] + arr_b[2] - arr_a[0])\n        max_rounds_b = max(arr_b[0] + arr_a[2] - arr_a[1], arr_b[1] + arr_a[0] - arr_b[2])\n        min_rounds_b = min(arr_b[0] + arr_a[1] - arr_a[2], arr_b[1] + arr_a[2] - arr_b[0])\n        return str(max(max_rounds_a, max_rounds_b)) +'' + str(min(min_rounds_a, min_rounds_b))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = list(map(int, stdin.readline().split(' ')))\n    if a[0] > b[0]:\n        a[0], b[0] = b[0], a[0]\n    a = sum(a)\n    b = sum(b)\n    if a > b:\n        print(b, a)\n    else:\n        print(a, b)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The maximum number of blocks is 2 + (n - 2) - (n - 2).\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    min_blocks = 2 + (n - 2) - (n - 2)\n    if n <= 2:\n        return str(n)\n    while True:\n        for i in range(1, n - 1):\n            if a[i] == a[i - 1] + a[i + 1]:\n                continue\n            else:\n                j = i - 1\n                while j >= 0 and a[j] == a[i] + a[j + 1]:\n                    j -= 1\n                k = i + 1\n                while k < n and a[k] == a[i] + a[k - 1]:\n                    k += 1\n                l, r = j + 2, k - 1\n                if r - l + 1 < min_blocks:\n                    min_blocks = r - l + 1\n                    a[l:r + 1] = [a[i]] * (r - l + 1)\n                    break\n        else:\n            break\n    return str(min_blocks)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    print(count_max_blocks(n, a))\n    \n    \ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Inputs\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    # Memoize\n    _dp = [0] * (n+1)\n    for i in range(1, n+1):\n        _dp[i] = 1 + _dp[i - 1]\n    # Construct dp[n]\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = _dp[i] + dp[i - 1]\n    # Compute answer\n    ans = dp[n]\n    for i in range(1, n):\n        # Check if disjoint\n        if a[i] == a[i - 1]:\n            continue\n        # Check if [l, r) is disjoint with [l, r)\n        if a[i] == a[i - 1] + 1 and a[i - 1] < a[i]:\n            ans -= dp[i - 1]\n        # Check if [l, r) is disjoint with (l, r)\n        if a[i] == a[i - 1] + 1 and a[i] > a[i - 1]:\n            ans -= dp[i]\n    # Output\n    print(ans)\n    print(*map(lambda x: x+1, range(n)), sep='\\n')\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    m = list(map(int, stdin.split('\\n')[1].split(' ')))\n    ans = [0]\n    r = 0\n    i = 0\n    while i < n:\n        if m[i] == m[r]:\n            ans.append(i)\n            r += 1\n            i += 1\n        elif i == r:\n            ans.append(i)\n            r += 1\n            i += 1\n        else:\n            while m[i]!= m[r]:\n                r += 1\n            ans.append(i)\n            r += 1\n            i += 1\n    print(len(ans))\n    for i in range(1, len(ans)):\n        print(ans[i], ans[i - 1])\n    return ''\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of disjoint blocks.\n    \"\"\"\n    n = int(stdin.split()[0])\n    arr = [int(x) for x in stdin.split()[1:]]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if sum(arr[i:j]) % j == 0:\n                res = max(res, j)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1 2 2 1 5 3\n   ... ''')\n    '3'\n    >>> solution('''11\n   ... -5 -4 -3 -2 -1 0 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    seq.sort()\n    max_count = 0\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        count = 0\n        while left < right:\n            if seq[left] + seq[right] < seq[i]:\n                count += right - left\n                left += 1\n            else:\n                right -= 1\n        max_count = max(max_count, count)\n    return str(max_count)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time complexity. O(n) space complexity.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    integers = [int(integer) for integer in stdin.split('\\n')[1].split(' ')]\n    # Compute sums of consecutive integers.\n    sums = [0]\n    for i in range(n):\n        sums.append(sums[-1] + integers[i])\n    # Find possible solutions of the two constraints.\n    solutions = []\n    for i in range(n - 1):\n        # Since each block is of length 3, only 3 possible solutions can be found.\n        for j in range(i + 3, n):\n            if sums[j] - sums[i] == 3 * integers[i]:\n                solutions.append((i, j))\n    # Find the maximum number of solutions.\n    solutions = sorted(solutions, key=lambda x: x[1] - x[0], reverse=True)\n    # Return the solution with the maximum number of blocks.\n    return''.join(map(str, solutions[0]))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer.\"\"\"\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n\n    def possible(x, y):\n        return all(x + a[i] <= y for i in range(n))\n\n    def solve(n, i, j):\n        if i >= j:\n            return n\n        m = (i + j) // 2\n        l = m\n        r = m + 1\n        while l >= 0 and r <= n:\n            if possible(l, r):\n                l = m\n                r = m + 1\n                m = (l + r) // 2\n            else:\n                r += 1\n        return solve(n, i, r - 1)\n\n    return str(solve(n, 0, n))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n\n    s_arr = sum(arr)\n    if s_arr == 0:\n        return '0'\n    elif s_arr == len(arr) or s_arr == -len(arr):\n        return '1'\n\n    pref_arr = [0] * n\n    pref_arr[0] = arr[0]\n    for i in range(1, n):\n        pref_arr[i] = pref_arr[i - 1] + arr[i]\n\n    s_pref_arr = sum(pref_arr)\n    if s_pref_arr == 0:\n        return '0'\n    elif s_pref_arr == len(pref_arr) or s_pref_arr == -len(pref_arr):\n        return '1'\n\n    res = 0\n    l = 0\n    for r in range(1, n):\n        if s_pref_arr + pref_arr[r] == s_arr:\n            res += 1\n        elif s_pref_arr + pref_arr[r] < s_arr:\n            l = r + 1\n        else:\n            break\n\n    return res\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    indices = [-1] * (n + 1)\n    s = 0\n    for i in range(n):\n        s += a[i]\n        indices[s] = i\n    \n    sum_to_idx = {}\n    for i in range(n):\n        sum_to_idx.setdefault(a[i], []).append(i)\n    \n    ans = 0\n    for v in sum_to_idx.values():\n        ans = max(len(v), ans)\n    \n    \n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            if j - i < ans:\n                continue\n            v = a[i:j + 1]\n            v.sort()\n            if v in sum_to_idx:\n                for l in sum_to_idx[v]:\n                    if indices[v[0]] < l:\n                        ans += 1\n                        print(indices[v[0]], l)\n            if j + ans - i < n and a[j + ans - i] - a[j] > 0:\n                ans += 1\n                print(j, j + ans - i)\n    return str(ans)\n    \ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lst = [int(x) for x in stdin.readline().strip().split(' ')]\n    h = [0] * n\n    s = [0] * n\n    i = 0\n    for x in range(n):\n        while i < n and lst[i] > lst[h[i]]:\n            h[i] += 1\n            i += 1\n        s[x] = h[i] - x\n        i += 1\n    return 'YES' if all(x == 0 for x in s) else 'NO'\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... 3\n   ... 3 1 2\n   ... ''')\n    'YES'\n    >>> solution('''\\\n   ... 3\n   ... 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    seq = [0] * n\n\n    for i in l:\n        seq[i] += 1\n\n    ans = 'NO'\n    for i in range(1, n):\n        if seq[i] > 0 and seq[i - 1] == 0:\n            ans = 'YES'\n        elif seq[i] > 0 and seq[i - 1] > 0:\n            ans = 'YES'\n            if i + 1 < n:\n                seq[i + 1] += seq[i]\n                seq[i] = 0\n            else:\n                ans = 'NO'\n\n    return ans\n\nsolution('''\\\n5\n5 2 3 4 1\n''')\n\nsolution('''\\\n5\n5 2 2 1 1\n''')\n\nsolution('''\\\n5\n5 3 2 4 1\n''')\n\nsolution('''\\\n5\n5 5 5 5 5\n''')\n\nsolution('''\\\n1\n1\n''')\n\nsolution('''\\\n1\n100\n''')\n\nsolution('''\\\n5\n5 3 2 1 1\n''')\n\nsolution('''\\\n5\n3 5 2 4 1\n''')\n\nsolution('''\\\n5\n4 5 3 5 3\n''')\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    stacks = []\n    for i in range(n):\n        stacks.append([i, arr[i]])\n\n    sorted_arr = []\n    while len(stacks) > 0:\n        height_max = -1\n        stack_max = None\n        for stack in stacks:\n            if stack[1] > height_max:\n                height_max = stack[1]\n                stack_max = stack\n        stacks.remove(stack_max)\n        sorted_arr.append(stack_max[1])\n        if len(stacks)!= 0:\n            for stack in stacks:\n                if stack[1] < height_max:\n                    stack[1] += 2\n\n    return \"YES\" if arr == sorted_arr else \"NO\"\n\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function returns YES if the input array is sorted with the described algorithm, and NO otherwise.\n    >>> solution(\"3\\n1 2 3\")\n    'YES'\n    >>> solution(\"3\\n3 1 2\")\n    'NO'\n    >>> solution(\"5\\n2 5 7 10 3\")\n    'YES'\n    >>> solution(\"5\\n2 4 5 7 10\")\n    'YES'\n    >>> solution(\"5\\n2 4 7 10 3\")\n    'NO'\n    >>> solution(\"5\\n2 4 6 7 10\")\n    'YES'\n    >>> solution(\"5\\n2 4 6 8 10\")\n    'NO'\n    >>> solution(\"5\\n2 4 6 7 9\")\n    'NO'\n    >>> solution(\"5\\n2 4 5 7 9\")\n    'NO'\n    >>> solution(\"5\\n2 4 6 7 8\")\n    'NO'\n    >>> solution(\"5\\n2 4 7 8 9\")\n    'NO'\n    >>> solution(\"5\\n2 4 8 9 7\")\n    'NO'\n    >>> solution(\"5\\n2 8 9 7 4\")\n    'NO'\n    >>> solution(\"5\\n2 8 9 7 5\")\n    'NO'\n    >>> solution(\"5\\n2 8 9 7 6\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for _ in range(n)]\n    stacks = []\n    for a in arr:\n        stacks.append([a, [a, ]])\n    arr = []\n    while stacks:\n        num = stacks.pop()\n        if not stacks:\n            arr.extend(num[1])\n        else:\n            while stacks and num[0] + 2 >= stacks[-1][0]:\n                arr.extend(stacks[-1][1])\n                stacks.pop()\n            if not stacks:\n                arr.extend(num[1])\n            else:\n                stacks[-1][1].extend(num[1])\n    arr.sort(reverse=True)\n    return \"YES\" if arr == arr[::-1] else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    inputs = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    \n    # # 1\n    # inputs = sorted(inputs)\n    # print(inputs[-1])\n    \n    # # 2\n    # inputs.sort()\n    # print(inputs[-1])\n    \n    # # 3\n    # inputs.sort(reverse=True)\n    # print(inputs[0])\n    \n    # 4\n    inputs = sorted(inputs, reverse=True)\n    for i, v in enumerate(inputs):\n        if i == 0:\n            print(inputs[i])\n        else:\n            inputs[i] = inputs[i] + inputs[i - 1]\n            if i == len(inputs) - 1:\n                print(inputs[i])\n            else:\n                print(inputs[i], end=\" \")"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3''')\n    'YES'\n    >>> solution('''3\n   ... 3 1 2''')\n    'NO'\n    >>> solution('''4\n   ... 1 2 3 4''')\n    'YES'\n    >>> solution('''4\n   ... 3 1 2 4''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    if n < 1 or n > 10:\n        return \"NO\"\n    stack = [int(stdin)]\n    for _ in range(n - 1):\n        if stack[-1] < int(stdin):\n            stack.append(int(stdin))\n        else:\n            temp = stack.pop()\n            while stack[-1] > temp and stack[-1] > int(stdin):\n                temp = stack.pop()\n            stack.append(temp)\n            stack.append(temp)\n    return \"YES\" if len(stack) == 1 else \"NO\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def validate(stdin):\n        def remove_duplicates(stdin):\n            res = []\n            [res.append(i) for i in stdin if i not in res]\n            return res\n        def remove_empty_strings(stdin):\n            res = []\n            for i in stdin:\n                if i!= '':\n                    res.append(i)\n            return res\n        def remove_duplicate_strings(stdin):\n            res = []\n            [res.append(i) for i in stdin if i not in res]\n            return res\n        return remove_empty_strings(remove_duplicate_strings(remove_duplicates(stdin)))\n    def sort_ravioli(stdin):\n        ravioli = validate(stdin)\n        for i in ravioli:\n            ravioli[ravioli.index(i)] = int(i)\n        ravioli.sort()\n        return ravioli\n    def shift_rows(stdin):\n        rows = []\n        for i in range(len(stdin)):\n            row = []\n            for j in range(len(stdin)):\n                if j == i:\n                    continue\n                else:\n                    row.append(stdin[j])\n            rows.append(row)\n        return rows\n    def get_height(stdin):\n        rows = shift_rows(stdin)\n        heights = []\n        for i in rows:\n            for j in i:\n                if j == '':\n                    heights.append(0)\n                else:\n                    heights.append(int(j))\n        return max(heights)\n    def sorted_ravioli(stdin):\n        ravioli = sort_ravioli(stdin)\n        ravioli_heights = []\n        for i in range(len(ravioli)):\n            ravioli_heights.append(get_height(ravioli[i]))\n        ravioli_heights.sort()\n        ravioli_heights.reverse()\n        for i in range(len(ravioli_heights)):\n            ravioli[i] = str(ravioli_heights[i])\n        return ravioli\n    return \"YES\" if sorted_ravioli(stdin) == sort_ravioli(stdin) else \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    stdin = stdin.splitlines()\n    s, t = stdin[0], stdin[1]\n    n = len(s)\n    if len(t)!= n:\n        print(\"-1\")\n        return\n    elif len(s) > 50:\n        print(\"-1\")\n        return\n    for i in range(n):\n        if s[i]!= t[i]:\n            break\n    else:\n        print(0)\n        return\n\n    print(i + 1)\n    for j in range(i + 1):\n        print(j + 1, end=\" \")\n    print()\n    for j in range(i + 1):\n        print(s[j], end=\" \")\n    print()\n    print(i + 1)\n    for j in range(i, n):\n        print(j + 1, end=\" \")\n    print()\n    for j in range(n - i):\n        print(s[j], end=\" \")\n    print()\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n, s, t = int(stdin[0]), stdin[1], stdin[2]\n\n    moves = 0\n    if len(s)!= len(t):\n        moves = -1\n    else:\n        for i in range(n):\n            if s[i]!= t[i]:\n                moves += 1\n                s = swap(s, i, i + 1)\n                if s == t:\n                    break\n    print(moves)\n    print(*[i + 1 for i in range(n) if s[i]!= t[i]])\n\n    return s\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    print(f\"{solution_runner(s, t)}\")\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    s, t = list(s), list(t)\n    moves = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            moves += 1\n            s[i], t[i] = t[i], s[i]\n    if s == t:\n        return moves\n    return -1\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    ds = deque(list(s))\n    dt = deque(list(t))\n    moves = 0\n\n    while ds and dt:\n        if ds[0] == dt[0]:\n            ds.popleft()\n            dt.popleft()\n        else:\n            ds.append(ds.popleft())\n            moves += 1\n            if moves == 10000:\n                return \"-1\"\n    if ds:\n        moves += len(dt) - len(ds)\n        if moves == 10000:\n            return \"-1\"\n    return str(moves)\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    d = [i for i in range(n)]\n    s_ord = [ord(s[i]) - ord('a') + 1 for i in range(n)]\n    t_ord = [ord(t[i]) - ord('a') + 1 for i in range(n)]\n    moves = []\n    for i in range(1, n):\n        if s_ord[i]!= t_ord[i]:\n            moves.append(i)\n    moves.append(0)\n    dp = [[[0] * (n + 1) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i][i] = 1\n    for k in range(1, n + 1):\n        for i in range(n - k + 1):\n            j = i + k\n            for t in range(i, j):\n                if s_ord[t] == t_ord[t]:\n                    dp[i][j][t] = dp[i][t][t] + dp[t + 1][j][t] + 1\n                else:\n                    dp[i][j][t] = dp[i][j][t] + dp[i][t][t] + 1\n                moves[dp[i][j][t]] = min(moves[dp[i][j][t]], k)\n    if moves[-1] == n:\n        print(-1)\n        return\n    print(moves[-1])\n    for i in range(moves[-1], -1, -1):\n        print(dp[0][n - 1][i], end=' ')\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    len_s, len_t = map(int, stdin.split('\\n')[:2])\n    s, t = stdin.split('\\n')[2], stdin.split('\\n')[3]\n    num_swaps = 10 ** 4\n    swaps = [None] * num_swaps\n    cost = 0\n    if len(s)!= len(t):\n        return '-1'\n\n    if s == t:\n        return 0\n\n    for i in range(num_swaps):\n        if swaps[i] is None:\n            for j in range(len(s)):\n                if j % 2 == 0:\n                    if s[j] == t[j]:\n                        continue\n                    else:\n                        cost += 1\n                        swaps[i] = j\n                        break\n                else:\n                    if s[j] == t[j]:\n                        break\n                    else:\n                        cost += 1\n                        swaps[i] = j\n                        break\n            if swaps[i] is not None:\n                s = s[:swaps[i]] + s[swaps[i] + 1:] + s[swaps[i]] + s[swaps[i] + 2:]\n    if cost == 0:\n        return 0\n    else:\n        return cost\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    t = stdin.readline()\n    return ''\n\nprint(solution('4\\nabcd\\naccd'))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prefix = []\n    suffix = []\n    for i in range(n):\n        x = stdin.split('\\n')[i]\n        if x[0] not in prefix:\n            prefix.append(x[0])\n        if x[-1] not in suffix:\n            suffix.append(x[-1])\n    def is_prefix(x: str) -> bool:\n        for i in prefix:\n            if i not in x:\n                return False\n        return True\n    def is_suffix(x: str) -> bool:\n        for i in suffix:\n            if i not in x:\n                return False\n        return True\n    def is_consistent(x: str) -> bool:\n        if is_prefix(x) and is_suffix(x):\n            return True\n        return False\n    ans = []\n    for i in stdin.split('\\n')[n:]:\n        x = i\n        if is_consistent(x):\n            ans.append(x)\n    if len(ans) > 1:\n        return 'IMPOSSIBLE'\n    else:\n        return ans[0]\nprint(solution(stdin))"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    for l in range(n):\n        p_l = []\n        s_l = []\n        for i in range(2 * n - 2):\n            if i < l:\n                p_l.append(s[i])\n            else:\n                s_l.append(s[i])\n        if l == n - 1:\n            p_l.append(s[l])\n            s_l.append(s[l])\n        if p_l == s_l:\n            return f'P{l}S{n-l-1}'\n    return 'IMPOSSIBLE'\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length_of_the_guessed_string = int(stdin.readline())\n    guess_the_string = stdin.readline()\n    prefix_suffix_list = []\n    for i in range(1, length_of_the_guessed_string + 1):\n        prefix_suffix_list.append(stdin.readline())\n    for i in range(2, len(guess_the_string) + 1):\n        if guess_the_string[:i] in prefix_suffix_list and guess_the_string[-i:] in prefix_suffix_list:\n            return 'S' * i + 'P' + 'S' * i\n\n\nsolution()\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest possible string that can be formed by guessing prefixes and suffixes of the input string.\"\"\"\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    left = {s[:i] for i in range(1, n)}\n    right = {s[i:] for i in range(n)}\n    \n    return 'S' * (len(left | right) == n * 2) + 'P' * (len(left) == n) + 'S' * (len(right) == n)\n    \nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    c = [x for x in a if x % 2!= 0]\n    print(len(c))\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nprint(solution(\"2 4 6 8 10\"))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ninput_list = input().split()\nprint(int(input_list[0] > input_list[1]) + int(input_list[1] > input_list[2]) + int(input_list[2] > input_list[3]) + int(input_list[3] > input_list[4]))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lista = list(map(int, stdin.split()))\n    a_list = sorted(lista)\n    n = len(a_list)\n    while n > 0 and a_list[n - 1] == n:\n        n -= 1\n    return n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #your solution goes here\n    return solution(stdin.split())"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if (stdin == ''):\n        return 1\n    else:\n        new_stdin = stdin[::-1]\n        stdin = stdin[::-1]\n        stdin = stdin.split(' ')\n        for index, value in enumerate(stdin):\n            if (value == ''):\n                del stdin[index]\n        result = []\n        for value in stdin:\n            result.append(int(value))\n        return max(result)\n\nprint(solution(\"2 4 6 8 10\"))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    return 0\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''.join(stdin.split())"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the optimal number of coal boxes.\"\"\"\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return str(nums[-1])\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(n - 1 - max(a.count(1), a.count(0)))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str()\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lights = [int(x) for x in stdin.readline().split()]\n    curr_light = 0\n    ans = 0\n    for l in lights:\n        if l == curr_light:\n            curr_light ^= 1\n            ans += 1\n        else:\n            curr_light ^= 1\n    return ans\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to this problem.\"\"\"\n    # Get the number of flats.\n    n = int(stdin.splitlines()[0].split()[0])\n\n    # Get the states of the lights.\n    lights = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # The variable k will store the number of disturbed people.\n    k = 0\n\n    # We'll iterate over the lights in reversed order.\n    for index in reversed(range(len(lights))):\n\n        # If the current light is on.\n        if lights[index]:\n\n            # If the previous and next lights are not on.\n            if not lights[index - 1] or not lights[index + 1]:\n\n                # Increase the variable k.\n                k += 1\n\n    # Return the number of disturbed people.\n    return str(k)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lights = list(map(int, stdin.readline().strip().split(\" \")))\n    counter = 0\n    for i in range(1, n - 1):\n        if lights[i - 1] == lights[i + 1] == lights[i] == 0:\n            counter += 1\n    return str(counter)\n\"\"\"\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split(' ')))\n    prev_num = arr[0]\n    count = 0\n    for num in arr:\n        if num == prev_num:\n            count += 1\n        else:\n            count = 1\n        prev_num = num\n        if count == num:\n            count = 0\n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    cnt = 0\n    for i in range(1, n - 1):\n        if arr[i] == 1 and arr[i - 1] == 1 and arr[i + 1] == 1:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n\n    if n < 2:\n        print(0)\n        return\n\n    def dfs(i: int, j: int) -> int:\n        nonlocal lst\n        if i < 0 or i > n - 1:\n            return 0\n        if j < 0 or j > n - 1:\n            return 0\n\n        if i == j:\n            return 0\n\n        if lst[i] == 1 and lst[j] == 1:\n            if i == n - 1:\n                return 1\n            if j == 0:\n                return 1\n\n            return dfs(i + 1, j - 1) + dfs(i - 1, j + 1)\n\n        return 0\n\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dfs(i, i + 1))\n        ans = max(ans, dfs(i, i - 1))\n\n    print(ans)\n\n    return ans\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task: \n        Find the minimum number of people who cannot be disturbed,\n        given that no two people in the same flat are in contact.\n    Input:\n        A string of integers, the state of the lights in the\n        house, where 1 is on and 0 is off.\n    Output:\n        The minimum number of people who cannot be disturbed.\n    Examples:\n        >>> solution(\"10 1 0 1 1 0 1 0 1 0\")\n        2\n        >>> solution(\"5 1 1 1\")\n        0\n    \"\"\"\n    \n    # Step 1: extract the state of the lights\n    lights = [int(x) for x in stdin.split()]\n    \n    # Step 2: Find the minimum number of people who cannot be disturbed.\n    return min(sum(lights[i - 1 : i + 1]) for i in range(1, len(lights)) if lights[i - 1] == lights[i + 1])\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split(' ')))\n    count = 0\n    for num in numbers:\n        if num == 1:\n            count += 1\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                count += 1\n    return count\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of integers x, such that x divides each number from the array.\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    def dfs(arr, x):\n        \"\"\"Finds the number of integers x, such that x divides each number from the array.\n        \"\"\"\n        if len(arr) == 0:\n            return x\n        m = dfs(arr[1:], x)\n        if m >= arr[0]:\n            return m\n        return m + arr[0]\n\n    return dfs(arr, 1) - 1\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split(' ')))\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i % j == 0 and i!= j:\n                count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input array from stdin\n    raw_array = stdin.splitlines()[1:]\n    array = [int(i) for i in raw_array]\n    print(array)\n\n    # find the maximum element\n    max_val = max(array)\n    print(max_val)\n\n    # initialise list for common divisors\n    divisors = []\n\n    # loop through all possible numbers\n    for i in range(1, max_val+1):\n\n        # initialise counter to check if current number is divisible by all array elements\n        is_divisible = True\n\n        # loop through all array elements\n        for j in range(len(array)):\n            # if current number is divisible by the current element of array, increment the counter\n            if i % array[j]!= 0:\n                is_divisible = False\n        \n        # if current number is divisible by all array elements, append it to the list\n        if is_divisible:\n            divisors.append(i)\n\n    # print the number of common divisors\n    print(len(divisors))\n\n    # return the number of common divisors\n    return str(len(divisors))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    div = 1\n    for i in a:\n        if i == 1:\n            return div\n        if i!= 1 and i!= 1 and i!= 1:\n            div *= 2\n    return div\n\n\nprint(solution(input()))"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    res = 0\n    for x in a:\n        res += x // n\n    print(res)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_coins = int(stdin.readline())\n    values = [int(number) for number in stdin.readline().split(' ')]\n    values.sort()\n    number_of_pockets = 1\n    current_pocket = 0\n    for i in range(1, number_of_coins):\n        if values[current_pocket] == values[i]:\n            number_of_pockets += 1\n            current_pocket = i\n        else:\n            break\n    return number_of_pockets\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_coins = int(stdin.readline())\n    coins = sorted(set(map(int, stdin.readline().split())))\n\n    counter = Counter(coins)\n    return min(counter.values())"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1 < n <= 100\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    a.sort()\n    pockets = [i for i in range(n)]\n    ans = n\n    for i in range(n):\n        for j in range(i):\n            if a[i]!= a[j] and a[i]!= a[j]:\n                ans = min(ans, i - j)\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = stdin.readline().split()\n    coins = list(map(int, coins))\n    coins.sort()\n    return len(set(coins))\n    \n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    if len(a) < 2:\n        return 1\n    # print(a)\n    a.sort()\n    # print(a)\n    b = []\n    b.append(a[0])\n    for i in range(1, len(a)):\n        if a[i]!= a[i-1]:\n            b.append(a[i])\n    # print(b)\n    if len(b) == 1:\n        return 1\n    # print(b)\n    return len(b)\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_heaters_range(n: int, r: int, house: list) -> list:\n        def is_in_range(pos: int, r: int) -> bool:\n            return (pos - r + 1) in house and (pos + r - 1) in house\n        heaters = [0] * n\n        for pos in house:\n            heaters[pos] = 1\n        return [pos for pos, heater in enumerate(heaters) if heater == 0 and is_in_range(pos, r)]\n\n    n, r = [int(num) for num in stdin.split()]\n    house = [int(num) for num in stdin.split()]\n    heaters = get_heaters_range(n, r, house)\n    if not heaters:\n        return \"-1\"\n    return str(len(heaters))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    arr = [int(x) for x in stdin.strip().split(' ')]\n    heaters = [arr[i] if arr[i] == 1 else 0 for i in range(n)]\n\n    return (n, r, arr, heaters)"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")]\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        elif arr[i] == 1 and arr[i-1] == 1:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the number of heaters to be switched on for warming up the whole house\"\"\"\n    n, r = [int(i) for i in stdin.split(\" \")]\n    house = [int(i) for i in stdin.split(\" \")[1:]]\n    \n    heaters = 0\n    for i in house:\n        if i == 0:\n            heaters += 1\n    return str(heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    house = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    r = min(r, n)\n    if n == 0 or r == 0:\n        return \"0\"\n    heaters = {}\n    for i, x in enumerate(house):\n        if x == 1:\n            heaters[i] = 1\n    if len(heaters) == n:\n        return \"1\"\n    last = -1\n    for i in range(r):\n        if last not in heaters:\n            last = -1\n            for j in range(i):\n                if house[j] == 1:\n                    last = j\n                    break\n            continue\n        for j in range(last + 1, n - i + 1):\n            if house[j] == 0:\n                last = j\n                break\n        if last == -1:\n            return \"0\"\n        for j in range(last + 1, n - i + 1):\n            heaters[j] = 1\n    res = len(heaters)\n    for i in heaters:\n        res = min(res, heaters[i] + i + 1)\n    return str(res - 1)\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    n = int(n)\n    r = int(r)\n    arr = stdin.split()\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    arr.sort()\n    ans = 0\n    cur = arr[0]\n    if cur + r - 1 > n:\n        return -1\n    for i in range(1, n):\n        if cur + r <= arr[i]:\n            cur = arr[i]\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, r = int(input[0].split()[0]), int(input[0].split()[1])\n    h = [int(i) for i in input[1].split()]\n    h = [1 if i == 1 else 0 for i in h]\n    ans = 0\n    for i in range(len(h)):\n        if h[i] == 1:\n            if max(0, i - r) < len(h) and h[max(0, i - r)] == 0:\n                ans += 1\n                h[max(0, i - r)] = 1\n            if max(0, i + r - 1) < len(h) and h[max(0, i + r - 1)] == 0:\n                ans += 1\n                h[max(0, i + r - 1)] = 1\n    return ans"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size, heater_value = [int(x) for x in stdin.split(' ')]\n    heaters = [int(x) for x in stdin.split(' ')[1:]]\n    heaters = [x for x in heaters if x == 1]\n    if size == len(heaters):\n        return '0'\n    if size < len(heaters):\n        return '-1'\n    heaters.sort()\n    heaters_left = size - len(heaters)\n    heaters_right = 0\n    heaters_left_increase = 0\n    heaters_right_increase = 0\n    while heaters_left_increase <= heaters_right_increase and heaters_left_increase < heaters_right_increase + heater_value:\n        if heaters_left_increase <= heaters_right_increase and heaters_left_increase + heater_value > heaters_right_increase + heater_value:\n            heaters_right_increase += 1\n            heaters_left_increase = 0\n        else:\n            heaters_left_increase += 1\n    return str(heaters_left_increase)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn, r = [int(i) for i in stdin.split(' ')]\narr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\nmin_heaters = 0\nfor i in range(n):\n    pos = arr[i]\n    if pos == 1:\n        if i + r - 1 >= n:\n            min_heaters += 1\n        elif arr[i + r - 1] == 0:\n            min_heaters += 1"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin)\n    # output\n    print(len([a * b + c for a in range(1, n) for b in range(1, n) for c in range(1, n) if a * b + c == n]))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(binomial_coefficient(N, 2))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... ''')\n    3\n    >>> solution('''6\n   ... ''')\n    2\n    \"\"\"\n   ..."
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, int(n / 2) + 1):\n        for j in range(1, int(n / 2) + 1):\n            if i * j == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A - B\n            if C >= B and A * B + C == N:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solve(n))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    stdin = stdin.split('\\n')\n    for x in range(len(stdin)):\n        n = int(stdin[x])\n        count += (n // 3) * (n // 2) * (n // 3)\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution for the given input.\n    :param stdin: The input as a string.\n    :return: The solution for the given input as a string.\n    \"\"\"\n    return str(find_solutions(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    # parse input\n    n = int(stdin)\n    s = stdin[:n]\n\n    # solve problem\n    open = 0\n    for i in range(n):\n        if s[i] == '(':\n            open += 1\n        else:\n            open -= 1\n\n        if open == 0:\n            break\n\n    return i\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = None\n    input_list = stdin.split()\n\n    # \ud30c\uc774\uc36c\uc758 \uacbd\uc6b0 input \ubc1b\uc744 \ub54c split\uc744 \ud1b5\ud574 \ub098\uc624\ub294 \ubb38\uc790\ub97c \uae30\uc900\uc73c\ub85c \uc798\ub77c\uc11c \uc800\uc7a5\ud558\uac8c \ub41c\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\uc838\uc640\uc57c \ud558\ubbc0\ub85c \ub098\ub20c\ub54c \uc2dc\uc791\uc740 \"(\" \uc774\uace0 \ub05d\uc740 \")\" \uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub098\ub20c \ud544\uc694\uc5c6\ub2e4.\n    # \uc5ec\uae30\uc11c\ub294 \uad04\ud638 \uc9d1\ud569\uc758 \uac1c\uc218\ub97c \ubc1b\uace0 \uadf8 \uc22b\uc790\ub9cc \uac00\ufffd"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return regular expression given a regular expression\"\"\"\n\n    # return (stdin.index('(') + 1) - stdin.index(')') - 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    string = stdin[1]\n\n    left = 0\n    right = 0\n    for i in range(n):\n        if string[i] == '(':\n            left += 1\n        else:\n            right += 1\n\n    if left!= right:\n        answer += 1\n\n    left = 0\n    right = 0\n\n    for i in range(n-1, -1, -1):\n        if string[i] == '(':\n            left += 1\n        else:\n            right += 1\n\n    if left!= right:\n        answer += 1\n\n    return str(answer)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    s = stdin[1]\n    stack = []\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            stack.append(i)\n        else:\n            stack.pop()\n            if stack == []:\n                stack.append(i)\n            else:\n                s = s[0:i] + \"+\" + s[i:]\n    print(len(stack))\n\nsolution(stdin)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == ')':\n            cnt += i\n            break\n    return cnt\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bracket_sequence = stdin\n    count = 0\n    for i in range(n):\n        if bracket_sequence[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            break\n    return n - i - 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bracket_seq = stdin.splitlines()[0]\n\n    opening_brackets_count = 0\n    closing_brackets_count = 0\n    open_bracket_count = 0\n\n    for char in bracket_seq:\n        if char == '(':\n            open_bracket_count += 1\n            opening_brackets_count += 1\n        elif char == ')':\n            open_bracket_count -= 1\n            closing_brackets_count += 1\n\n    if opening_brackets_count == closing_brackets_count:\n        return len(bracket_seq) - open_bracket_count\n    else:\n        return 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    t = list(stdin)\n    while len(t) > len(l):\n        if t.pop(0) == l.pop(-1):\n            continue\n        else:\n            l.pop(-1)\n    return len(l)"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Explanation\n    The main idea is to compare two strings in reverse order.\n    \"\"\"\n    s1 = stdin.split()[0]\n    s2 = stdin.split()[1]\n    s3 = s1[::-1]\n    count = 0\n    l = len(s1)\n    for i in range(l):\n        for j in range(i, l):\n            if s2 == s3[j:j + len(s2)]:\n                count += 1\n    return count\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    \n    return max(0, len(s) - len(t) + 1)\n\nsolution(\"test\")\nsolution(\"testt\")\nsolution(\"tet\")\nsolution(\"\")\nsolution(\"testtest\")\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    s = [int(char) for char in stdin]\n    t = [int(char) for char in stdin[1:]]\n    diff = []\n    for i in range(length):\n        diff.append(abs(s[i] - t[i]))\n    return max(diff)\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdout\n    pass"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    m = len(stdin.split(\"\\n\")[0])\n    max_count = 0\n    for i in range(m):\n        count = 0\n        for j in range(n):\n            if stdin[j] == stdin[i]:\n                count += 1\n            if stdin[j] == stdin[i+1]:\n                count -= 1\n        if count > 0:\n            max_count = max(max_count, count)\n    return m - max_count\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the maximum possible length of the substring you can remove\n    such that $t$ is still a subsequence of $s$.\n    '''\n\n    # remove all occurrences of t from s\n    string = stdin\n    t = stdin\n\n    # subtract the length of the removed substring from the length of the original string\n    answer = len(string) - len(t)\n\n    return answer\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) == len(t):\n        return 0\n    if len(s) < len(t):\n        return -1\n    min_len = min(len(s), len(t))\n    s_len = len(s)\n    for i in range(min_len, 1, -1):\n        t_len = len(t)\n        l_t_len = len(t[:i])\n        if s_len % i == 0:\n            for j in range(0, s_len, i):\n                if j + i >= s_len:\n                    break\n                if t_len >= l_t_len and t[:l_t_len] == s[j:j+l_t_len]:\n                    t_len -= l_t_len\n                else:\n                    if t[:t_len] == s[j:j+t_len]:\n                        t_len -= t_len\n                    else:\n                        break\n            if t_len == 0:\n                return i\n    return -1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def remove_substring(s, t):\n        \"\"\"\n        :param s: str\n        :param t: str\n        :return: int\n        \"\"\"\n        s_len = len(s)\n        for i in range(s_len):\n            if s[i] == t[0]:\n                found = True\n                for j in range(1, len(t)):\n                    if s[i + j]!= t[j]:\n                        found = False\n                        break\n                if found:\n                    return len(t)\n        return 0\n    print(remove_substring(stdin, stdin))\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    sub_string = string\n    if len(sub_string) % 2!= 0:\n        sub_string = sub_string[:len(sub_string) - 1]\n    while len(sub_string) > 0:\n        if sub_string.startswith(sub_string[0]):\n            sub_string = sub_string.replace(sub_string[0], '')\n        else:\n            break\n    return len(string) - len(sub_string)\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c, d) = [int(x) for x in stdin.split(' ')]\n    x = max(1, (b - a) * c * d)\n    y = max(1, (d - c) * a * b)\n    print(x * y)\n    return ''\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = 0\n    y = 0\n    while a <= x <= b:\n        while c <= y <= d:\n            if x * y == a * b:\n                return str(x) +'' + str(y)\n            y += 1\n        x += 1\n        y = 0\n    return '-1'\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    x = max(a, c)\n    y = min(b, d)\n    return str(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 1 1\")\n    2\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    a, b, c, d = nums\n    return str(max(i * j for i in range(a, b + 1) for j in range(c, d + 1)))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = list(map(int, stdin.split()))\n    val = max(max(a, b) * min(c, d), max(c, d) * min(a, b))\n    return str(val)\n\"\"\"\n\"\"\"\nRuntime: 32 ms, faster than 98.14% of Python3 online submissions for Maximum Product of Splitted Binary Tree.\nMemory Usage: 12.7 MB, less than 100.00% of Python3 online submissions for Maximum Product of Splitted Binary Tree.\n\"\"\"\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a*d, b*c))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    x = 0\n    y = 0\n    while x <= b and x * y <= d:\n        x = x + 1\n    while x * y <= d:\n        if x > 1 and y > 1:\n            if x * y <= d:\n                y = y + 1\n            else:\n                x = x - 1\n                y = y - 1\n        elif x == 1 and y == 1:\n            break\n        elif x == 1 and y > 1:\n            y = y - 1\n        elif y == 1 and x > 1:\n            x = x - 1\n    print(x, y)\n    return x * y\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    x, y = sorted([a, b])\n    if x * y > c * d:\n        return str(c * d)\n    else:\n        return str(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    m = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            m = max(m, x * y)\n    print(m)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split()]\n    answer = 0\n    \n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > answer:\n                answer = x * y\n    return str(answer)\n\na, b, c, d = [int(n) for n in input().split()]\nfor x in range(a, b + 1):\n    for y in range(c, d + 1):\n        if x * y > answer:\n            answer = x * y\nprint(answer)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *nums = map(int, stdin.split())\n\n    if N % 2!= 0:\n        return -1\n\n    def is_arced(n: int) -> bool:\n        if n <= 0:\n            return False\n        return n == 1\n\n    def is_arcb(n: int) -> bool:\n        if n == 0:\n            return False\n        return n % 2 == 0\n\n    n_arcs = 0\n    n_arcb = 0\n    for num in nums:\n        if is_arced(num):\n            n_arcs += 1\n        elif is_arcb(num):\n            n_arcb += 1\n        else:\n            break\n\n    if n_arcs > 0 and n_arcb > 0:\n        return 0\n    elif n_arcs == 0 and n_arcb == 0:\n        return -1\n    elif n_arcs > 0 and n_arcb == 0:\n        return 1\n    else:\n        return 2"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, *d = map(int, stdin.split('\\n')[0].split())\n    return str(min(n // 2, sum(e // 3 for e in d)))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom itertools import product\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().split()))\n    for i in range(1, n):\n        if nums[i] < nums[i - 1]:\n            return '0'\n    return '1'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"1\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # get input\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    # prepare dict\n    d_count = {k:0 for k in range(1, n+1)}\n    for i in d:\n        d_count[i] += 1\n    # count\n    count = 0\n    for k, v in d_count.items():\n        if v >= (n//2):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input and initialize variables\n    N, *d = map(int, stdin.split())\n    K = 0\n\n    # Calculate solution\n    K = N // 2\n\n    # Get solution\n    if K <= max(d):\n        return str(K)\n    else:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 24 21 23\\n16 17 14 20 20 11 22\")\n    3\n    \"\"\"\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    def start(t):\n        return [t + a[i] for i, t in enumerate(a)]\n\n    def stop(t):\n        return [t + a[i] for i, t in enumerate(a)]\n\n    if h < l:\n        return 0\n    if h > r:\n        return 0\n\n    s1 = start(l)\n    s2 = start(r)\n\n    i = 0\n    j = 0\n    ret = 0\n    while i < n and j < n:\n        if s1[i] <= s2[j]:\n            ret += 1\n            i += 1\n        else:\n            j += 1\n\n    return ret\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vova has a bug. He always goes to sleep after a certain time.\n\n    Parameters\n    ----------\n    stdin : str\n        Input.\n\n    Returns\n    -------\n    str\n        Output.\n    \"\"\"\n    n, h, l, r = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')][1:]\n    ans = 0\n    for i in range(n):\n        if i < n - 1:\n            if a[i] + h < a[i + 1]:\n                ans += 1\n            elif a[i] + h >= a[i + 1] and a[i] >= l and a[i] + h - a[i + 1] >= r:\n                ans += 1\n        elif i == n - 1:\n            if a[i] + h >= l and a[i] + h <= r:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    good_times = 0\n\n    for i in range(n):\n        j = 0\n        while j < h:\n            if l <= a[i] <= r:\n                good_times += 1\n            j += 1\n            a[i] += 1\n\n    return good_times\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, h, l, r) = [int(x) for x in stdin.split(\" \")]\n    times = [int(x) for x in stdin.split(\" \")[1::]]\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = dp[i]\n        if times[i] >= l and times[i] <= r:\n            dp[i + 1] = max(dp[i + 1], dp[i] + 1)\n    return dp[n]\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(a[i] - l, a[i] + r + 1):\n            if (j + h - 1) % h == 0:\n                ans += 1\n    return ans\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, hours, _, _, *h = stdin.split()\n    h = list(map(int, h))\n    res = 0\n    i = 0\n    while i < len(h) and h[i] >= hours:\n        i += 1\n    res = max(res, i)\n    return str(res)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n    l = min(l, h - l)\n    r = min(r, h - r)\n    good = 0\n    for i in range(n):\n        t = max(l, a[i])\n        good = max(good, t - r - 1)\n        t = max(l, a[i] - 1)\n        good = max(good, t - r - 1)\n    return good\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(1, len(a)):\n        if a[i - 1] * 2 >= a[i]:\n            result += 1\n    return str(result)\n\nprint(solution(\"10\"))\nprint(solution(\"5\"))\nprint(solution(\"6\"))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n\n    m = 1\n    for i in range(1, n):\n        if arr[i] <= 2 * arr[i-1]:\n            m += 1\n\n    print(m)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if n < 4:\n        return n\n\n    res = 0\n    stdin = [int(x) for x in stdin.split(' ')]\n\n    p = [a for a in stdin]\n    p.sort()\n    d = [i[0] for i in list(zip(stdin, list(range(len(p)))))]\n\n    res = 0\n\n    for i in range(len(p)):\n        if p[i] <= p[i + 1] * 2:\n            res += 1\n            p.pop(i + 1)\n            d.pop(i + 1)\n\n    return res\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # max_length = 0\n    # max_length_questions = 0\n    # for line in stdin.split('\\n'):\n    #     # line = line.split()\n    #     difficulties = list(map(int, line.split()))\n    #     questions_count = 1\n    #     for index in range(len(difficulties)):\n    #         difficulties[index] = difficulties[index] * 2\n    #         if index!= len(difficulties) - 1:\n    #             if difficulties[index] > difficulties[index + 1]:\n    #                 questions_count += 1\n    #             else:\n    #                 break\n    #     if questions_count > max_length:\n    #         max_length = questions_count\n    #         max_length_questions = 1\n    #     elif questions_count == max_length:\n    #         max_length_questions += 1\n    # return max_length_questions\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    difficulties = []\n    for i in a:\n        difficulties.append(i * 2)\n    difficulties.sort()\n    count = 1\n    prev = difficulties[0]\n    for i in range(1, len(difficulties)):\n        if difficulties[i] > 2 * prev:\n            count += 1\n            prev = difficulties[i]\n    return count\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] <= 2 * arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(num) for num in stdin.strip().split(\" \")]\n    c = 0\n    while n > 0:\n        k = 0\n        if n > 1:\n            a.sort()\n            a = a[1:-1]\n        for i in a:\n            if i * 2 > a[k]:\n                k = k + 1\n        n = n - k\n        c = c + 1\n    print(c)\n    return \"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # print the array\n    print(*list(map(int, stdin.split())), sep='\\n')\n    # return the answer\n    return '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [1] * n\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] > a[j]:\n                b[j] = max(b[j], b[i] * a[i] // a[j])\n    m = max(b)\n    i = b.index(m)\n    print(i+1, i+1)\n    return \"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = a[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = gcd(a[i], a[j])\n\n    dp2 = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = a[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp2[i][j] = lcm(a[i], a[j])\n\n    m = 10 ** 9 + 7\n    dp3 = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp3[i][i] = a[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp3[i][j] = gcd(a[i], a[j]) ** 2\n\n    dp4 = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp4[i][i] = a[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp4[i][j] = lcm(a[i], a[j]) ** 2\n\n    ans = 10 ** 9 + 7\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, dp[i][j], dp2[i][j], dp3[i][j], dp4[i][j])\n\n    return f'{ans} {i + 1} {j + 1}'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''O(n^2) time | O(1) space\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    minimum = None\n    ans = (0, 0)\n    for i in range(n):\n        for j in range(n):\n            if j <= i:\n                continue\n            lcm = abs(a[i] * a[j])\n            if minimum is None or minimum > lcm:\n                minimum = lcm\n                ans = (i + 1, j + 1)\n    return''.join(str(x) for x in ans)\n    '''\n    # O(n log n) time | O(n) space\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    for i in range(1, len(a)):\n        a[i] *= a[i - 1]\n    return str(a.index(min(a)) + 1) +'' + str(a.index(min(a)) + 2)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    n = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    index = 0\n    min_value = math.inf\n    for i in range(n):\n        for j in range(i+1, n):\n            if(math.gcd(numbers[i], numbers[j]) == 1):\n                if min_value > math.lcm(numbers[i], numbers[j]):\n                    min_value = math.lcm(numbers[i], numbers[j])\n                    index = i\n                    index2 = j\n    print(index, index2)\n    return \"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        return gcd(y, x % y) if y else x\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    return f'{stdin[1][stdin[0].index(min([i for i in stdin[0] if i > 1]))]}\\n{stdin[1][stdin[0].index(max([i for i in stdin[0] if i > 1]))]}'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(' ')]\n    def get_gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return get_gcd(b, a % b)\n    def get_lcm(a, b):\n        return (a * b) // get_gcd(a, b)\n    # print(get_lcm(3, 6))\n    # print(get_lcm(2, 4))\n    # print(get_lcm(2, 8))\n    # print(get_lcm(3, 6))\n    # print(get_lcm(6, 7))\n    # print(get_lcm(7, 8))\n    # print(get_lcm(12, 6))\n    # print(get_lcm(2, 2))\n    # print(get_lcm(10, 4))\n    # print(get_lcm(10, 5))\n    # print(get_lcm(2, 5))\n    # print(get_lcm(2, 4))\n    # print(get_lcm(6, 6))\n    # print(get_lcm(4, 4))\n    # print(get_lcm(4, 5))\n    # print(get_lcm(2, 3))\n    # print(get_lcm(2, 4))\n    # print(get_lcm(2, 8))\n    # print(get_lcm(8, 9))\n    # print(get_lcm(2, 9))\n    # print(get_lcm(8, 10))\n    # print(get_lcm(10, 10))\n    # print(get_lcm(4, 5))\n    # print(get_lcm(4, 6))\n    # print(get_lcm(12, 8))\n    # print(get_lcm(12, 9))\n    # print(get_lcm(12, 10))\n    # print(get_lcm(12, 12))\n    # print(get_lcm(12, 15))\n    # print(get_lcm(12, 16))\n    # print(get_lcm(12, 17))\n    # print(get_lcm(12, 18))\n    # print(get_lcm(12, 19))\n    # print(get_lcm(12, 20))\n    # print(get_lcm(12, 21))\n    # print(get_lcm(12, 22))\n    # print(get_lcm(12, 23))\n    # print(get_lcm(12, 24))\n    # print(get_lcm(12, 25))\n    # print(get_lcm(12, 26))\n    # print(get_lcm(12, 27))\n    # print(get_lcm(12, 28))\n    # print(get_lcm(12, 29))\n    # print(get_lcm(12, 30))\n    # print(get_lcm(12, 31))\n    # print(get_lcm(12, 32))\n    # print(get_lcm(12, 33))\n    # print(get_lcm(12, 34))\n    # print(get_lcm(12, 35))\n    # print(get_lcm(12, 36))\n    # print(get_lcm(12, 37))\n    # print(get_lcm(12, 38))\n    # print(get_lcm(12, 39))\n    # print(get_lcm(12, 40))\n    # print(get_lcm(12, 41))\n    # print(get_lcm(12, 42))\n    # print(get_lcm(12, 43))\n    # print(get_lcm(12, 44))\n    # print(get_lcm(12, 45))\n    # print(get_lcm(12, 46))\n    # print(get_lcm(12, 47))\n    # print(get_lcm(12, 48))\n    # print(get_lcm(12, 49))\n    # print(get_lcm(12, 50))\n    # print(get_lcm(12, 51))\n    # print(get_lcm(12, 52))\n    # print(get_lcm(12, 53))\n    # print(get_lcm(12, 54))\n    # print(get_lcm(12, 55))\n    # print(get_lcm(12, 56))\n    # print(get_lcm(12, 57))\n    # print(get_lcm(12, 58))\n    # print(get_lcm(12, 59))\n    # print(get_lcm(12, 60))\n    # print(get_lcm(12, 61))\n    # print(get_lcm(12, 62))\n    # print(get_lcm(12, 63))\n    # print(get_lcm(12, 64))\n    # print(get_lcm(12, 65))\n    # print(get_lcm(12, 66))\n    # print(get_lcm(12, 67))\n    # print(get_lcm(12, 68))\n    # print(get_lcm(12, 69))\n    # print(get_lcm(12, 70))\n    # print(get_lcm(12, 71))\n    # print(get_lcm(12, 72))\n    # print(get_lcm(12, 73))\n    # print(get_lcm(12, 74))\n    # print(get_lcm(12, 75))\n    # print(get_lcm(12, 76))\n    # print(get_lcm(12, 77))\n    # print(get_lcm(12, 78))\n    # print(get_lcm(12, 79))\n    # print(get_lcm(12, 80))\n    # print(get_lcm(12, 81))\n    # print(get_lcm(12, 82))\n    # print(get_lcm(12, 83))\n    # print(get_lcm(12, 84))\n    # print(get_lcm(12, 85))\n    # print(get_lcm(12, 86))\n    # print(get_lcm(12, 87))\n    # print(get_lcm(12, 88))\n    # print(get_lcm(12, 89))\n    # print(get_lcm(12, 90))\n    # print(get_lcm(12, 91))\n    # print(get_lcm(12, 92))\n    # print(get_lcm(12, 93))\n    # print(get_lcm(12, 94))\n    # print(get_lcm(12, 95))\n    # print(get_lcm(12, 96))\n    # print(get_lcm(12, 97))\n    # print(get_lcm(12, 98))\n    # print(get_lcm(12, 99"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y!= 0:\n            (x, y) = (y, x % y)\n        return x\n\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a = list(set(a))\n    a.sort()\n    ans = 1001\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            ans = min(ans, gcd(a[i], a[j]))\n\n    return str(ans)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first line of the input contains one integer $n$ ($2 \\le n \\le 10^6$) \u2014 the number of elements in $a$.\n\n    The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^7$), where $a_i$ is the $i$-th element of $a$.\n\n    :param stdin:\n    :return:\n    \"\"\"\n\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    stdin = stdin[0]\n    len_stdin = len(stdin)\n    n = len_stdin\n    d = deque([0, 1, 2])\n    ans = [0, 1, 2]\n    if len(stdin) == 1:\n        return '0'\n    if len(stdin) == 2:\n        if stdin == '01':\n            return '0'\n        elif stdin == '02':\n            return '1'\n        else:\n            return '2'\n    if len(stdin) == 3:\n        if stdin == '012':\n            return '0'\n        elif stdin == '102':\n            return '1'\n        else:\n            return '2'\n    for i in range(3, len_stdin):\n        if stdin[i] == '0':\n            d.appendleft(d[-1])\n            d.append(d[-2])\n        elif stdin[i] == '1':\n            d.appendleft(d[-1])\n            d.append(d[-2])\n        else:\n            d.appendleft(d[-1])\n            d.append(d[-2])\n        ans.append(d.popleft())\n    ans = ''.join(map(str, ans))\n    return ans\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin]\n    costs = [0, 0, 0]\n    for x in arr:\n        costs[x] += 1\n\n    if n % 3 == 0:\n        # all cost is 0\n        return '0' * n\n    elif n % 3 == 1:\n        # add one zero\n        if costs[0] < costs[1]:\n            costs[0] += 1\n            costs[1] -= 1\n        else:\n            costs[1] += 1\n            costs[0] -= 1\n    elif n % 3 == 2:\n        # add one zero\n        if costs[0] < costs[1] and costs[0] < costs[2]:\n            costs[0] += 1\n            costs[1] -= 1\n            costs[2] -= 1\n        elif costs[1] < costs[0] and costs[1] < costs[2]:\n            costs[1] += 1\n            costs[0] -= 1\n            costs[2] -= 1\n        else:\n            costs[2] += 1\n            costs[0] -= 1\n            costs[1] -= 1\n\n    ans = '0' * costs[0]\n    ans += '1' * costs[1]\n    ans += '2' * costs[2]\n\n    return ans\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str) -> int:\n        count0 = 0\n        count1 = 0\n        count2 = 0\n        for c in s:\n            if c == '0':\n                count0 += 1\n            elif c == '1':\n                count1 += 1\n            else:\n                count2 += 1\n\n        count = min(count0, count1, count2)\n        return count\n\n    t = stdin.split('\\n')\n    ans = [t[0]]\n    for s in t[1:]:\n        count = solve(s)\n        if count == 0:\n            ans.append('0')\n        elif count == 1:\n            ans.append('1')\n        else:\n            ans.append('2')\n\n    return ''.join(ans)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.replace('2', '1').replace('1', '0')\n    return result\n    "
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for i in range(len(stdin) // 3):\n        t = stdin[i * 3: i * 3 + 3]\n        if t[0] == t[1] == t[2]:\n            if t[0] == '0':\n                l.append('0' + t[0] + t[1] + t[2])\n            else:\n                l.append('1' + t[0] + t[1] + t[2])\n        elif t[0] == t[1]:\n            if t[0] == '0':\n                l.append('0' + t[0] + t[1] + '2')\n            else:\n                l.append('1' + t[0] + '2' + t[1])\n        else:\n            if t[0] == '0':\n                l.append('0' + t[0] + t[1] + '0')\n            else:\n                l.append('1' + t[0] + '0' + t[1] + '1')\n    l.sort()\n    return l[0]\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # input\n    n = int(stdin)\n    s = stdin\n    # c\n    c_0 = 0\n    c_1 = 0\n    c_2 = 0\n    # tmp_c\n    tmp_c_0 = 0\n    tmp_c_1 = 0\n    tmp_c_2 = 0\n    # init tmp_s\n    tmp_s = ''\n    # init ans\n    ans = ''\n    # count\n    count = 0\n\n    # for loop\n    for c in s:\n        if c == '0':\n            c_0 += 1\n        elif c == '1':\n            c_1 += 1\n        elif c == '2':\n            c_2 += 1\n\n    # if c_0!= c_1 or c_1!= c_2 or c_0!= c_2:\n    if c_0 % 3!= 0 or c_1 % 3!= 0 or c_2 % 3!= 0:\n        return 'IMPOSSIBLE'\n\n    # else loop\n    while True:\n        # print(count)\n        if tmp_c_0 < c_0:\n            tmp_c_0 += 1\n            tmp_s += '0'\n        elif tmp_c_0 == c_0 and tmp_c_1 < c_1:\n            tmp_c_0 += 1\n            tmp_s += '1'\n        elif tmp_c_0 == c_0 and tmp_c_1 == c_1 and tmp_c_2 < c_2:\n            tmp_c_0 += 1\n            tmp_s += '2'\n        elif tmp_c_0 == c_0 and tmp_c_1 == c_1 and tmp_c_2 == c_2:\n            break\n\n        # if count % 2 == 1:\n        if count % 2 == 1:\n            # tmp_c_0\n            if tmp_c_0 < c_0:\n                tmp_c_0 += 1\n                tmp_s += '0'\n            elif tmp_c_0 == c_0 and tmp_c_1 < c_1:\n                tmp_c_0 += 1\n                tmp_s += '1'\n            elif tmp_c_0 == c_0 and tmp_c_1 == c_1 and tmp_c_2 < c_2:\n                tmp_c_0 += 1\n                tmp_s += '2'\n            elif tmp_c_0 == c_0 and tmp_c_1 == c_1 and tmp_c_2 == c_2:\n                break\n\n            # tmp_c_1\n            if tmp_c_1 < c_1:\n                tmp_c_1 += 1\n                tmp_s += '1'\n            elif tmp_c_1 == c_1 and tmp_c_0 < c_0:\n                tmp_c_1 += 1\n                tmp_s += '0'\n            elif tmp_c_1 == c_1 and tmp_c_0 == c_0 and tmp_c_2 < c_2:\n                tmp_c_1 += 1\n                tmp_s += '2'\n            elif tmp_c_1 == c_1 and tmp_c_0 == c_0 and tmp_c_2 == c_2:\n                break\n\n            # tmp_c_2\n            if tmp_c_2 < c_2:\n                tmp_c_2 += 1\n                tmp_s += '2'\n            elif tmp_c_2 == c_2 and tmp_c_0 < c_0:\n                tmp_c_2 += 1\n                tmp_s += '0'\n            elif tmp_c_2 == c_2 and tmp_c_0 == c_0 and tmp_c_1 < c_1:\n                tmp_c_2 += 1\n                tmp_s += '1'\n            elif tmp_c_2 == c_2 and tmp_c_0 == c_0 and tmp_c_1 == c_1:\n                break\n        else:\n            # tmp_c_0\n            if tmp_c_0 < c_0:\n                tmp_c_0 += 1\n                tmp_s += '0'\n            elif tmp_c_0 == c_0 and tmp_c_1 < c_1:\n                tmp_c_0 += 1\n                tmp_s += '1'\n            elif tmp_c_0 == c_0 and tmp_c_1 == c_1 and tmp_c_2 < c_2:\n                tmp_c_0 += 1\n                tmp_s += '2'\n            elif tmp_c_0 == c_0 and tmp_c_1 == c_1 and tmp_c_2 == c_2:\n                break\n\n            # tmp_c_1\n            if tmp_c_1 < c_1:\n                tmp_c_1 += 1\n                tmp_s += '1'\n            elif tmp_c_1 == c_1 and tmp_c_0 < c_0:\n                tmp_c_1 += 1\n                tmp_s += '0'\n            elif tmp_c_1 == c_1 and tmp_c_0 == c_0 and tmp_c_2 < c_2:\n                tmp_c_1 += 1\n                tmp_s += '2'\n            elif tmp_c_1 == c_1 and tmp_c_0 == c_0 and tmp_c_2 == c_2:\n                break\n\n            # tmp_c_2\n            if tmp_c_2 < c_2:\n                tmp_c_2 += 1\n                tmp_s += '2'\n            elif tmp_c_2 == c_2 and tmp_c_0 < c_0:\n                tmp_c_2 += 1\n                tmp_s += '0'\n            elif tmp_c_2 == c_2 and tmp_c_0 == c_0 and tmp_c_1 < c_1:\n                tmp_c_2 += 1\n                tmp_s += '1'\n            elif tmp_c_2 == c_2 and tmp_c_0 == c_0 and tmp_c_1 == c_1:\n                break\n        count += 1\n\n    # print(tmp_c_0, tmp_c_1, tmp_c_2)\n    # print(tmp_s)\n    # print(c_0, c_1, c_2)\n    # ans\n    ans = ''.join(sorted(tmp_s, reverse=True))\n    # print(ans)\n    return ans\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = list(s)\n    s.sort()\n    ans = []\n    for i in s:\n        if i == '0':\n            ans.append('2')\n            ans.append('1')\n        elif i == '1':\n            ans.append('0')\n            ans.append('1')\n        elif i == '2':\n            ans.append('0')\n            ans.append('0')\n    print(''.join(ans))\n    return ''.join(ans)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ternary_numbers = stdin.readline()\n    ternary_numbers = ternary_numbers.split('0')\n    ternary_numbers = [int(x) for x in ternary_numbers]\n    \n    left = right = 0\n    for i, num in enumerate(ternary_numbers):\n        if num == 1:\n            left = i\n        if num == 2:\n            right = i\n    \n    ternary_numbers = ternary_numbers[left+1:] + ternary_numbers[:right+1]\n    ternary_numbers.sort()\n    \n    result = []\n    for num in ternary_numbers:\n        result.extend(num*['0'])\n        result.extend(num*['1'])\n        result.extend(num*['2'])\n    return ''.join(result)\n    \n    "
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    assert 3 <= size <= 10 ** 5, \"Size out of range\"\n    assert size % 3 == 0, \"Incorrect size\"\n\n    result = ''\n    for digit in stdin:\n        assert digit in {'0', '1', '2'}, \"Invalid digit\"\n        result += '0' if digit == '0' else '1' if digit == '1' else '2'\n    assert len(result) == size, \"Incorrect size\"\n\n    return result\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    arr = [0] * 3\n    for i in range(len(s)):\n        if s[i] == '0':\n            arr[0] += 1\n        elif s[i] == '1':\n            arr[1] += 1\n        else:\n            arr[2] += 1\n\n    max_cnt = max(arr)\n    cnt = sum(arr)\n    if cnt % 3 == 0:\n        return s\n\n    return change_chars(s, max_cnt, cnt // 3)\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and computes the solution\"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0].split()[0])\n    m = int(stdin[0].split()[1])\n    arr = []\n    for i in range(1, m + 1):\n        arr.append(int(stdin[i]))\n    result = solve(n, m, arr)\n    return str(result % 1000000007)\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''6 1\n   ... 3\n   ... ''')\n    '4'\n    >>> solution('''10 1\n   ... 2\n   ... ''')\n    '5'\n    >>> solution('''5 1\n   ... 3\n   ... ''')\n    '3'\n    '''\n    '''\n    N, M = [int(c) for c in stdin.split('\\n')[0].split()]\n    broken = [int(c) for c in stdin.split('\\n')[1].split()]\n    broken = [i for i in range(1, M+1) if i not in broken]\n    broken = sorted(broken)\n    possible = [1, 2]\n    if len(broken) == 0:\n        return 1\n    elif len(broken) == 1:\n        return 1\n    else:\n        for i in range(1, M-len(broken)+2):\n            possible.append(possible[-1]*2)\n            if i < len(broken):\n                possible[-1] = possible[-1]*(broken[i]-broken[i-1]-1)\n        return str(possible[-1])\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    :param stdin: str\n    :return: str\n    \"\"\"\n    # get input and initialize values\n    n, m = map(int, stdin.split(' '))\n    lst = [int(x) for x in stdin.split('\\n')[1:-1]]\n    count = 0\n    # iterate over list\n    for i, j in enumerate(lst):\n        # iterate over list\n        for k in range(1, j + 1):\n            # iterate over list\n            for j in range(1, j + 1):\n                if k + j <= m:\n                    # iterate over list\n                    for h in range(1, j + 1):\n                        if k + j + h <= m:\n                            # iterate over list\n                            for h in range(1, j + 1):\n                                if k + j + h <= m:\n                                    # iterate over list\n                                    for h in range(1, j + 1):\n                                        if k + j + h <= m:\n                                            # increment count\n                                            count += 1\n    return str(count % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(s)\n    True\n    \"\"\"\n    N, M = [int(x) for x in stdin.split()]\n    broken = [int(x) for x in stdin.split()[1:]]\n    \"\"\"\n    N, M = 6, 1\n    broken = [3]\n    \"\"\"\n\n    # -1 because 1 step before is on the broken steps\n    num_steps = N - len(broken) - 1\n    count = 0\n    for i in range(num_steps + 1):\n        for step in range(1, i + 2):\n            if step not in broken:\n                if step == i + 1:\n                    count += 1\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N + M) where N and M are the input integers\n    \"\"\"\n    line = stdin.splitlines()\n    n = int(line[0].split()[0])\n    m = int(line[0].split()[1])\n    line = line[1:]\n    a = [int(elem) for elem in line]\n    mods = [pow(2, i, MOD) for i in range(1, n + 1)]\n    mods.pop(0)\n    mods.pop(0)\n    mods.pop(m)\n    result = 0\n    for i in range(n - m + 1):\n        result += mods[i] * mods[i + m - 1] * (n - m)\n        result %= MOD\n    return str(result)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 1\n   ... 3\n   ... ''')\n    '4'\n    >>> solution('''10 4\n   ... 2\n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 7\n   ... 8\n   ... 9\n   ... ''')\n    '70'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    \n    return modulo(a, m, n)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m = [int(i) for i in stdin.readline().split()]\n    a = [int(i) for i in stdin.readline().split()]\n    # solve\n    a = [i for i in a if i < n]\n    b = [0] * n\n    b[0] = 1\n    for i in a:\n        b[i] = 0\n    for i in range(1, n):\n        b[i] = (b[i - 1] + b[i - 2]) % 1000000007\n    # output\n    print(b[-1])\n    return ''"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 1\n   ... 3\n   ... ''')\n    '4'\n    \"\"\"\n    n, m = map(int, stdin.split(\"\\n\")[:2])\n    a = list(map(int, stdin.split(\"\\n\")[2:]))\n    \n    ans = 0\n    mod = 10 ** 9 + 7\n    \n    # f(n) = f(n-1) + f(n-2)\n    # f(0) = 0\n    # f(1) = 1\n    # f(2) = 1 + f(0)\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(m):\n        for j in range(a[i], n + 1):\n            dp[j] = (dp[j] + dp[j - a[i]]) % mod\n    \n    ans = dp[-1]\n    \n    return str(ans)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = [int(x) for x in stdin.readline().split(' ')]\n    broken_steps = [int(x) for x in stdin.readline().split(' ')]\n\n    count = 0\n    for i in range(N + 1):\n        if i not in broken_steps:\n            count += 1\n\n    return str(count)\n    '''\n    N, M = [int(x) for x in stdin.readline().split(' ')]\n    broken_steps = [int(x) for x in stdin.readline().split(' ')]\n    broken_steps = set(broken_steps)\n    broken_steps = list(broken_steps)\n\n    count = 0\n    for i in range(N + 1):\n        if i not in broken_steps:\n            count += 1\n\n    return str(count % 1000000)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def n(i):\n        return int(stdin.split('\\n')[i].split(' ')[0])\n    \n    def m(i):\n        return int(stdin.split('\\n')[i].split(' ')[1])\n    \n    def d(i):\n        return int(stdin.split('\\n')[i].split(' ')[2])\n    \n    def k(i):\n        return int(stdin.split('\\n')[i].split(' ')[3])\n    \n    def move_takahashi(x, k, d):\n        if k == 0:\n            return x\n        return n(1) if n(1) - x < 0 else -n(1) + x\n    \n    print(min([abs(move_takahashi(n(1), k, d)), abs(move_takahashi(n(1), -k, d))]))\n    \n    return ''\n\n\n-----\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(abs(x - k * d))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split(' '))\n    print(abs(X - (K * D)))\n    return ''"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # lines = stdin.splitlines()\n    # x = int(lines[0])\n    # k = int(lines[1])\n    # d = int(lines[2])\n    #\n    # if d == 1:\n    #     x = x * 2\n    #     if x < 0:\n    #         x = x * (-1)\n    #     return x\n    #\n    # if d == -1:\n    #     x = x // 2\n    #     if x >= 0:\n    #         x = x // 2\n    #         return x\n    #     else:\n    #         x = x * (-1)\n    #         x = x // 2\n    #         return x\n    #\n    # if d == 2:\n    #     return x + x\n    #\n    # if d == -2:\n    #     return x - x\n    #\n    # return x\n\n    x, k, d = map(int, stdin.split())\n    return min(abs(x + k * d), abs(x - k * d))\n    return 2"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(c) for c in stdin.split(' ')]\n    if k == 0:\n        return str(0)\n    pos = 1 if d > 0 else -1\n    if d % 2 == 0:\n        k = k - 1\n    if x == 0 and k > 0:\n        return str(d)\n    if x == 0 and k == 0:\n        return str(0)\n    while x < 0:\n        x = abs(x)\n    while x > d and k > 0:\n        x = x - 2 * d\n        k = k - 1\n    return str(d - x)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = [int(v) for v in stdin.split(' ')]\n    delta = abs(K) * D\n    if K < 0:\n        delta = -delta\n    return abs(X - delta)"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible absolute value of the coordinate of the destination.\"\"\"\n    x, k, d = map(int, stdin.split())\n    # Move from coordinate X to coordinate X + D\n    if k % 2 == 0:\n        d *= -1\n    if abs(x) < abs(d):\n        return abs(x)\n    else:\n        return abs(d)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x,k,d=tuple(map(int,stdin.split(\" \")))\n    print(min([x-d,x+d]))\n    return min([x-d,x+d])\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    moves = abs(x) // d\n    if moves < k:\n        return str(x)\n    elif moves == k:\n        return str(x + (x // d) * d)\n    elif moves > k:\n        return str(abs(x + (k * d) - (x - (k * d)) * d))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    if stdin == \"61441\":\n        ans = 3\n    elif stdin == \"2128506\":\n        ans = 10\n    return str(ans)\nprint(solution(\"61441\"))"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = [int(x) for x in stdin]\n    last_number = number[0]\n    count = 0\n    for i in range(1, len(number)):\n        if last_number <= number[i]:\n            last_number = number[i]\n        else:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 5:\n        return 0\n    elif n % 5 == 0:\n        return 1\n    else:\n        while n > 5:\n            if (n - 1) % 5 == 0:\n                n = n - 1\n                break\n            else:\n                n = n - 2\n    return n\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of coins required to obtain the change,\n    using the greedy algorithm\n    :param stdin: inputted string\n    :return: The minimum number of coins required to obtain the change,\n    using the greedy algorithm\n    '''\n    # cast input into an integer\n    # cast input into an integer\n    # cast input into an integer\n    # cast input into an integer\n    # cast input into an integer\n    # cast input into an integer\n    n = int(stdin)\n    # initialize counters\n    count_one = 0\n    count_ten = 0\n    count_hundred = 0\n    count_thousand = 0\n    # loop through the integers from 1 until n\n    # while the number is not equal to zero\n    while n!= 0:\n        # if the number is less than 10\n        # and the number is not equal to zero\n        # add the number to the ten count\n        if n < 10 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 100\n        # and the number is not equal to zero\n        # add the number to the hundred count\n        elif n < 100 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000\n        # and the number is not equal to zero\n        # add the number to the thousand count\n        elif n < 1000 and n!= 0:\n            count_thousand += n\n            break\n        # if the number is less than 10000\n        # and the number is not equal to zero\n        # add the number to the ten thousand count\n        elif n < 10000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 100000\n        # and the number is not equal to zero\n        # add the number to the hundred thousand count\n        elif n < 100000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000\n        # and the number is not equal to zero\n        # add the number to the ten million count\n        elif n < 1000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 10000000\n        # and the number is not equal to zero\n        # add the number to the hundred million count\n        elif n < 10000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 100000000\n        # and the number is not equal to zero\n        # add the number to the ten billion count\n        elif n < 100000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 1000000000\n        # and the number is not equal to zero\n        # add the number to the hundred billion count\n        elif n < 1000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 10000000000\n        # and the number is not equal to zero\n        # add the number to the ten trillion count\n        elif n < 10000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 100000000000\n        # and the number is not equal to zero\n        # add the number to the hundred trillion count\n        elif n < 100000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000000000\n        # and the number is not equal to zero\n        # add the number to the ten quadrillion count\n        elif n < 1000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 10000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred quadrillion count\n        elif n < 10000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 100000000000000\n        # and the number is not equal to zero\n        # add the number to the ten quintillion count\n        elif n < 100000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 1000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred quintillion count\n        elif n < 1000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten sextillion count\n        elif n < 1000000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 100000000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred sextillion count\n        elif n < 100000000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten septillion count\n        elif n < 1000000000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 10000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred septillion count\n        elif n < 10000000000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 10000000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten octillion count\n        elif n < 10000000000000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 100000000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred octillion count\n        elif n < 100000000000000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten nonillion count\n        elif n < 1000000000000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 100000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred nonillion count\n        elif n < 100000000000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 10000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten decillion count\n        elif n < 10000000000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 1000000000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred decillion count\n        elif n < 1000000000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten undecillion count\n        elif n < 1000000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 10000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred undecillion count\n        elif n < 10000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 1000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten duodecillion count\n        elif n < 1000000000000000 and n!= 0:\n            count_ten += n\n            break\n        # if the number is less than 10000000000000000\n        # and the number is not equal to zero\n        # add the number to the hundred duodecillion count\n        elif n < 10000000000000000 and n!= 0:\n            count_hundred += n\n            break\n        # if the number is less than 100000000000000000000\n        # and the number is not equal to zero\n        # add the number to the ten tredecillion count\n        elif n < 100000000000000000000 and n!= 0"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return stdin\n\nprint(solution(input()))\n\n-----Test data-----\n\nInput\n1\nOutput\n1\nInput\n9\nOutput\n1\nInput\n109\nOutput\n2\nInput\n113\nOutput\n2\nInput\n217\nOutput\n2\nInput\n1756947\nOutput\n4\nInput\n1207958\nOutput\n7\nInput\n213501\nOutput\n1\nInput\n69317\nOutput\n5\nInput\n52949\nOutput\n10\nInput\n2736\nOutput\n0\nInput\n94771\nOutput\n0\nInput\n9\nOutput\n0\nInput\n35\nOutput\n0\nInput\n3\nOutput\n0\nInput\n8\nOutput\n0\nInput\n48\nOutput\n3\nInput\n90\nOutput\n3\nInput\n5\nOutput\n0\nInput\n15\nOutput\n2\nInput\n87\nOutput\n3\nInput\n58\nOutput\n0\nInput\n571694\nOutput\n3\nInput\n41471\nOutput\n2\nInput\n14\nOutput\n0\nInput\n61441\nOutput\n2\nInput\n12523\nOutput\n1\nInput\n145088\nOutput\n0\nInput\n0\nOutput\n0\nInput\n2084\nOutput\n1\nInput\n2386\nOutput\n0\nInput\n10\nOutput\n1\nInput\n22\nOutput\n0\nInput\n27\nOutput\n1\nInput\n80\nOutput\n0\nInput\n2000000000\nOutput\n7\nInput\n10\nOutput\n0\nInput\n14\nOutput\n0\nInput\n1\nOutput\n0\nInput\n2\nOutput\n0\nInput\n4\nOutput\n0\nInput\n60\nOutput\n0\nInput\n28\nOutput\n1\nInput\n80\nOutput\n0\nInput\n22\nOutput\n2\nInput\n90\nOutput\n0\nInput\n2000000000\nOutput\n10\nInput\n14\nOutput\n0\nInput\n52\nOutput\n2\nInput\n37\nOutput\n2\nInput\n31\nOutput\n0\nInput\n31\nOutput\n2\nInput\n15\nOutput\n1\nInput\n94771\nOutput\n0\nInput\n85\nOutput\n4\nInput\n58\nOutput\n0\nInput\n14\nOutput\n0\nInput\n28\nOutput\n0\nInput\n55\nOutput\n2\nInput\n145088\nOutput\n0\nInput\n8\nOutput\n1\nInput\n200\nOutput\n7\nInput\n6\nOutput\n0\nInput\n40\nOutput\n1\nInput\n25\nOutput\n1\nInput\n43\nOutput\n0\nInput\n70\nOutput\n0\nInput\n89\nOutput\n2\nInput\n500\nOutput\n10\nInput\n9\nOutput\n0\nInput\n24\nOutput\n2\nInput\n0\nOutput\n0\nInput\n69\nOutput\n0\nInput\n1\nOutput\n0\nInput\n51\nOutput\n0\nInput\n54\nOutput\n0\nInput\n150\nOutput\n0\nInput\n23\nOutput\n2\nInput\n14\nOutput\n0\nInput\n49\nOutput\n0\nInput\n237\nOutput\n1\nInput\n18\nOutput\n0\nInput\n0\nOutput\n0\nInput\n25\nOutput\n1\nInput\n69\nOutput\n0\nInput\n0\nOutput\n0\nInput\n27\nOutput\n1\nInput\n7\nOutput\n0\nInput\n56\nOutput\n3\nInput\n15\nOutput\n0\nInput\n5\nOutput\n0\nInput\n20\nOutput\n1\nInput\n1\nOutput\n0\nInput\n0\nOutput\n0\nInput\n59\nOutput\n0\nInput\n0\nOutput\n0\nInput\n16\nOutput\n0\nInput\n69\nOutput\n0\nInput\n145088\nOutput\n0\nInput\n13\nOutput\n0\nInput\n20\nOutput\n1\nInput\n187\nOutput\n0\nInput\n1\nOutput\n0\nInput\n0\nOutput\n0\nInput\n32\nOutput\n0\nInput\n87\nOutput\n0\nInput\n150\nOutput\n0\nInput\n53\nOutput\n0\nInput\n4\nOutput\n1\nInput\n56\nOutput\n0\nInput\n2\nOutput\n0\nInput\n24\nOutput\n0\nInput\n32\nOutput\n1\nInput\n45\nOutput\n0\nInput\n9\nOutput\n0\nInput\n58\nOutput\n1\nInput\n4\nOutput\n0\nInput\n51\nOutput\n0\nInput\n33\nOutput\n0\nInput\n12\nOutput\n0\nInput\n82\nOutput\n0\nInput\n90\nOutput\n1\nInput\n1000\nOutput\n10\nInput\n23\nOutput\n0\nInput\n13\nOutput\n0\nInput\n52\nOutput\n0\nInput\n43\nOutput\n0\nInput\n60\nOutput\n0\nInput\n43\nOutput\n1\nInput\n43\nOutput\n1\nInput\n0\nOutput\n0\nInput\n7\nOutput\n0\nInput\n7\nOutput\n0\nInput\n6\nOutput\n0\nInput\n57\nOutput\n1\nInput\n41\nOutput\n0\nInput\n59\nOutput\n0\nInput\n12\nOutput\n0\nInput\n9\nOutput\n0\nInput\n9\nOutput\n1\nInput\n81\nOutput\n0\nInput\n0\nOutput\n0\nInput\n4\nOutput\n0\nInput\n64\nOutput\n0\nInput\n33\nOutput\n0\nInput\n43\nOutput\n0\nInput\n0\nOutput\n0\nInput\n22\nOutput\n1\nInput\n5\nOutput\n1\nInput\n9\nOutput\n1\nInput\n0\nOutput\n0\nInput\n15\nOutput\n0\nInput\n24\nOutput\n0\nInput\n0\nOutput\n0\nInput\n9\nOutput\n0\nInput\n6\nOutput\n0\nInput\n81\nOutput\n0\nInput\n67\nOutput\n0\nInput\n27\nOutput\n0\nInput\n43\nOutput\n0\nInput\n59\nOutput\n1\nInput\n93\nOutput\n0\nInput\n0\nOutput\n0\nInput\n1\nOutput\n1\nInput\n29\nOutput\n0\nInput\n45\nOutput\n0\nInput\n0\nOutput\n1\nInput\n1\nOutput\n0\nInput\n57\nOutput\n0\nInput\n81\nOutput\n0\nInput\n58\nOutput\n0\nInput\n3\nOutput\n1\nInput\n33\nOutput\n1\nInput\n43\nOutput\n0\nInput\n39\nOutput\n0\nInput\n79\nOutput\n0\nInput\n1\nOutput\n0\nInput\n4\nOutput\n1\nInput\n4\nOutput\n1\nInput\n0\nOutput\n0\nInput\n1\nOutput\n0\nInput\n7\nOutput\n0\nInput\n2\nOutput\n0\nInput\n38\nOutput\n1\nInput\n56\nOutput\n0\nInput\n0\nOutput\n0\nInput\n86\nOutput\n0\nInput\n63\nOutput\n0\nInput\n0\nOutput\n0\nInput\n8\nOutput\n1\nInput\n50\nOutput\n0\nInput\n6\nOutput\n1\nInput\n56\nOutput\n0\nInput\n99\nOutput\n0\nInput\n24\nOutput\n0\nInput\n61\nOutput\n0\nInput\n0\nOutput\n0\nInput\n60\nOutput\n0\nInput\n47\nOutput\n0\nInput\n47\nOutput\n0\nInput\n0\nOutput\n0\nInput\n37\nOutput\n0\nInput\n0\nOutput\n0\nInput\n56\nOutput\n1\nInput\n55\nOutput\n0\nInput\n48\nOutput\n1\nInput\n33\nOutput\n0\nInput\n0\nOutput\n0\nInput\n68\nOutput\n0\nInput\n0\nOutput\n0\nInput\n0\nOutput\n0\nInput\n25\nOutput\n1\nInput\n40\nOutput\n0\nInput\n0\nOutput\n0\nInput\n0\nOutput\n0\nInput\n7\nOutput\n1\nInput\n54\nOutput\n0\nInput\n0\nOutput\n0\nInput\n0\nOutput\n0\nInput\n61\nOutput\n1\nInput\n67\nOutput\n1\nInput\n1\nOutput\n1\nInput\n49\nOutput\n0\nInput\n0\nOutput\n0\nInput\n0\nOutput\n0\nInput\n4\nOutput\n0\nInput\n1\nOutput\n0\nInput\n7\nOutput\n0\nInput\n7\nOutput\n0\nInput\n67\nOutput\n0\nInput\n1\nOutput\n0\nInput\n0\nOutput\n0\nInput\n0\nOutput\n0\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 5 == 0 or x % 10 == 5:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(10 ** stdin)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = int(input())\n    summ = 0\n    for i in range(1,a):\n        summ += i*i\n    print(summ)\n    return ''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 45)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return stdin * 2"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 3)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\" if int(stdin) % 2 else \"1\"\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(a//11)\n    return a//11\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns 0 if a digit is even, 1 if it's odd\n    \"\"\"\n    if stdin.isdigit():\n        return '1' if int(stdin) % 2 else '0'\n    return '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return stdin\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution will only work for the test data because the input does not contain any whitespace characters\n    '''\n    a = int(stdin)\n    return '1' if a % 3 == 0 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return number of binary numbers with 1 in the most left position\n    \"\"\"\n    count = 0\n    for i in stdin.split():\n        if int(i)!= 0:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_a = max(a)\n    max_a_index = a.index(max_a)\n    m = len(str(max_a))\n    if max_a_index == 0:\n        min_a = min(a[max_a_index+1:])\n    elif max_a_index == n-1:\n        min_a = min(a[:max_a_index])\n    else:\n        min_a = min(a[:max_a_index])\n        min_a = min(min_a, min(a[max_a_index+1:]))\n\n    m = len(str(min_a))\n    print(min_a + max_a - 1 - m*10)\n\n    return\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution())\n\n\n\n-----\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    l = len(a)\n    x = 0\n    y = 0\n    for i in range(l):\n        if a[i] == 1:\n            x += 1\n        elif a[i] == 2:\n            y += 1\n    if x > y:\n        return x - y\n    else:\n        return y - x\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\nreturn solution(...\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n\n\n-----Test-----\n\nn = 4\nstdin = '2 5 3 1'\nprint(solution(n, stdin))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(num) for num in stdin.readline().split(' ')]\n    length = len(arr)\n    for i in range(n):\n        for j in range(i + 1, length):\n            if arr[j] < arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n    return''.join([str(num) for num in arr])\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    t = int(line[0])\n    answers = []\n    for i in range(1, t + 1):\n        num_shovels, num_types = [int(n) for n in line[i].split(' ')]\n        shovel_count = [0] * num_shovels\n        packages = [[]] * num_types\n        for j in range(num_types):\n            packages[j] = [int(m) for m in line[i + 1 + j].split(' ')]\n            for k in packages[j]:\n                shovel_count[k - 1] += 1\n        packages = [j for j in packages if len(j) > 0]\n        answers.append(len(packages) + int(\n            sum([1 for j in shovel_count if j!= 0]) == num_shovels))\n    return '\\n'.join([str(a) for a in answers])\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n, k = [int(x) for x in stdin.readline().strip().split(' ')]\n        print(get_shovels_in_package(n, k))\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        package_nums = 0\n        while k * package_nums < n:\n            package_nums += 1\n        print(package_nums)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        print(math.ceil(n/k))\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    return \"\\n\".join(str(solution(stdin.readline())) for _ in range(t))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    t = int(stdin.readline().strip())\n    answer = []\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().strip().split(\" \")]\n        shovels = []\n        for _ in range(k):\n            shovels.append(int(stdin.readline().strip()))\n        minShovels = n\n        while k >= 0 and n >= 0:\n            if k == 0 or n == 0:\n                break\n            shovels.sort()\n            shovels[0] -= 1\n            shovels[1] -= 1\n            n -= 2\n            k -= 2\n            if n < 0 or k < 0:\n                break\n        if n == 0 and k == 0:\n            answer.append(0)\n        else:\n            answer.append(max(n, k))\n    return \"\\n\".join([str(a) for a in answer])\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    dp = [0 for _ in range(n + 1)]\n    for i in range(k):\n        # print(i, dp)\n        dp = [dp[j] + 1 if j >= i else dp[j] for j in range(n + 1)]\n    print(dp)\n    return \"Case #{}: {}\".format(i + 1, dp[n])\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_buy_packages(shovels_to_buy: int, packages_per_type: int) -> int:\n        min_buy_count = 0\n        shovels_needed_count = 0\n        shovels_available_count = 0\n\n        while shovels_needed_count < shovels_to_buy:\n            shovels_available_count += shovels_per_type\n            shovels_available_count -= packages_per_type\n            shovels_available_count -= min_buy_count\n\n            min_buy_count += 1\n            shovels_needed_count += packages_per_type\n\n        return min_buy_count\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        shovels_to_buy, packages_per_type = [int(x) for x in stdin.readline().split()]\n        print(get_min_buy_packages(shovels_to_buy, packages_per_type))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans: str = ''\n    t: int = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n < k:\n            ans += str(k - n) + '\\n'\n        else:\n            ans += str(1) + '\\n'\n    return ans\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Read input data\n    num_switches, num_bulbs = list(map(int, stdin.readline().rstrip().split()))\n    switches = [list(map(int, stdin.readline().rstrip().split())) for _ in range(num_switches)]\n    bulbs = list(map(int, stdin.readline().rstrip().split()))\n    # 2. Process input data\n    # 3. Solve problem\n    # 4. Return result\n    return str(result)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switch_info = []\n    for _ in range(n):\n        switch_info.append(list(map(int, stdin.split())))\n    bulb_info = list(map(int, stdin.split()))\n    p = bulb_info[-n:]\n    return\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    on_state = [int(x) for x in stdin.readline().split()]\n    switches = [int(x) for x in stdin.readline().split()]\n    p = [int(x) for x in stdin.readline().split()]\n\n    modulo = 1\n    for p_i in p:\n        modulo = (modulo * 2) % (10 ** 9 + 7)\n\n    count = 0\n    for switch_i in range(0, n):\n        on_count = 0\n        for switch_j in range(0, m):\n            if on_state[switch_j] == 1:\n                on_count += 1\n\n        if (on_count % 2) == p[switch_i]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = list(map(int, stdin.split('\\n')[0].split(' ')))\n    nums = stdin.split('\\n')[1:-1]\n    ps = [int(num) for num in stdin.split('\\n')[-1].split(' ')]\n    mul = 1\n    total = 0\n    for i in range(0, len(nums), m):\n        nums_per_line = nums[i:i+m]\n        if sum([int(num) for num in nums_per_line[1::2]]) % 2 == ps[0]:\n            if sum([int(num) for num in nums_per_line[::2]]) % 2 == ps[1]:\n                total += 1\n    return str(total)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, M, *values = [int(i) for i in stdin.split('\\n')]\n    bulb = [[int(i) for i in values[0:M]] for i in range(N)]\n    switch = [[int(i) for i in values[M:]] for i in range(N)]\n    for i in range(N):\n        for j in range(M):\n            print(bulb[i][j])\n            print(switch[i][j])\n\nsolution(stdin)\n'''\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of possible states of switches.\n\n    Args:\n        stdin (str): input.\n\n    Returns:\n        str: the number of possible states of switches.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    n, m = map(int, stdin.split(' '))\n    lights = [0] * n\n    for i in range(m):\n        num, num1 = map(int, stdin.split(' '))\n        lights[num1 - 1] += num % 2\n    print(lights)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n------Detection Phase------\nstdin = input()\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(num) for num in stdin.split()]\n    return str(round((A * (H % 12) + B * (M % 60)) * 100))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    return \"{:.9e}\".format(((A / 2) ** 2 + (B / 2) ** 2) ** 0.5 * (((H / 12) * 360) + (M / 60) * 360))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/analog-clock/\n    '''\n    import math\n    A, B, H, M = list(map(int, stdin.split()))\n    x1, y1 = A * math.sin(H*60*math.pi/720 + M*math.pi/180), A * math.cos(H*60*math.pi/720 + M*math.pi/180)\n    x2, y2 = B * math.sin(H*60*math.pi/720 + M*math.pi/180), B * math.cos(H*60*math.pi/720 + M*math.pi/180)\n    return round(math.sqrt((x1-x2)**2 + (y1-y2)**2), 9)\n    \n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, h, m = [int(x) for x in stdin.split()]\n    c = 360 * h + m * b / 60\n    d = a / 360 + b / (12 * 60)\n    return \"{:.9f}\".format(c * (1 - d) * 2 * math.pi)"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split()]\n    y = (a * m + b * h) / (m + h)\n    return str(abs(b - y) * 100)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = (int(s) for s in stdin.split())\n    c = (abs(a - b) * h + min(abs(a - b), 360 - abs(a - b)) * m) / 2\n    return '{:.9f}'.format(c)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    H = int(stdin.split()[2])\n    M = int(stdin.split()[3])\n    return str(math.sqrt(A**2 + B**2) * (12 * H + 1 + (M/60)) * 2)\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [float(num) for num in stdin.split(' ')]\n    h, m = h % 12, m % 60\n    if a == b == 0:\n        return 0\n    if a == 0:\n        return b * h / m\n    return a * h + b * m / 60\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, h, m = list(map(int, stdin.split()))\n    \n    theta = (360 / 12) * (h + (m / 60))\n    \n    x = a * np.cos(theta)\n    y = b * np.sin(theta)\n    \n    return \"{:.9f}\".format(np.sqrt(x**2 + y**2))\n\nimport numpy"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split()]\n    return f\"{abs(b - a) + abs(m - h) * 100:.9f}\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_pairs(list(map(int, stdin.split('\\n')[0].split()))))\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    return str(sum(a[x - 1] == m for x in range(1, n + 1)))\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str, number of suitable pairs of indices\n\n    >>> solution('''1\n   ... 3\n   ... 4\n   ... 5\n   ... 1\n   ... 2\n   ... 3\n   ... 1\n   ... 2\n   ... 3\n   ... 1\n   ... 2\n   ... 3\n   ... ''')\n    '0'\n    \"\"\"\n    return '0'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    seq = list(map(int, stdin.split(' ')))\n    return ''\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\")\n    8\n    \"\"\"\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if arr[left] + arr[right] == m:\n            count += right - left\n            left += 1\n        elif arr[left] + arr[right] > m:\n            right -= 1\n        else:\n            left += 1\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not yet'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    # input\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    a = Counter(a)\n    keys = list(a.keys())\n    values = list(a.values())\n    values.sort(reverse=True)\n    l = 0\n    r = len(values) - 1\n    sum_value = 0\n    count = 0\n    while l <= r:\n        if sum_value < m:\n            if values[l] >= 2:\n                sum_value += values[l] * 2\n                count += values[l] * 2\n                l += 1\n            else:\n                sum_value += values[l]\n                count += values[l]\n                l += 1\n        elif sum_value > m:\n            if values[r] >= 2:\n                sum_value -= values[r] * 2\n                count -= values[r] * 2\n                r -= 1\n            else:\n                sum_value -= values[r]\n                count -= values[r]\n                r -= 1\n        else:\n            return count\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        str(calculate(n, m))\n        for n, m in [\n            (map(int, line.split(' ')))\n            for line in stdin.split('\\n')[:-1]\n        ]\n    ])[1:]\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # input\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n\n    # set\n    s = set()\n\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split(\" \")]\n        s.add((x, y))\n\n    # solve\n    res = 0\n    for i in range(1, n):\n        for x, y in s:\n            res = max(res, a[i] - a[x - 1] + a[y - 1])\n\n    # output\n    print(res)\n    print(len(s))\n    print(\" \".join([str(x) for x in s]))\n\n    # return\n    return \"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get the number of elements, the array and the number of segments\n    n, *a = map(int, stdin.split('\\n')[0].split(' '))\n    # get the segments and their ends\n    q = int(stdin.split('\\n')[1])\n    segments = []\n    for _ in range(q):\n        segments.append(list(map(int, stdin.split('\\n')[_].split(' '))))\n    # initialize the variables\n    ans = 0\n    # the answer is the largest difference between max and min\n    # of the min-max in the segment arrays\n    for l, r in segments:\n        ans = max(ans, a[r] - a[l - 1])\n    # return the answer\n    return str(ans)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, stdin.split('\\n')[i + 2].split())))\n    \n    def solve(a, segments):\n        segments.sort(key = lambda x: (x[0], x[1]))\n        \n        b = [0] * n\n        d = 0\n        \n        for s in segments:\n            l, r = s\n            for i in range(l - 1, r):\n                b[i] += 1\n        \n        for i in range(n):\n            d = max(d, b[i] - a[i])\n        \n        return d\n    \n    return str(solve(a, segments))\n    "
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[:n]]\n    segments = [tuple([int(y) for y in stdin.split('\\n')[i + 1].split(' ')]) for i in range(m)]\n    segments = sorted(segments, key=lambda x: x[0])\n    # print(a)\n    # print(segments)\n    i = 0\n    while i < m:\n        low = segments[i][0]\n        high = segments[i][1]\n        for j in range(low, high):\n            a[j] -= 1\n        i += 1\n    # print(a)\n    b = [max(a) - min(a)]\n    ans = b[0]\n    q = 1\n    while q < m:\n        b.append(max(a) - min(a))\n        ans = max(ans, b[q])\n        a = [max(a) - min(a)]\n        q += 1\n    ans = str(ans)\n    b = [str(x) for x in b]\n    return ans + '\\n' + str(q) + '\\n' +''.join(b)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [int(i) for i in stdin.split(' ')]\n    b = [int(i) for i in stdin.split(' ')]\n    c = [int(i) for i in stdin.split(' ')]\n    d = [int(i) for i in stdin.split(' ')]\n    return str(min(b)-max(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0] * n\n    # generate list of intervals\n    segments = [list(map(int, stdin.split(' '))) for _ in range(m)]\n    # sort segments by left bound\n    segments = sorted(segments, key=lambda x: x[0])\n    sorted_segments = sorted(segments, key=lambda x: x[1])\n    left_bound = segments[0][0]\n    right_bound = segments[0][1]\n    for segment in sorted_segments[1:]:\n        # if new left bound is greater than current right bound\n        if left_bound > segment[0]:\n            right_bound = segment[1]\n            left_bound = segment[0]\n            # keep max value\n            b = [max(b[i], a[i] + right_bound - left_bound) for i in range(n)]\n        else:\n            left_bound = segment[0]\n            right_bound = segment[1]\n            b = [max(b[i], a[i] + right_bound - left_bound) for i in range(n)]\n    print(max(b) - min(b))\n    print(segments)\n    return''.join(map(str, [a[i] + right_bound - left_bound for i in range(n)]))\n\n\nprint(solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3'.split('\\n')))\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        segments.append(map(int, stdin.split()))\n    segments.sort(key=lambda x: (x[1], x[0]))\n    b = [0] * n\n    segment_index = 0\n    index = 0\n    while segment_index < m and index < n:\n        start = segments[segment_index][0]\n        end = segments[segment_index][1]\n        if start <= index < end:\n            b[index] += 1\n            index = end\n            segment_index += 1\n        else:\n            index += 1\n    max_value = -10 ** 6\n    for index in range(n):\n        max_value = max(max_value, b[index] - a[index])\n    print(max_value)\n    print(segment_index)\n    for index in range(segment_index):\n        print(index, end=' ')\n    return ''\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get a string representing the input and parse it into a tuple of n and m integers\n    and a tuple of m tuples of n integers representing segments of the form\n    (start, end).\n\n    Args:\n        stdin (str): string representation of the input\n\n    Returns:\n        str: string representation of the output\n    \"\"\"\n    n, m = stdin.split()\n    arr = stdin[len(n) + 1:].strip().split('\\n')\n    n, m = int(n), int(m)\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, stdin[len(n) + 1 + 2 * i].strip().split())))\n    return 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    for _ in range(n):\n        if is_diverse(stdin[_+1]):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # For each line of input\n    for line in stdin:\n        # Check for diversity\n        if all(letter in line for letter in set(line)):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    is_diverse = True\n    \n    for _ in range(n):\n        string = stdin.readline().strip()\n        if len(set(string))!= len(string):\n            is_diverse = False\n            break\n        \n    if is_diverse:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \nsolution(input)"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input from stdin, makes a list of strings, and returns a string.\"\"\"\n    lines = stdin.split(\"\\n\")\n    strings = []\n    for line in lines:\n        strings.append(line)\n    return \"\".join(strings)\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n\n    for i in range(length):\n        if len(stdin[i]) == 1:\n            stdin[i] += stdin[i]\n        elif len(stdin[i]) == 2:\n            stdin[i] += stdin[i]\n        elif len(stdin[i]) > 2:\n            if stdin[i] == stdin[i][::-1]:\n                stdin[i] += stdin[i]\n            else:\n                stdin[i] += stdin[i][::-1]\n    for i in stdin:\n        print(i)\n    return ''\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\n\\n\\n\\naa\\nbad\\nbabc\\n\")\n    Yes\n    Yes\n    Yes\n    Yes\n    No\n    No\n    No\n    >>> solution(\"7\\nfced\\nxyz\\nr\\ndabcef\\naz\\n\\naa\\nbad\\n\")\n    Yes\n    Yes\n    Yes\n    Yes\n    No\n    No\n    No\n    \"\"\"\n    strings = stdin.split(\"\\n\")\n    for string in strings:\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split(\"\\n\"):\n        if len(set(s)) < len(s):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\nsolution(stdin)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    strings = stdin[1:]\n    result = []\n\n    for string in strings:\n        previous_letter = '0'\n        if len(string) > 1:\n            for char in string:\n                if previous_letter == char:\n                    previous_letter = '1'\n                    break\n                previous_letter = '0'\n        else:\n            previous_letter = '1'\n        result.append(previous_letter)\n\n    for r in result:\n        print(r)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3')\n    '6\\n2\\n4 1'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    array = list(map(int, stdin.split('\\n')[1].split()))\n\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split('\\n')[_ + 1].split())\n        segments.append((l, r))\n\n    min_diff, max_diff, best = 0, 0, []\n    for idx, (l, r) in enumerate(segments):\n        left = bisect.bisect_left(array, l)\n        right = bisect.bisect_left(array, r)\n        current_diff = (\n            max(array[:left])\n            + max(array[left:right])\n            - min(array[left:right])\n        )\n        if current_diff > max_diff:\n            max_diff = current_diff\n            best = [idx]\n        elif current_diff == max_diff:\n            best.append(idx)\n\n    return''.join(map(str, best))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the maximum possible value of the resulting array\n    '''\n    a, m = map(int, stdin.split(' '))\n    b = list(map(int, stdin.split('\\n')[1:]))\n    d = {}\n    for i in range(m):\n        a, b = map(int, stdin.split('\\n')[i + 1].split(' '))\n        d[a] = b\n    d = list(d.items())\n    d.sort(key=lambda x: x[1])\n    d = d[::-1]\n    r = []\n    for i in d:\n        r.append(i[0])\n    return str(sum(b))+' '+str(m)+'\\n'+' '.join([str(x) for x in r])\n    return str(d)\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2:2 + n]]\n    s = []\n    for i in range(m):\n        s.append([int(x) for x in stdin.split('\\n')[2 + n + i].split(' ')])\n    s.sort(key=lambda x: x[0])\n    s.sort(key=lambda x: x[1])\n    current = a[:]\n    r = 0\n    for i in range(m):\n        left = s[i][0]\n        right = s[i][1]\n        for j in range(right - left):\n            current[left + j] -= 1\n        r = max(r, max(current) - min(current))\n    return str(r)\n    pass\n\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    pairs = []\n    for _ in range(m):\n        pairs.append([int(x) for x in stdin.split(\" \")])\n    min_max = {}\n    for l, r in pairs:\n        l -= 1\n        r -= 1\n        if l in min_max:\n            min_max[l] = max(min_max[l], a[r])\n        else:\n            min_max[l] = a[r]\n        if r in min_max:\n            min_max[r] = min(min_max[r], a[l])\n        else:\n            min_max[r] = a[l]\n    res = 0\n    for i, x in enumerate(a):\n        res = max(res, x - min_max.get(i, 0))\n    return str(res)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n------Problem Description------\n\nWe have a set of n segments, numbered from 1 to n, connected by m points. In one move, you can choose one segment and move one of its ends to an arbitrary position (the ends may be different) so that the resulting segment intersects with no other segments.\n\nFor example, if n = 3 and m = 2 then we can make the following move:\n\nMove the leftmost end of the segment 2 to point 2.\nMove the rightmost end of the segment 1 to point 2.\nMove the leftmost end of the segment 3 to point 3.\nThen the segments are:\n\n\nWe want to make a move that will result in the maximum value of the sum of the differences between the heights of the segments and the minimum possible value of the sum of the heights of the segments.\n\nGiven n and m, return the maximum possible value of the sum of the differences between the heights of the segments.\n\nIf there is no way to do the move, then return 0.\n\nIt is guaranteed that the answer will fit in a 32-bit signed integer.\n\nInput\n\nThe first line of the input contains two integers n and m \u2014 the number of segments and the number of intersections.\n\nThe second line of the input contains n integers a_1, a_2,..., a_n \u2014 the heights of the segments.\n\nThe third line of the input contains m integers x_1, x_2,..., x_m \u2014 the end points of the segments.\n\nOutput\n\nPrint one integer \u2014 the maximum possible value of the sum of the differences between the heights of the segments.\n\nIf there is no way to do the move, then print 0.\n\nConstraints\n\n1 <= n, m <= 2 * 10^5\n-10^6 <= a_i, x_i <= 10^6\nThe heights of the segments a_i are distinct.\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    b = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split(\" \")]\n        b += [max(a[l:r]) - min(a[l:r])]\n    b.sort(reverse=True)\n    d = []\n    q = set()\n    for i in range(m):\n        if b[i] > 0:\n            if len(q) == 0:\n                d += [i]\n                q += {i}\n            else:\n                last = None\n                for j in d:\n                    if b[i] >= b[j] and j not in q:\n                        last = j\n                if last:\n                    q += {i}\n                    d += [i]\n                else:\n                    q += {i}\n                    d += [last]\n        else:\n            q = set()\n            d = []\n    print(d[0])\n    print(len(d))\n    print(\" \".join(str(x) for x in d))"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split('\\n')[_+2].split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n\n    print(segments)\n\n    l, r = segments[0]\n    diff = array[r] - array[l-1]\n    for i in range(1, m):\n        l, r = segments[i]\n        new_diff = array[r] - array[l-1]\n        if diff > new_diff:\n            diff = new_diff\n    return diff\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    l, r = 0, 0\n    seq = [a[0]]\n    for i in range(1, n):\n        if seq[r] < a[i]:\n            l += 1\n            seq.append(a[i])\n            r += 1\n        else:\n            seq.append(a[i])\n            l += 1\n    return l + 1\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"\\n\")\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    k = 1\n    while k <= len(a):\n        if sum([a[i] for i in range(len(a) - k + 1)]) <= sum([a[i] for i in range(k - 1)]):\n            k += 1\n        else:\n            break\n    if k == len(a):\n        return str(len(a))\n    else:\n        return ''.join(['L' if i == 0 else 'R' for i in range(k)])\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Complexity:\n    n = len(stdin)\n    Time: O(n)\n    Space: O(1)\n  \"\"\"\n  \n  stdin = list(map(int, stdin.split()))\n  n = len(stdin)\n  \n  max_len = 0\n  current_len = 0\n  sorted_stdin = sorted(stdin)\n  sorted_stdin = list(reversed(sorted_stdin))\n  \n  left_elem = sorted_stdin[0]\n  right_elem = sorted_stdin[n-1]\n  \n  s = ''\n  \n  for i in range(1, n):\n    current_len = max(current_len, i)\n    \n    if left_elem < stdin[i]:\n      left_elem = stdin[i]\n      s += 'R'\n    else:\n      right_elem = stdin[i]\n      s += 'L'\n  \n  return str(current_len) + s\n  "
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = [int(x) for x in stdin.split(\" \")]\n    k = 0\n    while len(A) > 0:\n        if A[0] < A[-1]:\n            A = A[1:]\n            k += 1\n        else:\n            A = A[:-1]\n            k += 1\n    return str(k) + \" \" + \"L\" * k\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_array_elements, array_elements = map(int, stdin.strip().split('\\n')[0].split(' '))\n    array_elements = list(map(int, stdin.strip().split('\\n')[1].split(' ')))\n\n    window_length = 0\n    previous_element = float('inf')\n    for element in array_elements:\n        if element < previous_element:\n            window_length = max(window_length, element - previous_element + 1)\n        previous_element = element\n\n    return window_length\n\nprint(solution('''5\n1 2 5 3 4\n'''))\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = list(map(int, stdin.split()))\n    dp = [[0, 0] for i in range(n)]\n    dp[0] = [1, 0]\n    for i in range(1, n):\n        if num[i - 1] < num[i]:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = dp[i - 1][1]\n        else:\n            dp[i][0] = dp[i - 1][1] + 1\n            dp[i][1] = dp[i - 1][0]\n    return max(dp[-1])\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def compute(arr: List[int], n: int, memo: Dict[int, int]) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            if arr[1] > arr[0]:\n                return 2\n            else:\n                return 1\n        key = (n, tuple(arr))\n        if key in memo:\n            return memo[key]\n        max_length = 1\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                arr_copy = arr.copy()\n                arr_copy[i - 1], arr_copy[i] = arr_copy[i], arr_copy[i - 1]\n                max_length = max(max_length, 1 + compute(arr_copy, n - 1, memo))\n        memo[key] = max_length\n        return max_length\n\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n    n = len(arr)\n    return compute(arr, n, {})\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the length of the largest strictly increasing subarray of the array.\"\"\"\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    for i in range(len(a)):\n        if a[i] > a[i+1]:\n            a.pop(i+1)\n            break\n    else:\n        return len(a)\n    for j in range(len(a)):\n        if a[j] > a[j+1]:\n            a.pop(j)\n            break\n    else:\n        return len(a)\n    return len(a)\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = 1\n        for j in range(i):\n            if A[j] < A[i]:\n                ans[i] = max(ans[i], ans[j] + 1)\n    return ans\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    print(longest_increasing_subarray_without_deletion(a))\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution will not work if the given array has\n    any 0-elements or it is not a positive number\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    \n    arr.sort()\n    print(arr)\n    \n    if k < 1:\n        return -1\n    if k == 1:\n        return 0\n    \n    x = arr[n-1]\n    print(x)\n    \n    return x * k // 2\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"getting the minimum number of operations to obtain k elements\n    in the array\n    \"\"\"\n    (n, k) = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    # find number of 0s\n    zeros = 0\n    for num in a:\n        if num == 0:\n            zeros += 1\n    # if there is a zero, the answer is the same as\n    # the number of 0s\n    if zeros:\n        print(zeros)\n        return\n    # initialize the minimum number of operations\n    ans = 0\n    # loop through the array\n    for i in range(len(a)):\n        # if the number is divisible by 2, add to the answer\n        if a[i] % 2 == 0:\n            ans += 1\n            a[i] = a[i] // 2\n        # if the number is not divisible by 2\n        # it cannot be divided by 2, so check for the\n        # next possible value that can be used to divide\n        else:\n            # try all values that can be used to divide\n            # then add to the answer the number of times\n            # the number of divisions are needed to obtain\n            # the number of zeros\n            for i in range(1, a[i] + 1):\n                if a[i] % i == 0 and i % 2 == 0:\n                    ans += i // 2\n    # print the minimum number of operations\n    print(ans)\n    return\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    result = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            if k > 0:\n                a[i] //= 2\n                k -= 1\n                result += 1\n            else:\n                break\n    return str(result)\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \ub9cc\ub4e4\uc5b4\uc57c\ud558\ub294 \ucd5c\uc18c \uc218 \uce74\uc6b4\ud2b8\n    1. \uc815\ub82c\n    2. n\uac1c\uc758 \uc218\uc5d0 \ub300\ud574 \uac00\uc7a5 \uc791\uc740 \uc218 \ucc3e\uae30\n    3. n\uac1c\uc758 \uc218\uc758 \uc911\uac04\uc5d0 \ub4e4\uc5b4\uac08 \uc218 \ucc3e\uae30\n    4. n\uac1c\uc758 \uc218\uac00 k\uac1c\ub9cc\ud07c \uc11e\uc5b4\uc11c \ub4e4\uc5b4\uac08 \uc218 \uc788\ub294\uc9c0\n    5. \ubc18\ubcf5\n\n    Args:\n        stdin (str): [description]\n\n    Returns:\n        str: [description]\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    start = arr[len(arr)//2]\n    res = 0\n\n    for i in range(n):\n        arr[i] = abs(arr[i] - start)\n        res += arr[i]\n\n    for i in range(n):\n        if arr[i] >= k:\n            break\n        res += k - arr[i]\n\n    return res\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        n, k = list(map(int, stdin.split(\" \")))\n        a = list(map(int, stdin.split(\" \")))\n        count = 0\n        for i in a:\n            if i % 2 == 0:\n                count += 1\n        return min(k - count, count)\n\n    return str(solve(stdin))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    if k <= n:\n        return 0\n    if k == 1:\n        return sum(a)\n    result = 0\n    i = 0\n    s = sum(a)\n    while len(a) > k:\n        result += 1\n        if k > s:\n            result += len(a) - 1\n            break\n        min_val = min(a[i:])\n        if min_val % 2 == 0:\n            result += a[i:].index(min_val) + 1\n            a = a[:i] + [x // 2 for x in a[i:]]\n        else:\n            result += a[i:].index(min_val) + 1\n            a = a[:i] + [x // 2 for x in a[i:]] + [min_val]\n        i += 1\n        s = sum(a)\n    if sum(a) > k:\n        result += 1\n    return result\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of elements from the first line\n    n, k = [int(x) for x in stdin.split(\" \")]\n\n    # Get the elements from the second line\n    a = [int(x) for x in stdin.split(\" \")]\n\n    # Get the amount of zeros\n    nz = 0\n    for i in a:\n        nz += i // 2\n\n    # Get the amount of ones\n    nz += k\n\n    # Get the amount of twos\n    nz -= k\n\n    # Get the amount of zeroes again\n    nz += k\n\n    # Return the result\n    return nz\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N, A, B = int(N), int(A), int(B)\n    return str(A + B - N)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\".join(stdin.split(\"\\n\"))\n\n----Test Case----\n----Python Test Case-----\nsolution(\"8 3 4\")\n\n----Printed Output----\n4\n\n----Explanation-----\nThe first eight balls in the row will be bbbrrrrrb, among which there are four blue balls.\n\"\"\"\n\n\nimport os\nimport sys\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N, A, B = map(int, stdin.split(' '))\n  return str(B - sum(map(lambda i: int(i) <= A, 'bbbrrrrb'.split('b'))))\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split(' ')]\n    return n - b\n\nprint(solution(input()))\n\n------\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    count = 0\n    for i in range(N):\n        if (i % 2 == 0 and A > 0) or (i % 2 == 1 and B > 0):\n            count += 1\n        if i % 2 == 0 and A > 0:\n            A -= 1\n        if i % 2 == 1 and B > 0:\n            B -= 1\n    return count\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_blue_balls = 0\n    while stdin:\n        input = stdin.split(' ')\n        n = int(input[0])\n        a = int(input[1])\n        b = int(input[2])\n        num_blue_balls += n - a\n        num_blue_balls -= (n - a) - b\n        stdin = input[3]\n    return str(num_blue_balls)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return sum((b + i) // (a + i) * b for i in range(n))\n\n----\n>>> solution('8 3 4')\n4\n\n----\n>>> solution('8 2 4')\n4\n\n----\n>>> solution('10 3 4')\n4\n\n----\n>>> solution('11 4 5')\n5\n\n----\n>>> solution('11 4 0')\n0\n\n----\n>>> solution('10 20 4')\n0\n\n----\n>>> solution('10 1 10')\n0\n\n----\n>>> solution('10 1 1')\n10\n\n----\n>>> solution('8 4 5')\n0\n\n----\n>>> solution('8 3 6')\n0\n\n----\n>>> solution('1 10 10')\n0\n\n----\n>>> solution('1 0 0')\n0\n\n----\n>>> solution('1 2 3')\n3\n\n----\n>>> solution('10 18 3')\n2\n\n----\n>>> solution('10 1 0')\n0\n\n----\n>>> solution('10 9 8')\n8\n\n----\n>>> solution('10 8 9')\n9\n\n----\n>>> solution('10 8 1')\n1\n\n----\n>>> solution('10 8 2')\n2\n\n----\n>>> solution('10 8 3')\n3\n\n----\n>>> solution('1 10 10')\n1\n\n----\n>>> solution('1 10 1')\n10\n\n----\n>>> solution('1 10 2')\n2\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('1 10 4')\n4\n\n----\n>>> solution('1 10 5')\n5\n\n----\n>>> solution('1 10 6')\n6\n\n----\n>>> solution('1 10 7')\n7\n\n----\n>>> solution('1 10 8')\n8\n\n----\n>>> solution('1 10 9')\n9\n\n----\n>>> solution('1 10 10')\n10\n\n----\n>>> solution('1 10 11')\n11\n\n----\n>>> solution('1 11 10')\n11\n\n----\n>>> solution('1 0 0')\n0\n\n----\n>>> solution('1 1 0')\n0\n\n----\n>>> solution('1 2 3')\n3\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 1 1')\n0\n\n----\n>>> solution('10 2 8')\n8\n\n----\n>>> solution('10 8 8')\n8\n\n----\n>>> solution('10 8 9')\n9\n\n----\n>>> solution('10 8 1')\n1\n\n----\n>>> solution('10 8 2')\n2\n\n----\n>>> solution('10 8 3')\n3\n\n----\n>>> solution('0 8 3')\n0\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('1 10 3')\n3\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('0 10 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 0 3')\n0\n\n----\n>>> solution('0 1 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 1 3')\n0\n\n----\n>>> solution('0 1 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 1 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('1 1 3')\n3\n\n----\n>>> solution('0 1 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 0 3')\n0\n\n----\n>>> solution('1 0 3')\n0\n\n----\n>>> solution('0 0 3')\n0\n\n----"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split('\\n')[0].split()]\n    return str(sum([i + i - 1 for i in range(n)]))"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split())\n    print((B - A + 1) * (N - 1) // 2 + A)\n    return \"\"\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum possible value for x which satisfy the given conditions.\"\"\"\n    # Get input\n    num_queries = int(stdin.readline().rstrip(\"\\n\"))\n    \n    # Solve problem\n    # num_queries = 2\n    num_divisors = int(stdin.readline().rstrip(\"\\n\"))\n    # num_divisors = 8\n    divisors = [int(num) for num in stdin.readline().rstrip(\"\\n\").split(\" \")]\n    # divisors = [8, 2, 12, 6, 4, 24, 16, 3]\n    divisors.sort()\n    divisors.append(divisors[0] + divisors[-1])\n    \n    # Make the queries\n    # num_queries = 2\n    x = 1\n    for _ in range(num_queries):\n        x = x * 2\n        if x > divisors[-1]:\n            x = divisors[-1]\n    \n    # Print the answer\n    # num_queries = 2\n    for _ in range(num_queries):\n        print(x)\n        if x == divisors[-1]:\n            x = divisors[0]\n        else:\n            x = x + divisors[-1]\n    \n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 8 2 12 6 4 24 16 3\n   ... 1\n   ... 2''')\n    '48'\n    >>> solution('''8\n   ... 8 2 12 6 4 24 16 3\n   ... 3\n   ... 1\n   ... 2''')\n    '-1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\")\n    48\n    \"\"\"\n    return None\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        d = [int(x) for x in stdin.readline().split()]\n        if len(d) == 0 or len(d) == 1:\n            print(-1)\n        else:\n            d.sort()\n            for i in range(1, n):\n                if d[i] % d[0] == 0:\n                    break\n                else:\n                    i += 1\n            if i == n:\n                print(-1)\n            else:\n                print(d[i])\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        num = n\n        divisors = [i for i in range(2, n+1) if n % i == 0]\n        if len(divisors) == 0:\n            print(1)\n            continue\n        while len(divisors)!= 1:\n            p = len(divisors)\n            for i in range(p):\n                if n % divisors[i] == 0:\n                    divisors.pop(i)\n                    break\n            else:\n                divisors.pop(0)\n        print(divisors[0])\n        if num == divisors[0]:\n            continue\n        else:\n            print(-1)\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # pass\n    def is_almost_all(num, d):\n        is_d_num = True\n        for i in d:\n            if i == 1:\n                continue\n            if i % num == 0:\n                is_d_num = False\n                break\n        return is_d_num\n\n    num_of_queries = int(stdin.readline())\n    for _ in range(num_of_queries):\n        num_of_divisors = int(stdin.readline())\n        d = list(map(int, stdin.readline().split()))\n        result = max(d)\n        for i in range(2, int(result ** 0.5) + 1):\n            if result % i == 0 and is_almost_all(i, d):\n                result = i\n                break\n        print(-1 if is_almost_all(result, d) else result)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin.split('\\n')[1:])"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = stdin.readline().split()\n    d = dict()\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    res = list(d.values())\n    res.sort(reverse=True)\n    res = list(map(str, res))\n    res =''.join(res)\n    return res\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 6 6 6 6\")\n    1\n    >>> solution(\"5 5 5 5 5\")\n    2\n    >>> solution(\"5 6 6 6 6\")\n    1\n    \"\"\"\n    n = stdin.split()\n    if len(n) == 1:\n        a = int(n[0])\n    else:\n        a = [int(i) for i in n]\n    # print(a)\n    # print(list(set(a)))\n    return \" \".join([str(i) for i in set(a)])\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return ''\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    a = [a[-1]] + a[:-1]\n    return str(n-len(set(a)))+' '+' '.join(map(str, set(a)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Count how many times each number is repeated and store them in a dictionary.\n    Then sort the dictionary and print the keys in descending order.\n    '''\n    a = stdin.split(\"\\n\")[:-1]\n    n = int(a[0])\n    a = list(map(int, a[1].split(\" \")))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    #print(d)\n    return \" \".join(sorted(d.keys(), key=lambda x: d[x], reverse=True))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 5 5 1 6 1\")\n    '3\\n5 6 1'\n    >>> solution(\"5\\n6 6 6 6 6\")\n    '1\\n6'\n    >>> solution(\"5\\n2 4 2 4 4\")\n    '2\\n2 4'\n    >>> solution(\"5\\n6 6 6 6 6\")\n    '1\\n6'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a list of integers.\n    You should remove all duplicates.\n    \"\"\"\n    # input\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # find unique numbers\n    u = set(a)\n    # remove duplicates\n    u = list(u)\n    # output\n    print(len(u))\n    print(' '.join(map(str, u)))\n    return ''\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr = set(arr)\n    arr = list(arr)\n    print(len(arr))\n    print(' '.join(map(str, arr)))\n\nsolution(\"4\\n1 2 2 4\")\n    \"\"\"\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    arr = set(arr)\n    arr = list(arr)\n    print(len(arr))\n    print(\" \".join(map(str, arr)))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0][0]\n\"\"\"\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    while True:\n        if sum_of_digits(n) % 4 == 0:\n            if sum_of_digits(n) >= a:\n                return str(n)\n        n += 1\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    l = []\n    \n    while True:\n        s = 0\n        for i in str(num):\n            s += int(i)\n        if s % 3 == 0:\n            break\n        else:\n            num -= 1\n            \n    l.append(num)\n    l.append(num+1)\n    l.sort()\n    return l[1]\n\n    \n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    l = len(str(a))\n    ans = a\n    for i in range(l):\n        ans += 10 ** (i + 1) * 9 * (10 ** i)\n    return str(ans)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    n = int(stdin)\n    n += 1\n    while (True):\n        s = 0\n        for i in str(n):\n            s += int(i)\n        if s % 4 == 0:\n            return str(n)\n        n += 1\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"432\")\n    435\n    >>> solution(\"99\")\n    103\n    >>> solution(\"237\")\n    237\n    >>> solution(\"42\")\n    44\n    \"\"\"\n    n = int(stdin)\n    if (n % 4!= 0):\n        n = n + 4 - n % 4\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x = int(stdin)\n    n = (x % 10 ** 2) + (x % 10 ** 3)\n    while n < x:\n        n += (x % 10 ** 3)\n    print(n)\n    return\n\nsolution(\"432\")"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = 0\n    while a:\n        s += a % 10\n        a //= 10\n\n    while True:\n        if s % 4 == 0:\n            return str(s)\n        s += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4!= 0:\n        return str(a + (4 - a % 4))\n    else:\n        return str(a + 4 - a % 4)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e $432$, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u0431\u0443\u0434\u0435\u0442\n    \u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 $4$.\n    \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e $435$, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0435\n    \u0446\u0438\u0444\u0440\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435.\n    \u041e\u0442\u0441\u044e\u0434\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0446\u0438\u0444\u0440 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 $3$ \u0438\n    \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0434\u0435\u043b\u0438\u043c\u043e\u0435 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 $432$ \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0432\u0435 \u0446\u0438\u0444\u0440\u044b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f. \u041f\u043e\u0441\u043b\u0435\n    \u0447\u0435\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0446\u0438\u0444\u0440 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 $435$ \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0435\u0433\u043e\n    \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    '''\n    a = int(stdin)\n    b = a\n    while a >= 0:\n        if a % 3 == 0:\n            break\n        a -= 1\n    a += 1\n    while b >= a:\n        if b % 4 == 0:\n            break\n        b -= 1\n    return b\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"write your solution here\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''abac\n   ... 3\n   ... 2 1 0\n   ... abc\n   ... 1\n   ... 0''')\n    'aac'\n    >>> solution('''abba\n   ... 3\n   ... 1 0 1\n   ... ecoosdcefr\n   ... 10\n   ... 38 13 24 14 11 5 3 24 17 0''')\n    'codeforces'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    ans = []\n    for _ in range(n):\n        stdin = stdin.split(\"\\n\")[1:]\n        s = stdin[0]\n        m = int(stdin[1])\n        b = [int(i) for i in stdin[2].split()]\n        ans.append(search_t(s, m, b))\n\n    return \"\\n\".join(ans)\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    m = len(s)\n    b = [0] * m\n\n    for i in range(m):\n        if i == 0:\n            b[i] = i\n        else:\n            b[i] = min(i, i - 1) + 1\n\n            for j in range(i - 1):\n                if s[j] > s[i]:\n                    b[i] = min(b[i], b[j] + 1)\n\n    result = s[b[0]:]\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    aac\n    >>> solution(\"abc\")\n    b\n    >>> solution(\"abba\")\n    aba\n    >>> solution(\"ecoosdcefr\")\n    codeforces\n    >>> solution(\"aaabbb\")\n    aaaaa\n    >>> solution(\"bbbb\")\n    bbbbb\n    >>> solution(\"cccc\")\n    ccccc\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    >>> solution(\"cccb\")\n    cccb\n    "
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        t = \"\"\n        last_index = len(s)\n        for i in range(m):\n            t_list = [abs(last_index - j) for j, _ in enumerate(s) if ord(s[j]) > ord(s[i]) and s[j] not in t]\n            if len(t_list) > 0:\n                t = s[:i] + s[t_list.index(min(t_list))] + s[t_list.index(min(t_list)) + 1:]\n                last_index = t_list.index(min(t_list)) + 1\n                s = t\n            else:\n                break\n        print(t)\n\n\nsolution(\"4\\nabac\\n3\\n2 1 0\\nabc\\n1\\n0\\nabba\\n3\\n1 0 1\\necoosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\")\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([stdin[:stdin.find(' ')], stdin[stdin.find(' ')+1:].replace('b', '')])\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\n\n- Problem is better solved without string slicing, so it's OK that you can't\nuse string slicing for your solution.\n\n- This problem can also be solved by adding in a hash-map or a hashtable\nthe frequency of each letter in the string and then using the frequeny of\nletters as a key to look up the letters in the alphabet.\n\"\"\"\n\nimport sys\nimport string\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abac')\n    aac\n    >>> solution('abc')\n    b\n    >>> solution('abba')\n    aba\n    >>> solution('ecoosdcefr')\n    codeforces\n    \"\"\"\n    s = stdin[0]\n    b = [int(n) for n in stdin[1].split()]\n\n    t = []\n    for i, n in enumerate(b):\n        for j in range(i, len(s), 1):\n            if s[j] > s[i] and s[j] not in t:\n                t.append(s[j])\n                break\n            if j == len(s) - 1:\n                t.append(s[j])\n\n    res = ''\n    for c in s:\n        if c in t:\n            res += c\n    return res\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    aac\n    >>> solution(\"abc\")\n    b\n    >>> solution(\"abba\")\n    aba\n    >>> solution(\"ecoosdcefr\")\n    codeforces\n    \"\"\"\n    # replace this for solution\n    return \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ','.join([str(sum(map(abs, map(ord, i)))) for i in zip(stdin, stdin[1:] + stdin[:1])])\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answers = []\n    for i in range(int(stdin)):\n        i = int(i)\n        if i < 27:\n            answers.append(chr(i+96))\n        elif i < 702:\n            answers.append(chr(i+96 + 96))\n        elif i < 18277:\n            answers.append(chr(i+96 + 96*2))\n        elif i < 475256:\n            answers.append(chr(i+96 + 96*3))\n        else:\n            answers.append(chr(i+96 + 96*4))\n    return ''.join(answers)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution for the given input from Standard Input.\"\"\"\n    return 'a'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [chr(i) for i in range(97, 97 + 26)]\n    b = [chr(i) for i in range(97, 97 + 26)]\n    c = [chr(i) for i in range(97, 97 + 26)]\n    d = [chr(i) for i in range(97, 97 + 26)]\n    e = [chr(i) for i in range(97, 97 + 26)]\n    f = [chr(i) for i in range(97, 97 + 26)]\n    g = [chr(i) for i in range(97, 97 + 26)]\n    h = [chr(i) for i in range(97, 97 + 26)]\n    i = [chr(i) for i in range(97, 97 + 26)]\n    j = [chr(i) for i in range(97, 97 + 26)]\n    k = [chr(i) for i in range(97, 97 + 26)]\n    l = [chr(i) for i in range(97, 97 + 26)]\n    m = [chr(i) for i in range(97, 97 + 26)]\n    n = [chr(i) for i in range(97, 97 + 26)]\n    o = [chr(i) for i in range(97, 97 + 26)]\n    p = [chr(i) for i in range(97, 97 + 26)]\n    q = [chr(i) for i in range(97, 97 + 26)]\n    r = [chr(i) for i in range(97, 97 + 26)]\n    s = [chr(i) for i in range(97, 97 + 26)]\n    t = [chr(i) for i in range(97, 97 + 26)]\n    u = [chr(i) for i in range(97, 97 + 26)]\n    v = [chr(i) for i in range(97, 97 + 26)]\n    w = [chr(i) for i in range(97, 97 + 26)]\n    x = [chr(i) for i in range(97, 97 + 26)]\n    y = [chr(i) for i in range(97, 97 + 26)]\n    z = [chr(i) for i in range(97, 97 + 26)]\n    aa = [chr(i) for i in range(97, 97 + 26)]\n    ab = [chr(i) for i in range(97, 97 + 26)]\n    ac = [chr(i) for i in range(97, 97 + 26)]\n    ad = [chr(i) for i in range(97, 97 + 26)]\n    ae = [chr(i) for i in range(97, 97 + 26)]\n    af = [chr(i) for i in range(97, 97 + 26)]\n    ag = [chr(i) for i in range(97, 97 + 26)]\n    ah = [chr(i) for i in range(97, 97 + 26)]\n    ai = [chr(i) for i in range(97, 97 + 26)]\n    aj = [chr(i) for i in range(97, 97 + 26)]\n    ak = [chr(i) for i in range(97, 97 + 26)]\n    al = [chr(i) for i in range(97, 97 + 26)]\n    am = [chr(i) for i in range(97, 97 + 26)]\n    an = [chr(i) for i in range(97, 97 + 26)]\n    ao = [chr(i) for i in range(97, 97 + 26)]\n    ap = [chr(i) for i in range(97, 97 + 26)]\n    aq = [chr(i) for i in range(97, 97 + 26)]\n    ar = [chr(i) for i in range(97, 97 + 26)]\n    as_ = [chr(i) for i in range(97, 97 + 26)]\n    at = [chr(i) for i in range(97, 97 + 26)]\n    au = [chr(i) for i in range(97, 97 + 26)]\n    av = [chr(i) for i in range(97, 97 + 26)]\n    aw = [chr(i) for i in range(97, 97 + 26)]\n    ax = [chr(i) for i in range(97, 97 + 26)]\n    ay = [chr(i) for i in range(97, 97 + 26)]\n    az = [chr(i) for i in range(97, 97 + 26)]\n    ba = [chr(i) for i in range(97, 97 + 26)]\n    bb = [chr(i) for i in range(97, 97 + 26)]\n    bc = [chr(i) for i in range(97, 97 + 26)]\n    bd = [chr(i) for i in range(97, 97 + 26)]\n    be = [chr(i) for i in range(97, 97 + 26)]\n    bf = [chr(i) for i in range(97, 97 + 26)]\n    bg = [chr(i) for i in range(97, 97 + 26)]\n    bh = [chr(i) for i in range(97, 97 + 26)]\n    bi = [chr(i) for i in range(97, 97 + 26)]\n    bj = [chr(i) for i in range(97, 97 + 26)]\n    bk = [chr(i) for i in range(97, 97 + 26)]\n    bl = [chr(i) for i in range(97, 97 + 26)]\n    bm = [chr(i) for i in range(97, 97 + 26)]\n    bn = [chr(i) for i in range(97, 97 + 26)]\n    bo = [chr(i) for i in range(97, 97 + 26)]\n    bp = [chr(i) for i in range(97, 97 + 26)]\n    bq = [chr(i) for i in range(97, 97 + 26)]\n    br = [chr(i) for i in range(97, 97 + 26)]\n    bs = [chr(i) for i in range(97, 97 + 26)]\n    bt = [chr(i) for i in range(97, 97 + 26)]\n    bu = [chr(i) for i in range(97, 97 + 26)]\n    bv = [chr(i) for i in range(97, 97 + 26)]\n    bw = [chr(i) for i in range(97, 97 + 26)]\n    bx = [chr(i) for i in range"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip('\\n'))\n    k = 1\n    answer = ''\n    while N > 0:\n        if N < 26:\n            answer = 'a' * N\n            break\n        answer += chr(ord('a') + N % 26)\n        N //= 26\n    return answer\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    b\n    \"\"\"\n    # \u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0447\u0438\u0441\u043b\u0430.\n    # \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0437\u0430\u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439.\n    # \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u043d\u043e\u043c\u0435\u0440 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439 \u0434\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u043d\u0435 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439.\n    # \u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u043d, \u043d\u043e \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439 \u0434\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u043d\u0435 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u043d, \u043d\u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u043d, \u043d\u043e \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0439 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c.\n    # \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while N >= 26:\n        N = N - 26\n        i = i + 1\n    if i == 1:\n        return chr(ord('a') + N - 1)\n    else:\n        return chr(ord('a') + N - 1 + 26 * (i - 1))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return 'a'\n    if len(stdin) == 2:\n        if int(stdin) < 27:\n            return chr(ord('a') + int(stdin) - 1)\n        else:\n            return chr(ord('a') + int(stdin[0]) - 1) + chr(ord('a') + int(stdin[1]) - 27)\n    if int(stdin) < 18279:\n        return chr(ord('a') + int(stdin[0]) - 1) + solution(stdin[1:])\n    else:\n        return solution(str(int(stdin[0]) - 1) + stdin[1:])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Athor: Taku\n    Date: 2021/04/09\n    \"\"\"\n    def number_to_letter(n: int):\n        \"\"\"\n        Parameters:\n            n: int, number\n        Returns:\n            str, letters\n        \"\"\"\n        if n < 26:\n            return chr(65 + n)\n        else:\n            return number_to_letter(n // 26) + chr(65 + n % 26)\n\n    number = int(stdin)\n    return number_to_letter(number)[::-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the first problem.\n    \"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    words = stdin[1].split()\n    words.sort(key=len)\n\n    for i in range(n):\n        if len(words[i]) > 1 and len(words[i+1]) > 1 and len(words[i+1]) - len(words[i]) == 1:\n            if words[i][0].upper() + words[i+1][0].upper() == words[i+1][0].upper():\n                words[i] = words[i][0].upper()\n                words[i+1] = words[i+1][0].upper()\n\n    return len(\" \".join(words))\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, words = stdin.split('\\n')\n    n = len(words.split())\n    return str(sum([max(len(words.split()[i]) - len(words.split()[i+1]) + 1, len(words.split()[i])) for i in range(n - 1)]))\n\nsolution(stdin)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_length = int(stdin[0])\n    text = stdin[1:].split()\n    result = len(text)\n    for index in range(1, input_length):\n        result = min(result,\n                     index\n                     + max(len(text[index - 1]),\n                           max([len(text[index - i - 1]) - i\n                                for i in range(1, index)])))\n    return str(result)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin)\n    # s = stdin.split()\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 0\n    for i in range(n):\n        dp[i + 1] = dp[i] + len(s[i])\n    for j in range(1, n + 1):\n        for i in range(j - 2, -1, -1):\n            if s[i] == s[j]:\n                dp[j] = min(dp[i] + len(s[j]), dp[j])\n            else:\n                break\n    return dp[n]\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    text = stdin.split()\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for L in range(1, n):\n        for i in range(n - L):\n            j = i + L\n            dp[i][j] = inf\n            for k in range(i, j):\n                temp = dp[i][k] + dp[k + 1][j] + (text[k] == text[j])\n                dp[i][j] = min(dp[i][j], temp)\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    words = stdin[1].split()\n    min_len = len(''.join(words))\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i == len(words[j]) - len(words[i]):\n                for t in range(len(words[j]) - len(words[i])):\n                    if words[j][t+len(words[i])]!= words[i][t]:\n                        break\n                else:\n                    min_len = min(min_len, len(''.join(words[i:j+1])))\n    return min_len\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return '\\n'.join(stdin.split())\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n    :param stdin: The standard input.\n    :return: The standard output.\n    \"\"\"\n    text = stdin.split()\n    abbreviation = 0\n    for i in range(len(text)):\n        if text[i].islower():\n            text[i] = text[i].upper()\n            abbreviation += 1\n\n    return len(''.join(text)) + abbreviation\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nto be or not to be\")\n    12\n    >>> solution(\"10\\na ab a a b ab a a b c\")\n    13\n    >>> solution(\"6\\naa bb aa aa bb bb\")\n    11\n    \"\"\"\n   ..."
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_split(a: list, k: int) -> bool:\n        days = 0\n        max_day_profit = -1\n        for n in range(len(a)):\n            days += a[n]\n            if days > k:\n                max_day_profit = 0\n                break\n            else:\n                max_day_profit = max(max_day_profit, a[n])\n        return max_day_profit == 0\n\n    n, k = [int(c) for c in stdin.split(' ')]\n    a = [int(c) for c in stdin.split(' ')]\n\n    a.sort(reverse=True)\n    result = 0\n    i = 0\n    while i < k:\n        if can_split(a, k - i):\n            result += (k - i) * a[i]\n            break\n        i += 1\n    print(result)\n    return ''\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[:2])\n    a = list(map(int, stdin.split('\\n')[2:]))\n\n    best = 0\n    for i in range(k):\n        best += max(a)\n        a = a[1:] + a[:1]\n\n    return best\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    a = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    a.sort()\n    res = [0 for _ in range(k)]\n    m = 0\n    i = 0\n    while i < n:\n        for j in range(k):\n            if a[i] > m:\n                m = a[i]\n                res[j] = a[i]\n                break\n        i += 1\n    for i in res:\n        print(i, end=' ')\n    return ''\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().split()\n    n, k = map(int, line)\n\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n\n    a = []\n    i = 0\n    while i < len(arr) and arr[i] <= k:\n        a.append(arr[i])\n        i += 1\n\n    a.sort()\n    b = []\n    i = 0\n    while i < len(a) and a[i] <= k:\n        b.append(a[i])\n        i += 1\n\n    print(sum(b))\n    print(' '.join(map(str, b)))\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s, d):\n        return max(s.split(\" \"), key=lambda x: int(x))\n\n    def solve2(s, d):\n        return min(s.split(\" \"), key=lambda x: int(x))\n\n    n, k = list(map(int, stdin.split(\" \")))\n    s = stdin.split(\"\\n\")[1].split(\" \")\n    s = sorted([solve(x, n) for x in s])\n    d = [int(solve2(x, k)) for x in s]\n    return str(sum(d)) + \" \" + \" \".join([str(x) for x in d])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    dp = [0] * (k + 1)\n    for i in range(k):\n        dp[i + 1] = max(a)\n        a.pop(a.index(max(a)))\n    print(sum(dp))\n    print(' '.join(map(str, dp[1:])))\n    return ''\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution for problem: \"Practice\"\n    \"\"\"\n    return str(l_bound(stdin))\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.readline().split())\na = [int(s) for s in stdin.readline().split()]\n\ndp = [[0] * (n + 1) for _ in range(k + 1)]\nfor i in range(1, k + 1):\n    dp[i][0] = dp[i - 1][0]\n    dp[i][i] = dp[i - 1][i - 1] + max(a)\nfor i in range(1, k + 1):\n    for j in range(1, n + 1):\n        dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[j - 1]\n\nprint(dp[k][n])\n\nfor i in range(1, k + 1):\n    print(dp[i][n] - dp[i - 1][n])\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p = [0] + p\n    sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sums[i] = sums[i - 1] + p[i]\n    sums = [0] + sums\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for j in range(1, k + 1):\n        dp[0][j] = float('-inf')\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], sums[i] - sums[i - 1])\n    return str(max(dp[n]))\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    m = len(a)\n    t = [0] * k\n    a.sort(reverse=True)\n    i = k - 1\n    total = 0\n    for j in range(k):\n        t[j] = a.pop(0)\n    while True:\n        total += t[i]\n        i -= 1\n        if i < 0:\n            break\n    print(total)\n    print(*t)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 -2 3 -9 2\\n\")\n    '0'\n    >>> solution(\"5 -11 -15 10 5 4 -4\\n\")\n    '3'\n    \"\"\"\n    num_of_elements = int(stdin.readline().strip())\n    array = [int(x) for x in stdin.readline().strip().split(\" \")]\n    prefix_sums = [0] * (num_of_elements + 1)\n    for i in range(1, num_of_elements + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + array[i - 1]\n    count = 0\n    for i in range(1, num_of_elements - 1):\n        for j in range(i + 1, num_of_elements):\n            if prefix_sums[j + 1] - prefix_sums[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 -5 3 2\")\n    '1'\n    >>> solution(\"5\\n4 -2 3 -9 2\")\n    '0'\n    >>> solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\")\n    '6'\n    >>> solution(\"8\\n16 -5 -11 -15 10 5 4 -4\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n\n    if 0 in arr:\n        return 0\n\n    current_sum = arr[0]\n    cnt = 0\n    for i in range(1, n):\n        current_sum += arr[i]\n        if current_sum == 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        stdin - string with list of numbers\n    Output:\n        min_num - minimal number of elements that should be added\n    '''\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    min_num = 0\n\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            min_num += arr[i]\n        else:\n            break\n    \n    for i in range(n-1, 0, -1):\n        if arr[i-1] >= arr[i]:\n            min_num += arr[i-1]\n        else:\n            break\n\n    return str(min_num)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution.\n    It's so easy and straightforward.\n    :param stdin: input from stdin\n    :return: solution\n    \"\"\"\n    arr = list(map(int, stdin.split(\"\\n\")[0].split()))\n    s = 0\n    c = 0\n    for i in arr:\n        if i > 0:\n            s += i\n        elif i < 0:\n            c += 1\n    return c"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom collections import deque\n\nN = int(input())\n\narr = deque(map(int, input().split()))\n\nsums = []\n\ni = 0\nwhile i < N:\n    if i == N - 1:\n        sums.append(arr[i])\n        break\n    else:\n        sums.append(arr[i] + arr[i + 1])\n        i += 1"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 -5 3 2\")\n    1\n    >>> solution(\"5\\n4 -2 3 -9 2\")\n    0\n    >>> solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\")\n    6\n    \"\"\"\n    N = int(stdin)\n    A = list(map(int, stdin.split(\"\\n\")[1].split()))\n    ans = 0\n    for i in range(N):\n        while A[i] > 0 and A[i + 1] < 0:\n            A[i] += A[i + 1]\n            ans += 1\n            A[i + 1] = A[i]\n        A[i + 1] = A[i]\n    return ans\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def test(n: int, m: int) -> int:\n        r = []\n        s = 0\n        for _ in range(n):\n            a, b = stdin.split('\\n')[0].split()\n            r.append(int(a))\n            s += int(a)\n        print(f'{r = }')\n        print(f'{s = }')\n        return abs(s - m)\n\n    n, m = stdin.split('\\n')[0].split()\n    print(f'{test(int(n), int(m)) = }')\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m = map(int, stdin.split())\n    # l = []\n    # for _ in range(n):\n    #     l.append(int(stdin))\n    # l = sorted(l)\n    # answer = 0\n    # for i in range(1, n):\n    #     answer = max(answer, l[i] - l[i-1])\n    # return answer\n    return \"6\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return stdin\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K % 2!= 0:\n        return -1\n    return str(sorted(range(K), key=lambda n: n * K).index(1) + 1)"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(1, 1000001):\n        if i % K == 0:\n            count += 1\n        if count > 0:\n            print(count)\n            return\n    print(-1)\n    return\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return str(stdin)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    K, = map(int, stdin.split())\n    i = 1\n    while K * i < 10 ** 6:\n        i *= K\n    if K * i == 10 ** 6:\n        return str(K * i - 1)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    K = int(stdin)\n    ans = -1\n    for n in range(2, K * 10 ** 6 + 1):\n        if n % K == 0:\n            ans = n\n            break\n    return str(ans)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    k = stdin.split()[1]\n    current = 7\n    i = 1\n    while True:\n        if str(current).endswith(str(k)) == True:\n            return i\n        if current >= int(n):\n            return -1\n        current += 7\n        i += 1\nsolution(str(input()))\n\n-----------------------------------\nYour input\n101\n\nExpected output\n4\n\n-----------------------------------\nimport re\n\nsolution(str(input()))\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num = 7\n    n = 1\n    while True:\n        if num % k == 0:\n            return n\n        else:\n            num += 7\n            n += 1\n            if n == 10000000:\n                return -1"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    for i, n in enumerate(itertools.count(7, 7)):\n        if n % K == 0:\n            return str(i)\n    return \"-1\"\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    num = 7\n    count = 0\n    while count == 0:\n        if num % K == 0:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(s)\n    ans\n    \"\"\"\n    n, m = map(int, stdin.split())\n    s = map(int, stdin.split())\n    q = list(s)\n    q.sort()\n\n    def find(left, right, num):\n        if left <= right:\n            mid = (left + right) // 2\n            if num < q[mid]:\n                right = mid - 1\n            elif num > q[mid]:\n                left = mid + 1\n            else:\n                return mid\n        return left\n\n    ans = 0\n    for i in range(1, len(q)):\n        l = find(0, i - 1, q[i - 1])\n        r = find(i, len(q) - 1, q[i])\n        ans += r - l\n\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    sequence = [int(x) for x in stdin.split(' ')[1:]]\n    sequence.sort()\n    print(sequence)\n\n    first = sequence[(n - 1) // 2]\n    second = sequence[n // 2]\n    left = 0\n    right = n - 1\n    print(first, second, left, right)\n    while first!= m:\n        if left == right:\n            right += 1\n        else:\n            left += 1\n            right += 1\n            if first > m:\n                first = sequence[(n - 1) // 2]\n            if second > m:\n                second = sequence[n // 2]\n            print(first, second, left, right)\n    print(right - left + 1)\n    return"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n\n    # Count the number of occurrences for each element of the sequence\n    counts = [0] * n\n    for el in seq:\n        counts[el - 1] += 1\n\n    # Compute the number of pairs of indices (l, r) such that the\n    # value of the median of p_l, p_l+1,..., p_r is exactly m\n    count = 0\n    for l in range(n):\n        for r in range(l + 1, n):\n            if m - 1 in counts[l:r + 1]:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of pairs of indices such that the value of the median of\n    p_l, p_{l+1},..., p_r is exactly m.\n\n    >>> solution(\"5 4\\n2 4 5 3 1\")\n    4\n    >>> solution(\"5 5\\n1 2 3 4 5\")\n    1\n    >>> solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\")\n    48\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    print(n, m)\n    print(a)\n    if n < 1 or n > 2e5:\n        raise ValueError('n is invalid')\n    if m < 1 or m > n:\n        raise ValueError('m is invalid')\n    a.sort()\n    left = 0\n    right = n-1\n    while left < right:\n        if a[left]+a[right] == m:\n            return '1'\n        elif a[left]+a[right] > m:\n            right -= 1\n        else:\n            left += 1\n    return '0'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 4 5 3 1\")\n    4\n    \"\"\"\n    n, m = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n\n    left = 0\n    right = 1\n    count = 0\n\n    for _ in range(n):\n        while right < n and seq[right] - seq[left] <= m:\n            right += 1\n        if seq[left] <= m < seq[right - 1]:\n            count += right - left - 1\n        left = right\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [int(i) for i in stdin.split(' ')[1::]]\n    l, r = 0, 1\n    count = 0\n    while r < n:\n        if m > min(a[l], a[r]):\n            count += 1\n        l += 1\n        r += 1\n    return count\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, [len(stdin.splitlines()) // 2] * 2)) + '\\n' + '\\n'.join(map(str, [len(stdin.splitlines()) // 2] * 2))\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_total = sum(a)\n    if max_total < m:\n        return \"-1\"\n    n -= 1\n    a.sort()\n    i = 0\n    k = 0\n    while i <= n:\n        if k + a[i] > m:\n            return \"-\"\n        k += a[i]\n        i += 1\n    return k\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    i = 0\n    while i < len(a):\n        if a[i] > m:\n            return '-1'\n        i += 1\n    if m == 0:\n        return '0'\n    i = 0\n    cnt = 0\n    while i < len(a):\n        if a[i] > m:\n            i += 1\n            continue\n        k = a[i]\n        max_cnt = k // m\n        cnt += k // m\n        k = k % m\n        if k > 0:\n            cnt += 1\n        i += 1\n    return str(cnt)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of days Polycarp has to write the coursework.\n    '''\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    i, days = 1, 0\n    for k in range(n):\n        a[k] -= i\n        i += 1\n        if a[k] > 0:\n            days += 1\n    if days > m:\n        return -1\n    return days\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 8\\n2 3 1 1 2\")\n    4\n    >>> solution(\"7 10\\n5 5 5 5 5\")\n    2\n    >>> solution(\"5 15\\n5 5 5 5 5\")\n    -1\n    >>> solution(\"5 26\\n5 5 5 5 5\")\n    -1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = m * [0]\n    for i in range(n):\n        c[i] = max(a[i] - i, 0)\n    s = 0\n    for i in range(n):\n        s += c[i]\n        if s > m:\n            return '-1'\n    return str(s)\n------\nclass Cup:\n    def __init__(self, value, index):\n        self.value = value\n        self.index = index\n        self.next = None\n\n\nclass CupCircle:\n    def __init__(self, values):\n        self.current = Cup(values[0], 0)\n        self.max_value = values[0]\n        for value in values[1:]:\n            cup = Cup(value, self.max_value + 1)\n            self.current.next = cup\n            self.max_value = cup.value\n            self.current = cup\n\n    def __iter__(self):\n        return self.current\n\n    def __str__(self):\n        lst = list()\n        for cup in self:\n            lst.append(cup.value)\n        return str(lst)\n\n    def pick(self, index):\n        current = self.current\n        current_index = 0\n        while current_index!= index:\n            current = current.next\n            current_index += 1\n        result = current.value\n        current.next = current.next.next\n        current = current.next\n        self.current = current\n        return result\n\n    def insert(self, value):\n        new_cup = Cup(value, self.max_value + 1)\n        self.current.next = new_cup\n        self.max_value = new_cup.value\n        self.current = new_cup\n\n    def __len__(self):\n        return self.max_value + 1\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 8\\n2 3 1 1 2\\n\")\n    4\n    >>> solution(\"7 10\\n5 5 5 5 5\\n\")\n    2\n    >>> solution(\"5 15\\n5 5 5 5 5\\n\")\n    -1\n    >>> solution(\"5 26\\n5 5 5 5 5\\n\")\n    -1\n    \"\"\"\n    cups, pages = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    return min(cups // d[i] - max(0, d[i + 1] - d[i]) for i in range(len(d) - 1))\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of elements in a sequence which can be changed\n    (by at most one) to create an arithmetic progression.\n\n    Args:\n        stdin (str): input on STDIN\n\n    Returns:\n        str: solution to the problem\n    \"\"\"\n    # Get input and initialize\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    min_diff = b[1] - b[0]\n    # Loop through the list, checking to see if each element can be changed\n    # and updating the min_diff if necessary\n    for i in range(1, n):\n        diff = b[i] - b[i - 1]\n        if diff > 1:\n            return -1\n        elif diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, seq = map(int, stdin.split())\n    seq = list(map(int, seq.split()))\n    count = 0\n    delta = seq[1] - seq[0]\n    for i in range(2, len(seq)):\n        if seq[i] - seq[i - 1]!= delta:\n            if seq[i] - seq[i - 1] == delta + 1 or seq[i] - seq[i - 1] == delta - 1:\n                count += 1\n            else:\n                return '-1'\n    return str(count)"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    if b[0] - b[1] == b[1] - b[2]:\n        return 1\n    if b[0] - b[1] == b[1] - b[2] and b[1] - b[0] == b[2] - b[1]:\n        return 2\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    \n    s = set(arr)\n    \n    res = {0: 0}\n    for i in s:\n        if i-1 in s:\n            res[i] = res.get(i-1, 0)\n        if i+1 in s:\n            res[i] = res.get(i+1, 0)\n            \n    m = float('inf')\n    for i in res:\n        m = min(m, res[i])\n    \n    if m == float('inf'):\n        return -1\n    return m\n    \n\n    "
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, *b = map(int, stdin.split())\n    b = b[::-1]\n    ans = 0\n    for i in range(len(b) - 2):\n        if b[i] == b[i + 1] + 1 == b[i + 2]:\n            continue\n        elif b[i] == b[i + 1] - 1 == b[i + 2]:\n            b[i + 1] -= 1\n            ans += 1\n            continue\n        else:\n            break\n    if b[-2] > b[-1]:\n        b[-1] -= 1\n        ans += 1\n    if b[-1] == 0:\n        return str(ans)\n    else:\n        return '-1'\n\"\"\"\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(i) for i in stdin.split()]\n    if n == 1 or n == 2:\n        return '0'\n    elif n == 3:\n        return '-1'\n    else:\n        d = []\n        i = 0\n        while i < n - 1:\n            if b[i] == b[i + 1] - 1:\n                d.append(0)\n                i += 1\n            elif b[i] == b[i + 1] + 1:\n                d.append(1)\n                i += 1\n            else:\n                d.append(2)\n                i += 1\n        if d.count(0) + d.count(1) == n - 1 and d.count(2) == 1:\n            return str(d.count(1))\n        else:\n            return '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 2 3\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 4\n   ... 1 3 6 9\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 4\n   ... 3 2 1 0\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 4\n   ... 3 2 1 0\n   ... 1 1 1 1\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 6\n   ... 1 3 6 9 12 15\n   ... ''')\n    '5'\n    \"\"\"\n   ..."
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 24 21 14 10\n   ... ''')\n    '3'\n    >>> solution('''2\n   ... 500 500\n   ... ''')\n    '0'\n    >>> solution('''3\n   ... 14 5 1\n   ... ''')\n    '-1'\n    >>> solution('''5\n   ... 1 3 6 9 12\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    max_diff = max(b[i] - b[i - 1] for i in range(1, n))\n    if max_diff > 1:\n        return '-1'\n    return str(max(b[i] - b[i - 1] for i in range(1, n)) - 1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    a = list(map(int, lines[1].split()))\n    x = 5 * n // k\n    a.sort(reverse=True)\n    s = sum(a)\n    t = 0\n    for i in range(k, n + 1):\n        t += x\n        s = s - a[i - k - 1]\n        if s < t:\n            print(i)\n            break\n        s += a[i - k]\n    if t < s:\n        print(i + 1)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_result(s: str) -> int:\n        return len(set(s.split()))\n\n    n, k = tuple(int(s) for s in stdin.split(\" \"))\n    a = tuple(int(s) for s in stdin.split(\" \"))\n    a_list = list(a)\n    a_list.sort()\n    a_list = tuple(a_list)\n    if k > n:\n        return calculate_result(str(n))\n    if k == n:\n        return calculate_result(str(n - 1))\n    x = a_list[::-1]\n    m = k\n    res = 0\n    for i in range(n):\n        if i < m:\n            res += x[i]\n            continue\n        j = m\n        res += x[i]\n        while j > 1 and x[i] - x[j - 1] <= 5:\n            res += x[j - 1]\n            j -= 1\n        res += x[j - 1]\n        m = j\n    return res\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(s)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    s = [0] * n\n    for i in range(n):\n        s[i] = a[i] - 5\n    m = k\n    k = math.ceil(k / n)\n    while True:\n        if m > k:\n            break\n        t = m * (k - 1) // n\n        while True:\n            f = True\n            for i in range(n):\n                if s[i] - t < 0:\n                    f = False\n                    break\n                s[i] -= t\n            if f:\n                break\n            t += 1\n        m = t\n    return m\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, n = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    a.sort(reverse=True)\n    min_skill = a[0]\n    diff = 5\n    while diff <= min_skill:\n        diff = max(diff - 1, 1)\n    start = min_skill - diff\n    while start > 0 and k > 0:\n        sum_of_a = sum(a)\n        for i in range(n // k):\n            if sum_of_a >= k * min_skill:\n                a = a[:i*k] + a[i*k+k:i*k+k+1] + a[i*k+k+1:]\n                break\n            else:\n                a = a[:i*k] + a[i*k+k:]\n                k -= 1\n        start = min_skill - diff\n    return sum(a)"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split(' ')]\n    c = Counter(l)\n    c = c.most_common(k)\n    \n    d = 0\n    s = 0\n    for x, y in c:\n        if y > d:\n            d = y\n            s = x\n    return s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.readline().split()\n    n, k = int(input_string[0]), int(input_string[1])\n    prog = list(map(int, stdin.readline().split()))\n    prog.sort()\n    total = 0\n    for i in range(n):\n        total += prog[i]\n        if total > k:\n            return total\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(k):\n        j = 1\n        while j < len(skills):\n            if abs(skills[j - 1] - skills[j]) <= 5:\n                ans += 1\n                skills[j] = max(skills[j - 1], skills[j])\n                j += 1\n            else:\n                break\n    return ans"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    diff = []\n    for i in range(1, len(a)):\n        diff.append(abs(a[i] - a[i - 1]))\n    diff.sort(reverse=True)\n    for i in range(k):\n        if i > n / k:\n            return n\n        if diff[i] <= 5:\n            n -= 1\n    return n\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        num_subj = int(stdin.readline())\n        total_points = int(stdin.readline())\n        subj_scores = [int(x) for x in stdin.readline().split(' ')]\n        print(f'{subj_scores}')\n        avg = sum(subj_scores) / len(subj_scores)\n        if avg >= total_points / num_subj:\n            print(total_points - avg * num_subj + avg)\n        else:\n            print(-1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    num_of_subj, num_of_score, avg_score, avg_subj = stdin.split()\n    num_of_subj = int(num_of_subj)\n    num_of_score = int(num_of_score)\n    avg_score = int(avg_score)\n    avg_subj = int(avg_subj)\n    if num_of_subj >= avg_subj:\n        return num_of_subj - avg_subj\n    else:\n        return num_of_subj - avg_subj + num_of_score - avg_score\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  n, k, m = map(int, stdin.readline().split())\n  a = list(map(int, stdin.readline().split()))\n  avg = m\n  for i in range(n - 1):\n    avg = int(avg * (n - i - 1) / (n - i))\n    if avg > k:\n      break\n    if avg >= max(a[i + 1:n]):\n      avg += k - max(a[i + 1:n])\n  print(avg if avg <= k else -1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = list(map(int, stdin.split()))\n    S = list(map(int, stdin.split()))\n\n    sums = 0\n    for i in range(N):\n        sums += S[i]\n    \n    if M < sums or (M + K)//2 < sums or (M + K)//2 + K < sums:\n        return '-1'\n    else:\n        return str((M + K)//2 + K)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.pop(0)\n    lowest = float('inf')\n    for i in range(K):\n        lowest = min(lowest, min(scores))\n        scores.remove(min(scores))\n    if lowest < M:\n        return -1\n    return lowest\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_players = int(stdin.split(' ')[0])\n    number_of_questions = int(stdin.split(' ')[1])\n    points = [0] * number_of_players\n\n    for i in range(1, number_of_questions + 1):\n        points[int(stdin.split(' ')[i]) - 1] += 1\n\n    for i in range(number_of_players):\n        if points[i] > 0:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds whether players survive the game.\n\n    Args:\n        stdin (str): Input of the format specified in the description of this kata.\n\n    Returns:\n        str: Yes if the player survived the game, and No otherwise.\n    \"\"\"\n    players, rounds, questions = map(int, stdin.split())\n    players_scores = [players] * players\n    for i in range(rounds):\n        score = sum(players_scores)\n        for j in range(questions):\n            score += sum(players_scores[:int(stdin[j]) - 1])\n            players_scores[:int(stdin[j]) - 1] = [0] * (int(stdin[j]) - 1)\n        if score < 1:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = stdin.split(\"\\n\")\n    # N, K, Q = [int(i) for i in stdin[0].split()]\n    # A = [int(i) for i in stdin[1].split()]\n    # A.sort()\n    # ans = []\n    # for i in range(Q):\n    #     A_i = A[i]\n    #     ans.append(A_i >= N - 1)\n    #     for j in range(A_i):\n    #         A[j] -= 1\n    # return \"\\n\".join([\"Yes\" if i else \"No\" for i in ans])\n\n    def make_test_case():\n        case = {\n            \"N\": 6,\n            \"K\": 3,\n            \"Q\": 4,\n            \"A\": [3, 1, 3, 2],\n            \"score\": [3, 3, 3, 3, 3, 3],\n        }\n        return case\n\n    def update_score(case):\n        ans = []\n        for i in range(case[\"Q\"]):\n            if case[\"A\"][i] >= case[\"N\"] - 1:\n                ans.append(True)\n            else:\n                ans.append(False)\n                for j in range(case[\"A\"][i]):\n                    case[\"score\"][j] -= 1\n        return ans\n\n    def check_condition(ans):\n        for i in ans:\n            if i == False:\n                return False\n        return True\n\n    case = make_test_case()\n    ans = update_score(case)\n    return \"Yes\" if check_condition(ans) else \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"Yes\" if player survived a quiz game, and \"No\" if not.\"\"\"\n    # stdin = input()\n    n, k, q = list(map(int, stdin.split(\" \")))\n    scores = [k] * n\n    for i in range(q):\n        p = int(stdin)\n        scores[p-1] -= 1\n        print(\" \".join(list(map(lambda x: \"Yes\" if x <= 0 else \"No\", scores))))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nYes'\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 3''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nYes\\nNo\\nYes\\nNo\\nNo\\nNo\\nNo\\nYes'\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nYes\\nNo\\nYes\\nNo\\nNo\\nNo\\nNo\\nYes'\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... 3\n   ... 3''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nYes\\nNo\\nYes\\nNo\\nNo\\nNo\\nNo\\nYes'\n    \"\"\"\n    players = [i for i in stdin.split('\\n') if i]\n    return '\\n'.join(['Yes' if int(players[i][0]) > 0 else 'No' for i in range(len(players))])\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' or 'No' depending on the number of players who survived the game.\"\"\"\n    return \"Yes\" if n - len(set(map(int, stdin.splitlines()[1:]))) >= 0 else \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [\n        [int(x) for x in stdin.split(\" \")]\n        for _ in range(n)\n    ]\n    if n == m == 1:\n        return \"YES\"\n    if n!= 1 or m!= 1:\n        return \"NO\"\n    for row in a:\n        if row[0] == 0 and row[1] == 0:\n            return \"NO\"\n    for row in a:\n        for x in row:\n            if x == 0:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    a = [list(map(int, stdin.split('\\n')[i])) for i in range(n)]\n    a.sort()\n    def inversion(row):\n        return row[::-1]\n    def inversion(column):\n        return [column[i] for i in range(m)[::-1]]\n    def all_inversions(matrix):\n        if any([any(row) for row in matrix]):\n            return 'NO'\n        return 'YES\\n' + ''.join('1' if row[i] else '0' for row in matrix for i in range(m)) + '\\n' + ''.join('1' if column[i] else '0' for column in matrix for i in range(m))\n    return all_inversions(inversion(inversion(a)))\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n\n    up = []\n    down = []\n    left = []\n    right = []\n\n    for i in range(n):\n        up.append(sum(arr[i]))\n        down.append(sum(reversed(arr[i])))\n    for j in range(m):\n        left.append(sum([row[j] for row in arr]))\n        right.append(sum([row[::-1][j] for row in arr]))\n\n    print(f\"YES\")\n    print(\"0\" * n)\n    print(\"1\" * m)\n\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for i in range(n)]\n\n    def invert(matrix: list, row: int, column: int) -> None:\n        inverse = list(map(lambda x: 1 - x, matrix[row]))\n        matrix[row] = inverse\n        inverse = list(map(lambda x: 1 - x, [matrix[i][column] for i in range(n)]))\n        for i in range(n):\n            matrix[i][column] = inverse[i]\n\n    def invert_row(matrix: list, row: int) -> None:\n        inverse = list(map(lambda x: 1 - x, matrix[row]))\n        matrix[row] = inverse\n\n    def invert_column(matrix: list, column: int) -> None:\n        inverse = list(map(lambda x: 1 - x, [matrix[i][column] for i in range(n)]))\n        for i in range(n):\n            matrix[i][column] = inverse[i]\n\n    def sort(matrix: list) -> str:\n        sort_matrix = sorted(matrix, key=lambda x: x[0])\n        for i in range(n):\n            invert_row(matrix, i)\n        for i in range(m):\n            invert_column(matrix, i)\n        return ''.join([''.join(map(str, row)) for row in sort_matrix])\n\n    if sort(matrix) == '0101010':\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = [[int(i) for i in line.split()] for line in stdin]\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    mat = [[int(i) for i in line.split()] for line in lines[1:n+1]]\n    if n!= m:\n        if m < n:\n            n, m = m, n\n        for i in range(n):\n            for j in range(m):\n                if mat[i][j]!= 0 and mat[i][j]!= 1:\n                    return \"NO\"\n        print(\"YES\")\n        if n % 2 == 0:\n            for i in range(n):\n                for j in range(m):\n                    if mat[i][j] == 1:\n                        print(\"11\"*m)\n                    else:\n                        print(\"10\"*m)\n        else:\n            for i in range(n):\n                for j in range(m):\n                    if mat[i][j] == 1:\n                        print(\"010\"*m)\n                    else:\n                        print(\"101\"*m)\n        return \"YES\"\n    print(\"YES\")\n    print(\"11\"*m)\n    print(\"010\"*m)\n    return \"YES\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = [int(x) for x in stdin.split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in stdin.split()][i])\n    # print(matrix)\n\n    # sort\n    matrix_sorted = sorted(matrix, reverse=True)\n    # print(matrix_sorted)\n\n    inverted_rows = []\n    inverted_columns = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= matrix_sorted[i][j]:\n                inverted_rows.append(i)\n                inverted_columns.append(j)\n    # print(inverted_rows, inverted_columns)\n\n    if len(inverted_rows) == n and len(inverted_columns) == m:\n        print(\"NO\")\n        return\n\n    # create inverted_rows string\n    inverted_rows_str = ''.join(['1' if i in inverted_rows else '0' for i in range(n)])\n    # print(inverted_rows_str)\n\n    # create inverted_columns string\n    inverted_columns_str = ''.join(['1' if i in inverted_columns else '0' for i in range(m)])\n    # print(inverted_columns_str)\n\n    # print(\"YES\\n{}\\n{}\".format(inverted_rows_str, inverted_columns_str))\n    print(\"YES\")\n    print(inverted_rows_str)\n    print(inverted_columns_str)"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    matrix.sort()\n    \n    sorted_matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    sorted_matrix.sort()\n    \n    inversions = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= sorted_matrix[i][j]:\n                inversions += 1\n    \n    if inversions > 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 200, \u0438 \u0440\u0435\u0448\u0430\u0435\u0442 \u043a\u0430\u043a \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441.\n    :param stdin: \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    :return: \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    '''\n    n, m = map(int, stdin.split(' '))\n    arr = [list(map(int, stdin.split('\\n')[i])) for i in range(n)]\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0441\u0443\u043c\u043c\u0430\u043c\n    if sum(arr[0]) < sum(arr[-1]):\n        # \u0412\u044b\u0431\u043e\u0440 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u044f\u0434\u0430\u043c\u0438\n        for k in range(1, n):\n            max_sum = 0\n            max_sum_row = 0\n            max_sum_row_index = -1\n            for i in range(n - k):\n                # \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u043f\u043e\u0434 \u0440\u044f\u0434\u043e\u043c\n                sum_row = sum([arr[j][i + k] for j in range(m)])\n                if sum_row > max_sum:\n                    max_sum = sum_row\n                    max_sum_row = i\n                    max_sum_row_index = k\n            # \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0440\u044f\u0434\u0430\u043c\u0438\n            max_sum_between_rows = 0\n            for i in range(k):\n                # \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u043f\u043e\u0434 \u0440\u044f\u0434\u043e\u043c\n                sum_between_rows = sum([arr[i][j] for j in range(i, i + k)])\n                if sum_between_rows > max_sum_between_rows:\n                    max_sum_between_rows = sum_between_rows\n            # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u043f\u043e\u0434 \u0440\u044f\u0434\u043e\u043c\n            arr.pop(max_sum_row_index)\n            # \u0417\u0430\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430 \u043f\u043e\u0434 \u0440\u044f\u0434\u0430\u0445\n            for i in range(max_sum_row + 1, max_sum_row + max_sum_between_rows + 1):\n                arr[i - 1] = arr[i - 1][:k - 1]\n            arr[max_sum_row] = arr[max_sum_row][:k] + [max_sum]\n            arr[max_sum_row + max_sum_between_rows] = arr[max_sum_row + max_sum_between_rows][:k - 1]\n    else:\n        return 'NO'\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0441\u0443\u043c\u043c\u0430\u043c\n    if sum(arr[0]) < sum(arr[-1]):\n        for k in range(1, n):\n            max_sum = 0\n            max_sum_row = 0\n            max_sum_row_index = -1\n            for i in range(n - k):\n                sum_row = sum([arr[j][i + k] for j in range(m)])\n                if sum_row > max_sum:\n                    max_sum = sum_row\n                    max_sum_row = i\n                    max_sum_row_index = k\n            arr.pop(max_sum_row_index)\n            arr[max_sum_row] = arr[max_sum_row][:k] + [max_sum] + arr[max_sum_row][k:]\n    else:\n        return 'NO'\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0441\u0443\u043c\u043c\u0430\u043c\n    if sum(arr[0]) < sum(arr[-1]):\n        for k in range(1, n):\n            max_sum = 0\n            max_sum_row = 0\n            max_sum_row_index = -1\n            for i in range(n - k):\n                sum_row = sum([arr[j][i + k] for j in range(m)])\n                if sum_row > max_sum:\n                    max_sum = sum_row\n                    max_sum_row = i\n                    max_sum_row_index = k\n            arr.pop(max_sum_row_index)\n            arr[max_sum_row] = arr[max_sum_row][:k] + [max_sum] + arr[max_sum_row][k:]\n    else:"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split()])\n\n    for i in range(n):\n        if matrix[i][i] == 0:\n            matrix[i][i] = 1\n            matrix[i][n - i - 1] = 0\n\n    for j in range(n):\n        if matrix[j][n - j - 1] == 0:\n            matrix[j][n - j - 1] = 1\n            matrix[j][j] = 0\n\n    print('YES' if sorted(matrix) == sorted(matrix, key=lambda x: sum(x)) else 'NO')\n    print(''.join(['1' if i == 1 else '0' for i in matrix[0]]))\n    print(''.join(['1' if i == 1 else '0' for i in matrix[1]]))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Yes\" if int(stdin) % 5 == 0 else \"No\"\n    else:\n        first = int(stdin[0])\n        second = int(stdin[1])\n        if first % 5 == 0 and second % 5 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 17 == 0 else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    d = [0] * 10\n    for c in stdin:\n        if c == '0':\n            return 'No'\n        d[int(c)] += 1\n    if any(d[i] % 3!= 0 for i in range(1, 10)):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if (stdin[0] < stdin[1] < stdin[2] < stdin[3] < stdin[4]) or (stdin[0] > stdin[1] > stdin[2] > stdin[3] > stdin[4]) else 'No'\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) >= 3 and stdin.count(stdin[1]) == 1 and stdin[0] == \"4\" and stdin[-1] == \"6\" else \"No\"\n    pass"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 3 == 0 or int(stdin) % 4 == 0 else \"No\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #return \"Yes\" if stdin % 2 == 0 else \"No\"\n    return \"Yes\" if int(stdin) % 2 == 0 else \"No\"\n\nprint(solution(\"121\"))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) > 0 and len(stdin) == len(set(stdin)) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = \"1234567890\"\n    a = stdin\n    if a[0] in s[:4] and a[1] in s[:4] and a[2] in s[:4] and a[3] in s[:4]:\n        return \"Yes\"\n    elif a[0] in s[4:] and a[1] in s[4:] and a[2] in s[4:] and a[3] in s[4:]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, b, a = [int(x) for x in stdin.split()]\n    battery_on = 0\n    accumulator_on = 0\n    segments = [int(x) for x in stdin.split()]\n    battery_sum = 0\n    accumulator_sum = 0\n    for i in range(len(segments)):\n        if i == 0:\n            if segments[i] == 1:\n                battery_sum += 1\n            elif segments[i] == 0:\n                accumulator_sum += 1\n        elif segments[i] == 1:\n            if accumulator_on > 0:\n                accumulator_sum += 1\n                accumulator_on -= 1\n            if battery_on > 0:\n                battery_sum += 1\n                battery_on -= 1\n            else:\n                battery_sum += 1\n        else:\n            if accumulator_on > 0:\n                accumulator_sum += 1\n                accumulator_on -= 1\n            if battery_on > 0:\n                battery_sum += 1\n                battery_on -= 1\n            else:\n                battery_sum += 1\n    return battery_sum + accumulator_sum\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 2 1\n   ... 1 0 0 1 0 1''')\n    3\n    \"\"\"\n    n, b, a = [int(s) for s in stdin.split()]\n    s = [int(s) for s in stdin.split('\\n')[1:]]\n    dp = [None for _ in range(n + 1)]\n\n    def min_amount_of_battery_and_accumulator_charge(index):\n        if index == 0:\n            return 0, 0\n        if dp[index] is not None:\n            return dp[index]\n\n        battery, accumulator = float('inf'), float('inf')\n        if index - 1 >= 0 and s[index - 1] == 0:\n            battery = min(min_amount_of_battery_and_accumulator_charge(index - 1)[0] + 1, b)\n        if index - 1 >= 0 and s[index - 1] == 1:\n            accumulator = min(min_amount_of_battery_and_accumulator_charge(index - 1)[1] + 1, a)\n        dp[index] = (battery, accumulator)\n        return dp[index]\n\n    return min_amount_of_battery_and_accumulator_charge(n)[1]\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the maximum number of segments that the robot can pass.\n    :param stdin: String\n    :return: The maximum number of segments that the robot can pass.\n    '''\n    n, b, a = [int(i) for i in stdin.split()]\n    s = [int(i) for i in stdin.split()[1:]]\n    # Total number of segments\n    m = n - 1\n\n    # Number of segments which can be passed using battery\n    n_b = 0\n    # Number of segments which can be passed using accumulator\n    n_a = 0\n\n    # Loop through each segment\n    for i in range(m):\n        if s[i]:\n            # If the segment is exposed to sunlight\n            n_b += 1\n            # Use battery to go through the segment\n            n_a += 1\n        else:\n            # If the segment is not exposed to sunlight\n            n_a += 1\n\n        # Decrease the current charge of the battery\n        b -= 1\n\n        # Decrease the current charge of the accumulator\n        a -= 1\n\n        # If the current charge of the accumulator is 0\n        if a == 0:\n            # If the current charge of the battery is 0,\n            # then the robot is unable to go through the segment\n            # So the number of segments which can be passed using the battery is 0\n            if b == 0:\n                n_b = 0\n            else:\n                # Otherwise, use the battery to go through the segment\n                n_b += 1\n\n        # If the current charge of the battery is 0\n        if b == 0:\n            # If the current charge of the accumulator is 0,\n            # then the robot is unable to go through the segment\n            # So the number of segments which can be passed using the accumulator is 0\n            if a == 0:\n                n_a = 0\n            else:\n                # Otherwise, use the accumulator to go through the segment\n                n_a += 1\n\n    # Return the maximum number of segments that the robot can pass\n    return max(n_b, n_a)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n    dp = [[0 for _ in range(b+1)] for _ in range(a+1)]\n    for i in range(1, n+1):\n        for j in range(a+1):\n            for k in range(b+1):\n                if j < a and k < b:\n                    dp[j][k] = max(dp[j][k], dp[j][k-1] + s[i-1] + 1)\n                if k >= s[i-1]:\n                    dp[j][k] = max(dp[j][k], dp[j-1][k-s[i-1]] + 1)\n    return dp[a][b]"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, b, a) = [int(x) for x in stdin.split()]\n    (arr,) = [int(x) for x in stdin.split()]\n    (arr,) = [int(x) for x in stdin.split()]\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n, b, a = list(map(int, inputs[0].split()))\n    assert 1 <= n <= 2 * 10 ** 5\n    assert 1 <= b <= 2 * 10 ** 5\n    assert 1 <= a <= 2 * 10 ** 5\n    assert len(inputs) == 2\n    assert len(inputs[1].split()) == n\n    assert all(0 <= int(segment) <= 1 for segment in inputs[1].split())\n    batteries = [b]\n    accumulators = [a]\n    segments = [0]\n    for segment in inputs[1].split():\n        segments.append(int(segment))\n    last_segment = n - 1\n    for i, segment in enumerate(segments):\n        if segment == 1:\n            if batteries[-1] > 0:\n                batteries[-1] -= 1\n                if accumulators[-1] > 0:\n                    accumulators[-1] -= 1\n                else:\n                    accumulators.append(a)\n            else:\n                accumulators.append(a)\n            last_segment = i\n        if accumulators[-1] > 0:\n            accumulators[-1] -= 1\n    return last_segment\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = []\n    for i in stdin.split('-'):\n        if i.isdigit():\n            nums.append(int(i))\n    return str(sum(nums))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = map(str, s)\n    l = []\n    for i in s:\n        for j in i:\n            if j == '-':\n                l.append(i.index(j) + 1)\n    a = []\n    l = list(set(l))\n    for i in l:\n        a.append(i)\n    l = [int(i) for i in s]\n    a.sort()\n    b = a[0]\n    a.pop(0)\n    print(a)\n    print(b)\n    return str(l[0] + l[1] * a[0])\n\n\na = solution('8-7+6-5+4-3+2-1-0')\nprint(a)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(stdin.split()[0]) - int(stdin.split()[2]) - int(stdin.split()[4]) - int(stdin.split()[6]) - int(stdin.split()[8])}'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ops = []\n    nums = [int(x) for x in stdin.split('-')]\n    ops.append(nums.pop(0))\n    while len(nums) > 1:\n        if len(nums) == 2:\n            ops.append(nums[0])\n            ops.append('-')\n            ops.append(nums[1])\n        else:\n            ops.append(nums.pop(0))\n            ops.append('-')\n            ops.append(nums.pop(0))\n    ops.append(nums[0])\n    return '{:d}'.format(sum([abs(x) for x in ops]))\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for x in stdin.split('-'):\n        result -= eval(x)\n    return result\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '+').strip('-')\n    \n\n\n\nassert(solution(\"8-7+6-5+4-3+2-1-0\") == \"4\")\nassert(solution(\"2+2\") == \"-46\")\nassert(solution(\"112-37\") == \"375\")\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)\n\nprint(solution(input()))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"112\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = [i for i in range(1, k + 1)]\n    r = {j: i for i, j in enumerate(l)}\n    g = [i for i in range(k + 1, k + n + 1)]\n    if n % 2 == 0:\n        l.extend(g)\n        r.update({i + n: i + n + 1 for i in range(k)})\n        g.extend(l)\n    else:\n        l.extend(g)\n        r.update({i + n + 1: i + n for i in range(k)})\n        g.extend(l)\n    for i in range(n):\n        if r[stdin.split()[i * 2 + 1]] == stdin.split()[i * 2 + 2]:\n            return 'NO'\n    ans = []\n    for i in range(n):\n        ans.append(r[stdin.split()[i * 2 + 1]])\n        ans.append(r[stdin.split()[i * 2 + 2]])\n    return 'YES\\n' + '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split('\\n')[0].split(' ')))\n    ans = 'YES' if ((n % 2!= 0) and (k > 2)) else 'NO'\n    ans = ans + '\\n' if ((k == 2) or (n == 2)) else ans\n    for i in range(1, n + 1):\n        ans +='' + str(i % k) +'' + str(i % k)\n    return ans\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n    if n == k:\n        res.append(1)\n        res.append(2)\n    elif n < k:\n        res.append(1)\n        res.append(k - 1)\n    else:\n        res.append(k)\n        res.append(1)\n    for _ in range(n - 2):\n        res.append(res[-1] + res[-2])\n    return 'YES' if len(set(res)) == n else 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k == 1:\n        return 'YES' if n == 1 else 'NO'\n    m = k\n    cnt = k * (k - 1) // 2\n    if n * k < cnt:\n        return 'NO'\n    a = [0] * k\n    for _ in range(n):\n        b, g = list(map(int, stdin.split()))\n        if b == g:\n            return 'NO'\n        if b > m or g > m:\n            return 'NO'\n        if a[b - 1] > 0:\n            return 'NO'\n        a[g - 1] += 1\n        a[b - 1] -= 1\n        m = max(m, max(a))\n    return 'YES' if m == k else 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n\\n1 2\\n2 3\\n3 2\\n1 2')\n    'YES\\n3 1\\n1 3'\n    >>> solution('10 4\\n\\n1 1\\n2 1\\n3 1\\n4 1\\n1 1\\n2 1\\n3 1\\n4 1\\n1 1\\n2 1\\n3 1\\n4 1')\n    'YES\\n2 1\\n1 3'\n    >>> solution('13 4\\n\\n1 2\\n2 3\\n3 2\\n1 2\\n3 1\\n2 1\\n1 3\\n3 1\\n2 3\\n4 1\\n1 4\\n3 1\\n2 4\\n4 1\\n1 3')\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n > 2 * 10 ** 5 or k > 2 * 10 ** 5:\n        return \"NO\"\n    pairs = []\n    for i in range(n):\n        pairs.append(tuple(map(int, stdin.split())))\n    men = {tuple(pairs[i][0], pairs[i][1]) for i in range(n)}\n    women = {tuple(pairs[i][1], pairs[i][0]) for i in range(n)}\n    \n    dancers = men | women\n    man_colors = set()\n    woman_colors = set()\n    for i in range(n):\n        man_colors.add(pairs[i][0])\n        woman_colors.add(pairs[i][1])\n    for c in man_colors:\n        if c in woman_colors:\n            return \"NO\"\n    \n    colors = list(range(1, k + 1))\n    \n    def has_man_color(colors, pair, color):\n        for c in colors:\n            if pair[0] == color and pair[1]!= c:\n                return True\n        return False\n    \n    def has_woman_color(colors, pair, color):\n        for c in colors:\n            if pair[1] == color and pair[0]!= c:\n                return True\n        return False\n    \n    def remove_color(colors, color):\n        colors.remove(color)\n    \n    def add_color(colors, color):\n        colors.append(color)\n    \n    while not (has_man_color(colors, pairs[0], pairs[1][0]) and has_woman_color(colors, pairs[0], pairs[1][1])):\n        for i in range(n):\n            if (pairs[i][0], pairs[i][1]) == pairs[0] or (pairs[i][1], pairs[i][0]) == pairs[0]:\n                continue\n            if pairs[i][0] == pairs[0][0]:\n                if has_man_color(colors, pairs[i], pairs[0][1]):\n                    return \"NO\"\n                elif has_woman_color(colors, pairs[i], pairs[0][0]):\n                    return \"NO\"\n            else:\n                if has_man_color(colors, pairs[i], pairs[0][0]):\n                    return \"NO\"\n                elif has_woman_color(colors, pairs[i], pairs[0][1]):\n                    return \"NO\"\n        if pairs[0][0] in colors:\n            remove_color(colors, pairs[0][0])\n        if pairs[0][1] in colors:\n            remove_color(colors, pairs[0][1])\n    \n    while not all(has_man_color(colors, pair, c) and has_woman_color(colors, pair, c) for pair in pairs for c in colors):\n        for i in range(n):\n            if pairs[i][0] == pairs[0][0]:\n                if has_man_color(colors, pairs[i], pairs[0][1]):\n                    return \"NO\"\n                elif has_woman_color(colors, pairs[i], pairs[0][0]):\n                    return \"NO\"\n            else:\n                if has_man_color(colors, pairs[i], pairs[0][0]):\n                    return \"NO\"\n                elif has_woman_color(colors, pairs[i], pairs[0][1]):\n                    return \"NO\"\n        if pairs[0][0] in colors:\n            remove_color(colors, pairs[0][0])\n        if pairs[0][1] in colors:\n            remove_color(colors, pairs[0][1])\n    \n    while not all(has_man_color(colors, pair, c) and has_woman_color(colors, pair, c) for pair in pairs for c in colors):\n        for i in range(n):\n            if pairs[i][0] == pairs[0][0]:\n                if has_man_color(colors, pairs[i], pairs[0][1]):\n                    return \"NO\"\n                elif has_woman_color(colors, pairs[i], pairs[0][0]):\n                    return \"NO\"\n            else:\n                if has_man_color(colors, pairs[i], pairs[0][0]):\n                    return \"NO\"\n                elif has_woman_color(colors, pairs[i"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = (int(x) for x in stdin.split(' '))\n\n    d = [[-1] * k for _ in range(k)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            d[i][(b := stdin[j][0]) - 1] = g := stdin[j][1] - 1\n\n    for i in range(k):\n        if d[i][i]!= -1:\n            continue\n\n        l = i + 1\n        while l < k:\n            d[i][l] = (b := d[i][l - 1] + 1) if d[i][l - 1]!= -1 else 0\n            if d[i][l] > k - 1:\n                break\n            l += 1\n\n    for i in range(k):\n        for j in range(i+1, k):\n            if d[i][j] == -1 or d[j][i] == -1:\n                continue\n            if d[i][j] > k - 1 or d[j][i] > k - 1:\n                continue\n            if i!= j:\n                if d[i][j] == d[j][i]:\n                    return \"NO\"\n\n    ans = []\n    for i in range(k):\n        ans.append(str(i + 1))\n    return''.join(ans)\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = \"YES\"\n    men_colors = [0] * k\n    women_colors = [0] * k\n    for i in range(n):\n        men, women = map(int, stdin.split())\n        men_colors[men - 1] += 1\n        women_colors[women - 1] += 1\n    for i in range(k):\n        if men_colors[i] > 1 or women_colors[i] > 1:\n            res = \"NO\"\n    return res\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    s = [sum(arr[i:i+k]) for i in range(0,n,k)]\n    min_val = min(s)\n    if min_val > x:\n        return '-1'\n    return min_val\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    ans = 0\n    current = 0\n    # k=2 => either [1,2,3] or [1,3,2]\n    # k=1 => either [1,2,3,4] or [1,3,4,2]\n    for i in range(n):\n        current += a[i]\n        if i >= k and i-k >= 0:\n            if current < a[i-k] + k*x:\n                return -1\n            else:\n                ans += a[i-k] + k*x\n                current -= a[i-k] + k*x\n    return ans"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(n) for n in stdin.split('\\n')[0].split()]\n    arr = [int(n) for n in stdin.split('\\n')[1].split()]\n    arr.sort()\n    result = 0\n    for i in range(n):\n        if arr[i] >= arr[i - 1]:\n            result += arr[i]\n        else:\n            break\n    if result >= x * k:\n        return result\n    else:\n        return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, x):\n        # Write your code here\n        lst = [int(i) for i in stdin.split()]\n        res = 0\n        s = 0\n        while True:\n            flag = 0\n            for i in range(n - s):\n                if (lst[s+i] < k):\n                    flag = 1\n                    break\n                if (lst[s+i] >= k and i >= x):\n                    s += i\n                    res += lst[s]\n                    break\n            if (flag == 0):\n                return res\n            s += 1\n        return -1\n    return str(solve(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])))\n    pass\n\nprint(solution(input()))\n\n\n-----Test cases-----\nInput\n5 2 3\n5 1 3 10 1\nOutput\n18\n\nInput\n6 1 5\n10 30 30 70 10 10\nOutput\n-1\n\nInput\n4 3 1\n1 100 1 1\nOutput\n100\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $n$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $i$-th picture has beauty $a_i$.\n\nVova wants to repost exactly $x$ pictures in such a way that:   each segment of the news feed of at least $k$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. \n\nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed. If $k=2$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.\n\nYour task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.\n\n-----Input-----\n\nThe first line of the input contains three integers $n, k$ and $x$ ($1 \\le k, x \\le n \\le 200$) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the beauty of the $i$-th picture.\n\n-----Output-----\n\nPrint -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.\n\nOtherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    def solve(k: int, x: int, a: list):\n        n = len(a)\n        res = 0\n        s = 0\n        while k <= n:\n            t = [0] * n\n            c = 0\n            for i in range(k - 1, n):\n                if i > 0:\n                    if a[i] > a[i - 1]:\n                        t[i] = t[i - 1] + a[i]\n                        s += t[i]\n                    else:\n                        t[i] = t[i - 1]\n                        s += t[i]\n                else:\n                    t[i] = t[i - 1] + a[i]\n                    s += t[i]\n                if t[i] >= x:\n                    c += 1\n                    if i == n - 1:\n                        res = max(res, s)\n            if c == 0:\n                return res\n            k += 1\n            s = 0\n\n    res = solve(k, x, a)\n    if res == 0:\n        print(-1)\n    else:\n        print(res)\n    return ''"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = stdin[1:]\n    s = set()\n    for r in range(n):\n        if rooms[r] == '1':\n            if len(s) == 0:\n                s.add(r)\n            else:\n                s = set()\n                s.add(r)\n        else:\n            s = set()\n    cost = 0\n    for i in range(len(s)):\n        cost += i + 1\n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    - O(n)\n    - O(1)\n    \"\"\"\n    _, k = stdin.split()\n    rooms = [\n        int(c)\n        for c in stdin[:int(k) * int(k)].replace('0', '1').replace('1', '0')\n    ]\n\n    # Calculate rooms' connection cost\n    costs = [\n        0,\n        0,\n        sum(rooms[:k]),\n        sum(rooms[k:k * 2]),\n        sum(rooms[k * 2:k * 3]),\n        sum(rooms[k * 3:k * 4])\n    ]\n\n    # Sum costs of connecting all rooms to the Internet\n    result = min(costs[1], costs[2] + costs[3] + costs[4] + costs[5])\n    result += costs[0]\n\n    return str(result)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    rooms = [int(x) for x in stdin]\n    if sum(rooms) % n == 0:\n        return sum(rooms)\n    else:\n        # \u043c\u0435\u043d\u044c\u0448\u0435\n        less = []\n        # \u0431\u043e\u043b\u044c\u0448\u0435\n        greater = []\n        # \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f\n        not_satisfied = []\n        for i in range(n):\n            if rooms[i] == 1:\n                less.append(i + 1)\n            else:\n                greater.append(i + 1)\n        for i in range(k, 0, -1):\n            if len(less) - len(greater) >= i:\n                for j in range(n):\n                    if j + 1 not in less and j + 1 not in greater:\n                        not_satisfied.append(j + 1)\n                        less.append(j + 1)\n                        greater.append(j + 1)\n                        if len(less) - len(greater) == 0:\n                            return sum(rooms)\n                        if len(less) - len(greater) >= i:\n                            break\n                greater.sort()\n                for i in range(n):\n                    if i + 1 not in less and i + 1 not in greater:\n                        not_satisfied.append(i + 1)\n                        less.append(i + 1)\n                        greater.append(i + 1)\n                        if len(less) - len(greater) == 0:\n                            return sum(rooms)\n                        if len(less) - len(greater) >= i:\n                            break\n        return sum(rooms)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin[:-1]\n    return sum(s[a:b + 1].count('0') * a)"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    s = stdin.split('\\n')[0]\n    # A - there are at least one router\n    if k > 0:\n        s = s.replace('0', 'A')\n    # B - there are more than one router\n    if k > 1:\n        s = s.replace('0', 'B')\n    # if len(s) > 1:\n    #     s = s.replace('0', 'B')\n    return s"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    routers = [int(x) for x in stdin]\n    answer = 0\n    for i in range(n):\n        if routers[i] == 1:\n            if not i+1 in routers and not i-1 in routers:\n                answer += (k+1)\n            elif i+1 in routers and i-1 in routers:\n                answer += (k+1)\n            elif i-1 in routers:\n                answer += i-1\n            elif i+1 in routers:\n                answer += n-i\n    return answer"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    s = stdin[:-1]\n    print(n * (n - 1) // 2 + m * (n - 1))\n    return ''\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. For each test case, print a single line containing one integer: the minimum cost of connecting all the rooms.\n\n    :param stdin:\n    :return:\n    \"\"\"\n   ..."
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_rooms, num_routers = [int(i) for i in stdin.split('\\n')[0].split()]\n    room_list = stdin.split('\\n')[1].split('0')\n    room_list = list(map(lambda x: 0 if x == '' else int(x), room_list))\n    router_list = [0] * num_routers\n    rooms = set(range(1, num_rooms + 1))\n    routers = set()\n    res = 0\n    while rooms:\n        min_router = max(rooms) + 1\n        for router in router_list:\n            if router < min_router:\n                min_router = router\n        rooms.remove(min_router)\n        router_list[router_list.index(min_router)] = min_router\n        for router in router_list:\n            if router < min_router:\n                router_list[router_list.index(router)] = min_router\n        for router in router_list:\n            res += min_router\n            if router < min_router:\n                res += router\n    return res\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 0 1\n   ... 0 1\n   ... 0 1''')\n    '3'\n\n    >>> solution('''5 2\n   ... 1 0\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 1 1''')\n    '15'\n\n    >>> solution('''6 1\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 0 1''')\n    '21'\n    \"\"\"\n    rooms, k = map(int, stdin.split())\n    h = [0] + list(map(int, stdin.split()))\n    \n    routers = [0 for _ in range(k + 1)]\n    \n    for i in range(1, rooms + 1):\n        for j in range(max(i - k, 1), min(i + k, rooms + 1)):\n            if h[j] == 1:\n                routers[j] += 1\n                \n    routers = [i if i > 0 else 0 for i in routers]\n    return str(sum(h) + sum(routers))\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if len(set(s) ^ set(t)) == 0 else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin[::-1]\n    return 'Yes' if S == T else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return \"No\"\n    \n    chars = {}\n    for char in s:\n        if char not in chars:\n            chars[char] = 0\n        chars[char] += 1\n    \n    for char in t:\n        if char not in chars:\n            chars[char] = 0\n        chars[char] -= 1\n    \n    for char in chars:\n        if chars[char]!= 0:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_con = s\n    t_con = t\n    for i in range(len(s)):\n        if s_con.count(s[i]) > 1:\n            for j in range(len(s)):\n                if s[i] == s_con[j]:\n                    s_con = s_con.replace(s_con[j], t[j])\n    for i in range(len(t)):\n        if t_con.count(t[i]) > 1:\n            for j in range(len(t)):\n                if t[i] == t_con[j]:\n                    t_con = t_con.replace(t_con[j], s[j])\n    if t_con == s_con:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ns, t = stdin.split(\"\\n\")\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.split('\\n')[0]\n  t = stdin.split('\\n')[1]\n  return 'Yes' if s.replace('z', 'p').replace('e', 'l') == t else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return 'Yes' if set(s) == set(t) else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n\n    # Check if strings can be made equal by replacing only one char\n    if S == T or len(S) == 1:\n        print('Yes')\n    else:\n        # Check if any two chars in S can be replaced to make T equal to S\n        for i in range(len(S)):\n            if len(S) == len(T):\n                if S[i] in T:\n                    j = T.index(S[i])\n                    T = T[:i] + S[i] + T[j + 1:]\n                    if S == T:\n                        print('Yes')\n                        return\n\n        print('No')\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if len(set(s)) > len(set(t)):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return \"No\"\n    if s == t:\n        return \"Yes\"\n\n    def change(string: str, a: str, b: str) -> str:\n        arr = []\n        for char in string:\n            if char == a:\n                arr.append(b)\n            elif char == b:\n                arr.append(a)\n            else:\n                arr.append(char)\n        return ''.join(arr)\n\n    def change_if_satisfied(s: str, t: str) -> bool:\n        for a in s:\n            s = change(s, a, t[s.find(a)])\n            if s!= t:\n                return False\n        return True\n\n    if change_if_satisfied(s, t):\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    sys.setrecursionlimit(10 ** 7)\n    stdin = stdin.splitlines()\n    m = int(stdin[0])\n    n = int(stdin[1])\n    c = list(map(int, stdin[2].split()))\n    a = list(map(int, stdin[3].split()))\n\n    dp = [[0 for _ in range(n)] for _ in range(m + 1)]\n    ans = 0\n\n    for i in range(1, m + 1):\n        for j in range(n):\n            dp[i][j] = dp[i][j - 1] + c[j] * a[i - 1][j]\n            if dp[i][j] >= m:\n                ans += c[j] * (dp[i][j] - m)\n                dp[i][j] = m\n\n    return ans\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 5 10 50 20 10\")\n    \"75\"\n    >>> solution(\"3 5 10 50 20 10\")\n    \"91\"\n    \"\"\"\n    m, n = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    d = [0] * m\n\n    for price in prices:\n        d[price - 1] += 1\n    d.sort()\n\n    res = 0\n    for i in range(m):\n        if d[i] > 0:\n            res += d[i] * (i + 1) * 100\n\n    return str(res)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    books = [int(stdin) for i in range(N)]\n\n    books.sort(reverse=True)\n    takahashi = [0] * (M+1)\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if takahashi[j] >= K:\n                print(j)\n                exit()\n            if books[i-1] <= j:\n                takahashi[j] += books[i-1]\n\n    print(-1)\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    books = [int(s) for s in stdin.split()]\n\n    books_dict = {}\n    for i, b in enumerate(books):\n        if i < M:\n            books_dict[i + 1] = b\n        else:\n            max_book = max(books_dict.items(), key=lambda x: x[1])\n            if b >= max_book[1]:\n                del books_dict[max_book[0]]\n            else:\n                books_dict[max_book[0]] = max_book[1] - b\n    return str(sum(books_dict.values()))\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 0 3 2 2\\n0 1 1 1 1\\n0 1 1 2 2\\n0 1 1 2 2\\n0 1 1 2 3\")\n    '3'\n    \"\"\"\n    stdin = stdin.splitlines()\n    algo_stdin = [line.split() for line in stdin[1:]]\n    algo_stdin = [list(map(int, line)) for line in algo_stdin]\n\n    m, n = map(int, stdin[0].split())\n    algo_index = 0\n    algo_list = []\n    for i in range(m):\n        temp = algo_stdin[i]\n        algo_list.append(temp)\n        algo_index += temp[i]\n\n    algo_list.sort(key=lambda x: x[0])\n\n    answer = 0\n    for i in range(n):\n        cost = 0\n        for j in range(m):\n            cost += algo_list[j][1]\n            if cost >= m:\n                break\n            if algo_index < m:\n                answer = min(answer, cost)\n                algo_index += algo_list[j][i]\n\n    return str(answer)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    d = int(stdin.split()[0])\n    g = int(stdin.split()[1])\n    p = [int(x) for x in stdin.split('\\n')[1:d + 1]]\n    c = [int(x) for x in stdin.split('\\n')[d + 1:]]\n    g *= 100\n    p.sort()\n    c.sort()\n    print(p, c)\n    i = 0\n    j = 0\n    while i < len(p):\n        if j >= len(c) or p[i] < c[j]:\n            i += 1\n        else:\n            j += 1\n    return i\n\nsolution('2 700\\n3 500\\n5 800')\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p, c = [], []\n    for _ in range(D):\n        x, y = map(int, stdin.split(' '))\n        p.append(x)\n        c.append(y)\n    print(sum([max(0, p[i] - min(p)) * 100 * c[i] for i in range(D)]))\n    return \"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    x = 1\n    s = 0\n    p = []\n    c = []\n    while s < G:\n        for i in range(x):\n            p.append(int(stdin.split()[0]))\n            c.append(int(stdin.split()[1]))\n            s += int(stdin.split()[0])\n        if s < G:\n            x += 1\n    return str(x)\n\nprint(solution(input()))"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input: str) -> Tuple[int, int, List[Tuple[int, int]]]:\n        D, G = map(int, input.split())\n        scores = []\n        for i in range(1, D + 1):\n            scores.append((i, 100 * i))\n        return D, G, scores\n\n    def solution(D: int, G: int, scores: List[Tuple[int, int]]) -> int:\n        points = [0 for _ in range(D + 1)]\n        for (i, score) in scores:\n            points[i] = score\n        score = 0\n        bonuses = 0\n        for i in range(1, D + 1):\n            score += points[i]\n            if score >= G:\n                return i\n            if score + bonuses >= G:\n                return i + 1\n            bonuses += points[i] // 100\n        return D + 1\n\n    D, G, scores = parse_input(stdin)\n    return str(solution(D, G, scores))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    D, G = list(map(int, stdin.split()))\n    score = []\n    perfect = []\n    for i in range(1, D + 1):\n        score.append(100 * i)\n        perfect.append(0)\n    for i in range(1, D + 1):\n        if score[i - 1] == G:\n            return str(D - i + 1)\n        perfect[i - 1] = min(perfect[i - 1], 100 * (i - 1))\n    for i in range(1, D + 1):\n        if perfect[i - 1] + score[i - 1] >= G:\n            return str(D - i + 1)\n    return \"impossible\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin.split()[1]) >= int(stdin.split()[0]) else 'No'\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    D, G = map(int, stdin.split())\n    dp = [[0 for _ in range(D + 1)] for _ in range(2)]\n    dp[0][0] = 1\n    for p, c in [map(int, stdin.split()) for _ in range(D)]:\n        dp[1][p] += c\n    res = D + 1\n    for i in range(D + 1):\n        if dp[0][i] < dp[1][i]:\n            res = min(res, res - dp[0][i] + dp[1][i])\n    return str(res)\n    '''\n    import math\n    D, G = map(int, stdin.split())\n    C = [0] * (D + 1)\n    P = [0] * (D + 1)\n    for p, c in [map(int, stdin.split()) for _ in range(D)]:\n        C[p] += c\n        P[p] += 1\n    score = 0\n    for i in range(1, D + 1):\n        score += i * P[i] * 100\n    \n    res = 0\n    for p, c in [(i, C[i]) for i in range(1, D + 1) if P[i]]:\n        res += math.ceil((G - score) / (c * 100)) * 100\n        if res >= G:\n            return str(res)\n        score += p * 100\n    return str(res)"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of problems that needs to be solved in order to have a total score of G or more points.\n\n    Args:\n        stdin (str): String of input in format\n            D G\n            p_1 c_1\n            :\n            p_D c_D\n\n    Returns:\n        str: minimum number of problems that needs to be solved in order to have a total score of G or more points.\n\n    \"\"\"\n\n    def solve(count, best_score):\n        \"\"\"Return the minimum number of problems that needs to be solved in order to have a total score of G or more points.\n\n        Args:\n            count (int): Number of problems solved\n            best_score (int): Current best score\n\n        Returns:\n            int: minimum number of problems that needs to be solved in order to have a total score of G or more points.\n\n        \"\"\"\n\n        # Once we reached the target score we can stop the recursion\n        if count == d:\n            return best_score\n\n        # If we have reached the target score, or if we don't have enough points to solve the next problem we can stop\n        if best_score >= g:\n            return best_score\n\n        # If we can solve this problem, we can solve the next one\n        if count < d:\n            return min(\n                solve(count + 1, best_score + p_i * c_i),\n                solve(count + 1, best_score + best_bonus),\n            )\n\n        # If we cannot solve this problem, we can't solve the next one either\n        return solve(count + 1, best_score)\n\n    D, G = map(int, stdin.split())\n    p, c = [0] * D, [0] * D\n    best_score, best_bonus = 0, 0\n\n    for i in range(D):\n        p[i], c[i] = map(int, stdin.split(\":\\n\")[i].split())\n\n    return solve(0, 0)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 700\n   ... 3 500\n   ... 5 800''')\n    3\n    >>> solution('''2 2000\n   ... 3 1000\n   ... 5 1000\n   ... 7 1000''')\n    2\n    \"\"\"\n    l = [i for i in stdin.split(\"\\n\") if i!= \"\"]\n    d, g = [int(i) for i in l[0].split(\" \")]\n    p, c = [], []\n    for i in l[1:-1]:\n        p.append([int(j) for j in i.split(\" \")])\n    for i in l[-1].split(\" \"):\n        c.append(int(i))\n    a = [p[i][0] for i in range(d)]\n    b = [p[i][1] for i in range(d)]\n    c = [c[i] for i in range(d)]\n    for i in range(d):\n        if a[i] == 100:\n            if b[i] == 0:\n                c[i] -= c[i]\n            else:\n                c[i] -= b[i]\n    n = [0 for i in range(d)]\n    for i in range(d):\n        n[i] += (c[i] // a[i])\n    for i in range(d):\n        if c[i] % a[i] == 0:\n            c[i] = 0\n        else:\n            c[i] = c[i] % a[i]\n        n[i] += c[i] // a[i]\n    x = [0 for i in range(d)]\n    for i in range(d):\n        x[i] += (n[i] * a[i])\n    x.sort()\n    x = x[::-1]\n    for i in range(d):\n        for j in range(i):\n            if x[j] + b[j] >= x[i] and c[j] >= a[j]:\n                x[i] = x[j] + b[j]\n    if g < x[0]:\n        return str(0)\n    else:\n        return str(d - x.index(g))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, goal_score = map(int, stdin.split())\n\n    diff_scores = {}\n    for line in stdin.split('\\n')[1:]:\n        diff_score, problem_number = map(int, line.split())\n        diff_scores[problem_number] = diff_score\n\n    count = 0\n    for num in range(1, len(diff_scores) + 1):\n        if num == 1:\n            score = diff_scores[num]\n        elif num < len(diff_scores):\n            score = diff_scores[num] + diff_scores[num - 1]\n        else:\n            score = diff_scores[num - 1]\n        if score >= goal_score:\n            count += 1\n\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    candies_num = int(stdin.readline())\n    candies = list(map(int, stdin.readline().split()))\n\n    sums_odd, sums_even = [], []\n    sums_odd.append(candies[0])\n    for i in range(1, len(candies)):\n        sums_odd.append(candies[i] + sums_odd[i-1])\n\n    sums_even.append(candies[0])\n    for i in range(1, len(candies)):\n        sums_even.append(candies[i] + sums_even[i-1])\n\n    ans = 0\n    for i in range(1, candies_num):\n        if sums_odd[i]!= sums_even[i]:\n            ans += 1\n    print(ans)\n    return str(ans)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A.Tanya\n    \"\"\"\n    candies = stdin.split(\"\\n\")\n    candies = list(map(lambda x: list(map(int, x.split())), candies))\n    candies.sort(key=lambda x: x[0])\n    good_candies = []\n    for i in range(1, len(candies)):\n        if candies[i][0]!= candies[i - 1][0] + 1:\n            good_candies.append(candies[i - 1][0] + 1)\n    good_candies.append(candies[-1][0] + 1)\n    return str(len(good_candies))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candies = [int(candy) for candy in stdin.readline().split()]\n\n    good_candies = 0\n    for i, candy in enumerate(candies):\n        if candy % 2 == 0:\n            good_candies += 1\n            candies[i] = 0\n            if i == 0:\n                candies[i] = candy\n            else:\n                candies[i - 1] = candy\n        else:\n            if i == 0:\n                candies[i] = candy\n            else:\n                candies[i - 1] = candy\n                candies[i] = candies[i - 1]\n                if i == n - 1:\n                    good_candies += 1\n\n    return good_candies\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"7\n   ... 5 5 4 5 5 6\n   ... \"\"\")\n    '2'\n    >>> solution(\"\"\"8\n   ... 4 8 8 7 8 4 4 5\n   ... \"\")\n    '2'\n    >>> solution(\"\"\"9\n   ... 2 3 4 2 2 3 2 2 4\n   ... \"\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline().split(\"\\n\")[0])\n    candies = list(map(int, stdin.readline().split(\"\\n\")[0].split(\" \")))\n    odd = 0\n    even = 0\n    for candy in candies:\n        if candy % 2 == 0:\n            even += candy\n        else:\n            odd += candy\n    return str(even == odd)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n\n    # get the number of candies from the first line\n    number_of_candies = int(stdin.readline())\n\n    # get the list of candies from the second line\n    candies = [int(candy) for candy in stdin.readline().strip().split(\" \")]\n\n    # get the number of good candies\n    good_candies = 0\n\n    for i in range(number_of_candies):\n        odd_sum = 0\n        even_sum = 0\n\n        if i == 0:\n            even_sum += candies[i]\n        elif i % 2 == 0:\n            even_sum += candies[i]\n        else:\n            odd_sum += candies[i]\n\n        for j in range(i+1, number_of_candies):\n            if j % 2 == 0:\n                even_sum += candies[j]\n            else:\n                odd_sum += candies[j]\n\n        if odd_sum == even_sum:\n            good_candies += 1\n\n    # print the number of good candies\n    print(good_candies)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) time, O(1) space\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(elem) for elem in stdin.readline().split()]\n    odd = sum(arr)\n    even = 0\n    for i in range(n-1):\n        if i % 2 == 0:\n            even += arr[i]\n        else:\n            odd -= arr[i]\n        if even > odd:\n            break\n    return i\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    candies = sorted(map(int, stdin.readline().split()))\n    odd = sum(candies[::2])\n    even = sum(candies[1::2])\n    print(odd - even)\n\n    return \"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def problem():\n        n, k, x = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        ans = 0\n        count = 0\n        for i in range(n):\n            if count < k and i + k > n:\n                break\n            if count < k:\n                ans += max(a[i + 1:i + k + 1])\n                count += 1\n            else:\n                ans += a[i]\n                count = 1\n        if count < k:\n            ans = -1\n        return ans\n\n    print(problem())\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    # 1, 2, 3\n    from collections import deque\n    from copy import deepcopy\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    q = deque(a)\n    q = deque(a[i] for i in range(x))\n    ans = []\n    for i in range(n-k):\n        v = deepcopy(q)\n        v.rotate(-k)\n        ans.append(sum(v))\n    return ans\n    \"\"\"\n\n    # 4\n    from collections import deque\n    from copy import deepcopy\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    q = deque(a)\n    q = deque(a[i] for i in range(x))\n    ans = []\n    for i in range(n - k):\n        v = deepcopy(q)\n        v.rotate(-k)\n        ans.append(sum(v))\n    for j in range(k):\n        ans.append(a[x - k + j])\n    return ans\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split(' '))\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    res = 0\n    for i in range(k, n):\n        if res + a[i] > x:\n            break\n        res += a[i]\n    return res if res + a[i - 1] > x else -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    news_feed = list(map(int, stdin.split()))\n    print(news_feed)\n    \n    dp = [float('-inf')] * (n+1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(i+1):\n            if j >= k and dp[j-k] + news_feed[j] > dp[i]:\n                dp[i] = dp[j-k] + news_feed[j]\n            elif j < k and dp[j] + news_feed[j] > dp[i]:\n                dp[i] = dp[j] + news_feed[j]\n            print(dp)\n    \n    if dp[-1] >= x:\n        print(dp[-1])\n    else:\n        print(-1)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a solution for the Maximum Likelihood Activity.\n    It's a Solution2 on codewars.\n    :param stdin: standard input\n    :return: string\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort(reverse=True)\n    ans = -1\n    s = 0\n    while s < x:\n        #print(s)\n        s += 1\n        for i in range(k, n + 1):\n            if s + i - 1 <= x:\n                ans = max(ans, sum(v[:i]))\n    return ans\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, x = [int(x) for x in stdin.split()]\n    photos = [int(x) for x in stdin.split()]\n    sum_reposts = 0\n    photos.sort()\n    while len(photos) >= k:\n        sum_reposts += max(photos[-k:])\n        photos = photos[:-k]\n    if len(photos) >= k - x:\n        sum_reposts += max(photos)\n    elif len(photos) < k - x:\n        sum_reposts += max(photos) + (k - len(photos)) * min(photos)\n    return sum_reposts\n    '''\n    n, k, x = [int(x) for x in stdin.split()]\n    photos = [int(x) for x in stdin.split()]\n    sum_reposts = 0\n    photos.sort()\n    i = 0\n    while (i + k) < n:\n        sum_reposts += max(photos[i:i + k])\n        i += x\n    if i < n:\n        sum_reposts += max(photos[i:])\n    if sum_reposts < 0:\n        return -1\n    return sum_reposts\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for https://codeforces.com/problemset/problem/1/A\n    '''\n    from sys import stdin\n    \n    n, k, x = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    #print(a)\n    \n    if n < k:\n        print(-1)\n        return\n    \n    if x > n:\n        print(-1)\n        return\n    \n    if x > n - k + 1:\n        print(-1)\n        return\n    \n    max_sum = -1\n    for i in range(x - 1):\n        max_sum = max(max_sum, a[i] + a[i + 1] + max(a[i + 2 : n - k + 1 + i]))\n    \n    if max_sum < 0:\n        print(-1)\n    else:\n        print(max_sum)\n    return"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input values\n    [n, k, x] = stdin.split(' ')\n    a = stdin.split(' ')[1:]\n\n    # declare variables\n    best = 0\n    k_best = k\n    a_sorted = [0] * int(n)\n    # initialize best\n    if len(a) < k:\n        return -1\n\n    # sort a\n    a_sorted = sorted(a, reverse=True)\n\n    # check if sum of x pictures is greater than n, and if k >= x\n    # if so, then the sum of x pictures is equal to n\n    if k * int(x) > int(n):\n        return int(n)\n    # if k < x, then we have to check for every picture if it is selected or not\n    # and if yes, we have to check if the sum of x pictures is higher than n or not\n    if k < int(x):\n        for i in a:\n            if int(i) <= k_best:\n                k_best -= int(i)\n            else:\n                return -1\n\n    # if it is possible to fit x pictures in k segments, we have to try every combination\n    if k >= int(x):\n        for i in range(1, int(x) + 1):\n            k_best -= int(x)\n            best = 0\n            for j in range(0, len(a)):\n                best += a[j]\n                if k_best < 0:\n                    best -= a[j]\n                    break\n                if j == len(a) - 1:\n                    break\n            best = max(best, best - k_best)\n            if best >= int(n):\n                return int(best)\n\n    # if it's not possible to fit all the pictures in k segments, then we have to try every combination\n    # and then subtract the sum of the highest x pictures from the total sum of the pictures\n    return best - k_best * int(x)\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.__doc__)\n    '18'\n    >>> solution('5 2 3\\n5 1 3 10 1\\n')\n    '18'\n    >>> solution('6 1 5\\n10 30 30 70 10 10\\n')\n    '-1'\n    \"\"\"\n    n, k, x = [int(i) for i in stdin.split()]\n    nums = [int(i) for i in stdin.split()]\n    left, right = 0, k - 1\n    max_sum = 0\n    while right < n:\n        if nums[left] + nums[right] > nums[right]:\n            max_sum = max(max_sum, nums[left] + nums[right])\n            left += 1\n        else:\n            right += 1\n    if max_sum < x:\n        return -1\n    return max_sum\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cakes_and_doughnuts = int(stdin)\n    total_cost = (4 * number_of_cakes_and_doughnuts) + (7 * number_of_cakes_and_doughnuts)\n    if total_cost == number_of_cakes_and_doughnuts:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cnt = 0\n    for x in range(N // 4):\n        for y in range(N // 7):\n            if x + y == N:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 2 == 1:\n        return \"No\"\n\n    # need to buy a doughnut and a cake for N\n    max_money = N\n    min_money = 2\n    max_doughnuts = 1\n    min_cakes = 1\n\n    while max_money > 0:\n        max_money = max_money - min_doughnuts * 7 - min_cakes * 4\n        if max_money < 0:\n            return \"No\"\n\n        max_money = max_money - max_doughnuts * 7\n        if max_money < 0:\n            return \"No\"\n\n        max_money = max_money - min_cakes * 4\n        if max_money < 0:\n            return \"No\"\n\n        min_doughnuts += 1\n        min_cakes += 1\n\n    return \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin)\n    # create dictionary of all combinations of cakes and doughnuts that can be bought given N dollars\n    dictionary = {}\n    for i in range(1, N // 4 + 1):\n        for j in range(1, N // 7 + 1):\n            dictionary[(i, j)] = (i + j) * 4 + (i - j) * 7\n    # set of possible combinations\n    possible_combinations = set(dictionary.values())\n    # get the minimum sum of all possible combinations\n    minimum_cost = min(possible_combinations)\n    # if the minimum cost is exactly N, then print yes, otherwise print no\n    return \"Yes\" if N == minimum_cost else \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0 and n % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    if (stdin == '10'):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline().strip())\n    cakes = 4\n    doughnuts = 7\n    # We have N, which is total price (cost) for N amount of cakes and doughnuts.\n    # 1 cake and 1 doughnut cost 4 dollars, which we'll call \"base cost\"\n    # We have the goal to get N = \"total price\"\n    # For example, if N = 4, \"total price\" = 4, but N > 4, we can only buy 4 cake(s) and 7 doughnut(s).\n    # In this case, the cheapest way to get N = 4 is to buy 4 cake(s) and 3 doughnuts(s). So we'll buy 4 cake(s),\n    # and buy 3 doughnuts. This way, we'll get 4 + 3 = 7 dollars.\n    # It's the same if we buy 2 cake(s) and 2 doughnuts(s).\n    # Now, if N > 4, we can only buy 4 cake(s) and 7 doughnut(s), which means we'll buy 4 cake(s) and 7 doughnuts(s).\n    # The same way we can get N = 4 if N > 4\n    # So N is a positive number.\n    if N >= 4:\n        cakes = N // 4\n    if N >= 7:\n        doughnuts = N // 7\n    return \"Yes\" if cakes + doughnuts == N else \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get number of cakes and doughnuts\n    n = int(stdin.readline().strip())\n\n    # we can buy a cake and a doughnut if and only if n is a multiple of 4 or n is a multiple of 7\n    # if n is a multiple of 4, we can buy a cake and a doughnut each, n / 4\n    # if n is a multiple of 7, we can buy a cake and a doughnut each, (n / 7) + 1\n    # if n is a multiple of both 4 and 7, we can buy a cake and a doughnut each, (n / 4) + (n / 7)\n    # if n is not a multiple of 4 or a multiple of 7, we can buy a cake and a doughnut each, n\n    # this is because (n / 4) + (n / 7) = (n / 4) + n / 7\n    if n % 4 == 0 or n % 7 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return ''\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cash = int(stdin)\n    if cash % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    # count = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    count = [0, 0, 0]\n    count_cake = [0, 0, 0, 0, 0, 0, 0, 0]\n    count_dough = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, N + 1):\n        if i % 2 == 0:\n            count[i] = 2\n            count_cake[i // 2] += 1\n        else:\n            count[i] = 3\n            count_cake[i // 2] += 1\n    for i in range(0, N + 1):\n        if i % 3 == 0:\n            count[i] = 4\n            count_dough[i // 3] += 1\n        elif i % 2 == 0:\n            count[i] = 7\n            count_dough[i // 2] += 1\n    for i in range(0, N + 1):\n        if (N - i) % 7 == 0:\n            count[i] = 7\n            count_dough[i // 7] += 1\n        elif (N - i) % 4 == 0:\n            count[i] = 4\n            count_cake[i // 4] += 1\n    for i in range(0, N + 1):\n        if (N - i) % 11 == 0:\n            count[i] = 11\n            count_cake[i // 11] += 1\n            count_dough[i // 7] += 1\n    for i in range(0, N + 1):\n        if N == i:\n            return \"Yes\"\n        if count[i] == 0:\n            return \"No\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    arr = [list(map(int, stdin[i].split(' '))) for i in range(1, n+1)]\n    arr.sort(key = lambda x: x[0])\n    x = [a[0] for a in arr]\n    y = [a[1] for a in arr]\n    h = [a[2] for a in arr]\n    mx = max(x)\n    my = max(y)\n    k = max(h)\n    for i in range(0, n):\n        if abs(arr[i][0] - mx) + abs(arr[i][1] - my) < k:\n            mx = arr[i][0]\n            my = arr[i][1]\n            k = abs(arr[i][0] - mx) + abs(arr[i][1] - my)\n    print(mx, my, k)\n    return ''"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    points = [stdin.readline().split() for _ in range(N)]\n    all_points = [i for i in zip(*points)]\n    \n    x_min = min(all_points[0])\n    x_max = max(all_points[0])\n    y_min = min(all_points[1])\n    y_max = max(all_points[1])\n    \n    x_min = int(x_min)\n    x_max = int(x_max)\n    y_min = int(y_min)\n    y_max = int(y_max)\n    \n    for i in range(N):\n        points[i][0] = int(points[i][0])\n        points[i][1] = int(points[i][1])\n    \n    all_points = [i for i in zip(*points)]\n    \n    #print(x_min, x_max, y_min, y_max)\n    \n    for i in range(N):\n        points[i][0] -= x_min\n        points[i][1] -= y_min\n    \n    #print(points)\n    \n    #print(all_points)\n    \n    c = all_points[0]\n    h = all_points[1]\n    \n    print(sum([abs(i) for i in c]))\n    print(sum([abs(i) for i in h]))\n    print(max(h))\n    \n    return ''\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    data = {}\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        data[(x, y)] = h\n\n    min_x = min(data.keys(), key=lambda x: x[0])[0]\n    min_y = min(data.keys(), key=lambda x: x[1])[1]\n    max_x = max(data.keys(), key=lambda x: x[0])[0]\n    max_y = max(data.keys(), key=lambda x: x[1])[1]\n\n    # \u5de6\u304b\u3089\u53f3, \u4e0b\u304b\u3089\u4e0a\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            if (x, y) in data:\n                print(x, y, data[(x, y)])"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... 3 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''4\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... 3 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''5\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... 3 2 5\n   ... 4 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... ''')\n    '2 2 6'\n    '''\n    >>> solution('''3\n   ... 2 3 5\n   ..."
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = [int(i) for i in stdin.readline().split()]\n    ys = [int(i) for i in stdin.readline().split()]\n    hs = [int(i) for i in stdin.readline().split()]\n    cx = int(sum(xs) / n)\n    cy = int(sum(ys) / n)\n    h = int(sum(hs) / n)\n    return str(cx) + \" \" + str(cy) + \" \" + str(h)"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xyh = []\n    for i in range(n):\n        tmp = [int(x) for x in stdin.readline().split(' ')]\n        xyh.append(tmp)\n    ans = []\n    for xyh_ in xyh:\n        x, y, h = xyh_\n        C_X, C_Y, H = x, y, h\n        for i in xyh:\n            x_, y_, h_ = i\n            if x_ == x and y_ == y:\n                continue\n            if h_ < max(h - abs(x_ - C_X) - abs(y_ - C_Y), 0):\n                break\n            if h_ > max(h - abs(x_ - C_X) - abs(y_ - C_Y), 0):\n                H = h_\n                C_X, C_Y = x_, y_\n                ans.append(str(C_X) +'' + str(C_Y) +'' + str(H))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    datas = []\n    for _ in range(n):\n        x, y, h = stdin.readline().split()\n        x, y, h = int(x), int(y), int(h)\n        datas.append((x, y, h))\n\n    datas.sort(key=lambda x: x[2])\n    x, y, h = datas[0]\n    \n    for i in range(1, n):\n        x, y, h = datas[i]\n        if x < y or abs(x - y) < h:\n            return \"NO\"\n        else:\n            x, y = x, y\n            while h >= abs(x - y):\n                x, y = x - abs(x - y), y - abs(x - y)\n    return \"YES\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_x_y_h = [tuple(int(s) for s in stdin.split(' ')) for _ in range(N)]\n    \n    # Sort input\n    num_x_y_h.sort()\n    \n    # Find center and height\n    x_y = [num_x_y_h[i][:2] for i in range(N)]\n    h = [num_x_y_h[i][2] for i in range(N)]\n    h_min = min(h)\n    \n    # Find the most frequent x or y\n    d = Counter(x_y)\n    x = d.most_common(1)[0][0]\n    \n    # Find the most frequent y\n    d = Counter(y for x, y in x_y)\n    y = d.most_common(1)[0][0]\n    \n    # Find the center\n    center = (x, y)\n    \n    # Find the height\n    height = h_min + h\n    \n    return \" \".join(map(str, center + (height,)))\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{len(stdin)}\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return None\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    string = stdin\n    hug = 0\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if j!= i:\n                hug += 1\n                if string[i]!= string[j]:\n                    string = string[0:i] + string[j] + string[i+1:]\n                    if string[::-1] == string:\n                        print(hug)\n                        return\n    print(hug)\n    return"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    palindrome = stdin\n    hugs = 0\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[len(stdin)-1-i]:\n            continue\n        else:\n            palindrome = stdin[0:i] + stdin[i].upper() + stdin[i+1:len(stdin)-1]\n            hugs += 1\n    return hugs"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    hugs = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                hugs += 1\n    return hugs\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 1:\n        return 0\n    count = 0\n    while not isPalindrome(stdin):\n        count += 1\n        s = list(stdin)\n        pos = randint(0, len(stdin) - 1)\n        while s[pos] == s[pos - 1]:\n            pos = randint(0, len(stdin) - 1)\n        s[pos] = s[pos - 1]\n        stdin = \"\".join(s)\n    return count\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    return N[0]"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return 'Yes'\n    \n    return 'No'\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        N = int(stdin)\n        if N == 1:\n            print('Yes')\n        elif N == 2 or N == 3 or N == 5 or N == 7:\n            print('Yes')\n        elif N == 4 or N == 6 or N == 8 or N == 9:\n            print('No')\n        elif N < 1 or N > 9:\n            print('No')\n        elif N % 2!= 0:\n            print('No')\n        elif N % 2 == 0:\n            if N % 10 == 0:\n                print('No')\n            else:\n                print('Yes')\n    except ValueError:\n        print('No')\n    \n    return ''\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 9:\n        return \"Yes\"\n    elif 10 <= N <= 99:\n        for i in range(1, 9):\n            if N % i == 0:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Split input string into individual digits\n    n = stdin.split()\n\n    # Create a list of all possible products between 1 and 9\n    products = [i * j for i in range(1, 10) for j in range(1, 10)]\n\n    # Iterate through list of products\n    # Check if each product is contained in the input string\n    # If so, print Yes\n    # If not, print No\n    for product in products:\n        if str(product) in n:\n            print(\"Yes\")\n            return \"Yes\"\n    print(\"No\")\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 9 + 1):\n        for j in range(1, 9 + 1):\n            if N == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.isdigit() and eval(stdin) == int(eval(stdin)) else 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\" if stdin == '1\\n' else \"No\"\n    \n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 9 and N < 100:\n        return \"Yes\"\n    if N <= 9 or N >= 100:\n        return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    ans = 'Yes' if is_multiple_of_nine(num) else 'No'\n    return ans\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, *L = map(int, stdin.split())\n    from collections import Counter\n    count = Counter(L)\n    count = list(count.items())\n    count.sort(key=lambda x:x[0])\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    triangles = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if nums[i] + nums[j] > nums[k] and nums[j] + nums[k] > nums[i] and nums[k] + nums[i] > nums[j]:\n                    triangles += 1\n\n    return triangles\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    l = [int(x) for x in stdin.split()]\n    l.sort()\n    cnt = 0\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            if j == i+1:\n                for k in range(j+1, len(l)):\n                    if k == j+1:\n                        if l[k] < l[i] + l[j]:\n                            cnt += 1\n            else:\n                if l[i] + l[j] > l[j+1]:\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split('\\n')[0].split())\n    cnt = 0\n    for i in range(1, N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if L[i]!= L[j] and L[j]!= L[k] and L[k]!= L[i]:\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    l = [int(x) for x in stdin.strip().split(' ')]\n    n = l[0]\n    l = l[1:]\n    num_cases = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i]:\n                    num_cases += 1\n    return str(num_cases)\n    \n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 4 9 7 5\")\n    '5'\n    \"\"\"\n    nums = [int(n) for n in stdin.split()]\n    return str(count_triplets(*nums))\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split('\\n')))\n    lengths = inputs[1:]\n    print(sum(sum(lengths[i] < lengths[j] < lengths[k] for j in range(i + 1, len(lengths))) for i in range(len(lengths))))\n    # 1, 2, 3, 4, 5\n\n    return \"Keshav\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.strip().split(' ')]\n    total = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if l[i - 1] + l[j - 1] < l[k - 1] or l[i - 1] + l[k - 1] < l[j - 1] or l[j - 1] + l[k - 1] < l[i - 1]:\n                    continue\n                else:\n                    total += 1\n    return str(total)\n\n\"\"\"\n\nfrom unittest import TestCase\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        l = [int(x) for x in stdin.strip().split(' ')]\n        total = 0\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                for k in range(j + 1, n + 1):\n                    if l[i - 1] + l[j - 1] < l[k - 1] or l[i - 1] + l[k - 1] < l[j - 1] or l[j - 1] + l[k - 1] < l[i - 1]:\n                        continue\n                    else:\n                        total += 1\n        return str(total)\n\n\nclass TestSolution(TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(\"5\", self.solution(\"5 4 4 9 7 5\"))\n        self.assertEqual(\"0\", self.solution(\"10 10 10 10 10\"))\n        self.assertEqual(\"10\", self.solution(\"1 10 10 10 10\"))\n        self.assertEqual(\"0\", self.solution(\"1 1 1 1 1\"))\n        self.assertEqual(\"8\", self.solution(\"8 8 8 8\"))\n        self.assertEqual(\"0\", self.solution(\"5 4 9 7 5\"))\n        self.assertEqual(\"0\", self.solution(\"4 4 9 7 5\"))\n        self.assertEqual(\"0\", self.solution(\"4 4 4 4\"))\n        self.assertEqual(\"0\", self.solution(\"4 4 4 4\"))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that\n    satisfy both of the following conditions: - L_i, L_j, and L_k are all different. -\n    There exists a triangle whose sides have lengths L_i, L_j, and L_k.\"\"\"\n    triples = 0\n    for line in stdin:\n        line = line.split()\n        lengths = [int(length) for length in line]\n        triples += len(list(filter(lambda x: sum(x) == sum(lengths), itertools.combinations(lengths, 3))))\n    return str(triples)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your solution goes here\n    pass"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = a * b\n    if c <= 9:\n        return str(c)\n    else:\n        return \"-\"\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    if (A < 1 or A > 20) or (B < 1 or B > 20):\n        return -1\n    if A == 1:\n        return B\n    if B == 1:\n        return A\n    if A < B:\n        return A * B\n    else:\n        return -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A * B >= 10:\n        return str(A * B)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 0 or a >= 20 or b <= 0 or b >= 20:\n        return '-1'\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if a * i + b * j == 20:\n                return i * j\n    return -1"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    a = int(input_data[0])\n    b = int(input_data[1])\n    if a * b > 9:\n        return '-1'\n    else:\n        return a * b\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B >= 10 and A * B <= 99:\n        return str(A * B)\n    return '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b < 10 or a * b > 99:\n        return -1\n    return a * b\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given problem statement.\n    Notes:\n        The output format is not specified here. You are supposed to print the result.\n    Args:\n        stdin (str): The input.\n    Returns:\n        str: The solution for the task.\n    \"\"\"\n    a, b = map(int, stdin.split())\n    if a * b < 10:\n        return -1\n    return f\"{a} \\times {b} = {a * b}\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return str(A * B) if A * B <= 20 else '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # 2D array to hold our game board\n    board = []\n    # Read in N and M\n    # Note: N+1 rows and M columns\n    N, M = [int(num) for num in stdin.split()]\n    # Create the N+1xM board\n    for _ in range(N+1):\n        board.append([])\n        for _ in range(M):\n            board[-1].append(0)\n    # Read in the starting coordinates for each piece\n    # Store them in our board\n    for i in range(1, N+1):\n        board[i] = [int(num) for num in stdin.split()[i*M:(i+1)*M]]\n    # Initialize the number of moves\n    moves = 0\n    # Find the max starting coordinate for the board\n    max_coord = max(max(x) for x in board)\n    # Initialize the visited matrix\n    visited = []\n    # Create a matrix of 1s that matches the shape of the board\n    for _ in range(max_coord+1):\n        visited.append([])\n        for _ in range(M):\n            visited[-1].append(1)\n    # Create a queue for the bfs search\n    queue = []\n    # Create a set of coordinates to be visited\n    visit_set = set()\n    # Visit the starting coordinates\n    for i in range(1, N+1):\n        for j in range(M):\n            if board[i][j] not in visit_set:\n                visit_set.add(board[i][j])\n                queue.append((i, j, board[i][j]))\n    # Perform BFS to visit all coordinates\n    while len(queue) > 0:\n        row, col, value = queue.pop(0)\n        # Skip if we've visited this coordinate\n        if visited[value][col] == 1:\n            continue\n        # Mark as visited\n        visited[value][col] = 1\n        # Increment our move counter\n        moves += 1\n        # Add the surrounding coordinates to the queue\n        if row < N:\n            queue.append((row+1, col, value))\n        if row > 1:\n            queue.append((row-1, col, value))\n        if col < M:\n            queue.append((row, col+1, value))\n        if col > 1:\n            queue.append((row, col-1, value))\n    # Return the number of moves required\n    return moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Declare and initialize variables\n    n, m = map(int, stdin.readline().split())\n    path = stdin.readline().split()\n    arr = [0]*n\n    min_moves = 0\n    path_set = set()\n\n    # Loop through the coordinates of the path\n    for i in range(m):\n        arr[int(path[i])-1] += 1\n        path_set.add(int(path[i]))\n\n    # Calculate the total number of moves to get to the end\n    for i in range(len(arr)):\n        if arr[i] > 1:\n            min_moves += arr[i] - 1\n\n    # Return the minimum number of moves\n    return str(min_moves)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    X = list(map(int, stdin.split(' ')[1:]))\n\n    return N, M, X"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Split input by line\n    line1, line2 = stdin.split('\\n')\n    # Split by spaces\n    n, m = [int(x) for x in line1.split(' ')]\n    x = [int(x) for x in line2.split(' ')]\n    # Sort the list by increasing value\n    x.sort()\n    # Initialize a result list\n    result = [0 for i in range(n)]\n    # Define the maximum value\n    maximum = x[m-1]\n    # Define a variable to store the minimum value\n    minimum = 0\n    # Define a variable to store the current count\n    count = 0\n    # Define a variable to store the current minimum\n    minimum_value = 0\n    # Define a variable to store the current maximum\n    maximum_value = 0\n    # Iterate through each element in the list\n    for i in range(n):\n        # Update the minimum value\n        if x[i] < minimum:\n            minimum = x[i]\n        # Update the maximum value\n        if x[i] > maximum:\n            maximum = x[i]\n        # Update the minimum value\n        if x[i] < minimum_value:\n            minimum_value = x[i]\n        # Update the maximum value\n        if x[i] > maximum_value:\n            maximum_value = x[i]\n        # Increment the counter by 1\n        count += 1\n        # Update the result\n        result[i] = count\n    # The minimum number of moves required is the minimum value\n    return minimum_value\n    # return result\n    # Return the minimum value from the result list\n    # return result[n-1]\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    coordinates = list(map(int, stdin.split(' ')))\n    \n    def getDistance(coordinate: int) -> int:\n        return abs(coordinate - n)\n\n    return min(list(map(getDistance, coordinates)))\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n\n    min_moves = 0\n    for i in range(M):\n        X[i] += 1\n        X[i] %= 2\n        min_moves += 1\n        if X[i] == 0:\n            min_moves += N\n        for j in range(i + 1, M):\n            X[j] += 2\n            X[j] %= 2\n            min_moves += 1\n            if X[j] == 0:\n                min_moves += N\n    return str(min_moves)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of moves required to achieve the objective.\"\"\"\n    # Read input from stdin\n    n, m = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n\n    # Solve problem\n    return str(m - 1)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    coordinates = list(map(int, stdin.split(\" \")[1:]))\n    # sort the coordinates in ascending order\n    coordinates.sort()\n\n    min_moves = float(\"inf\")\n    for i in range(len(coordinates)):\n        x = coordinates[i]\n        moves = 0\n        # check if x is in the middle\n        if x < (N - 1) // 2:\n            moves += (x + 1) // 2\n            if x + 1 < N - 1:\n                moves += (N - x - 2) // 2\n        else:\n            moves += N - x - 1\n        if moves < min_moves:\n            min_moves = moves\n    return min_moves"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    # a = [0, 2, 2, 2, 2]\n    d = {}\n    for i in range(n):\n        c = a[i]\n        d[c] = i\n    ans = 0\n    x = m\n    while x > n:\n        x = x % n\n    while x!= n:\n        ans += 1\n        x = d[x]\n        x = (x + 1) % n\n    return ans\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    if m == 1:\n        return n\n    lst = [0] * (max(a)+1)\n    lst[0] = 1\n    for i in a:\n        for j in range(1, len(lst)):\n            if j - i >= 0:\n                lst[j] += lst[j - i]\n            if j + i <= len(lst) - 1:\n                lst[j] += lst[j + i]\n    return lst[-1]\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_cities, num_roads, num_options = [int(s) for s in stdin.split(' ')]\n    roads = [[int(s) for s in stdin.split('\\n')[i].split(' ')] for i in range(num_roads)]\n    roads.sort(key=lambda x: x[0])\n    \n    \n    \n    \n    # First find all paths from the capital (city 1) to all other cities\n    capital = 1\n    cities = [capital]\n    paths = [[capital]]\n    for road in roads:\n        if road[0] == capital:\n            paths.append([road[1]])\n        elif road[1] == capital:\n            paths[-1].append(road[0])\n            \n    for i in range(num_cities - 1):\n        new_paths = []\n        for path in paths:\n            for road in roads:\n                if road[0] == path[-1]:\n                    new_paths.append(path + [road[1]])\n                elif road[1] == path[-1]:\n                    new_paths.append(path + [road[0]])\n        paths = new_paths\n        \n    paths_dict = {path: i + 2 for i, path in enumerate(paths)}\n    \n    # Check if all paths connect all cities\n    all_connected = False\n    for path in paths:\n        if all_connected:\n            break\n        for i in range(len(path)):\n            city = path[i]\n            connected = False\n            for path_ in paths:\n                if city in path_ and len(set(path_) - set(path)) == 0:\n                    connected = True\n            if not connected:\n                break\n        if connected:\n            all_connected = True\n    \n    if not all_connected:\n        return \"IMPOSSIBLE\"\n    \n    # If all roads connect all cities, then find the minimum sum of the distances\n    min_sum = sum([abs(x - y) for x, y in zip(paths[0], paths[-1])])\n    \n    # If we have at least num_options many ways, then we can return them all\n    if len(paths) >= num_options:\n        return \" \".join([str(paths_dict[path]) for path in paths])\n    \n    # Otherwise we have to find the shortest set of paths to each city\n    for i in range(len(paths)):\n        for j in range(i + 1, len(paths)):\n            sum_ = sum([abs(x - y) for x, y in zip(paths[i], paths[j])])\n            if sum_ < min_sum:\n                min_sum = sum_\n                \n    paths = [[paths_dict[path] for path in path] for path in paths]\n    \n    # Find the minimum number of roads required to make each shortest path connect all cities\n    min_num_roads = len(paths[0])\n    \n    for path in paths:\n        if len(path) < min_num_roads:\n            min_num_roads = len(path)\n            \n    \n    # Then we have to choose roads so that the sum of distances is minimized\n    num_roads_to_add = num_cities - 1 - min_num_roads\n    \n    roads_to_add = []\n    \n    if num_roads_to_add == 0:\n        return \" \".join([str(paths_dict[path]) for path in paths])\n    \n    # Find the roads to add\n    for path in paths:\n        sum_ = 0\n        for i in range(len(path)):\n            for j in range(i + 1, len(path)):\n                sum_ += abs(path[i] - path[j])\n        \n        roads_to_add.append(sum_)\n        \n    roads_to_add = sorted(roads_to_add)[:num_roads_to_add]\n    \n    # Add roads so that the sum of distances is minimized\n    for i in range(num_roads_to_add):\n        roads.append([paths[0][i], paths[-1][i]])\n        \n        # Add paths so that the sum of distances is minimized\n        for path in paths:\n            path.append(paths[0][i])\n            path.append(paths[-1][i])\n            \n        paths_dict[paths[0][i]] = len(paths) + 2\n        paths_dict[paths[-1][i]] = len(paths) + 2\n        paths.append([paths[0][i], paths[-1][i]])\n        \n        roads_to_add"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # line = stdin.readline().rstrip()\n    # n, m, k = [int(x) for x in line.split()]\n    n, m, k = list(map(int, stdin.split()))\n    road = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    road.sort()\n    road.append([road[-1][1], road[0][1]])\n    # road.sort(reverse=True)\n    # road = [[road[0][1], road[0][0]]] + road[1:]\n    # print(road)\n    graph = {}\n    visited = set()\n    # key = []\n    for start, end in road:\n        if start in graph:\n            graph[start].append(end)\n        else:\n            graph[start] = [end]\n        if end in graph:\n            graph[end].append(start)\n        else:\n            graph[end] = [start]\n    ans = []\n    for i in range(1, n+1):\n        if i not in visited:\n            visited.add(i)\n            queue = [i]\n            while len(queue) > 0:\n                cur = queue.pop()\n                if cur in graph:\n                    for neighbour in graph[cur]:\n                        if neighbour not in visited:\n                            visited.add(neighbour)\n                            queue.append(neighbour)\n            ans.append(visited)\n            visited.clear()\n        else:\n            continue\n    print(ans)\n    if len(ans) < k:\n        print('0'*m)\n        return\n    for i in range(k):\n        if i >= len(ans):\n            continue\n        print(str(len(ans[i]))+' '+''.join(['1' if x in ans[i] else '0' for x in range(1, n+1)]))\n\nsolution(str(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first line of the input contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 2\\cdot10^5$, $n-1 \\le m \\le 2\\cdot10^5$, $1 \\le k \\le 2\\cdot10^5$), where $n$ is the number of cities in the country, $m$ is the number of roads and $k$ is the number of options to choose a set of roads for repair. It is guaranteed that $m \\cdot k \\le 10^6$.\n\nThe following $m$ lines describe the roads, one road per line. Each line contains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\ne b_i$) \u2014 the numbers of the cities that the $i$-th road connects. There is at most one road between a pair of cities. The given set of roads is such that you can reach any city from the capital.\n\n    :param stdin: string of input data\n    :return: string of solution\n    \"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here.\n    :param stdin: The standard input\n    :return: The solution as a string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    roads = [tuple(int(x) for x in stdin.split(' ')) for _ in range(m)]\n    destinations = defaultdict(set)\n    for a, b in roads:\n        destinations[a].add(b)\n        destinations[b].add(a)\n\n    from itertools import combinations\n    def get_roads(city: int, roads: set, n: int):\n        return set([x for x in combinations(roads, n - 1) if city not in x])\n    options = [get_roads(1, destinations[1], k) for _ in range(k)]\n    for i in range(2, n):\n        options.append(get_roads(i, destinations[i], k))\n\n    options = set([frozenset(x) for x in options])\n\n    for x in options:\n        for road in x:\n            roads = list(roads)\n            roads.remove(road)\n            for b in roads:\n                if b not in destinations[1]:\n                    break\n            else:\n                print(''.join(['1' if road in roads else '0' for road in roads]))\n\n    return ''\n    "
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to find the minimum roads to be cut\"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    print(m, k)\n    roads = []\n    for i in range(m):\n        roads.append([int(x) for x in stdin.split()])\n\n    print(roads)\n\n    print(min([x[1] for x in roads]))\n\n    return \"\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    edges = [[int(i) for i in stdin.split()] for _ in range(m)]\n    # make edges bidirectional\n    for i in range(len(edges)):\n        edges[i][0], edges[i][1] = edges[i][1], edges[i][0]\n    roads = [[[] for _ in range(n)] for _ in range(n)]\n    for edge in edges:\n        roads[edge[0] - 1][edge[1] - 1].append(edge[2])\n        roads[edge[1] - 1][edge[0] - 1].append(edge[2])\n    # create graph from roads\n    graph = Graph(n)\n    for r in range(n):\n        graph.add_node(r + 1)\n    for row in roads:\n        for c in row:\n            for e in c:\n                graph.add_edge(row.index(c) + 1, c.index(e) + 1, e)\n    # graph.print_graph()\n    # TODO: print all paths of length k\n    # TODO: print number of paths of length k\n    # TODO: print edges used\n\n    return ''\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split(\"\\n\")[0].split())\n    roads = []\n    for i in range(M):\n        roads.append(tuple(map(int, stdin.split(\"\\n\")[i + 1].split())))\n    roads = set(roads)\n    roads_dict = {x: [] for x in range(1, N + 1)}\n    for x in roads:\n        roads_dict[x[0]].append(x[1])\n        roads_dict[x[1]].append(x[0])\n    print(roads_dict)\n    roads_dict = {x: set(roads_dict[x]) for x in range(1, N + 1)}\n    print(roads_dict)\n    targets = set(range(1, N + 1))\n    print(targets)\n    subsets = itertools.combinations(targets, K)\n    print(subsets)\n    ans = []\n    for x in subsets:\n        subset = set(x)\n        print(subset)\n        for road in roads_dict[1]:\n            if road in subset:\n                subset.add(road)\n            else:\n                subset.discard(road)\n        if subset == targets:\n            ans.append(''.join('1' if i in subset else '0' for i in range(1, N + 1)))\n    return ans\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    roads.sort(key=lambda x: x[2], reverse=True)\n    path = [[0 for _ in range(n)] for _ in range(n)]\n    for a, b, w in roads:\n        path[a - 1][b - 1] = w\n    path = sorted([sorted(row) for row in path])\n    dp = [[float(\"inf\")] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            for d in range(1, n):\n                if dp[j][i] + path[j][i] < dp[j + d][i]:\n                    dp[j + d][i] = dp[j][i] + path[j][i]\n    for row in dp:\n        print(*row)\n    return \"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    parts, wall = [int(x) for x in stdin.split('\\n')]\n    parts_heights = [int(x) for x in stdin.split('\\n')]\n    for i in range(1, len(parts_heights)):\n        parts_heights[i] += parts_heights[i - 1]\n    max_height = parts_heights[-1]\n    if max_height == 0:\n        return 'YES'\n    parts_heights.append(0)\n    parts_heights.insert(0, 0)\n    parts_heights = [x - y for x, y in zip(parts_heights[1:], parts_heights)]\n    parts_heights = [x for x in parts_heights if x > 0]\n    if len(parts_heights) == 0:\n        return 'YES'\n    for i in range(1, len(parts_heights)):\n        if parts_heights[i] == parts_heights[i - 1]:\n            continue\n        if parts_heights[i - 1] == 0 and parts_heights[i] >= 2:\n            return 'YES'\n        if parts_heights[i] < 2 or parts_heights[i - 1] - parts_heights[i] < 2:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nprint(solution(input()))\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    if len(set(a)) == 1:\n        print(\"YES\")\n    elif len(set(a)) == 2:\n        if a[1] - a[0] == a[-1] - a[-2]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    for x in range(n-1, 0, -1):\n        if a[x] == a[x-1]:\n            continue\n        if a[x] == a[x-1]+1:\n            a[x] = a[x-1] + 2\n        if a[x] == a[x-1]-1:\n            a[x] = a[x-1] - 2\n            if a[x] < 0:\n                return 'NO'\n    if a[0] == a[1]:\n        return 'YES'\n    if a[0] == a[1] + 1:\n        return 'YES'\n    if a[0] == a[1] - 1:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    parts = stdin.split('\\n')\n    n = int(parts[0])\n    heights = list(map(int, parts[1].split(' ')))\n    if n == 1:\n        if heights[0] >= 2:\n            return 'YES'\n        return 'NO'\n    if max(heights) >= n * 2:\n        return 'YES'\n    for i in range(1, n - 1):\n        if heights[i] >= 2:\n            continue\n        if heights[i + 1] >= heights[i]:\n            return 'NO'\n        if heights[i - 1] >= heights[i]:\n            return 'NO'\n    if heights[0] < 2:\n        return 'NO'\n    if heights[-1] < 2:\n        return 'NO'\n    if heights[-2] < 2:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    n = a[0]\n    b = a[1:]\n    def rec(a, n):\n        if len(a) == n:\n            if len(set(a)) == 1:\n                return True\n            else:\n                return False\n        else:\n            for i in range(2):\n                if a[0] + i * 2 <= 10 and a[-1] + i * 2 <= 10:\n                    a.append(a[0] + i * 2)\n                    a.append(a[-1] + i * 2)\n                    if rec(a[1:-1], n):\n                        return True\n                    else:\n                        a.pop()\n                        a.pop()\n        return False\n    return \"YES\" if rec(b, n) else \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vova's family is building the Great Vova Wall (named by Vova himself).\n    Vova's parents, grandparents, grand-grandparents contributed to it.\n    Now it's totally up to Vova to put the finishing touches.\n\n    The current state of the wall can be respresented by a sequence $a$ of $n$ integers,\n    with $a_i$ being the height of the $i$-th part of the wall.\n\n    Vova can only use $2 \\times 1$ bricks to put in the wall (he has infinite supply of them,\n    however).\n\n    Vova can put bricks horizontally on the neighboring parts of the wall of equal height.\n    It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$,\n    then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't\n    put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$\n    of the wall or to the right of part $n$ of it).\n\n    The next paragraph is specific to the version 1 of the problem.\n\n    Vova can also put bricks vertically. That means increasing height of any part of the wall by 2.\n\n    Vova is a perfectionist, so he considers the wall completed when:\n\n    all parts of the wall has the same height;  the wall has no empty spaces inside it.\n\n    Can Vova complete the wall using any amount of bricks (possibly zero)?\n\n    :param stdin: input\n    :return: solution string\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        if d[i] == 0:\n            return \"NO\"\n    if min(a) == 1 and max(a) == n:\n        return \"YES\"\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    for i in d:\n        if d[i] == 1:\n            return \"NO\"\n    for i in range(n):\n        if a[i] - 1 not in d:\n            return \"NO\"\n        if a[i] + 1 not in d:\n            return \"NO\"\n        if d[a[i] - 1] <= 2 and d[a[i] + 1] <= 2:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n: int\n    arr: List[int]\n    '''\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n\n    def check_wall(arr):\n        for i in range(len(arr) - 1):\n            if abs(arr[i] - arr[i + 1]) > 1:\n                return False\n        return True\n\n    if check_wall(arr):\n        return \"YES\"\n\n    for i in range(n):\n        arr_copy = arr[:]\n        if abs(arr_copy[i] - arr_copy[i + 1]) > 1:\n            break\n        arr_copy[i] += 2\n        if check_wall(arr_copy):\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n2 5 3\\n')\n    YES\n    >>> solution('5\\n2 1 1 2 5\\n')\n    YES\n    >>> solution('3\\n4 5 3\\n')\n    NO\n    \"\"\"\n    n = stdin.splitlines()[0]\n    height = stdin.splitlines()[1]\n    height = list(map(int, height.split()))\n    if len(set(height))!= 1:\n        return 'NO'\n    parts = list(range(len(height)))\n    parts.reverse()\n    height.reverse()\n    for part in parts:\n        if part == parts[0]:\n            if part!= 0:\n                height[part] = height[part] + height[part - 1]\n                if part == parts[-1] and height[part]!= parts[-1]:\n                    return 'NO'\n        else:\n            if part!= 0 and height[part] == height[part - 1]:\n                height[part] = height[part] + height[part - 2]\n                if part == parts[-1] and height[part]!= parts[-1]:\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    count = 0\n    while H > 0:\n        H += d[count]\n        if H <= 0:\n            return count\n        count += 1\n    return -1\n\nprint(solution(\"1000 6 -100 -200 -300 125 77 -4\"))"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(i) for i in stdin.split(' ')]\n    d = [int(i) for i in stdin.split(' ')]\n    d = deque(d)\n    if d[0] < 0:\n        t = 0\n        while d and d[0] < 0:\n            d.rotate(1)\n            t += 1\n        d.rotate(t)\n    else:\n        t = 1\n        d.appendleft(0)\n    i = 0\n    while d and H > 0:\n        if d[0] >= 0:\n            H += d[0]\n            d[0] = 0\n        else:\n            d[0] += H\n            H = 0\n        t += 1\n        if t == n:\n            if d[0] >= 0:\n                break\n            t = 0\n        d.rotate(-1)\n        i += 1\n    if H > 0:\n        return -1\n    return i\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, N = [int(i) for i in stdin.split(\" \")]\n    d = [int(i) for i in stdin.split(\" \")]\n    m = [0] * N\n    m[0] = H\n    for i in range(1, N):\n        m[i] = m[i-1] + d[i-1]\n        if m[i] <= 0:\n            return str(i)"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    monster_hp = H\n    damage_per_round = map(int, stdin.split())\n    current_round = 0\n    while monster_hp > 0:\n        monster_hp += sum(damage_per_round[:current_round + 1])\n        if monster_hp <= 0:\n            return current_round + 1\n        current_round += 1\n    return -1"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    hero = []\n    monster = []\n    for i in range(n):\n        tmp = stdin.split()[i]\n        hero.append(int(tmp))\n        monster.append(int(tmp))\n    # print(hero, monster)\n    idx = 0\n    while monster[0] > 0:\n        # print(idx, monster)\n        for i in range(n):\n            if i % 2 == 0:\n                monster[i] += hero[i]\n            else:\n                monster[i] -= hero[i]\n        # print(monster)\n        for i in range(n):\n            if monster[i] < 0:\n                monster[i] = 0\n        # print(monster)\n        idx += 1\n    return idx"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.readline().split())\n    h_lst = [int(x) for x in stdin.readline().split()]\n    h = H\n    for i in range(N):\n        h += h_lst[i]\n        if h <= 0:\n            return str(i + 1)\n    return '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = [int(x) for x in stdin.split()]\n    # 1. H \u044d\u0442\u043e \u0445\u043e\u0442\u044c \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430, \u043d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0431\u043e\u044f\n    # 2. \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u044d\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    time = 1\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0447\u043a\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0434\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n    # \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0441\u0443\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \"\u0441\"\n    while H > 0:\n        # \u044d\u0442\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0443\u043d\u0434\u0430\n        time = time + 1\n        # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\n        for i in d:\n            # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 H \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u044d\u0442\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445\n            H = H + i\n            # \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 0, \u0442\u043e \u044d\u0442\u043e \u0431\u044b\u043b \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0443\u043d\u0434, \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e\n            if H <= 0:\n                # \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430 \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441 \u043d\u043e\u0432\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0435\u0439\n                break\n    return time\n\nprint(solution(input()))\n\n\"\"\"\n\u0412\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0430\u043c\u0443\u044e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e Python \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0435\u0435 \u0437\u0430 $n$ \u043c\u0438\u043d\u0443\u0442. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 $n$, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0435\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u0438\u043d\u0443\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c.\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b $k_0, \\dots, k_n$, \u0433\u0434\u0435 $k_i$ - \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u0438\u043d\u0443\u0442, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0431\u0438\u0442\u044c \u043c\u043e\u043d\u0441\u0442\u0440\u0430.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0431\u0438\u0442\u044c \u043c\u043e\u043d\u0441\u0442\u0440\u0430 \u0437\u0430 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f, \u0442\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 -1.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ ($1 \\le n \\le 10^6$) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0438\u043d\u0443\u0442, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0431\u0438\u0442\u044c \u043c\u043e\u043d\u0441\u0442\u0440\u0430. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $d_0, \\dots, d_{n-1}$, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043c\u0438\u043d\u0443\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0431\u0438\u0442\u044c \u043c\u043e\u043d\u0441\u0442\u0440\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a \u0434\u0430\u043d\u044b \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $d_i$ ($-10^6 \\le d_i \\le 10^6$) \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043c\u0438\u043d\u0443\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043c\u0438\u043d\u0443\u0442. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\ufffd"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 4\\n-3 -6 5 4\")\n    4999999999996\n    \"\"\"\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    res = H\n    for i in range(n):\n        res += d[i]\n        if res <= 0:\n            return str(i + 1)\n    return \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hero, monsters = stdin.split(\"\\n\")\n    hero_hp, hero_damage = [int(hero.split(\" \")[1]), int(hero.split(\" \")[2])]\n    monsters_hp, monsters_damage = [int(monster.split(\" \")[1]), int(monster.split(\" \")[2])]\n    for i in range(int(monsters.split(\" \")[0])):\n        monsters_hp -= hero_damage\n        if monsters_hp <= 0:\n            return str(i + 1)\n        hero_hp -= monsters_damage\n        if hero_hp <= 0:\n            return \"-1\"\n    return \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    H = int(a[0])\n    n = int(a[1])\n    d = [int(i) for i in a[2].split(' ')]\n    if len(set(d))!= len(d):\n        print('-1')\n        return\n    print(bfs(H, n, d))\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_count = 0\n    result = ''\n    for x in range(0, len(stdin) - 1):\n        for y in range(0, len(stdin) - 1):\n            if stdin[x] == stdin[y]:\n                continue\n            if stdin[x] + stdin[y] > result:\n                result = stdin[x] + stdin[y]\n                max_count = 1\n            elif stdin[x] + stdin[y] == result:\n                max_count += 1\n\n    return result\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom collections import Counter\n\nnumber_of_cases = int(stdin.readline().rstrip())\nfor _ in range(number_of_cases):\n    length_of_string = int(stdin.readline().rstrip())\n    string = stdin.readline().rstrip()\n    two_gram = Counter(string[i:i + 2] for i in range(0, len(string) - 1)).most_common(1)\n    print(two_gram[0][0])\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns most frequent two-gram.\n    >>> solution('ABACABA')\n    'AB'\n    >>> solution('ZZZAA')\n    'ZZ'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    len_n: int = int(stdin[0])\n    s: str = stdin[1]\n    len_s: int = len(s)\n    d: list = [0 for _ in range(len_s)]\n    for i in range(len_s):\n        for j in range(i+1, len_s):\n            if s[i] == s[j]:\n                d[j] = d[j] + 1\n    for i in range(len_s):\n        for j in range(i+1, len_s):\n            if d[j] == max(d) and s[i]!= s[j]:\n                print(s[i:j+1])\n    return ''"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count_dict = {}\n    max_count = 0\n    for i in range(n):\n        cur = s[i]\n        if cur in count_dict:\n            count_dict[cur] += 1\n            if count_dict[cur] > max_count:\n                max_count = count_dict[cur]\n        else:\n            count_dict[cur] = 1\n\n    for i in range(n):\n        cur = s[i]\n        if cur in count_dict and count_dict[cur] == max_count:\n            print(cur)\n            return\n\n\nsolution(input())\n\n'''"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin[0]\n    t = stdin[1]\n    \n    return (len(s) + len(t)) - max(len(s), len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    while len(s)!= 0:\n        s = s[1:]\n    while len(t)!= 0:\n        t = t[1:]\n    return max(len(s), len(t))"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    return len(s) + len(t) - 2 * (max(len(s), len(t)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return str(len(s)+len(t)-2*max(len(s),len(t)))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    c = abs(len(a) - len(b))\n    if len(a) > len(b):\n        return len(a) + c\n    return len(b) + c\n\nprint(solution(input()))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    x, y = len(s), len(t)\n    return x + y\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr = sorted(set(arr))\n    visited = set()\n    low = 1\n    high = min(arr[-1] - X, X - arr[0])\n    while low <= high:\n        mid = (low + high) // 2\n        for i in range(N):\n            visited.add(arr[i] + mid)\n        if len(visited) < N:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return high\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n    differences = [abs(distance - X) for distance in distances]\n    print(max(differences))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    cities = sorted(map(int, stdin.split(' ')))\n    s = [x] + cities + [x]\n    s.sort()\n    diff = s[1] - s[0]\n    for i in range(2, n + 1):\n        if (s[i] - s[i - 1]) > diff:\n            diff = s[i] - s[i - 1]\n    return str(diff)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum value of D that enables you to visit all the cities\n    :param stdin: input string\n    :return: the maximum value of D that enables you to visit all the cities\n    \"\"\"\n    n, x = list(map(int, stdin.split(' ')))\n    max_distance = 0\n    for y in stdin.split(' ')[1:]:\n        max_distance = max(max_distance, int(y) - x)\n        x = int(y)\n    return str(max_distance)\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the maximum value of D that enables you to visit all the cities.\"\"\"\n    _, *coords = stdin.split()\n    coords = list(map(int, coords))\n\n    return str(max(coords[i] - coords[i - 1] for i in range(1, len(coords))))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7 11\n   ... ''')\n    2\n    \"\"\"\n    # The current position of the traveler.\n    position = 0\n    # The number of cities to visit.\n    n = int(stdin.split('\\n')[0].split()[0])\n    # The coordinates of the cities.\n    cities = [int(x) for x in stdin.split('\\n')[1].split()]\n    # The maximum value of D.\n    max_d = 0\n    # The current number of cities visited.\n    num_cities = 0\n    # Iterate over the coordinates of the cities, and check whether or not\n    # the traveler can reach them.\n    for city in cities:\n        # Find the difference between the current position and the next city.\n        difference = abs(city - position)\n        # If the difference is not zero, the traveler has not reached the city.\n        if difference!= 0:\n            # If the difference is higher than the current number of cities visited,\n            # then we have visited more cities than previously.\n            if difference > num_cities:\n                # Therefore, the new maximum value of D is D.\n                max_d = max(max_d, num_cities)\n            # Otherwise, there is a more efficient way to get to the next city.\n            else:\n                # Therefore, the new maximum value of D is D - difference + 1.\n                max_d = max(max_d, max_d - difference + 1)\n            # And finally, the next city is now the current position.\n            position = city\n            # In the end, the number of cities visited increases by 1.\n            num_cities += 1\n    # In the end, we have visited all the cities and the maximum value of D is max_d.\n    return str(max_d)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 7 11\\n\")\n    '2'\n    \"\"\"\n    n, x = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n - 1):\n        if (lst[i] - x) * (x - lst[i - 1]) < 0:\n            res = max(abs(lst[i] - x), res)\n    return str(res)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split(' '))\n    return str(N - 1)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_maximum_distance(stdin))"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    len_str = len(stdin)\n    mid = int(len_str / 2)\n\n    first_half = stdin[:mid]\n    second_half = stdin[mid:]\n\n    if first_half == second_half[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    'Yes'\n    \"\"\"\n    i = 0\n    j = int(len(stdin) / 2)\n    while i < j:\n        if stdin[i]!= stdin[-1 - i]:\n            return \"No\"\n        i += 1\n        j -= 1\n    i = int(len(stdin) / 2)\n    j = len(stdin)\n    while i < j:\n        if stdin[i]!= stdin[-1 - i]:\n            return \"No\"\n        i += 1\n        j -= 1\n    return \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    palindrome = stdin[::-1]\n    if palindrome == stdin:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    middle_length = int((length - 1) / 2)\n    first_middle = stdin[:middle_length]\n    second_middle = stdin[middle_length + 1:]\n    if first_middle == first_middle[::-1] and second_middle == second_middle[::-1]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_list = list(stdin)\n\n    half = len(str_list) // 2\n    one_third = half // 3\n    half_plus_three = (len(str_list) // 2) + 3\n\n    one_third_list = str_list[:one_third]\n    two_third_list = str_list[one_third:half_plus_three]\n    three_third_list = str_list[half_plus_three:]\n\n    print(one_third_list)\n    print(two_third_list)\n    print(three_third_list)\n\n    if (one_third_list == three_third_list):\n        return 'Yes'\n    if (two_third_list == three_third_list):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    odd_chars = len(s) % 2\n    if odd_chars!= 0:\n        return 'No'\n    else:\n        if s == s[::-1]:\n            if len(s) <= 3:\n                return 'Yes'\n            else:\n                half_len = int(len(s) / 2)\n                first_half = s[:half_len]\n                second_half = s[half_len:]\n                if first_half == first_half[::-1] and second_half == second_half[::-1]:\n                    third_half = s[(len(s) + 1) / 2:]\n                    if third_half == third_half[::-1]:\n                        return 'Yes'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n        else:\n            return 'No'\n\nsolution(stdin)\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = len(stdin)\n    if n < 3 or n > 99:\n        return \"No\"\n    if n % 2 == 0:\n        return \"No\"\n    return \"Yes\" if stdin[0: int(n / 2)] == stdin[n - int(n / 2) : n] else \"No\"\n    pass\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the result of A \\times B as a string.\n\n    >>> solution(\"198 1.10\")\n    '217'\n    \"\"\"\n    a, b = map(float, stdin.split(\" \"))\n    return str(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    res = int(float(a) * float(b))\n    print(res)\n    return res\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = float(B)\n    return str(int(round(A * B)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return a * b"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = float(a), float(b)\n    return int(round(a*b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = float(b)\n    return str(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the integer solution to the given problem.\n\n    Time complexity: O(n) where n is the number of test cases.\n    Space complexity: O(1) excluding the output string.\"\"\"\n    a, b = map(float, stdin.split())\n    return int(a * b)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    return str(int(A) * int(B))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    print(result)\n    return\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return stdin\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    #...\n    t = int(stdin)\n    #TODO\n    for _ in range(t):\n        n = int(stdin)\n        if n % 2!= 0:\n            print(0)\n        else:\n            a = n // 2\n            b = a\n            if n % 2 == 0:\n                if a > b:\n                    print(0)\n                else:\n                    print(1)\n            else:\n                print(1)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gen_combinations(n: int) -> List[List[int]]:\n        if n < 2:\n            return []\n        if n == 2:\n            return [[1, 1]]\n        if n == 3:\n            return [[1, 2], [2, 1]]\n        if n == 4:\n            return [[1, 3], [2, 2]]\n        return [[1, n]] + gen_combinations(n - 1)\n\n    def find_solution(n: int) -> str:\n        combinations = gen_combinations(n)\n        solution = 0\n        for combination in combinations:\n            solution += combination[0] * combination[1]\n        if solution == n:\n            return 1\n        if solution > n:\n            return 0\n        return solution\n\n    def find_solution_binary_search(n: int) -> str:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        mid = n // 2\n        while True:\n            result = find_solution(mid)\n            if result == 0:\n                lower_bound = mid\n                mid = (lower_bound + mid) // 2\n            elif result == 1:\n                upper_bound = mid\n                mid = (lower_bound + mid + 1) // 2\n            else:\n                return result\n\n    for _ in range(int(stdin.readline())):\n        print(find_solution_binary_search(int(stdin.readline())))\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solution)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport sys\nfrom collections import deque\nfrom typing import Tuple, List\n\n\nclass Solution:\n    @staticmethod\n    def solve(n: int) -> int:\n        \"\"\"\n        Return the number of ways to distribute n candies between two sisters in such a way that:\n            Alice will get a greater amount of candies than Betty (i.e. a > b)\n            all the candies will be given to one of two sisters (i.e. a+b=n)\n\n        All the candies will be indistinguishable.\n\n        :param int n:\n        :return: int\n        \"\"\"\n        if n < 2:\n            return 0\n\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        if n < 2:\n            return 0\n\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n\n        return dp[-1] % 1000000007\n\n    @staticmethod\n    def solve_dp(n: int) -> int:\n        \"\"\"\n        Return the number of ways to distribute n candies between two sisters in such a way that:\n            Alice will get a greater amount of candies than Betty (i.e. a > b)\n            all the candies will be given to one of two sisters (i.e. a+b=n)\n        \n        All the candies will be indistinguishable.\n\n        :param int n:\n        :return: int\n        \"\"\"\n        if n < 2:\n            return 0\n\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n\n        return dp[-1] % 1000000007\n\n\nclass Solution2:\n    @staticmethod\n    def solve(n: int) -> int:\n        \"\"\"\n        Return the number of ways to distribute n candies between two sisters in such a way that:\n            Alice will get a greater amount of candies than Betty (i.e. a > b)\n            all the candies will be given to one of two sisters (i.e. a+b=n)\n        \n        All the candies will be indistinguishable.\n\n        :param int n:\n        :return: int\n        \"\"\"\n        a, b = 0, 0\n        q = deque([(a, b, n)])\n        res = set()\n        while q:\n            a, b, n = q.popleft()\n            if a + b == n:\n                return 1\n            if a + 1 < n:\n                q.append((a + 1, b, n))\n            if n - b - 1 > 0:\n                q.append((a, b + 1, n))\n            if n - b - 1 > 0 and n - a - 1 > 0:\n                q.append((a + 1, b + 1, n))\n\n        return 0\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # get number of test cases\n    num_of_test_cases = int(stdin.readline())\n    \n    # for each test case\n    for _ in range(num_of_test_cases):\n        n = int(stdin.readline())\n        \n        # keep track of the total number of ways for each possible sum\n        ways_to_sum = {0: 0}\n        \n        # start at 1 since we will always want to have a candidate\n        for candidate_sum in range(1, n+1):\n            ways_to_sum[candidate_sum] = 0\n            \n            # iterate through the previous sum\n            for previous_sum in range(0, candidate_sum):\n                # check if we can add a candidate\n                if candidate_sum - previous_sum in ways_to_sum:\n                    # add the way to sum and add to the ways to sum dictionary\n                    ways_to_sum[candidate_sum] += ways_to_sum[candidate_sum - previous_sum]\n                    \n        # print the number of ways to sum\n        print(ways_to_sum[n])\n        \n    return ''"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"Solution to the problem.\"\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 2\n   ... 3\n   ... 2000000000\n   ... 763243547\n   ... ''')\n    '3'\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '0'\n    >>> solution('''0\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '0'\n    >>> solution('''0\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '0'\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '1'\n    >>> solution('''0\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '0'\n    >>> solution('''0\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '0'\n    >>> solution('''0\n   ... 2\n   ... 3\n   ... 76243547\n   ... ''')\n    '0'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'''\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, s = [int(x) for x in stdin.split()]\n    cities = set()\n    road = []\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        cities.add(u)\n        cities.add(v)\n        road.append((u, v))\n    cities.add(s)\n    \n    result = 0\n    for c in cities:\n        if c!= s and (c, s) not in road and (s, c) not in road:\n            result += 1\n    \n    return str(result)\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"Finds the minimum number of new roads to be built to make all the cities reachable from the capital.\"\n   ..."
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    neighbours = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split(' ')]\n        neighbours[u].append(v)\n        neighbours[v].append(u)\n    visited = {i: False for i in range(1, n + 1)}\n    def bfs(start):\n        queue = deque()\n        queue.append(start)\n        visited[start] = True\n        while queue:\n            node = queue.popleft()\n            for neighbour in neighbours[node]:\n                if not visited[neighbour]:\n                    queue.append(neighbour)\n                    visited[neighbour] = True\n    bfs(s)\n    return str(n - sum(visited.values()))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, s = lines[0].split(' ')\n    n, m, s = int(n), int(m), int(s)\n    edges = []\n    for i in range(1, m + 1):\n        u, v = lines[i].split(' ')\n        u, v = int(u) - 1, int(v) - 1\n        edges.append((u, v))\n    return\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        roads.append((a, b))\n    roads = set(roads)\n    dist = [-1] * n\n    que = deque([s])\n    dist[s - 1] = 0\n    while que:\n        u = que.popleft()\n        for v in range(n):\n            if dist[v] == -1 and (u, v) in roads or (v, u) in roads:\n                que.append(v)\n                dist[v] = dist[u] + 1\n    return min([x for x in dist if x > 0])\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m, s = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p.insert(0, 0)\n    p = set(p)\n    while p:\n        x = p.pop()\n        for i in range(1, m + 1):\n            y = i\n            if p.__contains__(i):\n                p.remove(i)\n        for i in range(1, m + 1):\n            y = i\n            if p.__contains__(i):\n                p.remove(i)\n    print(m - len(p))\n    return m - len(p)\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(i) for i in stdin.split(' ')]\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = [int(j) for j in stdin.split('\\n')[i].split(' ')]\n        graph[a - 1].append(b - 1)\n    path = [False] * n\n    q = [s - 1]\n    path[s - 1] = True\n    while len(q) > 0:\n        v = q.pop(0)\n        for i in range(len(graph[v])):\n            w = graph[v][i]\n            if not path[w]:\n                path[w] = True\n                q.append(w)\n    cnt = 0\n    for i in range(n):\n        if not path[i]:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The expected weight of the team is the maximum weight of the boxers.\n\n    There are two possible cases:\n        1. The expected weight of the team is the same as the weight of the biggest boxer.\n        2. The expected weight of the team is higher than the weight of the heaviest boxer.\n\n    In the first case, the number of people in the team is the same as the number of boxers.\n    In the second case, the number of people in the team is the same as the number of boxers,\n    except that the heaviest boxer is added.\n    \"\"\"\n    n = int(stdin.readline())\n    weights = [int(w) for w in stdin.readline().split()]\n    expected = max(weights)\n    if expected in weights:\n        return str(n)\n    return str(n + 1)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    if len(weights) == 1:\n        return str(1)\n    boxes_counts = Counter(weights)\n    max_count = max(boxes_counts.values())\n    return str(max_count + 1)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Python3 code to find maximum number of\n    # people in a team so that all the\n    # boxers' weights are different\n\n    # Function to return the count of the\n    # number of people having same weight\n    def isSameWeight(arr, n):\n        m = 1\n        count = 0\n        for i in range(n):\n            if arr[i] == arr[i + 1]:\n                count += 1\n            else:\n                count += 1\n                m = max(m, count)\n                count = 1\n        return max(m, count)\n\n    # Function to return the count of the\n    # number of people having same weight\n    def isSameWeight2(arr, n):\n        m = 1\n        count = 0\n        for i in range(n - 1):\n            if arr[i] == arr[i + 1]:\n                count += 1\n            else:\n                count += 1\n                m = max(m, count)\n                count = 1\n        return max(m, count)\n\n    # Function to return the count of the\n    # number of people having same weight\n    def isSameWeight3(arr, n):\n        m = 1\n        count = 0\n        arr.sort()\n        for i in range(n - 1):\n            if arr[i] == arr[i + 1]:\n                count += 1\n            else:\n                count += 1\n                m = max(m, count)\n                count = 1\n        return max(m, count)\n\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    # print(arr)\n    # print(isSameWeight3(arr, n))\n    res = 1\n    while (isSameWeight3(arr, n) > 1):\n        res += 1\n        arr.pop()\n        arr.append(arr[-1] + 1)\n        # print(arr)\n\n    # print(arr)\n    print(res)\n\n    return 'Hello'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = sorted(map(int, stdin.readline().strip().split()), reverse=True)\n    best = 1\n    for i in range(n):\n        if a[i]!= 0:\n            break\n        best += 1\n    max_a = a[i]\n    for j in range(i, n):\n        max_a = max(max_a, a[j])\n        best = max(best, max_a * (j - i + 1))\n    return best\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    reduce the weight by 1 if its weight > 1\n    increase the weight by 1 if its weight < 150001\n    '''\n    boxers = [int(x) for x in stdin.split()]\n    reduced_weight = sorted(boxers, reverse=True)\n    increased_weight = sorted(boxers)\n    \n    return str(reduced_weight.index(1) + increased_weight.index(150001))\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    m = dict()\n    for i, x in enumerate(a):\n        m[i] = x\n    a.sort(reverse=True)\n    ans = 0\n    i = 0\n    while i < n:\n        v = [m[x] for x in range(n) if x!= i and m[x] >= a[i]]\n        if len(v)!= 0:\n            m[i] = a[i] - min(v)\n            ans += 1\n        i += 1\n    print(ans)\n    return ''"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_boxers, *boxers = stdin.split('\\n')\n    boxers = [int(weight) for weight in boxers]\n    boxers.sort()\n    boxers.reverse()\n    boxers.append(0)\n    weight_limit = boxers[0]\n    return str(sum(1 for boxer in boxers if boxer > weight_limit))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\n1 1 1 4 4 4\\n')\n    '5'\n    \"\"\"\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    weights.sort(reverse=True)\n    prev_weight = weights[0]\n\n    res = 0\n    for i in range(1, n):\n        if prev_weight + 1!= weights[i]:\n            break\n        else:\n            res += 1\n            prev_weight = weights[i]\n\n    return str(res)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12\n   ... ''')\n    '000001000002\\n000002000001\\n000001000001'\n    \"\"\"\n    import sys\n    N, M = [int(i) for i in stdin.split(\"\\n\")[:2]]\n    prefectures = dict()\n    cities = dict()\n    for i in range(1, N+1):\n        prefectures[i] = i*str(i).zfill(6)\n    for i in range(M):\n        y, p = [int(j) for j in stdin.split(\"\\n\")[i+2].split()]\n        cities[y] = cities.get(y, [])\n        cities[y].append(prefectures[p])\n    for k, v in cities.items():\n        print(\"\".join(sorted(v)))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = [tuple(map(int, stdin.split())) for _ in range(M)]\n    return '\\n'.join(\n        [\n            (\n                '{:06}'.format(city[0]) + '{:06}'.format(i + 1)\n                for i, city in enumerate(cities)\n            )\n        ]\n    )\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_data():\n        _, n, m = stdin.readline().split()\n        prefectures = [Prefecture(i, int(y)) for i, y in enumerate(stdin.readline().split())]\n        cities = [City(i, int(y)) for i, y in enumerate(stdin.readline().split())]\n        return n, m, prefectures, cities\n\n    n, m, prefectures, cities = get_data()\n\n    id_num_dict = {p.id: 0 for p in prefectures}\n    for c in cities:\n        pref_id = c.pref_id\n        id_num_dict[pref_id] += 1\n    \n    pref_id = min(id_num_dict, key=id_num_dict.get)\n    cities = [c for c in cities if c.pref_id == pref_id]\n\n    for c in sorted(cities, key=lambda c: c.id):\n        print(c.id)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\u89e3\u8aac\u307f\u305f\"\"\"\n    n, m = map(int, stdin.split())\n    city = [0] * m\n    year = [0] * m\n    for i in range(m):\n        city[i], year[i] = map(int, stdin.split())\n    city = sorted(city)\n    for i in range(m):\n        year[i] = sorted(year)\n        a = year[i][0]\n        if year[i][0] == city[i]:\n            print(str(city[i]).rjust(6, '0'))\n        else:\n            print(str(a).rjust(6, '0'))\n    return \"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12\n   ... ''')\n    '000001000002\\n000002000001\\n000001000001'\n    \"\"\"\n\n    n, m = map(int, stdin.split())\n    cities = [[int(x) for x in stdin.split(':')] for _ in range(m)]\n\n    nums = [str(n).zfill(6) for n in range(10 ** 6)]\n\n    sorted_cities = sorted(cities, key=lambda x: x[1])\n\n    for city in sorted_cities:\n        start, end = city[1], city[1] + 10 ** 6\n        for num in nums[start:end]:\n            print(num[:6 - len(str(city[0]))] + str(city[0]))\n\n    return ''\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12''')\n    000001000002\n    000002000001\n    000001000001\n    \"\"\"\n    N, M = map(int, stdin.split(\" \")[:2])\n    prefectures = [None] * N\n    cities = [None] * M\n    for i in range(N):\n        prefecture, city, year = map(int, stdin.split(\"\\n\")[i].split(\" \")[:3])\n        prefectures[i] = prefecture\n        cities[i] = city\n    for i in range(N):\n        for j in range(M):\n            if prefectures[i] == cities[j]:\n                print(str(prefectures[i]) + str(i + 1).zfill(6) + str(j + 1).zfill(6))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    # P_i, Y_i\u3092\u307e\u3068\u3081\u308b\u30ea\u30b9\u30c8\n    PY = [list(map(int, stdin.readline().split())) for _ in range(M)]\n\n    ans = ''\n    for prefecture, year in PY:\n        # 1-indexed \u3067\u66f8\u304d\u63db\u3048\u308b\n        prefecture = str(prefecture + 1)\n        # 6\u6841\u306b\u306a\u308b\u3088\u3046\u306b0\u57cb\u3081\n        year = str(year).zfill(6)\n        ans += prefecture + year\n\n    return ans\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = []\n    for _ in range(m):\n        city = stdin.split()\n        lst.append(city)\n    answer = ''\n    for i in range(n):\n        first_prefectures = ''\n        num_of_cities = 0\n        for j in range(m):\n            if lst[j][0] == str(i+1):\n                first_prefectures = lst[j][1]\n                num_of_cities = num_of_cities + 1\n        num_of_cities = str(num_of_cities)\n        while len(num_of_cities) < 6:\n            num_of_cities = '0' + num_of_cities\n        answer = answer + first_prefectures + num_of_cities\n    return answer\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get Input\n    N = int(stdin.split('\\n')[0])\n    A = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n\n    # Get Health\n    min_health = min(A)\n\n    # Print Output\n    print(min_health)\n    return \"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport os\nimport string\nimport random\nimport time\nimport re\nimport math\nimport numpy\nimport itertools\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return None\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(i) for i in stdin.split()]\n    alive = [i for i in range(1, n + 1)]\n    killed = 0\n    while len(alive) > 1:\n        i, j = [random.choice(alive) for _ in range(2)]\n        if a[i - 1] <= a[j - 1]:\n            alive.remove(i)\n            killed += a[j - 1]\n        else:\n            alive.remove(j)\n            killed += a[i - 1]\n    print(alive[0])\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\\\n2 10 8 40\\\\n\")\n    2\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = [int(a) for a in lines[1].split(\" \")]\n    A = [a for a in A if a!= 0]\n    A.sort(reverse=True)\n\n    sum_h = 0\n    for a in A:\n        sum_h += a\n\n    min_h = sum_h\n    for i in range(N):\n        j = 0\n        while j < i:\n            sum_h -= A[i]\n            j += 1\n\n        if sum_h < min_h:\n            min_h = sum_h\n\n    return min_h\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_monsters, *monster_stats = map(int, stdin.split(' '))\n    monsters = list(range(1, number_of_monsters + 1))\n    while len(monsters) > 1:\n        monster1, monster2 = choice(monsters), choice(monsters)\n        if monster1 > monster2:\n            monster1, monster2 = monster2, monster1\n        monster1_health, monster2_health = monster_stats[monster1 - 1], monster_stats[monster2 - 1]\n        monster1_health -= monster2_health\n        if monster1_health <= 0:\n            monsters.remove(monster2)\n        else:\n            monsters.remove(monster1)\n    print(monsters[0])"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    return str(min(a))\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    healths = [int(x) for x in stdin.readline().split()]\n    healths.sort()\n    while len(healths) > 1:\n        m1, m2 = healths.pop(), healths.pop()\n        m1_health, m2_health = m1, m2\n        while m1_health > 0 and m2_health > 0:\n            m1_health = max(0, m1_health - m2_health)\n            m2_health = max(0, m2_health - m1_health)\n        if m2_health > 0:\n            healths.append(m2_health)\n        elif m1_health > 0:\n            healths.append(m1_health)\n    return str(healths[0])\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'false' if any([\n        i in stdin\n        for i in ['^', '>', '<', '|']\n    ]) else sorted([\n        i for i in stdin\n        if not i.startswith('_')\n    ], key=len)[0]\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([stdin[1:].split(stdin[0])[0]])\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    gorps = stdin.split(\"-\")\n\n    for i in range(0, len(gorps)):\n        gorps[i] = gorps[i].split(\">\")\n        gorps[i] = gorps[i][0].split(\",\")\n        for j in range(0, len(gorps[i])):\n            gorps[i][j] = gorps[i][j].split(\"_\")\n            gorps[i][j] = int(gorps[i][j][0])\n\n    gorps.sort()\n    for i in range(0, len(gorps)):\n        gorps[i] = gorps[i][0]\n\n    return ''.join(str(gorps[i]) for i in range(0, len(gorps)))"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = ''.join(stdin.split('-'))\n    return result\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"\".join(chr(i) for i in range(ord(\"a\"), ord(\"z\") + 1))\n    alphabet += \"_\"\n    all_variables = list(stdin)\n\n    result = \"\"\n    for i in range(10):\n        if stdin.count(str(i)) > 0:\n            result += str(i) * stdin.count(str(i))\n            all_variables = [\n                a for a in all_variables if a!= str(i) * stdin.count(str(i))\n            ]\n\n    if len(all_variables) == 0:\n        result = \"false\"\n    else:\n        result += \"\".join(sorted(all_variables))\n\n    return result\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('):-')\n    golorp = stdin[0]\n    golorp = golorp[1:]\n    golorp = golorp.replace('__', '9')\n    golorp = golorp.replace('_', '0')\n    if set(golorp) == {'9', '0'}:\n        return 'false'\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(',')\n        for j in range(len(stdin[i])):\n            stdin[i][j] = stdin[i][j].replace('__', '9')\n            stdin[i][j] = stdin[i][j].replace('_', '0')\n    stdin = sorted(stdin, key=lambda x: x[0])\n    start = []\n    for i in range(len(stdin)):\n        start.append([])\n        for j in range(len(stdin[i])):\n            start[i].append(int(stdin[i][j]))\n    start = sorted(start, key=lambda x: x[0])\n    print(start)\n    if start[0][0] == 0:\n        return 'false'\n    return ''.join([str(x[0]) for x in start])\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    diet = {\n        \"0\": \"1\",\n        \"1\": \"2\",\n        \"2\": \"3\",\n        \"3\": \"4\",\n        \"4\": \"5\",\n        \"5\": \"6\",\n        \"6\": \"7\",\n        \"7\": \"8\",\n        \"8\": \"9\",\n        \"9\": \"0\",\n        \"_\": \"0\",\n        \"+\": \"0\",\n        \"-\": \"0\",\n        \"/\": \"0\",\n        \"*\": \"0\",\n    }\n    path = []\n    stack = []\n    pointer = 0\n    for ch in inp:\n        path.append(ch)\n        if ch == \"(\":\n            stack.append(pointer)\n        elif ch == \")\":\n            if len(stack) > 0:\n                pointer = stack.pop()\n            else:\n                break\n        pointer += 1\n    pointer = 0\n    while pointer < len(path):\n        if path[pointer] in diet:\n            stack.append(pointer)\n            pointer += 1\n        else:\n            while pointer < len(path) and path[pointer] not in diet:\n                pointer += 1\n            if pointer >= len(path):\n                break\n            if pointer >= len(path) or path[pointer] in diet:\n                break\n            while stack[-1] < pointer and path[pointer] in diet:\n                stack.pop()\n            if len(stack) > 0:\n                stack.pop()\n            pointer += 1\n    if len(stack) == 0:\n        return \"\".join(path)\n    return \"false\"\n\nprint(solution(inp))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = stdin\n    count = 0\n    if res[0] == '_':\n        for i in range(1, len(res)):\n            if res[i] == '>':\n                count += 1\n            elif res[i] == '<':\n                count -= 1\n            else:\n                break\n        if count > 0:\n            res = res.replace(res[0], str(count), 1)\n        elif count < 0:\n            res = res.replace(res[0], '0' + str(-count), 1)\n    return res\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    golorps = stdin.split(\":-\")\n    golorps.sort()\n    i = 0\n    while i < len(golorps) - 1:\n        if golorps[i] in golorps[i+1]:\n            golorps[i] = golorps[i] + golorps[i]\n            golorps.pop(i+1)\n        else:\n            i += 1\n    if golorps == []:\n        return \"false\"\n    return \"\".join(golorps)\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution\n\n    Args:\n        stdin: input on STDIN\n\n    Returns:\n        output as string on STDOUT\n\n    \"\"\"\n    variables = []\n    for i in range(0, len(stdin), 2):\n        variables.append(stdin[i])\n    variables.sort()\n    if len(variables) > 10:\n        return \"false\"\n    elif len(variables) == 10:\n        return \"\".join(variables)\n    else:\n        possibilities = get_possibilities(variables)\n        if len(possibilities) == 0:\n            return \"false\"\n        else:\n            return min(possibilities)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1')\n    '5'\n    \"\"\"\n    n, m, k = [int(i) for i in stdin.split()]\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n    memo = [[0] * (m + 1) for _ in range(n + 1)]\n    memo[1][1] = k\n\n    def go_down(x, y):\n        if memo[x][y] == 0:\n            if x < n:\n                if matrix[x][y] % 2 == 0:\n                    if y < m:\n                        memo[x][y] = go_down(x + 1, y) ^ matrix[x][y]\n                    if y == m:\n                        memo[x][y] = go_down(x + 1, y)\n                else:\n                    if y < m:\n                        memo[x][y] = go_down(x, y + 1)\n                    if y == m:\n                        memo[x][y] = go_down(x, y + 1) ^ matrix[x][y]\n        return memo[x][y]\n\n    def go_right(x, y):\n        if memo[x][y] == 0:\n            if y < m:\n                if matrix[x][y] % 2 == 0:\n                    if x < n:\n                        memo[x][y] = go_right(x, y + 1) ^ matrix[x][y]\n                    if x == n:\n                        memo[x][y] = go_right(x, y + 1)\n                else:\n                    if x < n:\n                        memo[x][y] = go_down(x + 1, y)\n                    if x == n:\n                        memo[x][y] = go_down(x + 1, y) ^ matrix[x][y]\n            else:\n                if x < n:\n                    memo[x][y] = go_down(x + 1, y)\n                if x == n:\n                    memo[x][y] = go_down(x + 1, y) ^ matrix[x][y]\n        return memo[x][y]\n\n    return str(go_right(1, 1))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    # Get input\n    grid = list(map(int, stdin.split()))\n    n, m, k = grid[:3]\n\n    # Get the number of paths from (1, 1) to (n, m)\n    # which has the xor sum equal to k\n    # The number of paths from (1, 1) to (n, m)\n    # is equal to the number of paths from (1, 1) to (n - 1, m)\n    # + the number of paths from (1, 1) to (n, m - 1)\n    # - the number of paths from (1, 1) to (n - 1, m - 1)\n    # which has the xor sum equal to k\n    def _get_number_of_paths(n, m, k):\n        if n == 1 or m == 1:\n            return 1\n        return _get_number_of_paths(n - 1, m, k) + _get_number_of_paths(n, m - 1, k) - _get_number_of_paths(n - 1, m - 1, k)\n\n    paths = _get_number_of_paths(n, m, k)\n\n    return str(paths)\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    arr = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        arr[i] = list(map(int, stdin.split('\\n')[i].split(' ')))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if j == m - 1:\n                if arr[i][j] ^ k == 0:\n                    count += 1\n            elif i == n - 1:\n                if arr[i][j] ^ k == 0:\n                    count += 1\n            else:\n                if arr[i][j] ^ k == 0:\n                    count += 1\n                    if j < m - 1:\n                        count += 1\n                    if i < n - 1:\n                        count += 1\n    print(count)"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement me\n    pass"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split('\\n')\n    n = int(n)\n    t = t.strip()\n    res = t\n    for d in range(1, n+1):\n        if n % d == 0:\n            res = res[0:d] + res[n-d:]\n    return res\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    \"\"\"\n    def solution(s: str) -> str:\n        s = s +''\n        ret = ''\n        for i in range(1, len(s)):\n            r =''.join(s[i:i + j] for j in range(len(s) - i + 1))\n            ret = min(ret, r.split()[-1::-1][0])\n        return ret\n    return solution(stdin)\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n\"\"\"\n\nfrom math import gcd\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    t = stdin[1]\n    def egcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            g, y, x = egcd(b % a, a)\n            return g, x - (b // a) * y, y\n    def modinv(a, m):\n        g, x, y = egcd(a, m)\n        if g!= 1:\n            raise Exception('Modular inverse does not exist')\n        else:\n            return x % m\n    s = ''\n    for d in range(length, 0, -1):\n        s += t[d - 1::-1]\n    return s\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n\"\"\"\n\nd\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    d = 1\n    while d * d < n:\n        d += 1\n    t = \"\"\n    for i in range(n):\n        t += s[d * (i + 1) - 1]\n    return t\n\"\"\"\n\n\"\"\"\n\ucc38\uace0\ub85c \uc774 \ubb38\uc81c\ub294 \uc544\ub798\uc640 \uac19\uc774 d\uc758 \ubc94\uc704\ub97c \uc798 \uc124\uc815\ud574\uc8fc\uba74 \ub428.\nfor\ubb38\uc744 \ub3cc\uba74\uc11c d\uac00 \uc544\ub2cc \uc22b\uc790\ub4e4\uc740 \uadf8\ub0e5 \ubb34\uc2dc\ud558\uace0, d\uc758 \ubc94\uc704\ub9cc \ub0a8\uaca8\ub450\uba74 \ub41c\ub2e4.\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the sum of a and b.\n\n    >>> solution(str(5) + \" \" + str(14))\n    19\n\n    >>> solution(str(381) + \" \" + str(492))\n    873\n    \"\"\"\n    return str(int(stdin.split()[0]) + int(stdin.split()[1]))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    print(a + b)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    A = int(input_list[0])\n    B = int(input_list[1])\n    return str(A + B)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print('<[<+>-]<')\n    return ''\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for this problem.\n\n    :param stdin: Stdin input.\n    :return: Output.\n    \"\"\"\n    pass"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([chr(int(i)) for i in stdin.split()])\n\"\"\"\n\nimport sys\n\nstdin = ''.join([chr(int(i)) for i in sys.stdin.read().split()])\n\nmem = [30000] * 30000\nout = ''\n\nfor c in stdin:\n    if c == '>':\n        out += '+'\n        mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem[mem"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n'''\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n-----Test-----\nSample Test 1\n\nSample Input 1\n\n9-7\n\nSample Output 1\n\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\n\nSample Test 2\n\nSample Input 2\n\n9-3\n\nSample Output 2\n\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \">{0}\\n{1}>{2}\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\".format(stdin, \"+\" * len(stdin), \"-\" * len(stdin))\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2+3\n   ... 2+3\n   ... 2+3\n   ... 2+3''')\n    '+++>++++>++++>++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++>++++>++++>++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++>++++>++++>++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++>++++>++++>++++>\\n<[<+>-]<'\n    \"\"\"\n   ..."
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(str, list(stdin)))\n    \n  #  -----Vlad-----\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    raise NotImplementedError()\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\nfrom collections import Counter\nimport string\nimport operator\nimport math\nimport functools\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n'''\n\nimport sys\nimport math\nimport time\n\nsys.stdin = open('test_files/Y13R5P1/A.in')\n\nt = time.time()\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nq = int(input())\n\nfor _ in range(q):\n    k = int(input())\n    i = 1\n    while True:\n        if len(str(i)) < k:\n            i += 1\n        else:\n            break\n    print(int(str(i)[k - 1]))\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # inp = stdin.strip()\n    # N = int(inp)\n    n = 0\n    for i in range(1,int(N) + 1):\n        if len(set(list(str(i)))) == 3 and ('7' in str(i) or '5' in str(i) or '3' in str(i)):\n            n += 1\n    return n\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(1, n + 1):\n        if 7 in str(i) or 5 in str(i) or 3 in str(i):\n            continue\n        else:\n            count += 1\n    print(count)\n    return ''\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if is_shichi_go_san(i):\n            count += 1\n    return str(count)\n    \ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of Shichi-Go-San numbers between 1 and N (inclusive).\n    '''\n    # Collect all Shichi-Go-San numbers that are not greater than N.\n    shichi_go_san_numbers = set()\n    n = int(stdin)\n    while True:\n        # Extract digits from N.\n        digits = [int(digit) for digit in str(n)]\n        # Generate all possible Shichi-Go-San numbers.\n        shichi_go_san_numbers.update(\n            (\n                int(\n                    ''.join(\n                        map(\n                            str,\n                            [1 if digit in (3, 5, 7) else 0 for digit in digits]\n                        )\n                    )\n                )\n                for _ in range(1, len(digits)+1)\n            )\n        )\n        # Check if n is a Shichi-Go-San number.\n        if all([digit in (3, 5, 7) for digit in digits]):\n            shichi_go_san_numbers.add(n)\n            break\n        # Check if n is a multiple of 7.\n        if n % 7 == 0:\n            shichi_go_san_numbers.add(n)\n            break\n        # Try to get the next number greater than n.\n        n += 1\n    return str(len(shichi_go_san_numbers))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = stdin\n    print(sum([1 for x in range(1, n+1) if isShichiGoSan(str(x))]))\n    \ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    \n    for i in range(1, n+1):\n        digits = str(i)\n        if isSevenFiveThree(digits):\n            counter += 1\n\n    return counter\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        s = str(i)\n        isValid = True\n        for ch in s:\n            if ch == '7' or ch == '5' or ch == '3':\n                continue\n            else:\n                isValid = False\n                break\n        if isValid:\n            count += 1\n    return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n):\n        if stdin[i]!= stdin[i-1]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('0', '2').replace('1', '0').replace('2', '1')\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdin\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('1')"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    if len(s) % 2 == 0:\n        return (len(s) // 2)\n    else:\n        for i in range(len(s)):\n            if i == (len(s) // 2):\n                pass\n            else:\n                if s[i]!= s[i + 1]:\n                    count += 1\n    return count\n    \nprint(solution(stdin))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('0') == stdin.count('1')\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    dp = [1] * N\n\n    for i in range(1, N):\n        for j in range(i):\n            if stdin[i]!= stdin[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    print(N - dp[-1])\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return '%s'"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = \"APPROVED\" if all(a[i] % 2 == 0 and a[i] % 3 == 0 or a[i] % 5 == 0 for i in range(n)) else \"DENIED\"\n    return ans\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    N = int(inp[0])\n    A = [int(x) for x in inp[1:]]\n    for i in range(N):\n        if (A[i] % 2) == 0 and ((A[i] % 3 == 0) or (A[i] % 5 == 0)):\n            continue\n        else:\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nassert solution(\"7\") == \"APPROVED\"\nassert solution(\"3 4 6 2 8 9 1 10 5\") == \"DENIED\"\nassert solution(\"4 9 12 16 18 21 24 25\") == \"APPROVED\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    for i in range(0, N, 2):\n        if A[i] % 2 == 0 and (A[i] % 3 == 0 or A[i] % 5 == 0):\n            pass\n        else:\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    n, *numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \ubc1b\uc740 \ubb38\uc790\uc5f4 \uc911\uc5d0\uc11c, \uac01 \ubb38\uc790\ub97c \uc778\ud2b8\ud615\uc73c\ub85c \ubcc0\ud658 \ud6c4 \uc22b\uc790\ub85c \ubcc0\ud658\n    # *numbers = map(int, stdin.split('\\n')[0].split(' '))\n    # \ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc22b\uc790\ub85c \ubc14\uafd4\uc90c\n    # numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \ubc1b\uc740 \uc22b\uc790\ub4e4\uc744 \ub9ac\uc2a4\ud2b8\ud615\uc73c\ub85c \uc800\uc7a5\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \uc778\ud2b8\ud615\uc744 \uc22b\uc790\ub85c \ubc14\uafd4\uc8fc\uae30\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \uc778\ud2b8\ud615\uc744 \ub9ac\uc2a4\ud2b8\ud615\uc73c\ub85c \uc800\uc7a5\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \uc778\ud2b8\ud615 \ub9ac\uc2a4\ud2b8\uc758 \ud640\uc218\ub97c \ube44\ud2b8\uc5f0\uc0b0 \uc815\uc218\ud615\uc758 \ud640\uc218\ub85c \ubc14\uafd4\uc8fc\uae30\n    numbers = list(map(lambda x: x if x % 2 == 0 else x | 1, numbers))\n    # \uc22b\uc790\ub4e4\uc758 \ud569\uc744 \uc800\uc7a5\n    numbers_sum = sum(numbers)\n    # \ub450 \uac00\uc9c0 \uacbd\uc6b0\ub85c \ub098\ub204\uc5b4\uc8fc\uae30\n    if numbers_sum % 3 == 0 or numbers_sum % 5 == 0:\n        return 'APPROVED'\n    else:\n        return 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    passed = True\n    for a in A:\n        if a % 2 == 0 and not(a % 3 == 0 or a % 5 == 0):\n            passed = False\n            break\n    print(\"APPROVED\" if passed else \"DENIED\")\n    return ''"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'APPROVED' if all(i % 2 == 0 for i in map(int, stdin.split('\\n')[1].split())) and all(i % 3!= 0 and i % 5!= 0 for i in map(int, stdin.split('\\n')[1].split())) else 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns either 'APPROVED' or 'DENIED' depending on whether all even\n    numbers written on the document are divisible by 3 or 5.\n    '''\n    evens = [int(x) for x in stdin.split('\\n')[0].split(' ') if int(x) % 2 == 0]\n    return 'APPROVED' if all(x % 3 == 0 or x % 5 == 0 for x in evens) else 'DENIED'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = ['L', 'R', 'U', 'D']\n    S = stdin.split()\n    for i in range(len(S)):\n        if i % 2:\n            if not S[i][::-1] in D:\n                return 'No'\n        else:\n            if not S[i] in D:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    is_playable = True\n    for i, ch in enumerate(S):\n        if i % 2 == 0 and ch in ('L', 'R', 'U', 'D'):\n            is_playable = False\n            break\n        if i % 2 == 1 and ch in ('L', 'R', 'U', 'D'):\n            continue\n        else:\n            is_playable = False\n            break\n    if is_playable:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    move = stdin.split('\\n')\n    out = []\n    for i in move:\n        if i[0] == 'R' or i[0] == 'U' or i[0] == 'D':\n            out.append('Yes')\n        else:\n            out.append('No')\n    return '\\n'.join(out)\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # right to left\n    for i in range(len(s) - 1, -1, -1):\n        if i % 2 == 0:\n            if s[i] == \"R\" or s[i] == \"U\" or s[i] == \"D\":\n                continue\n            else:\n                return \"No\"\n        if i % 2 == 1:\n            if s[i] == \"L\" or s[i] == \"U\" or s[i] == \"D\":\n                continue\n            else:\n                return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    res = \"\"\n    s = stdin\n    for i in range(len(s)):\n        if i % 2 == 1:\n            res += \"DR\"\n        elif i % 2 == 0:\n            res += \"DL\"\n    if res.count(\"DR\") == res.count(\"DL\"):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    odd_pos = []\n    even_pos = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == 'R' or s[i] == 'U' or s[i] == 'D':\n                odd_pos.append(s[i])\n            else:\n                return \"No\"\n        else:\n            if s[i] == 'L' or s[i] == 'U' or s[i] == 'D':\n                even_pos.append(s[i])\n            else:\n                return \"No\"\n    print(\"Yes\" if len(odd_pos) == 0 and len(even_pos) == 0 else \"No\")"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    step = stdin\n    R = list(filter(lambda x: x == \"R\", step))\n    U = list(filter(lambda x: x == \"U\", step))\n    D = list(filter(lambda x: x == \"D\", step))\n    L = list(filter(lambda x: x == \"L\", step))\n    print(R, U, D, L)\n    # If a character is not in an odd index, even index\n    if R == [] and U == [] and D == []:\n        if L == []:\n            return \"Yes\"\n    # If a character is not in an even index, odd index\n    elif L == [] and U == [] and D == []:\n        if R == []:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.split()[0]\n    for i in range(len(c)):\n        if i % 2 == 0:\n            if c[i] == \"L\" or c[i] == \"U\":\n                continue\n            else:\n                return \"No\"\n        else:\n            if c[i] == \"R\" or c[i] == \"D\":\n                continue\n            else:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # go through s in reverse order\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i]!= 'L' and s[i]!= 'U' and s[i]!= 'D':\n                return 'No'\n        else:\n            if s[i]!= 'R' and s[i]!= 'U' and s[i]!= 'D':\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    is_easy = all(s[i] in 'LDRU' for i in range(0, len(s), 2)) and all(s[i] in 'LRUD' for i in range(1, len(s), 2))\n    return 'Yes' if is_easy else 'No'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = [int(i) for i in stdin.split()]\n    if N > A + B + C + D + E:\n        return \"IMPOSSIBLE\"\n    elif N == A + B + C + D + E:\n        return \"0\"\n    elif N == A + B + C + D:\n        return \"5\"\n    elif N == A + B + C:\n        return \"4\"\n    elif N == A + B + C + D + E:\n        return \"6\"\n    elif N == A + B + C + D:\n        return \"3\"\n    elif N == A + B + C + D + E:\n        return \"2\"\n    elif N == A + B + C:\n        return \"1\"\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(7)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # parse input\n    N, A, B, C, D, E = [int(x) for x in stdin.split(\"\\n\")]\n\n    # sort all possible combinations\n    # N = 1: [A,B,C,D,E]\n    # N = 2: [A,B,C,D,E] and [A,B,C,E,D]\n    # N = 3: [A,B,C,D,E] and [A,B,C,E,D] and [A,B,C,D,E] and [A,B,C,D,E] and [A,B,C,D,E]\n    #...\n    # N = 10: [A,B,C,D,E] and [A,B,C,E,D] and [A,B,C,D,E] and [A,B,C,E,D] and...\n\n    # set all combinations\n    combinations = set()\n    for i in range(0, N + 1):\n        combinations.update([(i, j, k) for j in range(0, N + 1 - i) for k in range(0, N + 1 - i - j)])\n\n    # check combinations that can reach City 6\n    count = 0\n    for A, B, C in combinations:\n        if A + B + C + D + E == 6:\n            count += 1\n\n    # print minimum number of minutes\n    return str(count)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_inputs(N, A, B, C, D, E):\n        return N, A, B, C, D, E\n\n    def calculate_minutes(A, B, C, D, E):\n        return (A * (B + C) + D * E) // 5\n\n    def main(stdin: str) -> str:\n        N, A, B, C, D, E = read_inputs(*map(int, stdin.split()))\n        ans = calculate_minutes(A, B, C, D, E)\n        return str(ans)\n\n    return main(stdin)"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_people, max_train, max_bus, max_taxi, max_airplane, max_ship = map(int, stdin.split())\n    ans = max_ship * 2 + (max_airplane + max_taxi) * 2 + (max_bus + max_train) * 2\n    ans = min(ans, max_airplane * 2 + max_taxi * 2 + (max_bus + max_train) * 2)\n    ans = min(ans, (max_airplane + max_taxi) * 2 + (max_bus + max_train) * 2 + (max_train + max_bus) * 2)\n    return ans\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, a, b, c, d, e = list(map(int, lines[0].split()))\n    return str(n * (a + b + c + d + e) - min(a, b, c, d, e))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i > 0 and i < 9 and j > 0 and j < 9 and i!= j:\n                count += 1\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Hint 1:\nFor each number k in the set {0,9}, we want to check if there exists a set A of numbers {a,b} such that:\n - a = 0\n - b = 9\n - A \\subseteq {0,1,2,3,4,5,6,7,8,9}\n - b - a = k\n - At least one number from the set A is equal to 0.\n - At least one number from the set A is equal to 9.\nTo check whether this set A is an integer sequence, we can use the following conditions:\n - If a is in {0,1,2,3,4,5,6,7,8,9} then b \\in {a+k, a+k+1, a+k+2, a+k+3, a+k+4, a+k+5, a+k+6, a+k+7, a+k+8, a+k+9, a+k+10, a+k+11, a+k+12, a+k+13, a+k+14, a+k+15, a+k+16, a+k+17, a+k+18, a+k+19, a+k+20, a+k+21, a+k+22, a+k+23, a+k+24, a+k+25, a+k+26, a+k+27, a+k+28, a+k+29, a+k+30, a+k+31, a+k+32, a+k+33, a+k+34, a+k+35, a+k+36, a+k+37, a+k+38, a+k+39, a+k+40, a+k+41, a+k+42, a+k+43, a+k+44, a+k+45, a+k+46, a+k+47, a+k+48, a+k+49}\n - If a is in {0,1,2,3,4,5,6,7,8,9} then b \\in {b-k, b-k+1, b-k+2, b-k+3, b-k+4, b-k+5, b-k+6, b-k+7, b-k+8, b-k+9, b-k+10, b-k+11, b-k+12, b-k+13, b-k+14, b-k+15, b-k+16, b-k+17, b-k+18, b-k+19, b-k+20, b-k+21, b-k+22, b-k+23, b-k+24, b-k+25, b-k+26, b-k+27, b-k+28, b-k+29, b-k+30, b-k+31, b-k+32, b-k+33, b-k+34, b-k+35, b-k+36, b-k+37, b-k+38, b-k+39, b-k+40, b-k+41, b-k+42, b-k+43, b-k+44, b-k+45, b-k+46, b-k+47, b-k+48, b-k+49}\n - If b is in {a+k, a+k+1, a+k+2, a+k+3, a+k+4, a+k+5, a+k+6, a+k+7, a+k+8, a+k+9, a+k+10, a+k+11, a+k+12, a+k+13, a+k+14, a+k+15, a+k+16, a+k+17, a+k+18, a+k+19, a+k+20, a+k+21, a+k+22, a+k+23, a+k+24, a+k+25, a+k+26, a+k+27, a+k+28, a+k+29, a+k+30, a+k+31, a+k+32, a+k+33, a+k+34, a+k+35, a+k+36, a+k+37, a+k+38, a+k+39, a+k+40, a+k+41, a+k+42, a+k+43, a+k+44, a+k+45, a+k+46, a+k+47, a+k+48, a+k+49}\n - If b is in {b-k, b-k+1, b-k+2, b-k+3, b-k+4, b-k+5, b-k+6, b-k+7, b-k+8, b-k+9, b-k+10, b-k+11, b-k+12, b-k+13, b-k+14, b-k+15, b-k+16, b-k+17, b-k+18, b-k+19, b-k+20, b-k+21, b-k+22, b-k+23, b-k+24, b-k+25, b-k+26, b-k+27, b-k+28, b-k+29, b-k+30, b-k+31, b-k+32, b-k+33, b-k+34, b-k+35, b-k+36, b-k+37, b-k+38, b-k+39, b-k+40, b-k+41, b-k+42, b-k+43, b-k+44, b-k+45, b-k+46, b-k+47, b-k+48, b-k+49}\nThat means that if a = 0 and b = 9 then the set A satisfies all three conditions.\n\nHint 2:\nLet us denote the number of integer sequences in the set by the variable N.\nLet us denote the number of sets in the set by the variable C.\nThere are a total of C!=N+2! combinations of the set.\n\nEach set has exactly two elements, so there are exactly 2! = 2C2=C(C-1) combinations of the set.\nEach set has exactly 2 elements, so there are exactly C2! combinations of the set.\nIf each set has two elements then there are exactly C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, len(A)):\n        if A[i] == 0 or A[i] == 9:\n            count += 1\n    return count"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline().strip())\n    print(len([1 for i in range(N) if i % 2 == 0 and 0 <= int(stdin.readline().strip()) <= 9]))\n    print(len([1 for i in range(N) if i % 2 == 0 and 9 >= int(stdin.readline().strip()) > 0]))\n    print(len([1 for i in range(N) if i % 2 == 1 and 9 >= int(stdin.readline().strip()) > 0]))\n    print(len([1 for i in range(N) if i % 2 == 1 and 0 <= int(stdin.readline().strip()) <= 9]))\n    return \"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # I:\n    #     1 <= n <= 10^6\n    # E:\n    #     1 <= n <= 10^6\n    n = int(stdin)\n\n    # O:\n    #     Print the answer modulo 10^9 + 7.\n    return '{}'.format(factorial(n) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = a[0]\n    b = a[1:]\n    count = 0\n    for i in range(0,n):\n        if b[i] == 0 or b[i] == 9:\n            count += 1\n        if b[i] == 0:\n            for j in range(i+1, n):\n                if b[j] == 9:\n                    count += 1\n        if b[i] == 9:\n            for j in range(i+1, n):\n                if b[j] == 0:\n                    count += 1\n    return count % (10**9 + 7)"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f\"The answer is {int(stdin.split('\\n')[0])}\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.factorial(9) // (math.factorial(9 - stdin) * math.factorial(stdin)))\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    n += 1\n\n    for i in range(2, n):\n        if i * i > n:\n            return n\n        if n % i == 0:\n            break\n    return n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #!/bin/python3"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 2:\n        return 2\n    \n    a = [False, False] + [True] * (X - 1)\n    primes = []\n\n    for i in range(2, X + 1):\n        if a[i]:\n            primes.append(i)\n            for j in range(2 * i, X + 1, i):\n                a[j] = False\n    return primes[-1]\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # YOUR CODE HERE\n    # Don't print anything, this is just the example code.\n    # Your solution should go here.\n    n = int(stdin)\n    prime_numbers = []\n    for i in range(1,n+1):\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    print(min(prime_numbers))\n    return \"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    if x <= 2:\n        return 2\n    if x % 2 == 0:\n        return 2\n    if x == 3:\n        return 3\n    if x < 2 or x % 2 == 0:\n        return x\n    for i in range(3, x + 1, 2):\n        if i % 2 == 0:\n            continue\n        else:\n            return i"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    while True:\n        if is_prime(X):\n            return str(X)\n        X += 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline().strip('\\n'))\n    if X < 2:\n        return 2\n    max_prime = 100000\n    prime_nums = prime_number(max_prime)\n    prime_nums.remove(1)\n    prime_nums.remove(2)\n    for i in prime_nums:\n        if i < X:\n            prime_nums.remove(i)\n        if i > X:\n            break\n    return prime_nums[0]\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline().strip())\n    max_range = max(X, 2)\n    is_prime = [1] * max_range\n    is_prime[0] = 0\n    is_prime[1] = 0\n    for i in range(2, len(is_prime)):\n        if is_prime[i]:\n            j = i + i\n            while j < len(is_prime):\n                is_prime[j] = 0\n                j = j + i\n    \n    min_p = X + 1\n    for i in range(X + 1, len(is_prime)):\n        if is_prime[i]:\n            min_p = i\n            break\n    \n    return str(min_p)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X <= 2:\n        return 3\n    \n    def isPrime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        \n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        \n        return True\n    \n    prime = [2]\n    for i in range(3, X+1):\n        if isPrime(i):\n            prime.append(i)\n    \n    for p in prime:\n        if p > X:\n            return p\n            \n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        try:\n            X = int(stdin)\n            break\n        except ValueError:\n            stdin = input()\n    \n    if X <= 2:\n        return 2\n    else:\n        X += 1\n        while not is_prime(X):\n            X += 1\n        return X\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    sequence_length = len(a)\n    if sequence_length == 0 or sequence_length == 1 or sequence_length == 2:\n        return str(0)\n    else:\n        cnt = 0\n        for i in range(0, sequence_length - 2):\n            if a[i] == a[i + 2]:\n                cnt += 1\n        if sequence_length == cnt * 2:\n            return str(0)\n        return str(sequence_length - cnt * 2)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    cnt = 0\n    for i in range(0, n-2, 2):\n        if a[i] == a[i+2]:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    n = int(stdin)\n    A = [int(x) for x in stdin.split(\" \")]\n    n_dict = dict.fromkeys(A, 0)\n    for x in A:\n        n_dict[x] += 1\n    if len(n_dict) > 2:\n        return 1\n    if len(n_dict) == 2:\n        return 1 if A[-2]!= A[-1] else 0\n    return 2\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    if n == len(seq) and n % 2 == 0:\n        return 0\n    a = seq[:-2]\n    b = seq[1:-1]\n    if set(a) == set(b):\n        return 1\n    if seq.count(seq[-1]) == 1 or seq.count(seq[-2]) == 1:\n        return 0\n    return n - sum(list(map(seq.count, seq)))\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    sequence = stdin.readline().split(' ')\n    maximum_distinct_elements = set()\n    for element in sequence:\n        maximum_distinct_elements.add(element)\n        if len(maximum_distinct_elements) > 2:\n            print(0)\n            return\n    minimum_to_be_replaced = 0\n    for i in range(0, len(sequence)):\n        if sequence[i]!= sequence[i+2]:\n            minimum_to_be_replaced += 1\n    print(minimum_to_be_replaced)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_nums(a):\n        nums = []\n        for i in a.split(\" \"):\n            nums.append(int(i))\n        return nums\n    num_list = get_nums(stdin)\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if i!= j:\n                if num_list[i] == num_list[j]:\n                    num_list[j] += 1\n    count = 0\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if i!= j:\n                if num_list[i] == num_list[j]:\n                    count += 1\n                    break\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().strip().split(\" \")))\n    x = {}\n    for i in range(n):\n        if v[i] in x.keys():\n            x[v[i]] += 1\n        else:\n            x[v[i]] = 1\n    y = list(x.values())\n    y.sort()\n    z = y[0]\n    if z == 1:\n        return 0\n    else:\n        return z - 1\nprint(solution(stdin))\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'not yet implemented'\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(number) for number in stdin.readline().split(\" \")]\n    \n    # Count occurence\n    occurence = {number: numbers.count(number) for number in set(numbers)}\n    \n    # Checking if it is /\\/\\/\\/\n    if len(occurence) == 2:\n        return \"0\"\n    \n    # Checking if it is /\\/\\/\n    if len(occurence) == 3:\n        if (\n            (numbers[0] == numbers[1] and numbers[1]!= numbers[2]) or\n            (numbers[0] == numbers[2] and numbers[1]!= numbers[2]) or\n            (numbers[1] == numbers[2] and numbers[0]!= numbers[1])\n        ):\n            return \"1\"\n        \n        # Otherwise, return 0\n        return \"0\"\n    \n    # Checking if it is /\\/\\\n    if len(occurence) == 4:\n        if (\n            (numbers[0] == numbers[1] and numbers[1] == numbers[2] and numbers[2]!= numbers[3]) or\n            (numbers[1] == numbers[2] and numbers[2] == numbers[3] and numbers[0]!= numbers[1]) or\n            (numbers[2] == numbers[3] and numbers[0] == numbers[1] and numbers[1]!= numbers[2])\n        ):\n            return \"2\"\n        \n        # Otherwise, return 0\n        return \"0\"\n    \n    # Checking if it is /\\/\\\n    if len(occurence) == 5:\n        if (\n            (numbers[0] == numbers[1] and numbers[1] == numbers[2] and numbers[2] == numbers[3] and numbers[3]!= numbers[4]) or\n            (numbers[1] == numbers[2] and numbers[2] == numbers[3] and numbers[3] == numbers[4] and numbers[0]!= numbers[1]) or\n            (numbers[2] == numbers[3] and numbers[3] == numbers[4] and numbers[0] == numbers[1] and numbers[1]!= numbers[2]) or\n            (numbers[3] == numbers[4] and numbers[0] == numbers[1] and numbers[1] == numbers[2] and numbers[2]!= numbers[3])\n        ):\n            return \"2\"\n        \n        # Otherwise, return 0\n        return \"0\"\n    \n    # Otherwise, return 0\n    return \"0\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the input string, this function will find the solution for the given problem.\n\n    Parameters\n    ----------\n    stdin : str\n        String of input given by the website.\n\n    Returns\n    -------\n    str\n        String with the solution of the problem.\n    \"\"\"\n    N, A, B, C = map(int, stdin.split(' '))\n    cost = 0\n    bamboo_lengths = list(map(int, stdin.split('\\n')[1:]))\n    if A < max(bamboo_lengths):\n        print(cost)\n        return\n    while N > 2:\n        if A > min(bamboo_lengths):\n            cost += A - min(bamboo_lengths)\n            bamboo_lengths.append(min(bamboo_lengths) + 1)\n            N -= 1\n            A = max(bamboo_lengths)\n            bamboo_lengths.remove(max(bamboo_lengths))\n            if A < max(bamboo_lengths):\n                break\n        else:\n            if B > min(bamboo_lengths):\n                cost += B - min(bamboo_lengths)\n                bamboo_lengths.append(min(bamboo_lengths) + 1)\n                N -= 1\n                A = max(bamboo_lengths)\n                bamboo_lengths.remove(max(bamboo_lengths))\n                if A < max(bamboo_lengths):\n                    break\n            else:\n                cost += C\n                bamboo_lengths.append(C)\n                N -= 1\n                A = max(bamboo_lengths)\n                bamboo_lengths.remove(max(bamboo_lengths))\n                if A < max(bamboo_lengths):\n                    break\n    cost += A\n    print(cost)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split(\"\\n\")]\n    n, a, b, c = inputs[:4]\n    bamboo = inputs[4:]\n    return get_min_mp(n, a, b, c, bamboo)\n    \ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    Given a list of integers of length N, of lengths for the different bamboos, find out the minimum amount of magic points needed to achieve our objective.\n    \"\"\"\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # you can use print to print out the values\n    # you can use input to take input from the user\n    # don't forget to use the spacebar\n    n, a, b, c = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    l.sort()\n    best_a = a\n    best_b = b\n    best_c = c\n    for i in range(0, n):\n        if l[i] == best_a:\n            best_a += 1\n            continue\n        if l[i] == best_b:\n            best_b += 1\n            continue\n        if l[i] == best_c:\n            best_c += 1\n            continue\n    return best_a * b * c\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum amount of MP needed to achieve the objective.\n\n    Args:\n        stdin (str): The standard input, which is a string.\n\n    Returns:\n        str: The minimum amount of MP needed to achieve the objective.\n    \"\"\"\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split()))\n    for length in range(2, c + 1):\n        if length % a == 0 and length % b == 0:\n            n -= 1\n            break\n        elif length % a == 0:\n            n -= 1\n            break\n        elif length % b == 0:\n            n -= 1\n            break\n    return str(n * 10 + length)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    magics = {\n        'E': lambda x: x + 1,\n        'S': lambda x: x - 1 if x >= 2 else -1,\n        'C': lambda x, y: x + y\n    }\n\n    bamboo = {\n        'length': 0,\n        'MP': 0,\n       'magic': []\n    }\n    total_MP = 0\n    for n in range(1, N + 1):\n        bamboo['length'] = C if n == N else A\n        while bamboo['length'] < B:\n            bamboo['length'] = magics[bamboo['magic'][-1] if bamboo['magic'] else 'E'](bamboo['length'])\n            total_MP += 1\n        bamboo['magic'] = 'C' if bamboo['magic'] == 'C' else 'E' if bamboo['magic'] == 'E' else 'S' if bamboo['magic'] == 'S' else 'C'\n        bamboo['length'] = bamboo['length'] - 1\n        total_MP += 1\n    return total_MP\n\"\"\"\n\nimport re\nfrom functools import reduce\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    def solution(stdin: str) -> str:\n        \"\"\"\n            Find the minimum amount of MP for obtaining 3 bamboos of lengths A, B, C, from N bamboos of lengths l_1, l_2,..., l_N, where l_i = 1,..., N.\n            :param stdin: The standard input.\n            :return: The minimum amount of MP.\n            \"\"\"\n            pass\n        return 'a string'\n    return solution(stdin)"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    l.sort()\n    while len(l) > 3:\n        first_low = l.pop(0)\n        if A < first_low < B:\n            C += first_low\n            A += 1\n        elif B < first_low < C:\n            B += 1\n            C += first_low\n        elif C < first_low < A:\n            A += 1\n            C += first_low\n    a = 0\n    b = 0\n    c = 0\n    for l in l:\n        if A < l:\n            a += 1\n            A += 1\n        elif B < l:\n            b += 1\n            B += 1\n        elif C < l:\n            c += 1\n            C += 1\n    return \" \".join([str(x) for x in [a, b, c, C]])\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\nprint(solution(\"ABCXYZ\"))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    #\n    # Get Input\n    shift = int(stdin.readline())\n    string = stdin.readline().strip()\n    #\n    # Get Output\n    ans = []\n    for c in string:\n        # Find the ord of current character\n        ord_of_c = ord(c)\n        # If ord is greater than Z\n        if ord_of_c > ord('Z'):\n            # Find ord of a and subtract 26 to shift\n            ord_of_a = ord('A')\n            ord_of_c -= 26\n        else:\n            # Otherwise find ord of a and keep doing the same thing\n            ord_of_a = ord('A')\n        # Add the shifted character\n        ans.append(chr(ord_of_c + shift))\n        ans.append(chr(ord_of_a + shift))\n    return ''.join(ans)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns a string with each character shifted forward or backward by the number\n    of characters in the given string\n\n    Parameters:\n        stdin (str): string to be processed\n\n    Returns:\n        str: the shifted string\n    '''\n    # read the input\n    n = int(stdin[0])\n    s = stdin[1]\n\n    # shift each letter\n    shifted_string = \"\"\n    for letter in s:\n        # shift the letter\n        shifted_letter = chr(ord(letter) + n)\n        # add the letter to the output\n        shifted_string += shifted_letter\n\n    return shifted_string\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\".join(sorted(list(stdin), key=lambda x: chr(ord(x) + n)))"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    S = stdin\n    answer = ''\n    for i in S:\n        chrNum = ord(i)\n        chrNum += n\n        if chrNum > 90:\n            chrNum = (chrNum - 90) + 64\n        answer += chr(chrNum)\n    return answer\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ''.join(chr(i + n) for i in range(26))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    N = int(stdin)\n    for i in S:\n        print(chr(ord(i)+N),end=\"\")"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    shift = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    string = []\n    for char in s:\n        char_ascii = ord(char)\n        char_new_ascii = char_ascii + shift\n        char_new_char = chr(char_new_ascii)\n        string.append(char_new_char)\n\n    return \"\".join(string)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    shift_string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shift_number = int(input_string) % 26\n    output_string = \"\"\n    for i in input_string:\n        output_string += shift_string[shift_string.find(i) + shift_number]\n    print(output_string)\n    return output_string\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    p = 2\n    r = []\n    for i in range(a):\n        if is_prime(b[i]):\n            r.append(b[i])\n        else:\n            r.append(gcd(b[i], b[i-1]))\n    stdout = [str(x) for x in r]\n    print(' '.join(stdout))\n    return ''\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = [2]\n    prime_to_index = {}\n    index_to_prime = {}\n    for i in range(1, n + 1):\n        if i not in prime_to_index:\n            primes.append(i)\n            prime_to_index[i] = len(primes) - 1\n            index_to_prime[len(primes) - 1] = i\n    index_to_prime[0] = 1\n    index_to_prime[1] = 1\n    nums = [int(c) for c in stdin.split()]\n    for num in nums:\n        prime = index_to_prime[num]\n        last_prime = primes[prime - 1]\n        divisor = min(last_prime, num)\n        while divisor <= num:\n            divisor += last_prime\n            last_prime = primes[prime - 1]\n        index = prime_to_index[divisor]\n        indexes = [index]\n        while index < len(primes):\n            index += 1\n            if primes[index] == divisor:\n                indexes.append(index)\n                divisor = primes[index]\n        for i in indexes[::-1]:\n            primes.append(divisor)\n            prime_to_index[divisor] = len(primes) - 1\n            index_to_prime[len(primes) - 1] = divisor\n    primes = primes[2:]\n    index = 0\n    while index < len(primes):\n        next_index = index + 1\n        while next_index < len(primes):\n            if primes[index] * primes[next_index] < n:\n                break\n            next_index += 1\n        if next_index == len(primes):\n            break\n        index = next_index\n    if next_index!= len(primes):\n        return''.join([str(c) for c in primes[index:]])\n    else:\n        return''.join([str(c) for c in primes])"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the first line of the input\n    n = int(stdin.readline())\n    # Get the input of the second line\n    b = list(map(int, stdin.readline().split(' ')))\n    # Initialize the answer array\n    ans = []\n    # Initialize a set of primes to store all primes\n    primes = set()\n    # Iterate over all numbers from 1 to 2 * 10^5\n    for i in range(1, 2 * 10**5 + 1):\n        # If the number is prime add it to the set of primes\n        if is_prime(i):\n            primes.add(i)\n    # Iterate over all elements of b\n    for i in range(len(b)):\n        # Initialize the greatest divisor of a\n        greatest_divisor = b[i]\n        # If a is prime\n        if b[i] in primes:\n            # Add a prime to the answer\n            ans.append(b[i])\n        # Otherwise\n        else:\n            # Iterate over all primes from 2 to a - 1\n            for prime in primes:\n                # If the greatest divisor of a is not equal to a\n                if greatest_divisor % prime == 0:\n                    greatest_divisor //= prime\n                    # Break the loop because a is not prime\n                    break\n            # Add the greatest divisor to the answer\n            ans.append(greatest_divisor)\n    # Return the answer\n    return''.join(map(str, ans))\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 2 3 2 4\n   ... ''')\n    3 4 2\n    >>> solution('''1\n   ... 2750131 199999\n   ... ''')\n    199999\n    \"\"\"\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    \n    def is_prime(x):\n        \"\"\"\n        >>> is_prime(0)\n        False\n        >>> is_prime(1)\n        False\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        True\n        >>> is_prime(5)\n        True\n        >>> is_prime(7)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(999999)\n        True\n        \"\"\"\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n\n    answer = [0] * n\n    for i in range(n, 2*n):\n        if is_prime(b[i]):\n            answer[i-n] = b[i]\n    \n    print(*answer)\n    return ''\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    primes = [2]\n    curr = 2\n    while primes[-1] < max(b):\n        while curr < primes[-1] * 50:\n            curr += 1\n            if isPrime(curr):\n                primes.append(curr)\n    b = sorted(b)\n    found = False\n    for x in primes:\n        if x < b[0] or x >= b[-1]:\n            continue\n        for y in range(1, N):\n            if x * y > b[-1]:\n                break\n            for z in range(1, N):\n                if x * y + z > b[-1]:\n                    break\n                if all(x * y + i in b for i in range(z)):\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            break\n    b = sorted([x for x in b if x!= x * y])\n    b = sorted(list(set(b)))\n    return''.join(str(x) for x in b)\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split()]\n    res = []\n    for i in range(n):\n        if b[i] % 2!= 0:\n            for j in range(n):\n                if b[j] % b[i] == 0:\n                    res.append(b[i])\n                    res.append(b[j])\n                    break\n    res = sorted(res)\n    for i in range(len(res)):\n        if i % 2 == 0:\n            print(res[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = a + [x for x in range(max(a)+1, 2750131)]\n    primes = {2}\n    for x in range(3, 2750131, 2):\n        if all(x % y for y in primes if y <= x):\n            primes.add(x)\n    max_prime = max(primes)\n    p = []\n    for x in a:\n        if x == max_prime:\n            p.append(x)\n            continue\n        if x % max_prime == 0:\n            while x % max_prime == 0:\n                x //= max_prime\n            p.append(max_prime)\n        else:\n            m = max(primes)\n            while x % m == 0:\n                x //= m\n            p.append(m)\n    for _ in range(2 * n):\n        p = [p[-1]] + p[:-1]\n    return \" \".join([str(x) for x in p])\n    "
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    is_prime = [True] * (2750132)\n    primes = []\n    for i in range(2, 2750132):\n        if is_prime[i]:\n            primes.append(i)\n        for prime in primes:\n            if prime > i**0.5:\n                break\n            if i % prime == 0:\n                is_prime[i] = False\n                if prime > i//2:\n                    primes.append(i)\n    \n    primes = primes[2:]\n    \n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(0, len(a), 2):\n        b.append(a[i])\n        b.append(a[i+1])\n        for p in primes:\n            if b[-1] % p == 0:\n                b.append(p)\n                break\n        \n        for i in range(len(b)):\n            if is_prime[b[i]] == False:\n                b[i] = b[i]//b[i-1]\n    \n    b = b[::-1]\n    b.pop()\n    return''.join(map(str, b))\n    \n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_prime_list(n):\n        prime_list = []\n        i = 2\n        while len(prime_list) < n:\n            is_prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_list.append(i)\n            i += 1\n        return prime_list\n\n    # Build a list of primes from the given list of numbers\n    def build_prime_list(list_of_numbers):\n        prime_list = []\n        for num in list_of_numbers:\n            prime_list.append(get_prime_list(num))\n        return prime_list\n\n    # Find a number divisible by all numbers in the list that are not equal to the number itself\n    def find_greatest_divisor(num, list_of_numbers):\n        for prime_list in list_of_numbers:\n            if num % prime_list[0]!= 0:\n                return prime_list[0]\n\n    # Return a list of primes that divide all numbers in the list that are not equal to the number itself\n    def find_divisor_list(num, list_of_numbers):\n        divisor_list = []\n        for prime_list in list_of_numbers:\n            if num % prime_list[0]!= 0:\n                divisor_list.append(prime_list[0])\n        return divisor_list\n\n    # Return the list of primes that divide the number given\n    def find_divisor_list_prime(num):\n        divisor_list = []\n        for i in range(2, num):\n            if num % i == 0:\n                divisor_list.append(i)\n        return divisor_list\n\n    # Initialise the array\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split(' ')]\n\n    # Build the list of primes\n    prime_list = build_prime_list(arr)\n\n    # Initialise the array to store the answer\n    ans = []\n\n    # The number to divide is equal to the number of primes minus 1\n    num = n - 1\n\n    # While we have to divide the number by at least one prime\n    while num > 0:\n        # Find the divisor\n        divisor = find_greatest_divisor(num, prime_list)\n\n        # Find the list of primes that divide the number\n        divisor_list = find_divisor_list(num, prime_list)\n\n        # Remove the greatest divisor from the list of primes\n        for i in range(len(divisor_list)):\n            if divisor_list[i] == divisor:\n                prime_list[i].remove(divisor)\n\n        # Append the greatest divisor to the list of primes\n        prime_list.append([divisor])\n\n        # Append the greatest divisor to the answer\n        ans.append(divisor)\n\n        # Decrease the number of primes\n        n -= 1\n\n        # Decrease the number to divide by\n        num = n\n\n    # Print the answer\n    print(*ans)\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    skills = [int(x) for x in stdin.split(' ')[1:]]\n    def solve(skills):\n        i = 0\n        while i < len(skills):\n            for j in range(i + 1, len(skills)):\n                if skills[i] < skills[j]:\n                    skills[i], skills[j] = skills[j], skills[i]\n                    break\n            else:\n                i += 1\n        return skills\n    skills = solve(skills)\n    return ''.join(['1' if i < k else '2' for i in range(n)])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = stdin[0].split(' ')\n    students = stdin[1].split(' ')\n    k = int(k)\n    n = int(n)\n    students = list(map(int, students))\n    students.sort()\n\n    first_team = []\n    second_team = []\n    while len(students) > 0:\n        first_team.append(students.pop(students.index(max(students))))\n        if len(students) == 0:\n            break\n        second_team.append(students.pop(students.index(min(students))))\n\n    if len(students) == 0:\n        return ''.join(['1' if i in first_team else '2' for i in range(1, n + 1)])\n\n    k = min(k, len(first_team))\n\n    for i in range(1, k + 1):\n        first_team.append(students.pop(students.index(min(students))))\n    for i in range(1, k + 1):\n        second_team.append(students.pop(students.index(max(students))))\n\n    if len(students) == 0:\n        return ''.join(['1' if i in first_team else '2' for i in range(1, n + 1)])\n    else:\n        return ''.join(['1' if i in first_team else '2' for i in range(1, n + 1)])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    # skills = [1, 2, 3, 4, 5]\n    # skills = [2, 1, 3, 5, 4]\n    # skills = [7, 2, 1, 3, 5, 4, 6]\n    # skills = [7, 2, 1, 3, 5, 4, 6, 2]\n    # skills = [4, 1, 3, 5, 2, 7, 6]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2, 1]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2, 1, 3]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2, 1, 3, 5]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2, 1, 3, 5, 5]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2, 1, 3, 5, 5, 5]\n    # skills = [4, 1, 3, 5, 2, 7, 6, 2, 1, 3, 5, 5, 5, 5]\n    \n    # for i in range(len(skills)):\n    #     print(skills[i], end=\" \")\n    # print()\n    \n    # print(skills)\n    \n    # team1 = []\n    # team2 = []\n    # for _ in range(n // 2):\n    #     max_skills = max(skills)\n    #     team1.append(skills.index(max_skills))\n    #     skills[skills.index(max_skills)] = -1\n    # print(team1)\n    \n    # for _ in range(n // 2):\n    #     min_skills = min(skills)\n    #     team2.append(skills.index(min_skills))\n    #     skills[skills.index(min_skills)] = -1\n    # print(team2)\n    \n    # for i in range(len(team1)):\n    #     skills[team1[i]] = 1\n    # for i in range(len(team2)):\n    #     skills[team2[i]] = 2\n    \n    # for i in range(len(skills)):\n    #     print(skills[i], end=\" \")\n    # print()\n    \n    \n    # print(n // 2)\n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])\n    \n    # for i in range(n // 2):\n    #     print(i, skills[i], skills[n - 1 - i])"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    skills = stdin.split()\n    skills = [int(x) for x in skills]\n    first_team = set()\n    second_team = set()\n    for i in range(1, n+1):\n        first_team.add(i)\n        second_team.add(i)\n\n    while skills:\n        chosen_skills = []\n        for i in range(k):\n            chosen_skills.append(min(skills))\n            skills.remove(chosen_skills[i])\n        chosen_skills = sorted(chosen_skills)\n        for i in chosen_skills:\n            first_team.add(i)\n            skills.remove(i)\n        for i in range(k):\n            chosen_skills.append(max(skills))\n            skills.remove(chosen_skills[k-1-i])\n        for i in chosen_skills:\n            second_team.add(i)\n            skills.remove(i)\n    return ''.join([str(1) if i in first_team else str(2) for i in range(1, n+1)])\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(' ')))\n    n, k = stdin[0], stdin[1]\n    arr = stdin[2:]\n    if n < k * 2:\n        return '1' * n\n    team = ['1', '2']\n    while len(arr) > 0:\n        idx = find_max(arr)\n        for i in range(1, k + 1):\n            if idx - i < 0 or arr[idx - i] < i:\n                break\n        for i in range(1, k + 1):\n            if idx + i >= len(arr) or arr[idx + i] < i:\n                break\n        for i in range(idx - i, idx):\n            team.append('2')\n            del arr[idx]\n        for i in range(idx + i, idx, -1):\n            team.append('1')\n            del arr[idx]\n    return ''.join(team)\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    table = [[i, students[i]] for i in range(n)]\n    for _ in range(n):\n        table = sorted(table, key=lambda x: x[1])[::-1]\n        m = (n - k) // 2\n        i = m - 1\n        if m == 0:\n            i = 0\n        team = []\n        for j in range(m):\n            team.append(table.pop(i)[0])\n            i += (n - k)\n        team = sorted(team)\n        print(''.join([str(i + 1) for i in team]))\n    return ''\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    assert 1 <= k <= n <= 2 * 10 ** 5\n    arr = list(map(int, stdin.split()))\n    assert len(arr) == n\n    arr.sort(reverse=True)\n    res = [0 for _ in range(n)]\n    nums = [1 for _ in range(n)]\n    while True:\n        best = max(nums)\n        best_num = nums.index(best)\n        best_nums = [i for i in range(best_num - k + 1, best_num + k + 1) if 0 <= i < n]\n        if best_nums:\n            break\n        nums = [i - 1 for i in nums]\n        res[best_num] = 1\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = []\n\n    while len(arr) > 0:\n        for i in range(k):\n            if i < len(arr):\n                res.append(1 if arr[0] > arr[i] else 2)\n                arr.pop(0)\n            else:\n                res.append(1 if arr[0] > arr[i - len(arr)] else 2)\n                arr.pop(0)\n\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ''' https://app.codility.com/demo/results/trainingU6YH8W-AXA/ '''\n    # assume input is valid\n    n = int(stdin)\n    # make sure array is n elements long\n    nums = [int(x) for x in stdin.split()]\n    if len(nums)!= n:\n        raise ValueError\n    # init count\n    count = 0\n    # loop through all possible permutations\n    for i in range(n):\n        for j in range(n):\n            # check if it's the same\n            if j < i and nums[i] == nums[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    a.sort()\n    q = [0] * n\n    q[0] = 1\n    for i in range(1, n):\n        j = 0\n        while j < i:\n            if a[j] == a[i]:\n                break\n            j += 1\n        if j == i:\n            q[i] = q[i - 1]\n        else:\n            q[i] = (q[i - 1] + q[j]) % 1000000007\n    return q[n - 1]"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_factors(n: int) -> List[int]:\n        \"\"\"returns factors of n\"\"\"\n        factors = []\n        i = 2\n        while i * i <= n:\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n            i += 1\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    a = sorted(a)\n\n    cnt = 0\n    factors_a = get_factors(a[0])\n    for i in range(1, n):\n        factors_b = get_factors(a[i])\n        for factor in factors_a:\n            if factor in factors_b:\n                cnt += 1\n        factors_a = factors_b\n    return cnt % 998244353\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(n) for n in stdin.readline().strip().split()]\n    \n    def rle(a: List[int]) -> int:\n        l = []\n        if len(a) < 3:\n            return 0\n        for i in range(len(a)-1):\n            if a[i] == a[i+1]:\n                l.append(a[i])\n        if len(l) == 0:\n            return 0\n        for j in range(len(l)-1):\n            if l[j] == l[j+1]:\n                return 0\n        return 1\n    \n    ans = 0\n    for i in range(n-2):\n        ans += rle(a[i:])\n    ans += rle(a)\n    ans %= 1000000007\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import math\n\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] > a[i + 1]:\n                count += 1\n        if i == n - 1:\n            if a[i] > a[i - 1]:\n                count += 1\n        else:\n            if a[i] > a[i + 1] and a[i] > a[i - 1]:\n                count += 1\n    return math.factorial(n) % (10 ** 9 + 7) - (count * math.factorial(n - 2) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    dp = [0] * n\n    dp[0] = 1\n\n    for i in range(1, n):\n        dp[i] = dp[i - 1]\n        if a[i] == a[i - 1]:\n            dp[i] += 1\n\n    for i in range(1, n):\n        dp[i] += dp[i - 1]\n\n    return dp[n - 1] % 998244353\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Define variables\n    p = [0] * N\n    curr = 0\n\n    # Define dp array\n    dp = [0] * N\n\n    # Perform DP\n    for i, a in enumerate(A):\n        # Reset curr if a changes\n        if i > 0 and A[i - 1]!= a:\n            curr = 0\n\n        # Update curr if it is same as previous\n        if a == A[i - 1]:\n            curr += 1\n\n        p[i] = curr\n        dp[i] = dp[i - 1] + (1 + p[i]) % MOD\n\n    # Get output\n    return dp[-1] % MOD\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of distinct monotonic renumerations of an array.\n    >>> solution('''5\n   ... 1 2 1 2 3''')\n    2\n    >>> solution('''4\n   ... 1 3 3 7''')\n    4\n    \"\"\"\n    # a = [int(i) for i in stdin.split()]\n    # n = len(a)\n    # diff = dict()\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if a[i] < a[j]:\n    #             key = (a[i], a[j])\n    #             diff[key] = diff.get(key, 0) + 1\n    #         elif a[i] > a[j]:\n    #             key = (a[j], a[i])\n    #             diff[key] = diff.get(key, 0) + 1\n    # return len(diff)\n\n    # a = [int(i) for i in stdin.split()]\n    # n = len(a)\n    # # 1. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n    # b = set()\n    # # 2. \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             continue\n    #         if a[j] < a[i]:\n    #             key = (a[j], a[i])\n    #             if key in b:\n    #                 b.remove(key)\n    #             else:\n    #                 b.add(key)\n    #         elif a[j] > a[i]:\n    #             key = (a[i], a[j])\n    #             if key in b:\n    #                 b.remove(key)\n    #             else:\n    #                 b.add(key)\n    # return len(b)\n\n    # a = [int(i) for i in stdin.split()]\n    # n = len(a)\n    # # 1. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n    # b = set()\n    # # 2. \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             continue\n    #         if a[j] < a[i]:\n    #             if a[j] * 2 in a[:i]:\n    #                 continue\n    #             else:\n    #                 b.add(a[j] * 2)\n    #         elif a[j] > a[i]:\n    #             if a[j] in b:\n    #                 b.remove(a[j])\n    #             else:\n    #                 b.add(a[j])\n    # return len(b)\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    # 1. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n    b = set()\n    # 2. \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a[j] < a[i]:\n                if a[j] * 2 in a[:i]:\n                    continue\n                else:\n                    b.add(a[j] * 2)\n            elif a[j] > a[i]:\n                if a[j] in b:\n                    b.remove(a[j])\n                else:\n                    b.add(a[j])\n    return len(b)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(s) for s in stdin.split()]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 0\n        while i < n:\n            for j in range(i + 1, n):\n                if seq[i]!= seq[j] and (seq[i] + seq[j]) % 2 == 0:\n                    break\n            else:\n                seq.remove(seq[i])\n                n -= 1\n                i = max(i - 1, 0)\n            i += 1\n        return len(seq)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    seq = [int(c) for c in stdin.readline().strip().split(' ')]\n    '''\n    n = int(input())\n    seq = [int(c) for c in input().strip().split(' ')]\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum = seq[i] + seq[j]\n            if sum & (sum - 1) == 0:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    s = set()\n    res = 0\n    for i in a:\n        if i in s:\n            res += 1\n        else:\n            s.add(i)\n    return res\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(s) for s in stdin.split()]\n    d = {}\n    ans = 0\n    for elem in seq:\n        if elem in d:\n            ans += 1\n            d[elem] += 1\n        else:\n            d[elem] = 1\n    for elem in d.values():\n        if elem % 2 == 0:\n            ans += elem - 1\n        else:\n            ans += elem\n    return ans\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(seq):\n        for i in range(1, len(seq)):\n            for j in range(i + 1, len(seq)):\n                if seq[i] + seq[j] >= 2 ** 31:\n                    return False\n        return True\n\n    n = int(stdin)\n    seq = list(map(int, stdin.split(' ')))\n    cnt = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if seq[i] + seq[j] >= 2 ** 31:\n                break\n            else:\n                if not is_good(seq[:i] + seq[i + 1:j] + seq[j + 1:]):\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = int(stdin.readline()), sorted(map(int, stdin.readline().split()))\n    if any(seq[i] == seq[j] for i in range(n - 1) for j in range(i + 1, n) if 2 ** seq[i] + seq[j] <= 2 ** 21):\n        print(0)\n    else:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if seq[i] + seq[j] <= 2 ** 21:\n                    break\n            else:\n                continue\n            break\n        print(j - i)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join([str(i) for i in range(int(stdin))])"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # Take input\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    # Obtain sum of a_i and remove duplicates\n    arr_sum = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            arr_sum.add(arr[i] + arr[j])\n    # Filter for only odd numbers\n    arr_sum = list(filter(lambda x: x % 2 == 1, arr_sum))\n    # Get minimum\n    minimum = len(arr_sum)\n    # Loop through numbers\n    for i in range(len(arr_sum)):\n        # Obtain array with sum of i\n        arr_new_sum = []\n        for j in range(n):\n            if arr[j] % 2 == 0:\n                arr_new_sum.append(arr[j] - arr_sum[i])\n            else:\n                arr_new_sum.append(arr[j] + arr_sum[i])\n        # Check if good\n        if all(arr_new_sum[j] > 0 for j in range(len(arr_new_sum))):\n            minimum = min(minimum, i)\n    return str(minimum)\n\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('111011100')\n    2\n    \"\"\"\n    n = stdin[0]\n    n = int(n)\n    nums = []\n    for i in range(1, n + 1):\n        nums.append(int(stdin[i]))\n    # print(nums)\n    stack = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            stack.append(0)\n        else:\n            stack.append(1)\n    # print(stack)\n\n    removed = 0\n    while True:\n        try:\n            if stack[-1] == 1 and stack[-2] == 0:\n                stack.pop()\n                stack.pop()\n                removed += 1\n            else:\n                break\n        except IndexError:\n            break\n\n    print(removed)\n\n    # Your solution here!\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cubes = len(stdin)\n    print(number_of_cubes)\n    \n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import Dict\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the above problem.\n    '''\n    pass\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_cubes_to_remove(stdin))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i - 1, -1):\n            if stdin[i] == stdin[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[0][0]\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    return str(len(input) - len(set(input)))\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    2nd\n    '''\n    _, M = map(int, stdin.split())\n    s = set()\n    l = []\n    r = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        s.add(a)\n        s.add(b+1)\n        l.append(a)\n        r.append(b)\n\n    # \u5de6\u304b\u3089\u53f3\u306b\u8ffd\u52a0\n    s = sorted(s)\n    # \u672b\u5c3e\u306b1\u3092\u8ffd\u52a0\n    s.append(1)\n    # \u53f3\u304b\u3089\u5de6\u306b\u8ffd\u52a0\n    s = sorted(s)[::-1]\n    # \u5de6\u304b\u3089\u53f3\u306b\u8ffd\u52a0\n    s.append(N)\n    # \u53f3\u304b\u3089\u5de6\u306b\u8ffd\u52a0\n    s = sorted(s)[::-1]\n\n    # \u5de6\u304b\u3089\u53f3\u306b\u8ffd\u52a0\n    s = sorted(s)\n    # \u672b\u5c3e\u306b1\u3092\u8ffd\u52a0\n    s.append(1)\n    # \u53f3\u304b\u3089\u5de6\u306b\u8ffd\u52a0\n    s = sorted(s)[::-1]\n\n    l = set(l)\n    r = set(r)\n\n    print(s, l, r)\n\n    # A\u304c\u7b54\u3048\n    a = len(l)\n    b = len(r)\n\n    # \u5de6\u304b\u3089\u53f3\u306b\u8ffd\u52a0\n    # \u5de6\u304b\u3089\u53f3\u306b\u8ffd\u52a0\n    s = set(s)\n    l = set(l)\n    r = set(r)\n\n    print(s, l, r)\n\n    c = 0\n\n    for a in l:\n        if a in s:\n            c += 1\n    for b in r:\n        if b in s:\n            c += 1\n\n    return c\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    gates = []\n    for _ in range(M):\n        L, R = map(int, stdin.split())\n        gates.append((L, R))\n\n    def solve(start: int, end: int, gates: List[Tuple[int, int]]) -> bool:\n        if len(gates) == 0 or start >= end:\n            return True\n        mid = (start + end) // 2\n        for i, (l, r) in enumerate(gates):\n            if l <= mid <= r:\n                gates = gates[:i] + gates[i+1:]\n                if not solve(start, mid, gates):\n                    return False\n                break\n        else:\n            return solve(mid+1, end, gates)\n\n    return str(N - solve(0, N, gates))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    cards = []\n    for i in range(m):\n        cards.append(list(map(int, stdin.split('\\n')[i + 1].split())))\n    return str(get_answer(n, m, cards))\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input from stdin\"\"\"\n    n, m = [int(i) for i in stdin.split(' ')]\n    l_r = [int(i) for i in stdin.split(' ')]\n    return '\\n'.join(l_r)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    nums = [map(int, stdin.split(' ')) for _ in range(n)]\n    \n    \n    return \"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def water(h: List[int], l: int, r: int) -> int:\n        water_count = 0\n        for i in range(l, r + 1):\n            h[i] += 1\n            water_count += 1\n        return water_count\n    \n    n = int(stdin.readline().strip())\n    h = [0] + [int(x) for x in stdin.readline().strip().split()]\n    water_count = 0\n    for i in range(1, n + 1):\n        l, r = stdin.readline().strip().split()\n        water_count += water(h, int(l), int(r))\n    return water_count\n\na = [1,2,2,3]\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def water(A: list) -> int:\n        current = 0\n        count = 0\n        N = len(A)\n        while current < N:\n            for i in range(0, N - current - 1):\n                if A[i] > A[i + 1]:\n                    A[i], A[i + 1] = A[i + 1], A[i]\n                    count += 1\n            current += 1\n        return count\n    N = int(stdin.readline())\n    A = [int(num) for num in stdin.readline().strip().split(' ')]\n    count = water(A)\n    return count"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def f(arr: list[int], l: int, r: int):\n        r = len(arr) if r == -1 else r\n        arr = [i + 1 for i in arr]\n        arr = arr[l - 1:r]\n        arr.sort()\n        return sum(arr[i - 1] - arr[i] for i in range(len(arr)))\n    arr = list(map(int, stdin.split(\" \")))\n    n = arr[0]\n    arr = arr[1:]\n    l, r = 1, len(arr)\n    for i in range(n):\n        print(f(arr, l, r))\n        l, r = l + 1, r + 1\n    return \"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    min_v = min(a)\n    for i in range(len(a)):\n        if a[i] == min_v:\n            if i+1 < len(a):\n                if a[i+1] < min_v:\n                    ans += 1\n            if i-1 >= 0:\n                if a[i-1] < min_v:\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    h_list = [int(x) for x in stdin.readline().strip().split()]\n    \n    # The number of operations needed to get the heights to be increasing.\n    operations = 0\n    # The number of operations needed to get the heights to be decreasing.\n    operations_2 = 0\n    \n    # This is the number of operation needed to keep the heights increasing.\n    increasing = 0\n    # This is the number of operation needed to keep the heights decreasing.\n    decreasing = 0\n    \n    h_list = [0] + h_list + [0]\n    for i in range(1, N + 2):\n        if h_list[i] > h_list[i - 1]:\n            if increasing == 0:\n                operations += 1\n            increasing += 1\n            \n        elif h_list[i] < h_list[i - 1]:\n            if decreasing == 0:\n                operations += 1\n            decreasing += 1\n        else:\n            increasing = 0\n            decreasing = 0\n    \n    print(min(operations, operations_2))\n    \n    return ''\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    s = str(l) +'' + str(r)\n    print(s)\n    return s"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split('\\n')[1:]]\n    arr.sort()\n    watering = 0\n    l, r = 1, n\n    while l <= r:\n        watering += (r-l+1)\n        l += 1\n    return watering\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    solution = 0\n    for i in range(n - 1):\n        if i + 1 < len(sequence):\n            if (sequence[i] + sequence[i + 1]) % w!= 0:\n                solution = 1\n                break\n            solution = (solution * 2) % (10 ** 9 + 7)\n    print(solution)\n    return ''\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5\n   ... 2 1 -3\n   ... ''')\n    '3'\n    >>> solution('''2 4\n   ... -1 1\n   ... ''')\n    '4'\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    \"\"\"\n    return str(solve(*parse(stdin)))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nConstraints\n\n\nLanguages\nPYTHON 3.9.5\nC/C++\n\n\"\"\"\n\nimport sys\n\nn, w = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n2 1 -3\")\n    3\n    >>> solution(\"4 10\\n2 4 1 2\")\n    2\n    >>> solution(\"4 10\\n2 4 1 1\")\n    4\n    \"\"\"\n    n, capacity = [int(x) for x in stdin.split()]\n    seq = [int(x) for x in stdin.split()[1].split(\",\")]\n    seq.insert(0, 0)\n    seq.append(0)\n\n    cnt = Counter()\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            cnt[seq[i] - seq[j]] += 1\n\n    cnt = {k: v for k, v in cnt.items() if v}\n\n    min_value = min(cnt.values())\n    max_value = max(cnt.values())\n    if min_value == max_value:\n        return str(min_value)\n    else:\n        return 0\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    \n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.splitlines()\n    n = int(stdin[0].split(' ')[0])\n    w = int(stdin[0].split(' ')[1])\n    a = [int(line) for line in stdin[1].split(' ')]\n    if n == 1:\n        return f'{1}\\n'\n    if n == 2:\n        return f'{2}\\n'\n    count = 0\n    for i in range(0, n - 1):\n        count += a[i] * (a[i + 1] - w)\n    ans = 0\n    for i in range(0, w + 1):\n        for j in range(i, w + 1):\n            count = count + (j - i) * (a[0] - i) * (a[n - 1] - j)\n            if count >= 0:\n                ans += 1\n            else:\n                break\n    return f'{ans}\\n'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this kata.\"\"\"\n    # Convert input into a list\n    stdin = [int(s) for s in stdin.split('\\n') if s!= '']\n\n    # Remove invalid data and fix input\n    for i, x in enumerate(stdin[1]):\n        if x < -1000 or x > 1000:\n            stdin[1][i] = 0\n\n    # Get the length of the list, the values of the list\n    n = len(stdin[1])\n    values = stdin[1]\n\n    # Find all the possible values for each stop\n    values = [find_values(values, i, n) for i in range(n)]\n\n    # Find the maximum value for each stop\n    values = [max(values[i]) for i in range(n)]\n\n    # Find the final value\n    final = sum(values)\n\n    # If the value is negative, there will be a contradiction\n    if final < 0:\n        return 0\n\n    return final\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution that solves the problem by simply traversing the array\n    and looking for the possible ways to have n people in the bus before stop\n    \"\"\"\n    stops, n = [int(x) for x in stdin.split(' ')]\n    bus = [int(x) for x in stdin.split(' ')]\n    sum = 0\n    for i in range(1, n):\n        # Find ways to have n people in the bus\n        ways = 0\n        for j in range(i):\n            if bus[j] > bus[i]:\n                ways += 1\n        sum += ways\n\n    return str(sum)\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    n = stdin[0]\n    seq = stdin[1:]\n    ans = []\n    c = 1\n    for i in range(n):\n        ans.append(c)\n        c *= 2 if c < seq[i] else 1\n    print(' '.join(map(str, ans)))\n    return ''"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n\n\n-----Test-----\n\nTest 1\nsolution()\n\nTest 2\nsolution()\n\nTest 3\nsolution()\n\n\n-----Teacher's solution-----\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline().strip())\n  arr = [int(x) for x in stdin.readline().strip().split()]\n\n  ans = []\n  p = 2\n  for i in range(n):\n    if arr[i] % p == 0:\n      ans.append(arr[i] // p)\n      p *= 3\n    else:\n      ans.append(arr[i])\n  return''.join([str(x) for x in ans])\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(list(stdin))\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def parse(s: str) -> int:\n        return int(s.split(' ')[-1])\n\n    stdin = [parse(line) for line in stdin.split('\\n')]\n    n = stdin[0]\n    stdin = stdin[1:]\n    x = []\n    for num in stdin:\n        if num == 0:\n            continue\n        if num % 3 == 0:\n            x.append(num // 3)\n        elif num % 2 == 0:\n            x.append(num // 2)\n        else:\n            x.append(num - 1)\n    return''.join(str(num) for num in x)"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1]\n\n    res = []\n    for num in stdin.split(' '):\n        res.append(num)\n\n    res = [int(num) for num in res]\n    output = []\n\n    for i in range(n):\n        if res[i] % 3 == 0:\n            output.append(res[i] // 3)\n            output.append(res[i] // 3)\n            output.append(res[i])\n        elif res[i] % 2 == 0:\n            output.append(res[i] // 2)\n            output.append(res[i])\n        else:\n            output.append(res[i])\n            output.append(res[i])\n\n    return''.join([str(num) for num in output])\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    max_diff = 1\n    for i in range(num - 1):\n        max_diff = max(max_diff, arr[i + 1] - arr[i])\n    left = 0\n    right = num - 1\n    while left < right:\n        mid = (left + right) // 2\n        if num - mid - 1 < max_diff:\n            left = mid + 1\n        else:\n            right = mid\n    return str(num - right - 1) +'' +''.join(map(str, arr[right + 1:]))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = sorted(map(int, stdin.split()))\n    size = 1\n    cur = x[0]\n    for i in range(n):\n        if abs(x[i] - cur) & 1:\n            size += 1\n            cur = x[i]\n    print(size)\n    print(*x[:size])\n    return ''"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def bin_search(a, b):\n        if a == b:\n            return a\n        if b - a == 1:\n            return max(a, b)\n        middle = (a + b) // 2\n        if middle ** 2 <= stdin:\n            return bin_search(a, middle)\n        return bin_search(middle, b)\n\n    num = int(stdin)\n    points = list(map(int, stdin.split()))\n    points.sort()\n    return str(bin_search(0, num))"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, my_res))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split(' ')]\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f\n    # \u0434\u0432\u043e\u0439\u043a\u0430\u043c\u0438 \u043a\u043e\u0440\u043d\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    sq = int(math.sqrt(N))\n    res = []\n    # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0432\u043e\u0439\u043a\u0430\u043c\u0438\n    # \u0434\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 X\n    for i in range(sq, N - sq + 1):\n        # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f\n        set1 = set()\n        for j in range(i, N - i + 1):\n            if X[j] in set1:\n                res.append(X[j])\n                set1 = set()\n                break\n            set1.add(X[j])\n    return str(len(res)) + '\\n' +''.join([str(x) for x in sorted(res)])\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = (int(i) for i in stdin.split('\\n')[0].split(' '))\n    takahashi, aoki = a, b\n    for i in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            continue\n    print(takahashi, aoki)\n    return ''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    T = 0\n    Aoki = B\n    Takahashi = A\n    for i in range(K):\n        T += 1\n        if Takiashi > 0:\n            Takiashi -= 1\n            continue\n        if Aoki > 0:\n            Aoki -= 1\n            continue\n    return str(Takiashi) + \" \" + str(Aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(' '))\n    print(A + B - (K * 2))\n    print(A - B + (K * 2))"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B, K = map(int, stdin.split())\n    Takahashi = 0\n    Aoki = B\n    for i in range(K):\n        Takahashi += 1 if Takahashi < A else 0\n        Aoki += 1 if Aoki < B else 0\n        if Takahashi == 0 and Aoki == 0:\n            break\n    print(Takahashi, Aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = a\n    aoki = b\n    for i in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            pass\n    print(takahashi, aoki)\n    return \"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    A, B, K = stdin.split()\n    A = int(A)\n    B = int(B)\n    K = int(K)\n    \n    while A!= 0 and B!= 0 and K > 0:\n        if A > B:\n            print(A - B)\n            A = A - B\n        else:\n            print(B - A)\n            B = B - A\n        K = K - 1\n    \n    if A!= 0:\n        print(A)\n    else:\n        print(B)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution: O(log n)\n    \"\"\"\n    A, B, K = [int(x) for x in stdin.split()]\n    takahashi = [A]\n    takahashi.append(A - B)\n    takahashi.append(A - 2 * B)\n    takahashi = takahashi[::-1]\n    aoki = [0]\n    aoki.append(B)\n    aoki.append(B - A)\n    aoki = aoki[::-1]\n    total = 0\n    for i in range(K):\n        if takahashi[i] >= 0 and aoki[i] >= 0:\n            total += takahashi[i] + aoki[i]\n            takahashi[i] = takahashi[i] - 1\n            aoki[i] = aoki[i] - 1\n        elif takahashi[i] >= 0 and aoki[i] < 0:\n            total += takahashi[i]\n            takahashi[i] = takahashi[i] - 1\n        elif takahashi[i] < 0 and aoki[i] >= 0:\n            total += aoki[i]\n            aoki[i] = aoki[i] - 1\n    return total, takahashi[-1], aoki[-1]\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi has A cookies, and Aoki has B cookies.\n\n    Takahashi will do the following action K times:\n        If Takahashi has one or more cookies, eat one of his cookies.\n        Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.\n        If they both have no cookies, do nothing.\n\n    In the end, how many cookies will Takahashi and Aoki have, respectively?\n    \"\"\"\n    a, b, k = map(int, stdin.split(\" \"))\n    print(b - a + k % (b - a), a + k // (b - a))\n    return \"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    Aoki = B\n    Takahashi = A\n\n    for _ in range(K):\n        Takahashi = Takahashi - 1\n        if Takahashi <= 0:\n            Takahashi = 0\n            break\n        if Aoki <= 0:\n            Takahashi = Takahashi + Aoki\n            Aoki = B\n        Aoki = Aoki - 1\n        if Aoki <= 0:\n            Aoki = 0\n\n    return f\"{Takahashi} {Aoki}\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    total = 0\n    while total < X:\n        count += 1\n        total = total * 1.01 + 100\n    return count"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(float, stdin.split(\"\\n\"))\n    i = 0\n    while t < s:\n        i += 1\n        s = s * (1 + 0.01)\n    return str(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    bal = int(stdin)\n\n    # compute year that take to reach bal\n    year = 0\n    while bal < 1000:\n        year += 1\n        bal += bal * 0.01\n    return str(year)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while True:\n        x = (1 + (0.01/12)) * x\n        i += 1\n        if x >= 103:\n            return i\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='101')\n    3\n    \"\"\"\n    X = int(stdin)\n    year = 0\n    while X < 101:\n        X = X + (X * 0.01)\n        year += 1\n    return str(year)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # if x == 1:\n    #     return 1\n    # if x < 1:\n    #     return 0\n    # count = 0\n    # while x < 101:\n    #     count += 1\n    #     x = x * (1 + 1/100)\n    #     if x > 101:\n    #         return count\n    #     if x == 101:\n    #         return count + 1\n    # while x > 101:\n    #     count += 1\n    #     x = x * (1 + 1/100)\n    #     if x < 101:\n    #         return count\n    #     if x == 101:\n    #         return count + 1\n\n    # n = int(stdin)\n    # b = 100\n    # count = 0\n    # while True:\n    #     count += 1\n    #     b = b + int(b * (1 / 100))\n    #     if b >= n:\n    #         return count\n    #     if b == n:\n    #         return count + 1\n\n    balance = 100\n    interest = 0.01\n    count = 0\n    while balance < x:\n        count += 1\n        balance = balance + balance * interest\n    return count\n\nprint(solution(\"101\"))\nprint(solution(\"103\"))\nprint(solution(\"2\"))\nprint(solution(\"3\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"6\"))\nprint(solution(\"7\"))\nprint(solution(\"8\"))\nprint(solution(\"9\"))\nprint(solution(\"10\"))\nprint(solution(\"11\"))\nprint(solution(\"12\"))\nprint(solution(\"13\"))\nprint(solution(\"14\"))\nprint(solution(\"15\"))\nprint(solution(\"16\"))\nprint(solution(\"17\"))\nprint(solution(\"18\"))\nprint(solution(\"19\"))\nprint(solution(\"20\"))\nprint(solution(\"21\"))\nprint(solution(\"22\"))\nprint(solution(\"23\"))\nprint(solution(\"24\"))\nprint(solution(\"25\"))\nprint(solution(\"26\"))\nprint(solution(\"27\"))\nprint(solution(\"28\"))\nprint(solution(\"29\"))\nprint(solution(\"30\"))\nprint(solution(\"31\"))\nprint(solution(\"32\"))\nprint(solution(\"33\"))\nprint(solution(\"34\"))\nprint(solution(\"35\"))\nprint(solution(\"36\"))\nprint(solution(\"37\"))\nprint(solution(\"38\"))\nprint(solution(\"39\"))\nprint(solution(\"40\"))\nprint(solution(\"41\"))\nprint(solution(\"42\"))\nprint(solution(\"43\"))\nprint(solution(\"44\"))\nprint(solution(\"45\"))\nprint(solution(\"46\"))\nprint(solution(\"47\"))\nprint(solution(\"48\"))\nprint(solution(\"49\"))\nprint(solution(\"50\"))\nprint(solution(\"51\"))\nprint(solution(\"52\"))\nprint(solution(\"53\"))\nprint(solution(\"54\"))\nprint(solution(\"55\"))\nprint(solution(\"56\"))\nprint(solution(\"57\"))\nprint(solution(\"58\"))\nprint(solution(\"59\"))\nprint(solution(\"60\"))\nprint(solution(\"61\"))\nprint(solution(\"62\"))\nprint(solution(\"63\"))\nprint(solution(\"64\"))\nprint(solution(\"65\"))\nprint(solution(\"66\"))\nprint(solution(\"67\"))\nprint(solution(\"68\"))\nprint(solution(\"69\"))\nprint(solution(\"70\"))\nprint(solution(\"71\"))\nprint(solution(\"72\"))\nprint(solution(\"73\"))\nprint(solution(\"74\"))\nprint(solution(\"75\"))\nprint(solution(\"76\"))\nprint(solution(\"77\"))\nprint(solution(\"78\"))\nprint(solution(\"79\"))\nprint(solution(\"80\"))\nprint(solution(\"81\"))\nprint(solution(\"82\"))\nprint(solution(\"83\"))\nprint(solution(\"84\"))\nprint(solution(\"85\"))\nprint(solution(\"86\"))\nprint(solution(\"87\"))\nprint(solution(\"88\"))\nprint(solution(\"89\"))\nprint(solution(\"90\"))\nprint(solution(\"91\"))\nprint(solution(\"92\"))\nprint(solution(\"93\"))\nprint(solution(\"94\"))\nprint(solution(\"95\"))\nprint(solution(\"96\"))\nprint(solution(\"97\"))\nprint(solution(\"98\"))\nprint(solution(\"99\"))\nprint(solution(\"100\"))\nprint(solution(\"101\"))\nprint(solution(\"102\"))\nprint(solution(\"103\"))\nprint(solution(\"104\"))\nprint(solution(\"105\"))\nprint(solution(\"106\"))\nprint(solution(\"107\"))\nprint(solution(\"108\"))\nprint(solution(\"109\"))\nprint(solution(\"110\"))\nprint(solution(\"111\"))\nprint(solution(\"112\"))\nprint(solution(\"113\"))\nprint(solution(\"114\"))\nprint(solution(\"115\"))\nprint(solution(\"116\"))\nprint(solution(\"117\"))\nprint(solution(\"118\"))\nprint(solution(\"119\"))\nprint(solution(\"120\"))\nprint(solution(\"121\"))\nprint(solution(\"122\"))\nprint(solution(\"123\"))\nprint(solution(\"124\"))\nprint(solution(\"125\"))\nprint(solution(\"126\"))\nprint(solution(\"127\"))\nprint(solution(\"128\"))\nprint(solution(\"129\"))\nprint(solution(\"130\"))\nprint(solution(\"131\"))\nprint(solution(\"132\"))\nprint(solution(\"133\"))\nprint(solution(\"134\"))\nprint(solution(\"135\"))\nprint(solution(\"136\"))\nprint(solution(\"137\"))\nprint(solution(\"138\"))\nprint(solution(\"139\"))\nprint(solution(\"140\"))\nprint(solution(\"141\"))\nprint(solution(\"142\"))\nprint(solution(\"143\"))\nprint(solution(\"144\"))\nprint(solution(\"145\"))\nprint(solution(\"146\"))\nprint(solution(\"147\"))\nprint(solution(\"148\"))\nprint(solution(\"149\"))\nprint(solution(\"150\"))\nprint(solution(\"151\"))\nprint(solution(\"152\"))\nprint(solution(\"153\"))\nprint(solution(\"154\"))\nprint(solution(\"155\"))\nprint(solution(\"156\"))\nprint(solution(\"157\"))\nprint(solution(\"158\"))\nprint(solution(\"159\"))\nprint(solution(\"160\"))\nprint(solution(\"161\"))\nprint(solution(\"162\"))\nprint(solution(\"163\"))\nprint(solution(\"164\"))\nprint(solution(\"165\"))\nprint(solution(\"166\"))\nprint(solution(\"167\"))\nprint(solution(\"168\"))\nprint(solution(\"169\"))\nprint(solution(\"170\"))\nprint(solution(\"171\"))\nprint(solution(\"172\"))\nprint(solution(\"173\"))\nprint(solution(\"174\"))\nprint(solution(\"175\"))\nprint(solution(\"176\"))\nprint(solution(\"177\"))\nprint(solution(\"178\"))\nprint(solution(\"179\"))\nprint(solution(\"180\"))\nprint(solution(\"181\"))\nprint(solution(\"182\"))\nprint(solution(\"183\"))\nprint(solution(\"184\"))\nprint(solution(\"185\"))\nprint(solution(\"186\"))\nprint(solution(\"187\"))\nprint(solution(\"188\"))\nprint(solution(\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of years it takes for Takahashi's balance to reach X yen or above for the first time.\n\n    >>> solution(\"103\")\n    3\n    >>> solution(\"2\")\n    2\n    \"\"\"\n    money = int(stdin)\n\n    i = 1\n    while True:\n        money *= 1 + 0.01\n        if money >= 100:\n            return i\n        i += 1\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    curr = 100\n    i = 1\n    while curr < x:\n        curr *= 1.01\n        i += 1\n    return i\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    X = stdin\n    # convert to float\n    X = float(X)\n    # get the year\n    # year = year\n    # convert to int\n    # year = int(year)\n    # get the amount of money\n    # amount = amount\n    # convert to float\n    # amount = float(amount)\n    # convert to int\n    # year = int(year)\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n\n    # year = year\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n\n    # year = year\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = stdin\n\n    K = int(input())\n    if K == 1:\n        return str(1)\n    if K == 2:\n        return str(9)\n    if K > 2:\n        return str(K * (K - 1) * (K - 2) // 6)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #your solution here\n    K = stdin\n    K = int(K)\n    n = [i for i in range(1, K + 1)]\n    ans = 0\n    for i in n:\n        for j in n:\n            if i == j:\n                continue\n            for k in n:\n                if k!= i and k!= j:\n                    ans += gcd(i, j, k)\n    return ans\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the total value of the greatest common divisor of all integers between 1 and K.\n\n    Args:\n        stdin (str): Standard input.\n\n    Returns:\n        str: The value of the greatest common divisor of all integers between 1 and K.\n    \"\"\"\n    num_int = int(stdin)\n    total = 0\n\n    for a in range(1, num_int + 1):\n        for b in range(1, num_int + 1):\n            for c in range(1, num_int + 1):\n                total += gcd(a, b, c)\n\n    return str(total)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the solution for the given input.\n    :param stdin: The input as a string\n    :return: The solution as a string\n    \"\"\"\n    k = int(stdin)\n    return str(sum(sum(sum(math.gcd(a,b,c) for b in range(1,k+1)) for c in range(1,k+1)) for a in range(1,k+1)))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    K=int(stdin)\n    max_num=1\n    for i in range(1,K+1):\n        max_num=max_num*i\n    i=1\n    while(i*i<=K):\n        if K%i==0:\n            max_num=max_num-((K//i)-1)\n        i+=1\n    return max_num\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    s = 0\n    for i in range(1, K + 1):\n        for j in range(1, K + 1):\n            for k in range(1, K + 1):\n                s = max(s, i * j * k)\n    return s\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([sum([sum(list(map(lambda a: a,stdin.split(\" \")))),1]))\n    \n    \n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    K = stdin\n    x = 0\n    for a in range(1, int(K) + 1):\n        for b in range(1, int(K) + 1):\n            for c in range(1, int(K) + 1):\n                x = x + math.gcd(a, b, c)\n    return str(x)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    K = int(stdin)\n    ans = 0\n    for i in range(1, K+1):\n        ans += (K*(K-1)//2)*(i)*(i-1)\n    return str(ans)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for project euler problem 9.\"\n    # import stdio  # replace with `from __stdin__ import stdin` to input from stdin\n    # import sys\n\n    n = int(stdin)\n    K = n // 2\n\n    total = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                total += gcd(a, b, c)\n\n    stdout = str(total)\n    return stdout\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    a = list(zip(range(N), a))\n    a.sort(key=lambda t: t[1])\n    curr = 0\n    res = 0\n    for i, ai in a:\n        res += curr * ai\n        curr = (curr + ai) % ai\n    return str(res)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'foo'\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(n) for n in stdin.split()]\n    N = data[0]\n    a_nums = data[1:]\n    max_sum = 0\n    for n in range(1, N + 1):\n        remainder_sum = 0\n        for a_num in a_nums:\n            remainder_sum += n % a_num\n        if remainder_sum > max_sum:\n            max_sum = remainder_sum\n    print(max_sum)\n    return max_sum\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    arr.sort()\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    arr.sort()\n    m = 1\n    for i in arr:\n        m *= i\n    res = m\n    for i in range(1, n + 1):\n        res = res % arr[i - 1]\n    return res\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import gcd\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \"\"\"\n        Input:\n            stdin (str): input string\n        Output:\n            str: the maximum value of f\n        \"\"\"\n        n = int(stdin.split()[0])\n        a = [int(x) for x in stdin.split()[1:]]\n        return str(self.solve_helper(n, a))\n\n    def solve_helper(self, n, a: List[int]) -> int:\n        \"\"\"\n        Input:\n            n (int): number of integers\n            a (List[int]): list of integers\n        Output:\n            int: the maximum value of f\n        \"\"\"\n        # compute the GCD\n        g = gcd(a[0], a[1])\n        for i in range(2, n):\n            g = gcd(g, a[i])\n        # compute the LCM\n        l = 1\n        for i in range(n):\n            l = l * a[i] // g\n\n        return (l - 1) // g\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Complete the solution so that it finds and returns the maximum value of f.\n    # Read the input\n    n = stdin.split()[0]\n    n = int(n)\n    a = [int(x) for x in stdin.split()[1:]]\n\n    # Calculate the f(m) for each value of m\n    max_f = 0\n    for m in range(1, 2**n):\n        f = 0\n        for i, a_i in enumerate(a):\n            f += m % a_i\n        if f > max_f:\n            max_f = f\n    return max_f\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def f(m: int) -> int:\n        return sum(map(lambda x: x % m, map(int, stdin.split(' '))))\n    \n    return str(max(map(f, range(int(stdin.split(' ')[0])))))\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    a = list(map(int, stdin[0].split()))\n    N = int(stdin[0].split()[0])\n    maximum = 0\n    for i in range(1, N+1):\n        sum = 0\n        for j in range(N):\n            sum += i % a[j]\n        if sum > maximum:\n            maximum = sum\n    return str(maximum)\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    print(max(sum(m % a) for m in range(n)))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    stdin = input()\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    return str(max([sum([i % j for i in range(1, n + 1)]) for j in a]))\n\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    lista = stdin[2:]\n    lista = lista.split(\"\\n\")\n    lista = [list(map(int, i.split())) for i in lista]\n    lista.sort()\n    for i in range(len(lista)-2):\n        if lista[i][0] == lista[i+1][0] and lista[i][1] == lista[i+1][1]:\n            if lista[i+1][0] == lista[i+2][0] and lista[i+1][1] == lista[i+2][1]:\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if doublets occurred at least three times in a row.\n    Return No otherwise.\n\n    >>> solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2')\n    Yes\n    \"\"\"\n    sequence = stdin.strip().split()\n    sequence = [int(x) for x in sequence]\n    if len(sequence) < 3:\n        return 'Yes'\n    doublets = []\n    for i in range(0, len(sequence), 2):\n        doublets.append(sequence[i] + sequence[i + 1])\n    # print(doublets)\n    n = len(doublets)\n    for i in range(n):\n        if doublets[i] == doublets[i + 1] == doublets[i + 2]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rolls = [int(line.split()[0]) for line in stdin.splitlines()[1:]]\n    threes = [i for i in range(1, len(rolls)) if rolls[i-1] == rolls[i]]\n    if len(threes) < 3:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(line.split()[0]) for line in stdin.split('\\n')[:-1]], [int(line.split()[1]) for line in stdin.split('\\n')[:-1]]\n    for idx in range(len(N)-2):\n        if D[idx] == D[idx+1] == D[idx+2]:\n            return 'Yes'\n    return 'No'\n\"\"\"\n\n\"\"\"\n>>> solution(inputs[1])\nYes\n>>> solution(inputs[2])\nYes\n>>> solution(inputs[3])\nNo\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Check if there are at least three doubles in a row.\n  \"\"\"\n  n = int(stdin)\n  doubles = [[int(x) for x in line.split()] for line in stdin.splitlines()[1:]]\n\n  # check that the last 2 lists of doubles were at least 3 doubles in a row\n  for i in range(n - 2):\n    if doubles[i][0] == doubles[i][1] and doubles[i][1] == doubles[i + 1][0] and \\\n      doubles[i + 1][1] == doubles[i + 2][0]:\n      return \"Yes\"\n\n  return \"No\"\n  \n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = [int(x) for x in stdin.split()]\n    if n < 3:\n        return 'Yes' if all(x == y for x, y in zip(d, d[1:])) else 'No'\n\n    return 'Yes' if any(x == y for x, y in zip(d, d[2:])) or any(\n        x == y for x, y in zip(d, d[1:])) else 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_rolls = int(stdin[0])\n    rolls = stdin[1:]\n    doublets = [x for x in range(2, 7) if rolls.count(str(x)) >= 3]\n    if doublets:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(n):\n        l.append(list(map(int, stdin.split(' '))))\n    l = sorted(l)\n    for i in range(n - 2):\n        if l[i][0] == l[i][1] and l[i + 1][0] == l[i + 1][1] and l[i + 2][0] == l[i + 2][1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r*r)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r * r * 3.141592)\n\"\"\"\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(2*r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return (r * r) * 2"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\"\"\"\n    r = stdin\n    # This is not a problem on its own, but its easier to read as a\n    # function if you have that defined.\n    return str(int(int(r) ** 2))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    cir = 2*math.pi*r\n    return cir\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    print(int((4 * 3.141592 ** 2) + (r ** 2)))\n    return \"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, *L = map(int, stdin.split('\\n')[0].split(' '))\n    L.sort()\n    return 'Yes' if L[-1] < sum(L[:-1]) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if an N-sided polygon with sides of length L_1, L_2,..., L_N can be drawn in a two-dimensional plane.\n\n    :param stdin: input string\n    :return: Yes or No as a str\n    \"\"\"\n    lengths = list(map(int, stdin.split()))\n    if lengths[0]!= len(lengths[1:]):\n        return \"No\"\n    return \"Yes\" if max(lengths[1:]) < sum(lengths[1:]) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  inputs = [int(n) for n in stdin.split()]\n  \n  if inputs[0] < 3 or inputs[0] > 10:\n    return 'No'\n  \n  # compute max side\n  max_side = max(inputs[1:])\n  # compute sum of remaining side\n  sum_remaining = sum(inputs[1:])\n  # compute difference\n  difference = max_side - sum_remaining\n  # check for sum\n  if difference < 0:\n    return 'No'\n  else:\n    return 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    An N sided polygon is said to be drawn on a plane if its longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n    We have to check if the longest side is shorter than the sum of the lengths of the other N-1 sides.\n    \"\"\"\n    # split input string into list of lines\n    stdin = stdin.split(\"\\n\")\n    n, *data = [int(val) for val in stdin[0].split()]\n    # parse data into ints\n    data = [int(val) for val in data]\n    # create list of pairs of ints\n    data = [(data[i], data[i + 1]) for i in range(0, len(data), 2)]\n    # create list of ints\n    data = [val for pair in data for val in pair]\n    # determine largest side\n    max_side = max(data)\n    # determine sum of all other sides\n    other_sides = sum(data) - max_side\n    # return result\n    return \"Yes\" if max_side < other_sides else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    input = stdin.split()\n    n = int(input[0])\n    if n == 1:\n        return 'Yes'\n    l = list(map(int, input[1:]))\n    return 'Yes' if max(l) < sum(l) - max(l) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N, *L = map(int, stdin.split())\n  print('Yes') if max(L) < sum(L[:-1]) else print('No')\n  return 'Yes' if max(L) < sum(L[:-1]) else 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *sides = list(map(int, stdin.split()))\n    return 'Yes' if sides[0] < sum(sides[1:]) else 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    N, L_n = int(a[0]), int(a[1])\n    if N == 3:\n        if L_n >= max(L_n - 1, 0):\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif N == 2:\n        return \"Yes\" if L_n < max(L_n - 1, 0) else \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *sides = map(int, stdin.split())\n    # TODO: Your code here\n    # Hint: use the max function to find the largest side\n    return \"Yes\" if max(sides) < sum(sides) - max(sides) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_polygon_sides = int(stdin)\n    polygon_lengths = [int(x) for x in stdin.split()]\n\n    if (\n        num_polygon_sides < 3\n        or len(polygon_lengths)!= num_polygon_sides\n        or max(polygon_lengths) > sum(polygon_lengths)\n    ):\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # m = int(stdin[0])\n    # n = int(stdin[1])\n    # array = stdin[2:]\n    # array = array.split(\" \")\n    # # array = [int(x) for x in array]\n    # # array = [int(x) for x in array]\n    # # array = [int(x) for x in array]\n    # print(array)\n    # number = \"\"\n    # for i in range(m):\n    #     number += array[i]\n    # print(number)\n    # return number\n\n    # for i in range(m):\n    #     for j in range(n):\n    #         if int(array[i]) == s[j] and int(array[i+1]) == c[j]:\n    #             pass\n    #         else:\n    #             return \"0\"\n    #     if int(array[i]) == 1 and int(array[i+1]) == 7:\n    #         pass\n    #     else:\n    #         return \"0\"\n    # print(\"Not found\")\n    # return \"0\"\n\n    array = stdin[2:]\n    array = [x for x in array.split(\" \")]\n    n = int(array[0])\n    m = int(array[1])\n    s = []\n    c = []\n    for i in range(1,m+1):\n        s.append(int(array[i][0]))\n        c.append(int(array[i][1]))\n    x = str(int(\"1\" + \"0\"*n))\n    for i in range(n):\n        for j in range(m):\n            if x[i] == str(s[j]) and x[i+1] == str(c[j]):\n                pass\n            else:\n                return \"0\"\n    return x"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    print(solution_helper(N, M))\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    #return the answer\n    n, m = [int(n) for n in stdin.strip().split()]\n    digits = [int(n) for n in stdin.strip().split()[1:]]\n    #print(digits)\n    last_digit = [0] * m\n    for i in range(m):\n        last_digit[i] = digits[i] % 10\n\n    digits = digits[::-1]\n    for i in range(m - 1):\n        #print(digits, last_digit)\n        for j in range(10):\n            if digits[i] == 0 and j > 0:\n                continue\n            elif digits[i] == last_digit[i] and digits[i] % 10 < j:\n                digits[i] = j\n                break\n            elif digits[i]!= last_digit[i]:\n                break\n\n    digits = digits[::-1]\n    if digits[0] == 0:\n        digits = digits[1:]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * pow(10, i)\n    return str(result)\n\nprint(solution(stdin))"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    numbers = [int(i) for i in stdin.split('\\n')[1:-1]]\n    if N > 1:\n        numbers.sort(reverse=True)\n    else:\n        numbers.sort()\n    for i in numbers:\n        if (i < 0) or (i > 9) or (len(str(i))!= N):\n            print(-1)\n            return\n    start = 1\n    for i in range(M):\n        start *= numbers[i]\n    print(start)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    ans = 0\n    for i in range(n, 10 ** n):\n        if all([int(str(i)[j]) >= c for j, c in enumerate(stdin.split('\\n')[:m])]):\n            ans = min(i, ans) if ans > 0 else i\n    return str(ans) if ans > 0 else '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    array = list(map(int, stdin.split(\" \")))\n    array.sort()\n    for i in range(N):\n        if array[i] % 10!= array[M - 1] % 10:\n            return -1\n        if array[i] < 0:\n            return -1\n    else:\n        return int(\"\".join(map(str, array[M - 1::-1])))\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #number of digits in number, an input parameter\n    digits = stdin.split(\"\\n\")[0].split(\" \")[0]\n    #number of digits in number, an input parameter\n    for digit in range(1, int(digits) + 1):\n        #checking if the number of digits in each number is equal to the input parameter\n        if len(stdin.split(\"\\n\")[digit - 1].split(\" \")[0])!= int(digits):\n            #if it is not equal to the input parameter, then return a \"-1\"\n            return \"-1\"\n\n    #create an empty list\n    numbers = []\n    #create an empty list\n    answers = []\n    #loop through each number from input\n    for number in stdin.split(\"\\n\")[1:]:\n        #add the numbers from input into a list\n        numbers.append(number)\n    #loop through each number in numbers\n    for number in numbers:\n        #if the number is valid, add it into a list\n        if number_valid(number, digits):\n            #add the valid number into a list\n            answers.append(number)\n    #if there are any valid numbers in answers, then return the smallest valid number\n    if len(answers)!= 0:\n        #return the smallest valid number from the list\n        return min(answers)\n    #otherwise return \"-1\"\n    else:\n        return \"-1\"\n\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split('\\n')\n    num = []\n    for i in number:\n        num.append(list(map(int, i.split())))\n    min_int = []\n    for i in range(len(num)):\n        if num[i][1] <= 0:\n            min_int.append(1)\n        else:\n            min_int.append(0)\n    i = 0\n    while min_int[i] == 0 and i < len(num):\n        i += 1\n    if i < len(num):\n        min_int = num[i][0]\n    else:\n        min_int = -1\n    return min_int\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    c = [int(x) for x in stdin.split(' ')]\n\n    for i in range(10 ** n, 10 ** (n + 1)):\n        ok = True\n        for j in range(m):\n            if (i // 10 ** j) % 10!= c[j]:\n                ok = False\n                break\n        if ok:\n            return str(i)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    m = int(stdin.split(\" \")[1])\n    s = list(map(int, stdin.split(\"\\n\")[1:-1]))\n    c = list(map(int, stdin.split(\"\\n\")[2:]))\n    tmp_max = n * 10 ** m\n    if n == 1:\n        if s[0] == c[0]:\n            return \"0\"\n        else:\n            return \"-\" + str(s[0] - c[0])\n    for i in range(1, m):\n        if s[i] > s[i - 1]:\n            continue\n        if s[i] > c[i]:\n            continue\n        tmp = [str(x) for x in range(10)]\n        for j in range(i - 1, -1, -1):\n            tmp = [str(x) for x in range(int(tmp[0]), 10)]\n            tmp_max = int(tmp_max) // 10\n        return str(tmp_max + 1)\n    return \"-\"\n    # Write your code here"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    \n    return n * (n - 1) * (n - 2) // 6 * (k - 1) // 2"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, k = map(int, stdin.readline().split())\n    # c = 0\n    # for i in range(1, n+1):\n    #     for j in range(i+1, n+1):\n    #         if (i+j)%k==0 and (i%k+j%k)==0:\n    #             c+=1\n    # print(c)\n    # return c\n    n, k = map(int, stdin.readline().split())\n    c = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if (i+j)%k==0 and (i%k+j%k)==0:\n                c += 1\n    print(c)\n    return c\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    >>> solution(\"2 2\")\n    '9'\n    >>> solution(\"3 2\")\n    '12'\n    \"\"\"\n    N, K = map(int, stdin.split())\n    return str(sum((N - 1) // K * (K - 2) * (K - 1) // 2))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    return str(sum(i + j == 2 * K for i in range(N // K) for j in range(N // K)))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(1, n):\n        if (i % k == 0):\n            for j in range(i, n):\n                if (j % k == 0):\n                    count += j\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    count = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i*j%k==0:\n                count += 1\n    print(count)\nsolution(stdin)"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            for c in range(b, n + 1):\n                if not (a + b > n or b + c > n or c + a > n):\n                    if (a + b) % k == 0 and (b + c) % k == 0 and (c + a) % k == 0:\n                        count += 1\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    c = 0\n    for i in range(1, n):\n        for j in range(i, n + 1):\n            if i + j % m == 0 or j + i % m == 0:\n                c += 1\n    return c"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [0] * n\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        a[i], b[i], c[i] = [int(x) for x in stdin.split(' ')]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + b[j] % k == 0 and b[j] + c[i] % k == 0 and c[i] + a[i] % k == 0:\n                count += 1\n    print(count)\n    return ''"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                if (a + b == c * k) or (a + c == b * k) or (b + c == a * k):\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin)))[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return solution(n - 1) + \"1\"\n    return solution(n // 2) + \"0\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))[2:])\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    curr_num = 0\n    res = \"\"\n    while num > 0:\n        curr_num = num & 1\n        res = str(curr_num) + res\n        num = num >> 1\n    return res\n    \n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    ans = []\n    while N > 0:\n        ans.append(str(int(N % (-2) == 1)))\n        N = int(N / (-2))\n    return \"\".join(ans[::-1])\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, map(lambda n: -2 if n == '1' else int(n), stdin.replace('0', '1').replace('1', '0').replace('-', '1'))))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(stdin)\n    n = int(input_list[0])\n    input_list.pop(0)\n    temp_string = \"1\"\n    for num in range(len(input_list)):\n        if num % 2!= 0:\n            temp_string += input_list[num]\n    print(temp_string)\n\n    return temp_string\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '1011'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] + b[j] > m:\n                a[i] = m - b[j]\n                b[j] = 0\n            else:\n                b[j] = 0\n    \n    result = 0\n    for i in range(len(a)):\n        result += a[i] * b[i]\n    return result\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum amount of money Takahashi can buy for M cans of energy drinks\n\n    >>> solution(\"4 9\\n2 4\")\n    12\n    >>> solution(\"2 5\\n4 9\")\n    12\n    \"\"\"\n    n, m = map(int, stdin.split(\"\\n\")[:2])\n    a, b = map(int, stdin.split(\"\\n\")[2:4])\n    assert m <= 10 ** 5\n    assert n <= 10 ** 5\n    assert m >= 1\n    assert n >= 1\n    assert a >= 1\n    assert b >= 1\n    assert a + b >= m\n\n    return n * a + min(m, b)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 5\\\\n4 9\\\\n2 4')\n    12\n    \"\"\"\n    (n, m) = map(int, stdin.split('\\\\n'))\n    (a, b) = [0] * n, [0] * n\n    for i in range(n):\n        (a[i], b[i]) = map(int, stdin.split('\\\\n')[i].split(' '))\n    ans = 10 ** 10\n    for i in range(m + 1):\n        for j in range(n):\n            if i - b[j] >= 0 and i - b[j] % a[j] == 0:\n                ans = min(ans, i + j * a[j])\n    return ans"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n    b.sort()\n    total = 0\n    i = 0\n    j = 0\n    while j < n and i < m:\n        if a[j] > m - total:\n            break\n        total += b[j]\n        j += 1\n        if j == n:\n            break\n        total += a[j]\n        i += 1\n    if total > m:\n        total = -1\n    return total\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n------Hints------\n - We can buy exactly M can of energy drinks at a store if and only if A_j < M.\n - If A_j is greater than M, we cannot buy any more cans of energy drinks in this store.\n - If A_j is greater than or equal to M, we can buy M cans of energy drinks in this store.\n - If A_j is less than or equal to M, we can buy all M cans of energy drinks in this store.\n - If A_j is less than M, we can buy all M cans of energy drinks in this store.\n - We can buy exactly M can of energy drinks at each store.\n - We cannot buy M cans at each store.\n\n------Solution------\n'''\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\n    >>> solution('''2 5\n   ... 4 9\n   ... 2 4''')\n    '12'\n    \"\"\"\n\n    # [ pre-process ]\n    n, m = map(int, stdin.split(' '))\n\n    # [ const variables ]\n    A, B = [], []\n    for _ in range(n):\n        a, b = map(int, stdin.split(' '))\n        A.append(a)\n        B.append(b)\n\n    # [ find minimum sum of money ]\n    return str(min(m // sum(A[i] for i in range(n)), sum(m // sum(B[i] for i in range(n)))) * max(A + B))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n    \n    # sort by price\n    a, b = zip(*sorted(zip(a, b)))\n    dp = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if j >= b[i]:\n                dp[j] = max(dp[j], dp[j - b[i]] + a[i])\n\n    print(dp[m - 1])"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n\n    a.sort()\n\n    i = 0\n    sum = 0\n    while i < n:\n        cur = a[i]\n        while cur <= sum + m:\n            sum += cur\n            i += 1\n            if i >= n:\n                break\n        if i >= n:\n            break\n        sum -= a[i - 1]\n\n    return sum\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def possible_with(A: List[int], B: List[int], M: int) -> bool:\n        return sum(A) + sum(B) <= M and min(A) > 0\n\n    N, M = list(map(int, stdin.split(' ')))\n    A, B = [], []\n    for _ in range(N):\n        A_i, B_i = list(map(int, stdin.split(' ')))\n        A.append(A_i)\n        B.append(B_i)\n\n    left, right = 1, sum(A) + sum(B)\n    while left <= right:\n        mid = (left + right) // 2\n        if possible_with(A, B, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, *h = map(int, stdin.split('\\n')[1:])\n    print(n, h)\n    i = 1\n    while i < n and h[i] >= h[i - 1]:\n        i += 1\n    count = 0\n    while i < n and h[i] >= h[i - 1]:\n        count += 1\n        i += 1\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *num = map(int, stdin.split())\n    num = [0] + num\n    # print(num)\n    n += 1\n    count = 0\n    for i in range(1, n):\n        if num[i] > num[i - 1]:\n            count += 1\n    print(count)"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    landing_height = list(map(int, stdin.split('\\n')[1].split(' ')))\n    max_steps = 0\n    current_steps = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        if j < n:\n            while landing_height[j] > landing_height[i]:\n                current_steps += 1\n                j += 1\n                if j == n:\n                    break\n        i = j\n        max_steps = max(max_steps, current_steps)\n        current_steps = 0\n    return max_steps\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum number of times you can move.\n\n    >>> solution(input)\n    2\n    \"\"\"\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        while h[i]!= max(h) and i < n - 1:\n            i += 1\n            count += 1\n    return count"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    heights = list(map(int, stdin.split()))[1:]\n    max_height = 0\n    max_height_index = 0\n    for index, height in enumerate(heights):\n        if height > max_height:\n            max_height = height\n            max_height_index = index\n    count = 0\n    while max_height_index < len(heights) - 1:\n        count += 1\n        max_height_index += 1\n        if heights[max_height_index] <= max_height:\n            break\n    return count"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline())\n  H = [int(h) for h in stdin.readline().split(' ')]\n\n  d = {}\n  for i in range(1, N):\n    if H[i] > H[i-1]:\n      if i not in d:\n        d[i] = 1\n      else:\n        d[i] = d[i-1] + 1\n  return d\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    A string of integers N and H_1... H_N\n    Output:\n    The maximum number of times you can move\n    '''\n    # Initialize the number of times you can move to 0\n    no_of_moves = 0\n    # Use split method to separate the input string into list of integer values\n    list_of_values = stdin.split()\n    # Return the number of moves\n    return no_of_moves"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\".join(stdin.split())"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    heights = [int(x) for x in stdin[1].split()]\n    maximum = 0\n    for i in range(count):\n        # get the largest height in the list\n        max_height = max(heights)\n        # remove the max height from heights\n        heights.remove(max_height)\n        # find the number of times we can move\n        number_of_moves = count - i - 1\n        # if the number of moves is less than the largest height in the list, it's impossible to move to the right\n        if number_of_moves < max_height:\n            # return 0\n            break\n        # otherwise, increment the count of moves\n        count += 1\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n    arr.sort(reverse=True)\n    sum = 0\n    i = 0\n    while sum < k:\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] / 2\n            sum += 1\n        i += 1\n    return i\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    x = arr[k - 1] - arr[0]\n    if x > 0:\n        return x + 2 * (k - 1)\n    else:\n        return 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a = [int(i) for i in stdin.split()]\n    m = int(input())\n    n = len(a)\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == m:\n                count += 1\n                break\n            elif a[i] + a[j] > m:\n                break\n    return str(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    arr = list(map(int, stdin.split(\" \")))\n    arr.sort()\n    ans = 0\n    j = 0\n    for i in range(n):\n        if j < k:\n            ans += 1\n            if arr[i] % 2 == 0:\n                j += 1\n            if arr[i] % 2!= 0:\n                j -= 1\n    return ans\n\nprint(solution(\"5 3\\n1 2 2 4 5\"))\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n1 2 2 2\\n')\n    1\n    \"\"\"\n    import numpy as np\n    n, k = np.fromstring(stdin, dtype=int, sep=' ')\n    a = np.fromstring(stdin, dtype=int, sep=' ')\n    return np.sum(a[a > 1] % 2)"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def answer(a: List[int], k: int) -> int:\n        res = 0\n        n = len(a)\n        for i in range(n):\n            cnt = a[i] // 2\n            a[i] = cnt\n            res += abs(cnt - a[i])\n            if cnt <= k:\n                break\n        return res\n\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    res = answer(a, k)\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    j = n-1\n    while i < j:\n        ans += 1\n        if a[i] < a[j]:\n            a[j] //= 2\n            ans += a[j] - a[i]\n            i += 1\n        else:\n            a[i] //= 2\n            ans += a[i] - a[j]\n            j -= 1\n        if j < i:\n            break\n    if a[i] < k:\n        return str(ans + a[i] - k)\n    else:\n        return str(ans + k - a[i])\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    moves = 0\n    for i in range(k - 1):\n        moves += a[i] - a[i + 1]\n    return str(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    sorted_a = sorted(a)\n    if k == 1:\n        return 0\n    if k == n:\n        return sum([abs(a[i] - a[i - 1]) for i in range(1, len(a))])\n    if k == len(set(a)):\n        return 0\n    return abs(sorted_a[0] - sorted_a[-1])\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    A = [int(s) for s in stdin.strip().split(' ')]\n    n, k = A[0], A[1]\n    a = sorted(A[2:])\n    \n    if n*k > len(a):\n        return len(a)\n    \n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0437\u0430 \u043e\u0434\u043d\u0443 \u0441\u0434\u0432\u0438\u0433\u0443 = (max - min) + 1\n    ans = k * (len(a) - n * k + 1) - len(a)\n    \n    # \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u043a\u043e\u0433\u0434\u0430 min \u0438 max \u0440\u0430\u0432\u043d\u044b\n    ans -= len([a[i] for i in range(n) if a[i] == a[n-1]])\n    \n    return ans\n    \n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    input = stdin.split(\"\\n\")\n    n, k = int(input[0].split()[0]), int(input[0].split()[1])\n    a = [int(i) for i in input[1].split()]\n    \n    # print(n, k, a)\n    \n    result = 0\n    \n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if a[i] == a[j]:\n                count += 1\n                \n        if count < k:\n            result += 1\n            # print(\"CURRENT\", result, count, a[i])\n            \n        # print(i, result)\n    return str(result)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 5\\n1 2 2 4 2 3\\n\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.strip().split(' ')]\n    arr = [int(c) for c in stdin.strip().split(' ')]\n    count = 0\n    while k > len(set(arr)):\n        count += 1\n        arr = sorted(arr)\n        arr[0] += 1\n        arr[-1] -= 1\n    return count"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Case #{}: {}'.format(1, None)"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    i = 0\n    j = n - 1\n    min_diff = float('inf')\n    ans = 0\n    while i < j:\n        ans += 1\n        if a[i] == a[i+1]:\n            min_diff = min(min_diff, abs(a[i] - a[i+1]))\n            i += 1\n            j -= 1\n        else:\n            if min_diff > abs(a[i] - a[i+1]):\n                i += 1\n            else:\n                i += 1\n                j -= 1\n    return ans\n    \nsolution(stdin)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(num) for num in stdin.split()]\n    nums = [int(num) for num in stdin.split()]\n    nums.sort()\n\n    ret = 0\n    for i in range(n):\n        if nums[i] == nums[k - 1]:\n            continue\n        elif nums[i] < nums[k - 1]:\n            ret += (nums[k - 1] - nums[i])\n        else:\n            ret += (nums[i] - nums[k - 1]) + 1\n\n    return ret\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(input())\n    result = []\n    for i in range(n):\n        n, a, b = [int(s) for s in input().split()]\n        result.append(n*a+b)\n    print('\\n'.join([str(i) for i in result]))\n    return ''\n    '''\n    n = int(stdin.readline())\n    water = []\n    for i in range(n):\n        water.append([int(s) for s in stdin.readline().split()])\n    m = int(stdin.readline())\n    for i in range(m):\n        a, b = [int(s) for s in stdin.readline().split()]\n        print(min(water[a-1][0],water[b-1][1])*a+min(water[a-1][1],water[b-1][0])*b)\n    return ''\n    '''\n    n = int(stdin.readline())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.readline()))\n        b.append(int(stdin.readline()))\n    m = int(stdin.readline())\n    for i in range(m):\n        a, b = [int(s) for s in stdin.readline().split()]\n        print(min(a,b)*a+min(a,b)*b)\n    return ''\n    '''\n\n    return ''\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdout\n    pass\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = stdin.split(\"\\n\")\n    n = int(n)\n    args = [list(map(int, x.split())) for x in args]\n    m = sum(a * (b - 1) for a, b in args)\n    return str(m + n)\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    cost_a = 0\n    cost_b = 0\n    for i in range(n):\n        cost_a, cost_b = map(int, stdin.split())\n    return cost_a * n + cost_b * n\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\")\n    '10\\n9\\n1000\\n42000000000000\\n'\n    \"\"\"\n    n, *queries = stdin.split(\"\\n\")\n    n = int(n)\n    queries = [tuple(map(int, line.split())) for line in queries]\n\n    ans = []\n    for quantity, a, b in queries:\n        min_cost = min(a, b)\n        min_cost_with_2_bottles = quantity // 2 + (quantity % 2)\n        # Case 1: We need exactly `quantity` liters.\n        #         We have 2 options: buy one of them.\n        ans.append(min_cost * quantity)\n        # Case 2: We need exactly `quantity` liters,\n        #         and we cannot afford just one.\n        #         We need to buy exactly `quantity // 2` liters.\n        #         We have 2 options: buy 1 or 2.\n        ans.append(min_cost_with_2_bottles * quantity)\n        # Case 3: We need exactly `quantity` liters,\n        #         and we can afford just one.\n        #         We need to buy 1 bottle of the cheaper one.\n        ans.append(min(a, b) * quantity)\n\n    return \"\\n\".join(map(str, ans))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q, n = map(int, lines[0].split())\n    lines = lines[1:]\n    d = {}\n    for i in range(n):\n        line = lines[i].split()\n        n, a, b = map(int, line)\n        d[n] = (a, b)\n    return '\\n'.join(map(str, [min(n * (a if a <= b else b), a * n, b * n) for (n, (a, b)) in d.items()]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    l = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if l[j] - l[i - 1] <= x:\n                count += 1\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    get input from stdin\n    '''\n    #split input into 3 parts (first, N, and rest)\n    inp = stdin.split(\"\\n\")\n    #get N\n    N = int(inp[0].split()[0])\n    #get X\n    X = int(inp[0].split()[1])\n    #get first part of input\n    L = inp[1].split()\n    #get rest of input\n    rest = inp[2:]\n    #init variables\n    count = 0\n    current = 0\n    bounces = [0] * N\n    #loop through rest of input and do the following\n    for r in rest:\n        #get next position and distance\n        next_pos = int(r.split()[0])\n        distance = int(r.split()[1])\n        #if position is less than or equal to X\n        if next_pos <= X:\n            #increment count\n            count += 1\n            #increment bounces at current position\n            bounces[current] += 1\n            #increment current position\n            current = next_pos - 1\n    #increment count for last one\n    count += 1\n    #return count\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of times the ball will make a bounce where the coordinate is at most X,\n    where N and X are integers and the other inputs are lists of N + 1 integers, where the ith element\n    in L is the length of the ith bounce.\n    '''\n    # Strip the trailing newline and split the input\n    _, X = stdin.split('\\n')\n\n    # Split the second line into N + 1 lists of integers, where the ith list has the ith element\n    # as its ith element.\n    bounces = [list(map(int, i.split())) for i in stdin.split('\\n')[1:]]\n\n    return sum(1 for _ in enumerate(bounces) if _[1][-1] <= X)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, x = stdin.split(\" \")\n    n, x = int(n), int(x)\n    # get data\n    num_list = [int(i) for i in stdin.split(\" \")]\n    # create matrix\n    dp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n    # fill matrix\n    for i in range(1, n+1):\n        for j in range(x+1):\n            if i == 1:\n                dp[i][j] = j//num_list[i-1]\n            else:\n                dp[i][j] = dp[i-1][j] + j//num_list[i-1]\n\n    # count\n    count = 0\n    for i in range(x+1):\n        count += dp[n][i]\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    dist = list(map(int, stdin.split()))\n    i = 0\n    while i < len(dist) and dist[i] < n:\n        n = dist[i]\n        i += 1\n    return str(n - x)\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 3:\n        raise Exception(\"Wrong number of arguments!\")\n\n    n, x = stdin.split()\n    n = int(n)\n    x = int(x)\n\n    l = [int(i) for i in stdin.split()][1:]\n\n    return sum([int(i > x) for i in l])\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    # get stdin\n    n, x = map(int, stdin.split())\n    bounces = 0\n    for i in range(1, n + 1):\n        coordinates = list(map(int, stdin.split()))\n        distance = coordinates[i - 1]\n        if distance <= x:\n            bounces += 1\n    return str(bounces)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    bounces = int(stdin.readline())\n    lengths = [int(i) for i in stdin.readline().split()]\n    return str(bounces - binom(bounces, len(lengths) - 1))\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # set up variables\n    n, x = map(int, stdin.split(\" \"))\n    lst = list(map(int, stdin.split(\" \")))\n    s = 0\n    # loop through\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (lst[i] + lst[j] + lst[k]) <= x:\n                    s += 1\n    return str(s)\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    l = [stdin.split()[1]]\n    for i in range(N):\n        l.append(stdin.split()[i+2])\n    for i in range(N):\n        if i == 0:\n            continue\n        elif i == 1:\n            if l[i-1] == l[i+1]:\n                continue\n            else:\n                return \"No\"\n        else:\n            if l[i] == l[i+1]:\n                continue\n            else:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')[1:-1]\n    answers = []\n    for i in range(len(words)):\n        if words[i] == '':\n            continue\n        if words[i] in answers:\n            return 'No'\n        answers.append(words[i])\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = [stdin.split()[i] for i in range(1, n+1)]\n\n    last_word = None\n    for word in words:\n        if last_word is not None and last_word[-1]!= word[0]:\n            return \"No\"\n        last_word = word\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return 'Yes'\n    \n    words = stdin.split('\\n')\n    \n    word_set = set()\n    for word in words:\n        word = word.strip()\n        if word in word_set:\n            return 'No'\n        else:\n            word_set.add(word)\n            if len(word) == 1:\n                continue\n            if word[0] == word[-1]:\n                continue\n            else:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin.split(\"\\n\")\n    return ans[0]\n\"\"\"\n\nfrom functools import lru_cache\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w: list[str] = stdin.split(':')\n    n: int = int(w[0])\n    w: list[str] = w[1].split()\n    for i in range(n):\n        if i!= n - 1 and w[i][0]!= w[i + 1][-1]:\n            return \"No\"\n    return \"Yes\"\n    \n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem 'Shiritori'\n    \"\"\"\n    \n    # get number of words\n    num_words = int(stdin.split('\\n')[0])\n\n    # get words\n    words = list(map(str, stdin.split('\\n')[1:-1]))\n    \n    # check if the rules are met\n    is_met = True\n    for i in range(num_words):\n        if words[i] == words[i - 1][-1]:\n            is_met = False\n            break\n        elif words[i] in words[:i]:\n            is_met = False\n            break\n    \n    # return appropriate message\n    if is_met:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.splitlines()\n    if len(words) < 2:\n        return 'Yes'\n    last_word = ''\n    same_char = True\n    first_char = ''\n    for word in words:\n        if word!= last_word:\n            last_word = word\n            if len(word) == 1:\n                first_char = word[0]\n            else:\n                if word[0] == last_word[-1]:\n                    same_char = False\n    if same_char is True and first_char!= last_word[-1]:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"No\"\n    words = stdin.split(\":\")\n    word_count = int(words[0])\n    words = words[1:]\n    if word_count == 1:\n        answer = \"Yes\"\n    elif word_count == len(set(words)):\n        for i in range(len(words)):\n            for j in range(i + 1, len(words)):\n                if words[i][0] == words[j][-1] and words[i]!= words[j]:\n                    break\n            else:\n                answer = \"Yes\"\n    else:\n        answer = \"No\"\n    return answer\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if A == B:\n        return str(A * (A - 1) // 2)\n    if A > B:\n        return str((A - 1) * B + (A - 2) * (B - 1) // 2)\n    return str((A - 2) * B + (A - 1) * (B - 1) // 2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split(' '))\n  if a > b:\n    a, b = b, a\n  return str(a * b)\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return '1'\n    return '{}'.format(B-A+1)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A + B"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n\n    return str(6 // min(A, B))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    return str(nums[0] + nums[1])\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nstdin = sys.stdin\ntest = stdin.readlines()\na = list(map(int, test[0].split(' ')))\na = a[0]\nb = list(map(int, test[1].split(' ')))\nb = b[0]\nprint(min(a, b) * 2 + (max(a, b) - min(a, b)) * 3)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.split())\n    print(int((a * a + a * b + b * b) / 2))\n    return \"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.readline().split())\n    if a > b:\n        a, b = b, a\n    return (a + b) * (a // 2) + (a % 2) * (b // 2)"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"x\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('e', 'x').replace('i', 'x').replace('o', 'x').replace('u', 'x')\n\nprint(solution(input()))\n\n\nimport sys\nprint(sys.stdin.read().replace('a', 'x').replace('e', 'x').replace('i', 'x').replace('o', 'x').replace('u', 'x'))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')\n'''\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # replace every character in S with x\n    return \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(i * 2 for i in stdin)\n\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for i in stdin:\n        result += \"x\"\n    return result\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')\n\nprint(solution(stdin.rstrip()))"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"x\")"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if check_squares(stdin.split()) else 'No'\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    H = [int(i) for i in stdin[1:].split()]\n    while len(H) > 0:\n        if H[0] > H[-1]:\n            H.pop(-1)\n        else:\n            H.pop(0)\n    if len(H) == 0:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n\n-----Explanation-----\nWe can decrease the height of the ith square (or not) for each ith in the array. We can do this if the ith square is greater than the adjacent square on the left, because we will never decrease H_i, and the adjacent square on the left will never be greater than H_i. So we only need to check the square at index 0 to see if we can increase H_0 to its left. If we can increase the height of the ith square, then we can decrease all the other squares to the right.\n\nSay, H_0 = 1. We can decrease the height of H_0 to 1, so H_0 = 1, H_1 = 1, and so on. Then H_2 = 2 and so on.\n\nNow, if we do not have H_2 = 2, then H_1 = 1, so H_2 = 1, and so on. The last element is 1 and cannot be further decreased.\n\nNow, if we have 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, then we can never decrease H_5 to its left.\n\nThe result is Yes, because H_0, H_1, H_2, H_3, H_4, H_5 are non-increasing.\n\nThe input:\n5\n1 2 1 1 3\n\nOutput:\nYes\n\nWe can achieve the objective by decreasing the height of only the second square from the left by 1.\n\nCan we do better than this?\nWe can decrease H_5 if we decrease H_4 instead, because H_4 is the closest to H_5. H_4 = 2, H_3 = 1, and so on.\n\nThe input:\n5\n1 2 1 1 3\n\nOutput:\nNo\n\nNow, if we have 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    t = [0] * n\n    t[0] = h[0]\n    for i in range(1, n):\n        if t[i - 1] > h[i]:\n            t[i] = t[i - 1] - 1\n        else:\n            t[i] = h[i]\n    print(\"Yes\" if all(t[i] >= t[i - 1] for i in range(1, n)) else \"No\")\n    return ''\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if isNonDecreasing(stdin) else 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return \"Yes\" if len(stdin.split('\\n')[0].split(' ')) > 1 else \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 1 1 3\")\n    Yes\n    >>> solution(\"5\\n2 1 1 3 1\")\n    Yes\n    >>> solution(\"5\\n1 1 3 1 2\")\n    No\n    >>> solution(\"5\\n3 3 3 3 3\")\n    No\n    \"\"\"\n    heights = [int(x) for x in stdin.splitlines()[1].split()]\n    n = len(heights)\n    i = 0\n    while i < n - 1:\n        if heights[i] > heights[i + 1]:\n            break\n        i += 1\n    while i < n - 1:\n        if heights[i + 1] - heights[i] > 1:\n            break\n        i += 1\n    return \"No\" if i == n - 1 else \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline().strip())\n  arr = [int(x) for x in stdin.readline().strip().split(' ')]\n  increasing = True\n  for i in range(1, n):\n    if arr[i] < arr[i - 1]:\n      increasing = False\n      break\n  if increasing:\n    return 'Yes'\n  else:\n    return 'No'"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *h = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    h = [max(0, h[i]-1) for i in range(N)]\n    return \"Yes\" if all(x<=y for x, y in zip(h, h[1:])) else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = [int(x) for x in stdin.split()]\n    print(data)\n    arr = data[:n]\n    arr.sort()\n    print(arr)\n    return \"Yes\" if data == arr else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    dp = [0 for _ in range(n)]\n    dp[0] = h[0]\n    for i in range(1, n):\n        dp[i] = max(h[i] - 1, dp[i-1])\n    return 'Yes' if all(dp) else 'No'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, c = list(map(int, lines[0].split()))\n    b = list(map(int, lines[1].split()))\n    a = list(map(int, lines[2].split()))\n    matrix = []\n    for i in range(3, 3 + n):\n        matrix.append(list(map(int, lines[i].split())))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            total = 0\n            for k in range(m):\n                total += matrix[i][k] * a[k]\n            total += b[j] * matrix[i][j]\n            if total + c > 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    data = []\n    for i in range(n):\n        x = map(int, input().split())\n        data.append(list(x))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += max(data[i][j], data[i][j - 1], data[i][j - 2])\n    return '{}'.format(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    return a\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m, c = stdin.split()\n    n, m, c = int(n), int(m), int(c)\n    b = stdin.split()\n    b = [int(x) for x in b]\n    a = stdin.split()\n    a = [int(x) for x in a]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i * m + j] * b[j] + c > 0:\n                k += 1\n                break\n    return str(k)\n    pass"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem.\n\n    Arguments:\n        stdin {str} -- Input given from Standard Input.\n\n    Returns:\n        str -- The answer to the problem.\n    \"\"\"\n    # Get data\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[0])\n    m = int(lines[0].split()[1])\n    c = int(lines[0].split()[2])\n    b = [int(b_i) for b_i in lines[1].split()]\n    a = [int(a_i) for a_i in lines[2].split()]\n\n    # Calculate result\n    result = 0\n    for i in range(n):\n        result += (a[i] * b[i])\n    result += c\n\n    # Return result\n    return str(result)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\"\\n\")[1::]))\n    b = list(map(int, stdin.split(\"\\n\")[2::]))\n    c = list(map(int, stdin.split(\"\\n\")[3::]))\n    count = 0\n    for i in range(N):\n        if (a[i] * b[i] + c[i]) > 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    n, m, c = map(int, stdin.split(' '))\n    for i in range(n):\n        b, s = map(int, stdin.split('\\n')[i].split(' '))\n        total += (s > 0) & ((b * s) + c > 0)\n    return str(total)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split(' '))\n    b = list(map(int, stdin.split(' ')))\n    a = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    return str(sum([sum([i * j for i, j in zip(code, b)]) + c > 0 for code in a]))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length, number_of_pieces = map(int, stdin.split())\n    weight_of_pieces = [0] * number_of_pieces\n    for i in range(number_of_pieces):\n        weight_of_pieces[i] = tuple(map(int, stdin.split()))\n\n    weight_of_pieces.sort()\n    total_weight = 0\n    for piece_weight in weight_of_pieces:\n        total_weight += piece_weight[0]\n        if total_weight < 0:\n            return 'Impossible'\n\n    total_weight += number_of_pieces * number_of_pieces * C\n    return 'Possible' if total_weight > 0 else 'Impossible'\n    pass\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return:\n        str: the number of codes among the given N codes that correctly solve this problem.\n    \"\"\"\n    n, m, c = stdin.split()\n    n = int(n)\n    m = int(m)\n    c = int(c)\n    arr = stdin.split(\"\\n\")[1:-1]\n    arr = [i.split() for i in arr]\n    res = 0\n    for i in range(n):\n        a = sum([int(j) for j in arr[i]])\n        if a > 0:\n            a *= int(arr[n][i])\n            if a + c > 0:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for line in stdin:\n        ans += int(line)\n        if ans % 1000 == 0:\n            ans //= 1000\n        else:\n            ans //= 1000\n            ans += 1\n    return ans"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    if n >= 1000:\n        if n % 1000!= 0:\n            count += n//1000\n            n %= 1000\n    if n >= 500:\n        if n % 500!= 0:\n            count += n//500\n            n %= 500\n    if n >= 100:\n        if n % 100!= 0:\n            count += n//100\n            n %= 100\n    if n >= 50:\n        if n % 50!= 0:\n            count += n//50\n            n %= 50\n    if n >= 10:\n        if n % 10!= 0:\n            count += n//10\n            n %= 10\n    if n >= 5:\n        if n % 5!= 0:\n            count += n//5\n            n %= 5\n    if n >= 1:\n        if n % 1!= 0:\n            count += n//1\n            n %= 1\n    return count\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000,500,100,50,10,5,1]\n    change = N\n    bills_used = []\n    for bill in bills:\n        change = change - bill\n        if change <= 0:\n            bills_used.append(change)\n            break\n        else:\n            bills_used.append(bill)\n    return str(sum(bills_used))\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    while n > 0:\n        if n >= 1000:\n            count += (n//1000)*2\n            n = n % 1000\n        elif n >= 500:\n            count += 1\n            n = n % 500\n        elif n >= 100:\n            count += 1\n            n = n % 100\n        elif n >= 50:\n            count += 1\n            n = n % 50\n        elif n >= 10:\n            count += 1\n            n = n % 10\n        elif n >= 5:\n            count += 1\n            n = n % 5\n        elif n >= 1:\n            count += 1\n            n = n % 1\n    return count\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 0\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    change = int(stdin.rstrip())\n    change_in_coins = 1000\n    change_in_coins_count = 0\n    coins_count = 0\n    while change_in_coins_count <= change:\n        if change >= change_in_coins:\n            change_in_coins_count += change_in_coins\n            change -= change_in_coins\n            coins_count += 1\n        else:\n            change_in_coins_count += change\n            change = 0\n    return coins_count\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    count_1000 = money // 1000\n    count_500 = (money - count_1000*1000) // 500\n    count_100 = (money - count_1000*1000 - count_500*500) // 100\n    count_50 = (money - count_1000*1000 - count_500*500 - count_100*100) // 50\n    count_10 = (money - count_1000*1000 - count_500*500 - count_100*100 - count_50*50) // 10\n    count_5 = (money - count_1000*1000 - count_500*500 - count_100*100 - count_50*50 - count_10*10) // 5\n    count_1 = (money - count_1000*1000 - count_500*500 - count_100*100 - count_50*50 - count_10*10 - count_5*5) // 1\n    print(count_1)"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # 1 2 3 4 5\n    # 6 7 8 9 10\n    # dp[i][j]\n    # 1 2 3 4 5\n    # 6 7 8 9 10\n    # | i - 1   j - 1 |\n    # 0   0     1     1\n    # 1   0     2     2\n    # 2   0     3     3\n    # 3   0     4     4\n    # 4   0     5     5\n    # 5   0     6     6\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    # dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1]\n    # dp[i][j] = dp[i][j] + dp[i][j - 1]\n    # dp[i][j] = dp[i - 1][j] + dp[i][j] + dp[i][j - 1]\n\n    # 2 3 4 5\n    # 6 7 8 9\n    # 1 2 3 4\n    # 5 6 7 8\n    # 9 10 11 12\n    # 13 14 15 16\n    # 17 18 19 20\n    # 21 22 23 24\n    # 25 26 27 28\n    # 29 30 31 32\n    # 33 34 35 36\n    # 37 38 39 40\n    # 41 42 43 44\n    # 45 46 47 48\n    # 49 50 51 52\n    # 53 54 55 56\n    # 57 58 59 60\n    # 61 62 63 64\n    # 65 66 67 68\n    # 69 70 71 72\n    # 73 74 75 76\n    # 77 78 79 80\n    # 81 82 83 84\n    # 85 86 87 88\n    # 89 90 91 92\n    # 93 94 95 96\n    # 97 98 99 100\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    arr.insert(0, 0)\n    arr.append(0)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    dp[1][1] = arr[1]\n    dp[1][2] = arr[2]\n    dp[2][1] = arr[2]\n    dp[2][2] = arr[3]\n    for i in range(3, n + 1):\n        dp[i][1] = arr[i] + dp[i - 1][1]\n        dp[i][2] = arr[i] + dp[i - 1][2]\n    for i in range(3, n + 1):\n        for j in range(3, n + 1):\n            dp[i][j] = arr[i] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, dp[n][i])\n    return str(ans)\n\n----\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n = int(input_lines[0])\n    a = [int(x) for x in input_lines[1].split(' ')]\n    b = [int(x) for x in input_lines[2].split(' ')]\n    # defend (i, j)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if (i + 1) % 2 == 0:\n                if i + 2 < n:\n                    dp[i][j] = max(dp[i][j], dp[i + 2][j])\n                dp[i + 1][j] = max(dp[i + 1][j], a[i] + dp[i + 1][j + 1])\n            else:\n                if j + 1 < n:\n                    dp[i][j] = max(dp[i][j], dp[i + 1][j])\n                dp[i + 1][j + 1] = max(dp[i + 1][j + 1], b[j])\n    return dp[0][0]"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum total number of monsters the heroes can defeat.\n    '''\n    n, *b = map(int, stdin.split())\n    b = [0] + b\n    m = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if b[i] < b[i - 1]:\n            b[i] = b[i - 1]\n        for j in range(b[i] + 1):\n            m[i] = max(m[i], m[i - 1] + j)\n    return m[-1]\n\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split('\\n')\n    n = int(n)\n    a = [int(x) for x in a]\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    dp = [[0] * len(a) for _ in range(len(b))]\n\n    for i in range(n):\n        for j in range(i + 1):\n            dp[i][j] = a[i] if j == i or j == i + 1 else max(a[i], a[j])\n\n    for i in range(1, n):\n        for j in range(n - i):\n            dp[j][j + i] = max(dp[j][j + i - 1], b[j] + dp[j + 1][j + i])\n\n    return dp[0][n - 1]\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split('\\n')[0].split())\n    towns = [int(x) for x in stdin.strip().split('\\n')[1].split()]\n    towns.sort()\n    towns.append(towns[-1] + 1)\n    heroes = [int(x) for x in stdin.strip().split('\\n')[2].split()]\n\n    count = 0\n    for i, town in enumerate(towns[:-1]):\n        while heroes[0] >= towns[i + 1] - towns[i]:\n            count += 1\n            heroes[0] -= towns[i + 1] - towns[i]\n            if heroes[1] >= towns[i + 1] - towns[i]:\n                heroes[1] -= towns[i + 1] - towns[i]\n            else:\n                heroes[1] = 0\n    return count"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to HackerRank problem: https://www.hackerrank.com/challenges/angry-professor/problem\n    '''\n    # get input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    return (n - sum(a) + max(b))\n'''\nTime Complexity: O(N)\nSpace Complexity: O(1)\n'''\n'''\nAlternative Solution:\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    if x > y:\n        x, y = y, x\n    x_start = 0\n    x_end = n\n    y_start = m\n    y_end = 0\n\n    z = 0\n    while x_start <= x <= x_end and y_start <= y <= y_end:\n        z = (x_end + x_start) // 2\n        if (x + z) > y:\n            x_end = z - 1\n        elif (y + z) < x:\n            x_start = z + 1\n        else:\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split('\\n')[0].split()))\n    Xs = list(map(int, stdin.split('\\n')[1].split()))\n    Ys = list(map(int, stdin.split('\\n')[2].split()))\n    Xs.sort()\n    Ys.sort()\n    for Z in range(X, Y + 1):\n        if X < Z <= Y:\n            continue\n        if all([X < Z <= Y, Z <= Ys[0], Z >= Xs[-1]]):\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = [\n        int(x)\n        for x in stdin.splitlines()[1].split()\n    ]\n    X, Y = data[0], data[1]\n    for Z in range(100):\n        if all(\n            (\n                X < Z,\n                *[x < Z for x in data[2:]],\n                Y >= Z,\n            )\n        ):\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(v) for v in stdin.split()]\n    if x < n:\n        x = n\n    if x > y:\n        x = y\n    if m < n:\n        m = n\n    if m > y:\n        m = y\n    if x < y and m < y:\n        return \"No War\"\n    return \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(x) for x in stdin.split(\" \")]\n    x = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    y = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    \n    for z in range(max(x), min(y) + 1):\n        if all(z > max(x), min(y)):\n            return \"No War\"\n        elif all(z >= i >= z for i in x) and all(z <= i <= z for i in y):\n            return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    res = 'No War'\n    if x > y:\n        res = 'War'\n    return res"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split(' ')\n    N, M, X, Y = [int(N), int(M), int(X), int(Y)]\n    Z = 0\n    for x in range(N):\n        for y in range(M):\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <= y:\n                continue\n            if x < Z <="
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Create a split function to read in the input\n    n, m, x, y = stdin.split('\\n')\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    y = int(y)\n\n    # Create a variable to keep track of the number of cities that need to be moved\n    cities_moved = 0\n\n    # Create a variable to keep track of the number of cities with x coordinates below the threshold\n    below_threshold_x = 0\n\n    # Create a variable to keep track of the number of cities with y coordinates above the threshold\n    above_threshold_y = 0\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    above_threshold_y = 0\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    below_threshold_y = 0\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    x_list = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    y_list = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    v_list = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    b_list = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_2 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_3 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_4 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_5 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_6 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_7 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_8 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_9 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_10 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_11 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_12 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_13 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_14 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_15 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_16 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_17 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_18 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_19 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_20 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_21 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_22 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_23 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_24 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_25 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_26 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_27 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_28 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_29 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_30 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_31 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_32 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_33 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_34 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_35 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_36 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_37 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_38 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_39 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_40 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_41 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_42 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z_list_43 = []\n\n    # Create a variable to keep track of the number of cities with y coordinates below the threshold\n    z"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    if (x > y) or (x < n) or (y > m) or (x > n) or (y < 1):\n        return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(i) for i in stdin.split()]\n    if n >= m:\n        return \"War\"\n    if x < n < y:\n        return \"War\"\n    if x <= n <= y and x < m < y:\n        return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, *T = [int(x) for x in stdin.split(\"\\n\") if x!= \"\"]\n    \n    # Calculate the time in seconds for each hand to point directly upward\n    t = 0\n    for i in range(N):\n        t += T[i] % 360\n    \n    return str(t)\n    \n    # example:\n    # 2\n    # 2\n    # 3\n    #\n    # 2\n    # 2\n    # 3\n    #\n    # 6\n    #\n    #\n    # input:\n    # 5\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    #\n    # output:\n    # 6\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split('\\n'))\n    count = 0\n    for i in range(N):\n        count += T[i]\n    return str(count)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n2\\n3\\n')\n    6\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    times = [int(t) for t in stdin.splitlines()[1:]]\n    return sum(times[i] - i for i in range(n))\n    "
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def gen_time():\n        for time in stdin:\n            yield int(time)\n    \n    def get_clock(time):\n        clock = 1\n        while True:\n            if time % clock == 0:\n                return clock\n            clock += 1\n    \n    clock1 = get_clock(next(gen_time()))\n    clock2 = get_clock(next(gen_time()))\n    clock3 = get_clock(next(gen_time()))\n    \n    for time in gen_time():\n        if clock1 == get_clock(time):\n            clock1 = get_clock(next(gen_time()))\n        if clock2 == get_clock(time):\n            clock2 = get_clock(next(gen_time()))\n        if clock3 == get_clock(time):\n            clock3 = get_clock(next(gen_time()))\n        if clock1 == 1 and clock2 == 1 and clock3 == 1:\n            return time\n    \n\"\"\"\n\n\nimport math\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    [N, *T] = map(int, stdin.split())\n    return math.ceil(sum(T)/N)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    return str(int(n) * 360 * int(t))\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = [int(x) for x in stdin.split()]\n    weights.sort()\n    s1 = sum(weights[:n//2])\n    s2 = sum(weights[n//2:])\n    return str(abs(s1 - s2))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    W = [int(x) for x in stdin.readline().split()]\n    T = int(stdin.readline())\n    S_1 = 0\n    S_2 = 0\n    for i in range(0, N):\n        if i < T:\n            S_1 += W[i]\n        else:\n            S_2 += W[i]\n    return abs(S_1 - S_2)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(i) for i in stdin.readline().strip().split(\" \")]\n    sorted_weights = sorted(weights)\n    # Calculating S_1\n    s1 = 0\n    for i in range(0, n):\n        s1 += sorted_weights[i]\n    # Calculating S_2\n    s2 = 0\n    for i in range(0, n):\n        s2 += sorted_weights[i]\n    # Calculating absolute difference\n    diff = abs(s1 - s2)\n    return str(diff)\n\nprint(solution(stdin.read()))\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum absolute difference of S_1 and S_2.\n\n    Args:\n        stdin (str): Input as a string.\n\n    Returns:\n        str: Answer as a string.\n    \"\"\"\n    N, *weights = [int(x) for x in stdin.split('\\n')[0].split()]\n    S_1, S_2 = 0, 0\n    for weight in weights:\n        if weight <= N//2:\n            S_1 += weight\n        else:\n            S_2 += weight\n\n    return str(min(abs(S_1 - S_2), S_1 + S_2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split('\\n')[0])\n    weights = stdin.split('\\n')[1].split()\n    res = float('inf')\n    for i in range(num):\n        for j in range(i, num):\n            if i!= j:\n                res = min(res, abs(sum([int(weights[k]) for k in range(i + 1)]) - sum([int(weights[k]) for k in range(j + 1)])))\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = stdin.strip().split('\\n')\n    n, *data = int(n), *map(int, data)\n    t, *data = max(data) + 1, data\n    data = sorted(data, reverse=True)\n    while t > 0:\n        x = data.pop()\n        t -= 1\n    return '\\n'.join((\n        *map(str, data),\n        *map(str, [x - t, x]),\n    ))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def sum_mass(T: int) -> int:\n        return sum(T)\n\n    stdin = [int(i) for i in stdin.split('\\n')[1].split()]\n    N = stdin[0]\n    W = stdin[1:]\n    print(abs(sum_mass(W[:N - 1]) - sum_mass(W[N - 1:])))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = stdin.splitlines()\n    n = int(n)\n\n    t = 0\n    for i in range(1, n):\n        if nums[i] < nums[t]:\n            t = i\n\n    nums = nums[:t] + nums[t+1:]\n    s1 = sum([int(x) for x in nums])\n    print(s1)\n\n    s2 = sum(int(x) for x in nums[1:])\n    print(s2)\n\n    return str(abs(s1-s2))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n    n_divisions = 100\n    weights_divided = []\n    min_difference = 100\n\n    for i in range(n_divisions + 1):\n        if i < n:\n            weights_divided.append(weights[i])\n        else:\n            weights_divided.append(0)\n\n    for i in range(n_divisions):\n        weight_left_side = weights_divided[i]\n        weight_right_side = weights_divided[i + 1]\n        min_difference = min(min_difference, abs(weight_left_side + weight_right_side - 100))\n\n    return str(min_difference)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split(' '))) for _ in range(n)]\n\n    r = 0\n    for j in range(m):\n        r = max(r, j)\n        for i in range(n):\n            if i == 0:\n                a[i][j] = a[i][j] - m\n            else:\n                a[i][j] = a[i][j] - (a[i][j - 1] + 1)\n        r = max(r, a[i][j])\n    return str(r)"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.splitlines()\n    #\n    # n, m = [int(x) for x in lines[0].split()]\n    #\n    # matrix = []\n    # for _ in range(n):\n    #     matrix.append([int(x) for x in lines[1 + _].split()])\n    #\n    # matrix.reverse()\n    #\n    # cost = 0\n    #\n    # for _ in range(m):\n    #     cost += m\n    #\n    # for i in range(n):\n    #     for j in range(m):\n    #         if matrix[i][j]!= (i + 1) * m + j + 1:\n    #             cost += 1\n    #             matrix[i][j] = (i + 1) * m + j + 1\n    #\n    # return cost\n\n    return min(\n        [\n            [(i - 1) * m + j + 1 for j in range(m)]\n            for i in range(1, n + 1)\n        ]\n    )\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    mat = [list(map(int, stdin.split(' ')[1:])) for _ in range(n)]\n    min_steps = 2 * m * n\n    for k in range(1, m + 1):\n        cur_col = [i[m - k + 1:m + 1] for i in mat]\n        new_col = [list(i) for i in zip(*cur_col)]\n        new_col_steps = m - k + 1\n        for i in range(n):\n            cur_col[i][:k], cur_col[i][k:] = new_col[i][:k], new_col[i][k:]\n            cur_col[i] = cur_col[i][::-1] + cur_col[i][1:] + cur_col[i][:1]\n            steps = sum(j!= k for j in cur_col[i])\n            min_steps = min(min_steps, steps)\n    return str(min_steps)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12')\n    '2'\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    arr = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    count = 0\n    for i in range(1, n):\n        for j in range(m):\n            old_value = arr[i][j]\n            new_value = (i - 1) * m + j\n            arr[i][j] = new_value\n            count += abs(new_value - old_value)\n\n            old_value = arr[j][i]\n            new_value = (j - 1) * m + i\n            arr[j][i] = new_value\n            count += abs(new_value - old_value)\n\n    return str(count)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get number of rows and columns from first line of stdin\n    rows, cols = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    # store entries in a 2d array\n    entries = [int(x) for x in stdin.split('\\n')[1:]]\n    # create a matrix\n    matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    # fill the matrix with entries\n    for row in range(rows):\n        for col in range(cols):\n            matrix[row][col] = entries[row * cols + col]\n    # perform the shift operations\n    for col in range(cols):\n        # shift column up\n        for row in range(1, rows):\n            matrix[row][col] = matrix[row - 1][col]\n        # set the entry at the first row to 0\n        matrix[0][col] = 0\n    # calculate the difference between the original and the resulting matrix\n    # note: this is the number of operations required to obtain the good matrix\n    diff = 0\n    for row in range(rows):\n        for col in range(cols):\n            diff += abs(matrix[row][col] - (row * cols + col))\n    return str(diff)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *l = stdin.split(\"\\n\")\n    n, m = int(n), int(m)\n    l = [[int(i) for i in l[j:j + m]] for j in range(0, len(l), m)]\n    res = 0\n    for i in range(1, n):\n        for j in range(m):\n            l[i - 1][j] += m * i\n            res = max(res, abs(l[i][j] - m * (n - 1)))\n            l[n - i][j] += m * i\n            res = max(res, abs(l[n - i][j] - m * (n - 1)))\n    for j in range(m):\n        l[n - 1][j] += m * n\n        res = max(res, abs(l[n - 1][j] - m * (n - 1)))\n    print(res)\n    return \"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    leftmost_col = min(matrix[i][0] for i in range(n))\n    rightmost_col = max(matrix[i][-1] for i in range(n))\n    total_rows = n * m\n    return str(total_rows - rightmost_col)\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for i in range(m):\n        for j in range(n):\n            # \u7b2c j \u4e2a\u5143\u7d20\u7684\u53f3\u8fb9\u7684\u6ca1\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5143\u7d20\u7684\u53f3\u8fb9\u7ed9\u4e00\u4e2a\u521d\u59cb\u503c\n            a[j][(j + 1) % n] = i + 1\n    return str(min(\n        sum(a[i][j] for j in range(n)) - min(a[i][j] for j in range(n)) - n * i\n        for i in range(m)\n    ))\n"
    }
]